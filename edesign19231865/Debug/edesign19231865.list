
C:\Users\Henry\Desktop\E-Design\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fdc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080021bc  080021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080021c0  080021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  080021c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  7 .bss          0000012c  2000008c  2000008c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b8  200001b8  0002008c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016cf7  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002aab  00000000  00000000  00036db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000744b  00000000  00000000  0003985e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b0  00000000  00000000  00040cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ce0  00000000  00000000  00041660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000621a  00000000  00000000  00042340  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000a360d  00000000  00000000  0004855a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000ebb67  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001d5c  00000000  00000000  000ebbe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0001ab06  00000000  00000000  000ed940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800214c 	.word	0x0800214c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	0800214c 	.word	0x0800214c

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f87c 	bl	80002d4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f836 	bl	8000254 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f817 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f001 fde2 	bl	8001dd0 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	200000bc 	.word	0x200000bc

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200000bc 	.word	0x200000bc

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	0c1b      	lsrs	r3, r3, #16
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	0200      	lsls	r0, r0, #8
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800024a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800024c:	60d3      	str	r3, [r2, #12]
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 0501 	mov.w	r5, #1
 8000270:	fa05 f303 	lsl.w	r3, r5, r3
 8000274:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	bf8c      	ite	hi
 800027a:	3c03      	subhi	r4, #3
 800027c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027e:	4019      	ands	r1, r3
 8000280:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000282:	fa05 f404 	lsl.w	r4, r5, r4
 8000286:	3c01      	subs	r4, #1
 8000288:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	ea42 0201 	orr.w	r2, r2, r1
 8000290:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	bfaf      	iteee	ge
 8000296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	f000 000f 	andlt.w	r0, r0, #15
 800029e:	4b06      	ldrlt	r3, [pc, #24]	; (80002b8 <HAL_NVIC_SetPriority+0x64>)
 80002a0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	bfa5      	ittet	ge
 80002a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002bc:	0942      	lsrs	r2, r0, #5
 80002be:	2301      	movs	r3, #1
 80002c0:	f000 001f 	and.w	r0, r0, #31
 80002c4:	fa03 f000 	lsl.w	r0, r3, r0
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d4:	3801      	subs	r0, #1
 80002d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002da:	d20a      	bcs.n	80002f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	21f0      	movs	r1, #240	; 0xf0
 80002e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e010 	.word	0xe000e010
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000302:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000304:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000306:	bf0c      	ite	eq
 8000308:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800030c:	f022 0204 	bicne.w	r2, r2, #4
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	4770      	bx	lr
 8000314:	e000e010 	.word	0xe000e010

08000318 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000318:	4770      	bx	lr

0800031a <HAL_SYSTICK_IRQHandler>:
{
 800031a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800031c:	f7ff fffc 	bl	8000318 <HAL_SYSTICK_Callback>
 8000320:	bd08      	pop	{r3, pc}

08000322 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000322:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000326:	2a02      	cmp	r2, #2
{  
 8000328:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800032a:	d003      	beq.n	8000334 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800032c:	2204      	movs	r2, #4
 800032e:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000330:	2001      	movs	r0, #1
 8000332:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000334:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000336:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000338:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800033a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800033c:	f021 010e 	bic.w	r1, r1, #14
 8000340:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000342:	6811      	ldr	r1, [r2, #0]
 8000344:	f021 0101 	bic.w	r1, r1, #1
 8000348:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800034a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800034c:	2101      	movs	r1, #1
 800034e:	fa01 f202 	lsl.w	r2, r1, r2
 8000352:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000354:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000356:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800035a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800035e:	b113      	cbz	r3, 8000366 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000360:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000362:	4620      	mov	r0, r4
 8000364:	bd10      	pop	{r4, pc}
 8000366:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000368:	bd10      	pop	{r4, pc}
	...

0800036c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000370:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000372:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000374:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80004dc <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000378:	4a56      	ldr	r2, [pc, #344]	; (80004d4 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037a:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800037c:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000380:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000382:	9c01      	ldr	r4, [sp, #4]
 8000384:	40dc      	lsrs	r4, r3
 8000386:	d102      	bne.n	800038e <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000388:	b005      	add	sp, #20
 800038a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800038e:	2401      	movs	r4, #1
 8000390:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000394:	9c01      	ldr	r4, [sp, #4]
 8000396:	ea14 050a 	ands.w	r5, r4, sl
 800039a:	f000 8093 	beq.w	80004c4 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800039e:	684c      	ldr	r4, [r1, #4]
 80003a0:	f024 0b10 	bic.w	fp, r4, #16
 80003a4:	f1bb 0f02 	cmp.w	fp, #2
 80003a8:	d111      	bne.n	80003ce <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80003aa:	08df      	lsrs	r7, r3, #3
 80003ac:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003b0:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80003b4:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003b6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80003ba:	fa09 fc0e 	lsl.w	ip, r9, lr
 80003be:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003c2:	690e      	ldr	r6, [r1, #16]
 80003c4:	fa06 f60e 	lsl.w	r6, r6, lr
 80003c8:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80003cc:	623e      	str	r6, [r7, #32]
 80003ce:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d2:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80003d4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80003da:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003dc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003e0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e2:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e6:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ea:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ee:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003f2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f4:	d811      	bhi.n	800041a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003f6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003f8:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003fc:	68ce      	ldr	r6, [r1, #12]
 80003fe:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000402:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000406:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000408:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800040a:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800040e:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000412:	409e      	lsls	r6, r3
 8000414:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000418:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800041a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800041c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800041e:	688e      	ldr	r6, [r1, #8]
 8000420:	fa06 f60c 	lsl.w	r6, r6, ip
 8000424:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000426:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000428:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042a:	d54b      	bpl.n	80004c4 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000430:	f046 0601 	orr.w	r6, r6, #1
 8000434:	f8c8 6018 	str.w	r6, [r8, #24]
 8000438:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800043c:	f023 0703 	bic.w	r7, r3, #3
 8000440:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000444:	f006 0601 	and.w	r6, r6, #1
 8000448:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800044c:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800044e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000454:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000456:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800045a:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800045e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000462:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000466:	d02f      	beq.n	80004c8 <HAL_GPIO_Init+0x15c>
 8000468:	4e1b      	ldr	r6, [pc, #108]	; (80004d8 <HAL_GPIO_Init+0x16c>)
 800046a:	42b0      	cmp	r0, r6
 800046c:	d02e      	beq.n	80004cc <HAL_GPIO_Init+0x160>
 800046e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000472:	42b0      	cmp	r0, r6
 8000474:	d02c      	beq.n	80004d0 <HAL_GPIO_Init+0x164>
 8000476:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800047a:	42b0      	cmp	r0, r6
 800047c:	bf14      	ite	ne
 800047e:	2605      	movne	r6, #5
 8000480:	2603      	moveq	r6, #3
 8000482:	fa06 f60e 	lsl.w	r6, r6, lr
 8000486:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800048a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800048c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800048e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000490:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000494:	bf0c      	ite	eq
 8000496:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000498:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800049a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800049c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004a2:	bf0c      	ite	eq
 80004a4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004a6:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80004a8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80004aa:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004ac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004b0:	bf0c      	ite	eq
 80004b2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004b4:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80004b6:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80004b8:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ba:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004bc:	bf54      	ite	pl
 80004be:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80004c0:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80004c2:	60d6      	str	r6, [r2, #12]
    position++;
 80004c4:	3301      	adds	r3, #1
 80004c6:	e75c      	b.n	8000382 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004c8:	2600      	movs	r6, #0
 80004ca:	e7da      	b.n	8000482 <HAL_GPIO_Init+0x116>
 80004cc:	2601      	movs	r6, #1
 80004ce:	e7d8      	b.n	8000482 <HAL_GPIO_Init+0x116>
 80004d0:	2602      	movs	r6, #2
 80004d2:	e7d6      	b.n	8000482 <HAL_GPIO_Init+0x116>
 80004d4:	40010400 	.word	0x40010400
 80004d8:	48000400 	.word	0x48000400
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004e0:	b10a      	cbz	r2, 80004e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004e2:	6181      	str	r1, [r0, #24]
 80004e4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004e6:	6281      	str	r1, [r0, #40]	; 0x28
 80004e8:	4770      	bx	lr
	...

080004ec <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ec:	6803      	ldr	r3, [r0, #0]
 80004ee:	07da      	lsls	r2, r3, #31
{
 80004f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80004f4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004f6:	d411      	bmi.n	800051c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004f8:	682b      	ldr	r3, [r5, #0]
 80004fa:	079b      	lsls	r3, r3, #30
 80004fc:	f100 8088 	bmi.w	8000610 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000500:	682b      	ldr	r3, [r5, #0]
 8000502:	071c      	lsls	r4, r3, #28
 8000504:	f100 80f8 	bmi.w	80006f8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000508:	682b      	ldr	r3, [r5, #0]
 800050a:	0758      	lsls	r0, r3, #29
 800050c:	f100 8141 	bmi.w	8000792 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000510:	69ea      	ldr	r2, [r5, #28]
 8000512:	2a00      	cmp	r2, #0
 8000514:	f040 81d7 	bne.w	80008c6 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000518:	2000      	movs	r0, #0
 800051a:	e021      	b.n	8000560 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800051c:	4cba      	ldr	r4, [pc, #744]	; (8000808 <HAL_RCC_OscConfig+0x31c>)
 800051e:	6863      	ldr	r3, [r4, #4]
 8000520:	f003 030c 	and.w	r3, r3, #12
 8000524:	2b04      	cmp	r3, #4
 8000526:	d007      	beq.n	8000538 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000528:	6863      	ldr	r3, [r4, #4]
 800052a:	f003 030c 	and.w	r3, r3, #12
 800052e:	2b08      	cmp	r3, #8
 8000530:	d119      	bne.n	8000566 <HAL_RCC_OscConfig+0x7a>
 8000532:	6863      	ldr	r3, [r4, #4]
 8000534:	03df      	lsls	r7, r3, #15
 8000536:	d516      	bpl.n	8000566 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800053c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000540:	6821      	ldr	r1, [r4, #0]
 8000542:	fa93 f3a3 	rbit	r3, r3
 8000546:	fab3 f383 	clz	r3, r3
 800054a:	f003 031f 	and.w	r3, r3, #31
 800054e:	2201      	movs	r2, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	420b      	tst	r3, r1
 8000556:	d0cf      	beq.n	80004f8 <HAL_RCC_OscConfig+0xc>
 8000558:	686b      	ldr	r3, [r5, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1cc      	bne.n	80004f8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800055e:	2001      	movs	r0, #1
}
 8000560:	b002      	add	sp, #8
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000566:	686a      	ldr	r2, [r5, #4]
 8000568:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800056c:	d125      	bne.n	80005ba <HAL_RCC_OscConfig+0xce>
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000574:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000576:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000578:	68a9      	ldr	r1, [r5, #8]
 800057a:	f023 030f 	bic.w	r3, r3, #15
 800057e:	430b      	orrs	r3, r1
 8000580:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000582:	b352      	cbz	r2, 80005da <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000584:	f7ff fe4e 	bl	8000224 <HAL_GetTick>
 8000588:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800058c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800058e:	2701      	movs	r7, #1
 8000590:	fa96 f3a6 	rbit	r3, r6
 8000594:	6822      	ldr	r2, [r4, #0]
 8000596:	fa96 f3a6 	rbit	r3, r6
 800059a:	fab3 f383 	clz	r3, r3
 800059e:	f003 031f 	and.w	r3, r3, #31
 80005a2:	fa07 f303 	lsl.w	r3, r7, r3
 80005a6:	4213      	tst	r3, r2
 80005a8:	d1a6      	bne.n	80004f8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005aa:	f7ff fe3b 	bl	8000224 <HAL_GetTick>
 80005ae:	eba0 0008 	sub.w	r0, r0, r8
 80005b2:	2864      	cmp	r0, #100	; 0x64
 80005b4:	d9ec      	bls.n	8000590 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 80005b6:	2003      	movs	r0, #3
 80005b8:	e7d2      	b.n	8000560 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	b932      	cbnz	r2, 80005cc <HAL_RCC_OscConfig+0xe0>
 80005be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c2:	6023      	str	r3, [r4, #0]
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ca:	e7d3      	b.n	8000574 <HAL_RCC_OscConfig+0x88>
 80005cc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005d0:	d1f5      	bne.n	80005be <HAL_RCC_OscConfig+0xd2>
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	6023      	str	r3, [r4, #0]
 80005d8:	e7c9      	b.n	800056e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80005da:	f7ff fe23 	bl	8000224 <HAL_GetTick>
 80005de:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005e2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005e4:	2701      	movs	r7, #1
 80005e6:	fa96 f3a6 	rbit	r3, r6
 80005ea:	6822      	ldr	r2, [r4, #0]
 80005ec:	fa96 f3a6 	rbit	r3, r6
 80005f0:	fab3 f383 	clz	r3, r3
 80005f4:	f003 031f 	and.w	r3, r3, #31
 80005f8:	fa07 f303 	lsl.w	r3, r7, r3
 80005fc:	4213      	tst	r3, r2
 80005fe:	f43f af7b 	beq.w	80004f8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000602:	f7ff fe0f 	bl	8000224 <HAL_GetTick>
 8000606:	eba0 0008 	sub.w	r0, r0, r8
 800060a:	2864      	cmp	r0, #100	; 0x64
 800060c:	d9eb      	bls.n	80005e6 <HAL_RCC_OscConfig+0xfa>
 800060e:	e7d2      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000610:	4c7d      	ldr	r4, [pc, #500]	; (8000808 <HAL_RCC_OscConfig+0x31c>)
 8000612:	6863      	ldr	r3, [r4, #4]
 8000614:	f013 0f0c 	tst.w	r3, #12
 8000618:	d007      	beq.n	800062a <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800061a:	6863      	ldr	r3, [r4, #4]
 800061c:	f003 030c 	and.w	r3, r3, #12
 8000620:	2b08      	cmp	r3, #8
 8000622:	d121      	bne.n	8000668 <HAL_RCC_OscConfig+0x17c>
 8000624:	6863      	ldr	r3, [r4, #4]
 8000626:	03de      	lsls	r6, r3, #15
 8000628:	d41e      	bmi.n	8000668 <HAL_RCC_OscConfig+0x17c>
 800062a:	2302      	movs	r3, #2
 800062c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000630:	6821      	ldr	r1, [r4, #0]
 8000632:	fa93 f3a3 	rbit	r3, r3
 8000636:	fab3 f383 	clz	r3, r3
 800063a:	f003 031f 	and.w	r3, r3, #31
 800063e:	2201      	movs	r2, #1
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	420b      	tst	r3, r1
 8000646:	d002      	beq.n	800064e <HAL_RCC_OscConfig+0x162>
 8000648:	692b      	ldr	r3, [r5, #16]
 800064a:	4293      	cmp	r3, r2
 800064c:	d187      	bne.n	800055e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800064e:	6821      	ldr	r1, [r4, #0]
 8000650:	23f8      	movs	r3, #248	; 0xf8
 8000652:	fa93 f3a3 	rbit	r3, r3
 8000656:	fab3 f283 	clz	r2, r3
 800065a:	696b      	ldr	r3, [r5, #20]
 800065c:	4093      	lsls	r3, r2
 800065e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000662:	4313      	orrs	r3, r2
 8000664:	6023      	str	r3, [r4, #0]
 8000666:	e74b      	b.n	8000500 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000668:	692a      	ldr	r2, [r5, #16]
 800066a:	2601      	movs	r6, #1
 800066c:	b30a      	cbz	r2, 80006b2 <HAL_RCC_OscConfig+0x1c6>
 800066e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000672:	fab3 f383 	clz	r3, r3
 8000676:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800067a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	2702      	movs	r7, #2
 8000682:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000684:	f7ff fdce 	bl	8000224 <HAL_GetTick>
 8000688:	4680      	mov	r8, r0
 800068a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800068e:	6822      	ldr	r2, [r4, #0]
 8000690:	fa97 f3a7 	rbit	r3, r7
 8000694:	fab3 f383 	clz	r3, r3
 8000698:	f003 031f 	and.w	r3, r3, #31
 800069c:	fa06 f303 	lsl.w	r3, r6, r3
 80006a0:	4213      	tst	r3, r2
 80006a2:	d1d4      	bne.n	800064e <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a4:	f7ff fdbe 	bl	8000224 <HAL_GetTick>
 80006a8:	eba0 0008 	sub.w	r0, r0, r8
 80006ac:	2802      	cmp	r0, #2
 80006ae:	d9ec      	bls.n	800068a <HAL_RCC_OscConfig+0x19e>
 80006b0:	e781      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
 80006b2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006b6:	fab3 f383 	clz	r3, r3
 80006ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	2702      	movs	r7, #2
 80006c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006c8:	f7ff fdac 	bl	8000224 <HAL_GetTick>
 80006cc:	4680      	mov	r8, r0
 80006ce:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006d2:	6822      	ldr	r2, [r4, #0]
 80006d4:	fa97 f3a7 	rbit	r3, r7
 80006d8:	fab3 f383 	clz	r3, r3
 80006dc:	f003 031f 	and.w	r3, r3, #31
 80006e0:	fa06 f303 	lsl.w	r3, r6, r3
 80006e4:	4213      	tst	r3, r2
 80006e6:	f43f af0b 	beq.w	8000500 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ea:	f7ff fd9b 	bl	8000224 <HAL_GetTick>
 80006ee:	eba0 0008 	sub.w	r0, r0, r8
 80006f2:	2802      	cmp	r0, #2
 80006f4:	d9eb      	bls.n	80006ce <HAL_RCC_OscConfig+0x1e2>
 80006f6:	e75e      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006f8:	69aa      	ldr	r2, [r5, #24]
 80006fa:	4e43      	ldr	r6, [pc, #268]	; (8000808 <HAL_RCC_OscConfig+0x31c>)
 80006fc:	4943      	ldr	r1, [pc, #268]	; (800080c <HAL_RCC_OscConfig+0x320>)
 80006fe:	2401      	movs	r4, #1
 8000700:	b31a      	cbz	r2, 800074a <HAL_RCC_OscConfig+0x25e>
 8000702:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000706:	fab3 f383 	clz	r3, r3
 800070a:	440b      	add	r3, r1
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	2702      	movs	r7, #2
 8000710:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000712:	f7ff fd87 	bl	8000224 <HAL_GetTick>
 8000716:	4680      	mov	r8, r0
 8000718:	fa97 f3a7 	rbit	r3, r7
 800071c:	fa97 f3a7 	rbit	r3, r7
 8000720:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000724:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000726:	fa97 f3a7 	rbit	r3, r7
 800072a:	fab3 f383 	clz	r3, r3
 800072e:	f003 031f 	and.w	r3, r3, #31
 8000732:	fa04 f303 	lsl.w	r3, r4, r3
 8000736:	4213      	tst	r3, r2
 8000738:	f47f aee6 	bne.w	8000508 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800073c:	f7ff fd72 	bl	8000224 <HAL_GetTick>
 8000740:	eba0 0008 	sub.w	r0, r0, r8
 8000744:	2802      	cmp	r0, #2
 8000746:	d9e7      	bls.n	8000718 <HAL_RCC_OscConfig+0x22c>
 8000748:	e735      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
 800074a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800074e:	fab3 f383 	clz	r3, r3
 8000752:	440b      	add	r3, r1
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	2702      	movs	r7, #2
 8000758:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800075a:	f7ff fd63 	bl	8000224 <HAL_GetTick>
 800075e:	4680      	mov	r8, r0
 8000760:	fa97 f3a7 	rbit	r3, r7
 8000764:	fa97 f3a7 	rbit	r3, r7
 8000768:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800076c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800076e:	fa97 f3a7 	rbit	r3, r7
 8000772:	fab3 f383 	clz	r3, r3
 8000776:	f003 031f 	and.w	r3, r3, #31
 800077a:	fa04 f303 	lsl.w	r3, r4, r3
 800077e:	4213      	tst	r3, r2
 8000780:	f43f aec2 	beq.w	8000508 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000784:	f7ff fd4e 	bl	8000224 <HAL_GetTick>
 8000788:	eba0 0008 	sub.w	r0, r0, r8
 800078c:	2802      	cmp	r0, #2
 800078e:	d9e7      	bls.n	8000760 <HAL_RCC_OscConfig+0x274>
 8000790:	e711      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000792:	4c1d      	ldr	r4, [pc, #116]	; (8000808 <HAL_RCC_OscConfig+0x31c>)
 8000794:	69e3      	ldr	r3, [r4, #28]
 8000796:	00d9      	lsls	r1, r3, #3
 8000798:	d434      	bmi.n	8000804 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	69e3      	ldr	r3, [r4, #28]
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	61e3      	str	r3, [r4, #28]
 80007a2:	69e3      	ldr	r3, [r4, #28]
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007ac:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007ae:	4f18      	ldr	r7, [pc, #96]	; (8000810 <HAL_RCC_OscConfig+0x324>)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	05da      	lsls	r2, r3, #23
 80007b4:	d52e      	bpl.n	8000814 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007b6:	68eb      	ldr	r3, [r5, #12]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d13c      	bne.n	8000836 <HAL_RCC_OscConfig+0x34a>
 80007bc:	6a23      	ldr	r3, [r4, #32]
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007c4:	f7ff fd2e 	bl	8000224 <HAL_GetTick>
 80007c8:	2702      	movs	r7, #2
 80007ca:	4682      	mov	sl, r0
 80007cc:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007ce:	f04f 0801 	mov.w	r8, #1
 80007d2:	fa97 f3a7 	rbit	r3, r7
 80007d6:	fa97 f3a7 	rbit	r3, r7
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d06b      	beq.n	80008b6 <HAL_RCC_OscConfig+0x3ca>
 80007de:	6a22      	ldr	r2, [r4, #32]
 80007e0:	fa99 f3a9 	rbit	r3, r9
 80007e4:	fab3 f383 	clz	r3, r3
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	fa08 f303 	lsl.w	r3, r8, r3
 80007f0:	4213      	tst	r3, r2
 80007f2:	d057      	beq.n	80008a4 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	f43f ae8b 	beq.w	8000510 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007fa:	69e3      	ldr	r3, [r4, #28]
 80007fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000800:	61e3      	str	r3, [r4, #28]
 8000802:	e685      	b.n	8000510 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000804:	2600      	movs	r6, #0
 8000806:	e7d2      	b.n	80007ae <HAL_RCC_OscConfig+0x2c2>
 8000808:	40021000 	.word	0x40021000
 800080c:	10908120 	.word	0x10908120
 8000810:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800081c:	f7ff fd02 	bl	8000224 <HAL_GetTick>
 8000820:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	d4c6      	bmi.n	80007b6 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000828:	f7ff fcfc 	bl	8000224 <HAL_GetTick>
 800082c:	eba0 0008 	sub.w	r0, r0, r8
 8000830:	2864      	cmp	r0, #100	; 0x64
 8000832:	d9f6      	bls.n	8000822 <HAL_RCC_OscConfig+0x336>
 8000834:	e6bf      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000836:	bb3b      	cbnz	r3, 8000888 <HAL_RCC_OscConfig+0x39c>
 8000838:	6a23      	ldr	r3, [r4, #32]
 800083a:	f023 0301 	bic.w	r3, r3, #1
 800083e:	6223      	str	r3, [r4, #32]
 8000840:	6a23      	ldr	r3, [r4, #32]
 8000842:	f023 0304 	bic.w	r3, r3, #4
 8000846:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000848:	f7ff fcec 	bl	8000224 <HAL_GetTick>
 800084c:	2702      	movs	r7, #2
 800084e:	4682      	mov	sl, r0
 8000850:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000852:	f04f 0801 	mov.w	r8, #1
 8000856:	fa97 f3a7 	rbit	r3, r7
 800085a:	fa97 f3a7 	rbit	r3, r7
 800085e:	b373      	cbz	r3, 80008be <HAL_RCC_OscConfig+0x3d2>
 8000860:	6a22      	ldr	r2, [r4, #32]
 8000862:	fa99 f3a9 	rbit	r3, r9
 8000866:	fab3 f383 	clz	r3, r3
 800086a:	f003 031f 	and.w	r3, r3, #31
 800086e:	fa08 f303 	lsl.w	r3, r8, r3
 8000872:	4213      	tst	r3, r2
 8000874:	d0be      	beq.n	80007f4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000876:	f7ff fcd5 	bl	8000224 <HAL_GetTick>
 800087a:	f241 3388 	movw	r3, #5000	; 0x1388
 800087e:	eba0 000a 	sub.w	r0, r0, sl
 8000882:	4298      	cmp	r0, r3
 8000884:	d9e7      	bls.n	8000856 <HAL_RCC_OscConfig+0x36a>
 8000886:	e696      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000888:	2b05      	cmp	r3, #5
 800088a:	6a23      	ldr	r3, [r4, #32]
 800088c:	d103      	bne.n	8000896 <HAL_RCC_OscConfig+0x3aa>
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6223      	str	r3, [r4, #32]
 8000894:	e792      	b.n	80007bc <HAL_RCC_OscConfig+0x2d0>
 8000896:	f023 0301 	bic.w	r3, r3, #1
 800089a:	6223      	str	r3, [r4, #32]
 800089c:	6a23      	ldr	r3, [r4, #32]
 800089e:	f023 0304 	bic.w	r3, r3, #4
 80008a2:	e78e      	b.n	80007c2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008a4:	f7ff fcbe 	bl	8000224 <HAL_GetTick>
 80008a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ac:	eba0 000a 	sub.w	r0, r0, sl
 80008b0:	4298      	cmp	r0, r3
 80008b2:	d98e      	bls.n	80007d2 <HAL_RCC_OscConfig+0x2e6>
 80008b4:	e67f      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
 80008b6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008bc:	e790      	b.n	80007e0 <HAL_RCC_OscConfig+0x2f4>
 80008be:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008c4:	e7cd      	b.n	8000862 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008c6:	4c41      	ldr	r4, [pc, #260]	; (80009cc <HAL_RCC_OscConfig+0x4e0>)
 80008c8:	6863      	ldr	r3, [r4, #4]
 80008ca:	f003 030c 	and.w	r3, r3, #12
 80008ce:	2b08      	cmp	r3, #8
 80008d0:	f43f ae45 	beq.w	800055e <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008d4:	2a02      	cmp	r2, #2
 80008d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008da:	d152      	bne.n	8000982 <HAL_RCC_OscConfig+0x496>
 80008dc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008e0:	fab3 f383 	clz	r3, r3
 80008e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f2:	f7ff fc97 	bl	8000224 <HAL_GetTick>
 80008f6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008fa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008fc:	2601      	movs	r6, #1
 80008fe:	fa97 f3a7 	rbit	r3, r7
 8000902:	6822      	ldr	r2, [r4, #0]
 8000904:	fa97 f3a7 	rbit	r3, r7
 8000908:	fab3 f383 	clz	r3, r3
 800090c:	f003 031f 	and.w	r3, r3, #31
 8000910:	fa06 f303 	lsl.w	r3, r6, r3
 8000914:	4213      	tst	r3, r2
 8000916:	d12d      	bne.n	8000974 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000918:	6862      	ldr	r2, [r4, #4]
 800091a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800091c:	6a29      	ldr	r1, [r5, #32]
 800091e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000922:	430b      	orrs	r3, r1
 8000924:	4313      	orrs	r3, r2
 8000926:	6063      	str	r3, [r4, #4]
 8000928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800092c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000930:	fab3 f383 	clz	r3, r3
 8000934:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000938:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000942:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000944:	f7ff fc6e 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000948:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800094a:	4607      	mov	r7, r0
 800094c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000950:	6822      	ldr	r2, [r4, #0]
 8000952:	fa95 f3a5 	rbit	r3, r5
 8000956:	fab3 f383 	clz	r3, r3
 800095a:	f003 031f 	and.w	r3, r3, #31
 800095e:	fa06 f303 	lsl.w	r3, r6, r3
 8000962:	4213      	tst	r3, r2
 8000964:	f47f add8 	bne.w	8000518 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000968:	f7ff fc5c 	bl	8000224 <HAL_GetTick>
 800096c:	1bc0      	subs	r0, r0, r7
 800096e:	2802      	cmp	r0, #2
 8000970:	d9ec      	bls.n	800094c <HAL_RCC_OscConfig+0x460>
 8000972:	e620      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000974:	f7ff fc56 	bl	8000224 <HAL_GetTick>
 8000978:	eba0 0008 	sub.w	r0, r0, r8
 800097c:	2802      	cmp	r0, #2
 800097e:	d9be      	bls.n	80008fe <HAL_RCC_OscConfig+0x412>
 8000980:	e619      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
 8000982:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000986:	fab3 f383 	clz	r3, r3
 800098a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800098e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000998:	f7ff fc44 	bl	8000224 <HAL_GetTick>
 800099c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009a0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009a2:	2601      	movs	r6, #1
 80009a4:	fa95 f3a5 	rbit	r3, r5
 80009a8:	6822      	ldr	r2, [r4, #0]
 80009aa:	fa95 f3a5 	rbit	r3, r5
 80009ae:	fab3 f383 	clz	r3, r3
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	fa06 f303 	lsl.w	r3, r6, r3
 80009ba:	4213      	tst	r3, r2
 80009bc:	f43f adac 	beq.w	8000518 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c0:	f7ff fc30 	bl	8000224 <HAL_GetTick>
 80009c4:	1bc0      	subs	r0, r0, r7
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9ec      	bls.n	80009a4 <HAL_RCC_OscConfig+0x4b8>
 80009ca:	e5f4      	b.n	80005b6 <HAL_RCC_OscConfig+0xca>
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009d0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009d2:	4c13      	ldr	r4, [pc, #76]	; (8000a20 <HAL_RCC_GetSysClockFreq+0x50>)
 80009d4:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009d6:	f001 030c 	and.w	r3, r1, #12
 80009da:	2b08      	cmp	r3, #8
 80009dc:	d11e      	bne.n	8000a1c <HAL_RCC_GetSysClockFreq+0x4c>
 80009de:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009e2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009e6:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009ea:	fab3 f383 	clz	r3, r3
 80009ee:	fa22 f303 	lsr.w	r3, r2, r3
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x54>)
 80009f4:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009f8:	220f      	movs	r2, #15
 80009fa:	fa92 f2a2 	rbit	r2, r2
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	40d3      	lsrs	r3, r2
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a0a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a0c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a0e:	bf4a      	itet	mi
 8000a10:	4b06      	ldrmi	r3, [pc, #24]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a12:	4b07      	ldrpl	r3, [pc, #28]	; (8000a30 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a14:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a18:	4358      	muls	r0, r3
 8000a1a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a1e:	bd10      	pop	{r4, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	08002164 	.word	0x08002164
 8000a28:	08002174 	.word	0x08002174
 8000a2c:	007a1200 	.word	0x007a1200
 8000a30:	003d0900 	.word	0x003d0900

08000a34 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a34:	4a5c      	ldr	r2, [pc, #368]	; (8000ba8 <HAL_RCC_ClockConfig+0x174>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	428b      	cmp	r3, r1
{
 8000a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a42:	4606      	mov	r6, r0
 8000a44:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a46:	d330      	bcc.n	8000aaa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a48:	6832      	ldr	r2, [r6, #0]
 8000a4a:	0791      	lsls	r1, r2, #30
 8000a4c:	d43a      	bmi.n	8000ac4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a4e:	07d2      	lsls	r2, r2, #31
 8000a50:	d440      	bmi.n	8000ad4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a52:	4a55      	ldr	r2, [pc, #340]	; (8000ba8 <HAL_RCC_ClockConfig+0x174>)
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	429d      	cmp	r5, r3
 8000a5c:	f0c0 8092 	bcc.w	8000b84 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a60:	6832      	ldr	r2, [r6, #0]
 8000a62:	4c52      	ldr	r4, [pc, #328]	; (8000bac <HAL_RCC_ClockConfig+0x178>)
 8000a64:	f012 0f04 	tst.w	r2, #4
 8000a68:	f040 8097 	bne.w	8000b9a <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a6c:	0713      	lsls	r3, r2, #28
 8000a6e:	d506      	bpl.n	8000a7e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a70:	6863      	ldr	r3, [r4, #4]
 8000a72:	6932      	ldr	r2, [r6, #16]
 8000a74:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a7c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a7e:	f7ff ffa7 	bl	80009d0 <HAL_RCC_GetSysClockFreq>
 8000a82:	6863      	ldr	r3, [r4, #4]
 8000a84:	22f0      	movs	r2, #240	; 0xf0
 8000a86:	fa92 f2a2 	rbit	r2, r2
 8000a8a:	fab2 f282 	clz	r2, r2
 8000a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a92:	40d3      	lsrs	r3, r2
 8000a94:	4a46      	ldr	r2, [pc, #280]	; (8000bb0 <HAL_RCC_ClockConfig+0x17c>)
 8000a96:	5cd3      	ldrb	r3, [r2, r3]
 8000a98:	40d8      	lsrs	r0, r3
 8000a9a:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <HAL_RCC_ClockConfig+0x180>)
 8000a9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fb92 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000aa4:	2000      	movs	r0, #0
}
 8000aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aaa:	6813      	ldr	r3, [r2, #0]
 8000aac:	f023 0307 	bic.w	r3, r3, #7
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ab4:	6813      	ldr	r3, [r2, #0]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	4299      	cmp	r1, r3
 8000abc:	d0c4      	beq.n	8000a48 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000abe:	2001      	movs	r0, #1
 8000ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ac4:	4939      	ldr	r1, [pc, #228]	; (8000bac <HAL_RCC_ClockConfig+0x178>)
 8000ac6:	68b0      	ldr	r0, [r6, #8]
 8000ac8:	684b      	ldr	r3, [r1, #4]
 8000aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	604b      	str	r3, [r1, #4]
 8000ad2:	e7bc      	b.n	8000a4e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ad4:	6872      	ldr	r2, [r6, #4]
 8000ad6:	4c35      	ldr	r4, [pc, #212]	; (8000bac <HAL_RCC_ClockConfig+0x178>)
 8000ad8:	2a01      	cmp	r2, #1
 8000ada:	d128      	bne.n	8000b2e <HAL_RCC_ClockConfig+0xfa>
 8000adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae4:	6821      	ldr	r1, [r4, #0]
 8000ae6:	fa93 f3a3 	rbit	r3, r3
 8000aea:	fab3 f383 	clz	r3, r3
 8000aee:	f003 031f 	and.w	r3, r3, #31
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000af8:	d0e1      	beq.n	8000abe <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000afa:	6863      	ldr	r3, [r4, #4]
 8000afc:	f023 0303 	bic.w	r3, r3, #3
 8000b00:	431a      	orrs	r2, r3
 8000b02:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000b04:	f7ff fb8e 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b08:	6873      	ldr	r3, [r6, #4]
 8000b0a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000b0c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b0e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b12:	d11f      	bne.n	8000b54 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b14:	6863      	ldr	r3, [r4, #4]
 8000b16:	f003 030c 	and.w	r3, r3, #12
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d099      	beq.n	8000a52 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1e:	f7ff fb81 	bl	8000224 <HAL_GetTick>
 8000b22:	1bc0      	subs	r0, r0, r7
 8000b24:	4540      	cmp	r0, r8
 8000b26:	d9f5      	bls.n	8000b14 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000b28:	2003      	movs	r0, #3
 8000b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b2e:	2a02      	cmp	r2, #2
 8000b30:	bf0c      	ite	eq
 8000b32:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b36:	2302      	movne	r3, #2
 8000b38:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3c:	6820      	ldr	r0, [r4, #0]
 8000b3e:	fa93 f3a3 	rbit	r3, r3
 8000b42:	fab3 f383 	clz	r3, r3
 8000b46:	f003 031f 	and.w	r3, r3, #31
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	4203      	tst	r3, r0
 8000b52:	e7d1      	b.n	8000af8 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d110      	bne.n	8000b7a <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	f43f af77 	beq.w	8000a52 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b64:	f7ff fb5e 	bl	8000224 <HAL_GetTick>
 8000b68:	1bc0      	subs	r0, r0, r7
 8000b6a:	4540      	cmp	r0, r8
 8000b6c:	d9f4      	bls.n	8000b58 <HAL_RCC_ClockConfig+0x124>
 8000b6e:	e7db      	b.n	8000b28 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b70:	f7ff fb58 	bl	8000224 <HAL_GetTick>
 8000b74:	1bc0      	subs	r0, r0, r7
 8000b76:	4540      	cmp	r0, r8
 8000b78:	d8d6      	bhi.n	8000b28 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b7a:	6863      	ldr	r3, [r4, #4]
 8000b7c:	f013 0f0c 	tst.w	r3, #12
 8000b80:	d1f6      	bne.n	8000b70 <HAL_RCC_ClockConfig+0x13c>
 8000b82:	e766      	b.n	8000a52 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b84:	6813      	ldr	r3, [r2, #0]
 8000b86:	f023 0307 	bic.w	r3, r3, #7
 8000b8a:	432b      	orrs	r3, r5
 8000b8c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b8e:	6813      	ldr	r3, [r2, #0]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	429d      	cmp	r5, r3
 8000b96:	d192      	bne.n	8000abe <HAL_RCC_ClockConfig+0x8a>
 8000b98:	e762      	b.n	8000a60 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b9a:	6863      	ldr	r3, [r4, #4]
 8000b9c:	68f1      	ldr	r1, [r6, #12]
 8000b9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	6063      	str	r3, [r4, #4]
 8000ba6:	e761      	b.n	8000a6c <HAL_RCC_ClockConfig+0x38>
 8000ba8:	40022000 	.word	0x40022000
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	08002198 	.word	0x08002198
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bb8:	4b01      	ldr	r3, [pc, #4]	; (8000bc0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000bc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	fa92 f2a2 	rbit	r2, r2
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bd8:	40d3      	lsrs	r3, r2
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000be0:	6810      	ldr	r0, [r2, #0]
}    
 8000be2:	40d8      	lsrs	r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	080021a8 	.word	0x080021a8
 8000bf0:	20000000 	.word	0x20000000

08000bf4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000bf6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	fa92 f2a2 	rbit	r2, r2
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c08:	40d3      	lsrs	r3, r2
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c0c:	5cd3      	ldrb	r3, [r2, r3]
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c10:	6810      	ldr	r0, [r2, #0]
} 
 8000c12:	40d8      	lsrs	r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	080021a8 	.word	0x080021a8
 8000c20:	20000000 	.word	0x20000000

08000c24 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c24:	6803      	ldr	r3, [r0, #0]
{
 8000c26:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c2a:	03dc      	lsls	r4, r3, #15
{
 8000c2c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c2e:	d520      	bpl.n	8000c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c30:	4c55      	ldr	r4, [pc, #340]	; (8000d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000c32:	69e3      	ldr	r3, [r4, #28]
 8000c34:	00d8      	lsls	r0, r3, #3
 8000c36:	d44d      	bmi.n	8000cd4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	69e3      	ldr	r3, [r4, #28]
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	61e3      	str	r3, [r4, #28]
 8000c40:	69e3      	ldr	r3, [r4, #28]
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c4a:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c4c:	4f4f      	ldr	r7, [pc, #316]	; (8000d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	05d9      	lsls	r1, r3, #23
 8000c52:	d541      	bpl.n	8000cd8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c54:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c56:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c5a:	d151      	bne.n	8000d00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c5c:	6a23      	ldr	r3, [r4, #32]
 8000c5e:	686a      	ldr	r2, [r5, #4]
 8000c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c64:	4313      	orrs	r3, r2
 8000c66:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c68:	b11e      	cbz	r6, 8000c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c6a:	69e3      	ldr	r3, [r4, #28]
 8000c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c72:	6828      	ldr	r0, [r5, #0]
 8000c74:	07c4      	lsls	r4, r0, #31
 8000c76:	d506      	bpl.n	8000c86 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c78:	4a43      	ldr	r2, [pc, #268]	; (8000d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000c7a:	68a9      	ldr	r1, [r5, #8]
 8000c7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c7e:	f023 0303 	bic.w	r3, r3, #3
 8000c82:	430b      	orrs	r3, r1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c86:	0681      	lsls	r1, r0, #26
 8000c88:	d506      	bpl.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c8a:	4a3f      	ldr	r2, [pc, #252]	; (8000d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000c8c:	68e9      	ldr	r1, [r5, #12]
 8000c8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c90:	f023 0310 	bic.w	r3, r3, #16
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000c98:	0602      	lsls	r2, r0, #24
 8000c9a:	d506      	bpl.n	8000caa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000c9c:	4a3a      	ldr	r2, [pc, #232]	; (8000d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000c9e:	6929      	ldr	r1, [r5, #16]
 8000ca0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ca2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000caa:	04c3      	lsls	r3, r0, #19
 8000cac:	d506      	bpl.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000cae:	4a36      	ldr	r2, [pc, #216]	; (8000d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cb0:	6969      	ldr	r1, [r5, #20]
 8000cb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8000cbc:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8000cc0:	d01b      	beq.n	8000cfa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8000cc2:	4a31      	ldr	r2, [pc, #196]	; (8000d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cc4:	69a9      	ldr	r1, [r5, #24]
 8000cc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	e012      	b.n	8000cfa <HAL_RCCEx_PeriphCLKConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	e7b9      	b.n	8000c4c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000ce0:	f7ff faa0 	bl	8000224 <HAL_GetTick>
 8000ce4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	05da      	lsls	r2, r3, #23
 8000cea:	d4b3      	bmi.n	8000c54 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cec:	f7ff fa9a 	bl	8000224 <HAL_GetTick>
 8000cf0:	eba0 0008 	sub.w	r0, r0, r8
 8000cf4:	2864      	cmp	r0, #100	; 0x64
 8000cf6:	d9f6      	bls.n	8000ce6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 8000cf8:	2003      	movs	r0, #3
}
 8000cfa:	b002      	add	sp, #8
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d00:	686a      	ldr	r2, [r5, #4]
 8000d02:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d0a8      	beq.n	8000c5c <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d0a:	6a21      	ldr	r1, [r4, #32]
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000d14:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d18:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000d90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	4472      	add	r2, lr
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	2701      	movs	r7, #1
 8000d26:	6017      	str	r7, [r2, #0]
 8000d28:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d2c:	fab3 f383 	clz	r3, r3
 8000d30:	4473      	add	r3, lr
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d38:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8000d3a:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d3c:	d58e      	bpl.n	8000c5c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000d3e:	f7ff fa71 	bl	8000224 <HAL_GetTick>
 8000d42:	f04f 0802 	mov.w	r8, #2
 8000d46:	4682      	mov	sl, r0
 8000d48:	46c1      	mov	r9, r8
 8000d4a:	fa98 f3a8 	rbit	r3, r8
 8000d4e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d52:	b1a3      	cbz	r3, 8000d7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8000d54:	6a22      	ldr	r2, [r4, #32]
 8000d56:	fa99 f3a9 	rbit	r3, r9
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	fa07 f303 	lsl.w	r3, r7, r3
 8000d66:	4213      	tst	r3, r2
 8000d68:	f47f af78 	bne.w	8000c5c <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fa5a 	bl	8000224 <HAL_GetTick>
 8000d70:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d74:	eba0 000a 	sub.w	r0, r0, sl
 8000d78:	4298      	cmp	r0, r3
 8000d7a:	d9e6      	bls.n	8000d4a <HAL_RCCEx_PeriphCLKConfig+0x126>
 8000d7c:	e7bc      	b.n	8000cf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8000d7e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d84:	e7e7      	b.n	8000d56 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40007000 	.word	0x40007000
 8000d90:	10908100 	.word	0x10908100

08000d94 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d94:	6803      	ldr	r3, [r0, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	f042 0201 	orr.w	r2, r2, #1
 8000d9c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	f042 0201 	orr.w	r2, r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000da6:	2000      	movs	r0, #0
 8000da8:	4770      	bx	lr

08000daa <HAL_TIM_OC_DelayElapsedCallback>:
 8000daa:	4770      	bx	lr

08000dac <HAL_TIM_IC_CaptureCallback>:
 8000dac:	4770      	bx	lr

08000dae <HAL_TIM_PWM_PulseFinishedCallback>:
 8000dae:	4770      	bx	lr

08000db0 <HAL_TIM_TriggerCallback>:
 8000db0:	4770      	bx	lr

08000db2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000db2:	6803      	ldr	r3, [r0, #0]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	0791      	lsls	r1, r2, #30
{
 8000db8:	b510      	push	{r4, lr}
 8000dba:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000dbc:	d50f      	bpl.n	8000dde <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	0792      	lsls	r2, r2, #30
 8000dc2:	d50c      	bpl.n	8000dde <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000dc4:	f06f 0202 	mvn.w	r2, #2
 8000dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000dca:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000dcc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000dce:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000dd0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000dd2:	f000 8085 	beq.w	8000ee0 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000dd6:	f7ff ffe9 	bl	8000dac <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	0752      	lsls	r2, r2, #29
 8000de4:	d510      	bpl.n	8000e08 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	0750      	lsls	r0, r2, #29
 8000dea:	d50d      	bpl.n	8000e08 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000dec:	f06f 0204 	mvn.w	r2, #4
 8000df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000df2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000df4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000df6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dfa:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dfc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dfe:	d075      	beq.n	8000eec <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e00:	f7ff ffd4 	bl	8000dac <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e04:	2300      	movs	r3, #0
 8000e06:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	0711      	lsls	r1, r2, #28
 8000e0e:	d50f      	bpl.n	8000e30 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	0712      	lsls	r2, r2, #28
 8000e14:	d50c      	bpl.n	8000e30 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000e16:	f06f 0208 	mvn.w	r2, #8
 8000e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e1c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e1e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e20:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e22:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e24:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e26:	d067      	beq.n	8000ef8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e28:	f7ff ffc0 	bl	8000dac <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	06d0      	lsls	r0, r2, #27
 8000e36:	d510      	bpl.n	8000e5a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	06d1      	lsls	r1, r2, #27
 8000e3c:	d50d      	bpl.n	8000e5a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000e3e:	f06f 0210 	mvn.w	r2, #16
 8000e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e44:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e46:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e48:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e4c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e4e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e50:	d058      	beq.n	8000f04 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e52:	f7ff ffab 	bl	8000dac <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e56:	2300      	movs	r3, #0
 8000e58:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	07d2      	lsls	r2, r2, #31
 8000e60:	d508      	bpl.n	8000e74 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	07d0      	lsls	r0, r2, #31
 8000e66:	d505      	bpl.n	8000e74 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000e68:	f06f 0201 	mvn.w	r2, #1
 8000e6c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f000 fed8 	bl	8001c24 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	0611      	lsls	r1, r2, #24
 8000e7a:	d508      	bpl.n	8000e8e <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	0612      	lsls	r2, r2, #24
 8000e80:	d505      	bpl.n	8000e8e <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000e82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f000 f98a 	bl	80011a2 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	05d0      	lsls	r0, r2, #23
 8000e94:	d508      	bpl.n	8000ea8 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	0611      	lsls	r1, r2, #24
 8000e9a:	d505      	bpl.n	8000ea8 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000e9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000ea0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f000 f97e 	bl	80011a4 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	0652      	lsls	r2, r2, #25
 8000eae:	d508      	bpl.n	8000ec2 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	0650      	lsls	r0, r2, #25
 8000eb4:	d505      	bpl.n	8000ec2 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000eb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000eba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff ff77 	bl	8000db0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	0691      	lsls	r1, r2, #26
 8000ec8:	d522      	bpl.n	8000f10 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	0692      	lsls	r2, r2, #26
 8000ece:	d51f      	bpl.n	8000f10 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000ed0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000ed4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000ed6:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000edc:	f000 b960 	b.w	80011a0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ee0:	f7ff ff63 	bl	8000daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f7ff ff62 	bl	8000dae <HAL_TIM_PWM_PulseFinishedCallback>
 8000eea:	e776      	b.n	8000dda <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000eec:	f7ff ff5d 	bl	8000daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f7ff ff5c 	bl	8000dae <HAL_TIM_PWM_PulseFinishedCallback>
 8000ef6:	e785      	b.n	8000e04 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ef8:	f7ff ff57 	bl	8000daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000efc:	4620      	mov	r0, r4
 8000efe:	f7ff ff56 	bl	8000dae <HAL_TIM_PWM_PulseFinishedCallback>
 8000f02:	e793      	b.n	8000e2c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f04:	f7ff ff51 	bl	8000daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f7ff ff50 	bl	8000dae <HAL_TIM_PWM_PulseFinishedCallback>
 8000f0e:	e7a2      	b.n	8000e56 <HAL_TIM_IRQHandler+0xa4>
 8000f10:	bd10      	pop	{r4, pc}
	...

08000f14 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000f16:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f18:	4290      	cmp	r0, r2
{
 8000f1a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f1c:	d005      	beq.n	8000f2a <TIM_Base_SetConfig+0x16>
 8000f1e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f22:	d002      	beq.n	8000f2a <TIM_Base_SetConfig+0x16>
 8000f24:	4c1e      	ldr	r4, [pc, #120]	; (8000fa0 <TIM_Base_SetConfig+0x8c>)
 8000f26:	42a0      	cmp	r0, r4
 8000f28:	d10c      	bne.n	8000f44 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f2a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f30:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000f32:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f36:	d010      	beq.n	8000f5a <TIM_Base_SetConfig+0x46>
 8000f38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f3c:	d00d      	beq.n	8000f5a <TIM_Base_SetConfig+0x46>
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <TIM_Base_SetConfig+0x8c>)
 8000f40:	4290      	cmp	r0, r2
 8000f42:	d00a      	beq.n	8000f5a <TIM_Base_SetConfig+0x46>
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <TIM_Base_SetConfig+0x90>)
 8000f46:	4290      	cmp	r0, r2
 8000f48:	d007      	beq.n	8000f5a <TIM_Base_SetConfig+0x46>
 8000f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f4e:	4290      	cmp	r0, r2
 8000f50:	d003      	beq.n	8000f5a <TIM_Base_SetConfig+0x46>
 8000f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f56:	4290      	cmp	r0, r2
 8000f58:	d103      	bne.n	8000f62 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f5a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f60:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000f62:	694a      	ldr	r2, [r1, #20]
 8000f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f68:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000f6a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f6c:	688b      	ldr	r3, [r1, #8]
 8000f6e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f70:	680b      	ldr	r3, [r1, #0]
 8000f72:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <TIM_Base_SetConfig+0x88>)
 8000f76:	4298      	cmp	r0, r3
 8000f78:	d00b      	beq.n	8000f92 <TIM_Base_SetConfig+0x7e>
 8000f7a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d007      	beq.n	8000f92 <TIM_Base_SetConfig+0x7e>
 8000f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d003      	beq.n	8000f92 <TIM_Base_SetConfig+0x7e>
 8000f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d101      	bne.n	8000f96 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000f92:	690b      	ldr	r3, [r1, #16]
 8000f94:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000f96:	2301      	movs	r3, #1
 8000f98:	6143      	str	r3, [r0, #20]
 8000f9a:	bd10      	pop	{r4, pc}
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40000400 	.word	0x40000400
 8000fa4:	40014000 	.word	0x40014000

08000fa8 <HAL_TIM_Base_Init>:
{ 
 8000fa8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000faa:	4604      	mov	r4, r0
 8000fac:	b1a0      	cbz	r0, 8000fd8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000fae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000fb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fb6:	b91b      	cbnz	r3, 8000fc0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000fb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000fbc:	f000 ff46 	bl	8001e4c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000fc6:	6820      	ldr	r0, [r4, #0]
 8000fc8:	1d21      	adds	r1, r4, #4
 8000fca:	f7ff ffa3 	bl	8000f14 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
}
 8000fda:	bd10      	pop	{r4, pc}

08000fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000fdc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000fde:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fe0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fe2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fe6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000fea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000fec:	6083      	str	r3, [r0, #8]
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000ff0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000ff4:	2b01      	cmp	r3, #1
{
 8000ff6:	b570      	push	{r4, r5, r6, lr}
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000ffe:	d01a      	beq.n	8001036 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001000:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001004:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001006:	2301      	movs	r3, #1
 8001008:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800100c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800100e:	4b52      	ldr	r3, [pc, #328]	; (8001158 <HAL_TIM_ConfigClockSource+0x168>)
 8001010:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001012:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001014:	680b      	ldr	r3, [r1, #0]
 8001016:	2b40      	cmp	r3, #64	; 0x40
 8001018:	d075      	beq.n	8001106 <HAL_TIM_ConfigClockSource+0x116>
 800101a:	d818      	bhi.n	800104e <HAL_TIM_ConfigClockSource+0x5e>
 800101c:	2b10      	cmp	r3, #16
 800101e:	f000 808f 	beq.w	8001140 <HAL_TIM_ConfigClockSource+0x150>
 8001022:	d809      	bhi.n	8001038 <HAL_TIM_ConfigClockSource+0x48>
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 8085 	beq.w	8001134 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 800102a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800102c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800102e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001032:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001036:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001038:	2b20      	cmp	r3, #32
 800103a:	f000 8087 	beq.w	800114c <HAL_TIM_ConfigClockSource+0x15c>
 800103e:	2b30      	cmp	r3, #48	; 0x30
 8001040:	d1f3      	bne.n	800102a <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001042:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001048:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 800104c:	e033      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800104e:	2b70      	cmp	r3, #112	; 0x70
 8001050:	d033      	beq.n	80010ba <HAL_TIM_ConfigClockSource+0xca>
 8001052:	d81b      	bhi.n	800108c <HAL_TIM_ConfigClockSource+0x9c>
 8001054:	2b50      	cmp	r3, #80	; 0x50
 8001056:	d03f      	beq.n	80010d8 <HAL_TIM_ConfigClockSource+0xe8>
 8001058:	2b60      	cmp	r3, #96	; 0x60
 800105a:	d1e6      	bne.n	800102a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800105c:	684d      	ldr	r5, [r1, #4]
 800105e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001060:	6a01      	ldr	r1, [r0, #32]
 8001062:	f021 0110 	bic.w	r1, r1, #16
 8001066:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001068:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800106a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800106c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001070:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001074:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001078:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800107c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800107e:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001080:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001086:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800108a:	e014      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800108c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001090:	d00c      	beq.n	80010ac <HAL_TIM_ConfigClockSource+0xbc>
 8001092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001096:	d1c8      	bne.n	800102a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001098:	68cb      	ldr	r3, [r1, #12]
 800109a:	684a      	ldr	r2, [r1, #4]
 800109c:	6889      	ldr	r1, [r1, #8]
 800109e:	f7ff ff9d 	bl	8000fdc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010a2:	6822      	ldr	r2, [r4, #0]
 80010a4:	6893      	ldr	r3, [r2, #8]
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	e013      	b.n	80010d4 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80010ac:	6883      	ldr	r3, [r0, #8]
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80010b6:	6083      	str	r3, [r0, #8]
 80010b8:	e7b7      	b.n	800102a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80010ba:	68cb      	ldr	r3, [r1, #12]
 80010bc:	684a      	ldr	r2, [r1, #4]
 80010be:	6889      	ldr	r1, [r1, #8]
 80010c0:	f7ff ff8c 	bl	8000fdc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80010c4:	6822      	ldr	r2, [r4, #0]
 80010c6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80010c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80010d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010d4:	6093      	str	r3, [r2, #8]
    break;
 80010d6:	e7a8      	b.n	800102a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80010d8:	684a      	ldr	r2, [r1, #4]
 80010da:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80010dc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010de:	6a05      	ldr	r5, [r0, #32]
 80010e0:	f025 0501 	bic.w	r5, r5, #1
 80010e4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80010e6:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80010e8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80010ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010f0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80010f4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80010f6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80010f8:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80010fa:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001100:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001104:	e7d7      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001106:	684a      	ldr	r2, [r1, #4]
 8001108:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800110a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800110c:	6a05      	ldr	r5, [r0, #32]
 800110e:	f025 0501 	bic.w	r5, r5, #1
 8001112:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001114:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001116:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800111a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800111e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001122:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001124:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001126:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001128:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800112a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800112e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001132:	e7c0      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001134:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800113a:	f043 0307 	orr.w	r3, r3, #7
 800113e:	e7ba      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001140:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001146:	f043 0317 	orr.w	r3, r3, #23
 800114a:	e7b4      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800114c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800114e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001152:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001156:	e7ae      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0xc6>
 8001158:	fffe0088 	.word	0xfffe0088

0800115c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800115c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001160:	2b01      	cmp	r3, #1
{
 8001162:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001164:	d018      	beq.n	8001198 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001166:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001168:	4d0c      	ldr	r5, [pc, #48]	; (800119c <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 800116a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800116c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800116e:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001170:	bf02      	ittt	eq
 8001172:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001174:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001178:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800117a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800117c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800117e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001182:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001184:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001188:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800118a:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800118c:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800118e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001190:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001194:	4618      	mov	r0, r3
 8001196:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001198:	2002      	movs	r0, #2
} 
 800119a:	bd30      	pop	{r4, r5, pc}
 800119c:	40012c00 	.word	0x40012c00

080011a0 <HAL_TIMEx_CommutationCallback>:
 80011a0:	4770      	bx	lr

080011a2 <HAL_TIMEx_BreakCallback>:
 80011a2:	4770      	bx	lr

080011a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80011a4:	4770      	bx	lr

080011a6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80011a6:	6803      	ldr	r3, [r0, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80011ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80011b8:	2320      	movs	r3, #32
 80011ba:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80011be:	4770      	bx	lr

080011c0 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80011c0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d13d      	bne.n	8001244 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 80011c8:	2900      	cmp	r1, #0
 80011ca:	d039      	beq.n	8001240 <HAL_UART_Receive_IT+0x80>
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d037      	beq.n	8001240 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 80011d0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d035      	beq.n	8001244 <HAL_UART_Receive_IT+0x84>
 80011d8:	2301      	movs	r3, #1
 80011da:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 80011de:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 80011e0:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 80011e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 80011e6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80011ea:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80011ee:	d119      	bne.n	8001224 <HAL_UART_Receive_IT+0x64>
 80011f0:	6903      	ldr	r3, [r0, #16]
 80011f2:	b9ab      	cbnz	r3, 8001220 <HAL_UART_Receive_IT+0x60>
 80011f4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80011f8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011fc:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80011fe:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001200:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001202:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001206:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8001208:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800120c:	6891      	ldr	r1, [r2, #8]
 800120e:	f041 0101 	orr.w	r1, r1, #1
 8001212:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001214:	6811      	ldr	r1, [r2, #0]
 8001216:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 800121a:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 800121c:	4618      	mov	r0, r3
 800121e:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	e7e9      	b.n	80011f8 <HAL_UART_Receive_IT+0x38>
 8001224:	b923      	cbnz	r3, 8001230 <HAL_UART_Receive_IT+0x70>
 8001226:	6903      	ldr	r3, [r0, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f9      	beq.n	8001220 <HAL_UART_Receive_IT+0x60>
 800122c:	237f      	movs	r3, #127	; 0x7f
 800122e:	e7e3      	b.n	80011f8 <HAL_UART_Receive_IT+0x38>
 8001230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001234:	d1e2      	bne.n	80011fc <HAL_UART_Receive_IT+0x3c>
 8001236:	6903      	ldr	r3, [r0, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f7      	beq.n	800122c <HAL_UART_Receive_IT+0x6c>
 800123c:	233f      	movs	r3, #63	; 0x3f
 800123e:	e7db      	b.n	80011f8 <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8001240:	2001      	movs	r0, #1
 8001242:	4770      	bx	lr
    return HAL_BUSY;
 8001244:	2002      	movs	r0, #2
}
 8001246:	4770      	bx	lr

08001248 <HAL_UART_TxCpltCallback>:
 8001248:	4770      	bx	lr

0800124a <HAL_UART_ErrorCallback>:
 800124a:	4770      	bx	lr

0800124c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800124c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800124e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001256:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800125a:	f7ff fff6 	bl	800124a <HAL_UART_ErrorCallback>
 800125e:	bd08      	pop	{r3, pc}

08001260 <UART_SetConfig>:
{
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001264:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001266:	6921      	ldr	r1, [r4, #16]
 8001268:	68a3      	ldr	r3, [r4, #8]
 800126a:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800126c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800126e:	430b      	orrs	r3, r1
 8001270:	6961      	ldr	r1, [r4, #20]
 8001272:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001274:	4949      	ldr	r1, [pc, #292]	; (800139c <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001276:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001278:	4001      	ands	r1, r0
 800127a:	430b      	orrs	r3, r1
 800127c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800127e:	686b      	ldr	r3, [r5, #4]
 8001280:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001282:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001284:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001288:	430b      	orrs	r3, r1
 800128a:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800128c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800128e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001290:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001294:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001296:	430b      	orrs	r3, r1
 8001298:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800129a:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <UART_SetConfig+0x140>)
 800129c:	429d      	cmp	r5, r3
 800129e:	d112      	bne.n	80012c6 <UART_SetConfig+0x66>
 80012a0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80012a4:	493f      	ldr	r1, [pc, #252]	; (80013a4 <UART_SetConfig+0x144>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012b0:	5ccb      	ldrb	r3, [r1, r3]
 80012b2:	d13b      	bne.n	800132c <UART_SetConfig+0xcc>
    switch (clocksource)
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d836      	bhi.n	8001326 <UART_SetConfig+0xc6>
 80012b8:	e8df f003 	tbb	[pc, r3]
 80012bc:	3524210f 	.word	0x3524210f
 80012c0:	3535352d 	.word	0x3535352d
 80012c4:	30          	.byte	0x30
 80012c5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <UART_SetConfig+0x148>)
 80012c8:	429d      	cmp	r5, r3
 80012ca:	d003      	beq.n	80012d4 <UART_SetConfig+0x74>
 80012cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012d0:	429d      	cmp	r5, r3
 80012d2:	d15e      	bne.n	8001392 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012d8:	d131      	bne.n	800133e <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80012da:	f7ff fc73 	bl	8000bc4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80012de:	6861      	ldr	r1, [r4, #4]
 80012e0:	084a      	lsrs	r2, r1, #1
 80012e2:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80012ea:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80012ec:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80012ee:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80012f2:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012f4:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
 80012fc:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80012fe:	f7ff fc79 	bl	8000bf4 <HAL_RCC_GetPCLK2Freq>
 8001302:	e7ec      	b.n	80012de <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001304:	6860      	ldr	r0, [r4, #4]
 8001306:	0843      	lsrs	r3, r0, #1
 8001308:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800130c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001310:	fbb3 f3f0 	udiv	r3, r3, r0
 8001314:	e7e9      	b.n	80012ea <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001316:	f7ff fb5b 	bl	80009d0 <HAL_RCC_GetSysClockFreq>
 800131a:	e7e0      	b.n	80012de <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800131c:	6860      	ldr	r0, [r4, #4]
 800131e:	0843      	lsrs	r3, r0, #1
 8001320:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001324:	e7f4      	b.n	8001310 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001326:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001328:	2300      	movs	r3, #0
 800132a:	e7e0      	b.n	80012ee <UART_SetConfig+0x8e>
    switch (clocksource)
 800132c:	2b08      	cmp	r3, #8
 800132e:	d833      	bhi.n	8001398 <UART_SetConfig+0x138>
 8001330:	e8df f003 	tbb	[pc, r3]
 8001334:	321b1005 	.word	0x321b1005
 8001338:	32323227 	.word	0x32323227
 800133c:	2a          	.byte	0x2a
 800133d:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800133e:	f7ff fc41 	bl	8000bc4 <HAL_RCC_GetPCLK1Freq>
 8001342:	6863      	ldr	r3, [r4, #4]
 8001344:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001348:	fbb0 f0f3 	udiv	r0, r0, r3
 800134c:	b280      	uxth	r0, r0
 800134e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001350:	2000      	movs	r0, #0
        break;
 8001352:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001354:	f7ff fc4e 	bl	8000bf4 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001358:	6863      	ldr	r3, [r4, #4]
 800135a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800135e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <UART_SetConfig+0x140>)
 8001364:	b280      	uxth	r0, r0
 8001366:	60d8      	str	r0, [r3, #12]
 8001368:	e7f2      	b.n	8001350 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800136a:	6862      	ldr	r2, [r4, #4]
 800136c:	0853      	lsrs	r3, r2, #1
 800136e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001372:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001376:	fbb3 f3f2 	udiv	r3, r3, r2
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <UART_SetConfig+0x140>)
 800137c:	b29b      	uxth	r3, r3
 800137e:	60d3      	str	r3, [r2, #12]
 8001380:	e7e6      	b.n	8001350 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001382:	f7ff fb25 	bl	80009d0 <HAL_RCC_GetSysClockFreq>
 8001386:	e7e7      	b.n	8001358 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001388:	6862      	ldr	r2, [r4, #4]
 800138a:	0853      	lsrs	r3, r2, #1
 800138c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001390:	e7f1      	b.n	8001376 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001392:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001396:	d0c6      	beq.n	8001326 <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001398:	2001      	movs	r0, #1
  return ret;
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	efff69f3 	.word	0xefff69f3
 80013a0:	40013800 	.word	0x40013800
 80013a4:	08002184 	.word	0x08002184
 80013a8:	40004400 	.word	0x40004400

080013ac <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013ae:	07da      	lsls	r2, r3, #31
{
 80013b0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013b2:	d506      	bpl.n	80013c2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013b4:	6801      	ldr	r1, [r0, #0]
 80013b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80013b8:	684a      	ldr	r2, [r1, #4]
 80013ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80013be:	4322      	orrs	r2, r4
 80013c0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013c2:	079c      	lsls	r4, r3, #30
 80013c4:	d506      	bpl.n	80013d4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013c6:	6801      	ldr	r1, [r0, #0]
 80013c8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013ca:	684a      	ldr	r2, [r1, #4]
 80013cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013d0:	4322      	orrs	r2, r4
 80013d2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d506      	bpl.n	80013e6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80013d8:	6801      	ldr	r1, [r0, #0]
 80013da:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80013dc:	684a      	ldr	r2, [r1, #4]
 80013de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013e2:	4322      	orrs	r2, r4
 80013e4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80013e6:	071a      	lsls	r2, r3, #28
 80013e8:	d506      	bpl.n	80013f8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80013ea:	6801      	ldr	r1, [r0, #0]
 80013ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80013ee:	684a      	ldr	r2, [r1, #4]
 80013f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f4:	4322      	orrs	r2, r4
 80013f6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80013f8:	06dc      	lsls	r4, r3, #27
 80013fa:	d506      	bpl.n	800140a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80013fc:	6801      	ldr	r1, [r0, #0]
 80013fe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001400:	688a      	ldr	r2, [r1, #8]
 8001402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001406:	4322      	orrs	r2, r4
 8001408:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800140a:	0699      	lsls	r1, r3, #26
 800140c:	d506      	bpl.n	800141c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800140e:	6801      	ldr	r1, [r0, #0]
 8001410:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001412:	688a      	ldr	r2, [r1, #8]
 8001414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001418:	4322      	orrs	r2, r4
 800141a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800141c:	065a      	lsls	r2, r3, #25
 800141e:	d50f      	bpl.n	8001440 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001420:	6801      	ldr	r1, [r0, #0]
 8001422:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001424:	684a      	ldr	r2, [r1, #4]
 8001426:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800142a:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800142c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001430:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001432:	d105      	bne.n	8001440 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001434:	684a      	ldr	r2, [r1, #4]
 8001436:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001438:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800143c:	4322      	orrs	r2, r4
 800143e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001440:	061b      	lsls	r3, r3, #24
 8001442:	d506      	bpl.n	8001452 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001444:	6802      	ldr	r2, [r0, #0]
 8001446:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001448:	6853      	ldr	r3, [r2, #4]
 800144a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800144e:	430b      	orrs	r3, r1
 8001450:	6053      	str	r3, [r2, #4]
 8001452:	bd10      	pop	{r4, pc}

08001454 <UART_WaitOnFlagUntilTimeout>:
{
 8001454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001458:	9d06      	ldr	r5, [sp, #24]
 800145a:	4604      	mov	r4, r0
 800145c:	460f      	mov	r7, r1
 800145e:	4616      	mov	r6, r2
 8001460:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001462:	6821      	ldr	r1, [r4, #0]
 8001464:	69ca      	ldr	r2, [r1, #28]
 8001466:	ea37 0302 	bics.w	r3, r7, r2
 800146a:	bf0c      	ite	eq
 800146c:	2201      	moveq	r2, #1
 800146e:	2200      	movne	r2, #0
 8001470:	42b2      	cmp	r2, r6
 8001472:	d002      	beq.n	800147a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001474:	2000      	movs	r0, #0
}
 8001476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800147a:	1c6b      	adds	r3, r5, #1
 800147c:	d0f2      	beq.n	8001464 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800147e:	b99d      	cbnz	r5, 80014a8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001488:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001492:	2320      	movs	r3, #32
 8001494:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001498:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800149c:	2300      	movs	r3, #0
 800149e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80014a2:	2003      	movs	r0, #3
 80014a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014a8:	f7fe febc 	bl	8000224 <HAL_GetTick>
 80014ac:	eba0 0008 	sub.w	r0, r0, r8
 80014b0:	4285      	cmp	r5, r0
 80014b2:	d2d6      	bcs.n	8001462 <UART_WaitOnFlagUntilTimeout+0xe>
 80014b4:	e7e4      	b.n	8001480 <UART_WaitOnFlagUntilTimeout+0x2c>

080014b6 <HAL_UART_Transmit>:
{
 80014b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014ba:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80014bc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80014c0:	2b20      	cmp	r3, #32
{
 80014c2:	4604      	mov	r4, r0
 80014c4:	460d      	mov	r5, r1
 80014c6:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80014c8:	d14c      	bne.n	8001564 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80014ca:	2900      	cmp	r1, #0
 80014cc:	d048      	beq.n	8001560 <HAL_UART_Transmit+0xaa>
 80014ce:	2a00      	cmp	r2, #0
 80014d0:	d046      	beq.n	8001560 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80014d2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d044      	beq.n	8001564 <HAL_UART_Transmit+0xae>
 80014da:	2301      	movs	r3, #1
 80014dc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014e4:	2321      	movs	r3, #33	; 0x21
 80014e6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80014ea:	f7fe fe9b 	bl	8000224 <HAL_GetTick>
    huart->TxXferSize = Size;
 80014ee:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80014f2:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80014f4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80014f8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80014fc:	b292      	uxth	r2, r2
 80014fe:	b962      	cbnz	r2, 800151a <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001500:	9700      	str	r7, [sp, #0]
 8001502:	4633      	mov	r3, r6
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff ffa4 	bl	8001454 <UART_WaitOnFlagUntilTimeout>
 800150c:	b998      	cbnz	r0, 8001536 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800150e:	2320      	movs	r3, #32
 8001510:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001514:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001518:	e00e      	b.n	8001538 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800151a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800151e:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001528:	2200      	movs	r2, #0
 800152a:	4633      	mov	r3, r6
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff ff90 	bl	8001454 <UART_WaitOnFlagUntilTimeout>
 8001534:	b118      	cbz	r0, 800153e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
}
 8001538:	b002      	add	sp, #8
 800153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800153e:	68a3      	ldr	r3, [r4, #8]
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001546:	d107      	bne.n	8001558 <HAL_UART_Transmit+0xa2>
 8001548:	6923      	ldr	r3, [r4, #16]
 800154a:	b92b      	cbnz	r3, 8001558 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800154c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001554:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001556:	e7cf      	b.n	80014f8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001558:	782b      	ldrb	r3, [r5, #0]
 800155a:	8513      	strh	r3, [r2, #40]	; 0x28
 800155c:	3501      	adds	r5, #1
 800155e:	e7cb      	b.n	80014f8 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001560:	2001      	movs	r0, #1
 8001562:	e7e9      	b.n	8001538 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001564:	2002      	movs	r0, #2
 8001566:	e7e7      	b.n	8001538 <HAL_UART_Transmit+0x82>

08001568 <UART_CheckIdleState>:
{
 8001568:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800156a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800156c:	2600      	movs	r6, #0
 800156e:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001570:	f7fe fe58 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800157a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800157c:	d417      	bmi.n	80015ae <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	075b      	lsls	r3, r3, #29
 8001584:	d50a      	bpl.n	800159c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001586:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	462b      	mov	r3, r5
 8001590:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff ff5d 	bl	8001454 <UART_WaitOnFlagUntilTimeout>
 800159a:	b9a0      	cbnz	r0, 80015c6 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800159c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800159e:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80015a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80015a4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80015a8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80015ac:	e00c      	b.n	80015c8 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80015ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4632      	mov	r2, r6
 80015b6:	4603      	mov	r3, r0
 80015b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff ff49 	bl	8001454 <UART_WaitOnFlagUntilTimeout>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d0db      	beq.n	800157e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80015c6:	2003      	movs	r0, #3
}
 80015c8:	b002      	add	sp, #8
 80015ca:	bd70      	pop	{r4, r5, r6, pc}

080015cc <HAL_UART_Init>:
{
 80015cc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80015ce:	4604      	mov	r4, r0
 80015d0:	b360      	cbz	r0, 800162c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80015d2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80015d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015da:	b91b      	cbnz	r3, 80015e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80015dc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80015e0:	f000 fc50 	bl	8001e84 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80015e4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015e6:	2324      	movs	r3, #36	; 0x24
 80015e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80015ec:	6813      	ldr	r3, [r2, #0]
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff fe33 	bl	8001260 <UART_SetConfig>
 80015fa:	2801      	cmp	r0, #1
 80015fc:	d016      	beq.n	800162c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001600:	b113      	cbz	r3, 8001608 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff fed2 	bl	80013ac <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001610:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001618:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001620:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001628:	f7ff bf9e 	b.w	8001568 <UART_CheckIdleState>
}
 800162c:	2001      	movs	r0, #1
 800162e:	bd10      	pop	{r4, pc}

08001630 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001630:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001634:	2b21      	cmp	r3, #33	; 0x21
 8001636:	d127      	bne.n	8001688 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8001638:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800163c:	6802      	ldr	r2, [r0, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	b94b      	cbnz	r3, 8001656 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001642:	6811      	ldr	r1, [r2, #0]
 8001644:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001648:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800164a:	6811      	ldr	r1, [r2, #0]
 800164c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001650:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001656:	6883      	ldr	r3, [r0, #8]
 8001658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800165e:	d10e      	bne.n	800167e <UART_Transmit_IT+0x4e>
 8001660:	6901      	ldr	r1, [r0, #16]
 8001662:	b961      	cbnz	r1, 800167e <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001664:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001668:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800166c:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800166e:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001670:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001674:	3b01      	subs	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800167c:	e7e9      	b.n	8001652 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800167e:	1c59      	adds	r1, r3, #1
 8001680:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	8513      	strh	r3, [r2, #40]	; 0x28
 8001686:	e7f3      	b.n	8001670 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8001688:	2002      	movs	r0, #2
  }
}
 800168a:	4770      	bx	lr

0800168c <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800168c:	6801      	ldr	r1, [r0, #0]
{
 800168e:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001690:	680b      	ldr	r3, [r1, #0]
 8001692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001696:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001698:	2320      	movs	r3, #32
 800169a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800169e:	f7ff fdd3 	bl	8001248 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80016a2:	2000      	movs	r0, #0
 80016a4:	bd08      	pop	{r3, pc}

080016a6 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016a6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80016aa:	2b22      	cmp	r3, #34	; 0x22
{
 80016ac:	b510      	push	{r4, lr}
 80016ae:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016b0:	d129      	bne.n	8001706 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80016b2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016b4:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 80016b6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016be:	ea02 0201 	and.w	r2, r2, r1
 80016c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80016c4:	d11b      	bne.n	80016fe <UART_Receive_IT+0x58>
 80016c6:	6901      	ldr	r1, [r0, #16]
 80016c8:	b9c9      	cbnz	r1, 80016fe <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80016ca:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80016ce:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80016d0:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80016d4:	3c01      	subs	r4, #1
 80016d6:	b2a4      	uxth	r4, r4
 80016d8:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80016dc:	b96c      	cbnz	r4, 80016fa <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016de:	6803      	ldr	r3, [r0, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80016e6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80016f0:	2320      	movs	r3, #32
 80016f2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80016f6:	f000 f9c9 	bl	8001a8c <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80016fa:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80016fc:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80016fe:	1c59      	adds	r1, r3, #1
 8001700:	6541      	str	r1, [r0, #84]	; 0x54
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	e7e4      	b.n	80016d0 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	f042 0208 	orr.w	r2, r2, #8
 800170c:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 800170e:	2002      	movs	r0, #2
 8001710:	bd10      	pop	{r4, pc}
	...

08001714 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001714:	6802      	ldr	r2, [r0, #0]
 8001716:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001718:	6811      	ldr	r1, [r2, #0]
{
 800171a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800171c:	f013 050f 	ands.w	r5, r3, #15
{
 8001720:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001722:	d107      	bne.n	8001734 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001724:	069e      	lsls	r6, r3, #26
 8001726:	d505      	bpl.n	8001734 <HAL_UART_IRQHandler+0x20>
 8001728:	068e      	lsls	r6, r1, #26
 800172a:	d503      	bpl.n	8001734 <HAL_UART_IRQHandler+0x20>
}
 800172c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001730:	f7ff bfb9 	b.w	80016a6 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8001734:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8001736:	2d00      	cmp	r5, #0
 8001738:	d05c      	beq.n	80017f4 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800173a:	f010 0501 	ands.w	r5, r0, #1
 800173e:	d102      	bne.n	8001746 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001740:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001744:	d056      	beq.n	80017f4 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001746:	07d8      	lsls	r0, r3, #31
 8001748:	d507      	bpl.n	800175a <HAL_UART_IRQHandler+0x46>
 800174a:	05ce      	lsls	r6, r1, #23
 800174c:	d505      	bpl.n	800175a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800174e:	2001      	movs	r0, #1
 8001750:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001752:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001754:	f040 0001 	orr.w	r0, r0, #1
 8001758:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800175a:	0798      	lsls	r0, r3, #30
 800175c:	d506      	bpl.n	800176c <HAL_UART_IRQHandler+0x58>
 800175e:	b12d      	cbz	r5, 800176c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001760:	2002      	movs	r0, #2
 8001762:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001764:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001766:	f040 0004 	orr.w	r0, r0, #4
 800176a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800176c:	075e      	lsls	r6, r3, #29
 800176e:	d506      	bpl.n	800177e <HAL_UART_IRQHandler+0x6a>
 8001770:	b12d      	cbz	r5, 800177e <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001772:	2004      	movs	r0, #4
 8001774:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001776:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001778:	f040 0002 	orr.w	r0, r0, #2
 800177c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800177e:	0718      	lsls	r0, r3, #28
 8001780:	d507      	bpl.n	8001792 <HAL_UART_IRQHandler+0x7e>
 8001782:	068e      	lsls	r6, r1, #26
 8001784:	d400      	bmi.n	8001788 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001786:	b125      	cbz	r5, 8001792 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001788:	2008      	movs	r0, #8
 800178a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800178c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800178e:	4302      	orrs	r2, r0
 8001790:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001792:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001794:	2a00      	cmp	r2, #0
 8001796:	d050      	beq.n	800183a <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001798:	0698      	lsls	r0, r3, #26
 800179a:	d504      	bpl.n	80017a6 <HAL_UART_IRQHandler+0x92>
 800179c:	068a      	lsls	r2, r1, #26
 800179e:	d502      	bpl.n	80017a6 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff ff80 	bl	80016a6 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80017a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80017a8:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 80017aa:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80017ac:	d404      	bmi.n	80017b8 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80017b2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80017b6:	d019      	beq.n	80017ec <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80017b8:	f7ff fcf5 	bl	80011a6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	0656      	lsls	r6, r2, #25
 80017c2:	d50f      	bpl.n	80017e4 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017c4:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80017c6:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017cc:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80017ce:	b148      	cbz	r0, 80017e4 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_UART_IRQHandler+0x128>)
 80017d2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017d4:	f7fe fda5 	bl	8000322 <HAL_DMA_Abort_IT>
 80017d8:	b378      	cbz	r0, 800183a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017da:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80017dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017e2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff fd30 	bl	800124a <HAL_UART_ErrorCallback>
 80017ea:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80017ec:	f7ff fd2d 	bl	800124a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017f0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80017f4:	02dd      	lsls	r5, r3, #11
 80017f6:	d50e      	bpl.n	8001816 <HAL_UART_IRQHandler+0x102>
 80017f8:	0246      	lsls	r6, r0, #9
 80017fa:	d50c      	bpl.n	8001816 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80017fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001800:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001802:	2320      	movs	r3, #32
 8001804:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8001808:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800180a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800180e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001812:	f000 b815 	b.w	8001840 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001816:	061d      	lsls	r5, r3, #24
 8001818:	d506      	bpl.n	8001828 <HAL_UART_IRQHandler+0x114>
 800181a:	0608      	lsls	r0, r1, #24
 800181c:	d504      	bpl.n	8001828 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 800181e:	4620      	mov	r0, r4
}
 8001820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8001824:	f7ff bf04 	b.w	8001630 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001828:	065a      	lsls	r2, r3, #25
 800182a:	d506      	bpl.n	800183a <HAL_UART_IRQHandler+0x126>
 800182c:	064b      	lsls	r3, r1, #25
 800182e:	d504      	bpl.n	800183a <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8001830:	4620      	mov	r0, r4
}
 8001832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8001836:	f7ff bf29 	b.w	800168c <UART_EndTransmit_IT>
 800183a:	bd70      	pop	{r4, r5, r6, pc}
 800183c:	0800124d 	.word	0x0800124d

08001840 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001840:	4770      	bx	lr
	...

08001844 <uart_comms>:
#include "stm32f3xx_hal.h"
// external Variables
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;

void uart_comms(){
 8001844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8001848:	4c67      	ldr	r4, [pc, #412]	; (80019e8 <uart_comms+0x1a4>)
 800184a:	4868      	ldr	r0, [pc, #416]	; (80019ec <uart_comms+0x1a8>)
	rx_flag = 0;
	uart_command[uart_counter] = rx_buffer;
 800184c:	4d68      	ldr	r5, [pc, #416]	; (80019f0 <uart_comms+0x1ac>)
 800184e:	4e69      	ldr	r6, [pc, #420]	; (80019f4 <uart_comms+0x1b0>)
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8001850:	2201      	movs	r2, #1
 8001852:	4621      	mov	r1, r4
 8001854:	f7ff fcb4 	bl	80011c0 <HAL_UART_Receive_IT>
	rx_flag = 0;
 8001858:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <uart_comms+0x1b4>)
	uart_command[uart_counter] = rx_buffer;
 800185a:	7821      	ldrb	r1, [r4, #0]
	rx_flag = 0;
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 8001860:	782b      	ldrb	r3, [r5, #0]
 8001862:	6832      	ldr	r2, [r6, #0]
 8001864:	54d1      	strb	r1, [r2, r3]
	if(uart_command[0] == '$'){
 8001866:	6833      	ldr	r3, [r6, #0]
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	2a24      	cmp	r2, #36	; 0x24

	uart_counter += 1;
 800186c:	bf02      	ittt	eq
 800186e:	782a      	ldrbeq	r2, [r5, #0]
 8001870:	3201      	addeq	r2, #1
 8001872:	702a      	strbeq	r2, [r5, #0]
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	2a24      	cmp	r2, #36	; 0x24
 8001878:	f040 80b0 	bne.w	80019dc <uart_comms+0x198>
 800187c:	782a      	ldrb	r2, [r5, #0]
 800187e:	1899      	adds	r1, r3, r2
 8001880:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8001884:	280a      	cmp	r0, #10
 8001886:	f040 80a9 	bne.w	80019dc <uart_comms+0x198>
 800188a:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 800188e:	290d      	cmp	r1, #13
 8001890:	f040 80a4 	bne.w	80019dc <uart_comms+0x198>
 8001894:	2a02      	cmp	r2, #2
 8001896:	f240 80a1 	bls.w	80019dc <uart_comms+0x198>

		switch(uart_command[1]){
 800189a:	785a      	ldrb	r2, [r3, #1]
 800189c:	4c57      	ldr	r4, [pc, #348]	; (80019fc <uart_comms+0x1b8>)
 800189e:	3a41      	subs	r2, #65	; 0x41
 80018a0:	2a09      	cmp	r2, #9
 80018a2:	d839      	bhi.n	8001918 <uart_comms+0xd4>
 80018a4:	e8df f002 	tbb	[pc, r2]
 80018a8:	49234905 	.word	0x49234905
 80018ac:	8c6f5549 	.word	0x8c6f5549
 80018b0:	9690      	.short	0x9690
			case  'A': // Request Serial number

				memcpy(studentnumber, uart_command, 2 );
 80018b2:	4a53      	ldr	r2, [pc, #332]	; (8001a00 <uart_comms+0x1bc>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	6811      	ldr	r1, [r2, #0]
				memcpy(studentnumber+2,comma,1);
				memcpy(studentnumber+3 ,studentnumber1,8 );
 80018b8:	4852      	ldr	r0, [pc, #328]	; (8001a04 <uart_comms+0x1c0>)
				memcpy(studentnumber, uart_command, 2 );
 80018ba:	800b      	strh	r3, [r1, #0]
				memcpy(studentnumber+2,comma,1);
 80018bc:	4952      	ldr	r1, [pc, #328]	; (8001a08 <uart_comms+0x1c4>)
 80018be:	6813      	ldr	r3, [r2, #0]
 80018c0:	7809      	ldrb	r1, [r1, #0]
 80018c2:	7099      	strb	r1, [r3, #2]
				memcpy(studentnumber+3 ,studentnumber1,8 );
 80018c4:	6811      	ldr	r1, [r2, #0]
 80018c6:	6803      	ldr	r3, [r0, #0]
 80018c8:	f8c1 3003 	str.w	r3, [r1, #3]
 80018cc:	6843      	ldr	r3, [r0, #4]
 80018ce:	f8c1 3007 	str.w	r3, [r1, #7]
				memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 80018d2:	6811      	ldr	r1, [r2, #0]
 80018d4:	4a4d      	ldr	r2, [pc, #308]	; (8001a0c <uart_comms+0x1c8>)
 80018d6:	6813      	ldr	r3, [r2, #0]
 80018d8:	f8c1 300b 	str.w	r3, [r1, #11]
 80018dc:	6853      	ldr	r3, [r2, #4]
 80018de:	f8c1 300f 	str.w	r3, [r1, #15]
				HAL_UART_Transmit(&huart1, ((uint8_t*)studentnumber), 13, 10);
 80018e2:	220d      	movs	r2, #13
 80018e4:	230a      	movs	r3, #10
				 case 'I': // get time
					HAL_UART_Transmit(&huart1,(uint8_t*)time, sizeof(time), 1000);
					 break;

				 case 'J': // set heating schedule
					HAL_UART_Transmit(&huart1,(uint8_t*)return_val, sizeof(return_val), 1000);
 80018e6:	4841      	ldr	r0, [pc, #260]	; (80019ec <uart_comms+0x1a8>)
 80018e8:	f7ff fde5 	bl	80014b6 <HAL_UART_Transmit>
					 break;
 80018ec:	e014      	b.n	8001918 <uart_comms+0xd4>
					 memcpy(return_value, uart_command, 2);
 80018ee:	6822      	ldr	r2, [r4, #0]
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, endSimbol,2 );
 80018f4:	4a45      	ldr	r2, [pc, #276]	; (8001a0c <uart_comms+0x1c8>)
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	8812      	ldrh	r2, [r2, #0]
 80018fa:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_val, sizeof(return_value), 1000);
 80018fc:	4944      	ldr	r1, [pc, #272]	; (8001a10 <uart_comms+0x1cc>)
 80018fe:	483b      	ldr	r0, [pc, #236]	; (80019ec <uart_comms+0x1a8>)
 8001900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001904:	2204      	movs	r2, #4
 8001906:	f7ff fdd6 	bl	80014b6 <HAL_UART_Transmit>
					 if(uart_command[2]=='0'){
 800190a:	6833      	ldr	r3, [r6, #0]
 800190c:	789b      	ldrb	r3, [r3, #2]
 800190e:	2b30      	cmp	r3, #48	; 0x30
 8001910:	d10f      	bne.n	8001932 <uart_comms+0xee>
						auto_heating = 0;	// auto heating off
 8001912:	2200      	movs	r2, #0
						auto_heating = 1;	// auto heating on
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <uart_comms+0x1d0>)
 8001916:	701a      	strb	r2, [r3, #0]

				 case 'L': // Request log Entry
					 // do something
					 break;
				 }
				memset(uart_command,0x00, 40);
 8001918:	2228      	movs	r2, #40	; 0x28
 800191a:	2100      	movs	r1, #0
 800191c:	6830      	ldr	r0, [r6, #0]
 800191e:	f000 fb8e 	bl	800203e <memset>
				memset(return_value,0x00, 15);
 8001922:	220f      	movs	r2, #15
 8001924:	2100      	movs	r1, #0
 8001926:	6820      	ldr	r0, [r4, #0]
 8001928:	f000 fb89 	bl	800203e <memset>
				uart_counter = 0;
		  }
		  else if(uart_counter > 39 ){
			  uart_counter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	702b      	strb	r3, [r5, #0]
		  }
}
 8001930:	e057      	b.n	80019e2 <uart_comms+0x19e>
					 else if(uart_command[2] == '1'){
 8001932:	2b31      	cmp	r3, #49	; 0x31
 8001934:	d1f0      	bne.n	8001918 <uart_comms+0xd4>
						auto_heating = 1;	// auto heating on
 8001936:	2201      	movs	r2, #1
 8001938:	e7ec      	b.n	8001914 <uart_comms+0xd0>
					 memcpy(return_value, uart_command, 2);
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, endSimbol,2 );
 8001940:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <uart_comms+0x1c8>)
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	8812      	ldrh	r2, [r2, #0]
 8001946:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_val, sizeof(return_value), 1000);
 8001948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194c:	2204      	movs	r2, #4
					HAL_UART_Transmit(&huart1,(uint8_t*)return_val, sizeof(return_val), 1000);
 800194e:	4930      	ldr	r1, [pc, #192]	; (8001a10 <uart_comms+0x1cc>)
 8001950:	e7c9      	b.n	80018e6 <uart_comms+0xa2>
					 memcpy(return_value, uart_command,2);
 8001952:	6822      	ldr	r2, [r4, #0]
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2,endSimbol, 2);
 8001958:	4a2c      	ldr	r2, [pc, #176]	; (8001a0c <uart_comms+0x1c8>)
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	805a      	strh	r2, [r3, #2]
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, sizeof(return_value), 1000);
 8001960:	6821      	ldr	r1, [r4, #0]
 8001962:	4822      	ldr	r0, [pc, #136]	; (80019ec <uart_comms+0x1a8>)
 8001964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001968:	2204      	movs	r2, #4
 800196a:	f7ff fda4 	bl	80014b6 <HAL_UART_Transmit>
					 sizeOfTemp = uart_counter - 5;
 800196e:	782a      	ldrb	r2, [r5, #0]
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <uart_comms+0x1d4>)
					 memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 8001972:	6831      	ldr	r1, [r6, #0]
					 sizeOfTemp = uart_counter - 5;
 8001974:	3a05      	subs	r2, #5
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]
					 memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <uart_comms+0x1d8>)
 800197c:	3103      	adds	r1, #3
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f000 fb52 	bl	8002028 <memcpy>
					break;
 8001984:	e7c8      	b.n	8001918 <uart_comms+0xd4>
					 memcpy(return_value, uart_command, 2);
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, comma, 1);
 800198c:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <uart_comms+0x1c4>)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	7812      	ldrb	r2, [r2, #0]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8001992:	4f21      	ldr	r7, [pc, #132]	; (8001a18 <uart_comms+0x1d4>)
					 memcpy(return_value+2, comma, 1);
 8001994:	709a      	strb	r2, [r3, #2]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8001996:	f897 8000 	ldrb.w	r8, [r7]
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <uart_comms+0x1d8>)
 800199c:	6820      	ldr	r0, [r4, #0]
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	4642      	mov	r2, r8
 80019a2:	3003      	adds	r0, #3
 80019a4:	f000 fb40 	bl	8002028 <memcpy>
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <uart_comms+0x1c8>)
 80019ac:	4442      	add	r2, r8
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	f8a2 3003 	strh.w	r3, [r2, #3]
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 80019b4:	783a      	ldrb	r2, [r7, #0]
 80019b6:	6821      	ldr	r1, [r4, #0]
 80019b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019bc:	3205      	adds	r2, #5
 80019be:	e792      	b.n	80018e6 <uart_comms+0xa2>
					HAL_UART_Transmit(&huart1,(uint8_t*)return_val, sizeof(return_value)+1, 1000);
 80019c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c4:	2205      	movs	r2, #5
 80019c6:	e7c2      	b.n	800194e <uart_comms+0x10a>
					HAL_UART_Transmit(&huart1,(uint8_t*)time, sizeof(time), 1000);
 80019c8:	4915      	ldr	r1, [pc, #84]	; (8001a20 <uart_comms+0x1dc>)
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	2204      	movs	r2, #4
 80019d0:	6809      	ldr	r1, [r1, #0]
 80019d2:	e788      	b.n	80018e6 <uart_comms+0xa2>
					HAL_UART_Transmit(&huart1,(uint8_t*)return_val, sizeof(return_val), 1000);
 80019d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d8:	220f      	movs	r2, #15
 80019da:	e7b8      	b.n	800194e <uart_comms+0x10a>
		  else if(uart_counter > 39 ){
 80019dc:	782b      	ldrb	r3, [r5, #0]
 80019de:	2b27      	cmp	r3, #39	; 0x27
 80019e0:	d8a4      	bhi.n	800192c <uart_comms+0xe8>
 80019e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019e6:	bf00      	nop
 80019e8:	20000184 	.word	0x20000184
 80019ec:	200000c0 	.word	0x200000c0
 80019f0:	200000ac 	.word	0x200000ac
 80019f4:	20000024 	.word	0x20000024
 80019f8:	200000aa 	.word	0x200000aa
 80019fc:	20000010 	.word	0x20000010
 8001a00:	20000180 	.word	0x20000180
 8001a04:	20000015 	.word	0x20000015
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	20000006 	.word	0x20000006
 8001a10:	20000170 	.word	0x20000170
 8001a14:	200000a9 	.word	0x200000a9
 8001a18:	200000ab 	.word	0x200000ab
 8001a1c:	200001b0 	.word	0x200001b0
 8001a20:	20000020 	.word	0x20000020

08001a24 <seven_segment>:

void seven_segment(){
 8001a24:	b510      	push	{r4, lr}
	if(segment_counter == 1){	// Left Most Digit
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <seven_segment+0x60>)
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	2a01      	cmp	r2, #1
 8001a2c:	d10c      	bne.n	8001a48 <seven_segment+0x24>
		segment_counter += 1;
 8001a2e:	2202      	movs	r2, #2
 8001a30:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8001a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a36:	2200      	movs	r2, #0
 8001a38:	4813      	ldr	r0, [pc, #76]	; (8001a88 <seven_segment+0x64>)
 8001a3a:	f7fe fd51 	bl	80004e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);		// 7_SEG_2
 8001a3e:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
	}
	else if( segment_counter == 4){ // Right Most Digit
		segment_counter = 1;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8001a40:	2140      	movs	r1, #64	; 0x40
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	e006      	b.n	8001a56 <seven_segment+0x32>
	else if( segment_counter == 2){		// Middle left Digit
 8001a48:	2a02      	cmp	r2, #2
 8001a4a:	d108      	bne.n	8001a5e <seven_segment+0x3a>
		segment_counter += 1;
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8001a50:	2110      	movs	r1, #16
 8001a52:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <seven_segment+0x64>)
	}
}
 8001a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8001a5a:	f7fe bd41 	b.w	80004e0 <HAL_GPIO_WritePin>
	else if( segment_counter == 3){		// Middle Right Digit
 8001a5e:	2a03      	cmp	r2, #3
 8001a60:	d104      	bne.n	8001a6c <seven_segment+0x48>
		segment_counter += 1;
 8001a62:	2204      	movs	r2, #4
 8001a64:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8001a66:	2120      	movs	r1, #32
 8001a68:	2200      	movs	r2, #0
 8001a6a:	e7f3      	b.n	8001a54 <seven_segment+0x30>
	else if( segment_counter == 4){ // Right Most Digit
 8001a6c:	2a04      	cmp	r2, #4
 8001a6e:	d108      	bne.n	8001a82 <seven_segment+0x5e>
		segment_counter = 1;
 8001a70:	2401      	movs	r4, #1
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8001a72:	2200      	movs	r2, #0
 8001a74:	2108      	movs	r1, #8
 8001a76:	4804      	ldr	r0, [pc, #16]	; (8001a88 <seven_segment+0x64>)
		segment_counter = 1;
 8001a78:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8001a7a:	f7fe fd31 	bl	80004e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8001a7e:	4622      	mov	r2, r4
 8001a80:	e7de      	b.n	8001a40 <seven_segment+0x1c>
 8001a82:	bd10      	pop	{r4, pc}
 8001a84:	20000014 	.word	0x20000014
 8001a88:	48000400 	.word	0x48000400

08001a8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
		rx_flag = 1;
 8001a8c:	4b01      	ldr	r3, [pc, #4]	; (8001a94 <HAL_UART_RxCpltCallback+0x8>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	4770      	bx	lr
 8001a94:	200000aa 	.word	0x200000aa

08001a98 <init_peripherals>:

}

void init_peripherals(){
 8001a98:	b510      	push	{r4, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 	// 7_SEG_1
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f7fe fd1d 	bl	80004e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f7fe fd17 	bl	80004e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8001ab2:	4c1b      	ldr	r4, [pc, #108]	; (8001b20 <init_peripherals+0x88>)
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abe:	f7fe fd0f 	bl	80004e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001acc:	f7fe fd08 	bl	80004e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	f7fe fd03 	bl	80004e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8001ada:	4620      	mov	r0, r4
 8001adc:	2201      	movs	r2, #1
 8001ade:	2110      	movs	r1, #16
 8001ae0:	f7fe fcfe 	bl	80004e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2120      	movs	r1, #32
 8001aea:	f7fe fcf9 	bl	80004e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 8001aee:	4620      	mov	r0, r4
 8001af0:	2201      	movs	r2, #1
 8001af2:	2140      	movs	r1, #64	; 0x40
 8001af4:	f7fe fcf4 	bl	80004e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);	// D1
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7fe fcee 	bl	80004e0 <HAL_GPIO_WritePin>


	  studentnumber = (uint8_t*)malloc(15);
 8001b04:	200f      	movs	r0, #15
 8001b06:	f000 fa87 	bl	8002018 <malloc>
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <init_peripherals+0x8c>)
	  memset(studentnumber, 0x00, 15);
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	2100      	movs	r1, #0
	  studentnumber = (uint8_t*)malloc(15);
 8001b10:	6018      	str	r0, [r3, #0]
	  memset(studentnumber, 0x00, 15);
 8001b12:	f000 fa94 	bl	800203e <memset>

	HAL_TIM_Base_Start_IT(&htim2);
 8001b16:	4804      	ldr	r0, [pc, #16]	; (8001b28 <init_peripherals+0x90>)

}
 8001b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Start_IT(&htim2);
 8001b1c:	f7ff b93a 	b.w	8000d94 <HAL_TIM_Base_Start_IT>
 8001b20:	48000400 	.word	0x48000400
 8001b24:	20000180 	.word	0x20000180
 8001b28:	20000130 	.word	0x20000130

08001b2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b30:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b64:	9203      	str	r2, [sp, #12]
 8001b66:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b76:	9304      	str	r3, [sp, #16]
 8001b78:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	f7fe fcac 	bl	80004e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001b88:	4d23      	ldr	r5, [pc, #140]	; (8001c18 <MX_GPIO_Init+0xec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001b90:	4628      	mov	r0, r5
 8001b92:	f7fe fca5 	bl	80004e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_GPIO_Init+0xf0>)
 8001b9e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	4e1e      	ldr	r6, [pc, #120]	; (8001c20 <MX_GPIO_Init+0xf4>)
 8001ba6:	a905      	add	r1, sp, #20
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f7fe fbdf 	bl	800036c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8001bae:	2383      	movs	r3, #131	; 0x83
 8001bb0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb6:	a905      	add	r1, sp, #20
 8001bb8:	4630      	mov	r0, r6
 8001bba:	f7fe fbd7 	bl	800036c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001bbe:	2313      	movs	r3, #19
 8001bc0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	a905      	add	r1, sp, #20
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f7fe fbce 	bl	800036c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001bd0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001bd4:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2601      	movs	r6, #1
 8001bd8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	a905      	add	r1, sp, #20
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be4:	f7fe fbc2 	bl	800036c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001be8:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001bec:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	a905      	add	r1, sp, #20
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	f7fe fbb8 	bl	800036c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c00:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c02:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	a905      	add	r1, sp, #20
 8001c08:	4628      	mov	r0, r5
 8001c0a:	f7fe fbaf 	bl	800036c <HAL_GPIO_Init>

}
 8001c0e:	b00a      	add	sp, #40	; 0x28
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	10210000 	.word	0x10210000
 8001c20:	48000800 	.word	0x48000800

08001c24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8001c24:	4770      	bx	lr

08001c26 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001c26:	e7fe      	b.n	8001c26 <_Error_Handler>

08001c28 <MX_TIM2_Init>:
{
 8001c28:	b500      	push	{lr}
 8001c2a:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8001c2c:	4817      	ldr	r0, [pc, #92]	; (8001c8c <MX_TIM2_Init+0x64>)
 8001c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c32:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 63999999;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <MX_TIM2_Init+0x68>)
 8001c3e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c40:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c44:	f7ff f9b0 	bl	8000fa8 <HAL_TIM_Base_Init>
 8001c48:	b998      	cbnz	r0, 8001c72 <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4a:	a908      	add	r1, sp, #32
 8001c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c50:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <MX_TIM2_Init+0x64>)
 8001c56:	f7ff f9cb 	bl	8000ff0 <HAL_TIM_ConfigClockSource>
 8001c5a:	b970      	cbnz	r0, 8001c7a <MX_TIM2_Init+0x52>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c60:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c62:	a901      	add	r1, sp, #4
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <MX_TIM2_Init+0x64>)
 8001c66:	f7ff fa79 	bl	800115c <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	b950      	cbnz	r0, 8001c82 <MX_TIM2_Init+0x5a>
}
 8001c6c:	b009      	add	sp, #36	; 0x24
 8001c6e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001c72:	21d3      	movs	r1, #211	; 0xd3
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <MX_TIM2_Init+0x6c>)
 8001c76:	f7ff ffd6 	bl	8001c26 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001c7a:	21d9      	movs	r1, #217	; 0xd9
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_TIM2_Init+0x6c>)
 8001c7e:	f7ff ffd2 	bl	8001c26 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001c82:	21e0      	movs	r1, #224	; 0xe0
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <MX_TIM2_Init+0x6c>)
 8001c86:	f7ff ffce 	bl	8001c26 <_Error_Handler>
 8001c8a:	bf00      	nop
 8001c8c:	20000130 	.word	0x20000130
 8001c90:	03d08fff 	.word	0x03d08fff
 8001c94:	08002188 	.word	0x08002188

08001c98 <MX_USART1_UART_Init>:
{
 8001c98:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001c9a:	480c      	ldr	r0, [pc, #48]	; (8001ccc <MX_USART1_UART_Init+0x34>)
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_USART1_UART_Init+0x38>)
 8001c9e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001ca0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ca4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001caa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cac:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cae:	220c      	movs	r2, #12
 8001cb0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cba:	f7ff fc87 	bl	80015cc <HAL_UART_Init>
 8001cbe:	b900      	cbnz	r0, 8001cc2 <MX_USART1_UART_Init+0x2a>
 8001cc0:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001cc2:	21f5      	movs	r1, #245	; 0xf5
 8001cc4:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <MX_USART1_UART_Init+0x3c>)
 8001cc6:	f7ff ffae 	bl	8001c26 <_Error_Handler>
 8001cca:	bf00      	nop
 8001ccc:	200000c0 	.word	0x200000c0
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	08002188 	.word	0x08002188

08001cd8 <SystemClock_Config>:
{
 8001cd8:	b500      	push	{lr}
 8001cda:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cea:	2300      	movs	r3, #0
 8001cec:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001cee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001cf2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf4:	a80c      	add	r0, sp, #48	; 0x30
 8001cf6:	f7fe fbf9 	bl	80004ec <HAL_RCC_OscConfig>
 8001cfa:	bb48      	cbnz	r0, 8001d50 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d00:	2102      	movs	r1, #2
 8001d02:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d10:	a807      	add	r0, sp, #28
 8001d12:	f7fe fe8f 	bl	8000a34 <HAL_RCC_ClockConfig>
 8001d16:	b9f8      	cbnz	r0, 8001d58 <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d20:	4668      	mov	r0, sp
 8001d22:	f7fe ff7f 	bl	8000c24 <HAL_RCCEx_PeriphCLKConfig>
 8001d26:	b9d8      	cbnz	r0, 8001d60 <SystemClock_Config+0x88>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001d28:	f7fe ff46 	bl	8000bb8 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <SystemClock_Config+0x90>)
 8001d2e:	fba3 3000 	umull	r3, r0, r3, r0
 8001d32:	0980      	lsrs	r0, r0, #6
 8001d34:	f7fe face 	bl	80002d4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d38:	2004      	movs	r0, #4
 8001d3a:	f7fe fae1 	bl	8000300 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4611      	mov	r1, r2
 8001d42:	f04f 30ff 	mov.w	r0, #4294967295
 8001d46:	f7fe fa85 	bl	8000254 <HAL_NVIC_SetPriority>
}
 8001d4a:	b017      	add	sp, #92	; 0x5c
 8001d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001d50:	21a0      	movs	r1, #160	; 0xa0
 8001d52:	4806      	ldr	r0, [pc, #24]	; (8001d6c <SystemClock_Config+0x94>)
 8001d54:	f7ff ff67 	bl	8001c26 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001d58:	21ae      	movs	r1, #174	; 0xae
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <SystemClock_Config+0x94>)
 8001d5c:	f7ff ff63 	bl	8001c26 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001d60:	21b5      	movs	r1, #181	; 0xb5
 8001d62:	4802      	ldr	r0, [pc, #8]	; (8001d6c <SystemClock_Config+0x94>)
 8001d64:	f7ff ff5f 	bl	8001c26 <_Error_Handler>
 8001d68:	10624dd3 	.word	0x10624dd3
 8001d6c:	08002188 	.word	0x08002188

08001d70 <main>:
{
 8001d70:	b508      	push	{r3, lr}
  HAL_Init();
 8001d72:	f7fe fa3d 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8001d76:	f7ff ffaf 	bl	8001cd8 <SystemClock_Config>
  MX_GPIO_Init();
 8001d7a:	f7ff fed7 	bl	8001b2c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001d7e:	f7ff ff53 	bl	8001c28 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001d82:	f7ff ff89 	bl	8001c98 <MX_USART1_UART_Init>
  init_peripherals();
 8001d86:	f7ff fe87 	bl	8001a98 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <main+0x50>)
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <main+0x54>)
 8001d90:	f7ff fa16 	bl	80011c0 <HAL_UART_Receive_IT>
 8001d94:	e003      	b.n	8001d9e <main+0x2e>
	  if(tim2_flag == 1){
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <main+0x58>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d009      	beq.n	8001db2 <main+0x42>
	  if(rx_flag == 1 ){
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <main+0x5c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d1f7      	bne.n	8001d96 <main+0x26>
		  rx_flag = 0;
 8001da6:	2200      	movs	r2, #0
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <main+0x5c>)
 8001daa:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8001dac:	f7ff fd4a 	bl	8001844 <uart_comms>
 8001db0:	e7f1      	b.n	8001d96 <main+0x26>
		  tim2_flag = 0;
 8001db2:	2200      	movs	r2, #0
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <main+0x58>)
 8001db6:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 8001db8:	f7ff fe34 	bl	8001a24 <seven_segment>
 8001dbc:	e7ef      	b.n	8001d9e <main+0x2e>
 8001dbe:	bf00      	nop
 8001dc0:	20000184 	.word	0x20000184
 8001dc4:	200000c0 	.word	0x200000c0
 8001dc8:	200000a8 	.word	0x200000a8
 8001dcc:	200000aa 	.word	0x200000aa

08001dd0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_MspInit+0x78>)
{
 8001dd2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	619a      	str	r2, [r3, #24]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001de4:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001de8:	f7fe fa22 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	4611      	mov	r1, r2
 8001df0:	f06f 000b 	mvn.w	r0, #11
 8001df4:	f7fe fa2e 	bl	8000254 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	f06f 000a 	mvn.w	r0, #10
 8001e00:	f7fe fa28 	bl	8000254 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	4611      	mov	r1, r2
 8001e08:	f06f 0009 	mvn.w	r0, #9
 8001e0c:	f7fe fa22 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	4611      	mov	r1, r2
 8001e14:	f06f 0004 	mvn.w	r0, #4
 8001e18:	f7fe fa1c 	bl	8000254 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4611      	mov	r1, r2
 8001e20:	f06f 0003 	mvn.w	r0, #3
 8001e24:	f7fe fa16 	bl	8000254 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	f06f 0001 	mvn.w	r0, #1
 8001e30:	f7fe fa10 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	4611      	mov	r1, r2
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7fe fa0a 	bl	8000254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e40:	b003      	add	sp, #12
 8001e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001e4c:	6803      	ldr	r3, [r0, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001e52:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001e54:	d112      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e5a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	61da      	str	r2, [r3, #28]
 8001e64:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e6e:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e70:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e72:	f7fe f9ef 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e76:	201c      	movs	r0, #28
 8001e78:	f7fe fa20 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e7c:	b003      	add	sp, #12
 8001e7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001e84 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001e86:	6802      	ldr	r2, [r0, #0]
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_UART_MspInit+0x54>)
 8001e8a:	429a      	cmp	r2, r3
{
 8001e8c:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8001e8e:	d120      	bne.n	8001ed2 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e90:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e96:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	4810      	ldr	r0, [pc, #64]	; (8001edc <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e9e:	619a      	str	r2, [r3, #24]
 8001ea0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001eac:	2330      	movs	r3, #48	; 0x30
 8001eae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebe:	f7fe fa55 	bl	800036c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ec2:	2025      	movs	r0, #37	; 0x25
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	f7fe f9c4 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ecc:	2025      	movs	r0, #37	; 0x25
 8001ece:	f7fe f9f5 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ed2:	b006      	add	sp, #24
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	48000800 	.word	0x48000800

08001ee0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ee0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee2:	f7fe f997 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001eea:	f7fe ba16 	b.w	800031a <HAL_SYSTICK_IRQHandler>
	...

08001ef0 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8001ef0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ef2:	4803      	ldr	r0, [pc, #12]	; (8001f00 <TIM2_IRQHandler+0x10>)
 8001ef4:	f7fe ff5d 	bl	8000db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag= 1;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <TIM2_IRQHandler+0x14>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	bd08      	pop	{r3, pc}
 8001f00:	20000130 	.word	0x20000130
 8001f04:	200000a8 	.word	0x200000a8

08001f08 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f08:	4801      	ldr	r0, [pc, #4]	; (8001f10 <USART1_IRQHandler+0x8>)
 8001f0a:	f7ff bc03 	b.w	8001714 <HAL_UART_IRQHandler>
 8001f0e:	bf00      	nop
 8001f10:	200000c0 	.word	0x200000c0

08001f14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f14:	4915      	ldr	r1, [pc, #84]	; (8001f6c <SystemInit+0x58>)
 8001f16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <SystemInit+0x5c>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001f2c:	6858      	ldr	r0, [r3, #4]
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <SystemInit+0x60>)
 8001f30:	4002      	ands	r2, r0
 8001f32:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f46:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001f4e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f52:	f022 020f 	bic.w	r2, r2, #15
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001f58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <SystemInit+0x64>)
 8001f5c:	4002      	ands	r2, r0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f68:	608b      	str	r3, [r1, #8]
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00
 8001f70:	40021000 	.word	0x40021000
 8001f74:	f87fc00c 	.word	0xf87fc00c
 8001f78:	ff00fccc 	.word	0xff00fccc

08001f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
	ldr	r2, =_sbss
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <LoopForever+0x16>)
	cmp	r2, r3
 8001fa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa6:	f7ff ffb5 	bl	8001f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f000 f811 	bl	8001fd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fae:	f7ff fedf 	bl	8001d70 <main>

08001fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb2:	e7fe      	b.n	8001fb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fb4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001fb8:	080021c4 	.word	0x080021c4
	ldr	r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fc0:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8001fc4:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8001fc8:	200001b8 	.word	0x200001b8

08001fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_2_IRQHandler>
	...

08001fd0 <__libc_init_array>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	4e0d      	ldr	r6, [pc, #52]	; (8002008 <__libc_init_array+0x38>)
 8001fd4:	4c0d      	ldr	r4, [pc, #52]	; (800200c <__libc_init_array+0x3c>)
 8001fd6:	1ba4      	subs	r4, r4, r6
 8001fd8:	10a4      	asrs	r4, r4, #2
 8001fda:	2500      	movs	r5, #0
 8001fdc:	42a5      	cmp	r5, r4
 8001fde:	d109      	bne.n	8001ff4 <__libc_init_array+0x24>
 8001fe0:	4e0b      	ldr	r6, [pc, #44]	; (8002010 <__libc_init_array+0x40>)
 8001fe2:	4c0c      	ldr	r4, [pc, #48]	; (8002014 <__libc_init_array+0x44>)
 8001fe4:	f000 f8b2 	bl	800214c <_init>
 8001fe8:	1ba4      	subs	r4, r4, r6
 8001fea:	10a4      	asrs	r4, r4, #2
 8001fec:	2500      	movs	r5, #0
 8001fee:	42a5      	cmp	r5, r4
 8001ff0:	d105      	bne.n	8001ffe <__libc_init_array+0x2e>
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ff8:	4798      	blx	r3
 8001ffa:	3501      	adds	r5, #1
 8001ffc:	e7ee      	b.n	8001fdc <__libc_init_array+0xc>
 8001ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002002:	4798      	blx	r3
 8002004:	3501      	adds	r5, #1
 8002006:	e7f2      	b.n	8001fee <__libc_init_array+0x1e>
 8002008:	080021bc 	.word	0x080021bc
 800200c:	080021bc 	.word	0x080021bc
 8002010:	080021bc 	.word	0x080021bc
 8002014:	080021c0 	.word	0x080021c0

08002018 <malloc>:
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <malloc+0xc>)
 800201a:	4601      	mov	r1, r0
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	f000 b817 	b.w	8002050 <_malloc_r>
 8002022:	bf00      	nop
 8002024:	20000028 	.word	0x20000028

08002028 <memcpy>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e43      	subs	r3, r0, #1
 800202c:	440a      	add	r2, r1
 800202e:	4291      	cmp	r1, r2
 8002030:	d100      	bne.n	8002034 <memcpy+0xc>
 8002032:	bd10      	pop	{r4, pc}
 8002034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800203c:	e7f7      	b.n	800202e <memcpy+0x6>

0800203e <memset>:
 800203e:	4402      	add	r2, r0
 8002040:	4603      	mov	r3, r0
 8002042:	4293      	cmp	r3, r2
 8002044:	d100      	bne.n	8002048 <memset+0xa>
 8002046:	4770      	bx	lr
 8002048:	f803 1b01 	strb.w	r1, [r3], #1
 800204c:	e7f9      	b.n	8002042 <memset+0x4>
	...

08002050 <_malloc_r>:
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	1ccd      	adds	r5, r1, #3
 8002054:	f025 0503 	bic.w	r5, r5, #3
 8002058:	3508      	adds	r5, #8
 800205a:	2d0c      	cmp	r5, #12
 800205c:	bf38      	it	cc
 800205e:	250c      	movcc	r5, #12
 8002060:	2d00      	cmp	r5, #0
 8002062:	4606      	mov	r6, r0
 8002064:	db01      	blt.n	800206a <_malloc_r+0x1a>
 8002066:	42a9      	cmp	r1, r5
 8002068:	d903      	bls.n	8002072 <_malloc_r+0x22>
 800206a:	230c      	movs	r3, #12
 800206c:	6033      	str	r3, [r6, #0]
 800206e:	2000      	movs	r0, #0
 8002070:	bd70      	pop	{r4, r5, r6, pc}
 8002072:	f000 f85b 	bl	800212c <__malloc_lock>
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <_malloc_r+0xb4>)
 8002078:	6814      	ldr	r4, [r2, #0]
 800207a:	4621      	mov	r1, r4
 800207c:	b991      	cbnz	r1, 80020a4 <_malloc_r+0x54>
 800207e:	4c22      	ldr	r4, [pc, #136]	; (8002108 <_malloc_r+0xb8>)
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	b91b      	cbnz	r3, 800208c <_malloc_r+0x3c>
 8002084:	4630      	mov	r0, r6
 8002086:	f000 f841 	bl	800210c <_sbrk_r>
 800208a:	6020      	str	r0, [r4, #0]
 800208c:	4629      	mov	r1, r5
 800208e:	4630      	mov	r0, r6
 8002090:	f000 f83c 	bl	800210c <_sbrk_r>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d126      	bne.n	80020e6 <_malloc_r+0x96>
 8002098:	230c      	movs	r3, #12
 800209a:	6033      	str	r3, [r6, #0]
 800209c:	4630      	mov	r0, r6
 800209e:	f000 f846 	bl	800212e <__malloc_unlock>
 80020a2:	e7e4      	b.n	800206e <_malloc_r+0x1e>
 80020a4:	680b      	ldr	r3, [r1, #0]
 80020a6:	1b5b      	subs	r3, r3, r5
 80020a8:	d41a      	bmi.n	80020e0 <_malloc_r+0x90>
 80020aa:	2b0b      	cmp	r3, #11
 80020ac:	d90f      	bls.n	80020ce <_malloc_r+0x7e>
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	50cd      	str	r5, [r1, r3]
 80020b2:	18cc      	adds	r4, r1, r3
 80020b4:	4630      	mov	r0, r6
 80020b6:	f000 f83a 	bl	800212e <__malloc_unlock>
 80020ba:	f104 000b 	add.w	r0, r4, #11
 80020be:	1d23      	adds	r3, r4, #4
 80020c0:	f020 0007 	bic.w	r0, r0, #7
 80020c4:	1ac3      	subs	r3, r0, r3
 80020c6:	d01b      	beq.n	8002100 <_malloc_r+0xb0>
 80020c8:	425a      	negs	r2, r3
 80020ca:	50e2      	str	r2, [r4, r3]
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	428c      	cmp	r4, r1
 80020d0:	bf0d      	iteet	eq
 80020d2:	6863      	ldreq	r3, [r4, #4]
 80020d4:	684b      	ldrne	r3, [r1, #4]
 80020d6:	6063      	strne	r3, [r4, #4]
 80020d8:	6013      	streq	r3, [r2, #0]
 80020da:	bf18      	it	ne
 80020dc:	460c      	movne	r4, r1
 80020de:	e7e9      	b.n	80020b4 <_malloc_r+0x64>
 80020e0:	460c      	mov	r4, r1
 80020e2:	6849      	ldr	r1, [r1, #4]
 80020e4:	e7ca      	b.n	800207c <_malloc_r+0x2c>
 80020e6:	1cc4      	adds	r4, r0, #3
 80020e8:	f024 0403 	bic.w	r4, r4, #3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	d005      	beq.n	80020fc <_malloc_r+0xac>
 80020f0:	1a21      	subs	r1, r4, r0
 80020f2:	4630      	mov	r0, r6
 80020f4:	f000 f80a 	bl	800210c <_sbrk_r>
 80020f8:	3001      	adds	r0, #1
 80020fa:	d0cd      	beq.n	8002098 <_malloc_r+0x48>
 80020fc:	6025      	str	r5, [r4, #0]
 80020fe:	e7d9      	b.n	80020b4 <_malloc_r+0x64>
 8002100:	bd70      	pop	{r4, r5, r6, pc}
 8002102:	bf00      	nop
 8002104:	200000b0 	.word	0x200000b0
 8002108:	200000b4 	.word	0x200000b4

0800210c <_sbrk_r>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	4c06      	ldr	r4, [pc, #24]	; (8002128 <_sbrk_r+0x1c>)
 8002110:	2300      	movs	r3, #0
 8002112:	4605      	mov	r5, r0
 8002114:	4608      	mov	r0, r1
 8002116:	6023      	str	r3, [r4, #0]
 8002118:	f000 f80a 	bl	8002130 <_sbrk>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d102      	bne.n	8002126 <_sbrk_r+0x1a>
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	b103      	cbz	r3, 8002126 <_sbrk_r+0x1a>
 8002124:	602b      	str	r3, [r5, #0]
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	200001b4 	.word	0x200001b4

0800212c <__malloc_lock>:
 800212c:	4770      	bx	lr

0800212e <__malloc_unlock>:
 800212e:	4770      	bx	lr

08002130 <_sbrk>:
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <_sbrk+0x14>)
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	4602      	mov	r2, r0
 8002136:	b909      	cbnz	r1, 800213c <_sbrk+0xc>
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <_sbrk+0x18>)
 800213a:	6019      	str	r1, [r3, #0]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	4402      	add	r2, r0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4770      	bx	lr
 8002144:	200000b8 	.word	0x200000b8
 8002148:	200001b8 	.word	0x200001b8

0800214c <_init>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	bf00      	nop
 8002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002152:	bc08      	pop	{r3}
 8002154:	469e      	mov	lr, r3
 8002156:	4770      	bx	lr

08002158 <_fini>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	bf00      	nop
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr
