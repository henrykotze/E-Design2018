
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  20000000  08005950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
  7 .bss          00000364  20000200  20000200  00020200  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000564  20000564  00020200  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e084  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004220  00000000  00000000  0004e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000fbbc  00000000  00000000  000524d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013b0  00000000  00000000  00062090  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001288  00000000  00000000  00063440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00021557  00000000  00000000  000646c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001264a  00000000  00000000  00085c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b2c30  00000000  00000000  00098269  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0014ae99  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003ac4  00000000  00000000  0014af18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005754 	.word	0x08005754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08005754 	.word	0x08005754

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b510      	push	{r4, lr}
 8000282:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <HAL_InitTick+0x24>)
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <HAL_InitTick+0x28>)
 800028a:	fba3 3000 	umull	r3, r0, r3, r0
 800028e:	0980      	lsrs	r0, r0, #6
 8000290:	f000 fd94 	bl	8000dbc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000294:	2200      	movs	r2, #0
 8000296:	4621      	mov	r1, r4
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 fd50 	bl	8000d40 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002a0:	2000      	movs	r0, #0
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	20000000 	.word	0x20000000
 80002a8:	10624dd3 	.word	0x10624dd3

080002ac <HAL_Init>:
{
 80002ac:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ae:	4a07      	ldr	r2, [pc, #28]	; (80002cc <HAL_Init+0x20>)
 80002b0:	6813      	ldr	r3, [r2, #0]
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b8:	2003      	movs	r0, #3
 80002ba:	f000 fd2f 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002be:	2000      	movs	r0, #0
 80002c0:	f7ff ffde 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002c4:	f003 fe0a 	bl	8003edc <HAL_MspInit>
}
 80002c8:	2000      	movs	r0, #0
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	40022000 	.word	0x40022000

080002d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <HAL_IncTick+0xc>)
 80002d2:	6813      	ldr	r3, [r2, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	200002b8 	.word	0x200002b8

080002e0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002e0:	4b01      	ldr	r3, [pc, #4]	; (80002e8 <HAL_GetTick+0x8>)
 80002e2:	6818      	ldr	r0, [r3, #0]
}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	200002b8 	.word	0x200002b8

080002ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80002ec:	4770      	bx	lr

080002ee <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80002ee:	4770      	bx	lr

080002f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80002f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002f2:	6802      	ldr	r2, [r0, #0]
 80002f4:	6893      	ldr	r3, [r2, #8]
 80002f6:	f003 0303 	and.w	r3, r3, #3
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d011      	beq.n	8000322 <ADC_Disable+0x32>
 80002fe:	2300      	movs	r3, #0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d037      	beq.n	8000374 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000304:	6893      	ldr	r3, [r2, #8]
 8000306:	f003 030d 	and.w	r3, r3, #13
 800030a:	2b01      	cmp	r3, #1
 800030c:	d011      	beq.n	8000332 <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800030e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000310:	f043 0310 	orr.w	r3, r3, #16
 8000314:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000316:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 800031e:	2001      	movs	r0, #1
 8000320:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000322:	6813      	ldr	r3, [r2, #0]
 8000324:	f013 0f01 	tst.w	r3, #1
 8000328:	d101      	bne.n	800032e <ADC_Disable+0x3e>
 800032a:	2300      	movs	r3, #0
 800032c:	e7e8      	b.n	8000300 <ADC_Disable+0x10>
 800032e:	2301      	movs	r3, #1
 8000330:	e7e6      	b.n	8000300 <ADC_Disable+0x10>
 8000332:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000334:	6893      	ldr	r3, [r2, #8]
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6093      	str	r3, [r2, #8]
 800033c:	6803      	ldr	r3, [r0, #0]
 800033e:	2203      	movs	r2, #3
 8000340:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000342:	f7ff ffcd 	bl	80002e0 <HAL_GetTick>
 8000346:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000348:	6823      	ldr	r3, [r4, #0]
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	f013 0f01 	tst.w	r3, #1
 8000350:	d00e      	beq.n	8000370 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000352:	f7ff ffc5 	bl	80002e0 <HAL_GetTick>
 8000356:	1b40      	subs	r0, r0, r5
 8000358:	2802      	cmp	r0, #2
 800035a:	d9f5      	bls.n	8000348 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800035c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000364:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800036c:	2001      	movs	r0, #1
 800036e:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000370:	2000      	movs	r0, #0
 8000372:	bd38      	pop	{r3, r4, r5, pc}
 8000374:	2000      	movs	r0, #0
}
 8000376:	bd38      	pop	{r3, r4, r5, pc}

08000378 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000378:	6803      	ldr	r3, [r0, #0]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	f012 0f0c 	tst.w	r2, #12
 8000380:	d062      	beq.n	8000448 <ADC_ConversionStop+0xd0>
{
 8000382:	b570      	push	{r4, r5, r6, lr}
 8000384:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000386:	68da      	ldr	r2, [r3, #12]
 8000388:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800038c:	d002      	beq.n	8000394 <ADC_ConversionStop+0x1c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800038e:	69c2      	ldr	r2, [r0, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000390:	2a01      	cmp	r2, #1
 8000392:	d038      	beq.n	8000406 <ADC_ConversionStop+0x8e>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8000394:	2960      	cmp	r1, #96	; 0x60
 8000396:	d00c      	beq.n	80003b2 <ADC_ConversionStop+0x3a>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000398:	6823      	ldr	r3, [r4, #0]
 800039a:	689a      	ldr	r2, [r3, #8]
 800039c:	f012 0f04 	tst.w	r2, #4
 80003a0:	d007      	beq.n	80003b2 <ADC_ConversionStop+0x3a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80003a2:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003a4:	f012 0f02 	tst.w	r2, #2
 80003a8:	d103      	bne.n	80003b2 <ADC_ConversionStop+0x3a>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80003aa:	689a      	ldr	r2, [r3, #8]
 80003ac:	f042 0210 	orr.w	r2, r2, #16
 80003b0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80003b2:	290c      	cmp	r1, #12
 80003b4:	d00c      	beq.n	80003d0 <ADC_ConversionStop+0x58>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80003b6:	6823      	ldr	r3, [r4, #0]
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	f012 0f08 	tst.w	r2, #8
 80003be:	d007      	beq.n	80003d0 <ADC_ConversionStop+0x58>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80003c0:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80003c2:	f012 0f02 	tst.w	r2, #2
 80003c6:	d103      	bne.n	80003d0 <ADC_ConversionStop+0x58>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	f042 0220 	orr.w	r2, r2, #32
 80003ce:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80003d0:	2960      	cmp	r1, #96	; 0x60
 80003d2:	d035      	beq.n	8000440 <ADC_ConversionStop+0xc8>
 80003d4:	296c      	cmp	r1, #108	; 0x6c
 80003d6:	d131      	bne.n	800043c <ADC_ConversionStop+0xc4>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80003d8:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80003da:	f7ff ff81 	bl	80002e0 <HAL_GetTick>
 80003de:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80003e0:	6823      	ldr	r3, [r4, #0]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	421d      	tst	r5, r3
 80003e6:	d02d      	beq.n	8000444 <ADC_ConversionStop+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80003e8:	f7ff ff7a 	bl	80002e0 <HAL_GetTick>
 80003ec:	1b80      	subs	r0, r0, r6
 80003ee:	280b      	cmp	r0, #11
 80003f0:	d9f6      	bls.n	80003e0 <ADC_ConversionStop+0x68>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000402:	2001      	movs	r0, #1
 8000404:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8000406:	6982      	ldr	r2, [r0, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000408:	2a01      	cmp	r2, #1
 800040a:	d1c3      	bne.n	8000394 <ADC_ConversionStop+0x1c>
 800040c:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000414:	d10e      	bne.n	8000434 <ADC_ConversionStop+0xbc>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8000416:	490d      	ldr	r1, [pc, #52]	; (800044c <ADC_ConversionStop+0xd4>)
 8000418:	428a      	cmp	r2, r1
 800041a:	d801      	bhi.n	8000420 <ADC_ConversionStop+0xa8>
        Conversion_Timeout_CPU_cycles ++;
 800041c:	3201      	adds	r2, #1
 800041e:	e7f6      	b.n	800040e <ADC_ConversionStop+0x96>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000420:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000428:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	64a3      	str	r3, [r4, #72]	; 0x48
          return HAL_ERROR;
 8000430:	2001      	movs	r0, #1
 8000432:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000434:	2240      	movs	r2, #64	; 0x40
 8000436:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8000438:	210c      	movs	r1, #12
 800043a:	e7ab      	b.n	8000394 <ADC_ConversionStop+0x1c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800043c:	2504      	movs	r5, #4
        break;
 800043e:	e7cc      	b.n	80003da <ADC_ConversionStop+0x62>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000440:	2508      	movs	r5, #8
 8000442:	e7ca      	b.n	80003da <ADC_ConversionStop+0x62>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000444:	2000      	movs	r0, #0
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	2000      	movs	r0, #0
 800044a:	4770      	bx	lr
 800044c:	000993ff 	.word	0x000993ff

08000450 <ADC_Enable>:
{
 8000450:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000452:	6802      	ldr	r2, [r0, #0]
 8000454:	6893      	ldr	r3, [r2, #8]
 8000456:	f003 0303 	and.w	r3, r3, #3
 800045a:	2b01      	cmp	r3, #1
 800045c:	d010      	beq.n	8000480 <ADC_Enable+0x30>
 800045e:	2300      	movs	r3, #0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d133      	bne.n	80004cc <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000464:	6891      	ldr	r1, [r2, #8]
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <ADC_Enable+0x80>)
 8000468:	4219      	tst	r1, r3
 800046a:	d011      	beq.n	8000490 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800046c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800046e:	f043 0310 	orr.w	r3, r3, #16
 8000472:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000474:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 800047c:	2001      	movs	r0, #1
 800047e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000480:	6813      	ldr	r3, [r2, #0]
 8000482:	f013 0f01 	tst.w	r3, #1
 8000486:	d101      	bne.n	800048c <ADC_Enable+0x3c>
 8000488:	2300      	movs	r3, #0
 800048a:	e7e9      	b.n	8000460 <ADC_Enable+0x10>
 800048c:	2301      	movs	r3, #1
 800048e:	e7e7      	b.n	8000460 <ADC_Enable+0x10>
 8000490:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000492:	6893      	ldr	r3, [r2, #8]
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800049a:	f7ff ff21 	bl	80002e0 <HAL_GetTick>
 800049e:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004a0:	6823      	ldr	r3, [r4, #0]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f013 0f01 	tst.w	r3, #1
 80004a8:	d10e      	bne.n	80004c8 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004aa:	f7ff ff19 	bl	80002e0 <HAL_GetTick>
 80004ae:	1b40      	subs	r0, r0, r5
 80004b0:	2802      	cmp	r0, #2
 80004b2:	d9f5      	bls.n	80004a0 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80004c4:	2001      	movs	r0, #1
 80004c6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80004c8:	2000      	movs	r0, #0
 80004ca:	bd38      	pop	{r3, r4, r5, pc}
 80004cc:	2000      	movs	r0, #0
}
 80004ce:	bd38      	pop	{r3, r4, r5, pc}
 80004d0:	8000003f 	.word	0x8000003f

080004d4 <ADC_DMAError>:
{
 80004d4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80004d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80004d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80004da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004de:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80004e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 80004e8:	f7ff ff01 	bl	80002ee <HAL_ADC_ErrorCallback>
 80004ec:	bd08      	pop	{r3, pc}

080004ee <ADC_DMAHalfConvCplt>:
{
 80004ee:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80004f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80004f2:	f7ff fefb 	bl	80002ec <HAL_ADC_ConvHalfCpltCallback>
 80004f6:	bd08      	pop	{r3, pc}

080004f8 <ADC_DMAConvCplt>:
{
 80004f8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80004fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80004fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004fe:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000502:	d11a      	bne.n	800053a <ADC_DMAConvCplt+0x42>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	68d2      	ldr	r2, [r2, #12]
 8000510:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000514:	d10d      	bne.n	8000532 <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000516:	69da      	ldr	r2, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000518:	b95a      	cbnz	r2, 8000532 <ADC_DMAConvCplt+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800051a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800051c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000520:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000524:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000528:	d103      	bne.n	8000532 <ADC_DMAConvCplt+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800052a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800052c:	f042 0201 	orr.w	r2, r2, #1
 8000530:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000532:	4618      	mov	r0, r3
 8000534:	f002 fda4 	bl	8003080 <HAL_ADC_ConvCpltCallback>
 8000538:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800053a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4798      	blx	r3
 8000540:	bd08      	pop	{r3, pc}
	...

08000544 <HAL_ADC_Init>:
{
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000548:	2300      	movs	r3, #0
 800054a:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 800054c:	2800      	cmp	r0, #0
 800054e:	f000 80fb 	beq.w	8000748 <HAL_ADC_Init+0x204>
 8000552:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000554:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000556:	f013 0f10 	tst.w	r3, #16
 800055a:	d151      	bne.n	8000600 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800055c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800055e:	b1ab      	cbz	r3, 800058c <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000560:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	689a      	ldr	r2, [r3, #8]
 8000566:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800056a:	d003      	beq.n	8000574 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800056c:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800056e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000572:	d046      	beq.n	8000602 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000574:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000576:	f023 0312 	bic.w	r3, r3, #18
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000580:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000588:	2001      	movs	r0, #1
 800058a:	e03a      	b.n	8000602 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800058c:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800058e:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000590:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000592:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000596:	f003 fcdf 	bl	8003f58 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80005a2:	d001      	beq.n	80005a8 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005a4:	2000      	movs	r0, #0
 80005a6:	e7dc      	b.n	8000562 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 80005a8:	4620      	mov	r0, r4
 80005aa:	f7ff fea1 	bl	80002f0 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005b0:	f013 0f10 	tst.w	r3, #16
 80005b4:	d1d5      	bne.n	8000562 <HAL_ADC_Init+0x1e>
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d1d3      	bne.n	8000562 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 80005ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005c0:	f023 0302 	bic.w	r3, r3, #2
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80005ca:	6822      	ldr	r2, [r4, #0]
 80005cc:	6893      	ldr	r3, [r2, #8]
 80005ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80005d2:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80005d4:	6822      	ldr	r2, [r4, #0]
 80005d6:	6893      	ldr	r3, [r2, #8]
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005de:	4b5b      	ldr	r3, [pc, #364]	; (800074c <HAL_ADC_Init+0x208>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a5b      	ldr	r2, [pc, #364]	; (8000750 <HAL_ADC_Init+0x20c>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	0c9b      	lsrs	r3, r3, #18
 80005ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005ee:	005a      	lsls	r2, r3, #1
 80005f0:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80005f2:	9b00      	ldr	r3, [sp, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0b4      	beq.n	8000562 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 80005f8:	9b00      	ldr	r3, [sp, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	e7f8      	b.n	80005f2 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000600:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000602:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000604:	f013 0f10 	tst.w	r3, #16
 8000608:	f040 8095 	bne.w	8000736 <HAL_ADC_Init+0x1f2>
 800060c:	2800      	cmp	r0, #0
 800060e:	f040 8092 	bne.w	8000736 <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000612:	6822      	ldr	r2, [r4, #0]
 8000614:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000616:	f013 0304 	ands.w	r3, r3, #4
 800061a:	f040 808c 	bne.w	8000736 <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 800061e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000620:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000624:	f041 0102 	orr.w	r1, r1, #2
 8000628:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800062a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800062e:	d055      	beq.n	80006dc <HAL_ADC_Init+0x198>
 8000630:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000634:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000636:	6891      	ldr	r1, [r2, #8]
 8000638:	f001 0103 	and.w	r1, r1, #3
 800063c:	2901      	cmp	r1, #1
 800063e:	d050      	beq.n	80006e2 <HAL_ADC_Init+0x19e>
 8000640:	2200      	movs	r2, #0
 8000642:	b972      	cbnz	r2, 8000662 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000644:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000646:	b12d      	cbz	r5, 8000654 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000648:	68a9      	ldr	r1, [r5, #8]
 800064a:	f001 0103 	and.w	r1, r1, #3
 800064e:	2901      	cmp	r1, #1
 8000650:	d04f      	beq.n	80006f2 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000652:	b932      	cbnz	r2, 8000662 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000654:	493f      	ldr	r1, [pc, #252]	; (8000754 <HAL_ADC_Init+0x210>)
 8000656:	688a      	ldr	r2, [r1, #8]
 8000658:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800065c:	6865      	ldr	r5, [r4, #4]
 800065e:	432a      	orrs	r2, r5
 8000660:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000662:	69e2      	ldr	r2, [r4, #28]
 8000664:	0351      	lsls	r1, r2, #13
 8000666:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000668:	2d01      	cmp	r5, #1
 800066a:	d001      	beq.n	8000670 <HAL_ADC_Init+0x12c>
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	430b      	orrs	r3, r1
 8000672:	68e1      	ldr	r1, [r4, #12]
 8000674:	430b      	orrs	r3, r1
 8000676:	68a1      	ldr	r1, [r4, #8]
 8000678:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800067a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800067c:	2901      	cmp	r1, #1
 800067e:	d03e      	beq.n	80006fe <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000682:	2a01      	cmp	r2, #1
 8000684:	d002      	beq.n	800068c <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000686:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000688:	430a      	orrs	r2, r1
 800068a:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800068c:	6822      	ldr	r2, [r4, #0]
 800068e:	6891      	ldr	r1, [r2, #8]
 8000690:	f011 0f0c 	tst.w	r1, #12
 8000694:	d10b      	bne.n	80006ae <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000696:	68d1      	ldr	r1, [r2, #12]
 8000698:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800069c:	f021 0102 	bic.w	r1, r1, #2
 80006a0:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80006a2:	69a1      	ldr	r1, [r4, #24]
 80006a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80006ac:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80006ae:	6821      	ldr	r1, [r4, #0]
 80006b0:	68cd      	ldr	r5, [r1, #12]
 80006b2:	4a29      	ldr	r2, [pc, #164]	; (8000758 <HAL_ADC_Init+0x214>)
 80006b4:	402a      	ands	r2, r5
 80006b6:	4313      	orrs	r3, r2
 80006b8:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80006ba:	6923      	ldr	r3, [r4, #16]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d031      	beq.n	8000724 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80006c0:	6822      	ldr	r2, [r4, #0]
 80006c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80006ca:	2300      	movs	r3, #0
 80006cc:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80006ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006d0:	f023 0303 	bic.w	r3, r3, #3
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6463      	str	r3, [r4, #68]	; 0x44
 80006da:	e033      	b.n	8000744 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80006dc:	491f      	ldr	r1, [pc, #124]	; (800075c <HAL_ADC_Init+0x218>)
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	e7a9      	b.n	8000636 <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80006e2:	6812      	ldr	r2, [r2, #0]
 80006e4:	f012 0f01 	tst.w	r2, #1
 80006e8:	d101      	bne.n	80006ee <HAL_ADC_Init+0x1aa>
 80006ea:	2200      	movs	r2, #0
 80006ec:	e7a9      	b.n	8000642 <HAL_ADC_Init+0xfe>
 80006ee:	2201      	movs	r2, #1
 80006f0:	e7a7      	b.n	8000642 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80006f2:	6829      	ldr	r1, [r5, #0]
 80006f4:	f011 0f01 	tst.w	r1, #1
 80006f8:	d0ab      	beq.n	8000652 <HAL_ADC_Init+0x10e>
 80006fa:	2201      	movs	r2, #1
 80006fc:	e7a9      	b.n	8000652 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006fe:	b932      	cbnz	r2, 800070e <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000702:	3a01      	subs	r2, #1
 8000704:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070c:	e7b8      	b.n	8000680 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 800070e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000710:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000714:	f042 0220 	orr.w	r2, r2, #32
 8000718:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800071a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800071c:	f042 0201 	orr.w	r2, r2, #1
 8000720:	64a2      	str	r2, [r4, #72]	; 0x48
 8000722:	e7ad      	b.n	8000680 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000724:	6821      	ldr	r1, [r4, #0]
 8000726:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000728:	f023 030f 	bic.w	r3, r3, #15
 800072c:	6a22      	ldr	r2, [r4, #32]
 800072e:	3a01      	subs	r2, #1
 8000730:	4313      	orrs	r3, r2
 8000732:	630b      	str	r3, [r1, #48]	; 0x30
 8000734:	e7c9      	b.n	80006ca <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000736:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000738:	f023 0312 	bic.w	r3, r3, #18
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8000742:	2001      	movs	r0, #1
}
 8000744:	b017      	add	sp, #92	; 0x5c
 8000746:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000748:	2001      	movs	r0, #1
 800074a:	e7fb      	b.n	8000744 <HAL_ADC_Init+0x200>
 800074c:	20000000 	.word	0x20000000
 8000750:	431bde83 	.word	0x431bde83
 8000754:	50000300 	.word	0x50000300
 8000758:	fff0c007 	.word	0xfff0c007
 800075c:	50000100 	.word	0x50000100

08000760 <HAL_ADC_Start_DMA>:
{
 8000760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000762:	6804      	ldr	r4, [r0, #0]
 8000764:	68a4      	ldr	r4, [r4, #8]
 8000766:	f014 0f04 	tst.w	r4, #4
 800076a:	d002      	beq.n	8000772 <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_BUSY;
 800076c:	2502      	movs	r5, #2
}
 800076e:	4628      	mov	r0, r5
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000772:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000776:	2b01      	cmp	r3, #1
 8000778:	d07e      	beq.n	8000878 <HAL_ADC_Start_DMA+0x118>
 800077a:	2301      	movs	r3, #1
 800077c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000780:	4b3e      	ldr	r3, [pc, #248]	; (800087c <HAL_ADC_Start_DMA+0x11c>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f013 0f1f 	tst.w	r3, #31
 8000788:	d004      	beq.n	8000794 <HAL_ADC_Start_DMA+0x34>
      __HAL_UNLOCK(hadc);
 800078a:	2300      	movs	r3, #0
 800078c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8000790:	2501      	movs	r5, #1
 8000792:	e7ec      	b.n	800076e <HAL_ADC_Start_DMA+0xe>
 8000794:	4617      	mov	r7, r2
 8000796:	460e      	mov	r6, r1
 8000798:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 800079a:	f7ff fe59 	bl	8000450 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800079e:	4605      	mov	r5, r0
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d165      	bne.n	8000870 <HAL_ADC_Start_DMA+0x110>
        ADC_STATE_CLR_SET(hadc->State,
 80007a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80007aa:	f023 0301 	bic.w	r3, r3, #1
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <HAL_ADC_Start_DMA+0x11c>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f013 0f1f 	tst.w	r3, #31
 80007bc:	d038      	beq.n	8000830 <HAL_ADC_Start_DMA+0xd0>
 80007be:	6822      	ldr	r2, [r4, #0]
 80007c0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80007c4:	d034      	beq.n	8000830 <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80007c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007cc:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <HAL_ADC_Start_DMA+0x120>)
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d03d      	beq.n	8000850 <HAL_ADC_Start_DMA+0xf0>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80007da:	d046      	beq.n	800086a <HAL_ADC_Start_DMA+0x10a>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 80007e4:	2300      	movs	r3, #0
 80007e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007ec:	4a25      	ldr	r2, [pc, #148]	; (8000884 <HAL_ADC_Start_DMA+0x124>)
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <HAL_ADC_Start_DMA+0x128>)
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80007f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007f8:	4a24      	ldr	r2, [pc, #144]	; (800088c <HAL_ADC_Start_DMA+0x12c>)
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007fc:	6823      	ldr	r3, [r4, #0]
 80007fe:	221c      	movs	r2, #28
 8000800:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000802:	6822      	ldr	r2, [r4, #0]
 8000804:	6853      	ldr	r3, [r2, #4]
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800080c:	6822      	ldr	r2, [r4, #0]
 800080e:	68d3      	ldr	r3, [r2, #12]
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000816:	6821      	ldr	r1, [r4, #0]
 8000818:	463b      	mov	r3, r7
 800081a:	4632      	mov	r2, r6
 800081c:	3140      	adds	r1, #64	; 0x40
 800081e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000820:	f000 fb4c 	bl	8000ebc <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000824:	6822      	ldr	r2, [r4, #0]
 8000826:	6893      	ldr	r3, [r2, #8]
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6093      	str	r3, [r2, #8]
 800082e:	e79e      	b.n	800076e <HAL_ADC_Start_DMA+0xe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000830:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000832:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000836:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000840:	d0c8      	beq.n	80007d4 <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000842:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000844:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800084c:	6463      	str	r3, [r4, #68]	; 0x44
 800084e:	e7c1      	b.n	80007d4 <HAL_ADC_Start_DMA+0x74>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800085a:	d0bb      	beq.n	80007d4 <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800085c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800085e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000866:	6463      	str	r3, [r4, #68]	; 0x44
 8000868:	e7b4      	b.n	80007d4 <HAL_ADC_Start_DMA+0x74>
          ADC_CLEAR_ERRORCODE(hadc);
 800086a:	2300      	movs	r3, #0
 800086c:	64a3      	str	r3, [r4, #72]	; 0x48
 800086e:	e7b9      	b.n	80007e4 <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 8000870:	2300      	movs	r3, #0
 8000872:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000876:	e77a      	b.n	800076e <HAL_ADC_Start_DMA+0xe>
    __HAL_LOCK(hadc);
 8000878:	2502      	movs	r5, #2
 800087a:	e778      	b.n	800076e <HAL_ADC_Start_DMA+0xe>
 800087c:	50000300 	.word	0x50000300
 8000880:	50000100 	.word	0x50000100
 8000884:	080004f9 	.word	0x080004f9
 8000888:	080004ef 	.word	0x080004ef
 800088c:	080004d5 	.word	0x080004d5

08000890 <HAL_ADC_Stop_DMA>:
{  
 8000890:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8000892:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000896:	2b01      	cmp	r3, #1
 8000898:	d102      	bne.n	80008a0 <HAL_ADC_Stop_DMA+0x10>
 800089a:	2402      	movs	r4, #2
}
 800089c:	4620      	mov	r0, r4
 800089e:	bd38      	pop	{r3, r4, r5, pc}
 80008a0:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80008a2:	2301      	movs	r3, #1
 80008a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80008a8:	216c      	movs	r1, #108	; 0x6c
 80008aa:	f7ff fd65 	bl	8000378 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80008ae:	4604      	mov	r4, r0
 80008b0:	b118      	cbz	r0, 80008ba <HAL_ADC_Stop_DMA+0x2a>
  __HAL_UNLOCK(hadc);
 80008b2:	2300      	movs	r3, #0
 80008b4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  return tmp_hal_status;
 80008b8:	e7f0      	b.n	800089c <HAL_ADC_Stop_DMA+0xc>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80008ba:	682a      	ldr	r2, [r5, #0]
 80008bc:	68d3      	ldr	r3, [r2, #12]
 80008be:	f023 0301 	bic.w	r3, r3, #1
 80008c2:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80008c4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80008c6:	f000 fb33 	bl	8000f30 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 80008ca:	4604      	mov	r4, r0
 80008cc:	b118      	cbz	r0, 80008d6 <HAL_ADC_Stop_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80008ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80008d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d4:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80008d6:	682a      	ldr	r2, [r5, #0]
 80008d8:	6853      	ldr	r3, [r2, #4]
 80008da:	f023 0310 	bic.w	r3, r3, #16
 80008de:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 80008e0:	b974      	cbnz	r4, 8000900 <HAL_ADC_Stop_DMA+0x70>
      tmp_hal_status = ADC_Disable(hadc);
 80008e2:	4628      	mov	r0, r5
 80008e4:	f7ff fd04 	bl	80002f0 <ADC_Disable>
 80008e8:	4604      	mov	r4, r0
    if (tmp_hal_status == HAL_OK)
 80008ea:	2c00      	cmp	r4, #0
 80008ec:	d1e1      	bne.n	80008b2 <HAL_ADC_Stop_DMA+0x22>
      ADC_STATE_CLR_SET(hadc->State,
 80008ee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80008f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008f4:	f023 0301 	bic.w	r3, r3, #1
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	646b      	str	r3, [r5, #68]	; 0x44
 80008fe:	e7d8      	b.n	80008b2 <HAL_ADC_Stop_DMA+0x22>
      ADC_Disable(hadc);
 8000900:	4628      	mov	r0, r5
 8000902:	f7ff fcf5 	bl	80002f0 <ADC_Disable>
 8000906:	e7f0      	b.n	80008ea <HAL_ADC_Stop_DMA+0x5a>

08000908 <HAL_ADCEx_Calibration_Start>:
{
 8000908:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800090a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800090e:	2b01      	cmp	r3, #1
 8000910:	d102      	bne.n	8000918 <HAL_ADCEx_Calibration_Start+0x10>
 8000912:	2502      	movs	r5, #2
}
 8000914:	4628      	mov	r0, r5
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	460e      	mov	r6, r1
 800091a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800091c:	2301      	movs	r3, #1
 800091e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_Disable(hadc);
 8000922:	f7ff fce5 	bl	80002f0 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8000926:	4605      	mov	r5, r0
 8000928:	2800      	cmp	r0, #0
 800092a:	d130      	bne.n	800098e <HAL_ADCEx_Calibration_Start+0x86>
    hadc->State = HAL_ADC_STATE_READY;
 800092c:	2301      	movs	r3, #1
 800092e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000930:	6822      	ldr	r2, [r4, #0]
 8000932:	6893      	ldr	r3, [r2, #8]
 8000934:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000938:	6093      	str	r3, [r2, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800093a:	2e01      	cmp	r6, #1
 800093c:	d01b      	beq.n	8000976 <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800093e:	6822      	ldr	r2, [r4, #0]
 8000940:	6893      	ldr	r3, [r2, #8]
 8000942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000946:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000948:	f7ff fcca 	bl	80002e0 <HAL_GetTick>
 800094c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	da15      	bge.n	8000982 <HAL_ADCEx_Calibration_Start+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000956:	f7ff fcc3 	bl	80002e0 <HAL_GetTick>
 800095a:	1b80      	subs	r0, r0, r6
 800095c:	280a      	cmp	r0, #10
 800095e:	d9f6      	bls.n	800094e <HAL_ADCEx_Calibration_Start+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8000960:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000962:	f023 0312 	bic.w	r3, r3, #18
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800096c:	2300      	movs	r3, #0
 800096e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8000972:	2501      	movs	r5, #1
 8000974:	e7ce      	b.n	8000914 <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000976:	6822      	ldr	r2, [r4, #0]
 8000978:	6893      	ldr	r3, [r2, #8]
 800097a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800097e:	6093      	str	r3, [r2, #8]
 8000980:	e7dd      	b.n	800093e <HAL_ADCEx_Calibration_Start+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8000982:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000984:	f023 0303 	bic.w	r3, r3, #3
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800098e:	2300      	movs	r3, #0
 8000990:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8000994:	e7be      	b.n	8000914 <HAL_ADCEx_Calibration_Start+0xc>
	...

08000998 <HAL_ADC_ConfigChannel>:
{
 8000998:	b470      	push	{r4, r5, r6}
 800099a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 800099c:	2200      	movs	r2, #0
 800099e:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 80009a0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80009a4:	2a01      	cmp	r2, #1
 80009a6:	f000 81ad 	beq.w	8000d04 <HAL_ADC_ConfigChannel+0x36c>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2201      	movs	r2, #1
 80009ae:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009b2:	6800      	ldr	r0, [r0, #0]
 80009b4:	6882      	ldr	r2, [r0, #8]
 80009b6:	f012 0f04 	tst.w	r2, #4
 80009ba:	f040 8196 	bne.w	8000cea <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 80009be:	684a      	ldr	r2, [r1, #4]
 80009c0:	2a04      	cmp	r2, #4
 80009c2:	d831      	bhi.n	8000a28 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 80009c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80009c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80009ca:	0055      	lsls	r5, r2, #1
 80009cc:	221f      	movs	r2, #31
 80009ce:	40aa      	lsls	r2, r5
 80009d0:	ea24 0202 	bic.w	r2, r4, r2
 80009d4:	680c      	ldr	r4, [r1, #0]
 80009d6:	40ac      	lsls	r4, r5
 80009d8:	4322      	orrs	r2, r4
 80009da:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	6882      	ldr	r2, [r0, #8]
 80009e0:	f012 0f0c 	tst.w	r2, #12
 80009e4:	d168      	bne.n	8000ab8 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80009e6:	680a      	ldr	r2, [r1, #0]
 80009e8:	2a09      	cmp	r2, #9
 80009ea:	d94e      	bls.n	8000a8a <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80009ec:	6984      	ldr	r4, [r0, #24]
 80009ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80009f2:	3a1e      	subs	r2, #30
 80009f4:	2507      	movs	r5, #7
 80009f6:	4095      	lsls	r5, r2
 80009f8:	ea24 0405 	bic.w	r4, r4, r5
 80009fc:	688d      	ldr	r5, [r1, #8]
 80009fe:	fa05 f202 	lsl.w	r2, r5, r2
 8000a02:	4322      	orrs	r2, r4
 8000a04:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000a06:	6948      	ldr	r0, [r1, #20]
 8000a08:	681c      	ldr	r4, [r3, #0]
 8000a0a:	68e2      	ldr	r2, [r4, #12]
 8000a0c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8000a16:	6908      	ldr	r0, [r1, #16]
 8000a18:	3801      	subs	r0, #1
 8000a1a:	2803      	cmp	r0, #3
 8000a1c:	f200 808f 	bhi.w	8000b3e <HAL_ADC_ConfigChannel+0x1a6>
 8000a20:	e8df f000 	tbb	[pc, r0]
 8000a24:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8000a28:	2a09      	cmp	r2, #9
 8000a2a:	d80e      	bhi.n	8000a4a <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8000a2c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000a2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a32:	0055      	lsls	r5, r2, #1
 8000a34:	3d1e      	subs	r5, #30
 8000a36:	221f      	movs	r2, #31
 8000a38:	40aa      	lsls	r2, r5
 8000a3a:	ea24 0202 	bic.w	r2, r4, r2
 8000a3e:	680c      	ldr	r4, [r1, #0]
 8000a40:	fa04 f505 	lsl.w	r5, r4, r5
 8000a44:	432a      	orrs	r2, r5
 8000a46:	6342      	str	r2, [r0, #52]	; 0x34
 8000a48:	e7c8      	b.n	80009dc <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8000a4a:	2a0e      	cmp	r2, #14
 8000a4c:	d80e      	bhi.n	8000a6c <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a4e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000a50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a54:	0055      	lsls	r5, r2, #1
 8000a56:	3d3c      	subs	r5, #60	; 0x3c
 8000a58:	221f      	movs	r2, #31
 8000a5a:	40aa      	lsls	r2, r5
 8000a5c:	ea24 0202 	bic.w	r2, r4, r2
 8000a60:	680c      	ldr	r4, [r1, #0]
 8000a62:	fa04 f505 	lsl.w	r5, r4, r5
 8000a66:	432a      	orrs	r2, r5
 8000a68:	6382      	str	r2, [r0, #56]	; 0x38
 8000a6a:	e7b7      	b.n	80009dc <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000a6c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000a6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a72:	0055      	lsls	r5, r2, #1
 8000a74:	3d5a      	subs	r5, #90	; 0x5a
 8000a76:	221f      	movs	r2, #31
 8000a78:	40aa      	lsls	r2, r5
 8000a7a:	ea24 0202 	bic.w	r2, r4, r2
 8000a7e:	680c      	ldr	r4, [r1, #0]
 8000a80:	fa04 f505 	lsl.w	r5, r4, r5
 8000a84:	432a      	orrs	r2, r5
 8000a86:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000a88:	e7a8      	b.n	80009dc <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000a8a:	6944      	ldr	r4, [r0, #20]
 8000a8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a90:	2507      	movs	r5, #7
 8000a92:	4095      	lsls	r5, r2
 8000a94:	ea24 0405 	bic.w	r4, r4, r5
 8000a98:	688d      	ldr	r5, [r1, #8]
 8000a9a:	fa05 f202 	lsl.w	r2, r5, r2
 8000a9e:	4322      	orrs	r2, r4
 8000aa0:	6142      	str	r2, [r0, #20]
 8000aa2:	e7b0      	b.n	8000a06 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000aa4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000aa6:	4d98      	ldr	r5, [pc, #608]	; (8000d08 <HAL_ADC_ConfigChannel+0x370>)
 8000aa8:	4005      	ands	r5, r0
 8000aaa:	6808      	ldr	r0, [r1, #0]
 8000aac:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000ab0:	4315      	orrs	r5, r2
 8000ab2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000ab6:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	6882      	ldr	r2, [r0, #8]
 8000abc:	f002 0203 	and.w	r2, r2, #3
 8000ac0:	2a01      	cmp	r2, #1
 8000ac2:	d06f      	beq.n	8000ba4 <HAL_ADC_ConfigChannel+0x20c>
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	f040 811a 	bne.w	8000d00 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000acc:	68cc      	ldr	r4, [r1, #12]
 8000ace:	2c01      	cmp	r4, #1
 8000ad0:	d070      	beq.n	8000bb4 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ad2:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000ad6:	680e      	ldr	r6, [r1, #0]
 8000ad8:	2501      	movs	r5, #1
 8000ada:	40b5      	lsls	r5, r6
 8000adc:	ea24 0405 	bic.w	r4, r4, r5
 8000ae0:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000ae4:	6809      	ldr	r1, [r1, #0]
 8000ae6:	2910      	cmp	r1, #16
 8000ae8:	f000 808d 	beq.w	8000c06 <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000aec:	2911      	cmp	r1, #17
 8000aee:	f000 80af 	beq.w	8000c50 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000af2:	2912      	cmp	r1, #18
 8000af4:	f000 80b2 	beq.w	8000c5c <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af8:	2000      	movs	r0, #0
 8000afa:	e0fb      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000afc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000afe:	4d82      	ldr	r5, [pc, #520]	; (8000d08 <HAL_ADC_ConfigChannel+0x370>)
 8000b00:	4005      	ands	r5, r0
 8000b02:	6808      	ldr	r0, [r1, #0]
 8000b04:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000b08:	4315      	orrs	r5, r2
 8000b0a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000b0e:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8000b10:	e7d2      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000b12:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000b14:	4d7c      	ldr	r5, [pc, #496]	; (8000d08 <HAL_ADC_ConfigChannel+0x370>)
 8000b16:	4005      	ands	r5, r0
 8000b18:	6808      	ldr	r0, [r1, #0]
 8000b1a:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000b1e:	4315      	orrs	r5, r2
 8000b20:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000b24:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8000b26:	e7c7      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000b28:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8000b2a:	4877      	ldr	r0, [pc, #476]	; (8000d08 <HAL_ADC_ConfigChannel+0x370>)
 8000b2c:	4028      	ands	r0, r5
 8000b2e:	680d      	ldr	r5, [r1, #0]
 8000b30:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000b34:	4302      	orrs	r2, r0
 8000b36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b3a:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8000b3c:	e7bc      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b3e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000b40:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000b44:	6808      	ldr	r0, [r1, #0]
 8000b46:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8000b4a:	d01c      	beq.n	8000b86 <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000b50:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000b54:	680c      	ldr	r4, [r1, #0]
 8000b56:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000b5a:	d019      	beq.n	8000b90 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000b60:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000b64:	680c      	ldr	r4, [r1, #0]
 8000b66:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000b6a:	d016      	beq.n	8000b9a <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000b70:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000b74:	680c      	ldr	r4, [r1, #0]
 8000b76:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000b7a:	d19d      	bne.n	8000ab8 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000b7c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000b7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b82:	66c2      	str	r2, [r0, #108]	; 0x6c
 8000b84:	e798      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000b86:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000b88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b8c:	6622      	str	r2, [r4, #96]	; 0x60
 8000b8e:	e7dd      	b.n	8000b4c <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000b90:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000b92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b96:	6642      	str	r2, [r0, #100]	; 0x64
 8000b98:	e7e0      	b.n	8000b5c <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000b9a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000b9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ba0:	6682      	str	r2, [r0, #104]	; 0x68
 8000ba2:	e7e3      	b.n	8000b6c <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ba4:	6802      	ldr	r2, [r0, #0]
 8000ba6:	f012 0f01 	tst.w	r2, #1
 8000baa:	d101      	bne.n	8000bb0 <HAL_ADC_ConfigChannel+0x218>
 8000bac:	2200      	movs	r2, #0
 8000bae:	e78a      	b.n	8000ac6 <HAL_ADC_ConfigChannel+0x12e>
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	e788      	b.n	8000ac6 <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000bb4:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000bb8:	680e      	ldr	r6, [r1, #0]
 8000bba:	2501      	movs	r5, #1
 8000bbc:	40b5      	lsls	r5, r6
 8000bbe:	432c      	orrs	r4, r5
 8000bc0:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bc4:	6808      	ldr	r0, [r1, #0]
 8000bc6:	2809      	cmp	r0, #9
 8000bc8:	d90e      	bls.n	8000be8 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000bca:	681e      	ldr	r6, [r3, #0]
 8000bcc:	69b4      	ldr	r4, [r6, #24]
 8000bce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000bd2:	381b      	subs	r0, #27
 8000bd4:	2507      	movs	r5, #7
 8000bd6:	4085      	lsls	r5, r0
 8000bd8:	ea24 0405 	bic.w	r4, r4, r5
 8000bdc:	688d      	ldr	r5, [r1, #8]
 8000bde:	fa05 f000 	lsl.w	r0, r5, r0
 8000be2:	4320      	orrs	r0, r4
 8000be4:	61b0      	str	r0, [r6, #24]
 8000be6:	e77d      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000be8:	681e      	ldr	r6, [r3, #0]
 8000bea:	6974      	ldr	r4, [r6, #20]
 8000bec:	3001      	adds	r0, #1
 8000bee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000bf2:	2507      	movs	r5, #7
 8000bf4:	4085      	lsls	r5, r0
 8000bf6:	ea24 0405 	bic.w	r4, r4, r5
 8000bfa:	688d      	ldr	r5, [r1, #8]
 8000bfc:	fa05 f000 	lsl.w	r0, r5, r0
 8000c00:	4320      	orrs	r0, r4
 8000c02:	6170      	str	r0, [r6, #20]
 8000c04:	e76e      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c06:	4841      	ldr	r0, [pc, #260]	; (8000d0c <HAL_ADC_ConfigChannel+0x374>)
 8000c08:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c0a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c0e:	f47f af6d 	bne.w	8000aec <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c12:	681c      	ldr	r4, [r3, #0]
 8000c14:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000c18:	d027      	beq.n	8000c6a <HAL_ADC_ConfigChannel+0x2d2>
 8000c1a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c1e:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c20:	68a0      	ldr	r0, [r4, #8]
 8000c22:	f000 0003 	and.w	r0, r0, #3
 8000c26:	2801      	cmp	r0, #1
 8000c28:	d022      	beq.n	8000c70 <HAL_ADC_ConfigChannel+0x2d8>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d157      	bne.n	8000cde <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c2e:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c30:	b135      	cbz	r5, 8000c40 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c32:	68a8      	ldr	r0, [r5, #8]
 8000c34:	f000 0003 	and.w	r0, r0, #3
 8000c38:	2801      	cmp	r0, #1
 8000c3a:	d01f      	beq.n	8000c7c <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d14e      	bne.n	8000cde <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000c40:	2910      	cmp	r1, #16
 8000c42:	d021      	beq.n	8000c88 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000c44:	2911      	cmp	r1, #17
 8000c46:	d039      	beq.n	8000cbc <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000c48:	2912      	cmp	r1, #18
 8000c4a:	d041      	beq.n	8000cd0 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e051      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c50:	482e      	ldr	r0, [pc, #184]	; (8000d0c <HAL_ADC_ConfigChannel+0x374>)
 8000c52:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000c54:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8000c58:	d0db      	beq.n	8000c12 <HAL_ADC_ConfigChannel+0x27a>
 8000c5a:	e74a      	b.n	8000af2 <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000c5c:	482b      	ldr	r0, [pc, #172]	; (8000d0c <HAL_ADC_ConfigChannel+0x374>)
 8000c5e:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000c60:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8000c64:	d0d5      	beq.n	8000c12 <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c66:	2000      	movs	r0, #0
 8000c68:	e044      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c6a:	4829      	ldr	r0, [pc, #164]	; (8000d10 <HAL_ADC_ConfigChannel+0x378>)
 8000c6c:	9001      	str	r0, [sp, #4]
 8000c6e:	e7d7      	b.n	8000c20 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c70:	6820      	ldr	r0, [r4, #0]
 8000c72:	f010 0f01 	tst.w	r0, #1
 8000c76:	d0d8      	beq.n	8000c2a <HAL_ADC_ConfigChannel+0x292>
 8000c78:	2201      	movs	r2, #1
 8000c7a:	e7d6      	b.n	8000c2a <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c7c:	6828      	ldr	r0, [r5, #0]
 8000c7e:	f010 0f01 	tst.w	r0, #1
 8000c82:	d0db      	beq.n	8000c3c <HAL_ADC_ConfigChannel+0x2a4>
 8000c84:	2201      	movs	r2, #1
 8000c86:	e7d9      	b.n	8000c3c <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000c88:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000c8c:	d1da      	bne.n	8000c44 <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000c8e:	491f      	ldr	r1, [pc, #124]	; (8000d0c <HAL_ADC_ConfigChannel+0x374>)
 8000c90:	688a      	ldr	r2, [r1, #8]
 8000c92:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c96:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c98:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <HAL_ADC_ConfigChannel+0x37c>)
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	491e      	ldr	r1, [pc, #120]	; (8000d18 <HAL_ADC_ConfigChannel+0x380>)
 8000c9e:	fbb2 f1f1 	udiv	r1, r2, r1
 8000ca2:	220a      	movs	r2, #10
 8000ca4:	fb02 f201 	mul.w	r2, r2, r1
 8000ca8:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000caa:	e002      	b.n	8000cb2 <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 8000cac:	9a00      	ldr	r2, [sp, #0]
 8000cae:	3a01      	subs	r2, #1
 8000cb0:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000cb2:	9a00      	ldr	r2, [sp, #0]
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	d1f9      	bne.n	8000cac <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e01b      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000cbc:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000cc0:	d1c2      	bne.n	8000c48 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000cc2:	4912      	ldr	r1, [pc, #72]	; (8000d0c <HAL_ADC_ConfigChannel+0x374>)
 8000cc4:	688a      	ldr	r2, [r1, #8]
 8000cc6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cca:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ccc:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000cce:	e011      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000cd0:	490e      	ldr	r1, [pc, #56]	; (8000d0c <HAL_ADC_ConfigChannel+0x374>)
 8000cd2:	688a      	ldr	r2, [r1, #8]
 8000cd4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000cd8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e00a      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ce0:	f042 0220 	orr.w	r2, r2, #32
 8000ce4:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	e004      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cec:	f042 0220 	orr.w	r2, r2, #32
 8000cf0:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000cf2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8000cfa:	b017      	add	sp, #92	; 0x5c
 8000cfc:	bc70      	pop	{r4, r5, r6}
 8000cfe:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d00:	2000      	movs	r0, #0
 8000d02:	e7f7      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 8000d04:	2002      	movs	r0, #2
 8000d06:	e7f8      	b.n	8000cfa <HAL_ADC_ConfigChannel+0x362>
 8000d08:	83fff000 	.word	0x83fff000
 8000d0c:	50000300 	.word	0x50000300
 8000d10:	50000100 	.word	0x50000100
 8000d14:	20000000 	.word	0x20000000
 8000d18:	000f4240 	.word	0x000f4240

08000d1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d1e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d28:	0200      	lsls	r0, r0, #8
 8000d2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000d30:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000d34:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d38:	60d0      	str	r0, [r2, #12]
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_NVIC_SetPriority+0x5c>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4a:	f1c3 0407 	rsb	r4, r3, #7
 8000d4e:	2c04      	cmp	r4, #4
 8000d50:	bf28      	it	cs
 8000d52:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d54:	1d1d      	adds	r5, r3, #4
 8000d56:	2d06      	cmp	r5, #6
 8000d58:	d917      	bls.n	8000d8a <HAL_NVIC_SetPriority+0x4a>
 8000d5a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	2501      	movs	r5, #1
 8000d5e:	fa05 f404 	lsl.w	r4, r5, r4
 8000d62:	3c01      	subs	r4, #1
 8000d64:	4021      	ands	r1, r4
 8000d66:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	fa05 f303 	lsl.w	r3, r5, r3
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000d72:	2800      	cmp	r0, #0
 8000d74:	db0b      	blt.n	8000d8e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	0109      	lsls	r1, r1, #4
 8000d78:	b2c9      	uxtb	r1, r1
 8000d7a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d7e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d82:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d86:	bc30      	pop	{r4, r5}
 8000d88:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e7e6      	b.n	8000d5c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	f000 000f 	and.w	r0, r0, #15
 8000d92:	0109      	lsls	r1, r1, #4
 8000d94:	b2c9      	uxtb	r1, r1
 8000d96:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <HAL_NVIC_SetPriority+0x60>)
 8000d98:	5419      	strb	r1, [r3, r0]
 8000d9a:	e7f4      	b.n	8000d86 <HAL_NVIC_SetPriority+0x46>
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	e000ed14 	.word	0xe000ed14

08000da4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000da4:	0942      	lsrs	r2, r0, #5
 8000da6:	f000 001f 	and.w	r0, r0, #31
 8000daa:	2301      	movs	r3, #1
 8000dac:	fa03 f000 	lsl.w	r0, r3, r0
 8000db0:	4b01      	ldr	r3, [pc, #4]	; (8000db8 <HAL_NVIC_EnableIRQ+0x14>)
 8000db2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dc2:	d20a      	bcs.n	8000dda <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_SYSTICK_Config+0x24>)
 8000dc6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	21f0      	movs	r1, #240	; 0xf0
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_SYSTICK_Config+0x28>)
 8000dcc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000de8:	2804      	cmp	r0, #4
 8000dea:	d005      	beq.n	8000df8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f023 0304 	bic.w	r3, r3, #4
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000df8:	4a02      	ldr	r2, [pc, #8]	; (8000e04 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000dfa:	6813      	ldr	r3, [r2, #0]
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4770      	bx	lr
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e08:	4770      	bx	lr

08000e0a <HAL_SYSTICK_IRQHandler>:
{
 8000e0a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e0c:	f7ff fffc 	bl	8000e08 <HAL_SYSTICK_Callback>
 8000e10:	bd08      	pop	{r3, pc}

08000e12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e12:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e14:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000e16:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000e18:	2401      	movs	r4, #1
 8000e1a:	40b4      	lsls	r4, r6
 8000e1c:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e1e:	6804      	ldr	r4, [r0, #0]
 8000e20:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e22:	6843      	ldr	r3, [r0, #4]
 8000e24:	2b10      	cmp	r3, #16
 8000e26:	d005      	beq.n	8000e34 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000e28:	6803      	ldr	r3, [r0, #0]
 8000e2a:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000e2c:	6803      	ldr	r3, [r0, #0]
 8000e2e:	60da      	str	r2, [r3, #12]
  }
}
 8000e30:	bc70      	pop	{r4, r5, r6}
 8000e32:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000e34:	6803      	ldr	r3, [r0, #0]
 8000e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e38:	6803      	ldr	r3, [r0, #0]
 8000e3a:	60d9      	str	r1, [r3, #12]
 8000e3c:	e7f8      	b.n	8000e30 <DMA_SetConfig+0x1e>
	...

08000e40 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e40:	6802      	ldr	r2, [r0, #0]
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <DMA_CalcBaseAndBitshift+0x18>)
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <DMA_CalcBaseAndBitshift+0x1c>)
 8000e48:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <DMA_CalcBaseAndBitshift+0x20>)
 8000e54:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000e56:	4770      	bx	lr
 8000e58:	bffdfff8 	.word	0xbffdfff8
 8000e5c:	cccccccd 	.word	0xcccccccd
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_DMA_Init>:
  if(NULL == hdma)
 8000e64:	b340      	cbz	r0, 8000eb8 <HAL_DMA_Init+0x54>
{ 
 8000e66:	b510      	push	{r4, lr}
 8000e68:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000e70:	6801      	ldr	r1, [r0, #0]
 8000e72:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e74:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000e78:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000e7c:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e7e:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8000e80:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e82:	68e0      	ldr	r0, [r4, #12]
 8000e84:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e86:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e88:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8a:	6960      	ldr	r0, [r4, #20]
 8000e8c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e90:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e92:	69e0      	ldr	r0, [r4, #28]
 8000e94:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000e96:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000e98:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f7ff ffd0 	bl	8000e40 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000ea4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000ea6:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000ea8:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eaa:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000eac:	2301      	movs	r3, #1
 8000eae:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000eb2:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8000eb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4770      	bx	lr

08000ebc <HAL_DMA_Start_IT>:
{
 8000ebc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8000ebe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000ec2:	2c01      	cmp	r4, #1
 8000ec4:	d032      	beq.n	8000f2c <HAL_DMA_Start_IT+0x70>
 8000ec6:	2401      	movs	r4, #1
 8000ec8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ecc:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000ed0:	2c01      	cmp	r4, #1
 8000ed2:	d004      	beq.n	8000ede <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8000eda:	2002      	movs	r0, #2
 8000edc:	bd38      	pop	{r3, r4, r5, pc}
 8000ede:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eea:	6825      	ldr	r5, [r4, #0]
 8000eec:	6828      	ldr	r0, [r5, #0]
 8000eee:	f020 0001 	bic.w	r0, r0, #1
 8000ef2:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff ff8c 	bl	8000e12 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8000efa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000efc:	b15b      	cbz	r3, 8000f16 <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000efe:	6822      	ldr	r2, [r4, #0]
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f043 030e 	orr.w	r3, r3, #14
 8000f06:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000f08:	6822      	ldr	r2, [r4, #0]
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000f12:	2000      	movs	r0, #0
 8000f14:	bd38      	pop	{r3, r4, r5, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f16:	6822      	ldr	r2, [r4, #0]
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f043 030a 	orr.w	r3, r3, #10
 8000f1e:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f20:	6822      	ldr	r2, [r4, #0]
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	f023 0304 	bic.w	r3, r3, #4
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e7ed      	b.n	8000f08 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000f2c:	2002      	movs	r0, #2
} 
 8000f2e:	bd38      	pop	{r3, r4, r5, pc}

08000f30 <HAL_DMA_Abort>:
{
 8000f30:	4603      	mov	r3, r0
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f32:	6801      	ldr	r1, [r0, #0]
 8000f34:	680a      	ldr	r2, [r1, #0]
 8000f36:	f022 020e 	bic.w	r2, r2, #14
 8000f3a:	600a      	str	r2, [r1, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f3c:	6801      	ldr	r1, [r0, #0]
 8000f3e:	680a      	ldr	r2, [r1, #0]
 8000f40:	f022 0201 	bic.w	r2, r2, #1
 8000f44:	600a      	str	r2, [r1, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f46:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	6042      	str	r2, [r0, #4]
	hdma->State = HAL_DMA_STATE_READY; 
 8000f52:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	__HAL_UNLOCK(hdma);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f883 0020 	strb.w	r0, [r3, #32]
}
 8000f5c:	4770      	bx	lr

08000f5e <HAL_DMA_Abort_IT>:
{  
 8000f5e:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f60:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d003      	beq.n	8000f70 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f70:	6802      	ldr	r2, [r0, #0]
 8000f72:	6813      	ldr	r3, [r2, #0]
 8000f74:	f023 030e 	bic.w	r3, r3, #14
 8000f78:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f7a:	6802      	ldr	r2, [r0, #0]
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f84:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000f86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f88:	2201      	movs	r2, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f90:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000f94:	2300      	movs	r3, #0
 8000f96:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000f9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f9c:	b113      	cbz	r3, 8000fa4 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8000f9e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	bd08      	pop	{r3, pc}
 8000fa4:	2000      	movs	r0, #0
}
 8000fa6:	bd08      	pop	{r3, pc}

08000fa8 <HAL_DMA_IRQHandler>:
{
 8000fa8:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000faa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000fac:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000fae:	6804      	ldr	r4, [r0, #0]
 8000fb0:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000fb2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	408b      	lsls	r3, r1
 8000fb8:	421a      	tst	r2, r3
 8000fba:	d014      	beq.n	8000fe6 <HAL_DMA_IRQHandler+0x3e>
 8000fbc:	f015 0f04 	tst.w	r5, #4
 8000fc0:	d011      	beq.n	8000fe6 <HAL_DMA_IRQHandler+0x3e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	f013 0f20 	tst.w	r3, #32
 8000fc8:	d103      	bne.n	8000fd2 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	f023 0304 	bic.w	r3, r3, #4
 8000fd0:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000fd2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000fd4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	408b      	lsls	r3, r1
 8000fda:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000fdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d03a      	beq.n	8001058 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferHalfCpltCallback(hdma);
 8000fe2:	4798      	blx	r3
 8000fe4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	408b      	lsls	r3, r1
 8000fea:	421a      	tst	r2, r3
 8000fec:	d019      	beq.n	8001022 <HAL_DMA_IRQHandler+0x7a>
 8000fee:	f015 0f02 	tst.w	r5, #2
 8000ff2:	d016      	beq.n	8001022 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	f013 0f20 	tst.w	r3, #32
 8000ffa:	d106      	bne.n	800100a <HAL_DMA_IRQHandler+0x62>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	f023 030a 	bic.w	r3, r3, #10
 8001002:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001004:	2301      	movs	r3, #1
 8001006:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800100a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800100c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800100e:	2302      	movs	r3, #2
 8001010:	408b      	lsls	r3, r1
 8001012:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001014:	2300      	movs	r3, #0
 8001016:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800101a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800101c:	b1e3      	cbz	r3, 8001058 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferCpltCallback(hdma);
 800101e:	4798      	blx	r3
 8001020:	bd38      	pop	{r3, r4, r5, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001022:	2308      	movs	r3, #8
 8001024:	fa03 f101 	lsl.w	r1, r3, r1
 8001028:	420a      	tst	r2, r1
 800102a:	d015      	beq.n	8001058 <HAL_DMA_IRQHandler+0xb0>
 800102c:	f015 0f08 	tst.w	r5, #8
 8001030:	d012      	beq.n	8001058 <HAL_DMA_IRQHandler+0xb0>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	f023 030e 	bic.w	r3, r3, #14
 8001038:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800103a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800103c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800103e:	2301      	movs	r3, #1
 8001040:	fa03 f202 	lsl.w	r2, r3, r2
 8001044:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001046:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001048:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800104c:	2300      	movs	r3, #0
 800104e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001052:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001054:	b103      	cbz	r3, 8001058 <HAL_DMA_IRQHandler+0xb0>
    	hdma->XferErrorCallback(hdma);
 8001056:	4798      	blx	r3
 8001058:	bd38      	pop	{r3, r4, r5, pc}
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001060:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001062:	e088      	b.n	8001176 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001064:	08de      	lsrs	r6, r3, #3
 8001066:	3608      	adds	r6, #8
 8001068:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106c:	f003 0e07 	and.w	lr, r3, #7
 8001070:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001074:	270f      	movs	r7, #15
 8001076:	fa07 f70e 	lsl.w	r7, r7, lr
 800107a:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800107e:	690f      	ldr	r7, [r1, #16]
 8001080:	fa07 f70e 	lsl.w	r7, r7, lr
 8001084:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001086:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 800108a:	e083      	b.n	8001194 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800108c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800108e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001090:	68cf      	ldr	r7, [r1, #12]
 8001092:	fa07 f70e 	lsl.w	r7, r7, lr
 8001096:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001098:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a0:	684e      	ldr	r6, [r1, #4]
 80010a2:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80010a6:	409e      	lsls	r6, r3
 80010a8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80010aa:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ac:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ae:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	688d      	ldr	r5, [r1, #8]
 80010b2:	fa05 f50e 	lsl.w	r5, r5, lr
 80010b6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80010b8:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ba:	684c      	ldr	r4, [r1, #4]
 80010bc:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80010c0:	d058      	beq.n	8001174 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4c47      	ldr	r4, [pc, #284]	; (80011e0 <HAL_GPIO_Init+0x184>)
 80010c4:	69a5      	ldr	r5, [r4, #24]
 80010c6:	f045 0501 	orr.w	r5, r5, #1
 80010ca:	61a5      	str	r5, [r4, #24]
 80010cc:	69a4      	ldr	r4, [r4, #24]
 80010ce:	f004 0401 	and.w	r4, r4, #1
 80010d2:	9401      	str	r4, [sp, #4]
 80010d4:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 80010d6:	089d      	lsrs	r5, r3, #2
 80010d8:	1cae      	adds	r6, r5, #2
 80010da:	4c42      	ldr	r4, [pc, #264]	; (80011e4 <HAL_GPIO_Init+0x188>)
 80010dc:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80010e0:	f003 0603 	and.w	r6, r3, #3
 80010e4:	00b6      	lsls	r6, r6, #2
 80010e6:	270f      	movs	r7, #15
 80010e8:	40b7      	lsls	r7, r6
 80010ea:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ee:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80010f2:	d06c      	beq.n	80011ce <HAL_GPIO_Init+0x172>
 80010f4:	4f3c      	ldr	r7, [pc, #240]	; (80011e8 <HAL_GPIO_Init+0x18c>)
 80010f6:	42b8      	cmp	r0, r7
 80010f8:	d06b      	beq.n	80011d2 <HAL_GPIO_Init+0x176>
 80010fa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80010fe:	42b8      	cmp	r0, r7
 8001100:	d069      	beq.n	80011d6 <HAL_GPIO_Init+0x17a>
 8001102:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001106:	42b8      	cmp	r0, r7
 8001108:	d05f      	beq.n	80011ca <HAL_GPIO_Init+0x16e>
 800110a:	2705      	movs	r7, #5
 800110c:	fa07 f606 	lsl.w	r6, r7, r6
 8001110:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001112:	3502      	adds	r5, #2
 8001114:	4e33      	ldr	r6, [pc, #204]	; (80011e4 <HAL_GPIO_Init+0x188>)
 8001116:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111a:	4c34      	ldr	r4, [pc, #208]	; (80011ec <HAL_GPIO_Init+0x190>)
 800111c:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800111e:	43d4      	mvns	r4, r2
 8001120:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001124:	684f      	ldr	r7, [r1, #4]
 8001126:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800112a:	d001      	beq.n	8001130 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 800112c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001130:	4d2e      	ldr	r5, [pc, #184]	; (80011ec <HAL_GPIO_Init+0x190>)
 8001132:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001134:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001136:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113a:	684f      	ldr	r7, [r1, #4]
 800113c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001140:	d001      	beq.n	8001146 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001142:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001146:	4d29      	ldr	r5, [pc, #164]	; (80011ec <HAL_GPIO_Init+0x190>)
 8001148:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 800114c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001150:	684f      	ldr	r7, [r1, #4]
 8001152:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001156:	d001      	beq.n	800115c <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8001158:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 800115c:	4d23      	ldr	r5, [pc, #140]	; (80011ec <HAL_GPIO_Init+0x190>)
 800115e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001160:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001162:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001164:	684e      	ldr	r6, [r1, #4]
 8001166:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800116a:	d001      	beq.n	8001170 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 800116c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_GPIO_Init+0x190>)
 8001172:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001174:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001176:	680a      	ldr	r2, [r1, #0]
 8001178:	fa32 f403 	lsrs.w	r4, r2, r3
 800117c:	d02d      	beq.n	80011da <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800117e:	2501      	movs	r5, #1
 8001180:	409d      	lsls	r5, r3
    if(iocurrent)
 8001182:	402a      	ands	r2, r5
 8001184:	d0f6      	beq.n	8001174 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001186:	684c      	ldr	r4, [r1, #4]
 8001188:	2c02      	cmp	r4, #2
 800118a:	f43f af6b 	beq.w	8001064 <HAL_GPIO_Init+0x8>
 800118e:	2c12      	cmp	r4, #18
 8001190:	f43f af68 	beq.w	8001064 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001194:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800119a:	2403      	movs	r4, #3
 800119c:	fa04 f40e 	lsl.w	r4, r4, lr
 80011a0:	43e4      	mvns	r4, r4
 80011a2:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	684f      	ldr	r7, [r1, #4]
 80011a6:	f007 0703 	and.w	r7, r7, #3
 80011aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80011ae:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80011b0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b2:	684e      	ldr	r6, [r1, #4]
 80011b4:	1e77      	subs	r7, r6, #1
 80011b6:	2f01      	cmp	r7, #1
 80011b8:	f67f af68 	bls.w	800108c <HAL_GPIO_Init+0x30>
 80011bc:	2e11      	cmp	r6, #17
 80011be:	f43f af65 	beq.w	800108c <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c2:	2e12      	cmp	r6, #18
 80011c4:	f47f af72 	bne.w	80010ac <HAL_GPIO_Init+0x50>
 80011c8:	e760      	b.n	800108c <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011ca:	2703      	movs	r7, #3
 80011cc:	e79e      	b.n	800110c <HAL_GPIO_Init+0xb0>
 80011ce:	2700      	movs	r7, #0
 80011d0:	e79c      	b.n	800110c <HAL_GPIO_Init+0xb0>
 80011d2:	2701      	movs	r7, #1
 80011d4:	e79a      	b.n	800110c <HAL_GPIO_Init+0xb0>
 80011d6:	2702      	movs	r7, #2
 80011d8:	e798      	b.n	800110c <HAL_GPIO_Init+0xb0>
  }
}
 80011da:	b003      	add	sp, #12
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f0:	b90a      	cbnz	r2, 80011f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f2:	6281      	str	r1, [r0, #40]	; 0x28
 80011f4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f6:	6181      	str	r1, [r0, #24]
 80011f8:	4770      	bx	lr

080011fa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011fa:	4770      	bx	lr

080011fc <HAL_GPIO_EXTI_IRQHandler>:
{
 80011fc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4203      	tst	r3, r0
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001206:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001208:	4b02      	ldr	r3, [pc, #8]	; (8001214 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800120a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800120c:	f7ff fff5 	bl	80011fa <HAL_GPIO_EXTI_Callback>
}
 8001210:	e7f9      	b.n	8001206 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001212:	bf00      	nop
 8001214:	40010400 	.word	0x40010400

08001218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121a:	4605      	mov	r5, r0
 800121c:	460f      	mov	r7, r1
 800121e:	4616      	mov	r6, r2
 8001220:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	ea37 0303 	bics.w	r3, r7, r3
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	42b3      	cmp	r3, r6
 8001232:	d113      	bne.n	800125c <I2C_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001234:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001238:	d0f3      	beq.n	8001222 <I2C_WaitOnFlagUntilTimeout+0xa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800123a:	b12c      	cbz	r4, 8001248 <I2C_WaitOnFlagUntilTimeout+0x30>
 800123c:	f7ff f850 	bl	80002e0 <HAL_GetTick>
 8001240:	9b06      	ldr	r3, [sp, #24]
 8001242:	1ac0      	subs	r0, r0, r3
 8001244:	4284      	cmp	r4, r0
 8001246:	d2ec      	bcs.n	8001222 <I2C_WaitOnFlagUntilTimeout+0xa>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8001248:	2320      	movs	r3, #32
 800124a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800124e:	2300      	movs	r3, #0
 8001250:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001254:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8001258:	2003      	movs	r0, #3
 800125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }
  return HAL_OK;
 800125c:	2000      	movs	r0, #0
}
 800125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001260 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001260:	2800      	cmp	r0, #0
 8001262:	d059      	beq.n	8001318 <HAL_I2C_Init+0xb8>
{
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001268:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800126c:	2b00      	cmp	r3, #0
 800126e:	d043      	beq.n	80012f8 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001270:	2324      	movs	r3, #36	; 0x24
 8001272:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001276:	6822      	ldr	r2, [r4, #0]
 8001278:	6813      	ldr	r3, [r2, #0]
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001280:	6822      	ldr	r2, [r4, #0]
 8001282:	6863      	ldr	r3, [r4, #4]
 8001284:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001288:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	6893      	ldr	r3, [r2, #8]
 800128e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001292:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001294:	68e3      	ldr	r3, [r4, #12]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d033      	beq.n	8001302 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129a:	6822      	ldr	r2, [r4, #0]
 800129c:	68a3      	ldr	r3, [r4, #8]
 800129e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80012a2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012a4:	68e3      	ldr	r3, [r4, #12]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d031      	beq.n	800130e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	6853      	ldr	r3, [r2, #4]
 80012ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	68d3      	ldr	r3, [r2, #12]
 80012bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012c0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012c2:	6822      	ldr	r2, [r4, #0]
 80012c4:	6923      	ldr	r3, [r4, #16]
 80012c6:	6961      	ldr	r1, [r4, #20]
 80012c8:	430b      	orrs	r3, r1
 80012ca:	69a1      	ldr	r1, [r4, #24]
 80012cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80012d0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012d2:	6822      	ldr	r2, [r4, #0]
 80012d4:	69e3      	ldr	r3, [r4, #28]
 80012d6:	6a21      	ldr	r1, [r4, #32]
 80012d8:	430b      	orrs	r3, r1
 80012da:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80012dc:	6822      	ldr	r2, [r4, #0]
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e6:	2000      	movs	r0, #0
 80012e8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	2320      	movs	r3, #32
 80012ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80012f6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80012f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80012fc:	f002 fe7c 	bl	8003ff8 <HAL_I2C_MspInit>
 8001300:	e7b6      	b.n	8001270 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001302:	6822      	ldr	r2, [r4, #0]
 8001304:	68a3      	ldr	r3, [r4, #8]
 8001306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800130a:	6093      	str	r3, [r2, #8]
 800130c:	e7ca      	b.n	80012a4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	e7c8      	b.n	80012aa <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001318:	2001      	movs	r0, #1
 800131a:	4770      	bx	lr

0800131c <HAL_I2C_IsDeviceReady>:
{
 800131c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001320:	b084      	sub	sp, #16
  __IO uint32_t I2C_Trials = 0U;
 8001322:	2400      	movs	r4, #0
 8001324:	9403      	str	r4, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001326:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800132a:	b2e4      	uxtb	r4, r4
 800132c:	2c20      	cmp	r4, #32
 800132e:	d004      	beq.n	800133a <HAL_I2C_IsDeviceReady+0x1e>
    return HAL_BUSY;
 8001330:	2302      	movs	r3, #2
}
 8001332:	4618      	mov	r0, r3
 8001334:	b004      	add	sp, #16
 8001336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800133a:	6804      	ldr	r4, [r0, #0]
 800133c:	69a4      	ldr	r4, [r4, #24]
 800133e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001342:	d001      	beq.n	8001348 <HAL_I2C_IsDeviceReady+0x2c>
      return HAL_BUSY;
 8001344:	2302      	movs	r3, #2
 8001346:	e7f4      	b.n	8001332 <HAL_I2C_IsDeviceReady+0x16>
    __HAL_LOCK(hi2c);
 8001348:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800134c:	2c01      	cmp	r4, #1
 800134e:	f000 808b 	beq.w	8001468 <HAL_I2C_IsDeviceReady+0x14c>
 8001352:	461f      	mov	r7, r3
 8001354:	4690      	mov	r8, r2
 8001356:	4689      	mov	r9, r1
 8001358:	4606      	mov	r6, r0
 800135a:	2301      	movs	r3, #1
 800135c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001360:	2324      	movs	r3, #36	; 0x24
 8001362:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001366:	2300      	movs	r3, #0
 8001368:	6443      	str	r3, [r0, #68]	; 0x44
 800136a:	e022      	b.n	80013b2 <HAL_I2C_IsDeviceReady+0x96>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800136c:	f3c9 0309 	ubfx	r3, r9, #0, #10
 8001370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001378:	e023      	b.n	80013c2 <HAL_I2C_IsDeviceReady+0xa6>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800137a:	69ab      	ldr	r3, [r5, #24]
 800137c:	f013 0f10 	tst.w	r3, #16
 8001380:	d043      	beq.n	800140a <HAL_I2C_IsDeviceReady+0xee>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001382:	f8cd a000 	str.w	sl, [sp]
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	2120      	movs	r1, #32
 800138c:	4630      	mov	r0, r6
 800138e:	f7ff ff43 	bl	8001218 <I2C_WaitOnFlagUntilTimeout>
 8001392:	2800      	cmp	r0, #0
 8001394:	d16a      	bne.n	800146c <HAL_I2C_IsDeviceReady+0x150>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001396:	6833      	ldr	r3, [r6, #0]
 8001398:	2210      	movs	r2, #16
 800139a:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139c:	6833      	ldr	r3, [r6, #0]
 800139e:	2220      	movs	r2, #32
 80013a0:	61da      	str	r2, [r3, #28]
      if (I2C_Trials++ == Trials)
 80013a2:	9b03      	ldr	r3, [sp, #12]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	9203      	str	r2, [sp, #12]
 80013a8:	4543      	cmp	r3, r8
 80013aa:	d043      	beq.n	8001434 <HAL_I2C_IsDeviceReady+0x118>
    while (I2C_Trials < Trials);
 80013ac:	9b03      	ldr	r3, [sp, #12]
 80013ae:	4598      	cmp	r8, r3
 80013b0:	d952      	bls.n	8001458 <HAL_I2C_IsDeviceReady+0x13c>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80013b2:	6832      	ldr	r2, [r6, #0]
 80013b4:	68f3      	ldr	r3, [r6, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d0d8      	beq.n	800136c <HAL_I2C_IsDeviceReady+0x50>
 80013ba:	f3c9 0309 	ubfx	r3, r9, #0, #10
 80013be:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80013c2:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80013c4:	f7fe ff8c 	bl	80002e0 <HAL_GetTick>
 80013c8:	4682      	mov	sl, r0
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80013ca:	6835      	ldr	r5, [r6, #0]
 80013cc:	69ab      	ldr	r3, [r5, #24]
 80013ce:	f013 0f20 	tst.w	r3, #32
 80013d2:	d1d2      	bne.n	800137a <HAL_I2C_IsDeviceReady+0x5e>
 80013d4:	69ab      	ldr	r3, [r5, #24]
 80013d6:	f013 0f10 	tst.w	r3, #16
 80013da:	d1ce      	bne.n	800137a <HAL_I2C_IsDeviceReady+0x5e>
 80013dc:	f896 4041 	ldrb.w	r4, [r6, #65]	; 0x41
 80013e0:	b2e4      	uxtb	r4, r4
 80013e2:	2ca0      	cmp	r4, #160	; 0xa0
 80013e4:	d0c9      	beq.n	800137a <HAL_I2C_IsDeviceReady+0x5e>
        if (Timeout != HAL_MAX_DELAY)
 80013e6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80013ea:	d0ee      	beq.n	80013ca <HAL_I2C_IsDeviceReady+0xae>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013ec:	b12f      	cbz	r7, 80013fa <HAL_I2C_IsDeviceReady+0xde>
 80013ee:	f7fe ff77 	bl	80002e0 <HAL_GetTick>
 80013f2:	eba0 000a 	sub.w	r0, r0, sl
 80013f6:	4287      	cmp	r7, r0
 80013f8:	d2e7      	bcs.n	80013ca <HAL_I2C_IsDeviceReady+0xae>
            hi2c->State = HAL_I2C_STATE_READY;
 80013fa:	2320      	movs	r3, #32
 80013fc:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
            __HAL_UNLOCK(hi2c);
 8001400:	2300      	movs	r3, #0
 8001402:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e793      	b.n	8001332 <HAL_I2C_IsDeviceReady+0x16>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800140a:	f8cd a000 	str.w	sl, [sp]
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	2120      	movs	r1, #32
 8001414:	4630      	mov	r0, r6
 8001416:	f7ff feff 	bl	8001218 <I2C_WaitOnFlagUntilTimeout>
 800141a:	4603      	mov	r3, r0
 800141c:	b108      	cbz	r0, 8001422 <HAL_I2C_IsDeviceReady+0x106>
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e787      	b.n	8001332 <HAL_I2C_IsDeviceReady+0x16>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001422:	6831      	ldr	r1, [r6, #0]
 8001424:	2220      	movs	r2, #32
 8001426:	61ca      	str	r2, [r1, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8001428:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800142c:	2200      	movs	r2, #0
 800142e:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
        return HAL_OK;
 8001432:	e77e      	b.n	8001332 <HAL_I2C_IsDeviceReady+0x16>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001434:	6832      	ldr	r2, [r6, #0]
 8001436:	6853      	ldr	r3, [r2, #4]
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800143e:	f8cd a000 	str.w	sl, [sp]
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	2120      	movs	r1, #32
 8001448:	4630      	mov	r0, r6
 800144a:	f7ff fee5 	bl	8001218 <I2C_WaitOnFlagUntilTimeout>
 800144e:	b978      	cbnz	r0, 8001470 <HAL_I2C_IsDeviceReady+0x154>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001450:	6833      	ldr	r3, [r6, #0]
 8001452:	2220      	movs	r2, #32
 8001454:	61da      	str	r2, [r3, #28]
 8001456:	e7a9      	b.n	80013ac <HAL_I2C_IsDeviceReady+0x90>
    hi2c->State = HAL_I2C_STATE_READY;
 8001458:	2320      	movs	r3, #32
 800145a:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800145e:	2300      	movs	r3, #0
 8001460:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e764      	b.n	8001332 <HAL_I2C_IsDeviceReady+0x16>
    __HAL_LOCK(hi2c);
 8001468:	2302      	movs	r3, #2
 800146a:	e762      	b.n	8001332 <HAL_I2C_IsDeviceReady+0x16>
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e760      	b.n	8001332 <HAL_I2C_IsDeviceReady+0x16>
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e75e      	b.n	8001332 <HAL_I2C_IsDeviceReady+0x16>

08001474 <HAL_I2C_EV_IRQHandler>:
{
 8001474:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001476:	6803      	ldr	r3, [r0, #0]
 8001478:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800147a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800147c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800147e:	b103      	cbz	r3, 8001482 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001480:	4798      	blx	r3
 8001482:	bd08      	pop	{r3, pc}

08001484 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001484:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	d001      	beq.n	8001492 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800148e:	2002      	movs	r0, #2
 8001490:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001492:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001496:	2b01      	cmp	r3, #1
 8001498:	d020      	beq.n	80014dc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800149a:	2301      	movs	r3, #1
 800149c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80014a0:	2324      	movs	r3, #36	; 0x24
 80014a2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80014a6:	6802      	ldr	r2, [r0, #0]
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014b0:	6802      	ldr	r2, [r0, #0]
 80014b2:	6813      	ldr	r3, [r2, #0]
 80014b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014b8:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80014ba:	6802      	ldr	r2, [r0, #0]
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	4319      	orrs	r1, r3
 80014c0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80014c2:	6802      	ldr	r2, [r0, #0]
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80014cc:	2320      	movs	r3, #32
 80014ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80014d8:	4618      	mov	r0, r3
 80014da:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80014dc:	2002      	movs	r0, #2
  }
}
 80014de:	4770      	bx	lr

080014e0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d001      	beq.n	80014ee <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80014ea:	2002      	movs	r0, #2
 80014ec:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80014ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d01e      	beq.n	8001534 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80014f6:	2301      	movs	r3, #1
 80014f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80014fc:	2324      	movs	r3, #36	; 0x24
 80014fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001502:	6802      	ldr	r2, [r0, #0]
 8001504:	6813      	ldr	r3, [r2, #0]
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800150c:	6802      	ldr	r2, [r0, #0]
 800150e:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001510:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001514:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001518:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800151a:	6802      	ldr	r2, [r0, #0]
 800151c:	6813      	ldr	r3, [r2, #0]
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001524:	2320      	movs	r3, #32
 8001526:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800152a:	2300      	movs	r3, #0
 800152c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001530:	4618      	mov	r0, r3
 8001532:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001534:	2002      	movs	r0, #2
  }
}
 8001536:	4770      	bx	lr

08001538 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001538:	4a02      	ldr	r2, [pc, #8]	; (8001544 <HAL_PWR_EnableBkUpAccess+0xc>)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4770      	bx	lr
 8001544:	40007000 	.word	0x40007000

08001548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	6803      	ldr	r3, [r0, #0]
 8001550:	f013 0f01 	tst.w	r3, #1
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001556:	4bb5      	ldr	r3, [pc, #724]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d046      	beq.n	80015f0 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001562:	4bb2      	ldr	r3, [pc, #712]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b08      	cmp	r3, #8
 800156c:	d03b      	beq.n	80015e6 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156e:	6863      	ldr	r3, [r4, #4]
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	f000 808e 	beq.w	8001694 <HAL_RCC_OscConfig+0x14c>
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 8091 	bne.w	80016a0 <HAL_RCC_OscConfig+0x158>
 800157e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001582:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001594:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001596:	4aa5      	ldr	r2, [pc, #660]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001598:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800159a:	f023 030f 	bic.w	r3, r3, #15
 800159e:	68a1      	ldr	r1, [r4, #8]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a4:	6863      	ldr	r3, [r4, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 8094 	beq.w	80016d4 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7fe fe98 	bl	80002e0 <HAL_GetTick>
 80015b0:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b9c      	ldr	r3, [pc, #624]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2201      	movs	r2, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	4219      	tst	r1, r3
 80015d6:	d122      	bne.n	800161e <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7fe fe82 	bl	80002e0 <HAL_GetTick>
 80015dc:	1b40      	subs	r0, r0, r5
 80015de:	2864      	cmp	r0, #100	; 0x64
 80015e0:	d9e7      	bls.n	80015b2 <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 80015e2:	2003      	movs	r0, #3
 80015e4:	e2ab      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e6:	4b91      	ldr	r3, [pc, #580]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015ee:	d0be      	beq.n	800156e <HAL_RCC_OscConfig+0x26>
 80015f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f4:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	4b8c      	ldr	r3, [pc, #560]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	2201      	movs	r2, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	4219      	tst	r1, r3
 8001614:	d003      	beq.n	800161e <HAL_RCC_OscConfig+0xd6>
 8001616:	6863      	ldr	r3, [r4, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8289 	beq.w	8001b30 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	f013 0f02 	tst.w	r3, #2
 8001624:	f000 809c 	beq.w	8001760 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001628:	4b80      	ldr	r3, [pc, #512]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f013 0f0c 	tst.w	r3, #12
 8001630:	d072      	beq.n	8001718 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001632:	4b7e      	ldr	r3, [pc, #504]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	d067      	beq.n	800170e <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163e:	6923      	ldr	r3, [r4, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80cb 	beq.w	80017dc <HAL_RCC_OscConfig+0x294>
 8001646:	2201      	movs	r2, #1
 8001648:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7fe fe40 	bl	80002e0 <HAL_GetTick>
 8001660:	4605      	mov	r5, r0
 8001662:	2302      	movs	r3, #2
 8001664:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 800166a:	6819      	ldr	r1, [r3, #0]
 800166c:	2302      	movs	r3, #2
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	2201      	movs	r2, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	4219      	tst	r1, r3
 8001682:	f040 809c 	bne.w	80017be <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7fe fe2b 	bl	80002e0 <HAL_GetTick>
 800168a:	1b40      	subs	r0, r0, r5
 800168c:	2802      	cmp	r0, #2
 800168e:	d9e8      	bls.n	8001662 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001690:	2003      	movs	r0, #3
 8001692:	e254      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	4a65      	ldr	r2, [pc, #404]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e77a      	b.n	8001596 <HAL_RCC_OscConfig+0x4e>
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_OscConfig+0x172>
 80016a6:	4b61      	ldr	r3, [pc, #388]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e76d      	b.n	8001596 <HAL_RCC_OscConfig+0x4e>
 80016ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016be:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e760      	b.n	8001596 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80016d4:	f7fe fe04 	bl	80002e0 <HAL_GetTick>
 80016d8:	4605      	mov	r5, r0
 80016da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016de:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	4b52      	ldr	r3, [pc, #328]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2201      	movs	r2, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	4219      	tst	r1, r3
 80016fe:	d08e      	beq.n	800161e <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7fe fdee 	bl	80002e0 <HAL_GetTick>
 8001704:	1b40      	subs	r0, r0, r5
 8001706:	2864      	cmp	r0, #100	; 0x64
 8001708:	d9e7      	bls.n	80016da <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800170a:	2003      	movs	r0, #3
 800170c:	e217      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001716:	d192      	bne.n	800163e <HAL_RCC_OscConfig+0xf6>
 8001718:	2302      	movs	r3, #2
 800171a:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	2302      	movs	r3, #2
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	2201      	movs	r2, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	4219      	tst	r1, r3
 8001738:	d004      	beq.n	8001744 <HAL_RCC_OscConfig+0x1fc>
 800173a:	6923      	ldr	r3, [r4, #16]
 800173c:	4293      	cmp	r3, r2
 800173e:	d001      	beq.n	8001744 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8001740:	2001      	movs	r0, #1
 8001742:	e1fc      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4839      	ldr	r0, [pc, #228]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001746:	6803      	ldr	r3, [r0, #0]
 8001748:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800174c:	6961      	ldr	r1, [r4, #20]
 800174e:	22f8      	movs	r2, #248	; 0xf8
 8001750:	fa92 f2a2 	rbit	r2, r2
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4313      	orrs	r3, r2
 800175e:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	f013 0f08 	tst.w	r3, #8
 8001766:	f000 808d 	beq.w	8001884 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176a:	69a3      	ldr	r3, [r4, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d061      	beq.n	8001834 <HAL_RCC_OscConfig+0x2ec>
 8001770:	2101      	movs	r1, #1
 8001772:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_RCC_OscConfig+0x2e8>)
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7fe fdad 	bl	80002e0 <HAL_GetTick>
 8001786:	4605      	mov	r5, r0
 8001788:	2302      	movs	r3, #2
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	fa93 f2a3 	rbit	r2, r3
 8001792:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4a25      	ldr	r2, [pc, #148]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001798:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2201      	movs	r2, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	4219      	tst	r1, r3
 80017ae:	d169      	bne.n	8001884 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b0:	f7fe fd96 	bl	80002e0 <HAL_GetTick>
 80017b4:	1b40      	subs	r0, r0, r5
 80017b6:	2802      	cmp	r0, #2
 80017b8:	d9e6      	bls.n	8001788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017ba:	2003      	movs	r0, #3
 80017bc:	e1bf      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	481b      	ldr	r0, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 80017c0:	6803      	ldr	r3, [r0, #0]
 80017c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017c6:	6961      	ldr	r1, [r4, #20]
 80017c8:	22f8      	movs	r2, #248	; 0xf8
 80017ca:	fa92 f2a2 	rbit	r2, r2
 80017ce:	fab2 f282 	clz	r2, r2
 80017d2:	fa01 f202 	lsl.w	r2, r1, r2
 80017d6:	4313      	orrs	r3, r2
 80017d8:	6003      	str	r3, [r0, #0]
 80017da:	e7c1      	b.n	8001760 <HAL_RCC_OscConfig+0x218>
 80017dc:	2301      	movs	r3, #1
 80017de:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017f4:	f7fe fd74 	bl	80002e0 <HAL_GetTick>
 80017f8:	4605      	mov	r5, r0
 80017fa:	2302      	movs	r3, #2
 80017fc:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_RCC_OscConfig+0x2e4>)
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	2302      	movs	r3, #2
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2201      	movs	r2, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	4219      	tst	r1, r3
 800181a:	d0a1      	beq.n	8001760 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181c:	f7fe fd60 	bl	80002e0 <HAL_GetTick>
 8001820:	1b40      	subs	r0, r0, r5
 8001822:	2802      	cmp	r0, #2
 8001824:	d9e9      	bls.n	80017fa <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8001826:	2003      	movs	r0, #3
 8001828:	e189      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	10908120 	.word	0x10908120
 8001834:	2201      	movs	r2, #1
 8001836:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183a:	fab2 f282 	clz	r2, r2
 800183e:	4bc1      	ldr	r3, [pc, #772]	; (8001b44 <HAL_RCC_OscConfig+0x5fc>)
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7fe fd4a 	bl	80002e0 <HAL_GetTick>
 800184c:	4605      	mov	r5, r0
 800184e:	2302      	movs	r3, #2
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4aba      	ldr	r2, [pc, #744]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 800185e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2201      	movs	r2, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	4219      	tst	r1, r3
 8001874:	d006      	beq.n	8001884 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001876:	f7fe fd33 	bl	80002e0 <HAL_GetTick>
 800187a:	1b40      	subs	r0, r0, r5
 800187c:	2802      	cmp	r0, #2
 800187e:	d9e6      	bls.n	800184e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001880:	2003      	movs	r0, #3
 8001882:	e15c      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	f013 0f04 	tst.w	r3, #4
 800188a:	f000 80b3 	beq.w	80019f4 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4bae      	ldr	r3, [pc, #696]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001896:	d126      	bne.n	80018e6 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4bab      	ldr	r3, [pc, #684]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018a0:	61da      	str	r2, [r3, #28]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018ac:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	4ba7      	ldr	r3, [pc, #668]	; (8001b4c <HAL_RCC_OscConfig+0x604>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018b6:	d018      	beq.n	80018ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	68e3      	ldr	r3, [r4, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d029      	beq.n	8001912 <HAL_RCC_OscConfig+0x3ca>
 80018be:	bb73      	cbnz	r3, 800191e <HAL_RCC_OscConfig+0x3d6>
 80018c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	621a      	str	r2, [r3, #32]
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	f022 0204 	bic.w	r2, r2, #4
 80018d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d8:	68e3      	ldr	r3, [r4, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d05d      	beq.n	800199a <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7fe fcff 	bl	80002e0 <HAL_GetTick>
 80018e2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	e047      	b.n	8001976 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 80018e6:	2500      	movs	r5, #0
 80018e8:	e7e1      	b.n	80018ae <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ea:	4a98      	ldr	r2, [pc, #608]	; (8001b4c <HAL_RCC_OscConfig+0x604>)
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80018f4:	f7fe fcf4 	bl	80002e0 <HAL_GetTick>
 80018f8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fa:	4b94      	ldr	r3, [pc, #592]	; (8001b4c <HAL_RCC_OscConfig+0x604>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001902:	d1d9      	bne.n	80018b8 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001904:	f7fe fcec 	bl	80002e0 <HAL_GetTick>
 8001908:	1b80      	subs	r0, r0, r6
 800190a:	2864      	cmp	r0, #100	; 0x64
 800190c:	d9f5      	bls.n	80018fa <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 800190e:	2003      	movs	r0, #3
 8001910:	e115      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	4a8d      	ldr	r2, [pc, #564]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001914:	6a13      	ldr	r3, [r2, #32]
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	e7dc      	b.n	80018d8 <HAL_RCC_OscConfig+0x390>
 800191e:	2b05      	cmp	r3, #5
 8001920:	d009      	beq.n	8001936 <HAL_RCC_OscConfig+0x3ee>
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001924:	6a1a      	ldr	r2, [r3, #32]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	621a      	str	r2, [r3, #32]
 800192c:	6a1a      	ldr	r2, [r3, #32]
 800192e:	f022 0204 	bic.w	r2, r2, #4
 8001932:	621a      	str	r2, [r3, #32]
 8001934:	e7d0      	b.n	80018d8 <HAL_RCC_OscConfig+0x390>
 8001936:	4b84      	ldr	r3, [pc, #528]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001938:	6a1a      	ldr	r2, [r3, #32]
 800193a:	f042 0204 	orr.w	r2, r2, #4
 800193e:	621a      	str	r2, [r3, #32]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	621a      	str	r2, [r3, #32]
 8001948:	e7c6      	b.n	80018d8 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194a:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 800194c:	6a19      	ldr	r1, [r3, #32]
 800194e:	2302      	movs	r3, #2
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	2201      	movs	r2, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	4219      	tst	r1, r3
 8001964:	d145      	bne.n	80019f2 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7fe fcbb 	bl	80002e0 <HAL_GetTick>
 800196a:	1b80      	subs	r0, r0, r6
 800196c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001970:	4298      	cmp	r0, r3
 8001972:	f200 80df 	bhi.w	8001b34 <HAL_RCC_OscConfig+0x5ec>
 8001976:	2302      	movs	r3, #2
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d0dd      	beq.n	800194a <HAL_RCC_OscConfig+0x402>
 800198e:	2302      	movs	r3, #2
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	4b6c      	ldr	r3, [pc, #432]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001996:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001998:	e7d9      	b.n	800194e <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7fe fca1 	bl	80002e0 <HAL_GetTick>
 800199e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x486>
 80019a2:	4b69      	ldr	r3, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 80019a4:	6a19      	ldr	r1, [r3, #32]
 80019a6:	2302      	movs	r3, #2
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2201      	movs	r2, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	4219      	tst	r1, r3
 80019bc:	d019      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7fe fc8f 	bl	80002e0 <HAL_GetTick>
 80019c2:	1b80      	subs	r0, r0, r6
 80019c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80019c8:	4298      	cmp	r0, r3
 80019ca:	f200 80b5 	bhi.w	8001b38 <HAL_RCC_OscConfig+0x5f0>
 80019ce:	2302      	movs	r3, #2
 80019d0:	fa93 f2a3 	rbit	r2, r3
 80019d4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	095b      	lsrs	r3, r3, #5
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d0dd      	beq.n	80019a2 <HAL_RCC_OscConfig+0x45a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 80019ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019f0:	e7d9      	b.n	80019a6 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019f2:	bbb5      	cbnz	r5, 8001a62 <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f4:	69e3      	ldr	r3, [r4, #28]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a0 	beq.w	8001b3c <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 80019fe:	6852      	ldr	r2, [r2, #4]
 8001a00:	f002 020c 	and.w	r2, r2, #12
 8001a04:	2a08      	cmp	r2, #8
 8001a06:	f000 80a3 	beq.w	8001b50 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d02f      	beq.n	8001a6e <HAL_RCC_OscConfig+0x526>
 8001a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a12:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7fe fc5a 	bl	80002e0 <HAL_GetTick>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a32:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001a38:	6819      	ldr	r1, [r3, #0]
 8001a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	4219      	tst	r1, r3
 8001a52:	d06b      	beq.n	8001b2c <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7fe fc44 	bl	80002e0 <HAL_GetTick>
 8001a58:	1b00      	subs	r0, r0, r4
 8001a5a:	2802      	cmp	r0, #2
 8001a5c:	d9e7      	bls.n	8001a2e <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8001a5e:	2003      	movs	r0, #3
 8001a60:	e06d      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4a39      	ldr	r2, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001a64:	69d3      	ldr	r3, [r2, #28]
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	61d3      	str	r3, [r2, #28]
 8001a6c:	e7c2      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ac>
 8001a6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a72:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a88:	f7fe fc2a 	bl	80002e0 <HAL_GetTick>
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a92:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001a98:	6819      	ldr	r1, [r3, #0]
 8001a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	2201      	movs	r2, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	4219      	tst	r1, r3
 8001ab2:	d006      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7fe fc14 	bl	80002e0 <HAL_GetTick>
 8001ab8:	1b40      	subs	r0, r0, r5
 8001aba:	2802      	cmp	r0, #2
 8001abc:	d9e7      	bls.n	8001a8e <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
 8001ac0:	e03d      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac2:	4921      	ldr	r1, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001ac4:	684b      	ldr	r3, [r1, #4]
 8001ac6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001aca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001acc:	6a20      	ldr	r0, [r4, #32]
 8001ace:	4302      	orrs	r2, r0
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
 8001ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ad8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001aee:	f7fe fbf7 	bl	80002e0 <HAL_GetTick>
 8001af2:	4604      	mov	r4, r0
 8001af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_OscConfig+0x600>)
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	2201      	movs	r2, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	4219      	tst	r1, r3
 8001b18:	d106      	bne.n	8001b28 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7fe fbe1 	bl	80002e0 <HAL_GetTick>
 8001b1e:	1b00      	subs	r0, r0, r4
 8001b20:	2802      	cmp	r0, #2
 8001b22:	d9e7      	bls.n	8001af4 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8001b24:	2003      	movs	r0, #3
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001b28:	2000      	movs	r0, #0
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	e006      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
 8001b32:	e004      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001b34:	2003      	movs	r0, #3
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001b38:	2003      	movs	r0, #3
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8001b3c:	2000      	movs	r0, #0
}
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
 8001b42:	bf00      	nop
 8001b44:	10908120 	.word	0x10908120
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8001b50:	2001      	movs	r0, #1
 8001b52:	e7f4      	b.n	8001b3e <HAL_RCC_OscConfig+0x5f6>

08001b54 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b58:	f003 020c 	and.w	r2, r3, #12
 8001b5c:	2a08      	cmp	r2, #8
 8001b5e:	d124      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001b60:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8001b64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001b68:	fa92 f2a2 	rbit	r2, r2
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	fa21 f202 	lsr.w	r2, r1, r2
 8001b74:	490f      	ldr	r1, [pc, #60]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001b76:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b7c:	f002 020f 	and.w	r2, r2, #15
 8001b80:	210f      	movs	r1, #15
 8001b82:	fa91 f1a1 	rbit	r1, r1
 8001b86:	fab1 f181 	clz	r1, r1
 8001b8a:	40ca      	lsrs	r2, r1
 8001b8c:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001b8e:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001b90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b94:	d103      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x68>)
 8001b98:	fb03 f000 	mul.w	r0, r3, r0
 8001b9c:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ba4:	fb03 f000 	mul.w	r0, r3, r0
 8001ba8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	0800576c 	.word	0x0800576c
 8001bb8:	0800577c 	.word	0x0800577c
 8001bbc:	003d0900 	.word	0x003d0900
 8001bc0:	007a1200 	.word	0x007a1200

08001bc4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bc4:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	428b      	cmp	r3, r1
 8001bce:	d20c      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd0:	4a6d      	ldr	r2, [pc, #436]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	6813      	ldr	r3, [r2, #0]
 8001bd4:	f023 0307 	bic.w	r3, r3, #7
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	4299      	cmp	r1, r3
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
 8001be8:	4770      	bx	lr
{
 8001bea:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	f013 0f02 	tst.w	r3, #2
 8001bf2:	d006      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf6:	6853      	ldr	r3, [r2, #4]
 8001bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfc:	6884      	ldr	r4, [r0, #8]
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	6053      	str	r3, [r2, #4]
 8001c02:	460d      	mov	r5, r1
 8001c04:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	6803      	ldr	r3, [r0, #0]
 8001c08:	f013 0f01 	tst.w	r3, #1
 8001c0c:	d07a      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	6843      	ldr	r3, [r0, #4]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d02f      	beq.n	8001c74 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d042      	beq.n	8001c9e <HAL_RCC_ClockConfig+0xda>
 8001c18:	2202      	movs	r2, #2
 8001c1a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4a5b      	ldr	r2, [pc, #364]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	6810      	ldr	r0, [r2, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	fa92 f2a2 	rbit	r2, r2
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	f002 021f 	and.w	r2, r2, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	4210      	tst	r0, r2
 8001c38:	f000 80a4 	beq.w	8001d84 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3c:	4953      	ldr	r1, [pc, #332]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c3e:	684a      	ldr	r2, [r1, #4]
 8001c40:	f022 0203 	bic.w	r2, r2, #3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001c48:	f7fe fb4a 	bl	80002e0 <HAL_GetTick>
 8001c4c:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	6863      	ldr	r3, [r4, #4]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d039      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d046      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c58:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f013 0f0c 	tst.w	r3, #12
 8001c60:	d050      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c62:	f7fe fb3d 	bl	80002e0 <HAL_GetTick>
 8001c66:	1b80      	subs	r0, r0, r6
 8001c68:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c6c:	4298      	cmp	r0, r3
 8001c6e:	d9f3      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001c70:	2003      	movs	r0, #3
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c78:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7c:	4a43      	ldr	r2, [pc, #268]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c7e:	6810      	ldr	r0, [r2, #0]
 8001c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c84:	fa92 f2a2 	rbit	r2, r2
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	f002 021f 	and.w	r2, r2, #31
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f202 	lsl.w	r2, r1, r2
 8001c96:	4210      	tst	r0, r2
 8001c98:	d1d0      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
 8001c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca2:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca6:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	6810      	ldr	r0, [r2, #0]
 8001caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cae:	fa92 f2a2 	rbit	r2, r2
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	f002 021f 	and.w	r2, r2, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	4210      	tst	r0, r2
 8001cc2:	d1bb      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d017      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7fe fb04 	bl	80002e0 <HAL_GetTick>
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cde:	4298      	cmp	r0, r3
 8001ce0:	d9f2      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d008      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf2:	f7fe faf5 	bl	80002e0 <HAL_GetTick>
 8001cf6:	1b80      	subs	r0, r0, r6
 8001cf8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cfc:	4298      	cmp	r0, r3
 8001cfe:	d9f2      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8001d00:	2003      	movs	r0, #3
 8001d02:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	429d      	cmp	r5, r3
 8001d0e:	d20c      	bcs.n	8001d2a <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d10:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	f023 0307 	bic.w	r3, r3, #7
 8001d18:	432b      	orrs	r3, r5
 8001d1a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	429d      	cmp	r5, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
}
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	f013 0f04 	tst.w	r3, #4
 8001d30:	d006      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	6853      	ldr	r3, [r2, #4]
 8001d36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d3a:	68e1      	ldr	r1, [r4, #12]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f013 0f08 	tst.w	r3, #8
 8001d46:	d007      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d4a:	6853      	ldr	r3, [r2, #4]
 8001d4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d50:	6921      	ldr	r1, [r4, #16]
 8001d52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d56:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d58:	f7ff fefc 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d64:	22f0      	movs	r2, #240	; 0xf0
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	40d3      	lsrs	r3, r2
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_RCC_ClockConfig+0x1cc>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	40d8      	lsrs	r0, r3
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <HAL_RCC_ClockConfig+0x1d0>)
 8001d78:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7fe fa80 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 8001d80:	2000      	movs	r0, #0
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	080057bc 	.word	0x080057bc
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d98:	4b01      	ldr	r3, [pc, #4]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001da6:	f7ff fff7 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001db2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001db6:	fa92 f2a2 	rbit	r2, r2
 8001dba:	fab2 f282 	clz	r2, r2
 8001dbe:	40d3      	lsrs	r3, r2
 8001dc0:	4a02      	ldr	r2, [pc, #8]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001dc4:	40d8      	lsrs	r0, r3
 8001dc6:	bd08      	pop	{r3, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	080057cc 	.word	0x080057cc

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001dd2:	f7ff ffe1 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001dde:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	40d3      	lsrs	r3, r2
 8001dec:	4a02      	ldr	r2, [pc, #8]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001df0:	40d8      	lsrs	r0, r3
 8001df2:	bd08      	pop	{r3, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	080057cc 	.word	0x080057cc

08001dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e02:	6803      	ldr	r3, [r0, #0]
 8001e04:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e08:	d044      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e12:	d179      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001e16:	69da      	ldr	r2, [r3, #28]
 8001e18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e1c:	61da      	str	r2, [r3, #28]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e28:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e32:	d06b      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e38:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e3c:	d021      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001e3e:	6862      	ldr	r2, [r4, #4]
 8001e40:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d01c      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e48:	4854      	ldr	r0, [pc, #336]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001e4a:	6a01      	ldr	r1, [r0, #32]
 8001e4c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e54:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	4f51      	ldr	r7, [pc, #324]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e5e:	443a      	add	r2, r7
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	f04f 0e01 	mov.w	lr, #1
 8001e66:	f8c2 e000 	str.w	lr, [r2]
 8001e6a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	443b      	add	r3, r7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e7a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e7c:	f011 0f01 	tst.w	r1, #1
 8001e80:	d158      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001e82:	4a46      	ldr	r2, [pc, #280]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001e84:	6a13      	ldr	r3, [r2, #32]
 8001e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e8a:	6861      	ldr	r1, [r4, #4]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e90:	2d00      	cmp	r5, #0
 8001e92:	d17a      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	f013 0f01 	tst.w	r3, #1
 8001e9a:	d006      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e9c:	4a3f      	ldr	r2, [pc, #252]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001e9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ea0:	f023 0303 	bic.w	r3, r3, #3
 8001ea4:	68a1      	ldr	r1, [r4, #8]
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	f013 0f20 	tst.w	r3, #32
 8001eb0:	d006      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb2:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001eb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001eb6:	f023 0310 	bic.w	r3, r3, #16
 8001eba:	68e1      	ldr	r1, [r4, #12]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ec6:	d006      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001ec8:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001eca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ecc:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001ed0:	6921      	ldr	r1, [r4, #16]
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001edc:	d006      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001ee0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee6:	6961      	ldr	r1, [r4, #20]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001ef2:	d051      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001ef6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001efc:	69a1      	ldr	r1, [r4, #24]
 8001efe:	430b      	orrs	r3, r1
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001f02:	2000      	movs	r0, #0
}
 8001f04:	b003      	add	sp, #12
 8001f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001f08:	2500      	movs	r5, #0
 8001f0a:	e78e      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f0e:	6813      	ldr	r3, [r2, #0]
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f16:	f7fe f9e3 	bl	80002e0 <HAL_GetTick>
 8001f1a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f24:	d186      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7fe f9db 	bl	80002e0 <HAL_GetTick>
 8001f2a:	1b80      	subs	r0, r0, r6
 8001f2c:	2864      	cmp	r0, #100	; 0x64
 8001f2e:	d9f5      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8001f30:	2003      	movs	r0, #3
 8001f32:	e7e7      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8001f34:	f7fe f9d4 	bl	80002e0 <HAL_GetTick>
 8001f38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	e014      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f3e:	6a19      	ldr	r1, [r3, #32]
 8001f40:	2302      	movs	r3, #2
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2201      	movs	r2, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	4219      	tst	r1, r3
 8001f56:	d194      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7fe f9c2 	bl	80002e0 <HAL_GetTick>
 8001f5c:	1b80      	subs	r0, r0, r6
 8001f5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f62:	4298      	cmp	r0, r3
 8001f64:	d816      	bhi.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001f66:	2302      	movs	r3, #2
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d0de      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f88:	e7da      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	69d3      	ldr	r3, [r2, #28]
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	e77f      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8001f94:	2003      	movs	r0, #3
 8001f96:	e7b5      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8001f98:	2000      	movs	r0, #0
 8001f9a:	e7b3      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	10908100 	.word	0x10908100

08001fa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001fac:	6802      	ldr	r2, [r0, #0]
 8001fae:	68d3      	ldr	r3, [r2, #12]
 8001fb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fb4:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 8001fb6:	f7fe f993 	bl	80002e0 <HAL_GetTick>
 8001fba:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f013 0f20 	tst.w	r3, #32
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001fc6:	f7fe f98b 	bl	80002e0 <HAL_GetTick>
 8001fca:	1b40      	subs	r0, r0, r5
 8001fcc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fd0:	d9f4      	bls.n	8001fbc <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8001fd4:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	bd38      	pop	{r3, r4, r5, pc}

08001fda <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001fda:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001fdc:	6803      	ldr	r3, [r0, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fe4:	d001      	beq.n	8001fea <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	bd38      	pop	{r3, r4, r5, pc}
 8001fea:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001ff2:	f7fe f975 	bl	80002e0 <HAL_GetTick>
 8001ff6:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002000:	d107      	bne.n	8002012 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002002:	f7fe f96d 	bl	80002e0 <HAL_GetTick>
 8002006:	1b40      	subs	r0, r0, r5
 8002008:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800200c:	d9f4      	bls.n	8001ff8 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800200e:	2003      	movs	r0, #3
}
 8002010:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8002012:	2000      	movs	r0, #0
 8002014:	bd38      	pop	{r3, r4, r5, pc}

08002016 <HAL_RTC_Init>:
{
 8002016:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002018:	2800      	cmp	r0, #0
 800201a:	d05c      	beq.n	80020d6 <HAL_RTC_Init+0xc0>
 800201c:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800201e:	7f43      	ldrb	r3, [r0, #29]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d041      	beq.n	80020a8 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002024:	2302      	movs	r3, #2
 8002026:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	22ca      	movs	r2, #202	; 0xca
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	2253      	movs	r2, #83	; 0x53
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff ffd0 	bl	8001fda <RTC_EnterInitMode>
 800203a:	4605      	mov	r5, r0
 800203c:	2800      	cmp	r0, #0
 800203e:	d137      	bne.n	80020b0 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002040:	6822      	ldr	r2, [r4, #0]
 8002042:	6893      	ldr	r3, [r2, #8]
 8002044:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800204c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800204e:	6821      	ldr	r1, [r4, #0]
 8002050:	688a      	ldr	r2, [r1, #8]
 8002052:	6863      	ldr	r3, [r4, #4]
 8002054:	6920      	ldr	r0, [r4, #16]
 8002056:	4303      	orrs	r3, r0
 8002058:	6960      	ldr	r0, [r4, #20]
 800205a:	4303      	orrs	r3, r0
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	68e2      	ldr	r2, [r4, #12]
 8002064:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	6913      	ldr	r3, [r2, #16]
 800206a:	68a1      	ldr	r1, [r4, #8]
 800206c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002070:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002072:	6822      	ldr	r2, [r4, #0]
 8002074:	68d3      	ldr	r3, [r2, #12]
 8002076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800207a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f013 0f20 	tst.w	r3, #32
 8002084:	d01b      	beq.n	80020be <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800208a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002090:	6822      	ldr	r2, [r4, #0]
 8002092:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002094:	69a1      	ldr	r1, [r4, #24]
 8002096:	430b      	orrs	r3, r1
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80020a0:	2301      	movs	r3, #1
 80020a2:	7763      	strb	r3, [r4, #29]
}
 80020a4:	4628      	mov	r0, r5
 80020a6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80020a8:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80020aa:	f001 ffd7 	bl	800405c <HAL_RTC_MspInit>
 80020ae:	e7b9      	b.n	8002024 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020b6:	2304      	movs	r3, #4
 80020b8:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80020ba:	2501      	movs	r5, #1
 80020bc:	e7f2      	b.n	80020a4 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff ff72 	bl	8001fa8 <HAL_RTC_WaitForSynchro>
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d0de      	beq.n	8002086 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	22ff      	movs	r2, #255	; 0xff
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020ce:	2304      	movs	r3, #4
 80020d0:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80020d2:	2501      	movs	r5, #1
 80020d4:	e7e6      	b.n	80020a4 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 80020d6:	2501      	movs	r5, #1
 80020d8:	e7e4      	b.n	80020a4 <HAL_RTC_Init+0x8e>

080020da <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80020da:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 80020dc:	e002      	b.n	80020e4 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80020de:	3301      	adds	r3, #1
    Value -= 10U;
 80020e0:	380a      	subs	r0, #10
 80020e2:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 80020e4:	2809      	cmp	r0, #9
 80020e6:	d8fa      	bhi.n	80020de <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	b2db      	uxtb	r3, r3
}
 80020ec:	4318      	orrs	r0, r3
 80020ee:	4770      	bx	lr

080020f0 <HAL_RTC_SetTime>:
{
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80020f2:	7f03      	ldrb	r3, [r0, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d077      	beq.n	80021e8 <HAL_RTC_SetTime+0xf8>
 80020f8:	460e      	mov	r6, r1
 80020fa:	4604      	mov	r4, r0
 80020fc:	2301      	movs	r3, #1
 80020fe:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002100:	2302      	movs	r3, #2
 8002102:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002104:	2a00      	cmp	r2, #0
 8002106:	d146      	bne.n	8002196 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002108:	6803      	ldr	r3, [r0, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002110:	d101      	bne.n	8002116 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002116:	7830      	ldrb	r0, [r6, #0]
 8002118:	f7ff ffdf 	bl	80020da <RTC_ByteToBcd2>
 800211c:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800211e:	7870      	ldrb	r0, [r6, #1]
 8002120:	f7ff ffdb 	bl	80020da <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002124:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002128:	78b0      	ldrb	r0, [r6, #2]
 800212a:	f7ff ffd6 	bl	80020da <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800212e:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002130:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002132:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	22ca      	movs	r2, #202	; 0xca
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	2253      	movs	r2, #83	; 0x53
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002142:	4620      	mov	r0, r4
 8002144:	f7ff ff49 	bl	8001fda <RTC_EnterInitMode>
 8002148:	4607      	mov	r7, r0
 800214a:	2800      	cmp	r0, #0
 800214c:	d135      	bne.n	80021ba <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002154:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002158:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800215a:	6822      	ldr	r2, [r4, #0]
 800215c:	6893      	ldr	r3, [r2, #8]
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002164:	6821      	ldr	r1, [r4, #0]
 8002166:	688b      	ldr	r3, [r1, #8]
 8002168:	68f2      	ldr	r2, [r6, #12]
 800216a:	6930      	ldr	r0, [r6, #16]
 800216c:	4302      	orrs	r2, r0
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	68d3      	ldr	r3, [r2, #12]
 8002176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800217a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f013 0f20 	tst.w	r3, #32
 8002184:	d022      	beq.n	80021cc <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	22ff      	movs	r2, #255	; 0xff
 800218a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800218c:	2301      	movs	r3, #1
 800218e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8002190:	2300      	movs	r3, #0
 8002192:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002194:	e029      	b.n	80021ea <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002196:	6803      	ldr	r3, [r0, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800219e:	d101      	bne.n	80021a4 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021a4:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80021a6:	7870      	ldrb	r0, [r6, #1]
 80021a8:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80021ae:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80021b0:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80021b2:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021b4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80021b8:	e7bd      	b.n	8002136 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	22ff      	movs	r2, #255	; 0xff
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021c0:	2304      	movs	r3, #4
 80021c2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80021c4:	2300      	movs	r3, #0
 80021c6:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80021c8:	2701      	movs	r7, #1
 80021ca:	e00e      	b.n	80021ea <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff feeb 	bl	8001fa8 <HAL_RTC_WaitForSynchro>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d0d7      	beq.n	8002186 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	22ff      	movs	r2, #255	; 0xff
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021dc:	2304      	movs	r3, #4
 80021de:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80021e0:	2300      	movs	r3, #0
 80021e2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80021e4:	2701      	movs	r7, #1
 80021e6:	e000      	b.n	80021ea <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 80021e8:	2702      	movs	r7, #2
}
 80021ea:	4638      	mov	r0, r7
 80021ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021ee <HAL_RTC_SetDate>:
{
 80021ee:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 80021f0:	7f03      	ldrb	r3, [r0, #28]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d065      	beq.n	80022c2 <HAL_RTC_SetDate+0xd4>
 80021f6:	2301      	movs	r3, #1
 80021f8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80021fa:	2302      	movs	r3, #2
 80021fc:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021fe:	b93a      	cbnz	r2, 8002210 <HAL_RTC_SetDate+0x22>
 8002200:	784b      	ldrb	r3, [r1, #1]
 8002202:	f013 0f10 	tst.w	r3, #16
 8002206:	d003      	beq.n	8002210 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002208:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800220c:	330a      	adds	r3, #10
 800220e:	704b      	strb	r3, [r1, #1]
 8002210:	460e      	mov	r6, r1
 8002212:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002214:	2a00      	cmp	r2, #0
 8002216:	d132      	bne.n	800227e <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002218:	78c8      	ldrb	r0, [r1, #3]
 800221a:	f7ff ff5e 	bl	80020da <RTC_ByteToBcd2>
 800221e:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002220:	7870      	ldrb	r0, [r6, #1]
 8002222:	f7ff ff5a 	bl	80020da <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002226:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800222a:	78b0      	ldrb	r0, [r6, #2]
 800222c:	f7ff ff55 	bl	80020da <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002230:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002232:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002234:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	22ca      	movs	r2, #202	; 0xca
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	2253      	movs	r2, #83	; 0x53
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff fec8 	bl	8001fda <RTC_EnterInitMode>
 800224a:	4606      	mov	r6, r0
 800224c:	bb10      	cbnz	r0, 8002294 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002254:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002258:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800225a:	6822      	ldr	r2, [r4, #0]
 800225c:	68d3      	ldr	r3, [r2, #12]
 800225e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002262:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f013 0f20 	tst.w	r3, #32
 800226c:	d01b      	beq.n	80022a6 <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	22ff      	movs	r2, #255	; 0xff
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002274:	2301      	movs	r3, #1
 8002276:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002278:	2300      	movs	r3, #0
 800227a:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 800227c:	e022      	b.n	80022c4 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 800227e:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002280:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002282:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002284:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002286:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800228a:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 800228c:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800228e:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002292:	e7d1      	b.n	8002238 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800229a:	2304      	movs	r3, #4
 800229c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800229e:	2300      	movs	r3, #0
 80022a0:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80022a2:	2601      	movs	r6, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff fe7e 	bl	8001fa8 <HAL_RTC_WaitForSynchro>
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d0de      	beq.n	800226e <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80022b6:	2304      	movs	r3, #4
 80022b8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80022ba:	2300      	movs	r3, #0
 80022bc:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80022be:	2601      	movs	r6, #1
 80022c0:	e000      	b.n	80022c4 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 80022c2:	2602      	movs	r6, #2
}
 80022c4:	4630      	mov	r0, r6
 80022c6:	bd70      	pop	{r4, r5, r6, pc}

080022c8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80022c8:	0903      	lsrs	r3, r0, #4
 80022ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ce:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 80022d0:	f000 000f 	and.w	r0, r0, #15
 80022d4:	4410      	add	r0, r2
}
 80022d6:	b2c0      	uxtb	r0, r0
 80022d8:	4770      	bx	lr

080022da <HAL_RTC_GetTime>:
{
 80022da:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80022dc:	6803      	ldr	r3, [r0, #0]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80022e2:	6803      	ldr	r3, [r0, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022ea:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80022ec:	6803      	ldr	r3, [r0, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80022f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80022f8:	0c1d      	lsrs	r5, r3, #16
 80022fa:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 80022fe:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002300:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002304:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002306:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 800230a:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800230c:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002310:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002312:	b95a      	cbnz	r2, 800232c <HAL_RTC_GetTime+0x52>
 8002314:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002316:	f7ff ffd7 	bl	80022c8 <RTC_Bcd2ToByte>
 800231a:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800231c:	4630      	mov	r0, r6
 800231e:	f7ff ffd3 	bl	80022c8 <RTC_Bcd2ToByte>
 8002322:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff ffcf 	bl	80022c8 <RTC_Bcd2ToByte>
 800232a:	70a8      	strb	r0, [r5, #2]
}
 800232c:	2000      	movs	r0, #0
 800232e:	bd70      	pop	{r4, r5, r6, pc}

08002330 <HAL_RTC_GetDate>:
{
 8002330:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800233a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800233e:	0c18      	lsrs	r0, r3, #16
 8002340:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002342:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8002346:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002348:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 800234c:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800234e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002352:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002354:	b95a      	cbnz	r2, 800236e <HAL_RTC_GetDate+0x3e>
 8002356:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002358:	f7ff ffb6 	bl	80022c8 <RTC_Bcd2ToByte>
 800235c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800235e:	4630      	mov	r0, r6
 8002360:	f7ff ffb2 	bl	80022c8 <RTC_Bcd2ToByte>
 8002364:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002366:	4628      	mov	r0, r5
 8002368:	f7ff ffae 	bl	80022c8 <RTC_Bcd2ToByte>
 800236c:	70a0      	strb	r0, [r4, #2]
}
 800236e:	2000      	movs	r0, #0
 8002370:	bd70      	pop	{r4, r5, r6, pc}
	...

08002374 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002376:	7f03      	ldrb	r3, [r0, #28]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d06d      	beq.n	8002458 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 800237c:	4615      	mov	r5, r2
 800237e:	460e      	mov	r6, r1
 8002380:	4604      	mov	r4, r0
 8002382:	2301      	movs	r3, #1
 8002384:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238a:	6803      	ldr	r3, [r0, #0]
 800238c:	22ca      	movs	r2, #202	; 0xca
 800238e:	625a      	str	r2, [r3, #36]	; 0x24
 8002390:	6803      	ldr	r3, [r0, #0]
 8002392:	2253      	movs	r2, #83	; 0x53
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002396:	6803      	ldr	r3, [r0, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800239e:	d015      	beq.n	80023cc <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 80023a0:	f7fd ff9e 	bl	80002e0 <HAL_GetTick>
 80023a4:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f013 0f04 	tst.w	r3, #4
 80023ae:	d00d      	beq.n	80023cc <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80023b0:	f7fd ff96 	bl	80002e0 <HAL_GetTick>
 80023b4:	1bc0      	subs	r0, r0, r7
 80023b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80023ba:	d9f4      	bls.n	80023a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023c2:	2003      	movs	r0, #3
 80023c4:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 80023c6:	2300      	movs	r3, #0
 80023c8:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 80023ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80023cc:	6822      	ldr	r2, [r4, #0]
 80023ce:	6893      	ldr	r3, [r2, #8]
 80023d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023d4:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	68d3      	ldr	r3, [r2, #12]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80023e0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80023e2:	f7fd ff7d 	bl	80002e0 <HAL_GetTick>
 80023e6:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	68d8      	ldr	r0, [r3, #12]
 80023ec:	f010 0f04 	tst.w	r0, #4
 80023f0:	d10d      	bne.n	800240e <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80023f2:	f7fd ff75 	bl	80002e0 <HAL_GetTick>
 80023f6:	1bc0      	subs	r0, r0, r7
 80023f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80023fc:	d9f4      	bls.n	80023e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	22ff      	movs	r2, #255	; 0xff
 8002402:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002404:	2003      	movs	r0, #3
 8002406:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002408:	2300      	movs	r3, #0
 800240a:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 800240c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800240e:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002410:	6822      	ldr	r2, [r4, #0]
 8002412:	6893      	ldr	r3, [r2, #8]
 8002414:	f023 0307 	bic.w	r3, r3, #7
 8002418:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	6893      	ldr	r3, [r2, #8]
 800241e:	431d      	orrs	r5, r3
 8002420:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800242a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002432:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002434:	6822      	ldr	r2, [r4, #0]
 8002436:	6893      	ldr	r3, [r2, #8]
 8002438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243c:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800243e:	6822      	ldr	r2, [r4, #0]
 8002440:	6893      	ldr	r3, [r2, #8]
 8002442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002446:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	22ff      	movs	r2, #255	; 0xff
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800244e:	2301      	movs	r3, #1
 8002450:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002452:	2000      	movs	r0, #0
 8002454:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8002458:	2002      	movs	r0, #2
}
 800245a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800245c:	40010400 	.word	0x40010400

08002460 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002460:	b510      	push	{r4, lr}
 8002462:	4604      	mov	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002464:	6803      	ldr	r3, [r0, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800246c:	d106      	bne.n	800247c <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800246e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002474:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002476:	2301      	movs	r3, #1
 8002478:	7763      	strb	r3, [r4, #29]
 800247a:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800247c:	f000 fe12 	bl	80030a4 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002480:	6822      	ldr	r2, [r4, #0]
 8002482:	68d3      	ldr	r3, [r2, #12]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f463 6390 	orn	r3, r3, #1152	; 0x480
 800248a:	60d3      	str	r3, [r2, #12]
 800248c:	e7ef      	b.n	800246e <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 800248e:	bf00      	nop
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002494:	6803      	ldr	r3, [r0, #0]
 8002496:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002498:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800249c:	4770      	bx	lr

0800249e <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80024a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80024a6:	4770      	bx	lr

080024a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024a8:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024aa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ac:	6a04      	ldr	r4, [r0, #32]
 80024ae:	f024 0401 	bic.w	r4, r4, #1
 80024b2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80024b4:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ba:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024be:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80024c2:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024c6:	6203      	str	r3, [r0, #32]
}
 80024c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ce:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d0:	6a03      	ldr	r3, [r0, #32]
 80024d2:	f023 0310 	bic.w	r3, r3, #16
 80024d6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80024da:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024dc:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024e0:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80024e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024ec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024ee:	6203      	str	r3, [r0, #32]
}
 80024f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80024f6:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80024f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024fc:	f041 0107 	orr.w	r1, r1, #7
 8002500:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002502:	6083      	str	r3, [r0, #8]
 8002504:	4770      	bx	lr

08002506 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002506:	6802      	ldr	r2, [r0, #0]
 8002508:	68d3      	ldr	r3, [r2, #12]
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002510:	6802      	ldr	r2, [r0, #0]
 8002512:	6813      	ldr	r3, [r2, #0]
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	2000      	movs	r0, #0
 800251c:	4770      	bx	lr

0800251e <HAL_TIM_OC_DelayElapsedCallback>:
{
 800251e:	4770      	bx	lr

08002520 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002520:	4770      	bx	lr

08002522 <HAL_TIM_TriggerCallback>:
{
 8002522:	4770      	bx	lr

08002524 <HAL_TIM_IRQHandler>:
{
 8002524:	b510      	push	{r4, lr}
 8002526:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002528:	6803      	ldr	r3, [r0, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	f012 0f02 	tst.w	r2, #2
 8002530:	d011      	beq.n	8002556 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	f012 0f02 	tst.w	r2, #2
 8002538:	d00d      	beq.n	8002556 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800253a:	f06f 0202 	mvn.w	r2, #2
 800253e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002540:	2301      	movs	r3, #1
 8002542:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002544:	6803      	ldr	r3, [r0, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f013 0f03 	tst.w	r3, #3
 800254c:	d079      	beq.n	8002642 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800254e:	f000 fda3 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	2300      	movs	r3, #0
 8002554:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	f012 0f04 	tst.w	r2, #4
 800255e:	d012      	beq.n	8002586 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	f012 0f04 	tst.w	r2, #4
 8002566:	d00e      	beq.n	8002586 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002568:	f06f 0204 	mvn.w	r2, #4
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256e:	2302      	movs	r3, #2
 8002570:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f413 7f40 	tst.w	r3, #768	; 0x300
 800257a:	d068      	beq.n	800264e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800257c:	4620      	mov	r0, r4
 800257e:	f000 fd8b 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	2300      	movs	r3, #0
 8002584:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	f012 0f08 	tst.w	r2, #8
 800258e:	d012      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	f012 0f08 	tst.w	r2, #8
 8002596:	d00e      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002598:	f06f 0208 	mvn.w	r2, #8
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259e:	2304      	movs	r3, #4
 80025a0:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f013 0f03 	tst.w	r3, #3
 80025aa:	d057      	beq.n	800265c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80025ac:	4620      	mov	r0, r4
 80025ae:	f000 fd73 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	2300      	movs	r3, #0
 80025b4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	f012 0f10 	tst.w	r2, #16
 80025be:	d012      	beq.n	80025e6 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	f012 0f10 	tst.w	r2, #16
 80025c6:	d00e      	beq.n	80025e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025c8:	f06f 0210 	mvn.w	r2, #16
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ce:	2308      	movs	r3, #8
 80025d0:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80025da:	d046      	beq.n	800266a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80025dc:	4620      	mov	r0, r4
 80025de:	f000 fd5b 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	2300      	movs	r3, #0
 80025e4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	f012 0f01 	tst.w	r2, #1
 80025ee:	d003      	beq.n	80025f8 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	f012 0f01 	tst.w	r2, #1
 80025f6:	d13f      	bne.n	8002678 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002608:	d13d      	bne.n	8002686 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002612:	d003      	beq.n	800261c <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	f012 0f80 	tst.w	r2, #128	; 0x80
 800261a:	d13b      	bne.n	8002694 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	f012 0f40 	tst.w	r2, #64	; 0x40
 800262c:	d139      	bne.n	80026a2 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	f012 0f20 	tst.w	r2, #32
 8002636:	d003      	beq.n	8002640 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	f012 0f20 	tst.w	r2, #32
 800263e:	d137      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x18c>
 8002640:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	f7ff ff6c 	bl	800251e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff ff6a 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
 800264c:	e781      	b.n	8002552 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff ff65 	bl	800251e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff ff63 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
 800265a:	e792      	b.n	8002582 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff ff5e 	bl	800251e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff ff5c 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
 8002668:	e7a3      	b.n	80025b2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	4620      	mov	r0, r4
 800266c:	f7ff ff57 	bl	800251e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff ff55 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
 8002676:	e7b4      	b.n	80025e2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002678:	f06f 0201 	mvn.w	r2, #1
 800267c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800267e:	4620      	mov	r0, r4
 8002680:	f000 ff54 	bl	800352c <HAL_TIM_PeriodElapsedCallback>
 8002684:	e7b8      	b.n	80025f8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002686:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800268a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800268c:	4620      	mov	r0, r4
 800268e:	f000 f93c 	bl	800290a <HAL_TIMEx_BreakCallback>
 8002692:	e7ba      	b.n	800260a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002694:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002698:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800269a:	4620      	mov	r0, r4
 800269c:	f000 f936 	bl	800290c <HAL_TIMEx_Break2Callback>
 80026a0:	e7bc      	b.n	800261c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff ff3a 	bl	8002522 <HAL_TIM_TriggerCallback>
 80026ae:	e7be      	b.n	800262e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026b0:	f06f 0220 	mvn.w	r2, #32
 80026b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80026b6:	4620      	mov	r0, r4
 80026b8:	f000 f926 	bl	8002908 <HAL_TIMEx_CommutationCallback>
}
 80026bc:	e7c0      	b.n	8002640 <HAL_TIM_IRQHandler+0x11c>
	...

080026c0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80026c0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <TIM_Base_SetConfig+0x90>)
 80026c4:	4290      	cmp	r0, r2
 80026c6:	d03d      	beq.n	8002744 <TIM_Base_SetConfig+0x84>
 80026c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026cc:	d03a      	beq.n	8002744 <TIM_Base_SetConfig+0x84>
 80026ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026d2:	4290      	cmp	r0, r2
 80026d4:	d036      	beq.n	8002744 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d6:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <TIM_Base_SetConfig+0x90>)
 80026d8:	4290      	cmp	r0, r2
 80026da:	d012      	beq.n	8002702 <TIM_Base_SetConfig+0x42>
 80026dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026e0:	d00f      	beq.n	8002702 <TIM_Base_SetConfig+0x42>
 80026e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026e6:	4290      	cmp	r0, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_Base_SetConfig+0x42>
 80026ea:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80026ee:	4290      	cmp	r0, r2
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0x42>
 80026f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026f6:	4290      	cmp	r0, r2
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0x42>
 80026fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026fe:	4290      	cmp	r0, r2
 8002700:	d103      	bne.n	800270a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002706:	68ca      	ldr	r2, [r1, #12]
 8002708:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800270a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800270e:	694a      	ldr	r2, [r1, #20]
 8002710:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002712:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002714:	688b      	ldr	r3, [r1, #8]
 8002716:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002718:	680b      	ldr	r3, [r1, #0]
 800271a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <TIM_Base_SetConfig+0x90>)
 800271e:	4298      	cmp	r0, r3
 8002720:	d00b      	beq.n	800273a <TIM_Base_SetConfig+0x7a>
 8002722:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002726:	4298      	cmp	r0, r3
 8002728:	d007      	beq.n	800273a <TIM_Base_SetConfig+0x7a>
 800272a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272e:	4298      	cmp	r0, r3
 8002730:	d003      	beq.n	800273a <TIM_Base_SetConfig+0x7a>
 8002732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002736:	4298      	cmp	r0, r3
 8002738:	d101      	bne.n	800273e <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 800273a:	690b      	ldr	r3, [r1, #16]
 800273c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800273e:	2301      	movs	r3, #1
 8002740:	6143      	str	r3, [r0, #20]
 8002742:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002748:	684a      	ldr	r2, [r1, #4]
 800274a:	4313      	orrs	r3, r2
 800274c:	e7c3      	b.n	80026d6 <TIM_Base_SetConfig+0x16>
 800274e:	bf00      	nop
 8002750:	40012c00 	.word	0x40012c00

08002754 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002754:	b1a8      	cbz	r0, 8002782 <HAL_TIM_Base_Init+0x2e>
{ 
 8002756:	b510      	push	{r4, lr}
 8002758:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800275a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800275e:	b15b      	cbz	r3, 8002778 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002766:	1d21      	adds	r1, r4, #4
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	f7ff ffa9 	bl	80026c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800276e:	2301      	movs	r3, #1
 8002770:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002774:	2000      	movs	r0, #0
 8002776:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002778:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800277c:	f001 fc8c 	bl	8004098 <HAL_TIM_Base_MspInit>
 8002780:	e7ee      	b.n	8002760 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002782:	2001      	movs	r0, #1
 8002784:	4770      	bx	lr

08002786 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002786:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002788:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800278e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002792:	4319      	orrs	r1, r3
 8002794:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002796:	6084      	str	r4, [r0, #8]
} 
 8002798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80027a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	f000 8082 	beq.w	80028ae <HAL_TIM_ConfigClockSource+0x10e>
{
 80027aa:	b510      	push	{r4, lr}
 80027ac:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80027ae:	2301      	movs	r3, #1
 80027b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80027ba:	6802      	ldr	r2, [r0, #0]
 80027bc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_TIM_ConfigClockSource+0x114>)
 80027c0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80027c2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80027c4:	680b      	ldr	r3, [r1, #0]
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d05d      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0xe6>
 80027ca:	d910      	bls.n	80027ee <HAL_TIM_ConfigClockSource+0x4e>
 80027cc:	2b70      	cmp	r3, #112	; 0x70
 80027ce:	d040      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0xb2>
 80027d0:	d81f      	bhi.n	8002812 <HAL_TIM_ConfigClockSource+0x72>
 80027d2:	2b50      	cmp	r3, #80	; 0x50
 80027d4:	d04d      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0xd2>
 80027d6:	2b60      	cmp	r3, #96	; 0x60
 80027d8:	d134      	bne.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80027da:	68ca      	ldr	r2, [r1, #12]
 80027dc:	6849      	ldr	r1, [r1, #4]
 80027de:	6820      	ldr	r0, [r4, #0]
 80027e0:	f7ff fe75 	bl	80024ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e4:	2160      	movs	r1, #96	; 0x60
 80027e6:	6820      	ldr	r0, [r4, #0]
 80027e8:	f7ff fe85 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 80027ec:	e02a      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d053      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xfa>
 80027f2:	d908      	bls.n	8002806 <HAL_TIM_ConfigClockSource+0x66>
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d055      	beq.n	80028a4 <HAL_TIM_ConfigClockSource+0x104>
 80027f8:	2b30      	cmp	r3, #48	; 0x30
 80027fa:	d123      	bne.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80027fc:	2130      	movs	r1, #48	; 0x30
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	f7ff fe79 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8002804:	e01e      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002806:	b9eb      	cbnz	r3, 8002844 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002808:	2100      	movs	r1, #0
 800280a:	6820      	ldr	r0, [r4, #0]
 800280c:	f7ff fe73 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8002810:	e018      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	d00e      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x96>
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	d112      	bne.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 800281e:	68cb      	ldr	r3, [r1, #12]
 8002820:	684a      	ldr	r2, [r1, #4]
 8002822:	6889      	ldr	r1, [r1, #8]
 8002824:	6820      	ldr	r0, [r4, #0]
 8002826:	f7ff ffae 	bl	8002786 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800282a:	6822      	ldr	r2, [r4, #0]
 800282c:	6893      	ldr	r3, [r2, #8]
 800282e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002832:	6093      	str	r3, [r2, #8]
    break;
 8002834:	e006      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	6893      	ldr	r3, [r2, #8]
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	f023 0307 	bic.w	r3, r3, #7
 8002842:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002844:	2301      	movs	r3, #1
 8002846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800284a:	2000      	movs	r0, #0
 800284c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002850:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8002852:	68cb      	ldr	r3, [r1, #12]
 8002854:	684a      	ldr	r2, [r1, #4]
 8002856:	6889      	ldr	r1, [r1, #8]
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	f7ff ff94 	bl	8002786 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800285e:	6822      	ldr	r2, [r4, #0]
 8002860:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800286a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800286e:	6093      	str	r3, [r2, #8]
    break;
 8002870:	e7e8      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002872:	68ca      	ldr	r2, [r1, #12]
 8002874:	6849      	ldr	r1, [r1, #4]
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	f7ff fe16 	bl	80024a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800287c:	2150      	movs	r1, #80	; 0x50
 800287e:	6820      	ldr	r0, [r4, #0]
 8002880:	f7ff fe39 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8002884:	e7de      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002886:	68ca      	ldr	r2, [r1, #12]
 8002888:	6849      	ldr	r1, [r1, #4]
 800288a:	6820      	ldr	r0, [r4, #0]
 800288c:	f7ff fe0c 	bl	80024a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	6820      	ldr	r0, [r4, #0]
 8002894:	f7ff fe2f 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8002898:	e7d4      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800289a:	2110      	movs	r1, #16
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	f7ff fe2a 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 80028a2:	e7cf      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80028a4:	2120      	movs	r1, #32
 80028a6:	6820      	ldr	r0, [r4, #0]
 80028a8:	f7ff fe25 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 80028ac:	e7ca      	b.n	8002844 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 80028ae:	2002      	movs	r0, #2
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	fffe0088 	.word	0xfffe0088

080028b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80028b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d01f      	beq.n	8002900 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 80028c0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80028c2:	2301      	movs	r3, #1
 80028c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c8:	6804      	ldr	r4, [r0, #0]
 80028ca:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028cc:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028ce:	4d0d      	ldr	r5, [pc, #52]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 80028d0:	42ac      	cmp	r4, r5
 80028d2:	d010      	beq.n	80028f6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028d8:	680d      	ldr	r5, [r1, #0]
 80028da:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80028dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e0:	6889      	ldr	r1, [r1, #8]
 80028e2:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028e4:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80028ea:	2300      	movs	r3, #0
 80028ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80028f0:	4618      	mov	r0, r3
} 
 80028f2:	bc30      	pop	{r4, r5}
 80028f4:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028fa:	684d      	ldr	r5, [r1, #4]
 80028fc:	432b      	orrs	r3, r5
 80028fe:	e7e9      	b.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8002900:	2002      	movs	r0, #2
 8002902:	4770      	bx	lr
 8002904:	40012c00 	.word	0x40012c00

08002908 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002908:	4770      	bx	lr

0800290a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800290a:	4770      	bx	lr

0800290c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800290c:	4770      	bx	lr

0800290e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800290e:	6802      	ldr	r2, [r0, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002916:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002918:	6802      	ldr	r2, [r0, #0]
 800291a:	6893      	ldr	r3, [r2, #8]
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002922:	2320      	movs	r3, #32
 8002924:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002928:	4770      	bx	lr

0800292a <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 800292a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b20      	cmp	r3, #32
 8002932:	d001      	beq.n	8002938 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8002934:	2002      	movs	r0, #2
 8002936:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002938:	b1b9      	cbz	r1, 800296a <HAL_UART_Transmit_IT+0x40>
 800293a:	b1c2      	cbz	r2, 800296e <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 800293c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002940:	2b01      	cmp	r3, #1
 8002942:	d016      	beq.n	8002972 <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 8002944:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8002946:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800294a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294e:	2300      	movs	r3, #0
 8002950:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002958:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800295c:	6801      	ldr	r1, [r0, #0]
 800295e:	680a      	ldr	r2, [r1, #0]
 8002960:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002964:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002966:	4618      	mov	r0, r3
 8002968:	4770      	bx	lr
      return HAL_ERROR;
 800296a:	2001      	movs	r0, #1
 800296c:	4770      	bx	lr
 800296e:	2001      	movs	r0, #1
 8002970:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002972:	2002      	movs	r0, #2
}
 8002974:	4770      	bx	lr

08002976 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002976:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	d001      	beq.n	8002984 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8002980:	2002      	movs	r0, #2
 8002982:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002984:	2900      	cmp	r1, #0
 8002986:	d047      	beq.n	8002a18 <HAL_UART_Receive_IT+0xa2>
 8002988:	2a00      	cmp	r2, #0
 800298a:	d047      	beq.n	8002a1c <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 800298c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002990:	2b01      	cmp	r3, #1
 8002992:	d045      	beq.n	8002a20 <HAL_UART_Receive_IT+0xaa>
 8002994:	2301      	movs	r3, #1
 8002996:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 800299a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800299c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80029a0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80029a4:	6883      	ldr	r3, [r0, #8]
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029aa:	d006      	beq.n	80029ba <HAL_UART_Receive_IT+0x44>
 80029ac:	b9a3      	cbnz	r3, 80029d8 <HAL_UART_Receive_IT+0x62>
 80029ae:	6903      	ldr	r3, [r0, #16]
 80029b0:	b973      	cbnz	r3, 80029d0 <HAL_UART_Receive_IT+0x5a>
 80029b2:	23ff      	movs	r3, #255	; 0xff
 80029b4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80029b8:	e011      	b.n	80029de <HAL_UART_Receive_IT+0x68>
 80029ba:	6903      	ldr	r3, [r0, #16]
 80029bc:	b923      	cbnz	r3, 80029c8 <HAL_UART_Receive_IT+0x52>
 80029be:	f240 13ff 	movw	r3, #511	; 0x1ff
 80029c2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80029c6:	e00a      	b.n	80029de <HAL_UART_Receive_IT+0x68>
 80029c8:	23ff      	movs	r3, #255	; 0xff
 80029ca:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80029ce:	e006      	b.n	80029de <HAL_UART_Receive_IT+0x68>
 80029d0:	237f      	movs	r3, #127	; 0x7f
 80029d2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80029d6:	e002      	b.n	80029de <HAL_UART_Receive_IT+0x68>
 80029d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029dc:	d012      	beq.n	8002a04 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	2300      	movs	r3, #0
 80029e0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e2:	2222      	movs	r2, #34	; 0x22
 80029e4:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80029e8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ec:	6801      	ldr	r1, [r0, #0]
 80029ee:	688a      	ldr	r2, [r1, #8]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80029f6:	6801      	ldr	r1, [r0, #0]
 80029f8:	680a      	ldr	r2, [r1, #0]
 80029fa:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80029fe:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002a00:	4618      	mov	r0, r3
 8002a02:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002a04:	6903      	ldr	r3, [r0, #16]
 8002a06:	b91b      	cbnz	r3, 8002a10 <HAL_UART_Receive_IT+0x9a>
 8002a08:	237f      	movs	r3, #127	; 0x7f
 8002a0a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002a0e:	e7e6      	b.n	80029de <HAL_UART_Receive_IT+0x68>
 8002a10:	233f      	movs	r3, #63	; 0x3f
 8002a12:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002a16:	e7e2      	b.n	80029de <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8002a18:	2001      	movs	r0, #1
 8002a1a:	4770      	bx	lr
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002a20:	2002      	movs	r0, #2
}
 8002a22:	4770      	bx	lr

08002a24 <HAL_UART_TxCpltCallback>:
{
 8002a24:	4770      	bx	lr

08002a26 <HAL_UART_ErrorCallback>:
{
 8002a26:	4770      	bx	lr

08002a28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a28:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002a2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002a32:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002a36:	f7ff fff6 	bl	8002a26 <HAL_UART_ErrorCallback>
 8002a3a:	bd08      	pop	{r3, pc}

08002a3c <UART_SetConfig>:
{
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a40:	6883      	ldr	r3, [r0, #8]
 8002a42:	6902      	ldr	r2, [r0, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	6942      	ldr	r2, [r0, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	69c2      	ldr	r2, [r0, #28]
 8002a4c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a4e:	6801      	ldr	r1, [r0, #0]
 8002a50:	6808      	ldr	r0, [r1, #0]
 8002a52:	4a64      	ldr	r2, [pc, #400]	; (8002be4 <UART_SetConfig+0x1a8>)
 8002a54:	4002      	ands	r2, r0
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5a:	6822      	ldr	r2, [r4, #0]
 8002a5c:	6853      	ldr	r3, [r2, #4]
 8002a5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a62:	68e1      	ldr	r1, [r4, #12]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002a68:	69a3      	ldr	r3, [r4, #24]
 8002a6a:	6a22      	ldr	r2, [r4, #32]
 8002a6c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a6e:	6821      	ldr	r1, [r4, #0]
 8002a70:	688a      	ldr	r2, [r1, #8]
 8002a72:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a7a:	6825      	ldr	r5, [r4, #0]
 8002a7c:	4b5a      	ldr	r3, [pc, #360]	; (8002be8 <UART_SetConfig+0x1ac>)
 8002a7e:	429d      	cmp	r5, r3
 8002a80:	d015      	beq.n	8002aae <UART_SetConfig+0x72>
 8002a82:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <UART_SetConfig+0x1b0>)
 8002a84:	429d      	cmp	r5, r3
 8002a86:	d029      	beq.n	8002adc <UART_SetConfig+0xa0>
 8002a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a8c:	429d      	cmp	r5, r3
 8002a8e:	d021      	beq.n	8002ad4 <UART_SetConfig+0x98>
 8002a90:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a92:	69e2      	ldr	r2, [r4, #28]
 8002a94:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a98:	d022      	beq.n	8002ae0 <UART_SetConfig+0xa4>
    switch (clocksource)
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	f200 809f 	bhi.w	8002bde <UART_SetConfig+0x1a2>
 8002aa0:	e8df f003 	tbb	[pc, r3]
 8002aa4:	9d7c7166 	.word	0x9d7c7166
 8002aa8:	9d9d9d88 	.word	0x9d9d9d88
 8002aac:	93          	.byte	0x93
 8002aad:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aae:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d809      	bhi.n	8002ad0 <UART_SetConfig+0x94>
 8002abc:	e8df f003 	tbb	[pc, r3]
 8002ac0:	0c060402 	.word	0x0c060402
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e7e4      	b.n	8002a92 <UART_SetConfig+0x56>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	e7e2      	b.n	8002a92 <UART_SetConfig+0x56>
 8002acc:	2308      	movs	r3, #8
 8002ace:	e7e0      	b.n	8002a92 <UART_SetConfig+0x56>
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	e7de      	b.n	8002a92 <UART_SetConfig+0x56>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e7dc      	b.n	8002a92 <UART_SetConfig+0x56>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e7da      	b.n	8002a92 <UART_SetConfig+0x56>
 8002adc:	2300      	movs	r3, #0
 8002ade:	e7d8      	b.n	8002a92 <UART_SetConfig+0x56>
    switch (clocksource)
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d842      	bhi.n	8002b6a <UART_SetConfig+0x12e>
 8002ae4:	e8df f003 	tbb	[pc, r3]
 8002ae8:	41221705 	.word	0x41221705
 8002aec:	4141412d 	.word	0x4141412d
 8002af0:	38          	.byte	0x38
 8002af1:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002af2:	f7ff f957 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002af6:	6862      	ldr	r2, [r4, #4]
 8002af8:	0853      	lsrs	r3, r2, #1
 8002afa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b02:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b04:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002b06:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b0a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002b0e:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8002b10:	6822      	ldr	r2, [r4, #0]
 8002b12:	60d3      	str	r3, [r2, #12]
 8002b14:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b16:	f7ff f95b 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002b1a:	6862      	ldr	r2, [r4, #4]
 8002b1c:	0853      	lsrs	r3, r2, #1
 8002b1e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b26:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b28:	2000      	movs	r0, #0
        break;
 8002b2a:	e7ec      	b.n	8002b06 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b2c:	6862      	ldr	r2, [r4, #4]
 8002b2e:	0853      	lsrs	r3, r2, #1
 8002b30:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b34:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b3c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b3e:	2000      	movs	r0, #0
        break;
 8002b40:	e7e1      	b.n	8002b06 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b42:	f7ff f807 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8002b46:	6862      	ldr	r2, [r4, #4]
 8002b48:	0853      	lsrs	r3, r2, #1
 8002b4a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002b4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b52:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b54:	2000      	movs	r0, #0
        break;
 8002b56:	e7d6      	b.n	8002b06 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b58:	6862      	ldr	r2, [r4, #4]
 8002b5a:	0853      	lsrs	r3, r2, #1
 8002b5c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b64:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b66:	2000      	movs	r0, #0
        break;
 8002b68:	e7cd      	b.n	8002b06 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e7ca      	b.n	8002b06 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b70:	f7ff f918 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002b74:	6863      	ldr	r3, [r4, #4]
 8002b76:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002b7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b7e:	b280      	uxth	r0, r0
 8002b80:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b82:	2000      	movs	r0, #0
        break;
 8002b84:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b86:	f7ff f923 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002b8a:	6863      	ldr	r3, [r4, #4]
 8002b8c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002b90:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b94:	b280      	uxth	r0, r0
 8002b96:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b98:	2000      	movs	r0, #0
        break;
 8002b9a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b9c:	6862      	ldr	r2, [r4, #4]
 8002b9e:	0853      	lsrs	r3, r2, #1
 8002ba0:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002ba4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb0:	2000      	movs	r0, #0
        break;
 8002bb2:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bb4:	f7fe ffce 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002bbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bc2:	b280      	uxth	r0, r0
 8002bc4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bc6:	2000      	movs	r0, #0
        break;
 8002bc8:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002bca:	6862      	ldr	r2, [r4, #4]
 8002bcc:	0853      	lsrs	r3, r2, #1
 8002bce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002bd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bda:	2000      	movs	r0, #0
        break;
 8002bdc:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 8002bde:	2001      	movs	r0, #1
}
 8002be0:	bd38      	pop	{r3, r4, r5, pc}
 8002be2:	bf00      	nop
 8002be4:	efff69f3 	.word	0xefff69f3
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40004400 	.word	0x40004400

08002bf0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bf2:	f013 0f01 	tst.w	r3, #1
 8002bf6:	d006      	beq.n	8002c06 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bf8:	6802      	ldr	r2, [r0, #0]
 8002bfa:	6853      	ldr	r3, [r2, #4]
 8002bfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c00:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002c02:	430b      	orrs	r3, r1
 8002c04:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c08:	f013 0f02 	tst.w	r3, #2
 8002c0c:	d006      	beq.n	8002c1c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c0e:	6802      	ldr	r2, [r0, #0]
 8002c10:	6853      	ldr	r3, [r2, #4]
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c1e:	f013 0f04 	tst.w	r3, #4
 8002c22:	d006      	beq.n	8002c32 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c24:	6802      	ldr	r2, [r0, #0]
 8002c26:	6853      	ldr	r3, [r2, #4]
 8002c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c34:	f013 0f08 	tst.w	r3, #8
 8002c38:	d006      	beq.n	8002c48 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c3a:	6802      	ldr	r2, [r0, #0]
 8002c3c:	6853      	ldr	r3, [r2, #4]
 8002c3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c42:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c4a:	f013 0f10 	tst.w	r3, #16
 8002c4e:	d006      	beq.n	8002c5e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c50:	6802      	ldr	r2, [r0, #0]
 8002c52:	6893      	ldr	r3, [r2, #8]
 8002c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c58:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c60:	f013 0f20 	tst.w	r3, #32
 8002c64:	d006      	beq.n	8002c74 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c66:	6802      	ldr	r2, [r0, #0]
 8002c68:	6893      	ldr	r3, [r2, #8]
 8002c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002c70:	430b      	orrs	r3, r1
 8002c72:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c7a:	d00a      	beq.n	8002c92 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c7c:	6802      	ldr	r2, [r0, #0]
 8002c7e:	6853      	ldr	r3, [r2, #4]
 8002c80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c84:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002c86:	430b      	orrs	r3, r1
 8002c88:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c90:	d00b      	beq.n	8002caa <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c98:	d006      	beq.n	8002ca8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9a:	6802      	ldr	r2, [r0, #0]
 8002c9c:	6853      	ldr	r3, [r2, #4]
 8002c9e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ca2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6053      	str	r3, [r2, #4]
 8002ca8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002caa:	6802      	ldr	r2, [r0, #0]
 8002cac:	6853      	ldr	r3, [r2, #4]
 8002cae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cb2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6053      	str	r3, [r2, #4]
 8002cb8:	e7eb      	b.n	8002c92 <UART_AdvFeatureConfig+0xa2>

08002cba <UART_WaitOnFlagUntilTimeout>:
{
 8002cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	460f      	mov	r7, r1
 8002cc2:	4616      	mov	r6, r2
 8002cc4:	4698      	mov	r8, r3
 8002cc6:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc8:	682b      	ldr	r3, [r5, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	ea37 0303 	bics.w	r3, r7, r3
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	42b3      	cmp	r3, r6
 8002cd8:	d11e      	bne.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002cda:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002cde:	d0f3      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002ce0:	b12c      	cbz	r4, 8002cee <UART_WaitOnFlagUntilTimeout+0x34>
 8002ce2:	f7fd fafd 	bl	80002e0 <HAL_GetTick>
 8002ce6:	eba0 0008 	sub.w	r0, r0, r8
 8002cea:	4284      	cmp	r4, r0
 8002cec:	d2ec      	bcs.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cee:	682a      	ldr	r2, [r5, #0]
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf8:	682a      	ldr	r2, [r5, #0]
 8002cfa:	6893      	ldr	r3, [r2, #8]
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002d02:	2320      	movs	r3, #32
 8002d04:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002d08:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8002d12:	2003      	movs	r0, #3
 8002d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002d18:	2000      	movs	r0, #0
}
 8002d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d1e <UART_CheckIdleState>:
{
 8002d1e:	b530      	push	{r4, r5, lr}
 8002d20:	b083      	sub	sp, #12
 8002d22:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002d28:	f7fd fada 	bl	80002e0 <HAL_GetTick>
 8002d2c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f013 0f08 	tst.w	r3, #8
 8002d36:	d10e      	bne.n	8002d56 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f013 0f04 	tst.w	r3, #4
 8002d40:	d117      	bne.n	8002d72 <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 8002d42:	2320      	movs	r3, #32
 8002d44:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002d48:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8002d52:	b003      	add	sp, #12
 8002d54:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff ffa8 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d0e4      	beq.n	8002d38 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002d6e:	2003      	movs	r0, #3
 8002d70:	e7ef      	b.n	8002d52 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	462b      	mov	r3, r5
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7ff ff9a 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d0db      	beq.n	8002d42 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8002d8a:	2003      	movs	r0, #3
 8002d8c:	e7e1      	b.n	8002d52 <UART_CheckIdleState+0x34>

08002d8e <HAL_UART_Init>:
  if(huart == NULL)
 8002d8e:	b378      	cbz	r0, 8002df0 <HAL_UART_Init+0x62>
{
 8002d90:	b510      	push	{r4, lr}
 8002d92:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002d94:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002d98:	b30b      	cbz	r3, 8002dde <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d9a:	2324      	movs	r3, #36	; 0x24
 8002d9c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	6813      	ldr	r3, [r2, #0]
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7ff fe46 	bl	8002a3c <UART_SetConfig>
 8002db0:	2801      	cmp	r0, #1
 8002db2:	d01f      	beq.n	8002df4 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002db6:	b9bb      	cbnz	r3, 8002de8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	6853      	ldr	r3, [r2, #4]
 8002dbc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002dc0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	6893      	ldr	r3, [r2, #8]
 8002dc6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002dca:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	6813      	ldr	r3, [r2, #0]
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f7ff ffa1 	bl	8002d1e <UART_CheckIdleState>
 8002ddc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002dde:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002de2:	f001 f977 	bl	80040d4 <HAL_UART_MspInit>
 8002de6:	e7d8      	b.n	8002d9a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff ff01 	bl	8002bf0 <UART_AdvFeatureConfig>
 8002dee:	e7e3      	b.n	8002db8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002df0:	2001      	movs	r0, #1
 8002df2:	4770      	bx	lr
}
 8002df4:	bd10      	pop	{r4, pc}

08002df6 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002df6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b21      	cmp	r3, #33	; 0x21
 8002dfe:	d001      	beq.n	8002e04 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002e00:	2002      	movs	r0, #2
  }
}
 8002e02:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002e04:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	b193      	cbz	r3, 8002e32 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0c:	6883      	ldr	r3, [r0, #8]
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d01a      	beq.n	8002e4a <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002e14:	6802      	ldr	r2, [r0, #0]
 8002e16:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002e18:	1c59      	adds	r1, r3, #1
 8002e1a:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002e20:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002e2e:	2000      	movs	r0, #0
 8002e30:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e32:	6802      	ldr	r2, [r0, #0]
 8002e34:	6813      	ldr	r3, [r2, #0]
 8002e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e3a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e3c:	6802      	ldr	r2, [r0, #0]
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e44:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002e46:	2000      	movs	r0, #0
 8002e48:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4a:	6903      	ldr	r3, [r0, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e1      	bne.n	8002e14 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002e50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002e52:	6802      	ldr	r2, [r0, #0]
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5a:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002e5c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002e5e:	3302      	adds	r3, #2
 8002e60:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002e62:	e7dd      	b.n	8002e20 <UART_Transmit_IT+0x2a>

08002e64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e64:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e66:	6801      	ldr	r1, [r0, #0]
 8002e68:	680b      	ldr	r3, [r1, #0]
 8002e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e6e:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e70:	2320      	movs	r3, #32
 8002e72:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002e76:	f7ff fdd5 	bl	8002a24 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	bd08      	pop	{r3, pc}

08002e7e <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002e7e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e82:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b22      	cmp	r3, #34	; 0x22
 8002e8a:	d006      	beq.n	8002e9a <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e8c:	6802      	ldr	r2, [r0, #0]
 8002e8e:	6993      	ldr	r3, [r2, #24]
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002e96:	2002      	movs	r0, #2
 8002e98:	4770      	bx	lr
{
 8002e9a:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e9c:	6803      	ldr	r3, [r0, #0]
 8002e9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ea0:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea2:	6881      	ldr	r1, [r0, #8]
 8002ea4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002ea8:	d00f      	beq.n	8002eca <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002eaa:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002eac:	1c4c      	adds	r4, r1, #1
 8002eae:	6544      	str	r4, [r0, #84]	; 0x54
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8002eb6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002ec4:	b15b      	cbz	r3, 8002ede <UART_Receive_IT+0x60>
    return HAL_OK;
 8002ec6:	2000      	movs	r0, #0
  }
}
 8002ec8:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eca:	6901      	ldr	r1, [r0, #16]
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	d1ec      	bne.n	8002eaa <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002ed0:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 8002ed6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ed8:	3302      	adds	r3, #2
 8002eda:	6543      	str	r3, [r0, #84]	; 0x54
 8002edc:	e7eb      	b.n	8002eb6 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ede:	6802      	ldr	r2, [r0, #0]
 8002ee0:	6813      	ldr	r3, [r2, #0]
 8002ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ee6:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee8:	6802      	ldr	r2, [r0, #0]
 8002eea:	6893      	ldr	r3, [r2, #8]
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002ef8:	f000 f8b2 	bl	8003060 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002efc:	2000      	movs	r0, #0
 8002efe:	bd10      	pop	{r4, pc}

08002f00 <HAL_UART_IRQHandler>:
{
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f08:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8002f0a:	f013 050f 	ands.w	r5, r3, #15
 8002f0e:	d105      	bne.n	8002f1c <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f10:	f013 0f20 	tst.w	r3, #32
 8002f14:	d002      	beq.n	8002f1c <HAL_UART_IRQHandler+0x1c>
 8002f16:	f011 0f20 	tst.w	r1, #32
 8002f1a:	d160      	bne.n	8002fde <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8002f1c:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002f1e:	2d00      	cmp	r5, #0
 8002f20:	d072      	beq.n	8003008 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002f22:	f010 0501 	ands.w	r5, r0, #1
 8002f26:	d102      	bne.n	8002f2e <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002f28:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002f2c:	d06c      	beq.n	8003008 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f2e:	f013 0f01 	tst.w	r3, #1
 8002f32:	d007      	beq.n	8002f44 <HAL_UART_IRQHandler+0x44>
 8002f34:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002f38:	d004      	beq.n	8002f44 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f3e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002f40:	4302      	orrs	r2, r0
 8002f42:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f44:	f013 0f02 	tst.w	r3, #2
 8002f48:	d007      	beq.n	8002f5a <HAL_UART_IRQHandler+0x5a>
 8002f4a:	b135      	cbz	r5, 8002f5a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	2002      	movs	r0, #2
 8002f50:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f52:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002f54:	f042 0204 	orr.w	r2, r2, #4
 8002f58:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f5a:	f013 0f04 	tst.w	r3, #4
 8002f5e:	d007      	beq.n	8002f70 <HAL_UART_IRQHandler+0x70>
 8002f60:	b135      	cbz	r5, 8002f70 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	2004      	movs	r0, #4
 8002f66:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f68:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002f6a:	f042 0202 	orr.w	r2, r2, #2
 8002f6e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002f70:	f013 0f08 	tst.w	r3, #8
 8002f74:	d009      	beq.n	8002f8a <HAL_UART_IRQHandler+0x8a>
 8002f76:	f011 0f20 	tst.w	r1, #32
 8002f7a:	d100      	bne.n	8002f7e <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f7c:	b12d      	cbz	r5, 8002f8a <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002f7e:	6822      	ldr	r2, [r4, #0]
 8002f80:	2008      	movs	r0, #8
 8002f82:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f84:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002f86:	4302      	orrs	r2, r0
 8002f88:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f8a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002f8c:	2a00      	cmp	r2, #0
 8002f8e:	d04d      	beq.n	800302c <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f90:	f013 0f20 	tst.w	r3, #32
 8002f94:	d002      	beq.n	8002f9c <HAL_UART_IRQHandler+0x9c>
 8002f96:	f011 0f20 	tst.w	r1, #32
 8002f9a:	d123      	bne.n	8002fe4 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002f9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002f9e:	f013 0f08 	tst.w	r3, #8
 8002fa2:	d104      	bne.n	8002fae <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002fa8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002fac:	d026      	beq.n	8002ffc <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff fcad 	bl	800290e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc4:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fc8:	b183      	cbz	r3, 8002fec <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_UART_IRQHandler+0x158>)
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fce:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002fd0:	f7fd ffc5 	bl	8000f5e <HAL_DMA_Abort_IT>
 8002fd4:	b350      	cbz	r0, 800302c <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fd6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002fd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fda:	4798      	blx	r3
 8002fdc:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002fde:	f7ff ff4e 	bl	8002e7e <UART_Receive_IT>
      return;
 8002fe2:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff ff4a 	bl	8002e7e <UART_Receive_IT>
 8002fea:	e7d7      	b.n	8002f9c <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fd1a 	bl	8002a26 <HAL_UART_ErrorCallback>
 8002ff2:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7ff fd16 	bl	8002a26 <HAL_UART_ErrorCallback>
 8002ffa:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f7ff fd12 	bl	8002a26 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003002:	2300      	movs	r3, #0
 8003004:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003006:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003008:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800300c:	d002      	beq.n	8003014 <HAL_UART_IRQHandler+0x114>
 800300e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003012:	d10c      	bne.n	800302e <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003014:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003018:	d002      	beq.n	8003020 <HAL_UART_IRQHandler+0x120>
 800301a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800301e:	d112      	bne.n	8003046 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003020:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003024:	d002      	beq.n	800302c <HAL_UART_IRQHandler+0x12c>
 8003026:	f011 0f40 	tst.w	r1, #64	; 0x40
 800302a:	d110      	bne.n	800304e <HAL_UART_IRQHandler+0x14e>
 800302c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800302e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003032:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003034:	2320      	movs	r3, #32
 8003036:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800303a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 800303e:	4620      	mov	r0, r4
 8003040:	f000 f80c 	bl	800305c <HAL_UARTEx_WakeupCallback>
    return;
 8003044:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8003046:	4620      	mov	r0, r4
 8003048:	f7ff fed5 	bl	8002df6 <UART_Transmit_IT>
    return;
 800304c:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff ff08 	bl	8002e64 <UART_EndTransmit_IT>
    return;
 8003054:	e7ea      	b.n	800302c <HAL_UART_IRQHandler+0x12c>
 8003056:	bf00      	nop
 8003058:	08002a29 	.word	0x08002a29

0800305c <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800305c:	4770      	bx	lr
	...

08003060 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003060:	b508      	push	{r3, lr}
	rx_flag = 1;
 8003062:	2201      	movs	r2, #1
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_UART_RxCpltCallback+0x14>)
 8003066:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <HAL_UART_RxCpltCallback+0x18>)
 800306a:	4804      	ldr	r0, [pc, #16]	; (800307c <HAL_UART_RxCpltCallback+0x1c>)
 800306c:	f7ff fc83 	bl	8002976 <HAL_UART_Receive_IT>
 8003070:	bd08      	pop	{r3, pc}
 8003072:	bf00      	nop
 8003074:	2000026d 	.word	0x2000026d
 8003078:	2000054c 	.word	0x2000054c
 800307c:	200003a4 	.word	0x200003a4

08003080 <HAL_ADC_ConvCpltCallback>:

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003080:	b508      	push	{r3, lr}
	adc_flag = 1;
 8003082:	2201      	movs	r2, #1
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <HAL_ADC_ConvCpltCallback+0x10>)
 8003086:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc2);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <HAL_ADC_ConvCpltCallback+0x14>)
 800308a:	f7fd fc01 	bl	8000890 <HAL_ADC_Stop_DMA>
 800308e:	bd08      	pop	{r3, pc}
 8003090:	20000224 	.word	0x20000224
 8003094:	200002bc 	.word	0x200002bc

08003098 <HAL_TIM_IC_CaptureCallback>:
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8003098:	2201      	movs	r2, #1
 800309a:	4b01      	ldr	r3, [pc, #4]	; (80030a0 <HAL_TIM_IC_CaptureCallback+0x8>)
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	4770      	bx	lr
 80030a0:	20000281 	.word	0x20000281

080030a4 <HAL_RTCEx_WakeUpTimerEventCallback>:
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 80030a4:	2201      	movs	r2, #1
 80030a6:	4b01      	ldr	r3, [pc, #4]	; (80030ac <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	4770      	bx	lr
 80030ac:	2000026c 	.word	0x2000026c

080030b0 <init_peripherals>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 80030b0:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 80030b2:	2201      	movs	r2, #1
 80030b4:	2120      	movs	r1, #32
 80030b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ba:	f7fe f899 	bl	80011f0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 80030be:	2201      	movs	r2, #1
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c6:	f7fe f893 	bl	80011f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 80030ca:	2201      	movs	r2, #1
 80030cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d4:	f7fe f88c 	bl	80011f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80030d8:	2201      	movs	r2, #1
 80030da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e2:	f7fe f885 	bl	80011f0 <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80030e6:	4c83      	ldr	r4, [pc, #524]	; (80032f4 <init_peripherals+0x244>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	2108      	movs	r1, #8
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7fe f87f 	bl	80011f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80030f2:	2201      	movs	r2, #1
 80030f4:	2110      	movs	r1, #16
 80030f6:	4620      	mov	r0, r4
 80030f8:	f7fe f87a 	bl	80011f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80030fc:	2201      	movs	r2, #1
 80030fe:	2120      	movs	r1, #32
 8003100:	4620      	mov	r0, r4
 8003102:	f7fe f875 	bl	80011f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 8003106:	2201      	movs	r2, #1
 8003108:	2140      	movs	r1, #64	; 0x40
 800310a:	4620      	mov	r0, r4
 800310c:	f7fe f870 	bl	80011f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003110:	2201      	movs	r2, #1
 8003112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003116:	4620      	mov	r0, r4
 8003118:	f7fe f86a 	bl	80011f0 <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 800311c:	2201      	movs	r2, #1
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	4875      	ldr	r0, [pc, #468]	; (80032f8 <init_peripherals+0x248>)
 8003122:	f7fe f865 	bl	80011f0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 8003126:	2200      	movs	r2, #0
 8003128:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800312c:	4620      	mov	r0, r4
 800312e:	f7fe f85f 	bl	80011f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8003132:	2201      	movs	r2, #1
 8003134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003138:	4620      	mov	r0, r4
 800313a:	f7fe f859 	bl	80011f0 <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 800313e:	200f      	movs	r0, #15
 8003140:	f001 fd82 	bl	8004c48 <malloc>
 8003144:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <init_peripherals+0x24c>)
 8003146:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 8003148:	2400      	movs	r4, #0
 800314a:	6004      	str	r4, [r0, #0]
 800314c:	6044      	str	r4, [r0, #4]
 800314e:	6084      	str	r4, [r0, #8]
 8003150:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8003154:	2032      	movs	r0, #50	; 0x32
 8003156:	f001 fd77 	bl	8004c48 <malloc>
 800315a:	4b69      	ldr	r3, [pc, #420]	; (8003300 <init_peripherals+0x250>)
 800315c:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 800315e:	2232      	movs	r2, #50	; 0x32
 8003160:	4621      	mov	r1, r4
 8003162:	f001 fd84 	bl	8004c6e <memset>

	uart_command = (uint8_t*)malloc(60);
 8003166:	203c      	movs	r0, #60	; 0x3c
 8003168:	f001 fd6e 	bl	8004c48 <malloc>
 800316c:	4e65      	ldr	r6, [pc, #404]	; (8003304 <init_peripherals+0x254>)
 800316e:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 8003170:	253c      	movs	r5, #60	; 0x3c
 8003172:	462a      	mov	r2, r5
 8003174:	4621      	mov	r1, r4
 8003176:	f001 fd7a 	bl	8004c6e <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 800317a:	4628      	mov	r0, r5
 800317c:	f001 fd64 	bl	8004c48 <malloc>
 8003180:	4b61      	ldr	r3, [pc, #388]	; (8003308 <init_peripherals+0x258>)
 8003182:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 8003184:	462a      	mov	r2, r5
 8003186:	4621      	mov	r1, r4
 8003188:	6830      	ldr	r0, [r6, #0]
 800318a:	f001 fd70 	bl	8004c6e <memset>


	set_temp = (uint8_t*)malloc(3);
 800318e:	2003      	movs	r0, #3
 8003190:	f001 fd5a 	bl	8004c48 <malloc>
 8003194:	4b5d      	ldr	r3, [pc, #372]	; (800330c <init_peripherals+0x25c>)
 8003196:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 8003198:	6004      	str	r4, [r0, #0]

	segment_val =set_temp;
 800319a:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <init_peripherals+0x260>)
 800319c:	6018      	str	r0, [r3, #0]
	//	  memset(segment_val, 0x00, 4);

	ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 800319e:	201c      	movs	r0, #28
 80031a0:	f001 fd52 	bl	8004c48 <malloc>
 80031a4:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <init_peripherals+0x264>)
 80031a6:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 7);
 80031a8:	6004      	str	r4, [r0, #0]
 80031aa:	f8c0 4003 	str.w	r4, [r0, #3]

	ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 80031ae:	201c      	movs	r0, #28
 80031b0:	f001 fd4a 	bl	8004c48 <malloc>
 80031b4:	4b58      	ldr	r3, [pc, #352]	; (8003318 <init_peripherals+0x268>)
 80031b6:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 7);
 80031b8:	6004      	str	r4, [r0, #0]
 80031ba:	f8c0 4003 	str.w	r4, [r0, #3]

	voltage_rms =(char*)malloc(3*sizeof(char));
 80031be:	2003      	movs	r0, #3
 80031c0:	f001 fd42 	bl	8004c48 <malloc>
 80031c4:	4b55      	ldr	r3, [pc, #340]	; (800331c <init_peripherals+0x26c>)
 80031c6:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 80031c8:	8004      	strh	r4, [r0, #0]
 80031ca:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 80031cc:	2004      	movs	r0, #4
 80031ce:	f001 fd3b 	bl	8004c48 <malloc>
 80031d2:	4b53      	ldr	r3, [pc, #332]	; (8003320 <init_peripherals+0x270>)
 80031d4:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 80031d6:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 80031d8:	2014      	movs	r0, #20
 80031da:	f001 fd35 	bl	8004c48 <malloc>
 80031de:	4a51      	ldr	r2, [pc, #324]	; (8003324 <init_peripherals+0x274>)
 80031e0:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 80031e2:	6004      	str	r4, [r0, #0]
 80031e4:	6044      	str	r4, [r0, #4]
 80031e6:	6084      	str	r4, [r0, #8]
 80031e8:	60c4      	str	r4, [r0, #12]
 80031ea:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 80031ec:	4b4e      	ldr	r3, [pc, #312]	; (8003328 <init_peripherals+0x278>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	494e      	ldr	r1, [pc, #312]	; (800332c <init_peripherals+0x27c>)
 80031f2:	f001 fe01 	bl	8004df8 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80031f6:	2010      	movs	r0, #16
 80031f8:	f001 fd26 	bl	8004c48 <malloc>
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <init_peripherals+0x280>)
 80031fe:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8003200:	2010      	movs	r0, #16
 8003202:	f001 fd21 	bl	8004c48 <malloc>
 8003206:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <init_peripherals+0x284>)
 8003208:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 800320a:	2004      	movs	r0, #4
 800320c:	f001 fd1c 	bl	8004c48 <malloc>
 8003210:	4b49      	ldr	r3, [pc, #292]	; (8003338 <init_peripherals+0x288>)
 8003212:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 8003214:	2004      	movs	r0, #4
 8003216:	f001 fd17 	bl	8004c48 <malloc>
 800321a:	4b48      	ldr	r3, [pc, #288]	; (800333c <init_peripherals+0x28c>)
 800321c:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 800321e:	4a48      	ldr	r2, [pc, #288]	; (8003340 <init_peripherals+0x290>)
 8003220:	4b48      	ldr	r3, [pc, #288]	; (8003344 <init_peripherals+0x294>)
 8003222:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 8003224:	4a48      	ldr	r2, [pc, #288]	; (8003348 <init_peripherals+0x298>)
 8003226:	4b49      	ldr	r3, [pc, #292]	; (800334c <init_peripherals+0x29c>)
 8003228:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 800322a:	200f      	movs	r0, #15
 800322c:	f001 fd0c 	bl	8004c48 <malloc>
 8003230:	4e47      	ldr	r6, [pc, #284]	; (8003350 <init_peripherals+0x2a0>)
 8003232:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 8003234:	6004      	str	r4, [r0, #0]
 8003236:	6044      	str	r4, [r0, #4]
 8003238:	6084      	str	r4, [r0, #8]
 800323a:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 800323e:	200f      	movs	r0, #15
 8003240:	f001 fd02 	bl	8004c48 <malloc>
 8003244:	4d43      	ldr	r5, [pc, #268]	; (8003354 <init_peripherals+0x2a4>)
 8003246:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 8003248:	6004      	str	r4, [r0, #0]
 800324a:	6044      	str	r4, [r0, #4]
 800324c:	6084      	str	r4, [r0, #8]
 800324e:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8003252:	200f      	movs	r0, #15
 8003254:	f001 fcf8 	bl	8004c48 <malloc>
 8003258:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <init_peripherals+0x2a8>)
 800325a:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 800325c:	6004      	str	r4, [r0, #0]
 800325e:	6044      	str	r4, [r0, #4]
 8003260:	6084      	str	r4, [r0, #8]
 8003262:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 8003266:	4b3d      	ldr	r3, [pc, #244]	; (800335c <init_peripherals+0x2ac>)
 8003268:	6832      	ldr	r2, [r6, #0]
 800326a:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 800326c:	682a      	ldr	r2, [r5, #0]
 800326e:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 8003270:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 8003272:	2014      	movs	r0, #20
 8003274:	f001 fce8 	bl	8004c48 <malloc>
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <init_peripherals+0x2b0>)
 800327a:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 800327c:	6004      	str	r4, [r0, #0]
 800327e:	6044      	str	r4, [r0, #4]
 8003280:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <init_peripherals+0x2b4>)
 8003284:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 8003286:	2018      	movs	r0, #24
 8003288:	f001 fcde 	bl	8004c48 <malloc>
 800328c:	4e36      	ldr	r6, [pc, #216]	; (8003368 <init_peripherals+0x2b8>)
 800328e:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 8003290:	6004      	str	r4, [r0, #0]
 8003292:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 8003294:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 8003296:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 8003298:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800329a:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800329c:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 800329e:	2004      	movs	r0, #4
 80032a0:	f001 fcd2 	bl	8004c48 <malloc>
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <init_peripherals+0x2bc>)
 80032a6:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 80032a8:	2501      	movs	r5, #1
 80032aa:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 80032ac:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 80032ae:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 80032b0:	70c4      	strb	r4, [r0, #3]
//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);


	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 80032b2:	2046      	movs	r0, #70	; 0x46
 80032b4:	f001 fcc8 	bl	8004c48 <malloc>
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <init_peripherals+0x2c0>)
 80032ba:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 80032bc:	2246      	movs	r2, #70	; 0x46
 80032be:	4621      	mov	r1, r4
 80032c0:	f001 fcd5 	bl	8004c6e <memset>


	new_time = malloc(6*sizeof(uint32_t));
 80032c4:	2018      	movs	r0, #24
 80032c6:	f001 fcbf 	bl	8004c48 <malloc>
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <init_peripherals+0x2c4>)
 80032cc:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 80032ce:	6004      	str	r4, [r0, #0]
 80032d0:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 80032d2:	2003      	movs	r0, #3
 80032d4:	f001 fcb8 	bl	8004c48 <malloc>
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <init_peripherals+0x2c8>)
 80032da:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 80032dc:	8004      	strh	r4, [r0, #0]
 80032de:	7084      	strb	r4, [r0, #2]


	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 80032e0:	462a      	mov	r2, r5
 80032e2:	6831      	ldr	r1, [r6, #0]
 80032e4:	4825      	ldr	r0, [pc, #148]	; (800337c <init_peripherals+0x2cc>)
 80032e6:	f7fe fff8 	bl	80022da <HAL_RTC_GetTime>

	HAL_TIM_Base_Start_IT(&htim2);
 80032ea:	4825      	ldr	r0, [pc, #148]	; (8003380 <init_peripherals+0x2d0>)
 80032ec:	f7ff f90b 	bl	8002506 <HAL_TIM_Base_Start_IT>
 80032f0:	bd70      	pop	{r4, r5, r6, pc}
 80032f2:	bf00      	nop
 80032f4:	48000400 	.word	0x48000400
 80032f8:	48000800 	.word	0x48000800
 80032fc:	20000548 	.word	0x20000548
 8003300:	20000268 	.word	0x20000268
 8003304:	20000290 	.word	0x20000290
 8003308:	20000294 	.word	0x20000294
 800330c:	20000274 	.word	0x20000274
 8003310:	20000270 	.word	0x20000270
 8003314:	2000021c 	.word	0x2000021c
 8003318:	20000220 	.word	0x20000220
 800331c:	200002a4 	.word	0x200002a4
 8003320:	20000234 	.word	0x20000234
 8003324:	20000288 	.word	0x20000288
 8003328:	200002a8 	.word	0x200002a8
 800332c:	0800578c 	.word	0x0800578c
 8003330:	200002a0 	.word	0x200002a0
 8003334:	20000230 	.word	0x20000230
 8003338:	20000228 	.word	0x20000228
 800333c:	20000248 	.word	0x20000248
 8003340:	20000014 	.word	0x20000014
 8003344:	20000258 	.word	0x20000258
 8003348:	20000024 	.word	0x20000024
 800334c:	2000029c 	.word	0x2000029c
 8003350:	2000024c 	.word	0x2000024c
 8003354:	20000250 	.word	0x20000250
 8003358:	20000254 	.word	0x20000254
 800335c:	20000554 	.word	0x20000554
 8003360:	2000025c 	.word	0x2000025c
 8003364:	20000550 	.word	0x20000550
 8003368:	20000284 	.word	0x20000284
 800336c:	20000238 	.word	0x20000238
 8003370:	20000244 	.word	0x20000244
 8003374:	20000264 	.word	0x20000264
 8003378:	2000027c 	.word	0x2000027c
 800337c:	20000414 	.word	0x20000414
 8003380:	2000044c 	.word	0x2000044c

08003384 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8003384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003388:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800338a:	4b55      	ldr	r3, [pc, #340]	; (80034e0 <MX_GPIO_Init+0x15c>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003392:	615a      	str	r2, [r3, #20]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800339a:	9201      	str	r2, [sp, #4]
 800339c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80033a4:	615a      	str	r2, [r3, #20]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80033ac:	9202      	str	r2, [sp, #8]
 80033ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033b6:	615a      	str	r2, [r3, #20]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80033be:	9203      	str	r2, [sp, #12]
 80033c0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033c8:	615a      	str	r2, [r3, #20]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d0:	9304      	str	r3, [sp, #16]
 80033d2:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 80033d4:	2201      	movs	r2, #1
 80033d6:	2112      	movs	r1, #18
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033dc:	f7fd ff08 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80033e0:	2200      	movs	r2, #0
 80033e2:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80033e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ea:	f7fd ff01 	bl	80011f0 <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80033ee:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80034f4 <MX_GPIO_Init+0x170>
 80033f2:	2200      	movs	r2, #0
 80033f4:	f246 4178 	movw	r1, #25720	; 0x6478
 80033f8:	4640      	mov	r0, r8
 80033fa:	f7fd fef9 	bl	80011f0 <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80033fe:	4e39      	ldr	r6, [pc, #228]	; (80034e4 <MX_GPIO_Init+0x160>)
 8003400:	2200      	movs	r2, #0
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	4630      	mov	r0, r6
 8003406:	f7fd fef3 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800340a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800340e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <MX_GPIO_Init+0x164>)
 8003412:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2400      	movs	r4, #0
 8003416:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003418:	a905      	add	r1, sp, #20
 800341a:	4630      	mov	r0, r6
 800341c:	f7fd fe1e 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8003420:	2303      	movs	r3, #3
 8003422:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003424:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003428:	a905      	add	r1, sp, #20
 800342a:	4630      	mov	r0, r6
 800342c:	f7fd fe16 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8003430:	2501      	movs	r5, #1
 8003432:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <MX_GPIO_Init+0x168>)
 8003436:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003438:	2702      	movs	r7, #2
 800343a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 800343c:	a905      	add	r1, sp, #20
 800343e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003442:	f7fd fe0b 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 8003446:	2312      	movs	r3, #18
 8003448:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800344a:	2311      	movs	r3, #17
 800344c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800344e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003450:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003452:	a905      	add	r1, sp, #20
 8003454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003458:	f7fd fe00 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 800345c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003460:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003462:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003468:	a905      	add	r1, sp, #20
 800346a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346e:	f7fd fdf5 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003472:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003474:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003478:	a905      	add	r1, sp, #20
 800347a:	4640      	mov	r0, r8
 800347c:	f7fd fdee 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8003480:	f246 4378 	movw	r3, #25720	; 0x6478
 8003484:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348c:	a905      	add	r1, sp, #20
 800348e:	4640      	mov	r0, r8
 8003490:	f7fd fde4 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 8003494:	2340      	movs	r3, #64	; 0x40
 8003496:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <MX_GPIO_Init+0x16c>)
 800349a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800349c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 800349e:	a905      	add	r1, sp, #20
 80034a0:	4630      	mov	r0, r6
 80034a2:	f7fd fddb 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034aa:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 80034b0:	a905      	add	r1, sp, #20
 80034b2:	4630      	mov	r0, r6
 80034b4:	f7fd fdd2 	bl	800105c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80034b8:	4622      	mov	r2, r4
 80034ba:	4621      	mov	r1, r4
 80034bc:	2006      	movs	r0, #6
 80034be:	f7fd fc3f 	bl	8000d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80034c2:	2006      	movs	r0, #6
 80034c4:	f7fd fc6e 	bl	8000da4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 80034c8:	462a      	mov	r2, r5
 80034ca:	4621      	mov	r1, r4
 80034cc:	2017      	movs	r0, #23
 80034ce:	f7fd fc37 	bl	8000d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034d2:	2017      	movs	r0, #23
 80034d4:	f7fd fc66 	bl	8000da4 <HAL_NVIC_EnableIRQ>

}
 80034d8:	b00a      	add	sp, #40	; 0x28
 80034da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	48000800 	.word	0x48000800
 80034e8:	10110000 	.word	0x10110000
 80034ec:	10210000 	.word	0x10210000
 80034f0:	10310000 	.word	0x10310000
 80034f4:	48000400 	.word	0x48000400

080034f8 <MX_DMA_Init>:
{
 80034f8:	b500      	push	{lr}
 80034fa:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <MX_DMA_Init+0x30>)
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	615a      	str	r2, [r3, #20]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8003510:	2201      	movs	r2, #1
 8003512:	2100      	movs	r1, #0
 8003514:	200c      	movs	r0, #12
 8003516:	f7fd fc13 	bl	8000d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800351a:	200c      	movs	r0, #12
 800351c:	f7fd fc42 	bl	8000da4 <HAL_NVIC_EnableIRQ>
}
 8003520:	b003      	add	sp, #12
 8003522:	f85d fb04 	ldr.w	pc, [sp], #4
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000

0800352c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 800352c:	4770      	bx	lr

0800352e <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800352e:	e7fe      	b.n	800352e <_Error_Handler>

08003530 <MX_TIM2_Init>:
{
 8003530:	b500      	push	{lr}
 8003532:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8003534:	4818      	ldr	r0, [pc, #96]	; (8003598 <MX_TIM2_Init+0x68>)
 8003536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800353a:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 800353c:	2301      	movs	r3, #1
 800353e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003540:	2300      	movs	r3, #0
 8003542:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 326400;
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <MX_TIM2_Init+0x6c>)
 8003546:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003548:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800354a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800354c:	f7ff f902 	bl	8002754 <HAL_TIM_Base_Init>
 8003550:	b998      	cbnz	r0, 800357a <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003552:	a908      	add	r1, sp, #32
 8003554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003558:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800355c:	480e      	ldr	r0, [pc, #56]	; (8003598 <MX_TIM2_Init+0x68>)
 800355e:	f7ff f91f 	bl	80027a0 <HAL_TIM_ConfigClockSource>
 8003562:	b978      	cbnz	r0, 8003584 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003564:	2300      	movs	r3, #0
 8003566:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003568:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800356a:	a901      	add	r1, sp, #4
 800356c:	480a      	ldr	r0, [pc, #40]	; (8003598 <MX_TIM2_Init+0x68>)
 800356e:	f7ff f9a3 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003572:	b960      	cbnz	r0, 800358e <MX_TIM2_Init+0x5e>
}
 8003574:	b009      	add	sp, #36	; 0x24
 8003576:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800357a:	f240 11bf 	movw	r1, #447	; 0x1bf
 800357e:	4808      	ldr	r0, [pc, #32]	; (80035a0 <MX_TIM2_Init+0x70>)
 8003580:	f7ff ffd5 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003584:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003588:	4805      	ldr	r0, [pc, #20]	; (80035a0 <MX_TIM2_Init+0x70>)
 800358a:	f7ff ffd0 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800358e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003592:	4803      	ldr	r0, [pc, #12]	; (80035a0 <MX_TIM2_Init+0x70>)
 8003594:	f7ff ffcb 	bl	800352e <_Error_Handler>
 8003598:	2000044c 	.word	0x2000044c
 800359c:	0004fb00 	.word	0x0004fb00
 80035a0:	08005790 	.word	0x08005790

080035a4 <MX_USART1_UART_Init>:
{
 80035a4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80035a6:	480c      	ldr	r0, [pc, #48]	; (80035d8 <MX_USART1_UART_Init+0x34>)
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <MX_USART1_UART_Init+0x38>)
 80035aa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80035ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80035b0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035b2:	2300      	movs	r3, #0
 80035b4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035b6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035b8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035ba:	220c      	movs	r2, #12
 80035bc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035be:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035c2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035c4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035c6:	f7ff fbe2 	bl	8002d8e <HAL_UART_Init>
 80035ca:	b900      	cbnz	r0, 80035ce <MX_USART1_UART_Init+0x2a>
 80035cc:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80035ce:	f240 11e1 	movw	r1, #481	; 0x1e1
 80035d2:	4803      	ldr	r0, [pc, #12]	; (80035e0 <MX_USART1_UART_Init+0x3c>)
 80035d4:	f7ff ffab 	bl	800352e <_Error_Handler>
 80035d8:	200003a4 	.word	0x200003a4
 80035dc:	40013800 	.word	0x40013800
 80035e0:	08005790 	.word	0x08005790

080035e4 <MX_ADC2_Init>:
{
 80035e4:	b500      	push	{lr}
 80035e6:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 80035e8:	482d      	ldr	r0, [pc, #180]	; (80036a0 <MX_ADC2_Init+0xbc>)
 80035ea:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <MX_ADC2_Init+0xc0>)
 80035ec:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80035ee:	2300      	movs	r3, #0
 80035f0:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035f2:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80035f4:	2201      	movs	r2, #1
 80035f6:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80035f8:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035fa:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035fc:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035fe:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003600:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8003602:	2104      	movs	r1, #4
 8003604:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003606:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003608:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800360a:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800360c:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800360e:	f7fc ff99 	bl	8000544 <HAL_ADC_Init>
 8003612:	bb58      	cbnz	r0, 800366c <MX_ADC2_Init+0x88>
  sConfig.Channel = ADC_CHANNEL_12;
 8003614:	230c      	movs	r3, #12
 8003616:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003618:	2301      	movs	r3, #1
 800361a:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800361c:	2300      	movs	r3, #0
 800361e:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003620:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003622:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8003624:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003626:	4669      	mov	r1, sp
 8003628:	481d      	ldr	r0, [pc, #116]	; (80036a0 <MX_ADC2_Init+0xbc>)
 800362a:	f7fd f9b5 	bl	8000998 <HAL_ADC_ConfigChannel>
 800362e:	bb10      	cbnz	r0, 8003676 <MX_ADC2_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_15;
 8003630:	230f      	movs	r3, #15
 8003632:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003634:	2302      	movs	r3, #2
 8003636:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003638:	4669      	mov	r1, sp
 800363a:	4819      	ldr	r0, [pc, #100]	; (80036a0 <MX_ADC2_Init+0xbc>)
 800363c:	f7fd f9ac 	bl	8000998 <HAL_ADC_ConfigChannel>
 8003640:	b9f0      	cbnz	r0, 8003680 <MX_ADC2_Init+0x9c>
  sConfig.Channel = ADC_CHANNEL_12;
 8003642:	230c      	movs	r3, #12
 8003644:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003646:	2303      	movs	r3, #3
 8003648:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800364a:	4669      	mov	r1, sp
 800364c:	4814      	ldr	r0, [pc, #80]	; (80036a0 <MX_ADC2_Init+0xbc>)
 800364e:	f7fd f9a3 	bl	8000998 <HAL_ADC_ConfigChannel>
 8003652:	b9d0      	cbnz	r0, 800368a <MX_ADC2_Init+0xa6>
  sConfig.Channel = ADC_CHANNEL_15;
 8003654:	230f      	movs	r3, #15
 8003656:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003658:	2304      	movs	r3, #4
 800365a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800365c:	4669      	mov	r1, sp
 800365e:	4810      	ldr	r0, [pc, #64]	; (80036a0 <MX_ADC2_Init+0xbc>)
 8003660:	f7fd f99a 	bl	8000998 <HAL_ADC_ConfigChannel>
 8003664:	b9b0      	cbnz	r0, 8003694 <MX_ADC2_Init+0xb0>
}
 8003666:	b007      	add	sp, #28
 8003668:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800366c:	f240 1129 	movw	r1, #297	; 0x129
 8003670:	480d      	ldr	r0, [pc, #52]	; (80036a8 <MX_ADC2_Init+0xc4>)
 8003672:	f7ff ff5c 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003676:	f44f 719b 	mov.w	r1, #310	; 0x136
 800367a:	480b      	ldr	r0, [pc, #44]	; (80036a8 <MX_ADC2_Init+0xc4>)
 800367c:	f7ff ff57 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003680:	f240 113f 	movw	r1, #319	; 0x13f
 8003684:	4808      	ldr	r0, [pc, #32]	; (80036a8 <MX_ADC2_Init+0xc4>)
 8003686:	f7ff ff52 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800368a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800368e:	4806      	ldr	r0, [pc, #24]	; (80036a8 <MX_ADC2_Init+0xc4>)
 8003690:	f7ff ff4d 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003694:	f240 1151 	movw	r1, #337	; 0x151
 8003698:	4803      	ldr	r0, [pc, #12]	; (80036a8 <MX_ADC2_Init+0xc4>)
 800369a:	f7ff ff48 	bl	800352e <_Error_Handler>
 800369e:	bf00      	nop
 80036a0:	200002bc 	.word	0x200002bc
 80036a4:	50000100 	.word	0x50000100
 80036a8:	08005790 	.word	0x08005790

080036ac <MX_RTC_Init>:
{
 80036ac:	b500      	push	{lr}
 80036ae:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 80036b0:	482c      	ldr	r0, [pc, #176]	; (8003764 <MX_RTC_Init+0xb8>)
 80036b2:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <MX_RTC_Init+0xbc>)
 80036b4:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80036b6:	2100      	movs	r1, #0
 80036b8:	f7fe fef1 	bl	800249e <HAL_RTCEx_BKUPRead>
 80036bc:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80036c0:	4298      	cmp	r0, r3
 80036c2:	d037      	beq.n	8003734 <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036c4:	4827      	ldr	r0, [pc, #156]	; (8003764 <MX_RTC_Init+0xb8>)
 80036c6:	2300      	movs	r3, #0
 80036c8:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036ca:	227f      	movs	r2, #127	; 0x7f
 80036cc:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80036ce:	22ff      	movs	r2, #255	; 0xff
 80036d0:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036d2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036d4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036d6:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036d8:	f7fe fc9d 	bl	8002016 <HAL_RTC_Init>
 80036dc:	bb68      	cbnz	r0, 800373a <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 80036de:	2300      	movs	r3, #0
 80036e0:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 80036e4:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 80036e8:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036ec:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036ee:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036f0:	2201      	movs	r2, #1
 80036f2:	a901      	add	r1, sp, #4
 80036f4:	481b      	ldr	r0, [pc, #108]	; (8003764 <MX_RTC_Init+0xb8>)
 80036f6:	f7fe fcfb 	bl	80020f0 <HAL_RTC_SetTime>
 80036fa:	bb18      	cbnz	r0, 8003744 <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036fc:	2201      	movs	r2, #1
 80036fe:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8003702:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8003706:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800370a:	2300      	movs	r3, #0
 800370c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003710:	4669      	mov	r1, sp
 8003712:	4814      	ldr	r0, [pc, #80]	; (8003764 <MX_RTC_Init+0xb8>)
 8003714:	f7fe fd6b 	bl	80021ee <HAL_RTC_SetDate>
 8003718:	b9c8      	cbnz	r0, 800374e <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800371a:	2200      	movs	r2, #0
 800371c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003720:	4810      	ldr	r0, [pc, #64]	; (8003764 <MX_RTC_Init+0xb8>)
 8003722:	f7fe fe27 	bl	8002374 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003726:	b9b8      	cbnz	r0, 8003758 <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8003728:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800372c:	2100      	movs	r1, #0
 800372e:	480d      	ldr	r0, [pc, #52]	; (8003764 <MX_RTC_Init+0xb8>)
 8003730:	f7fe feb0 	bl	8002494 <HAL_RTCEx_BKUPWrite>
}
 8003734:	b007      	add	sp, #28
 8003736:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800373a:	f240 118b 	movw	r1, #395	; 0x18b
 800373e:	480b      	ldr	r0, [pc, #44]	; (800376c <MX_RTC_Init+0xc0>)
 8003740:	f7ff fef5 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003744:	f240 1197 	movw	r1, #407	; 0x197
 8003748:	4808      	ldr	r0, [pc, #32]	; (800376c <MX_RTC_Init+0xc0>)
 800374a:	f7ff fef0 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800374e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003752:	4806      	ldr	r0, [pc, #24]	; (800376c <MX_RTC_Init+0xc0>)
 8003754:	f7ff feeb 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003758:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800375c:	4803      	ldr	r0, [pc, #12]	; (800376c <MX_RTC_Init+0xc0>)
 800375e:	f7ff fee6 	bl	800352e <_Error_Handler>
 8003762:	bf00      	nop
 8003764:	20000414 	.word	0x20000414
 8003768:	40002800 	.word	0x40002800
 800376c:	08005790 	.word	0x08005790

08003770 <MX_I2C1_Init>:
{
 8003770:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003772:	4815      	ldr	r0, [pc, #84]	; (80037c8 <MX_I2C1_Init+0x58>)
 8003774:	4b15      	ldr	r3, [pc, #84]	; (80037cc <MX_I2C1_Init+0x5c>)
 8003776:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003778:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <MX_I2C1_Init+0x60>)
 800377a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003780:	2201      	movs	r2, #1
 8003782:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003784:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003786:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003788:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800378a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800378c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800378e:	f7fd fd67 	bl	8001260 <HAL_I2C_Init>
 8003792:	b950      	cbnz	r0, 80037aa <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003794:	2100      	movs	r1, #0
 8003796:	480c      	ldr	r0, [pc, #48]	; (80037c8 <MX_I2C1_Init+0x58>)
 8003798:	f7fd fe74 	bl	8001484 <HAL_I2CEx_ConfigAnalogFilter>
 800379c:	b950      	cbnz	r0, 80037b4 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800379e:	2100      	movs	r1, #0
 80037a0:	4809      	ldr	r0, [pc, #36]	; (80037c8 <MX_I2C1_Init+0x58>)
 80037a2:	f7fd fe9d 	bl	80014e0 <HAL_I2CEx_ConfigDigitalFilter>
 80037a6:	b950      	cbnz	r0, 80037be <MX_I2C1_Init+0x4e>
 80037a8:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80037aa:	f240 1165 	movw	r1, #357	; 0x165
 80037ae:	4809      	ldr	r0, [pc, #36]	; (80037d4 <MX_I2C1_Init+0x64>)
 80037b0:	f7ff febd 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80037b4:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80037b8:	4806      	ldr	r0, [pc, #24]	; (80037d4 <MX_I2C1_Init+0x64>)
 80037ba:	f7ff feb8 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80037be:	f240 1173 	movw	r1, #371	; 0x173
 80037c2:	4804      	ldr	r0, [pc, #16]	; (80037d4 <MX_I2C1_Init+0x64>)
 80037c4:	f7ff feb3 	bl	800352e <_Error_Handler>
 80037c8:	20000310 	.word	0x20000310
 80037cc:	40005400 	.word	0x40005400
 80037d0:	2000090e 	.word	0x2000090e
 80037d4:	08005790 	.word	0x08005790

080037d8 <SystemClock_Config>:
{
 80037d8:	b500      	push	{lr}
 80037da:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 80037dc:	f7fd feac 	bl	8001538 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037e0:	4a2a      	ldr	r2, [pc, #168]	; (800388c <SystemClock_Config+0xb4>)
 80037e2:	6a13      	ldr	r3, [r2, #32]
 80037e4:	f023 0318 	bic.w	r3, r3, #24
 80037e8:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80037ea:	2306      	movs	r3, #6
 80037ec:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037ee:	2301      	movs	r3, #1
 80037f0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037f2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80037f4:	2310      	movs	r3, #16
 80037f6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f8:	2302      	movs	r3, #2
 80037fa:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037fc:	2300      	movs	r3, #0
 80037fe:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003800:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003804:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003806:	a80c      	add	r0, sp, #48	; 0x30
 8003808:	f7fd fe9e 	bl	8001548 <HAL_RCC_OscConfig>
 800380c:	bb80      	cbnz	r0, 8003870 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800380e:	230f      	movs	r3, #15
 8003810:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003812:	2102      	movs	r1, #2
 8003814:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003816:	2300      	movs	r3, #0
 8003818:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800381a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800381e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003820:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003822:	a807      	add	r0, sp, #28
 8003824:	f7fe f9ce 	bl	8001bc4 <HAL_RCC_ClockConfig>
 8003828:	bb30      	cbnz	r0, 8003878 <SystemClock_Config+0xa0>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <SystemClock_Config+0xb8>)
 800382c:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800382e:	2300      	movs	r3, #0
 8003830:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 8003832:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003836:	9204      	str	r2, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003838:	9303      	str	r3, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800383a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800383e:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003840:	4668      	mov	r0, sp
 8003842:	f7fe fadb 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 8003846:	b9d8      	cbnz	r0, 8003880 <SystemClock_Config+0xa8>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003848:	f7fe faa6 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <SystemClock_Config+0xbc>)
 800384e:	fba3 3000 	umull	r3, r0, r3, r0
 8003852:	0980      	lsrs	r0, r0, #6
 8003854:	f7fd fab2 	bl	8000dbc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003858:	2004      	movs	r0, #4
 800385a:	f7fd fac5 	bl	8000de8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 800385e:	2202      	movs	r2, #2
 8003860:	2100      	movs	r1, #0
 8003862:	f04f 30ff 	mov.w	r0, #4294967295
 8003866:	f7fd fa6b 	bl	8000d40 <HAL_NVIC_SetPriority>
}
 800386a:	b017      	add	sp, #92	; 0x5c
 800386c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003870:	21e9      	movs	r1, #233	; 0xe9
 8003872:	4809      	ldr	r0, [pc, #36]	; (8003898 <SystemClock_Config+0xc0>)
 8003874:	f7ff fe5b 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003878:	21f7      	movs	r1, #247	; 0xf7
 800387a:	4807      	ldr	r0, [pc, #28]	; (8003898 <SystemClock_Config+0xc0>)
 800387c:	f7ff fe57 	bl	800352e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003880:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <SystemClock_Config+0xc0>)
 8003886:	f7ff fe52 	bl	800352e <_Error_Handler>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	000100a1 	.word	0x000100a1
 8003894:	10624dd3 	.word	0x10624dd3
 8003898:	08005790 	.word	0x08005790

0800389c <main>:
{
 800389c:	b510      	push	{r4, lr}
  HAL_Init();
 800389e:	f7fc fd05 	bl	80002ac <HAL_Init>
  SystemClock_Config();
 80038a2:	f7ff ff99 	bl	80037d8 <SystemClock_Config>
  MX_GPIO_Init();
 80038a6:	f7ff fd6d 	bl	8003384 <MX_GPIO_Init>
  MX_DMA_Init();
 80038aa:	f7ff fe25 	bl	80034f8 <MX_DMA_Init>
  MX_TIM2_Init();
 80038ae:	f7ff fe3f 	bl	8003530 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80038b2:	f7ff fe77 	bl	80035a4 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80038b6:	f7ff fe95 	bl	80035e4 <MX_ADC2_Init>
  MX_RTC_Init();
 80038ba:	f7ff fef7 	bl	80036ac <MX_RTC_Init>
  MX_I2C1_Init();
 80038be:	f7ff ff57 	bl	8003770 <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80038c2:	4c28      	ldr	r4, [pc, #160]	; (8003964 <main+0xc8>)
 80038c4:	2100      	movs	r1, #0
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7fd f81e 	bl	8000908 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 80038cc:	f7ff fbf0 	bl	80030b0 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80038d0:	2201      	movs	r2, #1
 80038d2:	4925      	ldr	r1, [pc, #148]	; (8003968 <main+0xcc>)
 80038d4:	4825      	ldr	r0, [pc, #148]	; (800396c <main+0xd0>)
 80038d6:	f7ff f84e 	bl	8002976 <HAL_UART_Receive_IT>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,2048,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80038da:	2200      	movs	r2, #0
 80038dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038e0:	4823      	ldr	r0, [pc, #140]	; (8003970 <main+0xd4>)
 80038e2:	f7fe fd47 	bl	8002374 <HAL_RTCEx_SetWakeUpTimer_IT>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038e6:	2200      	movs	r2, #0
 80038e8:	4611      	mov	r1, r2
 80038ea:	2025      	movs	r0, #37	; 0x25
 80038ec:	f7fd fa28 	bl	8000d40 <HAL_NVIC_SetPriority>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 80038f0:	2207      	movs	r2, #7
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <main+0xd8>)
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7fc ff32 	bl	8000760 <HAL_ADC_Start_DMA>
 result = HAL_I2C_IsDeviceReady(&hi2c1, 0x44,0,1);
 80038fc:	4c1e      	ldr	r4, [pc, #120]	; (8003978 <main+0xdc>)
 80038fe:	2301      	movs	r3, #1
 8003900:	2200      	movs	r2, #0
 8003902:	2144      	movs	r1, #68	; 0x44
 8003904:	4620      	mov	r0, r4
 8003906:	f7fd fd09 	bl	800131c <HAL_I2C_IsDeviceReady>
 result = HAL_I2C_IsDeviceReady(&hi2c1, 0x45,0,1);
 800390a:	2301      	movs	r3, #1
 800390c:	2200      	movs	r2, #0
 800390e:	2145      	movs	r1, #69	; 0x45
 8003910:	4620      	mov	r0, r4
 8003912:	f7fd fd03 	bl	800131c <HAL_I2C_IsDeviceReady>
 8003916:	e011      	b.n	800393c <main+0xa0>
		  rx_flag = 0;
 8003918:	2200      	movs	r2, #0
 800391a:	4b18      	ldr	r3, [pc, #96]	; (800397c <main+0xe0>)
 800391c:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 800391e:	f000 fc95 	bl	800424c <uart_comms>
 8003922:	e00f      	b.n	8003944 <main+0xa8>
		  systick_flag = 0;
 8003924:	2200      	movs	r2, #0
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <main+0xe4>)
 8003928:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 800392a:	f000 f82f 	bl	800398c <seven_segment>
 800392e:	e00d      	b.n	800394c <main+0xb0>
	  if(flash_counter == 10000){
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <main+0xe8>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	f242 7310 	movw	r3, #10000	; 0x2710
 8003938:	429a      	cmp	r2, r3
 800393a:	d00f      	beq.n	800395c <main+0xc0>
	  if(rx_flag == 1 ){ 	// UART Comms
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <main+0xe0>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d0e9      	beq.n	8003918 <main+0x7c>
	  if(systick_flag == 1){	// Seven Segment
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <main+0xe4>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d0eb      	beq.n	8003924 <main+0x88>
	  if(touch_flag == 1 ){
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <main+0xec>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d1ed      	bne.n	8003930 <main+0x94>
		  touch_flag = 0;
 8003954:	2200      	movs	r2, #0
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <main+0xec>)
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e7e9      	b.n	8003930 <main+0x94>
		  flash_counter = 0;
 800395c:	2200      	movs	r2, #0
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <main+0xe8>)
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e7eb      	b.n	800393c <main+0xa0>
 8003964:	200002bc 	.word	0x200002bc
 8003968:	2000054c 	.word	0x2000054c
 800396c:	200003a4 	.word	0x200003a4
 8003970:	20000414 	.word	0x20000414
 8003974:	2000021c 	.word	0x2000021c
 8003978:	20000310 	.word	0x20000310
 800397c:	2000026d 	.word	0x2000026d
 8003980:	20000279 	.word	0x20000279
 8003984:	20000240 	.word	0x20000240
 8003988:	2000028c 	.word	0x2000028c

0800398c <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 800398c:	b510      	push	{r4, lr}

	if(segment_counter == 0){	// Left Most Digit
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <seven_segment+0x12c>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b133      	cbz	r3, 80039a2 <seven_segment+0x16>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8003994:	2b01      	cmp	r3, #1
 8003996:	d027      	beq.n	80039e8 <seven_segment+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8003998:	2b02      	cmp	r3, #2
 800399a:	d048      	beq.n	8003a2e <seven_segment+0xa2>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 800399c:	2b03      	cmp	r3, #3
 800399e:	d069      	beq.n	8003a74 <seven_segment+0xe8>
 80039a0:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 80039a2:	4c46      	ldr	r4, [pc, #280]	; (8003abc <seven_segment+0x130>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7fd fc20 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80039b0:	2201      	movs	r2, #1
 80039b2:	2110      	movs	r1, #16
 80039b4:	4620      	mov	r0, r4
 80039b6:	f7fd fc1b 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80039ba:	2201      	movs	r2, #1
 80039bc:	2120      	movs	r1, #32
 80039be:	4620      	mov	r0, r4
 80039c0:	f7fd fc16 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80039c4:	2201      	movs	r2, #1
 80039c6:	2108      	movs	r1, #8
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7fd fc11 	bl	80011f0 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 80039ce:	4c3a      	ldr	r4, [pc, #232]	; (8003ab8 <seven_segment+0x12c>)
 80039d0:	7823      	ldrb	r3, [r4, #0]
 80039d2:	4a3b      	ldr	r2, [pc, #236]	; (8003ac0 <seven_segment+0x134>)
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	5cd0      	ldrb	r0, [r2, r3]
 80039d8:	3830      	subs	r0, #48	; 0x30
 80039da:	b2c0      	uxtb	r0, r0
 80039dc:	f000 f872 	bl	8003ac4 <seven_segment_display>
		segment_counter += 1;
 80039e0:	7823      	ldrb	r3, [r4, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	7023      	strb	r3, [r4, #0]
 80039e6:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80039e8:	4c34      	ldr	r4, [pc, #208]	; (8003abc <seven_segment+0x130>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7fd fbfd 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 80039f6:	2200      	movs	r2, #0
 80039f8:	2110      	movs	r1, #16
 80039fa:	4620      	mov	r0, r4
 80039fc:	f7fd fbf8 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003a00:	2201      	movs	r2, #1
 8003a02:	2120      	movs	r1, #32
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7fd fbf3 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7fd fbee 	bl	80011f0 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003a14:	4c28      	ldr	r4, [pc, #160]	; (8003ab8 <seven_segment+0x12c>)
 8003a16:	7823      	ldrb	r3, [r4, #0]
 8003a18:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <seven_segment+0x134>)
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	5cd0      	ldrb	r0, [r2, r3]
 8003a1e:	3830      	subs	r0, #48	; 0x30
 8003a20:	b2c0      	uxtb	r0, r0
 8003a22:	f000 f84f 	bl	8003ac4 <seven_segment_display>
		segment_counter += 1;
 8003a26:	7823      	ldrb	r3, [r4, #0]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	7023      	strb	r3, [r4, #0]
 8003a2c:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003a2e:	4c23      	ldr	r4, [pc, #140]	; (8003abc <seven_segment+0x130>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7fd fbda 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	2110      	movs	r1, #16
 8003a40:	4620      	mov	r0, r4
 8003a42:	f7fd fbd5 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8003a46:	2200      	movs	r2, #0
 8003a48:	2120      	movs	r1, #32
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f7fd fbd0 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003a50:	2201      	movs	r2, #1
 8003a52:	2108      	movs	r1, #8
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7fd fbcb 	bl	80011f0 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003a5a:	4c17      	ldr	r4, [pc, #92]	; (8003ab8 <seven_segment+0x12c>)
 8003a5c:	7823      	ldrb	r3, [r4, #0]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <seven_segment+0x134>)
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	5cd0      	ldrb	r0, [r2, r3]
 8003a64:	3830      	subs	r0, #48	; 0x30
 8003a66:	b2c0      	uxtb	r0, r0
 8003a68:	f000 f82c 	bl	8003ac4 <seven_segment_display>
		segment_counter += 1;
 8003a6c:	7823      	ldrb	r3, [r4, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	7023      	strb	r3, [r4, #0]
 8003a72:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003a74:	4c11      	ldr	r4, [pc, #68]	; (8003abc <seven_segment+0x130>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f7fd fbb7 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003a82:	2201      	movs	r2, #1
 8003a84:	2110      	movs	r1, #16
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7fd fbb2 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	2120      	movs	r1, #32
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7fd fbad 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8003a96:	2200      	movs	r2, #0
 8003a98:	2108      	movs	r1, #8
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f7fd fba8 	bl	80011f0 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003aa0:	4c05      	ldr	r4, [pc, #20]	; (8003ab8 <seven_segment+0x12c>)
 8003aa2:	7823      	ldrb	r3, [r4, #0]
 8003aa4:	4a06      	ldr	r2, [pc, #24]	; (8003ac0 <seven_segment+0x134>)
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	5cd0      	ldrb	r0, [r2, r3]
 8003aaa:	3830      	subs	r0, #48	; 0x30
 8003aac:	b2c0      	uxtb	r0, r0
 8003aae:	f000 f809 	bl	8003ac4 <seven_segment_display>
		segment_counter = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	7023      	strb	r3, [r4, #0]
	}
}
 8003ab6:	e773      	b.n	80039a0 <seven_segment+0x14>
 8003ab8:	2000026e 	.word	0x2000026e
 8003abc:	48000400 	.word	0x48000400
 8003ac0:	20000270 	.word	0x20000270

08003ac4 <seven_segment_display>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8003ac4:	b510      	push	{r4, lr}
	switch(num){
 8003ac6:	2809      	cmp	r0, #9
 8003ac8:	f200 81d2 	bhi.w	8003e70 <seven_segment_display+0x3ac>
 8003acc:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003ad0:	000a019f 	.word	0x000a019f
 8003ad4:	00600035 	.word	0x00600035
 8003ad8:	00bc008b 	.word	0x00bc008b
 8003adc:	011200e7 	.word	0x011200e7
 8003ae0:	016e013d 	.word	0x016e013d
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2140      	movs	r1, #64	; 0x40
 8003ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aec:	f7fd fb80 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af8:	f7fd fb7a 	bl	80011f0 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8003afc:	2201      	movs	r2, #1
 8003afe:	2120      	movs	r1, #32
 8003b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b04:	f7fd fb74 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b12:	f7fd fb6d 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8003b16:	2201      	movs	r2, #1
 8003b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b20:	f7fd fb66 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8003b24:	2201      	movs	r2, #1
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	48ea      	ldr	r0, [pc, #936]	; (8003ed4 <seven_segment_display+0x410>)
 8003b2a:	f7fd fb61 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	48e9      	ldr	r0, [pc, #932]	; (8003ed8 <seven_segment_display+0x414>)
 8003b34:	f7fd fb5c 	bl	80011f0 <HAL_GPIO_WritePin>
		break;
 8003b38:	bd10      	pop	{r4, pc}
	case 2:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2120      	movs	r1, #32
 8003b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b42:	f7fd fb55 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003b46:	2200      	movs	r2, #0
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4e:	f7fd fb4f 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003b52:	2200      	movs	r2, #0
 8003b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b5c:	f7fd fb48 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003b60:	2200      	movs	r2, #0
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	48dc      	ldr	r0, [pc, #880]	; (8003ed8 <seven_segment_display+0x414>)
 8003b66:	f7fd fb43 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2140      	movs	r1, #64	; 0x40
 8003b6e:	48d9      	ldr	r0, [pc, #868]	; (8003ed4 <seven_segment_display+0x410>)
 8003b70:	f7fd fb3e 	bl	80011f0 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003b74:	2201      	movs	r2, #1
 8003b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7e:	f7fd fb37 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003b82:	2201      	movs	r2, #1
 8003b84:	2180      	movs	r1, #128	; 0x80
 8003b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8a:	f7fd fb31 	bl	80011f0 <HAL_GPIO_WritePin>
		break;
 8003b8e:	bd10      	pop	{r4, pc}

	case 3:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003b90:	2200      	movs	r2, #0
 8003b92:	2120      	movs	r1, #32
 8003b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b98:	f7fd fb2a 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2140      	movs	r1, #64	; 0x40
 8003ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba4:	f7fd fb24 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb2:	f7fd fb1d 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2180      	movs	r1, #128	; 0x80
 8003bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bbe:	f7fd fb17 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	48c3      	ldr	r0, [pc, #780]	; (8003ed4 <seven_segment_display+0x410>)
 8003bc8:	f7fd fb12 	bl	80011f0 <HAL_GPIO_WritePin>

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd6:	f7fd fb0b 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	48be      	ldr	r0, [pc, #760]	; (8003ed8 <seven_segment_display+0x414>)
 8003be0:	f7fd fb06 	bl	80011f0 <HAL_GPIO_WritePin>

		break;
 8003be4:	bd10      	pop	{r4, pc}
	case 4:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bee:	f7fd faff 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfc:	f7fd faf8 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003c00:	2200      	movs	r2, #0
 8003c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c0a:	f7fd faf1 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c16:	f7fd faeb 	bl	80011f0 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	2120      	movs	r1, #32
 8003c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c22:	f7fd fae5 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003c26:	2201      	movs	r2, #1
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	48ab      	ldr	r0, [pc, #684]	; (8003ed8 <seven_segment_display+0x414>)
 8003c2c:	f7fd fae0 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003c30:	2201      	movs	r2, #1
 8003c32:	2120      	movs	r1, #32
 8003c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c38:	f7fd fada 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2140      	movs	r1, #64	; 0x40
 8003c40:	48a4      	ldr	r0, [pc, #656]	; (8003ed4 <seven_segment_display+0x410>)
 8003c42:	f7fd fad5 	bl	80011f0 <HAL_GPIO_WritePin>

		break;
 8003c46:	bd10      	pop	{r4, pc}
	case 5:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2120      	movs	r1, #32
 8003c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c50:	f7fd face 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c5e:	f7fd fac7 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003c62:	2200      	movs	r2, #0
 8003c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6c:	f7fd fac0 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003c70:	2200      	movs	r2, #0
 8003c72:	2180      	movs	r1, #128	; 0x80
 8003c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c78:	f7fd faba 	bl	80011f0 <HAL_GPIO_WritePin>

		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	2140      	movs	r1, #64	; 0x40
 8003c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c84:	f7fd fab4 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	4892      	ldr	r0, [pc, #584]	; (8003ed8 <seven_segment_display+0x414>)
 8003c8e:	f7fd faaf 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8003c92:	2200      	movs	r2, #0
 8003c94:	2140      	movs	r1, #64	; 0x40
 8003c96:	488f      	ldr	r0, [pc, #572]	; (8003ed4 <seven_segment_display+0x410>)
 8003c98:	f7fd faaa 	bl	80011f0 <HAL_GPIO_WritePin>
		break;
 8003c9c:	bd10      	pop	{r4, pc}

	case 6:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca6:	f7fd faa3 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003caa:	2200      	movs	r2, #0
 8003cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cb4:	f7fd fa9c 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cc2:	f7fd fa95 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cce:	f7fd fa8f 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2140      	movs	r1, #64	; 0x40
 8003cd6:	487f      	ldr	r0, [pc, #508]	; (8003ed4 <seven_segment_display+0x410>)
 8003cd8:	f7fd fa8a 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	487d      	ldr	r0, [pc, #500]	; (8003ed8 <seven_segment_display+0x414>)
 8003ce2:	f7fd fa85 	bl	80011f0 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	2140      	movs	r1, #64	; 0x40
 8003cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cee:	f7fd fa7f 	bl	80011f0 <HAL_GPIO_WritePin>
		break;
 8003cf2:	bd10      	pop	{r4, pc}
	case 7:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2120      	movs	r1, #32
 8003cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cfc:	f7fd fa78 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003d00:	2200      	movs	r2, #0
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d08:	f7fd fa72 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d14:	f7fd fa6c 	bl	80011f0 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	486e      	ldr	r0, [pc, #440]	; (8003ed8 <seven_segment_display+0x414>)
 8003d1e:	f7fd fa67 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003d22:	2201      	movs	r2, #1
 8003d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d2c:	f7fd fa60 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003d30:	2201      	movs	r2, #1
 8003d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d3a:	f7fd fa59 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	4864      	ldr	r0, [pc, #400]	; (8003ed4 <seven_segment_display+0x410>)
 8003d44:	f7fd fa54 	bl	80011f0 <HAL_GPIO_WritePin>

		break;
 8003d48:	bd10      	pop	{r4, pc}
	case 8:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2140      	movs	r1, #64	; 0x40
 8003d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d52:	f7fd fa4d 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003d56:	2200      	movs	r2, #0
 8003d58:	2120      	movs	r1, #32
 8003d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5e:	f7fd fa47 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003d62:	4c5c      	ldr	r4, [pc, #368]	; (8003ed4 <seven_segment_display+0x410>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	2140      	movs	r1, #64	; 0x40
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7fd fa41 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d76:	f7fd fa3b 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2140      	movs	r1, #64	; 0x40
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f7fd fa36 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003d84:	2200      	movs	r2, #0
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	4853      	ldr	r0, [pc, #332]	; (8003ed8 <seven_segment_display+0x414>)
 8003d8a:	f7fd fa31 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d98:	f7fd fa2a 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da6:	f7fd fa23 	bl	80011f0 <HAL_GPIO_WritePin>
		break;
 8003daa:	bd10      	pop	{r4, pc}
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003dac:	2200      	movs	r2, #0
 8003dae:	2120      	movs	r1, #32
 8003db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003db4:	f7fd fa1c 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003db8:	4c46      	ldr	r4, [pc, #280]	; (8003ed4 <seven_segment_display+0x410>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2140      	movs	r1, #64	; 0x40
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f7fd fa16 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dcc:	f7fd fa10 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dda:	f7fd fa09 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003dde:	2200      	movs	r2, #0
 8003de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de8:	f7fd fa02 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003dec:	2200      	movs	r2, #0
 8003dee:	2140      	movs	r1, #64	; 0x40
 8003df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003df4:	f7fd f9fc 	bl	80011f0 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003df8:	2201      	movs	r2, #1
 8003dfa:	2180      	movs	r1, #128	; 0x80
 8003dfc:	4836      	ldr	r0, [pc, #216]	; (8003ed8 <seven_segment_display+0x414>)
 8003dfe:	f7fd f9f7 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003e02:	2201      	movs	r2, #1
 8003e04:	2140      	movs	r1, #64	; 0x40
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7fd f9f2 	bl	80011f0 <HAL_GPIO_WritePin>
		break;
 8003e0c:	bd10      	pop	{r4, pc}
	case 0:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e16:	f7fd f9eb 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e22:	f7fd f9e5 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003e26:	4c2b      	ldr	r4, [pc, #172]	; (8003ed4 <seven_segment_display+0x410>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2140      	movs	r1, #64	; 0x40
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7fd f9df 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003e32:	2200      	movs	r2, #0
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e3a:	f7fd f9d9 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	4620      	mov	r0, r4
 8003e44:	f7fd f9d4 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	4822      	ldr	r0, [pc, #136]	; (8003ed8 <seven_segment_display+0x414>)
 8003e4e:	f7fd f9cf 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003e52:	2200      	movs	r2, #0
 8003e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e5c:	f7fd f9c8 	bl	80011f0 <HAL_GPIO_WritePin>
		//OFF

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003e60:	2201      	movs	r2, #1
 8003e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e6a:	f7fd f9c1 	bl	80011f0 <HAL_GPIO_WritePin>
		break;
 8003e6e:	bd10      	pop	{r4, pc}
	default:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003e70:	2201      	movs	r2, #1
 8003e72:	2120      	movs	r1, #32
 8003e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e78:	f7fd f9ba 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 8003e7c:	4c15      	ldr	r4, [pc, #84]	; (8003ed4 <seven_segment_display+0x410>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	4620      	mov	r0, r4
 8003e84:	f7fd f9b4 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e90:	f7fd f9ae 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003e94:	2201      	movs	r2, #1
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7fd f9a9 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <seven_segment_display+0x414>)
 8003ea4:	f7fd f9a4 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb2:	f7fd f99d 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec0:	f7fd f996 	bl	80011f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	2140      	movs	r1, #64	; 0x40
 8003ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ecc:	f7fd f990 	bl	80011f0 <HAL_GPIO_WritePin>
 8003ed0:	bd10      	pop	{r4, pc}
 8003ed2:	bf00      	nop
 8003ed4:	48000400 	.word	0x48000400
 8003ed8:	48000800 	.word	0x48000800

08003edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003edc:	b500      	push	{lr}
 8003ede:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <HAL_MspInit+0x78>)
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	619a      	str	r2, [r3, #24]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ef4:	2007      	movs	r0, #7
 8003ef6:	f7fc ff11 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 8003efa:	2202      	movs	r2, #2
 8003efc:	2100      	movs	r1, #0
 8003efe:	f06f 000b 	mvn.w	r0, #11
 8003f02:	f7fc ff1d 	bl	8000d40 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 8003f06:	2202      	movs	r2, #2
 8003f08:	2100      	movs	r1, #0
 8003f0a:	f06f 000a 	mvn.w	r0, #10
 8003f0e:	f7fc ff17 	bl	8000d40 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 8003f12:	2202      	movs	r2, #2
 8003f14:	2100      	movs	r1, #0
 8003f16:	f06f 0009 	mvn.w	r0, #9
 8003f1a:	f7fc ff11 	bl	8000d40 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 8003f1e:	2202      	movs	r2, #2
 8003f20:	2100      	movs	r1, #0
 8003f22:	f06f 0004 	mvn.w	r0, #4
 8003f26:	f7fc ff0b 	bl	8000d40 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	f06f 0003 	mvn.w	r0, #3
 8003f32:	f7fc ff05 	bl	8000d40 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 8003f36:	2202      	movs	r2, #2
 8003f38:	2100      	movs	r1, #0
 8003f3a:	f06f 0001 	mvn.w	r0, #1
 8003f3e:	f7fc feff 	bl	8000d40 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8003f42:	2202      	movs	r2, #2
 8003f44:	2100      	movs	r1, #0
 8003f46:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4a:	f7fc fef9 	bl	8000d40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f4e:	b003      	add	sp, #12
 8003f50:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f54:	40021000 	.word	0x40021000

08003f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8003f58:	6802      	ldr	r2, [r0, #0]
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_ADC_MspInit+0x84>)
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d000      	beq.n	8003f62 <HAL_ADC_MspInit+0xa>
 8003f60:	4770      	bx	lr
{
 8003f62:	b570      	push	{r4, r5, r6, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003f68:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <HAL_ADC_MspInit+0x88>)
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f70:	615a      	str	r2, [r3, #20]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC2_IN8
    PC3     ------> ADC2_IN9
    PB2     ------> ADC2_IN12
    PB15     ------> ADC2_IN15 
    */
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 8003f7c:	230c      	movs	r3, #12
 8003f7e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f80:	2603      	movs	r6, #3
 8003f82:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2500      	movs	r5, #0
 8003f86:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f88:	a901      	add	r1, sp, #4
 8003f8a:	4816      	ldr	r0, [pc, #88]	; (8003fe4 <HAL_ADC_MspInit+0x8c>)
 8003f8c:	f7fd f866 	bl	800105c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 8003f90:	f248 0304 	movw	r3, #32772	; 0x8004
 8003f94:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f96:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9a:	a901      	add	r1, sp, #4
 8003f9c:	4812      	ldr	r0, [pc, #72]	; (8003fe8 <HAL_ADC_MspInit+0x90>)
 8003f9e:	f7fd f85d 	bl	800105c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8003fa2:	4812      	ldr	r0, [pc, #72]	; (8003fec <HAL_ADC_MspInit+0x94>)
 8003fa4:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_ADC_MspInit+0x98>)
 8003fa6:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fa8:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003faa:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb4:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fba:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003fc0:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003fc2:	f7fc ff4f 	bl	8000e64 <HAL_DMA_Init>
 8003fc6:	b920      	cbnz	r0, 8003fd2 <HAL_ADC_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003fc8:	4b08      	ldr	r3, [pc, #32]	; (8003fec <HAL_ADC_MspInit+0x94>)
 8003fca:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003fcc:	625c      	str	r4, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003fce:	b006      	add	sp, #24
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
      _Error_Handler(__FILE__, __LINE__);
 8003fd2:	217a      	movs	r1, #122	; 0x7a
 8003fd4:	4807      	ldr	r0, [pc, #28]	; (8003ff4 <HAL_ADC_MspInit+0x9c>)
 8003fd6:	f7ff faaa 	bl	800352e <_Error_Handler>
 8003fda:	e7f5      	b.n	8003fc8 <HAL_ADC_MspInit+0x70>
 8003fdc:	50000100 	.word	0x50000100
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	48000800 	.word	0x48000800
 8003fe8:	48000400 	.word	0x48000400
 8003fec:	2000048c 	.word	0x2000048c
 8003ff0:	4002001c 	.word	0x4002001c
 8003ff4:	080057a0 	.word	0x080057a0

08003ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003ff8:	6802      	ldr	r2, [r0, #0]
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_I2C_MspInit+0x58>)
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d000      	beq.n	8004002 <HAL_I2C_MspInit+0xa>
 8004000:	4770      	bx	lr
{
 8004002:	b500      	push	{lr}
 8004004:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8004006:	f44f 7340 	mov.w	r3, #768	; 0x300
 800400a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400c:	2312      	movs	r3, #18
 800400e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004010:	2301      	movs	r3, #1
 8004012:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004018:	2304      	movs	r3, #4
 800401a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401c:	eb0d 0103 	add.w	r1, sp, r3
 8004020:	480c      	ldr	r0, [pc, #48]	; (8004054 <HAL_I2C_MspInit+0x5c>)
 8004022:	f7fd f81b 	bl	800105c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <HAL_I2C_MspInit+0x60>)
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800402e:	61da      	str	r2, [r3, #28]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	4611      	mov	r1, r2
 800403e:	201f      	movs	r0, #31
 8004040:	f7fc fe7e 	bl	8000d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004044:	201f      	movs	r0, #31
 8004046:	f7fc fead 	bl	8000da4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800404a:	b007      	add	sp, #28
 800404c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004050:	40005400 	.word	0x40005400
 8004054:	48000400 	.word	0x48000400
 8004058:	40021000 	.word	0x40021000

0800405c <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800405c:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 800405e:	6802      	ldr	r2, [r0, #0]
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RTC_MspInit+0x34>)
 8004062:	429a      	cmp	r2, r3
 8004064:	d000      	beq.n	8004068 <HAL_RTC_MspInit+0xc>
 8004066:	bd08      	pop	{r3, pc}
 8004068:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800406c:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004070:	fab2 f282 	clz	r2, r2
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <HAL_RTC_MspInit+0x38>)
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800407e:	2200      	movs	r2, #0
 8004080:	4611      	mov	r1, r2
 8004082:	2003      	movs	r0, #3
 8004084:	f7fc fe5c 	bl	8000d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004088:	2003      	movs	r0, #3
 800408a:	f7fc fe8b 	bl	8000da4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800408e:	e7ea      	b.n	8004066 <HAL_RTC_MspInit+0xa>
 8004090:	40002800 	.word	0x40002800
 8004094:	10908100 	.word	0x10908100

08004098 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8004098:	6803      	ldr	r3, [r0, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d000      	beq.n	80040a2 <HAL_TIM_Base_MspInit+0xa>
 80040a0:	4770      	bx	lr
{
 80040a2:	b500      	push	{lr}
 80040a4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	61da      	str	r2, [r3, #28]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 80040bc:	2202      	movs	r2, #2
 80040be:	2100      	movs	r1, #0
 80040c0:	201c      	movs	r0, #28
 80040c2:	f7fc fe3d 	bl	8000d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040c6:	201c      	movs	r0, #28
 80040c8:	f7fc fe6c 	bl	8000da4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040cc:	b003      	add	sp, #12
 80040ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080040d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80040d4:	6802      	ldr	r2, [r0, #0]
 80040d6:	4b14      	ldr	r3, [pc, #80]	; (8004128 <HAL_UART_MspInit+0x54>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d000      	beq.n	80040de <HAL_UART_MspInit+0xa>
 80040dc:	4770      	bx	lr
{
 80040de:	b510      	push	{r4, lr}
 80040e0:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040e2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ec:	619a      	str	r2, [r3, #24]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80040f8:	2330      	movs	r3, #48	; 0x30
 80040fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fc:	2302      	movs	r3, #2
 80040fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	2400      	movs	r4, #0
 8004102:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004104:	2303      	movs	r3, #3
 8004106:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004108:	2307      	movs	r3, #7
 800410a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800410c:	a901      	add	r1, sp, #4
 800410e:	4807      	ldr	r0, [pc, #28]	; (800412c <HAL_UART_MspInit+0x58>)
 8004110:	f7fc ffa4 	bl	800105c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004114:	4622      	mov	r2, r4
 8004116:	4621      	mov	r1, r4
 8004118:	2025      	movs	r0, #37	; 0x25
 800411a:	f7fc fe11 	bl	8000d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800411e:	2025      	movs	r0, #37	; 0x25
 8004120:	f7fc fe40 	bl	8000da4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004124:	b006      	add	sp, #24
 8004126:	bd10      	pop	{r4, pc}
 8004128:	40013800 	.word	0x40013800
 800412c:	48000800 	.word	0x48000800

08004130 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8004130:	4770      	bx	lr

08004132 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004132:	4770      	bx	lr

08004134 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004134:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004136:	f7fc f8cb 	bl	80002d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800413a:	f7fc fe66 	bl	8000e0a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
 800413e:	2201      	movs	r2, #1
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <SysTick_Handler+0x24>)
 8004142:	701a      	strb	r2, [r3, #0]
  fake_RTC_timer += 1;
 8004144:	4a05      	ldr	r2, [pc, #20]	; (800415c <SysTick_Handler+0x28>)
 8004146:	8813      	ldrh	r3, [r2, #0]
 8004148:	3301      	adds	r3, #1
 800414a:	8013      	strh	r3, [r2, #0]
  flash_counter += 1;
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <SysTick_Handler+0x2c>)
 800414e:	6813      	ldr	r3, [r2, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	bd08      	pop	{r3, pc}
 8004156:	bf00      	nop
 8004158:	20000279 	.word	0x20000279
 800415c:	2000023e 	.word	0x2000023e
 8004160:	20000240 	.word	0x20000240

08004164 <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 8004164:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004166:	4802      	ldr	r0, [pc, #8]	; (8004170 <RTC_WKUP_IRQHandler+0xc>)
 8004168:	f7fe f97a 	bl	8002460 <HAL_RTCEx_WakeUpTimerIRQHandler>
 800416c:	bd08      	pop	{r3, pc}
 800416e:	bf00      	nop
 8004170:	20000414 	.word	0x20000414

08004174 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8004174:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004176:	2001      	movs	r0, #1
 8004178:	f7fd f840 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  touch_flag = 1;
 800417c:	2201      	movs	r2, #1
 800417e:	4b01      	ldr	r3, [pc, #4]	; (8004184 <EXTI0_IRQHandler+0x10>)
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	bd08      	pop	{r3, pc}
 8004184:	2000028c 	.word	0x2000028c

08004188 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 8004188:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800418a:	4802      	ldr	r0, [pc, #8]	; (8004194 <DMA1_Channel2_IRQHandler+0xc>)
 800418c:	f7fc ff0c 	bl	8000fa8 <HAL_DMA_IRQHandler>
 8004190:	bd08      	pop	{r3, pc}
 8004192:	bf00      	nop
 8004194:	2000048c 	.word	0x2000048c

08004198 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8004198:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800419a:	2040      	movs	r0, #64	; 0x40
 800419c:	f7fd f82e 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 80041a0:	2201      	movs	r2, #1
 80041a2:	4b01      	ldr	r3, [pc, #4]	; (80041a8 <EXTI9_5_IRQHandler+0x10>)
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	bd08      	pop	{r3, pc}
 80041a8:	20000281 	.word	0x20000281

080041ac <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80041ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041ae:	4803      	ldr	r0, [pc, #12]	; (80041bc <TIM2_IRQHandler+0x10>)
 80041b0:	f7fe f9b8 	bl	8002524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag = 0;
 80041b4:	2200      	movs	r2, #0
 80041b6:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <TIM2_IRQHandler+0x14>)
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	bd08      	pop	{r3, pc}
 80041bc:	2000044c 	.word	0x2000044c
 80041c0:	20000280 	.word	0x20000280

080041c4 <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 80041c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80041c6:	4802      	ldr	r0, [pc, #8]	; (80041d0 <I2C1_EV_IRQHandler+0xc>)
 80041c8:	f7fd f954 	bl	8001474 <HAL_I2C_EV_IRQHandler>
 80041cc:	bd08      	pop	{r3, pc}
 80041ce:	bf00      	nop
 80041d0:	20000310 	.word	0x20000310

080041d4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 80041d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041d6:	4802      	ldr	r0, [pc, #8]	; (80041e0 <USART1_IRQHandler+0xc>)
 80041d8:	f7fe fe92 	bl	8002f00 <HAL_UART_IRQHandler>
 80041dc:	bd08      	pop	{r3, pc}
 80041de:	bf00      	nop
 80041e0:	200003a4 	.word	0x200003a4

080041e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041e4:	4915      	ldr	r1, [pc, #84]	; (800423c <SystemInit+0x58>)
 80041e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80041f2:	4b13      	ldr	r3, [pc, #76]	; (8004240 <SystemInit+0x5c>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80041fc:	6858      	ldr	r0, [r3, #4]
 80041fe:	4a11      	ldr	r2, [pc, #68]	; (8004244 <SystemInit+0x60>)
 8004200:	4002      	ands	r2, r0
 8004202:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800420a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800420e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004216:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800421e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	f022 020f 	bic.w	r2, r2, #15
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004228:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <SystemInit+0x64>)
 800422c:	4002      	ands	r2, r0
 800422e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004238:	608b      	str	r3, [r1, #8]
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00
 8004240:	40021000 	.word	0x40021000
 8004244:	f87fc00c 	.word	0xf87fc00c
 8004248:	ff00fccc 	.word	0xff00fccc

0800424c <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 800424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
 8004250:	2200      	movs	r2, #0
 8004252:	4b98      	ldr	r3, [pc, #608]	; (80044b4 <uart_comms+0x268>)
 8004254:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 8004256:	4b98      	ldr	r3, [pc, #608]	; (80044b8 <uart_comms+0x26c>)
 8004258:	4a98      	ldr	r2, [pc, #608]	; (80044bc <uart_comms+0x270>)
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	4898      	ldr	r0, [pc, #608]	; (80044c0 <uart_comms+0x274>)
 8004260:	7800      	ldrb	r0, [r0, #0]
 8004262:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	2a24      	cmp	r2, #36	; 0x24
 800426a:	d00b      	beq.n	8004284 <uart_comms+0x38>

		uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	2a24      	cmp	r2, #36	; 0x24
 8004270:	d00d      	beq.n	800428e <uart_comms+0x42>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 8004272:	4b92      	ldr	r3, [pc, #584]	; (80044bc <uart_comms+0x270>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b3b      	cmp	r3, #59	; 0x3b
 8004278:	d902      	bls.n	8004280 <uart_comms+0x34>
		uart_counter = 0;
 800427a:	2200      	movs	r2, #0
 800427c:	4b8f      	ldr	r3, [pc, #572]	; (80044bc <uart_comms+0x270>)
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_counter += 1;
 8004284:	498d      	ldr	r1, [pc, #564]	; (80044bc <uart_comms+0x270>)
 8004286:	780a      	ldrb	r2, [r1, #0]
 8004288:	3201      	adds	r2, #1
 800428a:	700a      	strb	r2, [r1, #0]
 800428c:	e7ee      	b.n	800426c <uart_comms+0x20>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 800428e:	4a8b      	ldr	r2, [pc, #556]	; (80044bc <uart_comms+0x270>)
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	1899      	adds	r1, r3, r2
 8004294:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8004298:	290a      	cmp	r1, #10
 800429a:	d1ea      	bne.n	8004272 <uart_comms+0x26>
 800429c:	4413      	add	r3, r2
 800429e:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80042a2:	2b0d      	cmp	r3, #13
 80042a4:	d1e5      	bne.n	8004272 <uart_comms+0x26>
 80042a6:	2a02      	cmp	r2, #2
 80042a8:	d9e3      	bls.n	8004272 <uart_comms+0x26>
		memset(return_value,0x00, 50);
 80042aa:	2232      	movs	r2, #50	; 0x32
 80042ac:	2100      	movs	r1, #0
 80042ae:	4b85      	ldr	r3, [pc, #532]	; (80044c4 <uart_comms+0x278>)
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	f000 fcdc 	bl	8004c6e <memset>
		uart_command_copy = uart_command;
 80042b6:	4b80      	ldr	r3, [pc, #512]	; (80044b8 <uart_comms+0x26c>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b83      	ldr	r3, [pc, #524]	; (80044c8 <uart_comms+0x27c>)
 80042bc:	601a      	str	r2, [r3, #0]
		switch(uart_command[1]){
 80042be:	7853      	ldrb	r3, [r2, #1]
 80042c0:	3b41      	subs	r3, #65	; 0x41
 80042c2:	2b0b      	cmp	r3, #11
 80042c4:	d829      	bhi.n	800431a <uart_comms+0xce>
 80042c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80042ca:	000c      	.short	0x000c
 80042cc:	005f0033 	.word	0x005f0033
 80042d0:	00af007f 	.word	0x00af007f
 80042d4:	012300d0 	.word	0x012300d0
 80042d8:	019a0143 	.word	0x019a0143
 80042dc:	03450211 	.word	0x03450211
 80042e0:	03fc      	.short	0x03fc
			memcpy(studentnumber, uart_command, 2 );
 80042e2:	4b7a      	ldr	r3, [pc, #488]	; (80044cc <uart_comms+0x280>)
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	8812      	ldrh	r2, [r2, #0]
 80042e8:	800a      	strh	r2, [r1, #0]
			memcpy(studentnumber+2,comma,1);
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4978      	ldr	r1, [pc, #480]	; (80044d0 <uart_comms+0x284>)
 80042ee:	7809      	ldrb	r1, [r1, #0]
 80042f0:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4977      	ldr	r1, [pc, #476]	; (80044d4 <uart_comms+0x288>)
 80042f6:	6808      	ldr	r0, [r1, #0]
 80042f8:	6849      	ldr	r1, [r1, #4]
 80042fa:	f8c2 0003 	str.w	r0, [r2, #3]
 80042fe:	f8c2 1007 	str.w	r1, [r2, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	4b74      	ldr	r3, [pc, #464]	; (80044d8 <uart_comms+0x28c>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f8c1 200b 	str.w	r2, [r1, #11]
 800430e:	f8c1 300f 	str.w	r3, [r1, #15]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 8004312:	220d      	movs	r2, #13
 8004314:	4871      	ldr	r0, [pc, #452]	; (80044dc <uart_comms+0x290>)
 8004316:	f7fe fb08 	bl	800292a <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 800431a:	223c      	movs	r2, #60	; 0x3c
 800431c:	2100      	movs	r1, #0
 800431e:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <uart_comms+0x26c>)
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	f000 fca4 	bl	8004c6e <memset>
		uart_counter = 0;
 8004326:	2200      	movs	r2, #0
 8004328:	4b64      	ldr	r3, [pc, #400]	; (80044bc <uart_comms+0x270>)
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memcpy(return_value, uart_command, 2);
 8004330:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <uart_comms+0x278>)
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	8812      	ldrh	r2, [r2, #0]
 8004336:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4967      	ldr	r1, [pc, #412]	; (80044d8 <uart_comms+0x28c>)
 800433c:	8809      	ldrh	r1, [r1, #0]
 800433e:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8004340:	681c      	ldr	r4, [r3, #0]
 8004342:	4620      	mov	r0, r4
 8004344:	f7fb ff44 	bl	80001d0 <strlen>
 8004348:	b282      	uxth	r2, r0
 800434a:	4621      	mov	r1, r4
 800434c:	4863      	ldr	r0, [pc, #396]	; (80044dc <uart_comms+0x290>)
 800434e:	f7fe faec 	bl	800292a <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 8004352:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <uart_comms+0x26c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	78db      	ldrb	r3, [r3, #3]
 8004358:	2b31      	cmp	r3, #49	; 0x31
 800435a:	d00b      	beq.n	8004374 <uart_comms+0x128>
			else if(uart_command[3] == '0'){
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d1dc      	bne.n	800431a <uart_comms+0xce>
				valve_state=valve_CLOSE;
 8004360:	4a5f      	ldr	r2, [pc, #380]	; (80044e0 <uart_comms+0x294>)
 8004362:	4b60      	ldr	r3, [pc, #384]	; (80044e4 <uart_comms+0x298>)
 8004364:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 8004366:	2200      	movs	r2, #0
 8004368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800436c:	485e      	ldr	r0, [pc, #376]	; (80044e8 <uart_comms+0x29c>)
 800436e:	f7fc ff3f 	bl	80011f0 <HAL_GPIO_WritePin>
 8004372:	e7d2      	b.n	800431a <uart_comms+0xce>
				valve_state = valve_OPEN;
 8004374:	4a5d      	ldr	r2, [pc, #372]	; (80044ec <uart_comms+0x2a0>)
 8004376:	4b5b      	ldr	r3, [pc, #364]	; (80044e4 <uart_comms+0x298>)
 8004378:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 800437a:	2201      	movs	r2, #1
 800437c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004380:	4859      	ldr	r0, [pc, #356]	; (80044e8 <uart_comms+0x29c>)
 8004382:	f7fc ff35 	bl	80011f0 <HAL_GPIO_WritePin>
 8004386:	e7c8      	b.n	800431a <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8004388:	4b4e      	ldr	r3, [pc, #312]	; (80044c4 <uart_comms+0x278>)
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4951      	ldr	r1, [pc, #324]	; (80044d8 <uart_comms+0x28c>)
 8004394:	8809      	ldrh	r1, [r1, #0]
 8004396:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8004398:	681c      	ldr	r4, [r3, #0]
 800439a:	4620      	mov	r0, r4
 800439c:	f7fb ff18 	bl	80001d0 <strlen>
 80043a0:	b282      	uxth	r2, r0
 80043a2:	4621      	mov	r1, r4
 80043a4:	484d      	ldr	r0, [pc, #308]	; (80044dc <uart_comms+0x290>)
 80043a6:	f7fe fac0 	bl	800292a <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 80043aa:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <uart_comms+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	78db      	ldrb	r3, [r3, #3]
 80043b0:	2b30      	cmp	r3, #48	; 0x30
 80043b2:	d005      	beq.n	80043c0 <uart_comms+0x174>
			else if(uart_command[3] == '1'){
 80043b4:	2b31      	cmp	r3, #49	; 0x31
 80043b6:	d1b0      	bne.n	800431a <uart_comms+0xce>
				auto_heating = 1;
 80043b8:	2201      	movs	r2, #1
 80043ba:	4b4d      	ldr	r3, [pc, #308]	; (80044f0 <uart_comms+0x2a4>)
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e7ac      	b.n	800431a <uart_comms+0xce>
				auto_heating = 0;
 80043c0:	2200      	movs	r2, #0
 80043c2:	4b4b      	ldr	r3, [pc, #300]	; (80044f0 <uart_comms+0x2a4>)
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e7a8      	b.n	800431a <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 80043c8:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <uart_comms+0x278>)
 80043ca:	6819      	ldr	r1, [r3, #0]
 80043cc:	8812      	ldrh	r2, [r2, #0]
 80043ce:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4941      	ldr	r1, [pc, #260]	; (80044d8 <uart_comms+0x28c>)
 80043d4:	8809      	ldrh	r1, [r1, #0]
 80043d6:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 80043d8:	681c      	ldr	r4, [r3, #0]
 80043da:	4620      	mov	r0, r4
 80043dc:	f7fb fef8 	bl	80001d0 <strlen>
 80043e0:	b282      	uxth	r2, r0
 80043e2:	4621      	mov	r1, r4
 80043e4:	483d      	ldr	r0, [pc, #244]	; (80044dc <uart_comms+0x290>)
 80043e6:	f7fe faa0 	bl	800292a <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 80043ea:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <uart_comms+0x2a4>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d193      	bne.n	800431a <uart_comms+0xce>
				if(uart_command[3]=='0'){
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <uart_comms+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	78db      	ldrb	r3, [r3, #3]
 80043f8:	2b30      	cmp	r3, #48	; 0x30
 80043fa:	d00b      	beq.n	8004414 <uart_comms+0x1c8>
				else if(uart_command[3] == '1'){
 80043fc:	2b31      	cmp	r3, #49	; 0x31
 80043fe:	d18c      	bne.n	800431a <uart_comms+0xce>
					heater_state = heater_ON;
 8004400:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <uart_comms+0x2a8>)
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <uart_comms+0x2ac>)
 8004404:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 8004406:	2201      	movs	r2, #1
 8004408:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800440c:	4836      	ldr	r0, [pc, #216]	; (80044e8 <uart_comms+0x29c>)
 800440e:	f7fc feef 	bl	80011f0 <HAL_GPIO_WritePin>
 8004412:	e782      	b.n	800431a <uart_comms+0xce>
					heater_state = heater_OFF;
 8004414:	4a39      	ldr	r2, [pc, #228]	; (80044fc <uart_comms+0x2b0>)
 8004416:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <uart_comms+0x2ac>)
 8004418:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 800441a:	2200      	movs	r2, #0
 800441c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004420:	4831      	ldr	r0, [pc, #196]	; (80044e8 <uart_comms+0x29c>)
 8004422:	f7fc fee5 	bl	80011f0 <HAL_GPIO_WritePin>
 8004426:	e778      	b.n	800431a <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <uart_comms+0x278>)
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	8812      	ldrh	r2, [r2, #0]
 800442e:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4929      	ldr	r1, [pc, #164]	; (80044d8 <uart_comms+0x28c>)
 8004434:	8809      	ldrh	r1, [r1, #0]
 8004436:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8004438:	681c      	ldr	r4, [r3, #0]
 800443a:	4620      	mov	r0, r4
 800443c:	f7fb fec8 	bl	80001d0 <strlen>
 8004440:	b282      	uxth	r2, r0
 8004442:	4621      	mov	r1, r4
 8004444:	4825      	ldr	r0, [pc, #148]	; (80044dc <uart_comms+0x290>)
 8004446:	f7fe fa70 	bl	800292a <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){ // logging disable
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <uart_comms+0x26c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	78db      	ldrb	r3, [r3, #3]
 8004450:	2b30      	cmp	r3, #48	; 0x30
 8004452:	d006      	beq.n	8004462 <uart_comms+0x216>
			else if(uart_command[3] == '1'){ // logging enable
 8004454:	2b31      	cmp	r3, #49	; 0x31
 8004456:	f47f af60 	bne.w	800431a <uart_comms+0xce>
				enableFlashLogging = 1;
 800445a:	2201      	movs	r2, #1
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <uart_comms+0x2b4>)
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e75b      	b.n	800431a <uart_comms+0xce>
				enableFlashLogging = 0;
 8004462:	2200      	movs	r2, #0
 8004464:	4b26      	ldr	r3, [pc, #152]	; (8004500 <uart_comms+0x2b4>)
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e757      	b.n	800431a <uart_comms+0xce>
			memcpy(return_value, uart_command,2);
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <uart_comms+0x278>)
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	8812      	ldrh	r2, [r2, #0]
 8004470:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4918      	ldr	r1, [pc, #96]	; (80044d8 <uart_comms+0x28c>)
 8004476:	8809      	ldrh	r1, [r1, #0]
 8004478:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 800447a:	681c      	ldr	r4, [r3, #0]
 800447c:	4620      	mov	r0, r4
 800447e:	f7fb fea7 	bl	80001d0 <strlen>
 8004482:	b282      	uxth	r2, r0
 8004484:	4621      	mov	r1, r4
 8004486:	4815      	ldr	r0, [pc, #84]	; (80044dc <uart_comms+0x290>)
 8004488:	f7fe fa4f 	bl	800292a <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <uart_comms+0x270>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	3b05      	subs	r3, #5
 8004492:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <uart_comms+0x2b8>)
 8004494:	7013      	strb	r3, [r2, #0]
			memset(set_temp, 0x00, 4);
 8004496:	4c1c      	ldr	r4, [pc, #112]	; (8004508 <uart_comms+0x2bc>)
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	2100      	movs	r1, #0
 800449c:	6019      	str	r1, [r3, #0]
			memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <uart_comms+0x26c>)
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	3103      	adds	r1, #3
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	f000 fbd6 	bl	8004c58 <memcpy>
			segment_val =set_temp;
 80044ac:	6822      	ldr	r2, [r4, #0]
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <uart_comms+0x2c0>)
 80044b0:	601a      	str	r2, [r3, #0]
			break;
 80044b2:	e732      	b.n	800431a <uart_comms+0xce>
 80044b4:	2000026d 	.word	0x2000026d
 80044b8:	20000290 	.word	0x20000290
 80044bc:	20000298 	.word	0x20000298
 80044c0:	2000054c 	.word	0x2000054c
 80044c4:	20000268 	.word	0x20000268
 80044c8:	20000294 	.word	0x20000294
 80044cc:	20000548 	.word	0x20000548
 80044d0:	20000004 	.word	0x20000004
 80044d4:	2000001c 	.word	0x2000001c
 80044d8:	20000008 	.word	0x20000008
 80044dc:	200003a4 	.word	0x200003a4
 80044e0:	20000024 	.word	0x20000024
 80044e4:	2000029c 	.word	0x2000029c
 80044e8:	48000400 	.word	0x48000400
 80044ec:	2000002c 	.word	0x2000002c
 80044f0:	2000022c 	.word	0x2000022c
 80044f4:	20000018 	.word	0x20000018
 80044f8:	20000258 	.word	0x20000258
 80044fc:	20000014 	.word	0x20000014
 8004500:	2000023c 	.word	0x2000023c
 8004504:	20000278 	.word	0x20000278
 8004508:	20000274 	.word	0x20000274
 800450c:	20000270 	.word	0x20000270
			memcpy(return_value, uart_command, 2);
 8004510:	4caf      	ldr	r4, [pc, #700]	; (80047d0 <uart_comms+0x584>)
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	8812      	ldrh	r2, [r2, #0]
 8004516:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	4aae      	ldr	r2, [pc, #696]	; (80047d4 <uart_comms+0x588>)
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	709a      	strb	r2, [r3, #2]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	4bad      	ldr	r3, [pc, #692]	; (80047d8 <uart_comms+0x58c>)
 8004524:	781d      	ldrb	r5, [r3, #0]
 8004526:	462a      	mov	r2, r5
 8004528:	4bac      	ldr	r3, [pc, #688]	; (80047dc <uart_comms+0x590>)
 800452a:	6819      	ldr	r1, [r3, #0]
 800452c:	3003      	adds	r0, #3
 800452e:	f000 fb93 	bl	8004c58 <memcpy>
			memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	3503      	adds	r5, #3
 8004536:	4aaa      	ldr	r2, [pc, #680]	; (80047e0 <uart_comms+0x594>)
 8004538:	8812      	ldrh	r2, [r2, #0]
 800453a:	535a      	strh	r2, [r3, r5]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 800453c:	6824      	ldr	r4, [r4, #0]
 800453e:	4620      	mov	r0, r4
 8004540:	f7fb fe46 	bl	80001d0 <strlen>
 8004544:	b282      	uxth	r2, r0
 8004546:	4621      	mov	r1, r4
 8004548:	48a6      	ldr	r0, [pc, #664]	; (80047e4 <uart_comms+0x598>)
 800454a:	f7fe f9ee 	bl	800292a <HAL_UART_Transmit_IT>
			break;
 800454e:	e6e4      	b.n	800431a <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8004550:	4b9f      	ldr	r3, [pc, #636]	; (80047d0 <uart_comms+0x584>)
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	8812      	ldrh	r2, [r2, #0]
 8004556:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	49a1      	ldr	r1, [pc, #644]	; (80047e0 <uart_comms+0x594>)
 800455c:	8809      	ldrh	r1, [r1, #0]
 800455e:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8004560:	681c      	ldr	r4, [r3, #0]
 8004562:	4620      	mov	r0, r4
 8004564:	f7fb fe34 	bl	80001d0 <strlen>
 8004568:	b282      	uxth	r2, r0
 800456a:	4621      	mov	r1, r4
 800456c:	489d      	ldr	r0, [pc, #628]	; (80047e4 <uart_comms+0x598>)
 800456e:	f7fe f9dc 	bl	800292a <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004572:	4c9d      	ldr	r4, [pc, #628]	; (80047e8 <uart_comms+0x59c>)
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	22ca      	movs	r2, #202	; 0xca
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
 800457a:	2253      	movs	r2, #83	; 0x53
 800457c:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 800457e:	4620      	mov	r0, r4
 8004580:	f7fd fd2b 	bl	8001fda <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8004584:	4999      	ldr	r1, [pc, #612]	; (80047ec <uart_comms+0x5a0>)
 8004586:	4b9a      	ldr	r3, [pc, #616]	; (80047f0 <uart_comms+0x5a4>)
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	f000 fc59 	bl	8004e40 <strtok>
 800458e:	4e99      	ldr	r6, [pc, #612]	; (80047f4 <uart_comms+0x5a8>)
 8004590:	6030      	str	r0, [r6, #0]
			time->Hours = strtol(heating_info, NULL,10);
 8004592:	4d99      	ldr	r5, [pc, #612]	; (80047f8 <uart_comms+0x5ac>)
 8004594:	682f      	ldr	r7, [r5, #0]
 8004596:	220a      	movs	r2, #10
 8004598:	2100      	movs	r1, #0
 800459a:	f000 fd25 	bl	8004fe8 <strtol>
 800459e:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 80045a0:	4996      	ldr	r1, [pc, #600]	; (80047fc <uart_comms+0x5b0>)
 80045a2:	2000      	movs	r0, #0
 80045a4:	f000 fc4c 	bl	8004e40 <strtok>
 80045a8:	6030      	str	r0, [r6, #0]
			time->Minutes = strtol(heating_info, NULL,10);
 80045aa:	682f      	ldr	r7, [r5, #0]
 80045ac:	220a      	movs	r2, #10
 80045ae:	2100      	movs	r1, #0
 80045b0:	f000 fd1a 	bl	8004fe8 <strtol>
 80045b4:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 80045b6:	4992      	ldr	r1, [pc, #584]	; (8004800 <uart_comms+0x5b4>)
 80045b8:	2000      	movs	r0, #0
 80045ba:	f000 fc41 	bl	8004e40 <strtok>
 80045be:	6030      	str	r0, [r6, #0]
			time->Seconds = strtol(heating_info, NULL,10);
 80045c0:	682e      	ldr	r6, [r5, #0]
 80045c2:	220a      	movs	r2, #10
 80045c4:	2100      	movs	r1, #0
 80045c6:	f000 fd0f 	bl	8004fe8 <strtol>
 80045ca:	70b0      	strb	r0, [r6, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 80045cc:	2200      	movs	r2, #0
 80045ce:	6829      	ldr	r1, [r5, #0]
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7fd fd8d 	bl	80020f0 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 80045d6:	4e8b      	ldr	r6, [pc, #556]	; (8004804 <uart_comms+0x5b8>)
 80045d8:	2200      	movs	r2, #0
 80045da:	6831      	ldr	r1, [r6, #0]
 80045dc:	4620      	mov	r0, r4
 80045de:	f7fd fe06 	bl	80021ee <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	22ff      	movs	r2, #255	; 0xff
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80045e8:	2200      	movs	r2, #0
 80045ea:	6829      	ldr	r1, [r5, #0]
 80045ec:	4620      	mov	r0, r4
 80045ee:	f7fd fe74 	bl	80022da <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80045f2:	2200      	movs	r2, #0
 80045f4:	6831      	ldr	r1, [r6, #0]
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7fd fe9a 	bl	8002330 <HAL_RTC_GetDate>
			break;
 80045fc:	e68d      	b.n	800431a <uart_comms+0xce>
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80045fe:	4e7e      	ldr	r6, [pc, #504]	; (80047f8 <uart_comms+0x5ac>)
 8004600:	4c79      	ldr	r4, [pc, #484]	; (80047e8 <uart_comms+0x59c>)
 8004602:	2200      	movs	r2, #0
 8004604:	6831      	ldr	r1, [r6, #0]
 8004606:	4620      	mov	r0, r4
 8004608:	f7fd fe67 	bl	80022da <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 800460c:	2200      	movs	r2, #0
 800460e:	4b7d      	ldr	r3, [pc, #500]	; (8004804 <uart_comms+0x5b8>)
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	4620      	mov	r0, r4
 8004614:	f7fd fe8c 	bl	8002330 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 8004618:	4c6d      	ldr	r4, [pc, #436]	; (80047d0 <uart_comms+0x584>)
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	4a7a      	ldr	r2, [pc, #488]	; (8004808 <uart_comms+0x5bc>)
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	8812      	ldrh	r2, [r2, #0]
 8004622:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80047d4 <uart_comms+0x588>
 800462a:	f898 2000 	ldrb.w	r2, [r8]
 800462e:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 8004630:	6833      	ldr	r3, [r6, #0]
 8004632:	4d76      	ldr	r5, [pc, #472]	; (800480c <uart_comms+0x5c0>)
 8004634:	220a      	movs	r2, #10
 8004636:	6829      	ldr	r1, [r5, #0]
 8004638:	7818      	ldrb	r0, [r3, #0]
 800463a:	f000 fb03 	bl	8004c44 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 800463e:	6827      	ldr	r7, [r4, #0]
 8004640:	4638      	mov	r0, r7
 8004642:	f7fb fdc5 	bl	80001d0 <strlen>
 8004646:	4407      	add	r7, r0
 8004648:	f8d5 9000 	ldr.w	r9, [r5]
 800464c:	4648      	mov	r0, r9
 800464e:	f7fb fdbf 	bl	80001d0 <strlen>
 8004652:	4602      	mov	r2, r0
 8004654:	4649      	mov	r1, r9
 8004656:	4638      	mov	r0, r7
 8004658:	f000 fafe 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800465c:	6827      	ldr	r7, [r4, #0]
 800465e:	4638      	mov	r0, r7
 8004660:	f7fb fdb6 	bl	80001d0 <strlen>
 8004664:	f898 3000 	ldrb.w	r3, [r8]
 8004668:	543b      	strb	r3, [r7, r0]
			itoa((time->Minutes),temp_time_var,10  );
 800466a:	6833      	ldr	r3, [r6, #0]
 800466c:	220a      	movs	r2, #10
 800466e:	6829      	ldr	r1, [r5, #0]
 8004670:	7858      	ldrb	r0, [r3, #1]
 8004672:	f000 fae7 	bl	8004c44 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8004676:	6827      	ldr	r7, [r4, #0]
 8004678:	4638      	mov	r0, r7
 800467a:	f7fb fda9 	bl	80001d0 <strlen>
 800467e:	4407      	add	r7, r0
 8004680:	f8d5 9000 	ldr.w	r9, [r5]
 8004684:	4648      	mov	r0, r9
 8004686:	f7fb fda3 	bl	80001d0 <strlen>
 800468a:	4602      	mov	r2, r0
 800468c:	4649      	mov	r1, r9
 800468e:	4638      	mov	r0, r7
 8004690:	f000 fae2 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004694:	6827      	ldr	r7, [r4, #0]
 8004696:	4638      	mov	r0, r7
 8004698:	f7fb fd9a 	bl	80001d0 <strlen>
 800469c:	f898 3000 	ldrb.w	r3, [r8]
 80046a0:	543b      	strb	r3, [r7, r0]
			itoa((time->Seconds),temp_time_var,10  );
 80046a2:	6833      	ldr	r3, [r6, #0]
 80046a4:	220a      	movs	r2, #10
 80046a6:	6829      	ldr	r1, [r5, #0]
 80046a8:	7898      	ldrb	r0, [r3, #2]
 80046aa:	f000 facb 	bl	8004c44 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 80046ae:	6826      	ldr	r6, [r4, #0]
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7fb fd8d 	bl	80001d0 <strlen>
 80046b6:	4406      	add	r6, r0
 80046b8:	682d      	ldr	r5, [r5, #0]
 80046ba:	4628      	mov	r0, r5
 80046bc:	f7fb fd88 	bl	80001d0 <strlen>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4629      	mov	r1, r5
 80046c4:	4630      	mov	r0, r6
 80046c6:	f000 fac7 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 80046ca:	6825      	ldr	r5, [r4, #0]
 80046cc:	4628      	mov	r0, r5
 80046ce:	f7fb fd7f 	bl	80001d0 <strlen>
 80046d2:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <uart_comms+0x594>)
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80046d8:	6824      	ldr	r4, [r4, #0]
 80046da:	4620      	mov	r0, r4
 80046dc:	f7fb fd78 	bl	80001d0 <strlen>
 80046e0:	b282      	uxth	r2, r0
 80046e2:	4621      	mov	r1, r4
 80046e4:	483f      	ldr	r0, [pc, #252]	; (80047e4 <uart_comms+0x598>)
 80046e6:	f7fe f920 	bl	800292a <HAL_UART_Transmit_IT>
			break;
 80046ea:	e616      	b.n	800431a <uart_comms+0xce>
			if(auto_heating == 1){
 80046ec:	4b48      	ldr	r3, [pc, #288]	; (8004810 <uart_comms+0x5c4>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f47f ae12 	bne.w	800431a <uart_comms+0xce>
				memcpy(return_value, uart_command, 2);
 80046f6:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <uart_comms+0x584>)
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	8812      	ldrh	r2, [r2, #0]
 80046fc:	800a      	strh	r2, [r1, #0]
				memcpy(return_value+2, endSimbol,2 );
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4937      	ldr	r1, [pc, #220]	; (80047e0 <uart_comms+0x594>)
 8004702:	8809      	ldrh	r1, [r1, #0]
 8004704:	8051      	strh	r1, [r2, #2]
				HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8004706:	681c      	ldr	r4, [r3, #0]
 8004708:	4620      	mov	r0, r4
 800470a:	f7fb fd61 	bl	80001d0 <strlen>
 800470e:	b282      	uxth	r2, r0
 8004710:	4621      	mov	r1, r4
 8004712:	4834      	ldr	r0, [pc, #208]	; (80047e4 <uart_comms+0x598>)
 8004714:	f7fe f909 	bl	800292a <HAL_UART_Transmit_IT>
				if(uart_command[3] == '1'){ // first heating schedule
 8004718:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <uart_comms+0x5bc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	78db      	ldrb	r3, [r3, #3]
 800471e:	2b31      	cmp	r3, #49	; 0x31
 8004720:	d07c      	beq.n	800481c <uart_comms+0x5d0>
				else if(uart_command[3] == '2'){ // second heating schedule
 8004722:	2b32      	cmp	r3, #50	; 0x32
 8004724:	f000 80c5 	beq.w	80048b2 <uart_comms+0x666>
				else if(uart_command[3] == '3'){ // 3rd heating schedule
 8004728:	2b33      	cmp	r3, #51	; 0x33
 800472a:	f47f adf6 	bne.w	800431a <uart_comms+0xce>
					heating_info = strtok((char*)uart_command_copy, ",");
 800472e:	4d33      	ldr	r5, [pc, #204]	; (80047fc <uart_comms+0x5b0>)
 8004730:	4629      	mov	r1, r5
 8004732:	4b2f      	ldr	r3, [pc, #188]	; (80047f0 <uart_comms+0x5a4>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f000 fb83 	bl	8004e40 <strtok>
 800473a:	4c2e      	ldr	r4, [pc, #184]	; (80047f4 <uart_comms+0x5a8>)
 800473c:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 800473e:	4629      	mov	r1, r5
 8004740:	2000      	movs	r0, #0
 8004742:	f000 fb7d 	bl	8004e40 <strtok>
 8004746:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8004748:	4629      	mov	r1, r5
 800474a:	2000      	movs	r0, #0
 800474c:	f000 fb78 	bl	8004e40 <strtok>
 8004750:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8004752:	220a      	movs	r2, #10
 8004754:	2100      	movs	r1, #0
 8004756:	f000 fc47 	bl	8004fe8 <strtol>
 800475a:	4e2e      	ldr	r6, [pc, #184]	; (8004814 <uart_comms+0x5c8>)
 800475c:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
					heating_info = (strtok(NULL, ","));
 8004760:	4629      	mov	r1, r5
 8004762:	2000      	movs	r0, #0
 8004764:	f000 fb6c 	bl	8004e40 <strtok>
 8004768:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 800476a:	220a      	movs	r2, #10
 800476c:	2100      	movs	r1, #0
 800476e:	f000 fc3b 	bl	8004fe8 <strtol>
 8004772:	f886 0051 	strb.w	r0, [r6, #81]	; 0x51
					heating_info = (strtok(NULL, ","));
 8004776:	4629      	mov	r1, r5
 8004778:	2000      	movs	r0, #0
 800477a:	f000 fb61 	bl	8004e40 <strtok>
 800477e:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8004780:	220a      	movs	r2, #10
 8004782:	2100      	movs	r1, #0
 8004784:	f000 fc30 	bl	8004fe8 <strtol>
 8004788:	f886 0052 	strb.w	r0, [r6, #82]	; 0x52
					heating_info = (strtok(NULL, ","));
 800478c:	4629      	mov	r1, r5
 800478e:	2000      	movs	r0, #0
 8004790:	f000 fb56 	bl	8004e40 <strtok>
 8004794:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8004796:	220a      	movs	r2, #10
 8004798:	2100      	movs	r1, #0
 800479a:	f000 fc25 	bl	8004fe8 <strtol>
 800479e:	f886 0064 	strb.w	r0, [r6, #100]	; 0x64
					heating_info = (strtok(NULL, ","));
 80047a2:	4629      	mov	r1, r5
 80047a4:	2000      	movs	r0, #0
 80047a6:	f000 fb4b 	bl	8004e40 <strtok>
 80047aa:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 80047ac:	220a      	movs	r2, #10
 80047ae:	2100      	movs	r1, #0
 80047b0:	f000 fc1a 	bl	8004fe8 <strtol>
 80047b4:	f886 0065 	strb.w	r0, [r6, #101]	; 0x65
					heating_info = (strtok(NULL, "\r\n"));
 80047b8:	4917      	ldr	r1, [pc, #92]	; (8004818 <uart_comms+0x5cc>)
 80047ba:	2000      	movs	r0, #0
 80047bc:	f000 fb40 	bl	8004e40 <strtok>
 80047c0:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 80047c2:	220a      	movs	r2, #10
 80047c4:	2100      	movs	r1, #0
 80047c6:	f000 fc0f 	bl	8004fe8 <strtol>
 80047ca:	f886 0066 	strb.w	r0, [r6, #102]	; 0x66
 80047ce:	e5a4      	b.n	800431a <uart_comms+0xce>
 80047d0:	20000268 	.word	0x20000268
 80047d4:	20000004 	.word	0x20000004
 80047d8:	20000278 	.word	0x20000278
 80047dc:	20000274 	.word	0x20000274
 80047e0:	20000008 	.word	0x20000008
 80047e4:	200003a4 	.word	0x200003a4
 80047e8:	20000414 	.word	0x20000414
 80047ec:	080057d4 	.word	0x080057d4
 80047f0:	20000294 	.word	0x20000294
 80047f4:	2000025c 	.word	0x2000025c
 80047f8:	20000284 	.word	0x20000284
 80047fc:	080057d8 	.word	0x080057d8
 8004800:	080057dc 	.word	0x080057dc
 8004804:	20000238 	.word	0x20000238
 8004808:	20000290 	.word	0x20000290
 800480c:	2000027c 	.word	0x2000027c
 8004810:	2000022c 	.word	0x2000022c
 8004814:	200004d0 	.word	0x200004d0
 8004818:	080057e0 	.word	0x080057e0
					heating_info = strtok((char*)uart_command_copy, ",");
 800481c:	4dc0      	ldr	r5, [pc, #768]	; (8004b20 <uart_comms+0x8d4>)
 800481e:	4629      	mov	r1, r5
 8004820:	4bc0      	ldr	r3, [pc, #768]	; (8004b24 <uart_comms+0x8d8>)
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	f000 fb0c 	bl	8004e40 <strtok>
 8004828:	4cbf      	ldr	r4, [pc, #764]	; (8004b28 <uart_comms+0x8dc>)
 800482a:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 800482c:	4629      	mov	r1, r5
 800482e:	2000      	movs	r0, #0
 8004830:	f000 fb06 	bl	8004e40 <strtok>
 8004834:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8004836:	4629      	mov	r1, r5
 8004838:	2000      	movs	r0, #0
 800483a:	f000 fb01 	bl	8004e40 <strtok>
 800483e:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8004840:	220a      	movs	r2, #10
 8004842:	2100      	movs	r1, #0
 8004844:	f000 fbd0 	bl	8004fe8 <strtol>
 8004848:	4eb8      	ldr	r6, [pc, #736]	; (8004b2c <uart_comms+0x8e0>)
 800484a:	7030      	strb	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 800484c:	4629      	mov	r1, r5
 800484e:	2000      	movs	r0, #0
 8004850:	f000 faf6 	bl	8004e40 <strtok>
 8004854:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8004856:	220a      	movs	r2, #10
 8004858:	2100      	movs	r1, #0
 800485a:	f000 fbc5 	bl	8004fe8 <strtol>
 800485e:	7070      	strb	r0, [r6, #1]
					heating_info = (strtok(NULL, ","));
 8004860:	4629      	mov	r1, r5
 8004862:	2000      	movs	r0, #0
 8004864:	f000 faec 	bl	8004e40 <strtok>
 8004868:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 800486a:	220a      	movs	r2, #10
 800486c:	2100      	movs	r1, #0
 800486e:	f000 fbbb 	bl	8004fe8 <strtol>
 8004872:	70b0      	strb	r0, [r6, #2]
					heating_info = (strtok(NULL, ","));
 8004874:	4629      	mov	r1, r5
 8004876:	2000      	movs	r0, #0
 8004878:	f000 fae2 	bl	8004e40 <strtok>
 800487c:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 800487e:	220a      	movs	r2, #10
 8004880:	2100      	movs	r1, #0
 8004882:	f000 fbb1 	bl	8004fe8 <strtol>
 8004886:	7530      	strb	r0, [r6, #20]
					heating_info = (strtok(NULL, ","));
 8004888:	4629      	mov	r1, r5
 800488a:	2000      	movs	r0, #0
 800488c:	f000 fad8 	bl	8004e40 <strtok>
 8004890:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8004892:	220a      	movs	r2, #10
 8004894:	2100      	movs	r1, #0
 8004896:	f000 fba7 	bl	8004fe8 <strtol>
 800489a:	7570      	strb	r0, [r6, #21]
					heating_info = (strtok(NULL, "\r\n"));
 800489c:	49a4      	ldr	r1, [pc, #656]	; (8004b30 <uart_comms+0x8e4>)
 800489e:	2000      	movs	r0, #0
 80048a0:	f000 face 	bl	8004e40 <strtok>
 80048a4:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 80048a6:	220a      	movs	r2, #10
 80048a8:	2100      	movs	r1, #0
 80048aa:	f000 fb9d 	bl	8004fe8 <strtol>
 80048ae:	75b0      	strb	r0, [r6, #22]
 80048b0:	e533      	b.n	800431a <uart_comms+0xce>
					heating_info = strtok((char*)uart_command_copy, ",");
 80048b2:	4d9b      	ldr	r5, [pc, #620]	; (8004b20 <uart_comms+0x8d4>)
 80048b4:	4629      	mov	r1, r5
 80048b6:	4b9b      	ldr	r3, [pc, #620]	; (8004b24 <uart_comms+0x8d8>)
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	f000 fac1 	bl	8004e40 <strtok>
 80048be:	4c9a      	ldr	r4, [pc, #616]	; (8004b28 <uart_comms+0x8dc>)
 80048c0:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 80048c2:	4629      	mov	r1, r5
 80048c4:	2000      	movs	r0, #0
 80048c6:	f000 fabb 	bl	8004e40 <strtok>
 80048ca:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 80048cc:	4629      	mov	r1, r5
 80048ce:	2000      	movs	r0, #0
 80048d0:	f000 fab6 	bl	8004e40 <strtok>
 80048d4:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 80048d6:	220a      	movs	r2, #10
 80048d8:	2100      	movs	r1, #0
 80048da:	f000 fb85 	bl	8004fe8 <strtol>
 80048de:	4e93      	ldr	r6, [pc, #588]	; (8004b2c <uart_comms+0x8e0>)
 80048e0:	f886 0028 	strb.w	r0, [r6, #40]	; 0x28
					heating_info = (strtok(NULL, ","));
 80048e4:	4629      	mov	r1, r5
 80048e6:	2000      	movs	r0, #0
 80048e8:	f000 faaa 	bl	8004e40 <strtok>
 80048ec:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 80048ee:	220a      	movs	r2, #10
 80048f0:	2100      	movs	r1, #0
 80048f2:	f000 fb79 	bl	8004fe8 <strtol>
 80048f6:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
					heating_info = (strtok(NULL, ","));
 80048fa:	4629      	mov	r1, r5
 80048fc:	2000      	movs	r0, #0
 80048fe:	f000 fa9f 	bl	8004e40 <strtok>
 8004902:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8004904:	220a      	movs	r2, #10
 8004906:	2100      	movs	r1, #0
 8004908:	f000 fb6e 	bl	8004fe8 <strtol>
 800490c:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
					heating_info = (strtok(NULL, ","));
 8004910:	4629      	mov	r1, r5
 8004912:	2000      	movs	r0, #0
 8004914:	f000 fa94 	bl	8004e40 <strtok>
 8004918:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 800491a:	220a      	movs	r2, #10
 800491c:	2100      	movs	r1, #0
 800491e:	f000 fb63 	bl	8004fe8 <strtol>
 8004922:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
					heating_info = (strtok(NULL, ","));
 8004926:	4629      	mov	r1, r5
 8004928:	2000      	movs	r0, #0
 800492a:	f000 fa89 	bl	8004e40 <strtok>
 800492e:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8004930:	220a      	movs	r2, #10
 8004932:	2100      	movs	r1, #0
 8004934:	f000 fb58 	bl	8004fe8 <strtol>
 8004938:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
					heating_info = (strtok(NULL, "\r\n"));
 800493c:	497c      	ldr	r1, [pc, #496]	; (8004b30 <uart_comms+0x8e4>)
 800493e:	2000      	movs	r0, #0
 8004940:	f000 fa7e 	bl	8004e40 <strtok>
 8004944:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8004946:	220a      	movs	r2, #10
 8004948:	2100      	movs	r1, #0
 800494a:	f000 fb4d 	bl	8004fe8 <strtol>
 800494e:	f886 003e 	strb.w	r0, [r6, #62]	; 0x3e
 8004952:	e4e2      	b.n	800431a <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8004954:	4c77      	ldr	r4, [pc, #476]	; (8004b34 <uart_comms+0x8e8>)
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	8812      	ldrh	r2, [r2, #0]
 800495a:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	4d76      	ldr	r5, [pc, #472]	; (8004b38 <uart_comms+0x8ec>)
 8004960:	782f      	ldrb	r7, [r5, #0]
 8004962:	709f      	strb	r7, [r3, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8004964:	6826      	ldr	r6, [r4, #0]
 8004966:	3603      	adds	r6, #3
 8004968:	4b74      	ldr	r3, [pc, #464]	; (8004b3c <uart_comms+0x8f0>)
 800496a:	f8d3 8000 	ldr.w	r8, [r3]
 800496e:	4640      	mov	r0, r8
 8004970:	f7fb fc2e 	bl	80001d0 <strlen>
 8004974:	4602      	mov	r2, r0
 8004976:	4641      	mov	r1, r8
 8004978:	4630      	mov	r0, r6
 800497a:	f000 f96d 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800497e:	6826      	ldr	r6, [r4, #0]
 8004980:	4630      	mov	r0, r6
 8004982:	f7fb fc25 	bl	80001d0 <strlen>
 8004986:	5437      	strb	r7, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8004988:	6826      	ldr	r6, [r4, #0]
 800498a:	4630      	mov	r0, r6
 800498c:	f7fb fc20 	bl	80001d0 <strlen>
 8004990:	4406      	add	r6, r0
 8004992:	4b6b      	ldr	r3, [pc, #428]	; (8004b40 <uart_comms+0x8f4>)
 8004994:	681f      	ldr	r7, [r3, #0]
 8004996:	4638      	mov	r0, r7
 8004998:	f7fb fc1a 	bl	80001d0 <strlen>
 800499c:	4602      	mov	r2, r0
 800499e:	4639      	mov	r1, r7
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f959 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80049a6:	6826      	ldr	r6, [r4, #0]
 80049a8:	4630      	mov	r0, r6
 80049aa:	f7fb fc11 	bl	80001d0 <strlen>
 80049ae:	782b      	ldrb	r3, [r5, #0]
 80049b0:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 80049b2:	6826      	ldr	r6, [r4, #0]
 80049b4:	4630      	mov	r0, r6
 80049b6:	f7fb fc0b 	bl	80001d0 <strlen>
 80049ba:	4406      	add	r6, r0
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <uart_comms+0x8f8>)
 80049be:	681f      	ldr	r7, [r3, #0]
 80049c0:	4638      	mov	r0, r7
 80049c2:	f7fb fc05 	bl	80001d0 <strlen>
 80049c6:	4602      	mov	r2, r0
 80049c8:	4639      	mov	r1, r7
 80049ca:	4630      	mov	r0, r6
 80049cc:	f000 f944 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80049d0:	6826      	ldr	r6, [r4, #0]
 80049d2:	4630      	mov	r0, r6
 80049d4:	f7fb fbfc 	bl	80001d0 <strlen>
 80049d8:	782b      	ldrb	r3, [r5, #0]
 80049da:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 80049dc:	6826      	ldr	r6, [r4, #0]
 80049de:	4630      	mov	r0, r6
 80049e0:	f7fb fbf6 	bl	80001d0 <strlen>
 80049e4:	4406      	add	r6, r0
 80049e6:	4b58      	ldr	r3, [pc, #352]	; (8004b48 <uart_comms+0x8fc>)
 80049e8:	681f      	ldr	r7, [r3, #0]
 80049ea:	4638      	mov	r0, r7
 80049ec:	f7fb fbf0 	bl	80001d0 <strlen>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4639      	mov	r1, r7
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 f92f 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80049fa:	6826      	ldr	r6, [r4, #0]
 80049fc:	4630      	mov	r0, r6
 80049fe:	f7fb fbe7 	bl	80001d0 <strlen>
 8004a02:	782b      	ldrb	r3, [r5, #0]
 8004a04:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8004a06:	6826      	ldr	r6, [r4, #0]
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f7fb fbe1 	bl	80001d0 <strlen>
 8004a0e:	4406      	add	r6, r0
 8004a10:	4b4e      	ldr	r3, [pc, #312]	; (8004b4c <uart_comms+0x900>)
 8004a12:	681f      	ldr	r7, [r3, #0]
 8004a14:	4638      	mov	r0, r7
 8004a16:	f7fb fbdb 	bl	80001d0 <strlen>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f000 f91a 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004a24:	6826      	ldr	r6, [r4, #0]
 8004a26:	4630      	mov	r0, r6
 8004a28:	f7fb fbd2 	bl	80001d0 <strlen>
 8004a2c:	782b      	ldrb	r3, [r5, #0]
 8004a2e:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8004a30:	6826      	ldr	r6, [r4, #0]
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7fb fbcc 	bl	80001d0 <strlen>
 8004a38:	4406      	add	r6, r0
 8004a3a:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <uart_comms+0x904>)
 8004a3c:	681f      	ldr	r7, [r3, #0]
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f7fb fbc6 	bl	80001d0 <strlen>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4639      	mov	r1, r7
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f905 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004a4e:	6824      	ldr	r4, [r4, #0]
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7fb fbbd 	bl	80001d0 <strlen>
 8004a56:	782b      	ldrb	r3, [r5, #0]
 8004a58:	5423      	strb	r3, [r4, r0]
			if(valve_state == valve_OPEN){
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <uart_comms+0x908>)
 8004a5c:	681c      	ldr	r4, [r3, #0]
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	; (8004b58 <uart_comms+0x90c>)
 8004a60:	429c      	cmp	r4, r3
 8004a62:	d01f      	beq.n	8004aa4 <uart_comms+0x858>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 8004a64:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <uart_comms+0x8e8>)
 8004a66:	681d      	ldr	r5, [r3, #0]
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f7fb fbb1 	bl	80001d0 <strlen>
 8004a6e:	4405      	add	r5, r0
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7fb fbad 	bl	80001d0 <strlen>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f000 f8ec 	bl	8004c58 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8004a80:	4c2c      	ldr	r4, [pc, #176]	; (8004b34 <uart_comms+0x8e8>)
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	4628      	mov	r0, r5
 8004a86:	f7fb fba3 	bl	80001d0 <strlen>
 8004a8a:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <uart_comms+0x910>)
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8004a90:	6824      	ldr	r4, [r4, #0]
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7fb fb9c 	bl	80001d0 <strlen>
 8004a98:	b282      	uxth	r2, r0
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4830      	ldr	r0, [pc, #192]	; (8004b60 <uart_comms+0x914>)
 8004a9e:	f7fd ff44 	bl	800292a <HAL_UART_Transmit_IT>
			break;
 8004aa2:	e43a      	b.n	800431a <uart_comms+0xce>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <uart_comms+0x8e8>)
 8004aa6:	681d      	ldr	r5, [r3, #0]
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f7fb fb91 	bl	80001d0 <strlen>
 8004aae:	4405      	add	r5, r0
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7fb fb8d 	bl	80001d0 <strlen>
 8004ab6:	1e42      	subs	r2, r0, #1
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 f8cc 	bl	8004c58 <memcpy>
 8004ac0:	e7de      	b.n	8004a80 <uart_comms+0x834>
			log_receiced_num = uart_command[3] - 48;
 8004ac2:	78d3      	ldrb	r3, [r2, #3]
 8004ac4:	3b30      	subs	r3, #48	; 0x30
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	4a26      	ldr	r2, [pc, #152]	; (8004b64 <uart_comms+0x918>)
 8004aca:	7013      	strb	r3, [r2, #0]
			if(log_receiced_num > log_counter && log_full == 0){
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <uart_comms+0x91c>)
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d904      	bls.n	8004ade <uart_comms+0x892>
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <uart_comms+0x920>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f43f ac1e 	beq.w	800431a <uart_comms+0xce>
				memcpy(flash_stored, flash_mem_start, 50 );
 8004ade:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <uart_comms+0x924>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <uart_comms+0x928>)
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004aea:	681e      	ldr	r6, [r3, #0]
 8004aec:	685d      	ldr	r5, [r3, #4]
 8004aee:	689c      	ldr	r4, [r3, #8]
 8004af0:	68d8      	ldr	r0, [r3, #12]
 8004af2:	6016      	str	r6, [r2, #0]
 8004af4:	6055      	str	r5, [r2, #4]
 8004af6:	6094      	str	r4, [r2, #8]
 8004af8:	60d0      	str	r0, [r2, #12]
 8004afa:	3310      	adds	r3, #16
 8004afc:	3210      	adds	r2, #16
 8004afe:	428b      	cmp	r3, r1
 8004b00:	d1f3      	bne.n	8004aea <uart_comms+0x89e>
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	8013      	strh	r3, [r2, #0]
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)flash_stored, strlen((char*)flash_stored));
 8004b06:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <uart_comms+0x928>)
 8004b08:	681c      	ldr	r4, [r3, #0]
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7fb fb60 	bl	80001d0 <strlen>
 8004b10:	b282      	uxth	r2, r0
 8004b12:	4621      	mov	r1, r4
 8004b14:	4812      	ldr	r0, [pc, #72]	; (8004b60 <uart_comms+0x914>)
 8004b16:	f7fd ff08 	bl	800292a <HAL_UART_Transmit_IT>
 8004b1a:	f7ff bbfe 	b.w	800431a <uart_comms+0xce>
 8004b1e:	bf00      	nop
 8004b20:	080057d8 	.word	0x080057d8
 8004b24:	20000294 	.word	0x20000294
 8004b28:	2000025c 	.word	0x2000025c
 8004b2c:	200004d0 	.word	0x200004d0
 8004b30:	080057e0 	.word	0x080057e0
 8004b34:	20000268 	.word	0x20000268
 8004b38:	20000004 	.word	0x20000004
 8004b3c:	20000234 	.word	0x20000234
 8004b40:	200002a4 	.word	0x200002a4
 8004b44:	20000228 	.word	0x20000228
 8004b48:	20000248 	.word	0x20000248
 8004b4c:	20000288 	.word	0x20000288
 8004b50:	20000258 	.word	0x20000258
 8004b54:	2000029c 	.word	0x2000029c
 8004b58:	2000002c 	.word	0x2000002c
 8004b5c:	20000008 	.word	0x20000008
 8004b60:	200003a4 	.word	0x200003a4
 8004b64:	20000262 	.word	0x20000262
 8004b68:	20000260 	.word	0x20000260
 8004b6c:	20000261 	.word	0x20000261
 8004b70:	20000010 	.word	0x20000010
 8004b74:	20000244 	.word	0x20000244

08004b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bb0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004b7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004b7e:	e003      	b.n	8004b88 <LoopCopyDataInit>

08004b80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004b82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004b84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004b86:	3104      	adds	r1, #4

08004b88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004b88:	480b      	ldr	r0, [pc, #44]	; (8004bb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8004b8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004b8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004b90:	d3f6      	bcc.n	8004b80 <CopyDataInit>
	ldr	r2, =_sbss
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004b94:	e002      	b.n	8004b9c <LoopFillZerobss>

08004b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004b96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004b98:	f842 3b04 	str.w	r3, [r2], #4

08004b9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <LoopForever+0x16>)
	cmp	r2, r3
 8004b9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ba0:	d3f9      	bcc.n	8004b96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ba2:	f7ff fb1f 	bl	80041e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ba6:	f000 f811 	bl	8004bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004baa:	f7fe fe77 	bl	800389c <main>

08004bae <LoopForever>:

LoopForever:
    b LoopForever
 8004bae:	e7fe      	b.n	8004bae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004bb0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004bb4:	08005950 	.word	0x08005950
	ldr	r0, =_sdata
 8004bb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004bbc:	20000200 	.word	0x20000200
	ldr	r2, =_sbss
 8004bc0:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 8004bc4:	20000564 	.word	0x20000564

08004bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bc8:	e7fe      	b.n	8004bc8 <ADC1_2_IRQHandler>
	...

08004bcc <__libc_init_array>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	4e0d      	ldr	r6, [pc, #52]	; (8004c04 <__libc_init_array+0x38>)
 8004bd0:	4c0d      	ldr	r4, [pc, #52]	; (8004c08 <__libc_init_array+0x3c>)
 8004bd2:	1ba4      	subs	r4, r4, r6
 8004bd4:	10a4      	asrs	r4, r4, #2
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	42a5      	cmp	r5, r4
 8004bda:	d109      	bne.n	8004bf0 <__libc_init_array+0x24>
 8004bdc:	4e0b      	ldr	r6, [pc, #44]	; (8004c0c <__libc_init_array+0x40>)
 8004bde:	4c0c      	ldr	r4, [pc, #48]	; (8004c10 <__libc_init_array+0x44>)
 8004be0:	f000 fdb8 	bl	8005754 <_init>
 8004be4:	1ba4      	subs	r4, r4, r6
 8004be6:	10a4      	asrs	r4, r4, #2
 8004be8:	2500      	movs	r5, #0
 8004bea:	42a5      	cmp	r5, r4
 8004bec:	d105      	bne.n	8004bfa <__libc_init_array+0x2e>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bf4:	4798      	blx	r3
 8004bf6:	3501      	adds	r5, #1
 8004bf8:	e7ee      	b.n	8004bd8 <__libc_init_array+0xc>
 8004bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bfe:	4798      	blx	r3
 8004c00:	3501      	adds	r5, #1
 8004c02:	e7f2      	b.n	8004bea <__libc_init_array+0x1e>
 8004c04:	08005948 	.word	0x08005948
 8004c08:	08005948 	.word	0x08005948
 8004c0c:	08005948 	.word	0x08005948
 8004c10:	0800594c 	.word	0x0800594c

08004c14 <__itoa>:
 8004c14:	1e93      	subs	r3, r2, #2
 8004c16:	2b22      	cmp	r3, #34	; 0x22
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	d904      	bls.n	8004c28 <__itoa+0x14>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	700b      	strb	r3, [r1, #0]
 8004c22:	461c      	mov	r4, r3
 8004c24:	4620      	mov	r0, r4
 8004c26:	bd10      	pop	{r4, pc}
 8004c28:	2a0a      	cmp	r2, #10
 8004c2a:	d109      	bne.n	8004c40 <__itoa+0x2c>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	da07      	bge.n	8004c40 <__itoa+0x2c>
 8004c30:	232d      	movs	r3, #45	; 0x2d
 8004c32:	700b      	strb	r3, [r1, #0]
 8004c34:	4240      	negs	r0, r0
 8004c36:	2101      	movs	r1, #1
 8004c38:	4421      	add	r1, r4
 8004c3a:	f000 f9eb 	bl	8005014 <__utoa>
 8004c3e:	e7f1      	b.n	8004c24 <__itoa+0x10>
 8004c40:	2100      	movs	r1, #0
 8004c42:	e7f9      	b.n	8004c38 <__itoa+0x24>

08004c44 <itoa>:
 8004c44:	f7ff bfe6 	b.w	8004c14 <__itoa>

08004c48 <malloc>:
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <malloc+0xc>)
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	f000 b865 	b.w	8004d1c <_malloc_r>
 8004c52:	bf00      	nop
 8004c54:	20000030 	.word	0x20000030

08004c58 <memcpy>:
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	1e43      	subs	r3, r0, #1
 8004c5c:	440a      	add	r2, r1
 8004c5e:	4291      	cmp	r1, r2
 8004c60:	d100      	bne.n	8004c64 <memcpy+0xc>
 8004c62:	bd10      	pop	{r4, pc}
 8004c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c6c:	e7f7      	b.n	8004c5e <memcpy+0x6>

08004c6e <memset>:
 8004c6e:	4402      	add	r2, r0
 8004c70:	4603      	mov	r3, r0
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d100      	bne.n	8004c78 <memset+0xa>
 8004c76:	4770      	bx	lr
 8004c78:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7c:	e7f9      	b.n	8004c72 <memset+0x4>
	...

08004c80 <_free_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	4605      	mov	r5, r0
 8004c84:	2900      	cmp	r1, #0
 8004c86:	d045      	beq.n	8004d14 <_free_r+0x94>
 8004c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c8c:	1f0c      	subs	r4, r1, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bfb8      	it	lt
 8004c92:	18e4      	addlt	r4, r4, r3
 8004c94:	f000 fa13 	bl	80050be <__malloc_lock>
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <_free_r+0x98>)
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	b933      	cbnz	r3, 8004cae <_free_r+0x2e>
 8004ca0:	6063      	str	r3, [r4, #4]
 8004ca2:	6014      	str	r4, [r2, #0]
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004caa:	f000 ba09 	b.w	80050c0 <__malloc_unlock>
 8004cae:	42a3      	cmp	r3, r4
 8004cb0:	d90c      	bls.n	8004ccc <_free_r+0x4c>
 8004cb2:	6821      	ldr	r1, [r4, #0]
 8004cb4:	1862      	adds	r2, r4, r1
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bf04      	itt	eq
 8004cba:	681a      	ldreq	r2, [r3, #0]
 8004cbc:	685b      	ldreq	r3, [r3, #4]
 8004cbe:	6063      	str	r3, [r4, #4]
 8004cc0:	bf04      	itt	eq
 8004cc2:	1852      	addeq	r2, r2, r1
 8004cc4:	6022      	streq	r2, [r4, #0]
 8004cc6:	6004      	str	r4, [r0, #0]
 8004cc8:	e7ec      	b.n	8004ca4 <_free_r+0x24>
 8004cca:	4613      	mov	r3, r2
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	b10a      	cbz	r2, 8004cd4 <_free_r+0x54>
 8004cd0:	42a2      	cmp	r2, r4
 8004cd2:	d9fa      	bls.n	8004cca <_free_r+0x4a>
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	1858      	adds	r0, r3, r1
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	d10b      	bne.n	8004cf4 <_free_r+0x74>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	4401      	add	r1, r0
 8004ce0:	1858      	adds	r0, r3, r1
 8004ce2:	4282      	cmp	r2, r0
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	d1dd      	bne.n	8004ca4 <_free_r+0x24>
 8004ce8:	6810      	ldr	r0, [r2, #0]
 8004cea:	6852      	ldr	r2, [r2, #4]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	4401      	add	r1, r0
 8004cf0:	6019      	str	r1, [r3, #0]
 8004cf2:	e7d7      	b.n	8004ca4 <_free_r+0x24>
 8004cf4:	d902      	bls.n	8004cfc <_free_r+0x7c>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	602b      	str	r3, [r5, #0]
 8004cfa:	e7d3      	b.n	8004ca4 <_free_r+0x24>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	1821      	adds	r1, r4, r0
 8004d00:	428a      	cmp	r2, r1
 8004d02:	bf04      	itt	eq
 8004d04:	6811      	ldreq	r1, [r2, #0]
 8004d06:	6852      	ldreq	r2, [r2, #4]
 8004d08:	6062      	str	r2, [r4, #4]
 8004d0a:	bf04      	itt	eq
 8004d0c:	1809      	addeq	r1, r1, r0
 8004d0e:	6021      	streq	r1, [r4, #0]
 8004d10:	605c      	str	r4, [r3, #4]
 8004d12:	e7c7      	b.n	8004ca4 <_free_r+0x24>
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
 8004d16:	bf00      	nop
 8004d18:	200002ac 	.word	0x200002ac

08004d1c <_malloc_r>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	1ccd      	adds	r5, r1, #3
 8004d20:	f025 0503 	bic.w	r5, r5, #3
 8004d24:	3508      	adds	r5, #8
 8004d26:	2d0c      	cmp	r5, #12
 8004d28:	bf38      	it	cc
 8004d2a:	250c      	movcc	r5, #12
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	4606      	mov	r6, r0
 8004d30:	db01      	blt.n	8004d36 <_malloc_r+0x1a>
 8004d32:	42a9      	cmp	r1, r5
 8004d34:	d903      	bls.n	8004d3e <_malloc_r+0x22>
 8004d36:	230c      	movs	r3, #12
 8004d38:	6033      	str	r3, [r6, #0]
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	f000 f9be 	bl	80050be <__malloc_lock>
 8004d42:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <_malloc_r+0xb4>)
 8004d44:	6814      	ldr	r4, [r2, #0]
 8004d46:	4621      	mov	r1, r4
 8004d48:	b991      	cbnz	r1, 8004d70 <_malloc_r+0x54>
 8004d4a:	4c22      	ldr	r4, [pc, #136]	; (8004dd4 <_malloc_r+0xb8>)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	b91b      	cbnz	r3, 8004d58 <_malloc_r+0x3c>
 8004d50:	4630      	mov	r0, r6
 8004d52:	f000 f841 	bl	8004dd8 <_sbrk_r>
 8004d56:	6020      	str	r0, [r4, #0]
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f000 f83c 	bl	8004dd8 <_sbrk_r>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d126      	bne.n	8004db2 <_malloc_r+0x96>
 8004d64:	230c      	movs	r3, #12
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 f9a9 	bl	80050c0 <__malloc_unlock>
 8004d6e:	e7e4      	b.n	8004d3a <_malloc_r+0x1e>
 8004d70:	680b      	ldr	r3, [r1, #0]
 8004d72:	1b5b      	subs	r3, r3, r5
 8004d74:	d41a      	bmi.n	8004dac <_malloc_r+0x90>
 8004d76:	2b0b      	cmp	r3, #11
 8004d78:	d90f      	bls.n	8004d9a <_malloc_r+0x7e>
 8004d7a:	600b      	str	r3, [r1, #0]
 8004d7c:	50cd      	str	r5, [r1, r3]
 8004d7e:	18cc      	adds	r4, r1, r3
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 f99d 	bl	80050c0 <__malloc_unlock>
 8004d86:	f104 000b 	add.w	r0, r4, #11
 8004d8a:	1d23      	adds	r3, r4, #4
 8004d8c:	f020 0007 	bic.w	r0, r0, #7
 8004d90:	1ac3      	subs	r3, r0, r3
 8004d92:	d01b      	beq.n	8004dcc <_malloc_r+0xb0>
 8004d94:	425a      	negs	r2, r3
 8004d96:	50e2      	str	r2, [r4, r3]
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	428c      	cmp	r4, r1
 8004d9c:	bf0d      	iteet	eq
 8004d9e:	6863      	ldreq	r3, [r4, #4]
 8004da0:	684b      	ldrne	r3, [r1, #4]
 8004da2:	6063      	strne	r3, [r4, #4]
 8004da4:	6013      	streq	r3, [r2, #0]
 8004da6:	bf18      	it	ne
 8004da8:	460c      	movne	r4, r1
 8004daa:	e7e9      	b.n	8004d80 <_malloc_r+0x64>
 8004dac:	460c      	mov	r4, r1
 8004dae:	6849      	ldr	r1, [r1, #4]
 8004db0:	e7ca      	b.n	8004d48 <_malloc_r+0x2c>
 8004db2:	1cc4      	adds	r4, r0, #3
 8004db4:	f024 0403 	bic.w	r4, r4, #3
 8004db8:	42a0      	cmp	r0, r4
 8004dba:	d005      	beq.n	8004dc8 <_malloc_r+0xac>
 8004dbc:	1a21      	subs	r1, r4, r0
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f000 f80a 	bl	8004dd8 <_sbrk_r>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d0cd      	beq.n	8004d64 <_malloc_r+0x48>
 8004dc8:	6025      	str	r5, [r4, #0]
 8004dca:	e7d9      	b.n	8004d80 <_malloc_r+0x64>
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	bf00      	nop
 8004dd0:	200002ac 	.word	0x200002ac
 8004dd4:	200002b0 	.word	0x200002b0

08004dd8 <_sbrk_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4c06      	ldr	r4, [pc, #24]	; (8004df4 <_sbrk_r+0x1c>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4605      	mov	r5, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	f000 fca8 	bl	8005738 <_sbrk>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_sbrk_r+0x1a>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_sbrk_r+0x1a>
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	20000560 	.word	0x20000560

08004df8 <siprintf>:
 8004df8:	b40e      	push	{r1, r2, r3}
 8004dfa:	b500      	push	{lr}
 8004dfc:	b09c      	sub	sp, #112	; 0x70
 8004dfe:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004e02:	ab1d      	add	r3, sp, #116	; 0x74
 8004e04:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004e08:	9002      	str	r0, [sp, #8]
 8004e0a:	9006      	str	r0, [sp, #24]
 8004e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e10:	480a      	ldr	r0, [pc, #40]	; (8004e3c <siprintf+0x44>)
 8004e12:	9104      	str	r1, [sp, #16]
 8004e14:	9107      	str	r1, [sp, #28]
 8004e16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004e22:	6800      	ldr	r0, [r0, #0]
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	a902      	add	r1, sp, #8
 8004e28:	f000 f9a6 	bl	8005178 <_svfiprintf_r>
 8004e2c:	9b02      	ldr	r3, [sp, #8]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	b01c      	add	sp, #112	; 0x70
 8004e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e38:	b003      	add	sp, #12
 8004e3a:	4770      	bx	lr
 8004e3c:	20000030 	.word	0x20000030

08004e40 <strtok>:
 8004e40:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <strtok+0x50>)
 8004e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e46:	681d      	ldr	r5, [r3, #0]
 8004e48:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	460f      	mov	r7, r1
 8004e4e:	b9b4      	cbnz	r4, 8004e7e <strtok+0x3e>
 8004e50:	2050      	movs	r0, #80	; 0x50
 8004e52:	f7ff fef9 	bl	8004c48 <malloc>
 8004e56:	65a8      	str	r0, [r5, #88]	; 0x58
 8004e58:	6004      	str	r4, [r0, #0]
 8004e5a:	6044      	str	r4, [r0, #4]
 8004e5c:	6084      	str	r4, [r0, #8]
 8004e5e:	60c4      	str	r4, [r0, #12]
 8004e60:	6104      	str	r4, [r0, #16]
 8004e62:	6144      	str	r4, [r0, #20]
 8004e64:	6184      	str	r4, [r0, #24]
 8004e66:	6284      	str	r4, [r0, #40]	; 0x28
 8004e68:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004e6a:	6304      	str	r4, [r0, #48]	; 0x30
 8004e6c:	6344      	str	r4, [r0, #52]	; 0x34
 8004e6e:	6384      	str	r4, [r0, #56]	; 0x38
 8004e70:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004e72:	6404      	str	r4, [r0, #64]	; 0x40
 8004e74:	6444      	str	r4, [r0, #68]	; 0x44
 8004e76:	6484      	str	r4, [r0, #72]	; 0x48
 8004e78:	64c4      	str	r4, [r0, #76]	; 0x4c
 8004e7a:	7704      	strb	r4, [r0, #28]
 8004e7c:	6244      	str	r4, [r0, #36]	; 0x24
 8004e7e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004e80:	4639      	mov	r1, r7
 8004e82:	4630      	mov	r0, r6
 8004e84:	2301      	movs	r3, #1
 8004e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8a:	f000 b803 	b.w	8004e94 <__strtok_r>
 8004e8e:	bf00      	nop
 8004e90:	20000030 	.word	0x20000030

08004e94 <__strtok_r>:
 8004e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e96:	b918      	cbnz	r0, 8004ea0 <__strtok_r+0xc>
 8004e98:	6810      	ldr	r0, [r2, #0]
 8004e9a:	b908      	cbnz	r0, 8004ea0 <__strtok_r+0xc>
 8004e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460f      	mov	r7, r1
 8004ea4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ea8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004eac:	b91e      	cbnz	r6, 8004eb6 <__strtok_r+0x22>
 8004eae:	b965      	cbnz	r5, 8004eca <__strtok_r+0x36>
 8004eb0:	6015      	str	r5, [r2, #0]
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb6:	42b5      	cmp	r5, r6
 8004eb8:	d1f6      	bne.n	8004ea8 <__strtok_r+0x14>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ef      	bne.n	8004e9e <__strtok_r+0xa>
 8004ebe:	6014      	str	r4, [r2, #0]
 8004ec0:	7003      	strb	r3, [r0, #0]
 8004ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec4:	461c      	mov	r4, r3
 8004ec6:	e00c      	b.n	8004ee2 <__strtok_r+0x4e>
 8004ec8:	b915      	cbnz	r5, 8004ed0 <__strtok_r+0x3c>
 8004eca:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ece:	460e      	mov	r6, r1
 8004ed0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004ed4:	42ab      	cmp	r3, r5
 8004ed6:	d1f7      	bne.n	8004ec8 <__strtok_r+0x34>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f3      	beq.n	8004ec4 <__strtok_r+0x30>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ee2:	6014      	str	r4, [r2, #0]
 8004ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ee6 <_strtol_l.isra.0>:
 8004ee6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eea:	4680      	mov	r8, r0
 8004eec:	4689      	mov	r9, r1
 8004eee:	4692      	mov	sl, r2
 8004ef0:	461f      	mov	r7, r3
 8004ef2:	468b      	mov	fp, r1
 8004ef4:	465d      	mov	r5, fp
 8004ef6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004efc:	f000 f8ca 	bl	8005094 <__locale_ctype_ptr_l>
 8004f00:	4420      	add	r0, r4
 8004f02:	7846      	ldrb	r6, [r0, #1]
 8004f04:	f016 0608 	ands.w	r6, r6, #8
 8004f08:	d10b      	bne.n	8004f22 <_strtol_l.isra.0+0x3c>
 8004f0a:	2c2d      	cmp	r4, #45	; 0x2d
 8004f0c:	d10b      	bne.n	8004f26 <_strtol_l.isra.0+0x40>
 8004f0e:	782c      	ldrb	r4, [r5, #0]
 8004f10:	2601      	movs	r6, #1
 8004f12:	f10b 0502 	add.w	r5, fp, #2
 8004f16:	b167      	cbz	r7, 8004f32 <_strtol_l.isra.0+0x4c>
 8004f18:	2f10      	cmp	r7, #16
 8004f1a:	d114      	bne.n	8004f46 <_strtol_l.isra.0+0x60>
 8004f1c:	2c30      	cmp	r4, #48	; 0x30
 8004f1e:	d00a      	beq.n	8004f36 <_strtol_l.isra.0+0x50>
 8004f20:	e011      	b.n	8004f46 <_strtol_l.isra.0+0x60>
 8004f22:	46ab      	mov	fp, r5
 8004f24:	e7e6      	b.n	8004ef4 <_strtol_l.isra.0+0xe>
 8004f26:	2c2b      	cmp	r4, #43	; 0x2b
 8004f28:	bf04      	itt	eq
 8004f2a:	782c      	ldrbeq	r4, [r5, #0]
 8004f2c:	f10b 0502 	addeq.w	r5, fp, #2
 8004f30:	e7f1      	b.n	8004f16 <_strtol_l.isra.0+0x30>
 8004f32:	2c30      	cmp	r4, #48	; 0x30
 8004f34:	d127      	bne.n	8004f86 <_strtol_l.isra.0+0xa0>
 8004f36:	782b      	ldrb	r3, [r5, #0]
 8004f38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f3c:	2b58      	cmp	r3, #88	; 0x58
 8004f3e:	d14b      	bne.n	8004fd8 <_strtol_l.isra.0+0xf2>
 8004f40:	786c      	ldrb	r4, [r5, #1]
 8004f42:	2710      	movs	r7, #16
 8004f44:	3502      	adds	r5, #2
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	bf0c      	ite	eq
 8004f4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004f4e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004f52:	2200      	movs	r2, #0
 8004f54:	fbb1 fef7 	udiv	lr, r1, r7
 8004f58:	4610      	mov	r0, r2
 8004f5a:	fb07 1c1e 	mls	ip, r7, lr, r1
 8004f5e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004f62:	2b09      	cmp	r3, #9
 8004f64:	d811      	bhi.n	8004f8a <_strtol_l.isra.0+0xa4>
 8004f66:	461c      	mov	r4, r3
 8004f68:	42a7      	cmp	r7, r4
 8004f6a:	dd1d      	ble.n	8004fa8 <_strtol_l.isra.0+0xc2>
 8004f6c:	1c53      	adds	r3, r2, #1
 8004f6e:	d007      	beq.n	8004f80 <_strtol_l.isra.0+0x9a>
 8004f70:	4586      	cmp	lr, r0
 8004f72:	d316      	bcc.n	8004fa2 <_strtol_l.isra.0+0xbc>
 8004f74:	d101      	bne.n	8004f7a <_strtol_l.isra.0+0x94>
 8004f76:	45a4      	cmp	ip, r4
 8004f78:	db13      	blt.n	8004fa2 <_strtol_l.isra.0+0xbc>
 8004f7a:	fb00 4007 	mla	r0, r0, r7, r4
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f84:	e7eb      	b.n	8004f5e <_strtol_l.isra.0+0x78>
 8004f86:	270a      	movs	r7, #10
 8004f88:	e7dd      	b.n	8004f46 <_strtol_l.isra.0+0x60>
 8004f8a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004f8e:	2b19      	cmp	r3, #25
 8004f90:	d801      	bhi.n	8004f96 <_strtol_l.isra.0+0xb0>
 8004f92:	3c37      	subs	r4, #55	; 0x37
 8004f94:	e7e8      	b.n	8004f68 <_strtol_l.isra.0+0x82>
 8004f96:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004f9a:	2b19      	cmp	r3, #25
 8004f9c:	d804      	bhi.n	8004fa8 <_strtol_l.isra.0+0xc2>
 8004f9e:	3c57      	subs	r4, #87	; 0x57
 8004fa0:	e7e2      	b.n	8004f68 <_strtol_l.isra.0+0x82>
 8004fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa6:	e7eb      	b.n	8004f80 <_strtol_l.isra.0+0x9a>
 8004fa8:	1c53      	adds	r3, r2, #1
 8004faa:	d108      	bne.n	8004fbe <_strtol_l.isra.0+0xd8>
 8004fac:	2322      	movs	r3, #34	; 0x22
 8004fae:	f8c8 3000 	str.w	r3, [r8]
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	f1ba 0f00 	cmp.w	sl, #0
 8004fb8:	d107      	bne.n	8004fca <_strtol_l.isra.0+0xe4>
 8004fba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbe:	b106      	cbz	r6, 8004fc2 <_strtol_l.isra.0+0xdc>
 8004fc0:	4240      	negs	r0, r0
 8004fc2:	f1ba 0f00 	cmp.w	sl, #0
 8004fc6:	d00c      	beq.n	8004fe2 <_strtol_l.isra.0+0xfc>
 8004fc8:	b122      	cbz	r2, 8004fd4 <_strtol_l.isra.0+0xee>
 8004fca:	3d01      	subs	r5, #1
 8004fcc:	f8ca 5000 	str.w	r5, [sl]
 8004fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	464d      	mov	r5, r9
 8004fd6:	e7f9      	b.n	8004fcc <_strtol_l.isra.0+0xe6>
 8004fd8:	2430      	movs	r4, #48	; 0x30
 8004fda:	2f00      	cmp	r7, #0
 8004fdc:	d1b3      	bne.n	8004f46 <_strtol_l.isra.0+0x60>
 8004fde:	2708      	movs	r7, #8
 8004fe0:	e7b1      	b.n	8004f46 <_strtol_l.isra.0+0x60>
 8004fe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004fe8 <strtol>:
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <strtol+0x24>)
 8004fea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fec:	681c      	ldr	r4, [r3, #0]
 8004fee:	4d08      	ldr	r5, [pc, #32]	; (8005010 <strtol+0x28>)
 8004ff0:	6a23      	ldr	r3, [r4, #32]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf08      	it	eq
 8004ff6:	462b      	moveq	r3, r5
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	460a      	mov	r2, r1
 8004ffe:	4601      	mov	r1, r0
 8005000:	4620      	mov	r0, r4
 8005002:	f7ff ff70 	bl	8004ee6 <_strtol_l.isra.0>
 8005006:	b003      	add	sp, #12
 8005008:	bd30      	pop	{r4, r5, pc}
 800500a:	bf00      	nop
 800500c:	20000030 	.word	0x20000030
 8005010:	20000094 	.word	0x20000094

08005014 <__utoa>:
 8005014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005016:	4c1e      	ldr	r4, [pc, #120]	; (8005090 <__utoa+0x7c>)
 8005018:	b08b      	sub	sp, #44	; 0x2c
 800501a:	4603      	mov	r3, r0
 800501c:	460f      	mov	r7, r1
 800501e:	466d      	mov	r5, sp
 8005020:	f104 0e20 	add.w	lr, r4, #32
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	6861      	ldr	r1, [r4, #4]
 8005028:	462e      	mov	r6, r5
 800502a:	c603      	stmia	r6!, {r0, r1}
 800502c:	3408      	adds	r4, #8
 800502e:	4574      	cmp	r4, lr
 8005030:	4635      	mov	r5, r6
 8005032:	d1f7      	bne.n	8005024 <__utoa+0x10>
 8005034:	7921      	ldrb	r1, [r4, #4]
 8005036:	7131      	strb	r1, [r6, #4]
 8005038:	1e91      	subs	r1, r2, #2
 800503a:	6820      	ldr	r0, [r4, #0]
 800503c:	6030      	str	r0, [r6, #0]
 800503e:	2922      	cmp	r1, #34	; 0x22
 8005040:	f04f 0100 	mov.w	r1, #0
 8005044:	d904      	bls.n	8005050 <__utoa+0x3c>
 8005046:	7039      	strb	r1, [r7, #0]
 8005048:	460f      	mov	r7, r1
 800504a:	4638      	mov	r0, r7
 800504c:	b00b      	add	sp, #44	; 0x2c
 800504e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005050:	1e78      	subs	r0, r7, #1
 8005052:	4606      	mov	r6, r0
 8005054:	fbb3 f5f2 	udiv	r5, r3, r2
 8005058:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800505c:	fb02 3315 	mls	r3, r2, r5, r3
 8005060:	4473      	add	r3, lr
 8005062:	1c4c      	adds	r4, r1, #1
 8005064:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005068:	f806 3f01 	strb.w	r3, [r6, #1]!
 800506c:	462b      	mov	r3, r5
 800506e:	b965      	cbnz	r5, 800508a <__utoa+0x76>
 8005070:	553d      	strb	r5, [r7, r4]
 8005072:	187a      	adds	r2, r7, r1
 8005074:	1acc      	subs	r4, r1, r3
 8005076:	42a3      	cmp	r3, r4
 8005078:	dae7      	bge.n	800504a <__utoa+0x36>
 800507a:	7844      	ldrb	r4, [r0, #1]
 800507c:	7815      	ldrb	r5, [r2, #0]
 800507e:	f800 5f01 	strb.w	r5, [r0, #1]!
 8005082:	3301      	adds	r3, #1
 8005084:	f802 4901 	strb.w	r4, [r2], #-1
 8005088:	e7f4      	b.n	8005074 <__utoa+0x60>
 800508a:	4621      	mov	r1, r4
 800508c:	e7e2      	b.n	8005054 <__utoa+0x40>
 800508e:	bf00      	nop
 8005090:	080057e4 	.word	0x080057e4

08005094 <__locale_ctype_ptr_l>:
 8005094:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005098:	4770      	bx	lr

0800509a <__ascii_mbtowc>:
 800509a:	b082      	sub	sp, #8
 800509c:	b901      	cbnz	r1, 80050a0 <__ascii_mbtowc+0x6>
 800509e:	a901      	add	r1, sp, #4
 80050a0:	b142      	cbz	r2, 80050b4 <__ascii_mbtowc+0x1a>
 80050a2:	b14b      	cbz	r3, 80050b8 <__ascii_mbtowc+0x1e>
 80050a4:	7813      	ldrb	r3, [r2, #0]
 80050a6:	600b      	str	r3, [r1, #0]
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	1c10      	adds	r0, r2, #0
 80050ac:	bf18      	it	ne
 80050ae:	2001      	movne	r0, #1
 80050b0:	b002      	add	sp, #8
 80050b2:	4770      	bx	lr
 80050b4:	4610      	mov	r0, r2
 80050b6:	e7fb      	b.n	80050b0 <__ascii_mbtowc+0x16>
 80050b8:	f06f 0001 	mvn.w	r0, #1
 80050bc:	e7f8      	b.n	80050b0 <__ascii_mbtowc+0x16>

080050be <__malloc_lock>:
 80050be:	4770      	bx	lr

080050c0 <__malloc_unlock>:
 80050c0:	4770      	bx	lr

080050c2 <__ssputs_r>:
 80050c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c6:	688e      	ldr	r6, [r1, #8]
 80050c8:	429e      	cmp	r6, r3
 80050ca:	4682      	mov	sl, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	4691      	mov	r9, r2
 80050d0:	4698      	mov	r8, r3
 80050d2:	d835      	bhi.n	8005140 <__ssputs_r+0x7e>
 80050d4:	898a      	ldrh	r2, [r1, #12]
 80050d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050da:	d031      	beq.n	8005140 <__ssputs_r+0x7e>
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	6909      	ldr	r1, [r1, #16]
 80050e0:	1a6f      	subs	r7, r5, r1
 80050e2:	6965      	ldr	r5, [r4, #20]
 80050e4:	2302      	movs	r3, #2
 80050e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050ea:	fb95 f5f3 	sdiv	r5, r5, r3
 80050ee:	f108 0301 	add.w	r3, r8, #1
 80050f2:	443b      	add	r3, r7
 80050f4:	429d      	cmp	r5, r3
 80050f6:	bf38      	it	cc
 80050f8:	461d      	movcc	r5, r3
 80050fa:	0553      	lsls	r3, r2, #21
 80050fc:	d531      	bpl.n	8005162 <__ssputs_r+0xa0>
 80050fe:	4629      	mov	r1, r5
 8005100:	f7ff fe0c 	bl	8004d1c <_malloc_r>
 8005104:	4606      	mov	r6, r0
 8005106:	b950      	cbnz	r0, 800511e <__ssputs_r+0x5c>
 8005108:	230c      	movs	r3, #12
 800510a:	f8ca 3000 	str.w	r3, [sl]
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
 800511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511e:	463a      	mov	r2, r7
 8005120:	6921      	ldr	r1, [r4, #16]
 8005122:	f7ff fd99 	bl	8004c58 <memcpy>
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	6126      	str	r6, [r4, #16]
 8005134:	6165      	str	r5, [r4, #20]
 8005136:	443e      	add	r6, r7
 8005138:	1bed      	subs	r5, r5, r7
 800513a:	6026      	str	r6, [r4, #0]
 800513c:	60a5      	str	r5, [r4, #8]
 800513e:	4646      	mov	r6, r8
 8005140:	4546      	cmp	r6, r8
 8005142:	bf28      	it	cs
 8005144:	4646      	movcs	r6, r8
 8005146:	4632      	mov	r2, r6
 8005148:	4649      	mov	r1, r9
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	f000 faab 	bl	80056a6 <memmove>
 8005150:	68a3      	ldr	r3, [r4, #8]
 8005152:	1b9b      	subs	r3, r3, r6
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	441e      	add	r6, r3
 800515a:	6026      	str	r6, [r4, #0]
 800515c:	2000      	movs	r0, #0
 800515e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005162:	462a      	mov	r2, r5
 8005164:	f000 fab9 	bl	80056da <_realloc_r>
 8005168:	4606      	mov	r6, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	d1e1      	bne.n	8005132 <__ssputs_r+0x70>
 800516e:	6921      	ldr	r1, [r4, #16]
 8005170:	4650      	mov	r0, sl
 8005172:	f7ff fd85 	bl	8004c80 <_free_r>
 8005176:	e7c7      	b.n	8005108 <__ssputs_r+0x46>

08005178 <_svfiprintf_r>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	b09d      	sub	sp, #116	; 0x74
 800517e:	4680      	mov	r8, r0
 8005180:	9303      	str	r3, [sp, #12]
 8005182:	898b      	ldrh	r3, [r1, #12]
 8005184:	061c      	lsls	r4, r3, #24
 8005186:	460d      	mov	r5, r1
 8005188:	4616      	mov	r6, r2
 800518a:	d50f      	bpl.n	80051ac <_svfiprintf_r+0x34>
 800518c:	690b      	ldr	r3, [r1, #16]
 800518e:	b96b      	cbnz	r3, 80051ac <_svfiprintf_r+0x34>
 8005190:	2140      	movs	r1, #64	; 0x40
 8005192:	f7ff fdc3 	bl	8004d1c <_malloc_r>
 8005196:	6028      	str	r0, [r5, #0]
 8005198:	6128      	str	r0, [r5, #16]
 800519a:	b928      	cbnz	r0, 80051a8 <_svfiprintf_r+0x30>
 800519c:	230c      	movs	r3, #12
 800519e:	f8c8 3000 	str.w	r3, [r8]
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	e0c5      	b.n	8005334 <_svfiprintf_r+0x1bc>
 80051a8:	2340      	movs	r3, #64	; 0x40
 80051aa:	616b      	str	r3, [r5, #20]
 80051ac:	2300      	movs	r3, #0
 80051ae:	9309      	str	r3, [sp, #36]	; 0x24
 80051b0:	2320      	movs	r3, #32
 80051b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b6:	2330      	movs	r3, #48	; 0x30
 80051b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051bc:	f04f 0b01 	mov.w	fp, #1
 80051c0:	4637      	mov	r7, r6
 80051c2:	463c      	mov	r4, r7
 80051c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d13c      	bne.n	8005246 <_svfiprintf_r+0xce>
 80051cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80051d0:	d00b      	beq.n	80051ea <_svfiprintf_r+0x72>
 80051d2:	4653      	mov	r3, sl
 80051d4:	4632      	mov	r2, r6
 80051d6:	4629      	mov	r1, r5
 80051d8:	4640      	mov	r0, r8
 80051da:	f7ff ff72 	bl	80050c2 <__ssputs_r>
 80051de:	3001      	adds	r0, #1
 80051e0:	f000 80a3 	beq.w	800532a <_svfiprintf_r+0x1b2>
 80051e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e6:	4453      	add	r3, sl
 80051e8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ea:	783b      	ldrb	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 809c 	beq.w	800532a <_svfiprintf_r+0x1b2>
 80051f2:	2300      	movs	r3, #0
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	9304      	str	r3, [sp, #16]
 80051fa:	9307      	str	r3, [sp, #28]
 80051fc:	9205      	str	r2, [sp, #20]
 80051fe:	9306      	str	r3, [sp, #24]
 8005200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005204:	931a      	str	r3, [sp, #104]	; 0x68
 8005206:	2205      	movs	r2, #5
 8005208:	7821      	ldrb	r1, [r4, #0]
 800520a:	4850      	ldr	r0, [pc, #320]	; (800534c <_svfiprintf_r+0x1d4>)
 800520c:	f7fa ffe8 	bl	80001e0 <memchr>
 8005210:	1c67      	adds	r7, r4, #1
 8005212:	9b04      	ldr	r3, [sp, #16]
 8005214:	b9d8      	cbnz	r0, 800524e <_svfiprintf_r+0xd6>
 8005216:	06d9      	lsls	r1, r3, #27
 8005218:	bf44      	itt	mi
 800521a:	2220      	movmi	r2, #32
 800521c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005220:	071a      	lsls	r2, r3, #28
 8005222:	bf44      	itt	mi
 8005224:	222b      	movmi	r2, #43	; 0x2b
 8005226:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800522a:	7822      	ldrb	r2, [r4, #0]
 800522c:	2a2a      	cmp	r2, #42	; 0x2a
 800522e:	d016      	beq.n	800525e <_svfiprintf_r+0xe6>
 8005230:	9a07      	ldr	r2, [sp, #28]
 8005232:	2100      	movs	r1, #0
 8005234:	200a      	movs	r0, #10
 8005236:	4627      	mov	r7, r4
 8005238:	3401      	adds	r4, #1
 800523a:	783b      	ldrb	r3, [r7, #0]
 800523c:	3b30      	subs	r3, #48	; 0x30
 800523e:	2b09      	cmp	r3, #9
 8005240:	d951      	bls.n	80052e6 <_svfiprintf_r+0x16e>
 8005242:	b1c9      	cbz	r1, 8005278 <_svfiprintf_r+0x100>
 8005244:	e011      	b.n	800526a <_svfiprintf_r+0xf2>
 8005246:	2b25      	cmp	r3, #37	; 0x25
 8005248:	d0c0      	beq.n	80051cc <_svfiprintf_r+0x54>
 800524a:	4627      	mov	r7, r4
 800524c:	e7b9      	b.n	80051c2 <_svfiprintf_r+0x4a>
 800524e:	4a3f      	ldr	r2, [pc, #252]	; (800534c <_svfiprintf_r+0x1d4>)
 8005250:	1a80      	subs	r0, r0, r2
 8005252:	fa0b f000 	lsl.w	r0, fp, r0
 8005256:	4318      	orrs	r0, r3
 8005258:	9004      	str	r0, [sp, #16]
 800525a:	463c      	mov	r4, r7
 800525c:	e7d3      	b.n	8005206 <_svfiprintf_r+0x8e>
 800525e:	9a03      	ldr	r2, [sp, #12]
 8005260:	1d11      	adds	r1, r2, #4
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	9103      	str	r1, [sp, #12]
 8005266:	2a00      	cmp	r2, #0
 8005268:	db01      	blt.n	800526e <_svfiprintf_r+0xf6>
 800526a:	9207      	str	r2, [sp, #28]
 800526c:	e004      	b.n	8005278 <_svfiprintf_r+0x100>
 800526e:	4252      	negs	r2, r2
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	9207      	str	r2, [sp, #28]
 8005276:	9304      	str	r3, [sp, #16]
 8005278:	783b      	ldrb	r3, [r7, #0]
 800527a:	2b2e      	cmp	r3, #46	; 0x2e
 800527c:	d10e      	bne.n	800529c <_svfiprintf_r+0x124>
 800527e:	787b      	ldrb	r3, [r7, #1]
 8005280:	2b2a      	cmp	r3, #42	; 0x2a
 8005282:	f107 0101 	add.w	r1, r7, #1
 8005286:	d132      	bne.n	80052ee <_svfiprintf_r+0x176>
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	9203      	str	r2, [sp, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	bfb8      	it	lt
 8005294:	f04f 33ff 	movlt.w	r3, #4294967295
 8005298:	3702      	adds	r7, #2
 800529a:	9305      	str	r3, [sp, #20]
 800529c:	4c2c      	ldr	r4, [pc, #176]	; (8005350 <_svfiprintf_r+0x1d8>)
 800529e:	7839      	ldrb	r1, [r7, #0]
 80052a0:	2203      	movs	r2, #3
 80052a2:	4620      	mov	r0, r4
 80052a4:	f7fa ff9c 	bl	80001e0 <memchr>
 80052a8:	b138      	cbz	r0, 80052ba <_svfiprintf_r+0x142>
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	1b00      	subs	r0, r0, r4
 80052ae:	fa03 f000 	lsl.w	r0, r3, r0
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	4303      	orrs	r3, r0
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	3701      	adds	r7, #1
 80052ba:	7839      	ldrb	r1, [r7, #0]
 80052bc:	4825      	ldr	r0, [pc, #148]	; (8005354 <_svfiprintf_r+0x1dc>)
 80052be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052c2:	2206      	movs	r2, #6
 80052c4:	1c7e      	adds	r6, r7, #1
 80052c6:	f7fa ff8b 	bl	80001e0 <memchr>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d035      	beq.n	800533a <_svfiprintf_r+0x1c2>
 80052ce:	4b22      	ldr	r3, [pc, #136]	; (8005358 <_svfiprintf_r+0x1e0>)
 80052d0:	b9fb      	cbnz	r3, 8005312 <_svfiprintf_r+0x19a>
 80052d2:	9b03      	ldr	r3, [sp, #12]
 80052d4:	3307      	adds	r3, #7
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	3308      	adds	r3, #8
 80052dc:	9303      	str	r3, [sp, #12]
 80052de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e0:	444b      	add	r3, r9
 80052e2:	9309      	str	r3, [sp, #36]	; 0x24
 80052e4:	e76c      	b.n	80051c0 <_svfiprintf_r+0x48>
 80052e6:	fb00 3202 	mla	r2, r0, r2, r3
 80052ea:	2101      	movs	r1, #1
 80052ec:	e7a3      	b.n	8005236 <_svfiprintf_r+0xbe>
 80052ee:	2300      	movs	r3, #0
 80052f0:	9305      	str	r3, [sp, #20]
 80052f2:	4618      	mov	r0, r3
 80052f4:	240a      	movs	r4, #10
 80052f6:	460f      	mov	r7, r1
 80052f8:	3101      	adds	r1, #1
 80052fa:	783a      	ldrb	r2, [r7, #0]
 80052fc:	3a30      	subs	r2, #48	; 0x30
 80052fe:	2a09      	cmp	r2, #9
 8005300:	d903      	bls.n	800530a <_svfiprintf_r+0x192>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0ca      	beq.n	800529c <_svfiprintf_r+0x124>
 8005306:	9005      	str	r0, [sp, #20]
 8005308:	e7c8      	b.n	800529c <_svfiprintf_r+0x124>
 800530a:	fb04 2000 	mla	r0, r4, r0, r2
 800530e:	2301      	movs	r3, #1
 8005310:	e7f1      	b.n	80052f6 <_svfiprintf_r+0x17e>
 8005312:	ab03      	add	r3, sp, #12
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	462a      	mov	r2, r5
 8005318:	4b10      	ldr	r3, [pc, #64]	; (800535c <_svfiprintf_r+0x1e4>)
 800531a:	a904      	add	r1, sp, #16
 800531c:	4640      	mov	r0, r8
 800531e:	f3af 8000 	nop.w
 8005322:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005326:	4681      	mov	r9, r0
 8005328:	d1d9      	bne.n	80052de <_svfiprintf_r+0x166>
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	065b      	lsls	r3, r3, #25
 800532e:	f53f af38 	bmi.w	80051a2 <_svfiprintf_r+0x2a>
 8005332:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005334:	b01d      	add	sp, #116	; 0x74
 8005336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533a:	ab03      	add	r3, sp, #12
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	462a      	mov	r2, r5
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <_svfiprintf_r+0x1e4>)
 8005342:	a904      	add	r1, sp, #16
 8005344:	4640      	mov	r0, r8
 8005346:	f000 f881 	bl	800544c <_printf_i>
 800534a:	e7ea      	b.n	8005322 <_svfiprintf_r+0x1aa>
 800534c:	08005813 	.word	0x08005813
 8005350:	08005819 	.word	0x08005819
 8005354:	0800581d 	.word	0x0800581d
 8005358:	00000000 	.word	0x00000000
 800535c:	080050c3 	.word	0x080050c3

08005360 <_printf_common>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	4691      	mov	r9, r2
 8005366:	461f      	mov	r7, r3
 8005368:	688a      	ldr	r2, [r1, #8]
 800536a:	690b      	ldr	r3, [r1, #16]
 800536c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005370:	4293      	cmp	r3, r2
 8005372:	bfb8      	it	lt
 8005374:	4613      	movlt	r3, r2
 8005376:	f8c9 3000 	str.w	r3, [r9]
 800537a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800537e:	4606      	mov	r6, r0
 8005380:	460c      	mov	r4, r1
 8005382:	b112      	cbz	r2, 800538a <_printf_common+0x2a>
 8005384:	3301      	adds	r3, #1
 8005386:	f8c9 3000 	str.w	r3, [r9]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	0699      	lsls	r1, r3, #26
 800538e:	bf42      	ittt	mi
 8005390:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005394:	3302      	addmi	r3, #2
 8005396:	f8c9 3000 	strmi.w	r3, [r9]
 800539a:	6825      	ldr	r5, [r4, #0]
 800539c:	f015 0506 	ands.w	r5, r5, #6
 80053a0:	d107      	bne.n	80053b2 <_printf_common+0x52>
 80053a2:	f104 0a19 	add.w	sl, r4, #25
 80053a6:	68e3      	ldr	r3, [r4, #12]
 80053a8:	f8d9 2000 	ldr.w	r2, [r9]
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	429d      	cmp	r5, r3
 80053b0:	db29      	blt.n	8005406 <_printf_common+0xa6>
 80053b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	3300      	adds	r3, #0
 80053ba:	bf18      	it	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	0692      	lsls	r2, r2, #26
 80053c0:	d42e      	bmi.n	8005420 <_printf_common+0xc0>
 80053c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c6:	4639      	mov	r1, r7
 80053c8:	4630      	mov	r0, r6
 80053ca:	47c0      	blx	r8
 80053cc:	3001      	adds	r0, #1
 80053ce:	d021      	beq.n	8005414 <_printf_common+0xb4>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	68e5      	ldr	r5, [r4, #12]
 80053d4:	f8d9 2000 	ldr.w	r2, [r9]
 80053d8:	f003 0306 	and.w	r3, r3, #6
 80053dc:	2b04      	cmp	r3, #4
 80053de:	bf08      	it	eq
 80053e0:	1aad      	subeq	r5, r5, r2
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	6922      	ldr	r2, [r4, #16]
 80053e6:	bf0c      	ite	eq
 80053e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053ec:	2500      	movne	r5, #0
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bfc4      	itt	gt
 80053f2:	1a9b      	subgt	r3, r3, r2
 80053f4:	18ed      	addgt	r5, r5, r3
 80053f6:	f04f 0900 	mov.w	r9, #0
 80053fa:	341a      	adds	r4, #26
 80053fc:	454d      	cmp	r5, r9
 80053fe:	d11b      	bne.n	8005438 <_printf_common+0xd8>
 8005400:	2000      	movs	r0, #0
 8005402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005406:	2301      	movs	r3, #1
 8005408:	4652      	mov	r2, sl
 800540a:	4639      	mov	r1, r7
 800540c:	4630      	mov	r0, r6
 800540e:	47c0      	blx	r8
 8005410:	3001      	adds	r0, #1
 8005412:	d103      	bne.n	800541c <_printf_common+0xbc>
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541c:	3501      	adds	r5, #1
 800541e:	e7c2      	b.n	80053a6 <_printf_common+0x46>
 8005420:	18e1      	adds	r1, r4, r3
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	2030      	movs	r0, #48	; 0x30
 8005426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800542a:	4422      	add	r2, r4
 800542c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005434:	3302      	adds	r3, #2
 8005436:	e7c4      	b.n	80053c2 <_printf_common+0x62>
 8005438:	2301      	movs	r3, #1
 800543a:	4622      	mov	r2, r4
 800543c:	4639      	mov	r1, r7
 800543e:	4630      	mov	r0, r6
 8005440:	47c0      	blx	r8
 8005442:	3001      	adds	r0, #1
 8005444:	d0e6      	beq.n	8005414 <_printf_common+0xb4>
 8005446:	f109 0901 	add.w	r9, r9, #1
 800544a:	e7d7      	b.n	80053fc <_printf_common+0x9c>

0800544c <_printf_i>:
 800544c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005450:	4617      	mov	r7, r2
 8005452:	7e0a      	ldrb	r2, [r1, #24]
 8005454:	b085      	sub	sp, #20
 8005456:	2a6e      	cmp	r2, #110	; 0x6e
 8005458:	4698      	mov	r8, r3
 800545a:	4606      	mov	r6, r0
 800545c:	460c      	mov	r4, r1
 800545e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005460:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005464:	f000 80bc 	beq.w	80055e0 <_printf_i+0x194>
 8005468:	d81a      	bhi.n	80054a0 <_printf_i+0x54>
 800546a:	2a63      	cmp	r2, #99	; 0x63
 800546c:	d02e      	beq.n	80054cc <_printf_i+0x80>
 800546e:	d80a      	bhi.n	8005486 <_printf_i+0x3a>
 8005470:	2a00      	cmp	r2, #0
 8005472:	f000 80c8 	beq.w	8005606 <_printf_i+0x1ba>
 8005476:	2a58      	cmp	r2, #88	; 0x58
 8005478:	f000 808a 	beq.w	8005590 <_printf_i+0x144>
 800547c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005480:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005484:	e02a      	b.n	80054dc <_printf_i+0x90>
 8005486:	2a64      	cmp	r2, #100	; 0x64
 8005488:	d001      	beq.n	800548e <_printf_i+0x42>
 800548a:	2a69      	cmp	r2, #105	; 0x69
 800548c:	d1f6      	bne.n	800547c <_printf_i+0x30>
 800548e:	6821      	ldr	r1, [r4, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005496:	d023      	beq.n	80054e0 <_printf_i+0x94>
 8005498:	1d11      	adds	r1, r2, #4
 800549a:	6019      	str	r1, [r3, #0]
 800549c:	6813      	ldr	r3, [r2, #0]
 800549e:	e027      	b.n	80054f0 <_printf_i+0xa4>
 80054a0:	2a73      	cmp	r2, #115	; 0x73
 80054a2:	f000 80b4 	beq.w	800560e <_printf_i+0x1c2>
 80054a6:	d808      	bhi.n	80054ba <_printf_i+0x6e>
 80054a8:	2a6f      	cmp	r2, #111	; 0x6f
 80054aa:	d02a      	beq.n	8005502 <_printf_i+0xb6>
 80054ac:	2a70      	cmp	r2, #112	; 0x70
 80054ae:	d1e5      	bne.n	800547c <_printf_i+0x30>
 80054b0:	680a      	ldr	r2, [r1, #0]
 80054b2:	f042 0220 	orr.w	r2, r2, #32
 80054b6:	600a      	str	r2, [r1, #0]
 80054b8:	e003      	b.n	80054c2 <_printf_i+0x76>
 80054ba:	2a75      	cmp	r2, #117	; 0x75
 80054bc:	d021      	beq.n	8005502 <_printf_i+0xb6>
 80054be:	2a78      	cmp	r2, #120	; 0x78
 80054c0:	d1dc      	bne.n	800547c <_printf_i+0x30>
 80054c2:	2278      	movs	r2, #120	; 0x78
 80054c4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80054c8:	496e      	ldr	r1, [pc, #440]	; (8005684 <_printf_i+0x238>)
 80054ca:	e064      	b.n	8005596 <_printf_i+0x14a>
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80054d2:	1d11      	adds	r1, r2, #4
 80054d4:	6019      	str	r1, [r3, #0]
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054dc:	2301      	movs	r3, #1
 80054de:	e0a3      	b.n	8005628 <_printf_i+0x1dc>
 80054e0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80054e4:	f102 0104 	add.w	r1, r2, #4
 80054e8:	6019      	str	r1, [r3, #0]
 80054ea:	d0d7      	beq.n	800549c <_printf_i+0x50>
 80054ec:	f9b2 3000 	ldrsh.w	r3, [r2]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da03      	bge.n	80054fc <_printf_i+0xb0>
 80054f4:	222d      	movs	r2, #45	; 0x2d
 80054f6:	425b      	negs	r3, r3
 80054f8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054fc:	4962      	ldr	r1, [pc, #392]	; (8005688 <_printf_i+0x23c>)
 80054fe:	220a      	movs	r2, #10
 8005500:	e017      	b.n	8005532 <_printf_i+0xe6>
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	6819      	ldr	r1, [r3, #0]
 8005506:	f010 0f80 	tst.w	r0, #128	; 0x80
 800550a:	d003      	beq.n	8005514 <_printf_i+0xc8>
 800550c:	1d08      	adds	r0, r1, #4
 800550e:	6018      	str	r0, [r3, #0]
 8005510:	680b      	ldr	r3, [r1, #0]
 8005512:	e006      	b.n	8005522 <_printf_i+0xd6>
 8005514:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005518:	f101 0004 	add.w	r0, r1, #4
 800551c:	6018      	str	r0, [r3, #0]
 800551e:	d0f7      	beq.n	8005510 <_printf_i+0xc4>
 8005520:	880b      	ldrh	r3, [r1, #0]
 8005522:	4959      	ldr	r1, [pc, #356]	; (8005688 <_printf_i+0x23c>)
 8005524:	2a6f      	cmp	r2, #111	; 0x6f
 8005526:	bf14      	ite	ne
 8005528:	220a      	movne	r2, #10
 800552a:	2208      	moveq	r2, #8
 800552c:	2000      	movs	r0, #0
 800552e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005532:	6865      	ldr	r5, [r4, #4]
 8005534:	60a5      	str	r5, [r4, #8]
 8005536:	2d00      	cmp	r5, #0
 8005538:	f2c0 809c 	blt.w	8005674 <_printf_i+0x228>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	f020 0004 	bic.w	r0, r0, #4
 8005542:	6020      	str	r0, [r4, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d13f      	bne.n	80055c8 <_printf_i+0x17c>
 8005548:	2d00      	cmp	r5, #0
 800554a:	f040 8095 	bne.w	8005678 <_printf_i+0x22c>
 800554e:	4675      	mov	r5, lr
 8005550:	2a08      	cmp	r2, #8
 8005552:	d10b      	bne.n	800556c <_printf_i+0x120>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	07da      	lsls	r2, r3, #31
 8005558:	d508      	bpl.n	800556c <_printf_i+0x120>
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	6862      	ldr	r2, [r4, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	bfde      	ittt	le
 8005562:	2330      	movle	r3, #48	; 0x30
 8005564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800556c:	ebae 0305 	sub.w	r3, lr, r5
 8005570:	6123      	str	r3, [r4, #16]
 8005572:	f8cd 8000 	str.w	r8, [sp]
 8005576:	463b      	mov	r3, r7
 8005578:	aa03      	add	r2, sp, #12
 800557a:	4621      	mov	r1, r4
 800557c:	4630      	mov	r0, r6
 800557e:	f7ff feef 	bl	8005360 <_printf_common>
 8005582:	3001      	adds	r0, #1
 8005584:	d155      	bne.n	8005632 <_printf_i+0x1e6>
 8005586:	f04f 30ff 	mov.w	r0, #4294967295
 800558a:	b005      	add	sp, #20
 800558c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005590:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005594:	493c      	ldr	r1, [pc, #240]	; (8005688 <_printf_i+0x23c>)
 8005596:	6822      	ldr	r2, [r4, #0]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800559e:	f100 0504 	add.w	r5, r0, #4
 80055a2:	601d      	str	r5, [r3, #0]
 80055a4:	d001      	beq.n	80055aa <_printf_i+0x15e>
 80055a6:	6803      	ldr	r3, [r0, #0]
 80055a8:	e002      	b.n	80055b0 <_printf_i+0x164>
 80055aa:	0655      	lsls	r5, r2, #25
 80055ac:	d5fb      	bpl.n	80055a6 <_printf_i+0x15a>
 80055ae:	8803      	ldrh	r3, [r0, #0]
 80055b0:	07d0      	lsls	r0, r2, #31
 80055b2:	bf44      	itt	mi
 80055b4:	f042 0220 	orrmi.w	r2, r2, #32
 80055b8:	6022      	strmi	r2, [r4, #0]
 80055ba:	b91b      	cbnz	r3, 80055c4 <_printf_i+0x178>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	f022 0220 	bic.w	r2, r2, #32
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	2210      	movs	r2, #16
 80055c6:	e7b1      	b.n	800552c <_printf_i+0xe0>
 80055c8:	4675      	mov	r5, lr
 80055ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80055ce:	fb02 3310 	mls	r3, r2, r0, r3
 80055d2:	5ccb      	ldrb	r3, [r1, r3]
 80055d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055d8:	4603      	mov	r3, r0
 80055da:	2800      	cmp	r0, #0
 80055dc:	d1f5      	bne.n	80055ca <_printf_i+0x17e>
 80055de:	e7b7      	b.n	8005550 <_printf_i+0x104>
 80055e0:	6808      	ldr	r0, [r1, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	6949      	ldr	r1, [r1, #20]
 80055e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80055ea:	d004      	beq.n	80055f6 <_printf_i+0x1aa>
 80055ec:	1d10      	adds	r0, r2, #4
 80055ee:	6018      	str	r0, [r3, #0]
 80055f0:	6813      	ldr	r3, [r2, #0]
 80055f2:	6019      	str	r1, [r3, #0]
 80055f4:	e007      	b.n	8005606 <_printf_i+0x1ba>
 80055f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055fa:	f102 0004 	add.w	r0, r2, #4
 80055fe:	6018      	str	r0, [r3, #0]
 8005600:	6813      	ldr	r3, [r2, #0]
 8005602:	d0f6      	beq.n	80055f2 <_printf_i+0x1a6>
 8005604:	8019      	strh	r1, [r3, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	4675      	mov	r5, lr
 800560c:	e7b1      	b.n	8005572 <_printf_i+0x126>
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	1d11      	adds	r1, r2, #4
 8005612:	6019      	str	r1, [r3, #0]
 8005614:	6815      	ldr	r5, [r2, #0]
 8005616:	6862      	ldr	r2, [r4, #4]
 8005618:	2100      	movs	r1, #0
 800561a:	4628      	mov	r0, r5
 800561c:	f7fa fde0 	bl	80001e0 <memchr>
 8005620:	b108      	cbz	r0, 8005626 <_printf_i+0x1da>
 8005622:	1b40      	subs	r0, r0, r5
 8005624:	6060      	str	r0, [r4, #4]
 8005626:	6863      	ldr	r3, [r4, #4]
 8005628:	6123      	str	r3, [r4, #16]
 800562a:	2300      	movs	r3, #0
 800562c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005630:	e79f      	b.n	8005572 <_printf_i+0x126>
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	462a      	mov	r2, r5
 8005636:	4639      	mov	r1, r7
 8005638:	4630      	mov	r0, r6
 800563a:	47c0      	blx	r8
 800563c:	3001      	adds	r0, #1
 800563e:	d0a2      	beq.n	8005586 <_printf_i+0x13a>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	079b      	lsls	r3, r3, #30
 8005644:	d507      	bpl.n	8005656 <_printf_i+0x20a>
 8005646:	2500      	movs	r5, #0
 8005648:	f104 0919 	add.w	r9, r4, #25
 800564c:	68e3      	ldr	r3, [r4, #12]
 800564e:	9a03      	ldr	r2, [sp, #12]
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	429d      	cmp	r5, r3
 8005654:	db05      	blt.n	8005662 <_printf_i+0x216>
 8005656:	68e0      	ldr	r0, [r4, #12]
 8005658:	9b03      	ldr	r3, [sp, #12]
 800565a:	4298      	cmp	r0, r3
 800565c:	bfb8      	it	lt
 800565e:	4618      	movlt	r0, r3
 8005660:	e793      	b.n	800558a <_printf_i+0x13e>
 8005662:	2301      	movs	r3, #1
 8005664:	464a      	mov	r2, r9
 8005666:	4639      	mov	r1, r7
 8005668:	4630      	mov	r0, r6
 800566a:	47c0      	blx	r8
 800566c:	3001      	adds	r0, #1
 800566e:	d08a      	beq.n	8005586 <_printf_i+0x13a>
 8005670:	3501      	adds	r5, #1
 8005672:	e7eb      	b.n	800564c <_printf_i+0x200>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1a7      	bne.n	80055c8 <_printf_i+0x17c>
 8005678:	780b      	ldrb	r3, [r1, #0]
 800567a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800567e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005682:	e765      	b.n	8005550 <_printf_i+0x104>
 8005684:	08005835 	.word	0x08005835
 8005688:	08005824 	.word	0x08005824

0800568c <__ascii_wctomb>:
 800568c:	b149      	cbz	r1, 80056a2 <__ascii_wctomb+0x16>
 800568e:	2aff      	cmp	r2, #255	; 0xff
 8005690:	bf85      	ittet	hi
 8005692:	238a      	movhi	r3, #138	; 0x8a
 8005694:	6003      	strhi	r3, [r0, #0]
 8005696:	700a      	strbls	r2, [r1, #0]
 8005698:	f04f 30ff 	movhi.w	r0, #4294967295
 800569c:	bf98      	it	ls
 800569e:	2001      	movls	r0, #1
 80056a0:	4770      	bx	lr
 80056a2:	4608      	mov	r0, r1
 80056a4:	4770      	bx	lr

080056a6 <memmove>:
 80056a6:	4288      	cmp	r0, r1
 80056a8:	b510      	push	{r4, lr}
 80056aa:	eb01 0302 	add.w	r3, r1, r2
 80056ae:	d803      	bhi.n	80056b8 <memmove+0x12>
 80056b0:	1e42      	subs	r2, r0, #1
 80056b2:	4299      	cmp	r1, r3
 80056b4:	d10c      	bne.n	80056d0 <memmove+0x2a>
 80056b6:	bd10      	pop	{r4, pc}
 80056b8:	4298      	cmp	r0, r3
 80056ba:	d2f9      	bcs.n	80056b0 <memmove+0xa>
 80056bc:	1881      	adds	r1, r0, r2
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	42d3      	cmn	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memmove+0x20>
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80056ce:	e7f7      	b.n	80056c0 <memmove+0x1a>
 80056d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80056d8:	e7eb      	b.n	80056b2 <memmove+0xc>

080056da <_realloc_r>:
 80056da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056dc:	4607      	mov	r7, r0
 80056de:	4614      	mov	r4, r2
 80056e0:	460e      	mov	r6, r1
 80056e2:	b921      	cbnz	r1, 80056ee <_realloc_r+0x14>
 80056e4:	4611      	mov	r1, r2
 80056e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056ea:	f7ff bb17 	b.w	8004d1c <_malloc_r>
 80056ee:	b922      	cbnz	r2, 80056fa <_realloc_r+0x20>
 80056f0:	f7ff fac6 	bl	8004c80 <_free_r>
 80056f4:	4625      	mov	r5, r4
 80056f6:	4628      	mov	r0, r5
 80056f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fa:	f000 f814 	bl	8005726 <_malloc_usable_size_r>
 80056fe:	4284      	cmp	r4, r0
 8005700:	d90f      	bls.n	8005722 <_realloc_r+0x48>
 8005702:	4621      	mov	r1, r4
 8005704:	4638      	mov	r0, r7
 8005706:	f7ff fb09 	bl	8004d1c <_malloc_r>
 800570a:	4605      	mov	r5, r0
 800570c:	2800      	cmp	r0, #0
 800570e:	d0f2      	beq.n	80056f6 <_realloc_r+0x1c>
 8005710:	4631      	mov	r1, r6
 8005712:	4622      	mov	r2, r4
 8005714:	f7ff faa0 	bl	8004c58 <memcpy>
 8005718:	4631      	mov	r1, r6
 800571a:	4638      	mov	r0, r7
 800571c:	f7ff fab0 	bl	8004c80 <_free_r>
 8005720:	e7e9      	b.n	80056f6 <_realloc_r+0x1c>
 8005722:	4635      	mov	r5, r6
 8005724:	e7e7      	b.n	80056f6 <_realloc_r+0x1c>

08005726 <_malloc_usable_size_r>:
 8005726:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800572a:	2800      	cmp	r0, #0
 800572c:	f1a0 0004 	sub.w	r0, r0, #4
 8005730:	bfbc      	itt	lt
 8005732:	580b      	ldrlt	r3, [r1, r0]
 8005734:	18c0      	addlt	r0, r0, r3
 8005736:	4770      	bx	lr

08005738 <_sbrk>:
 8005738:	4b04      	ldr	r3, [pc, #16]	; (800574c <_sbrk+0x14>)
 800573a:	6819      	ldr	r1, [r3, #0]
 800573c:	4602      	mov	r2, r0
 800573e:	b909      	cbnz	r1, 8005744 <_sbrk+0xc>
 8005740:	4903      	ldr	r1, [pc, #12]	; (8005750 <_sbrk+0x18>)
 8005742:	6019      	str	r1, [r3, #0]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	4402      	add	r2, r0
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	4770      	bx	lr
 800574c:	200002b4 	.word	0x200002b4
 8005750:	20000564 	.word	0x20000564

08005754 <_init>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr

08005760 <_fini>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr
