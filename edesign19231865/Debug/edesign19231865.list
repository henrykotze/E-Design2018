
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08005ed4  08005ed4  00015ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000200  20000000  080060c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
  8 .bss          000002b0  20000200  20000200  00020200  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200004b0  200004b0  00020200  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 11 .debug_info   00028172  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003cef  00000000  00000000  000483a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b253  00000000  00000000  0004c091  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  000572e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  000582c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b95  00000000  00000000  00059190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe95  00000000  00000000  0007ad25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b122e  00000000  00000000  0008abba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0013bde8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d0  00000000  00000000  0013be64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ebc 	.word	0x08005ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08005ebc 	.word	0x08005ebc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b99e 	b.w	8000ee4 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f82a 	bl	8000c08 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2ulz>:
 8000bc0:	b5d0      	push	{r4, r6, r7, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <__aeabi_d2ulz+0x40>)
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fd11 	bl	80005f0 <__aeabi_dmul>
 8000bce:	f7ff ffbf 	bl	8000b50 <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc96 	bl	8000504 <__aeabi_ui2d>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <__aeabi_d2ulz+0x44>)
 8000bdc:	f7ff fd08 	bl	80005f0 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff fb4e 	bl	8000288 <__aeabi_dsub>
 8000bec:	f7ff ffb0 	bl	8000b50 <__aeabi_d2uiz>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	ea42 0200 	orr.w	r2, r2, r0
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	9e08      	ldr	r6, [sp, #32]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d151      	bne.n	8000cbc <__udivmoddi4+0xb4>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d96d      	bls.n	8000cfa <__udivmoddi4+0xf2>
 8000c1e:	fab2 fe82 	clz	lr, r2
 8000c22:	f1be 0f00 	cmp.w	lr, #0
 8000c26:	d00b      	beq.n	8000c40 <__udivmoddi4+0x38>
 8000c28:	f1ce 0c20 	rsb	ip, lr, #32
 8000c2c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c34:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c38:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c3c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c40:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c44:	0c25      	lsrs	r5, r4, #16
 8000c46:	fbbc f8fa 	udiv	r8, ip, sl
 8000c4a:	fa1f f987 	uxth.w	r9, r7
 8000c4e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c52:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c56:	fb08 f309 	mul.w	r3, r8, r9
 8000c5a:	42ab      	cmp	r3, r5
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x6c>
 8000c5e:	19ed      	adds	r5, r5, r7
 8000c60:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c64:	f080 8123 	bcs.w	8000eae <__udivmoddi4+0x2a6>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f240 8120 	bls.w	8000eae <__udivmoddi4+0x2a6>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	443d      	add	r5, r7
 8000c74:	1aed      	subs	r5, r5, r3
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c7c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb00 f909 	mul.w	r9, r0, r9
 8000c88:	45a1      	cmp	r9, r4
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x98>
 8000c8c:	19e4      	adds	r4, r4, r7
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	f080 810a 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8107 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	443c      	add	r4, r7
 8000ca0:	eba4 0409 	sub.w	r4, r4, r9
 8000ca4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d061      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cae:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	6034      	str	r4, [r6, #0]
 8000cb6:	6073      	str	r3, [r6, #4]
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xc8>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d054      	beq.n	8000d6e <__udivmoddi4+0x166>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	f040 808e 	bne.w	8000df6 <__udivmoddi4+0x1ee>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xdc>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80fa 	bhi.w	8000ed8 <__udivmoddi4+0x2d0>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb65 0503 	sbc.w	r5, r5, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	46ac      	mov	ip, r5
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d03f      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cf2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	b912      	cbnz	r2, 8000d02 <__udivmoddi4+0xfa>
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d02:	fab7 fe87 	clz	lr, r7
 8000d06:	f1be 0f00 	cmp.w	lr, #0
 8000d0a:	d134      	bne.n	8000d76 <__udivmoddi4+0x16e>
 8000d0c:	1beb      	subs	r3, r5, r7
 8000d0e:	0c3a      	lsrs	r2, r7, #16
 8000d10:	fa1f fc87 	uxth.w	ip, r7
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d1a:	0c25      	lsrs	r5, r4, #16
 8000d1c:	fb02 3318 	mls	r3, r2, r8, r3
 8000d20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d24:	fb0c f308 	mul.w	r3, ip, r8
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x134>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x132>
 8000d34:	42ab      	cmp	r3, r5
 8000d36:	f200 80d1 	bhi.w	8000edc <__udivmoddi4+0x2d4>
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d44:	fb02 5510 	mls	r5, r2, r0, r5
 8000d48:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d4c:	fb0c fc00 	mul.w	ip, ip, r0
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x15c>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x15a>
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	f200 80b8 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 040c 	sub.w	r4, r4, ip
 8000d68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6c:	e79d      	b.n	8000caa <__udivmoddi4+0xa2>
 8000d6e:	4631      	mov	r1, r6
 8000d70:	4630      	mov	r0, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1ce 0420 	rsb	r4, lr, #32
 8000d7a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d82:	fa20 f804 	lsr.w	r8, r0, r4
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa25 f404 	lsr.w	r4, r5, r4
 8000d8c:	ea48 0803 	orr.w	r8, r8, r3
 8000d90:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d94:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d98:	fb02 4411 	mls	r4, r2, r1, r4
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000da4:	fb01 f30c 	mul.w	r3, r1, ip
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1bc>
 8000db0:	19ed      	adds	r5, r5, r7
 8000db2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db6:	f080 808a 	bcs.w	8000ece <__udivmoddi4+0x2c6>
 8000dba:	42ab      	cmp	r3, r5
 8000dbc:	f240 8087 	bls.w	8000ece <__udivmoddi4+0x2c6>
 8000dc0:	3902      	subs	r1, #2
 8000dc2:	443d      	add	r5, r7
 8000dc4:	1aeb      	subs	r3, r5, r3
 8000dc6:	fa1f f588 	uxth.w	r5, r8
 8000dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dce:	fb02 3310 	mls	r3, r2, r0, r3
 8000dd2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dd6:	fb00 f30c 	mul.w	r3, r0, ip
 8000dda:	42ab      	cmp	r3, r5
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1e6>
 8000dde:	19ed      	adds	r5, r5, r7
 8000de0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de4:	d26f      	bcs.n	8000ec6 <__udivmoddi4+0x2be>
 8000de6:	42ab      	cmp	r3, r5
 8000de8:	d96d      	bls.n	8000ec6 <__udivmoddi4+0x2be>
 8000dea:	3802      	subs	r0, #2
 8000dec:	443d      	add	r5, r7
 8000dee:	1aeb      	subs	r3, r5, r3
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	e78f      	b.n	8000d16 <__udivmoddi4+0x10e>
 8000df6:	f1c1 0720 	rsb	r7, r1, #32
 8000dfa:	fa22 f807 	lsr.w	r8, r2, r7
 8000dfe:	408b      	lsls	r3, r1
 8000e00:	fa05 f401 	lsl.w	r4, r5, r1
 8000e04:	ea48 0303 	orr.w	r3, r8, r3
 8000e08:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e16:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e1a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e1e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e22:	fa1f f883 	uxth.w	r8, r3
 8000e26:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e2a:	fb09 f408 	mul.w	r4, r9, r8
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	fa02 f201 	lsl.w	r2, r2, r1
 8000e34:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x244>
 8000e3a:	18ed      	adds	r5, r5, r3
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d243      	bcs.n	8000eca <__udivmoddi4+0x2c2>
 8000e42:	42ac      	cmp	r4, r5
 8000e44:	d941      	bls.n	8000eca <__udivmoddi4+0x2c2>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	441d      	add	r5, r3
 8000e4c:	1b2d      	subs	r5, r5, r4
 8000e4e:	fa1f fe8e 	uxth.w	lr, lr
 8000e52:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e56:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e5a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45a0      	cmp	r8, r4
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x26e>
 8000e66:	18e4      	adds	r4, r4, r3
 8000e68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e6c:	d229      	bcs.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e6e:	45a0      	cmp	r8, r4
 8000e70:	d927      	bls.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e72:	3802      	subs	r0, #2
 8000e74:	441c      	add	r4, r3
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba4 0408 	sub.w	r4, r4, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454c      	cmp	r4, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	464d      	mov	r5, r9
 8000e88:	d315      	bcc.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e8a:	d012      	beq.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e8c:	b156      	cbz	r6, 8000ea4 <__udivmoddi4+0x29c>
 8000e8e:	ebba 030e 	subs.w	r3, sl, lr
 8000e92:	eb64 0405 	sbc.w	r4, r4, r5
 8000e96:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9a:	40cb      	lsrs	r3, r1
 8000e9c:	431f      	orrs	r7, r3
 8000e9e:	40cc      	lsrs	r4, r1
 8000ea0:	6037      	str	r7, [r6, #0]
 8000ea2:	6074      	str	r4, [r6, #4]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e6f8      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000eae:	4690      	mov	r8, r2
 8000eb0:	e6e0      	b.n	8000c74 <__udivmoddi4+0x6c>
 8000eb2:	45c2      	cmp	sl, r8
 8000eb4:	d2ea      	bcs.n	8000e8c <__udivmoddi4+0x284>
 8000eb6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eba:	eb69 0503 	sbc.w	r5, r9, r3
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7e4      	b.n	8000e8c <__udivmoddi4+0x284>
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	e7d7      	b.n	8000e76 <__udivmoddi4+0x26e>
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	e791      	b.n	8000dee <__udivmoddi4+0x1e6>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e7be      	b.n	8000e4c <__udivmoddi4+0x244>
 8000ece:	4601      	mov	r1, r0
 8000ed0:	e778      	b.n	8000dc4 <__udivmoddi4+0x1bc>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	e745      	b.n	8000d64 <__udivmoddi4+0x15c>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xe6>
 8000edc:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee0:	443d      	add	r5, r7
 8000ee2:	e72b      	b.n	8000d3c <__udivmoddi4+0x134>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b510      	push	{r4, lr}
 8000eea:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_InitTick+0x24>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_InitTick+0x28>)
 8000ef2:	fba3 3000 	umull	r3, r0, r3, r0
 8000ef6:	0980      	lsrs	r0, r0, #6
 8000ef8:	f000 fd94 	bl	8001a24 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	4621      	mov	r1, r4
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fd50 	bl	80019a8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	10624dd3 	.word	0x10624dd3

08000f14 <HAL_Init>:
{
 8000f14:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x20>)
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fd2f 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_InitTick>
  HAL_MspInit();
 8000f2c:	f003 fb4c 	bl	80045c8 <HAL_MspInit>
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	bd08      	pop	{r3, pc}
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_IncTick+0xc>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200002c8 	.word	0x200002c8

08000f48 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200002c8 	.word	0x200002c8

08000f54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f54:	4770      	bx	lr

08000f56 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f56:	4770      	bx	lr

08000f58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000f58:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f5a:	6802      	ldr	r2, [r0, #0]
 8000f5c:	6893      	ldr	r3, [r2, #8]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d011      	beq.n	8000f8a <ADC_Disable+0x32>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d037      	beq.n	8000fdc <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f6c:	6893      	ldr	r3, [r2, #8]
 8000f6e:	f003 030d 	and.w	r3, r3, #13
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d011      	beq.n	8000f9a <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000f86:	2001      	movs	r0, #1
 8000f88:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f013 0f01 	tst.w	r3, #1
 8000f90:	d101      	bne.n	8000f96 <ADC_Disable+0x3e>
 8000f92:	2300      	movs	r3, #0
 8000f94:	e7e8      	b.n	8000f68 <ADC_Disable+0x10>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e7e6      	b.n	8000f68 <ADC_Disable+0x10>
 8000f9a:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000f9c:	6893      	ldr	r3, [r2, #8]
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	6093      	str	r3, [r2, #8]
 8000fa4:	6803      	ldr	r3, [r0, #0]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000faa:	f7ff ffcd 	bl	8000f48 <HAL_GetTick>
 8000fae:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f013 0f01 	tst.w	r3, #1
 8000fb8:	d00e      	beq.n	8000fd8 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fba:	f7ff ffc5 	bl	8000f48 <HAL_GetTick>
 8000fbe:	1b40      	subs	r0, r0, r5
 8000fc0:	2802      	cmp	r0, #2
 8000fc2:	d9f5      	bls.n	8000fb0 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fd8:	2000      	movs	r0, #0
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	2000      	movs	r0, #0
}
 8000fde:	bd38      	pop	{r3, r4, r5, pc}

08000fe0 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000fe0:	6803      	ldr	r3, [r0, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	f012 0f0c 	tst.w	r2, #12
 8000fe8:	d062      	beq.n	80010b0 <ADC_ConversionStop+0xd0>
{
 8000fea:	b570      	push	{r4, r5, r6, lr}
 8000fec:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000ff4:	d002      	beq.n	8000ffc <ADC_ConversionStop+0x1c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000ff6:	69c2      	ldr	r2, [r0, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000ff8:	2a01      	cmp	r2, #1
 8000ffa:	d038      	beq.n	800106e <ADC_ConversionStop+0x8e>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8000ffc:	2960      	cmp	r1, #96	; 0x60
 8000ffe:	d00c      	beq.n	800101a <ADC_ConversionStop+0x3a>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	f012 0f04 	tst.w	r2, #4
 8001008:	d007      	beq.n	800101a <ADC_ConversionStop+0x3a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800100a:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800100c:	f012 0f02 	tst.w	r2, #2
 8001010:	d103      	bne.n	800101a <ADC_ConversionStop+0x3a>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	f042 0210 	orr.w	r2, r2, #16
 8001018:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800101a:	290c      	cmp	r1, #12
 800101c:	d00c      	beq.n	8001038 <ADC_ConversionStop+0x58>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	f012 0f08 	tst.w	r2, #8
 8001026:	d007      	beq.n	8001038 <ADC_ConversionStop+0x58>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001028:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800102a:	f012 0f02 	tst.w	r2, #2
 800102e:	d103      	bne.n	8001038 <ADC_ConversionStop+0x58>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	f042 0220 	orr.w	r2, r2, #32
 8001036:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001038:	2960      	cmp	r1, #96	; 0x60
 800103a:	d035      	beq.n	80010a8 <ADC_ConversionStop+0xc8>
 800103c:	296c      	cmp	r1, #108	; 0x6c
 800103e:	d131      	bne.n	80010a4 <ADC_ConversionStop+0xc4>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001040:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001042:	f7ff ff81 	bl	8000f48 <HAL_GetTick>
 8001046:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	421d      	tst	r5, r3
 800104e:	d02d      	beq.n	80010ac <ADC_ConversionStop+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001050:	f7ff ff7a 	bl	8000f48 <HAL_GetTick>
 8001054:	1b80      	subs	r0, r0, r6
 8001056:	280b      	cmp	r0, #11
 8001058:	d9f6      	bls.n	8001048 <ADC_ConversionStop+0x68>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
 800106c:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800106e:	6982      	ldr	r2, [r0, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001070:	2a01      	cmp	r2, #1
 8001072:	d1c3      	bne.n	8000ffc <ADC_ConversionStop+0x1c>
 8001074:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	f011 0f40 	tst.w	r1, #64	; 0x40
 800107c:	d10e      	bne.n	800109c <ADC_ConversionStop+0xbc>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800107e:	490d      	ldr	r1, [pc, #52]	; (80010b4 <ADC_ConversionStop+0xd4>)
 8001080:	428a      	cmp	r2, r1
 8001082:	d801      	bhi.n	8001088 <ADC_ConversionStop+0xa8>
        Conversion_Timeout_CPU_cycles ++;
 8001084:	3201      	adds	r2, #1
 8001086:	e7f6      	b.n	8001076 <ADC_ConversionStop+0x96>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001088:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001090:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64a3      	str	r3, [r4, #72]	; 0x48
          return HAL_ERROR;
 8001098:	2001      	movs	r0, #1
 800109a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800109c:	2240      	movs	r2, #64	; 0x40
 800109e:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 80010a0:	210c      	movs	r1, #12
 80010a2:	e7ab      	b.n	8000ffc <ADC_ConversionStop+0x1c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80010a4:	2504      	movs	r5, #4
        break;
 80010a6:	e7cc      	b.n	8001042 <ADC_ConversionStop+0x62>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80010a8:	2508      	movs	r5, #8
 80010aa:	e7ca      	b.n	8001042 <ADC_ConversionStop+0x62>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010ac:	2000      	movs	r0, #0
 80010ae:	bd70      	pop	{r4, r5, r6, pc}
 80010b0:	2000      	movs	r0, #0
 80010b2:	4770      	bx	lr
 80010b4:	000993ff 	.word	0x000993ff

080010b8 <ADC_Enable>:
{
 80010b8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010ba:	6802      	ldr	r2, [r0, #0]
 80010bc:	6893      	ldr	r3, [r2, #8]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d010      	beq.n	80010e8 <ADC_Enable+0x30>
 80010c6:	2300      	movs	r3, #0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d133      	bne.n	8001134 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80010cc:	6891      	ldr	r1, [r2, #8]
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <ADC_Enable+0x80>)
 80010d0:	4219      	tst	r1, r3
 80010d2:	d011      	beq.n	80010f8 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 80010e4:	2001      	movs	r0, #1
 80010e6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f013 0f01 	tst.w	r3, #1
 80010ee:	d101      	bne.n	80010f4 <ADC_Enable+0x3c>
 80010f0:	2300      	movs	r3, #0
 80010f2:	e7e9      	b.n	80010c8 <ADC_Enable+0x10>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e7e7      	b.n	80010c8 <ADC_Enable+0x10>
 80010f8:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80010fa:	6893      	ldr	r3, [r2, #8]
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001102:	f7ff ff21 	bl	8000f48 <HAL_GetTick>
 8001106:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f013 0f01 	tst.w	r3, #1
 8001110:	d10e      	bne.n	8001130 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001112:	f7ff ff19 	bl	8000f48 <HAL_GetTick>
 8001116:	1b40      	subs	r0, r0, r5
 8001118:	2802      	cmp	r0, #2
 800111a:	d9f5      	bls.n	8001108 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001124:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800112c:	2001      	movs	r0, #1
 800112e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001130:	2000      	movs	r0, #0
 8001132:	bd38      	pop	{r3, r4, r5, pc}
 8001134:	2000      	movs	r0, #0
}
 8001136:	bd38      	pop	{r3, r4, r5, pc}
 8001138:	8000003f 	.word	0x8000003f

0800113c <ADC_DMAError>:
{
 800113c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800113e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001140:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001146:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001148:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8001150:	f7ff ff01 	bl	8000f56 <HAL_ADC_ErrorCallback>
 8001154:	bd08      	pop	{r3, pc}

08001156 <ADC_DMAHalfConvCplt>:
{
 8001156:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001158:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800115a:	f7ff fefb 	bl	8000f54 <HAL_ADC_ConvHalfCpltCallback>
 800115e:	bd08      	pop	{r3, pc}

08001160 <ADC_DMAConvCplt>:
{
 8001160:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001162:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001166:	f012 0f50 	tst.w	r2, #80	; 0x50
 800116a:	d11a      	bne.n	80011a2 <ADC_DMAConvCplt+0x42>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800116c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800116e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001172:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68d2      	ldr	r2, [r2, #12]
 8001178:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800117c:	d10d      	bne.n	800119a <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800117e:	69da      	ldr	r2, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001180:	b95a      	cbnz	r2, 800119a <ADC_DMAConvCplt+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001188:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800118c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001190:	d103      	bne.n	800119a <ADC_DMAConvCplt+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001194:	f042 0201 	orr.w	r2, r2, #1
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fbce 	bl	800393c <HAL_ADC_ConvCpltCallback>
 80011a0:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80011a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4798      	blx	r3
 80011a8:	bd08      	pop	{r3, pc}
	...

080011ac <HAL_ADC_Init>:
{
 80011ac:	b530      	push	{r4, r5, lr}
 80011ae:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80011b4:	2800      	cmp	r0, #0
 80011b6:	f000 80fb 	beq.w	80013b0 <HAL_ADC_Init+0x204>
 80011ba:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011be:	f013 0f10 	tst.w	r3, #16
 80011c2:	d151      	bne.n	8001268 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011c6:	b1ab      	cbz	r3, 80011f4 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c8:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80011d2:	d003      	beq.n	80011dc <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011d4:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011d6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80011da:	d046      	beq.n	800126a <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 80011dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011de:	f023 0312 	bic.w	r3, r3, #18
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
 80011f2:	e03a      	b.n	800126a <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80011f6:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80011f8:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80011fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80011fe:	f003 fa21 	bl	8004644 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800120a:	d001      	beq.n	8001210 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120c:	2000      	movs	r0, #0
 800120e:	e7dc      	b.n	80011ca <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff fea1 	bl	8000f58 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001216:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001218:	f013 0f10 	tst.w	r3, #16
 800121c:	d1d5      	bne.n	80011ca <HAL_ADC_Init+0x1e>
 800121e:	2800      	cmp	r0, #0
 8001220:	d1d3      	bne.n	80011ca <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001222:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001224:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001228:	f023 0302 	bic.w	r3, r3, #2
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	6893      	ldr	r3, [r2, #8]
 8001236:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800123a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800123c:	6822      	ldr	r2, [r4, #0]
 800123e:	6893      	ldr	r3, [r2, #8]
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001246:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <HAL_ADC_Init+0x208>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a5b      	ldr	r2, [pc, #364]	; (80013b8 <HAL_ADC_Init+0x20c>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001256:	005a      	lsls	r2, r3, #1
 8001258:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800125a:	9b00      	ldr	r3, [sp, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0b4      	beq.n	80011ca <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8001260:	9b00      	ldr	r3, [sp, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	e7f8      	b.n	800125a <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001268:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800126a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800126c:	f013 0f10 	tst.w	r3, #16
 8001270:	f040 8095 	bne.w	800139e <HAL_ADC_Init+0x1f2>
 8001274:	2800      	cmp	r0, #0
 8001276:	f040 8092 	bne.w	800139e <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800127a:	6822      	ldr	r2, [r4, #0]
 800127c:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800127e:	f013 0304 	ands.w	r3, r3, #4
 8001282:	f040 808c 	bne.w	800139e <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 8001286:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001288:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800128c:	f041 0102 	orr.w	r1, r1, #2
 8001290:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001292:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001296:	d055      	beq.n	8001344 <HAL_ADC_Init+0x198>
 8001298:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800129c:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800129e:	6891      	ldr	r1, [r2, #8]
 80012a0:	f001 0103 	and.w	r1, r1, #3
 80012a4:	2901      	cmp	r1, #1
 80012a6:	d050      	beq.n	800134a <HAL_ADC_Init+0x19e>
 80012a8:	2200      	movs	r2, #0
 80012aa:	b972      	cbnz	r2, 80012ca <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012ac:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012ae:	b12d      	cbz	r5, 80012bc <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012b0:	68a9      	ldr	r1, [r5, #8]
 80012b2:	f001 0103 	and.w	r1, r1, #3
 80012b6:	2901      	cmp	r1, #1
 80012b8:	d04f      	beq.n	800135a <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012ba:	b932      	cbnz	r2, 80012ca <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012bc:	493f      	ldr	r1, [pc, #252]	; (80013bc <HAL_ADC_Init+0x210>)
 80012be:	688a      	ldr	r2, [r1, #8]
 80012c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012c4:	6865      	ldr	r5, [r4, #4]
 80012c6:	432a      	orrs	r2, r5
 80012c8:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80012ca:	69e2      	ldr	r2, [r4, #28]
 80012cc:	0351      	lsls	r1, r2, #13
 80012ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80012d0:	2d01      	cmp	r5, #1
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_Init+0x12c>
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	430b      	orrs	r3, r1
 80012da:	68e1      	ldr	r1, [r4, #12]
 80012dc:	430b      	orrs	r3, r1
 80012de:	68a1      	ldr	r1, [r4, #8]
 80012e0:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012e4:	2901      	cmp	r1, #1
 80012e6:	d03e      	beq.n	8001366 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012ea:	2a01      	cmp	r2, #1
 80012ec:	d002      	beq.n	80012f4 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012f0:	430a      	orrs	r2, r1
 80012f2:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012f4:	6822      	ldr	r2, [r4, #0]
 80012f6:	6891      	ldr	r1, [r2, #8]
 80012f8:	f011 0f0c 	tst.w	r1, #12
 80012fc:	d10b      	bne.n	8001316 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012fe:	68d1      	ldr	r1, [r2, #12]
 8001300:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001304:	f021 0102 	bic.w	r1, r1, #2
 8001308:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800130a:	69a1      	ldr	r1, [r4, #24]
 800130c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800130e:	0052      	lsls	r2, r2, #1
 8001310:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001314:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001316:	6821      	ldr	r1, [r4, #0]
 8001318:	68cd      	ldr	r5, [r1, #12]
 800131a:	4a29      	ldr	r2, [pc, #164]	; (80013c0 <HAL_ADC_Init+0x214>)
 800131c:	402a      	ands	r2, r5
 800131e:	4313      	orrs	r3, r2
 8001320:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001322:	6923      	ldr	r3, [r4, #16]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d031      	beq.n	800138c <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001328:	6822      	ldr	r2, [r4, #0]
 800132a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800132c:	f023 030f 	bic.w	r3, r3, #15
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001332:	2300      	movs	r3, #0
 8001334:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8001336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001338:	f023 0303 	bic.w	r3, r3, #3
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6463      	str	r3, [r4, #68]	; 0x44
 8001342:	e033      	b.n	80013ac <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001344:	491f      	ldr	r1, [pc, #124]	; (80013c4 <HAL_ADC_Init+0x218>)
 8001346:	9101      	str	r1, [sp, #4]
 8001348:	e7a9      	b.n	800129e <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	f012 0f01 	tst.w	r2, #1
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x1aa>
 8001352:	2200      	movs	r2, #0
 8001354:	e7a9      	b.n	80012aa <HAL_ADC_Init+0xfe>
 8001356:	2201      	movs	r2, #1
 8001358:	e7a7      	b.n	80012aa <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800135a:	6829      	ldr	r1, [r5, #0]
 800135c:	f011 0f01 	tst.w	r1, #1
 8001360:	d0ab      	beq.n	80012ba <HAL_ADC_Init+0x10e>
 8001362:	2201      	movs	r2, #1
 8001364:	e7a9      	b.n	80012ba <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001366:	b932      	cbnz	r2, 8001376 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001368:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800136a:	3a01      	subs	r2, #1
 800136c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	e7b8      	b.n	80012e8 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 8001376:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001378:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800137c:	f042 0220 	orr.w	r2, r2, #32
 8001380:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001382:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001384:	f042 0201 	orr.w	r2, r2, #1
 8001388:	64a2      	str	r2, [r4, #72]	; 0x48
 800138a:	e7ad      	b.n	80012e8 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800138c:	6821      	ldr	r1, [r4, #0]
 800138e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001390:	f023 030f 	bic.w	r3, r3, #15
 8001394:	6a22      	ldr	r2, [r4, #32]
 8001396:	3a01      	subs	r2, #1
 8001398:	4313      	orrs	r3, r2
 800139a:	630b      	str	r3, [r1, #48]	; 0x30
 800139c:	e7c9      	b.n	8001332 <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 800139e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013a0:	f023 0312 	bic.w	r3, r3, #18
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 80013aa:	2001      	movs	r0, #1
}
 80013ac:	b017      	add	sp, #92	; 0x5c
 80013ae:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80013b0:	2001      	movs	r0, #1
 80013b2:	e7fb      	b.n	80013ac <HAL_ADC_Init+0x200>
 80013b4:	20000000 	.word	0x20000000
 80013b8:	431bde83 	.word	0x431bde83
 80013bc:	50000300 	.word	0x50000300
 80013c0:	fff0c007 	.word	0xfff0c007
 80013c4:	50000100 	.word	0x50000100

080013c8 <HAL_ADC_Start_DMA>:
{
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ca:	6804      	ldr	r4, [r0, #0]
 80013cc:	68a4      	ldr	r4, [r4, #8]
 80013ce:	f014 0f04 	tst.w	r4, #4
 80013d2:	d002      	beq.n	80013da <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_BUSY;
 80013d4:	2502      	movs	r5, #2
}
 80013d6:	4628      	mov	r0, r5
 80013d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80013da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d07e      	beq.n	80014e0 <HAL_ADC_Start_DMA+0x118>
 80013e2:	2301      	movs	r3, #1
 80013e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80013e8:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <HAL_ADC_Start_DMA+0x11c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f013 0f1f 	tst.w	r3, #31
 80013f0:	d004      	beq.n	80013fc <HAL_ADC_Start_DMA+0x34>
      __HAL_UNLOCK(hadc);
 80013f2:	2300      	movs	r3, #0
 80013f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 80013f8:	2501      	movs	r5, #1
 80013fa:	e7ec      	b.n	80013d6 <HAL_ADC_Start_DMA+0xe>
 80013fc:	4617      	mov	r7, r2
 80013fe:	460e      	mov	r6, r1
 8001400:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8001402:	f7ff fe59 	bl	80010b8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001406:	4605      	mov	r5, r0
 8001408:	2800      	cmp	r0, #0
 800140a:	d165      	bne.n	80014d8 <HAL_ADC_Start_DMA+0x110>
        ADC_STATE_CLR_SET(hadc->State,
 800140c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800140e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800141c:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <HAL_ADC_Start_DMA+0x11c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f013 0f1f 	tst.w	r3, #31
 8001424:	d038      	beq.n	8001498 <HAL_ADC_Start_DMA+0xd0>
 8001426:	6822      	ldr	r2, [r4, #0]
 8001428:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800142c:	d034      	beq.n	8001498 <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800142e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001434:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_ADC_Start_DMA+0x120>)
 8001438:	429a      	cmp	r2, r3
 800143a:	d03d      	beq.n	80014b8 <HAL_ADC_Start_DMA+0xf0>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800143c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800143e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001442:	d046      	beq.n	80014d2 <HAL_ADC_Start_DMA+0x10a>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001444:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001446:	f023 0306 	bic.w	r3, r3, #6
 800144a:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 800144c:	2300      	movs	r3, #0
 800144e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001452:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001454:	4a25      	ldr	r2, [pc, #148]	; (80014ec <HAL_ADC_Start_DMA+0x124>)
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800145a:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <HAL_ADC_Start_DMA+0x128>)
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800145e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001460:	4a24      	ldr	r2, [pc, #144]	; (80014f4 <HAL_ADC_Start_DMA+0x12c>)
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	221c      	movs	r2, #28
 8001468:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	6853      	ldr	r3, [r2, #4]
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001474:	6822      	ldr	r2, [r4, #0]
 8001476:	68d3      	ldr	r3, [r2, #12]
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800147e:	6821      	ldr	r1, [r4, #0]
 8001480:	463b      	mov	r3, r7
 8001482:	4632      	mov	r2, r6
 8001484:	3140      	adds	r1, #64	; 0x40
 8001486:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001488:	f000 fb4c 	bl	8001b24 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	6893      	ldr	r3, [r2, #8]
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6093      	str	r3, [r2, #8]
 8001496:	e79e      	b.n	80013d6 <HAL_ADC_Start_DMA+0xe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001498:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800149a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800149e:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014a8:	d0c8      	beq.n	800143c <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b4:	6463      	str	r3, [r4, #68]	; 0x44
 80014b6:	e7c1      	b.n	800143c <HAL_ADC_Start_DMA+0x74>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014c2:	d0bb      	beq.n	800143c <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ce:	6463      	str	r3, [r4, #68]	; 0x44
 80014d0:	e7b4      	b.n	800143c <HAL_ADC_Start_DMA+0x74>
          ADC_CLEAR_ERRORCODE(hadc);
 80014d2:	2300      	movs	r3, #0
 80014d4:	64a3      	str	r3, [r4, #72]	; 0x48
 80014d6:	e7b9      	b.n	800144c <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 80014d8:	2300      	movs	r3, #0
 80014da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80014de:	e77a      	b.n	80013d6 <HAL_ADC_Start_DMA+0xe>
    __HAL_LOCK(hadc);
 80014e0:	2502      	movs	r5, #2
 80014e2:	e778      	b.n	80013d6 <HAL_ADC_Start_DMA+0xe>
 80014e4:	50000300 	.word	0x50000300
 80014e8:	50000100 	.word	0x50000100
 80014ec:	08001161 	.word	0x08001161
 80014f0:	08001157 	.word	0x08001157
 80014f4:	0800113d 	.word	0x0800113d

080014f8 <HAL_ADC_Stop_DMA>:
{  
 80014f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80014fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d102      	bne.n	8001508 <HAL_ADC_Stop_DMA+0x10>
 8001502:	2402      	movs	r4, #2
}
 8001504:	4620      	mov	r0, r4
 8001506:	bd38      	pop	{r3, r4, r5, pc}
 8001508:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 800150a:	2301      	movs	r3, #1
 800150c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001510:	216c      	movs	r1, #108	; 0x6c
 8001512:	f7ff fd65 	bl	8000fe0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001516:	4604      	mov	r4, r0
 8001518:	b118      	cbz	r0, 8001522 <HAL_ADC_Stop_DMA+0x2a>
  __HAL_UNLOCK(hadc);
 800151a:	2300      	movs	r3, #0
 800151c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  return tmp_hal_status;
 8001520:	e7f0      	b.n	8001504 <HAL_ADC_Stop_DMA+0xc>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001522:	682a      	ldr	r2, [r5, #0]
 8001524:	68d3      	ldr	r3, [r2, #12]
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800152c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800152e:	f000 fb33 	bl	8001b98 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 8001532:	4604      	mov	r4, r0
 8001534:	b118      	cbz	r0, 800153e <HAL_ADC_Stop_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001536:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153c:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800153e:	682a      	ldr	r2, [r5, #0]
 8001540:	6853      	ldr	r3, [r2, #4]
 8001542:	f023 0310 	bic.w	r3, r3, #16
 8001546:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8001548:	b974      	cbnz	r4, 8001568 <HAL_ADC_Stop_DMA+0x70>
      tmp_hal_status = ADC_Disable(hadc);
 800154a:	4628      	mov	r0, r5
 800154c:	f7ff fd04 	bl	8000f58 <ADC_Disable>
 8001550:	4604      	mov	r4, r0
    if (tmp_hal_status == HAL_OK)
 8001552:	2c00      	cmp	r4, #0
 8001554:	d1e1      	bne.n	800151a <HAL_ADC_Stop_DMA+0x22>
      ADC_STATE_CLR_SET(hadc->State,
 8001556:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001558:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	646b      	str	r3, [r5, #68]	; 0x44
 8001566:	e7d8      	b.n	800151a <HAL_ADC_Stop_DMA+0x22>
      ADC_Disable(hadc);
 8001568:	4628      	mov	r0, r5
 800156a:	f7ff fcf5 	bl	8000f58 <ADC_Disable>
 800156e:	e7f0      	b.n	8001552 <HAL_ADC_Stop_DMA+0x5a>

08001570 <HAL_ADCEx_Calibration_Start>:
{
 8001570:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001572:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <HAL_ADCEx_Calibration_Start+0x10>
 800157a:	2502      	movs	r5, #2
}
 800157c:	4628      	mov	r0, r5
 800157e:	bd70      	pop	{r4, r5, r6, pc}
 8001580:	460e      	mov	r6, r1
 8001582:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001584:	2301      	movs	r3, #1
 8001586:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_Disable(hadc);
 800158a:	f7ff fce5 	bl	8000f58 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 800158e:	4605      	mov	r5, r0
 8001590:	2800      	cmp	r0, #0
 8001592:	d130      	bne.n	80015f6 <HAL_ADCEx_Calibration_Start+0x86>
    hadc->State = HAL_ADC_STATE_READY;
 8001594:	2301      	movs	r3, #1
 8001596:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001598:	6822      	ldr	r2, [r4, #0]
 800159a:	6893      	ldr	r3, [r2, #8]
 800159c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015a0:	6093      	str	r3, [r2, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015a2:	2e01      	cmp	r6, #1
 80015a4:	d01b      	beq.n	80015de <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	6893      	ldr	r3, [r2, #8]
 80015aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015ae:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80015b0:	f7ff fcca 	bl	8000f48 <HAL_GetTick>
 80015b4:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	da15      	bge.n	80015ea <HAL_ADCEx_Calibration_Start+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015be:	f7ff fcc3 	bl	8000f48 <HAL_GetTick>
 80015c2:	1b80      	subs	r0, r0, r6
 80015c4:	280a      	cmp	r0, #10
 80015c6:	d9f6      	bls.n	80015b6 <HAL_ADCEx_Calibration_Start+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 80015c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015ca:	f023 0312 	bic.w	r3, r3, #18
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80015d4:	2300      	movs	r3, #0
 80015d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80015da:	2501      	movs	r5, #1
 80015dc:	e7ce      	b.n	800157c <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	6893      	ldr	r3, [r2, #8]
 80015e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015e6:	6093      	str	r3, [r2, #8]
 80015e8:	e7dd      	b.n	80015a6 <HAL_ADCEx_Calibration_Start+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 80015ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015ec:	f023 0303 	bic.w	r3, r3, #3
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80015f6:	2300      	movs	r3, #0
 80015f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 80015fc:	e7be      	b.n	800157c <HAL_ADCEx_Calibration_Start+0xc>
	...

08001600 <HAL_ADC_ConfigChannel>:
{
 8001600:	b470      	push	{r4, r5, r6}
 8001602:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8001604:	2200      	movs	r2, #0
 8001606:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 8001608:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800160c:	2a01      	cmp	r2, #1
 800160e:	f000 81ad 	beq.w	800196c <HAL_ADC_ConfigChannel+0x36c>
 8001612:	4603      	mov	r3, r0
 8001614:	2201      	movs	r2, #1
 8001616:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800161a:	6800      	ldr	r0, [r0, #0]
 800161c:	6882      	ldr	r2, [r0, #8]
 800161e:	f012 0f04 	tst.w	r2, #4
 8001622:	f040 8196 	bne.w	8001952 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 8001626:	684a      	ldr	r2, [r1, #4]
 8001628:	2a04      	cmp	r2, #4
 800162a:	d831      	bhi.n	8001690 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 800162c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800162e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001632:	0055      	lsls	r5, r2, #1
 8001634:	221f      	movs	r2, #31
 8001636:	40aa      	lsls	r2, r5
 8001638:	ea24 0202 	bic.w	r2, r4, r2
 800163c:	680c      	ldr	r4, [r1, #0]
 800163e:	40ac      	lsls	r4, r5
 8001640:	4322      	orrs	r2, r4
 8001642:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	6882      	ldr	r2, [r0, #8]
 8001648:	f012 0f0c 	tst.w	r2, #12
 800164c:	d168      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800164e:	680a      	ldr	r2, [r1, #0]
 8001650:	2a09      	cmp	r2, #9
 8001652:	d94e      	bls.n	80016f2 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001654:	6984      	ldr	r4, [r0, #24]
 8001656:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800165a:	3a1e      	subs	r2, #30
 800165c:	2507      	movs	r5, #7
 800165e:	4095      	lsls	r5, r2
 8001660:	ea24 0405 	bic.w	r4, r4, r5
 8001664:	688d      	ldr	r5, [r1, #8]
 8001666:	fa05 f202 	lsl.w	r2, r5, r2
 800166a:	4322      	orrs	r2, r4
 800166c:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800166e:	6948      	ldr	r0, [r1, #20]
 8001670:	681c      	ldr	r4, [r3, #0]
 8001672:	68e2      	ldr	r2, [r4, #12]
 8001674:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001678:	0052      	lsls	r2, r2, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 800167e:	6908      	ldr	r0, [r1, #16]
 8001680:	3801      	subs	r0, #1
 8001682:	2803      	cmp	r0, #3
 8001684:	f200 808f 	bhi.w	80017a6 <HAL_ADC_ConfigChannel+0x1a6>
 8001688:	e8df f000 	tbb	[pc, r0]
 800168c:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8001690:	2a09      	cmp	r2, #9
 8001692:	d80e      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001694:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800169a:	0055      	lsls	r5, r2, #1
 800169c:	3d1e      	subs	r5, #30
 800169e:	221f      	movs	r2, #31
 80016a0:	40aa      	lsls	r2, r5
 80016a2:	ea24 0202 	bic.w	r2, r4, r2
 80016a6:	680c      	ldr	r4, [r1, #0]
 80016a8:	fa04 f505 	lsl.w	r5, r4, r5
 80016ac:	432a      	orrs	r2, r5
 80016ae:	6342      	str	r2, [r0, #52]	; 0x34
 80016b0:	e7c8      	b.n	8001644 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80016b2:	2a0e      	cmp	r2, #14
 80016b4:	d80e      	bhi.n	80016d4 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80016b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016bc:	0055      	lsls	r5, r2, #1
 80016be:	3d3c      	subs	r5, #60	; 0x3c
 80016c0:	221f      	movs	r2, #31
 80016c2:	40aa      	lsls	r2, r5
 80016c4:	ea24 0202 	bic.w	r2, r4, r2
 80016c8:	680c      	ldr	r4, [r1, #0]
 80016ca:	fa04 f505 	lsl.w	r5, r4, r5
 80016ce:	432a      	orrs	r2, r5
 80016d0:	6382      	str	r2, [r0, #56]	; 0x38
 80016d2:	e7b7      	b.n	8001644 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016d4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80016d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016da:	0055      	lsls	r5, r2, #1
 80016dc:	3d5a      	subs	r5, #90	; 0x5a
 80016de:	221f      	movs	r2, #31
 80016e0:	40aa      	lsls	r2, r5
 80016e2:	ea24 0202 	bic.w	r2, r4, r2
 80016e6:	680c      	ldr	r4, [r1, #0]
 80016e8:	fa04 f505 	lsl.w	r5, r4, r5
 80016ec:	432a      	orrs	r2, r5
 80016ee:	63c2      	str	r2, [r0, #60]	; 0x3c
 80016f0:	e7a8      	b.n	8001644 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016f2:	6944      	ldr	r4, [r0, #20]
 80016f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016f8:	2507      	movs	r5, #7
 80016fa:	4095      	lsls	r5, r2
 80016fc:	ea24 0405 	bic.w	r4, r4, r5
 8001700:	688d      	ldr	r5, [r1, #8]
 8001702:	fa05 f202 	lsl.w	r2, r5, r2
 8001706:	4322      	orrs	r2, r4
 8001708:	6142      	str	r2, [r0, #20]
 800170a:	e7b0      	b.n	800166e <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800170c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800170e:	4d98      	ldr	r5, [pc, #608]	; (8001970 <HAL_ADC_ConfigChannel+0x370>)
 8001710:	4005      	ands	r5, r0
 8001712:	6808      	ldr	r0, [r1, #0]
 8001714:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001718:	4315      	orrs	r5, r2
 800171a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800171e:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	6882      	ldr	r2, [r0, #8]
 8001724:	f002 0203 	and.w	r2, r2, #3
 8001728:	2a01      	cmp	r2, #1
 800172a:	d06f      	beq.n	800180c <HAL_ADC_ConfigChannel+0x20c>
 800172c:	2200      	movs	r2, #0
 800172e:	2a00      	cmp	r2, #0
 8001730:	f040 811a 	bne.w	8001968 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001734:	68cc      	ldr	r4, [r1, #12]
 8001736:	2c01      	cmp	r4, #1
 8001738:	d070      	beq.n	800181c <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800173a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800173e:	680e      	ldr	r6, [r1, #0]
 8001740:	2501      	movs	r5, #1
 8001742:	40b5      	lsls	r5, r6
 8001744:	ea24 0405 	bic.w	r4, r4, r5
 8001748:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800174c:	6809      	ldr	r1, [r1, #0]
 800174e:	2910      	cmp	r1, #16
 8001750:	f000 808d 	beq.w	800186e <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001754:	2911      	cmp	r1, #17
 8001756:	f000 80af 	beq.w	80018b8 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800175a:	2912      	cmp	r1, #18
 800175c:	f000 80b2 	beq.w	80018c4 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2000      	movs	r0, #0
 8001762:	e0fb      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001764:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001766:	4d82      	ldr	r5, [pc, #520]	; (8001970 <HAL_ADC_ConfigChannel+0x370>)
 8001768:	4005      	ands	r5, r0
 800176a:	6808      	ldr	r0, [r1, #0]
 800176c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001770:	4315      	orrs	r5, r2
 8001772:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001776:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001778:	e7d2      	b.n	8001720 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800177a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800177c:	4d7c      	ldr	r5, [pc, #496]	; (8001970 <HAL_ADC_ConfigChannel+0x370>)
 800177e:	4005      	ands	r5, r0
 8001780:	6808      	ldr	r0, [r1, #0]
 8001782:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001786:	4315      	orrs	r5, r2
 8001788:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800178c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 800178e:	e7c7      	b.n	8001720 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001790:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001792:	4877      	ldr	r0, [pc, #476]	; (8001970 <HAL_ADC_ConfigChannel+0x370>)
 8001794:	4028      	ands	r0, r5
 8001796:	680d      	ldr	r5, [r1, #0]
 8001798:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800179c:	4302      	orrs	r2, r0
 800179e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017a2:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 80017a4:	e7bc      	b.n	8001720 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80017a8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017ac:	6808      	ldr	r0, [r1, #0]
 80017ae:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 80017b2:	d01c      	beq.n	80017ee <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80017b8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017bc:	680c      	ldr	r4, [r1, #0]
 80017be:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80017c2:	d019      	beq.n	80017f8 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80017c8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017cc:	680c      	ldr	r4, [r1, #0]
 80017ce:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80017d2:	d016      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80017d8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017dc:	680c      	ldr	r4, [r1, #0]
 80017de:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80017e2:	d19d      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80017e4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80017e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ea:	66c2      	str	r2, [r0, #108]	; 0x6c
 80017ec:	e798      	b.n	8001720 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80017ee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80017f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017f4:	6622      	str	r2, [r4, #96]	; 0x60
 80017f6:	e7dd      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80017f8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80017fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017fe:	6642      	str	r2, [r0, #100]	; 0x64
 8001800:	e7e0      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001802:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001804:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001808:	6682      	str	r2, [r0, #104]	; 0x68
 800180a:	e7e3      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800180c:	6802      	ldr	r2, [r0, #0]
 800180e:	f012 0f01 	tst.w	r2, #1
 8001812:	d101      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x218>
 8001814:	2200      	movs	r2, #0
 8001816:	e78a      	b.n	800172e <HAL_ADC_ConfigChannel+0x12e>
 8001818:	2201      	movs	r2, #1
 800181a:	e788      	b.n	800172e <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800181c:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001820:	680e      	ldr	r6, [r1, #0]
 8001822:	2501      	movs	r5, #1
 8001824:	40b5      	lsls	r5, r6
 8001826:	432c      	orrs	r4, r5
 8001828:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800182c:	6808      	ldr	r0, [r1, #0]
 800182e:	2809      	cmp	r0, #9
 8001830:	d90e      	bls.n	8001850 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001832:	681e      	ldr	r6, [r3, #0]
 8001834:	69b4      	ldr	r4, [r6, #24]
 8001836:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800183a:	381b      	subs	r0, #27
 800183c:	2507      	movs	r5, #7
 800183e:	4085      	lsls	r5, r0
 8001840:	ea24 0405 	bic.w	r4, r4, r5
 8001844:	688d      	ldr	r5, [r1, #8]
 8001846:	fa05 f000 	lsl.w	r0, r5, r0
 800184a:	4320      	orrs	r0, r4
 800184c:	61b0      	str	r0, [r6, #24]
 800184e:	e77d      	b.n	800174c <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001850:	681e      	ldr	r6, [r3, #0]
 8001852:	6974      	ldr	r4, [r6, #20]
 8001854:	3001      	adds	r0, #1
 8001856:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800185a:	2507      	movs	r5, #7
 800185c:	4085      	lsls	r5, r0
 800185e:	ea24 0405 	bic.w	r4, r4, r5
 8001862:	688d      	ldr	r5, [r1, #8]
 8001864:	fa05 f000 	lsl.w	r0, r5, r0
 8001868:	4320      	orrs	r0, r4
 800186a:	6170      	str	r0, [r6, #20]
 800186c:	e76e      	b.n	800174c <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800186e:	4841      	ldr	r0, [pc, #260]	; (8001974 <HAL_ADC_ConfigChannel+0x374>)
 8001870:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001872:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001876:	f47f af6d 	bne.w	8001754 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800187a:	681c      	ldr	r4, [r3, #0]
 800187c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001880:	d027      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x2d2>
 8001882:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001886:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001888:	68a0      	ldr	r0, [r4, #8]
 800188a:	f000 0003 	and.w	r0, r0, #3
 800188e:	2801      	cmp	r0, #1
 8001890:	d022      	beq.n	80018d8 <HAL_ADC_ConfigChannel+0x2d8>
 8001892:	2a00      	cmp	r2, #0
 8001894:	d157      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001896:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001898:	b135      	cbz	r5, 80018a8 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800189a:	68a8      	ldr	r0, [r5, #8]
 800189c:	f000 0003 	and.w	r0, r0, #3
 80018a0:	2801      	cmp	r0, #1
 80018a2:	d01f      	beq.n	80018e4 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d14e      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018a8:	2910      	cmp	r1, #16
 80018aa:	d021      	beq.n	80018f0 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018ac:	2911      	cmp	r1, #17
 80018ae:	d039      	beq.n	8001924 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018b0:	2912      	cmp	r1, #18
 80018b2:	d041      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2000      	movs	r0, #0
 80018b6:	e051      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018b8:	482e      	ldr	r0, [pc, #184]	; (8001974 <HAL_ADC_ConfigChannel+0x374>)
 80018ba:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018bc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80018c0:	d0db      	beq.n	800187a <HAL_ADC_ConfigChannel+0x27a>
 80018c2:	e74a      	b.n	800175a <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80018c4:	482b      	ldr	r0, [pc, #172]	; (8001974 <HAL_ADC_ConfigChannel+0x374>)
 80018c6:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018c8:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80018cc:	d0d5      	beq.n	800187a <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ce:	2000      	movs	r0, #0
 80018d0:	e044      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018d2:	4829      	ldr	r0, [pc, #164]	; (8001978 <HAL_ADC_ConfigChannel+0x378>)
 80018d4:	9001      	str	r0, [sp, #4]
 80018d6:	e7d7      	b.n	8001888 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018d8:	6820      	ldr	r0, [r4, #0]
 80018da:	f010 0f01 	tst.w	r0, #1
 80018de:	d0d8      	beq.n	8001892 <HAL_ADC_ConfigChannel+0x292>
 80018e0:	2201      	movs	r2, #1
 80018e2:	e7d6      	b.n	8001892 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018e4:	6828      	ldr	r0, [r5, #0]
 80018e6:	f010 0f01 	tst.w	r0, #1
 80018ea:	d0db      	beq.n	80018a4 <HAL_ADC_ConfigChannel+0x2a4>
 80018ec:	2201      	movs	r2, #1
 80018ee:	e7d9      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80018f4:	d1da      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018f6:	491f      	ldr	r1, [pc, #124]	; (8001974 <HAL_ADC_ConfigChannel+0x374>)
 80018f8:	688a      	ldr	r2, [r1, #8]
 80018fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018fe:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001900:	4a1e      	ldr	r2, [pc, #120]	; (800197c <HAL_ADC_ConfigChannel+0x37c>)
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	491e      	ldr	r1, [pc, #120]	; (8001980 <HAL_ADC_ConfigChannel+0x380>)
 8001906:	fbb2 f1f1 	udiv	r1, r2, r1
 800190a:	220a      	movs	r2, #10
 800190c:	fb02 f201 	mul.w	r2, r2, r1
 8001910:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001912:	e002      	b.n	800191a <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 8001914:	9a00      	ldr	r2, [sp, #0]
 8001916:	3a01      	subs	r2, #1
 8001918:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800191a:	9a00      	ldr	r2, [sp, #0]
 800191c:	2a00      	cmp	r2, #0
 800191e:	d1f9      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	2000      	movs	r0, #0
 8001922:	e01b      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001924:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001928:	d1c2      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800192a:	4912      	ldr	r1, [pc, #72]	; (8001974 <HAL_ADC_ConfigChannel+0x374>)
 800192c:	688a      	ldr	r2, [r1, #8]
 800192e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001932:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001934:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001936:	e011      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_ADC_ConfigChannel+0x374>)
 800193a:	688a      	ldr	r2, [r1, #8]
 800193c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001940:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001942:	2000      	movs	r0, #0
 8001944:	e00a      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001948:	f042 0220 	orr.w	r2, r2, #32
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800194e:	2001      	movs	r0, #1
 8001950:	e004      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001954:	f042 0220 	orr.w	r2, r2, #32
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800195a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001962:	b017      	add	sp, #92	; 0x5c
 8001964:	bc70      	pop	{r4, r5, r6}
 8001966:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	2000      	movs	r0, #0
 800196a:	e7f7      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 800196c:	2002      	movs	r0, #2
 800196e:	e7f8      	b.n	8001962 <HAL_ADC_ConfigChannel+0x362>
 8001970:	83fff000 	.word	0x83fff000
 8001974:	50000300 	.word	0x50000300
 8001978:	50000100 	.word	0x50000100
 800197c:	20000000 	.word	0x20000000
 8001980:	000f4240 	.word	0x000f4240

08001984 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001986:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001988:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001990:	0200      	lsls	r0, r0, #8
 8001992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001996:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001998:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800199c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80019a0:	60d0      	str	r0, [r2, #12]
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_NVIC_SetPriority+0x5c>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b2:	f1c3 0407 	rsb	r4, r3, #7
 80019b6:	2c04      	cmp	r4, #4
 80019b8:	bf28      	it	cs
 80019ba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019bc:	1d1d      	adds	r5, r3, #4
 80019be:	2d06      	cmp	r5, #6
 80019c0:	d917      	bls.n	80019f2 <HAL_NVIC_SetPriority+0x4a>
 80019c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	2501      	movs	r5, #1
 80019c6:	fa05 f404 	lsl.w	r4, r5, r4
 80019ca:	3c01      	subs	r4, #1
 80019cc:	4021      	ands	r1, r4
 80019ce:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	fa05 f303 	lsl.w	r3, r5, r3
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80019da:	2800      	cmp	r0, #0
 80019dc:	db0b      	blt.n	80019f6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	0109      	lsls	r1, r1, #4
 80019e0:	b2c9      	uxtb	r1, r1
 80019e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019e6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019ea:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019ee:	bc30      	pop	{r4, r5}
 80019f0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	2300      	movs	r3, #0
 80019f4:	e7e6      	b.n	80019c4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	f000 000f 	and.w	r0, r0, #15
 80019fa:	0109      	lsls	r1, r1, #4
 80019fc:	b2c9      	uxtb	r1, r1
 80019fe:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_NVIC_SetPriority+0x60>)
 8001a00:	5419      	strb	r1, [r3, r0]
 8001a02:	e7f4      	b.n	80019ee <HAL_NVIC_SetPriority+0x46>
 8001a04:	e000ed00 	.word	0xe000ed00
 8001a08:	e000ed14 	.word	0xe000ed14

08001a0c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a0c:	0942      	lsrs	r2, r0, #5
 8001a0e:	f000 001f 	and.w	r0, r0, #31
 8001a12:	2301      	movs	r3, #1
 8001a14:	fa03 f000 	lsl.w	r0, r3, r0
 8001a18:	4b01      	ldr	r3, [pc, #4]	; (8001a20 <HAL_NVIC_EnableIRQ+0x14>)
 8001a1a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	3801      	subs	r0, #1
 8001a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a2a:	d20a      	bcs.n	8001a42 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_SYSTICK_Config+0x24>)
 8001a2e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	21f0      	movs	r1, #240	; 0xf0
 8001a32:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_SYSTICK_Config+0x28>)
 8001a34:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	2000      	movs	r0, #0
 8001a3a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a50:	2804      	cmp	r0, #4
 8001a52:	d005      	beq.n	8001a60 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a54:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a60:	4a02      	ldr	r2, [pc, #8]	; (8001a6c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001a62:	6813      	ldr	r3, [r2, #0]
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a70:	4770      	bx	lr

08001a72 <HAL_SYSTICK_IRQHandler>:
{
 8001a72:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001a74:	f7ff fffc 	bl	8001a70 <HAL_SYSTICK_Callback>
 8001a78:	bd08      	pop	{r3, pc}

08001a7a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a7a:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a7c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001a7e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001a80:	2401      	movs	r4, #1
 8001a82:	40b4      	lsls	r4, r6
 8001a84:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a86:	6804      	ldr	r4, [r0, #0]
 8001a88:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a8a:	6843      	ldr	r3, [r0, #4]
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d005      	beq.n	8001a9c <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001a94:	6803      	ldr	r3, [r0, #0]
 8001a96:	60da      	str	r2, [r3, #12]
  }
}
 8001a98:	bc70      	pop	{r4, r5, r6}
 8001a9a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001aa0:	6803      	ldr	r3, [r0, #0]
 8001aa2:	60d9      	str	r1, [r3, #12]
 8001aa4:	e7f8      	b.n	8001a98 <DMA_SetConfig+0x1e>
	...

08001aa8 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001aa8:	6802      	ldr	r2, [r0, #0]
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <DMA_CalcBaseAndBitshift+0x18>)
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <DMA_CalcBaseAndBitshift+0x1c>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001aba:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <DMA_CalcBaseAndBitshift+0x20>)
 8001abc:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001abe:	4770      	bx	lr
 8001ac0:	bffdfff8 	.word	0xbffdfff8
 8001ac4:	cccccccd 	.word	0xcccccccd
 8001ac8:	40020000 	.word	0x40020000

08001acc <HAL_DMA_Init>:
  if(NULL == hdma)
 8001acc:	b340      	cbz	r0, 8001b20 <HAL_DMA_Init+0x54>
{ 
 8001ace:	b510      	push	{r4, lr}
 8001ad0:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001ad8:	6801      	ldr	r1, [r0, #0]
 8001ada:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001adc:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001ae0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001ae4:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae6:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8001ae8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	68e0      	ldr	r0, [r4, #12]
 8001aec:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af2:	6960      	ldr	r0, [r4, #20]
 8001af4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	69e0      	ldr	r0, [r4, #28]
 8001afc:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001afe:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001b00:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff ffd0 	bl	8001aa8 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8001b08:	2000      	movs	r0, #0
 8001b0a:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001b0c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001b0e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001b10:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b12:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001b1a:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8001b1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
 8001b22:	4770      	bx	lr

08001b24 <HAL_DMA_Start_IT>:
{
 8001b24:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001b26:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001b2a:	2c01      	cmp	r4, #1
 8001b2c:	d032      	beq.n	8001b94 <HAL_DMA_Start_IT+0x70>
 8001b2e:	2401      	movs	r4, #1
 8001b30:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b34:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001b38:	2c01      	cmp	r4, #1
 8001b3a:	d004      	beq.n	8001b46 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001b42:	2002      	movs	r0, #2
 8001b44:	bd38      	pop	{r3, r4, r5, pc}
 8001b46:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4e:	2000      	movs	r0, #0
 8001b50:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b52:	6825      	ldr	r5, [r4, #0]
 8001b54:	6828      	ldr	r0, [r5, #0]
 8001b56:	f020 0001 	bic.w	r0, r0, #1
 8001b5a:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f7ff ff8c 	bl	8001a7a <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001b62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b64:	b15b      	cbz	r3, 8001b7e <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	6813      	ldr	r3, [r2, #0]
 8001b6a:	f043 030e 	orr.w	r3, r3, #14
 8001b6e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b70:	6822      	ldr	r2, [r4, #0]
 8001b72:	6813      	ldr	r3, [r2, #0]
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	bd38      	pop	{r3, r4, r5, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b7e:	6822      	ldr	r2, [r4, #0]
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	f043 030a 	orr.w	r3, r3, #10
 8001b86:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b88:	6822      	ldr	r2, [r4, #0]
 8001b8a:	6813      	ldr	r3, [r2, #0]
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e7ed      	b.n	8001b70 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001b94:	2002      	movs	r0, #2
} 
 8001b96:	bd38      	pop	{r3, r4, r5, pc}

08001b98 <HAL_DMA_Abort>:
{
 8001b98:	4603      	mov	r3, r0
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b9a:	6801      	ldr	r1, [r0, #0]
 8001b9c:	680a      	ldr	r2, [r1, #0]
 8001b9e:	f022 020e 	bic.w	r2, r2, #14
 8001ba2:	600a      	str	r2, [r1, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ba4:	6801      	ldr	r1, [r0, #0]
 8001ba6:	680a      	ldr	r2, [r1, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	600a      	str	r2, [r1, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bae:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	6042      	str	r2, [r0, #4]
	hdma->State = HAL_DMA_STATE_READY; 
 8001bba:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	__HAL_UNLOCK(hdma);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f883 0020 	strb.w	r0, [r3, #32]
}
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_DMA_Abort_IT>:
{  
 8001bc6:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bc8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d003      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bd8:	6802      	ldr	r2, [r0, #0]
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	f023 030e 	bic.w	r3, r3, #14
 8001be0:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001be2:	6802      	ldr	r2, [r0, #0]
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001bec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001bee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001c02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c04:	b113      	cbz	r3, 8001c0c <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001c06:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2000      	movs	r0, #0
 8001c0a:	bd08      	pop	{r3, pc}
 8001c0c:	2000      	movs	r0, #0
}
 8001c0e:	bd08      	pop	{r3, pc}

08001c10 <HAL_DMA_IRQHandler>:
{
 8001c10:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c12:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001c14:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c16:	6804      	ldr	r4, [r0, #0]
 8001c18:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	408b      	lsls	r3, r1
 8001c20:	421a      	tst	r2, r3
 8001c22:	d014      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x3e>
 8001c24:	f015 0f04 	tst.w	r5, #4
 8001c28:	d011      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x3e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	f013 0f20 	tst.w	r3, #32
 8001c30:	d103      	bne.n	8001c3a <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001c3c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001c3e:	2304      	movs	r3, #4
 8001c40:	408b      	lsls	r3, r1
 8001c42:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d03a      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferHalfCpltCallback(hdma);
 8001c4a:	4798      	blx	r3
 8001c4c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c4e:	2302      	movs	r3, #2
 8001c50:	408b      	lsls	r3, r1
 8001c52:	421a      	tst	r2, r3
 8001c54:	d019      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x7a>
 8001c56:	f015 0f02 	tst.w	r5, #2
 8001c5a:	d016      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	f013 0f20 	tst.w	r3, #32
 8001c62:	d106      	bne.n	8001c72 <HAL_DMA_IRQHandler+0x62>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	f023 030a 	bic.w	r3, r3, #10
 8001c6a:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c72:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001c74:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001c76:	2302      	movs	r3, #2
 8001c78:	408b      	lsls	r3, r1
 8001c7a:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001c82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c84:	b1e3      	cbz	r3, 8001cc0 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferCpltCallback(hdma);
 8001c86:	4798      	blx	r3
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	fa03 f101 	lsl.w	r1, r3, r1
 8001c90:	420a      	tst	r2, r1
 8001c92:	d015      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
 8001c94:	f015 0f08 	tst.w	r5, #8
 8001c98:	d012      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	f023 030e 	bic.w	r3, r3, #14
 8001ca0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ca2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ca4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	fa03 f202 	lsl.w	r2, r3, r2
 8001cac:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cae:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001cb0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001cba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001cbc:	b103      	cbz	r3, 8001cc0 <HAL_DMA_IRQHandler+0xb0>
    	hdma->XferErrorCallback(hdma);
 8001cbe:	4798      	blx	r3
 8001cc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc6:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001cc8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001cca:	e088      	b.n	8001dde <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ccc:	08de      	lsrs	r6, r3, #3
 8001cce:	3608      	adds	r6, #8
 8001cd0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd4:	f003 0e07 	and.w	lr, r3, #7
 8001cd8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001cdc:	270f      	movs	r7, #15
 8001cde:	fa07 f70e 	lsl.w	r7, r7, lr
 8001ce2:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce6:	690f      	ldr	r7, [r1, #16]
 8001ce8:	fa07 f70e 	lsl.w	r7, r7, lr
 8001cec:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001cee:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8001cf2:	e083      	b.n	8001dfc <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf6:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf8:	68cf      	ldr	r7, [r1, #12]
 8001cfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8001cfe:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001d00:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d02:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d08:	684e      	ldr	r6, [r1, #4]
 8001d0a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001d0e:	409e      	lsls	r6, r3
 8001d10:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001d12:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d14:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d16:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d18:	688d      	ldr	r5, [r1, #8]
 8001d1a:	fa05 f50e 	lsl.w	r5, r5, lr
 8001d1e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001d20:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d22:	684c      	ldr	r4, [r1, #4]
 8001d24:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001d28:	d058      	beq.n	8001ddc <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4c47      	ldr	r4, [pc, #284]	; (8001e48 <HAL_GPIO_Init+0x184>)
 8001d2c:	69a5      	ldr	r5, [r4, #24]
 8001d2e:	f045 0501 	orr.w	r5, r5, #1
 8001d32:	61a5      	str	r5, [r4, #24]
 8001d34:	69a4      	ldr	r4, [r4, #24]
 8001d36:	f004 0401 	and.w	r4, r4, #1
 8001d3a:	9401      	str	r4, [sp, #4]
 8001d3c:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d3e:	089d      	lsrs	r5, r3, #2
 8001d40:	1cae      	adds	r6, r5, #2
 8001d42:	4c42      	ldr	r4, [pc, #264]	; (8001e4c <HAL_GPIO_Init+0x188>)
 8001d44:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001d48:	f003 0603 	and.w	r6, r3, #3
 8001d4c:	00b6      	lsls	r6, r6, #2
 8001d4e:	270f      	movs	r7, #15
 8001d50:	40b7      	lsls	r7, r6
 8001d52:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d56:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001d5a:	d06c      	beq.n	8001e36 <HAL_GPIO_Init+0x172>
 8001d5c:	4f3c      	ldr	r7, [pc, #240]	; (8001e50 <HAL_GPIO_Init+0x18c>)
 8001d5e:	42b8      	cmp	r0, r7
 8001d60:	d06b      	beq.n	8001e3a <HAL_GPIO_Init+0x176>
 8001d62:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d66:	42b8      	cmp	r0, r7
 8001d68:	d069      	beq.n	8001e3e <HAL_GPIO_Init+0x17a>
 8001d6a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d6e:	42b8      	cmp	r0, r7
 8001d70:	d05f      	beq.n	8001e32 <HAL_GPIO_Init+0x16e>
 8001d72:	2705      	movs	r7, #5
 8001d74:	fa07 f606 	lsl.w	r6, r7, r6
 8001d78:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d7a:	3502      	adds	r5, #2
 8001d7c:	4e33      	ldr	r6, [pc, #204]	; (8001e4c <HAL_GPIO_Init+0x188>)
 8001d7e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d82:	4c34      	ldr	r4, [pc, #208]	; (8001e54 <HAL_GPIO_Init+0x190>)
 8001d84:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	43d4      	mvns	r4, r2
 8001d88:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8c:	684f      	ldr	r7, [r1, #4]
 8001d8e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001d92:	d001      	beq.n	8001d98 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001d94:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001d98:	4d2e      	ldr	r5, [pc, #184]	; (8001e54 <HAL_GPIO_Init+0x190>)
 8001d9a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001d9c:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da2:	684f      	ldr	r7, [r1, #4]
 8001da4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001da8:	d001      	beq.n	8001dae <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001daa:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001dae:	4d29      	ldr	r5, [pc, #164]	; (8001e54 <HAL_GPIO_Init+0x190>)
 8001db0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db8:	684f      	ldr	r7, [r1, #4]
 8001dba:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001dbe:	d001      	beq.n	8001dc4 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8001dc0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001dc4:	4d23      	ldr	r5, [pc, #140]	; (8001e54 <HAL_GPIO_Init+0x190>)
 8001dc6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001dc8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dcc:	684e      	ldr	r6, [r1, #4]
 8001dce:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001dd2:	d001      	beq.n	8001dd8 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8001dd4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_GPIO_Init+0x190>)
 8001dda:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001ddc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001dde:	680a      	ldr	r2, [r1, #0]
 8001de0:	fa32 f403 	lsrs.w	r4, r2, r3
 8001de4:	d02d      	beq.n	8001e42 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001de6:	2501      	movs	r5, #1
 8001de8:	409d      	lsls	r5, r3
    if(iocurrent)
 8001dea:	402a      	ands	r2, r5
 8001dec:	d0f6      	beq.n	8001ddc <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dee:	684c      	ldr	r4, [r1, #4]
 8001df0:	2c02      	cmp	r4, #2
 8001df2:	f43f af6b 	beq.w	8001ccc <HAL_GPIO_Init+0x8>
 8001df6:	2c12      	cmp	r4, #18
 8001df8:	f43f af68 	beq.w	8001ccc <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001dfc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfe:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e02:	2403      	movs	r4, #3
 8001e04:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e08:	43e4      	mvns	r4, r4
 8001e0a:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0c:	684f      	ldr	r7, [r1, #4]
 8001e0e:	f007 0703 	and.w	r7, r7, #3
 8001e12:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e16:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001e18:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e1a:	684e      	ldr	r6, [r1, #4]
 8001e1c:	1e77      	subs	r7, r6, #1
 8001e1e:	2f01      	cmp	r7, #1
 8001e20:	f67f af68 	bls.w	8001cf4 <HAL_GPIO_Init+0x30>
 8001e24:	2e11      	cmp	r6, #17
 8001e26:	f43f af65 	beq.w	8001cf4 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2a:	2e12      	cmp	r6, #18
 8001e2c:	f47f af72 	bne.w	8001d14 <HAL_GPIO_Init+0x50>
 8001e30:	e760      	b.n	8001cf4 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e32:	2703      	movs	r7, #3
 8001e34:	e79e      	b.n	8001d74 <HAL_GPIO_Init+0xb0>
 8001e36:	2700      	movs	r7, #0
 8001e38:	e79c      	b.n	8001d74 <HAL_GPIO_Init+0xb0>
 8001e3a:	2701      	movs	r7, #1
 8001e3c:	e79a      	b.n	8001d74 <HAL_GPIO_Init+0xb0>
 8001e3e:	2702      	movs	r7, #2
 8001e40:	e798      	b.n	8001d74 <HAL_GPIO_Init+0xb0>
  }
}
 8001e42:	b003      	add	sp, #12
 8001e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	48000400 	.word	0x48000400
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	b90a      	cbnz	r2, 8001e5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5a:	6281      	str	r1, [r0, #40]	; 0x28
 8001e5c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5e:	6181      	str	r1, [r0, #24]
 8001e60:	4770      	bx	lr

08001e62 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e62:	4770      	bx	lr

08001e64 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001e64:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4203      	tst	r3, r0
 8001e6c:	d100      	bne.n	8001e70 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001e6e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e72:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e74:	f7ff fff5 	bl	8001e62 <HAL_GPIO_EXTI_Callback>
}
 8001e78:	e7f9      	b.n	8001e6e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001e7a:	bf00      	nop
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001e80:	4a02      	ldr	r2, [pc, #8]	; (8001e8c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4770      	bx	lr
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	6803      	ldr	r3, [r0, #0]
 8001e98:	f013 0f01 	tst.w	r3, #1
 8001e9c:	d063      	beq.n	8001f66 <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e9e:	4bb5      	ldr	r3, [pc, #724]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d046      	beq.n	8001f38 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eaa:	4bb2      	ldr	r3, [pc, #712]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d03b      	beq.n	8001f2e <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	6863      	ldr	r3, [r4, #4]
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	f000 808e 	beq.w	8001fdc <HAL_RCC_OscConfig+0x14c>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 8091 	bne.w	8001fe8 <HAL_RCC_OscConfig+0x158>
 8001ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001eca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001edc:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ede:	4aa5      	ldr	r2, [pc, #660]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001ee0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ee2:	f023 030f 	bic.w	r3, r3, #15
 8001ee6:	68a1      	ldr	r1, [r4, #8]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eec:	6863      	ldr	r3, [r4, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8094 	beq.w	800201c <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f828 	bl	8000f48 <HAL_GetTick>
 8001ef8:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001efe:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b9c      	ldr	r3, [pc, #624]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2201      	movs	r2, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	4219      	tst	r1, r3
 8001f1e:	d122      	bne.n	8001f66 <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff f812 	bl	8000f48 <HAL_GetTick>
 8001f24:	1b40      	subs	r0, r0, r5
 8001f26:	2864      	cmp	r0, #100	; 0x64
 8001f28:	d9e7      	bls.n	8001efa <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	e2ab      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f2e:	4b91      	ldr	r3, [pc, #580]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f36:	d0be      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x26>
 8001f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3c:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b8c      	ldr	r3, [pc, #560]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	2201      	movs	r2, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	4219      	tst	r1, r3
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_OscConfig+0xd6>
 8001f5e:	6863      	ldr	r3, [r4, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8289 	beq.w	8002478 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	f013 0f02 	tst.w	r3, #2
 8001f6c:	f000 809c 	beq.w	80020a8 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f70:	4b80      	ldr	r3, [pc, #512]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f013 0f0c 	tst.w	r3, #12
 8001f78:	d072      	beq.n	8002060 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f7a:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d067      	beq.n	8002056 <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f86:	6923      	ldr	r3, [r4, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80cb 	beq.w	8002124 <HAL_RCC_OscConfig+0x294>
 8001f8e:	2201      	movs	r2, #1
 8001f90:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe ffd0 	bl	8000f48 <HAL_GetTick>
 8001fa8:	4605      	mov	r5, r0
 8001faa:	2302      	movs	r3, #2
 8001fac:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	4219      	tst	r1, r3
 8001fca:	f040 809c 	bne.w	8002106 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fce:	f7fe ffbb 	bl	8000f48 <HAL_GetTick>
 8001fd2:	1b40      	subs	r0, r0, r5
 8001fd4:	2802      	cmp	r0, #2
 8001fd6:	d9e8      	bls.n	8001faa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001fd8:	2003      	movs	r0, #3
 8001fda:	e254      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fdc:	4a65      	ldr	r2, [pc, #404]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e77a      	b.n	8001ede <HAL_RCC_OscConfig+0x4e>
 8001fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_OscConfig+0x172>
 8001fee:	4b61      	ldr	r3, [pc, #388]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e76d      	b.n	8001ede <HAL_RCC_OscConfig+0x4e>
 8002002:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002006:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e760      	b.n	8001ede <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800201c:	f7fe ff94 	bl	8000f48 <HAL_GetTick>
 8002020:	4605      	mov	r5, r0
 8002022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002026:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b52      	ldr	r3, [pc, #328]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 800202c:	6819      	ldr	r1, [r3, #0]
 800202e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	2201      	movs	r2, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	4219      	tst	r1, r3
 8002046:	d08e      	beq.n	8001f66 <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe ff7e 	bl	8000f48 <HAL_GetTick>
 800204c:	1b40      	subs	r0, r0, r5
 800204e:	2864      	cmp	r0, #100	; 0x64
 8002050:	d9e7      	bls.n	8002022 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8002052:	2003      	movs	r0, #3
 8002054:	e217      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002056:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800205e:	d192      	bne.n	8001f86 <HAL_RCC_OscConfig+0xf6>
 8002060:	2302      	movs	r3, #2
 8002062:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	2302      	movs	r3, #2
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	2201      	movs	r2, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	4219      	tst	r1, r3
 8002080:	d004      	beq.n	800208c <HAL_RCC_OscConfig+0x1fc>
 8002082:	6923      	ldr	r3, [r4, #16]
 8002084:	4293      	cmp	r3, r2
 8002086:	d001      	beq.n	800208c <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8002088:	2001      	movs	r0, #1
 800208a:	e1fc      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4839      	ldr	r0, [pc, #228]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 800208e:	6803      	ldr	r3, [r0, #0]
 8002090:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002094:	6961      	ldr	r1, [r4, #20]
 8002096:	22f8      	movs	r2, #248	; 0xf8
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	4313      	orrs	r3, r2
 80020a6:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	f013 0f08 	tst.w	r3, #8
 80020ae:	f000 808d 	beq.w	80021cc <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b2:	69a3      	ldr	r3, [r4, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d061      	beq.n	800217c <HAL_RCC_OscConfig+0x2ec>
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	fab2 f282 	clz	r2, r2
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_RCC_OscConfig+0x2e8>)
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7fe ff3d 	bl	8000f48 <HAL_GetTick>
 80020ce:	4605      	mov	r5, r0
 80020d0:	2302      	movs	r3, #2
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	fa93 f2a3 	rbit	r2, r3
 80020da:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 80020e0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2201      	movs	r2, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	4219      	tst	r1, r3
 80020f6:	d169      	bne.n	80021cc <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f8:	f7fe ff26 	bl	8000f48 <HAL_GetTick>
 80020fc:	1b40      	subs	r0, r0, r5
 80020fe:	2802      	cmp	r0, #2
 8002100:	d9e6      	bls.n	80020d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
 8002104:	e1bf      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	481b      	ldr	r0, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 8002108:	6803      	ldr	r3, [r0, #0]
 800210a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800210e:	6961      	ldr	r1, [r4, #20]
 8002110:	22f8      	movs	r2, #248	; 0xf8
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	fab2 f282 	clz	r2, r2
 800211a:	fa01 f202 	lsl.w	r2, r1, r2
 800211e:	4313      	orrs	r3, r2
 8002120:	6003      	str	r3, [r0, #0]
 8002122:	e7c1      	b.n	80020a8 <HAL_RCC_OscConfig+0x218>
 8002124:	2301      	movs	r3, #1
 8002126:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002132:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800213c:	f7fe ff04 	bl	8000f48 <HAL_GetTick>
 8002140:	4605      	mov	r5, r0
 8002142:	2302      	movs	r3, #2
 8002144:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_OscConfig+0x2e4>)
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	2302      	movs	r3, #2
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	4219      	tst	r1, r3
 8002162:	d0a1      	beq.n	80020a8 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002164:	f7fe fef0 	bl	8000f48 <HAL_GetTick>
 8002168:	1b40      	subs	r0, r0, r5
 800216a:	2802      	cmp	r0, #2
 800216c:	d9e9      	bls.n	8002142 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 800216e:	2003      	movs	r0, #3
 8002170:	e189      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	10908120 	.word	0x10908120
 800217c:	2201      	movs	r2, #1
 800217e:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002182:	fab2 f282 	clz	r2, r2
 8002186:	4bc1      	ldr	r3, [pc, #772]	; (800248c <HAL_RCC_OscConfig+0x5fc>)
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7fe feda 	bl	8000f48 <HAL_GetTick>
 8002194:	4605      	mov	r5, r0
 8002196:	2302      	movs	r3, #2
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4aba      	ldr	r2, [pc, #744]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 80021a6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2201      	movs	r2, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	4219      	tst	r1, r3
 80021bc:	d006      	beq.n	80021cc <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fec3 	bl	8000f48 <HAL_GetTick>
 80021c2:	1b40      	subs	r0, r0, r5
 80021c4:	2802      	cmp	r0, #2
 80021c6:	d9e6      	bls.n	8002196 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80021c8:	2003      	movs	r0, #3
 80021ca:	e15c      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	f013 0f04 	tst.w	r3, #4
 80021d2:	f000 80b3 	beq.w	800233c <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4bae      	ldr	r3, [pc, #696]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021de:	d126      	bne.n	800222e <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	4bab      	ldr	r3, [pc, #684]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021e8:	61da      	str	r2, [r3, #28]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021f4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	4ba7      	ldr	r3, [pc, #668]	; (8002494 <HAL_RCC_OscConfig+0x604>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021fe:	d018      	beq.n	8002232 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	68e3      	ldr	r3, [r4, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d029      	beq.n	800225a <HAL_RCC_OscConfig+0x3ca>
 8002206:	bb73      	cbnz	r3, 8002266 <HAL_RCC_OscConfig+0x3d6>
 8002208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800220c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	621a      	str	r2, [r3, #32]
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	f022 0204 	bic.w	r2, r2, #4
 800221e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002220:	68e3      	ldr	r3, [r4, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d05d      	beq.n	80022e2 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe fe8f 	bl	8000f48 <HAL_GetTick>
 800222a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	e047      	b.n	80022be <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2500      	movs	r5, #0
 8002230:	e7e1      	b.n	80021f6 <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4a98      	ldr	r2, [pc, #608]	; (8002494 <HAL_RCC_OscConfig+0x604>)
 8002234:	6813      	ldr	r3, [r2, #0]
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800223c:	f7fe fe84 	bl	8000f48 <HAL_GetTick>
 8002240:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b94      	ldr	r3, [pc, #592]	; (8002494 <HAL_RCC_OscConfig+0x604>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f413 7f80 	tst.w	r3, #256	; 0x100
 800224a:	d1d9      	bne.n	8002200 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224c:	f7fe fe7c 	bl	8000f48 <HAL_GetTick>
 8002250:	1b80      	subs	r0, r0, r6
 8002252:	2864      	cmp	r0, #100	; 0x64
 8002254:	d9f5      	bls.n	8002242 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8002256:	2003      	movs	r0, #3
 8002258:	e115      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225a:	4a8d      	ldr	r2, [pc, #564]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 800225c:	6a13      	ldr	r3, [r2, #32]
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6213      	str	r3, [r2, #32]
 8002264:	e7dc      	b.n	8002220 <HAL_RCC_OscConfig+0x390>
 8002266:	2b05      	cmp	r3, #5
 8002268:	d009      	beq.n	800227e <HAL_RCC_OscConfig+0x3ee>
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 800226c:	6a1a      	ldr	r2, [r3, #32]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	621a      	str	r2, [r3, #32]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	f022 0204 	bic.w	r2, r2, #4
 800227a:	621a      	str	r2, [r3, #32]
 800227c:	e7d0      	b.n	8002220 <HAL_RCC_OscConfig+0x390>
 800227e:	4b84      	ldr	r3, [pc, #528]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 8002280:	6a1a      	ldr	r2, [r3, #32]
 8002282:	f042 0204 	orr.w	r2, r2, #4
 8002286:	621a      	str	r2, [r3, #32]
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	621a      	str	r2, [r3, #32]
 8002290:	e7c6      	b.n	8002220 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 8002294:	6a19      	ldr	r1, [r3, #32]
 8002296:	2302      	movs	r3, #2
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2201      	movs	r2, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	4219      	tst	r1, r3
 80022ac:	d145      	bne.n	800233a <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fe4b 	bl	8000f48 <HAL_GetTick>
 80022b2:	1b80      	subs	r0, r0, r6
 80022b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80022b8:	4298      	cmp	r0, r3
 80022ba:	f200 80df 	bhi.w	800247c <HAL_RCC_OscConfig+0x5ec>
 80022be:	2302      	movs	r3, #2
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d0dd      	beq.n	8002292 <HAL_RCC_OscConfig+0x402>
 80022d6:	2302      	movs	r3, #2
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 80022de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022e0:	e7d9      	b.n	8002296 <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fe31 	bl	8000f48 <HAL_GetTick>
 80022e6:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x486>
 80022ea:	4b69      	ldr	r3, [pc, #420]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 80022ec:	6a19      	ldr	r1, [r3, #32]
 80022ee:	2302      	movs	r3, #2
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2201      	movs	r2, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	4219      	tst	r1, r3
 8002304:	d019      	beq.n	800233a <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fe1f 	bl	8000f48 <HAL_GetTick>
 800230a:	1b80      	subs	r0, r0, r6
 800230c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002310:	4298      	cmp	r0, r3
 8002312:	f200 80b5 	bhi.w	8002480 <HAL_RCC_OscConfig+0x5f0>
 8002316:	2302      	movs	r3, #2
 8002318:	fa93 f2a3 	rbit	r2, r3
 800231c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	2b02      	cmp	r3, #2
 800232c:	d0dd      	beq.n	80022ea <HAL_RCC_OscConfig+0x45a>
 800232e:	2302      	movs	r3, #2
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	4b56      	ldr	r3, [pc, #344]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 8002336:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002338:	e7d9      	b.n	80022ee <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800233a:	bbb5      	cbnz	r5, 80023aa <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233c:	69e3      	ldr	r3, [r4, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80a0 	beq.w	8002484 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 8002346:	6852      	ldr	r2, [r2, #4]
 8002348:	f002 020c 	and.w	r2, r2, #12
 800234c:	2a08      	cmp	r2, #8
 800234e:	f000 80a3 	beq.w	8002498 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002352:	2b02      	cmp	r3, #2
 8002354:	d02f      	beq.n	80023b6 <HAL_RCC_OscConfig+0x526>
 8002356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002366:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fdea 	bl	8000f48 <HAL_GetTick>
 8002374:	4604      	mov	r4, r0
 8002376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237e:	4b44      	ldr	r3, [pc, #272]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2201      	movs	r2, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	4219      	tst	r1, r3
 800239a:	d06b      	beq.n	8002474 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fdd4 	bl	8000f48 <HAL_GetTick>
 80023a0:	1b00      	subs	r0, r0, r4
 80023a2:	2802      	cmp	r0, #2
 80023a4:	d9e7      	bls.n	8002376 <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 80023a6:	2003      	movs	r0, #3
 80023a8:	e06d      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4a39      	ldr	r2, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 80023ac:	69d3      	ldr	r3, [r2, #28]
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b2:	61d3      	str	r3, [r2, #28]
 80023b4:	e7c2      	b.n	800233c <HAL_RCC_OscConfig+0x4ac>
 80023b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023d0:	f7fe fdba 	bl	8000f48 <HAL_GetTick>
 80023d4:	4605      	mov	r5, r0
 80023d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023da:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 80023e0:	6819      	ldr	r1, [r3, #0]
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2201      	movs	r2, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	4219      	tst	r1, r3
 80023fa:	d006      	beq.n	800240a <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fda4 	bl	8000f48 <HAL_GetTick>
 8002400:	1b40      	subs	r0, r0, r5
 8002402:	2802      	cmp	r0, #2
 8002404:	d9e7      	bls.n	80023d6 <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8002406:	2003      	movs	r0, #3
 8002408:	e03d      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240a:	4921      	ldr	r1, [pc, #132]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 800240c:	684b      	ldr	r3, [r1, #4]
 800240e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002412:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002414:	6a20      	ldr	r0, [r4, #32]
 8002416:	4302      	orrs	r2, r0
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
 800241c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002420:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800242c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002436:	f7fe fd87 	bl	8000f48 <HAL_GetTick>
 800243a:	4604      	mov	r4, r0
 800243c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002440:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_OscConfig+0x600>)
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2201      	movs	r2, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	4219      	tst	r1, r3
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fd71 	bl	8000f48 <HAL_GetTick>
 8002466:	1b00      	subs	r0, r0, r4
 8002468:	2802      	cmp	r0, #2
 800246a:	d9e7      	bls.n	800243c <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 800246c:	2003      	movs	r0, #3
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002470:	2000      	movs	r0, #0
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
 8002474:	2000      	movs	r0, #0
 8002476:	e006      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8002478:	2001      	movs	r0, #1
 800247a:	e004      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 800247c:	2003      	movs	r0, #3
 800247e:	e002      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002480:	2003      	movs	r0, #3
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8002484:	2000      	movs	r0, #0
}
 8002486:	b002      	add	sp, #8
 8002488:	bd70      	pop	{r4, r5, r6, pc}
 800248a:	bf00      	nop
 800248c:	10908120 	.word	0x10908120
 8002490:	40021000 	.word	0x40021000
 8002494:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8002498:	2001      	movs	r0, #1
 800249a:	e7f4      	b.n	8002486 <HAL_RCC_OscConfig+0x5f6>

0800249c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800249e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a0:	f003 020c 	and.w	r2, r3, #12
 80024a4:	2a08      	cmp	r2, #8
 80024a6:	d124      	bne.n	80024f2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024a8:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80024ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024b0:	fa92 f2a2 	rbit	r2, r2
 80024b4:	fab2 f282 	clz	r2, r2
 80024b8:	fa21 f202 	lsr.w	r2, r1, r2
 80024bc:	490f      	ldr	r1, [pc, #60]	; (80024fc <HAL_RCC_GetSysClockFreq+0x60>)
 80024be:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80024c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024c4:	f002 020f 	and.w	r2, r2, #15
 80024c8:	210f      	movs	r1, #15
 80024ca:	fa91 f1a1 	rbit	r1, r1
 80024ce:	fab1 f181 	clz	r1, r1
 80024d2:	40ca      	lsrs	r2, r1
 80024d4:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_GetSysClockFreq+0x64>)
 80024d6:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80024dc:	d103      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_GetSysClockFreq+0x68>)
 80024e0:	fb03 f000 	mul.w	r0, r3, r0
 80024e4:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_RCC_GetSysClockFreq+0x6c>)
 80024e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024ec:	fb03 f000 	mul.w	r0, r3, r0
 80024f0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80024f2:	4805      	ldr	r0, [pc, #20]	; (8002508 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08005ed4 	.word	0x08005ed4
 8002500:	08005ee4 	.word	0x08005ee4
 8002504:	003d0900 	.word	0x003d0900
 8002508:	007a1200 	.word	0x007a1200

0800250c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800250c:	4b70      	ldr	r3, [pc, #448]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	428b      	cmp	r3, r1
 8002516:	d20c      	bcs.n	8002532 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002518:	4a6d      	ldr	r2, [pc, #436]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	f023 0307 	bic.w	r3, r3, #7
 8002520:	430b      	orrs	r3, r1
 8002522:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	4299      	cmp	r1, r3
 800252c:	d001      	beq.n	8002532 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 800252e:	2001      	movs	r0, #1
 8002530:	4770      	bx	lr
{
 8002532:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	6803      	ldr	r3, [r0, #0]
 8002536:	f013 0f02 	tst.w	r3, #2
 800253a:	d006      	beq.n	800254a <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	6853      	ldr	r3, [r2, #4]
 8002540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002544:	6884      	ldr	r4, [r0, #8]
 8002546:	4323      	orrs	r3, r4
 8002548:	6053      	str	r3, [r2, #4]
 800254a:	460d      	mov	r5, r1
 800254c:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	6803      	ldr	r3, [r0, #0]
 8002550:	f013 0f01 	tst.w	r3, #1
 8002554:	d07a      	beq.n	800264c <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002556:	6843      	ldr	r3, [r0, #4]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d02f      	beq.n	80025bc <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255c:	2b02      	cmp	r3, #2
 800255e:	d042      	beq.n	80025e6 <HAL_RCC_ClockConfig+0xda>
 8002560:	2202      	movs	r2, #2
 8002562:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	4a5b      	ldr	r2, [pc, #364]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	6810      	ldr	r0, [r2, #0]
 800256a:	2202      	movs	r2, #2
 800256c:	fa92 f2a2 	rbit	r2, r2
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	f002 021f 	and.w	r2, r2, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	4210      	tst	r0, r2
 8002580:	f000 80a4 	beq.w	80026cc <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002584:	4953      	ldr	r1, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	684a      	ldr	r2, [r1, #4]
 8002588:	f022 0203 	bic.w	r2, r2, #3
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002590:	f7fe fcda 	bl	8000f48 <HAL_GetTick>
 8002594:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002596:	6863      	ldr	r3, [r4, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d039      	beq.n	8002610 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259c:	2b02      	cmp	r3, #2
 800259e:	d046      	beq.n	800262e <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a0:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f013 0f0c 	tst.w	r3, #12
 80025a8:	d050      	beq.n	800264c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025aa:	f7fe fccd 	bl	8000f48 <HAL_GetTick>
 80025ae:	1b80      	subs	r0, r0, r6
 80025b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80025b4:	4298      	cmp	r0, r3
 80025b6:	d9f3      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80025b8:	2003      	movs	r0, #3
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c4:	4a43      	ldr	r2, [pc, #268]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025c6:	6810      	ldr	r0, [r2, #0]
 80025c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025cc:	fa92 f2a2 	rbit	r2, r2
 80025d0:	fab2 f282 	clz	r2, r2
 80025d4:	f002 021f 	and.w	r2, r2, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	4210      	tst	r0, r2
 80025e0:	d1d0      	bne.n	8002584 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ea:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	6810      	ldr	r0, [r2, #0]
 80025f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f6:	fa92 f2a2 	rbit	r2, r2
 80025fa:	fab2 f282 	clz	r2, r2
 80025fe:	f002 021f 	and.w	r2, r2, #31
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f202 	lsl.w	r2, r1, r2
 8002608:	4210      	tst	r0, r2
 800260a:	d1bb      	bne.n	8002584 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 800260c:	2001      	movs	r0, #1
 800260e:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002610:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b04      	cmp	r3, #4
 800261a:	d017      	beq.n	800264c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7fe fc94 	bl	8000f48 <HAL_GetTick>
 8002620:	1b80      	subs	r0, r0, r6
 8002622:	f241 3388 	movw	r3, #5000	; 0x1388
 8002626:	4298      	cmp	r0, r3
 8002628:	d9f2      	bls.n	8002610 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 800262a:	2003      	movs	r0, #3
 800262c:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d008      	beq.n	800264c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263a:	f7fe fc85 	bl	8000f48 <HAL_GetTick>
 800263e:	1b80      	subs	r0, r0, r6
 8002640:	f241 3388 	movw	r3, #5000	; 0x1388
 8002644:	4298      	cmp	r0, r3
 8002646:	d9f2      	bls.n	800262e <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
 800264a:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	429d      	cmp	r5, r3
 8002656:	d20c      	bcs.n	8002672 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	6813      	ldr	r3, [r2, #0]
 800265c:	f023 0307 	bic.w	r3, r3, #7
 8002660:	432b      	orrs	r3, r5
 8002662:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	429d      	cmp	r5, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
}
 8002670:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	f013 0f04 	tst.w	r3, #4
 8002678:	d006      	beq.n	8002688 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800267c:	6853      	ldr	r3, [r2, #4]
 800267e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002682:	68e1      	ldr	r1, [r4, #12]
 8002684:	430b      	orrs	r3, r1
 8002686:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	f013 0f08 	tst.w	r3, #8
 800268e:	d007      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002690:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	6853      	ldr	r3, [r2, #4]
 8002694:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002698:	6921      	ldr	r1, [r4, #16]
 800269a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800269e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026a0:	f7ff fefc 	bl	800249c <HAL_RCC_GetSysClockFreq>
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ac:	22f0      	movs	r2, #240	; 0xf0
 80026ae:	fa92 f2a2 	rbit	r2, r2
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	40d3      	lsrs	r3, r2
 80026b8:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <HAL_RCC_ClockConfig+0x1cc>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	40d8      	lsrs	r0, r3
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_RCC_ClockConfig+0x1d0>)
 80026c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe fc10 	bl	8000ee8 <HAL_InitTick>
  return HAL_OK;
 80026c8:	2000      	movs	r0, #0
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80026cc:	2001      	movs	r0, #1
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08005f24 	.word	0x08005f24
 80026dc:	20000000 	.word	0x20000000

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026e0:	4b01      	ldr	r3, [pc, #4]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026ee:	f7ff fff7 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026fe:	fa92 f2a2 	rbit	r2, r2
 8002702:	fab2 f282 	clz	r2, r2
 8002706:	40d3      	lsrs	r3, r2
 8002708:	4a02      	ldr	r2, [pc, #8]	; (8002714 <HAL_RCC_GetPCLK1Freq+0x28>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
}    
 800270c:	40d8      	lsrs	r0, r3
 800270e:	bd08      	pop	{r3, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	08005f34 	.word	0x08005f34

08002718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002718:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800271a:	f7ff ffe1 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002726:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800272a:	fa92 f2a2 	rbit	r2, r2
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	40d3      	lsrs	r3, r2
 8002734:	4a02      	ldr	r2, [pc, #8]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002738:	40d8      	lsrs	r0, r3
 800273a:	bd08      	pop	{r3, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	08005f34 	.word	0x08005f34

08002744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002746:	b083      	sub	sp, #12
 8002748:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800274a:	6803      	ldr	r3, [r0, #0]
 800274c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002750:	d044      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800275a:	d179      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	4b61      	ldr	r3, [pc, #388]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002764:	61da      	str	r2, [r3, #28]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002770:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f413 7f80 	tst.w	r3, #256	; 0x100
 800277a:	d06b      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002780:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002784:	d021      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002786:	6862      	ldr	r2, [r4, #4]
 8002788:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800278c:	4293      	cmp	r3, r2
 800278e:	d01c      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002790:	4854      	ldr	r0, [pc, #336]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002792:	6a01      	ldr	r1, [r0, #32]
 8002794:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027a0:	fab2 f282 	clz	r2, r2
 80027a4:	4f51      	ldr	r7, [pc, #324]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027a6:	443a      	add	r2, r7
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	f04f 0e01 	mov.w	lr, #1
 80027ae:	f8c2 e000 	str.w	lr, [r2]
 80027b2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	443b      	add	r3, r7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027c2:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c4:	f011 0f01 	tst.w	r1, #1
 80027c8:	d158      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027ca:	4a46      	ldr	r2, [pc, #280]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80027cc:	6a13      	ldr	r3, [r2, #32]
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d2:	6861      	ldr	r1, [r4, #4]
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027d8:	2d00      	cmp	r5, #0
 80027da:	d17a      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	f013 0f01 	tst.w	r3, #1
 80027e2:	d006      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e4:	4a3f      	ldr	r2, [pc, #252]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80027e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027e8:	f023 0303 	bic.w	r3, r3, #3
 80027ec:	68a1      	ldr	r1, [r4, #8]
 80027ee:	430b      	orrs	r3, r1
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	f013 0f20 	tst.w	r3, #32
 80027f8:	d006      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fa:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80027fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027fe:	f023 0310 	bic.w	r3, r3, #16
 8002802:	68e1      	ldr	r1, [r4, #12]
 8002804:	430b      	orrs	r3, r1
 8002806:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800280e:	d006      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002810:	4a34      	ldr	r2, [pc, #208]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002812:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002814:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002818:	6921      	ldr	r1, [r4, #16]
 800281a:	430b      	orrs	r3, r1
 800281c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002824:	d006      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002826:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002828:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800282a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	430b      	orrs	r3, r1
 8002832:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800283a:	d051      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800283c:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800283e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002844:	69a1      	ldr	r1, [r4, #24]
 8002846:	430b      	orrs	r3, r1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800284a:	2000      	movs	r0, #0
}
 800284c:	b003      	add	sp, #12
 800284e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002850:	2500      	movs	r5, #0
 8002852:	e78e      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002854:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002856:	6813      	ldr	r3, [r2, #0]
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800285e:	f7fe fb73 	bl	8000f48 <HAL_GetTick>
 8002862:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f413 7f80 	tst.w	r3, #256	; 0x100
 800286c:	d186      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286e:	f7fe fb6b 	bl	8000f48 <HAL_GetTick>
 8002872:	1b80      	subs	r0, r0, r6
 8002874:	2864      	cmp	r0, #100	; 0x64
 8002876:	d9f5      	bls.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002878:	2003      	movs	r0, #3
 800287a:	e7e7      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 800287c:	f7fe fb64 	bl	8000f48 <HAL_GetTick>
 8002880:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	e014      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002886:	6a19      	ldr	r1, [r3, #32]
 8002888:	2302      	movs	r3, #2
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2201      	movs	r2, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	4219      	tst	r1, r3
 800289e:	d194      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7fe fb52 	bl	8000f48 <HAL_GetTick>
 80028a4:	1b80      	subs	r0, r0, r6
 80028a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80028aa:	4298      	cmp	r0, r3
 80028ac:	d816      	bhi.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028ae:	2302      	movs	r3, #2
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d0de      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80028c6:	2302      	movs	r3, #2
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80028ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028d0:	e7da      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d2:	69d3      	ldr	r3, [r2, #28]
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d8:	61d3      	str	r3, [r2, #28]
 80028da:	e77f      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 80028dc:	2003      	movs	r0, #3
 80028de:	e7b5      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 80028e0:	2000      	movs	r0, #0
 80028e2:	e7b3      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40007000 	.word	0x40007000
 80028ec:	10908100 	.word	0x10908100

080028f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80028f0:	b538      	push	{r3, r4, r5, lr}
 80028f2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80028f4:	6802      	ldr	r2, [r0, #0]
 80028f6:	68d3      	ldr	r3, [r2, #12]
 80028f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028fc:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 80028fe:	f7fe fb23 	bl	8000f48 <HAL_GetTick>
 8002902:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f013 0f20 	tst.w	r3, #32
 800290c:	d107      	bne.n	800291e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800290e:	f7fe fb1b 	bl	8000f48 <HAL_GetTick>
 8002912:	1b40      	subs	r0, r0, r5
 8002914:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002918:	d9f4      	bls.n	8002904 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 800291a:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 800291c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800291e:	2000      	movs	r0, #0
 8002920:	bd38      	pop	{r3, r4, r5, pc}

08002922 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002922:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002924:	6803      	ldr	r3, [r0, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	f012 0f40 	tst.w	r2, #64	; 0x40
 800292c:	d001      	beq.n	8002932 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 800292e:	2000      	movs	r0, #0
 8002930:	bd38      	pop	{r3, r4, r5, pc}
 8002932:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800293a:	f7fe fb05 	bl	8000f48 <HAL_GetTick>
 800293e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002948:	d107      	bne.n	800295a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800294a:	f7fe fafd 	bl	8000f48 <HAL_GetTick>
 800294e:	1b40      	subs	r0, r0, r5
 8002950:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002954:	d9f4      	bls.n	8002940 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002956:	2003      	movs	r0, #3
}
 8002958:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 800295a:	2000      	movs	r0, #0
 800295c:	bd38      	pop	{r3, r4, r5, pc}

0800295e <HAL_RTC_Init>:
{
 800295e:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002960:	2800      	cmp	r0, #0
 8002962:	d05c      	beq.n	8002a1e <HAL_RTC_Init+0xc0>
 8002964:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002966:	7f43      	ldrb	r3, [r0, #29]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d041      	beq.n	80029f0 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800296c:	2302      	movs	r3, #2
 800296e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	22ca      	movs	r2, #202	; 0xca
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	2253      	movs	r2, #83	; 0x53
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff ffd0 	bl	8002922 <RTC_EnterInitMode>
 8002982:	4605      	mov	r5, r0
 8002984:	2800      	cmp	r0, #0
 8002986:	d137      	bne.n	80029f8 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	6893      	ldr	r3, [r2, #8]
 800298c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002994:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002996:	6821      	ldr	r1, [r4, #0]
 8002998:	688a      	ldr	r2, [r1, #8]
 800299a:	6863      	ldr	r3, [r4, #4]
 800299c:	6920      	ldr	r0, [r4, #16]
 800299e:	4303      	orrs	r3, r0
 80029a0:	6960      	ldr	r0, [r4, #20]
 80029a2:	4303      	orrs	r3, r0
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	68e2      	ldr	r2, [r4, #12]
 80029ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	6913      	ldr	r3, [r2, #16]
 80029b2:	68a1      	ldr	r1, [r4, #8]
 80029b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80029b8:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80029ba:	6822      	ldr	r2, [r4, #0]
 80029bc:	68d3      	ldr	r3, [r2, #12]
 80029be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f013 0f20 	tst.w	r3, #32
 80029cc:	d01b      	beq.n	8002a06 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80029d8:	6822      	ldr	r2, [r4, #0]
 80029da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029dc:	69a1      	ldr	r1, [r4, #24]
 80029de:	430b      	orrs	r3, r1
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80029e8:	2301      	movs	r3, #1
 80029ea:	7763      	strb	r3, [r4, #29]
}
 80029ec:	4628      	mov	r0, r5
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80029f0:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80029f2:	f001 fe77 	bl	80046e4 <HAL_RTC_MspInit>
 80029f6:	e7b9      	b.n	800296c <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	22ff      	movs	r2, #255	; 0xff
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029fe:	2304      	movs	r3, #4
 8002a00:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002a02:	2501      	movs	r5, #1
 8002a04:	e7f2      	b.n	80029ec <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7ff ff72 	bl	80028f0 <HAL_RTC_WaitForSynchro>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d0de      	beq.n	80029ce <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	22ff      	movs	r2, #255	; 0xff
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a16:	2304      	movs	r3, #4
 8002a18:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002a1a:	2501      	movs	r5, #1
 8002a1c:	e7e6      	b.n	80029ec <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8002a1e:	2501      	movs	r5, #1
 8002a20:	e7e4      	b.n	80029ec <HAL_RTC_Init+0x8e>

08002a22 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002a22:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002a24:	e002      	b.n	8002a2c <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002a26:	3301      	adds	r3, #1
    Value -= 10U;
 8002a28:	380a      	subs	r0, #10
 8002a2a:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002a2c:	2809      	cmp	r0, #9
 8002a2e:	d8fa      	bhi.n	8002a26 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	b2db      	uxtb	r3, r3
}
 8002a34:	4318      	orrs	r0, r3
 8002a36:	4770      	bx	lr

08002a38 <HAL_RTC_SetTime>:
{
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002a3a:	7f03      	ldrb	r3, [r0, #28]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d077      	beq.n	8002b30 <HAL_RTC_SetTime+0xf8>
 8002a40:	460e      	mov	r6, r1
 8002a42:	4604      	mov	r4, r0
 8002a44:	2301      	movs	r3, #1
 8002a46:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d146      	bne.n	8002ade <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a50:	6803      	ldr	r3, [r0, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a58:	d101      	bne.n	8002a5e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a5e:	7830      	ldrb	r0, [r6, #0]
 8002a60:	f7ff ffdf 	bl	8002a22 <RTC_ByteToBcd2>
 8002a64:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002a66:	7870      	ldrb	r0, [r6, #1]
 8002a68:	f7ff ffdb 	bl	8002a22 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a6c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002a70:	78b0      	ldrb	r0, [r6, #2]
 8002a72:	f7ff ffd6 	bl	8002a22 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002a76:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002a78:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a7a:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	22ca      	movs	r2, #202	; 0xca
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	2253      	movs	r2, #83	; 0x53
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7ff ff49 	bl	8002922 <RTC_EnterInitMode>
 8002a90:	4607      	mov	r7, r0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d135      	bne.n	8002b02 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002a9c:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002aa0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002aa2:	6822      	ldr	r2, [r4, #0]
 8002aa4:	6893      	ldr	r3, [r2, #8]
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aaa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002aac:	6821      	ldr	r1, [r4, #0]
 8002aae:	688b      	ldr	r3, [r1, #8]
 8002ab0:	68f2      	ldr	r2, [r6, #12]
 8002ab2:	6930      	ldr	r0, [r6, #16]
 8002ab4:	4302      	orrs	r2, r0
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	68d3      	ldr	r3, [r2, #12]
 8002abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f013 0f20 	tst.w	r3, #32
 8002acc:	d022      	beq.n	8002b14 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8002ad8:	2300      	movs	r3, #0
 8002ada:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002adc:	e029      	b.n	8002b32 <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ade:	6803      	ldr	r3, [r0, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ae6:	d101      	bne.n	8002aec <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002aec:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002aee:	7870      	ldrb	r0, [r6, #1]
 8002af0:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002af2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002af6:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002af8:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002afa:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002afc:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002b00:	e7bd      	b.n	8002a7e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	22ff      	movs	r2, #255	; 0xff
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002b10:	2701      	movs	r7, #1
 8002b12:	e00e      	b.n	8002b32 <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b14:	4620      	mov	r0, r4
 8002b16:	f7ff feeb 	bl	80028f0 <HAL_RTC_WaitForSynchro>
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d0d7      	beq.n	8002ace <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b24:	2304      	movs	r3, #4
 8002b26:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002b2c:	2701      	movs	r7, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002b30:	2702      	movs	r7, #2
}
 8002b32:	4638      	mov	r0, r7
 8002b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b36 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002b36:	0903      	lsrs	r3, r0, #4
 8002b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b3c:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002b3e:	f000 000f 	and.w	r0, r0, #15
 8002b42:	4410      	add	r0, r2
}
 8002b44:	b2c0      	uxtb	r0, r0
 8002b46:	4770      	bx	lr

08002b48 <HAL_RTC_GetTime>:
{
 8002b48:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b4a:	6803      	ldr	r3, [r0, #0]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b50:	6803      	ldr	r3, [r0, #0]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b58:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002b66:	0c1d      	lsrs	r5, r3, #16
 8002b68:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002b6c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002b6e:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002b72:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002b74:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002b78:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002b7a:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002b7e:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002b80:	b95a      	cbnz	r2, 8002b9a <HAL_RTC_GetTime+0x52>
 8002b82:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002b84:	f7ff ffd7 	bl	8002b36 <RTC_Bcd2ToByte>
 8002b88:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f7ff ffd3 	bl	8002b36 <RTC_Bcd2ToByte>
 8002b90:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff ffcf 	bl	8002b36 <RTC_Bcd2ToByte>
 8002b98:	70a8      	strb	r0, [r5, #2]
}
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}

08002b9e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b9e:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba2:	6a04      	ldr	r4, [r0, #32]
 8002ba4:	f024 0401 	bic.w	r4, r4, #1
 8002ba8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002baa:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bac:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bb0:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bb4:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002bb8:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	6203      	str	r3, [r0, #32]
}
 8002bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc4:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc6:	6a03      	ldr	r3, [r0, #32]
 8002bc8:	f023 0310 	bic.w	r3, r3, #16
 8002bcc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bce:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002bd0:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd2:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd6:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bde:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002be4:	6203      	str	r3, [r0, #32]
}
 8002be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002bec:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002bf2:	f041 0107 	orr.w	r1, r1, #7
 8002bf6:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002bf8:	6083      	str	r3, [r0, #8]
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bfc:	6802      	ldr	r2, [r0, #0]
 8002bfe:	68d3      	ldr	r3, [r2, #12]
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002c06:	6802      	ldr	r2, [r0, #0]
 8002c08:	6813      	ldr	r3, [r2, #0]
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	2000      	movs	r0, #0
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8002c14:	4770      	bx	lr

08002c16 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIM_TriggerCallback>:
{
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_IRQHandler>:
{
 8002c1a:	b510      	push	{r4, lr}
 8002c1c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c1e:	6803      	ldr	r3, [r0, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	f012 0f02 	tst.w	r2, #2
 8002c26:	d011      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	f012 0f02 	tst.w	r2, #2
 8002c2e:	d00d      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c30:	f06f 0202 	mvn.w	r2, #2
 8002c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c3a:	6803      	ldr	r3, [r0, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f013 0f03 	tst.w	r3, #3
 8002c42:	d079      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002c44:	f000 fe84 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	f012 0f04 	tst.w	r2, #4
 8002c54:	d012      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	f012 0f04 	tst.w	r2, #4
 8002c5c:	d00e      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c5e:	f06f 0204 	mvn.w	r2, #4
 8002c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c64:	2302      	movs	r3, #2
 8002c66:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c70:	d068      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	4620      	mov	r0, r4
 8002c74:	f000 fe6c 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	f012 0f08 	tst.w	r2, #8
 8002c84:	d012      	beq.n	8002cac <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	f012 0f08 	tst.w	r2, #8
 8002c8c:	d00e      	beq.n	8002cac <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c8e:	f06f 0208 	mvn.w	r2, #8
 8002c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c94:	2304      	movs	r3, #4
 8002c96:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f013 0f03 	tst.w	r3, #3
 8002ca0:	d057      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f000 fe54 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	f012 0f10 	tst.w	r2, #16
 8002cb4:	d012      	beq.n	8002cdc <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	f012 0f10 	tst.w	r2, #16
 8002cbc:	d00e      	beq.n	8002cdc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cbe:	f06f 0210 	mvn.w	r2, #16
 8002cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002cd0:	d046      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f000 fe3c 	bl	8003950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	f012 0f01 	tst.w	r2, #1
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	f012 0f01 	tst.w	r2, #1
 8002cec:	d13f      	bne.n	8002d6e <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cf6:	d003      	beq.n	8002d00 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cfe:	d13d      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d10:	d13b      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d1a:	d003      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d22:	d139      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	f012 0f20 	tst.w	r2, #32
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	f012 0f20 	tst.w	r2, #32
 8002d34:	d137      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x18c>
 8002d36:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d38:	f7ff ff6c 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff ff6a 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d42:	e781      	b.n	8002c48 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7ff ff65 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff ff63 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d50:	e792      	b.n	8002c78 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7ff ff5e 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ff5c 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d5e:	e7a3      	b.n	8002ca8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff ff57 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff ff55 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d6c:	e7b4      	b.n	8002cd8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d6e:	f06f 0201 	mvn.w	r2, #1
 8002d72:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d74:	4620      	mov	r0, r4
 8002d76:	f000 ffed 	bl	8003d54 <HAL_TIM_PeriodElapsedCallback>
 8002d7a:	e7b8      	b.n	8002cee <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002d82:	4620      	mov	r0, r4
 8002d84:	f000 f93b 	bl	8002ffe <HAL_TIMEx_BreakCallback>
 8002d88:	e7ba      	b.n	8002d00 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002d90:	4620      	mov	r0, r4
 8002d92:	f000 f935 	bl	8003000 <HAL_TIMEx_Break2Callback>
 8002d96:	e7bc      	b.n	8002d12 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d9c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff ff3a 	bl	8002c18 <HAL_TIM_TriggerCallback>
 8002da4:	e7be      	b.n	8002d24 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002da6:	f06f 0220 	mvn.w	r2, #32
 8002daa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002dac:	4620      	mov	r0, r4
 8002dae:	f000 f925 	bl	8002ffc <HAL_TIMEx_CommutationCallback>
}
 8002db2:	e7c0      	b.n	8002d36 <HAL_TIM_IRQHandler+0x11c>

08002db4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002db4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db6:	4a23      	ldr	r2, [pc, #140]	; (8002e44 <TIM_Base_SetConfig+0x90>)
 8002db8:	4290      	cmp	r0, r2
 8002dba:	d03d      	beq.n	8002e38 <TIM_Base_SetConfig+0x84>
 8002dbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002dc0:	d03a      	beq.n	8002e38 <TIM_Base_SetConfig+0x84>
 8002dc2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dc6:	4290      	cmp	r0, r2
 8002dc8:	d036      	beq.n	8002e38 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dca:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <TIM_Base_SetConfig+0x90>)
 8002dcc:	4290      	cmp	r0, r2
 8002dce:	d012      	beq.n	8002df6 <TIM_Base_SetConfig+0x42>
 8002dd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002dd4:	d00f      	beq.n	8002df6 <TIM_Base_SetConfig+0x42>
 8002dd6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	d00b      	beq.n	8002df6 <TIM_Base_SetConfig+0x42>
 8002dde:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8002de2:	4290      	cmp	r0, r2
 8002de4:	d007      	beq.n	8002df6 <TIM_Base_SetConfig+0x42>
 8002de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dea:	4290      	cmp	r0, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_Base_SetConfig+0x42>
 8002dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002df2:	4290      	cmp	r0, r2
 8002df4:	d103      	bne.n	8002dfe <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfa:	68ca      	ldr	r2, [r1, #12]
 8002dfc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e02:	694a      	ldr	r2, [r1, #20]
 8002e04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	688b      	ldr	r3, [r1, #8]
 8002e0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002e0c:	680b      	ldr	r3, [r1, #0]
 8002e0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <TIM_Base_SetConfig+0x90>)
 8002e12:	4298      	cmp	r0, r3
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x7a>
 8002e16:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002e1a:	4298      	cmp	r0, r3
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x7a>
 8002e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e22:	4298      	cmp	r0, r3
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x7a>
 8002e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2a:	4298      	cmp	r0, r3
 8002e2c:	d101      	bne.n	8002e32 <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2e:	690b      	ldr	r3, [r1, #16]
 8002e30:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002e32:	2301      	movs	r3, #1
 8002e34:	6143      	str	r3, [r0, #20]
 8002e36:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	684a      	ldr	r2, [r1, #4]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	e7c3      	b.n	8002dca <TIM_Base_SetConfig+0x16>
 8002e42:	bf00      	nop
 8002e44:	40012c00 	.word	0x40012c00

08002e48 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002e48:	b1a8      	cbz	r0, 8002e76 <HAL_TIM_Base_Init+0x2e>
{ 
 8002e4a:	b510      	push	{r4, lr}
 8002e4c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002e4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e52:	b15b      	cbz	r3, 8002e6c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002e54:	2302      	movs	r3, #2
 8002e56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002e5a:	1d21      	adds	r1, r4, #4
 8002e5c:	6820      	ldr	r0, [r4, #0]
 8002e5e:	f7ff ffa9 	bl	8002db4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002e68:	2000      	movs	r0, #0
 8002e6a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e70:	f001 fc4e 	bl	8004710 <HAL_TIM_Base_MspInit>
 8002e74:	e7ee      	b.n	8002e54 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002e76:	2001      	movs	r0, #1
 8002e78:	4770      	bx	lr

08002e7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e7a:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002e7c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e82:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002e86:	4319      	orrs	r1, r3
 8002e88:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8a:	6084      	str	r4, [r0, #8]
} 
 8002e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002e94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f000 8082 	beq.w	8002fa2 <HAL_TIM_ConfigClockSource+0x10e>
{
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002eae:	6802      	ldr	r2, [r0, #0]
 8002eb0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb2:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <HAL_TIM_ConfigClockSource+0x114>)
 8002eb4:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002eb6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002eb8:	680b      	ldr	r3, [r1, #0]
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d05d      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xe6>
 8002ebe:	d910      	bls.n	8002ee2 <HAL_TIM_ConfigClockSource+0x4e>
 8002ec0:	2b70      	cmp	r3, #112	; 0x70
 8002ec2:	d040      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xb2>
 8002ec4:	d81f      	bhi.n	8002f06 <HAL_TIM_ConfigClockSource+0x72>
 8002ec6:	2b50      	cmp	r3, #80	; 0x50
 8002ec8:	d04d      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0xd2>
 8002eca:	2b60      	cmp	r3, #96	; 0x60
 8002ecc:	d134      	bne.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002ece:	68ca      	ldr	r2, [r1, #12]
 8002ed0:	6849      	ldr	r1, [r1, #4]
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f7ff fe76 	bl	8002bc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed8:	2160      	movs	r1, #96	; 0x60
 8002eda:	6820      	ldr	r0, [r4, #0]
 8002edc:	f7ff fe86 	bl	8002bec <TIM_ITRx_SetConfig>
    break;
 8002ee0:	e02a      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d053      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0xfa>
 8002ee6:	d908      	bls.n	8002efa <HAL_TIM_ConfigClockSource+0x66>
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d055      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x104>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d123      	bne.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002ef0:	2130      	movs	r1, #48	; 0x30
 8002ef2:	6820      	ldr	r0, [r4, #0]
 8002ef4:	f7ff fe7a 	bl	8002bec <TIM_ITRx_SetConfig>
    break;
 8002ef8:	e01e      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002efa:	b9eb      	cbnz	r3, 8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002efc:	2100      	movs	r1, #0
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	f7ff fe74 	bl	8002bec <TIM_ITRx_SetConfig>
    break;
 8002f04:	e018      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d00e      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x96>
 8002f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f10:	d112      	bne.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 8002f12:	68cb      	ldr	r3, [r1, #12]
 8002f14:	684a      	ldr	r2, [r1, #4]
 8002f16:	6889      	ldr	r1, [r1, #8]
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	f7ff ffae 	bl	8002e7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	6893      	ldr	r3, [r2, #8]
 8002f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f26:	6093      	str	r3, [r2, #8]
    break;
 8002f28:	e006      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002f2a:	6822      	ldr	r2, [r4, #0]
 8002f2c:	6893      	ldr	r3, [r2, #8]
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f32:	f023 0307 	bic.w	r3, r3, #7
 8002f36:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002f44:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8002f46:	68cb      	ldr	r3, [r1, #12]
 8002f48:	684a      	ldr	r2, [r1, #4]
 8002f4a:	6889      	ldr	r1, [r1, #8]
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	f7ff ff94 	bl	8002e7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f52:	6822      	ldr	r2, [r4, #0]
 8002f54:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002f62:	6093      	str	r3, [r2, #8]
    break;
 8002f64:	e7e8      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002f66:	68ca      	ldr	r2, [r1, #12]
 8002f68:	6849      	ldr	r1, [r1, #4]
 8002f6a:	6820      	ldr	r0, [r4, #0]
 8002f6c:	f7ff fe17 	bl	8002b9e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f70:	2150      	movs	r1, #80	; 0x50
 8002f72:	6820      	ldr	r0, [r4, #0]
 8002f74:	f7ff fe3a 	bl	8002bec <TIM_ITRx_SetConfig>
    break;
 8002f78:	e7de      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002f7a:	68ca      	ldr	r2, [r1, #12]
 8002f7c:	6849      	ldr	r1, [r1, #4]
 8002f7e:	6820      	ldr	r0, [r4, #0]
 8002f80:	f7ff fe0d 	bl	8002b9e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	6820      	ldr	r0, [r4, #0]
 8002f88:	f7ff fe30 	bl	8002bec <TIM_ITRx_SetConfig>
    break;
 8002f8c:	e7d4      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002f8e:	2110      	movs	r1, #16
 8002f90:	6820      	ldr	r0, [r4, #0]
 8002f92:	f7ff fe2b 	bl	8002bec <TIM_ITRx_SetConfig>
    break;
 8002f96:	e7cf      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002f98:	2120      	movs	r1, #32
 8002f9a:	6820      	ldr	r0, [r4, #0]
 8002f9c:	f7ff fe26 	bl	8002bec <TIM_ITRx_SetConfig>
    break;
 8002fa0:	e7ca      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	fffe0088 	.word	0xfffe0088

08002fac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002fac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d01f      	beq.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 8002fb4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fbc:	6804      	ldr	r4, [r0, #0]
 8002fbe:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fc2:	4d0d      	ldr	r5, [pc, #52]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8002fc4:	42ac      	cmp	r4, r5
 8002fc6:	d010      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	680d      	ldr	r5, [r1, #0]
 8002fce:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd4:	6889      	ldr	r1, [r1, #8]
 8002fd6:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd8:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fda:	6803      	ldr	r3, [r0, #0]
 8002fdc:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002fe4:	4618      	mov	r0, r3
} 
 8002fe6:	bc30      	pop	{r4, r5}
 8002fe8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fee:	684d      	ldr	r5, [r1, #4]
 8002ff0:	432b      	orrs	r3, r5
 8002ff2:	e7e9      	b.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00

08002ffc <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003000:	4770      	bx	lr

08003002 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003002:	6802      	ldr	r2, [r0, #0]
 8003004:	6813      	ldr	r3, [r2, #0]
 8003006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800300a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	6802      	ldr	r2, [r0, #0]
 800300e:	6893      	ldr	r3, [r2, #8]
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003016:	2320      	movs	r3, #32
 8003018:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800301c:	4770      	bx	lr

0800301e <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 800301e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b20      	cmp	r3, #32
 8003026:	d001      	beq.n	800302c <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8003028:	2002      	movs	r0, #2
 800302a:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 800302c:	b1b9      	cbz	r1, 800305e <HAL_UART_Transmit_IT+0x40>
 800302e:	b1c2      	cbz	r2, 8003062 <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 8003030:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003034:	2b01      	cmp	r3, #1
 8003036:	d016      	beq.n	8003066 <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 8003038:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 800303a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800303e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003042:	2300      	movs	r3, #0
 8003044:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003046:	2221      	movs	r2, #33	; 0x21
 8003048:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800304c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003050:	6801      	ldr	r1, [r0, #0]
 8003052:	680a      	ldr	r2, [r1, #0]
 8003054:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003058:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800305a:	4618      	mov	r0, r3
 800305c:	4770      	bx	lr
      return HAL_ERROR;
 800305e:	2001      	movs	r0, #1
 8003060:	4770      	bx	lr
 8003062:	2001      	movs	r0, #1
 8003064:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003066:	2002      	movs	r0, #2
}
 8003068:	4770      	bx	lr

0800306a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800306a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b20      	cmp	r3, #32
 8003072:	d001      	beq.n	8003078 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8003074:	2002      	movs	r0, #2
 8003076:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003078:	2900      	cmp	r1, #0
 800307a:	d047      	beq.n	800310c <HAL_UART_Receive_IT+0xa2>
 800307c:	2a00      	cmp	r2, #0
 800307e:	d047      	beq.n	8003110 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8003080:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003084:	2b01      	cmp	r3, #1
 8003086:	d045      	beq.n	8003114 <HAL_UART_Receive_IT+0xaa>
 8003088:	2301      	movs	r3, #1
 800308a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 800308e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8003090:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8003094:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003098:	6883      	ldr	r3, [r0, #8]
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d006      	beq.n	80030ae <HAL_UART_Receive_IT+0x44>
 80030a0:	b9a3      	cbnz	r3, 80030cc <HAL_UART_Receive_IT+0x62>
 80030a2:	6903      	ldr	r3, [r0, #16]
 80030a4:	b973      	cbnz	r3, 80030c4 <HAL_UART_Receive_IT+0x5a>
 80030a6:	23ff      	movs	r3, #255	; 0xff
 80030a8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80030ac:	e011      	b.n	80030d2 <HAL_UART_Receive_IT+0x68>
 80030ae:	6903      	ldr	r3, [r0, #16]
 80030b0:	b923      	cbnz	r3, 80030bc <HAL_UART_Receive_IT+0x52>
 80030b2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80030b6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80030ba:	e00a      	b.n	80030d2 <HAL_UART_Receive_IT+0x68>
 80030bc:	23ff      	movs	r3, #255	; 0xff
 80030be:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80030c2:	e006      	b.n	80030d2 <HAL_UART_Receive_IT+0x68>
 80030c4:	237f      	movs	r3, #127	; 0x7f
 80030c6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80030ca:	e002      	b.n	80030d2 <HAL_UART_Receive_IT+0x68>
 80030cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d0:	d012      	beq.n	80030f8 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030d6:	2222      	movs	r2, #34	; 0x22
 80030d8:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80030dc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e0:	6801      	ldr	r1, [r0, #0]
 80030e2:	688a      	ldr	r2, [r1, #8]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80030ea:	6801      	ldr	r1, [r0, #0]
 80030ec:	680a      	ldr	r2, [r1, #0]
 80030ee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80030f2:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80030f4:	4618      	mov	r0, r3
 80030f6:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80030f8:	6903      	ldr	r3, [r0, #16]
 80030fa:	b91b      	cbnz	r3, 8003104 <HAL_UART_Receive_IT+0x9a>
 80030fc:	237f      	movs	r3, #127	; 0x7f
 80030fe:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003102:	e7e6      	b.n	80030d2 <HAL_UART_Receive_IT+0x68>
 8003104:	233f      	movs	r3, #63	; 0x3f
 8003106:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800310a:	e7e2      	b.n	80030d2 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 800310c:	2001      	movs	r0, #1
 800310e:	4770      	bx	lr
 8003110:	2001      	movs	r0, #1
 8003112:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003114:	2002      	movs	r0, #2
}
 8003116:	4770      	bx	lr

08003118 <HAL_UART_TxCpltCallback>:
{
 8003118:	4770      	bx	lr

0800311a <HAL_UART_ErrorCallback>:
{
 800311a:	4770      	bx	lr

0800311c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800311c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800311e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003126:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800312a:	f7ff fff6 	bl	800311a <HAL_UART_ErrorCallback>
 800312e:	bd08      	pop	{r3, pc}

08003130 <UART_SetConfig>:
{
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003134:	6883      	ldr	r3, [r0, #8]
 8003136:	6902      	ldr	r2, [r0, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	6942      	ldr	r2, [r0, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	69c2      	ldr	r2, [r0, #28]
 8003140:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003142:	6801      	ldr	r1, [r0, #0]
 8003144:	6808      	ldr	r0, [r1, #0]
 8003146:	4a64      	ldr	r2, [pc, #400]	; (80032d8 <UART_SetConfig+0x1a8>)
 8003148:	4002      	ands	r2, r0
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	6853      	ldr	r3, [r2, #4]
 8003152:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003156:	68e1      	ldr	r1, [r4, #12]
 8003158:	430b      	orrs	r3, r1
 800315a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800315c:	69a3      	ldr	r3, [r4, #24]
 800315e:	6a22      	ldr	r2, [r4, #32]
 8003160:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003162:	6821      	ldr	r1, [r4, #0]
 8003164:	688a      	ldr	r2, [r1, #8]
 8003166:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800316e:	6825      	ldr	r5, [r4, #0]
 8003170:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <UART_SetConfig+0x1ac>)
 8003172:	429d      	cmp	r5, r3
 8003174:	d015      	beq.n	80031a2 <UART_SetConfig+0x72>
 8003176:	4b5a      	ldr	r3, [pc, #360]	; (80032e0 <UART_SetConfig+0x1b0>)
 8003178:	429d      	cmp	r5, r3
 800317a:	d029      	beq.n	80031d0 <UART_SetConfig+0xa0>
 800317c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003180:	429d      	cmp	r5, r3
 8003182:	d021      	beq.n	80031c8 <UART_SetConfig+0x98>
 8003184:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003186:	69e2      	ldr	r2, [r4, #28]
 8003188:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800318c:	d022      	beq.n	80031d4 <UART_SetConfig+0xa4>
    switch (clocksource)
 800318e:	2b08      	cmp	r3, #8
 8003190:	f200 809f 	bhi.w	80032d2 <UART_SetConfig+0x1a2>
 8003194:	e8df f003 	tbb	[pc, r3]
 8003198:	9d7c7166 	.word	0x9d7c7166
 800319c:	9d9d9d88 	.word	0x9d9d9d88
 80031a0:	93          	.byte	0x93
 80031a1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031a2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d809      	bhi.n	80031c4 <UART_SetConfig+0x94>
 80031b0:	e8df f003 	tbb	[pc, r3]
 80031b4:	0c060402 	.word	0x0c060402
 80031b8:	2300      	movs	r3, #0
 80031ba:	e7e4      	b.n	8003186 <UART_SetConfig+0x56>
 80031bc:	2304      	movs	r3, #4
 80031be:	e7e2      	b.n	8003186 <UART_SetConfig+0x56>
 80031c0:	2308      	movs	r3, #8
 80031c2:	e7e0      	b.n	8003186 <UART_SetConfig+0x56>
 80031c4:	2310      	movs	r3, #16
 80031c6:	e7de      	b.n	8003186 <UART_SetConfig+0x56>
 80031c8:	2300      	movs	r3, #0
 80031ca:	e7dc      	b.n	8003186 <UART_SetConfig+0x56>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e7da      	b.n	8003186 <UART_SetConfig+0x56>
 80031d0:	2300      	movs	r3, #0
 80031d2:	e7d8      	b.n	8003186 <UART_SetConfig+0x56>
    switch (clocksource)
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d842      	bhi.n	800325e <UART_SetConfig+0x12e>
 80031d8:	e8df f003 	tbb	[pc, r3]
 80031dc:	41221705 	.word	0x41221705
 80031e0:	4141412d 	.word	0x4141412d
 80031e4:	38          	.byte	0x38
 80031e5:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031e6:	f7ff fa81 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 80031ea:	6862      	ldr	r2, [r4, #4]
 80031ec:	0853      	lsrs	r3, r2, #1
 80031ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80031f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80031f8:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80031fa:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031fe:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003202:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	60d3      	str	r3, [r2, #12]
 8003208:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800320a:	f7ff fa85 	bl	8002718 <HAL_RCC_GetPCLK2Freq>
 800320e:	6862      	ldr	r2, [r4, #4]
 8003210:	0853      	lsrs	r3, r2, #1
 8003212:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003216:	fbb3 f3f2 	udiv	r3, r3, r2
 800321a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800321c:	2000      	movs	r0, #0
        break;
 800321e:	e7ec      	b.n	80031fa <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003220:	6862      	ldr	r2, [r4, #4]
 8003222:	0853      	lsrs	r3, r2, #1
 8003224:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003228:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800322c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003230:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003232:	2000      	movs	r0, #0
        break;
 8003234:	e7e1      	b.n	80031fa <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003236:	f7ff f931 	bl	800249c <HAL_RCC_GetSysClockFreq>
 800323a:	6862      	ldr	r2, [r4, #4]
 800323c:	0853      	lsrs	r3, r2, #1
 800323e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003242:	fbb3 f3f2 	udiv	r3, r3, r2
 8003246:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003248:	2000      	movs	r0, #0
        break;
 800324a:	e7d6      	b.n	80031fa <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800324c:	6862      	ldr	r2, [r4, #4]
 800324e:	0853      	lsrs	r3, r2, #1
 8003250:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003254:	fbb3 f3f2 	udiv	r3, r3, r2
 8003258:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800325a:	2000      	movs	r0, #0
        break;
 800325c:	e7cd      	b.n	80031fa <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 800325e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003260:	2300      	movs	r3, #0
 8003262:	e7ca      	b.n	80031fa <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003264:	f7ff fa42 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800326e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003272:	b280      	uxth	r0, r0
 8003274:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003276:	2000      	movs	r0, #0
        break;
 8003278:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800327a:	f7ff fa4d 	bl	8002718 <HAL_RCC_GetPCLK2Freq>
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003284:	fbb0 f0f3 	udiv	r0, r0, r3
 8003288:	b280      	uxth	r0, r0
 800328a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800328c:	2000      	movs	r0, #0
        break;
 800328e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003290:	6862      	ldr	r2, [r4, #4]
 8003292:	0853      	lsrs	r3, r2, #1
 8003294:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003298:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800329c:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80032a4:	2000      	movs	r0, #0
        break;
 80032a6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032a8:	f7ff f8f8 	bl	800249c <HAL_RCC_GetSysClockFreq>
 80032ac:	6863      	ldr	r3, [r4, #4]
 80032ae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80032b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80032b6:	b280      	uxth	r0, r0
 80032b8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ba:	2000      	movs	r0, #0
        break;
 80032bc:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032be:	6862      	ldr	r2, [r4, #4]
 80032c0:	0853      	lsrs	r3, r2, #1
 80032c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ce:	2000      	movs	r0, #0
        break;
 80032d0:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 80032d2:	2001      	movs	r0, #1
}
 80032d4:	bd38      	pop	{r3, r4, r5, pc}
 80032d6:	bf00      	nop
 80032d8:	efff69f3 	.word	0xefff69f3
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40004400 	.word	0x40004400

080032e4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80032e6:	f013 0f01 	tst.w	r3, #1
 80032ea:	d006      	beq.n	80032fa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ec:	6802      	ldr	r2, [r0, #0]
 80032ee:	6853      	ldr	r3, [r2, #4]
 80032f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032f4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80032f6:	430b      	orrs	r3, r1
 80032f8:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80032fc:	f013 0f02 	tst.w	r3, #2
 8003300:	d006      	beq.n	8003310 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003302:	6802      	ldr	r2, [r0, #0]
 8003304:	6853      	ldr	r3, [r2, #4]
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800330c:	430b      	orrs	r3, r1
 800330e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003310:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003312:	f013 0f04 	tst.w	r3, #4
 8003316:	d006      	beq.n	8003326 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003318:	6802      	ldr	r2, [r0, #0]
 800331a:	6853      	ldr	r3, [r2, #4]
 800331c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003320:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003322:	430b      	orrs	r3, r1
 8003324:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003326:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003328:	f013 0f08 	tst.w	r3, #8
 800332c:	d006      	beq.n	800333c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800332e:	6802      	ldr	r2, [r0, #0]
 8003330:	6853      	ldr	r3, [r2, #4]
 8003332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003336:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003338:	430b      	orrs	r3, r1
 800333a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800333c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800333e:	f013 0f10 	tst.w	r3, #16
 8003342:	d006      	beq.n	8003352 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003344:	6802      	ldr	r2, [r0, #0]
 8003346:	6893      	ldr	r3, [r2, #8]
 8003348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800334c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800334e:	430b      	orrs	r3, r1
 8003350:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003352:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003354:	f013 0f20 	tst.w	r3, #32
 8003358:	d006      	beq.n	8003368 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800335a:	6802      	ldr	r2, [r0, #0]
 800335c:	6893      	ldr	r3, [r2, #8]
 800335e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003362:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003364:	430b      	orrs	r3, r1
 8003366:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003368:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800336a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800336e:	d00a      	beq.n	8003386 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003370:	6802      	ldr	r2, [r0, #0]
 8003372:	6853      	ldr	r3, [r2, #4]
 8003374:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003378:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800337a:	430b      	orrs	r3, r1
 800337c:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800337e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003384:	d00b      	beq.n	800339e <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003386:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003388:	f013 0f80 	tst.w	r3, #128	; 0x80
 800338c:	d006      	beq.n	800339c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800338e:	6802      	ldr	r2, [r0, #0]
 8003390:	6853      	ldr	r3, [r2, #4]
 8003392:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003396:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003398:	430b      	orrs	r3, r1
 800339a:	6053      	str	r3, [r2, #4]
 800339c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800339e:	6802      	ldr	r2, [r0, #0]
 80033a0:	6853      	ldr	r3, [r2, #4]
 80033a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033a6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6053      	str	r3, [r2, #4]
 80033ac:	e7eb      	b.n	8003386 <UART_AdvFeatureConfig+0xa2>

080033ae <UART_WaitOnFlagUntilTimeout>:
{
 80033ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b2:	4605      	mov	r5, r0
 80033b4:	460f      	mov	r7, r1
 80033b6:	4616      	mov	r6, r2
 80033b8:	4698      	mov	r8, r3
 80033ba:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	ea37 0303 	bics.w	r3, r7, r3
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	42b3      	cmp	r3, r6
 80033cc:	d11e      	bne.n	800340c <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80033ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80033d2:	d0f3      	beq.n	80033bc <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80033d4:	b12c      	cbz	r4, 80033e2 <UART_WaitOnFlagUntilTimeout+0x34>
 80033d6:	f7fd fdb7 	bl	8000f48 <HAL_GetTick>
 80033da:	eba0 0008 	sub.w	r0, r0, r8
 80033de:	4284      	cmp	r4, r0
 80033e0:	d2ec      	bcs.n	80033bc <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e2:	682a      	ldr	r2, [r5, #0]
 80033e4:	6813      	ldr	r3, [r2, #0]
 80033e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033ea:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ec:	682a      	ldr	r2, [r5, #0]
 80033ee:	6893      	ldr	r3, [r2, #8]
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80033f6:	2320      	movs	r3, #32
 80033f8:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80033fc:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003400:	2300      	movs	r3, #0
 8003402:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8003406:	2003      	movs	r0, #3
 8003408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800340c:	2000      	movs	r0, #0
}
 800340e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003412 <UART_CheckIdleState>:
{
 8003412:	b530      	push	{r4, r5, lr}
 8003414:	b083      	sub	sp, #12
 8003416:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	2300      	movs	r3, #0
 800341a:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800341c:	f7fd fd94 	bl	8000f48 <HAL_GetTick>
 8003420:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f013 0f08 	tst.w	r3, #8
 800342a:	d10e      	bne.n	800344a <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f013 0f04 	tst.w	r3, #4
 8003434:	d117      	bne.n	8003466 <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 8003436:	2320      	movs	r3, #32
 8003438:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800343c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8003440:	2000      	movs	r0, #0
 8003442:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8003446:	b003      	add	sp, #12
 8003448:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800344a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4603      	mov	r3, r0
 8003452:	2200      	movs	r2, #0
 8003454:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff ffa8 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 800345e:	2800      	cmp	r0, #0
 8003460:	d0e4      	beq.n	800342c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003462:	2003      	movs	r0, #3
 8003464:	e7ef      	b.n	8003446 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003466:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	462b      	mov	r3, r5
 800346e:	2200      	movs	r2, #0
 8003470:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003474:	4620      	mov	r0, r4
 8003476:	f7ff ff9a 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 800347a:	2800      	cmp	r0, #0
 800347c:	d0db      	beq.n	8003436 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800347e:	2003      	movs	r0, #3
 8003480:	e7e1      	b.n	8003446 <UART_CheckIdleState+0x34>

08003482 <HAL_UART_Init>:
  if(huart == NULL)
 8003482:	b378      	cbz	r0, 80034e4 <HAL_UART_Init+0x62>
{
 8003484:	b510      	push	{r4, lr}
 8003486:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003488:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800348c:	b30b      	cbz	r3, 80034d2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800348e:	2324      	movs	r3, #36	; 0x24
 8003490:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800349e:	4620      	mov	r0, r4
 80034a0:	f7ff fe46 	bl	8003130 <UART_SetConfig>
 80034a4:	2801      	cmp	r0, #1
 80034a6:	d01f      	beq.n	80034e8 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034aa:	b9bb      	cbnz	r3, 80034dc <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	6853      	ldr	r3, [r2, #4]
 80034b0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80034b4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b6:	6822      	ldr	r2, [r4, #0]
 80034b8:	6893      	ldr	r3, [r2, #8]
 80034ba:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80034be:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80034c0:	6822      	ldr	r2, [r4, #0]
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7ff ffa1 	bl	8003412 <UART_CheckIdleState>
 80034d0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80034d2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80034d6:	f001 f939 	bl	800474c <HAL_UART_MspInit>
 80034da:	e7d8      	b.n	800348e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff ff01 	bl	80032e4 <UART_AdvFeatureConfig>
 80034e2:	e7e3      	b.n	80034ac <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80034e4:	2001      	movs	r0, #1
 80034e6:	4770      	bx	lr
}
 80034e8:	bd10      	pop	{r4, pc}

080034ea <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034ea:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b21      	cmp	r3, #33	; 0x21
 80034f2:	d001      	beq.n	80034f8 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2002      	movs	r0, #2
  }
}
 80034f6:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80034f8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b193      	cbz	r3, 8003526 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	6883      	ldr	r3, [r0, #8]
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	d01a      	beq.n	800353e <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003508:	6802      	ldr	r2, [r0, #0]
 800350a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800350c:	1c59      	adds	r1, r3, #1
 800350e:	64c1      	str	r1, [r0, #76]	; 0x4c
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003514:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29b      	uxth	r3, r3
 800351e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8003522:	2000      	movs	r0, #0
 8003524:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003526:	6802      	ldr	r2, [r0, #0]
 8003528:	6813      	ldr	r3, [r2, #0]
 800352a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800352e:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003530:	6802      	ldr	r2, [r0, #0]
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003538:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800353a:	2000      	movs	r0, #0
 800353c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353e:	6903      	ldr	r3, [r0, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e1      	bne.n	8003508 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003544:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003546:	6802      	ldr	r2, [r0, #0]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354e:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003550:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003552:	3302      	adds	r3, #2
 8003554:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003556:	e7dd      	b.n	8003514 <UART_Transmit_IT+0x2a>

08003558 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003558:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800355a:	6801      	ldr	r1, [r0, #0]
 800355c:	680b      	ldr	r3, [r1, #0]
 800355e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003562:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003564:	2320      	movs	r3, #32
 8003566:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800356a:	f7ff fdd5 	bl	8003118 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800356e:	2000      	movs	r0, #0
 8003570:	bd08      	pop	{r3, pc}

08003572 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003572:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003576:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b22      	cmp	r3, #34	; 0x22
 800357e:	d006      	beq.n	800358e <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003580:	6802      	ldr	r2, [r0, #0]
 8003582:	6993      	ldr	r3, [r2, #24]
 8003584:	f043 0308 	orr.w	r3, r3, #8
 8003588:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800358a:	2002      	movs	r0, #2
 800358c:	4770      	bx	lr
{
 800358e:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003590:	6803      	ldr	r3, [r0, #0]
 8003592:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003594:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003596:	6881      	ldr	r1, [r0, #8]
 8003598:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800359c:	d00f      	beq.n	80035be <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800359e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80035a0:	1c4c      	adds	r4, r1, #1
 80035a2:	6544      	str	r4, [r0, #84]	; 0x54
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	401a      	ands	r2, r3
 80035a8:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 80035aa:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80035b8:	b15b      	cbz	r3, 80035d2 <UART_Receive_IT+0x60>
    return HAL_OK;
 80035ba:	2000      	movs	r0, #0
  }
}
 80035bc:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035be:	6901      	ldr	r1, [r0, #16]
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d1ec      	bne.n	800359e <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80035c4:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80035c6:	401a      	ands	r2, r3
 80035c8:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 80035ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80035cc:	3302      	adds	r3, #2
 80035ce:	6543      	str	r3, [r0, #84]	; 0x54
 80035d0:	e7eb      	b.n	80035aa <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d2:	6802      	ldr	r2, [r0, #0]
 80035d4:	6813      	ldr	r3, [r2, #0]
 80035d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035da:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035dc:	6802      	ldr	r2, [r0, #0]
 80035de:	6893      	ldr	r3, [r2, #8]
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80035e6:	2320      	movs	r3, #32
 80035e8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80035ec:	f000 f994 	bl	8003918 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80035f0:	2000      	movs	r0, #0
 80035f2:	bd10      	pop	{r4, pc}

080035f4 <HAL_UART_IRQHandler>:
{
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035f8:	6802      	ldr	r2, [r0, #0]
 80035fa:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035fc:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 80035fe:	f013 050f 	ands.w	r5, r3, #15
 8003602:	d105      	bne.n	8003610 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003604:	f013 0f20 	tst.w	r3, #32
 8003608:	d002      	beq.n	8003610 <HAL_UART_IRQHandler+0x1c>
 800360a:	f011 0f20 	tst.w	r1, #32
 800360e:	d160      	bne.n	80036d2 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8003610:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8003612:	2d00      	cmp	r5, #0
 8003614:	d072      	beq.n	80036fc <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003616:	f010 0501 	ands.w	r5, r0, #1
 800361a:	d102      	bne.n	8003622 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800361c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003620:	d06c      	beq.n	80036fc <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003622:	f013 0f01 	tst.w	r3, #1
 8003626:	d007      	beq.n	8003638 <HAL_UART_IRQHandler+0x44>
 8003628:	f411 7f80 	tst.w	r1, #256	; 0x100
 800362c:	d004      	beq.n	8003638 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800362e:	2001      	movs	r0, #1
 8003630:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003632:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003634:	4302      	orrs	r2, r0
 8003636:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003638:	f013 0f02 	tst.w	r3, #2
 800363c:	d007      	beq.n	800364e <HAL_UART_IRQHandler+0x5a>
 800363e:	b135      	cbz	r5, 800364e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003640:	6822      	ldr	r2, [r4, #0]
 8003642:	2002      	movs	r0, #2
 8003644:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003646:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003648:	f042 0204 	orr.w	r2, r2, #4
 800364c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364e:	f013 0f04 	tst.w	r3, #4
 8003652:	d007      	beq.n	8003664 <HAL_UART_IRQHandler+0x70>
 8003654:	b135      	cbz	r5, 8003664 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	2004      	movs	r0, #4
 800365a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800365c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800365e:	f042 0202 	orr.w	r2, r2, #2
 8003662:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003664:	f013 0f08 	tst.w	r3, #8
 8003668:	d009      	beq.n	800367e <HAL_UART_IRQHandler+0x8a>
 800366a:	f011 0f20 	tst.w	r1, #32
 800366e:	d100      	bne.n	8003672 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003670:	b12d      	cbz	r5, 800367e <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	2008      	movs	r0, #8
 8003676:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003678:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800367a:	4302      	orrs	r2, r0
 800367c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003680:	2a00      	cmp	r2, #0
 8003682:	d04d      	beq.n	8003720 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003684:	f013 0f20 	tst.w	r3, #32
 8003688:	d002      	beq.n	8003690 <HAL_UART_IRQHandler+0x9c>
 800368a:	f011 0f20 	tst.w	r1, #32
 800368e:	d123      	bne.n	80036d8 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003690:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003692:	f013 0f08 	tst.w	r3, #8
 8003696:	d104      	bne.n	80036a2 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800369c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036a0:	d026      	beq.n	80036f0 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 80036a2:	4620      	mov	r0, r4
 80036a4:	f7ff fcad 	bl	8003002 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80036b0:	d01a      	beq.n	80036e8 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80036ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036bc:	b183      	cbz	r3, 80036e0 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036be:	4a23      	ldr	r2, [pc, #140]	; (800374c <HAL_UART_IRQHandler+0x158>)
 80036c0:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036c2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80036c4:	f7fe fa7f 	bl	8001bc6 <HAL_DMA_Abort_IT>
 80036c8:	b350      	cbz	r0, 8003720 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80036cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036ce:	4798      	blx	r3
 80036d0:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 80036d2:	f7ff ff4e 	bl	8003572 <UART_Receive_IT>
      return;
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff ff4a 	bl	8003572 <UART_Receive_IT>
 80036de:	e7d7      	b.n	8003690 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 80036e0:	4620      	mov	r0, r4
 80036e2:	f7ff fd1a 	bl	800311a <HAL_UART_ErrorCallback>
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7ff fd16 	bl	800311a <HAL_UART_ErrorCallback>
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff fd12 	bl	800311a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	66e3      	str	r3, [r4, #108]	; 0x6c
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80036fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003700:	d002      	beq.n	8003708 <HAL_UART_IRQHandler+0x114>
 8003702:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003706:	d10c      	bne.n	8003722 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003708:	f013 0f80 	tst.w	r3, #128	; 0x80
 800370c:	d002      	beq.n	8003714 <HAL_UART_IRQHandler+0x120>
 800370e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003712:	d112      	bne.n	800373a <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003714:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003718:	d002      	beq.n	8003720 <HAL_UART_IRQHandler+0x12c>
 800371a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800371e:	d110      	bne.n	8003742 <HAL_UART_IRQHandler+0x14e>
 8003720:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003722:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003726:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003728:	2320      	movs	r3, #32
 800372a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800372e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003732:	4620      	mov	r0, r4
 8003734:	f000 f80c 	bl	8003750 <HAL_UARTEx_WakeupCallback>
    return;
 8003738:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff fed5 	bl	80034ea <UART_Transmit_IT>
    return;
 8003740:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003742:	4620      	mov	r0, r4
 8003744:	f7ff ff08 	bl	8003558 <UART_EndTransmit_IT>
    return;
 8003748:	e7ea      	b.n	8003720 <HAL_UART_IRQHandler+0x12c>
 800374a:	bf00      	nop
 800374c:	0800311d 	.word	0x0800311d

08003750 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003750:	4770      	bx	lr
 8003752:	0000      	movs	r0, r0
 8003754:	0000      	movs	r0, r0
	...

08003758 <adc_comms>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void adc_comms(){
 8003758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	adc_raw_voltage =  0;
 800375c:	2300      	movs	r3, #0
 800375e:	4a5e      	ldr	r2, [pc, #376]	; (80038d8 <adc_comms+0x180>)
 8003760:	6013      	str	r3, [r2, #0]
	adc_raw_current =	0;
 8003762:	4a5e      	ldr	r2, [pc, #376]	; (80038dc <adc_comms+0x184>)
 8003764:	6013      	str	r3, [r2, #0]
	raw_ambient_temp = ADC1_buffer[0];
 8003766:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <adc_comms+0x188>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681c      	ldr	r4, [r3, #0]
 800376c:	4a5d      	ldr	r2, [pc, #372]	; (80038e4 <adc_comms+0x18c>)
 800376e:	6014      	str	r4, [r2, #0]
	raw_geyser_temp = ADC1_buffer[1];
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	4b5d      	ldr	r3, [pc, #372]	; (80038e8 <adc_comms+0x190>)
 8003774:	601a      	str	r2, [r3, #0]


	//Converting Voltage
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202)/0.008629,2))+adc_buffer_voltage;
 8003776:	4d5d      	ldr	r5, [pc, #372]	; (80038ec <adc_comms+0x194>)
 8003778:	e9d5 0100 	ldrd	r0, r1, [r5]
 800377c:	f7fc ff02 	bl	8000584 <__aeabi_ul2d>
 8003780:	a34f      	add	r3, pc, #316	; (adr r3, 80038c0 <adc_comms+0x168>)
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f7fc fd81 	bl	800028c <__adddf3>
 800378a:	f7fd fa19 	bl	8000bc0 <__aeabi_d2ulz>
 800378e:	e9c5 0100 	strd	r0, r1, [r5]

	//Converting Current
	adc_buffer_current = (pow((adc_raw_current-2072.202)/0.14603,2))+adc_buffer_current;
 8003792:	4d57      	ldr	r5, [pc, #348]	; (80038f0 <adc_comms+0x198>)
 8003794:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003798:	f7fc fef4 	bl	8000584 <__aeabi_ul2d>
 800379c:	a34a      	add	r3, pc, #296	; (adr r3, 80038c8 <adc_comms+0x170>)
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	f7fc fd73 	bl	800028c <__adddf3>
 80037a6:	f7fd fa0b 	bl	8000bc0 <__aeabi_d2ulz>
 80037aa:	e9c5 0100 	strd	r0, r1, [r5]

	//Converting Ambient temperature
	if( (raw_ambient_temp-615)/12.3 < 100){
 80037ae:	f2a4 2067 	subw	r0, r4, #615	; 0x267
 80037b2:	f7fc fea7 	bl	8000504 <__aeabi_ui2d>
 80037b6:	a346      	add	r3, pc, #280	; (adr r3, 80038d0 <adc_comms+0x178>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fd f842 	bl	8000844 <__aeabi_ddiv>
 80037c0:	4604      	mov	r4, r0
 80037c2:	460d      	mov	r5, r1
 80037c4:	2200      	movs	r2, #0
 80037c6:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <adc_comms+0x19c>)
 80037c8:	f7fd f984 	bl	8000ad4 <__aeabi_dcmplt>
 80037cc:	b9d0      	cbnz	r0, 8003804 <adc_comms+0xac>
		raw_ambient_temp =(raw_ambient_temp-615)/12.3;
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-615)/12.3 < 100){
 80037ce:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <adc_comms+0x190>)
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	f2a0 2067 	subw	r0, r0, #615	; 0x267
 80037d6:	f7fc fe95 	bl	8000504 <__aeabi_ui2d>
 80037da:	a33d      	add	r3, pc, #244	; (adr r3, 80038d0 <adc_comms+0x178>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fd f830 	bl	8000844 <__aeabi_ddiv>
 80037e4:	4604      	mov	r4, r0
 80037e6:	460d      	mov	r5, r1
 80037e8:	2200      	movs	r2, #0
 80037ea:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <adc_comms+0x19c>)
 80037ec:	f7fd f972 	bl	8000ad4 <__aeabi_dcmplt>
 80037f0:	b9a8      	cbnz	r0, 800381e <adc_comms+0xc6>
		raw_geyser_temp = (raw_geyser_temp-615)/12.3;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
	}

	adc_counter += 1;
 80037f2:	4a41      	ldr	r2, [pc, #260]	; (80038f8 <adc_comms+0x1a0>)
 80037f4:	8813      	ldrh	r3, [r2, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	8013      	strh	r3, [r2, #0]
	if(adc_counter == 10){
 80037fc:	2b0a      	cmp	r3, #10
 80037fe:	d01b      	beq.n	8003838 <adc_comms+0xe0>
 8003800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		raw_ambient_temp =(raw_ambient_temp-615)/12.3;
 8003804:	4620      	mov	r0, r4
 8003806:	4629      	mov	r1, r5
 8003808:	f7fd f9a2 	bl	8000b50 <__aeabi_d2uiz>
 800380c:	4602      	mov	r2, r0
 800380e:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <adc_comms+0x18c>)
 8003810:	6018      	str	r0, [r3, #0]
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003812:	493a      	ldr	r1, [pc, #232]	; (80038fc <adc_comms+0x1a4>)
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <adc_comms+0x1a8>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	f001 fd90 	bl	800533c <siprintf>
 800381c:	e7d7      	b.n	80037ce <adc_comms+0x76>
		raw_geyser_temp = (raw_geyser_temp-615)/12.3;
 800381e:	4620      	mov	r0, r4
 8003820:	4629      	mov	r1, r5
 8003822:	f7fd f995 	bl	8000b50 <__aeabi_d2uiz>
 8003826:	4602      	mov	r2, r0
 8003828:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <adc_comms+0x190>)
 800382a:	6018      	str	r0, [r3, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 800382c:	4933      	ldr	r1, [pc, #204]	; (80038fc <adc_comms+0x1a4>)
 800382e:	4b35      	ldr	r3, [pc, #212]	; (8003904 <adc_comms+0x1ac>)
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	f001 fd83 	bl	800533c <siprintf>
 8003836:	e7dc      	b.n	80037f2 <adc_comms+0x9a>
		*voltage_int_rms = sqrt(adc_buffer_voltage/10);
 8003838:	4e33      	ldr	r6, [pc, #204]	; (8003908 <adc_comms+0x1b0>)
 800383a:	6834      	ldr	r4, [r6, #0]
 800383c:	4d2b      	ldr	r5, [pc, #172]	; (80038ec <adc_comms+0x194>)
 800383e:	220a      	movs	r2, #10
 8003840:	2300      	movs	r3, #0
 8003842:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003846:	f7fd f9a3 	bl	8000b90 <__aeabi_uldivmod>
 800384a:	f7fc fe9b 	bl	8000584 <__aeabi_ul2d>
 800384e:	ec41 0b10 	vmov	d0, r0, r1
 8003852:	f002 fa13 	bl	8005c7c <sqrt>
 8003856:	ec51 0b10 	vmov	r0, r1, d0
 800385a:	f7fd f979 	bl	8000b50 <__aeabi_d2uiz>
 800385e:	6020      	str	r0, [r4, #0]
		*current_int_rms = sqrt(adc_buffer_current/10);
 8003860:	4f2a      	ldr	r7, [pc, #168]	; (800390c <adc_comms+0x1b4>)
 8003862:	f8d7 8000 	ldr.w	r8, [r7]
 8003866:	4c22      	ldr	r4, [pc, #136]	; (80038f0 <adc_comms+0x198>)
 8003868:	220a      	movs	r2, #10
 800386a:	2300      	movs	r3, #0
 800386c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003870:	f7fd f98e 	bl	8000b90 <__aeabi_uldivmod>
 8003874:	f7fc fe86 	bl	8000584 <__aeabi_ul2d>
 8003878:	ec41 0b10 	vmov	d0, r0, r1
 800387c:	f002 f9fe 	bl	8005c7c <sqrt>
 8003880:	ec51 0b10 	vmov	r0, r1, d0
 8003884:	f7fd f964 	bl	8000b50 <__aeabi_d2uiz>
 8003888:	f8c8 0000 	str.w	r0, [r8]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 800388c:	6833      	ldr	r3, [r6, #0]
 800388e:	4e1b      	ldr	r6, [pc, #108]	; (80038fc <adc_comms+0x1a4>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4631      	mov	r1, r6
 8003894:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <adc_comms+0x1b8>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	f001 fd50 	bl	800533c <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4631      	mov	r1, r6
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <adc_comms+0x1bc>)
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	f001 fd49 	bl	800533c <siprintf>
		adc_counter = 0;
 80038aa:	2200      	movs	r2, #0
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <adc_comms+0x1a0>)
 80038ae:	801a      	strh	r2, [r3, #0]

		adc_buffer_voltage = 0;
 80038b0:	2200      	movs	r2, #0
 80038b2:	2300      	movs	r3, #0
 80038b4:	e9c5 2300 	strd	r2, r3, [r5]
		adc_buffer_current = 0;
 80038b8:	e9c4 2300 	strd	r2, r3, [r4]
	}
//	HAL_ADC_Stop_DMA(&hadc2);
}
 80038bc:	e7a0      	b.n	8003800 <adc_comms+0xa8>
 80038be:	bf00      	nop
 80038c0:	8787f982 	.word	0x8787f982
 80038c4:	422adab1 	.word	0x422adab1
 80038c8:	a57891fd 	.word	0xa57891fd
 80038cc:	41a8011d 	.word	0x41a8011d
 80038d0:	9999999a 	.word	0x9999999a
 80038d4:	40289999 	.word	0x40289999
 80038d8:	20000240 	.word	0x20000240
 80038dc:	2000023c 	.word	0x2000023c
 80038e0:	2000021c 	.word	0x2000021c
 80038e4:	20000274 	.word	0x20000274
 80038e8:	20000278 	.word	0x20000278
 80038ec:	20000230 	.word	0x20000230
 80038f0:	20000228 	.word	0x20000228
 80038f4:	40590000 	.word	0x40590000
 80038f8:	20000238 	.word	0x20000238
 80038fc:	08005ef4 	.word	0x08005ef4
 8003900:	20000244 	.word	0x20000244
 8003904:	20000258 	.word	0x20000258
 8003908:	200002b0 	.word	0x200002b0
 800390c:	2000024c 	.word	0x2000024c
 8003910:	200002b4 	.word	0x200002b4
 8003914:	20000250 	.word	0x20000250

08003918 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003918:	b410      	push	{r4}
	rx_flag = 1;
 800391a:	4c05      	ldr	r4, [pc, #20]	; (8003930 <HAL_UART_RxCpltCallback+0x18>)
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 800391c:	4905      	ldr	r1, [pc, #20]	; (8003934 <HAL_UART_RxCpltCallback+0x1c>)
 800391e:	4806      	ldr	r0, [pc, #24]	; (8003938 <HAL_UART_RxCpltCallback+0x20>)
	rx_flag = 1;
 8003920:	2301      	movs	r3, #1
 8003922:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8003924:	461a      	mov	r2, r3

}
 8003926:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 800392a:	f7ff bb9e 	b.w	800306a <HAL_UART_Receive_IT>
 800392e:	bf00      	nop
 8003930:	20000280 	.word	0x20000280
 8003934:	20000498 	.word	0x20000498
 8003938:	20000368 	.word	0x20000368

0800393c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <HAL_ADC_ConvCpltCallback+0xc>)
	HAL_ADC_Stop_DMA(&hadc2);
 800393e:	4803      	ldr	r0, [pc, #12]	; (800394c <HAL_ADC_ConvCpltCallback+0x10>)
	adc_flag = 1;
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc2);
 8003944:	f7fd bdd8 	b.w	80014f8 <HAL_ADC_Stop_DMA>
 8003948:	2000023a 	.word	0x2000023a
 800394c:	200002cc 	.word	0x200002cc

08003950 <HAL_TIM_IC_CaptureCallback>:
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8003950:	4b01      	ldr	r3, [pc, #4]	; (8003958 <HAL_TIM_IC_CaptureCallback+0x8>)
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	4770      	bx	lr
 8003958:	20000295 	.word	0x20000295

0800395c <init_peripherals>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 800395c:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 800395e:	2201      	movs	r2, #1
 8003960:	2120      	movs	r1, #32
 8003962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003966:	f7fe fa77 	bl	8001e58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 800396a:	2201      	movs	r2, #1
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003972:	f7fe fa71 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 8003976:	2201      	movs	r2, #1
 8003978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800397c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003980:	f7fe fa6a 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 8003984:	2201      	movs	r2, #1
 8003986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800398a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398e:	f7fe fa63 	bl	8001e58 <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003992:	4c77      	ldr	r4, [pc, #476]	; (8003b70 <init_peripherals+0x214>)
 8003994:	2201      	movs	r2, #1
 8003996:	2108      	movs	r1, #8
 8003998:	4620      	mov	r0, r4
 800399a:	f7fe fa5d 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 800399e:	2201      	movs	r2, #1
 80039a0:	2110      	movs	r1, #16
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7fe fa58 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80039a8:	2201      	movs	r2, #1
 80039aa:	2120      	movs	r1, #32
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7fe fa53 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 80039b2:	2201      	movs	r2, #1
 80039b4:	2140      	movs	r1, #64	; 0x40
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7fe fa4e 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80039bc:	2201      	movs	r2, #1
 80039be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7fe fa48 	bl	8001e58 <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 80039c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80039cc:	2201      	movs	r2, #1
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7fe fa41 	bl	8001e58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);		// Heater
 80039d6:	2200      	movs	r2, #0
 80039d8:	2101      	movs	r1, #1
 80039da:	4620      	mov	r0, r4
 80039dc:	f7fe fa3c 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);		// Valve
 80039e0:	2201      	movs	r2, #1
 80039e2:	2102      	movs	r1, #2
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7fe fa37 	bl	8001e58 <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 80039ea:	200f      	movs	r0, #15
 80039ec:	f001 fbce 	bl	800518c <malloc>
 80039f0:	4b60      	ldr	r3, [pc, #384]	; (8003b74 <init_peripherals+0x218>)
 80039f2:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 80039f4:	2400      	movs	r4, #0
 80039f6:	6004      	str	r4, [r0, #0]
 80039f8:	6044      	str	r4, [r0, #4]
 80039fa:	6084      	str	r4, [r0, #8]
 80039fc:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8003a00:	2032      	movs	r0, #50	; 0x32
 8003a02:	f001 fbc3 	bl	800518c <malloc>
 8003a06:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <init_peripherals+0x21c>)
 8003a08:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 8003a0a:	2232      	movs	r2, #50	; 0x32
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	f001 fbd0 	bl	80051b2 <memset>

	uart_command = (uint8_t*)malloc(60);
 8003a12:	203c      	movs	r0, #60	; 0x3c
 8003a14:	f001 fbba 	bl	800518c <malloc>
 8003a18:	4e58      	ldr	r6, [pc, #352]	; (8003b7c <init_peripherals+0x220>)
 8003a1a:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 8003a1c:	253c      	movs	r5, #60	; 0x3c
 8003a1e:	462a      	mov	r2, r5
 8003a20:	4621      	mov	r1, r4
 8003a22:	f001 fbc6 	bl	80051b2 <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 8003a26:	4628      	mov	r0, r5
 8003a28:	f001 fbb0 	bl	800518c <malloc>
 8003a2c:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <init_peripherals+0x224>)
 8003a2e:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 8003a30:	462a      	mov	r2, r5
 8003a32:	4621      	mov	r1, r4
 8003a34:	6830      	ldr	r0, [r6, #0]
 8003a36:	f001 fbbc 	bl	80051b2 <memset>


	set_temp = (uint8_t*)malloc(3);
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	f001 fba6 	bl	800518c <malloc>
 8003a40:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <init_peripherals+0x228>)
 8003a42:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 8003a44:	6004      	str	r4, [r0, #0]

	segment_val =set_temp;
 8003a46:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <init_peripherals+0x22c>)
 8003a48:	6018      	str	r0, [r3, #0]
	//	  memset(segment_val, 0x00, 4);

	ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8003a4a:	201c      	movs	r0, #28
 8003a4c:	f001 fb9e 	bl	800518c <malloc>
 8003a50:	4b4e      	ldr	r3, [pc, #312]	; (8003b8c <init_peripherals+0x230>)
 8003a52:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 7);
 8003a54:	6004      	str	r4, [r0, #0]
 8003a56:	f8c0 4003 	str.w	r4, [r0, #3]

	ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8003a5a:	201c      	movs	r0, #28
 8003a5c:	f001 fb96 	bl	800518c <malloc>
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <init_peripherals+0x234>)
 8003a62:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 7);
 8003a64:	6004      	str	r4, [r0, #0]
 8003a66:	f8c0 4003 	str.w	r4, [r0, #3]

	voltage_rms =(char*)malloc(3*sizeof(char));
 8003a6a:	2003      	movs	r0, #3
 8003a6c:	f001 fb8e 	bl	800518c <malloc>
 8003a70:	4b48      	ldr	r3, [pc, #288]	; (8003b94 <init_peripherals+0x238>)
 8003a72:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 8003a74:	8004      	strh	r4, [r0, #0]
 8003a76:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 8003a78:	2004      	movs	r0, #4
 8003a7a:	f001 fb87 	bl	800518c <malloc>
 8003a7e:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <init_peripherals+0x23c>)
 8003a80:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 8003a82:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 8003a84:	2014      	movs	r0, #20
 8003a86:	f001 fb81 	bl	800518c <malloc>
 8003a8a:	4a44      	ldr	r2, [pc, #272]	; (8003b9c <init_peripherals+0x240>)
 8003a8c:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 8003a8e:	6004      	str	r4, [r0, #0]
 8003a90:	6044      	str	r4, [r0, #4]
 8003a92:	6084      	str	r4, [r0, #8]
 8003a94:	60c4      	str	r4, [r0, #12]
 8003a96:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 8003a98:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <init_peripherals+0x244>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4941      	ldr	r1, [pc, #260]	; (8003ba4 <init_peripherals+0x248>)
 8003a9e:	f001 fc4d 	bl	800533c <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8003aa2:	2010      	movs	r0, #16
 8003aa4:	f001 fb72 	bl	800518c <malloc>
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <init_peripherals+0x24c>)
 8003aaa:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8003aac:	2010      	movs	r0, #16
 8003aae:	f001 fb6d 	bl	800518c <malloc>
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <init_peripherals+0x250>)
 8003ab4:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 8003ab6:	2004      	movs	r0, #4
 8003ab8:	f001 fb68 	bl	800518c <malloc>
 8003abc:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <init_peripherals+0x254>)
 8003abe:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 8003ac0:	2004      	movs	r0, #4
 8003ac2:	f001 fb63 	bl	800518c <malloc>
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <init_peripherals+0x258>)
 8003ac8:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 8003aca:	4a3b      	ldr	r2, [pc, #236]	; (8003bb8 <init_peripherals+0x25c>)
 8003acc:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <init_peripherals+0x260>)
 8003ace:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 8003ad0:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <init_peripherals+0x264>)
 8003ad2:	4b3c      	ldr	r3, [pc, #240]	; (8003bc4 <init_peripherals+0x268>)
 8003ad4:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 8003ad6:	200f      	movs	r0, #15
 8003ad8:	f001 fb58 	bl	800518c <malloc>
 8003adc:	4e3a      	ldr	r6, [pc, #232]	; (8003bc8 <init_peripherals+0x26c>)
 8003ade:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 8003ae0:	6004      	str	r4, [r0, #0]
 8003ae2:	6044      	str	r4, [r0, #4]
 8003ae4:	6084      	str	r4, [r0, #8]
 8003ae6:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 8003aea:	200f      	movs	r0, #15
 8003aec:	f001 fb4e 	bl	800518c <malloc>
 8003af0:	4d36      	ldr	r5, [pc, #216]	; (8003bcc <init_peripherals+0x270>)
 8003af2:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 8003af4:	6004      	str	r4, [r0, #0]
 8003af6:	6044      	str	r4, [r0, #4]
 8003af8:	6084      	str	r4, [r0, #8]
 8003afa:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8003afe:	200f      	movs	r0, #15
 8003b00:	f001 fb44 	bl	800518c <malloc>
 8003b04:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <init_peripherals+0x274>)
 8003b06:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 8003b08:	6004      	str	r4, [r0, #0]
 8003b0a:	6044      	str	r4, [r0, #4]
 8003b0c:	6084      	str	r4, [r0, #8]
 8003b0e:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 8003b12:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <init_peripherals+0x278>)
 8003b14:	6832      	ldr	r2, [r6, #0]
 8003b16:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 8003b18:	682a      	ldr	r2, [r5, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 8003b1c:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 8003b1e:	2014      	movs	r0, #20
 8003b20:	f001 fb34 	bl	800518c <malloc>
 8003b24:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <init_peripherals+0x27c>)
 8003b26:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 8003b28:	6004      	str	r4, [r0, #0]
 8003b2a:	6044      	str	r4, [r0, #4]
 8003b2c:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <init_peripherals+0x280>)
 8003b30:	601c      	str	r4, [r3, #0]

	time = malloc(6*sizeof(uint32_t));
 8003b32:	2018      	movs	r0, #24
 8003b34:	f001 fb2a 	bl	800518c <malloc>
 8003b38:	4d29      	ldr	r5, [pc, #164]	; (8003be0 <init_peripherals+0x284>)
 8003b3a:	6028      	str	r0, [r5, #0]
	memset(time, 0x00, 6);
 8003b3c:	6004      	str	r4, [r0, #0]
 8003b3e:	8084      	strh	r4, [r0, #4]

	new_time = malloc(6*sizeof(uint32_t));
 8003b40:	2018      	movs	r0, #24
 8003b42:	f001 fb23 	bl	800518c <malloc>
 8003b46:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <init_peripherals+0x288>)
 8003b48:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 8003b4a:	6004      	str	r4, [r0, #0]
 8003b4c:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f001 fb1c 	bl	800518c <malloc>
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <init_peripherals+0x28c>)
 8003b56:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 8003b58:	8004      	strh	r4, [r0, #0]
 8003b5a:	7084      	strb	r4, [r0, #2]


	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	6829      	ldr	r1, [r5, #0]
 8003b60:	4822      	ldr	r0, [pc, #136]	; (8003bec <init_peripherals+0x290>)
 8003b62:	f7fe fff1 	bl	8002b48 <HAL_RTC_GetTime>

	HAL_TIM_Base_Start_IT(&htim2);
 8003b66:	4822      	ldr	r0, [pc, #136]	; (8003bf0 <init_peripherals+0x294>)
 8003b68:	f7ff f848 	bl	8002bfc <HAL_TIM_Base_Start_IT>
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	bf00      	nop
 8003b70:	48000400 	.word	0x48000400
 8003b74:	20000494 	.word	0x20000494
 8003b78:	2000027c 	.word	0x2000027c
 8003b7c:	200002a0 	.word	0x200002a0
 8003b80:	200002a4 	.word	0x200002a4
 8003b84:	20000288 	.word	0x20000288
 8003b88:	20000284 	.word	0x20000284
 8003b8c:	2000021c 	.word	0x2000021c
 8003b90:	20000220 	.word	0x20000220
 8003b94:	200002b4 	.word	0x200002b4
 8003b98:	20000250 	.word	0x20000250
 8003b9c:	2000029c 	.word	0x2000029c
 8003ba0:	200002b8 	.word	0x200002b8
 8003ba4:	08005ef4 	.word	0x08005ef4
 8003ba8:	200002b0 	.word	0x200002b0
 8003bac:	2000024c 	.word	0x2000024c
 8003bb0:	20000244 	.word	0x20000244
 8003bb4:	20000258 	.word	0x20000258
 8003bb8:	20000010 	.word	0x20000010
 8003bbc:	20000268 	.word	0x20000268
 8003bc0:	20000020 	.word	0x20000020
 8003bc4:	200002ac 	.word	0x200002ac
 8003bc8:	2000025c 	.word	0x2000025c
 8003bcc:	20000260 	.word	0x20000260
 8003bd0:	20000264 	.word	0x20000264
 8003bd4:	200004a0 	.word	0x200004a0
 8003bd8:	2000026c 	.word	0x2000026c
 8003bdc:	2000049c 	.word	0x2000049c
 8003be0:	20000298 	.word	0x20000298
 8003be4:	20000270 	.word	0x20000270
 8003be8:	20000290 	.word	0x20000290
 8003bec:	200003d8 	.word	0x200003d8
 8003bf0:	20000410 	.word	0x20000410

08003bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf8:	4b44      	ldr	r3, [pc, #272]	; (8003d0c <MX_GPIO_Init+0x118>)
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003c00:	615a      	str	r2, [r3, #20]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003c08:	9201      	str	r2, [sp, #4]
 8003c0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003c12:	615a      	str	r2, [r3, #20]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003c1a:	9202      	str	r2, [sp, #8]
 8003c1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c24:	615a      	str	r2, [r3, #20]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003c2c:	9203      	str	r2, [sp, #12]
 8003c2e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c36:	615a      	str	r2, [r3, #20]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8003c42:	4e33      	ldr	r6, [pc, #204]	; (8003d10 <MX_GPIO_Init+0x11c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	2183      	movs	r1, #131	; 0x83
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f7fe f905 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8003c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c58:	f7fe f8fe 	bl	8001e58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003c5c:	4f2d      	ldr	r7, [pc, #180]	; (8003d14 <MX_GPIO_Init+0x120>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8003c64:	4638      	mov	r0, r7
 8003c66:	f7fe f8f7 	bl	8001e58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c70:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <MX_GPIO_Init+0x124>)
 8003c72:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2400      	movs	r4, #0
 8003c76:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c78:	a905      	add	r1, sp, #20
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f7fe f822 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8003c80:	2383      	movs	r3, #131	; 0x83
 8003c82:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c84:	2501      	movs	r5, #1
 8003c86:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c8c:	a905      	add	r1, sp, #20
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f7fe f818 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003c94:	2313      	movs	r3, #19
 8003c96:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c98:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9c:	a905      	add	r1, sp, #20
 8003c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca2:	f7fe f80f 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003ca6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003caa:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cac:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	a905      	add	r1, sp, #20
 8003cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cb8:	f7fe f804 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8003cbc:	f240 3302 	movw	r3, #770	; 0x302
 8003cc0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc6:	a905      	add	r1, sp, #20
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f7fd fffb 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003cce:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8003cd2:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cda:	a905      	add	r1, sp, #20
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f7fd fff1 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 8003ce2:	2340      	movs	r3, #64	; 0x40
 8003ce4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <MX_GPIO_Init+0x128>)
 8003ce8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003cea:	2302      	movs	r3, #2
 8003cec:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 8003cee:	a905      	add	r1, sp, #20
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	f7fd ffe7 	bl	8001cc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	2017      	movs	r0, #23
 8003cfc:	f7fd fe54 	bl	80019a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d00:	2017      	movs	r0, #23
 8003d02:	f7fd fe83 	bl	8001a0c <HAL_NVIC_EnableIRQ>

}
 8003d06:	b00b      	add	sp, #44	; 0x2c
 8003d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	48000800 	.word	0x48000800
 8003d14:	48000400 	.word	0x48000400
 8003d18:	10110000 	.word	0x10110000
 8003d1c:	10310000 	.word	0x10310000

08003d20 <MX_DMA_Init>:
{
 8003d20:	b500      	push	{lr}
 8003d22:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <MX_DMA_Init+0x30>)
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	615a      	str	r2, [r3, #20]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	200c      	movs	r0, #12
 8003d3e:	f7fd fe33 	bl	80019a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003d42:	200c      	movs	r0, #12
 8003d44:	f7fd fe62 	bl	8001a0c <HAL_NVIC_EnableIRQ>
}
 8003d48:	b003      	add	sp, #12
 8003d4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8003d54:	4770      	bx	lr

08003d56 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003d56:	e7fe      	b.n	8003d56 <_Error_Handler>

08003d58 <MX_TIM2_Init>:
{
 8003d58:	b500      	push	{lr}
 8003d5a:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8003d5c:	4818      	ldr	r0, [pc, #96]	; (8003dc0 <MX_TIM2_Init+0x68>)
 8003d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d62:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 326400;
 8003d6c:	4a15      	ldr	r2, [pc, #84]	; (8003dc4 <MX_TIM2_Init+0x6c>)
 8003d6e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d70:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d72:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d74:	f7ff f868 	bl	8002e48 <HAL_TIM_Base_Init>
 8003d78:	b998      	cbnz	r0, 8003da2 <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d7a:	a908      	add	r1, sp, #32
 8003d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d80:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d84:	480e      	ldr	r0, [pc, #56]	; (8003dc0 <MX_TIM2_Init+0x68>)
 8003d86:	f7ff f885 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 8003d8a:	b978      	cbnz	r0, 8003dac <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d90:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d92:	a901      	add	r1, sp, #4
 8003d94:	480a      	ldr	r0, [pc, #40]	; (8003dc0 <MX_TIM2_Init+0x68>)
 8003d96:	f7ff f909 	bl	8002fac <HAL_TIMEx_MasterConfigSynchronization>
 8003d9a:	b960      	cbnz	r0, 8003db6 <MX_TIM2_Init+0x5e>
}
 8003d9c:	b009      	add	sp, #36	; 0x24
 8003d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003da2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003da6:	4808      	ldr	r0, [pc, #32]	; (8003dc8 <MX_TIM2_Init+0x70>)
 8003da8:	f7ff ffd5 	bl	8003d56 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003dac:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003db0:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <MX_TIM2_Init+0x70>)
 8003db2:	f7ff ffd0 	bl	8003d56 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003db6:	f240 1165 	movw	r1, #357	; 0x165
 8003dba:	4803      	ldr	r0, [pc, #12]	; (8003dc8 <MX_TIM2_Init+0x70>)
 8003dbc:	f7ff ffcb 	bl	8003d56 <_Error_Handler>
 8003dc0:	20000410 	.word	0x20000410
 8003dc4:	0004fb00 	.word	0x0004fb00
 8003dc8:	08005ef8 	.word	0x08005ef8

08003dcc <MX_USART1_UART_Init>:
{
 8003dcc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003dce:	480c      	ldr	r0, [pc, #48]	; (8003e00 <MX_USART1_UART_Init+0x34>)
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <MX_USART1_UART_Init+0x38>)
 8003dd2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003dd4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003dd8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003dde:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003de0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003de2:	220c      	movs	r2, #12
 8003de4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003de6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dea:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dee:	f7ff fb48 	bl	8003482 <HAL_UART_Init>
 8003df2:	b900      	cbnz	r0, 8003df6 <MX_USART1_UART_Init+0x2a>
 8003df4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003df6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003dfa:	4803      	ldr	r0, [pc, #12]	; (8003e08 <MX_USART1_UART_Init+0x3c>)
 8003dfc:	f7ff ffab 	bl	8003d56 <_Error_Handler>
 8003e00:	20000368 	.word	0x20000368
 8003e04:	40013800 	.word	0x40013800
 8003e08:	08005ef8 	.word	0x08005ef8

08003e0c <MX_ADC2_Init>:
{
 8003e0c:	b500      	push	{lr}
 8003e0e:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 8003e10:	482d      	ldr	r0, [pc, #180]	; (8003ec8 <MX_ADC2_Init+0xbc>)
 8003e12:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <MX_ADC2_Init+0xc0>)
 8003e14:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003e16:	2300      	movs	r3, #0
 8003e18:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003e1a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003e20:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003e22:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e24:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e26:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e28:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003e2e:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e30:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003e32:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003e34:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003e36:	f7fd f9b9 	bl	80011ac <HAL_ADC_Init>
 8003e3a:	bb58      	cbnz	r0, 8003e94 <MX_ADC2_Init+0x88>
  sConfig.Channel = ADC_CHANNEL_12;
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e40:	2301      	movs	r3, #1
 8003e42:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003e44:	2300      	movs	r3, #0
 8003e46:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003e48:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003e4a:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8003e4c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e4e:	4669      	mov	r1, sp
 8003e50:	481d      	ldr	r0, [pc, #116]	; (8003ec8 <MX_ADC2_Init+0xbc>)
 8003e52:	f7fd fbd5 	bl	8001600 <HAL_ADC_ConfigChannel>
 8003e56:	bb10      	cbnz	r0, 8003e9e <MX_ADC2_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_15;
 8003e58:	230f      	movs	r3, #15
 8003e5a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e60:	4669      	mov	r1, sp
 8003e62:	4819      	ldr	r0, [pc, #100]	; (8003ec8 <MX_ADC2_Init+0xbc>)
 8003e64:	f7fd fbcc 	bl	8001600 <HAL_ADC_ConfigChannel>
 8003e68:	b9f0      	cbnz	r0, 8003ea8 <MX_ADC2_Init+0x9c>
  sConfig.Channel = ADC_CHANNEL_12;
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e72:	4669      	mov	r1, sp
 8003e74:	4814      	ldr	r0, [pc, #80]	; (8003ec8 <MX_ADC2_Init+0xbc>)
 8003e76:	f7fd fbc3 	bl	8001600 <HAL_ADC_ConfigChannel>
 8003e7a:	b9d0      	cbnz	r0, 8003eb2 <MX_ADC2_Init+0xa6>
  sConfig.Channel = ADC_CHANNEL_15;
 8003e7c:	230f      	movs	r3, #15
 8003e7e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003e80:	2304      	movs	r3, #4
 8003e82:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e84:	4669      	mov	r1, sp
 8003e86:	4810      	ldr	r0, [pc, #64]	; (8003ec8 <MX_ADC2_Init+0xbc>)
 8003e88:	f7fd fbba 	bl	8001600 <HAL_ADC_ConfigChannel>
 8003e8c:	b9b0      	cbnz	r0, 8003ebc <MX_ADC2_Init+0xb0>
}
 8003e8e:	b007      	add	sp, #28
 8003e90:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003e94:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003e98:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <MX_ADC2_Init+0xc4>)
 8003e9a:	f7ff ff5c 	bl	8003d56 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003e9e:	f240 1115 	movw	r1, #277	; 0x115
 8003ea2:	480b      	ldr	r0, [pc, #44]	; (8003ed0 <MX_ADC2_Init+0xc4>)
 8003ea4:	f7ff ff57 	bl	8003d56 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003ea8:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003eac:	4808      	ldr	r0, [pc, #32]	; (8003ed0 <MX_ADC2_Init+0xc4>)
 8003eae:	f7ff ff52 	bl	8003d56 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003eb2:	f240 1127 	movw	r1, #295	; 0x127
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <MX_ADC2_Init+0xc4>)
 8003eb8:	f7ff ff4d 	bl	8003d56 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003ebc:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003ec0:	4803      	ldr	r0, [pc, #12]	; (8003ed0 <MX_ADC2_Init+0xc4>)
 8003ec2:	f7ff ff48 	bl	8003d56 <_Error_Handler>
 8003ec6:	bf00      	nop
 8003ec8:	200002cc 	.word	0x200002cc
 8003ecc:	50000100 	.word	0x50000100
 8003ed0:	08005ef8 	.word	0x08005ef8

08003ed4 <MX_RTC_Init>:
{
 8003ed4:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 8003ed6:	480a      	ldr	r0, [pc, #40]	; (8003f00 <MX_RTC_Init+0x2c>)
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <MX_RTC_Init+0x30>)
 8003eda:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003edc:	2300      	movs	r3, #0
 8003ede:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003ee0:	227f      	movs	r2, #127	; 0x7f
 8003ee2:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003ee4:	22ff      	movs	r2, #255	; 0xff
 8003ee6:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ee8:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003eea:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003eec:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003eee:	f7fe fd36 	bl	800295e <HAL_RTC_Init>
 8003ef2:	b900      	cbnz	r0, 8003ef6 <MX_RTC_Init+0x22>
 8003ef4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003ef6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003efa:	4803      	ldr	r0, [pc, #12]	; (8003f08 <MX_RTC_Init+0x34>)
 8003efc:	f7ff ff2b 	bl	8003d56 <_Error_Handler>
 8003f00:	200003d8 	.word	0x200003d8
 8003f04:	40002800 	.word	0x40002800
 8003f08:	08005ef8 	.word	0x08005ef8

08003f0c <SystemClock_Config>:
{
 8003f0c:	b500      	push	{lr}
 8003f0e:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 8003f10:	f7fd ffb6 	bl	8001e80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003f14:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <SystemClock_Config+0xb0>)
 8003f16:	6a13      	ldr	r3, [r2, #32]
 8003f18:	f023 0318 	bic.w	r3, r3, #24
 8003f1c:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003f1e:	2306      	movs	r3, #6
 8003f20:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003f22:	2301      	movs	r3, #1
 8003f24:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f26:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003f28:	2310      	movs	r3, #16
 8003f2a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f30:	2300      	movs	r3, #0
 8003f32:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003f34:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003f38:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f3a:	a80c      	add	r0, sp, #48	; 0x30
 8003f3c:	f7fd ffa8 	bl	8001e90 <HAL_RCC_OscConfig>
 8003f40:	bb78      	cbnz	r0, 8003fa2 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f42:	230f      	movs	r3, #15
 8003f44:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f46:	2102      	movs	r1, #2
 8003f48:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f52:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f54:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f56:	a807      	add	r0, sp, #28
 8003f58:	f7fe fad8 	bl	800250c <HAL_RCC_ClockConfig>
 8003f5c:	bb28      	cbnz	r0, 8003faa <SystemClock_Config+0x9e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 8003f5e:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <SystemClock_Config+0xb4>)
 8003f60:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003f62:	2300      	movs	r3, #0
 8003f64:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 8003f66:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003f6a:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f70:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f72:	4668      	mov	r0, sp
 8003f74:	f7fe fbe6 	bl	8002744 <HAL_RCCEx_PeriphCLKConfig>
 8003f78:	b9d8      	cbnz	r0, 8003fb2 <SystemClock_Config+0xa6>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003f7a:	f7fe fbb1 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <SystemClock_Config+0xb8>)
 8003f80:	fba3 3000 	umull	r3, r0, r3, r0
 8003f84:	0980      	lsrs	r0, r0, #6
 8003f86:	f7fd fd4d 	bl	8001a24 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003f8a:	2004      	movs	r0, #4
 8003f8c:	f7fd fd60 	bl	8001a50 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8003f90:	2202      	movs	r2, #2
 8003f92:	2100      	movs	r1, #0
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	f7fd fd06 	bl	80019a8 <HAL_NVIC_SetPriority>
}
 8003f9c:	b017      	add	sp, #92	; 0x5c
 8003f9e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003fa2:	21c9      	movs	r1, #201	; 0xc9
 8003fa4:	4808      	ldr	r0, [pc, #32]	; (8003fc8 <SystemClock_Config+0xbc>)
 8003fa6:	f7ff fed6 	bl	8003d56 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003faa:	21d7      	movs	r1, #215	; 0xd7
 8003fac:	4806      	ldr	r0, [pc, #24]	; (8003fc8 <SystemClock_Config+0xbc>)
 8003fae:	f7ff fed2 	bl	8003d56 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003fb2:	21e1      	movs	r1, #225	; 0xe1
 8003fb4:	4804      	ldr	r0, [pc, #16]	; (8003fc8 <SystemClock_Config+0xbc>)
 8003fb6:	f7ff fece 	bl	8003d56 <_Error_Handler>
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	00010081 	.word	0x00010081
 8003fc4:	10624dd3 	.word	0x10624dd3
 8003fc8:	08005ef8 	.word	0x08005ef8

08003fcc <main>:
{
 8003fcc:	b508      	push	{r3, lr}
  HAL_Init();
 8003fce:	f7fc ffa1 	bl	8000f14 <HAL_Init>
  SystemClock_Config();
 8003fd2:	f7ff ff9b 	bl	8003f0c <SystemClock_Config>
  MX_GPIO_Init();
 8003fd6:	f7ff fe0d 	bl	8003bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003fda:	f7ff fea1 	bl	8003d20 <MX_DMA_Init>
  MX_TIM2_Init();
 8003fde:	f7ff febb 	bl	8003d58 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003fe2:	f7ff fef3 	bl	8003dcc <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8003fe6:	f7ff ff11 	bl	8003e0c <MX_ADC2_Init>
  MX_RTC_Init();
 8003fea:	f7ff ff73 	bl	8003ed4 <MX_RTC_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003fee:	4c1b      	ldr	r4, [pc, #108]	; (800405c <main+0x90>)
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7fd fabc 	bl	8001570 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8003ff8:	f7ff fcb0 	bl	800395c <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	4918      	ldr	r1, [pc, #96]	; (8004060 <main+0x94>)
 8004000:	4818      	ldr	r0, [pc, #96]	; (8004064 <main+0x98>)
 8004002:	f7ff f832 	bl	800306a <HAL_UART_Receive_IT>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 8004006:	2207      	movs	r2, #7
 8004008:	4b17      	ldr	r3, [pc, #92]	; (8004068 <main+0x9c>)
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	4620      	mov	r0, r4
 800400e:	f7fd f9db 	bl	80013c8 <HAL_ADC_Start_DMA>
 8004012:	e009      	b.n	8004028 <main+0x5c>
		  rx_flag = 0;
 8004014:	2200      	movs	r2, #0
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <main+0xa0>)
 8004018:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 800401a:	f000 fc2d 	bl	8004878 <uart_comms>
 800401e:	e007      	b.n	8004030 <main+0x64>
	  if(adc_flag == 1){	// ADC conversion
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <main+0xa4>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d013      	beq.n	8004050 <main+0x84>
	  if(rx_flag == 1 ){ 	// UART Comms
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <main+0xa0>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d0f1      	beq.n	8004014 <main+0x48>
	  if(systick_flag == 1){	// Seven Segment
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <main+0xa8>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d1f3      	bne.n	8004020 <main+0x54>
		  systick_flag = 0;
 8004038:	2200      	movs	r2, #0
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <main+0xa8>)
 800403c:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 800403e:	f000 f81b 	bl	8004078 <seven_segment>
		  HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 8004042:	2207      	movs	r2, #7
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <main+0x9c>)
 8004046:	6819      	ldr	r1, [r3, #0]
 8004048:	4804      	ldr	r0, [pc, #16]	; (800405c <main+0x90>)
 800404a:	f7fd f9bd 	bl	80013c8 <HAL_ADC_Start_DMA>
 800404e:	e7e7      	b.n	8004020 <main+0x54>
		  adc_flag = 0;
 8004050:	2200      	movs	r2, #0
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <main+0xa4>)
 8004054:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8004056:	f7ff fb7f 	bl	8003758 <adc_comms>
 800405a:	e7e5      	b.n	8004028 <main+0x5c>
 800405c:	200002cc 	.word	0x200002cc
 8004060:	20000498 	.word	0x20000498
 8004064:	20000368 	.word	0x20000368
 8004068:	2000021c 	.word	0x2000021c
 800406c:	20000280 	.word	0x20000280
 8004070:	2000023a 	.word	0x2000023a
 8004074:	2000028d 	.word	0x2000028d

08004078 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8004078:	b510      	push	{r4, lr}

	if(segment_counter == 0){	// Left Most Digit
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <seven_segment+0x12c>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b133      	cbz	r3, 800408e <seven_segment+0x16>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8004080:	2b01      	cmp	r3, #1
 8004082:	d027      	beq.n	80040d4 <seven_segment+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8004084:	2b02      	cmp	r3, #2
 8004086:	d048      	beq.n	800411a <seven_segment+0xa2>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 8004088:	2b03      	cmp	r3, #3
 800408a:	d069      	beq.n	8004160 <seven_segment+0xe8>
 800408c:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 800408e:	4c46      	ldr	r4, [pc, #280]	; (80041a8 <seven_segment+0x130>)
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004096:	4620      	mov	r0, r4
 8004098:	f7fd fede 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 800409c:	2201      	movs	r2, #1
 800409e:	2110      	movs	r1, #16
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7fd fed9 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80040a6:	2201      	movs	r2, #1
 80040a8:	2120      	movs	r1, #32
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7fd fed4 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80040b0:	2201      	movs	r2, #1
 80040b2:	2108      	movs	r1, #8
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7fd fecf 	bl	8001e58 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 80040ba:	4c3a      	ldr	r4, [pc, #232]	; (80041a4 <seven_segment+0x12c>)
 80040bc:	7823      	ldrb	r3, [r4, #0]
 80040be:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <seven_segment+0x134>)
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	5cd0      	ldrb	r0, [r2, r3]
 80040c4:	3830      	subs	r0, #48	; 0x30
 80040c6:	b2c0      	uxtb	r0, r0
 80040c8:	f000 f872 	bl	80041b0 <seven_segment_display>
		segment_counter += 1;
 80040cc:	7823      	ldrb	r3, [r4, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	7023      	strb	r3, [r4, #0]
 80040d2:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80040d4:	4c34      	ldr	r4, [pc, #208]	; (80041a8 <seven_segment+0x130>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040dc:	4620      	mov	r0, r4
 80040de:	f7fd febb 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 80040e2:	2200      	movs	r2, #0
 80040e4:	2110      	movs	r1, #16
 80040e6:	4620      	mov	r0, r4
 80040e8:	f7fd feb6 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80040ec:	2201      	movs	r2, #1
 80040ee:	2120      	movs	r1, #32
 80040f0:	4620      	mov	r0, r4
 80040f2:	f7fd feb1 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80040f6:	2201      	movs	r2, #1
 80040f8:	2108      	movs	r1, #8
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7fd feac 	bl	8001e58 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004100:	4c28      	ldr	r4, [pc, #160]	; (80041a4 <seven_segment+0x12c>)
 8004102:	7823      	ldrb	r3, [r4, #0]
 8004104:	4a29      	ldr	r2, [pc, #164]	; (80041ac <seven_segment+0x134>)
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	5cd0      	ldrb	r0, [r2, r3]
 800410a:	3830      	subs	r0, #48	; 0x30
 800410c:	b2c0      	uxtb	r0, r0
 800410e:	f000 f84f 	bl	80041b0 <seven_segment_display>
		segment_counter += 1;
 8004112:	7823      	ldrb	r3, [r4, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	7023      	strb	r3, [r4, #0]
 8004118:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 800411a:	4c23      	ldr	r4, [pc, #140]	; (80041a8 <seven_segment+0x130>)
 800411c:	2201      	movs	r2, #1
 800411e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004122:	4620      	mov	r0, r4
 8004124:	f7fd fe98 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004128:	2201      	movs	r2, #1
 800412a:	2110      	movs	r1, #16
 800412c:	4620      	mov	r0, r4
 800412e:	f7fd fe93 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8004132:	2200      	movs	r2, #0
 8004134:	2120      	movs	r1, #32
 8004136:	4620      	mov	r0, r4
 8004138:	f7fd fe8e 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 800413c:	2201      	movs	r2, #1
 800413e:	2108      	movs	r1, #8
 8004140:	4620      	mov	r0, r4
 8004142:	f7fd fe89 	bl	8001e58 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004146:	4c17      	ldr	r4, [pc, #92]	; (80041a4 <seven_segment+0x12c>)
 8004148:	7823      	ldrb	r3, [r4, #0]
 800414a:	4a18      	ldr	r2, [pc, #96]	; (80041ac <seven_segment+0x134>)
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	5cd0      	ldrb	r0, [r2, r3]
 8004150:	3830      	subs	r0, #48	; 0x30
 8004152:	b2c0      	uxtb	r0, r0
 8004154:	f000 f82c 	bl	80041b0 <seven_segment_display>
		segment_counter += 1;
 8004158:	7823      	ldrb	r3, [r4, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	7023      	strb	r3, [r4, #0]
 800415e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004160:	4c11      	ldr	r4, [pc, #68]	; (80041a8 <seven_segment+0x130>)
 8004162:	2201      	movs	r2, #1
 8004164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004168:	4620      	mov	r0, r4
 800416a:	f7fd fe75 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 800416e:	2201      	movs	r2, #1
 8004170:	2110      	movs	r1, #16
 8004172:	4620      	mov	r0, r4
 8004174:	f7fd fe70 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004178:	2201      	movs	r2, #1
 800417a:	2120      	movs	r1, #32
 800417c:	4620      	mov	r0, r4
 800417e:	f7fd fe6b 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8004182:	2200      	movs	r2, #0
 8004184:	2108      	movs	r1, #8
 8004186:	4620      	mov	r0, r4
 8004188:	f7fd fe66 	bl	8001e58 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 800418c:	4c05      	ldr	r4, [pc, #20]	; (80041a4 <seven_segment+0x12c>)
 800418e:	7823      	ldrb	r3, [r4, #0]
 8004190:	4a06      	ldr	r2, [pc, #24]	; (80041ac <seven_segment+0x134>)
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	5cd0      	ldrb	r0, [r2, r3]
 8004196:	3830      	subs	r0, #48	; 0x30
 8004198:	b2c0      	uxtb	r0, r0
 800419a:	f000 f809 	bl	80041b0 <seven_segment_display>
		segment_counter = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	7023      	strb	r3, [r4, #0]
	}
}
 80041a2:	e773      	b.n	800408c <seven_segment+0x14>
 80041a4:	20000281 	.word	0x20000281
 80041a8:	48000400 	.word	0x48000400
 80041ac:	20000284 	.word	0x20000284

080041b0 <seven_segment_display>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 80041b0:	b510      	push	{r4, lr}
	switch(num){
 80041b2:	2809      	cmp	r0, #9
 80041b4:	f200 81d2 	bhi.w	800455c <seven_segment_display+0x3ac>
 80041b8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80041bc:	000a019f 	.word	0x000a019f
 80041c0:	00600035 	.word	0x00600035
 80041c4:	00bc008b 	.word	0x00bc008b
 80041c8:	011200e7 	.word	0x011200e7
 80041cc:	016e013d 	.word	0x016e013d
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041d8:	f7fd fe3e 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80041dc:	2200      	movs	r2, #0
 80041de:	2180      	movs	r1, #128	; 0x80
 80041e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e4:	f7fd fe38 	bl	8001e58 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80041e8:	2201      	movs	r2, #1
 80041ea:	2120      	movs	r1, #32
 80041ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041f0:	f7fd fe32 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 80041f4:	2201      	movs	r2, #1
 80041f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fe:	f7fd fe2b 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8004202:	2201      	movs	r2, #1
 8004204:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800420c:	f7fd fe24 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8004210:	2201      	movs	r2, #1
 8004212:	2140      	movs	r1, #64	; 0x40
 8004214:	48ea      	ldr	r0, [pc, #936]	; (80045c0 <seven_segment_display+0x410>)
 8004216:	f7fd fe1f 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 800421a:	2201      	movs	r2, #1
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	48e9      	ldr	r0, [pc, #932]	; (80045c4 <seven_segment_display+0x414>)
 8004220:	f7fd fe1a 	bl	8001e58 <HAL_GPIO_WritePin>
		break;
 8004224:	bd10      	pop	{r4, pc}
	case 2:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8004226:	2200      	movs	r2, #0
 8004228:	2120      	movs	r1, #32
 800422a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800422e:	f7fd fe13 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004232:	2200      	movs	r2, #0
 8004234:	2140      	movs	r1, #64	; 0x40
 8004236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800423a:	f7fd fe0d 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800423e:	2200      	movs	r2, #0
 8004240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004248:	f7fd fe06 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	48dc      	ldr	r0, [pc, #880]	; (80045c4 <seven_segment_display+0x414>)
 8004252:	f7fd fe01 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004256:	2200      	movs	r2, #0
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	48d9      	ldr	r0, [pc, #868]	; (80045c0 <seven_segment_display+0x410>)
 800425c:	f7fd fdfc 	bl	8001e58 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004260:	2201      	movs	r2, #1
 8004262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800426a:	f7fd fdf5 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 800426e:	2201      	movs	r2, #1
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004276:	f7fd fdef 	bl	8001e58 <HAL_GPIO_WritePin>
		break;
 800427a:	bd10      	pop	{r4, pc}

	case 3:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800427c:	2200      	movs	r2, #0
 800427e:	2120      	movs	r1, #32
 8004280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004284:	f7fd fde8 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8004288:	2200      	movs	r2, #0
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004290:	f7fd fde2 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800429a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800429e:	f7fd fddb 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80042a2:	2200      	movs	r2, #0
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042aa:	f7fd fdd5 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80042ae:	2200      	movs	r2, #0
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	48c3      	ldr	r0, [pc, #780]	; (80045c0 <seven_segment_display+0x410>)
 80042b4:	f7fd fdd0 	bl	8001e58 <HAL_GPIO_WritePin>

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80042b8:	2201      	movs	r2, #1
 80042ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042c2:	f7fd fdc9 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80042c6:	2201      	movs	r2, #1
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	48be      	ldr	r0, [pc, #760]	; (80045c4 <seven_segment_display+0x414>)
 80042cc:	f7fd fdc4 	bl	8001e58 <HAL_GPIO_WritePin>

		break;
 80042d0:	bd10      	pop	{r4, pc}
	case 4:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80042d2:	2200      	movs	r2, #0
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042da:	f7fd fdbd 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80042de:	2200      	movs	r2, #0
 80042e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042e8:	f7fd fdb6 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80042ec:	2200      	movs	r2, #0
 80042ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042f6:	f7fd fdaf 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80042fa:	2200      	movs	r2, #0
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004302:	f7fd fda9 	bl	8001e58 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8004306:	2201      	movs	r2, #1
 8004308:	2120      	movs	r1, #32
 800430a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800430e:	f7fd fda3 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004312:	2201      	movs	r2, #1
 8004314:	2180      	movs	r1, #128	; 0x80
 8004316:	48ab      	ldr	r0, [pc, #684]	; (80045c4 <seven_segment_display+0x414>)
 8004318:	f7fd fd9e 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 800431c:	2201      	movs	r2, #1
 800431e:	2120      	movs	r1, #32
 8004320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004324:	f7fd fd98 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8004328:	2201      	movs	r2, #1
 800432a:	2140      	movs	r1, #64	; 0x40
 800432c:	48a4      	ldr	r0, [pc, #656]	; (80045c0 <seven_segment_display+0x410>)
 800432e:	f7fd fd93 	bl	8001e58 <HAL_GPIO_WritePin>

		break;
 8004332:	bd10      	pop	{r4, pc}
	case 5:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004334:	2200      	movs	r2, #0
 8004336:	2120      	movs	r1, #32
 8004338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800433c:	f7fd fd8c 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004340:	2200      	movs	r2, #0
 8004342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800434a:	f7fd fd85 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800434e:	2200      	movs	r2, #0
 8004350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004358:	f7fd fd7e 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800435c:	2200      	movs	r2, #0
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004364:	f7fd fd78 	bl	8001e58 <HAL_GPIO_WritePin>

		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8004368:	2201      	movs	r2, #1
 800436a:	2140      	movs	r1, #64	; 0x40
 800436c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004370:	f7fd fd72 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004374:	2201      	movs	r2, #1
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	4892      	ldr	r0, [pc, #584]	; (80045c4 <seven_segment_display+0x414>)
 800437a:	f7fd fd6d 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 800437e:	2200      	movs	r2, #0
 8004380:	2140      	movs	r1, #64	; 0x40
 8004382:	488f      	ldr	r0, [pc, #572]	; (80045c0 <seven_segment_display+0x410>)
 8004384:	f7fd fd68 	bl	8001e58 <HAL_GPIO_WritePin>
		break;
 8004388:	bd10      	pop	{r4, pc}

	case 6:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800438a:	2200      	movs	r2, #0
 800438c:	2120      	movs	r1, #32
 800438e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004392:	f7fd fd61 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004396:	2200      	movs	r2, #0
 8004398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800439c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043a0:	f7fd fd5a 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ae:	f7fd fd53 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80043b2:	2200      	movs	r2, #0
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ba:	f7fd fd4d 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80043be:	2200      	movs	r2, #0
 80043c0:	2140      	movs	r1, #64	; 0x40
 80043c2:	487f      	ldr	r0, [pc, #508]	; (80045c0 <seven_segment_display+0x410>)
 80043c4:	f7fd fd48 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	487d      	ldr	r0, [pc, #500]	; (80045c4 <seven_segment_display+0x414>)
 80043ce:	f7fd fd43 	bl	8001e58 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 80043d2:	2201      	movs	r2, #1
 80043d4:	2140      	movs	r1, #64	; 0x40
 80043d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043da:	f7fd fd3d 	bl	8001e58 <HAL_GPIO_WritePin>
		break;
 80043de:	bd10      	pop	{r4, pc}
	case 7:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80043e0:	2200      	movs	r2, #0
 80043e2:	2120      	movs	r1, #32
 80043e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043e8:	f7fd fd36 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80043ec:	2200      	movs	r2, #0
 80043ee:	2140      	movs	r1, #64	; 0x40
 80043f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043f4:	f7fd fd30 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80043f8:	2200      	movs	r2, #0
 80043fa:	2180      	movs	r1, #128	; 0x80
 80043fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004400:	f7fd fd2a 	bl	8001e58 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004404:	2201      	movs	r2, #1
 8004406:	2180      	movs	r1, #128	; 0x80
 8004408:	486e      	ldr	r0, [pc, #440]	; (80045c4 <seven_segment_display+0x414>)
 800440a:	f7fd fd25 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800440e:	2201      	movs	r2, #1
 8004410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004418:	f7fd fd1e 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800441c:	2201      	movs	r2, #1
 800441e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004426:	f7fd fd17 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 800442a:	2201      	movs	r2, #1
 800442c:	2140      	movs	r1, #64	; 0x40
 800442e:	4864      	ldr	r0, [pc, #400]	; (80045c0 <seven_segment_display+0x410>)
 8004430:	f7fd fd12 	bl	8001e58 <HAL_GPIO_WritePin>

		break;
 8004434:	bd10      	pop	{r4, pc}
	case 8:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004436:	2200      	movs	r2, #0
 8004438:	2140      	movs	r1, #64	; 0x40
 800443a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800443e:	f7fd fd0b 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004442:	2200      	movs	r2, #0
 8004444:	2120      	movs	r1, #32
 8004446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800444a:	f7fd fd05 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800444e:	4c5c      	ldr	r4, [pc, #368]	; (80045c0 <seven_segment_display+0x410>)
 8004450:	2200      	movs	r2, #0
 8004452:	2140      	movs	r1, #64	; 0x40
 8004454:	4620      	mov	r0, r4
 8004456:	f7fd fcff 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800445a:	2200      	movs	r2, #0
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004462:	f7fd fcf9 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8004466:	2200      	movs	r2, #0
 8004468:	2140      	movs	r1, #64	; 0x40
 800446a:	4620      	mov	r0, r4
 800446c:	f7fd fcf4 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004470:	2200      	movs	r2, #0
 8004472:	2180      	movs	r1, #128	; 0x80
 8004474:	4853      	ldr	r0, [pc, #332]	; (80045c4 <seven_segment_display+0x414>)
 8004476:	f7fd fcef 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800447a:	2200      	movs	r2, #0
 800447c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004484:	f7fd fce8 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004488:	2200      	movs	r2, #0
 800448a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800448e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004492:	f7fd fce1 	bl	8001e58 <HAL_GPIO_WritePin>
		break;
 8004496:	bd10      	pop	{r4, pc}
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004498:	2200      	movs	r2, #0
 800449a:	2120      	movs	r1, #32
 800449c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044a0:	f7fd fcda 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80044a4:	4c46      	ldr	r4, [pc, #280]	; (80045c0 <seven_segment_display+0x410>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	2140      	movs	r1, #64	; 0x40
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7fd fcd4 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80044b0:	2200      	movs	r2, #0
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044b8:	f7fd fcce 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80044bc:	2200      	movs	r2, #0
 80044be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044c6:	f7fd fcc7 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80044ca:	2200      	movs	r2, #0
 80044cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044d4:	f7fd fcc0 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80044d8:	2200      	movs	r2, #0
 80044da:	2140      	movs	r1, #64	; 0x40
 80044dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044e0:	f7fd fcba 	bl	8001e58 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80044e4:	2201      	movs	r2, #1
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	4836      	ldr	r0, [pc, #216]	; (80045c4 <seven_segment_display+0x414>)
 80044ea:	f7fd fcb5 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80044ee:	2201      	movs	r2, #1
 80044f0:	2140      	movs	r1, #64	; 0x40
 80044f2:	4620      	mov	r0, r4
 80044f4:	f7fd fcb0 	bl	8001e58 <HAL_GPIO_WritePin>
		break;
 80044f8:	bd10      	pop	{r4, pc}
	case 0:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80044fa:	2200      	movs	r2, #0
 80044fc:	2140      	movs	r1, #64	; 0x40
 80044fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004502:	f7fd fca9 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004506:	2200      	movs	r2, #0
 8004508:	2120      	movs	r1, #32
 800450a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800450e:	f7fd fca3 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004512:	4c2b      	ldr	r4, [pc, #172]	; (80045c0 <seven_segment_display+0x410>)
 8004514:	2200      	movs	r2, #0
 8004516:	2140      	movs	r1, #64	; 0x40
 8004518:	4620      	mov	r0, r4
 800451a:	f7fd fc9d 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800451e:	2200      	movs	r2, #0
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004526:	f7fd fc97 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800452a:	2200      	movs	r2, #0
 800452c:	2140      	movs	r1, #64	; 0x40
 800452e:	4620      	mov	r0, r4
 8004530:	f7fd fc92 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004534:	2200      	movs	r2, #0
 8004536:	2180      	movs	r1, #128	; 0x80
 8004538:	4822      	ldr	r0, [pc, #136]	; (80045c4 <seven_segment_display+0x414>)
 800453a:	f7fd fc8d 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800453e:	2200      	movs	r2, #0
 8004540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004548:	f7fd fc86 	bl	8001e58 <HAL_GPIO_WritePin>
		//OFF

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800454c:	2201      	movs	r2, #1
 800454e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004556:	f7fd fc7f 	bl	8001e58 <HAL_GPIO_WritePin>
		break;
 800455a:	bd10      	pop	{r4, pc}
	default:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 800455c:	2201      	movs	r2, #1
 800455e:	2120      	movs	r1, #32
 8004560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004564:	f7fd fc78 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 8004568:	4c15      	ldr	r4, [pc, #84]	; (80045c0 <seven_segment_display+0x410>)
 800456a:	2201      	movs	r2, #1
 800456c:	2140      	movs	r1, #64	; 0x40
 800456e:	4620      	mov	r0, r4
 8004570:	f7fd fc72 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8004574:	2201      	movs	r2, #1
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800457c:	f7fd fc6c 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8004580:	2201      	movs	r2, #1
 8004582:	2140      	movs	r1, #64	; 0x40
 8004584:	4620      	mov	r0, r4
 8004586:	f7fd fc67 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800458a:	2201      	movs	r2, #1
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	480d      	ldr	r0, [pc, #52]	; (80045c4 <seven_segment_display+0x414>)
 8004590:	f7fd fc62 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004594:	2201      	movs	r2, #1
 8004596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800459a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800459e:	f7fd fc5b 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 80045a2:	2201      	movs	r2, #1
 80045a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045ac:	f7fd fc54 	bl	8001e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 80045b0:	2201      	movs	r2, #1
 80045b2:	2140      	movs	r1, #64	; 0x40
 80045b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045b8:	f7fd fc4e 	bl	8001e58 <HAL_GPIO_WritePin>
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	bf00      	nop
 80045c0:	48000400 	.word	0x48000400
 80045c4:	48000800 	.word	0x48000800

080045c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045c8:	b500      	push	{lr}
 80045ca:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <HAL_MspInit+0x78>)
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	619a      	str	r2, [r3, #24]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045e0:	2007      	movs	r0, #7
 80045e2:	f7fd f9cf 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 80045e6:	2202      	movs	r2, #2
 80045e8:	2100      	movs	r1, #0
 80045ea:	f06f 000b 	mvn.w	r0, #11
 80045ee:	f7fd f9db 	bl	80019a8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 80045f2:	2202      	movs	r2, #2
 80045f4:	2100      	movs	r1, #0
 80045f6:	f06f 000a 	mvn.w	r0, #10
 80045fa:	f7fd f9d5 	bl	80019a8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 80045fe:	2202      	movs	r2, #2
 8004600:	2100      	movs	r1, #0
 8004602:	f06f 0009 	mvn.w	r0, #9
 8004606:	f7fd f9cf 	bl	80019a8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 800460a:	2202      	movs	r2, #2
 800460c:	2100      	movs	r1, #0
 800460e:	f06f 0004 	mvn.w	r0, #4
 8004612:	f7fd f9c9 	bl	80019a8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 8004616:	2202      	movs	r2, #2
 8004618:	2100      	movs	r1, #0
 800461a:	f06f 0003 	mvn.w	r0, #3
 800461e:	f7fd f9c3 	bl	80019a8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 8004622:	2202      	movs	r2, #2
 8004624:	2100      	movs	r1, #0
 8004626:	f06f 0001 	mvn.w	r0, #1
 800462a:	f7fd f9bd 	bl	80019a8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 800462e:	2202      	movs	r2, #2
 8004630:	2100      	movs	r1, #0
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
 8004636:	f7fd f9b7 	bl	80019a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800463a:	b003      	add	sp, #12
 800463c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004640:	40021000 	.word	0x40021000

08004644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8004644:	6802      	ldr	r2, [r0, #0]
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_ADC_MspInit+0x84>)
 8004648:	429a      	cmp	r2, r3
 800464a:	d000      	beq.n	800464e <HAL_ADC_MspInit+0xa>
 800464c:	4770      	bx	lr
{
 800464e:	b570      	push	{r4, r5, r6, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <HAL_ADC_MspInit+0x88>)
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800465c:	615a      	str	r2, [r3, #20]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC2_IN8
    PC3     ------> ADC2_IN9
    PB2     ------> ADC2_IN12
    PB15     ------> ADC2_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004668:	230c      	movs	r3, #12
 800466a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800466c:	2603      	movs	r6, #3
 800466e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2500      	movs	r5, #0
 8004672:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004674:	a901      	add	r1, sp, #4
 8004676:	4816      	ldr	r0, [pc, #88]	; (80046d0 <HAL_ADC_MspInit+0x8c>)
 8004678:	f7fd fb24 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800467c:	f248 0304 	movw	r3, #32772	; 0x8004
 8004680:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004682:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004686:	a901      	add	r1, sp, #4
 8004688:	4812      	ldr	r0, [pc, #72]	; (80046d4 <HAL_ADC_MspInit+0x90>)
 800468a:	f7fd fb1b 	bl	8001cc4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 800468e:	4812      	ldr	r0, [pc, #72]	; (80046d8 <HAL_ADC_MspInit+0x94>)
 8004690:	4b12      	ldr	r3, [pc, #72]	; (80046dc <HAL_ADC_MspInit+0x98>)
 8004692:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004694:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004696:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800469c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046a0:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80046a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046a6:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80046a8:	2320      	movs	r3, #32
 80046aa:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80046ac:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80046ae:	f7fd fa0d 	bl	8001acc <HAL_DMA_Init>
 80046b2:	b920      	cbnz	r0, 80046be <HAL_ADC_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_ADC_MspInit+0x94>)
 80046b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80046b8:	625c      	str	r4, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80046ba:	b006      	add	sp, #24
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
      _Error_Handler(__FILE__, __LINE__);
 80046be:	217a      	movs	r1, #122	; 0x7a
 80046c0:	4807      	ldr	r0, [pc, #28]	; (80046e0 <HAL_ADC_MspInit+0x9c>)
 80046c2:	f7ff fb48 	bl	8003d56 <_Error_Handler>
 80046c6:	e7f5      	b.n	80046b4 <HAL_ADC_MspInit+0x70>
 80046c8:	50000100 	.word	0x50000100
 80046cc:	40021000 	.word	0x40021000
 80046d0:	48000800 	.word	0x48000800
 80046d4:	48000400 	.word	0x48000400
 80046d8:	20000450 	.word	0x20000450
 80046dc:	4002001c 	.word	0x4002001c
 80046e0:	08005f08 	.word	0x08005f08

080046e4 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80046e4:	6802      	ldr	r2, [r0, #0]
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_RTC_MspInit+0x24>)
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d000      	beq.n	80046ee <HAL_RTC_MspInit+0xa>
 80046ec:	4770      	bx	lr
 80046ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80046f2:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80046f6:	fab2 f282 	clz	r2, r2
 80046fa:	4b04      	ldr	r3, [pc, #16]	; (800470c <HAL_RTC_MspInit+0x28>)
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004704:	e7f2      	b.n	80046ec <HAL_RTC_MspInit+0x8>
 8004706:	bf00      	nop
 8004708:	40002800 	.word	0x40002800
 800470c:	10908100 	.word	0x10908100

08004710 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8004710:	6803      	ldr	r3, [r0, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d000      	beq.n	800471a <HAL_TIM_Base_MspInit+0xa>
 8004718:	4770      	bx	lr
{
 800471a:	b500      	push	{lr}
 800471c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800471e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	61da      	str	r2, [r3, #28]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8004734:	2202      	movs	r2, #2
 8004736:	2100      	movs	r1, #0
 8004738:	201c      	movs	r0, #28
 800473a:	f7fd f935 	bl	80019a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800473e:	201c      	movs	r0, #28
 8004740:	f7fd f964 	bl	8001a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004744:	b003      	add	sp, #12
 8004746:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800474c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800474c:	6802      	ldr	r2, [r0, #0]
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <HAL_UART_MspInit+0x54>)
 8004750:	429a      	cmp	r2, r3
 8004752:	d000      	beq.n	8004756 <HAL_UART_MspInit+0xa>
 8004754:	4770      	bx	lr
{
 8004756:	b510      	push	{r4, lr}
 8004758:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800475a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004764:	619a      	str	r2, [r3, #24]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004770:	2330      	movs	r3, #48	; 0x30
 8004772:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2400      	movs	r4, #0
 800477a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800477c:	2303      	movs	r3, #3
 800477e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004780:	2307      	movs	r3, #7
 8004782:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004784:	a901      	add	r1, sp, #4
 8004786:	4807      	ldr	r0, [pc, #28]	; (80047a4 <HAL_UART_MspInit+0x58>)
 8004788:	f7fd fa9c 	bl	8001cc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800478c:	4622      	mov	r2, r4
 800478e:	4621      	mov	r1, r4
 8004790:	2025      	movs	r0, #37	; 0x25
 8004792:	f7fd f909 	bl	80019a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004796:	2025      	movs	r0, #37	; 0x25
 8004798:	f7fd f938 	bl	8001a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800479c:	b006      	add	sp, #24
 800479e:	bd10      	pop	{r4, pc}
 80047a0:	40013800 	.word	0x40013800
 80047a4:	48000800 	.word	0x48000800

080047a8 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80047a8:	4770      	bx	lr

080047aa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80047aa:	4770      	bx	lr

080047ac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80047ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ae:	f7fc fbc3 	bl	8000f38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80047b2:	f7fd f95e 	bl	8001a72 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
 80047b6:	2201      	movs	r2, #1
 80047b8:	4b01      	ldr	r3, [pc, #4]	; (80047c0 <SysTick_Handler+0x14>)
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	bd08      	pop	{r3, pc}
 80047be:	bf00      	nop
 80047c0:	2000028d 	.word	0x2000028d

080047c4 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80047c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80047c6:	4802      	ldr	r0, [pc, #8]	; (80047d0 <DMA1_Channel2_IRQHandler+0xc>)
 80047c8:	f7fd fa22 	bl	8001c10 <HAL_DMA_IRQHandler>
 80047cc:	bd08      	pop	{r3, pc}
 80047ce:	bf00      	nop
 80047d0:	20000450 	.word	0x20000450

080047d4 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80047d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80047d6:	2040      	movs	r0, #64	; 0x40
 80047d8:	f7fd fb44 	bl	8001e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 80047dc:	2201      	movs	r2, #1
 80047de:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <EXTI9_5_IRQHandler+0x10>)
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	bd08      	pop	{r3, pc}
 80047e4:	20000295 	.word	0x20000295

080047e8 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80047e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047ea:	4803      	ldr	r0, [pc, #12]	; (80047f8 <TIM2_IRQHandler+0x10>)
 80047ec:	f7fe fa15 	bl	8002c1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag = 0;
 80047f0:	2200      	movs	r2, #0
 80047f2:	4b02      	ldr	r3, [pc, #8]	; (80047fc <TIM2_IRQHandler+0x14>)
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	bd08      	pop	{r3, pc}
 80047f8:	20000410 	.word	0x20000410
 80047fc:	20000294 	.word	0x20000294

08004800 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8004800:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004802:	4802      	ldr	r0, [pc, #8]	; (800480c <USART1_IRQHandler+0xc>)
 8004804:	f7fe fef6 	bl	80035f4 <HAL_UART_IRQHandler>
 8004808:	bd08      	pop	{r3, pc}
 800480a:	bf00      	nop
 800480c:	20000368 	.word	0x20000368

08004810 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004810:	4915      	ldr	r1, [pc, #84]	; (8004868 <SystemInit+0x58>)
 8004812:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004816:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <SystemInit+0x5c>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004828:	6858      	ldr	r0, [r3, #4]
 800482a:	4a11      	ldr	r2, [pc, #68]	; (8004870 <SystemInit+0x60>)
 800482c:	4002      	ands	r2, r0
 800482e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004836:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800483a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004842:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800484a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	f022 020f 	bic.w	r2, r2, #15
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004854:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004856:	4a07      	ldr	r2, [pc, #28]	; (8004874 <SystemInit+0x64>)
 8004858:	4002      	ands	r2, r0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004864:	608b      	str	r3, [r1, #8]
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00
 800486c:	40021000 	.word	0x40021000
 8004870:	f87fc00c 	.word	0xf87fc00c
 8004874:	ff00fccc 	.word	0xff00fccc

08004878 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 8004878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
 800487c:	2200      	movs	r2, #0
 800487e:	4ba6      	ldr	r3, [pc, #664]	; (8004b18 <uart_comms+0x2a0>)
 8004880:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 8004882:	4ba6      	ldr	r3, [pc, #664]	; (8004b1c <uart_comms+0x2a4>)
 8004884:	4aa6      	ldr	r2, [pc, #664]	; (8004b20 <uart_comms+0x2a8>)
 8004886:	7812      	ldrb	r2, [r2, #0]
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	48a6      	ldr	r0, [pc, #664]	; (8004b24 <uart_comms+0x2ac>)
 800488c:	7800      	ldrb	r0, [r0, #0]
 800488e:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	2a24      	cmp	r2, #36	; 0x24
 8004896:	d00b      	beq.n	80048b0 <uart_comms+0x38>

		uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	2a24      	cmp	r2, #36	; 0x24
 800489c:	d00d      	beq.n	80048ba <uart_comms+0x42>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 800489e:	4ba0      	ldr	r3, [pc, #640]	; (8004b20 <uart_comms+0x2a8>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b3b      	cmp	r3, #59	; 0x3b
 80048a4:	d902      	bls.n	80048ac <uart_comms+0x34>
		uart_counter = 0;
 80048a6:	2200      	movs	r2, #0
 80048a8:	4b9d      	ldr	r3, [pc, #628]	; (8004b20 <uart_comms+0x2a8>)
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_counter += 1;
 80048b0:	499b      	ldr	r1, [pc, #620]	; (8004b20 <uart_comms+0x2a8>)
 80048b2:	780a      	ldrb	r2, [r1, #0]
 80048b4:	3201      	adds	r2, #1
 80048b6:	700a      	strb	r2, [r1, #0]
 80048b8:	e7ee      	b.n	8004898 <uart_comms+0x20>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80048ba:	4a99      	ldr	r2, [pc, #612]	; (8004b20 <uart_comms+0x2a8>)
 80048bc:	7812      	ldrb	r2, [r2, #0]
 80048be:	1899      	adds	r1, r3, r2
 80048c0:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80048c4:	290a      	cmp	r1, #10
 80048c6:	d1ea      	bne.n	800489e <uart_comms+0x26>
 80048c8:	4413      	add	r3, r2
 80048ca:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80048ce:	2b0d      	cmp	r3, #13
 80048d0:	d1e5      	bne.n	800489e <uart_comms+0x26>
 80048d2:	2a02      	cmp	r2, #2
 80048d4:	d9e3      	bls.n	800489e <uart_comms+0x26>
		memset(return_value,0x00, 50);
 80048d6:	2232      	movs	r2, #50	; 0x32
 80048d8:	2100      	movs	r1, #0
 80048da:	4b93      	ldr	r3, [pc, #588]	; (8004b28 <uart_comms+0x2b0>)
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	f000 fc68 	bl	80051b2 <memset>
		uart_command_copy = uart_command;
 80048e2:	4b8e      	ldr	r3, [pc, #568]	; (8004b1c <uart_comms+0x2a4>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b91      	ldr	r3, [pc, #580]	; (8004b2c <uart_comms+0x2b4>)
 80048e8:	601a      	str	r2, [r3, #0]
		switch(uart_command[1]){
 80048ea:	7853      	ldrb	r3, [r2, #1]
 80048ec:	3b41      	subs	r3, #65	; 0x41
 80048ee:	2b0a      	cmp	r3, #10
 80048f0:	d828      	bhi.n	8004944 <uart_comms+0xcc>
 80048f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80048f6:	000b      	.short	0x000b
 80048f8:	005c0032 	.word	0x005c0032
 80048fc:	00aa007c 	.word	0x00aa007c
 8004900:	00f000cb 	.word	0x00f000cb
 8004904:	0186013f 	.word	0x0186013f
 8004908:	030b01f6 	.word	0x030b01f6
			memcpy(studentnumber, uart_command, 2 );
 800490c:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <uart_comms+0x2b8>)
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	8812      	ldrh	r2, [r2, #0]
 8004912:	800a      	strh	r2, [r1, #0]
			memcpy(studentnumber+2,comma,1);
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4987      	ldr	r1, [pc, #540]	; (8004b34 <uart_comms+0x2bc>)
 8004918:	7809      	ldrb	r1, [r1, #0]
 800491a:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4986      	ldr	r1, [pc, #536]	; (8004b38 <uart_comms+0x2c0>)
 8004920:	6808      	ldr	r0, [r1, #0]
 8004922:	6849      	ldr	r1, [r1, #4]
 8004924:	f8c2 0003 	str.w	r0, [r2, #3]
 8004928:	f8c2 1007 	str.w	r1, [r2, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	4b83      	ldr	r3, [pc, #524]	; (8004b3c <uart_comms+0x2c4>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f8c1 200b 	str.w	r2, [r1, #11]
 8004938:	f8c1 300f 	str.w	r3, [r1, #15]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 800493c:	220d      	movs	r2, #13
 800493e:	4880      	ldr	r0, [pc, #512]	; (8004b40 <uart_comms+0x2c8>)
 8004940:	f7fe fb6d 	bl	800301e <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 8004944:	223c      	movs	r2, #60	; 0x3c
 8004946:	2100      	movs	r1, #0
 8004948:	4b74      	ldr	r3, [pc, #464]	; (8004b1c <uart_comms+0x2a4>)
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	f000 fc31 	bl	80051b2 <memset>
		uart_counter = 0;
 8004950:	2200      	movs	r2, #0
 8004952:	4b73      	ldr	r3, [pc, #460]	; (8004b20 <uart_comms+0x2a8>)
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memcpy(return_value, uart_command, 2);
 800495a:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <uart_comms+0x2b0>)
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	8812      	ldrh	r2, [r2, #0]
 8004960:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4975      	ldr	r1, [pc, #468]	; (8004b3c <uart_comms+0x2c4>)
 8004966:	8809      	ldrh	r1, [r1, #0]
 8004968:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 800496a:	681c      	ldr	r4, [r3, #0]
 800496c:	4620      	mov	r0, r4
 800496e:	f7fb fc2f 	bl	80001d0 <strlen>
 8004972:	b282      	uxth	r2, r0
 8004974:	4621      	mov	r1, r4
 8004976:	4872      	ldr	r0, [pc, #456]	; (8004b40 <uart_comms+0x2c8>)
 8004978:	f7fe fb51 	bl	800301e <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 800497c:	4b67      	ldr	r3, [pc, #412]	; (8004b1c <uart_comms+0x2a4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	78db      	ldrb	r3, [r3, #3]
 8004982:	2b31      	cmp	r3, #49	; 0x31
 8004984:	d00a      	beq.n	800499c <uart_comms+0x124>
			else if(uart_command[3] == '0'){
 8004986:	2b30      	cmp	r3, #48	; 0x30
 8004988:	d1dc      	bne.n	8004944 <uart_comms+0xcc>
				valve_state=valve_CLOSE;
 800498a:	4a6e      	ldr	r2, [pc, #440]	; (8004b44 <uart_comms+0x2cc>)
 800498c:	4b6e      	ldr	r3, [pc, #440]	; (8004b48 <uart_comms+0x2d0>)
 800498e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);		// Valve
 8004990:	2200      	movs	r2, #0
 8004992:	2102      	movs	r1, #2
 8004994:	486d      	ldr	r0, [pc, #436]	; (8004b4c <uart_comms+0x2d4>)
 8004996:	f7fd fa5f 	bl	8001e58 <HAL_GPIO_WritePin>
 800499a:	e7d3      	b.n	8004944 <uart_comms+0xcc>
				valve_state = valve_OPEN;
 800499c:	4a6c      	ldr	r2, [pc, #432]	; (8004b50 <uart_comms+0x2d8>)
 800499e:	4b6a      	ldr	r3, [pc, #424]	; (8004b48 <uart_comms+0x2d0>)
 80049a0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);		// Valve
 80049a2:	2201      	movs	r2, #1
 80049a4:	2102      	movs	r1, #2
 80049a6:	4869      	ldr	r0, [pc, #420]	; (8004b4c <uart_comms+0x2d4>)
 80049a8:	f7fd fa56 	bl	8001e58 <HAL_GPIO_WritePin>
 80049ac:	e7ca      	b.n	8004944 <uart_comms+0xcc>
			memcpy(return_value, uart_command, 2);
 80049ae:	4b5e      	ldr	r3, [pc, #376]	; (8004b28 <uart_comms+0x2b0>)
 80049b0:	6819      	ldr	r1, [r3, #0]
 80049b2:	8812      	ldrh	r2, [r2, #0]
 80049b4:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4960      	ldr	r1, [pc, #384]	; (8004b3c <uart_comms+0x2c4>)
 80049ba:	8809      	ldrh	r1, [r1, #0]
 80049bc:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 80049be:	681c      	ldr	r4, [r3, #0]
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7fb fc05 	bl	80001d0 <strlen>
 80049c6:	b282      	uxth	r2, r0
 80049c8:	4621      	mov	r1, r4
 80049ca:	485d      	ldr	r0, [pc, #372]	; (8004b40 <uart_comms+0x2c8>)
 80049cc:	f7fe fb27 	bl	800301e <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 80049d0:	4b52      	ldr	r3, [pc, #328]	; (8004b1c <uart_comms+0x2a4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	78db      	ldrb	r3, [r3, #3]
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	d005      	beq.n	80049e6 <uart_comms+0x16e>
			else if(uart_command[3] == '1'){
 80049da:	2b31      	cmp	r3, #49	; 0x31
 80049dc:	d1b2      	bne.n	8004944 <uart_comms+0xcc>
				auto_heating = 1;
 80049de:	2201      	movs	r2, #1
 80049e0:	4b5c      	ldr	r3, [pc, #368]	; (8004b54 <uart_comms+0x2dc>)
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	e7ae      	b.n	8004944 <uart_comms+0xcc>
				auto_heating = 0;
 80049e6:	2200      	movs	r2, #0
 80049e8:	4b5a      	ldr	r3, [pc, #360]	; (8004b54 <uart_comms+0x2dc>)
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	e7aa      	b.n	8004944 <uart_comms+0xcc>
			memcpy(return_value, uart_command, 2);
 80049ee:	4b4e      	ldr	r3, [pc, #312]	; (8004b28 <uart_comms+0x2b0>)
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	8812      	ldrh	r2, [r2, #0]
 80049f4:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4950      	ldr	r1, [pc, #320]	; (8004b3c <uart_comms+0x2c4>)
 80049fa:	8809      	ldrh	r1, [r1, #0]
 80049fc:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 80049fe:	681c      	ldr	r4, [r3, #0]
 8004a00:	4620      	mov	r0, r4
 8004a02:	f7fb fbe5 	bl	80001d0 <strlen>
 8004a06:	b282      	uxth	r2, r0
 8004a08:	4621      	mov	r1, r4
 8004a0a:	484d      	ldr	r0, [pc, #308]	; (8004b40 <uart_comms+0x2c8>)
 8004a0c:	f7fe fb07 	bl	800301e <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <uart_comms+0x2dc>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d195      	bne.n	8004944 <uart_comms+0xcc>
				if(uart_command[3]=='0'){
 8004a18:	4b40      	ldr	r3, [pc, #256]	; (8004b1c <uart_comms+0x2a4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	78db      	ldrb	r3, [r3, #3]
 8004a1e:	2b30      	cmp	r3, #48	; 0x30
 8004a20:	d00a      	beq.n	8004a38 <uart_comms+0x1c0>
				else if(uart_command[3] == '1'){
 8004a22:	2b31      	cmp	r3, #49	; 0x31
 8004a24:	d18e      	bne.n	8004944 <uart_comms+0xcc>
					heater_state = heater_ON;
 8004a26:	4a4c      	ldr	r2, [pc, #304]	; (8004b58 <uart_comms+0x2e0>)
 8004a28:	4b4c      	ldr	r3, [pc, #304]	; (8004b5c <uart_comms+0x2e4>)
 8004a2a:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);	// Heater
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4846      	ldr	r0, [pc, #280]	; (8004b4c <uart_comms+0x2d4>)
 8004a32:	f7fd fa11 	bl	8001e58 <HAL_GPIO_WritePin>
 8004a36:	e785      	b.n	8004944 <uart_comms+0xcc>
					heater_state = heater_OFF;
 8004a38:	4a49      	ldr	r2, [pc, #292]	; (8004b60 <uart_comms+0x2e8>)
 8004a3a:	4b48      	ldr	r3, [pc, #288]	; (8004b5c <uart_comms+0x2e4>)
 8004a3c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);	// Heater
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2101      	movs	r1, #1
 8004a42:	4842      	ldr	r0, [pc, #264]	; (8004b4c <uart_comms+0x2d4>)
 8004a44:	f7fd fa08 	bl	8001e58 <HAL_GPIO_WritePin>
 8004a48:	e77c      	b.n	8004944 <uart_comms+0xcc>
			memcpy(return_value, uart_command, 2);
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <uart_comms+0x2b0>)
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	8812      	ldrh	r2, [r2, #0]
 8004a50:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4939      	ldr	r1, [pc, #228]	; (8004b3c <uart_comms+0x2c4>)
 8004a56:	8809      	ldrh	r1, [r1, #0]
 8004a58:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8004a5a:	681c      	ldr	r4, [r3, #0]
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f7fb fbb7 	bl	80001d0 <strlen>
 8004a62:	b282      	uxth	r2, r0
 8004a64:	4621      	mov	r1, r4
 8004a66:	4836      	ldr	r0, [pc, #216]	; (8004b40 <uart_comms+0x2c8>)
 8004a68:	f7fe fad9 	bl	800301e <HAL_UART_Transmit_IT>
			if(uart_command[2]=='0'){ // logging disable
 8004a6c:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <uart_comms+0x2a4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	789b      	ldrb	r3, [r3, #2]
 8004a72:	2b30      	cmp	r3, #48	; 0x30
 8004a74:	d006      	beq.n	8004a84 <uart_comms+0x20c>
			else if(uart_command[2] == '1'){ // logging enable
 8004a76:	2b31      	cmp	r3, #49	; 0x31
 8004a78:	f47f af64 	bne.w	8004944 <uart_comms+0xcc>
				enableFlashLogging = 1;
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <uart_comms+0x2ec>)
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e75f      	b.n	8004944 <uart_comms+0xcc>
				enableFlashLogging = 0;
 8004a84:	2200      	movs	r2, #0
 8004a86:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <uart_comms+0x2ec>)
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e75b      	b.n	8004944 <uart_comms+0xcc>
			memcpy(return_value, uart_command,2);
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <uart_comms+0x2b0>)
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	8812      	ldrh	r2, [r2, #0]
 8004a92:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4929      	ldr	r1, [pc, #164]	; (8004b3c <uart_comms+0x2c4>)
 8004a98:	8809      	ldrh	r1, [r1, #0]
 8004a9a:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8004a9c:	681c      	ldr	r4, [r3, #0]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7fb fb96 	bl	80001d0 <strlen>
 8004aa4:	b282      	uxth	r2, r0
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	4825      	ldr	r0, [pc, #148]	; (8004b40 <uart_comms+0x2c8>)
 8004aaa:	f7fe fab8 	bl	800301e <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 8004aae:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <uart_comms+0x2a8>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	3b05      	subs	r3, #5
 8004ab4:	4a2c      	ldr	r2, [pc, #176]	; (8004b68 <uart_comms+0x2f0>)
 8004ab6:	7013      	strb	r3, [r2, #0]
			memset(set_temp, 0x00, 4);
 8004ab8:	4c2c      	ldr	r4, [pc, #176]	; (8004b6c <uart_comms+0x2f4>)
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	2100      	movs	r1, #0
 8004abe:	6019      	str	r1, [r3, #0]
			memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 8004ac0:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <uart_comms+0x2a4>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	3103      	adds	r1, #3
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	f000 fb67 	bl	800519c <memcpy>
			segment_val =set_temp;
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <uart_comms+0x2f8>)
 8004ad2:	601a      	str	r2, [r3, #0]
			break;
 8004ad4:	e736      	b.n	8004944 <uart_comms+0xcc>
			memcpy(return_value, uart_command, 2);
 8004ad6:	4c14      	ldr	r4, [pc, #80]	; (8004b28 <uart_comms+0x2b0>)
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	8812      	ldrh	r2, [r2, #0]
 8004adc:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <uart_comms+0x2bc>)
 8004ae2:	7812      	ldrb	r2, [r2, #0]
 8004ae4:	709a      	strb	r2, [r3, #2]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8004ae6:	6820      	ldr	r0, [r4, #0]
 8004ae8:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <uart_comms+0x2f0>)
 8004aea:	781d      	ldrb	r5, [r3, #0]
 8004aec:	462a      	mov	r2, r5
 8004aee:	4b1f      	ldr	r3, [pc, #124]	; (8004b6c <uart_comms+0x2f4>)
 8004af0:	6819      	ldr	r1, [r3, #0]
 8004af2:	3003      	adds	r0, #3
 8004af4:	f000 fb52 	bl	800519c <memcpy>
			memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	3503      	adds	r5, #3
 8004afc:	4a0f      	ldr	r2, [pc, #60]	; (8004b3c <uart_comms+0x2c4>)
 8004afe:	8812      	ldrh	r2, [r2, #0]
 8004b00:	535a      	strh	r2, [r3, r5]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8004b02:	6824      	ldr	r4, [r4, #0]
 8004b04:	4620      	mov	r0, r4
 8004b06:	f7fb fb63 	bl	80001d0 <strlen>
 8004b0a:	b282      	uxth	r2, r0
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	480c      	ldr	r0, [pc, #48]	; (8004b40 <uart_comms+0x2c8>)
 8004b10:	f7fe fa85 	bl	800301e <HAL_UART_Transmit_IT>
			break;
 8004b14:	e716      	b.n	8004944 <uart_comms+0xcc>
 8004b16:	bf00      	nop
 8004b18:	20000280 	.word	0x20000280
 8004b1c:	200002a0 	.word	0x200002a0
 8004b20:	200002a8 	.word	0x200002a8
 8004b24:	20000498 	.word	0x20000498
 8004b28:	2000027c 	.word	0x2000027c
 8004b2c:	200002a4 	.word	0x200002a4
 8004b30:	20000494 	.word	0x20000494
 8004b34:	20000004 	.word	0x20000004
 8004b38:	20000018 	.word	0x20000018
 8004b3c:	20000008 	.word	0x20000008
 8004b40:	20000368 	.word	0x20000368
 8004b44:	20000020 	.word	0x20000020
 8004b48:	200002ac 	.word	0x200002ac
 8004b4c:	48000800 	.word	0x48000800
 8004b50:	20000028 	.word	0x20000028
 8004b54:	20000248 	.word	0x20000248
 8004b58:	20000014 	.word	0x20000014
 8004b5c:	20000268 	.word	0x20000268
 8004b60:	20000010 	.word	0x20000010
 8004b64:	20000254 	.word	0x20000254
 8004b68:	2000028c 	.word	0x2000028c
 8004b6c:	20000288 	.word	0x20000288
 8004b70:	20000284 	.word	0x20000284
			memcpy(return_value, uart_command, 2);
 8004b74:	4bb3      	ldr	r3, [pc, #716]	; (8004e44 <uart_comms+0x5cc>)
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	8812      	ldrh	r2, [r2, #0]
 8004b7a:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	49b2      	ldr	r1, [pc, #712]	; (8004e48 <uart_comms+0x5d0>)
 8004b80:	8809      	ldrh	r1, [r1, #0]
 8004b82:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8004b84:	681c      	ldr	r4, [r3, #0]
 8004b86:	4620      	mov	r0, r4
 8004b88:	f7fb fb22 	bl	80001d0 <strlen>
 8004b8c:	b282      	uxth	r2, r0
 8004b8e:	4621      	mov	r1, r4
 8004b90:	48ae      	ldr	r0, [pc, #696]	; (8004e4c <uart_comms+0x5d4>)
 8004b92:	f7fe fa44 	bl	800301e <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004b96:	4cae      	ldr	r4, [pc, #696]	; (8004e50 <uart_comms+0x5d8>)
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	22ca      	movs	r2, #202	; 0xca
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b9e:	2253      	movs	r2, #83	; 0x53
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7fd febd 	bl	8002922 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8004ba8:	49aa      	ldr	r1, [pc, #680]	; (8004e54 <uart_comms+0x5dc>)
 8004baa:	4bab      	ldr	r3, [pc, #684]	; (8004e58 <uart_comms+0x5e0>)
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	f000 fbe9 	bl	8005384 <strtok>
 8004bb2:	4eaa      	ldr	r6, [pc, #680]	; (8004e5c <uart_comms+0x5e4>)
 8004bb4:	6030      	str	r0, [r6, #0]
			time->Hours = strtol(heating_info, NULL,10);
 8004bb6:	4daa      	ldr	r5, [pc, #680]	; (8004e60 <uart_comms+0x5e8>)
 8004bb8:	682f      	ldr	r7, [r5, #0]
 8004bba:	220a      	movs	r2, #10
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	f000 fcb5 	bl	800552c <strtol>
 8004bc2:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 8004bc4:	49a7      	ldr	r1, [pc, #668]	; (8004e64 <uart_comms+0x5ec>)
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f000 fbdc 	bl	8005384 <strtok>
 8004bcc:	6030      	str	r0, [r6, #0]
			time->Minutes = strtol(heating_info, NULL,10);
 8004bce:	682f      	ldr	r7, [r5, #0]
 8004bd0:	220a      	movs	r2, #10
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	f000 fcaa 	bl	800552c <strtol>
 8004bd8:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 8004bda:	49a3      	ldr	r1, [pc, #652]	; (8004e68 <uart_comms+0x5f0>)
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f000 fbd1 	bl	8005384 <strtok>
 8004be2:	6030      	str	r0, [r6, #0]
			time->Seconds = strtol(heating_info, NULL,10);
 8004be4:	682e      	ldr	r6, [r5, #0]
 8004be6:	220a      	movs	r2, #10
 8004be8:	2100      	movs	r1, #0
 8004bea:	f000 fc9f 	bl	800552c <strtol>
 8004bee:	70b0      	strb	r0, [r6, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BCD);
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	6829      	ldr	r1, [r5, #0]
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7fd ff1f 	bl	8002a38 <HAL_RTC_SetTime>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	22ff      	movs	r2, #255	; 0xff
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004c00:	e6a0      	b.n	8004944 <uart_comms+0xcc>
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BCD);
 8004c02:	4e97      	ldr	r6, [pc, #604]	; (8004e60 <uart_comms+0x5e8>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	6831      	ldr	r1, [r6, #0]
 8004c08:	4891      	ldr	r0, [pc, #580]	; (8004e50 <uart_comms+0x5d8>)
 8004c0a:	f7fd ff9d 	bl	8002b48 <HAL_RTC_GetTime>
			memcpy(return_value, uart_command, 2);
 8004c0e:	4c8d      	ldr	r4, [pc, #564]	; (8004e44 <uart_comms+0x5cc>)
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	4a96      	ldr	r2, [pc, #600]	; (8004e6c <uart_comms+0x5f4>)
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	8812      	ldrh	r2, [r2, #0]
 8004c18:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8004e7c <uart_comms+0x604>
 8004c20:	f898 2000 	ldrb.w	r2, [r8]
 8004c24:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 8004c26:	6833      	ldr	r3, [r6, #0]
 8004c28:	4d91      	ldr	r5, [pc, #580]	; (8004e70 <uart_comms+0x5f8>)
 8004c2a:	220a      	movs	r2, #10
 8004c2c:	6829      	ldr	r1, [r5, #0]
 8004c2e:	7818      	ldrb	r0, [r3, #0]
 8004c30:	f000 faaa 	bl	8005188 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8004c34:	6827      	ldr	r7, [r4, #0]
 8004c36:	4638      	mov	r0, r7
 8004c38:	f7fb faca 	bl	80001d0 <strlen>
 8004c3c:	4407      	add	r7, r0
 8004c3e:	f8d5 9000 	ldr.w	r9, [r5]
 8004c42:	4648      	mov	r0, r9
 8004c44:	f7fb fac4 	bl	80001d0 <strlen>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f000 faa5 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004c52:	6827      	ldr	r7, [r4, #0]
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7fb fabb 	bl	80001d0 <strlen>
 8004c5a:	f898 3000 	ldrb.w	r3, [r8]
 8004c5e:	543b      	strb	r3, [r7, r0]
			itoa((time->Minutes),temp_time_var,10  );
 8004c60:	6833      	ldr	r3, [r6, #0]
 8004c62:	220a      	movs	r2, #10
 8004c64:	6829      	ldr	r1, [r5, #0]
 8004c66:	7858      	ldrb	r0, [r3, #1]
 8004c68:	f000 fa8e 	bl	8005188 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8004c6c:	6827      	ldr	r7, [r4, #0]
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f7fb faae 	bl	80001d0 <strlen>
 8004c74:	4407      	add	r7, r0
 8004c76:	f8d5 9000 	ldr.w	r9, [r5]
 8004c7a:	4648      	mov	r0, r9
 8004c7c:	f7fb faa8 	bl	80001d0 <strlen>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4649      	mov	r1, r9
 8004c84:	4638      	mov	r0, r7
 8004c86:	f000 fa89 	bl	800519c <memcpy>
			itoa((time->Seconds),temp_time_var,10  );
 8004c8a:	6833      	ldr	r3, [r6, #0]
 8004c8c:	220a      	movs	r2, #10
 8004c8e:	6829      	ldr	r1, [r5, #0]
 8004c90:	7898      	ldrb	r0, [r3, #2]
 8004c92:	f000 fa79 	bl	8005188 <itoa>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004c96:	6826      	ldr	r6, [r4, #0]
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f7fb fa99 	bl	80001d0 <strlen>
 8004c9e:	f898 3000 	ldrb.w	r3, [r8]
 8004ca2:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8004ca4:	6826      	ldr	r6, [r4, #0]
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f7fb fa92 	bl	80001d0 <strlen>
 8004cac:	4406      	add	r6, r0
 8004cae:	682d      	ldr	r5, [r5, #0]
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7fb fa8d 	bl	80001d0 <strlen>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f000 fa6e 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8004cc0:	6825      	ldr	r5, [r4, #0]
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f7fb fa84 	bl	80001d0 <strlen>
 8004cc8:	4b5f      	ldr	r3, [pc, #380]	; (8004e48 <uart_comms+0x5d0>)
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8004cce:	6824      	ldr	r4, [r4, #0]
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7fb fa7d 	bl	80001d0 <strlen>
 8004cd6:	b282      	uxth	r2, r0
 8004cd8:	4621      	mov	r1, r4
 8004cda:	485c      	ldr	r0, [pc, #368]	; (8004e4c <uart_comms+0x5d4>)
 8004cdc:	f7fe f99f 	bl	800301e <HAL_UART_Transmit_IT>
			break;
 8004ce0:	e630      	b.n	8004944 <uart_comms+0xcc>
			if(auto_heating == 1){
 8004ce2:	4b64      	ldr	r3, [pc, #400]	; (8004e74 <uart_comms+0x5fc>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	f47f ae2c 	bne.w	8004944 <uart_comms+0xcc>
				memcpy(return_value, uart_command, 2);
 8004cec:	4b55      	ldr	r3, [pc, #340]	; (8004e44 <uart_comms+0x5cc>)
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	800a      	strh	r2, [r1, #0]
				memcpy(return_value+2, endSimbol,2 );
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4954      	ldr	r1, [pc, #336]	; (8004e48 <uart_comms+0x5d0>)
 8004cf8:	8809      	ldrh	r1, [r1, #0]
 8004cfa:	8051      	strh	r1, [r2, #2]
				HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8004cfc:	681c      	ldr	r4, [r3, #0]
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f7fb fa66 	bl	80001d0 <strlen>
 8004d04:	b282      	uxth	r2, r0
 8004d06:	4621      	mov	r1, r4
 8004d08:	4850      	ldr	r0, [pc, #320]	; (8004e4c <uart_comms+0x5d4>)
 8004d0a:	f7fe f988 	bl	800301e <HAL_UART_Transmit_IT>
				if(uart_command[3] == '1'){ // first heating schedule
 8004d0e:	4b57      	ldr	r3, [pc, #348]	; (8004e6c <uart_comms+0x5f4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	78db      	ldrb	r3, [r3, #3]
 8004d14:	2b31      	cmp	r3, #49	; 0x31
 8004d16:	d04e      	beq.n	8004db6 <uart_comms+0x53e>
				else if(uart_command[3] == '2'){
 8004d18:	2b32      	cmp	r3, #50	; 0x32
 8004d1a:	f000 80b5 	beq.w	8004e88 <uart_comms+0x610>
				else if(uart_command[3] == '3'){
 8004d1e:	2b33      	cmp	r3, #51	; 0x33
 8004d20:	f47f ae10 	bne.w	8004944 <uart_comms+0xcc>
					memcpy(heat_schedule3, heating_info, strlen((char*)heating_info) );
 8004d24:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004e5c <uart_comms+0x5e4>
 8004d28:	f8d8 5000 	ldr.w	r5, [r8]
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f7fb fa4f 	bl	80001d0 <strlen>
 8004d32:	4c51      	ldr	r4, [pc, #324]	; (8004e78 <uart_comms+0x600>)
 8004d34:	4602      	mov	r2, r0
 8004d36:	4629      	mov	r1, r5
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	f000 fa2f 	bl	800519c <memcpy>
					memcpy(heat_schedule3+strlen((char*)heat_schedule3),comma,1 );
 8004d3e:	6825      	ldr	r5, [r4, #0]
 8004d40:	4628      	mov	r0, r5
 8004d42:	f7fb fa45 	bl	80001d0 <strlen>
 8004d46:	4e4d      	ldr	r6, [pc, #308]	; (8004e7c <uart_comms+0x604>)
 8004d48:	7833      	ldrb	r3, [r6, #0]
 8004d4a:	542b      	strb	r3, [r5, r0]
					heating_info = (strtok(NULL, ","));
 8004d4c:	4945      	ldr	r1, [pc, #276]	; (8004e64 <uart_comms+0x5ec>)
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f000 fb18 	bl	8005384 <strtok>
 8004d54:	4607      	mov	r7, r0
 8004d56:	f8c8 0000 	str.w	r0, [r8]
					memcpy(heat_schedule3+strlen((char*)heat_schedule3), heating_info, strlen((char*)heating_info) );
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f7fb fa37 	bl	80001d0 <strlen>
 8004d62:	4405      	add	r5, r0
 8004d64:	4638      	mov	r0, r7
 8004d66:	f7fb fa33 	bl	80001d0 <strlen>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 fa14 	bl	800519c <memcpy>
					memcpy(heat_schedule3+strlen((char*)heat_schedule3),comma,1 );
 8004d74:	6825      	ldr	r5, [r4, #0]
 8004d76:	4628      	mov	r0, r5
 8004d78:	f7fb fa2a 	bl	80001d0 <strlen>
 8004d7c:	7833      	ldrb	r3, [r6, #0]
 8004d7e:	542b      	strb	r3, [r5, r0]
					heating_info = (strtok(NULL, ",\r\n"));
 8004d80:	4939      	ldr	r1, [pc, #228]	; (8004e68 <uart_comms+0x5f0>)
 8004d82:	2000      	movs	r0, #0
 8004d84:	f000 fafe 	bl	8005384 <strtok>
 8004d88:	4607      	mov	r7, r0
 8004d8a:	f8c8 0000 	str.w	r0, [r8]
					memcpy(heat_schedule3+strlen((char*)heat_schedule3), heating_info, strlen((char*)heating_info) );
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	4628      	mov	r0, r5
 8004d92:	f7fb fa1d 	bl	80001d0 <strlen>
 8004d96:	4405      	add	r5, r0
 8004d98:	4638      	mov	r0, r7
 8004d9a:	f7fb fa19 	bl	80001d0 <strlen>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	4639      	mov	r1, r7
 8004da2:	4628      	mov	r0, r5
 8004da4:	f000 f9fa 	bl	800519c <memcpy>
					memcpy(heat_schedule3+strlen((char*)heat_schedule3),comma,1 );
 8004da8:	6824      	ldr	r4, [r4, #0]
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7fb fa10 	bl	80001d0 <strlen>
 8004db0:	7833      	ldrb	r3, [r6, #0]
 8004db2:	5423      	strb	r3, [r4, r0]
 8004db4:	e5c6      	b.n	8004944 <uart_comms+0xcc>
					heating_info = strtok((char*)uart_command_copy, "$J,1");
 8004db6:	4932      	ldr	r1, [pc, #200]	; (8004e80 <uart_comms+0x608>)
 8004db8:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <uart_comms+0x5e0>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	f000 fae2 	bl	8005384 <strtok>
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	4e26      	ldr	r6, [pc, #152]	; (8004e5c <uart_comms+0x5e4>)
 8004dc4:	6030      	str	r0, [r6, #0]
					memcpy(heat_schedule1, heating_info, strlen((char*)heating_info) );
 8004dc6:	f7fb fa03 	bl	80001d0 <strlen>
 8004dca:	4c2e      	ldr	r4, [pc, #184]	; (8004e84 <uart_comms+0x60c>)
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4629      	mov	r1, r5
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	f000 f9e3 	bl	800519c <memcpy>
					memcpy(heat_schedule1+strlen((char*)heat_schedule1),comma,1 );
 8004dd6:	6825      	ldr	r5, [r4, #0]
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f7fb f9f9 	bl	80001d0 <strlen>
 8004dde:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8004e7c <uart_comms+0x604>
 8004de2:	f898 3000 	ldrb.w	r3, [r8]
 8004de6:	542b      	strb	r3, [r5, r0]
					heating_info = (strtok(NULL, ","));
 8004de8:	491e      	ldr	r1, [pc, #120]	; (8004e64 <uart_comms+0x5ec>)
 8004dea:	2000      	movs	r0, #0
 8004dec:	f000 faca 	bl	8005384 <strtok>
 8004df0:	4607      	mov	r7, r0
 8004df2:	6030      	str	r0, [r6, #0]
					memcpy(heat_schedule1+strlen((char*)heat_schedule1), heating_info, strlen((char*)heating_info) );
 8004df4:	6825      	ldr	r5, [r4, #0]
 8004df6:	4628      	mov	r0, r5
 8004df8:	f7fb f9ea 	bl	80001d0 <strlen>
 8004dfc:	4405      	add	r5, r0
 8004dfe:	4638      	mov	r0, r7
 8004e00:	f7fb f9e6 	bl	80001d0 <strlen>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4639      	mov	r1, r7
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f9c7 	bl	800519c <memcpy>
					memcpy(heat_schedule1+strlen((char*)heat_schedule1),comma,1 );
 8004e0e:	6825      	ldr	r5, [r4, #0]
 8004e10:	4628      	mov	r0, r5
 8004e12:	f7fb f9dd 	bl	80001d0 <strlen>
 8004e16:	f898 3000 	ldrb.w	r3, [r8]
 8004e1a:	542b      	strb	r3, [r5, r0]
					heating_info = (strtok(NULL, ",\r\n"));
 8004e1c:	4912      	ldr	r1, [pc, #72]	; (8004e68 <uart_comms+0x5f0>)
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f000 fab0 	bl	8005384 <strtok>
 8004e24:	4605      	mov	r5, r0
 8004e26:	6030      	str	r0, [r6, #0]
					memcpy(heat_schedule1+strlen((char*)heat_schedule1), heating_info, strlen((char*)heating_info) );
 8004e28:	6824      	ldr	r4, [r4, #0]
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f7fb f9d0 	bl	80001d0 <strlen>
 8004e30:	4404      	add	r4, r0
 8004e32:	4628      	mov	r0, r5
 8004e34:	f7fb f9cc 	bl	80001d0 <strlen>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f000 f9ad 	bl	800519c <memcpy>
 8004e42:	e57f      	b.n	8004944 <uart_comms+0xcc>
 8004e44:	2000027c 	.word	0x2000027c
 8004e48:	20000008 	.word	0x20000008
 8004e4c:	20000368 	.word	0x20000368
 8004e50:	200003d8 	.word	0x200003d8
 8004e54:	08005f3c 	.word	0x08005f3c
 8004e58:	200002a4 	.word	0x200002a4
 8004e5c:	2000026c 	.word	0x2000026c
 8004e60:	20000298 	.word	0x20000298
 8004e64:	08005f40 	.word	0x08005f40
 8004e68:	08005f44 	.word	0x08005f44
 8004e6c:	200002a0 	.word	0x200002a0
 8004e70:	20000290 	.word	0x20000290
 8004e74:	20000248 	.word	0x20000248
 8004e78:	20000264 	.word	0x20000264
 8004e7c:	20000004 	.word	0x20000004
 8004e80:	08005f48 	.word	0x08005f48
 8004e84:	2000025c 	.word	0x2000025c
					memcpy(heat_schedule2, heating_info, strlen((char*)heating_info) );
 8004e88:	4e7c      	ldr	r6, [pc, #496]	; (800507c <uart_comms+0x804>)
 8004e8a:	6835      	ldr	r5, [r6, #0]
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f7fb f99f 	bl	80001d0 <strlen>
 8004e92:	4c7b      	ldr	r4, [pc, #492]	; (8005080 <uart_comms+0x808>)
 8004e94:	4602      	mov	r2, r0
 8004e96:	4629      	mov	r1, r5
 8004e98:	6820      	ldr	r0, [r4, #0]
 8004e9a:	f000 f97f 	bl	800519c <memcpy>
					memcpy(heat_schedule2+strlen((char*)heat_schedule2),comma,1 );
 8004e9e:	6825      	ldr	r5, [r4, #0]
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f7fb f995 	bl	80001d0 <strlen>
 8004ea6:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8005090 <uart_comms+0x818>
 8004eaa:	f898 3000 	ldrb.w	r3, [r8]
 8004eae:	542b      	strb	r3, [r5, r0]
					heating_info = (strtok(NULL, ","));
 8004eb0:	4974      	ldr	r1, [pc, #464]	; (8005084 <uart_comms+0x80c>)
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f000 fa66 	bl	8005384 <strtok>
 8004eb8:	4607      	mov	r7, r0
 8004eba:	6030      	str	r0, [r6, #0]
					memcpy(heat_schedule2+strlen((char*)heat_schedule2), heating_info, strlen((char*)heating_info) );
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f7fb f986 	bl	80001d0 <strlen>
 8004ec4:	4405      	add	r5, r0
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f7fb f982 	bl	80001d0 <strlen>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4639      	mov	r1, r7
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 f963 	bl	800519c <memcpy>
					memcpy(heat_schedule2+strlen((char*)heat_schedule2),comma,1 );
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f7fb f979 	bl	80001d0 <strlen>
 8004ede:	f898 3000 	ldrb.w	r3, [r8]
 8004ee2:	542b      	strb	r3, [r5, r0]
					heating_info = (strtok(NULL, ",\r\n"));
 8004ee4:	4968      	ldr	r1, [pc, #416]	; (8005088 <uart_comms+0x810>)
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f000 fa4c 	bl	8005384 <strtok>
 8004eec:	4605      	mov	r5, r0
 8004eee:	6030      	str	r0, [r6, #0]
					memcpy(heat_schedule2+strlen((char*)heat_schedule2), heating_info, strlen((char*)heating_info) );
 8004ef0:	6824      	ldr	r4, [r4, #0]
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7fb f96c 	bl	80001d0 <strlen>
 8004ef8:	4404      	add	r4, r0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7fb f968 	bl	80001d0 <strlen>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4629      	mov	r1, r5
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 f949 	bl	800519c <memcpy>
 8004f0a:	e51b      	b.n	8004944 <uart_comms+0xcc>
			memcpy(return_value, uart_command, 2);
 8004f0c:	4c5f      	ldr	r4, [pc, #380]	; (800508c <uart_comms+0x814>)
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	8812      	ldrh	r2, [r2, #0]
 8004f12:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	4d5e      	ldr	r5, [pc, #376]	; (8005090 <uart_comms+0x818>)
 8004f18:	782f      	ldrb	r7, [r5, #0]
 8004f1a:	709f      	strb	r7, [r3, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8004f1c:	6826      	ldr	r6, [r4, #0]
 8004f1e:	3603      	adds	r6, #3
 8004f20:	4b5c      	ldr	r3, [pc, #368]	; (8005094 <uart_comms+0x81c>)
 8004f22:	f8d3 8000 	ldr.w	r8, [r3]
 8004f26:	4640      	mov	r0, r8
 8004f28:	f7fb f952 	bl	80001d0 <strlen>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4641      	mov	r1, r8
 8004f30:	4630      	mov	r0, r6
 8004f32:	f000 f933 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004f36:	6826      	ldr	r6, [r4, #0]
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f7fb f949 	bl	80001d0 <strlen>
 8004f3e:	5437      	strb	r7, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8004f40:	6826      	ldr	r6, [r4, #0]
 8004f42:	4630      	mov	r0, r6
 8004f44:	f7fb f944 	bl	80001d0 <strlen>
 8004f48:	4406      	add	r6, r0
 8004f4a:	4b53      	ldr	r3, [pc, #332]	; (8005098 <uart_comms+0x820>)
 8004f4c:	681f      	ldr	r7, [r3, #0]
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f7fb f93e 	bl	80001d0 <strlen>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4639      	mov	r1, r7
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f000 f91f 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004f5e:	6826      	ldr	r6, [r4, #0]
 8004f60:	4630      	mov	r0, r6
 8004f62:	f7fb f935 	bl	80001d0 <strlen>
 8004f66:	782b      	ldrb	r3, [r5, #0]
 8004f68:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 8004f6a:	6826      	ldr	r6, [r4, #0]
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7fb f92f 	bl	80001d0 <strlen>
 8004f72:	4406      	add	r6, r0
 8004f74:	4b49      	ldr	r3, [pc, #292]	; (800509c <uart_comms+0x824>)
 8004f76:	681f      	ldr	r7, [r3, #0]
 8004f78:	4638      	mov	r0, r7
 8004f7a:	f7fb f929 	bl	80001d0 <strlen>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	4639      	mov	r1, r7
 8004f82:	4630      	mov	r0, r6
 8004f84:	f000 f90a 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004f88:	6826      	ldr	r6, [r4, #0]
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f7fb f920 	bl	80001d0 <strlen>
 8004f90:	782b      	ldrb	r3, [r5, #0]
 8004f92:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 8004f94:	6826      	ldr	r6, [r4, #0]
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7fb f91a 	bl	80001d0 <strlen>
 8004f9c:	4406      	add	r6, r0
 8004f9e:	4b40      	ldr	r3, [pc, #256]	; (80050a0 <uart_comms+0x828>)
 8004fa0:	681f      	ldr	r7, [r3, #0]
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f7fb f914 	bl	80001d0 <strlen>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4639      	mov	r1, r7
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 f8f5 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004fb2:	6826      	ldr	r6, [r4, #0]
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7fb f90b 	bl	80001d0 <strlen>
 8004fba:	782b      	ldrb	r3, [r5, #0]
 8004fbc:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8004fbe:	6826      	ldr	r6, [r4, #0]
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f7fb f905 	bl	80001d0 <strlen>
 8004fc6:	4406      	add	r6, r0
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <uart_comms+0x82c>)
 8004fca:	681f      	ldr	r7, [r3, #0]
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f7fb f8ff 	bl	80001d0 <strlen>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f000 f8e0 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004fdc:	6826      	ldr	r6, [r4, #0]
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7fb f8f6 	bl	80001d0 <strlen>
 8004fe4:	782b      	ldrb	r3, [r5, #0]
 8004fe6:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8004fe8:	6826      	ldr	r6, [r4, #0]
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7fb f8f0 	bl	80001d0 <strlen>
 8004ff0:	4406      	add	r6, r0
 8004ff2:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <uart_comms+0x830>)
 8004ff4:	681f      	ldr	r7, [r3, #0]
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	f7fb f8ea 	bl	80001d0 <strlen>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4639      	mov	r1, r7
 8005000:	4630      	mov	r0, r6
 8005002:	f000 f8cb 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005006:	6824      	ldr	r4, [r4, #0]
 8005008:	4620      	mov	r0, r4
 800500a:	f7fb f8e1 	bl	80001d0 <strlen>
 800500e:	782b      	ldrb	r3, [r5, #0]
 8005010:	5423      	strb	r3, [r4, r0]
			if(valve_state == valve_OPEN){
 8005012:	4b26      	ldr	r3, [pc, #152]	; (80050ac <uart_comms+0x834>)
 8005014:	681c      	ldr	r4, [r3, #0]
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <uart_comms+0x838>)
 8005018:	429c      	cmp	r4, r3
 800501a:	d01f      	beq.n	800505c <uart_comms+0x7e4>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <uart_comms+0x814>)
 800501e:	681d      	ldr	r5, [r3, #0]
 8005020:	4628      	mov	r0, r5
 8005022:	f7fb f8d5 	bl	80001d0 <strlen>
 8005026:	4405      	add	r5, r0
 8005028:	4620      	mov	r0, r4
 800502a:	f7fb f8d1 	bl	80001d0 <strlen>
 800502e:	4602      	mov	r2, r0
 8005030:	4621      	mov	r1, r4
 8005032:	4628      	mov	r0, r5
 8005034:	f000 f8b2 	bl	800519c <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8005038:	4c14      	ldr	r4, [pc, #80]	; (800508c <uart_comms+0x814>)
 800503a:	6825      	ldr	r5, [r4, #0]
 800503c:	4628      	mov	r0, r5
 800503e:	f7fb f8c7 	bl	80001d0 <strlen>
 8005042:	4b1c      	ldr	r3, [pc, #112]	; (80050b4 <uart_comms+0x83c>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005048:	6824      	ldr	r4, [r4, #0]
 800504a:	4620      	mov	r0, r4
 800504c:	f7fb f8c0 	bl	80001d0 <strlen>
 8005050:	b282      	uxth	r2, r0
 8005052:	4621      	mov	r1, r4
 8005054:	4818      	ldr	r0, [pc, #96]	; (80050b8 <uart_comms+0x840>)
 8005056:	f7fd ffe2 	bl	800301e <HAL_UART_Transmit_IT>
			break;
 800505a:	e473      	b.n	8004944 <uart_comms+0xcc>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <uart_comms+0x814>)
 800505e:	681d      	ldr	r5, [r3, #0]
 8005060:	4628      	mov	r0, r5
 8005062:	f7fb f8b5 	bl	80001d0 <strlen>
 8005066:	4405      	add	r5, r0
 8005068:	4620      	mov	r0, r4
 800506a:	f7fb f8b1 	bl	80001d0 <strlen>
 800506e:	1e42      	subs	r2, r0, #1
 8005070:	4621      	mov	r1, r4
 8005072:	4628      	mov	r0, r5
 8005074:	f000 f892 	bl	800519c <memcpy>
 8005078:	e7de      	b.n	8005038 <uart_comms+0x7c0>
 800507a:	bf00      	nop
 800507c:	2000026c 	.word	0x2000026c
 8005080:	20000260 	.word	0x20000260
 8005084:	08005f40 	.word	0x08005f40
 8005088:	08005f44 	.word	0x08005f44
 800508c:	2000027c 	.word	0x2000027c
 8005090:	20000004 	.word	0x20000004
 8005094:	20000250 	.word	0x20000250
 8005098:	200002b4 	.word	0x200002b4
 800509c:	20000244 	.word	0x20000244
 80050a0:	20000258 	.word	0x20000258
 80050a4:	2000029c 	.word	0x2000029c
 80050a8:	20000268 	.word	0x20000268
 80050ac:	200002ac 	.word	0x200002ac
 80050b0:	20000028 	.word	0x20000028
 80050b4:	20000008 	.word	0x20000008
 80050b8:	20000368 	.word	0x20000368

080050bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80050bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80050c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80050c2:	e003      	b.n	80050cc <LoopCopyDataInit>

080050c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80050c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80050c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80050ca:	3104      	adds	r1, #4

080050cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80050cc:	480b      	ldr	r0, [pc, #44]	; (80050fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <LoopForever+0xe>)
	adds	r2, r0, r1
 80050d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80050d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80050d4:	d3f6      	bcc.n	80050c4 <CopyDataInit>
	ldr	r2, =_sbss
 80050d6:	4a0b      	ldr	r2, [pc, #44]	; (8005104 <LoopForever+0x12>)
	b	LoopFillZerobss
 80050d8:	e002      	b.n	80050e0 <LoopFillZerobss>

080050da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80050da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80050dc:	f842 3b04 	str.w	r3, [r2], #4

080050e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80050e0:	4b09      	ldr	r3, [pc, #36]	; (8005108 <LoopForever+0x16>)
	cmp	r2, r3
 80050e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80050e4:	d3f9      	bcc.n	80050da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80050e6:	f7ff fb93 	bl	8004810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050ea:	f000 f811 	bl	8005110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050ee:	f7fe ff6d 	bl	8003fcc <main>

080050f2 <LoopForever>:

LoopForever:
    b LoopForever
 80050f2:	e7fe      	b.n	80050f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80050f4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80050f8:	080060c8 	.word	0x080060c8
	ldr	r0, =_sdata
 80050fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005100:	20000200 	.word	0x20000200
	ldr	r2, =_sbss
 8005104:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 8005108:	200004b0 	.word	0x200004b0

0800510c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800510c:	e7fe      	b.n	800510c <ADC1_2_IRQHandler>
	...

08005110 <__libc_init_array>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	4e0d      	ldr	r6, [pc, #52]	; (8005148 <__libc_init_array+0x38>)
 8005114:	4c0d      	ldr	r4, [pc, #52]	; (800514c <__libc_init_array+0x3c>)
 8005116:	1ba4      	subs	r4, r4, r6
 8005118:	10a4      	asrs	r4, r4, #2
 800511a:	2500      	movs	r5, #0
 800511c:	42a5      	cmp	r5, r4
 800511e:	d109      	bne.n	8005134 <__libc_init_array+0x24>
 8005120:	4e0b      	ldr	r6, [pc, #44]	; (8005150 <__libc_init_array+0x40>)
 8005122:	4c0c      	ldr	r4, [pc, #48]	; (8005154 <__libc_init_array+0x44>)
 8005124:	f000 feca 	bl	8005ebc <_init>
 8005128:	1ba4      	subs	r4, r4, r6
 800512a:	10a4      	asrs	r4, r4, #2
 800512c:	2500      	movs	r5, #0
 800512e:	42a5      	cmp	r5, r4
 8005130:	d105      	bne.n	800513e <__libc_init_array+0x2e>
 8005132:	bd70      	pop	{r4, r5, r6, pc}
 8005134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005138:	4798      	blx	r3
 800513a:	3501      	adds	r5, #1
 800513c:	e7ee      	b.n	800511c <__libc_init_array+0xc>
 800513e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005142:	4798      	blx	r3
 8005144:	3501      	adds	r5, #1
 8005146:	e7f2      	b.n	800512e <__libc_init_array+0x1e>
 8005148:	080060c0 	.word	0x080060c0
 800514c:	080060c0 	.word	0x080060c0
 8005150:	080060c0 	.word	0x080060c0
 8005154:	080060c4 	.word	0x080060c4

08005158 <__itoa>:
 8005158:	1e93      	subs	r3, r2, #2
 800515a:	2b22      	cmp	r3, #34	; 0x22
 800515c:	b510      	push	{r4, lr}
 800515e:	460c      	mov	r4, r1
 8005160:	d904      	bls.n	800516c <__itoa+0x14>
 8005162:	2300      	movs	r3, #0
 8005164:	700b      	strb	r3, [r1, #0]
 8005166:	461c      	mov	r4, r3
 8005168:	4620      	mov	r0, r4
 800516a:	bd10      	pop	{r4, pc}
 800516c:	2a0a      	cmp	r2, #10
 800516e:	d109      	bne.n	8005184 <__itoa+0x2c>
 8005170:	2800      	cmp	r0, #0
 8005172:	da07      	bge.n	8005184 <__itoa+0x2c>
 8005174:	232d      	movs	r3, #45	; 0x2d
 8005176:	700b      	strb	r3, [r1, #0]
 8005178:	4240      	negs	r0, r0
 800517a:	2101      	movs	r1, #1
 800517c:	4421      	add	r1, r4
 800517e:	f000 f9eb 	bl	8005558 <__utoa>
 8005182:	e7f1      	b.n	8005168 <__itoa+0x10>
 8005184:	2100      	movs	r1, #0
 8005186:	e7f9      	b.n	800517c <__itoa+0x24>

08005188 <itoa>:
 8005188:	f7ff bfe6 	b.w	8005158 <__itoa>

0800518c <malloc>:
 800518c:	4b02      	ldr	r3, [pc, #8]	; (8005198 <malloc+0xc>)
 800518e:	4601      	mov	r1, r0
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	f000 b865 	b.w	8005260 <_malloc_r>
 8005196:	bf00      	nop
 8005198:	2000002c 	.word	0x2000002c

0800519c <memcpy>:
 800519c:	b510      	push	{r4, lr}
 800519e:	1e43      	subs	r3, r0, #1
 80051a0:	440a      	add	r2, r1
 80051a2:	4291      	cmp	r1, r2
 80051a4:	d100      	bne.n	80051a8 <memcpy+0xc>
 80051a6:	bd10      	pop	{r4, pc}
 80051a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051b0:	e7f7      	b.n	80051a2 <memcpy+0x6>

080051b2 <memset>:
 80051b2:	4402      	add	r2, r0
 80051b4:	4603      	mov	r3, r0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d100      	bne.n	80051bc <memset+0xa>
 80051ba:	4770      	bx	lr
 80051bc:	f803 1b01 	strb.w	r1, [r3], #1
 80051c0:	e7f9      	b.n	80051b6 <memset+0x4>
	...

080051c4 <_free_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4605      	mov	r5, r0
 80051c8:	2900      	cmp	r1, #0
 80051ca:	d045      	beq.n	8005258 <_free_r+0x94>
 80051cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d0:	1f0c      	subs	r4, r1, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bfb8      	it	lt
 80051d6:	18e4      	addlt	r4, r4, r3
 80051d8:	f000 fa13 	bl	8005602 <__malloc_lock>
 80051dc:	4a1f      	ldr	r2, [pc, #124]	; (800525c <_free_r+0x98>)
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	4610      	mov	r0, r2
 80051e2:	b933      	cbnz	r3, 80051f2 <_free_r+0x2e>
 80051e4:	6063      	str	r3, [r4, #4]
 80051e6:	6014      	str	r4, [r2, #0]
 80051e8:	4628      	mov	r0, r5
 80051ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ee:	f000 ba09 	b.w	8005604 <__malloc_unlock>
 80051f2:	42a3      	cmp	r3, r4
 80051f4:	d90c      	bls.n	8005210 <_free_r+0x4c>
 80051f6:	6821      	ldr	r1, [r4, #0]
 80051f8:	1862      	adds	r2, r4, r1
 80051fa:	4293      	cmp	r3, r2
 80051fc:	bf04      	itt	eq
 80051fe:	681a      	ldreq	r2, [r3, #0]
 8005200:	685b      	ldreq	r3, [r3, #4]
 8005202:	6063      	str	r3, [r4, #4]
 8005204:	bf04      	itt	eq
 8005206:	1852      	addeq	r2, r2, r1
 8005208:	6022      	streq	r2, [r4, #0]
 800520a:	6004      	str	r4, [r0, #0]
 800520c:	e7ec      	b.n	80051e8 <_free_r+0x24>
 800520e:	4613      	mov	r3, r2
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	b10a      	cbz	r2, 8005218 <_free_r+0x54>
 8005214:	42a2      	cmp	r2, r4
 8005216:	d9fa      	bls.n	800520e <_free_r+0x4a>
 8005218:	6819      	ldr	r1, [r3, #0]
 800521a:	1858      	adds	r0, r3, r1
 800521c:	42a0      	cmp	r0, r4
 800521e:	d10b      	bne.n	8005238 <_free_r+0x74>
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	4401      	add	r1, r0
 8005224:	1858      	adds	r0, r3, r1
 8005226:	4282      	cmp	r2, r0
 8005228:	6019      	str	r1, [r3, #0]
 800522a:	d1dd      	bne.n	80051e8 <_free_r+0x24>
 800522c:	6810      	ldr	r0, [r2, #0]
 800522e:	6852      	ldr	r2, [r2, #4]
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	4401      	add	r1, r0
 8005234:	6019      	str	r1, [r3, #0]
 8005236:	e7d7      	b.n	80051e8 <_free_r+0x24>
 8005238:	d902      	bls.n	8005240 <_free_r+0x7c>
 800523a:	230c      	movs	r3, #12
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	e7d3      	b.n	80051e8 <_free_r+0x24>
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	1821      	adds	r1, r4, r0
 8005244:	428a      	cmp	r2, r1
 8005246:	bf04      	itt	eq
 8005248:	6811      	ldreq	r1, [r2, #0]
 800524a:	6852      	ldreq	r2, [r2, #4]
 800524c:	6062      	str	r2, [r4, #4]
 800524e:	bf04      	itt	eq
 8005250:	1809      	addeq	r1, r1, r0
 8005252:	6021      	streq	r1, [r4, #0]
 8005254:	605c      	str	r4, [r3, #4]
 8005256:	e7c7      	b.n	80051e8 <_free_r+0x24>
 8005258:	bd38      	pop	{r3, r4, r5, pc}
 800525a:	bf00      	nop
 800525c:	200002bc 	.word	0x200002bc

08005260 <_malloc_r>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	1ccd      	adds	r5, r1, #3
 8005264:	f025 0503 	bic.w	r5, r5, #3
 8005268:	3508      	adds	r5, #8
 800526a:	2d0c      	cmp	r5, #12
 800526c:	bf38      	it	cc
 800526e:	250c      	movcc	r5, #12
 8005270:	2d00      	cmp	r5, #0
 8005272:	4606      	mov	r6, r0
 8005274:	db01      	blt.n	800527a <_malloc_r+0x1a>
 8005276:	42a9      	cmp	r1, r5
 8005278:	d903      	bls.n	8005282 <_malloc_r+0x22>
 800527a:	230c      	movs	r3, #12
 800527c:	6033      	str	r3, [r6, #0]
 800527e:	2000      	movs	r0, #0
 8005280:	bd70      	pop	{r4, r5, r6, pc}
 8005282:	f000 f9be 	bl	8005602 <__malloc_lock>
 8005286:	4a23      	ldr	r2, [pc, #140]	; (8005314 <_malloc_r+0xb4>)
 8005288:	6814      	ldr	r4, [r2, #0]
 800528a:	4621      	mov	r1, r4
 800528c:	b991      	cbnz	r1, 80052b4 <_malloc_r+0x54>
 800528e:	4c22      	ldr	r4, [pc, #136]	; (8005318 <_malloc_r+0xb8>)
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	b91b      	cbnz	r3, 800529c <_malloc_r+0x3c>
 8005294:	4630      	mov	r0, r6
 8005296:	f000 f841 	bl	800531c <_sbrk_r>
 800529a:	6020      	str	r0, [r4, #0]
 800529c:	4629      	mov	r1, r5
 800529e:	4630      	mov	r0, r6
 80052a0:	f000 f83c 	bl	800531c <_sbrk_r>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d126      	bne.n	80052f6 <_malloc_r+0x96>
 80052a8:	230c      	movs	r3, #12
 80052aa:	6033      	str	r3, [r6, #0]
 80052ac:	4630      	mov	r0, r6
 80052ae:	f000 f9a9 	bl	8005604 <__malloc_unlock>
 80052b2:	e7e4      	b.n	800527e <_malloc_r+0x1e>
 80052b4:	680b      	ldr	r3, [r1, #0]
 80052b6:	1b5b      	subs	r3, r3, r5
 80052b8:	d41a      	bmi.n	80052f0 <_malloc_r+0x90>
 80052ba:	2b0b      	cmp	r3, #11
 80052bc:	d90f      	bls.n	80052de <_malloc_r+0x7e>
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	50cd      	str	r5, [r1, r3]
 80052c2:	18cc      	adds	r4, r1, r3
 80052c4:	4630      	mov	r0, r6
 80052c6:	f000 f99d 	bl	8005604 <__malloc_unlock>
 80052ca:	f104 000b 	add.w	r0, r4, #11
 80052ce:	1d23      	adds	r3, r4, #4
 80052d0:	f020 0007 	bic.w	r0, r0, #7
 80052d4:	1ac3      	subs	r3, r0, r3
 80052d6:	d01b      	beq.n	8005310 <_malloc_r+0xb0>
 80052d8:	425a      	negs	r2, r3
 80052da:	50e2      	str	r2, [r4, r3]
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
 80052de:	428c      	cmp	r4, r1
 80052e0:	bf0d      	iteet	eq
 80052e2:	6863      	ldreq	r3, [r4, #4]
 80052e4:	684b      	ldrne	r3, [r1, #4]
 80052e6:	6063      	strne	r3, [r4, #4]
 80052e8:	6013      	streq	r3, [r2, #0]
 80052ea:	bf18      	it	ne
 80052ec:	460c      	movne	r4, r1
 80052ee:	e7e9      	b.n	80052c4 <_malloc_r+0x64>
 80052f0:	460c      	mov	r4, r1
 80052f2:	6849      	ldr	r1, [r1, #4]
 80052f4:	e7ca      	b.n	800528c <_malloc_r+0x2c>
 80052f6:	1cc4      	adds	r4, r0, #3
 80052f8:	f024 0403 	bic.w	r4, r4, #3
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d005      	beq.n	800530c <_malloc_r+0xac>
 8005300:	1a21      	subs	r1, r4, r0
 8005302:	4630      	mov	r0, r6
 8005304:	f000 f80a 	bl	800531c <_sbrk_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d0cd      	beq.n	80052a8 <_malloc_r+0x48>
 800530c:	6025      	str	r5, [r4, #0]
 800530e:	e7d9      	b.n	80052c4 <_malloc_r+0x64>
 8005310:	bd70      	pop	{r4, r5, r6, pc}
 8005312:	bf00      	nop
 8005314:	200002bc 	.word	0x200002bc
 8005318:	200002c0 	.word	0x200002c0

0800531c <_sbrk_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4c06      	ldr	r4, [pc, #24]	; (8005338 <_sbrk_r+0x1c>)
 8005320:	2300      	movs	r3, #0
 8005322:	4605      	mov	r5, r0
 8005324:	4608      	mov	r0, r1
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	f000 fdba 	bl	8005ea0 <_sbrk>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_sbrk_r+0x1a>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	b103      	cbz	r3, 8005336 <_sbrk_r+0x1a>
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200004ac 	.word	0x200004ac

0800533c <siprintf>:
 800533c:	b40e      	push	{r1, r2, r3}
 800533e:	b500      	push	{lr}
 8005340:	b09c      	sub	sp, #112	; 0x70
 8005342:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005346:	ab1d      	add	r3, sp, #116	; 0x74
 8005348:	f8ad 1014 	strh.w	r1, [sp, #20]
 800534c:	9002      	str	r0, [sp, #8]
 800534e:	9006      	str	r0, [sp, #24]
 8005350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005354:	480a      	ldr	r0, [pc, #40]	; (8005380 <siprintf+0x44>)
 8005356:	9104      	str	r1, [sp, #16]
 8005358:	9107      	str	r1, [sp, #28]
 800535a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800535e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005362:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005366:	6800      	ldr	r0, [r0, #0]
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	a902      	add	r1, sp, #8
 800536c:	f000 f9a6 	bl	80056bc <_svfiprintf_r>
 8005370:	9b02      	ldr	r3, [sp, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	b01c      	add	sp, #112	; 0x70
 8005378:	f85d eb04 	ldr.w	lr, [sp], #4
 800537c:	b003      	add	sp, #12
 800537e:	4770      	bx	lr
 8005380:	2000002c 	.word	0x2000002c

08005384 <strtok>:
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <strtok+0x50>)
 8005386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800538a:	681d      	ldr	r5, [r3, #0]
 800538c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800538e:	4606      	mov	r6, r0
 8005390:	460f      	mov	r7, r1
 8005392:	b9b4      	cbnz	r4, 80053c2 <strtok+0x3e>
 8005394:	2050      	movs	r0, #80	; 0x50
 8005396:	f7ff fef9 	bl	800518c <malloc>
 800539a:	65a8      	str	r0, [r5, #88]	; 0x58
 800539c:	6004      	str	r4, [r0, #0]
 800539e:	6044      	str	r4, [r0, #4]
 80053a0:	6084      	str	r4, [r0, #8]
 80053a2:	60c4      	str	r4, [r0, #12]
 80053a4:	6104      	str	r4, [r0, #16]
 80053a6:	6144      	str	r4, [r0, #20]
 80053a8:	6184      	str	r4, [r0, #24]
 80053aa:	6284      	str	r4, [r0, #40]	; 0x28
 80053ac:	62c4      	str	r4, [r0, #44]	; 0x2c
 80053ae:	6304      	str	r4, [r0, #48]	; 0x30
 80053b0:	6344      	str	r4, [r0, #52]	; 0x34
 80053b2:	6384      	str	r4, [r0, #56]	; 0x38
 80053b4:	63c4      	str	r4, [r0, #60]	; 0x3c
 80053b6:	6404      	str	r4, [r0, #64]	; 0x40
 80053b8:	6444      	str	r4, [r0, #68]	; 0x44
 80053ba:	6484      	str	r4, [r0, #72]	; 0x48
 80053bc:	64c4      	str	r4, [r0, #76]	; 0x4c
 80053be:	7704      	strb	r4, [r0, #28]
 80053c0:	6244      	str	r4, [r0, #36]	; 0x24
 80053c2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80053c4:	4639      	mov	r1, r7
 80053c6:	4630      	mov	r0, r6
 80053c8:	2301      	movs	r3, #1
 80053ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ce:	f000 b803 	b.w	80053d8 <__strtok_r>
 80053d2:	bf00      	nop
 80053d4:	2000002c 	.word	0x2000002c

080053d8 <__strtok_r>:
 80053d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053da:	b918      	cbnz	r0, 80053e4 <__strtok_r+0xc>
 80053dc:	6810      	ldr	r0, [r2, #0]
 80053de:	b908      	cbnz	r0, 80053e4 <__strtok_r+0xc>
 80053e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e2:	4620      	mov	r0, r4
 80053e4:	4604      	mov	r4, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80053ec:	f817 6b01 	ldrb.w	r6, [r7], #1
 80053f0:	b91e      	cbnz	r6, 80053fa <__strtok_r+0x22>
 80053f2:	b965      	cbnz	r5, 800540e <__strtok_r+0x36>
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	4628      	mov	r0, r5
 80053f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053fa:	42b5      	cmp	r5, r6
 80053fc:	d1f6      	bne.n	80053ec <__strtok_r+0x14>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1ef      	bne.n	80053e2 <__strtok_r+0xa>
 8005402:	6014      	str	r4, [r2, #0]
 8005404:	7003      	strb	r3, [r0, #0]
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005408:	461c      	mov	r4, r3
 800540a:	e00c      	b.n	8005426 <__strtok_r+0x4e>
 800540c:	b915      	cbnz	r5, 8005414 <__strtok_r+0x3c>
 800540e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005412:	460e      	mov	r6, r1
 8005414:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005418:	42ab      	cmp	r3, r5
 800541a:	d1f7      	bne.n	800540c <__strtok_r+0x34>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f3      	beq.n	8005408 <__strtok_r+0x30>
 8005420:	2300      	movs	r3, #0
 8005422:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005426:	6014      	str	r4, [r2, #0]
 8005428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800542a <_strtol_l.isra.0>:
 800542a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542e:	4680      	mov	r8, r0
 8005430:	4689      	mov	r9, r1
 8005432:	4692      	mov	sl, r2
 8005434:	461f      	mov	r7, r3
 8005436:	468b      	mov	fp, r1
 8005438:	465d      	mov	r5, fp
 800543a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800543c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005440:	f000 f8ca 	bl	80055d8 <__locale_ctype_ptr_l>
 8005444:	4420      	add	r0, r4
 8005446:	7846      	ldrb	r6, [r0, #1]
 8005448:	f016 0608 	ands.w	r6, r6, #8
 800544c:	d10b      	bne.n	8005466 <_strtol_l.isra.0+0x3c>
 800544e:	2c2d      	cmp	r4, #45	; 0x2d
 8005450:	d10b      	bne.n	800546a <_strtol_l.isra.0+0x40>
 8005452:	782c      	ldrb	r4, [r5, #0]
 8005454:	2601      	movs	r6, #1
 8005456:	f10b 0502 	add.w	r5, fp, #2
 800545a:	b167      	cbz	r7, 8005476 <_strtol_l.isra.0+0x4c>
 800545c:	2f10      	cmp	r7, #16
 800545e:	d114      	bne.n	800548a <_strtol_l.isra.0+0x60>
 8005460:	2c30      	cmp	r4, #48	; 0x30
 8005462:	d00a      	beq.n	800547a <_strtol_l.isra.0+0x50>
 8005464:	e011      	b.n	800548a <_strtol_l.isra.0+0x60>
 8005466:	46ab      	mov	fp, r5
 8005468:	e7e6      	b.n	8005438 <_strtol_l.isra.0+0xe>
 800546a:	2c2b      	cmp	r4, #43	; 0x2b
 800546c:	bf04      	itt	eq
 800546e:	782c      	ldrbeq	r4, [r5, #0]
 8005470:	f10b 0502 	addeq.w	r5, fp, #2
 8005474:	e7f1      	b.n	800545a <_strtol_l.isra.0+0x30>
 8005476:	2c30      	cmp	r4, #48	; 0x30
 8005478:	d127      	bne.n	80054ca <_strtol_l.isra.0+0xa0>
 800547a:	782b      	ldrb	r3, [r5, #0]
 800547c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005480:	2b58      	cmp	r3, #88	; 0x58
 8005482:	d14b      	bne.n	800551c <_strtol_l.isra.0+0xf2>
 8005484:	786c      	ldrb	r4, [r5, #1]
 8005486:	2710      	movs	r7, #16
 8005488:	3502      	adds	r5, #2
 800548a:	2e00      	cmp	r6, #0
 800548c:	bf0c      	ite	eq
 800548e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005492:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005496:	2200      	movs	r2, #0
 8005498:	fbb1 fef7 	udiv	lr, r1, r7
 800549c:	4610      	mov	r0, r2
 800549e:	fb07 1c1e 	mls	ip, r7, lr, r1
 80054a2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	d811      	bhi.n	80054ce <_strtol_l.isra.0+0xa4>
 80054aa:	461c      	mov	r4, r3
 80054ac:	42a7      	cmp	r7, r4
 80054ae:	dd1d      	ble.n	80054ec <_strtol_l.isra.0+0xc2>
 80054b0:	1c53      	adds	r3, r2, #1
 80054b2:	d007      	beq.n	80054c4 <_strtol_l.isra.0+0x9a>
 80054b4:	4586      	cmp	lr, r0
 80054b6:	d316      	bcc.n	80054e6 <_strtol_l.isra.0+0xbc>
 80054b8:	d101      	bne.n	80054be <_strtol_l.isra.0+0x94>
 80054ba:	45a4      	cmp	ip, r4
 80054bc:	db13      	blt.n	80054e6 <_strtol_l.isra.0+0xbc>
 80054be:	fb00 4007 	mla	r0, r0, r7, r4
 80054c2:	2201      	movs	r2, #1
 80054c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054c8:	e7eb      	b.n	80054a2 <_strtol_l.isra.0+0x78>
 80054ca:	270a      	movs	r7, #10
 80054cc:	e7dd      	b.n	800548a <_strtol_l.isra.0+0x60>
 80054ce:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80054d2:	2b19      	cmp	r3, #25
 80054d4:	d801      	bhi.n	80054da <_strtol_l.isra.0+0xb0>
 80054d6:	3c37      	subs	r4, #55	; 0x37
 80054d8:	e7e8      	b.n	80054ac <_strtol_l.isra.0+0x82>
 80054da:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80054de:	2b19      	cmp	r3, #25
 80054e0:	d804      	bhi.n	80054ec <_strtol_l.isra.0+0xc2>
 80054e2:	3c57      	subs	r4, #87	; 0x57
 80054e4:	e7e2      	b.n	80054ac <_strtol_l.isra.0+0x82>
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ea:	e7eb      	b.n	80054c4 <_strtol_l.isra.0+0x9a>
 80054ec:	1c53      	adds	r3, r2, #1
 80054ee:	d108      	bne.n	8005502 <_strtol_l.isra.0+0xd8>
 80054f0:	2322      	movs	r3, #34	; 0x22
 80054f2:	f8c8 3000 	str.w	r3, [r8]
 80054f6:	4608      	mov	r0, r1
 80054f8:	f1ba 0f00 	cmp.w	sl, #0
 80054fc:	d107      	bne.n	800550e <_strtol_l.isra.0+0xe4>
 80054fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005502:	b106      	cbz	r6, 8005506 <_strtol_l.isra.0+0xdc>
 8005504:	4240      	negs	r0, r0
 8005506:	f1ba 0f00 	cmp.w	sl, #0
 800550a:	d00c      	beq.n	8005526 <_strtol_l.isra.0+0xfc>
 800550c:	b122      	cbz	r2, 8005518 <_strtol_l.isra.0+0xee>
 800550e:	3d01      	subs	r5, #1
 8005510:	f8ca 5000 	str.w	r5, [sl]
 8005514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	464d      	mov	r5, r9
 800551a:	e7f9      	b.n	8005510 <_strtol_l.isra.0+0xe6>
 800551c:	2430      	movs	r4, #48	; 0x30
 800551e:	2f00      	cmp	r7, #0
 8005520:	d1b3      	bne.n	800548a <_strtol_l.isra.0+0x60>
 8005522:	2708      	movs	r7, #8
 8005524:	e7b1      	b.n	800548a <_strtol_l.isra.0+0x60>
 8005526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800552c <strtol>:
 800552c:	4b08      	ldr	r3, [pc, #32]	; (8005550 <strtol+0x24>)
 800552e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005530:	681c      	ldr	r4, [r3, #0]
 8005532:	4d08      	ldr	r5, [pc, #32]	; (8005554 <strtol+0x28>)
 8005534:	6a23      	ldr	r3, [r4, #32]
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf08      	it	eq
 800553a:	462b      	moveq	r3, r5
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4613      	mov	r3, r2
 8005540:	460a      	mov	r2, r1
 8005542:	4601      	mov	r1, r0
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff ff70 	bl	800542a <_strtol_l.isra.0>
 800554a:	b003      	add	sp, #12
 800554c:	bd30      	pop	{r4, r5, pc}
 800554e:	bf00      	nop
 8005550:	2000002c 	.word	0x2000002c
 8005554:	20000090 	.word	0x20000090

08005558 <__utoa>:
 8005558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555a:	4c1e      	ldr	r4, [pc, #120]	; (80055d4 <__utoa+0x7c>)
 800555c:	b08b      	sub	sp, #44	; 0x2c
 800555e:	4603      	mov	r3, r0
 8005560:	460f      	mov	r7, r1
 8005562:	466d      	mov	r5, sp
 8005564:	f104 0e20 	add.w	lr, r4, #32
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	6861      	ldr	r1, [r4, #4]
 800556c:	462e      	mov	r6, r5
 800556e:	c603      	stmia	r6!, {r0, r1}
 8005570:	3408      	adds	r4, #8
 8005572:	4574      	cmp	r4, lr
 8005574:	4635      	mov	r5, r6
 8005576:	d1f7      	bne.n	8005568 <__utoa+0x10>
 8005578:	7921      	ldrb	r1, [r4, #4]
 800557a:	7131      	strb	r1, [r6, #4]
 800557c:	1e91      	subs	r1, r2, #2
 800557e:	6820      	ldr	r0, [r4, #0]
 8005580:	6030      	str	r0, [r6, #0]
 8005582:	2922      	cmp	r1, #34	; 0x22
 8005584:	f04f 0100 	mov.w	r1, #0
 8005588:	d904      	bls.n	8005594 <__utoa+0x3c>
 800558a:	7039      	strb	r1, [r7, #0]
 800558c:	460f      	mov	r7, r1
 800558e:	4638      	mov	r0, r7
 8005590:	b00b      	add	sp, #44	; 0x2c
 8005592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005594:	1e78      	subs	r0, r7, #1
 8005596:	4606      	mov	r6, r0
 8005598:	fbb3 f5f2 	udiv	r5, r3, r2
 800559c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80055a0:	fb02 3315 	mls	r3, r2, r5, r3
 80055a4:	4473      	add	r3, lr
 80055a6:	1c4c      	adds	r4, r1, #1
 80055a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80055ac:	f806 3f01 	strb.w	r3, [r6, #1]!
 80055b0:	462b      	mov	r3, r5
 80055b2:	b965      	cbnz	r5, 80055ce <__utoa+0x76>
 80055b4:	553d      	strb	r5, [r7, r4]
 80055b6:	187a      	adds	r2, r7, r1
 80055b8:	1acc      	subs	r4, r1, r3
 80055ba:	42a3      	cmp	r3, r4
 80055bc:	dae7      	bge.n	800558e <__utoa+0x36>
 80055be:	7844      	ldrb	r4, [r0, #1]
 80055c0:	7815      	ldrb	r5, [r2, #0]
 80055c2:	f800 5f01 	strb.w	r5, [r0, #1]!
 80055c6:	3301      	adds	r3, #1
 80055c8:	f802 4901 	strb.w	r4, [r2], #-1
 80055cc:	e7f4      	b.n	80055b8 <__utoa+0x60>
 80055ce:	4621      	mov	r1, r4
 80055d0:	e7e2      	b.n	8005598 <__utoa+0x40>
 80055d2:	bf00      	nop
 80055d4:	08005f50 	.word	0x08005f50

080055d8 <__locale_ctype_ptr_l>:
 80055d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80055dc:	4770      	bx	lr

080055de <__ascii_mbtowc>:
 80055de:	b082      	sub	sp, #8
 80055e0:	b901      	cbnz	r1, 80055e4 <__ascii_mbtowc+0x6>
 80055e2:	a901      	add	r1, sp, #4
 80055e4:	b142      	cbz	r2, 80055f8 <__ascii_mbtowc+0x1a>
 80055e6:	b14b      	cbz	r3, 80055fc <__ascii_mbtowc+0x1e>
 80055e8:	7813      	ldrb	r3, [r2, #0]
 80055ea:	600b      	str	r3, [r1, #0]
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	1c10      	adds	r0, r2, #0
 80055f0:	bf18      	it	ne
 80055f2:	2001      	movne	r0, #1
 80055f4:	b002      	add	sp, #8
 80055f6:	4770      	bx	lr
 80055f8:	4610      	mov	r0, r2
 80055fa:	e7fb      	b.n	80055f4 <__ascii_mbtowc+0x16>
 80055fc:	f06f 0001 	mvn.w	r0, #1
 8005600:	e7f8      	b.n	80055f4 <__ascii_mbtowc+0x16>

08005602 <__malloc_lock>:
 8005602:	4770      	bx	lr

08005604 <__malloc_unlock>:
 8005604:	4770      	bx	lr

08005606 <__ssputs_r>:
 8005606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560a:	688e      	ldr	r6, [r1, #8]
 800560c:	429e      	cmp	r6, r3
 800560e:	4682      	mov	sl, r0
 8005610:	460c      	mov	r4, r1
 8005612:	4691      	mov	r9, r2
 8005614:	4698      	mov	r8, r3
 8005616:	d835      	bhi.n	8005684 <__ssputs_r+0x7e>
 8005618:	898a      	ldrh	r2, [r1, #12]
 800561a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800561e:	d031      	beq.n	8005684 <__ssputs_r+0x7e>
 8005620:	6825      	ldr	r5, [r4, #0]
 8005622:	6909      	ldr	r1, [r1, #16]
 8005624:	1a6f      	subs	r7, r5, r1
 8005626:	6965      	ldr	r5, [r4, #20]
 8005628:	2302      	movs	r3, #2
 800562a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800562e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005632:	f108 0301 	add.w	r3, r8, #1
 8005636:	443b      	add	r3, r7
 8005638:	429d      	cmp	r5, r3
 800563a:	bf38      	it	cc
 800563c:	461d      	movcc	r5, r3
 800563e:	0553      	lsls	r3, r2, #21
 8005640:	d531      	bpl.n	80056a6 <__ssputs_r+0xa0>
 8005642:	4629      	mov	r1, r5
 8005644:	f7ff fe0c 	bl	8005260 <_malloc_r>
 8005648:	4606      	mov	r6, r0
 800564a:	b950      	cbnz	r0, 8005662 <__ssputs_r+0x5c>
 800564c:	230c      	movs	r3, #12
 800564e:	f8ca 3000 	str.w	r3, [sl]
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005658:	81a3      	strh	r3, [r4, #12]
 800565a:	f04f 30ff 	mov.w	r0, #4294967295
 800565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005662:	463a      	mov	r2, r7
 8005664:	6921      	ldr	r1, [r4, #16]
 8005666:	f7ff fd99 	bl	800519c <memcpy>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005674:	81a3      	strh	r3, [r4, #12]
 8005676:	6126      	str	r6, [r4, #16]
 8005678:	6165      	str	r5, [r4, #20]
 800567a:	443e      	add	r6, r7
 800567c:	1bed      	subs	r5, r5, r7
 800567e:	6026      	str	r6, [r4, #0]
 8005680:	60a5      	str	r5, [r4, #8]
 8005682:	4646      	mov	r6, r8
 8005684:	4546      	cmp	r6, r8
 8005686:	bf28      	it	cs
 8005688:	4646      	movcs	r6, r8
 800568a:	4632      	mov	r2, r6
 800568c:	4649      	mov	r1, r9
 800568e:	6820      	ldr	r0, [r4, #0]
 8005690:	f000 faab 	bl	8005bea <memmove>
 8005694:	68a3      	ldr	r3, [r4, #8]
 8005696:	1b9b      	subs	r3, r3, r6
 8005698:	60a3      	str	r3, [r4, #8]
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	441e      	add	r6, r3
 800569e:	6026      	str	r6, [r4, #0]
 80056a0:	2000      	movs	r0, #0
 80056a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a6:	462a      	mov	r2, r5
 80056a8:	f000 fab9 	bl	8005c1e <_realloc_r>
 80056ac:	4606      	mov	r6, r0
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d1e1      	bne.n	8005676 <__ssputs_r+0x70>
 80056b2:	6921      	ldr	r1, [r4, #16]
 80056b4:	4650      	mov	r0, sl
 80056b6:	f7ff fd85 	bl	80051c4 <_free_r>
 80056ba:	e7c7      	b.n	800564c <__ssputs_r+0x46>

080056bc <_svfiprintf_r>:
 80056bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c0:	b09d      	sub	sp, #116	; 0x74
 80056c2:	4680      	mov	r8, r0
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	898b      	ldrh	r3, [r1, #12]
 80056c8:	061c      	lsls	r4, r3, #24
 80056ca:	460d      	mov	r5, r1
 80056cc:	4616      	mov	r6, r2
 80056ce:	d50f      	bpl.n	80056f0 <_svfiprintf_r+0x34>
 80056d0:	690b      	ldr	r3, [r1, #16]
 80056d2:	b96b      	cbnz	r3, 80056f0 <_svfiprintf_r+0x34>
 80056d4:	2140      	movs	r1, #64	; 0x40
 80056d6:	f7ff fdc3 	bl	8005260 <_malloc_r>
 80056da:	6028      	str	r0, [r5, #0]
 80056dc:	6128      	str	r0, [r5, #16]
 80056de:	b928      	cbnz	r0, 80056ec <_svfiprintf_r+0x30>
 80056e0:	230c      	movs	r3, #12
 80056e2:	f8c8 3000 	str.w	r3, [r8]
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	e0c5      	b.n	8005878 <_svfiprintf_r+0x1bc>
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	616b      	str	r3, [r5, #20]
 80056f0:	2300      	movs	r3, #0
 80056f2:	9309      	str	r3, [sp, #36]	; 0x24
 80056f4:	2320      	movs	r3, #32
 80056f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056fa:	2330      	movs	r3, #48	; 0x30
 80056fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005700:	f04f 0b01 	mov.w	fp, #1
 8005704:	4637      	mov	r7, r6
 8005706:	463c      	mov	r4, r7
 8005708:	f814 3b01 	ldrb.w	r3, [r4], #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d13c      	bne.n	800578a <_svfiprintf_r+0xce>
 8005710:	ebb7 0a06 	subs.w	sl, r7, r6
 8005714:	d00b      	beq.n	800572e <_svfiprintf_r+0x72>
 8005716:	4653      	mov	r3, sl
 8005718:	4632      	mov	r2, r6
 800571a:	4629      	mov	r1, r5
 800571c:	4640      	mov	r0, r8
 800571e:	f7ff ff72 	bl	8005606 <__ssputs_r>
 8005722:	3001      	adds	r0, #1
 8005724:	f000 80a3 	beq.w	800586e <_svfiprintf_r+0x1b2>
 8005728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572a:	4453      	add	r3, sl
 800572c:	9309      	str	r3, [sp, #36]	; 0x24
 800572e:	783b      	ldrb	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 809c 	beq.w	800586e <_svfiprintf_r+0x1b2>
 8005736:	2300      	movs	r3, #0
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	9307      	str	r3, [sp, #28]
 8005740:	9205      	str	r2, [sp, #20]
 8005742:	9306      	str	r3, [sp, #24]
 8005744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005748:	931a      	str	r3, [sp, #104]	; 0x68
 800574a:	2205      	movs	r2, #5
 800574c:	7821      	ldrb	r1, [r4, #0]
 800574e:	4850      	ldr	r0, [pc, #320]	; (8005890 <_svfiprintf_r+0x1d4>)
 8005750:	f7fa fd46 	bl	80001e0 <memchr>
 8005754:	1c67      	adds	r7, r4, #1
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	b9d8      	cbnz	r0, 8005792 <_svfiprintf_r+0xd6>
 800575a:	06d9      	lsls	r1, r3, #27
 800575c:	bf44      	itt	mi
 800575e:	2220      	movmi	r2, #32
 8005760:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005764:	071a      	lsls	r2, r3, #28
 8005766:	bf44      	itt	mi
 8005768:	222b      	movmi	r2, #43	; 0x2b
 800576a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800576e:	7822      	ldrb	r2, [r4, #0]
 8005770:	2a2a      	cmp	r2, #42	; 0x2a
 8005772:	d016      	beq.n	80057a2 <_svfiprintf_r+0xe6>
 8005774:	9a07      	ldr	r2, [sp, #28]
 8005776:	2100      	movs	r1, #0
 8005778:	200a      	movs	r0, #10
 800577a:	4627      	mov	r7, r4
 800577c:	3401      	adds	r4, #1
 800577e:	783b      	ldrb	r3, [r7, #0]
 8005780:	3b30      	subs	r3, #48	; 0x30
 8005782:	2b09      	cmp	r3, #9
 8005784:	d951      	bls.n	800582a <_svfiprintf_r+0x16e>
 8005786:	b1c9      	cbz	r1, 80057bc <_svfiprintf_r+0x100>
 8005788:	e011      	b.n	80057ae <_svfiprintf_r+0xf2>
 800578a:	2b25      	cmp	r3, #37	; 0x25
 800578c:	d0c0      	beq.n	8005710 <_svfiprintf_r+0x54>
 800578e:	4627      	mov	r7, r4
 8005790:	e7b9      	b.n	8005706 <_svfiprintf_r+0x4a>
 8005792:	4a3f      	ldr	r2, [pc, #252]	; (8005890 <_svfiprintf_r+0x1d4>)
 8005794:	1a80      	subs	r0, r0, r2
 8005796:	fa0b f000 	lsl.w	r0, fp, r0
 800579a:	4318      	orrs	r0, r3
 800579c:	9004      	str	r0, [sp, #16]
 800579e:	463c      	mov	r4, r7
 80057a0:	e7d3      	b.n	800574a <_svfiprintf_r+0x8e>
 80057a2:	9a03      	ldr	r2, [sp, #12]
 80057a4:	1d11      	adds	r1, r2, #4
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	9103      	str	r1, [sp, #12]
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	db01      	blt.n	80057b2 <_svfiprintf_r+0xf6>
 80057ae:	9207      	str	r2, [sp, #28]
 80057b0:	e004      	b.n	80057bc <_svfiprintf_r+0x100>
 80057b2:	4252      	negs	r2, r2
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	9207      	str	r2, [sp, #28]
 80057ba:	9304      	str	r3, [sp, #16]
 80057bc:	783b      	ldrb	r3, [r7, #0]
 80057be:	2b2e      	cmp	r3, #46	; 0x2e
 80057c0:	d10e      	bne.n	80057e0 <_svfiprintf_r+0x124>
 80057c2:	787b      	ldrb	r3, [r7, #1]
 80057c4:	2b2a      	cmp	r3, #42	; 0x2a
 80057c6:	f107 0101 	add.w	r1, r7, #1
 80057ca:	d132      	bne.n	8005832 <_svfiprintf_r+0x176>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	1d1a      	adds	r2, r3, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	9203      	str	r2, [sp, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bfb8      	it	lt
 80057d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80057dc:	3702      	adds	r7, #2
 80057de:	9305      	str	r3, [sp, #20]
 80057e0:	4c2c      	ldr	r4, [pc, #176]	; (8005894 <_svfiprintf_r+0x1d8>)
 80057e2:	7839      	ldrb	r1, [r7, #0]
 80057e4:	2203      	movs	r2, #3
 80057e6:	4620      	mov	r0, r4
 80057e8:	f7fa fcfa 	bl	80001e0 <memchr>
 80057ec:	b138      	cbz	r0, 80057fe <_svfiprintf_r+0x142>
 80057ee:	2340      	movs	r3, #64	; 0x40
 80057f0:	1b00      	subs	r0, r0, r4
 80057f2:	fa03 f000 	lsl.w	r0, r3, r0
 80057f6:	9b04      	ldr	r3, [sp, #16]
 80057f8:	4303      	orrs	r3, r0
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	3701      	adds	r7, #1
 80057fe:	7839      	ldrb	r1, [r7, #0]
 8005800:	4825      	ldr	r0, [pc, #148]	; (8005898 <_svfiprintf_r+0x1dc>)
 8005802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005806:	2206      	movs	r2, #6
 8005808:	1c7e      	adds	r6, r7, #1
 800580a:	f7fa fce9 	bl	80001e0 <memchr>
 800580e:	2800      	cmp	r0, #0
 8005810:	d035      	beq.n	800587e <_svfiprintf_r+0x1c2>
 8005812:	4b22      	ldr	r3, [pc, #136]	; (800589c <_svfiprintf_r+0x1e0>)
 8005814:	b9fb      	cbnz	r3, 8005856 <_svfiprintf_r+0x19a>
 8005816:	9b03      	ldr	r3, [sp, #12]
 8005818:	3307      	adds	r3, #7
 800581a:	f023 0307 	bic.w	r3, r3, #7
 800581e:	3308      	adds	r3, #8
 8005820:	9303      	str	r3, [sp, #12]
 8005822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005824:	444b      	add	r3, r9
 8005826:	9309      	str	r3, [sp, #36]	; 0x24
 8005828:	e76c      	b.n	8005704 <_svfiprintf_r+0x48>
 800582a:	fb00 3202 	mla	r2, r0, r2, r3
 800582e:	2101      	movs	r1, #1
 8005830:	e7a3      	b.n	800577a <_svfiprintf_r+0xbe>
 8005832:	2300      	movs	r3, #0
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	4618      	mov	r0, r3
 8005838:	240a      	movs	r4, #10
 800583a:	460f      	mov	r7, r1
 800583c:	3101      	adds	r1, #1
 800583e:	783a      	ldrb	r2, [r7, #0]
 8005840:	3a30      	subs	r2, #48	; 0x30
 8005842:	2a09      	cmp	r2, #9
 8005844:	d903      	bls.n	800584e <_svfiprintf_r+0x192>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0ca      	beq.n	80057e0 <_svfiprintf_r+0x124>
 800584a:	9005      	str	r0, [sp, #20]
 800584c:	e7c8      	b.n	80057e0 <_svfiprintf_r+0x124>
 800584e:	fb04 2000 	mla	r0, r4, r0, r2
 8005852:	2301      	movs	r3, #1
 8005854:	e7f1      	b.n	800583a <_svfiprintf_r+0x17e>
 8005856:	ab03      	add	r3, sp, #12
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	462a      	mov	r2, r5
 800585c:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <_svfiprintf_r+0x1e4>)
 800585e:	a904      	add	r1, sp, #16
 8005860:	4640      	mov	r0, r8
 8005862:	f3af 8000 	nop.w
 8005866:	f1b0 3fff 	cmp.w	r0, #4294967295
 800586a:	4681      	mov	r9, r0
 800586c:	d1d9      	bne.n	8005822 <_svfiprintf_r+0x166>
 800586e:	89ab      	ldrh	r3, [r5, #12]
 8005870:	065b      	lsls	r3, r3, #25
 8005872:	f53f af38 	bmi.w	80056e6 <_svfiprintf_r+0x2a>
 8005876:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005878:	b01d      	add	sp, #116	; 0x74
 800587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587e:	ab03      	add	r3, sp, #12
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	462a      	mov	r2, r5
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <_svfiprintf_r+0x1e4>)
 8005886:	a904      	add	r1, sp, #16
 8005888:	4640      	mov	r0, r8
 800588a:	f000 f881 	bl	8005990 <_printf_i>
 800588e:	e7ea      	b.n	8005866 <_svfiprintf_r+0x1aa>
 8005890:	08005f7f 	.word	0x08005f7f
 8005894:	08005f85 	.word	0x08005f85
 8005898:	08005f89 	.word	0x08005f89
 800589c:	00000000 	.word	0x00000000
 80058a0:	08005607 	.word	0x08005607

080058a4 <_printf_common>:
 80058a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	4691      	mov	r9, r2
 80058aa:	461f      	mov	r7, r3
 80058ac:	688a      	ldr	r2, [r1, #8]
 80058ae:	690b      	ldr	r3, [r1, #16]
 80058b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	bfb8      	it	lt
 80058b8:	4613      	movlt	r3, r2
 80058ba:	f8c9 3000 	str.w	r3, [r9]
 80058be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c2:	4606      	mov	r6, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	b112      	cbz	r2, 80058ce <_printf_common+0x2a>
 80058c8:	3301      	adds	r3, #1
 80058ca:	f8c9 3000 	str.w	r3, [r9]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	0699      	lsls	r1, r3, #26
 80058d2:	bf42      	ittt	mi
 80058d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80058d8:	3302      	addmi	r3, #2
 80058da:	f8c9 3000 	strmi.w	r3, [r9]
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	f015 0506 	ands.w	r5, r5, #6
 80058e4:	d107      	bne.n	80058f6 <_printf_common+0x52>
 80058e6:	f104 0a19 	add.w	sl, r4, #25
 80058ea:	68e3      	ldr	r3, [r4, #12]
 80058ec:	f8d9 2000 	ldr.w	r2, [r9]
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	429d      	cmp	r5, r3
 80058f4:	db29      	blt.n	800594a <_printf_common+0xa6>
 80058f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	3300      	adds	r3, #0
 80058fe:	bf18      	it	ne
 8005900:	2301      	movne	r3, #1
 8005902:	0692      	lsls	r2, r2, #26
 8005904:	d42e      	bmi.n	8005964 <_printf_common+0xc0>
 8005906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800590a:	4639      	mov	r1, r7
 800590c:	4630      	mov	r0, r6
 800590e:	47c0      	blx	r8
 8005910:	3001      	adds	r0, #1
 8005912:	d021      	beq.n	8005958 <_printf_common+0xb4>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	68e5      	ldr	r5, [r4, #12]
 8005918:	f8d9 2000 	ldr.w	r2, [r9]
 800591c:	f003 0306 	and.w	r3, r3, #6
 8005920:	2b04      	cmp	r3, #4
 8005922:	bf08      	it	eq
 8005924:	1aad      	subeq	r5, r5, r2
 8005926:	68a3      	ldr	r3, [r4, #8]
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	bf0c      	ite	eq
 800592c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005930:	2500      	movne	r5, #0
 8005932:	4293      	cmp	r3, r2
 8005934:	bfc4      	itt	gt
 8005936:	1a9b      	subgt	r3, r3, r2
 8005938:	18ed      	addgt	r5, r5, r3
 800593a:	f04f 0900 	mov.w	r9, #0
 800593e:	341a      	adds	r4, #26
 8005940:	454d      	cmp	r5, r9
 8005942:	d11b      	bne.n	800597c <_printf_common+0xd8>
 8005944:	2000      	movs	r0, #0
 8005946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594a:	2301      	movs	r3, #1
 800594c:	4652      	mov	r2, sl
 800594e:	4639      	mov	r1, r7
 8005950:	4630      	mov	r0, r6
 8005952:	47c0      	blx	r8
 8005954:	3001      	adds	r0, #1
 8005956:	d103      	bne.n	8005960 <_printf_common+0xbc>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005960:	3501      	adds	r5, #1
 8005962:	e7c2      	b.n	80058ea <_printf_common+0x46>
 8005964:	18e1      	adds	r1, r4, r3
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	2030      	movs	r0, #48	; 0x30
 800596a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800596e:	4422      	add	r2, r4
 8005970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005978:	3302      	adds	r3, #2
 800597a:	e7c4      	b.n	8005906 <_printf_common+0x62>
 800597c:	2301      	movs	r3, #1
 800597e:	4622      	mov	r2, r4
 8005980:	4639      	mov	r1, r7
 8005982:	4630      	mov	r0, r6
 8005984:	47c0      	blx	r8
 8005986:	3001      	adds	r0, #1
 8005988:	d0e6      	beq.n	8005958 <_printf_common+0xb4>
 800598a:	f109 0901 	add.w	r9, r9, #1
 800598e:	e7d7      	b.n	8005940 <_printf_common+0x9c>

08005990 <_printf_i>:
 8005990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005994:	4617      	mov	r7, r2
 8005996:	7e0a      	ldrb	r2, [r1, #24]
 8005998:	b085      	sub	sp, #20
 800599a:	2a6e      	cmp	r2, #110	; 0x6e
 800599c:	4698      	mov	r8, r3
 800599e:	4606      	mov	r6, r0
 80059a0:	460c      	mov	r4, r1
 80059a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059a4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80059a8:	f000 80bc 	beq.w	8005b24 <_printf_i+0x194>
 80059ac:	d81a      	bhi.n	80059e4 <_printf_i+0x54>
 80059ae:	2a63      	cmp	r2, #99	; 0x63
 80059b0:	d02e      	beq.n	8005a10 <_printf_i+0x80>
 80059b2:	d80a      	bhi.n	80059ca <_printf_i+0x3a>
 80059b4:	2a00      	cmp	r2, #0
 80059b6:	f000 80c8 	beq.w	8005b4a <_printf_i+0x1ba>
 80059ba:	2a58      	cmp	r2, #88	; 0x58
 80059bc:	f000 808a 	beq.w	8005ad4 <_printf_i+0x144>
 80059c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80059c8:	e02a      	b.n	8005a20 <_printf_i+0x90>
 80059ca:	2a64      	cmp	r2, #100	; 0x64
 80059cc:	d001      	beq.n	80059d2 <_printf_i+0x42>
 80059ce:	2a69      	cmp	r2, #105	; 0x69
 80059d0:	d1f6      	bne.n	80059c0 <_printf_i+0x30>
 80059d2:	6821      	ldr	r1, [r4, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80059da:	d023      	beq.n	8005a24 <_printf_i+0x94>
 80059dc:	1d11      	adds	r1, r2, #4
 80059de:	6019      	str	r1, [r3, #0]
 80059e0:	6813      	ldr	r3, [r2, #0]
 80059e2:	e027      	b.n	8005a34 <_printf_i+0xa4>
 80059e4:	2a73      	cmp	r2, #115	; 0x73
 80059e6:	f000 80b4 	beq.w	8005b52 <_printf_i+0x1c2>
 80059ea:	d808      	bhi.n	80059fe <_printf_i+0x6e>
 80059ec:	2a6f      	cmp	r2, #111	; 0x6f
 80059ee:	d02a      	beq.n	8005a46 <_printf_i+0xb6>
 80059f0:	2a70      	cmp	r2, #112	; 0x70
 80059f2:	d1e5      	bne.n	80059c0 <_printf_i+0x30>
 80059f4:	680a      	ldr	r2, [r1, #0]
 80059f6:	f042 0220 	orr.w	r2, r2, #32
 80059fa:	600a      	str	r2, [r1, #0]
 80059fc:	e003      	b.n	8005a06 <_printf_i+0x76>
 80059fe:	2a75      	cmp	r2, #117	; 0x75
 8005a00:	d021      	beq.n	8005a46 <_printf_i+0xb6>
 8005a02:	2a78      	cmp	r2, #120	; 0x78
 8005a04:	d1dc      	bne.n	80059c0 <_printf_i+0x30>
 8005a06:	2278      	movs	r2, #120	; 0x78
 8005a08:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005a0c:	496e      	ldr	r1, [pc, #440]	; (8005bc8 <_printf_i+0x238>)
 8005a0e:	e064      	b.n	8005ada <_printf_i+0x14a>
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005a16:	1d11      	adds	r1, r2, #4
 8005a18:	6019      	str	r1, [r3, #0]
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0a3      	b.n	8005b6c <_printf_i+0x1dc>
 8005a24:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005a28:	f102 0104 	add.w	r1, r2, #4
 8005a2c:	6019      	str	r1, [r3, #0]
 8005a2e:	d0d7      	beq.n	80059e0 <_printf_i+0x50>
 8005a30:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da03      	bge.n	8005a40 <_printf_i+0xb0>
 8005a38:	222d      	movs	r2, #45	; 0x2d
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a40:	4962      	ldr	r1, [pc, #392]	; (8005bcc <_printf_i+0x23c>)
 8005a42:	220a      	movs	r2, #10
 8005a44:	e017      	b.n	8005a76 <_printf_i+0xe6>
 8005a46:	6820      	ldr	r0, [r4, #0]
 8005a48:	6819      	ldr	r1, [r3, #0]
 8005a4a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005a4e:	d003      	beq.n	8005a58 <_printf_i+0xc8>
 8005a50:	1d08      	adds	r0, r1, #4
 8005a52:	6018      	str	r0, [r3, #0]
 8005a54:	680b      	ldr	r3, [r1, #0]
 8005a56:	e006      	b.n	8005a66 <_printf_i+0xd6>
 8005a58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a5c:	f101 0004 	add.w	r0, r1, #4
 8005a60:	6018      	str	r0, [r3, #0]
 8005a62:	d0f7      	beq.n	8005a54 <_printf_i+0xc4>
 8005a64:	880b      	ldrh	r3, [r1, #0]
 8005a66:	4959      	ldr	r1, [pc, #356]	; (8005bcc <_printf_i+0x23c>)
 8005a68:	2a6f      	cmp	r2, #111	; 0x6f
 8005a6a:	bf14      	ite	ne
 8005a6c:	220a      	movne	r2, #10
 8005a6e:	2208      	moveq	r2, #8
 8005a70:	2000      	movs	r0, #0
 8005a72:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005a76:	6865      	ldr	r5, [r4, #4]
 8005a78:	60a5      	str	r5, [r4, #8]
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	f2c0 809c 	blt.w	8005bb8 <_printf_i+0x228>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	f020 0004 	bic.w	r0, r0, #4
 8005a86:	6020      	str	r0, [r4, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d13f      	bne.n	8005b0c <_printf_i+0x17c>
 8005a8c:	2d00      	cmp	r5, #0
 8005a8e:	f040 8095 	bne.w	8005bbc <_printf_i+0x22c>
 8005a92:	4675      	mov	r5, lr
 8005a94:	2a08      	cmp	r2, #8
 8005a96:	d10b      	bne.n	8005ab0 <_printf_i+0x120>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	07da      	lsls	r2, r3, #31
 8005a9c:	d508      	bpl.n	8005ab0 <_printf_i+0x120>
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	6862      	ldr	r2, [r4, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	bfde      	ittt	le
 8005aa6:	2330      	movle	r3, #48	; 0x30
 8005aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ab0:	ebae 0305 	sub.w	r3, lr, r5
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	f8cd 8000 	str.w	r8, [sp]
 8005aba:	463b      	mov	r3, r7
 8005abc:	aa03      	add	r2, sp, #12
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f7ff feef 	bl	80058a4 <_printf_common>
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d155      	bne.n	8005b76 <_printf_i+0x1e6>
 8005aca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ace:	b005      	add	sp, #20
 8005ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ad4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005ad8:	493c      	ldr	r1, [pc, #240]	; (8005bcc <_printf_i+0x23c>)
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005ae2:	f100 0504 	add.w	r5, r0, #4
 8005ae6:	601d      	str	r5, [r3, #0]
 8005ae8:	d001      	beq.n	8005aee <_printf_i+0x15e>
 8005aea:	6803      	ldr	r3, [r0, #0]
 8005aec:	e002      	b.n	8005af4 <_printf_i+0x164>
 8005aee:	0655      	lsls	r5, r2, #25
 8005af0:	d5fb      	bpl.n	8005aea <_printf_i+0x15a>
 8005af2:	8803      	ldrh	r3, [r0, #0]
 8005af4:	07d0      	lsls	r0, r2, #31
 8005af6:	bf44      	itt	mi
 8005af8:	f042 0220 	orrmi.w	r2, r2, #32
 8005afc:	6022      	strmi	r2, [r4, #0]
 8005afe:	b91b      	cbnz	r3, 8005b08 <_printf_i+0x178>
 8005b00:	6822      	ldr	r2, [r4, #0]
 8005b02:	f022 0220 	bic.w	r2, r2, #32
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	e7b1      	b.n	8005a70 <_printf_i+0xe0>
 8005b0c:	4675      	mov	r5, lr
 8005b0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b12:	fb02 3310 	mls	r3, r2, r0, r3
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d1f5      	bne.n	8005b0e <_printf_i+0x17e>
 8005b22:	e7b7      	b.n	8005a94 <_printf_i+0x104>
 8005b24:	6808      	ldr	r0, [r1, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	6949      	ldr	r1, [r1, #20]
 8005b2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005b2e:	d004      	beq.n	8005b3a <_printf_i+0x1aa>
 8005b30:	1d10      	adds	r0, r2, #4
 8005b32:	6018      	str	r0, [r3, #0]
 8005b34:	6813      	ldr	r3, [r2, #0]
 8005b36:	6019      	str	r1, [r3, #0]
 8005b38:	e007      	b.n	8005b4a <_printf_i+0x1ba>
 8005b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b3e:	f102 0004 	add.w	r0, r2, #4
 8005b42:	6018      	str	r0, [r3, #0]
 8005b44:	6813      	ldr	r3, [r2, #0]
 8005b46:	d0f6      	beq.n	8005b36 <_printf_i+0x1a6>
 8005b48:	8019      	strh	r1, [r3, #0]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6123      	str	r3, [r4, #16]
 8005b4e:	4675      	mov	r5, lr
 8005b50:	e7b1      	b.n	8005ab6 <_printf_i+0x126>
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	1d11      	adds	r1, r2, #4
 8005b56:	6019      	str	r1, [r3, #0]
 8005b58:	6815      	ldr	r5, [r2, #0]
 8005b5a:	6862      	ldr	r2, [r4, #4]
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7fa fb3e 	bl	80001e0 <memchr>
 8005b64:	b108      	cbz	r0, 8005b6a <_printf_i+0x1da>
 8005b66:	1b40      	subs	r0, r0, r5
 8005b68:	6060      	str	r0, [r4, #4]
 8005b6a:	6863      	ldr	r3, [r4, #4]
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b74:	e79f      	b.n	8005ab6 <_printf_i+0x126>
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	462a      	mov	r2, r5
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	47c0      	blx	r8
 8005b80:	3001      	adds	r0, #1
 8005b82:	d0a2      	beq.n	8005aca <_printf_i+0x13a>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	079b      	lsls	r3, r3, #30
 8005b88:	d507      	bpl.n	8005b9a <_printf_i+0x20a>
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	f104 0919 	add.w	r9, r4, #25
 8005b90:	68e3      	ldr	r3, [r4, #12]
 8005b92:	9a03      	ldr	r2, [sp, #12]
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	429d      	cmp	r5, r3
 8005b98:	db05      	blt.n	8005ba6 <_printf_i+0x216>
 8005b9a:	68e0      	ldr	r0, [r4, #12]
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	4298      	cmp	r0, r3
 8005ba0:	bfb8      	it	lt
 8005ba2:	4618      	movlt	r0, r3
 8005ba4:	e793      	b.n	8005ace <_printf_i+0x13e>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	464a      	mov	r2, r9
 8005baa:	4639      	mov	r1, r7
 8005bac:	4630      	mov	r0, r6
 8005bae:	47c0      	blx	r8
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d08a      	beq.n	8005aca <_printf_i+0x13a>
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	e7eb      	b.n	8005b90 <_printf_i+0x200>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1a7      	bne.n	8005b0c <_printf_i+0x17c>
 8005bbc:	780b      	ldrb	r3, [r1, #0]
 8005bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc6:	e765      	b.n	8005a94 <_printf_i+0x104>
 8005bc8:	08005fa1 	.word	0x08005fa1
 8005bcc:	08005f90 	.word	0x08005f90

08005bd0 <__ascii_wctomb>:
 8005bd0:	b149      	cbz	r1, 8005be6 <__ascii_wctomb+0x16>
 8005bd2:	2aff      	cmp	r2, #255	; 0xff
 8005bd4:	bf85      	ittet	hi
 8005bd6:	238a      	movhi	r3, #138	; 0x8a
 8005bd8:	6003      	strhi	r3, [r0, #0]
 8005bda:	700a      	strbls	r2, [r1, #0]
 8005bdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8005be0:	bf98      	it	ls
 8005be2:	2001      	movls	r0, #1
 8005be4:	4770      	bx	lr
 8005be6:	4608      	mov	r0, r1
 8005be8:	4770      	bx	lr

08005bea <memmove>:
 8005bea:	4288      	cmp	r0, r1
 8005bec:	b510      	push	{r4, lr}
 8005bee:	eb01 0302 	add.w	r3, r1, r2
 8005bf2:	d803      	bhi.n	8005bfc <memmove+0x12>
 8005bf4:	1e42      	subs	r2, r0, #1
 8005bf6:	4299      	cmp	r1, r3
 8005bf8:	d10c      	bne.n	8005c14 <memmove+0x2a>
 8005bfa:	bd10      	pop	{r4, pc}
 8005bfc:	4298      	cmp	r0, r3
 8005bfe:	d2f9      	bcs.n	8005bf4 <memmove+0xa>
 8005c00:	1881      	adds	r1, r0, r2
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	42d3      	cmn	r3, r2
 8005c06:	d100      	bne.n	8005c0a <memmove+0x20>
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c12:	e7f7      	b.n	8005c04 <memmove+0x1a>
 8005c14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c18:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c1c:	e7eb      	b.n	8005bf6 <memmove+0xc>

08005c1e <_realloc_r>:
 8005c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c20:	4607      	mov	r7, r0
 8005c22:	4614      	mov	r4, r2
 8005c24:	460e      	mov	r6, r1
 8005c26:	b921      	cbnz	r1, 8005c32 <_realloc_r+0x14>
 8005c28:	4611      	mov	r1, r2
 8005c2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c2e:	f7ff bb17 	b.w	8005260 <_malloc_r>
 8005c32:	b922      	cbnz	r2, 8005c3e <_realloc_r+0x20>
 8005c34:	f7ff fac6 	bl	80051c4 <_free_r>
 8005c38:	4625      	mov	r5, r4
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c3e:	f000 f814 	bl	8005c6a <_malloc_usable_size_r>
 8005c42:	4284      	cmp	r4, r0
 8005c44:	d90f      	bls.n	8005c66 <_realloc_r+0x48>
 8005c46:	4621      	mov	r1, r4
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f7ff fb09 	bl	8005260 <_malloc_r>
 8005c4e:	4605      	mov	r5, r0
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0f2      	beq.n	8005c3a <_realloc_r+0x1c>
 8005c54:	4631      	mov	r1, r6
 8005c56:	4622      	mov	r2, r4
 8005c58:	f7ff faa0 	bl	800519c <memcpy>
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f7ff fab0 	bl	80051c4 <_free_r>
 8005c64:	e7e9      	b.n	8005c3a <_realloc_r+0x1c>
 8005c66:	4635      	mov	r5, r6
 8005c68:	e7e7      	b.n	8005c3a <_realloc_r+0x1c>

08005c6a <_malloc_usable_size_r>:
 8005c6a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f1a0 0004 	sub.w	r0, r0, #4
 8005c74:	bfbc      	itt	lt
 8005c76:	580b      	ldrlt	r3, [r1, r0]
 8005c78:	18c0      	addlt	r0, r0, r3
 8005c7a:	4770      	bx	lr

08005c7c <sqrt>:
 8005c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c80:	ed2d 8b02 	vpush	{d8}
 8005c84:	b08b      	sub	sp, #44	; 0x2c
 8005c86:	ec55 4b10 	vmov	r4, r5, d0
 8005c8a:	f000 f851 	bl	8005d30 <__ieee754_sqrt>
 8005c8e:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <sqrt+0xac>)
 8005c90:	eeb0 8a40 	vmov.f32	s16, s0
 8005c94:	eef0 8a60 	vmov.f32	s17, s1
 8005c98:	f993 6000 	ldrsb.w	r6, [r3]
 8005c9c:	1c73      	adds	r3, r6, #1
 8005c9e:	d02a      	beq.n	8005cf6 <sqrt+0x7a>
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	462b      	mov	r3, r5
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	f7fa ff3c 	bl	8000b24 <__aeabi_dcmpun>
 8005cac:	4607      	mov	r7, r0
 8005cae:	bb10      	cbnz	r0, 8005cf6 <sqrt+0x7a>
 8005cb0:	f04f 0800 	mov.w	r8, #0
 8005cb4:	f04f 0900 	mov.w	r9, #0
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	f7fa ff08 	bl	8000ad4 <__aeabi_dcmplt>
 8005cc4:	b1b8      	cbz	r0, 8005cf6 <sqrt+0x7a>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <sqrt+0xb0>)
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	9708      	str	r7, [sp, #32]
 8005cd0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005cd4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005cd8:	b9b6      	cbnz	r6, 8005d08 <sqrt+0x8c>
 8005cda:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005cde:	4668      	mov	r0, sp
 8005ce0:	f000 f8d6 	bl	8005e90 <matherr>
 8005ce4:	b1d0      	cbz	r0, 8005d1c <sqrt+0xa0>
 8005ce6:	9b08      	ldr	r3, [sp, #32]
 8005ce8:	b11b      	cbz	r3, 8005cf2 <sqrt+0x76>
 8005cea:	f000 f8d3 	bl	8005e94 <__errno>
 8005cee:	9b08      	ldr	r3, [sp, #32]
 8005cf0:	6003      	str	r3, [r0, #0]
 8005cf2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8005cfa:	eef0 0a68 	vmov.f32	s1, s17
 8005cfe:	b00b      	add	sp, #44	; 0x2c
 8005d00:	ecbd 8b02 	vpop	{d8}
 8005d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d08:	4642      	mov	r2, r8
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	4649      	mov	r1, r9
 8005d10:	f7fa fd98 	bl	8000844 <__aeabi_ddiv>
 8005d14:	2e02      	cmp	r6, #2
 8005d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d1a:	d1e0      	bne.n	8005cde <sqrt+0x62>
 8005d1c:	f000 f8ba 	bl	8005e94 <__errno>
 8005d20:	2321      	movs	r3, #33	; 0x21
 8005d22:	6003      	str	r3, [r0, #0]
 8005d24:	e7df      	b.n	8005ce6 <sqrt+0x6a>
 8005d26:	bf00      	nop
 8005d28:	200001fc 	.word	0x200001fc
 8005d2c:	080060b3 	.word	0x080060b3

08005d30 <__ieee754_sqrt>:
 8005d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d34:	ec55 4b10 	vmov	r4, r5, d0
 8005d38:	4e54      	ldr	r6, [pc, #336]	; (8005e8c <__ieee754_sqrt+0x15c>)
 8005d3a:	43ae      	bics	r6, r5
 8005d3c:	ee10 0a10 	vmov	r0, s0
 8005d40:	462b      	mov	r3, r5
 8005d42:	462a      	mov	r2, r5
 8005d44:	4621      	mov	r1, r4
 8005d46:	d113      	bne.n	8005d70 <__ieee754_sqrt+0x40>
 8005d48:	ee10 2a10 	vmov	r2, s0
 8005d4c:	462b      	mov	r3, r5
 8005d4e:	ee10 0a10 	vmov	r0, s0
 8005d52:	4629      	mov	r1, r5
 8005d54:	f7fa fc4c 	bl	80005f0 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fa94 	bl	800028c <__adddf3>
 8005d64:	4604      	mov	r4, r0
 8005d66:	460d      	mov	r5, r1
 8005d68:	ec45 4b10 	vmov	d0, r4, r5
 8005d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	dc10      	bgt.n	8005d96 <__ieee754_sqrt+0x66>
 8005d74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005d78:	4330      	orrs	r0, r6
 8005d7a:	d0f5      	beq.n	8005d68 <__ieee754_sqrt+0x38>
 8005d7c:	b15d      	cbz	r5, 8005d96 <__ieee754_sqrt+0x66>
 8005d7e:	ee10 2a10 	vmov	r2, s0
 8005d82:	462b      	mov	r3, r5
 8005d84:	4620      	mov	r0, r4
 8005d86:	4629      	mov	r1, r5
 8005d88:	f7fa fa7e 	bl	8000288 <__aeabi_dsub>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	f7fa fd58 	bl	8000844 <__aeabi_ddiv>
 8005d94:	e7e6      	b.n	8005d64 <__ieee754_sqrt+0x34>
 8005d96:	151b      	asrs	r3, r3, #20
 8005d98:	d10c      	bne.n	8005db4 <__ieee754_sqrt+0x84>
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d06d      	beq.n	8005e7a <__ieee754_sqrt+0x14a>
 8005d9e:	2000      	movs	r0, #0
 8005da0:	02d6      	lsls	r6, r2, #11
 8005da2:	d56e      	bpl.n	8005e82 <__ieee754_sqrt+0x152>
 8005da4:	1e44      	subs	r4, r0, #1
 8005da6:	1b1b      	subs	r3, r3, r4
 8005da8:	f1c0 0420 	rsb	r4, r0, #32
 8005dac:	fa21 f404 	lsr.w	r4, r1, r4
 8005db0:	4322      	orrs	r2, r4
 8005db2:	4081      	lsls	r1, r0
 8005db4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005db8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005dbc:	07dd      	lsls	r5, r3, #31
 8005dbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005dc2:	bf42      	ittt	mi
 8005dc4:	0052      	lslmi	r2, r2, #1
 8005dc6:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8005dca:	0049      	lslmi	r1, r1, #1
 8005dcc:	1058      	asrs	r0, r3, #1
 8005dce:	2500      	movs	r5, #0
 8005dd0:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8005dd4:	441a      	add	r2, r3
 8005dd6:	0049      	lsls	r1, r1, #1
 8005dd8:	2316      	movs	r3, #22
 8005dda:	462c      	mov	r4, r5
 8005ddc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005de0:	19a7      	adds	r7, r4, r6
 8005de2:	4297      	cmp	r7, r2
 8005de4:	bfde      	ittt	le
 8005de6:	1bd2      	suble	r2, r2, r7
 8005de8:	19bc      	addle	r4, r7, r6
 8005dea:	19ad      	addle	r5, r5, r6
 8005dec:	0052      	lsls	r2, r2, #1
 8005dee:	3b01      	subs	r3, #1
 8005df0:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005df4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005df8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005dfc:	d1f0      	bne.n	8005de0 <__ieee754_sqrt+0xb0>
 8005dfe:	f04f 0e20 	mov.w	lr, #32
 8005e02:	469c      	mov	ip, r3
 8005e04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e08:	42a2      	cmp	r2, r4
 8005e0a:	eb06 070c 	add.w	r7, r6, ip
 8005e0e:	dc02      	bgt.n	8005e16 <__ieee754_sqrt+0xe6>
 8005e10:	d112      	bne.n	8005e38 <__ieee754_sqrt+0x108>
 8005e12:	428f      	cmp	r7, r1
 8005e14:	d810      	bhi.n	8005e38 <__ieee754_sqrt+0x108>
 8005e16:	2f00      	cmp	r7, #0
 8005e18:	eb07 0c06 	add.w	ip, r7, r6
 8005e1c:	da34      	bge.n	8005e88 <__ieee754_sqrt+0x158>
 8005e1e:	f1bc 0f00 	cmp.w	ip, #0
 8005e22:	db31      	blt.n	8005e88 <__ieee754_sqrt+0x158>
 8005e24:	f104 0801 	add.w	r8, r4, #1
 8005e28:	1b12      	subs	r2, r2, r4
 8005e2a:	428f      	cmp	r7, r1
 8005e2c:	bf88      	it	hi
 8005e2e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005e32:	1bc9      	subs	r1, r1, r7
 8005e34:	4433      	add	r3, r6
 8005e36:	4644      	mov	r4, r8
 8005e38:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8005e3c:	f1be 0e01 	subs.w	lr, lr, #1
 8005e40:	443a      	add	r2, r7
 8005e42:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005e46:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e4a:	d1dd      	bne.n	8005e08 <__ieee754_sqrt+0xd8>
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	d006      	beq.n	8005e5e <__ieee754_sqrt+0x12e>
 8005e50:	1c5c      	adds	r4, r3, #1
 8005e52:	bf13      	iteet	ne
 8005e54:	3301      	addne	r3, #1
 8005e56:	3501      	addeq	r5, #1
 8005e58:	4673      	moveq	r3, lr
 8005e5a:	f023 0301 	bicne.w	r3, r3, #1
 8005e5e:	106a      	asrs	r2, r5, #1
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	07e9      	lsls	r1, r5, #31
 8005e64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005e68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005e6c:	bf48      	it	mi
 8005e6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005e72:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005e76:	461c      	mov	r4, r3
 8005e78:	e776      	b.n	8005d68 <__ieee754_sqrt+0x38>
 8005e7a:	0aca      	lsrs	r2, r1, #11
 8005e7c:	3b15      	subs	r3, #21
 8005e7e:	0549      	lsls	r1, r1, #21
 8005e80:	e78b      	b.n	8005d9a <__ieee754_sqrt+0x6a>
 8005e82:	0052      	lsls	r2, r2, #1
 8005e84:	3001      	adds	r0, #1
 8005e86:	e78b      	b.n	8005da0 <__ieee754_sqrt+0x70>
 8005e88:	46a0      	mov	r8, r4
 8005e8a:	e7cd      	b.n	8005e28 <__ieee754_sqrt+0xf8>
 8005e8c:	7ff00000 	.word	0x7ff00000

08005e90 <matherr>:
 8005e90:	2000      	movs	r0, #0
 8005e92:	4770      	bx	lr

08005e94 <__errno>:
 8005e94:	4b01      	ldr	r3, [pc, #4]	; (8005e9c <__errno+0x8>)
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	2000002c 	.word	0x2000002c

08005ea0 <_sbrk>:
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <_sbrk+0x14>)
 8005ea2:	6819      	ldr	r1, [r3, #0]
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	b909      	cbnz	r1, 8005eac <_sbrk+0xc>
 8005ea8:	4903      	ldr	r1, [pc, #12]	; (8005eb8 <_sbrk+0x18>)
 8005eaa:	6019      	str	r1, [r3, #0]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	4402      	add	r2, r0
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	4770      	bx	lr
 8005eb4:	200002c4 	.word	0x200002c4
 8005eb8:	200004b0 	.word	0x200004b0

08005ebc <_init>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr

08005ec8 <_fini>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr
