
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000204  20000000  08006f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
  7 .bss          000003dc  20000208  20000208  00020208  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200005e4  200005e4  00020208  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 10 .debug_info   000364f7  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004e7e  00000000  00000000  0005672b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000105cf  00000000  00000000  0005b5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001540  00000000  00000000  0006bb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013c8  00000000  00000000  0006d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002309d  00000000  00000000  0006e480  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001515f  00000000  00000000  0009151d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b3770  00000000  00000000  000a667c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00159dec  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000418c  00000000  00000000  00159e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d30 	.word	0x08006d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08006d30 	.word	0x08006d30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	d1ed      	bne.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_f2ulz>:
 8000dac:	b5d0      	push	{r4, r6, r7, lr}
 8000dae:	f7ff fbcb 	bl	8000548 <__aeabi_f2d>
 8000db2:	2200      	movs	r2, #0
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <__aeabi_f2ulz+0x44>)
 8000db6:	4606      	mov	r6, r0
 8000db8:	460f      	mov	r7, r1
 8000dba:	f7ff fc19 	bl	80005f0 <__aeabi_dmul>
 8000dbe:	f7ff fec7 	bl	8000b50 <__aeabi_d2uiz>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	f7ff fb9e 	bl	8000504 <__aeabi_ui2d>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <__aeabi_f2ulz+0x48>)
 8000dcc:	f7ff fc10 	bl	80005f0 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	4639      	mov	r1, r7
 8000dd8:	f7ff fa56 	bl	8000288 <__aeabi_dsub>
 8000ddc:	f7ff feb8 	bl	8000b50 <__aeabi_d2uiz>
 8000de0:	4623      	mov	r3, r4
 8000de2:	2200      	movs	r2, #0
 8000de4:	ea42 0200 	orr.w	r2, r2, r0
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	bdd0      	pop	{r4, r6, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	3df00000 	.word	0x3df00000
 8000df4:	41f00000 	.word	0x41f00000

08000df8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_InitTick+0x24>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <HAL_InitTick+0x28>)
 8000e02:	fba3 3000 	umull	r3, r0, r3, r0
 8000e06:	0980      	lsrs	r0, r0, #6
 8000e08:	f000 fcec 	bl	80017e4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4621      	mov	r1, r4
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 fca8 	bl	8001768 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000e18:	2000      	movs	r0, #0
 8000e1a:	bd10      	pop	{r4, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	10624dd3 	.word	0x10624dd3

08000e24 <HAL_Init>:
{
 8000e24:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x20>)
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 fc87 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_InitTick>
  HAL_MspInit();
 8000e3c:	f004 fa60 	bl	8005300 <HAL_MspInit>
}
 8000e40:	2000      	movs	r0, #0
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e48:	4a02      	ldr	r2, [pc, #8]	; (8000e54 <HAL_IncTick+0xc>)
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200002f4 	.word	0x200002f4

08000e58 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <HAL_GetTick+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200002f4 	.word	0x200002f4

08000e64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e64:	4770      	bx	lr

08000e66 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e66:	4770      	bx	lr

08000e68 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000e68:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e6a:	6802      	ldr	r2, [r0, #0]
 8000e6c:	6893      	ldr	r3, [r2, #8]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d011      	beq.n	8000e9a <ADC_Disable+0x32>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d037      	beq.n	8000eec <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000e7c:	6893      	ldr	r3, [r2, #8]
 8000e7e:	f003 030d 	and.w	r3, r3, #13
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d011      	beq.n	8000eaa <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e86:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e8e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
 8000e98:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e9a:	6813      	ldr	r3, [r2, #0]
 8000e9c:	f013 0f01 	tst.w	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <ADC_Disable+0x3e>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e7e8      	b.n	8000e78 <ADC_Disable+0x10>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e7e6      	b.n	8000e78 <ADC_Disable+0x10>
 8000eaa:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000eac:	6893      	ldr	r3, [r2, #8]
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	6093      	str	r3, [r2, #8]
 8000eb4:	6803      	ldr	r3, [r0, #0]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000eba:	f7ff ffcd 	bl	8000e58 <HAL_GetTick>
 8000ebe:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f013 0f01 	tst.w	r3, #1
 8000ec8:	d00e      	beq.n	8000ee8 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eca:	f7ff ffc5 	bl	8000e58 <HAL_GetTick>
 8000ece:	1b40      	subs	r0, r0, r5
 8000ed0:	2802      	cmp	r0, #2
 8000ed2:	d9f5      	bls.n	8000ec0 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ed6:	f043 0310 	orr.w	r3, r3, #16
 8000eda:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000edc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ee8:	2000      	movs	r0, #0
 8000eea:	bd38      	pop	{r3, r4, r5, pc}
 8000eec:	2000      	movs	r0, #0
}
 8000eee:	bd38      	pop	{r3, r4, r5, pc}

08000ef0 <ADC_Enable>:
{
 8000ef0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ef2:	6802      	ldr	r2, [r0, #0]
 8000ef4:	6893      	ldr	r3, [r2, #8]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d010      	beq.n	8000f20 <ADC_Enable+0x30>
 8000efe:	2300      	movs	r3, #0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d133      	bne.n	8000f6c <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000f04:	6891      	ldr	r1, [r2, #8]
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <ADC_Enable+0x80>)
 8000f08:	4219      	tst	r1, r3
 8000f0a:	d011      	beq.n	8000f30 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f14:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f20:	6813      	ldr	r3, [r2, #0]
 8000f22:	f013 0f01 	tst.w	r3, #1
 8000f26:	d101      	bne.n	8000f2c <ADC_Enable+0x3c>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e7e9      	b.n	8000f00 <ADC_Enable+0x10>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e7e7      	b.n	8000f00 <ADC_Enable+0x10>
 8000f30:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000f32:	6893      	ldr	r3, [r2, #8]
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000f3a:	f7ff ff8d 	bl	8000e58 <HAL_GetTick>
 8000f3e:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f013 0f01 	tst.w	r3, #1
 8000f48:	d10e      	bne.n	8000f68 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f4a:	f7ff ff85 	bl	8000e58 <HAL_GetTick>
 8000f4e:	1b40      	subs	r0, r0, r5
 8000f50:	2802      	cmp	r0, #2
 8000f52:	d9f5      	bls.n	8000f40 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f56:	f043 0310 	orr.w	r3, r3, #16
 8000f5a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000f64:	2001      	movs	r0, #1
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000f68:	2000      	movs	r0, #0
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
 8000f6c:	2000      	movs	r0, #0
}
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	8000003f 	.word	0x8000003f

08000f74 <ADC_DMAError>:
{
 8000f74:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f76:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f78:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7e:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f80:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8000f88:	f7ff ff6d 	bl	8000e66 <HAL_ADC_ErrorCallback>
 8000f8c:	bd08      	pop	{r3, pc}

08000f8e <ADC_DMAHalfConvCplt>:
{
 8000f8e:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000f90:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f92:	f7ff ff67 	bl	8000e64 <HAL_ADC_ConvHalfCpltCallback>
 8000f96:	bd08      	pop	{r3, pc}

08000f98 <ADC_DMAConvCplt>:
{
 8000f98:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f9e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000fa2:	d11a      	bne.n	8000fda <ADC_DMAConvCplt+0x42>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000faa:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68d2      	ldr	r2, [r2, #12]
 8000fb0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000fb4:	d10d      	bne.n	8000fd2 <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fb6:	69da      	ldr	r2, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fb8:	b95a      	cbnz	r2, 8000fd2 <ADC_DMAConvCplt+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fc0:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fc4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000fc8:	d103      	bne.n	8000fd2 <ADC_DMAConvCplt+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fcc:	f042 0201 	orr.w	r2, r2, #1
 8000fd0:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f8c8 	bl	8004168 <HAL_ADC_ConvCpltCallback>
 8000fd8:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4798      	blx	r3
 8000fe0:	bd08      	pop	{r3, pc}
	...

08000fe4 <HAL_ADC_Init>:
{
 8000fe4:	b530      	push	{r4, r5, lr}
 8000fe6:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000fec:	2800      	cmp	r0, #0
 8000fee:	f000 80fb 	beq.w	80011e8 <HAL_ADC_Init+0x204>
 8000ff2:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ff4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000ff6:	f013 0f10 	tst.w	r3, #16
 8000ffa:	d151      	bne.n	80010a0 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ffc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000ffe:	b1ab      	cbz	r3, 800102c <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800100a:	d003      	beq.n	8001014 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800100c:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800100e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001012:	d046      	beq.n	80010a2 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8001014:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001016:	f023 0312 	bic.w	r3, r3, #18
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001020:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001028:	2001      	movs	r0, #1
 800102a:	e03a      	b.n	80010a2 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800102c:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800102e:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8001030:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8001032:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8001036:	f004 f9a1 	bl	800537c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001042:	d001      	beq.n	8001048 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2000      	movs	r0, #0
 8001046:	e7dc      	b.n	8001002 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001048:	4620      	mov	r0, r4
 800104a:	f7ff ff0d 	bl	8000e68 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800104e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001050:	f013 0f10 	tst.w	r3, #16
 8001054:	d1d5      	bne.n	8001002 <HAL_ADC_Init+0x1e>
 8001056:	2800      	cmp	r0, #0
 8001058:	d1d3      	bne.n	8001002 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800105a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800105c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001060:	f023 0302 	bic.w	r3, r3, #2
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800106a:	6822      	ldr	r2, [r4, #0]
 800106c:	6893      	ldr	r3, [r2, #8]
 800106e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001072:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	6893      	ldr	r3, [r2, #8]
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800107e:	4b5b      	ldr	r3, [pc, #364]	; (80011ec <HAL_ADC_Init+0x208>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <HAL_ADC_Init+0x20c>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	0c9b      	lsrs	r3, r3, #18
 800108a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800108e:	005a      	lsls	r2, r3, #1
 8001090:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001092:	9b00      	ldr	r3, [sp, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0b4      	beq.n	8001002 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8001098:	9b00      	ldr	r3, [sp, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	e7f8      	b.n	8001092 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a0:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010a4:	f013 0f10 	tst.w	r3, #16
 80010a8:	f040 8095 	bne.w	80011d6 <HAL_ADC_Init+0x1f2>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	f040 8092 	bne.w	80011d6 <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80010b6:	f013 0304 	ands.w	r3, r3, #4
 80010ba:	f040 808c 	bne.w	80011d6 <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80010c0:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80010c4:	f041 0102 	orr.w	r1, r1, #2
 80010c8:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010ca:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80010ce:	d055      	beq.n	800117c <HAL_ADC_Init+0x198>
 80010d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80010d4:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010d6:	6891      	ldr	r1, [r2, #8]
 80010d8:	f001 0103 	and.w	r1, r1, #3
 80010dc:	2901      	cmp	r1, #1
 80010de:	d050      	beq.n	8001182 <HAL_ADC_Init+0x19e>
 80010e0:	2200      	movs	r2, #0
 80010e2:	b972      	cbnz	r2, 8001102 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010e4:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010e6:	b12d      	cbz	r5, 80010f4 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80010e8:	68a9      	ldr	r1, [r5, #8]
 80010ea:	f001 0103 	and.w	r1, r1, #3
 80010ee:	2901      	cmp	r1, #1
 80010f0:	d04f      	beq.n	8001192 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010f2:	b932      	cbnz	r2, 8001102 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010f4:	493f      	ldr	r1, [pc, #252]	; (80011f4 <HAL_ADC_Init+0x210>)
 80010f6:	688a      	ldr	r2, [r1, #8]
 80010f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80010fc:	6865      	ldr	r5, [r4, #4]
 80010fe:	432a      	orrs	r2, r5
 8001100:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001102:	69e2      	ldr	r2, [r4, #28]
 8001104:	0351      	lsls	r1, r2, #13
 8001106:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001108:	2d01      	cmp	r5, #1
 800110a:	d001      	beq.n	8001110 <HAL_ADC_Init+0x12c>
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	430b      	orrs	r3, r1
 8001112:	68e1      	ldr	r1, [r4, #12]
 8001114:	430b      	orrs	r3, r1
 8001116:	68a1      	ldr	r1, [r4, #8]
 8001118:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800111a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800111c:	2901      	cmp	r1, #1
 800111e:	d03e      	beq.n	800119e <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001120:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001122:	2a01      	cmp	r2, #1
 8001124:	d002      	beq.n	800112c <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001126:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001128:	430a      	orrs	r2, r1
 800112a:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800112c:	6822      	ldr	r2, [r4, #0]
 800112e:	6891      	ldr	r1, [r2, #8]
 8001130:	f011 0f0c 	tst.w	r1, #12
 8001134:	d10b      	bne.n	800114e <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001136:	68d1      	ldr	r1, [r2, #12]
 8001138:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800113c:	f021 0102 	bic.w	r1, r1, #2
 8001140:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001142:	69a1      	ldr	r1, [r4, #24]
 8001144:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001146:	0052      	lsls	r2, r2, #1
 8001148:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800114c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 800114e:	6821      	ldr	r1, [r4, #0]
 8001150:	68cd      	ldr	r5, [r1, #12]
 8001152:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <HAL_ADC_Init+0x214>)
 8001154:	402a      	ands	r2, r5
 8001156:	4313      	orrs	r3, r2
 8001158:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800115a:	6923      	ldr	r3, [r4, #16]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d031      	beq.n	80011c4 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001164:	f023 030f 	bic.w	r3, r3, #15
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800116a:	2300      	movs	r3, #0
 800116c:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800116e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001170:	f023 0303 	bic.w	r3, r3, #3
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6463      	str	r3, [r4, #68]	; 0x44
 800117a:	e033      	b.n	80011e4 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800117c:	491f      	ldr	r1, [pc, #124]	; (80011fc <HAL_ADC_Init+0x218>)
 800117e:	9101      	str	r1, [sp, #4]
 8001180:	e7a9      	b.n	80010d6 <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	f012 0f01 	tst.w	r2, #1
 8001188:	d101      	bne.n	800118e <HAL_ADC_Init+0x1aa>
 800118a:	2200      	movs	r2, #0
 800118c:	e7a9      	b.n	80010e2 <HAL_ADC_Init+0xfe>
 800118e:	2201      	movs	r2, #1
 8001190:	e7a7      	b.n	80010e2 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001192:	6829      	ldr	r1, [r5, #0]
 8001194:	f011 0f01 	tst.w	r1, #1
 8001198:	d0ab      	beq.n	80010f2 <HAL_ADC_Init+0x10e>
 800119a:	2201      	movs	r2, #1
 800119c:	e7a9      	b.n	80010f2 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800119e:	b932      	cbnz	r2, 80011ae <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011a2:	3a01      	subs	r2, #1
 80011a4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	e7b8      	b.n	8001120 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 80011ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80011b0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80011b4:	f042 0220 	orr.w	r2, r2, #32
 80011b8:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	64a2      	str	r2, [r4, #72]	; 0x48
 80011c2:	e7ad      	b.n	8001120 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011c4:	6821      	ldr	r1, [r4, #0]
 80011c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011c8:	f023 030f 	bic.w	r3, r3, #15
 80011cc:	6a22      	ldr	r2, [r4, #32]
 80011ce:	3a01      	subs	r2, #1
 80011d0:	4313      	orrs	r3, r2
 80011d2:	630b      	str	r3, [r1, #48]	; 0x30
 80011d4:	e7c9      	b.n	800116a <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 80011d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011d8:	f023 0312 	bic.w	r3, r3, #18
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 80011e2:	2001      	movs	r0, #1
}
 80011e4:	b017      	add	sp, #92	; 0x5c
 80011e6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
 80011ea:	e7fb      	b.n	80011e4 <HAL_ADC_Init+0x200>
 80011ec:	20000000 	.word	0x20000000
 80011f0:	431bde83 	.word	0x431bde83
 80011f4:	50000300 	.word	0x50000300
 80011f8:	fff0c007 	.word	0xfff0c007
 80011fc:	50000100 	.word	0x50000100

08001200 <HAL_ADC_Start_DMA>:
{
 8001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001202:	6804      	ldr	r4, [r0, #0]
 8001204:	68a4      	ldr	r4, [r4, #8]
 8001206:	f014 0f04 	tst.w	r4, #4
 800120a:	d002      	beq.n	8001212 <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_BUSY;
 800120c:	2502      	movs	r5, #2
}
 800120e:	4628      	mov	r0, r5
 8001210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001212:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001216:	2b01      	cmp	r3, #1
 8001218:	d07e      	beq.n	8001318 <HAL_ADC_Start_DMA+0x118>
 800121a:	2301      	movs	r3, #1
 800121c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001220:	4b3e      	ldr	r3, [pc, #248]	; (800131c <HAL_ADC_Start_DMA+0x11c>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f013 0f1f 	tst.w	r3, #31
 8001228:	d004      	beq.n	8001234 <HAL_ADC_Start_DMA+0x34>
      __HAL_UNLOCK(hadc);
 800122a:	2300      	movs	r3, #0
 800122c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8001230:	2501      	movs	r5, #1
 8001232:	e7ec      	b.n	800120e <HAL_ADC_Start_DMA+0xe>
 8001234:	4617      	mov	r7, r2
 8001236:	460e      	mov	r6, r1
 8001238:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 800123a:	f7ff fe59 	bl	8000ef0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800123e:	4605      	mov	r5, r0
 8001240:	2800      	cmp	r0, #0
 8001242:	d165      	bne.n	8001310 <HAL_ADC_Start_DMA+0x110>
        ADC_STATE_CLR_SET(hadc->State,
 8001244:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_ADC_Start_DMA+0x11c>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f013 0f1f 	tst.w	r3, #31
 800125c:	d038      	beq.n	80012d0 <HAL_ADC_Start_DMA+0xd0>
 800125e:	6822      	ldr	r2, [r4, #0]
 8001260:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001264:	d034      	beq.n	80012d0 <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001266:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800126c:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_ADC_Start_DMA+0x120>)
 8001270:	429a      	cmp	r2, r3
 8001272:	d03d      	beq.n	80012f0 <HAL_ADC_Start_DMA+0xf0>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001274:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001276:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800127a:	d046      	beq.n	800130a <HAL_ADC_Start_DMA+0x10a>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800127c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800127e:	f023 0306 	bic.w	r3, r3, #6
 8001282:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 8001284:	2300      	movs	r3, #0
 8001286:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800128a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800128c:	4a25      	ldr	r2, [pc, #148]	; (8001324 <HAL_ADC_Start_DMA+0x124>)
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001290:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <HAL_ADC_Start_DMA+0x128>)
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001296:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001298:	4a24      	ldr	r2, [pc, #144]	; (800132c <HAL_ADC_Start_DMA+0x12c>)
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	221c      	movs	r2, #28
 80012a0:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012a2:	6822      	ldr	r2, [r4, #0]
 80012a4:	6853      	ldr	r3, [r2, #4]
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012ac:	6822      	ldr	r2, [r4, #0]
 80012ae:	68d3      	ldr	r3, [r2, #12]
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012b6:	6821      	ldr	r1, [r4, #0]
 80012b8:	463b      	mov	r3, r7
 80012ba:	4632      	mov	r2, r6
 80012bc:	3140      	adds	r1, #64	; 0x40
 80012be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012c0:	f000 fb10 	bl	80018e4 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80012c4:	6822      	ldr	r2, [r4, #0]
 80012c6:	6893      	ldr	r3, [r2, #8]
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6093      	str	r3, [r2, #8]
 80012ce:	e79e      	b.n	800120e <HAL_ADC_Start_DMA+0xe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012d6:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012e0:	d0c8      	beq.n	8001274 <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ec:	6463      	str	r3, [r4, #68]	; 0x44
 80012ee:	e7c1      	b.n	8001274 <HAL_ADC_Start_DMA+0x74>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012fa:	d0bb      	beq.n	8001274 <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001302:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001306:	6463      	str	r3, [r4, #68]	; 0x44
 8001308:	e7b4      	b.n	8001274 <HAL_ADC_Start_DMA+0x74>
          ADC_CLEAR_ERRORCODE(hadc);
 800130a:	2300      	movs	r3, #0
 800130c:	64a3      	str	r3, [r4, #72]	; 0x48
 800130e:	e7b9      	b.n	8001284 <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 8001310:	2300      	movs	r3, #0
 8001312:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001316:	e77a      	b.n	800120e <HAL_ADC_Start_DMA+0xe>
    __HAL_LOCK(hadc);
 8001318:	2502      	movs	r5, #2
 800131a:	e778      	b.n	800120e <HAL_ADC_Start_DMA+0xe>
 800131c:	50000300 	.word	0x50000300
 8001320:	50000100 	.word	0x50000100
 8001324:	08000f99 	.word	0x08000f99
 8001328:	08000f8f 	.word	0x08000f8f
 800132c:	08000f75 	.word	0x08000f75

08001330 <HAL_ADCEx_Calibration_Start>:
{
 8001330:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001332:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <HAL_ADCEx_Calibration_Start+0x10>
 800133a:	2502      	movs	r5, #2
}
 800133c:	4628      	mov	r0, r5
 800133e:	bd70      	pop	{r4, r5, r6, pc}
 8001340:	460e      	mov	r6, r1
 8001342:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001344:	2301      	movs	r3, #1
 8001346:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_Disable(hadc);
 800134a:	f7ff fd8d 	bl	8000e68 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 800134e:	4605      	mov	r5, r0
 8001350:	2800      	cmp	r0, #0
 8001352:	d130      	bne.n	80013b6 <HAL_ADCEx_Calibration_Start+0x86>
    hadc->State = HAL_ADC_STATE_READY;
 8001354:	2301      	movs	r3, #1
 8001356:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	6893      	ldr	r3, [r2, #8]
 800135c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001360:	6093      	str	r3, [r2, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001362:	2e01      	cmp	r6, #1
 8001364:	d01b      	beq.n	800139e <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001366:	6822      	ldr	r2, [r4, #0]
 8001368:	6893      	ldr	r3, [r2, #8]
 800136a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001370:	f7ff fd72 	bl	8000e58 <HAL_GetTick>
 8001374:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	da15      	bge.n	80013aa <HAL_ADCEx_Calibration_Start+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800137e:	f7ff fd6b 	bl	8000e58 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	280a      	cmp	r0, #10
 8001386:	d9f6      	bls.n	8001376 <HAL_ADCEx_Calibration_Start+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8001388:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800138a:	f023 0312 	bic.w	r3, r3, #18
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001394:	2300      	movs	r3, #0
 8001396:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800139a:	2501      	movs	r5, #1
 800139c:	e7ce      	b.n	800133c <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800139e:	6822      	ldr	r2, [r4, #0]
 80013a0:	6893      	ldr	r3, [r2, #8]
 80013a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013a6:	6093      	str	r3, [r2, #8]
 80013a8:	e7dd      	b.n	8001366 <HAL_ADCEx_Calibration_Start+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 80013aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ac:	f023 0303 	bic.w	r3, r3, #3
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80013b6:	2300      	movs	r3, #0
 80013b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 80013bc:	e7be      	b.n	800133c <HAL_ADCEx_Calibration_Start+0xc>
	...

080013c0 <HAL_ADC_ConfigChannel>:
{
 80013c0:	b470      	push	{r4, r5, r6}
 80013c2:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80013c4:	2200      	movs	r2, #0
 80013c6:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 80013c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80013cc:	2a01      	cmp	r2, #1
 80013ce:	f000 81ad 	beq.w	800172c <HAL_ADC_ConfigChannel+0x36c>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2201      	movs	r2, #1
 80013d6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013da:	6800      	ldr	r0, [r0, #0]
 80013dc:	6882      	ldr	r2, [r0, #8]
 80013de:	f012 0f04 	tst.w	r2, #4
 80013e2:	f040 8196 	bne.w	8001712 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 80013e6:	684a      	ldr	r2, [r1, #4]
 80013e8:	2a04      	cmp	r2, #4
 80013ea:	d831      	bhi.n	8001450 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 80013ec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80013ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013f2:	0055      	lsls	r5, r2, #1
 80013f4:	221f      	movs	r2, #31
 80013f6:	40aa      	lsls	r2, r5
 80013f8:	ea24 0202 	bic.w	r2, r4, r2
 80013fc:	680c      	ldr	r4, [r1, #0]
 80013fe:	40ac      	lsls	r4, r5
 8001400:	4322      	orrs	r2, r4
 8001402:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	6882      	ldr	r2, [r0, #8]
 8001408:	f012 0f0c 	tst.w	r2, #12
 800140c:	d168      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800140e:	680a      	ldr	r2, [r1, #0]
 8001410:	2a09      	cmp	r2, #9
 8001412:	d94e      	bls.n	80014b2 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001414:	6984      	ldr	r4, [r0, #24]
 8001416:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800141a:	3a1e      	subs	r2, #30
 800141c:	2507      	movs	r5, #7
 800141e:	4095      	lsls	r5, r2
 8001420:	ea24 0405 	bic.w	r4, r4, r5
 8001424:	688d      	ldr	r5, [r1, #8]
 8001426:	fa05 f202 	lsl.w	r2, r5, r2
 800142a:	4322      	orrs	r2, r4
 800142c:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800142e:	6948      	ldr	r0, [r1, #20]
 8001430:	681c      	ldr	r4, [r3, #0]
 8001432:	68e2      	ldr	r2, [r4, #12]
 8001434:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001438:	0052      	lsls	r2, r2, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 800143e:	6908      	ldr	r0, [r1, #16]
 8001440:	3801      	subs	r0, #1
 8001442:	2803      	cmp	r0, #3
 8001444:	f200 808f 	bhi.w	8001566 <HAL_ADC_ConfigChannel+0x1a6>
 8001448:	e8df f000 	tbb	[pc, r0]
 800144c:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8001450:	2a09      	cmp	r2, #9
 8001452:	d80e      	bhi.n	8001472 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001454:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001456:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800145a:	0055      	lsls	r5, r2, #1
 800145c:	3d1e      	subs	r5, #30
 800145e:	221f      	movs	r2, #31
 8001460:	40aa      	lsls	r2, r5
 8001462:	ea24 0202 	bic.w	r2, r4, r2
 8001466:	680c      	ldr	r4, [r1, #0]
 8001468:	fa04 f505 	lsl.w	r5, r4, r5
 800146c:	432a      	orrs	r2, r5
 800146e:	6342      	str	r2, [r0, #52]	; 0x34
 8001470:	e7c8      	b.n	8001404 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001472:	2a0e      	cmp	r2, #14
 8001474:	d80e      	bhi.n	8001494 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001476:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001478:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800147c:	0055      	lsls	r5, r2, #1
 800147e:	3d3c      	subs	r5, #60	; 0x3c
 8001480:	221f      	movs	r2, #31
 8001482:	40aa      	lsls	r2, r5
 8001484:	ea24 0202 	bic.w	r2, r4, r2
 8001488:	680c      	ldr	r4, [r1, #0]
 800148a:	fa04 f505 	lsl.w	r5, r4, r5
 800148e:	432a      	orrs	r2, r5
 8001490:	6382      	str	r2, [r0, #56]	; 0x38
 8001492:	e7b7      	b.n	8001404 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001494:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001496:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800149a:	0055      	lsls	r5, r2, #1
 800149c:	3d5a      	subs	r5, #90	; 0x5a
 800149e:	221f      	movs	r2, #31
 80014a0:	40aa      	lsls	r2, r5
 80014a2:	ea24 0202 	bic.w	r2, r4, r2
 80014a6:	680c      	ldr	r4, [r1, #0]
 80014a8:	fa04 f505 	lsl.w	r5, r4, r5
 80014ac:	432a      	orrs	r2, r5
 80014ae:	63c2      	str	r2, [r0, #60]	; 0x3c
 80014b0:	e7a8      	b.n	8001404 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014b2:	6944      	ldr	r4, [r0, #20]
 80014b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80014b8:	2507      	movs	r5, #7
 80014ba:	4095      	lsls	r5, r2
 80014bc:	ea24 0405 	bic.w	r4, r4, r5
 80014c0:	688d      	ldr	r5, [r1, #8]
 80014c2:	fa05 f202 	lsl.w	r2, r5, r2
 80014c6:	4322      	orrs	r2, r4
 80014c8:	6142      	str	r2, [r0, #20]
 80014ca:	e7b0      	b.n	800142e <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014cc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80014ce:	4d98      	ldr	r5, [pc, #608]	; (8001730 <HAL_ADC_ConfigChannel+0x370>)
 80014d0:	4005      	ands	r5, r0
 80014d2:	6808      	ldr	r0, [r1, #0]
 80014d4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80014d8:	4315      	orrs	r5, r2
 80014da:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80014de:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	6882      	ldr	r2, [r0, #8]
 80014e4:	f002 0203 	and.w	r2, r2, #3
 80014e8:	2a01      	cmp	r2, #1
 80014ea:	d06f      	beq.n	80015cc <HAL_ADC_ConfigChannel+0x20c>
 80014ec:	2200      	movs	r2, #0
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	f040 811a 	bne.w	8001728 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014f4:	68cc      	ldr	r4, [r1, #12]
 80014f6:	2c01      	cmp	r4, #1
 80014f8:	d070      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014fa:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80014fe:	680e      	ldr	r6, [r1, #0]
 8001500:	2501      	movs	r5, #1
 8001502:	40b5      	lsls	r5, r6
 8001504:	ea24 0405 	bic.w	r4, r4, r5
 8001508:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800150c:	6809      	ldr	r1, [r1, #0]
 800150e:	2910      	cmp	r1, #16
 8001510:	f000 808d 	beq.w	800162e <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001514:	2911      	cmp	r1, #17
 8001516:	f000 80af 	beq.w	8001678 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800151a:	2912      	cmp	r1, #18
 800151c:	f000 80b2 	beq.w	8001684 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001520:	2000      	movs	r0, #0
 8001522:	e0fb      	b.n	800171c <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001524:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001526:	4d82      	ldr	r5, [pc, #520]	; (8001730 <HAL_ADC_ConfigChannel+0x370>)
 8001528:	4005      	ands	r5, r0
 800152a:	6808      	ldr	r0, [r1, #0]
 800152c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001530:	4315      	orrs	r5, r2
 8001532:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001536:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001538:	e7d2      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800153a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800153c:	4d7c      	ldr	r5, [pc, #496]	; (8001730 <HAL_ADC_ConfigChannel+0x370>)
 800153e:	4005      	ands	r5, r0
 8001540:	6808      	ldr	r0, [r1, #0]
 8001542:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001546:	4315      	orrs	r5, r2
 8001548:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800154c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 800154e:	e7c7      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001550:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001552:	4877      	ldr	r0, [pc, #476]	; (8001730 <HAL_ADC_ConfigChannel+0x370>)
 8001554:	4028      	ands	r0, r5
 8001556:	680d      	ldr	r5, [r1, #0]
 8001558:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800155c:	4302      	orrs	r2, r0
 800155e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001562:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001564:	e7bc      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001566:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001568:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800156c:	6808      	ldr	r0, [r1, #0]
 800156e:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001572:	d01c      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001578:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800157c:	680c      	ldr	r4, [r1, #0]
 800157e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001582:	d019      	beq.n	80015b8 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001588:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800158c:	680c      	ldr	r4, [r1, #0]
 800158e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001592:	d016      	beq.n	80015c2 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001598:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800159c:	680c      	ldr	r4, [r1, #0]
 800159e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80015a2:	d19d      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015a4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80015a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015aa:	66c2      	str	r2, [r0, #108]	; 0x6c
 80015ac:	e798      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80015ae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80015b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015b4:	6622      	str	r2, [r4, #96]	; 0x60
 80015b6:	e7dd      	b.n	8001574 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80015b8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80015ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015be:	6642      	str	r2, [r0, #100]	; 0x64
 80015c0:	e7e0      	b.n	8001584 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015c2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80015c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015c8:	6682      	str	r2, [r0, #104]	; 0x68
 80015ca:	e7e3      	b.n	8001594 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015cc:	6802      	ldr	r2, [r0, #0]
 80015ce:	f012 0f01 	tst.w	r2, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x218>
 80015d4:	2200      	movs	r2, #0
 80015d6:	e78a      	b.n	80014ee <HAL_ADC_ConfigChannel+0x12e>
 80015d8:	2201      	movs	r2, #1
 80015da:	e788      	b.n	80014ee <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015dc:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80015e0:	680e      	ldr	r6, [r1, #0]
 80015e2:	2501      	movs	r5, #1
 80015e4:	40b5      	lsls	r5, r6
 80015e6:	432c      	orrs	r4, r5
 80015e8:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015ec:	6808      	ldr	r0, [r1, #0]
 80015ee:	2809      	cmp	r0, #9
 80015f0:	d90e      	bls.n	8001610 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 80015f2:	681e      	ldr	r6, [r3, #0]
 80015f4:	69b4      	ldr	r4, [r6, #24]
 80015f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80015fa:	381b      	subs	r0, #27
 80015fc:	2507      	movs	r5, #7
 80015fe:	4085      	lsls	r5, r0
 8001600:	ea24 0405 	bic.w	r4, r4, r5
 8001604:	688d      	ldr	r5, [r1, #8]
 8001606:	fa05 f000 	lsl.w	r0, r5, r0
 800160a:	4320      	orrs	r0, r4
 800160c:	61b0      	str	r0, [r6, #24]
 800160e:	e77d      	b.n	800150c <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001610:	681e      	ldr	r6, [r3, #0]
 8001612:	6974      	ldr	r4, [r6, #20]
 8001614:	3001      	adds	r0, #1
 8001616:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800161a:	2507      	movs	r5, #7
 800161c:	4085      	lsls	r5, r0
 800161e:	ea24 0405 	bic.w	r4, r4, r5
 8001622:	688d      	ldr	r5, [r1, #8]
 8001624:	fa05 f000 	lsl.w	r0, r5, r0
 8001628:	4320      	orrs	r0, r4
 800162a:	6170      	str	r0, [r6, #20]
 800162c:	e76e      	b.n	800150c <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800162e:	4841      	ldr	r0, [pc, #260]	; (8001734 <HAL_ADC_ConfigChannel+0x374>)
 8001630:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001632:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001636:	f47f af6d 	bne.w	8001514 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800163a:	681c      	ldr	r4, [r3, #0]
 800163c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001640:	d027      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x2d2>
 8001642:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001646:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001648:	68a0      	ldr	r0, [r4, #8]
 800164a:	f000 0003 	and.w	r0, r0, #3
 800164e:	2801      	cmp	r0, #1
 8001650:	d022      	beq.n	8001698 <HAL_ADC_ConfigChannel+0x2d8>
 8001652:	2a00      	cmp	r2, #0
 8001654:	d157      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001656:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001658:	b135      	cbz	r5, 8001668 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800165a:	68a8      	ldr	r0, [r5, #8]
 800165c:	f000 0003 	and.w	r0, r0, #3
 8001660:	2801      	cmp	r0, #1
 8001662:	d01f      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001664:	2a00      	cmp	r2, #0
 8001666:	d14e      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001668:	2910      	cmp	r1, #16
 800166a:	d021      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800166c:	2911      	cmp	r1, #17
 800166e:	d039      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001670:	2912      	cmp	r1, #18
 8001672:	d041      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	2000      	movs	r0, #0
 8001676:	e051      	b.n	800171c <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001678:	482e      	ldr	r0, [pc, #184]	; (8001734 <HAL_ADC_ConfigChannel+0x374>)
 800167a:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800167c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001680:	d0db      	beq.n	800163a <HAL_ADC_ConfigChannel+0x27a>
 8001682:	e74a      	b.n	800151a <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001684:	482b      	ldr	r0, [pc, #172]	; (8001734 <HAL_ADC_ConfigChannel+0x374>)
 8001686:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001688:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800168c:	d0d5      	beq.n	800163a <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168e:	2000      	movs	r0, #0
 8001690:	e044      	b.n	800171c <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001692:	4829      	ldr	r0, [pc, #164]	; (8001738 <HAL_ADC_ConfigChannel+0x378>)
 8001694:	9001      	str	r0, [sp, #4]
 8001696:	e7d7      	b.n	8001648 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	f010 0f01 	tst.w	r0, #1
 800169e:	d0d8      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x292>
 80016a0:	2201      	movs	r2, #1
 80016a2:	e7d6      	b.n	8001652 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016a4:	6828      	ldr	r0, [r5, #0]
 80016a6:	f010 0f01 	tst.w	r0, #1
 80016aa:	d0db      	beq.n	8001664 <HAL_ADC_ConfigChannel+0x2a4>
 80016ac:	2201      	movs	r2, #1
 80016ae:	e7d9      	b.n	8001664 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016b0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80016b4:	d1da      	bne.n	800166c <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016b6:	491f      	ldr	r1, [pc, #124]	; (8001734 <HAL_ADC_ConfigChannel+0x374>)
 80016b8:	688a      	ldr	r2, [r1, #8]
 80016ba:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016be:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_ADC_ConfigChannel+0x37c>)
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	491e      	ldr	r1, [pc, #120]	; (8001740 <HAL_ADC_ConfigChannel+0x380>)
 80016c6:	fbb2 f1f1 	udiv	r1, r2, r1
 80016ca:	220a      	movs	r2, #10
 80016cc:	fb02 f201 	mul.w	r2, r2, r1
 80016d0:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80016d2:	e002      	b.n	80016da <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 80016d4:	9a00      	ldr	r2, [sp, #0]
 80016d6:	3a01      	subs	r2, #1
 80016d8:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80016da:	9a00      	ldr	r2, [sp, #0]
 80016dc:	2a00      	cmp	r2, #0
 80016de:	d1f9      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e0:	2000      	movs	r0, #0
 80016e2:	e01b      	b.n	800171c <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80016e4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80016e8:	d1c2      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80016ea:	4912      	ldr	r1, [pc, #72]	; (8001734 <HAL_ADC_ConfigChannel+0x374>)
 80016ec:	688a      	ldr	r2, [r1, #8]
 80016ee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80016f2:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80016f6:	e011      	b.n	800171c <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_ADC_ConfigChannel+0x374>)
 80016fa:	688a      	ldr	r2, [r1, #8]
 80016fc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001700:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001702:	2000      	movs	r0, #0
 8001704:	e00a      	b.n	800171c <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001708:	f042 0220 	orr.w	r2, r2, #32
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800170e:	2001      	movs	r0, #1
 8001710:	e004      	b.n	800171c <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001714:	f042 0220 	orr.w	r2, r2, #32
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800171a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001722:	b017      	add	sp, #92	; 0x5c
 8001724:	bc70      	pop	{r4, r5, r6}
 8001726:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2000      	movs	r0, #0
 800172a:	e7f7      	b.n	800171c <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 800172c:	2002      	movs	r0, #2
 800172e:	e7f8      	b.n	8001722 <HAL_ADC_ConfigChannel+0x362>
 8001730:	83fff000 	.word	0x83fff000
 8001734:	50000300 	.word	0x50000300
 8001738:	50000100 	.word	0x50000100
 800173c:	20000000 	.word	0x20000000
 8001740:	000f4240 	.word	0x000f4240

08001744 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001746:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001748:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001750:	0200      	lsls	r0, r0, #8
 8001752:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001756:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001758:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800175c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001760:	60d0      	str	r0, [r2, #12]
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_NVIC_SetPriority+0x5c>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001772:	f1c3 0407 	rsb	r4, r3, #7
 8001776:	2c04      	cmp	r4, #4
 8001778:	bf28      	it	cs
 800177a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177c:	1d1d      	adds	r5, r3, #4
 800177e:	2d06      	cmp	r5, #6
 8001780:	d917      	bls.n	80017b2 <HAL_NVIC_SetPriority+0x4a>
 8001782:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	2501      	movs	r5, #1
 8001786:	fa05 f404 	lsl.w	r4, r5, r4
 800178a:	3c01      	subs	r4, #1
 800178c:	4021      	ands	r1, r4
 800178e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	fa05 f303 	lsl.w	r3, r5, r3
 8001794:	3b01      	subs	r3, #1
 8001796:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800179a:	2800      	cmp	r0, #0
 800179c:	db0b      	blt.n	80017b6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	0109      	lsls	r1, r1, #4
 80017a0:	b2c9      	uxtb	r1, r1
 80017a2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017a6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017aa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017ae:	bc30      	pop	{r4, r5}
 80017b0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	2300      	movs	r3, #0
 80017b4:	e7e6      	b.n	8001784 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	f000 000f 	and.w	r0, r0, #15
 80017ba:	0109      	lsls	r1, r1, #4
 80017bc:	b2c9      	uxtb	r1, r1
 80017be:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <HAL_NVIC_SetPriority+0x60>)
 80017c0:	5419      	strb	r1, [r3, r0]
 80017c2:	e7f4      	b.n	80017ae <HAL_NVIC_SetPriority+0x46>
 80017c4:	e000ed00 	.word	0xe000ed00
 80017c8:	e000ed14 	.word	0xe000ed14

080017cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017cc:	0942      	lsrs	r2, r0, #5
 80017ce:	f000 001f 	and.w	r0, r0, #31
 80017d2:	2301      	movs	r3, #1
 80017d4:	fa03 f000 	lsl.w	r0, r3, r0
 80017d8:	4b01      	ldr	r3, [pc, #4]	; (80017e0 <HAL_NVIC_EnableIRQ+0x14>)
 80017da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	3801      	subs	r0, #1
 80017e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017ea:	d20a      	bcs.n	8001802 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_SYSTICK_Config+0x24>)
 80017ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	21f0      	movs	r1, #240	; 0xf0
 80017f2:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_SYSTICK_Config+0x28>)
 80017f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	2000      	movs	r0, #0
 80017fa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001810:	2804      	cmp	r0, #4
 8001812:	d005      	beq.n	8001820 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001820:	4a02      	ldr	r2, [pc, #8]	; (800182c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001822:	6813      	ldr	r3, [r2, #0]
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4770      	bx	lr
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001830:	4770      	bx	lr

08001832 <HAL_SYSTICK_IRQHandler>:
{
 8001832:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001834:	f7ff fffc 	bl	8001830 <HAL_SYSTICK_Callback>
 8001838:	bd08      	pop	{r3, pc}

0800183a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800183a:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800183c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800183e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001840:	2401      	movs	r4, #1
 8001842:	40b4      	lsls	r4, r6
 8001844:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001846:	6804      	ldr	r4, [r0, #0]
 8001848:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800184a:	6843      	ldr	r3, [r0, #4]
 800184c:	2b10      	cmp	r3, #16
 800184e:	d005      	beq.n	800185c <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001850:	6803      	ldr	r3, [r0, #0]
 8001852:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001854:	6803      	ldr	r3, [r0, #0]
 8001856:	60da      	str	r2, [r3, #12]
  }
}
 8001858:	bc70      	pop	{r4, r5, r6}
 800185a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800185c:	6803      	ldr	r3, [r0, #0]
 800185e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001860:	6803      	ldr	r3, [r0, #0]
 8001862:	60d9      	str	r1, [r3, #12]
 8001864:	e7f8      	b.n	8001858 <DMA_SetConfig+0x1e>
	...

08001868 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001868:	6802      	ldr	r2, [r0, #0]
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <DMA_CalcBaseAndBitshift+0x18>)
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <DMA_CalcBaseAndBitshift+0x1c>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800187a:	4b03      	ldr	r3, [pc, #12]	; (8001888 <DMA_CalcBaseAndBitshift+0x20>)
 800187c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800187e:	4770      	bx	lr
 8001880:	bffdfff8 	.word	0xbffdfff8
 8001884:	cccccccd 	.word	0xcccccccd
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_DMA_Init>:
  if(NULL == hdma)
 800188c:	b340      	cbz	r0, 80018e0 <HAL_DMA_Init+0x54>
{ 
 800188e:	b510      	push	{r4, lr}
 8001890:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001892:	2302      	movs	r3, #2
 8001894:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001898:	6801      	ldr	r1, [r0, #0]
 800189a:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800189c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80018a0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80018a4:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 80018a8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018aa:	68e0      	ldr	r0, [r4, #12]
 80018ac:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ae:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	6960      	ldr	r0, [r4, #20]
 80018b4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ba:	69e0      	ldr	r0, [r4, #28]
 80018bc:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80018be:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80018c0:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff ffd0 	bl	8001868 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 80018c8:	2000      	movs	r0, #0
 80018ca:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80018cc:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80018ce:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80018d0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80018da:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 80018de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018e0:	2001      	movs	r0, #1
 80018e2:	4770      	bx	lr

080018e4 <HAL_DMA_Start_IT>:
{
 80018e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80018e6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80018ea:	2c01      	cmp	r4, #1
 80018ec:	d032      	beq.n	8001954 <HAL_DMA_Start_IT+0x70>
 80018ee:	2401      	movs	r4, #1
 80018f0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80018f4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80018f8:	2c01      	cmp	r4, #1
 80018fa:	d004      	beq.n	8001906 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80018fc:	2300      	movs	r3, #0
 80018fe:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001902:	2002      	movs	r0, #2
 8001904:	bd38      	pop	{r3, r4, r5, pc}
 8001906:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001908:	2002      	movs	r0, #2
 800190a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800190e:	2000      	movs	r0, #0
 8001910:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001912:	6825      	ldr	r5, [r4, #0]
 8001914:	6828      	ldr	r0, [r5, #0]
 8001916:	f020 0001 	bic.w	r0, r0, #1
 800191a:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff ff8c 	bl	800183a <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001922:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001924:	b15b      	cbz	r3, 800193e <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	6813      	ldr	r3, [r2, #0]
 800192a:	f043 030e 	orr.w	r3, r3, #14
 800192e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001930:	6822      	ldr	r2, [r4, #0]
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800193a:	2000      	movs	r0, #0
 800193c:	bd38      	pop	{r3, r4, r5, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800193e:	6822      	ldr	r2, [r4, #0]
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	f043 030a 	orr.w	r3, r3, #10
 8001946:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001948:	6822      	ldr	r2, [r4, #0]
 800194a:	6813      	ldr	r3, [r2, #0]
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e7ed      	b.n	8001930 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001954:	2002      	movs	r0, #2
} 
 8001956:	bd38      	pop	{r3, r4, r5, pc}

08001958 <HAL_DMA_Abort_IT>:
{  
 8001958:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800195a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001962:	2304      	movs	r3, #4
 8001964:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001966:	2001      	movs	r0, #1
 8001968:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800196a:	6802      	ldr	r2, [r0, #0]
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f023 030e 	bic.w	r3, r3, #14
 8001972:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001974:	6802      	ldr	r2, [r0, #0]
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800197e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001980:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001982:	2201      	movs	r2, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800198a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800198e:	2300      	movs	r3, #0
 8001990:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001994:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001996:	b113      	cbz	r3, 800199e <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001998:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	2000      	movs	r0, #0
 800199c:	bd08      	pop	{r3, pc}
 800199e:	2000      	movs	r0, #0
}
 80019a0:	bd08      	pop	{r3, pc}

080019a2 <HAL_DMA_IRQHandler>:
{
 80019a2:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80019a6:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80019a8:	6804      	ldr	r4, [r0, #0]
 80019aa:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80019ae:	2304      	movs	r3, #4
 80019b0:	408b      	lsls	r3, r1
 80019b2:	421a      	tst	r2, r3
 80019b4:	d014      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x3e>
 80019b6:	f015 0f04 	tst.w	r5, #4
 80019ba:	d011      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x3e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	f013 0f20 	tst.w	r3, #32
 80019c2:	d103      	bne.n	80019cc <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	f023 0304 	bic.w	r3, r3, #4
 80019ca:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80019ce:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80019d0:	2304      	movs	r3, #4
 80019d2:	408b      	lsls	r3, r1
 80019d4:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80019d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d03a      	beq.n	8001a52 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferHalfCpltCallback(hdma);
 80019dc:	4798      	blx	r3
 80019de:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019e0:	2302      	movs	r3, #2
 80019e2:	408b      	lsls	r3, r1
 80019e4:	421a      	tst	r2, r3
 80019e6:	d019      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x7a>
 80019e8:	f015 0f02 	tst.w	r5, #2
 80019ec:	d016      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	f013 0f20 	tst.w	r3, #32
 80019f4:	d106      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x62>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	f023 030a 	bic.w	r3, r3, #10
 80019fc:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001a06:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a08:	2302      	movs	r3, #2
 8001a0a:	408b      	lsls	r3, r1
 8001a0c:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001a14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a16:	b1e3      	cbz	r3, 8001a52 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferCpltCallback(hdma);
 8001a18:	4798      	blx	r3
 8001a1a:	bd38      	pop	{r3, r4, r5, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	fa03 f101 	lsl.w	r1, r3, r1
 8001a22:	420a      	tst	r2, r1
 8001a24:	d015      	beq.n	8001a52 <HAL_DMA_IRQHandler+0xb0>
 8001a26:	f015 0f08 	tst.w	r5, #8
 8001a2a:	d012      	beq.n	8001a52 <HAL_DMA_IRQHandler+0xb0>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	f023 030e 	bic.w	r3, r3, #14
 8001a32:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a34:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001a36:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001a38:	2301      	movs	r3, #1
 8001a3a:	fa03 f202 	lsl.w	r2, r3, r2
 8001a3e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a40:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001a42:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001a46:	2300      	movs	r3, #0
 8001a48:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001a4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a4e:	b103      	cbz	r3, 8001a52 <HAL_DMA_IRQHandler+0xb0>
    	hdma->XferErrorCallback(hdma);
 8001a50:	4798      	blx	r3
 8001a52:	bd38      	pop	{r3, r4, r5, pc}

08001a54 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a54:	2200      	movs	r2, #0
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <FLASH_Program_HalfWord+0x14>)
 8001a58:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <FLASH_Program_HalfWord+0x18>)
 8001a5c:	6913      	ldr	r3, [r2, #16]
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001a64:	8001      	strh	r1, [r0, #0]
 8001a66:	4770      	bx	lr
 8001a68:	200002f8 	.word	0x200002f8
 8001a6c:	40022000 	.word	0x40022000

08001a70 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <FLASH_SetErrorCode+0x38>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f013 0f10 	tst.w	r3, #16
 8001a78:	d014      	beq.n	8001aa4 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <FLASH_SetErrorCode+0x3c>)
 8001a7c:	69d3      	ldr	r3, [r2, #28]
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001a84:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <FLASH_SetErrorCode+0x38>)
 8001a88:	68d2      	ldr	r2, [r2, #12]
 8001a8a:	f012 0f04 	tst.w	r2, #4
 8001a8e:	d006      	beq.n	8001a9e <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <FLASH_SetErrorCode+0x3c>)
 8001a92:	69ca      	ldr	r2, [r1, #28]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a9e:	4a02      	ldr	r2, [pc, #8]	; (8001aa8 <FLASH_SetErrorCode+0x38>)
 8001aa0:	60d3      	str	r3, [r2, #12]
 8001aa2:	4770      	bx	lr
  uint32_t flags = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e7ee      	b.n	8001a86 <FLASH_SetErrorCode+0x16>
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	200002f8 	.word	0x200002f8

08001ab0 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_FLASH_Unlock+0x20>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ab8:	d007      	beq.n	8001aca <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_FLASH_Unlock+0x20>)
 8001abc:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <HAL_FLASH_Unlock+0x24>)
 8001abe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ac0:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001ac4:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	4770      	bx	lr
    return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	45670123 	.word	0x45670123

08001ad8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_FLASH_Lock+0x10>)
 8001ada:	6913      	ldr	r3, [r2, #16]
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	6113      	str	r3, [r2, #16]
}
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <FLASH_WaitForLastOperation>:
{
 8001aec:	b538      	push	{r3, r4, r5, lr}
 8001aee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff f9b2 	bl	8000e58 <HAL_GetTick>
 8001af4:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <FLASH_WaitForLastOperation+0x60>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f013 0f01 	tst.w	r3, #1
 8001afe:	d00a      	beq.n	8001b16 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001b00:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001b04:	d0f7      	beq.n	8001af6 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b06:	b1e4      	cbz	r4, 8001b42 <FLASH_WaitForLastOperation+0x56>
 8001b08:	f7ff f9a6 	bl	8000e58 <HAL_GetTick>
 8001b0c:	1b40      	subs	r0, r0, r5
 8001b0e:	4284      	cmp	r4, r0
 8001b10:	d2f1      	bcs.n	8001af6 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001b12:	2003      	movs	r0, #3
 8001b14:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <FLASH_WaitForLastOperation+0x60>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f013 0f20 	tst.w	r3, #32
 8001b1e:	d002      	beq.n	8001b26 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b20:	2220      	movs	r2, #32
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <FLASH_WaitForLastOperation+0x60>)
 8001b24:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <FLASH_WaitForLastOperation+0x60>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f013 0f10 	tst.w	r3, #16
 8001b2e:	d104      	bne.n	8001b3a <FLASH_WaitForLastOperation+0x4e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <FLASH_WaitForLastOperation+0x60>)
 8001b32:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b34:	f013 0f04 	tst.w	r3, #4
 8001b38:	d005      	beq.n	8001b46 <FLASH_WaitForLastOperation+0x5a>
    FLASH_SetErrorCode();
 8001b3a:	f7ff ff99 	bl	8001a70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b3e:	2001      	movs	r0, #1
 8001b40:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8001b42:	2003      	movs	r0, #3
 8001b44:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001b46:	2000      	movs	r0, #0
}
 8001b48:	bd38      	pop	{r3, r4, r5, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40022000 	.word	0x40022000

08001b50 <HAL_FLASH_Program>:
{
 8001b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001b54:	4c23      	ldr	r4, [pc, #140]	; (8001be4 <HAL_FLASH_Program+0x94>)
 8001b56:	7e24      	ldrb	r4, [r4, #24]
 8001b58:	2c01      	cmp	r4, #1
 8001b5a:	d103      	bne.n	8001b64 <HAL_FLASH_Program+0x14>
 8001b5c:	2302      	movs	r3, #2
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b64:	461e      	mov	r6, r3
 8001b66:	4690      	mov	r8, r2
 8001b68:	460f      	mov	r7, r1
 8001b6a:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_FLASH_Program+0x94>)
 8001b70:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b76:	f7ff ffb9 	bl	8001aec <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	bb70      	cbnz	r0, 8001bdc <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b7e:	2c01      	cmp	r4, #1
 8001b80:	d029      	beq.n	8001bd6 <HAL_FLASH_Program+0x86>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b82:	2c02      	cmp	r4, #2
 8001b84:	d024      	beq.n	8001bd0 <HAL_FLASH_Program+0x80>
      nbiterations = 4U;
 8001b86:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001b8a:	2400      	movs	r4, #0
 8001b8c:	454c      	cmp	r4, r9
 8001b8e:	d225      	bcs.n	8001bdc <HAL_FLASH_Program+0x8c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b90:	0121      	lsls	r1, r4, #4
 8001b92:	f1c1 0220 	rsb	r2, r1, #32
 8001b96:	f1a1 0320 	sub.w	r3, r1, #32
 8001b9a:	fa28 f101 	lsr.w	r1, r8, r1
 8001b9e:	fa06 f202 	lsl.w	r2, r6, r2
 8001ba2:	4311      	orrs	r1, r2
 8001ba4:	fa26 f303 	lsr.w	r3, r6, r3
 8001ba8:	4319      	orrs	r1, r3
 8001baa:	b289      	uxth	r1, r1
 8001bac:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8001bb0:	f7ff ff50 	bl	8001a54 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bb8:	f7ff ff98 	bl	8001aec <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_FLASH_Program+0x98>)
 8001bbe:	691d      	ldr	r5, [r3, #16]
 8001bc0:	f025 0501 	bic.w	r5, r5, #1
 8001bc4:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b940      	cbnz	r0, 8001bdc <HAL_FLASH_Program+0x8c>
    for (index = 0U; index < nbiterations; index++)
 8001bca:	3401      	adds	r4, #1
 8001bcc:	b2e4      	uxtb	r4, r4
 8001bce:	e7dd      	b.n	8001b8c <HAL_FLASH_Program+0x3c>
      nbiterations = 2U;
 8001bd0:	f04f 0902 	mov.w	r9, #2
 8001bd4:	e7d9      	b.n	8001b8a <HAL_FLASH_Program+0x3a>
      nbiterations = 1U;
 8001bd6:	f04f 0901 	mov.w	r9, #1
 8001bda:	e7d6      	b.n	8001b8a <HAL_FLASH_Program+0x3a>
  __HAL_UNLOCK(&pFlash);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4a01      	ldr	r2, [pc, #4]	; (8001be4 <HAL_FLASH_Program+0x94>)
 8001be0:	7611      	strb	r1, [r2, #24]
  return status;
 8001be2:	e7bc      	b.n	8001b5e <HAL_FLASH_Program+0xe>
 8001be4:	200002f8 	.word	0x200002f8
 8001be8:	40022000 	.word	0x40022000

08001bec <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bec:	2200      	movs	r2, #0
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <FLASH_MassErase+0x1c>)
 8001bf0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <FLASH_MassErase+0x20>)
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	f042 0204 	orr.w	r2, r2, #4
 8001bfa:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	200002f8 	.word	0x200002f8
 8001c0c:	40022000 	.word	0x40022000

08001c10 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c10:	2200      	movs	r2, #0
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <FLASH_PageErase+0x1c>)
 8001c14:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <FLASH_PageErase+0x20>)
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	f042 0202 	orr.w	r2, r2, #2
 8001c1e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c20:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	4770      	bx	lr
 8001c2c:	200002f8 	.word	0x200002f8
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_FLASHEx_Erase+0x9c>)
 8001c36:	7e1b      	ldrb	r3, [r3, #24]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d045      	beq.n	8001cc8 <HAL_FLASHEx_Erase+0x94>
{
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	460e      	mov	r6, r1
 8001c40:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8001c42:	2201      	movs	r2, #1
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_FLASHEx_Erase+0x9c>)
 8001c46:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c48:	6803      	ldr	r3, [r0, #0]
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d020      	beq.n	8001c90 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c52:	f7ff ff4b 	bl	8001aec <FLASH_WaitForLastOperation>
 8001c56:	bb88      	cbnz	r0, 8001cbc <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001c5e:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c60:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001c62:	68aa      	ldr	r2, [r5, #8]
 8001c64:	686b      	ldr	r3, [r5, #4]
 8001c66:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8001c6a:	429c      	cmp	r4, r3
 8001c6c:	d227      	bcs.n	8001cbe <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff ffce 	bl	8001c10 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c78:	f7ff ff38 	bl	8001aec <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001c7c:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_FLASHEx_Erase+0xa0>)
 8001c7e:	6913      	ldr	r3, [r2, #16]
 8001c80:	f023 0302 	bic.w	r3, r3, #2
 8001c84:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001c86:	4601      	mov	r1, r0
 8001c88:	b9b0      	cbnz	r0, 8001cb8 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8001c8a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8001c8e:	e7e8      	b.n	8001c62 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c94:	f7ff ff2a 	bl	8001aec <FLASH_WaitForLastOperation>
 8001c98:	b108      	cbz	r0, 8001c9e <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	e00f      	b.n	8001cbe <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8001c9e:	f7ff ffa5 	bl	8001bec <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ca2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ca6:	f7ff ff21 	bl	8001aec <FLASH_WaitForLastOperation>
 8001caa:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001cac:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_FLASHEx_Erase+0xa0>)
 8001cae:	6913      	ldr	r3, [r2, #16]
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6113      	str	r3, [r2, #16]
 8001cb6:	e002      	b.n	8001cbe <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8001cb8:	6034      	str	r4, [r6, #0]
            break;
 8001cba:	e000      	b.n	8001cbe <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cbc:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_FLASHEx_Erase+0x9c>)
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001cc8:	2102      	movs	r1, #2
}
 8001cca:	4608      	mov	r0, r1
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	200002f8 	.word	0x200002f8
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001cdc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001cde:	e088      	b.n	8001df2 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ce0:	08de      	lsrs	r6, r3, #3
 8001ce2:	3608      	adds	r6, #8
 8001ce4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce8:	f003 0e07 	and.w	lr, r3, #7
 8001cec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001cf0:	270f      	movs	r7, #15
 8001cf2:	fa07 f70e 	lsl.w	r7, r7, lr
 8001cf6:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfa:	690f      	ldr	r7, [r1, #16]
 8001cfc:	fa07 f70e 	lsl.w	r7, r7, lr
 8001d00:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001d02:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8001d06:	e083      	b.n	8001e10 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d08:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d0a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0c:	68cf      	ldr	r7, [r1, #12]
 8001d0e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001d12:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001d14:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d16:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d18:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d1c:	684e      	ldr	r6, [r1, #4]
 8001d1e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001d22:	409e      	lsls	r6, r3
 8001d24:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001d26:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d28:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2a:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	688d      	ldr	r5, [r1, #8]
 8001d2e:	fa05 f50e 	lsl.w	r5, r5, lr
 8001d32:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001d34:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d36:	684c      	ldr	r4, [r1, #4]
 8001d38:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001d3c:	d058      	beq.n	8001df0 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4c47      	ldr	r4, [pc, #284]	; (8001e5c <HAL_GPIO_Init+0x184>)
 8001d40:	69a5      	ldr	r5, [r4, #24]
 8001d42:	f045 0501 	orr.w	r5, r5, #1
 8001d46:	61a5      	str	r5, [r4, #24]
 8001d48:	69a4      	ldr	r4, [r4, #24]
 8001d4a:	f004 0401 	and.w	r4, r4, #1
 8001d4e:	9401      	str	r4, [sp, #4]
 8001d50:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d52:	089d      	lsrs	r5, r3, #2
 8001d54:	1cae      	adds	r6, r5, #2
 8001d56:	4c42      	ldr	r4, [pc, #264]	; (8001e60 <HAL_GPIO_Init+0x188>)
 8001d58:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001d5c:	f003 0603 	and.w	r6, r3, #3
 8001d60:	00b6      	lsls	r6, r6, #2
 8001d62:	270f      	movs	r7, #15
 8001d64:	40b7      	lsls	r7, r6
 8001d66:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d6a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001d6e:	d06c      	beq.n	8001e4a <HAL_GPIO_Init+0x172>
 8001d70:	4f3c      	ldr	r7, [pc, #240]	; (8001e64 <HAL_GPIO_Init+0x18c>)
 8001d72:	42b8      	cmp	r0, r7
 8001d74:	d06b      	beq.n	8001e4e <HAL_GPIO_Init+0x176>
 8001d76:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d7a:	42b8      	cmp	r0, r7
 8001d7c:	d069      	beq.n	8001e52 <HAL_GPIO_Init+0x17a>
 8001d7e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d82:	42b8      	cmp	r0, r7
 8001d84:	d05f      	beq.n	8001e46 <HAL_GPIO_Init+0x16e>
 8001d86:	2705      	movs	r7, #5
 8001d88:	fa07 f606 	lsl.w	r6, r7, r6
 8001d8c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d8e:	3502      	adds	r5, #2
 8001d90:	4e33      	ldr	r6, [pc, #204]	; (8001e60 <HAL_GPIO_Init+0x188>)
 8001d92:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d96:	4c34      	ldr	r4, [pc, #208]	; (8001e68 <HAL_GPIO_Init+0x190>)
 8001d98:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	43d4      	mvns	r4, r2
 8001d9c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da0:	684f      	ldr	r7, [r1, #4]
 8001da2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001da6:	d001      	beq.n	8001dac <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001da8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001dac:	4d2e      	ldr	r5, [pc, #184]	; (8001e68 <HAL_GPIO_Init+0x190>)
 8001dae:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001db0:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db6:	684f      	ldr	r7, [r1, #4]
 8001db8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001dbc:	d001      	beq.n	8001dc2 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001dbe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001dc2:	4d29      	ldr	r5, [pc, #164]	; (8001e68 <HAL_GPIO_Init+0x190>)
 8001dc4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	684f      	ldr	r7, [r1, #4]
 8001dce:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001dd2:	d001      	beq.n	8001dd8 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8001dd4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001dd8:	4d23      	ldr	r5, [pc, #140]	; (8001e68 <HAL_GPIO_Init+0x190>)
 8001dda:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001ddc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de0:	684e      	ldr	r6, [r1, #4]
 8001de2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001de6:	d001      	beq.n	8001dec <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8001de8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001dec:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_GPIO_Init+0x190>)
 8001dee:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001df0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001df2:	680a      	ldr	r2, [r1, #0]
 8001df4:	fa32 f403 	lsrs.w	r4, r2, r3
 8001df8:	d02d      	beq.n	8001e56 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001dfa:	2501      	movs	r5, #1
 8001dfc:	409d      	lsls	r5, r3
    if(iocurrent)
 8001dfe:	402a      	ands	r2, r5
 8001e00:	d0f6      	beq.n	8001df0 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e02:	684c      	ldr	r4, [r1, #4]
 8001e04:	2c02      	cmp	r4, #2
 8001e06:	f43f af6b 	beq.w	8001ce0 <HAL_GPIO_Init+0x8>
 8001e0a:	2c12      	cmp	r4, #18
 8001e0c:	f43f af68 	beq.w	8001ce0 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001e10:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e12:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e16:	2403      	movs	r4, #3
 8001e18:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e1c:	43e4      	mvns	r4, r4
 8001e1e:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e20:	684f      	ldr	r7, [r1, #4]
 8001e22:	f007 0703 	and.w	r7, r7, #3
 8001e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e2a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001e2c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e2e:	684e      	ldr	r6, [r1, #4]
 8001e30:	1e77      	subs	r7, r6, #1
 8001e32:	2f01      	cmp	r7, #1
 8001e34:	f67f af68 	bls.w	8001d08 <HAL_GPIO_Init+0x30>
 8001e38:	2e11      	cmp	r6, #17
 8001e3a:	f43f af65 	beq.w	8001d08 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e3e:	2e12      	cmp	r6, #18
 8001e40:	f47f af72 	bne.w	8001d28 <HAL_GPIO_Init+0x50>
 8001e44:	e760      	b.n	8001d08 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e46:	2703      	movs	r7, #3
 8001e48:	e79e      	b.n	8001d88 <HAL_GPIO_Init+0xb0>
 8001e4a:	2700      	movs	r7, #0
 8001e4c:	e79c      	b.n	8001d88 <HAL_GPIO_Init+0xb0>
 8001e4e:	2701      	movs	r7, #1
 8001e50:	e79a      	b.n	8001d88 <HAL_GPIO_Init+0xb0>
 8001e52:	2702      	movs	r7, #2
 8001e54:	e798      	b.n	8001d88 <HAL_GPIO_Init+0xb0>
  }
}
 8001e56:	b003      	add	sp, #12
 8001e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010000 	.word	0x40010000
 8001e64:	48000400 	.word	0x48000400
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	b90a      	cbnz	r2, 8001e72 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6e:	6281      	str	r1, [r0, #40]	; 0x28
 8001e70:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e72:	6181      	str	r1, [r0, #24]
 8001e74:	4770      	bx	lr

08001e76 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e76:	4770      	bx	lr

08001e78 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001e78:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	4203      	tst	r3, r0
 8001e80:	d100      	bne.n	8001e84 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001e82:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e84:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e86:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e88:	f7ff fff5 	bl	8001e76 <HAL_GPIO_EXTI_Callback>
}
 8001e8c:	e7f9      	b.n	8001e82 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001e8e:	bf00      	nop
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d059      	beq.n	8001f4c <HAL_I2C_Init+0xb8>
{
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e9c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d043      	beq.n	8001f2c <HAL_I2C_Init+0x98>

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	2324      	movs	r3, #36	; 0x24
 8001ea6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eaa:	6822      	ldr	r2, [r4, #0]
 8001eac:	6813      	ldr	r3, [r2, #0]
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	6863      	ldr	r3, [r4, #4]
 8001eb8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001ebc:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	6893      	ldr	r3, [r2, #8]
 8001ec2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ec6:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ec8:	68e3      	ldr	r3, [r4, #12]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d033      	beq.n	8001f36 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ece:	6822      	ldr	r2, [r4, #0]
 8001ed0:	68a3      	ldr	r3, [r4, #8]
 8001ed2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001ed6:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed8:	68e3      	ldr	r3, [r4, #12]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d031      	beq.n	8001f42 <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ede:	6822      	ldr	r2, [r4, #0]
 8001ee0:	6853      	ldr	r3, [r2, #4]
 8001ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eec:	6822      	ldr	r2, [r4, #0]
 8001eee:	68d3      	ldr	r3, [r2, #12]
 8001ef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ef4:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	6923      	ldr	r3, [r4, #16]
 8001efa:	6961      	ldr	r1, [r4, #20]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	69a1      	ldr	r1, [r4, #24]
 8001f00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f04:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	69e3      	ldr	r3, [r4, #28]
 8001f0a:	6a21      	ldr	r1, [r4, #32]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f10:	6822      	ldr	r2, [r4, #0]
 8001f12:	6813      	ldr	r3, [r2, #0]
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f24:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f26:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001f2a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001f2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001f30:	f003 fa74 	bl	800541c <HAL_I2C_MspInit>
 8001f34:	e7b6      	b.n	8001ea4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	68a3      	ldr	r3, [r4, #8]
 8001f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3e:	6093      	str	r3, [r2, #8]
 8001f40:	e7ca      	b.n	8001ed8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	e7c8      	b.n	8001ede <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	4770      	bx	lr

08001f50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b508      	push	{r3, lr}
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f52:	6803      	ldr	r3, [r0, #0]
 8001f54:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f56:	681a      	ldr	r2, [r3, #0]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001f58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f5a:	b103      	cbz	r3, 8001f5e <HAL_I2C_EV_IRQHandler+0xe>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f5c:	4798      	blx	r3
 8001f5e:	bd08      	pop	{r3, pc}

08001f60 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d001      	beq.n	8001f6e <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d020      	beq.n	8001fb8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001f76:	2301      	movs	r3, #1
 8001f78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7c:	2324      	movs	r3, #36	; 0x24
 8001f7e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001f82:	6802      	ldr	r2, [r0, #0]
 8001f84:	6813      	ldr	r3, [r2, #0]
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f8c:	6802      	ldr	r2, [r0, #0]
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f94:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f96:	6802      	ldr	r2, [r0, #0]
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	4319      	orrs	r1, r3
 8001f9c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001f9e:	6802      	ldr	r2, [r0, #0]
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001fb8:	2002      	movs	r0, #2
  }
}
 8001fba:	4770      	bx	lr

08001fbc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d001      	beq.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001fca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d01e      	beq.n	8002010 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd8:	2324      	movs	r3, #36	; 0x24
 8001fda:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001fde:	6802      	ldr	r2, [r0, #0]
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001fe8:	6802      	ldr	r2, [r0, #0]
 8001fea:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001fec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001ff0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001ff4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001ff6:	6802      	ldr	r2, [r0, #0]
 8001ff8:	6813      	ldr	r3, [r2, #0]
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002000:	2320      	movs	r3, #32
 8002002:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002006:	2300      	movs	r3, #0
 8002008:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 800200c:	4618      	mov	r0, r3
 800200e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002010:	2002      	movs	r0, #2
  }
}
 8002012:	4770      	bx	lr

08002014 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002014:	4a02      	ldr	r2, [pc, #8]	; (8002020 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002016:	6813      	ldr	r3, [r2, #0]
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4770      	bx	lr
 8002020:	40007000 	.word	0x40007000

08002024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	6803      	ldr	r3, [r0, #0]
 800202c:	f013 0f01 	tst.w	r3, #1
 8002030:	d063      	beq.n	80020fa <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002032:	4bb5      	ldr	r3, [pc, #724]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b04      	cmp	r3, #4
 800203c:	d046      	beq.n	80020cc <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800203e:	4bb2      	ldr	r3, [pc, #712]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d03b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	f000 808e 	beq.w	8002170 <HAL_RCC_OscConfig+0x14c>
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 8091 	bne.w	800217c <HAL_RCC_OscConfig+0x158>
 800205a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800205e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002070:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002072:	4aa5      	ldr	r2, [pc, #660]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002074:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002076:	f023 030f 	bic.w	r3, r3, #15
 800207a:	68a1      	ldr	r1, [r4, #8]
 800207c:	430b      	orrs	r3, r1
 800207e:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8094 	beq.w	80021b0 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe fee6 	bl	8000e58 <HAL_GetTick>
 800208c:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002092:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b9c      	ldr	r3, [pc, #624]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2201      	movs	r2, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	4219      	tst	r1, r3
 80020b2:	d122      	bne.n	80020fa <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b4:	f7fe fed0 	bl	8000e58 <HAL_GetTick>
 80020b8:	1b40      	subs	r0, r0, r5
 80020ba:	2864      	cmp	r0, #100	; 0x64
 80020bc:	d9e7      	bls.n	800208e <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 80020be:	2003      	movs	r0, #3
 80020c0:	e2ab      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c2:	4b91      	ldr	r3, [pc, #580]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80020ca:	d0be      	beq.n	800204a <HAL_RCC_OscConfig+0x26>
 80020cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d0:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	4b8c      	ldr	r3, [pc, #560]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2201      	movs	r2, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	4219      	tst	r1, r3
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_OscConfig+0xd6>
 80020f2:	6863      	ldr	r3, [r4, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8289 	beq.w	800260c <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	f013 0f02 	tst.w	r3, #2
 8002100:	f000 809c 	beq.w	800223c <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002104:	4b80      	ldr	r3, [pc, #512]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f013 0f0c 	tst.w	r3, #12
 800210c:	d072      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800210e:	4b7e      	ldr	r3, [pc, #504]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d067      	beq.n	80021ea <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211a:	6923      	ldr	r3, [r4, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80cb 	beq.w	80022b8 <HAL_RCC_OscConfig+0x294>
 8002122:	2201      	movs	r2, #1
 8002124:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002130:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fe8e 	bl	8000e58 <HAL_GetTick>
 800213c:	4605      	mov	r5, r0
 800213e:	2302      	movs	r3, #2
 8002140:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	4b70      	ldr	r3, [pc, #448]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	2302      	movs	r3, #2
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2201      	movs	r2, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	4219      	tst	r1, r3
 800215e:	f040 809c 	bne.w	800229a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002162:	f7fe fe79 	bl	8000e58 <HAL_GetTick>
 8002166:	1b40      	subs	r0, r0, r5
 8002168:	2802      	cmp	r0, #2
 800216a:	d9e8      	bls.n	800213e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800216c:	2003      	movs	r0, #3
 800216e:	e254      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	4a65      	ldr	r2, [pc, #404]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e77a      	b.n	8002072 <HAL_RCC_OscConfig+0x4e>
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002180:	d009      	beq.n	8002196 <HAL_RCC_OscConfig+0x172>
 8002182:	4b61      	ldr	r3, [pc, #388]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e76d      	b.n	8002072 <HAL_RCC_OscConfig+0x4e>
 8002196:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800219a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e760      	b.n	8002072 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80021b0:	f7fe fe52 	bl	8000e58 <HAL_GetTick>
 80021b4:	4605      	mov	r5, r0
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b52      	ldr	r3, [pc, #328]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2201      	movs	r2, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	4219      	tst	r1, r3
 80021da:	d08e      	beq.n	80020fa <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fe3c 	bl	8000e58 <HAL_GetTick>
 80021e0:	1b40      	subs	r0, r0, r5
 80021e2:	2864      	cmp	r0, #100	; 0x64
 80021e4:	d9e7      	bls.n	80021b6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80021e6:	2003      	movs	r0, #3
 80021e8:	e217      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80021f2:	d192      	bne.n	800211a <HAL_RCC_OscConfig+0xf6>
 80021f4:	2302      	movs	r3, #2
 80021f6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	2302      	movs	r3, #2
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2201      	movs	r2, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	4219      	tst	r1, r3
 8002214:	d004      	beq.n	8002220 <HAL_RCC_OscConfig+0x1fc>
 8002216:	6923      	ldr	r3, [r4, #16]
 8002218:	4293      	cmp	r3, r2
 800221a:	d001      	beq.n	8002220 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 800221c:	2001      	movs	r0, #1
 800221e:	e1fc      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4839      	ldr	r0, [pc, #228]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002228:	6961      	ldr	r1, [r4, #20]
 800222a:	22f8      	movs	r2, #248	; 0xf8
 800222c:	fa92 f2a2 	rbit	r2, r2
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	fa01 f202 	lsl.w	r2, r1, r2
 8002238:	4313      	orrs	r3, r2
 800223a:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	f013 0f08 	tst.w	r3, #8
 8002242:	f000 808d 	beq.w	8002360 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002246:	69a3      	ldr	r3, [r4, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d061      	beq.n	8002310 <HAL_RCC_OscConfig+0x2ec>
 800224c:	2101      	movs	r1, #1
 800224e:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_OscConfig+0x2e8>)
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe fdfb 	bl	8000e58 <HAL_GetTick>
 8002262:	4605      	mov	r5, r0
 8002264:	2302      	movs	r3, #2
 8002266:	fa93 f2a3 	rbit	r2, r3
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	4a25      	ldr	r2, [pc, #148]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 8002274:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2201      	movs	r2, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	4219      	tst	r1, r3
 800228a:	d169      	bne.n	8002360 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7fe fde4 	bl	8000e58 <HAL_GetTick>
 8002290:	1b40      	subs	r0, r0, r5
 8002292:	2802      	cmp	r0, #2
 8002294:	d9e6      	bls.n	8002264 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e1bf      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	481b      	ldr	r0, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 800229c:	6803      	ldr	r3, [r0, #0]
 800229e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022a2:	6961      	ldr	r1, [r4, #20]
 80022a4:	22f8      	movs	r2, #248	; 0xf8
 80022a6:	fa92 f2a2 	rbit	r2, r2
 80022aa:	fab2 f282 	clz	r2, r2
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	4313      	orrs	r3, r2
 80022b4:	6003      	str	r3, [r0, #0]
 80022b6:	e7c1      	b.n	800223c <HAL_RCC_OscConfig+0x218>
 80022b8:	2301      	movs	r3, #1
 80022ba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022d0:	f7fe fdc2 	bl	8000e58 <HAL_GetTick>
 80022d4:	4605      	mov	r5, r0
 80022d6:	2302      	movs	r3, #2
 80022d8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_OscConfig+0x2e4>)
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	2302      	movs	r3, #2
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2201      	movs	r2, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	4219      	tst	r1, r3
 80022f6:	d0a1      	beq.n	800223c <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f8:	f7fe fdae 	bl	8000e58 <HAL_GetTick>
 80022fc:	1b40      	subs	r0, r0, r5
 80022fe:	2802      	cmp	r0, #2
 8002300:	d9e9      	bls.n	80022d6 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8002302:	2003      	movs	r0, #3
 8002304:	e189      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	10908120 	.word	0x10908120
 8002310:	2201      	movs	r2, #1
 8002312:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002316:	fab2 f282 	clz	r2, r2
 800231a:	4bc1      	ldr	r3, [pc, #772]	; (8002620 <HAL_RCC_OscConfig+0x5fc>)
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe fd98 	bl	8000e58 <HAL_GetTick>
 8002328:	4605      	mov	r5, r0
 800232a:	2302      	movs	r3, #2
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	4aba      	ldr	r2, [pc, #744]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 800233a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2201      	movs	r2, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	4219      	tst	r1, r3
 8002350:	d006      	beq.n	8002360 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002352:	f7fe fd81 	bl	8000e58 <HAL_GetTick>
 8002356:	1b40      	subs	r0, r0, r5
 8002358:	2802      	cmp	r0, #2
 800235a:	d9e6      	bls.n	800232a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800235c:	2003      	movs	r0, #3
 800235e:	e15c      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	f013 0f04 	tst.w	r3, #4
 8002366:	f000 80b3 	beq.w	80024d0 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4bae      	ldr	r3, [pc, #696]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002372:	d126      	bne.n	80023c2 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	4bab      	ldr	r3, [pc, #684]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800237c:	61da      	str	r2, [r3, #28]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002388:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4ba7      	ldr	r3, [pc, #668]	; (8002628 <HAL_RCC_OscConfig+0x604>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002392:	d018      	beq.n	80023c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	68e3      	ldr	r3, [r4, #12]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d029      	beq.n	80023ee <HAL_RCC_OscConfig+0x3ca>
 800239a:	bb73      	cbnz	r3, 80023fa <HAL_RCC_OscConfig+0x3d6>
 800239c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	621a      	str	r2, [r3, #32]
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b4:	68e3      	ldr	r3, [r4, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d05d      	beq.n	8002476 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe fd4d 	bl	8000e58 <HAL_GetTick>
 80023be:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e047      	b.n	8002452 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2500      	movs	r5, #0
 80023c4:	e7e1      	b.n	800238a <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4a98      	ldr	r2, [pc, #608]	; (8002628 <HAL_RCC_OscConfig+0x604>)
 80023c8:	6813      	ldr	r3, [r2, #0]
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80023d0:	f7fe fd42 	bl	8000e58 <HAL_GetTick>
 80023d4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b94      	ldr	r3, [pc, #592]	; (8002628 <HAL_RCC_OscConfig+0x604>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023de:	d1d9      	bne.n	8002394 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e0:	f7fe fd3a 	bl	8000e58 <HAL_GetTick>
 80023e4:	1b80      	subs	r0, r0, r6
 80023e6:	2864      	cmp	r0, #100	; 0x64
 80023e8:	d9f5      	bls.n	80023d6 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80023ea:	2003      	movs	r0, #3
 80023ec:	e115      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ee:	4a8d      	ldr	r2, [pc, #564]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 80023f0:	6a13      	ldr	r3, [r2, #32]
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e7dc      	b.n	80023b4 <HAL_RCC_OscConfig+0x390>
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_OscConfig+0x3ee>
 80023fe:	4b89      	ldr	r3, [pc, #548]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002400:	6a1a      	ldr	r2, [r3, #32]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	621a      	str	r2, [r3, #32]
 8002408:	6a1a      	ldr	r2, [r3, #32]
 800240a:	f022 0204 	bic.w	r2, r2, #4
 800240e:	621a      	str	r2, [r3, #32]
 8002410:	e7d0      	b.n	80023b4 <HAL_RCC_OscConfig+0x390>
 8002412:	4b84      	ldr	r3, [pc, #528]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002414:	6a1a      	ldr	r2, [r3, #32]
 8002416:	f042 0204 	orr.w	r2, r2, #4
 800241a:	621a      	str	r2, [r3, #32]
 800241c:	6a1a      	ldr	r2, [r3, #32]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	621a      	str	r2, [r3, #32]
 8002424:	e7c6      	b.n	80023b4 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	4b7f      	ldr	r3, [pc, #508]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002428:	6a19      	ldr	r1, [r3, #32]
 800242a:	2302      	movs	r3, #2
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2201      	movs	r2, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	4219      	tst	r1, r3
 8002440:	d145      	bne.n	80024ce <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fd09 	bl	8000e58 <HAL_GetTick>
 8002446:	1b80      	subs	r0, r0, r6
 8002448:	f241 3388 	movw	r3, #5000	; 0x1388
 800244c:	4298      	cmp	r0, r3
 800244e:	f200 80df 	bhi.w	8002610 <HAL_RCC_OscConfig+0x5ec>
 8002452:	2302      	movs	r3, #2
 8002454:	fa93 f2a3 	rbit	r2, r3
 8002458:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d0dd      	beq.n	8002426 <HAL_RCC_OscConfig+0x402>
 800246a:	2302      	movs	r3, #2
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002472:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002474:	e7d9      	b.n	800242a <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe fcef 	bl	8000e58 <HAL_GetTick>
 800247a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x486>
 800247e:	4b69      	ldr	r3, [pc, #420]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002480:	6a19      	ldr	r1, [r3, #32]
 8002482:	2302      	movs	r3, #2
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2201      	movs	r2, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	4219      	tst	r1, r3
 8002498:	d019      	beq.n	80024ce <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fcdd 	bl	8000e58 <HAL_GetTick>
 800249e:	1b80      	subs	r0, r0, r6
 80024a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80024a4:	4298      	cmp	r0, r3
 80024a6:	f200 80b5 	bhi.w	8002614 <HAL_RCC_OscConfig+0x5f0>
 80024aa:	2302      	movs	r3, #2
 80024ac:	fa93 f2a3 	rbit	r2, r3
 80024b0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d0dd      	beq.n	800247e <HAL_RCC_OscConfig+0x45a>
 80024c2:	2302      	movs	r3, #2
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	4b56      	ldr	r3, [pc, #344]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 80024ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024cc:	e7d9      	b.n	8002482 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ce:	bbb5      	cbnz	r5, 800253e <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d0:	69e3      	ldr	r3, [r4, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80a0 	beq.w	8002618 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d8:	4a52      	ldr	r2, [pc, #328]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 80024da:	6852      	ldr	r2, [r2, #4]
 80024dc:	f002 020c 	and.w	r2, r2, #12
 80024e0:	2a08      	cmp	r2, #8
 80024e2:	f000 80a3 	beq.w	800262c <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d02f      	beq.n	800254a <HAL_RCC_OscConfig+0x526>
 80024ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ee:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fca8 	bl	8000e58 <HAL_GetTick>
 8002508:	4604      	mov	r4, r0
 800250a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	4b44      	ldr	r3, [pc, #272]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2201      	movs	r2, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	4219      	tst	r1, r3
 800252e:	d06b      	beq.n	8002608 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fc92 	bl	8000e58 <HAL_GetTick>
 8002534:	1b00      	subs	r0, r0, r4
 8002536:	2802      	cmp	r0, #2
 8002538:	d9e7      	bls.n	800250a <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 800253a:	2003      	movs	r0, #3
 800253c:	e06d      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800253e:	4a39      	ldr	r2, [pc, #228]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002540:	69d3      	ldr	r3, [r2, #28]
 8002542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002546:	61d3      	str	r3, [r2, #28]
 8002548:	e7c2      	b.n	80024d0 <HAL_RCC_OscConfig+0x4ac>
 800254a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800254e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800255a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002564:	f7fe fc78 	bl	8000e58 <HAL_GetTick>
 8002568:	4605      	mov	r5, r0
 800256a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2201      	movs	r2, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	4219      	tst	r1, r3
 800258e:	d006      	beq.n	800259e <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fc62 	bl	8000e58 <HAL_GetTick>
 8002594:	1b40      	subs	r0, r0, r5
 8002596:	2802      	cmp	r0, #2
 8002598:	d9e7      	bls.n	800256a <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 800259a:	2003      	movs	r0, #3
 800259c:	e03d      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259e:	4921      	ldr	r1, [pc, #132]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 80025a0:	684b      	ldr	r3, [r1, #4]
 80025a2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80025a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025a8:	6a20      	ldr	r0, [r4, #32]
 80025aa:	4302      	orrs	r2, r0
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025ca:	f7fe fc45 	bl	8000e58 <HAL_GetTick>
 80025ce:	4604      	mov	r4, r0
 80025d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_OscConfig+0x600>)
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2201      	movs	r2, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	4219      	tst	r1, r3
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fc2f 	bl	8000e58 <HAL_GetTick>
 80025fa:	1b00      	subs	r0, r0, r4
 80025fc:	2802      	cmp	r0, #2
 80025fe:	d9e7      	bls.n	80025d0 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8002600:	2003      	movs	r0, #3
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002604:	2000      	movs	r0, #0
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
 8002608:	2000      	movs	r0, #0
 800260a:	e006      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 800260c:	2001      	movs	r0, #1
 800260e:	e004      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002610:	2003      	movs	r0, #3
 8002612:	e002      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002614:	2003      	movs	r0, #3
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8002618:	2000      	movs	r0, #0
}
 800261a:	b002      	add	sp, #8
 800261c:	bd70      	pop	{r4, r5, r6, pc}
 800261e:	bf00      	nop
 8002620:	10908120 	.word	0x10908120
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
      return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
 800262e:	e7f4      	b.n	800261a <HAL_RCC_OscConfig+0x5f6>

08002630 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002632:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002634:	f003 020c 	and.w	r2, r3, #12
 8002638:	2a08      	cmp	r2, #8
 800263a:	d124      	bne.n	8002686 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800263c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002640:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002644:	fa92 f2a2 	rbit	r2, r2
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	fa21 f202 	lsr.w	r2, r1, r2
 8002650:	490f      	ldr	r1, [pc, #60]	; (8002690 <HAL_RCC_GetSysClockFreq+0x60>)
 8002652:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002656:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002658:	f002 020f 	and.w	r2, r2, #15
 800265c:	210f      	movs	r1, #15
 800265e:	fa91 f1a1 	rbit	r1, r1
 8002662:	fab1 f181 	clz	r1, r1
 8002666:	40ca      	lsrs	r2, r1
 8002668:	490a      	ldr	r1, [pc, #40]	; (8002694 <HAL_RCC_GetSysClockFreq+0x64>)
 800266a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800266c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002670:	d103      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_GetSysClockFreq+0x68>)
 8002674:	fb03 f000 	mul.w	r0, r3, r0
 8002678:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_RCC_GetSysClockFreq+0x6c>)
 800267c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002680:	fb03 f000 	mul.w	r0, r3, r0
 8002684:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	08006d48 	.word	0x08006d48
 8002694:	08006d58 	.word	0x08006d58
 8002698:	003d0900 	.word	0x003d0900
 800269c:	007a1200 	.word	0x007a1200

080026a0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026a0:	4b70      	ldr	r3, [pc, #448]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	428b      	cmp	r3, r1
 80026aa:	d20c      	bcs.n	80026c6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ac:	4a6d      	ldr	r2, [pc, #436]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	f023 0307 	bic.w	r3, r3, #7
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	4299      	cmp	r1, r3
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80026c2:	2001      	movs	r0, #1
 80026c4:	4770      	bx	lr
{
 80026c6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	6803      	ldr	r3, [r0, #0]
 80026ca:	f013 0f02 	tst.w	r3, #2
 80026ce:	d006      	beq.n	80026de <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	6853      	ldr	r3, [r2, #4]
 80026d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d8:	6884      	ldr	r4, [r0, #8]
 80026da:	4323      	orrs	r3, r4
 80026dc:	6053      	str	r3, [r2, #4]
 80026de:	460d      	mov	r5, r1
 80026e0:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	6803      	ldr	r3, [r0, #0]
 80026e4:	f013 0f01 	tst.w	r3, #1
 80026e8:	d07a      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	6843      	ldr	r3, [r0, #4]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d02f      	beq.n	8002750 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d042      	beq.n	800277a <HAL_RCC_ClockConfig+0xda>
 80026f4:	2202      	movs	r2, #2
 80026f6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4a5b      	ldr	r2, [pc, #364]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	6810      	ldr	r0, [r2, #0]
 80026fe:	2202      	movs	r2, #2
 8002700:	fa92 f2a2 	rbit	r2, r2
 8002704:	fab2 f282 	clz	r2, r2
 8002708:	f002 021f 	and.w	r2, r2, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	4210      	tst	r0, r2
 8002714:	f000 80a4 	beq.w	8002860 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002718:	4953      	ldr	r1, [pc, #332]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 800271a:	684a      	ldr	r2, [r1, #4]
 800271c:	f022 0203 	bic.w	r2, r2, #3
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002724:	f7fe fb98 	bl	8000e58 <HAL_GetTick>
 8002728:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272a:	6863      	ldr	r3, [r4, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d039      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002730:	2b02      	cmp	r3, #2
 8002732:	d046      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002734:	4b4c      	ldr	r3, [pc, #304]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f013 0f0c 	tst.w	r3, #12
 800273c:	d050      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273e:	f7fe fb8b 	bl	8000e58 <HAL_GetTick>
 8002742:	1b80      	subs	r0, r0, r6
 8002744:	f241 3388 	movw	r3, #5000	; 0x1388
 8002748:	4298      	cmp	r0, r3
 800274a:	d9f3      	bls.n	8002734 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800274c:	2003      	movs	r0, #3
 800274e:	bd70      	pop	{r4, r5, r6, pc}
 8002750:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002754:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002758:	4a43      	ldr	r2, [pc, #268]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	6810      	ldr	r0, [r2, #0]
 800275c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002760:	fa92 f2a2 	rbit	r2, r2
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	f002 021f 	and.w	r2, r2, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	4210      	tst	r0, r2
 8002774:	d1d0      	bne.n	8002718 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8002776:	2001      	movs	r0, #1
 8002778:	bd70      	pop	{r4, r5, r6, pc}
 800277a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800277e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	4a39      	ldr	r2, [pc, #228]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	6810      	ldr	r0, [r2, #0]
 8002786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278a:	fa92 f2a2 	rbit	r2, r2
 800278e:	fab2 f282 	clz	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4210      	tst	r0, r2
 800279e:	d1bb      	bne.n	8002718 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d017      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fe fb52 	bl	8000e58 <HAL_GetTick>
 80027b4:	1b80      	subs	r0, r0, r6
 80027b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80027ba:	4298      	cmp	r0, r3
 80027bc:	d9f2      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80027be:	2003      	movs	r0, #3
 80027c0:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d008      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ce:	f7fe fb43 	bl	8000e58 <HAL_GetTick>
 80027d2:	1b80      	subs	r0, r0, r6
 80027d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80027d8:	4298      	cmp	r0, r3
 80027da:	d9f2      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 80027dc:	2003      	movs	r0, #3
 80027de:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	429d      	cmp	r5, r3
 80027ea:	d20c      	bcs.n	8002806 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	f023 0307 	bic.w	r3, r3, #7
 80027f4:	432b      	orrs	r3, r5
 80027f6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	429d      	cmp	r5, r3
 8002800:	d001      	beq.n	8002806 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8002802:	2001      	movs	r0, #1
}
 8002804:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	f013 0f04 	tst.w	r3, #4
 800280c:	d006      	beq.n	800281c <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	6853      	ldr	r3, [r2, #4]
 8002812:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002816:	68e1      	ldr	r1, [r4, #12]
 8002818:	430b      	orrs	r3, r1
 800281a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	f013 0f08 	tst.w	r3, #8
 8002822:	d007      	beq.n	8002834 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002824:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	6853      	ldr	r3, [r2, #4]
 8002828:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800282c:	6921      	ldr	r1, [r4, #16]
 800282e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002832:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002834:	f7ff fefc 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002840:	22f0      	movs	r2, #240	; 0xf0
 8002842:	fa92 f2a2 	rbit	r2, r2
 8002846:	fab2 f282 	clz	r2, r2
 800284a:	40d3      	lsrs	r3, r2
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <HAL_RCC_ClockConfig+0x1cc>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	40d8      	lsrs	r0, r3
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_RCC_ClockConfig+0x1d0>)
 8002854:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe face 	bl	8000df8 <HAL_InitTick>
  return HAL_OK;
 800285c:	2000      	movs	r0, #0
 800285e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002860:	2001      	movs	r0, #1
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
 800286c:	08006d98 	.word	0x08006d98
 8002870:	20000000 	.word	0x20000000

08002874 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002874:	4b01      	ldr	r3, [pc, #4]	; (800287c <HAL_RCC_GetHCLKFreq+0x8>)
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000000 	.word	0x20000000

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002882:	f7ff fff7 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800288e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002892:	fa92 f2a2 	rbit	r2, r2
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	40d3      	lsrs	r3, r2
 800289c:	4a02      	ldr	r2, [pc, #8]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
}    
 80028a0:	40d8      	lsrs	r0, r3
 80028a2:	bd08      	pop	{r3, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08006da8 	.word	0x08006da8

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028ae:	f7ff ffe1 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028be:	fa92 f2a2 	rbit	r2, r2
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	40d3      	lsrs	r3, r2
 80028c8:	4a02      	ldr	r2, [pc, #8]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
} 
 80028cc:	40d8      	lsrs	r0, r3
 80028ce:	bd08      	pop	{r3, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08006da8 	.word	0x08006da8

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028da:	b083      	sub	sp, #12
 80028dc:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028de:	6803      	ldr	r3, [r0, #0]
 80028e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80028e4:	d044      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e6:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80028ee:	d179      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028f8:	61da      	str	r2, [r3, #28]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002904:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800290e:	d06b      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002910:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002914:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002918:	d021      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x86>
 800291a:	6862      	ldr	r2, [r4, #4]
 800291c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002920:	4293      	cmp	r3, r2
 8002922:	d01c      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002924:	4854      	ldr	r0, [pc, #336]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002926:	6a01      	ldr	r1, [r0, #32]
 8002928:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 800292c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002930:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002934:	fab2 f282 	clz	r2, r2
 8002938:	4f51      	ldr	r7, [pc, #324]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800293a:	443a      	add	r2, r7
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	f04f 0e01 	mov.w	lr, #1
 8002942:	f8c2 e000 	str.w	lr, [r2]
 8002946:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	443b      	add	r3, r7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002956:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002958:	f011 0f01 	tst.w	r1, #1
 800295c:	d158      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800295e:	4a46      	ldr	r2, [pc, #280]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002960:	6a13      	ldr	r3, [r2, #32]
 8002962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002966:	6861      	ldr	r1, [r4, #4]
 8002968:	430b      	orrs	r3, r1
 800296a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800296c:	2d00      	cmp	r5, #0
 800296e:	d17a      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	f013 0f01 	tst.w	r3, #1
 8002976:	d006      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002978:	4a3f      	ldr	r2, [pc, #252]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800297a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800297c:	f023 0303 	bic.w	r3, r3, #3
 8002980:	68a1      	ldr	r1, [r4, #8]
 8002982:	430b      	orrs	r3, r1
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	f013 0f20 	tst.w	r3, #32
 800298c:	d006      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800298e:	4a3a      	ldr	r2, [pc, #232]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002990:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002992:	f023 0310 	bic.w	r3, r3, #16
 8002996:	68e1      	ldr	r1, [r4, #12]
 8002998:	430b      	orrs	r3, r1
 800299a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029a2:	d006      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029a4:	4a34      	ldr	r2, [pc, #208]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029a8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80029ac:	6921      	ldr	r1, [r4, #16]
 80029ae:	430b      	orrs	r3, r1
 80029b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80029b8:	d006      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c2:	6961      	ldr	r1, [r4, #20]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80029ce:	d051      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80029d0:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029d8:	69a1      	ldr	r1, [r4, #24]
 80029da:	430b      	orrs	r3, r1
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029de:	2000      	movs	r0, #0
}
 80029e0:	b003      	add	sp, #12
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 80029e4:	2500      	movs	r5, #0
 80029e6:	e78e      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029ea:	6813      	ldr	r3, [r2, #0]
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029f2:	f7fe fa31 	bl	8000e58 <HAL_GetTick>
 80029f6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a00:	d186      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a02:	f7fe fa29 	bl	8000e58 <HAL_GetTick>
 8002a06:	1b80      	subs	r0, r0, r6
 8002a08:	2864      	cmp	r0, #100	; 0x64
 8002a0a:	d9f5      	bls.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	e7e7      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002a10:	f7fe fa22 	bl	8000e58 <HAL_GetTick>
 8002a14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	e014      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a1a:	6a19      	ldr	r1, [r3, #32]
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	4219      	tst	r1, r3
 8002a32:	d194      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe fa10 	bl	8000e58 <HAL_GetTick>
 8002a38:	1b80      	subs	r0, r0, r6
 8002a3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a3e:	4298      	cmp	r0, r3
 8002a40:	d816      	bhi.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a42:	2302      	movs	r3, #2
 8002a44:	fa93 f2a3 	rbit	r2, r3
 8002a48:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d0de      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a64:	e7da      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a66:	69d3      	ldr	r3, [r2, #28]
 8002a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	61d3      	str	r3, [r2, #28]
 8002a6e:	e77f      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8002a70:	2003      	movs	r0, #3
 8002a72:	e7b5      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e7b3      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	10908100 	.word	0x10908100

08002a84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a88:	6802      	ldr	r2, [r0, #0]
 8002a8a:	68d3      	ldr	r3, [r2, #12]
 8002a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a90:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 8002a92:	f7fe f9e1 	bl	8000e58 <HAL_GetTick>
 8002a96:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f013 0f20 	tst.w	r3, #32
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002aa2:	f7fe f9d9 	bl	8000e58 <HAL_GetTick>
 8002aa6:	1b40      	subs	r0, r0, r5
 8002aa8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002aac:	d9f4      	bls.n	8002a98 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8002aae:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8002ab0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	bd38      	pop	{r3, r4, r5, pc}

08002ab6 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ab6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002ab8:	6803      	ldr	r3, [r0, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002ac0:	d001      	beq.n	8002ac6 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd38      	pop	{r3, r4, r5, pc}
 8002ac6:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002ace:	f7fe f9c3 	bl	8000e58 <HAL_GetTick>
 8002ad2:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002adc:	d107      	bne.n	8002aee <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002ade:	f7fe f9bb 	bl	8000e58 <HAL_GetTick>
 8002ae2:	1b40      	subs	r0, r0, r5
 8002ae4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ae8:	d9f4      	bls.n	8002ad4 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002aea:	2003      	movs	r0, #3
}
 8002aec:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8002aee:	2000      	movs	r0, #0
 8002af0:	bd38      	pop	{r3, r4, r5, pc}

08002af2 <HAL_RTC_Init>:
{
 8002af2:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d05c      	beq.n	8002bb2 <HAL_RTC_Init+0xc0>
 8002af8:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002afa:	7f43      	ldrb	r3, [r0, #29]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d041      	beq.n	8002b84 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002b00:	2302      	movs	r3, #2
 8002b02:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	22ca      	movs	r2, #202	; 0xca
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	2253      	movs	r2, #83	; 0x53
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff ffd0 	bl	8002ab6 <RTC_EnterInitMode>
 8002b16:	4605      	mov	r5, r0
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d137      	bne.n	8002b8c <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	6893      	ldr	r3, [r2, #8]
 8002b20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b28:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b2a:	6821      	ldr	r1, [r4, #0]
 8002b2c:	688a      	ldr	r2, [r1, #8]
 8002b2e:	6863      	ldr	r3, [r4, #4]
 8002b30:	6920      	ldr	r0, [r4, #16]
 8002b32:	4303      	orrs	r3, r0
 8002b34:	6960      	ldr	r0, [r4, #20]
 8002b36:	4303      	orrs	r3, r0
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	68e2      	ldr	r2, [r4, #12]
 8002b40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	6913      	ldr	r3, [r2, #16]
 8002b46:	68a1      	ldr	r1, [r4, #8]
 8002b48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002b4c:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b4e:	6822      	ldr	r2, [r4, #0]
 8002b50:	68d3      	ldr	r3, [r2, #12]
 8002b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b56:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f013 0f20 	tst.w	r3, #32
 8002b60:	d01b      	beq.n	8002b9a <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002b62:	6822      	ldr	r2, [r4, #0]
 8002b64:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002b6c:	6822      	ldr	r2, [r4, #0]
 8002b6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b70:	69a1      	ldr	r1, [r4, #24]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	7763      	strb	r3, [r4, #29]
}
 8002b80:	4628      	mov	r0, r5
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002b84:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002b86:	f002 fc7b 	bl	8005480 <HAL_RTC_MspInit>
 8002b8a:	e7b9      	b.n	8002b00 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	22ff      	movs	r2, #255	; 0xff
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b92:	2304      	movs	r3, #4
 8002b94:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002b96:	2501      	movs	r5, #1
 8002b98:	e7f2      	b.n	8002b80 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff ff72 	bl	8002a84 <HAL_RTC_WaitForSynchro>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d0de      	beq.n	8002b62 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002baa:	2304      	movs	r3, #4
 8002bac:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002bae:	2501      	movs	r5, #1
 8002bb0:	e7e6      	b.n	8002b80 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8002bb2:	2501      	movs	r5, #1
 8002bb4:	e7e4      	b.n	8002b80 <HAL_RTC_Init+0x8e>

08002bb6 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002bb6:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002bb8:	e002      	b.n	8002bc0 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002bba:	3301      	adds	r3, #1
    Value -= 10U;
 8002bbc:	380a      	subs	r0, #10
 8002bbe:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002bc0:	2809      	cmp	r0, #9
 8002bc2:	d8fa      	bhi.n	8002bba <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	b2db      	uxtb	r3, r3
}
 8002bc8:	4318      	orrs	r0, r3
 8002bca:	4770      	bx	lr

08002bcc <HAL_RTC_SetTime>:
{
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002bce:	7f03      	ldrb	r3, [r0, #28]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d077      	beq.n	8002cc4 <HAL_RTC_SetTime+0xf8>
 8002bd4:	460e      	mov	r6, r1
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	2301      	movs	r3, #1
 8002bda:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002be0:	2a00      	cmp	r2, #0
 8002be2:	d146      	bne.n	8002c72 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002be4:	6803      	ldr	r3, [r0, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002bec:	d101      	bne.n	8002bf2 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002bf2:	7830      	ldrb	r0, [r6, #0]
 8002bf4:	f7ff ffdf 	bl	8002bb6 <RTC_ByteToBcd2>
 8002bf8:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002bfa:	7870      	ldrb	r0, [r6, #1]
 8002bfc:	f7ff ffdb 	bl	8002bb6 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c00:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c04:	78b0      	ldrb	r0, [r6, #2]
 8002c06:	f7ff ffd6 	bl	8002bb6 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c0a:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002c0c:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c0e:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	22ca      	movs	r2, #202	; 0xca
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	2253      	movs	r2, #83	; 0x53
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff ff49 	bl	8002ab6 <RTC_EnterInitMode>
 8002c24:	4607      	mov	r7, r0
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d135      	bne.n	8002c96 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002c30:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002c34:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	6893      	ldr	r3, [r2, #8]
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c40:	6821      	ldr	r1, [r4, #0]
 8002c42:	688b      	ldr	r3, [r1, #8]
 8002c44:	68f2      	ldr	r2, [r6, #12]
 8002c46:	6930      	ldr	r0, [r6, #16]
 8002c48:	4302      	orrs	r2, r0
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	68d3      	ldr	r3, [r2, #12]
 8002c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c56:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f013 0f20 	tst.w	r3, #32
 8002c60:	d022      	beq.n	8002ca8 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	22ff      	movs	r2, #255	; 0xff
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002c70:	e029      	b.n	8002cc6 <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c72:	6803      	ldr	r3, [r0, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c7a:	d101      	bne.n	8002c80 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c80:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c82:	7870      	ldrb	r0, [r6, #1]
 8002c84:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002c8a:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c8c:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002c8e:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c90:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002c94:	e7bd      	b.n	8002c12 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002ca4:	2701      	movs	r7, #1
 8002ca6:	e00e      	b.n	8002cc6 <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7ff feeb 	bl	8002a84 <HAL_RTC_WaitForSynchro>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d0d7      	beq.n	8002c62 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002cc0:	2701      	movs	r7, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002cc4:	2702      	movs	r7, #2
}
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cca <HAL_RTC_SetDate>:
{
 8002cca:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002ccc:	7f03      	ldrb	r3, [r0, #28]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d065      	beq.n	8002d9e <HAL_RTC_SetDate+0xd4>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002cda:	b93a      	cbnz	r2, 8002cec <HAL_RTC_SetDate+0x22>
 8002cdc:	784b      	ldrb	r3, [r1, #1]
 8002cde:	f013 0f10 	tst.w	r3, #16
 8002ce2:	d003      	beq.n	8002cec <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ce4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002ce8:	330a      	adds	r3, #10
 8002cea:	704b      	strb	r3, [r1, #1]
 8002cec:	460e      	mov	r6, r1
 8002cee:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002cf0:	2a00      	cmp	r2, #0
 8002cf2:	d132      	bne.n	8002d5a <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002cf4:	78c8      	ldrb	r0, [r1, #3]
 8002cf6:	f7ff ff5e 	bl	8002bb6 <RTC_ByteToBcd2>
 8002cfa:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002cfc:	7870      	ldrb	r0, [r6, #1]
 8002cfe:	f7ff ff5a 	bl	8002bb6 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d02:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002d06:	78b0      	ldrb	r0, [r6, #2]
 8002d08:	f7ff ff55 	bl	8002bb6 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d0c:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002d0e:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d10:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	22ca      	movs	r2, #202	; 0xca
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	2253      	movs	r2, #83	; 0x53
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7ff fec8 	bl	8002ab6 <RTC_EnterInitMode>
 8002d26:	4606      	mov	r6, r0
 8002d28:	bb10      	cbnz	r0, 8002d70 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002d30:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002d34:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	68d3      	ldr	r3, [r2, #12]
 8002d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f013 0f20 	tst.w	r3, #32
 8002d48:	d01b      	beq.n	8002d82 <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	22ff      	movs	r2, #255	; 0xff
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d50:	2301      	movs	r3, #1
 8002d52:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002d54:	2300      	movs	r3, #0
 8002d56:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8002d58:	e022      	b.n	8002da0 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002d5a:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002d5c:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002d5e:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002d60:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002d66:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002d68:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002d6a:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002d6e:	e7d1      	b.n	8002d14 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d76:	2304      	movs	r3, #4
 8002d78:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002d7e:	2601      	movs	r6, #1
 8002d80:	e00e      	b.n	8002da0 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff fe7e 	bl	8002a84 <HAL_RTC_WaitForSynchro>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d0de      	beq.n	8002d4a <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	22ff      	movs	r2, #255	; 0xff
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d92:	2304      	movs	r3, #4
 8002d94:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002d96:	2300      	movs	r3, #0
 8002d98:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002d9a:	2601      	movs	r6, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8002d9e:	2602      	movs	r6, #2
}
 8002da0:	4630      	mov	r0, r6
 8002da2:	bd70      	pop	{r4, r5, r6, pc}

08002da4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002da4:	0903      	lsrs	r3, r0, #4
 8002da6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002daa:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002dac:	f000 000f 	and.w	r0, r0, #15
 8002db0:	4410      	add	r0, r2
}
 8002db2:	b2c0      	uxtb	r0, r0
 8002db4:	4770      	bx	lr

08002db6 <HAL_RTC_GetTime>:
{
 8002db6:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002db8:	6803      	ldr	r3, [r0, #0]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002dbe:	6803      	ldr	r3, [r0, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002dc6:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002dc8:	6803      	ldr	r3, [r0, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dd0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002dd4:	0c1d      	lsrs	r5, r3, #16
 8002dd6:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002dda:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002ddc:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002de0:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002de2:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002de6:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002de8:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002dec:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002dee:	b95a      	cbnz	r2, 8002e08 <HAL_RTC_GetTime+0x52>
 8002df0:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002df2:	f7ff ffd7 	bl	8002da4 <RTC_Bcd2ToByte>
 8002df6:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f7ff ffd3 	bl	8002da4 <RTC_Bcd2ToByte>
 8002dfe:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7ff ffcf 	bl	8002da4 <RTC_Bcd2ToByte>
 8002e06:	70a8      	strb	r0, [r5, #2]
}
 8002e08:	2000      	movs	r0, #0
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}

08002e0c <HAL_RTC_GetDate>:
{
 8002e0c:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002e0e:	6803      	ldr	r3, [r0, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002e1a:	0c18      	lsrs	r0, r3, #16
 8002e1c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002e1e:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8002e22:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e24:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8002e28:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002e2a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e2e:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002e30:	b95a      	cbnz	r2, 8002e4a <HAL_RTC_GetDate+0x3e>
 8002e32:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e34:	f7ff ffb6 	bl	8002da4 <RTC_Bcd2ToByte>
 8002e38:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f7ff ffb2 	bl	8002da4 <RTC_Bcd2ToByte>
 8002e40:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002e42:	4628      	mov	r0, r5
 8002e44:	f7ff ffae 	bl	8002da4 <RTC_Bcd2ToByte>
 8002e48:	70a0      	strb	r0, [r4, #2]
}
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e50 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e52:	7f03      	ldrb	r3, [r0, #28]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d06d      	beq.n	8002f34 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8002e58:	4615      	mov	r5, r2
 8002e5a:	460e      	mov	r6, r1
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	2301      	movs	r3, #1
 8002e60:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e62:	2302      	movs	r3, #2
 8002e64:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e66:	6803      	ldr	r3, [r0, #0]
 8002e68:	22ca      	movs	r2, #202	; 0xca
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e6c:	6803      	ldr	r3, [r0, #0]
 8002e6e:	2253      	movs	r2, #83	; 0x53
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002e72:	6803      	ldr	r3, [r0, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 8002e7c:	f7fd ffec 	bl	8000e58 <HAL_GetTick>
 8002e80:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f013 0f04 	tst.w	r3, #4
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e8c:	f7fd ffe4 	bl	8000e58 <HAL_GetTick>
 8002e90:	1bc0      	subs	r0, r0, r7
 8002e92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e96:	d9f4      	bls.n	8002e82 <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	22ff      	movs	r2, #255	; 0xff
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 8002ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002ea8:	6822      	ldr	r2, [r4, #0]
 8002eaa:	6893      	ldr	r3, [r2, #8]
 8002eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb0:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	68d3      	ldr	r3, [r2, #12]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002ebc:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002ebe:	f7fd ffcb 	bl	8000e58 <HAL_GetTick>
 8002ec2:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	68d8      	ldr	r0, [r3, #12]
 8002ec8:	f010 0f04 	tst.w	r0, #4
 8002ecc:	d10d      	bne.n	8002eea <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002ece:	f7fd ffc3 	bl	8000e58 <HAL_GetTick>
 8002ed2:	1bc0      	subs	r0, r0, r7
 8002ed4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ed8:	d9f4      	bls.n	8002ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ee0:	2003      	movs	r0, #3
 8002ee2:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 8002ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002eea:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	6893      	ldr	r3, [r2, #8]
 8002ef0:	f023 0307 	bic.w	r3, r3, #7
 8002ef4:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	6893      	ldr	r3, [r2, #8]
 8002efa:	431d      	orrs	r5, r3
 8002efc:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f06:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f0e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	6893      	ldr	r3, [r2, #8]
 8002f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f18:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	6893      	ldr	r3, [r2, #8]
 8002f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f22:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	22ff      	movs	r2, #255	; 0xff
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 8002f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8002f34:	2002      	movs	r0, #2
}
 8002f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4604      	mov	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002f40:	6803      	ldr	r3, [r0, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002f48:	d106      	bne.n	8002f58 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002f4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002f50:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f52:	2301      	movs	r3, #1
 8002f54:	7763      	strb	r3, [r4, #29]
 8002f56:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002f58:	f001 f912 	bl	8004180 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	68d3      	ldr	r3, [r2, #12]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002f66:	60d3      	str	r3, [r2, #12]
 8002f68:	e7ef      	b.n	8002f4a <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 8002f6a:	bf00      	nop
 8002f6c:	40010400 	.word	0x40010400

08002f70 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002f70:	6803      	ldr	r3, [r0, #0]
 8002f72:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002f74:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002f78:	4770      	bx	lr

08002f7a <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002f7e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002f82:	4770      	bx	lr

08002f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f84:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f86:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f88:	6a04      	ldr	r4, [r0, #32]
 8002f8a:	f024 0401 	bic.w	r4, r4, #1
 8002f8e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002f90:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f92:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f96:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002f9e:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fa0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fa2:	6203      	str	r3, [r0, #32]
}
 8002fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002faa:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fac:	6a03      	ldr	r3, [r0, #32]
 8002fae:	f023 0310 	bic.w	r3, r3, #16
 8002fb2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002fb6:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb8:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fbc:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fca:	6203      	str	r3, [r0, #32]
}
 8002fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002fd2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fd8:	f041 0107 	orr.w	r1, r1, #7
 8002fdc:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002fde:	6083      	str	r3, [r0, #8]
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fe2:	6802      	ldr	r2, [r0, #0]
 8002fe4:	68d3      	ldr	r3, [r2, #12]
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002fec:	6802      	ldr	r2, [r0, #0]
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6013      	str	r3, [r2, #0]
}
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	4770      	bx	lr

08002ffa <HAL_TIM_OC_DelayElapsedCallback>:
{
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_TriggerCallback>:
{
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_IRQHandler>:
{
 8003000:	b510      	push	{r4, lr}
 8003002:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003004:	6803      	ldr	r3, [r0, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	f012 0f02 	tst.w	r2, #2
 800300c:	d011      	beq.n	8003032 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	f012 0f02 	tst.w	r2, #2
 8003014:	d00d      	beq.n	8003032 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003016:	f06f 0202 	mvn.w	r2, #2
 800301a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800301c:	2301      	movs	r3, #1
 800301e:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003020:	6803      	ldr	r3, [r0, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f013 0f03 	tst.w	r3, #3
 8003028:	d079      	beq.n	800311e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800302a:	f001 f8a3 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	2300      	movs	r3, #0
 8003030:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	f012 0f04 	tst.w	r2, #4
 800303a:	d012      	beq.n	8003062 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	f012 0f04 	tst.w	r2, #4
 8003042:	d00e      	beq.n	8003062 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003044:	f06f 0204 	mvn.w	r2, #4
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304a:	2302      	movs	r3, #2
 800304c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003056:	d068      	beq.n	800312a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003058:	4620      	mov	r0, r4
 800305a:	f001 f88b 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	2300      	movs	r3, #0
 8003060:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	f012 0f08 	tst.w	r2, #8
 800306a:	d012      	beq.n	8003092 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	f012 0f08 	tst.w	r2, #8
 8003072:	d00e      	beq.n	8003092 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003074:	f06f 0208 	mvn.w	r2, #8
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307a:	2304      	movs	r3, #4
 800307c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f013 0f03 	tst.w	r3, #3
 8003086:	d057      	beq.n	8003138 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003088:	4620      	mov	r0, r4
 800308a:	f001 f873 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	2300      	movs	r3, #0
 8003090:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	f012 0f10 	tst.w	r2, #16
 800309a:	d012      	beq.n	80030c2 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	f012 0f10 	tst.w	r2, #16
 80030a2:	d00e      	beq.n	80030c2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030a4:	f06f 0210 	mvn.w	r2, #16
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030aa:	2308      	movs	r3, #8
 80030ac:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80030b6:	d046      	beq.n	8003146 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80030b8:	4620      	mov	r0, r4
 80030ba:	f001 f85b 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	2300      	movs	r3, #0
 80030c0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	f012 0f01 	tst.w	r2, #1
 80030ca:	d003      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	f012 0f01 	tst.w	r2, #1
 80030d2:	d13f      	bne.n	8003154 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80030e4:	d13d      	bne.n	8003162 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80030ee:	d003      	beq.n	80030f8 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80030f6:	d13b      	bne.n	8003170 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003108:	d139      	bne.n	800317e <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	f012 0f20 	tst.w	r2, #32
 8003112:	d003      	beq.n	800311c <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	f012 0f20 	tst.w	r2, #32
 800311a:	d137      	bne.n	800318c <HAL_TIM_IRQHandler+0x18c>
 800311c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	f7ff ff6c 	bl	8002ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff ff6a 	bl	8002ffc <HAL_TIM_PWM_PulseFinishedCallback>
 8003128:	e781      	b.n	800302e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	4620      	mov	r0, r4
 800312c:	f7ff ff65 	bl	8002ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	4620      	mov	r0, r4
 8003132:	f7ff ff63 	bl	8002ffc <HAL_TIM_PWM_PulseFinishedCallback>
 8003136:	e792      	b.n	800305e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003138:	4620      	mov	r0, r4
 800313a:	f7ff ff5e 	bl	8002ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800313e:	4620      	mov	r0, r4
 8003140:	f7ff ff5c 	bl	8002ffc <HAL_TIM_PWM_PulseFinishedCallback>
 8003144:	e7a3      	b.n	800308e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	4620      	mov	r0, r4
 8003148:	f7ff ff57 	bl	8002ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff ff55 	bl	8002ffc <HAL_TIM_PWM_PulseFinishedCallback>
 8003152:	e7b4      	b.n	80030be <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003154:	f06f 0201 	mvn.w	r2, #1
 8003158:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800315a:	4620      	mov	r0, r4
 800315c:	f001 fbb6 	bl	80048cc <HAL_TIM_PeriodElapsedCallback>
 8003160:	e7b8      	b.n	80030d4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003162:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003166:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003168:	4620      	mov	r0, r4
 800316a:	f000 f93c 	bl	80033e6 <HAL_TIMEx_BreakCallback>
 800316e:	e7ba      	b.n	80030e6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003170:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003174:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003176:	4620      	mov	r0, r4
 8003178:	f000 f936 	bl	80033e8 <HAL_TIMEx_Break2Callback>
 800317c:	e7bc      	b.n	80030f8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800317e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003182:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003184:	4620      	mov	r0, r4
 8003186:	f7ff ff3a 	bl	8002ffe <HAL_TIM_TriggerCallback>
 800318a:	e7be      	b.n	800310a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800318c:	f06f 0220 	mvn.w	r2, #32
 8003190:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003192:	4620      	mov	r0, r4
 8003194:	f000 f926 	bl	80033e4 <HAL_TIMEx_CommutationCallback>
}
 8003198:	e7c0      	b.n	800311c <HAL_TIM_IRQHandler+0x11c>
	...

0800319c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800319c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800319e:	4a23      	ldr	r2, [pc, #140]	; (800322c <TIM_Base_SetConfig+0x90>)
 80031a0:	4290      	cmp	r0, r2
 80031a2:	d03d      	beq.n	8003220 <TIM_Base_SetConfig+0x84>
 80031a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80031a8:	d03a      	beq.n	8003220 <TIM_Base_SetConfig+0x84>
 80031aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80031ae:	4290      	cmp	r0, r2
 80031b0:	d036      	beq.n	8003220 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <TIM_Base_SetConfig+0x90>)
 80031b4:	4290      	cmp	r0, r2
 80031b6:	d012      	beq.n	80031de <TIM_Base_SetConfig+0x42>
 80031b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80031bc:	d00f      	beq.n	80031de <TIM_Base_SetConfig+0x42>
 80031be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80031c2:	4290      	cmp	r0, r2
 80031c4:	d00b      	beq.n	80031de <TIM_Base_SetConfig+0x42>
 80031c6:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80031ca:	4290      	cmp	r0, r2
 80031cc:	d007      	beq.n	80031de <TIM_Base_SetConfig+0x42>
 80031ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031d2:	4290      	cmp	r0, r2
 80031d4:	d003      	beq.n	80031de <TIM_Base_SetConfig+0x42>
 80031d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031da:	4290      	cmp	r0, r2
 80031dc:	d103      	bne.n	80031e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80031de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	68ca      	ldr	r2, [r1, #12]
 80031e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ea:	694a      	ldr	r2, [r1, #20]
 80031ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80031ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f0:	688b      	ldr	r3, [r1, #8]
 80031f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80031f4:	680b      	ldr	r3, [r1, #0]
 80031f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <TIM_Base_SetConfig+0x90>)
 80031fa:	4298      	cmp	r0, r3
 80031fc:	d00b      	beq.n	8003216 <TIM_Base_SetConfig+0x7a>
 80031fe:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003202:	4298      	cmp	r0, r3
 8003204:	d007      	beq.n	8003216 <TIM_Base_SetConfig+0x7a>
 8003206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800320a:	4298      	cmp	r0, r3
 800320c:	d003      	beq.n	8003216 <TIM_Base_SetConfig+0x7a>
 800320e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003212:	4298      	cmp	r0, r3
 8003214:	d101      	bne.n	800321a <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8003216:	690b      	ldr	r3, [r1, #16]
 8003218:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800321a:	2301      	movs	r3, #1
 800321c:	6143      	str	r3, [r0, #20]
 800321e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003224:	684a      	ldr	r2, [r1, #4]
 8003226:	4313      	orrs	r3, r2
 8003228:	e7c3      	b.n	80031b2 <TIM_Base_SetConfig+0x16>
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00

08003230 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8003230:	b1a8      	cbz	r0, 800325e <HAL_TIM_Base_Init+0x2e>
{ 
 8003232:	b510      	push	{r4, lr}
 8003234:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8003236:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800323a:	b15b      	cbz	r3, 8003254 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003242:	1d21      	adds	r1, r4, #4
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	f7ff ffa9 	bl	800319c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800324a:	2301      	movs	r3, #1
 800324c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003250:	2000      	movs	r0, #0
 8003252:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003254:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003258:	f002 f930 	bl	80054bc <HAL_TIM_Base_MspInit>
 800325c:	e7ee      	b.n	800323c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800325e:	2001      	movs	r0, #1
 8003260:	4770      	bx	lr

08003262 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003262:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8003264:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003266:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800326e:	4319      	orrs	r1, r3
 8003270:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003272:	6084      	str	r4, [r0, #8]
} 
 8003274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800327c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	f000 8082 	beq.w	800338a <HAL_TIM_ConfigClockSource+0x10e>
{
 8003286:	b510      	push	{r4, lr}
 8003288:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800328a:	2301      	movs	r3, #1
 800328c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003296:	6802      	ldr	r2, [r0, #0]
 8003298:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_TIM_ConfigClockSource+0x114>)
 800329c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800329e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80032a0:	680b      	ldr	r3, [r1, #0]
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d05d      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0xe6>
 80032a6:	d910      	bls.n	80032ca <HAL_TIM_ConfigClockSource+0x4e>
 80032a8:	2b70      	cmp	r3, #112	; 0x70
 80032aa:	d040      	beq.n	800332e <HAL_TIM_ConfigClockSource+0xb2>
 80032ac:	d81f      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x72>
 80032ae:	2b50      	cmp	r3, #80	; 0x50
 80032b0:	d04d      	beq.n	800334e <HAL_TIM_ConfigClockSource+0xd2>
 80032b2:	2b60      	cmp	r3, #96	; 0x60
 80032b4:	d134      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80032b6:	68ca      	ldr	r2, [r1, #12]
 80032b8:	6849      	ldr	r1, [r1, #4]
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	f7ff fe75 	bl	8002faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c0:	2160      	movs	r1, #96	; 0x60
 80032c2:	6820      	ldr	r0, [r4, #0]
 80032c4:	f7ff fe85 	bl	8002fd2 <TIM_ITRx_SetConfig>
    break;
 80032c8:	e02a      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d053      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0xfa>
 80032ce:	d908      	bls.n	80032e2 <HAL_TIM_ConfigClockSource+0x66>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d055      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x104>
 80032d4:	2b30      	cmp	r3, #48	; 0x30
 80032d6:	d123      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80032d8:	2130      	movs	r1, #48	; 0x30
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	f7ff fe79 	bl	8002fd2 <TIM_ITRx_SetConfig>
    break;
 80032e0:	e01e      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80032e2:	b9eb      	cbnz	r3, 8003320 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80032e4:	2100      	movs	r1, #0
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	f7ff fe73 	bl	8002fd2 <TIM_ITRx_SetConfig>
    break;
 80032ec:	e018      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d00e      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x96>
 80032f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f8:	d112      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 80032fa:	68cb      	ldr	r3, [r1, #12]
 80032fc:	684a      	ldr	r2, [r1, #4]
 80032fe:	6889      	ldr	r1, [r1, #8]
 8003300:	6820      	ldr	r0, [r4, #0]
 8003302:	f7ff ffae 	bl	8003262 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	6893      	ldr	r3, [r2, #8]
 800330a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330e:	6093      	str	r3, [r2, #8]
    break;
 8003310:	e006      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	6893      	ldr	r3, [r2, #8]
 8003316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331a:	f023 0307 	bic.w	r3, r3, #7
 800331e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003320:	2301      	movs	r3, #1
 8003322:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003326:	2000      	movs	r0, #0
 8003328:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800332c:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 800332e:	68cb      	ldr	r3, [r1, #12]
 8003330:	684a      	ldr	r2, [r1, #4]
 8003332:	6889      	ldr	r1, [r1, #8]
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	f7ff ff94 	bl	8003262 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003346:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800334a:	6093      	str	r3, [r2, #8]
    break;
 800334c:	e7e8      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800334e:	68ca      	ldr	r2, [r1, #12]
 8003350:	6849      	ldr	r1, [r1, #4]
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	f7ff fe16 	bl	8002f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003358:	2150      	movs	r1, #80	; 0x50
 800335a:	6820      	ldr	r0, [r4, #0]
 800335c:	f7ff fe39 	bl	8002fd2 <TIM_ITRx_SetConfig>
    break;
 8003360:	e7de      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003362:	68ca      	ldr	r2, [r1, #12]
 8003364:	6849      	ldr	r1, [r1, #4]
 8003366:	6820      	ldr	r0, [r4, #0]
 8003368:	f7ff fe0c 	bl	8002f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	f7ff fe2f 	bl	8002fd2 <TIM_ITRx_SetConfig>
    break;
 8003374:	e7d4      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003376:	2110      	movs	r1, #16
 8003378:	6820      	ldr	r0, [r4, #0]
 800337a:	f7ff fe2a 	bl	8002fd2 <TIM_ITRx_SetConfig>
    break;
 800337e:	e7cf      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003380:	2120      	movs	r1, #32
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	f7ff fe25 	bl	8002fd2 <TIM_ITRx_SetConfig>
    break;
 8003388:	e7ca      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 800338a:	2002      	movs	r0, #2
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	fffe0088 	.word	0xfffe0088

08003394 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003394:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d01f      	beq.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 800339c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800339e:	2301      	movs	r3, #1
 80033a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a4:	6804      	ldr	r4, [r0, #0]
 80033a6:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a8:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033aa:	4d0d      	ldr	r5, [pc, #52]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 80033ac:	42ac      	cmp	r4, r5
 80033ae:	d010      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b4:	680d      	ldr	r5, [r1, #0]
 80033b6:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033bc:	6889      	ldr	r1, [r1, #8]
 80033be:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c0:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033c2:	6803      	ldr	r3, [r0, #0]
 80033c4:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80033c6:	2300      	movs	r3, #0
 80033c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80033cc:	4618      	mov	r0, r3
} 
 80033ce:	bc30      	pop	{r4, r5}
 80033d0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033d6:	684d      	ldr	r5, [r1, #4]
 80033d8:	432b      	orrs	r3, r5
 80033da:	e7e9      	b.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 80033dc:	2002      	movs	r0, #2
 80033de:	4770      	bx	lr
 80033e0:	40012c00 	.word	0x40012c00

080033e4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033e8:	4770      	bx	lr

080033ea <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ea:	6802      	ldr	r2, [r0, #0]
 80033ec:	6813      	ldr	r3, [r2, #0]
 80033ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033f2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	6802      	ldr	r2, [r0, #0]
 80033f6:	6893      	ldr	r3, [r2, #8]
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033fe:	2320      	movs	r3, #32
 8003400:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8003404:	4770      	bx	lr

08003406 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8003406:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	d001      	beq.n	8003414 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8003410:	2002      	movs	r0, #2
 8003412:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003414:	b1b9      	cbz	r1, 8003446 <HAL_UART_Transmit_IT+0x40>
 8003416:	b1c2      	cbz	r2, 800344a <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 8003418:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800341c:	2b01      	cmp	r3, #1
 800341e:	d016      	beq.n	800344e <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 8003420:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8003422:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8003426:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342a:	2300      	movs	r3, #0
 800342c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342e:	2221      	movs	r2, #33	; 0x21
 8003430:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8003434:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003438:	6801      	ldr	r1, [r0, #0]
 800343a:	680a      	ldr	r2, [r1, #0]
 800343c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003440:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003442:	4618      	mov	r0, r3
 8003444:	4770      	bx	lr
      return HAL_ERROR;
 8003446:	2001      	movs	r0, #1
 8003448:	4770      	bx	lr
 800344a:	2001      	movs	r0, #1
 800344c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800344e:	2002      	movs	r0, #2
}
 8003450:	4770      	bx	lr

08003452 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8003452:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b20      	cmp	r3, #32
 800345a:	d001      	beq.n	8003460 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 800345c:	2002      	movs	r0, #2
 800345e:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003460:	2900      	cmp	r1, #0
 8003462:	d047      	beq.n	80034f4 <HAL_UART_Receive_IT+0xa2>
 8003464:	2a00      	cmp	r2, #0
 8003466:	d047      	beq.n	80034f8 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8003468:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800346c:	2b01      	cmp	r3, #1
 800346e:	d045      	beq.n	80034fc <HAL_UART_Receive_IT+0xaa>
 8003470:	2301      	movs	r3, #1
 8003472:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8003476:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8003478:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800347c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003480:	6883      	ldr	r3, [r0, #8]
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d006      	beq.n	8003496 <HAL_UART_Receive_IT+0x44>
 8003488:	b9a3      	cbnz	r3, 80034b4 <HAL_UART_Receive_IT+0x62>
 800348a:	6903      	ldr	r3, [r0, #16]
 800348c:	b973      	cbnz	r3, 80034ac <HAL_UART_Receive_IT+0x5a>
 800348e:	23ff      	movs	r3, #255	; 0xff
 8003490:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003494:	e011      	b.n	80034ba <HAL_UART_Receive_IT+0x68>
 8003496:	6903      	ldr	r3, [r0, #16]
 8003498:	b923      	cbnz	r3, 80034a4 <HAL_UART_Receive_IT+0x52>
 800349a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800349e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80034a2:	e00a      	b.n	80034ba <HAL_UART_Receive_IT+0x68>
 80034a4:	23ff      	movs	r3, #255	; 0xff
 80034a6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80034aa:	e006      	b.n	80034ba <HAL_UART_Receive_IT+0x68>
 80034ac:	237f      	movs	r3, #127	; 0x7f
 80034ae:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80034b2:	e002      	b.n	80034ba <HAL_UART_Receive_IT+0x68>
 80034b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b8:	d012      	beq.n	80034e0 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034be:	2222      	movs	r2, #34	; 0x22
 80034c0:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80034c4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	6801      	ldr	r1, [r0, #0]
 80034ca:	688a      	ldr	r2, [r1, #8]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034d2:	6801      	ldr	r1, [r0, #0]
 80034d4:	680a      	ldr	r2, [r1, #0]
 80034d6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80034da:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80034dc:	4618      	mov	r0, r3
 80034de:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80034e0:	6903      	ldr	r3, [r0, #16]
 80034e2:	b91b      	cbnz	r3, 80034ec <HAL_UART_Receive_IT+0x9a>
 80034e4:	237f      	movs	r3, #127	; 0x7f
 80034e6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80034ea:	e7e6      	b.n	80034ba <HAL_UART_Receive_IT+0x68>
 80034ec:	233f      	movs	r3, #63	; 0x3f
 80034ee:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80034f2:	e7e2      	b.n	80034ba <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 80034f4:	2001      	movs	r0, #1
 80034f6:	4770      	bx	lr
 80034f8:	2001      	movs	r0, #1
 80034fa:	4770      	bx	lr
    __HAL_LOCK(huart);
 80034fc:	2002      	movs	r0, #2
}
 80034fe:	4770      	bx	lr

08003500 <HAL_UART_TxCpltCallback>:
{
 8003500:	4770      	bx	lr

08003502 <HAL_UART_ErrorCallback>:
{
 8003502:	4770      	bx	lr

08003504 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003504:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003506:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800350e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8003512:	f7ff fff6 	bl	8003502 <HAL_UART_ErrorCallback>
 8003516:	bd08      	pop	{r3, pc}

08003518 <UART_SetConfig>:
{
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800351c:	6883      	ldr	r3, [r0, #8]
 800351e:	6902      	ldr	r2, [r0, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	6942      	ldr	r2, [r0, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	69c2      	ldr	r2, [r0, #28]
 8003528:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800352a:	6801      	ldr	r1, [r0, #0]
 800352c:	6808      	ldr	r0, [r1, #0]
 800352e:	4a64      	ldr	r2, [pc, #400]	; (80036c0 <UART_SetConfig+0x1a8>)
 8003530:	4002      	ands	r2, r0
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	6853      	ldr	r3, [r2, #4]
 800353a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800353e:	68e1      	ldr	r1, [r4, #12]
 8003540:	430b      	orrs	r3, r1
 8003542:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003544:	69a3      	ldr	r3, [r4, #24]
 8003546:	6a22      	ldr	r2, [r4, #32]
 8003548:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800354a:	6821      	ldr	r1, [r4, #0]
 800354c:	688a      	ldr	r2, [r1, #8]
 800354e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003556:	6825      	ldr	r5, [r4, #0]
 8003558:	4b5a      	ldr	r3, [pc, #360]	; (80036c4 <UART_SetConfig+0x1ac>)
 800355a:	429d      	cmp	r5, r3
 800355c:	d015      	beq.n	800358a <UART_SetConfig+0x72>
 800355e:	4b5a      	ldr	r3, [pc, #360]	; (80036c8 <UART_SetConfig+0x1b0>)
 8003560:	429d      	cmp	r5, r3
 8003562:	d029      	beq.n	80035b8 <UART_SetConfig+0xa0>
 8003564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003568:	429d      	cmp	r5, r3
 800356a:	d021      	beq.n	80035b0 <UART_SetConfig+0x98>
 800356c:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356e:	69e2      	ldr	r2, [r4, #28]
 8003570:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003574:	d022      	beq.n	80035bc <UART_SetConfig+0xa4>
    switch (clocksource)
 8003576:	2b08      	cmp	r3, #8
 8003578:	f200 809f 	bhi.w	80036ba <UART_SetConfig+0x1a2>
 800357c:	e8df f003 	tbb	[pc, r3]
 8003580:	9d7c7166 	.word	0x9d7c7166
 8003584:	9d9d9d88 	.word	0x9d9d9d88
 8003588:	93          	.byte	0x93
 8003589:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800358a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b03      	cmp	r3, #3
 8003596:	d809      	bhi.n	80035ac <UART_SetConfig+0x94>
 8003598:	e8df f003 	tbb	[pc, r3]
 800359c:	0c060402 	.word	0x0c060402
 80035a0:	2300      	movs	r3, #0
 80035a2:	e7e4      	b.n	800356e <UART_SetConfig+0x56>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e7e2      	b.n	800356e <UART_SetConfig+0x56>
 80035a8:	2308      	movs	r3, #8
 80035aa:	e7e0      	b.n	800356e <UART_SetConfig+0x56>
 80035ac:	2310      	movs	r3, #16
 80035ae:	e7de      	b.n	800356e <UART_SetConfig+0x56>
 80035b0:	2300      	movs	r3, #0
 80035b2:	e7dc      	b.n	800356e <UART_SetConfig+0x56>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e7da      	b.n	800356e <UART_SetConfig+0x56>
 80035b8:	2300      	movs	r3, #0
 80035ba:	e7d8      	b.n	800356e <UART_SetConfig+0x56>
    switch (clocksource)
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d842      	bhi.n	8003646 <UART_SetConfig+0x12e>
 80035c0:	e8df f003 	tbb	[pc, r3]
 80035c4:	41221705 	.word	0x41221705
 80035c8:	4141412d 	.word	0x4141412d
 80035cc:	38          	.byte	0x38
 80035cd:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80035ce:	f7ff f957 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 80035d2:	6862      	ldr	r2, [r4, #4]
 80035d4:	0853      	lsrs	r3, r2, #1
 80035d6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80035da:	fbb3 f3f2 	udiv	r3, r3, r2
 80035de:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80035e0:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80035e2:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035e6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80035ea:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	60d3      	str	r3, [r2, #12]
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80035f2:	f7ff f95b 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 80035f6:	6862      	ldr	r2, [r4, #4]
 80035f8:	0853      	lsrs	r3, r2, #1
 80035fa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80035fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003602:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003604:	2000      	movs	r0, #0
        break;
 8003606:	e7ec      	b.n	80035e2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003608:	6862      	ldr	r2, [r4, #4]
 800360a:	0853      	lsrs	r3, r2, #1
 800360c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003610:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003614:	fbb3 f3f2 	udiv	r3, r3, r2
 8003618:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800361a:	2000      	movs	r0, #0
        break;
 800361c:	e7e1      	b.n	80035e2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800361e:	f7ff f807 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 8003622:	6862      	ldr	r2, [r4, #4]
 8003624:	0853      	lsrs	r3, r2, #1
 8003626:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800362a:	fbb3 f3f2 	udiv	r3, r3, r2
 800362e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003630:	2000      	movs	r0, #0
        break;
 8003632:	e7d6      	b.n	80035e2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003634:	6862      	ldr	r2, [r4, #4]
 8003636:	0853      	lsrs	r3, r2, #1
 8003638:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800363c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003640:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003642:	2000      	movs	r0, #0
        break;
 8003644:	e7cd      	b.n	80035e2 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8003646:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003648:	2300      	movs	r3, #0
 800364a:	e7ca      	b.n	80035e2 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800364c:	f7ff f918 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003656:	fbb0 f0f3 	udiv	r0, r0, r3
 800365a:	b280      	uxth	r0, r0
 800365c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800365e:	2000      	movs	r0, #0
        break;
 8003660:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003662:	f7ff f923 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800366c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003670:	b280      	uxth	r0, r0
 8003672:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003674:	2000      	movs	r0, #0
        break;
 8003676:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003678:	6862      	ldr	r2, [r4, #4]
 800367a:	0853      	lsrs	r3, r2, #1
 800367c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003680:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003684:	fbb3 f3f2 	udiv	r3, r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800368c:	2000      	movs	r0, #0
        break;
 800368e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003690:	f7fe ffce 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 8003694:	6863      	ldr	r3, [r4, #4]
 8003696:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800369a:	fbb0 f0f3 	udiv	r0, r0, r3
 800369e:	b280      	uxth	r0, r0
 80036a0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036a2:	2000      	movs	r0, #0
        break;
 80036a4:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80036a6:	6862      	ldr	r2, [r4, #4]
 80036a8:	0853      	lsrs	r3, r2, #1
 80036aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80036ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036b6:	2000      	movs	r0, #0
        break;
 80036b8:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 80036ba:	2001      	movs	r0, #1
}
 80036bc:	bd38      	pop	{r3, r4, r5, pc}
 80036be:	bf00      	nop
 80036c0:	efff69f3 	.word	0xefff69f3
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40004400 	.word	0x40004400

080036cc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036ce:	f013 0f01 	tst.w	r3, #1
 80036d2:	d006      	beq.n	80036e2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036d4:	6802      	ldr	r2, [r0, #0]
 80036d6:	6853      	ldr	r3, [r2, #4]
 80036d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80036de:	430b      	orrs	r3, r1
 80036e0:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036e4:	f013 0f02 	tst.w	r3, #2
 80036e8:	d006      	beq.n	80036f8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ea:	6802      	ldr	r2, [r0, #0]
 80036ec:	6853      	ldr	r3, [r2, #4]
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036fa:	f013 0f04 	tst.w	r3, #4
 80036fe:	d006      	beq.n	800370e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003700:	6802      	ldr	r2, [r0, #0]
 8003702:	6853      	ldr	r3, [r2, #4]
 8003704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003708:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800370a:	430b      	orrs	r3, r1
 800370c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003710:	f013 0f08 	tst.w	r3, #8
 8003714:	d006      	beq.n	8003724 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003716:	6802      	ldr	r2, [r0, #0]
 8003718:	6853      	ldr	r3, [r2, #4]
 800371a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800371e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003720:	430b      	orrs	r3, r1
 8003722:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003726:	f013 0f10 	tst.w	r3, #16
 800372a:	d006      	beq.n	800373a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800372c:	6802      	ldr	r2, [r0, #0]
 800372e:	6893      	ldr	r3, [r2, #8]
 8003730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003734:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003736:	430b      	orrs	r3, r1
 8003738:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800373a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800373c:	f013 0f20 	tst.w	r3, #32
 8003740:	d006      	beq.n	8003750 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003742:	6802      	ldr	r2, [r0, #0]
 8003744:	6893      	ldr	r3, [r2, #8]
 8003746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800374a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800374c:	430b      	orrs	r3, r1
 800374e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003750:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003752:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003756:	d00a      	beq.n	800376e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003758:	6802      	ldr	r2, [r0, #0]
 800375a:	6853      	ldr	r3, [r2, #4]
 800375c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003760:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003762:	430b      	orrs	r3, r1
 8003764:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003766:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376c:	d00b      	beq.n	8003786 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800376e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003770:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003774:	d006      	beq.n	8003784 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003776:	6802      	ldr	r2, [r0, #0]
 8003778:	6853      	ldr	r3, [r2, #4]
 800377a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800377e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003780:	430b      	orrs	r3, r1
 8003782:	6053      	str	r3, [r2, #4]
 8003784:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003786:	6802      	ldr	r2, [r0, #0]
 8003788:	6853      	ldr	r3, [r2, #4]
 800378a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800378e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003790:	430b      	orrs	r3, r1
 8003792:	6053      	str	r3, [r2, #4]
 8003794:	e7eb      	b.n	800376e <UART_AdvFeatureConfig+0xa2>

08003796 <UART_WaitOnFlagUntilTimeout>:
{
 8003796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379a:	4605      	mov	r5, r0
 800379c:	460f      	mov	r7, r1
 800379e:	4616      	mov	r6, r2
 80037a0:	4698      	mov	r8, r3
 80037a2:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	ea37 0303 	bics.w	r3, r7, r3
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	42b3      	cmp	r3, r6
 80037b4:	d11e      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80037b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80037ba:	d0f3      	beq.n	80037a4 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80037bc:	b12c      	cbz	r4, 80037ca <UART_WaitOnFlagUntilTimeout+0x34>
 80037be:	f7fd fb4b 	bl	8000e58 <HAL_GetTick>
 80037c2:	eba0 0008 	sub.w	r0, r0, r8
 80037c6:	4284      	cmp	r4, r0
 80037c8:	d2ec      	bcs.n	80037a4 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ca:	682a      	ldr	r2, [r5, #0]
 80037cc:	6813      	ldr	r3, [r2, #0]
 80037ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037d2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	682a      	ldr	r2, [r5, #0]
 80037d6:	6893      	ldr	r3, [r2, #8]
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80037de:	2320      	movs	r3, #32
 80037e0:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80037e4:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80037e8:	2300      	movs	r3, #0
 80037ea:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80037ee:	2003      	movs	r0, #3
 80037f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80037f4:	2000      	movs	r0, #0
}
 80037f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037fa <UART_CheckIdleState>:
{
 80037fa:	b530      	push	{r4, r5, lr}
 80037fc:	b083      	sub	sp, #12
 80037fe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8003804:	f7fd fb28 	bl	8000e58 <HAL_GetTick>
 8003808:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f013 0f08 	tst.w	r3, #8
 8003812:	d10e      	bne.n	8003832 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f013 0f04 	tst.w	r3, #4
 800381c:	d117      	bne.n	800384e <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800381e:	2320      	movs	r3, #32
 8003820:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8003828:	2000      	movs	r0, #0
 800382a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 800382e:	b003      	add	sp, #12
 8003830:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003832:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	4603      	mov	r3, r0
 800383a:	2200      	movs	r2, #0
 800383c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff ffa8 	bl	8003796 <UART_WaitOnFlagUntilTimeout>
 8003846:	2800      	cmp	r0, #0
 8003848:	d0e4      	beq.n	8003814 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800384a:	2003      	movs	r0, #3
 800384c:	e7ef      	b.n	800382e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800384e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	462b      	mov	r3, r5
 8003856:	2200      	movs	r2, #0
 8003858:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800385c:	4620      	mov	r0, r4
 800385e:	f7ff ff9a 	bl	8003796 <UART_WaitOnFlagUntilTimeout>
 8003862:	2800      	cmp	r0, #0
 8003864:	d0db      	beq.n	800381e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003866:	2003      	movs	r0, #3
 8003868:	e7e1      	b.n	800382e <UART_CheckIdleState+0x34>

0800386a <HAL_UART_Init>:
  if(huart == NULL)
 800386a:	b378      	cbz	r0, 80038cc <HAL_UART_Init+0x62>
{
 800386c:	b510      	push	{r4, lr}
 800386e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003870:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003874:	b30b      	cbz	r3, 80038ba <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003876:	2324      	movs	r3, #36	; 0x24
 8003878:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff fe46 	bl	8003518 <UART_SetConfig>
 800388c:	2801      	cmp	r0, #1
 800388e:	d01f      	beq.n	80038d0 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003892:	b9bb      	cbnz	r3, 80038c4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	6853      	ldr	r3, [r2, #4]
 8003898:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800389c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	6893      	ldr	r3, [r2, #8]
 80038a2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80038a6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff ffa1 	bl	80037fa <UART_CheckIdleState>
 80038b8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80038ba:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80038be:	f001 fe1b 	bl	80054f8 <HAL_UART_MspInit>
 80038c2:	e7d8      	b.n	8003876 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7ff ff01 	bl	80036cc <UART_AdvFeatureConfig>
 80038ca:	e7e3      	b.n	8003894 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80038cc:	2001      	movs	r0, #1
 80038ce:	4770      	bx	lr
}
 80038d0:	bd10      	pop	{r4, pc}

080038d2 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038d2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b21      	cmp	r3, #33	; 0x21
 80038da:	d001      	beq.n	80038e0 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2002      	movs	r0, #2
  }
}
 80038de:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80038e0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b193      	cbz	r3, 800390e <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	6883      	ldr	r3, [r0, #8]
 80038ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ee:	d01a      	beq.n	8003926 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80038f0:	6802      	ldr	r2, [r0, #0]
 80038f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038f4:	1c59      	adds	r1, r3, #1
 80038f6:	64c1      	str	r1, [r0, #76]	; 0x4c
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80038fc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800390a:	2000      	movs	r0, #0
 800390c:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800390e:	6802      	ldr	r2, [r0, #0]
 8003910:	6813      	ldr	r3, [r2, #0]
 8003912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003916:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003918:	6802      	ldr	r2, [r0, #0]
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003920:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8003922:	2000      	movs	r0, #0
 8003924:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003926:	6903      	ldr	r3, [r0, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e1      	bne.n	80038f0 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800392c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800392e:	6802      	ldr	r2, [r0, #0]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003938:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800393a:	3302      	adds	r3, #2
 800393c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800393e:	e7dd      	b.n	80038fc <UART_Transmit_IT+0x2a>

08003940 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003940:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003942:	6801      	ldr	r1, [r0, #0]
 8003944:	680b      	ldr	r3, [r1, #0]
 8003946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394a:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800394c:	2320      	movs	r3, #32
 800394e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003952:	f7ff fdd5 	bl	8003500 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8003956:	2000      	movs	r0, #0
 8003958:	bd08      	pop	{r3, pc}

0800395a <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800395a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800395e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b22      	cmp	r3, #34	; 0x22
 8003966:	d006      	beq.n	8003976 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003968:	6802      	ldr	r2, [r0, #0]
 800396a:	6993      	ldr	r3, [r2, #24]
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8003972:	2002      	movs	r0, #2
 8003974:	4770      	bx	lr
{
 8003976:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003978:	6803      	ldr	r3, [r0, #0]
 800397a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800397c:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397e:	6881      	ldr	r1, [r0, #8]
 8003980:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003984:	d00f      	beq.n	80039a6 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003986:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8003988:	1c4c      	adds	r4, r1, #1
 800398a:	6544      	str	r4, [r0, #84]	; 0x54
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	401a      	ands	r2, r3
 8003990:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8003992:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29b      	uxth	r3, r3
 800399c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80039a0:	b15b      	cbz	r3, 80039ba <UART_Receive_IT+0x60>
    return HAL_OK;
 80039a2:	2000      	movs	r0, #0
  }
}
 80039a4:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a6:	6901      	ldr	r1, [r0, #16]
 80039a8:	2900      	cmp	r1, #0
 80039aa:	d1ec      	bne.n	8003986 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80039ac:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80039ae:	401a      	ands	r2, r3
 80039b0:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 80039b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80039b4:	3302      	adds	r3, #2
 80039b6:	6543      	str	r3, [r0, #84]	; 0x54
 80039b8:	e7eb      	b.n	8003992 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ba:	6802      	ldr	r2, [r0, #0]
 80039bc:	6813      	ldr	r3, [r2, #0]
 80039be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c2:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	6802      	ldr	r2, [r0, #0]
 80039c6:	6893      	ldr	r3, [r2, #8]
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80039ce:	2320      	movs	r3, #32
 80039d0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80039d4:	f000 fbb8 	bl	8004148 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80039d8:	2000      	movs	r0, #0
 80039da:	bd10      	pop	{r4, pc}

080039dc <HAL_UART_IRQHandler>:
{
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039e0:	6802      	ldr	r2, [r0, #0]
 80039e2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039e4:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 80039e6:	f013 050f 	ands.w	r5, r3, #15
 80039ea:	d105      	bne.n	80039f8 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ec:	f013 0f20 	tst.w	r3, #32
 80039f0:	d002      	beq.n	80039f8 <HAL_UART_IRQHandler+0x1c>
 80039f2:	f011 0f20 	tst.w	r1, #32
 80039f6:	d160      	bne.n	8003aba <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 80039f8:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 80039fa:	2d00      	cmp	r5, #0
 80039fc:	d072      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80039fe:	f010 0501 	ands.w	r5, r0, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003a04:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003a08:	d06c      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a0a:	f013 0f01 	tst.w	r3, #1
 8003a0e:	d007      	beq.n	8003a20 <HAL_UART_IRQHandler+0x44>
 8003a10:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003a14:	d004      	beq.n	8003a20 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003a16:	2001      	movs	r0, #1
 8003a18:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a1a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a1c:	4302      	orrs	r2, r0
 8003a1e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a20:	f013 0f02 	tst.w	r3, #2
 8003a24:	d007      	beq.n	8003a36 <HAL_UART_IRQHandler+0x5a>
 8003a26:	b135      	cbz	r5, 8003a36 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	2002      	movs	r0, #2
 8003a2c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a2e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a30:	f042 0204 	orr.w	r2, r2, #4
 8003a34:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a36:	f013 0f04 	tst.w	r3, #4
 8003a3a:	d007      	beq.n	8003a4c <HAL_UART_IRQHandler+0x70>
 8003a3c:	b135      	cbz	r5, 8003a4c <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003a3e:	6822      	ldr	r2, [r4, #0]
 8003a40:	2004      	movs	r0, #4
 8003a42:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a44:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a46:	f042 0202 	orr.w	r2, r2, #2
 8003a4a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003a4c:	f013 0f08 	tst.w	r3, #8
 8003a50:	d009      	beq.n	8003a66 <HAL_UART_IRQHandler+0x8a>
 8003a52:	f011 0f20 	tst.w	r1, #32
 8003a56:	d100      	bne.n	8003a5a <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a58:	b12d      	cbz	r5, 8003a66 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	2008      	movs	r0, #8
 8003a5e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a60:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a62:	4302      	orrs	r2, r0
 8003a64:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a66:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a68:	2a00      	cmp	r2, #0
 8003a6a:	d04d      	beq.n	8003b08 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a6c:	f013 0f20 	tst.w	r3, #32
 8003a70:	d002      	beq.n	8003a78 <HAL_UART_IRQHandler+0x9c>
 8003a72:	f011 0f20 	tst.w	r1, #32
 8003a76:	d123      	bne.n	8003ac0 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003a78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003a7a:	f013 0f08 	tst.w	r3, #8
 8003a7e:	d104      	bne.n	8003a8a <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003a84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a88:	d026      	beq.n	8003ad8 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7ff fcad 	bl	80033ea <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a98:	d01a      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aa4:	b183      	cbz	r3, 8003ac8 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aa6:	4a23      	ldr	r2, [pc, #140]	; (8003b34 <HAL_UART_IRQHandler+0x158>)
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aaa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003aac:	f7fd ff54 	bl	8001958 <HAL_DMA_Abort_IT>
 8003ab0:	b350      	cbz	r0, 8003b08 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ab2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003ab4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ab6:	4798      	blx	r3
 8003ab8:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8003aba:	f7ff ff4e 	bl	800395a <UART_Receive_IT>
      return;
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff ff4a 	bl	800395a <UART_Receive_IT>
 8003ac6:	e7d7      	b.n	8003a78 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff fd1a 	bl	8003502 <HAL_UART_ErrorCallback>
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7ff fd16 	bl	8003502 <HAL_UART_ErrorCallback>
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7ff fd12 	bl	8003502 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003ae4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003ae8:	d002      	beq.n	8003af0 <HAL_UART_IRQHandler+0x114>
 8003aea:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003aee:	d10c      	bne.n	8003b0a <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003af0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003af4:	d002      	beq.n	8003afc <HAL_UART_IRQHandler+0x120>
 8003af6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003afa:	d112      	bne.n	8003b22 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003afc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_IRQHandler+0x12c>
 8003b02:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003b06:	d110      	bne.n	8003b2a <HAL_UART_IRQHandler+0x14e>
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003b0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b0e:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003b10:	2320      	movs	r3, #32
 8003b12:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003b16:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f000 f80c 	bl	8003b38 <HAL_UARTEx_WakeupCallback>
    return;
 8003b20:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8003b22:	4620      	mov	r0, r4
 8003b24:	f7ff fed5 	bl	80038d2 <UART_Transmit_IT>
    return;
 8003b28:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff ff08 	bl	8003940 <UART_EndTransmit_IT>
    return;
 8003b30:	e7ea      	b.n	8003b08 <HAL_UART_IRQHandler+0x12c>
 8003b32:	bf00      	nop
 8003b34:	08003505 	.word	0x08003505

08003b38 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b38:	4770      	bx	lr
	...

08003b3c <adc_comms>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void adc_comms(){
 8003b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b40:	ed2d 8b02 	vpush	{d8}

	adc_raw_voltage =  ADC1_buffer[0];
 8003b44:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <adc_comms+0x194>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	6813      	ldr	r3, [r2, #0]
 8003b4a:	4962      	ldr	r1, [pc, #392]	; (8003cd4 <adc_comms+0x198>)
 8003b4c:	600b      	str	r3, [r1, #0]
	adc_raw_current =	ADC1_buffer[1];
 8003b4e:	6850      	ldr	r0, [r2, #4]
 8003b50:	4961      	ldr	r1, [pc, #388]	; (8003cd8 <adc_comms+0x19c>)
 8003b52:	6008      	str	r0, [r1, #0]
	raw_ambient_temp = ADC1_buffer[2];
 8003b54:	6894      	ldr	r4, [r2, #8]
 8003b56:	4961      	ldr	r1, [pc, #388]	; (8003cdc <adc_comms+0x1a0>)
 8003b58:	600c      	str	r4, [r1, #0]
	raw_geyser_temp = ADC1_buffer[3];
 8003b5a:	68d1      	ldr	r1, [r2, #12]
 8003b5c:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <adc_comms+0x1a4>)
 8003b5e:	6011      	str	r1, [r2, #0]


	//Converting Voltage
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b68:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003ce4 <adc_comms+0x1a8>
 8003b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b70:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003ce8 <adc_comms+0x1ac>
 8003b74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b78:	ee27 8a07 	vmul.f32	s16, s14, s14
 8003b7c:	4d5b      	ldr	r5, [pc, #364]	; (8003cec <adc_comms+0x1b0>)
 8003b7e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003b82:	f7fd f8cd 	bl	8000d20 <__aeabi_ul2f>
 8003b86:	ee07 0a90 	vmov	s15, r0
 8003b8a:	ee77 7a88 	vadd.f32	s15, s15, s16
 8003b8e:	ee17 0a90 	vmov	r0, s15
 8003b92:	f7fd f90b 	bl	8000dac <__aeabi_f2ulz>
 8003b96:	e9c5 0100 	strd	r0, r1, [r5]

	//Converting Current
//	adc_buffer_current = (pow((float)(adc_raw_current-2072.202f)/0.14603f,2.0f))+adc_buffer_current;

	//Converting Ambient temperature
	if( (raw_ambient_temp-615.f)/12.3f < 100){
 8003b9a:	ee07 4a90 	vmov	s15, r4
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003cf0 <adc_comms+0x1b4>
 8003ba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003baa:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003cf4 <adc_comms+0x1b8>
 8003bae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bb2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8003cf8 <adc_comms+0x1bc>
 8003bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	d41e      	bmi.n	8003bfe <adc_comms+0xc2>
		raw_ambient_temp = (raw_ambient_temp-615.0f)/12.3f;
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-615.f)/12.3f < 100){
 8003bc0:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <adc_comms+0x1a4>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8003cf0 <adc_comms+0x1b4>
 8003bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bd2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003cf4 <adc_comms+0x1b8>
 8003bd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bda:	eddf 7a47 	vldr	s15, [pc, #284]	; 8003cf8 <adc_comms+0x1bc>
 8003bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be6:	d417      	bmi.n	8003c18 <adc_comms+0xdc>
		raw_geyser_temp = (raw_geyser_temp-615.f)/12.3f;
		geyser_temp_int = raw_geyser_temp;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
	}

	adc_counter += 1;
 8003be8:	4a44      	ldr	r2, [pc, #272]	; (8003cfc <adc_comms+0x1c0>)
 8003bea:	8813      	ldrh	r3, [r2, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	8013      	strh	r3, [r2, #0]
	if(adc_counter == 10){
 8003bf2:	2b0a      	cmp	r3, #10
 8003bf4:	d01e      	beq.n	8003c34 <adc_comms+0xf8>

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}

}
 8003bf6:	ecbd 8b02 	vpop	{d8}
 8003bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		raw_ambient_temp = (raw_ambient_temp-615.0f)/12.3f;
 8003bfe:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003c02:	ee17 2a90 	vmov	r2, s15
 8003c06:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <adc_comms+0x1a0>)
 8003c08:	edc3 7a00 	vstr	s15, [r3]
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003c0c:	493c      	ldr	r1, [pc, #240]	; (8003d00 <adc_comms+0x1c4>)
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <adc_comms+0x1c8>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f002 facd 	bl	80061b0 <siprintf>
 8003c16:	e7d3      	b.n	8003bc0 <adc_comms+0x84>
		raw_geyser_temp = (raw_geyser_temp-615.f)/12.3f;
 8003c18:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003c1c:	ee17 2a90 	vmov	r2, s15
 8003c20:	edc3 7a00 	vstr	s15, [r3]
		geyser_temp_int = raw_geyser_temp;
 8003c24:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <adc_comms+0x1cc>)
 8003c26:	701a      	strb	r2, [r3, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003c28:	4935      	ldr	r1, [pc, #212]	; (8003d00 <adc_comms+0x1c4>)
 8003c2a:	4b38      	ldr	r3, [pc, #224]	; (8003d0c <adc_comms+0x1d0>)
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	f002 fabf 	bl	80061b0 <siprintf>
 8003c32:	e7d9      	b.n	8003be8 <adc_comms+0xac>
		*voltage_int_rms = sqrt(adc_buffer_voltage/10.f);
 8003c34:	4e36      	ldr	r6, [pc, #216]	; (8003d10 <adc_comms+0x1d4>)
 8003c36:	6834      	ldr	r4, [r6, #0]
 8003c38:	4d2c      	ldr	r5, [pc, #176]	; (8003cec <adc_comms+0x1b0>)
 8003c3a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003c3e:	f7fd f86f 	bl	8000d20 <__aeabi_ul2f>
 8003c42:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 8003c46:	ee07 0a10 	vmov	s14, r0
 8003c4a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8003c4e:	ee17 0a90 	vmov	r0, s15
 8003c52:	f7fc fc79 	bl	8000548 <__aeabi_f2d>
 8003c56:	ec41 0b10 	vmov	d0, r0, r1
 8003c5a:	f002 ff49 	bl	8006af0 <sqrt>
 8003c5e:	ec51 0b10 	vmov	r0, r1, d0
 8003c62:	f7fc ff75 	bl	8000b50 <__aeabi_d2uiz>
 8003c66:	6020      	str	r0, [r4, #0]
		*current_int_rms = sqrt(adc_buffer_current/10.f);
 8003c68:	4f2a      	ldr	r7, [pc, #168]	; (8003d14 <adc_comms+0x1d8>)
 8003c6a:	f8d7 8000 	ldr.w	r8, [r7]
 8003c6e:	4c2a      	ldr	r4, [pc, #168]	; (8003d18 <adc_comms+0x1dc>)
 8003c70:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003c74:	f7fd f854 	bl	8000d20 <__aeabi_ul2f>
 8003c78:	ee07 0a10 	vmov	s14, r0
 8003c7c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8003c80:	ee17 0a90 	vmov	r0, s15
 8003c84:	f7fc fc60 	bl	8000548 <__aeabi_f2d>
 8003c88:	ec41 0b10 	vmov	d0, r0, r1
 8003c8c:	f002 ff30 	bl	8006af0 <sqrt>
 8003c90:	ec51 0b10 	vmov	r0, r1, d0
 8003c94:	f7fc ff5c 	bl	8000b50 <__aeabi_d2uiz>
 8003c98:	f8c8 0000 	str.w	r0, [r8]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	4e18      	ldr	r6, [pc, #96]	; (8003d00 <adc_comms+0x1c4>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <adc_comms+0x1e0>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	f002 fa82 	bl	80061b0 <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4631      	mov	r1, r6
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <adc_comms+0x1e4>)
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f002 fa7b 	bl	80061b0 <siprintf>
		adc_counter = 0;
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <adc_comms+0x1c0>)
 8003cbe:	801a      	strh	r2, [r3, #0]
		adc_buffer_voltage = 0;
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e9c5 2300 	strd	r2, r3, [r5]
		adc_buffer_current = 0;
 8003cc8:	e9c4 2300 	strd	r2, r3, [r4]
}
 8003ccc:	e793      	b.n	8003bf6 <adc_comms+0xba>
 8003cce:	bf00      	nop
 8003cd0:	20000224 	.word	0x20000224
 8003cd4:	20000248 	.word	0x20000248
 8003cd8:	20000244 	.word	0x20000244
 8003cdc:	2000029c 	.word	0x2000029c
 8003ce0:	200002a0 	.word	0x200002a0
 8003ce4:	4501833b 	.word	0x4501833b
 8003ce8:	3c0d60a6 	.word	0x3c0d60a6
 8003cec:	20000238 	.word	0x20000238
 8003cf0:	4419c000 	.word	0x4419c000
 8003cf4:	4144cccd 	.word	0x4144cccd
 8003cf8:	42c80000 	.word	0x42c80000
 8003cfc:	20000240 	.word	0x20000240
 8003d00:	08006d68 	.word	0x08006d68
 8003d04:	2000024c 	.word	0x2000024c
 8003d08:	20000278 	.word	0x20000278
 8003d0c:	20000274 	.word	0x20000274
 8003d10:	200002dc 	.word	0x200002dc
 8003d14:	20000254 	.word	0x20000254
 8003d18:	20000230 	.word	0x20000230
 8003d1c:	200002e0 	.word	0x200002e0
 8003d20:	20000258 	.word	0x20000258

08003d24 <write2Flash>:
extern RTC_HandleTypeDef hrtc;




void write2Flash(){
 8003d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(log_counter < 100){
 8003d28:	4bbd      	ldr	r3, [pc, #756]	; (8004020 <write2Flash+0x2fc>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b63      	cmp	r3, #99	; 0x63
 8003d2e:	d90b      	bls.n	8003d48 <write2Flash+0x24>
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 8003d30:	2232      	movs	r2, #50	; 0x32
 8003d32:	2100      	movs	r1, #0
 8003d34:	4bbb      	ldr	r3, [pc, #748]	; (8004024 <write2Flash+0x300>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	f002 f975 	bl	8006026 <memset>


			log_counter += 1;
 8003d3c:	4ab8      	ldr	r2, [pc, #736]	; (8004020 <write2Flash+0x2fc>)
 8003d3e:	7813      	ldrb	r3, [r2, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	7013      	strb	r3, [r2, #0]
 8003d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8003d48:	4fb7      	ldr	r7, [pc, #732]	; (8004028 <write2Flash+0x304>)
 8003d4a:	4cb8      	ldr	r4, [pc, #736]	; (800402c <write2Flash+0x308>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	6839      	ldr	r1, [r7, #0]
 8003d50:	4620      	mov	r0, r4
 8003d52:	f7ff f830 	bl	8002db6 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8003d56:	2200      	movs	r2, #0
 8003d58:	4bb5      	ldr	r3, [pc, #724]	; (8004030 <write2Flash+0x30c>)
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7ff f855 	bl	8002e0c <HAL_RTC_GetDate>
		itoa((time->Hours),temp_time_var,10  );
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	4eb3      	ldr	r6, [pc, #716]	; (8004034 <write2Flash+0x310>)
 8003d66:	220a      	movs	r2, #10
 8003d68:	6831      	ldr	r1, [r6, #0]
 8003d6a:	7818      	ldrb	r0, [r3, #0]
 8003d6c:	f002 f946 	bl	8005ffc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003d70:	4cac      	ldr	r4, [pc, #688]	; (8004024 <write2Flash+0x300>)
 8003d72:	6825      	ldr	r5, [r4, #0]
 8003d74:	4628      	mov	r0, r5
 8003d76:	f7fc fa2b 	bl	80001d0 <strlen>
 8003d7a:	4405      	add	r5, r0
 8003d7c:	f8d6 8000 	ldr.w	r8, [r6]
 8003d80:	4640      	mov	r0, r8
 8003d82:	f7fc fa25 	bl	80001d0 <strlen>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4641      	mov	r1, r8
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f002 f940 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003d90:	f8d4 8000 	ldr.w	r8, [r4]
 8003d94:	4640      	mov	r0, r8
 8003d96:	f7fc fa1b 	bl	80001d0 <strlen>
 8003d9a:	4da7      	ldr	r5, [pc, #668]	; (8004038 <write2Flash+0x314>)
 8003d9c:	782b      	ldrb	r3, [r5, #0]
 8003d9e:	f808 3000 	strb.w	r3, [r8, r0]
		itoa((time->Minutes),temp_time_var,10  );
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	220a      	movs	r2, #10
 8003da6:	6831      	ldr	r1, [r6, #0]
 8003da8:	7858      	ldrb	r0, [r3, #1]
 8003daa:	f002 f927 	bl	8005ffc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003dae:	f8d4 8000 	ldr.w	r8, [r4]
 8003db2:	4640      	mov	r0, r8
 8003db4:	f7fc fa0c 	bl	80001d0 <strlen>
 8003db8:	4480      	add	r8, r0
 8003dba:	f8d6 9000 	ldr.w	r9, [r6]
 8003dbe:	4648      	mov	r0, r9
 8003dc0:	f7fc fa06 	bl	80001d0 <strlen>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	4640      	mov	r0, r8
 8003dca:	f002 f921 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003dce:	f8d4 8000 	ldr.w	r8, [r4]
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	f7fc f9fc 	bl	80001d0 <strlen>
 8003dd8:	782b      	ldrb	r3, [r5, #0]
 8003dda:	f808 3000 	strb.w	r3, [r8, r0]
		itoa((time->Seconds),temp_time_var,10  );
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	220a      	movs	r2, #10
 8003de2:	6831      	ldr	r1, [r6, #0]
 8003de4:	7898      	ldrb	r0, [r3, #2]
 8003de6:	f002 f909 	bl	8005ffc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003dea:	6827      	ldr	r7, [r4, #0]
 8003dec:	4638      	mov	r0, r7
 8003dee:	f7fc f9ef 	bl	80001d0 <strlen>
 8003df2:	4407      	add	r7, r0
 8003df4:	6836      	ldr	r6, [r6, #0]
 8003df6:	4630      	mov	r0, r6
 8003df8:	f7fc f9ea 	bl	80001d0 <strlen>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4638      	mov	r0, r7
 8003e02:	f002 f905 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e06:	6826      	ldr	r6, [r4, #0]
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f7fc f9e1 	bl	80001d0 <strlen>
 8003e0e:	782b      	ldrb	r3, [r5, #0]
 8003e10:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 8003e12:	6826      	ldr	r6, [r4, #0]
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7fc f9db 	bl	80001d0 <strlen>
 8003e1a:	4406      	add	r6, r0
 8003e1c:	4b87      	ldr	r3, [pc, #540]	; (800403c <write2Flash+0x318>)
 8003e1e:	681f      	ldr	r7, [r3, #0]
 8003e20:	4638      	mov	r0, r7
 8003e22:	f7fc f9d5 	bl	80001d0 <strlen>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4639      	mov	r1, r7
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f002 f8f0 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e30:	6826      	ldr	r6, [r4, #0]
 8003e32:	4630      	mov	r0, r6
 8003e34:	f7fc f9cc 	bl	80001d0 <strlen>
 8003e38:	782b      	ldrb	r3, [r5, #0]
 8003e3a:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 8003e3c:	6826      	ldr	r6, [r4, #0]
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7fc f9c6 	bl	80001d0 <strlen>
 8003e44:	4406      	add	r6, r0
 8003e46:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <write2Flash+0x31c>)
 8003e48:	681f      	ldr	r7, [r3, #0]
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	f7fc f9c0 	bl	80001d0 <strlen>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4639      	mov	r1, r7
 8003e54:	4630      	mov	r0, r6
 8003e56:	f002 f8db 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e5a:	6826      	ldr	r6, [r4, #0]
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f7fc f9b7 	bl	80001d0 <strlen>
 8003e62:	782b      	ldrb	r3, [r5, #0]
 8003e64:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 8003e66:	6826      	ldr	r6, [r4, #0]
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f7fc f9b1 	bl	80001d0 <strlen>
 8003e6e:	4406      	add	r6, r0
 8003e70:	4b74      	ldr	r3, [pc, #464]	; (8004044 <write2Flash+0x320>)
 8003e72:	681f      	ldr	r7, [r3, #0]
 8003e74:	4638      	mov	r0, r7
 8003e76:	f7fc f9ab 	bl	80001d0 <strlen>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f002 f8c6 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e84:	6826      	ldr	r6, [r4, #0]
 8003e86:	4630      	mov	r0, r6
 8003e88:	f7fc f9a2 	bl	80001d0 <strlen>
 8003e8c:	782b      	ldrb	r3, [r5, #0]
 8003e8e:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8003e90:	6826      	ldr	r6, [r4, #0]
 8003e92:	4630      	mov	r0, r6
 8003e94:	f7fc f99c 	bl	80001d0 <strlen>
 8003e98:	4406      	add	r6, r0
 8003e9a:	4b6b      	ldr	r3, [pc, #428]	; (8004048 <write2Flash+0x324>)
 8003e9c:	681f      	ldr	r7, [r3, #0]
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	f7fc f996 	bl	80001d0 <strlen>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4639      	mov	r1, r7
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f002 f8b1 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003eae:	6826      	ldr	r6, [r4, #0]
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f7fc f98d 	bl	80001d0 <strlen>
 8003eb6:	782b      	ldrb	r3, [r5, #0]
 8003eb8:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8003eba:	6826      	ldr	r6, [r4, #0]
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f7fc f987 	bl	80001d0 <strlen>
 8003ec2:	4406      	add	r6, r0
 8003ec4:	4b61      	ldr	r3, [pc, #388]	; (800404c <write2Flash+0x328>)
 8003ec6:	681f      	ldr	r7, [r3, #0]
 8003ec8:	4638      	mov	r0, r7
 8003eca:	f7fc f981 	bl	80001d0 <strlen>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f002 f89c 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003ed8:	6826      	ldr	r6, [r4, #0]
 8003eda:	4630      	mov	r0, r6
 8003edc:	f7fc f978 	bl	80001d0 <strlen>
 8003ee0:	782b      	ldrb	r3, [r5, #0]
 8003ee2:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 8003ee4:	6826      	ldr	r6, [r4, #0]
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f7fc f972 	bl	80001d0 <strlen>
 8003eec:	4406      	add	r6, r0
 8003eee:	4b58      	ldr	r3, [pc, #352]	; (8004050 <write2Flash+0x32c>)
 8003ef0:	681f      	ldr	r7, [r3, #0]
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	f7fc f96c 	bl	80001d0 <strlen>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4639      	mov	r1, r7
 8003efc:	4630      	mov	r0, r6
 8003efe:	f002 f887 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003f02:	6824      	ldr	r4, [r4, #0]
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7fc f963 	bl	80001d0 <strlen>
 8003f0a:	782b      	ldrb	r3, [r5, #0]
 8003f0c:	5423      	strb	r3, [r4, r0]
		if(valve_state == valve_OPEN){
 8003f0e:	4b51      	ldr	r3, [pc, #324]	; (8004054 <write2Flash+0x330>)
 8003f10:	681d      	ldr	r5, [r3, #0]
 8003f12:	4b51      	ldr	r3, [pc, #324]	; (8004058 <write2Flash+0x334>)
 8003f14:	429d      	cmp	r5, r3
 8003f16:	d073      	beq.n	8004000 <write2Flash+0x2dc>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <write2Flash+0x300>)
 8003f1a:	681c      	ldr	r4, [r3, #0]
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7fc f957 	bl	80001d0 <strlen>
 8003f22:	4404      	add	r4, r0
 8003f24:	4628      	mov	r0, r5
 8003f26:	f7fc f953 	bl	80001d0 <strlen>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f002 f86e 	bl	8006010 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 8003f34:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <write2Flash+0x300>)
 8003f36:	681c      	ldr	r4, [r3, #0]
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f7fc f949 	bl	80001d0 <strlen>
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <write2Flash+0x338>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	5223      	strh	r3, [r4, r0]
		if(log_counter == 0){
 8003f44:	4b36      	ldr	r3, [pc, #216]	; (8004020 <write2Flash+0x2fc>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8097 	beq.w	800407c <write2Flash+0x358>
			HAL_FLASH_Unlock();
 8003f4e:	f7fd fdaf 	bl	8001ab0 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008000+64*log_counter, *((uint64_t*)(flash_stored)) );
 8003f52:	4d33      	ldr	r5, [pc, #204]	; (8004020 <write2Flash+0x2fc>)
 8003f54:	7829      	ldrb	r1, [r5, #0]
 8003f56:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8003f5a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8003f5e:	4c31      	ldr	r4, [pc, #196]	; (8004024 <write2Flash+0x300>)
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	0189      	lsls	r1, r1, #6
 8003f68:	2003      	movs	r0, #3
 8003f6a:	f7fd fdf1 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008008+64*log_counter, *((uint64_t*)(flash_stored)+1) );
 8003f6e:	7828      	ldrb	r0, [r5, #0]
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f76:	493a      	ldr	r1, [pc, #232]	; (8004060 <write2Flash+0x33c>)
 8003f78:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	f7fd fde7 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008010+64*log_counter, *((uint64_t*)(flash_stored)+2) );
 8003f82:	7828      	ldrb	r0, [r5, #0]
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f8a:	4936      	ldr	r1, [pc, #216]	; (8004064 <write2Flash+0x340>)
 8003f8c:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003f90:	2003      	movs	r0, #3
 8003f92:	f7fd fddd 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008018+64*log_counter, *((uint64_t*)(flash_stored)+3) );
 8003f96:	7828      	ldrb	r0, [r5, #0]
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f9e:	4932      	ldr	r1, [pc, #200]	; (8004068 <write2Flash+0x344>)
 8003fa0:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003fa4:	2003      	movs	r0, #3
 8003fa6:	f7fd fdd3 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008020+64*log_counter, *((uint64_t*)(flash_stored)+4) );
 8003faa:	7828      	ldrb	r0, [r5, #0]
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fb2:	492e      	ldr	r1, [pc, #184]	; (800406c <write2Flash+0x348>)
 8003fb4:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003fb8:	2003      	movs	r0, #3
 8003fba:	f7fd fdc9 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008028+64*log_counter, *((uint64_t*)(flash_stored)+5) );
 8003fbe:	7828      	ldrb	r0, [r5, #0]
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003fc6:	492a      	ldr	r1, [pc, #168]	; (8004070 <write2Flash+0x34c>)
 8003fc8:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003fcc:	2003      	movs	r0, #3
 8003fce:	f7fd fdbf 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008030+64*log_counter, *((uint64_t*)(flash_stored+56)) );
 8003fd2:	7828      	ldrb	r0, [r5, #0]
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003fda:	4926      	ldr	r1, [pc, #152]	; (8004074 <write2Flash+0x350>)
 8003fdc:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003fe0:	2003      	movs	r0, #3
 8003fe2:	f7fd fdb5 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008038+64*log_counter, *((uint64_t*)(flash_stored+64)) );
 8003fe6:	7828      	ldrb	r0, [r5, #0]
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003fee:	4922      	ldr	r1, [pc, #136]	; (8004078 <write2Flash+0x354>)
 8003ff0:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003ff4:	2003      	movs	r0, #3
 8003ff6:	f7fd fdab 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8003ffa:	f7fd fd6d 	bl	8001ad8 <HAL_FLASH_Lock>
 8003ffe:	e697      	b.n	8003d30 <write2Flash+0xc>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <write2Flash+0x300>)
 8004002:	681c      	ldr	r4, [r3, #0]
 8004004:	4620      	mov	r0, r4
 8004006:	f7fc f8e3 	bl	80001d0 <strlen>
 800400a:	4404      	add	r4, r0
 800400c:	4628      	mov	r0, r5
 800400e:	f7fc f8df 	bl	80001d0 <strlen>
 8004012:	1e42      	subs	r2, r0, #1
 8004014:	4629      	mov	r1, r5
 8004016:	4620      	mov	r0, r4
 8004018:	f001 fffa 	bl	8006010 <memcpy>
 800401c:	e78a      	b.n	8003f34 <write2Flash+0x210>
 800401e:	bf00      	nop
 8004020:	20000290 	.word	0x20000290
 8004024:	20000270 	.word	0x20000270
 8004028:	200002c0 	.word	0x200002c0
 800402c:	20000470 	.word	0x20000470
 8004030:	2000025c 	.word	0x2000025c
 8004034:	200002b8 	.word	0x200002b8
 8004038:	20000004 	.word	0x20000004
 800403c:	20000258 	.word	0x20000258
 8004040:	200002e0 	.word	0x200002e0
 8004044:	2000024c 	.word	0x2000024c
 8004048:	20000274 	.word	0x20000274
 800404c:	200002c4 	.word	0x200002c4
 8004050:	20000288 	.word	0x20000288
 8004054:	200002d8 	.word	0x200002d8
 8004058:	2000002c 	.word	0x2000002c
 800405c:	20000008 	.word	0x20000008
 8004060:	08008008 	.word	0x08008008
 8004064:	08008010 	.word	0x08008010
 8004068:	08008018 	.word	0x08008018
 800406c:	08008020 	.word	0x08008020
 8004070:	08008028 	.word	0x08008028
 8004074:	08008030 	.word	0x08008030
 8004078:	08008038 	.word	0x08008038
			HAL_FLASH_Unlock();
 800407c:	f7fd fd18 	bl	8001ab0 <HAL_FLASH_Unlock>
			pEraseInit->NbPages = 1;
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <write2Flash+0x3f8>)
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	6099      	str	r1, [r3, #8]
			pEraseInit->PageAddress = (uint32_t)(0x08008000);
 8004088:	4d25      	ldr	r5, [pc, #148]	; (8004120 <write2Flash+0x3fc>)
 800408a:	605d      	str	r5, [r3, #4]
			pEraseInit->TypeErase = (uint32_t)FLASH_TYPEERASE_PAGES;
 800408c:	2100      	movs	r1, #0
 800408e:	6019      	str	r1, [r3, #0]
			HAL_FLASHEx_Erase(pEraseInit,flash_error);
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <write2Flash+0x400>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6810      	ldr	r0, [r2, #0]
 8004096:	f7fd fdcd 	bl	8001c34 <HAL_FLASHEx_Erase>
			HAL_FLASH_Lock();
 800409a:	f7fd fd1d 	bl	8001ad8 <HAL_FLASH_Lock>
			HAL_FLASH_Unlock();
 800409e:	f7fd fd07 	bl	8001ab0 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008000, *((uint64_t*)(flash_stored)) );
 80040a2:	4c21      	ldr	r4, [pc, #132]	; (8004128 <write2Flash+0x404>)
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	4629      	mov	r1, r5
 80040ac:	2003      	movs	r0, #3
 80040ae:	f7fd fd4f 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008008, *((uint64_t*)(flash_stored)+1) );
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80040b8:	491c      	ldr	r1, [pc, #112]	; (800412c <write2Flash+0x408>)
 80040ba:	2003      	movs	r0, #3
 80040bc:	f7fd fd48 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008010, *((uint64_t*)(flash_stored)+2) );
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040c6:	491a      	ldr	r1, [pc, #104]	; (8004130 <write2Flash+0x40c>)
 80040c8:	2003      	movs	r0, #3
 80040ca:	f7fd fd41 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008018, *((uint64_t*)(flash_stored)+3) );
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80040d4:	4917      	ldr	r1, [pc, #92]	; (8004134 <write2Flash+0x410>)
 80040d6:	2003      	movs	r0, #3
 80040d8:	f7fd fd3a 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008020, *((uint64_t*)(flash_stored)+4) );
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80040e2:	4915      	ldr	r1, [pc, #84]	; (8004138 <write2Flash+0x414>)
 80040e4:	2003      	movs	r0, #3
 80040e6:	f7fd fd33 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008028, *((uint64_t*)(flash_stored)+5) );
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80040f0:	4912      	ldr	r1, [pc, #72]	; (800413c <write2Flash+0x418>)
 80040f2:	2003      	movs	r0, #3
 80040f4:	f7fd fd2c 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008030, *((uint64_t*)(flash_stored)+6) );
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80040fe:	4910      	ldr	r1, [pc, #64]	; (8004140 <write2Flash+0x41c>)
 8004100:	2003      	movs	r0, #3
 8004102:	f7fd fd25 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008038, *((uint64_t*)(flash_stored)+7) );
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800410c:	490d      	ldr	r1, [pc, #52]	; (8004144 <write2Flash+0x420>)
 800410e:	2003      	movs	r0, #3
 8004110:	f7fd fd1e 	bl	8001b50 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8004114:	f7fd fce0 	bl	8001ad8 <HAL_FLASH_Lock>
 8004118:	e60a      	b.n	8003d30 <write2Flash+0xc>
 800411a:	bf00      	nop
 800411c:	20000298 	.word	0x20000298
 8004120:	08008000 	.word	0x08008000
 8004124:	20000268 	.word	0x20000268
 8004128:	20000270 	.word	0x20000270
 800412c:	08008008 	.word	0x08008008
 8004130:	08008010 	.word	0x08008010
 8004134:	08008018 	.word	0x08008018
 8004138:	08008020 	.word	0x08008020
 800413c:	08008028 	.word	0x08008028
 8004140:	08008030 	.word	0x08008030
 8004144:	08008038 	.word	0x08008038

08004148 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004148:	b508      	push	{r3, lr}
	rx_flag = 1;
 800414a:	2201      	movs	r2, #1
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <HAL_UART_RxCpltCallback+0x14>)
 800414e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004150:	4903      	ldr	r1, [pc, #12]	; (8004160 <HAL_UART_RxCpltCallback+0x18>)
 8004152:	4804      	ldr	r0, [pc, #16]	; (8004164 <HAL_UART_RxCpltCallback+0x1c>)
 8004154:	f7ff f97d 	bl	8003452 <HAL_UART_Receive_IT>
 8004158:	bd08      	pop	{r3, pc}
 800415a:	bf00      	nop
 800415c:	200002a9 	.word	0x200002a9
 8004160:	200005ac 	.word	0x200005ac
 8004164:	20000400 	.word	0x20000400

08004168 <HAL_ADC_ConvCpltCallback>:

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 8004168:	2201      	movs	r2, #1
 800416a:	4b01      	ldr	r3, [pc, #4]	; (8004170 <HAL_ADC_ConvCpltCallback+0x8>)
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	4770      	bx	lr
 8004170:	20000242 	.word	0x20000242

08004174 <HAL_TIM_IC_CaptureCallback>:
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8004174:	2201      	movs	r2, #1
 8004176:	4b01      	ldr	r3, [pc, #4]	; (800417c <HAL_TIM_IC_CaptureCallback+0x8>)
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	4770      	bx	lr
 800417c:	200002bd 	.word	0x200002bd

08004180 <HAL_RTCEx_WakeUpTimerEventCallback>:
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 8004180:	2201      	movs	r2, #1
 8004182:	4b01      	ldr	r3, [pc, #4]	; (8004188 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	4770      	bx	lr
 8004188:	200002a8 	.word	0x200002a8

0800418c <heating_control>:
		}
	}
}


void heating_control(){
 800418c:	b508      	push	{r3, lr}
	if(geyser_temp_int - *set_temp > 2.5f || *set_temp - geyser_temp_int > 2.5f){
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <heating_control+0x60>)
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <heating_control+0x64>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	1ad1      	subs	r1, r2, r3
 800419a:	ee07 1a90 	vmov	s15, r1
 800419e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80041a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ae:	dc09      	bgt.n	80041c4 <heating_control+0x38>
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c2:	dd09      	ble.n	80041d8 <heating_control+0x4c>
		heater_state = heater_ON;
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <heating_control+0x68>)
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <heating_control+0x6c>)
 80041c8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80041ca:	2200      	movs	r2, #0
 80041cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041d0:	480a      	ldr	r0, [pc, #40]	; (80041fc <heating_control+0x70>)
 80041d2:	f7fd fe4b 	bl	8001e6c <HAL_GPIO_WritePin>
 80041d6:	bd08      	pop	{r3, pc}
	}
	else{
		heater_state = heater_OFF;
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <heating_control+0x74>)
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <heating_control+0x6c>)
 80041dc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80041de:	2200      	movs	r2, #0
 80041e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041e4:	4805      	ldr	r0, [pc, #20]	; (80041fc <heating_control+0x70>)
 80041e6:	f7fd fe41 	bl	8001e6c <HAL_GPIO_WritePin>
 80041ea:	bd08      	pop	{r3, pc}
 80041ec:	20000278 	.word	0x20000278
 80041f0:	200002b0 	.word	0x200002b0
 80041f4:	20000018 	.word	0x20000018
 80041f8:	20000288 	.word	0x20000288
 80041fc:	48000400 	.word	0x48000400
 8004200:	20000014 	.word	0x20000014

08004204 <heating_scheduling>:
void heating_scheduling(){
 8004204:	b538      	push	{r3, r4, r5, lr}
	if(auto_heating == 1){
 8004206:	4b82      	ldr	r3, [pc, #520]	; (8004410 <heating_scheduling+0x20c>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d000      	beq.n	8004210 <heating_scheduling+0xc>
 800420e:	bd38      	pop	{r3, r4, r5, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004210:	4c80      	ldr	r4, [pc, #512]	; (8004414 <heating_scheduling+0x210>)
 8004212:	4d81      	ldr	r5, [pc, #516]	; (8004418 <heating_scheduling+0x214>)
 8004214:	2200      	movs	r2, #0
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	4628      	mov	r0, r5
 800421a:	f7fe fdcc 	bl	8002db6 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 800421e:	2200      	movs	r2, #0
 8004220:	4b7e      	ldr	r3, [pc, #504]	; (800441c <heating_scheduling+0x218>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	4628      	mov	r0, r5
 8004226:	f7fe fdf1 	bl	8002e0c <HAL_RTC_GetDate>
		if( (time->Hours - heating_schedule[0].Hours) > 0 && (time->Hours - heating_schedule[1].Hours) < 0){
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	7813      	ldrb	r3, [r2, #0]
 800422e:	497c      	ldr	r1, [pc, #496]	; (8004420 <heating_scheduling+0x21c>)
 8004230:	7809      	ldrb	r1, [r1, #0]
 8004232:	1a58      	subs	r0, r3, r1
 8004234:	2800      	cmp	r0, #0
 8004236:	dd04      	ble.n	8004242 <heating_scheduling+0x3e>
 8004238:	4879      	ldr	r0, [pc, #484]	; (8004420 <heating_scheduling+0x21c>)
 800423a:	7d00      	ldrb	r0, [r0, #20]
 800423c:	1a18      	subs	r0, r3, r0
 800423e:	2800      	cmp	r0, #0
 8004240:	db4d      	blt.n	80042de <heating_scheduling+0xda>
		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 8004242:	428b      	cmp	r3, r1
 8004244:	d04e      	beq.n	80042e4 <heating_scheduling+0xe0>
 8004246:	4876      	ldr	r0, [pc, #472]	; (8004420 <heating_scheduling+0x21c>)
 8004248:	7d00      	ldrb	r0, [r0, #20]
 800424a:	4283      	cmp	r3, r0
 800424c:	d04a      	beq.n	80042e4 <heating_scheduling+0xe0>
		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 800424e:	428b      	cmp	r3, r1
 8004250:	d05d      	beq.n	800430e <heating_scheduling+0x10a>
 8004252:	4973      	ldr	r1, [pc, #460]	; (8004420 <heating_scheduling+0x21c>)
 8004254:	7d09      	ldrb	r1, [r1, #20]
 8004256:	428b      	cmp	r3, r1
 8004258:	d059      	beq.n	800430e <heating_scheduling+0x10a>
		else if( (time->Hours - heating_schedule[2].Hours) > 0 && (time->Hours - heating_schedule[3].Hours) < 0){
 800425a:	4971      	ldr	r1, [pc, #452]	; (8004420 <heating_scheduling+0x21c>)
 800425c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004260:	1a58      	subs	r0, r3, r1
 8004262:	2800      	cmp	r0, #0
 8004264:	dd05      	ble.n	8004272 <heating_scheduling+0x6e>
 8004266:	486e      	ldr	r0, [pc, #440]	; (8004420 <heating_scheduling+0x21c>)
 8004268:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800426c:	1a18      	subs	r0, r3, r0
 800426e:	2800      	cmp	r0, #0
 8004270:	db64      	blt.n	800433c <heating_scheduling+0x138>
		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 8004272:	428b      	cmp	r3, r1
 8004274:	d065      	beq.n	8004342 <heating_scheduling+0x13e>
 8004276:	486a      	ldr	r0, [pc, #424]	; (8004420 <heating_scheduling+0x21c>)
 8004278:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800427c:	4283      	cmp	r3, r0
 800427e:	d060      	beq.n	8004342 <heating_scheduling+0x13e>
		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 8004280:	428b      	cmp	r3, r1
 8004282:	d075      	beq.n	8004370 <heating_scheduling+0x16c>
 8004284:	4966      	ldr	r1, [pc, #408]	; (8004420 <heating_scheduling+0x21c>)
 8004286:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800428a:	428b      	cmp	r3, r1
 800428c:	d070      	beq.n	8004370 <heating_scheduling+0x16c>
		else if( (time->Hours - heating_schedule[4].Hours) > 0 && (time->Hours - heating_schedule[5].Hours) < 0){
 800428e:	4964      	ldr	r1, [pc, #400]	; (8004420 <heating_scheduling+0x21c>)
 8004290:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 8004294:	1a58      	subs	r0, r3, r1
 8004296:	2800      	cmp	r0, #0
 8004298:	dd06      	ble.n	80042a8 <heating_scheduling+0xa4>
 800429a:	4861      	ldr	r0, [pc, #388]	; (8004420 <heating_scheduling+0x21c>)
 800429c:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 80042a0:	1a18      	subs	r0, r3, r0
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f2c0 8081 	blt.w	80043aa <heating_scheduling+0x1a6>
		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 80042a8:	428b      	cmp	r3, r1
 80042aa:	f000 8081 	beq.w	80043b0 <heating_scheduling+0x1ac>
 80042ae:	485c      	ldr	r0, [pc, #368]	; (8004420 <heating_scheduling+0x21c>)
 80042b0:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 80042b4:	4283      	cmp	r3, r0
 80042b6:	d07b      	beq.n	80043b0 <heating_scheduling+0x1ac>
		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 80042b8:	428b      	cmp	r3, r1
 80042ba:	f000 808b 	beq.w	80043d4 <heating_scheduling+0x1d0>
 80042be:	4958      	ldr	r1, [pc, #352]	; (8004420 <heating_scheduling+0x21c>)
 80042c0:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
 80042c4:	428b      	cmp	r3, r1
 80042c6:	f000 8085 	beq.w	80043d4 <heating_scheduling+0x1d0>
			heater_state = heater_OFF;
 80042ca:	4a56      	ldr	r2, [pc, #344]	; (8004424 <heating_scheduling+0x220>)
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <heating_scheduling+0x224>)
 80042ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80042d0:	2201      	movs	r2, #1
 80042d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042d6:	4855      	ldr	r0, [pc, #340]	; (800442c <heating_scheduling+0x228>)
 80042d8:	f7fd fdc8 	bl	8001e6c <HAL_GPIO_WritePin>
}
 80042dc:	e797      	b.n	800420e <heating_scheduling+0xa>
			heating_control();
 80042de:	f7ff ff55 	bl	800418c <heating_control>
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 80042e4:	7850      	ldrb	r0, [r2, #1]
 80042e6:	4c4e      	ldr	r4, [pc, #312]	; (8004420 <heating_scheduling+0x21c>)
 80042e8:	7864      	ldrb	r4, [r4, #1]
 80042ea:	1b04      	subs	r4, r0, r4
 80042ec:	2c00      	cmp	r4, #0
 80042ee:	ddae      	ble.n	800424e <heating_scheduling+0x4a>
 80042f0:	4c4b      	ldr	r4, [pc, #300]	; (8004420 <heating_scheduling+0x21c>)
 80042f2:	7d64      	ldrb	r4, [r4, #21]
 80042f4:	1b00      	subs	r0, r0, r4
 80042f6:	2800      	cmp	r0, #0
 80042f8:	daa9      	bge.n	800424e <heating_scheduling+0x4a>
			heater_state = heater_ON;
 80042fa:	4a4d      	ldr	r2, [pc, #308]	; (8004430 <heating_scheduling+0x22c>)
 80042fc:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <heating_scheduling+0x224>)
 80042fe:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004300:	2200      	movs	r2, #0
 8004302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004306:	4849      	ldr	r0, [pc, #292]	; (800442c <heating_scheduling+0x228>)
 8004308:	f7fd fdb0 	bl	8001e6c <HAL_GPIO_WritePin>
 800430c:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[0].Minutes == 0) || (time->Minutes - heating_schedule[1].Minutes == 0) )
 800430e:	7851      	ldrb	r1, [r2, #1]
 8004310:	4843      	ldr	r0, [pc, #268]	; (8004420 <heating_scheduling+0x21c>)
 8004312:	7840      	ldrb	r0, [r0, #1]
 8004314:	4281      	cmp	r1, r0
 8004316:	d003      	beq.n	8004320 <heating_scheduling+0x11c>
 8004318:	4841      	ldr	r0, [pc, #260]	; (8004420 <heating_scheduling+0x21c>)
 800431a:	7d40      	ldrb	r0, [r0, #21]
 800431c:	4281      	cmp	r1, r0
 800431e:	d19c      	bne.n	800425a <heating_scheduling+0x56>
				&& ( (time->Seconds - heating_schedule[0].Seconds > 0) && (time->Seconds - heating_schedule[1].Seconds < 0) ) ){
 8004320:	7891      	ldrb	r1, [r2, #2]
 8004322:	483f      	ldr	r0, [pc, #252]	; (8004420 <heating_scheduling+0x21c>)
 8004324:	7880      	ldrb	r0, [r0, #2]
 8004326:	1a08      	subs	r0, r1, r0
 8004328:	2800      	cmp	r0, #0
 800432a:	dd96      	ble.n	800425a <heating_scheduling+0x56>
 800432c:	483c      	ldr	r0, [pc, #240]	; (8004420 <heating_scheduling+0x21c>)
 800432e:	7d80      	ldrb	r0, [r0, #22]
 8004330:	1a09      	subs	r1, r1, r0
 8004332:	2900      	cmp	r1, #0
 8004334:	da91      	bge.n	800425a <heating_scheduling+0x56>
			heating_control();
 8004336:	f7ff ff29 	bl	800418c <heating_control>
 800433a:	bd38      	pop	{r3, r4, r5, pc}
			heating_control();
 800433c:	f7ff ff26 	bl	800418c <heating_control>
 8004340:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 8004342:	7850      	ldrb	r0, [r2, #1]
 8004344:	4c36      	ldr	r4, [pc, #216]	; (8004420 <heating_scheduling+0x21c>)
 8004346:	f894 4029 	ldrb.w	r4, [r4, #41]	; 0x29
 800434a:	1b04      	subs	r4, r0, r4
 800434c:	2c00      	cmp	r4, #0
 800434e:	dd97      	ble.n	8004280 <heating_scheduling+0x7c>
 8004350:	4c33      	ldr	r4, [pc, #204]	; (8004420 <heating_scheduling+0x21c>)
 8004352:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
 8004356:	1b00      	subs	r0, r0, r4
 8004358:	2800      	cmp	r0, #0
 800435a:	da91      	bge.n	8004280 <heating_scheduling+0x7c>
			heater_state = heater_ON;
 800435c:	4a34      	ldr	r2, [pc, #208]	; (8004430 <heating_scheduling+0x22c>)
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <heating_scheduling+0x224>)
 8004360:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004362:	2200      	movs	r2, #0
 8004364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004368:	4830      	ldr	r0, [pc, #192]	; (800442c <heating_scheduling+0x228>)
 800436a:	f7fd fd7f 	bl	8001e6c <HAL_GPIO_WritePin>
 800436e:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[2].Minutes == 0) || (time->Minutes - heating_schedule[3].Minutes == 0) )
 8004370:	7851      	ldrb	r1, [r2, #1]
 8004372:	482b      	ldr	r0, [pc, #172]	; (8004420 <heating_scheduling+0x21c>)
 8004374:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8004378:	4281      	cmp	r1, r0
 800437a:	d004      	beq.n	8004386 <heating_scheduling+0x182>
 800437c:	4828      	ldr	r0, [pc, #160]	; (8004420 <heating_scheduling+0x21c>)
 800437e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8004382:	4281      	cmp	r1, r0
 8004384:	d183      	bne.n	800428e <heating_scheduling+0x8a>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
 8004386:	7891      	ldrb	r1, [r2, #2]
 8004388:	4825      	ldr	r0, [pc, #148]	; (8004420 <heating_scheduling+0x21c>)
 800438a:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 800438e:	1a08      	subs	r0, r1, r0
 8004390:	2800      	cmp	r0, #0
 8004392:	f77f af7c 	ble.w	800428e <heating_scheduling+0x8a>
 8004396:	4822      	ldr	r0, [pc, #136]	; (8004420 <heating_scheduling+0x21c>)
 8004398:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800439c:	1a09      	subs	r1, r1, r0
 800439e:	2900      	cmp	r1, #0
 80043a0:	f6bf af75 	bge.w	800428e <heating_scheduling+0x8a>
			heating_control();
 80043a4:	f7ff fef2 	bl	800418c <heating_control>
 80043a8:	bd38      	pop	{r3, r4, r5, pc}
			heating_control();
 80043aa:	f7ff feef 	bl	800418c <heating_control>
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 80043b0:	7850      	ldrb	r0, [r2, #1]
 80043b2:	4c1b      	ldr	r4, [pc, #108]	; (8004420 <heating_scheduling+0x21c>)
 80043b4:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
 80043b8:	1b04      	subs	r4, r0, r4
 80043ba:	2c00      	cmp	r4, #0
 80043bc:	f77f af7c 	ble.w	80042b8 <heating_scheduling+0xb4>
 80043c0:	4c17      	ldr	r4, [pc, #92]	; (8004420 <heating_scheduling+0x21c>)
 80043c2:	f894 4065 	ldrb.w	r4, [r4, #101]	; 0x65
 80043c6:	1b00      	subs	r0, r0, r4
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f6bf af75 	bge.w	80042b8 <heating_scheduling+0xb4>
			heating_control();
 80043ce:	f7ff fedd 	bl	800418c <heating_control>
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[4].Minutes == 0) || (time->Minutes - heating_schedule[5].Minutes == 0) )
 80043d4:	7853      	ldrb	r3, [r2, #1]
 80043d6:	4912      	ldr	r1, [pc, #72]	; (8004420 <heating_scheduling+0x21c>)
 80043d8:	f891 1051 	ldrb.w	r1, [r1, #81]	; 0x51
 80043dc:	428b      	cmp	r3, r1
 80043de:	d005      	beq.n	80043ec <heating_scheduling+0x1e8>
 80043e0:	490f      	ldr	r1, [pc, #60]	; (8004420 <heating_scheduling+0x21c>)
 80043e2:	f891 1065 	ldrb.w	r1, [r1, #101]	; 0x65
 80043e6:	428b      	cmp	r3, r1
 80043e8:	f47f af6f 	bne.w	80042ca <heating_scheduling+0xc6>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
 80043ec:	7893      	ldrb	r3, [r2, #2]
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <heating_scheduling+0x21c>)
 80043f0:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80043f4:	1a9a      	subs	r2, r3, r2
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	f77f af67 	ble.w	80042ca <heating_scheduling+0xc6>
 80043fc:	4a08      	ldr	r2, [pc, #32]	; (8004420 <heating_scheduling+0x21c>)
 80043fe:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	f6bf af60 	bge.w	80042ca <heating_scheduling+0xc6>
			heating_control();
 800440a:	f7ff febf 	bl	800418c <heating_control>
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	20000250 	.word	0x20000250
 8004414:	200002c0 	.word	0x200002c0
 8004418:	20000470 	.word	0x20000470
 800441c:	2000025c 	.word	0x2000025c
 8004420:	20000530 	.word	0x20000530
 8004424:	20000014 	.word	0x20000014
 8004428:	20000288 	.word	0x20000288
 800442c:	48000400 	.word	0x48000400
 8004430:	20000018 	.word	0x20000018

08004434 <init_peripherals>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 8004434:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 8004436:	2201      	movs	r2, #1
 8004438:	2120      	movs	r1, #32
 800443a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800443e:	f7fd fd15 	bl	8001e6c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 8004442:	2201      	movs	r2, #1
 8004444:	2180      	movs	r1, #128	; 0x80
 8004446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800444a:	f7fd fd0f 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 800444e:	2201      	movs	r2, #1
 8004450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004458:	f7fd fd08 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 800445c:	2201      	movs	r2, #1
 800445e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004466:	f7fd fd01 	bl	8001e6c <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 800446a:	4c88      	ldr	r4, [pc, #544]	; (800468c <init_peripherals+0x258>)
 800446c:	2201      	movs	r2, #1
 800446e:	2108      	movs	r1, #8
 8004470:	4620      	mov	r0, r4
 8004472:	f7fd fcfb 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004476:	2201      	movs	r2, #1
 8004478:	2110      	movs	r1, #16
 800447a:	4620      	mov	r0, r4
 800447c:	f7fd fcf6 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004480:	2201      	movs	r2, #1
 8004482:	2120      	movs	r1, #32
 8004484:	4620      	mov	r0, r4
 8004486:	f7fd fcf1 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 800448a:	2201      	movs	r2, #1
 800448c:	2140      	movs	r1, #64	; 0x40
 800448e:	4620      	mov	r0, r4
 8004490:	f7fd fcec 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004494:	2201      	movs	r2, #1
 8004496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800449a:	4620      	mov	r0, r4
 800449c:	f7fd fce6 	bl	8001e6c <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 80044a0:	2201      	movs	r2, #1
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	487a      	ldr	r0, [pc, #488]	; (8004690 <init_peripherals+0x25c>)
 80044a6:	f7fd fce1 	bl	8001e6c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 80044aa:	2200      	movs	r2, #0
 80044ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7fd fcdb 	bl	8001e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 80044b6:	2201      	movs	r2, #1
 80044b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044bc:	4620      	mov	r0, r4
 80044be:	f7fd fcd5 	bl	8001e6c <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 80044c2:	200f      	movs	r0, #15
 80044c4:	f001 fd9c 	bl	8006000 <malloc>
 80044c8:	4b72      	ldr	r3, [pc, #456]	; (8004694 <init_peripherals+0x260>)
 80044ca:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 80044cc:	2400      	movs	r4, #0
 80044ce:	6004      	str	r4, [r0, #0]
 80044d0:	6044      	str	r4, [r0, #4]
 80044d2:	6084      	str	r4, [r0, #8]
 80044d4:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 80044d8:	2032      	movs	r0, #50	; 0x32
 80044da:	f001 fd91 	bl	8006000 <malloc>
 80044de:	4b6e      	ldr	r3, [pc, #440]	; (8004698 <init_peripherals+0x264>)
 80044e0:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 80044e2:	2232      	movs	r2, #50	; 0x32
 80044e4:	4621      	mov	r1, r4
 80044e6:	f001 fd9e 	bl	8006026 <memset>

	uart_command = (uint8_t*)malloc(60);
 80044ea:	203c      	movs	r0, #60	; 0x3c
 80044ec:	f001 fd88 	bl	8006000 <malloc>
 80044f0:	4e6a      	ldr	r6, [pc, #424]	; (800469c <init_peripherals+0x268>)
 80044f2:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 80044f4:	253c      	movs	r5, #60	; 0x3c
 80044f6:	462a      	mov	r2, r5
 80044f8:	4621      	mov	r1, r4
 80044fa:	f001 fd94 	bl	8006026 <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 80044fe:	4628      	mov	r0, r5
 8004500:	f001 fd7e 	bl	8006000 <malloc>
 8004504:	4b66      	ldr	r3, [pc, #408]	; (80046a0 <init_peripherals+0x26c>)
 8004506:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 8004508:	462a      	mov	r2, r5
 800450a:	4621      	mov	r1, r4
 800450c:	6830      	ldr	r0, [r6, #0]
 800450e:	f001 fd8a 	bl	8006026 <memset>


	set_temp = (uint8_t*)malloc(3);
 8004512:	2003      	movs	r0, #3
 8004514:	f001 fd74 	bl	8006000 <malloc>
 8004518:	4b62      	ldr	r3, [pc, #392]	; (80046a4 <init_peripherals+0x270>)
 800451a:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 800451c:	6004      	str	r4, [r0, #0]

	segment_val =set_temp;
 800451e:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <init_peripherals+0x274>)
 8004520:	6018      	str	r0, [r3, #0]
	//	  memset(segment_val, 0x00, 4);

	ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8004522:	201c      	movs	r0, #28
 8004524:	f001 fd6c 	bl	8006000 <malloc>
 8004528:	4b60      	ldr	r3, [pc, #384]	; (80046ac <init_peripherals+0x278>)
 800452a:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 7);
 800452c:	6004      	str	r4, [r0, #0]
 800452e:	f8c0 4003 	str.w	r4, [r0, #3]

	ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8004532:	201c      	movs	r0, #28
 8004534:	f001 fd64 	bl	8006000 <malloc>
 8004538:	4b5d      	ldr	r3, [pc, #372]	; (80046b0 <init_peripherals+0x27c>)
 800453a:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 7);
 800453c:	6004      	str	r4, [r0, #0]
 800453e:	f8c0 4003 	str.w	r4, [r0, #3]

	voltage_rms =(char*)malloc(3*sizeof(char));
 8004542:	2003      	movs	r0, #3
 8004544:	f001 fd5c 	bl	8006000 <malloc>
 8004548:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <init_peripherals+0x280>)
 800454a:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 800454c:	8004      	strh	r4, [r0, #0]
 800454e:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 8004550:	2004      	movs	r0, #4
 8004552:	f001 fd55 	bl	8006000 <malloc>
 8004556:	4b58      	ldr	r3, [pc, #352]	; (80046b8 <init_peripherals+0x284>)
 8004558:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 800455a:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 800455c:	2014      	movs	r0, #20
 800455e:	f001 fd4f 	bl	8006000 <malloc>
 8004562:	4a56      	ldr	r2, [pc, #344]	; (80046bc <init_peripherals+0x288>)
 8004564:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 8004566:	6004      	str	r4, [r0, #0]
 8004568:	6044      	str	r4, [r0, #4]
 800456a:	6084      	str	r4, [r0, #8]
 800456c:	60c4      	str	r4, [r0, #12]
 800456e:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 8004570:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <init_peripherals+0x28c>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4953      	ldr	r1, [pc, #332]	; (80046c4 <init_peripherals+0x290>)
 8004576:	f001 fe1b 	bl	80061b0 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 800457a:	2010      	movs	r0, #16
 800457c:	f001 fd40 	bl	8006000 <malloc>
 8004580:	4b51      	ldr	r3, [pc, #324]	; (80046c8 <init_peripherals+0x294>)
 8004582:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8004584:	2010      	movs	r0, #16
 8004586:	f001 fd3b 	bl	8006000 <malloc>
 800458a:	4b50      	ldr	r3, [pc, #320]	; (80046cc <init_peripherals+0x298>)
 800458c:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 800458e:	2004      	movs	r0, #4
 8004590:	f001 fd36 	bl	8006000 <malloc>
 8004594:	4b4e      	ldr	r3, [pc, #312]	; (80046d0 <init_peripherals+0x29c>)
 8004596:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 8004598:	2004      	movs	r0, #4
 800459a:	f001 fd31 	bl	8006000 <malloc>
 800459e:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <init_peripherals+0x2a0>)
 80045a0:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 80045a2:	4a4d      	ldr	r2, [pc, #308]	; (80046d8 <init_peripherals+0x2a4>)
 80045a4:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <init_peripherals+0x2a8>)
 80045a6:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 80045a8:	4a4d      	ldr	r2, [pc, #308]	; (80046e0 <init_peripherals+0x2ac>)
 80045aa:	4b4e      	ldr	r3, [pc, #312]	; (80046e4 <init_peripherals+0x2b0>)
 80045ac:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 80045ae:	200f      	movs	r0, #15
 80045b0:	f001 fd26 	bl	8006000 <malloc>
 80045b4:	4e4c      	ldr	r6, [pc, #304]	; (80046e8 <init_peripherals+0x2b4>)
 80045b6:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 80045b8:	6004      	str	r4, [r0, #0]
 80045ba:	6044      	str	r4, [r0, #4]
 80045bc:	6084      	str	r4, [r0, #8]
 80045be:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 80045c2:	200f      	movs	r0, #15
 80045c4:	f001 fd1c 	bl	8006000 <malloc>
 80045c8:	4d48      	ldr	r5, [pc, #288]	; (80046ec <init_peripherals+0x2b8>)
 80045ca:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 80045cc:	6004      	str	r4, [r0, #0]
 80045ce:	6044      	str	r4, [r0, #4]
 80045d0:	6084      	str	r4, [r0, #8]
 80045d2:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 80045d6:	200f      	movs	r0, #15
 80045d8:	f001 fd12 	bl	8006000 <malloc>
 80045dc:	4b44      	ldr	r3, [pc, #272]	; (80046f0 <init_peripherals+0x2bc>)
 80045de:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 80045e0:	6004      	str	r4, [r0, #0]
 80045e2:	6044      	str	r4, [r0, #4]
 80045e4:	6084      	str	r4, [r0, #8]
 80045e6:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 80045ea:	4b42      	ldr	r3, [pc, #264]	; (80046f4 <init_peripherals+0x2c0>)
 80045ec:	6832      	ldr	r2, [r6, #0]
 80045ee:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 80045f0:	682a      	ldr	r2, [r5, #0]
 80045f2:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 80045f4:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 80045f6:	2014      	movs	r0, #20
 80045f8:	f001 fd02 	bl	8006000 <malloc>
 80045fc:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <init_peripherals+0x2c4>)
 80045fe:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 8004600:	6004      	str	r4, [r0, #0]
 8004602:	6044      	str	r4, [r0, #4]
 8004604:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 8004606:	4b3d      	ldr	r3, [pc, #244]	; (80046fc <init_peripherals+0x2c8>)
 8004608:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 800460a:	2018      	movs	r0, #24
 800460c:	f001 fcf8 	bl	8006000 <malloc>
 8004610:	4e3b      	ldr	r6, [pc, #236]	; (8004700 <init_peripherals+0x2cc>)
 8004612:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 8004614:	6004      	str	r4, [r0, #0]
 8004616:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 8004618:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 800461a:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 800461c:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800461e:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8004620:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 8004622:	2004      	movs	r0, #4
 8004624:	f001 fcec 	bl	8006000 <malloc>
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <init_peripherals+0x2d0>)
 800462a:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 800462c:	2501      	movs	r5, #1
 800462e:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 8004630:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 8004632:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 8004634:	70c4      	strb	r4, [r0, #3]
//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);


	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 8004636:	2046      	movs	r0, #70	; 0x46
 8004638:	f001 fce2 	bl	8006000 <malloc>
 800463c:	4b32      	ldr	r3, [pc, #200]	; (8004708 <init_peripherals+0x2d4>)
 800463e:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 8004640:	2246      	movs	r2, #70	; 0x46
 8004642:	4621      	mov	r1, r4
 8004644:	f001 fcef 	bl	8006026 <memset>


	new_time = malloc(6*sizeof(uint32_t));
 8004648:	2018      	movs	r0, #24
 800464a:	f001 fcd9 	bl	8006000 <malloc>
 800464e:	4b2f      	ldr	r3, [pc, #188]	; (800470c <init_peripherals+0x2d8>)
 8004650:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 8004652:	6004      	str	r4, [r0, #0]
 8004654:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 8004656:	2003      	movs	r0, #3
 8004658:	f001 fcd2 	bl	8006000 <malloc>
 800465c:	4b2c      	ldr	r3, [pc, #176]	; (8004710 <init_peripherals+0x2dc>)
 800465e:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 8004660:	8004      	strh	r4, [r0, #0]
 8004662:	7084      	strb	r4, [r0, #2]

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 8004664:	2004      	movs	r0, #4
 8004666:	f001 fccb 	bl	8006000 <malloc>
 800466a:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <init_peripherals+0x2e0>)
 800466c:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 800466e:	2010      	movs	r0, #16
 8004670:	f001 fcc6 	bl	8006000 <malloc>
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <init_peripherals+0x2e4>)
 8004676:	6018      	str	r0, [r3, #0]

	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 8004678:	462a      	mov	r2, r5
 800467a:	6831      	ldr	r1, [r6, #0]
 800467c:	4827      	ldr	r0, [pc, #156]	; (800471c <init_peripherals+0x2e8>)
 800467e:	f7fe fb9a 	bl	8002db6 <HAL_RTC_GetTime>

	HAL_TIM_Base_Start_IT(&htim2);
 8004682:	4827      	ldr	r0, [pc, #156]	; (8004720 <init_peripherals+0x2ec>)
 8004684:	f7fe fcad 	bl	8002fe2 <HAL_TIM_Base_Start_IT>
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	bf00      	nop
 800468c:	48000400 	.word	0x48000400
 8004690:	48000800 	.word	0x48000800
 8004694:	200005a8 	.word	0x200005a8
 8004698:	200002a4 	.word	0x200002a4
 800469c:	200002cc 	.word	0x200002cc
 80046a0:	200002d0 	.word	0x200002d0
 80046a4:	200002b0 	.word	0x200002b0
 80046a8:	200002ac 	.word	0x200002ac
 80046ac:	20000224 	.word	0x20000224
 80046b0:	20000228 	.word	0x20000228
 80046b4:	200002e0 	.word	0x200002e0
 80046b8:	20000258 	.word	0x20000258
 80046bc:	200002c4 	.word	0x200002c4
 80046c0:	200002e4 	.word	0x200002e4
 80046c4:	08006d68 	.word	0x08006d68
 80046c8:	200002dc 	.word	0x200002dc
 80046cc:	20000254 	.word	0x20000254
 80046d0:	2000024c 	.word	0x2000024c
 80046d4:	20000274 	.word	0x20000274
 80046d8:	20000014 	.word	0x20000014
 80046dc:	20000288 	.word	0x20000288
 80046e0:	20000024 	.word	0x20000024
 80046e4:	200002d8 	.word	0x200002d8
 80046e8:	2000027c 	.word	0x2000027c
 80046ec:	20000280 	.word	0x20000280
 80046f0:	20000284 	.word	0x20000284
 80046f4:	200005d4 	.word	0x200005d4
 80046f8:	2000028c 	.word	0x2000028c
 80046fc:	200005b0 	.word	0x200005b0
 8004700:	200002c0 	.word	0x200002c0
 8004704:	2000025c 	.word	0x2000025c
 8004708:	20000270 	.word	0x20000270
 800470c:	20000294 	.word	0x20000294
 8004710:	200002b8 	.word	0x200002b8
 8004714:	20000268 	.word	0x20000268
 8004718:	20000298 	.word	0x20000298
 800471c:	20000470 	.word	0x20000470
 8004720:	200004a8 	.word	0x200004a8

08004724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004728:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800472a:	4b55      	ldr	r3, [pc, #340]	; (8004880 <MX_GPIO_Init+0x15c>)
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004732:	615a      	str	r2, [r3, #20]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800473a:	9201      	str	r2, [sp, #4]
 800473c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004744:	615a      	str	r2, [r3, #20]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800474c:	9202      	str	r2, [sp, #8]
 800474e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004756:	615a      	str	r2, [r3, #20]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800475e:	9203      	str	r2, [sp, #12]
 8004760:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004768:	615a      	str	r2, [r3, #20]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004770:	9304      	str	r3, [sp, #16]
 8004772:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 8004774:	2201      	movs	r2, #1
 8004776:	2112      	movs	r1, #18
 8004778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800477c:	f7fd fb76 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8004780:	2200      	movs	r2, #0
 8004782:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8004786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800478a:	f7fd fb6f 	bl	8001e6c <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 800478e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8004894 <MX_GPIO_Init+0x170>
 8004792:	2200      	movs	r2, #0
 8004794:	f246 4178 	movw	r1, #25720	; 0x6478
 8004798:	4640      	mov	r0, r8
 800479a:	f7fd fb67 	bl	8001e6c <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800479e:	4e39      	ldr	r6, [pc, #228]	; (8004884 <MX_GPIO_Init+0x160>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	4630      	mov	r0, r6
 80047a6:	f7fd fb61 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80047aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047b0:	4b35      	ldr	r3, [pc, #212]	; (8004888 <MX_GPIO_Init+0x164>)
 80047b2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	2400      	movs	r4, #0
 80047b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047b8:	a905      	add	r1, sp, #20
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7fd fa8c 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80047c0:	2303      	movs	r3, #3
 80047c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047c4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c8:	a905      	add	r1, sp, #20
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7fd fa84 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 80047d0:	2501      	movs	r5, #1
 80047d2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047d4:	4b2d      	ldr	r3, [pc, #180]	; (800488c <MX_GPIO_Init+0x168>)
 80047d6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80047d8:	2702      	movs	r7, #2
 80047da:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 80047dc:	a905      	add	r1, sp, #20
 80047de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047e2:	f7fd fa79 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 80047e6:	2312      	movs	r3, #18
 80047e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80047ea:	2311      	movs	r3, #17
 80047ec:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ee:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f2:	a905      	add	r1, sp, #20
 80047f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047f8:	f7fd fa6e 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80047fc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004800:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004802:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004806:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004808:	a905      	add	r1, sp, #20
 800480a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800480e:	f7fd fa63 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004812:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004814:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004816:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004818:	a905      	add	r1, sp, #20
 800481a:	4640      	mov	r0, r8
 800481c:	f7fd fa5c 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8004820:	f246 4378 	movw	r3, #25720	; 0x6478
 8004824:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004826:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800482c:	a905      	add	r1, sp, #20
 800482e:	4640      	mov	r0, r8
 8004830:	f7fd fa52 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 8004834:	2340      	movs	r3, #64	; 0x40
 8004836:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <MX_GPIO_Init+0x16c>)
 800483a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800483c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 800483e:	a905      	add	r1, sp, #20
 8004840:	4630      	mov	r0, r6
 8004842:	f7fd fa49 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 8004850:	a905      	add	r1, sp, #20
 8004852:	4630      	mov	r0, r6
 8004854:	f7fd fa40 	bl	8001cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004858:	4622      	mov	r2, r4
 800485a:	4621      	mov	r1, r4
 800485c:	2006      	movs	r0, #6
 800485e:	f7fc ff83 	bl	8001768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004862:	2006      	movs	r0, #6
 8004864:	f7fc ffb2 	bl	80017cc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8004868:	462a      	mov	r2, r5
 800486a:	4621      	mov	r1, r4
 800486c:	2017      	movs	r0, #23
 800486e:	f7fc ff7b 	bl	8001768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004872:	2017      	movs	r0, #23
 8004874:	f7fc ffaa 	bl	80017cc <HAL_NVIC_EnableIRQ>

}
 8004878:	b00a      	add	sp, #40	; 0x28
 800487a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000
 8004884:	48000800 	.word	0x48000800
 8004888:	10110000 	.word	0x10110000
 800488c:	10210000 	.word	0x10210000
 8004890:	10310000 	.word	0x10310000
 8004894:	48000400 	.word	0x48000400

08004898 <MX_DMA_Init>:
{
 8004898:	b500      	push	{lr}
 800489a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <MX_DMA_Init+0x30>)
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	615a      	str	r2, [r3, #20]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 80048b0:	2201      	movs	r2, #1
 80048b2:	2100      	movs	r1, #0
 80048b4:	200c      	movs	r0, #12
 80048b6:	f7fc ff57 	bl	8001768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80048ba:	200c      	movs	r0, #12
 80048bc:	f7fc ff86 	bl	80017cc <HAL_NVIC_EnableIRQ>
}
 80048c0:	b003      	add	sp, #12
 80048c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000

080048cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80048cc:	4770      	bx	lr

080048ce <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80048ce:	e7fe      	b.n	80048ce <_Error_Handler>

080048d0 <MX_TIM2_Init>:
{
 80048d0:	b500      	push	{lr}
 80048d2:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80048d4:	4818      	ldr	r0, [pc, #96]	; (8004938 <MX_TIM2_Init+0x68>)
 80048d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048da:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 80048dc:	2301      	movs	r3, #1
 80048de:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e0:	2300      	movs	r3, #0
 80048e2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 326400;
 80048e4:	4a15      	ldr	r2, [pc, #84]	; (800493c <MX_TIM2_Init+0x6c>)
 80048e6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048e8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ea:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80048ec:	f7fe fca0 	bl	8003230 <HAL_TIM_Base_Init>
 80048f0:	b998      	cbnz	r0, 800491a <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048f2:	a908      	add	r1, sp, #32
 80048f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048f8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048fc:	480e      	ldr	r0, [pc, #56]	; (8004938 <MX_TIM2_Init+0x68>)
 80048fe:	f7fe fcbd 	bl	800327c <HAL_TIM_ConfigClockSource>
 8004902:	b978      	cbnz	r0, 8004924 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004908:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800490a:	a901      	add	r1, sp, #4
 800490c:	480a      	ldr	r0, [pc, #40]	; (8004938 <MX_TIM2_Init+0x68>)
 800490e:	f7fe fd41 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 8004912:	b960      	cbnz	r0, 800492e <MX_TIM2_Init+0x5e>
}
 8004914:	b009      	add	sp, #36	; 0x24
 8004916:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800491a:	f240 11cf 	movw	r1, #463	; 0x1cf
 800491e:	4808      	ldr	r0, [pc, #32]	; (8004940 <MX_TIM2_Init+0x70>)
 8004920:	f7ff ffd5 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004924:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004928:	4805      	ldr	r0, [pc, #20]	; (8004940 <MX_TIM2_Init+0x70>)
 800492a:	f7ff ffd0 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800492e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004932:	4803      	ldr	r0, [pc, #12]	; (8004940 <MX_TIM2_Init+0x70>)
 8004934:	f7ff ffcb 	bl	80048ce <_Error_Handler>
 8004938:	200004a8 	.word	0x200004a8
 800493c:	0004fb00 	.word	0x0004fb00
 8004940:	08006d6c 	.word	0x08006d6c

08004944 <MX_USART1_UART_Init>:
{
 8004944:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8004946:	480c      	ldr	r0, [pc, #48]	; (8004978 <MX_USART1_UART_Init+0x34>)
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <MX_USART1_UART_Init+0x38>)
 800494a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800494c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004950:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004952:	2300      	movs	r3, #0
 8004954:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004956:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004958:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800495a:	220c      	movs	r2, #12
 800495c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800495e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004960:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004962:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004964:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004966:	f7fe ff80 	bl	800386a <HAL_UART_Init>
 800496a:	b900      	cbnz	r0, 800496e <MX_USART1_UART_Init+0x2a>
 800496c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800496e:	f240 11f1 	movw	r1, #497	; 0x1f1
 8004972:	4803      	ldr	r0, [pc, #12]	; (8004980 <MX_USART1_UART_Init+0x3c>)
 8004974:	f7ff ffab 	bl	80048ce <_Error_Handler>
 8004978:	20000400 	.word	0x20000400
 800497c:	40013800 	.word	0x40013800
 8004980:	08006d6c 	.word	0x08006d6c

08004984 <MX_ADC2_Init>:
{
 8004984:	b500      	push	{lr}
 8004986:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 8004988:	482d      	ldr	r0, [pc, #180]	; (8004a40 <MX_ADC2_Init+0xbc>)
 800498a:	4b2e      	ldr	r3, [pc, #184]	; (8004a44 <MX_ADC2_Init+0xc0>)
 800498c:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800498e:	2300      	movs	r3, #0
 8004990:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004992:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004994:	2201      	movs	r2, #1
 8004996:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004998:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800499a:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800499c:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800499e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049a0:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 80049a2:	2104      	movs	r1, #4
 80049a4:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80049a6:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80049a8:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80049aa:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80049ac:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80049ae:	f7fc fb19 	bl	8000fe4 <HAL_ADC_Init>
 80049b2:	bb60      	cbnz	r0, 8004a0e <MX_ADC2_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_8;
 80049b4:	2308      	movs	r3, #8
 80049b6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80049b8:	2301      	movs	r3, #1
 80049ba:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80049bc:	2300      	movs	r3, #0
 80049be:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80049c0:	2207      	movs	r2, #7
 80049c2:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80049c4:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80049c6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049c8:	4669      	mov	r1, sp
 80049ca:	481d      	ldr	r0, [pc, #116]	; (8004a40 <MX_ADC2_Init+0xbc>)
 80049cc:	f7fc fcf8 	bl	80013c0 <HAL_ADC_ConfigChannel>
 80049d0:	bb10      	cbnz	r0, 8004a18 <MX_ADC2_Init+0x94>
  sConfig.Channel = ADC_CHANNEL_9;
 80049d2:	2309      	movs	r3, #9
 80049d4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80049d6:	2302      	movs	r3, #2
 80049d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049da:	4669      	mov	r1, sp
 80049dc:	4818      	ldr	r0, [pc, #96]	; (8004a40 <MX_ADC2_Init+0xbc>)
 80049de:	f7fc fcef 	bl	80013c0 <HAL_ADC_ConfigChannel>
 80049e2:	b9f0      	cbnz	r0, 8004a22 <MX_ADC2_Init+0x9e>
  sConfig.Channel = ADC_CHANNEL_12;
 80049e4:	230c      	movs	r3, #12
 80049e6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80049e8:	2303      	movs	r3, #3
 80049ea:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049ec:	4669      	mov	r1, sp
 80049ee:	4814      	ldr	r0, [pc, #80]	; (8004a40 <MX_ADC2_Init+0xbc>)
 80049f0:	f7fc fce6 	bl	80013c0 <HAL_ADC_ConfigChannel>
 80049f4:	b9d0      	cbnz	r0, 8004a2c <MX_ADC2_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_15;
 80049f6:	230f      	movs	r3, #15
 80049f8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80049fa:	2304      	movs	r3, #4
 80049fc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049fe:	4669      	mov	r1, sp
 8004a00:	480f      	ldr	r0, [pc, #60]	; (8004a40 <MX_ADC2_Init+0xbc>)
 8004a02:	f7fc fcdd 	bl	80013c0 <HAL_ADC_ConfigChannel>
 8004a06:	b9b0      	cbnz	r0, 8004a36 <MX_ADC2_Init+0xb2>
}
 8004a08:	b007      	add	sp, #28
 8004a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004a0e:	f240 1139 	movw	r1, #313	; 0x139
 8004a12:	480d      	ldr	r0, [pc, #52]	; (8004a48 <MX_ADC2_Init+0xc4>)
 8004a14:	f7ff ff5b 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004a18:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004a1c:	480a      	ldr	r0, [pc, #40]	; (8004a48 <MX_ADC2_Init+0xc4>)
 8004a1e:	f7ff ff56 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004a22:	f240 114f 	movw	r1, #335	; 0x14f
 8004a26:	4808      	ldr	r0, [pc, #32]	; (8004a48 <MX_ADC2_Init+0xc4>)
 8004a28:	f7ff ff51 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004a2c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004a30:	4805      	ldr	r0, [pc, #20]	; (8004a48 <MX_ADC2_Init+0xc4>)
 8004a32:	f7ff ff4c 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004a36:	f240 1161 	movw	r1, #353	; 0x161
 8004a3a:	4803      	ldr	r0, [pc, #12]	; (8004a48 <MX_ADC2_Init+0xc4>)
 8004a3c:	f7ff ff47 	bl	80048ce <_Error_Handler>
 8004a40:	20000318 	.word	0x20000318
 8004a44:	50000100 	.word	0x50000100
 8004a48:	08006d6c 	.word	0x08006d6c

08004a4c <MX_RTC_Init>:
{
 8004a4c:	b500      	push	{lr}
 8004a4e:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 8004a50:	482c      	ldr	r0, [pc, #176]	; (8004b04 <MX_RTC_Init+0xb8>)
 8004a52:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <MX_RTC_Init+0xbc>)
 8004a54:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8004a56:	2100      	movs	r1, #0
 8004a58:	f7fe fa8f 	bl	8002f7a <HAL_RTCEx_BKUPRead>
 8004a5c:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8004a60:	4298      	cmp	r0, r3
 8004a62:	d037      	beq.n	8004ad4 <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004a64:	4827      	ldr	r0, [pc, #156]	; (8004b04 <MX_RTC_Init+0xb8>)
 8004a66:	2300      	movs	r3, #0
 8004a68:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004a6a:	227f      	movs	r2, #127	; 0x7f
 8004a6c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004a6e:	22ff      	movs	r2, #255	; 0xff
 8004a70:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004a72:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004a74:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004a76:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004a78:	f7fe f83b 	bl	8002af2 <HAL_RTC_Init>
 8004a7c:	bb68      	cbnz	r0, 8004ada <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8004a84:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8004a88:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004a8c:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004a8e:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004a90:	2201      	movs	r2, #1
 8004a92:	a901      	add	r1, sp, #4
 8004a94:	481b      	ldr	r0, [pc, #108]	; (8004b04 <MX_RTC_Init+0xb8>)
 8004a96:	f7fe f899 	bl	8002bcc <HAL_RTC_SetTime>
 8004a9a:	bb18      	cbnz	r0, 8004ae4 <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8004aa2:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8004aa6:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004ab0:	4669      	mov	r1, sp
 8004ab2:	4814      	ldr	r0, [pc, #80]	; (8004b04 <MX_RTC_Init+0xb8>)
 8004ab4:	f7fe f909 	bl	8002cca <HAL_RTC_SetDate>
 8004ab8:	b9c8      	cbnz	r0, 8004aee <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004aba:	2200      	movs	r2, #0
 8004abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ac0:	4810      	ldr	r0, [pc, #64]	; (8004b04 <MX_RTC_Init+0xb8>)
 8004ac2:	f7fe f9c5 	bl	8002e50 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004ac6:	b9b8      	cbnz	r0, 8004af8 <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8004ac8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004acc:	2100      	movs	r1, #0
 8004ace:	480d      	ldr	r0, [pc, #52]	; (8004b04 <MX_RTC_Init+0xb8>)
 8004ad0:	f7fe fa4e 	bl	8002f70 <HAL_RTCEx_BKUPWrite>
}
 8004ad4:	b007      	add	sp, #28
 8004ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004ada:	f240 119b 	movw	r1, #411	; 0x19b
 8004ade:	480b      	ldr	r0, [pc, #44]	; (8004b0c <MX_RTC_Init+0xc0>)
 8004ae0:	f7ff fef5 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004ae4:	f240 11a7 	movw	r1, #423	; 0x1a7
 8004ae8:	4808      	ldr	r0, [pc, #32]	; (8004b0c <MX_RTC_Init+0xc0>)
 8004aea:	f7ff fef0 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004aee:	f240 11b1 	movw	r1, #433	; 0x1b1
 8004af2:	4806      	ldr	r0, [pc, #24]	; (8004b0c <MX_RTC_Init+0xc0>)
 8004af4:	f7ff feeb 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004af8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004afc:	4803      	ldr	r0, [pc, #12]	; (8004b0c <MX_RTC_Init+0xc0>)
 8004afe:	f7ff fee6 	bl	80048ce <_Error_Handler>
 8004b02:	bf00      	nop
 8004b04:	20000470 	.word	0x20000470
 8004b08:	40002800 	.word	0x40002800
 8004b0c:	08006d6c 	.word	0x08006d6c

08004b10 <MX_I2C1_Init>:
{
 8004b10:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8004b12:	4815      	ldr	r0, [pc, #84]	; (8004b68 <MX_I2C1_Init+0x58>)
 8004b14:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <MX_I2C1_Init+0x5c>)
 8004b16:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004b18:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <MX_I2C1_Init+0x60>)
 8004b1a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b20:	2201      	movs	r2, #1
 8004b22:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b24:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004b26:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b28:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b2a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b2c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b2e:	f7fd f9b1 	bl	8001e94 <HAL_I2C_Init>
 8004b32:	b950      	cbnz	r0, 8004b4a <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b34:	2100      	movs	r1, #0
 8004b36:	480c      	ldr	r0, [pc, #48]	; (8004b68 <MX_I2C1_Init+0x58>)
 8004b38:	f7fd fa12 	bl	8001f60 <HAL_I2CEx_ConfigAnalogFilter>
 8004b3c:	b950      	cbnz	r0, 8004b54 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4809      	ldr	r0, [pc, #36]	; (8004b68 <MX_I2C1_Init+0x58>)
 8004b42:	f7fd fa3b 	bl	8001fbc <HAL_I2CEx_ConfigDigitalFilter>
 8004b46:	b950      	cbnz	r0, 8004b5e <MX_I2C1_Init+0x4e>
 8004b48:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004b4a:	f240 1175 	movw	r1, #373	; 0x175
 8004b4e:	4809      	ldr	r0, [pc, #36]	; (8004b74 <MX_I2C1_Init+0x64>)
 8004b50:	f7ff febd 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004b54:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8004b58:	4806      	ldr	r0, [pc, #24]	; (8004b74 <MX_I2C1_Init+0x64>)
 8004b5a:	f7ff feb8 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004b5e:	f240 1183 	movw	r1, #387	; 0x183
 8004b62:	4804      	ldr	r0, [pc, #16]	; (8004b74 <MX_I2C1_Init+0x64>)
 8004b64:	f7ff feb3 	bl	80048ce <_Error_Handler>
 8004b68:	2000036c 	.word	0x2000036c
 8004b6c:	40005400 	.word	0x40005400
 8004b70:	2000090e 	.word	0x2000090e
 8004b74:	08006d6c 	.word	0x08006d6c

08004b78 <SystemClock_Config>:
{
 8004b78:	b500      	push	{lr}
 8004b7a:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 8004b7c:	f7fd fa4a 	bl	8002014 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004b80:	4a29      	ldr	r2, [pc, #164]	; (8004c28 <SystemClock_Config+0xb0>)
 8004b82:	6a13      	ldr	r3, [r2, #32]
 8004b84:	f023 0318 	bic.w	r3, r3, #24
 8004b88:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004b8a:	2306      	movs	r3, #6
 8004b8c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b92:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004b94:	2310      	movs	r3, #16
 8004b96:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004ba0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004ba4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ba6:	a80c      	add	r0, sp, #48	; 0x30
 8004ba8:	f7fd fa3c 	bl	8002024 <HAL_RCC_OscConfig>
 8004bac:	bb70      	cbnz	r0, 8004c0c <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bae:	230f      	movs	r3, #15
 8004bb0:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bb2:	2102      	movs	r1, #2
 8004bb4:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bbe:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004bc0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004bc2:	a807      	add	r0, sp, #28
 8004bc4:	f7fd fd6c 	bl	80026a0 <HAL_RCC_ClockConfig>
 8004bc8:	bb20      	cbnz	r0, 8004c14 <SystemClock_Config+0x9c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <SystemClock_Config+0xb4>)
 8004bcc:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004bce:	2200      	movs	r2, #0
 8004bd0:	9202      	str	r2, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bd6:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004bd8:	9203      	str	r2, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004bda:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bdc:	4668      	mov	r0, sp
 8004bde:	f7fd fe7b 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8004be2:	b9e0      	cbnz	r0, 8004c1e <SystemClock_Config+0xa6>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004be4:	f7fd fe46 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <SystemClock_Config+0xb8>)
 8004bea:	fba3 3000 	umull	r3, r0, r3, r0
 8004bee:	0980      	lsrs	r0, r0, #6
 8004bf0:	f7fc fdf8 	bl	80017e4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004bf4:	2004      	movs	r0, #4
 8004bf6:	f7fc fe0b 	bl	8001810 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004c02:	f7fc fdb1 	bl	8001768 <HAL_NVIC_SetPriority>
}
 8004c06:	b017      	add	sp, #92	; 0x5c
 8004c08:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004c0c:	21f9      	movs	r1, #249	; 0xf9
 8004c0e:	4809      	ldr	r0, [pc, #36]	; (8004c34 <SystemClock_Config+0xbc>)
 8004c10:	f7ff fe5d 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004c14:	f240 1107 	movw	r1, #263	; 0x107
 8004c18:	4806      	ldr	r0, [pc, #24]	; (8004c34 <SystemClock_Config+0xbc>)
 8004c1a:	f7ff fe58 	bl	80048ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004c1e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8004c22:	4804      	ldr	r0, [pc, #16]	; (8004c34 <SystemClock_Config+0xbc>)
 8004c24:	f7ff fe53 	bl	80048ce <_Error_Handler>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	000100a1 	.word	0x000100a1
 8004c30:	10624dd3 	.word	0x10624dd3
 8004c34:	08006d6c 	.word	0x08006d6c

08004c38 <main>:
{
 8004c38:	b510      	push	{r4, lr}
  HAL_Init();
 8004c3a:	f7fc f8f3 	bl	8000e24 <HAL_Init>
  SystemClock_Config();
 8004c3e:	f7ff ff9b 	bl	8004b78 <SystemClock_Config>
  MX_GPIO_Init();
 8004c42:	f7ff fd6f 	bl	8004724 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c46:	f7ff fe27 	bl	8004898 <MX_DMA_Init>
  MX_TIM2_Init();
 8004c4a:	f7ff fe41 	bl	80048d0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004c4e:	f7ff fe79 	bl	8004944 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8004c52:	f7ff fe97 	bl	8004984 <MX_ADC2_Init>
  MX_RTC_Init();
 8004c56:	f7ff fef9 	bl	8004a4c <MX_RTC_Init>
  MX_I2C1_Init();
 8004c5a:	f7ff ff59 	bl	8004b10 <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8004c5e:	4c43      	ldr	r4, [pc, #268]	; (8004d6c <main+0x134>)
 8004c60:	2100      	movs	r1, #0
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7fc fb64 	bl	8001330 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8004c68:	f7ff fbe4 	bl	8004434 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	4940      	ldr	r1, [pc, #256]	; (8004d70 <main+0x138>)
 8004c70:	4840      	ldr	r0, [pc, #256]	; (8004d74 <main+0x13c>)
 8004c72:	f7fe fbee 	bl	8003452 <HAL_UART_Receive_IT>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,2048,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8004c76:	2200      	movs	r2, #0
 8004c78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c7c:	483e      	ldr	r0, [pc, #248]	; (8004d78 <main+0x140>)
 8004c7e:	f7fe f8e7 	bl	8002e50 <HAL_RTCEx_SetWakeUpTimer_IT>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	4611      	mov	r1, r2
 8004c86:	2025      	movs	r0, #37	; 0x25
 8004c88:	f7fc fd6e 	bl	8001768 <HAL_NVIC_SetPriority>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <main+0x144>)
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7fc fab4 	bl	8001200 <HAL_ADC_Start_DMA>
	HAL_FLASH_Unlock();
 8004c98:	f7fc ff0a 	bl	8001ab0 <HAL_FLASH_Unlock>
	pEraseInit->NbPages = 5;
 8004c9c:	4a38      	ldr	r2, [pc, #224]	; (8004d80 <main+0x148>)
 8004c9e:	6813      	ldr	r3, [r2, #0]
 8004ca0:	2105      	movs	r1, #5
 8004ca2:	6099      	str	r1, [r3, #8]
	pEraseInit->PageAddress = (uint32_t)(0x08008000);
 8004ca4:	4937      	ldr	r1, [pc, #220]	; (8004d84 <main+0x14c>)
 8004ca6:	6059      	str	r1, [r3, #4]
	pEraseInit->TypeErase = (uint32_t)FLASH_TYPEERASE_PAGES;
 8004ca8:	2100      	movs	r1, #0
 8004caa:	6019      	str	r1, [r3, #0]
	HAL_FLASHEx_Erase(pEraseInit,flash_error);
 8004cac:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <main+0x150>)
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	6810      	ldr	r0, [r2, #0]
 8004cb2:	f7fc ffbf 	bl	8001c34 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8004cb6:	f7fc ff0f 	bl	8001ad8 <HAL_FLASH_Lock>
 8004cba:	e01e      	b.n	8004cfa <main+0xc2>
		  rx_flag = 0;
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	4b33      	ldr	r3, [pc, #204]	; (8004d8c <main+0x154>)
 8004cc0:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8004cc2:	f000 fcd1 	bl	8005668 <uart_comms>
 8004cc6:	e01c      	b.n	8004d02 <main+0xca>
		  systick_flag = 0;
 8004cc8:	2200      	movs	r2, #0
 8004cca:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <main+0x158>)
 8004ccc:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 8004cce:	f000 f86f 	bl	8004db0 <seven_segment>
		 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 8004cd2:	2207      	movs	r2, #7
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <main+0x144>)
 8004cd6:	6819      	ldr	r1, [r3, #0]
 8004cd8:	4824      	ldr	r0, [pc, #144]	; (8004d6c <main+0x134>)
 8004cda:	f7fc fa91 	bl	8001200 <HAL_ADC_Start_DMA>
 8004cde:	e014      	b.n	8004d0a <main+0xd2>
		  adc_flag = 0;
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <main+0x15c>)
 8004ce4:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8004ce6:	f7fe ff29 	bl	8003b3c <adc_comms>
 8004cea:	e012      	b.n	8004d12 <main+0xda>
		  touch_flag = 0;
 8004cec:	2200      	movs	r2, #0
 8004cee:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <main+0x160>)
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	e012      	b.n	8004d1a <main+0xe2>
	  if(flash_flag){
 8004cf4:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <main+0x164>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	bb1b      	cbnz	r3, 8004d42 <main+0x10a>
	  if(rx_flag == 1 ){ 	// UART Comms
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <main+0x154>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d0dc      	beq.n	8004cbc <main+0x84>
	  if(systick_flag == 1){	// Seven Segment
 8004d02:	4b23      	ldr	r3, [pc, #140]	; (8004d90 <main+0x158>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d0de      	beq.n	8004cc8 <main+0x90>
	  if(adc_flag == 1){	// ADC conversion
 8004d0a:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <main+0x15c>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d0e6      	beq.n	8004ce0 <main+0xa8>
	  if(touch_flag == 1 ){
 8004d12:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <main+0x160>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d0e8      	beq.n	8004cec <main+0xb4>
	  if(RTC_timer_flag == 1){
 8004d1a:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <main+0x168>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d1e8      	bne.n	8004cf4 <main+0xbc>
		  fake_RTC_timer += 1;
 8004d22:	4a20      	ldr	r2, [pc, #128]	; (8004da4 <main+0x16c>)
 8004d24:	8813      	ldrh	r3, [r2, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	8013      	strh	r3, [r2, #0]
		  RTC_timer_flag = 0;
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <main+0x168>)
 8004d30:	7011      	strb	r1, [r2, #0]
		  if(fake_RTC_timer == 1000){
 8004d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d36:	d1dd      	bne.n	8004cf4 <main+0xbc>
			  fake_RTC_timer = 0;
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <main+0x16c>)
 8004d3a:	8019      	strh	r1, [r3, #0]
			  heating_scheduling();
 8004d3c:	f7ff fa62 	bl	8004204 <heating_scheduling>
 8004d40:	e7d8      	b.n	8004cf4 <main+0xbc>
		  flash_flag = 0;
 8004d42:	2200      	movs	r2, #0
 8004d44:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <main+0x164>)
 8004d46:	701a      	strb	r2, [r3, #0]
		  flash_counter += 1;
 8004d48:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <main+0x170>)
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	6013      	str	r3, [r2, #0]
		  if(flash_counter == 10000){
 8004d50:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d1d0      	bne.n	8004cfa <main+0xc2>
			  flash_counter = 0;
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <main+0x170>)
 8004d5c:	601a      	str	r2, [r3, #0]
			  if(enableFlashLogging){
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <main+0x174>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0c9      	beq.n	8004cfa <main+0xc2>
			  write2Flash();
 8004d66:	f7fe ffdd 	bl	8003d24 <write2Flash>
 8004d6a:	e7c6      	b.n	8004cfa <main+0xc2>
 8004d6c:	20000318 	.word	0x20000318
 8004d70:	200005ac 	.word	0x200005ac
 8004d74:	20000400 	.word	0x20000400
 8004d78:	20000470 	.word	0x20000470
 8004d7c:	20000224 	.word	0x20000224
 8004d80:	20000298 	.word	0x20000298
 8004d84:	08008000 	.word	0x08008000
 8004d88:	20000268 	.word	0x20000268
 8004d8c:	200002a9 	.word	0x200002a9
 8004d90:	200002b5 	.word	0x200002b5
 8004d94:	20000242 	.word	0x20000242
 8004d98:	200002c8 	.word	0x200002c8
 8004d9c:	2000026c 	.word	0x2000026c
 8004da0:	2000022c 	.word	0x2000022c
 8004da4:	20000262 	.word	0x20000262
 8004da8:	20000264 	.word	0x20000264
 8004dac:	20000260 	.word	0x20000260

08004db0 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8004db0:	b510      	push	{r4, lr}

	if(segment_counter == 0){	// Left Most Digit
 8004db2:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <seven_segment+0x12c>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b133      	cbz	r3, 8004dc6 <seven_segment+0x16>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d027      	beq.n	8004e0c <seven_segment+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d048      	beq.n	8004e52 <seven_segment+0xa2>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d069      	beq.n	8004e98 <seven_segment+0xe8>
 8004dc4:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8004dc6:	4c46      	ldr	r4, [pc, #280]	; (8004ee0 <seven_segment+0x130>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f7fd f84c 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	2110      	movs	r1, #16
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7fd f847 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004dde:	2201      	movs	r2, #1
 8004de0:	2120      	movs	r1, #32
 8004de2:	4620      	mov	r0, r4
 8004de4:	f7fd f842 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004de8:	2201      	movs	r2, #1
 8004dea:	2108      	movs	r1, #8
 8004dec:	4620      	mov	r0, r4
 8004dee:	f7fd f83d 	bl	8001e6c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 8004df2:	4c3a      	ldr	r4, [pc, #232]	; (8004edc <seven_segment+0x12c>)
 8004df4:	7823      	ldrb	r3, [r4, #0]
 8004df6:	4a3b      	ldr	r2, [pc, #236]	; (8004ee4 <seven_segment+0x134>)
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	5cd0      	ldrb	r0, [r2, r3]
 8004dfc:	3830      	subs	r0, #48	; 0x30
 8004dfe:	b2c0      	uxtb	r0, r0
 8004e00:	f000 f872 	bl	8004ee8 <seven_segment_display>
		segment_counter += 1;
 8004e04:	7823      	ldrb	r3, [r4, #0]
 8004e06:	3301      	adds	r3, #1
 8004e08:	7023      	strb	r3, [r4, #0]
 8004e0a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004e0c:	4c34      	ldr	r4, [pc, #208]	; (8004ee0 <seven_segment+0x130>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e14:	4620      	mov	r0, r4
 8004e16:	f7fd f829 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7fd f824 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004e24:	2201      	movs	r2, #1
 8004e26:	2120      	movs	r1, #32
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7fd f81f 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2108      	movs	r1, #8
 8004e32:	4620      	mov	r0, r4
 8004e34:	f7fd f81a 	bl	8001e6c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004e38:	4c28      	ldr	r4, [pc, #160]	; (8004edc <seven_segment+0x12c>)
 8004e3a:	7823      	ldrb	r3, [r4, #0]
 8004e3c:	4a29      	ldr	r2, [pc, #164]	; (8004ee4 <seven_segment+0x134>)
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	5cd0      	ldrb	r0, [r2, r3]
 8004e42:	3830      	subs	r0, #48	; 0x30
 8004e44:	b2c0      	uxtb	r0, r0
 8004e46:	f000 f84f 	bl	8004ee8 <seven_segment_display>
		segment_counter += 1;
 8004e4a:	7823      	ldrb	r3, [r4, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	7023      	strb	r3, [r4, #0]
 8004e50:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004e52:	4c23      	ldr	r4, [pc, #140]	; (8004ee0 <seven_segment+0x130>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f7fd f806 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004e60:	2201      	movs	r2, #1
 8004e62:	2110      	movs	r1, #16
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7fd f801 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2120      	movs	r1, #32
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7fc fffc 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004e74:	2201      	movs	r2, #1
 8004e76:	2108      	movs	r1, #8
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7fc fff7 	bl	8001e6c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004e7e:	4c17      	ldr	r4, [pc, #92]	; (8004edc <seven_segment+0x12c>)
 8004e80:	7823      	ldrb	r3, [r4, #0]
 8004e82:	4a18      	ldr	r2, [pc, #96]	; (8004ee4 <seven_segment+0x134>)
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	5cd0      	ldrb	r0, [r2, r3]
 8004e88:	3830      	subs	r0, #48	; 0x30
 8004e8a:	b2c0      	uxtb	r0, r0
 8004e8c:	f000 f82c 	bl	8004ee8 <seven_segment_display>
		segment_counter += 1;
 8004e90:	7823      	ldrb	r3, [r4, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	7023      	strb	r3, [r4, #0]
 8004e96:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004e98:	4c11      	ldr	r4, [pc, #68]	; (8004ee0 <seven_segment+0x130>)
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f7fc ffe3 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2110      	movs	r1, #16
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7fc ffde 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7fc ffd9 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2108      	movs	r1, #8
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7fc ffd4 	bl	8001e6c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004ec4:	4c05      	ldr	r4, [pc, #20]	; (8004edc <seven_segment+0x12c>)
 8004ec6:	7823      	ldrb	r3, [r4, #0]
 8004ec8:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <seven_segment+0x134>)
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	5cd0      	ldrb	r0, [r2, r3]
 8004ece:	3830      	subs	r0, #48	; 0x30
 8004ed0:	b2c0      	uxtb	r0, r0
 8004ed2:	f000 f809 	bl	8004ee8 <seven_segment_display>
		segment_counter = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	7023      	strb	r3, [r4, #0]
	}
}
 8004eda:	e773      	b.n	8004dc4 <seven_segment+0x14>
 8004edc:	200002aa 	.word	0x200002aa
 8004ee0:	48000400 	.word	0x48000400
 8004ee4:	200002ac 	.word	0x200002ac

08004ee8 <seven_segment_display>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8004ee8:	b510      	push	{r4, lr}
	switch(num){
 8004eea:	2809      	cmp	r0, #9
 8004eec:	f200 81d2 	bhi.w	8005294 <seven_segment_display+0x3ac>
 8004ef0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004ef4:	000a019f 	.word	0x000a019f
 8004ef8:	00600035 	.word	0x00600035
 8004efc:	00bc008b 	.word	0x00bc008b
 8004f00:	011200e7 	.word	0x011200e7
 8004f04:	016e013d 	.word	0x016e013d
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2140      	movs	r1, #64	; 0x40
 8004f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f10:	f7fc ffac 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8004f14:	2200      	movs	r2, #0
 8004f16:	2180      	movs	r1, #128	; 0x80
 8004f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f1c:	f7fc ffa6 	bl	8001e6c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8004f20:	2201      	movs	r2, #1
 8004f22:	2120      	movs	r1, #32
 8004f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f28:	f7fc ffa0 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f36:	f7fc ff99 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f44:	f7fc ff92 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2140      	movs	r1, #64	; 0x40
 8004f4c:	48ea      	ldr	r0, [pc, #936]	; (80052f8 <seven_segment_display+0x410>)
 8004f4e:	f7fc ff8d 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8004f52:	2201      	movs	r2, #1
 8004f54:	2180      	movs	r1, #128	; 0x80
 8004f56:	48e9      	ldr	r0, [pc, #932]	; (80052fc <seven_segment_display+0x414>)
 8004f58:	f7fc ff88 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8004f5c:	bd10      	pop	{r4, pc}
	case 2:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2120      	movs	r1, #32
 8004f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f66:	f7fc ff81 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2140      	movs	r1, #64	; 0x40
 8004f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f72:	f7fc ff7b 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004f76:	2200      	movs	r2, #0
 8004f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f80:	f7fc ff74 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004f84:	2200      	movs	r2, #0
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	48dc      	ldr	r0, [pc, #880]	; (80052fc <seven_segment_display+0x414>)
 8004f8a:	f7fc ff6f 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2140      	movs	r1, #64	; 0x40
 8004f92:	48d9      	ldr	r0, [pc, #868]	; (80052f8 <seven_segment_display+0x410>)
 8004f94:	f7fc ff6a 	bl	8001e6c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fa2:	f7fc ff63 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fae:	f7fc ff5d 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8004fb2:	bd10      	pop	{r4, pc}

	case 3:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2120      	movs	r1, #32
 8004fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fbc:	f7fc ff56 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2140      	movs	r1, #64	; 0x40
 8004fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fc8:	f7fc ff50 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fd6:	f7fc ff49 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fe2:	f7fc ff43 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2140      	movs	r1, #64	; 0x40
 8004fea:	48c3      	ldr	r0, [pc, #780]	; (80052f8 <seven_segment_display+0x410>)
 8004fec:	f7fc ff3e 	bl	8001e6c <HAL_GPIO_WritePin>

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ffa:	f7fc ff37 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004ffe:	2201      	movs	r2, #1
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	48be      	ldr	r0, [pc, #760]	; (80052fc <seven_segment_display+0x414>)
 8005004:	f7fc ff32 	bl	8001e6c <HAL_GPIO_WritePin>

		break;
 8005008:	bd10      	pop	{r4, pc}
	case 4:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800500a:	2200      	movs	r2, #0
 800500c:	2140      	movs	r1, #64	; 0x40
 800500e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005012:	f7fc ff2b 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005016:	2200      	movs	r2, #0
 8005018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800501c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005020:	f7fc ff24 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800502a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800502e:	f7fc ff1d 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005032:	2200      	movs	r2, #0
 8005034:	2180      	movs	r1, #128	; 0x80
 8005036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800503a:	f7fc ff17 	bl	8001e6c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 800503e:	2201      	movs	r2, #1
 8005040:	2120      	movs	r1, #32
 8005042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005046:	f7fc ff11 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800504a:	2201      	movs	r2, #1
 800504c:	2180      	movs	r1, #128	; 0x80
 800504e:	48ab      	ldr	r0, [pc, #684]	; (80052fc <seven_segment_display+0x414>)
 8005050:	f7fc ff0c 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005054:	2201      	movs	r2, #1
 8005056:	2120      	movs	r1, #32
 8005058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800505c:	f7fc ff06 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005060:	2201      	movs	r2, #1
 8005062:	2140      	movs	r1, #64	; 0x40
 8005064:	48a4      	ldr	r0, [pc, #656]	; (80052f8 <seven_segment_display+0x410>)
 8005066:	f7fc ff01 	bl	8001e6c <HAL_GPIO_WritePin>

		break;
 800506a:	bd10      	pop	{r4, pc}
	case 5:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800506c:	2200      	movs	r2, #0
 800506e:	2120      	movs	r1, #32
 8005070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005074:	f7fc fefa 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005078:	2200      	movs	r2, #0
 800507a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800507e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005082:	f7fc fef3 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005086:	2200      	movs	r2, #0
 8005088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800508c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005090:	f7fc feec 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005094:	2200      	movs	r2, #0
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800509c:	f7fc fee6 	bl	8001e6c <HAL_GPIO_WritePin>

		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 80050a0:	2201      	movs	r2, #1
 80050a2:	2140      	movs	r1, #64	; 0x40
 80050a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050a8:	f7fc fee0 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80050ac:	2201      	movs	r2, #1
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	4892      	ldr	r0, [pc, #584]	; (80052fc <seven_segment_display+0x414>)
 80050b2:	f7fc fedb 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 80050b6:	2200      	movs	r2, #0
 80050b8:	2140      	movs	r1, #64	; 0x40
 80050ba:	488f      	ldr	r0, [pc, #572]	; (80052f8 <seven_segment_display+0x410>)
 80050bc:	f7fc fed6 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 80050c0:	bd10      	pop	{r4, pc}

	case 6:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80050c2:	2200      	movs	r2, #0
 80050c4:	2120      	movs	r1, #32
 80050c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050ca:	f7fc fecf 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80050ce:	2200      	movs	r2, #0
 80050d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d8:	f7fc fec8 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050e6:	f7fc fec1 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80050ea:	2200      	movs	r2, #0
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050f2:	f7fc febb 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80050f6:	2200      	movs	r2, #0
 80050f8:	2140      	movs	r1, #64	; 0x40
 80050fa:	487f      	ldr	r0, [pc, #508]	; (80052f8 <seven_segment_display+0x410>)
 80050fc:	f7fc feb6 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005100:	2200      	movs	r2, #0
 8005102:	2180      	movs	r1, #128	; 0x80
 8005104:	487d      	ldr	r0, [pc, #500]	; (80052fc <seven_segment_display+0x414>)
 8005106:	f7fc feb1 	bl	8001e6c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 800510a:	2201      	movs	r2, #1
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005112:	f7fc feab 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8005116:	bd10      	pop	{r4, pc}
	case 7:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005118:	2200      	movs	r2, #0
 800511a:	2120      	movs	r1, #32
 800511c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005120:	f7fc fea4 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005124:	2200      	movs	r2, #0
 8005126:	2140      	movs	r1, #64	; 0x40
 8005128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800512c:	f7fc fe9e 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005130:	2200      	movs	r2, #0
 8005132:	2180      	movs	r1, #128	; 0x80
 8005134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005138:	f7fc fe98 	bl	8001e6c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800513c:	2201      	movs	r2, #1
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	486e      	ldr	r0, [pc, #440]	; (80052fc <seven_segment_display+0x414>)
 8005142:	f7fc fe93 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005146:	2201      	movs	r2, #1
 8005148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800514c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005150:	f7fc fe8c 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005154:	2201      	movs	r2, #1
 8005156:	f44f 7100 	mov.w	r1, #512	; 0x200
 800515a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800515e:	f7fc fe85 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005162:	2201      	movs	r2, #1
 8005164:	2140      	movs	r1, #64	; 0x40
 8005166:	4864      	ldr	r0, [pc, #400]	; (80052f8 <seven_segment_display+0x410>)
 8005168:	f7fc fe80 	bl	8001e6c <HAL_GPIO_WritePin>

		break;
 800516c:	bd10      	pop	{r4, pc}
	case 8:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800516e:	2200      	movs	r2, #0
 8005170:	2140      	movs	r1, #64	; 0x40
 8005172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005176:	f7fc fe79 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800517a:	2200      	movs	r2, #0
 800517c:	2120      	movs	r1, #32
 800517e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005182:	f7fc fe73 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005186:	4c5c      	ldr	r4, [pc, #368]	; (80052f8 <seven_segment_display+0x410>)
 8005188:	2200      	movs	r2, #0
 800518a:	2140      	movs	r1, #64	; 0x40
 800518c:	4620      	mov	r0, r4
 800518e:	f7fc fe6d 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005192:	2200      	movs	r2, #0
 8005194:	2180      	movs	r1, #128	; 0x80
 8005196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800519a:	f7fc fe67 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800519e:	2200      	movs	r2, #0
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7fc fe62 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80051a8:	2200      	movs	r2, #0
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	4853      	ldr	r0, [pc, #332]	; (80052fc <seven_segment_display+0x414>)
 80051ae:	f7fc fe5d 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80051b2:	2200      	movs	r2, #0
 80051b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051bc:	f7fc fe56 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80051c0:	2200      	movs	r2, #0
 80051c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051ca:	f7fc fe4f 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 80051ce:	bd10      	pop	{r4, pc}
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80051d0:	2200      	movs	r2, #0
 80051d2:	2120      	movs	r1, #32
 80051d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051d8:	f7fc fe48 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80051dc:	4c46      	ldr	r4, [pc, #280]	; (80052f8 <seven_segment_display+0x410>)
 80051de:	2200      	movs	r2, #0
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	4620      	mov	r0, r4
 80051e4:	f7fc fe42 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051f0:	f7fc fe3c 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80051f4:	2200      	movs	r2, #0
 80051f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051fe:	f7fc fe35 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005202:	2200      	movs	r2, #0
 8005204:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800520c:	f7fc fe2e 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005210:	2200      	movs	r2, #0
 8005212:	2140      	movs	r1, #64	; 0x40
 8005214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005218:	f7fc fe28 	bl	8001e6c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800521c:	2201      	movs	r2, #1
 800521e:	2180      	movs	r1, #128	; 0x80
 8005220:	4836      	ldr	r0, [pc, #216]	; (80052fc <seven_segment_display+0x414>)
 8005222:	f7fc fe23 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005226:	2201      	movs	r2, #1
 8005228:	2140      	movs	r1, #64	; 0x40
 800522a:	4620      	mov	r0, r4
 800522c:	f7fc fe1e 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8005230:	bd10      	pop	{r4, pc}
	case 0:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005232:	2200      	movs	r2, #0
 8005234:	2140      	movs	r1, #64	; 0x40
 8005236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800523a:	f7fc fe17 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800523e:	2200      	movs	r2, #0
 8005240:	2120      	movs	r1, #32
 8005242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005246:	f7fc fe11 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800524a:	4c2b      	ldr	r4, [pc, #172]	; (80052f8 <seven_segment_display+0x410>)
 800524c:	2200      	movs	r2, #0
 800524e:	2140      	movs	r1, #64	; 0x40
 8005250:	4620      	mov	r0, r4
 8005252:	f7fc fe0b 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005256:	2200      	movs	r2, #0
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800525e:	f7fc fe05 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005262:	2200      	movs	r2, #0
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	4620      	mov	r0, r4
 8005268:	f7fc fe00 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 800526c:	2200      	movs	r2, #0
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	4822      	ldr	r0, [pc, #136]	; (80052fc <seven_segment_display+0x414>)
 8005272:	f7fc fdfb 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005276:	2200      	movs	r2, #0
 8005278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800527c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005280:	f7fc fdf4 	bl	8001e6c <HAL_GPIO_WritePin>
		//OFF

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005284:	2201      	movs	r2, #1
 8005286:	f44f 7100 	mov.w	r1, #512	; 0x200
 800528a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800528e:	f7fc fded 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8005292:	bd10      	pop	{r4, pc}
	default:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005294:	2201      	movs	r2, #1
 8005296:	2120      	movs	r1, #32
 8005298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800529c:	f7fc fde6 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 80052a0:	4c15      	ldr	r4, [pc, #84]	; (80052f8 <seven_segment_display+0x410>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	2140      	movs	r1, #64	; 0x40
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7fc fde0 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80052ac:	2201      	movs	r2, #1
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052b4:	f7fc fdda 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80052b8:	2201      	movs	r2, #1
 80052ba:	2140      	movs	r1, #64	; 0x40
 80052bc:	4620      	mov	r0, r4
 80052be:	f7fc fdd5 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80052c2:	2201      	movs	r2, #1
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	480d      	ldr	r0, [pc, #52]	; (80052fc <seven_segment_display+0x414>)
 80052c8:	f7fc fdd0 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80052cc:	2201      	movs	r2, #1
 80052ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052d6:	f7fc fdc9 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 80052da:	2201      	movs	r2, #1
 80052dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052e4:	f7fc fdc2 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 80052e8:	2201      	movs	r2, #1
 80052ea:	2140      	movs	r1, #64	; 0x40
 80052ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052f0:	f7fc fdbc 	bl	8001e6c <HAL_GPIO_WritePin>
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	bf00      	nop
 80052f8:	48000400 	.word	0x48000400
 80052fc:	48000800 	.word	0x48000800

08005300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005300:	b500      	push	{lr}
 8005302:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005304:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <HAL_MspInit+0x78>)
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	619a      	str	r2, [r3, #24]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005318:	2007      	movs	r0, #7
 800531a:	f7fc fa13 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 800531e:	2202      	movs	r2, #2
 8005320:	2100      	movs	r1, #0
 8005322:	f06f 000b 	mvn.w	r0, #11
 8005326:	f7fc fa1f 	bl	8001768 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 800532a:	2202      	movs	r2, #2
 800532c:	2100      	movs	r1, #0
 800532e:	f06f 000a 	mvn.w	r0, #10
 8005332:	f7fc fa19 	bl	8001768 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 8005336:	2202      	movs	r2, #2
 8005338:	2100      	movs	r1, #0
 800533a:	f06f 0009 	mvn.w	r0, #9
 800533e:	f7fc fa13 	bl	8001768 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 8005342:	2202      	movs	r2, #2
 8005344:	2100      	movs	r1, #0
 8005346:	f06f 0004 	mvn.w	r0, #4
 800534a:	f7fc fa0d 	bl	8001768 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 800534e:	2202      	movs	r2, #2
 8005350:	2100      	movs	r1, #0
 8005352:	f06f 0003 	mvn.w	r0, #3
 8005356:	f7fc fa07 	bl	8001768 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 800535a:	2202      	movs	r2, #2
 800535c:	2100      	movs	r1, #0
 800535e:	f06f 0001 	mvn.w	r0, #1
 8005362:	f7fc fa01 	bl	8001768 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8005366:	2202      	movs	r2, #2
 8005368:	2100      	movs	r1, #0
 800536a:	f04f 30ff 	mov.w	r0, #4294967295
 800536e:	f7fc f9fb 	bl	8001768 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005372:	b003      	add	sp, #12
 8005374:	f85d fb04 	ldr.w	pc, [sp], #4
 8005378:	40021000 	.word	0x40021000

0800537c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 800537c:	6802      	ldr	r2, [r0, #0]
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <HAL_ADC_MspInit+0x84>)
 8005380:	429a      	cmp	r2, r3
 8005382:	d000      	beq.n	8005386 <HAL_ADC_MspInit+0xa>
 8005384:	4770      	bx	lr
{
 8005386:	b570      	push	{r4, r5, r6, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800538c:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <HAL_ADC_MspInit+0x88>)
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005394:	615a      	str	r2, [r3, #20]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC2_IN8
    PC3     ------> ADC2_IN9
    PB2     ------> ADC2_IN12
    PB15     ------> ADC2_IN15 
    */
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 80053a0:	230c      	movs	r3, #12
 80053a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053a4:	2603      	movs	r6, #3
 80053a6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	2500      	movs	r5, #0
 80053aa:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053ac:	a901      	add	r1, sp, #4
 80053ae:	4816      	ldr	r0, [pc, #88]	; (8005408 <HAL_ADC_MspInit+0x8c>)
 80053b0:	f7fc fc92 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 80053b4:	f248 0304 	movw	r3, #32772	; 0x8004
 80053b8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053ba:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053bc:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053be:	a901      	add	r1, sp, #4
 80053c0:	4812      	ldr	r0, [pc, #72]	; (800540c <HAL_ADC_MspInit+0x90>)
 80053c2:	f7fc fc89 	bl	8001cd8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80053c6:	4812      	ldr	r0, [pc, #72]	; (8005410 <HAL_ADC_MspInit+0x94>)
 80053c8:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_ADC_MspInit+0x98>)
 80053ca:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053cc:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80053ce:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d8:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053de:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80053e0:	2320      	movs	r3, #32
 80053e2:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80053e4:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80053e6:	f7fc fa51 	bl	800188c <HAL_DMA_Init>
 80053ea:	b920      	cbnz	r0, 80053f6 <HAL_ADC_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80053ec:	4b08      	ldr	r3, [pc, #32]	; (8005410 <HAL_ADC_MspInit+0x94>)
 80053ee:	63e3      	str	r3, [r4, #60]	; 0x3c
 80053f0:	625c      	str	r4, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80053f2:	b006      	add	sp, #24
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
      _Error_Handler(__FILE__, __LINE__);
 80053f6:	217a      	movs	r1, #122	; 0x7a
 80053f8:	4807      	ldr	r0, [pc, #28]	; (8005418 <HAL_ADC_MspInit+0x9c>)
 80053fa:	f7ff fa68 	bl	80048ce <_Error_Handler>
 80053fe:	e7f5      	b.n	80053ec <HAL_ADC_MspInit+0x70>
 8005400:	50000100 	.word	0x50000100
 8005404:	40021000 	.word	0x40021000
 8005408:	48000800 	.word	0x48000800
 800540c:	48000400 	.word	0x48000400
 8005410:	200004e8 	.word	0x200004e8
 8005414:	4002001c 	.word	0x4002001c
 8005418:	08006d7c 	.word	0x08006d7c

0800541c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800541c:	6802      	ldr	r2, [r0, #0]
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <HAL_I2C_MspInit+0x58>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d000      	beq.n	8005426 <HAL_I2C_MspInit+0xa>
 8005424:	4770      	bx	lr
{
 8005426:	b500      	push	{lr}
 8005428:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 800542a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800542e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005430:	2312      	movs	r3, #18
 8005432:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005434:	2301      	movs	r3, #1
 8005436:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005438:	2303      	movs	r3, #3
 800543a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800543c:	2304      	movs	r3, #4
 800543e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005440:	eb0d 0103 	add.w	r1, sp, r3
 8005444:	480c      	ldr	r0, [pc, #48]	; (8005478 <HAL_I2C_MspInit+0x5c>)
 8005446:	f7fc fc47 	bl	8001cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <HAL_I2C_MspInit+0x60>)
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005452:	61da      	str	r2, [r3, #28]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800545e:	2200      	movs	r2, #0
 8005460:	4611      	mov	r1, r2
 8005462:	201f      	movs	r0, #31
 8005464:	f7fc f980 	bl	8001768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005468:	201f      	movs	r0, #31
 800546a:	f7fc f9af 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800546e:	b007      	add	sp, #28
 8005470:	f85d fb04 	ldr.w	pc, [sp], #4
 8005474:	40005400 	.word	0x40005400
 8005478:	48000400 	.word	0x48000400
 800547c:	40021000 	.word	0x40021000

08005480 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005480:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 8005482:	6802      	ldr	r2, [r0, #0]
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <HAL_RTC_MspInit+0x34>)
 8005486:	429a      	cmp	r2, r3
 8005488:	d000      	beq.n	800548c <HAL_RTC_MspInit+0xc>
 800548a:	bd08      	pop	{r3, pc}
 800548c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005490:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005494:	fab2 f282 	clz	r2, r2
 8005498:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <HAL_RTC_MspInit+0x38>)
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80054a2:	2200      	movs	r2, #0
 80054a4:	4611      	mov	r1, r2
 80054a6:	2003      	movs	r0, #3
 80054a8:	f7fc f95e 	bl	8001768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80054ac:	2003      	movs	r0, #3
 80054ae:	f7fc f98d 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80054b2:	e7ea      	b.n	800548a <HAL_RTC_MspInit+0xa>
 80054b4:	40002800 	.word	0x40002800
 80054b8:	10908100 	.word	0x10908100

080054bc <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80054bc:	6803      	ldr	r3, [r0, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d000      	beq.n	80054c6 <HAL_TIM_Base_MspInit+0xa>
 80054c4:	4770      	bx	lr
{
 80054c6:	b500      	push	{lr}
 80054c8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	61da      	str	r2, [r3, #28]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 80054e0:	2202      	movs	r2, #2
 80054e2:	2100      	movs	r1, #0
 80054e4:	201c      	movs	r0, #28
 80054e6:	f7fc f93f 	bl	8001768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054ea:	201c      	movs	r0, #28
 80054ec:	f7fc f96e 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80054f0:	b003      	add	sp, #12
 80054f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080054f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80054f8:	6802      	ldr	r2, [r0, #0]
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <HAL_UART_MspInit+0x54>)
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d000      	beq.n	8005502 <HAL_UART_MspInit+0xa>
 8005500:	4770      	bx	lr
{
 8005502:	b510      	push	{r4, lr}
 8005504:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005506:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005510:	619a      	str	r2, [r3, #24]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800551c:	2330      	movs	r3, #48	; 0x30
 800551e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005520:	2302      	movs	r3, #2
 8005522:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	2400      	movs	r4, #0
 8005526:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005528:	2303      	movs	r3, #3
 800552a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800552c:	2307      	movs	r3, #7
 800552e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005530:	a901      	add	r1, sp, #4
 8005532:	4807      	ldr	r0, [pc, #28]	; (8005550 <HAL_UART_MspInit+0x58>)
 8005534:	f7fc fbd0 	bl	8001cd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005538:	4622      	mov	r2, r4
 800553a:	4621      	mov	r1, r4
 800553c:	2025      	movs	r0, #37	; 0x25
 800553e:	f7fc f913 	bl	8001768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005542:	2025      	movs	r0, #37	; 0x25
 8005544:	f7fc f942 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005548:	b006      	add	sp, #24
 800554a:	bd10      	pop	{r4, pc}
 800554c:	40013800 	.word	0x40013800
 8005550:	48000800 	.word	0x48000800

08005554 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8005554:	4770      	bx	lr

08005556 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005556:	4770      	bx	lr

08005558 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005558:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800555a:	f7fb fc75 	bl	8000e48 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800555e:	f7fc f968 	bl	8001832 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
 8005562:	2301      	movs	r3, #1
 8005564:	4a03      	ldr	r2, [pc, #12]	; (8005574 <SysTick_Handler+0x1c>)
 8005566:	7013      	strb	r3, [r2, #0]
  RTC_timer_flag = 1;
 8005568:	4a03      	ldr	r2, [pc, #12]	; (8005578 <SysTick_Handler+0x20>)
 800556a:	7013      	strb	r3, [r2, #0]
  flash_flag = 1;
 800556c:	4a03      	ldr	r2, [pc, #12]	; (800557c <SysTick_Handler+0x24>)
 800556e:	7013      	strb	r3, [r2, #0]
 8005570:	bd08      	pop	{r3, pc}
 8005572:	bf00      	nop
 8005574:	200002b5 	.word	0x200002b5
 8005578:	2000022c 	.word	0x2000022c
 800557c:	2000026c 	.word	0x2000026c

08005580 <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 8005580:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005582:	4802      	ldr	r0, [pc, #8]	; (800558c <RTC_WKUP_IRQHandler+0xc>)
 8005584:	f7fd fcda 	bl	8002f3c <HAL_RTCEx_WakeUpTimerIRQHandler>
 8005588:	bd08      	pop	{r3, pc}
 800558a:	bf00      	nop
 800558c:	20000470 	.word	0x20000470

08005590 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8005590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005592:	2001      	movs	r0, #1
 8005594:	f7fc fc70 	bl	8001e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  touch_flag = 1;
 8005598:	2201      	movs	r2, #1
 800559a:	4b01      	ldr	r3, [pc, #4]	; (80055a0 <EXTI0_IRQHandler+0x10>)
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	bd08      	pop	{r3, pc}
 80055a0:	200002c8 	.word	0x200002c8

080055a4 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80055a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80055a6:	4802      	ldr	r0, [pc, #8]	; (80055b0 <DMA1_Channel2_IRQHandler+0xc>)
 80055a8:	f7fc f9fb 	bl	80019a2 <HAL_DMA_IRQHandler>
 80055ac:	bd08      	pop	{r3, pc}
 80055ae:	bf00      	nop
 80055b0:	200004e8 	.word	0x200004e8

080055b4 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80055b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80055b6:	2040      	movs	r0, #64	; 0x40
 80055b8:	f7fc fc5e 	bl	8001e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 80055bc:	2201      	movs	r2, #1
 80055be:	4b01      	ldr	r3, [pc, #4]	; (80055c4 <EXTI9_5_IRQHandler+0x10>)
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	bd08      	pop	{r3, pc}
 80055c4:	200002bd 	.word	0x200002bd

080055c8 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80055c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055ca:	4803      	ldr	r0, [pc, #12]	; (80055d8 <TIM2_IRQHandler+0x10>)
 80055cc:	f7fd fd18 	bl	8003000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag = 0;
 80055d0:	2200      	movs	r2, #0
 80055d2:	4b02      	ldr	r3, [pc, #8]	; (80055dc <TIM2_IRQHandler+0x14>)
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	bd08      	pop	{r3, pc}
 80055d8:	200004a8 	.word	0x200004a8
 80055dc:	200002bc 	.word	0x200002bc

080055e0 <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 80055e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80055e2:	4802      	ldr	r0, [pc, #8]	; (80055ec <I2C1_EV_IRQHandler+0xc>)
 80055e4:	f7fc fcb4 	bl	8001f50 <HAL_I2C_EV_IRQHandler>
 80055e8:	bd08      	pop	{r3, pc}
 80055ea:	bf00      	nop
 80055ec:	2000036c 	.word	0x2000036c

080055f0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 80055f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80055f2:	4802      	ldr	r0, [pc, #8]	; (80055fc <USART1_IRQHandler+0xc>)
 80055f4:	f7fe f9f2 	bl	80039dc <HAL_UART_IRQHandler>
 80055f8:	bd08      	pop	{r3, pc}
 80055fa:	bf00      	nop
 80055fc:	20000400 	.word	0x20000400

08005600 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005600:	4915      	ldr	r1, [pc, #84]	; (8005658 <SystemInit+0x58>)
 8005602:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005606:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <SystemInit+0x5c>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005618:	6858      	ldr	r0, [r3, #4]
 800561a:	4a11      	ldr	r2, [pc, #68]	; (8005660 <SystemInit+0x60>)
 800561c:	4002      	ands	r2, r0
 800561e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005626:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800562a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005632:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800563a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	f022 020f 	bic.w	r2, r2, #15
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005644:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005646:	4a07      	ldr	r2, [pc, #28]	; (8005664 <SystemInit+0x64>)
 8005648:	4002      	ands	r2, r0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800564c:	2200      	movs	r2, #0
 800564e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005650:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005654:	608b      	str	r3, [r1, #8]
 8005656:	4770      	bx	lr
 8005658:	e000ed00 	.word	0xe000ed00
 800565c:	40021000 	.word	0x40021000
 8005660:	f87fc00c 	.word	0xf87fc00c
 8005664:	ff00fccc 	.word	0xff00fccc

08005668 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
	uart_command[uart_counter] = rx_buffer;
 800566c:	4c8e      	ldr	r4, [pc, #568]	; (80058a8 <uart_comms+0x240>)
 800566e:	4d8f      	ldr	r5, [pc, #572]	; (80058ac <uart_comms+0x244>)
 8005670:	498f      	ldr	r1, [pc, #572]	; (80058b0 <uart_comms+0x248>)
 8005672:	7823      	ldrb	r3, [r4, #0]
 8005674:	682a      	ldr	r2, [r5, #0]
	rx_flag = 0;
 8005676:	4e8f      	ldr	r6, [pc, #572]	; (80058b4 <uart_comms+0x24c>)
	uart_command[uart_counter] = rx_buffer;
 8005678:	7808      	ldrb	r0, [r1, #0]
	rx_flag = 0;
 800567a:	2100      	movs	r1, #0
 800567c:	7031      	strb	r1, [r6, #0]
	uart_command[uart_counter] = rx_buffer;
 800567e:	54d0      	strb	r0, [r2, r3]
	if(uart_command[0] == '$'){
 8005680:	682a      	ldr	r2, [r5, #0]
 8005682:	7813      	ldrb	r3, [r2, #0]
 8005684:	2b24      	cmp	r3, #36	; 0x24
void uart_comms(){
 8005686:	b083      	sub	sp, #12

		uart_counter += 1;
 8005688:	7823      	ldrb	r3, [r4, #0]
	if(uart_command[0] == '$'){
 800568a:	d006      	beq.n	800569a <uart_comms+0x32>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 800568c:	2b3b      	cmp	r3, #59	; 0x3b
		uart_counter = 0;
 800568e:	bf84      	itt	hi
 8005690:	2300      	movhi	r3, #0
 8005692:	7023      	strbhi	r3, [r4, #0]
	}
}
 8005694:	b003      	add	sp, #12
 8005696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uart_counter += 1;
 800569a:	3301      	adds	r3, #1
 800569c:	b2db      	uxtb	r3, r3
 800569e:	7023      	strb	r3, [r4, #0]
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80056a0:	7810      	ldrb	r0, [r2, #0]
 80056a2:	2824      	cmp	r0, #36	; 0x24
 80056a4:	d1f2      	bne.n	800568c <uart_comms+0x24>
 80056a6:	441a      	add	r2, r3
 80056a8:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80056ac:	280a      	cmp	r0, #10
 80056ae:	d1ed      	bne.n	800568c <uart_comms+0x24>
 80056b0:	f812 2c02 	ldrb.w	r2, [r2, #-2]
 80056b4:	2a0d      	cmp	r2, #13
 80056b6:	d1e9      	bne.n	800568c <uart_comms+0x24>
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d9eb      	bls.n	8005694 <uart_comms+0x2c>
		memset(return_value,0x00, 50);
 80056bc:	4e7e      	ldr	r6, [pc, #504]	; (80058b8 <uart_comms+0x250>)
		uart_command_copy = uart_command;
 80056be:	4f7f      	ldr	r7, [pc, #508]	; (80058bc <uart_comms+0x254>)
		memset(return_value,0x00, 50);
 80056c0:	6830      	ldr	r0, [r6, #0]
 80056c2:	2232      	movs	r2, #50	; 0x32
 80056c4:	f000 fcaf 	bl	8006026 <memset>
		uart_command_copy = uart_command;
 80056c8:	682a      	ldr	r2, [r5, #0]
 80056ca:	603a      	str	r2, [r7, #0]
		switch(uart_command[1]){
 80056cc:	7853      	ldrb	r3, [r2, #1]
 80056ce:	3b41      	subs	r3, #65	; 0x41
 80056d0:	2b0b      	cmp	r3, #11
 80056d2:	d825      	bhi.n	8005720 <uart_comms+0xb8>
 80056d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056d8:	0327030a 	.word	0x0327030a
 80056dc:	02c802ef 	.word	0x02c802ef
 80056e0:	026802ac 	.word	0x026802ac
 80056e4:	01ed0250 	.word	0x01ed0250
 80056e8:	01120181 	.word	0x01120181
 80056ec:	000c002c 	.word	0x000c002c
			log_receiced_num = uart_command[3] - 48;
 80056f0:	78d3      	ldrb	r3, [r2, #3]
			if(log_receiced_num > log_counter && log_full == 0){
 80056f2:	4a73      	ldr	r2, [pc, #460]	; (80058c0 <uart_comms+0x258>)
			log_receiced_num = uart_command[3] - 48;
 80056f4:	4973      	ldr	r1, [pc, #460]	; (80058c4 <uart_comms+0x25c>)
			if(log_receiced_num > log_counter && log_full == 0){
 80056f6:	7812      	ldrb	r2, [r2, #0]
			log_receiced_num = uart_command[3] - 48;
 80056f8:	3b30      	subs	r3, #48	; 0x30
 80056fa:	b2db      	uxtb	r3, r3
			if(log_receiced_num > log_counter && log_full == 0){
 80056fc:	429a      	cmp	r2, r3
			log_receiced_num = uart_command[3] - 48;
 80056fe:	700b      	strb	r3, [r1, #0]
			if(log_receiced_num > log_counter && log_full == 0){
 8005700:	d202      	bcs.n	8005708 <uart_comms+0xa0>
 8005702:	4a71      	ldr	r2, [pc, #452]	; (80058c8 <uart_comms+0x260>)
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	b15a      	cbz	r2, 8005720 <uart_comms+0xb8>
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)(flash_mem_start+64*log_receiced_num), strlen((char*)(flash_mem_start+64*log_receiced_num)));
 8005708:	4a70      	ldr	r2, [pc, #448]	; (80058cc <uart_comms+0x264>)
 800570a:	6816      	ldr	r6, [r2, #0]
 800570c:	eb06 1683 	add.w	r6, r6, r3, lsl #6
 8005710:	4630      	mov	r0, r6
 8005712:	f7fa fd5d 	bl	80001d0 <strlen>
 8005716:	4631      	mov	r1, r6
 8005718:	b282      	uxth	r2, r0
 800571a:	486d      	ldr	r0, [pc, #436]	; (80058d0 <uart_comms+0x268>)
 800571c:	f7fd fe73 	bl	8003406 <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 8005720:	6828      	ldr	r0, [r5, #0]
 8005722:	223c      	movs	r2, #60	; 0x3c
 8005724:	2100      	movs	r1, #0
 8005726:	f000 fc7e 	bl	8006026 <memset>
		uart_counter = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	7023      	strb	r3, [r4, #0]
 800572e:	e7b1      	b.n	8005694 <uart_comms+0x2c>
			memcpy(return_value, uart_command, 2);
 8005730:	6833      	ldr	r3, [r6, #0]
 8005732:	8812      	ldrh	r2, [r2, #0]
			memcpy(return_value+2,comma,1 );
 8005734:	4f67      	ldr	r7, [pc, #412]	; (80058d4 <uart_comms+0x26c>)
			memcpy(return_value, uart_command, 2);
 8005736:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 8005738:	6832      	ldr	r2, [r6, #0]
 800573a:	f897 9000 	ldrb.w	r9, [r7]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 800573e:	4b66      	ldr	r3, [pc, #408]	; (80058d8 <uart_comms+0x270>)
			memcpy(return_value+2,comma,1 );
 8005740:	f882 9002 	strb.w	r9, [r2, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8005744:	f8d3 8000 	ldr.w	r8, [r3]
 8005748:	4640      	mov	r0, r8
 800574a:	f7fa fd41 	bl	80001d0 <strlen>
 800574e:	6833      	ldr	r3, [r6, #0]
 8005750:	4602      	mov	r2, r0
 8005752:	4641      	mov	r1, r8
 8005754:	1cd8      	adds	r0, r3, #3
 8005756:	f000 fc5b 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800575a:	f8d6 8000 	ldr.w	r8, [r6]
 800575e:	4640      	mov	r0, r8
 8005760:	f7fa fd36 	bl	80001d0 <strlen>
 8005764:	f808 9000 	strb.w	r9, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8005768:	f8d6 8000 	ldr.w	r8, [r6]
 800576c:	4640      	mov	r0, r8
 800576e:	f7fa fd2f 	bl	80001d0 <strlen>
 8005772:	4b5a      	ldr	r3, [pc, #360]	; (80058dc <uart_comms+0x274>)
 8005774:	f8d3 9000 	ldr.w	r9, [r3]
 8005778:	4682      	mov	sl, r0
 800577a:	4648      	mov	r0, r9
 800577c:	f7fa fd28 	bl	80001d0 <strlen>
 8005780:	4649      	mov	r1, r9
 8005782:	4602      	mov	r2, r0
 8005784:	eb08 000a 	add.w	r0, r8, sl
 8005788:	f000 fc42 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800578c:	f8d6 8000 	ldr.w	r8, [r6]
 8005790:	4640      	mov	r0, r8
 8005792:	f7fa fd1d 	bl	80001d0 <strlen>
 8005796:	783b      	ldrb	r3, [r7, #0]
 8005798:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 800579c:	f8d6 8000 	ldr.w	r8, [r6]
 80057a0:	4640      	mov	r0, r8
 80057a2:	f7fa fd15 	bl	80001d0 <strlen>
 80057a6:	4b4e      	ldr	r3, [pc, #312]	; (80058e0 <uart_comms+0x278>)
 80057a8:	f8d3 9000 	ldr.w	r9, [r3]
 80057ac:	4682      	mov	sl, r0
 80057ae:	4648      	mov	r0, r9
 80057b0:	f7fa fd0e 	bl	80001d0 <strlen>
 80057b4:	4649      	mov	r1, r9
 80057b6:	4602      	mov	r2, r0
 80057b8:	eb08 000a 	add.w	r0, r8, sl
 80057bc:	f000 fc28 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80057c0:	f8d6 8000 	ldr.w	r8, [r6]
 80057c4:	4640      	mov	r0, r8
 80057c6:	f7fa fd03 	bl	80001d0 <strlen>
 80057ca:	783b      	ldrb	r3, [r7, #0]
 80057cc:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 80057d0:	f8d6 8000 	ldr.w	r8, [r6]
 80057d4:	4640      	mov	r0, r8
 80057d6:	f7fa fcfb 	bl	80001d0 <strlen>
 80057da:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <uart_comms+0x27c>)
 80057dc:	f8d3 9000 	ldr.w	r9, [r3]
 80057e0:	4682      	mov	sl, r0
 80057e2:	4648      	mov	r0, r9
 80057e4:	f7fa fcf4 	bl	80001d0 <strlen>
 80057e8:	4649      	mov	r1, r9
 80057ea:	4602      	mov	r2, r0
 80057ec:	eb08 000a 	add.w	r0, r8, sl
 80057f0:	f000 fc0e 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80057f4:	f8d6 8000 	ldr.w	r8, [r6]
 80057f8:	4640      	mov	r0, r8
 80057fa:	f7fa fce9 	bl	80001d0 <strlen>
 80057fe:	783b      	ldrb	r3, [r7, #0]
 8005800:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8005804:	f8d6 8000 	ldr.w	r8, [r6]
 8005808:	4640      	mov	r0, r8
 800580a:	f7fa fce1 	bl	80001d0 <strlen>
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <uart_comms+0x280>)
 8005810:	f8d3 9000 	ldr.w	r9, [r3]
 8005814:	4682      	mov	sl, r0
 8005816:	4648      	mov	r0, r9
 8005818:	f7fa fcda 	bl	80001d0 <strlen>
 800581c:	4649      	mov	r1, r9
 800581e:	4602      	mov	r2, r0
 8005820:	eb08 000a 	add.w	r0, r8, sl
 8005824:	f000 fbf4 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005828:	f8d6 8000 	ldr.w	r8, [r6]
 800582c:	4640      	mov	r0, r8
 800582e:	f7fa fccf 	bl	80001d0 <strlen>
 8005832:	783b      	ldrb	r3, [r7, #0]
 8005834:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8005838:	f8d6 8000 	ldr.w	r8, [r6]
 800583c:	4640      	mov	r0, r8
 800583e:	f7fa fcc7 	bl	80001d0 <strlen>
 8005842:	4b2a      	ldr	r3, [pc, #168]	; (80058ec <uart_comms+0x284>)
 8005844:	f8d3 9000 	ldr.w	r9, [r3]
 8005848:	4682      	mov	sl, r0
 800584a:	4648      	mov	r0, r9
 800584c:	f7fa fcc0 	bl	80001d0 <strlen>
 8005850:	4649      	mov	r1, r9
 8005852:	4602      	mov	r2, r0
 8005854:	eb08 000a 	add.w	r0, r8, sl
 8005858:	f000 fbda 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800585c:	f8d6 8000 	ldr.w	r8, [r6]
 8005860:	4640      	mov	r0, r8
 8005862:	f7fa fcb5 	bl	80001d0 <strlen>
 8005866:	783b      	ldrb	r3, [r7, #0]
 8005868:	f808 3000 	strb.w	r3, [r8, r0]
			if(valve_state == valve_OPEN){
 800586c:	4a20      	ldr	r2, [pc, #128]	; (80058f0 <uart_comms+0x288>)
 800586e:	4b21      	ldr	r3, [pc, #132]	; (80058f4 <uart_comms+0x28c>)
 8005870:	6817      	ldr	r7, [r2, #0]
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8005872:	f8d6 8000 	ldr.w	r8, [r6]
			if(valve_state == valve_OPEN){
 8005876:	429f      	cmp	r7, r3
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8005878:	4640      	mov	r0, r8
			if(valve_state == valve_OPEN){
 800587a:	f000 8283 	beq.w	8005d84 <uart_comms+0x71c>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 800587e:	f7fa fca7 	bl	80001d0 <strlen>
 8005882:	4681      	mov	r9, r0
 8005884:	4638      	mov	r0, r7
 8005886:	f7fa fca3 	bl	80001d0 <strlen>
 800588a:	4639      	mov	r1, r7
 800588c:	4602      	mov	r2, r0
 800588e:	eb08 0009 	add.w	r0, r8, r9
 8005892:	f000 fbbd 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8005896:	6837      	ldr	r7, [r6, #0]
 8005898:	4638      	mov	r0, r7
 800589a:	f7fa fc99 	bl	80001d0 <strlen>
 800589e:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <uart_comms+0x290>)
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	523b      	strh	r3, [r7, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80058a4:	6836      	ldr	r6, [r6, #0]
 80058a6:	e733      	b.n	8005710 <uart_comms+0xa8>
 80058a8:	200002d4 	.word	0x200002d4
 80058ac:	200002cc 	.word	0x200002cc
 80058b0:	200005ac 	.word	0x200005ac
 80058b4:	200002a9 	.word	0x200002a9
 80058b8:	200002a4 	.word	0x200002a4
 80058bc:	200002d0 	.word	0x200002d0
 80058c0:	20000290 	.word	0x20000290
 80058c4:	20000292 	.word	0x20000292
 80058c8:	20000291 	.word	0x20000291
 80058cc:	20000010 	.word	0x20000010
 80058d0:	20000400 	.word	0x20000400
 80058d4:	20000004 	.word	0x20000004
 80058d8:	20000258 	.word	0x20000258
 80058dc:	200002e0 	.word	0x200002e0
 80058e0:	2000024c 	.word	0x2000024c
 80058e4:	20000274 	.word	0x20000274
 80058e8:	200002c4 	.word	0x200002c4
 80058ec:	20000288 	.word	0x20000288
 80058f0:	200002d8 	.word	0x200002d8
 80058f4:	2000002c 	.word	0x2000002c
 80058f8:	20000008 	.word	0x20000008
			if(auto_heating == 1){
 80058fc:	4bbb      	ldr	r3, [pc, #748]	; (8005bec <uart_comms+0x584>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	f47f af0d 	bne.w	8005720 <uart_comms+0xb8>
				memcpy(return_value, uart_command, 2);
 8005906:	6833      	ldr	r3, [r6, #0]
 8005908:	8812      	ldrh	r2, [r2, #0]
 800590a:	801a      	strh	r2, [r3, #0]
				memcpy(return_value+2, endSimbol,2 );
 800590c:	4ab8      	ldr	r2, [pc, #736]	; (8005bf0 <uart_comms+0x588>)
 800590e:	6833      	ldr	r3, [r6, #0]
 8005910:	8812      	ldrh	r2, [r2, #0]
 8005912:	805a      	strh	r2, [r3, #2]
				HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8005914:	6836      	ldr	r6, [r6, #0]
 8005916:	4630      	mov	r0, r6
 8005918:	f7fa fc5a 	bl	80001d0 <strlen>
 800591c:	4631      	mov	r1, r6
 800591e:	b282      	uxth	r2, r0
 8005920:	48b4      	ldr	r0, [pc, #720]	; (8005bf4 <uart_comms+0x58c>)
 8005922:	f7fd fd70 	bl	8003406 <HAL_UART_Transmit_IT>
				if(uart_command[3] == '1'){ // first heating schedule
 8005926:	682b      	ldr	r3, [r5, #0]
 8005928:	78db      	ldrb	r3, [r3, #3]
 800592a:	2b31      	cmp	r3, #49	; 0x31
 800592c:	f000 8293 	beq.w	8005e56 <uart_comms+0x7ee>
				else if(uart_command[3] == '2'){ // second heating schedule
 8005930:	2b32      	cmp	r3, #50	; 0x32
 8005932:	f000 8241 	beq.w	8005db8 <uart_comms+0x750>
				else if(uart_command[3] == '3'){ // 3rd heating schedule
 8005936:	2b33      	cmp	r3, #51	; 0x33
 8005938:	f47f aef2 	bne.w	8005720 <uart_comms+0xb8>
					heating_info = strtok((char*)uart_command_copy, ",");
 800593c:	6838      	ldr	r0, [r7, #0]
 800593e:	49ae      	ldr	r1, [pc, #696]	; (8005bf8 <uart_comms+0x590>)
 8005940:	4eae      	ldr	r6, [pc, #696]	; (8005bfc <uart_comms+0x594>)
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8005942:	4faf      	ldr	r7, [pc, #700]	; (8005c00 <uart_comms+0x598>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005944:	f000 fc58 	bl	80061f8 <strtok>
					heating_info = (strtok(NULL, ","));
 8005948:	49ab      	ldr	r1, [pc, #684]	; (8005bf8 <uart_comms+0x590>)
					heating_info = strtok((char*)uart_command_copy, ",");
 800594a:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 800594c:	2000      	movs	r0, #0
 800594e:	f000 fc53 	bl	80061f8 <strtok>
					heating_info = (strtok(NULL, ","));
 8005952:	49a9      	ldr	r1, [pc, #676]	; (8005bf8 <uart_comms+0x590>)
					heating_info = (strtok(NULL, ","));
 8005954:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005956:	2000      	movs	r0, #0
 8005958:	f000 fc4e 	bl	80061f8 <strtok>
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 800595c:	220a      	movs	r2, #10
 800595e:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005960:	6030      	str	r0, [r6, #0]
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8005962:	f000 fd1d 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005966:	49a4      	ldr	r1, [pc, #656]	; (8005bf8 <uart_comms+0x590>)
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8005968:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
					heating_info = (strtok(NULL, ","));
 800596c:	2000      	movs	r0, #0
 800596e:	f000 fc43 	bl	80061f8 <strtok>
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8005972:	220a      	movs	r2, #10
 8005974:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005976:	6030      	str	r0, [r6, #0]
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8005978:	f000 fd12 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 800597c:	499e      	ldr	r1, [pc, #632]	; (8005bf8 <uart_comms+0x590>)
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 800597e:	f887 0051 	strb.w	r0, [r7, #81]	; 0x51
					heating_info = (strtok(NULL, ","));
 8005982:	2000      	movs	r0, #0
 8005984:	f000 fc38 	bl	80061f8 <strtok>
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8005988:	220a      	movs	r2, #10
 800598a:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 800598c:	6030      	str	r0, [r6, #0]
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 800598e:	f000 fd07 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005992:	4999      	ldr	r1, [pc, #612]	; (8005bf8 <uart_comms+0x590>)
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8005994:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
					heating_info = (strtok(NULL, ","));
 8005998:	2000      	movs	r0, #0
 800599a:	f000 fc2d 	bl	80061f8 <strtok>
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 800599e:	220a      	movs	r2, #10
 80059a0:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 80059a2:	6030      	str	r0, [r6, #0]
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 80059a4:	f000 fcfc 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 80059a8:	4993      	ldr	r1, [pc, #588]	; (8005bf8 <uart_comms+0x590>)
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 80059aa:	f887 0064 	strb.w	r0, [r7, #100]	; 0x64
					heating_info = (strtok(NULL, ","));
 80059ae:	2000      	movs	r0, #0
 80059b0:	f000 fc22 	bl	80061f8 <strtok>
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 80059b4:	220a      	movs	r2, #10
 80059b6:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 80059b8:	6030      	str	r0, [r6, #0]
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 80059ba:	f000 fcf1 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, "\r\n"));
 80059be:	4991      	ldr	r1, [pc, #580]	; (8005c04 <uart_comms+0x59c>)
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 80059c0:	f887 0065 	strb.w	r0, [r7, #101]	; 0x65
					heating_info = (strtok(NULL, "\r\n"));
 80059c4:	2000      	movs	r0, #0
 80059c6:	f000 fc17 	bl	80061f8 <strtok>
					heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 80059ca:	220a      	movs	r2, #10
 80059cc:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, "\r\n"));
 80059ce:	6030      	str	r0, [r6, #0]
					heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 80059d0:	f000 fce6 	bl	80063a0 <strtol>
 80059d4:	f887 0066 	strb.w	r0, [r7, #102]	; 0x66
 80059d8:	e6a2      	b.n	8005720 <uart_comms+0xb8>
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80059da:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8005c2c <uart_comms+0x5c4>
 80059de:	488a      	ldr	r0, [pc, #552]	; (8005c08 <uart_comms+0x5a0>)
 80059e0:	f8d8 1000 	ldr.w	r1, [r8]
			memcpy(return_value+2,comma,1);
 80059e4:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8005c1c <uart_comms+0x5b4>
			itoa((time->Hours),temp_time_var,10  );
 80059e8:	4f88      	ldr	r7, [pc, #544]	; (8005c0c <uart_comms+0x5a4>)
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80059ea:	2200      	movs	r2, #0
 80059ec:	f7fd f9e3 	bl	8002db6 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80059f0:	4b87      	ldr	r3, [pc, #540]	; (8005c10 <uart_comms+0x5a8>)
 80059f2:	4885      	ldr	r0, [pc, #532]	; (8005c08 <uart_comms+0x5a0>)
 80059f4:	6819      	ldr	r1, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f7fd fa08 	bl	8002e0c <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 80059fc:	682a      	ldr	r2, [r5, #0]
 80059fe:	6833      	ldr	r3, [r6, #0]
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8005a04:	6833      	ldr	r3, [r6, #0]
 8005a06:	f899 2000 	ldrb.w	r2, [r9]
 8005a0a:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 8005a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	7818      	ldrb	r0, [r3, #0]
 8005a14:	220a      	movs	r2, #10
 8005a16:	f000 faf1 	bl	8005ffc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005a1a:	f8d6 a000 	ldr.w	sl, [r6]
 8005a1e:	4650      	mov	r0, sl
 8005a20:	f7fa fbd6 	bl	80001d0 <strlen>
 8005a24:	f8d7 b000 	ldr.w	fp, [r7]
 8005a28:	9001      	str	r0, [sp, #4]
 8005a2a:	4658      	mov	r0, fp
 8005a2c:	f7fa fbd0 	bl	80001d0 <strlen>
 8005a30:	9b01      	ldr	r3, [sp, #4]
 8005a32:	4602      	mov	r2, r0
 8005a34:	4659      	mov	r1, fp
 8005a36:	eb0a 0003 	add.w	r0, sl, r3
 8005a3a:	f000 fae9 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005a3e:	f8d6 a000 	ldr.w	sl, [r6]
 8005a42:	4650      	mov	r0, sl
 8005a44:	f7fa fbc4 	bl	80001d0 <strlen>
 8005a48:	f899 3000 	ldrb.w	r3, [r9]
 8005a4c:	f80a 3000 	strb.w	r3, [sl, r0]
			itoa((time->Minutes),temp_time_var,10  );
 8005a50:	f8d8 3000 	ldr.w	r3, [r8]
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	7858      	ldrb	r0, [r3, #1]
 8005a58:	220a      	movs	r2, #10
 8005a5a:	f000 facf 	bl	8005ffc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005a5e:	f8d6 a000 	ldr.w	sl, [r6]
 8005a62:	4650      	mov	r0, sl
 8005a64:	f7fa fbb4 	bl	80001d0 <strlen>
 8005a68:	f8d7 b000 	ldr.w	fp, [r7]
 8005a6c:	9001      	str	r0, [sp, #4]
 8005a6e:	4658      	mov	r0, fp
 8005a70:	f7fa fbae 	bl	80001d0 <strlen>
 8005a74:	9b01      	ldr	r3, [sp, #4]
 8005a76:	4602      	mov	r2, r0
 8005a78:	4659      	mov	r1, fp
 8005a7a:	eb0a 0003 	add.w	r0, sl, r3
 8005a7e:	f000 fac7 	bl	8006010 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005a82:	f8d6 a000 	ldr.w	sl, [r6]
 8005a86:	4650      	mov	r0, sl
 8005a88:	f7fa fba2 	bl	80001d0 <strlen>
 8005a8c:	f899 3000 	ldrb.w	r3, [r9]
 8005a90:	f80a 3000 	strb.w	r3, [sl, r0]
			itoa((time->Seconds),temp_time_var,10  );
 8005a94:	f8d8 3000 	ldr.w	r3, [r8]
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	7898      	ldrb	r0, [r3, #2]
 8005a9c:	220a      	movs	r2, #10
 8005a9e:	f000 faad 	bl	8005ffc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005aa2:	f8d6 8000 	ldr.w	r8, [r6]
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f7fa fb92 	bl	80001d0 <strlen>
 8005aac:	683f      	ldr	r7, [r7, #0]
 8005aae:	4681      	mov	r9, r0
 8005ab0:	e6e8      	b.n	8005884 <uart_comms+0x21c>
			memcpy(return_value, uart_command, 2);
 8005ab2:	6833      	ldr	r3, [r6, #0]
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,endSimbol, 2);
 8005ab8:	4a4d      	ldr	r2, [pc, #308]	; (8005bf0 <uart_comms+0x588>)
 8005aba:	6833      	ldr	r3, [r6, #0]
 8005abc:	8812      	ldrh	r2, [r2, #0]
 8005abe:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8005ac0:	f8d6 b000 	ldr.w	fp, [r6]
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8005ac4:	4e50      	ldr	r6, [pc, #320]	; (8005c08 <uart_comms+0x5a0>)
			time->Hours = strtol(heating_info, NULL,10);
 8005ac6:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8005c2c <uart_comms+0x5c4>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8005aca:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005bfc <uart_comms+0x594>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8005ace:	f8df a140 	ldr.w	sl, [pc, #320]	; 8005c10 <uart_comms+0x5a8>
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8005ad2:	4658      	mov	r0, fp
 8005ad4:	f7fa fb7c 	bl	80001d0 <strlen>
 8005ad8:	4659      	mov	r1, fp
 8005ada:	b282      	uxth	r2, r0
 8005adc:	4845      	ldr	r0, [pc, #276]	; (8005bf4 <uart_comms+0x58c>)
 8005ade:	f7fd fc92 	bl	8003406 <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8005ae2:	6833      	ldr	r3, [r6, #0]
 8005ae4:	2253      	movs	r2, #83	; 0x53
 8005ae6:	21ca      	movs	r1, #202	; 0xca
 8005ae8:	6259      	str	r1, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8005aea:	4630      	mov	r0, r6
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8005aee:	f7fc ffe2 	bl	8002ab6 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8005af2:	6838      	ldr	r0, [r7, #0]
 8005af4:	4947      	ldr	r1, [pc, #284]	; (8005c14 <uart_comms+0x5ac>)
 8005af6:	f000 fb7f 	bl	80061f8 <strtok>
			time->Hours = strtol(heating_info, NULL,10);
 8005afa:	220a      	movs	r2, #10
 8005afc:	2100      	movs	r1, #0
 8005afe:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8005b02:	f8c9 0000 	str.w	r0, [r9]
			time->Hours = strtol(heating_info, NULL,10);
 8005b06:	f000 fc4b 	bl	80063a0 <strtol>
			heating_info = (strtok(NULL, ","));
 8005b0a:	493b      	ldr	r1, [pc, #236]	; (8005bf8 <uart_comms+0x590>)
			time->Hours = strtol(heating_info, NULL,10);
 8005b0c:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f000 fb72 	bl	80061f8 <strtok>
			time->Minutes = strtol(heating_info, NULL,10);
 8005b14:	220a      	movs	r2, #10
 8005b16:	2100      	movs	r1, #0
 8005b18:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = (strtok(NULL, ","));
 8005b1c:	f8c9 0000 	str.w	r0, [r9]
			time->Minutes = strtol(heating_info, NULL,10);
 8005b20:	f000 fc3e 	bl	80063a0 <strtol>
			heating_info = (strtok(NULL, ",\r\n"));
 8005b24:	493c      	ldr	r1, [pc, #240]	; (8005c18 <uart_comms+0x5b0>)
			time->Minutes = strtol(heating_info, NULL,10);
 8005b26:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 8005b28:	2000      	movs	r0, #0
 8005b2a:	f000 fb65 	bl	80061f8 <strtok>
			time->Seconds = strtol(heating_info, NULL,10);
 8005b2e:	220a      	movs	r2, #10
 8005b30:	2100      	movs	r1, #0
 8005b32:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = (strtok(NULL, ",\r\n"));
 8005b36:	f8c9 0000 	str.w	r0, [r9]
			time->Seconds = strtol(heating_info, NULL,10);
 8005b3a:	f000 fc31 	bl	80063a0 <strtol>
 8005b3e:	70b8      	strb	r0, [r7, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8005b40:	f8d8 1000 	ldr.w	r1, [r8]
 8005b44:	4630      	mov	r0, r6
 8005b46:	2200      	movs	r2, #0
 8005b48:	f7fd f840 	bl	8002bcc <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8005b4c:	f8da 1000 	ldr.w	r1, [sl]
 8005b50:	4630      	mov	r0, r6
 8005b52:	2200      	movs	r2, #0
 8005b54:	f7fd f8b9 	bl	8002cca <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8005b58:	6833      	ldr	r3, [r6, #0]
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005b5a:	f8d8 1000 	ldr.w	r1, [r8]
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8005b5e:	22ff      	movs	r2, #255	; 0xff
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005b62:	4630      	mov	r0, r6
 8005b64:	2200      	movs	r2, #0
 8005b66:	f7fd f926 	bl	8002db6 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005b6a:	f8da 1000 	ldr.w	r1, [sl]
 8005b6e:	4630      	mov	r0, r6
 8005b70:	2200      	movs	r2, #0
 8005b72:	f7fd f94b 	bl	8002e0c <HAL_RTC_GetDate>
			break;
 8005b76:	e5d3      	b.n	8005720 <uart_comms+0xb8>
			memcpy(return_value, uart_command, 2);
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	8812      	ldrh	r2, [r2, #0]
 8005b7c:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8005b7e:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <uart_comms+0x5b4>)
 8005b80:	6833      	ldr	r3, [r6, #0]
 8005b82:	7811      	ldrb	r1, [r2, #0]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <uart_comms+0x5b8>)
			memcpy(return_value+2, comma, 1);
 8005b86:	7099      	strb	r1, [r3, #2]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8005b88:	6830      	ldr	r0, [r6, #0]
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <uart_comms+0x5bc>)
 8005b8c:	7817      	ldrb	r7, [r2, #0]
 8005b8e:	6819      	ldr	r1, [r3, #0]
 8005b90:	463a      	mov	r2, r7
 8005b92:	3003      	adds	r0, #3
 8005b94:	f000 fa3c 	bl	8006010 <memcpy>
			memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 8005b98:	6833      	ldr	r3, [r6, #0]
 8005b9a:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <uart_comms+0x588>)
 8005b9c:	443b      	add	r3, r7
 8005b9e:	8812      	ldrh	r2, [r2, #0]
 8005ba0:	f8a3 2003 	strh.w	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005ba4:	6836      	ldr	r6, [r6, #0]
 8005ba6:	e5b3      	b.n	8005710 <uart_comms+0xa8>
			memcpy(return_value, uart_command,2);
 8005ba8:	6833      	ldr	r3, [r6, #0]
 8005baa:	8812      	ldrh	r2, [r2, #0]
 8005bac:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,endSimbol, 2);
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <uart_comms+0x588>)
 8005bb0:	6833      	ldr	r3, [r6, #0]
 8005bb2:	8812      	ldrh	r2, [r2, #0]
 8005bb4:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005bb6:	6837      	ldr	r7, [r6, #0]
			memset(set_temp, 0x00, 4);
 8005bb8:	4e1a      	ldr	r6, [pc, #104]	; (8005c24 <uart_comms+0x5bc>)
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f7fa fb08 	bl	80001d0 <strlen>
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	b282      	uxth	r2, r0
 8005bc4:	480b      	ldr	r0, [pc, #44]	; (8005bf4 <uart_comms+0x58c>)
 8005bc6:	f7fd fc1e 	bl	8003406 <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 8005bca:	7823      	ldrb	r3, [r4, #0]
			memset(set_temp, 0x00, 4);
 8005bcc:	6831      	ldr	r1, [r6, #0]
			sizeOfTemp = uart_counter - 5;
 8005bce:	4a14      	ldr	r2, [pc, #80]	; (8005c20 <uart_comms+0x5b8>)
 8005bd0:	3b05      	subs	r3, #5
			memset(set_temp, 0x00, 4);
 8005bd2:	2000      	movs	r0, #0
			sizeOfTemp = uart_counter - 5;
 8005bd4:	7013      	strb	r3, [r2, #0]
			memset(set_temp, 0x00, 4);
 8005bd6:	6008      	str	r0, [r1, #0]
			memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 8005bd8:	6829      	ldr	r1, [r5, #0]
 8005bda:	7812      	ldrb	r2, [r2, #0]
 8005bdc:	6830      	ldr	r0, [r6, #0]
 8005bde:	3103      	adds	r1, #3
 8005be0:	f000 fa16 	bl	8006010 <memcpy>
			segment_val =set_temp;
 8005be4:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <uart_comms+0x5c0>)
 8005be6:	6832      	ldr	r2, [r6, #0]
 8005be8:	601a      	str	r2, [r3, #0]
			break;
 8005bea:	e599      	b.n	8005720 <uart_comms+0xb8>
 8005bec:	20000250 	.word	0x20000250
 8005bf0:	20000008 	.word	0x20000008
 8005bf4:	20000400 	.word	0x20000400
 8005bf8:	08006db4 	.word	0x08006db4
 8005bfc:	2000028c 	.word	0x2000028c
 8005c00:	20000530 	.word	0x20000530
 8005c04:	08006dbc 	.word	0x08006dbc
 8005c08:	20000470 	.word	0x20000470
 8005c0c:	200002b8 	.word	0x200002b8
 8005c10:	2000025c 	.word	0x2000025c
 8005c14:	08006db0 	.word	0x08006db0
 8005c18:	08006db8 	.word	0x08006db8
 8005c1c:	20000004 	.word	0x20000004
 8005c20:	200002b4 	.word	0x200002b4
 8005c24:	200002b0 	.word	0x200002b0
 8005c28:	200002ac 	.word	0x200002ac
 8005c2c:	200002c0 	.word	0x200002c0
			memcpy(return_value, uart_command, 2);
 8005c30:	6833      	ldr	r3, [r6, #0]
 8005c32:	8812      	ldrh	r2, [r2, #0]
 8005c34:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005c36:	4aac      	ldr	r2, [pc, #688]	; (8005ee8 <uart_comms+0x880>)
 8005c38:	6833      	ldr	r3, [r6, #0]
 8005c3a:	8812      	ldrh	r2, [r2, #0]
 8005c3c:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8005c3e:	6836      	ldr	r6, [r6, #0]
 8005c40:	4630      	mov	r0, r6
 8005c42:	f7fa fac5 	bl	80001d0 <strlen>
 8005c46:	4631      	mov	r1, r6
 8005c48:	b282      	uxth	r2, r0
 8005c4a:	48a8      	ldr	r0, [pc, #672]	; (8005eec <uart_comms+0x884>)
 8005c4c:	f7fd fbdb 	bl	8003406 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){ // logging disable
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	78db      	ldrb	r3, [r3, #3]
 8005c54:	2b30      	cmp	r3, #48	; 0x30
 8005c56:	f000 80a2 	beq.w	8005d9e <uart_comms+0x736>
			else if(uart_command[3] == '1'){ // logging enable
 8005c5a:	2b31      	cmp	r3, #49	; 0x31
 8005c5c:	f47f ad60 	bne.w	8005720 <uart_comms+0xb8>
				enableFlashLogging = 1;
 8005c60:	4ba3      	ldr	r3, [pc, #652]	; (8005ef0 <uart_comms+0x888>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	e55b      	b.n	8005720 <uart_comms+0xb8>
			memcpy(return_value, uart_command, 2);
 8005c68:	6833      	ldr	r3, [r6, #0]
 8005c6a:	8812      	ldrh	r2, [r2, #0]
 8005c6c:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005c6e:	4a9e      	ldr	r2, [pc, #632]	; (8005ee8 <uart_comms+0x880>)
 8005c70:	6833      	ldr	r3, [r6, #0]
 8005c72:	8812      	ldrh	r2, [r2, #0]
 8005c74:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005c76:	6836      	ldr	r6, [r6, #0]
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7fa faa9 	bl	80001d0 <strlen>
 8005c7e:	4631      	mov	r1, r6
 8005c80:	b282      	uxth	r2, r0
 8005c82:	489a      	ldr	r0, [pc, #616]	; (8005eec <uart_comms+0x884>)
 8005c84:	f7fd fbbf 	bl	8003406 <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 8005c88:	4b9a      	ldr	r3, [pc, #616]	; (8005ef4 <uart_comms+0x88c>)
 8005c8a:	781a      	ldrb	r2, [r3, #0]
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	f47f ad47 	bne.w	8005720 <uart_comms+0xb8>
				if(uart_command[3]=='0'){
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	78db      	ldrb	r3, [r3, #3]
 8005c96:	2b30      	cmp	r3, #48	; 0x30
 8005c98:	f000 8085 	beq.w	8005da6 <uart_comms+0x73e>
				else if(uart_command[3] == '1'){
 8005c9c:	2b31      	cmp	r3, #49	; 0x31
 8005c9e:	f47f ad3f 	bne.w	8005720 <uart_comms+0xb8>
					heater_state = heater_ON;
 8005ca2:	4b95      	ldr	r3, [pc, #596]	; (8005ef8 <uart_comms+0x890>)
 8005ca4:	4a95      	ldr	r2, [pc, #596]	; (8005efc <uart_comms+0x894>)
 8005ca6:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 8005ca8:	4895      	ldr	r0, [pc, #596]	; (8005f00 <uart_comms+0x898>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cb0:	f7fc f8dc 	bl	8001e6c <HAL_GPIO_WritePin>
 8005cb4:	e534      	b.n	8005720 <uart_comms+0xb8>
			memcpy(return_value, uart_command, 2);
 8005cb6:	6833      	ldr	r3, [r6, #0]
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005cbc:	4a8a      	ldr	r2, [pc, #552]	; (8005ee8 <uart_comms+0x880>)
 8005cbe:	6833      	ldr	r3, [r6, #0]
 8005cc0:	8812      	ldrh	r2, [r2, #0]
 8005cc2:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8005cc4:	6836      	ldr	r6, [r6, #0]
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7fa fa82 	bl	80001d0 <strlen>
 8005ccc:	4631      	mov	r1, r6
 8005cce:	b282      	uxth	r2, r0
 8005cd0:	4886      	ldr	r0, [pc, #536]	; (8005eec <uart_comms+0x884>)
 8005cd2:	f7fd fb98 	bl	8003406 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	78db      	ldrb	r3, [r3, #3]
 8005cda:	2b30      	cmp	r3, #48	; 0x30
 8005cdc:	d044      	beq.n	8005d68 <uart_comms+0x700>
			else if(uart_command[3] == '1'){
 8005cde:	2b31      	cmp	r3, #49	; 0x31
 8005ce0:	f47f ad1e 	bne.w	8005720 <uart_comms+0xb8>
				auto_heating = 1;
 8005ce4:	4b83      	ldr	r3, [pc, #524]	; (8005ef4 <uart_comms+0x88c>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e519      	b.n	8005720 <uart_comms+0xb8>
			memcpy(studentnumber, uart_command, 2 );
 8005cec:	4b85      	ldr	r3, [pc, #532]	; (8005f04 <uart_comms+0x89c>)
 8005cee:	8810      	ldrh	r0, [r2, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
			memcpy(studentnumber+2,comma,1);
 8005cf2:	4985      	ldr	r1, [pc, #532]	; (8005f08 <uart_comms+0x8a0>)
			memcpy(studentnumber, uart_command, 2 );
 8005cf4:	8010      	strh	r0, [r2, #0]
			memcpy(studentnumber+2,comma,1);
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	7809      	ldrb	r1, [r1, #0]
 8005cfa:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8005cfc:	4a83      	ldr	r2, [pc, #524]	; (8005f0c <uart_comms+0x8a4>)
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	6811      	ldr	r1, [r2, #0]
 8005d02:	6856      	ldr	r6, [r2, #4]
 8005d04:	f8c0 1003 	str.w	r1, [r0, #3]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8005d08:	4a77      	ldr	r2, [pc, #476]	; (8005ee8 <uart_comms+0x880>)
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8005d0a:	f8c0 6007 	str.w	r6, [r0, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	6813      	ldr	r3, [r2, #0]
 8005d12:	6852      	ldr	r2, [r2, #4]
 8005d14:	f8c1 200f 	str.w	r2, [r1, #15]
 8005d18:	f8c1 300b 	str.w	r3, [r1, #11]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 8005d1c:	220d      	movs	r2, #13
 8005d1e:	4873      	ldr	r0, [pc, #460]	; (8005eec <uart_comms+0x884>)
 8005d20:	f7fd fb71 	bl	8003406 <HAL_UART_Transmit_IT>
			break;
 8005d24:	e4fc      	b.n	8005720 <uart_comms+0xb8>
			memcpy(return_value, uart_command, 2);
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005d2c:	4a6e      	ldr	r2, [pc, #440]	; (8005ee8 <uart_comms+0x880>)
 8005d2e:	6833      	ldr	r3, [r6, #0]
 8005d30:	8812      	ldrh	r2, [r2, #0]
 8005d32:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005d34:	6836      	ldr	r6, [r6, #0]
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7fa fa4a 	bl	80001d0 <strlen>
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	b282      	uxth	r2, r0
 8005d40:	486a      	ldr	r0, [pc, #424]	; (8005eec <uart_comms+0x884>)
 8005d42:	f7fd fb60 	bl	8003406 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	2b31      	cmp	r3, #49	; 0x31
 8005d4c:	d010      	beq.n	8005d70 <uart_comms+0x708>
			else if(uart_command[3] == '0'){
 8005d4e:	2b30      	cmp	r3, #48	; 0x30
 8005d50:	f47f ace6 	bne.w	8005720 <uart_comms+0xb8>
				valve_state=valve_CLOSE;
 8005d54:	4b6e      	ldr	r3, [pc, #440]	; (8005f10 <uart_comms+0x8a8>)
 8005d56:	4a6f      	ldr	r2, [pc, #444]	; (8005f14 <uart_comms+0x8ac>)
 8005d58:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 8005d5a:	4869      	ldr	r0, [pc, #420]	; (8005f00 <uart_comms+0x898>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d62:	f7fc f883 	bl	8001e6c <HAL_GPIO_WritePin>
 8005d66:	e4db      	b.n	8005720 <uart_comms+0xb8>
				auto_heating = 0;
 8005d68:	4b62      	ldr	r3, [pc, #392]	; (8005ef4 <uart_comms+0x88c>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e4d7      	b.n	8005720 <uart_comms+0xb8>
				valve_state = valve_OPEN;
 8005d70:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <uart_comms+0x8a8>)
 8005d72:	4a69      	ldr	r2, [pc, #420]	; (8005f18 <uart_comms+0x8b0>)
 8005d74:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8005d76:	4862      	ldr	r0, [pc, #392]	; (8005f00 <uart_comms+0x898>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d7e:	f7fc f875 	bl	8001e6c <HAL_GPIO_WritePin>
 8005d82:	e4cd      	b.n	8005720 <uart_comms+0xb8>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8005d84:	f7fa fa24 	bl	80001d0 <strlen>
 8005d88:	4681      	mov	r9, r0
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f7fa fa20 	bl	80001d0 <strlen>
 8005d90:	4639      	mov	r1, r7
 8005d92:	1e42      	subs	r2, r0, #1
 8005d94:	eb08 0009 	add.w	r0, r8, r9
 8005d98:	f000 f93a 	bl	8006010 <memcpy>
 8005d9c:	e57b      	b.n	8005896 <uart_comms+0x22e>
				enableFlashLogging = 0;
 8005d9e:	4b54      	ldr	r3, [pc, #336]	; (8005ef0 <uart_comms+0x888>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	e4bc      	b.n	8005720 <uart_comms+0xb8>
					heater_state = heater_OFF;
 8005da6:	4b54      	ldr	r3, [pc, #336]	; (8005ef8 <uart_comms+0x890>)
 8005da8:	495c      	ldr	r1, [pc, #368]	; (8005f1c <uart_comms+0x8b4>)
 8005daa:	6019      	str	r1, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 8005dac:	4854      	ldr	r0, [pc, #336]	; (8005f00 <uart_comms+0x898>)
 8005dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005db2:	f7fc f85b 	bl	8001e6c <HAL_GPIO_WritePin>
 8005db6:	e4b3      	b.n	8005720 <uart_comms+0xb8>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005db8:	6838      	ldr	r0, [r7, #0]
 8005dba:	4959      	ldr	r1, [pc, #356]	; (8005f20 <uart_comms+0x8b8>)
 8005dbc:	4e59      	ldr	r6, [pc, #356]	; (8005f24 <uart_comms+0x8bc>)
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005dbe:	4f5a      	ldr	r7, [pc, #360]	; (8005f28 <uart_comms+0x8c0>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005dc0:	f000 fa1a 	bl	80061f8 <strtok>
					heating_info = (strtok(NULL, ","));
 8005dc4:	4956      	ldr	r1, [pc, #344]	; (8005f20 <uart_comms+0x8b8>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005dc6:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f000 fa15 	bl	80061f8 <strtok>
					heating_info = (strtok(NULL, ","));
 8005dce:	4954      	ldr	r1, [pc, #336]	; (8005f20 <uart_comms+0x8b8>)
					heating_info = (strtok(NULL, ","));
 8005dd0:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	f000 fa10 	bl	80061f8 <strtok>
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005dd8:	220a      	movs	r2, #10
 8005dda:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005ddc:	6030      	str	r0, [r6, #0]
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005dde:	f000 fadf 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005de2:	494f      	ldr	r1, [pc, #316]	; (8005f20 <uart_comms+0x8b8>)
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005de4:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
					heating_info = (strtok(NULL, ","));
 8005de8:	2000      	movs	r0, #0
 8005dea:	f000 fa05 	bl	80061f8 <strtok>
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8005dee:	220a      	movs	r2, #10
 8005df0:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005df2:	6030      	str	r0, [r6, #0]
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8005df4:	f000 fad4 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005df8:	4949      	ldr	r1, [pc, #292]	; (8005f20 <uart_comms+0x8b8>)
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8005dfa:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
					heating_info = (strtok(NULL, ","));
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f000 f9fa 	bl	80061f8 <strtok>
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8005e04:	220a      	movs	r2, #10
 8005e06:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005e08:	6030      	str	r0, [r6, #0]
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8005e0a:	f000 fac9 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005e0e:	4944      	ldr	r1, [pc, #272]	; (8005f20 <uart_comms+0x8b8>)
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8005e10:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
					heating_info = (strtok(NULL, ","));
 8005e14:	2000      	movs	r0, #0
 8005e16:	f000 f9ef 	bl	80061f8 <strtok>
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8005e1a:	220a      	movs	r2, #10
 8005e1c:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005e1e:	6030      	str	r0, [r6, #0]
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8005e20:	f000 fabe 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005e24:	493e      	ldr	r1, [pc, #248]	; (8005f20 <uart_comms+0x8b8>)
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8005e26:	f887 003c 	strb.w	r0, [r7, #60]	; 0x3c
					heating_info = (strtok(NULL, ","));
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f000 f9e4 	bl	80061f8 <strtok>
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8005e30:	220a      	movs	r2, #10
 8005e32:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005e34:	6030      	str	r0, [r6, #0]
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8005e36:	f000 fab3 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, "\r\n"));
 8005e3a:	493c      	ldr	r1, [pc, #240]	; (8005f2c <uart_comms+0x8c4>)
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8005e3c:	f887 003d 	strb.w	r0, [r7, #61]	; 0x3d
					heating_info = (strtok(NULL, "\r\n"));
 8005e40:	2000      	movs	r0, #0
 8005e42:	f000 f9d9 	bl	80061f8 <strtok>
					heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8005e46:	220a      	movs	r2, #10
 8005e48:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, "\r\n"));
 8005e4a:	6030      	str	r0, [r6, #0]
					heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8005e4c:	f000 faa8 	bl	80063a0 <strtol>
 8005e50:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
 8005e54:	e464      	b.n	8005720 <uart_comms+0xb8>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005e56:	6838      	ldr	r0, [r7, #0]
 8005e58:	4931      	ldr	r1, [pc, #196]	; (8005f20 <uart_comms+0x8b8>)
 8005e5a:	4e32      	ldr	r6, [pc, #200]	; (8005f24 <uart_comms+0x8bc>)
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005e5c:	4f32      	ldr	r7, [pc, #200]	; (8005f28 <uart_comms+0x8c0>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005e5e:	f000 f9cb 	bl	80061f8 <strtok>
					heating_info = (strtok(NULL, ","));
 8005e62:	492f      	ldr	r1, [pc, #188]	; (8005f20 <uart_comms+0x8b8>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005e64:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005e66:	2000      	movs	r0, #0
 8005e68:	f000 f9c6 	bl	80061f8 <strtok>
					heating_info = (strtok(NULL, ","));
 8005e6c:	492c      	ldr	r1, [pc, #176]	; (8005f20 <uart_comms+0x8b8>)
					heating_info = (strtok(NULL, ","));
 8005e6e:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005e70:	2000      	movs	r0, #0
 8005e72:	f000 f9c1 	bl	80061f8 <strtok>
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005e76:	220a      	movs	r2, #10
 8005e78:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005e7a:	6030      	str	r0, [r6, #0]
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005e7c:	f000 fa90 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005e80:	4927      	ldr	r1, [pc, #156]	; (8005f20 <uart_comms+0x8b8>)
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005e82:	7038      	strb	r0, [r7, #0]
					heating_info = (strtok(NULL, ","));
 8005e84:	2000      	movs	r0, #0
 8005e86:	f000 f9b7 	bl	80061f8 <strtok>
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005e8a:	220a      	movs	r2, #10
 8005e8c:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005e8e:	6030      	str	r0, [r6, #0]
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005e90:	f000 fa86 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005e94:	4922      	ldr	r1, [pc, #136]	; (8005f20 <uart_comms+0x8b8>)
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005e96:	7078      	strb	r0, [r7, #1]
					heating_info = (strtok(NULL, ","));
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f000 f9ad 	bl	80061f8 <strtok>
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005e9e:	220a      	movs	r2, #10
 8005ea0:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005ea2:	6030      	str	r0, [r6, #0]
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005ea4:	f000 fa7c 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005ea8:	491d      	ldr	r1, [pc, #116]	; (8005f20 <uart_comms+0x8b8>)
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005eaa:	70b8      	strb	r0, [r7, #2]
					heating_info = (strtok(NULL, ","));
 8005eac:	2000      	movs	r0, #0
 8005eae:	f000 f9a3 	bl	80061f8 <strtok>
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005eb6:	6030      	str	r0, [r6, #0]
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005eb8:	f000 fa72 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, ","));
 8005ebc:	4918      	ldr	r1, [pc, #96]	; (8005f20 <uart_comms+0x8b8>)
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005ebe:	7538      	strb	r0, [r7, #20]
					heating_info = (strtok(NULL, ","));
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f000 f999 	bl	80061f8 <strtok>
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005ec6:	220a      	movs	r2, #10
 8005ec8:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005eca:	6030      	str	r0, [r6, #0]
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005ecc:	f000 fa68 	bl	80063a0 <strtol>
					heating_info = (strtok(NULL, "\r\n"));
 8005ed0:	4916      	ldr	r1, [pc, #88]	; (8005f2c <uart_comms+0x8c4>)
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005ed2:	7578      	strb	r0, [r7, #21]
					heating_info = (strtok(NULL, "\r\n"));
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	f000 f98f 	bl	80061f8 <strtok>
					heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8005eda:	220a      	movs	r2, #10
 8005edc:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, "\r\n"));
 8005ede:	6030      	str	r0, [r6, #0]
					heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8005ee0:	f000 fa5e 	bl	80063a0 <strtol>
 8005ee4:	75b8      	strb	r0, [r7, #22]
 8005ee6:	e41b      	b.n	8005720 <uart_comms+0xb8>
 8005ee8:	20000008 	.word	0x20000008
 8005eec:	20000400 	.word	0x20000400
 8005ef0:	20000260 	.word	0x20000260
 8005ef4:	20000250 	.word	0x20000250
 8005ef8:	20000288 	.word	0x20000288
 8005efc:	20000018 	.word	0x20000018
 8005f00:	48000400 	.word	0x48000400
 8005f04:	200005a8 	.word	0x200005a8
 8005f08:	20000004 	.word	0x20000004
 8005f0c:	2000001c 	.word	0x2000001c
 8005f10:	200002d8 	.word	0x200002d8
 8005f14:	20000024 	.word	0x20000024
 8005f18:	2000002c 	.word	0x2000002c
 8005f1c:	20000014 	.word	0x20000014
 8005f20:	08006db4 	.word	0x08006db4
 8005f24:	2000028c 	.word	0x2000028c
 8005f28:	20000530 	.word	0x20000530
 8005f2c:	08006dbc 	.word	0x08006dbc

08005f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005f34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005f36:	e003      	b.n	8005f40 <LoopCopyDataInit>

08005f38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005f3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005f3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005f3e:	3104      	adds	r1, #4

08005f40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005f40:	480b      	ldr	r0, [pc, #44]	; (8005f70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005f44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005f46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005f48:	d3f6      	bcc.n	8005f38 <CopyDataInit>
	ldr	r2, =_sbss
 8005f4a:	4a0b      	ldr	r2, [pc, #44]	; (8005f78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005f4c:	e002      	b.n	8005f54 <LoopFillZerobss>

08005f4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005f4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005f50:	f842 3b04 	str.w	r3, [r2], #4

08005f54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005f54:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <LoopForever+0x16>)
	cmp	r2, r3
 8005f56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005f58:	d3f9      	bcc.n	8005f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f5a:	f7ff fb51 	bl	8005600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f5e:	f000 f811 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f62:	f7fe fe69 	bl	8004c38 <main>

08005f66 <LoopForever>:

LoopForever:
    b LoopForever
 8005f66:	e7fe      	b.n	8005f66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005f68:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8005f6c:	08006f30 	.word	0x08006f30
	ldr	r0, =_sdata
 8005f70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005f74:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8005f78:	20000208 	.word	0x20000208
	ldr	r3, = _ebss
 8005f7c:	200005e4 	.word	0x200005e4

08005f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f80:	e7fe      	b.n	8005f80 <ADC1_2_IRQHandler>
	...

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4e0d      	ldr	r6, [pc, #52]	; (8005fbc <__libc_init_array+0x38>)
 8005f88:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8a:	1ba4      	subs	r4, r4, r6
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	2500      	movs	r5, #0
 8005f90:	42a5      	cmp	r5, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	4e0b      	ldr	r6, [pc, #44]	; (8005fc4 <__libc_init_array+0x40>)
 8005f96:	4c0c      	ldr	r4, [pc, #48]	; (8005fc8 <__libc_init_array+0x44>)
 8005f98:	f000 feca 	bl	8006d30 <_init>
 8005f9c:	1ba4      	subs	r4, r4, r6
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	42a5      	cmp	r5, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fac:	4798      	blx	r3
 8005fae:	3501      	adds	r5, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fb6:	4798      	blx	r3
 8005fb8:	3501      	adds	r5, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	08006f28 	.word	0x08006f28
 8005fc0:	08006f28 	.word	0x08006f28
 8005fc4:	08006f28 	.word	0x08006f28
 8005fc8:	08006f2c 	.word	0x08006f2c

08005fcc <__itoa>:
 8005fcc:	1e93      	subs	r3, r2, #2
 8005fce:	2b22      	cmp	r3, #34	; 0x22
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	d904      	bls.n	8005fe0 <__itoa+0x14>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	700b      	strb	r3, [r1, #0]
 8005fda:	461c      	mov	r4, r3
 8005fdc:	4620      	mov	r0, r4
 8005fde:	bd10      	pop	{r4, pc}
 8005fe0:	2a0a      	cmp	r2, #10
 8005fe2:	d109      	bne.n	8005ff8 <__itoa+0x2c>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	da07      	bge.n	8005ff8 <__itoa+0x2c>
 8005fe8:	232d      	movs	r3, #45	; 0x2d
 8005fea:	700b      	strb	r3, [r1, #0]
 8005fec:	4240      	negs	r0, r0
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4421      	add	r1, r4
 8005ff2:	f000 f9eb 	bl	80063cc <__utoa>
 8005ff6:	e7f1      	b.n	8005fdc <__itoa+0x10>
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	e7f9      	b.n	8005ff0 <__itoa+0x24>

08005ffc <itoa>:
 8005ffc:	f7ff bfe6 	b.w	8005fcc <__itoa>

08006000 <malloc>:
 8006000:	4b02      	ldr	r3, [pc, #8]	; (800600c <malloc+0xc>)
 8006002:	4601      	mov	r1, r0
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	f000 b865 	b.w	80060d4 <_malloc_r>
 800600a:	bf00      	nop
 800600c:	20000030 	.word	0x20000030

08006010 <memcpy>:
 8006010:	b510      	push	{r4, lr}
 8006012:	1e43      	subs	r3, r0, #1
 8006014:	440a      	add	r2, r1
 8006016:	4291      	cmp	r1, r2
 8006018:	d100      	bne.n	800601c <memcpy+0xc>
 800601a:	bd10      	pop	{r4, pc}
 800601c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006024:	e7f7      	b.n	8006016 <memcpy+0x6>

08006026 <memset>:
 8006026:	4402      	add	r2, r0
 8006028:	4603      	mov	r3, r0
 800602a:	4293      	cmp	r3, r2
 800602c:	d100      	bne.n	8006030 <memset+0xa>
 800602e:	4770      	bx	lr
 8006030:	f803 1b01 	strb.w	r1, [r3], #1
 8006034:	e7f9      	b.n	800602a <memset+0x4>
	...

08006038 <_free_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4605      	mov	r5, r0
 800603c:	2900      	cmp	r1, #0
 800603e:	d045      	beq.n	80060cc <_free_r+0x94>
 8006040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006044:	1f0c      	subs	r4, r1, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	bfb8      	it	lt
 800604a:	18e4      	addlt	r4, r4, r3
 800604c:	f000 fa13 	bl	8006476 <__malloc_lock>
 8006050:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <_free_r+0x98>)
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	4610      	mov	r0, r2
 8006056:	b933      	cbnz	r3, 8006066 <_free_r+0x2e>
 8006058:	6063      	str	r3, [r4, #4]
 800605a:	6014      	str	r4, [r2, #0]
 800605c:	4628      	mov	r0, r5
 800605e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006062:	f000 ba09 	b.w	8006478 <__malloc_unlock>
 8006066:	42a3      	cmp	r3, r4
 8006068:	d90c      	bls.n	8006084 <_free_r+0x4c>
 800606a:	6821      	ldr	r1, [r4, #0]
 800606c:	1862      	adds	r2, r4, r1
 800606e:	4293      	cmp	r3, r2
 8006070:	bf04      	itt	eq
 8006072:	681a      	ldreq	r2, [r3, #0]
 8006074:	685b      	ldreq	r3, [r3, #4]
 8006076:	6063      	str	r3, [r4, #4]
 8006078:	bf04      	itt	eq
 800607a:	1852      	addeq	r2, r2, r1
 800607c:	6022      	streq	r2, [r4, #0]
 800607e:	6004      	str	r4, [r0, #0]
 8006080:	e7ec      	b.n	800605c <_free_r+0x24>
 8006082:	4613      	mov	r3, r2
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	b10a      	cbz	r2, 800608c <_free_r+0x54>
 8006088:	42a2      	cmp	r2, r4
 800608a:	d9fa      	bls.n	8006082 <_free_r+0x4a>
 800608c:	6819      	ldr	r1, [r3, #0]
 800608e:	1858      	adds	r0, r3, r1
 8006090:	42a0      	cmp	r0, r4
 8006092:	d10b      	bne.n	80060ac <_free_r+0x74>
 8006094:	6820      	ldr	r0, [r4, #0]
 8006096:	4401      	add	r1, r0
 8006098:	1858      	adds	r0, r3, r1
 800609a:	4282      	cmp	r2, r0
 800609c:	6019      	str	r1, [r3, #0]
 800609e:	d1dd      	bne.n	800605c <_free_r+0x24>
 80060a0:	6810      	ldr	r0, [r2, #0]
 80060a2:	6852      	ldr	r2, [r2, #4]
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	4401      	add	r1, r0
 80060a8:	6019      	str	r1, [r3, #0]
 80060aa:	e7d7      	b.n	800605c <_free_r+0x24>
 80060ac:	d902      	bls.n	80060b4 <_free_r+0x7c>
 80060ae:	230c      	movs	r3, #12
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	e7d3      	b.n	800605c <_free_r+0x24>
 80060b4:	6820      	ldr	r0, [r4, #0]
 80060b6:	1821      	adds	r1, r4, r0
 80060b8:	428a      	cmp	r2, r1
 80060ba:	bf04      	itt	eq
 80060bc:	6811      	ldreq	r1, [r2, #0]
 80060be:	6852      	ldreq	r2, [r2, #4]
 80060c0:	6062      	str	r2, [r4, #4]
 80060c2:	bf04      	itt	eq
 80060c4:	1809      	addeq	r1, r1, r0
 80060c6:	6021      	streq	r1, [r4, #0]
 80060c8:	605c      	str	r4, [r3, #4]
 80060ca:	e7c7      	b.n	800605c <_free_r+0x24>
 80060cc:	bd38      	pop	{r3, r4, r5, pc}
 80060ce:	bf00      	nop
 80060d0:	200002e8 	.word	0x200002e8

080060d4 <_malloc_r>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	1ccd      	adds	r5, r1, #3
 80060d8:	f025 0503 	bic.w	r5, r5, #3
 80060dc:	3508      	adds	r5, #8
 80060de:	2d0c      	cmp	r5, #12
 80060e0:	bf38      	it	cc
 80060e2:	250c      	movcc	r5, #12
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	4606      	mov	r6, r0
 80060e8:	db01      	blt.n	80060ee <_malloc_r+0x1a>
 80060ea:	42a9      	cmp	r1, r5
 80060ec:	d903      	bls.n	80060f6 <_malloc_r+0x22>
 80060ee:	230c      	movs	r3, #12
 80060f0:	6033      	str	r3, [r6, #0]
 80060f2:	2000      	movs	r0, #0
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
 80060f6:	f000 f9be 	bl	8006476 <__malloc_lock>
 80060fa:	4a23      	ldr	r2, [pc, #140]	; (8006188 <_malloc_r+0xb4>)
 80060fc:	6814      	ldr	r4, [r2, #0]
 80060fe:	4621      	mov	r1, r4
 8006100:	b991      	cbnz	r1, 8006128 <_malloc_r+0x54>
 8006102:	4c22      	ldr	r4, [pc, #136]	; (800618c <_malloc_r+0xb8>)
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	b91b      	cbnz	r3, 8006110 <_malloc_r+0x3c>
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f841 	bl	8006190 <_sbrk_r>
 800610e:	6020      	str	r0, [r4, #0]
 8006110:	4629      	mov	r1, r5
 8006112:	4630      	mov	r0, r6
 8006114:	f000 f83c 	bl	8006190 <_sbrk_r>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d126      	bne.n	800616a <_malloc_r+0x96>
 800611c:	230c      	movs	r3, #12
 800611e:	6033      	str	r3, [r6, #0]
 8006120:	4630      	mov	r0, r6
 8006122:	f000 f9a9 	bl	8006478 <__malloc_unlock>
 8006126:	e7e4      	b.n	80060f2 <_malloc_r+0x1e>
 8006128:	680b      	ldr	r3, [r1, #0]
 800612a:	1b5b      	subs	r3, r3, r5
 800612c:	d41a      	bmi.n	8006164 <_malloc_r+0x90>
 800612e:	2b0b      	cmp	r3, #11
 8006130:	d90f      	bls.n	8006152 <_malloc_r+0x7e>
 8006132:	600b      	str	r3, [r1, #0]
 8006134:	50cd      	str	r5, [r1, r3]
 8006136:	18cc      	adds	r4, r1, r3
 8006138:	4630      	mov	r0, r6
 800613a:	f000 f99d 	bl	8006478 <__malloc_unlock>
 800613e:	f104 000b 	add.w	r0, r4, #11
 8006142:	1d23      	adds	r3, r4, #4
 8006144:	f020 0007 	bic.w	r0, r0, #7
 8006148:	1ac3      	subs	r3, r0, r3
 800614a:	d01b      	beq.n	8006184 <_malloc_r+0xb0>
 800614c:	425a      	negs	r2, r3
 800614e:	50e2      	str	r2, [r4, r3]
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	428c      	cmp	r4, r1
 8006154:	bf0d      	iteet	eq
 8006156:	6863      	ldreq	r3, [r4, #4]
 8006158:	684b      	ldrne	r3, [r1, #4]
 800615a:	6063      	strne	r3, [r4, #4]
 800615c:	6013      	streq	r3, [r2, #0]
 800615e:	bf18      	it	ne
 8006160:	460c      	movne	r4, r1
 8006162:	e7e9      	b.n	8006138 <_malloc_r+0x64>
 8006164:	460c      	mov	r4, r1
 8006166:	6849      	ldr	r1, [r1, #4]
 8006168:	e7ca      	b.n	8006100 <_malloc_r+0x2c>
 800616a:	1cc4      	adds	r4, r0, #3
 800616c:	f024 0403 	bic.w	r4, r4, #3
 8006170:	42a0      	cmp	r0, r4
 8006172:	d005      	beq.n	8006180 <_malloc_r+0xac>
 8006174:	1a21      	subs	r1, r4, r0
 8006176:	4630      	mov	r0, r6
 8006178:	f000 f80a 	bl	8006190 <_sbrk_r>
 800617c:	3001      	adds	r0, #1
 800617e:	d0cd      	beq.n	800611c <_malloc_r+0x48>
 8006180:	6025      	str	r5, [r4, #0]
 8006182:	e7d9      	b.n	8006138 <_malloc_r+0x64>
 8006184:	bd70      	pop	{r4, r5, r6, pc}
 8006186:	bf00      	nop
 8006188:	200002e8 	.word	0x200002e8
 800618c:	200002ec 	.word	0x200002ec

08006190 <_sbrk_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4c06      	ldr	r4, [pc, #24]	; (80061ac <_sbrk_r+0x1c>)
 8006194:	2300      	movs	r3, #0
 8006196:	4605      	mov	r5, r0
 8006198:	4608      	mov	r0, r1
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	f000 fdba 	bl	8006d14 <_sbrk>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_sbrk_r+0x1a>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_sbrk_r+0x1a>
 80061a8:	602b      	str	r3, [r5, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	200005e0 	.word	0x200005e0

080061b0 <siprintf>:
 80061b0:	b40e      	push	{r1, r2, r3}
 80061b2:	b500      	push	{lr}
 80061b4:	b09c      	sub	sp, #112	; 0x70
 80061b6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80061ba:	ab1d      	add	r3, sp, #116	; 0x74
 80061bc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80061c0:	9002      	str	r0, [sp, #8]
 80061c2:	9006      	str	r0, [sp, #24]
 80061c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061c8:	480a      	ldr	r0, [pc, #40]	; (80061f4 <siprintf+0x44>)
 80061ca:	9104      	str	r1, [sp, #16]
 80061cc:	9107      	str	r1, [sp, #28]
 80061ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	a902      	add	r1, sp, #8
 80061e0:	f000 f9a6 	bl	8006530 <_svfiprintf_r>
 80061e4:	9b02      	ldr	r3, [sp, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	b01c      	add	sp, #112	; 0x70
 80061ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f0:	b003      	add	sp, #12
 80061f2:	4770      	bx	lr
 80061f4:	20000030 	.word	0x20000030

080061f8 <strtok>:
 80061f8:	4b13      	ldr	r3, [pc, #76]	; (8006248 <strtok+0x50>)
 80061fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fe:	681d      	ldr	r5, [r3, #0]
 8006200:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006202:	4606      	mov	r6, r0
 8006204:	460f      	mov	r7, r1
 8006206:	b9b4      	cbnz	r4, 8006236 <strtok+0x3e>
 8006208:	2050      	movs	r0, #80	; 0x50
 800620a:	f7ff fef9 	bl	8006000 <malloc>
 800620e:	65a8      	str	r0, [r5, #88]	; 0x58
 8006210:	6004      	str	r4, [r0, #0]
 8006212:	6044      	str	r4, [r0, #4]
 8006214:	6084      	str	r4, [r0, #8]
 8006216:	60c4      	str	r4, [r0, #12]
 8006218:	6104      	str	r4, [r0, #16]
 800621a:	6144      	str	r4, [r0, #20]
 800621c:	6184      	str	r4, [r0, #24]
 800621e:	6284      	str	r4, [r0, #40]	; 0x28
 8006220:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006222:	6304      	str	r4, [r0, #48]	; 0x30
 8006224:	6344      	str	r4, [r0, #52]	; 0x34
 8006226:	6384      	str	r4, [r0, #56]	; 0x38
 8006228:	63c4      	str	r4, [r0, #60]	; 0x3c
 800622a:	6404      	str	r4, [r0, #64]	; 0x40
 800622c:	6444      	str	r4, [r0, #68]	; 0x44
 800622e:	6484      	str	r4, [r0, #72]	; 0x48
 8006230:	64c4      	str	r4, [r0, #76]	; 0x4c
 8006232:	7704      	strb	r4, [r0, #28]
 8006234:	6244      	str	r4, [r0, #36]	; 0x24
 8006236:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006238:	4639      	mov	r1, r7
 800623a:	4630      	mov	r0, r6
 800623c:	2301      	movs	r3, #1
 800623e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006242:	f000 b803 	b.w	800624c <__strtok_r>
 8006246:	bf00      	nop
 8006248:	20000030 	.word	0x20000030

0800624c <__strtok_r>:
 800624c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624e:	b918      	cbnz	r0, 8006258 <__strtok_r+0xc>
 8006250:	6810      	ldr	r0, [r2, #0]
 8006252:	b908      	cbnz	r0, 8006258 <__strtok_r+0xc>
 8006254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006256:	4620      	mov	r0, r4
 8006258:	4604      	mov	r4, r0
 800625a:	460f      	mov	r7, r1
 800625c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006260:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006264:	b91e      	cbnz	r6, 800626e <__strtok_r+0x22>
 8006266:	b965      	cbnz	r5, 8006282 <__strtok_r+0x36>
 8006268:	6015      	str	r5, [r2, #0]
 800626a:	4628      	mov	r0, r5
 800626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626e:	42b5      	cmp	r5, r6
 8006270:	d1f6      	bne.n	8006260 <__strtok_r+0x14>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1ef      	bne.n	8006256 <__strtok_r+0xa>
 8006276:	6014      	str	r4, [r2, #0]
 8006278:	7003      	strb	r3, [r0, #0]
 800627a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627c:	461c      	mov	r4, r3
 800627e:	e00c      	b.n	800629a <__strtok_r+0x4e>
 8006280:	b915      	cbnz	r5, 8006288 <__strtok_r+0x3c>
 8006282:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006286:	460e      	mov	r6, r1
 8006288:	f816 5b01 	ldrb.w	r5, [r6], #1
 800628c:	42ab      	cmp	r3, r5
 800628e:	d1f7      	bne.n	8006280 <__strtok_r+0x34>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f3      	beq.n	800627c <__strtok_r+0x30>
 8006294:	2300      	movs	r3, #0
 8006296:	f804 3c01 	strb.w	r3, [r4, #-1]
 800629a:	6014      	str	r4, [r2, #0]
 800629c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800629e <_strtol_l.isra.0>:
 800629e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a2:	4680      	mov	r8, r0
 80062a4:	4689      	mov	r9, r1
 80062a6:	4692      	mov	sl, r2
 80062a8:	461f      	mov	r7, r3
 80062aa:	468b      	mov	fp, r1
 80062ac:	465d      	mov	r5, fp
 80062ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80062b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062b4:	f000 f8ca 	bl	800644c <__locale_ctype_ptr_l>
 80062b8:	4420      	add	r0, r4
 80062ba:	7846      	ldrb	r6, [r0, #1]
 80062bc:	f016 0608 	ands.w	r6, r6, #8
 80062c0:	d10b      	bne.n	80062da <_strtol_l.isra.0+0x3c>
 80062c2:	2c2d      	cmp	r4, #45	; 0x2d
 80062c4:	d10b      	bne.n	80062de <_strtol_l.isra.0+0x40>
 80062c6:	782c      	ldrb	r4, [r5, #0]
 80062c8:	2601      	movs	r6, #1
 80062ca:	f10b 0502 	add.w	r5, fp, #2
 80062ce:	b167      	cbz	r7, 80062ea <_strtol_l.isra.0+0x4c>
 80062d0:	2f10      	cmp	r7, #16
 80062d2:	d114      	bne.n	80062fe <_strtol_l.isra.0+0x60>
 80062d4:	2c30      	cmp	r4, #48	; 0x30
 80062d6:	d00a      	beq.n	80062ee <_strtol_l.isra.0+0x50>
 80062d8:	e011      	b.n	80062fe <_strtol_l.isra.0+0x60>
 80062da:	46ab      	mov	fp, r5
 80062dc:	e7e6      	b.n	80062ac <_strtol_l.isra.0+0xe>
 80062de:	2c2b      	cmp	r4, #43	; 0x2b
 80062e0:	bf04      	itt	eq
 80062e2:	782c      	ldrbeq	r4, [r5, #0]
 80062e4:	f10b 0502 	addeq.w	r5, fp, #2
 80062e8:	e7f1      	b.n	80062ce <_strtol_l.isra.0+0x30>
 80062ea:	2c30      	cmp	r4, #48	; 0x30
 80062ec:	d127      	bne.n	800633e <_strtol_l.isra.0+0xa0>
 80062ee:	782b      	ldrb	r3, [r5, #0]
 80062f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062f4:	2b58      	cmp	r3, #88	; 0x58
 80062f6:	d14b      	bne.n	8006390 <_strtol_l.isra.0+0xf2>
 80062f8:	786c      	ldrb	r4, [r5, #1]
 80062fa:	2710      	movs	r7, #16
 80062fc:	3502      	adds	r5, #2
 80062fe:	2e00      	cmp	r6, #0
 8006300:	bf0c      	ite	eq
 8006302:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006306:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800630a:	2200      	movs	r2, #0
 800630c:	fbb1 fef7 	udiv	lr, r1, r7
 8006310:	4610      	mov	r0, r2
 8006312:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006316:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800631a:	2b09      	cmp	r3, #9
 800631c:	d811      	bhi.n	8006342 <_strtol_l.isra.0+0xa4>
 800631e:	461c      	mov	r4, r3
 8006320:	42a7      	cmp	r7, r4
 8006322:	dd1d      	ble.n	8006360 <_strtol_l.isra.0+0xc2>
 8006324:	1c53      	adds	r3, r2, #1
 8006326:	d007      	beq.n	8006338 <_strtol_l.isra.0+0x9a>
 8006328:	4586      	cmp	lr, r0
 800632a:	d316      	bcc.n	800635a <_strtol_l.isra.0+0xbc>
 800632c:	d101      	bne.n	8006332 <_strtol_l.isra.0+0x94>
 800632e:	45a4      	cmp	ip, r4
 8006330:	db13      	blt.n	800635a <_strtol_l.isra.0+0xbc>
 8006332:	fb00 4007 	mla	r0, r0, r7, r4
 8006336:	2201      	movs	r2, #1
 8006338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800633c:	e7eb      	b.n	8006316 <_strtol_l.isra.0+0x78>
 800633e:	270a      	movs	r7, #10
 8006340:	e7dd      	b.n	80062fe <_strtol_l.isra.0+0x60>
 8006342:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006346:	2b19      	cmp	r3, #25
 8006348:	d801      	bhi.n	800634e <_strtol_l.isra.0+0xb0>
 800634a:	3c37      	subs	r4, #55	; 0x37
 800634c:	e7e8      	b.n	8006320 <_strtol_l.isra.0+0x82>
 800634e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006352:	2b19      	cmp	r3, #25
 8006354:	d804      	bhi.n	8006360 <_strtol_l.isra.0+0xc2>
 8006356:	3c57      	subs	r4, #87	; 0x57
 8006358:	e7e2      	b.n	8006320 <_strtol_l.isra.0+0x82>
 800635a:	f04f 32ff 	mov.w	r2, #4294967295
 800635e:	e7eb      	b.n	8006338 <_strtol_l.isra.0+0x9a>
 8006360:	1c53      	adds	r3, r2, #1
 8006362:	d108      	bne.n	8006376 <_strtol_l.isra.0+0xd8>
 8006364:	2322      	movs	r3, #34	; 0x22
 8006366:	f8c8 3000 	str.w	r3, [r8]
 800636a:	4608      	mov	r0, r1
 800636c:	f1ba 0f00 	cmp.w	sl, #0
 8006370:	d107      	bne.n	8006382 <_strtol_l.isra.0+0xe4>
 8006372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006376:	b106      	cbz	r6, 800637a <_strtol_l.isra.0+0xdc>
 8006378:	4240      	negs	r0, r0
 800637a:	f1ba 0f00 	cmp.w	sl, #0
 800637e:	d00c      	beq.n	800639a <_strtol_l.isra.0+0xfc>
 8006380:	b122      	cbz	r2, 800638c <_strtol_l.isra.0+0xee>
 8006382:	3d01      	subs	r5, #1
 8006384:	f8ca 5000 	str.w	r5, [sl]
 8006388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638c:	464d      	mov	r5, r9
 800638e:	e7f9      	b.n	8006384 <_strtol_l.isra.0+0xe6>
 8006390:	2430      	movs	r4, #48	; 0x30
 8006392:	2f00      	cmp	r7, #0
 8006394:	d1b3      	bne.n	80062fe <_strtol_l.isra.0+0x60>
 8006396:	2708      	movs	r7, #8
 8006398:	e7b1      	b.n	80062fe <_strtol_l.isra.0+0x60>
 800639a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080063a0 <strtol>:
 80063a0:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <strtol+0x24>)
 80063a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063a4:	681c      	ldr	r4, [r3, #0]
 80063a6:	4d08      	ldr	r5, [pc, #32]	; (80063c8 <strtol+0x28>)
 80063a8:	6a23      	ldr	r3, [r4, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bf08      	it	eq
 80063ae:	462b      	moveq	r3, r5
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	460a      	mov	r2, r1
 80063b6:	4601      	mov	r1, r0
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7ff ff70 	bl	800629e <_strtol_l.isra.0>
 80063be:	b003      	add	sp, #12
 80063c0:	bd30      	pop	{r4, r5, pc}
 80063c2:	bf00      	nop
 80063c4:	20000030 	.word	0x20000030
 80063c8:	20000094 	.word	0x20000094

080063cc <__utoa>:
 80063cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ce:	4c1e      	ldr	r4, [pc, #120]	; (8006448 <__utoa+0x7c>)
 80063d0:	b08b      	sub	sp, #44	; 0x2c
 80063d2:	4603      	mov	r3, r0
 80063d4:	460f      	mov	r7, r1
 80063d6:	466d      	mov	r5, sp
 80063d8:	f104 0e20 	add.w	lr, r4, #32
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	6861      	ldr	r1, [r4, #4]
 80063e0:	462e      	mov	r6, r5
 80063e2:	c603      	stmia	r6!, {r0, r1}
 80063e4:	3408      	adds	r4, #8
 80063e6:	4574      	cmp	r4, lr
 80063e8:	4635      	mov	r5, r6
 80063ea:	d1f7      	bne.n	80063dc <__utoa+0x10>
 80063ec:	7921      	ldrb	r1, [r4, #4]
 80063ee:	7131      	strb	r1, [r6, #4]
 80063f0:	1e91      	subs	r1, r2, #2
 80063f2:	6820      	ldr	r0, [r4, #0]
 80063f4:	6030      	str	r0, [r6, #0]
 80063f6:	2922      	cmp	r1, #34	; 0x22
 80063f8:	f04f 0100 	mov.w	r1, #0
 80063fc:	d904      	bls.n	8006408 <__utoa+0x3c>
 80063fe:	7039      	strb	r1, [r7, #0]
 8006400:	460f      	mov	r7, r1
 8006402:	4638      	mov	r0, r7
 8006404:	b00b      	add	sp, #44	; 0x2c
 8006406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006408:	1e78      	subs	r0, r7, #1
 800640a:	4606      	mov	r6, r0
 800640c:	fbb3 f5f2 	udiv	r5, r3, r2
 8006410:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006414:	fb02 3315 	mls	r3, r2, r5, r3
 8006418:	4473      	add	r3, lr
 800641a:	1c4c      	adds	r4, r1, #1
 800641c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006420:	f806 3f01 	strb.w	r3, [r6, #1]!
 8006424:	462b      	mov	r3, r5
 8006426:	b965      	cbnz	r5, 8006442 <__utoa+0x76>
 8006428:	553d      	strb	r5, [r7, r4]
 800642a:	187a      	adds	r2, r7, r1
 800642c:	1acc      	subs	r4, r1, r3
 800642e:	42a3      	cmp	r3, r4
 8006430:	dae7      	bge.n	8006402 <__utoa+0x36>
 8006432:	7844      	ldrb	r4, [r0, #1]
 8006434:	7815      	ldrb	r5, [r2, #0]
 8006436:	f800 5f01 	strb.w	r5, [r0, #1]!
 800643a:	3301      	adds	r3, #1
 800643c:	f802 4901 	strb.w	r4, [r2], #-1
 8006440:	e7f4      	b.n	800642c <__utoa+0x60>
 8006442:	4621      	mov	r1, r4
 8006444:	e7e2      	b.n	800640c <__utoa+0x40>
 8006446:	bf00      	nop
 8006448:	08006dc0 	.word	0x08006dc0

0800644c <__locale_ctype_ptr_l>:
 800644c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006450:	4770      	bx	lr

08006452 <__ascii_mbtowc>:
 8006452:	b082      	sub	sp, #8
 8006454:	b901      	cbnz	r1, 8006458 <__ascii_mbtowc+0x6>
 8006456:	a901      	add	r1, sp, #4
 8006458:	b142      	cbz	r2, 800646c <__ascii_mbtowc+0x1a>
 800645a:	b14b      	cbz	r3, 8006470 <__ascii_mbtowc+0x1e>
 800645c:	7813      	ldrb	r3, [r2, #0]
 800645e:	600b      	str	r3, [r1, #0]
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	1c10      	adds	r0, r2, #0
 8006464:	bf18      	it	ne
 8006466:	2001      	movne	r0, #1
 8006468:	b002      	add	sp, #8
 800646a:	4770      	bx	lr
 800646c:	4610      	mov	r0, r2
 800646e:	e7fb      	b.n	8006468 <__ascii_mbtowc+0x16>
 8006470:	f06f 0001 	mvn.w	r0, #1
 8006474:	e7f8      	b.n	8006468 <__ascii_mbtowc+0x16>

08006476 <__malloc_lock>:
 8006476:	4770      	bx	lr

08006478 <__malloc_unlock>:
 8006478:	4770      	bx	lr

0800647a <__ssputs_r>:
 800647a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647e:	688e      	ldr	r6, [r1, #8]
 8006480:	429e      	cmp	r6, r3
 8006482:	4682      	mov	sl, r0
 8006484:	460c      	mov	r4, r1
 8006486:	4691      	mov	r9, r2
 8006488:	4698      	mov	r8, r3
 800648a:	d835      	bhi.n	80064f8 <__ssputs_r+0x7e>
 800648c:	898a      	ldrh	r2, [r1, #12]
 800648e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006492:	d031      	beq.n	80064f8 <__ssputs_r+0x7e>
 8006494:	6825      	ldr	r5, [r4, #0]
 8006496:	6909      	ldr	r1, [r1, #16]
 8006498:	1a6f      	subs	r7, r5, r1
 800649a:	6965      	ldr	r5, [r4, #20]
 800649c:	2302      	movs	r3, #2
 800649e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064a2:	fb95 f5f3 	sdiv	r5, r5, r3
 80064a6:	f108 0301 	add.w	r3, r8, #1
 80064aa:	443b      	add	r3, r7
 80064ac:	429d      	cmp	r5, r3
 80064ae:	bf38      	it	cc
 80064b0:	461d      	movcc	r5, r3
 80064b2:	0553      	lsls	r3, r2, #21
 80064b4:	d531      	bpl.n	800651a <__ssputs_r+0xa0>
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7ff fe0c 	bl	80060d4 <_malloc_r>
 80064bc:	4606      	mov	r6, r0
 80064be:	b950      	cbnz	r0, 80064d6 <__ssputs_r+0x5c>
 80064c0:	230c      	movs	r3, #12
 80064c2:	f8ca 3000 	str.w	r3, [sl]
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d6:	463a      	mov	r2, r7
 80064d8:	6921      	ldr	r1, [r4, #16]
 80064da:	f7ff fd99 	bl	8006010 <memcpy>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	6126      	str	r6, [r4, #16]
 80064ec:	6165      	str	r5, [r4, #20]
 80064ee:	443e      	add	r6, r7
 80064f0:	1bed      	subs	r5, r5, r7
 80064f2:	6026      	str	r6, [r4, #0]
 80064f4:	60a5      	str	r5, [r4, #8]
 80064f6:	4646      	mov	r6, r8
 80064f8:	4546      	cmp	r6, r8
 80064fa:	bf28      	it	cs
 80064fc:	4646      	movcs	r6, r8
 80064fe:	4632      	mov	r2, r6
 8006500:	4649      	mov	r1, r9
 8006502:	6820      	ldr	r0, [r4, #0]
 8006504:	f000 faab 	bl	8006a5e <memmove>
 8006508:	68a3      	ldr	r3, [r4, #8]
 800650a:	1b9b      	subs	r3, r3, r6
 800650c:	60a3      	str	r3, [r4, #8]
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	441e      	add	r6, r3
 8006512:	6026      	str	r6, [r4, #0]
 8006514:	2000      	movs	r0, #0
 8006516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651a:	462a      	mov	r2, r5
 800651c:	f000 fab9 	bl	8006a92 <_realloc_r>
 8006520:	4606      	mov	r6, r0
 8006522:	2800      	cmp	r0, #0
 8006524:	d1e1      	bne.n	80064ea <__ssputs_r+0x70>
 8006526:	6921      	ldr	r1, [r4, #16]
 8006528:	4650      	mov	r0, sl
 800652a:	f7ff fd85 	bl	8006038 <_free_r>
 800652e:	e7c7      	b.n	80064c0 <__ssputs_r+0x46>

08006530 <_svfiprintf_r>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	b09d      	sub	sp, #116	; 0x74
 8006536:	4680      	mov	r8, r0
 8006538:	9303      	str	r3, [sp, #12]
 800653a:	898b      	ldrh	r3, [r1, #12]
 800653c:	061c      	lsls	r4, r3, #24
 800653e:	460d      	mov	r5, r1
 8006540:	4616      	mov	r6, r2
 8006542:	d50f      	bpl.n	8006564 <_svfiprintf_r+0x34>
 8006544:	690b      	ldr	r3, [r1, #16]
 8006546:	b96b      	cbnz	r3, 8006564 <_svfiprintf_r+0x34>
 8006548:	2140      	movs	r1, #64	; 0x40
 800654a:	f7ff fdc3 	bl	80060d4 <_malloc_r>
 800654e:	6028      	str	r0, [r5, #0]
 8006550:	6128      	str	r0, [r5, #16]
 8006552:	b928      	cbnz	r0, 8006560 <_svfiprintf_r+0x30>
 8006554:	230c      	movs	r3, #12
 8006556:	f8c8 3000 	str.w	r3, [r8]
 800655a:	f04f 30ff 	mov.w	r0, #4294967295
 800655e:	e0c5      	b.n	80066ec <_svfiprintf_r+0x1bc>
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	616b      	str	r3, [r5, #20]
 8006564:	2300      	movs	r3, #0
 8006566:	9309      	str	r3, [sp, #36]	; 0x24
 8006568:	2320      	movs	r3, #32
 800656a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800656e:	2330      	movs	r3, #48	; 0x30
 8006570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006574:	f04f 0b01 	mov.w	fp, #1
 8006578:	4637      	mov	r7, r6
 800657a:	463c      	mov	r4, r7
 800657c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d13c      	bne.n	80065fe <_svfiprintf_r+0xce>
 8006584:	ebb7 0a06 	subs.w	sl, r7, r6
 8006588:	d00b      	beq.n	80065a2 <_svfiprintf_r+0x72>
 800658a:	4653      	mov	r3, sl
 800658c:	4632      	mov	r2, r6
 800658e:	4629      	mov	r1, r5
 8006590:	4640      	mov	r0, r8
 8006592:	f7ff ff72 	bl	800647a <__ssputs_r>
 8006596:	3001      	adds	r0, #1
 8006598:	f000 80a3 	beq.w	80066e2 <_svfiprintf_r+0x1b2>
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	4453      	add	r3, sl
 80065a0:	9309      	str	r3, [sp, #36]	; 0x24
 80065a2:	783b      	ldrb	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 809c 	beq.w	80066e2 <_svfiprintf_r+0x1b2>
 80065aa:	2300      	movs	r3, #0
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	9205      	str	r2, [sp, #20]
 80065b6:	9306      	str	r3, [sp, #24]
 80065b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065bc:	931a      	str	r3, [sp, #104]	; 0x68
 80065be:	2205      	movs	r2, #5
 80065c0:	7821      	ldrb	r1, [r4, #0]
 80065c2:	4850      	ldr	r0, [pc, #320]	; (8006704 <_svfiprintf_r+0x1d4>)
 80065c4:	f7f9 fe0c 	bl	80001e0 <memchr>
 80065c8:	1c67      	adds	r7, r4, #1
 80065ca:	9b04      	ldr	r3, [sp, #16]
 80065cc:	b9d8      	cbnz	r0, 8006606 <_svfiprintf_r+0xd6>
 80065ce:	06d9      	lsls	r1, r3, #27
 80065d0:	bf44      	itt	mi
 80065d2:	2220      	movmi	r2, #32
 80065d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065d8:	071a      	lsls	r2, r3, #28
 80065da:	bf44      	itt	mi
 80065dc:	222b      	movmi	r2, #43	; 0x2b
 80065de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065e2:	7822      	ldrb	r2, [r4, #0]
 80065e4:	2a2a      	cmp	r2, #42	; 0x2a
 80065e6:	d016      	beq.n	8006616 <_svfiprintf_r+0xe6>
 80065e8:	9a07      	ldr	r2, [sp, #28]
 80065ea:	2100      	movs	r1, #0
 80065ec:	200a      	movs	r0, #10
 80065ee:	4627      	mov	r7, r4
 80065f0:	3401      	adds	r4, #1
 80065f2:	783b      	ldrb	r3, [r7, #0]
 80065f4:	3b30      	subs	r3, #48	; 0x30
 80065f6:	2b09      	cmp	r3, #9
 80065f8:	d951      	bls.n	800669e <_svfiprintf_r+0x16e>
 80065fa:	b1c9      	cbz	r1, 8006630 <_svfiprintf_r+0x100>
 80065fc:	e011      	b.n	8006622 <_svfiprintf_r+0xf2>
 80065fe:	2b25      	cmp	r3, #37	; 0x25
 8006600:	d0c0      	beq.n	8006584 <_svfiprintf_r+0x54>
 8006602:	4627      	mov	r7, r4
 8006604:	e7b9      	b.n	800657a <_svfiprintf_r+0x4a>
 8006606:	4a3f      	ldr	r2, [pc, #252]	; (8006704 <_svfiprintf_r+0x1d4>)
 8006608:	1a80      	subs	r0, r0, r2
 800660a:	fa0b f000 	lsl.w	r0, fp, r0
 800660e:	4318      	orrs	r0, r3
 8006610:	9004      	str	r0, [sp, #16]
 8006612:	463c      	mov	r4, r7
 8006614:	e7d3      	b.n	80065be <_svfiprintf_r+0x8e>
 8006616:	9a03      	ldr	r2, [sp, #12]
 8006618:	1d11      	adds	r1, r2, #4
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	9103      	str	r1, [sp, #12]
 800661e:	2a00      	cmp	r2, #0
 8006620:	db01      	blt.n	8006626 <_svfiprintf_r+0xf6>
 8006622:	9207      	str	r2, [sp, #28]
 8006624:	e004      	b.n	8006630 <_svfiprintf_r+0x100>
 8006626:	4252      	negs	r2, r2
 8006628:	f043 0302 	orr.w	r3, r3, #2
 800662c:	9207      	str	r2, [sp, #28]
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	783b      	ldrb	r3, [r7, #0]
 8006632:	2b2e      	cmp	r3, #46	; 0x2e
 8006634:	d10e      	bne.n	8006654 <_svfiprintf_r+0x124>
 8006636:	787b      	ldrb	r3, [r7, #1]
 8006638:	2b2a      	cmp	r3, #42	; 0x2a
 800663a:	f107 0101 	add.w	r1, r7, #1
 800663e:	d132      	bne.n	80066a6 <_svfiprintf_r+0x176>
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	1d1a      	adds	r2, r3, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	9203      	str	r2, [sp, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	bfb8      	it	lt
 800664c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006650:	3702      	adds	r7, #2
 8006652:	9305      	str	r3, [sp, #20]
 8006654:	4c2c      	ldr	r4, [pc, #176]	; (8006708 <_svfiprintf_r+0x1d8>)
 8006656:	7839      	ldrb	r1, [r7, #0]
 8006658:	2203      	movs	r2, #3
 800665a:	4620      	mov	r0, r4
 800665c:	f7f9 fdc0 	bl	80001e0 <memchr>
 8006660:	b138      	cbz	r0, 8006672 <_svfiprintf_r+0x142>
 8006662:	2340      	movs	r3, #64	; 0x40
 8006664:	1b00      	subs	r0, r0, r4
 8006666:	fa03 f000 	lsl.w	r0, r3, r0
 800666a:	9b04      	ldr	r3, [sp, #16]
 800666c:	4303      	orrs	r3, r0
 800666e:	9304      	str	r3, [sp, #16]
 8006670:	3701      	adds	r7, #1
 8006672:	7839      	ldrb	r1, [r7, #0]
 8006674:	4825      	ldr	r0, [pc, #148]	; (800670c <_svfiprintf_r+0x1dc>)
 8006676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800667a:	2206      	movs	r2, #6
 800667c:	1c7e      	adds	r6, r7, #1
 800667e:	f7f9 fdaf 	bl	80001e0 <memchr>
 8006682:	2800      	cmp	r0, #0
 8006684:	d035      	beq.n	80066f2 <_svfiprintf_r+0x1c2>
 8006686:	4b22      	ldr	r3, [pc, #136]	; (8006710 <_svfiprintf_r+0x1e0>)
 8006688:	b9fb      	cbnz	r3, 80066ca <_svfiprintf_r+0x19a>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	3307      	adds	r3, #7
 800668e:	f023 0307 	bic.w	r3, r3, #7
 8006692:	3308      	adds	r3, #8
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006698:	444b      	add	r3, r9
 800669a:	9309      	str	r3, [sp, #36]	; 0x24
 800669c:	e76c      	b.n	8006578 <_svfiprintf_r+0x48>
 800669e:	fb00 3202 	mla	r2, r0, r2, r3
 80066a2:	2101      	movs	r1, #1
 80066a4:	e7a3      	b.n	80065ee <_svfiprintf_r+0xbe>
 80066a6:	2300      	movs	r3, #0
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	4618      	mov	r0, r3
 80066ac:	240a      	movs	r4, #10
 80066ae:	460f      	mov	r7, r1
 80066b0:	3101      	adds	r1, #1
 80066b2:	783a      	ldrb	r2, [r7, #0]
 80066b4:	3a30      	subs	r2, #48	; 0x30
 80066b6:	2a09      	cmp	r2, #9
 80066b8:	d903      	bls.n	80066c2 <_svfiprintf_r+0x192>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ca      	beq.n	8006654 <_svfiprintf_r+0x124>
 80066be:	9005      	str	r0, [sp, #20]
 80066c0:	e7c8      	b.n	8006654 <_svfiprintf_r+0x124>
 80066c2:	fb04 2000 	mla	r0, r4, r0, r2
 80066c6:	2301      	movs	r3, #1
 80066c8:	e7f1      	b.n	80066ae <_svfiprintf_r+0x17e>
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	462a      	mov	r2, r5
 80066d0:	4b10      	ldr	r3, [pc, #64]	; (8006714 <_svfiprintf_r+0x1e4>)
 80066d2:	a904      	add	r1, sp, #16
 80066d4:	4640      	mov	r0, r8
 80066d6:	f3af 8000 	nop.w
 80066da:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066de:	4681      	mov	r9, r0
 80066e0:	d1d9      	bne.n	8006696 <_svfiprintf_r+0x166>
 80066e2:	89ab      	ldrh	r3, [r5, #12]
 80066e4:	065b      	lsls	r3, r3, #25
 80066e6:	f53f af38 	bmi.w	800655a <_svfiprintf_r+0x2a>
 80066ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ec:	b01d      	add	sp, #116	; 0x74
 80066ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f2:	ab03      	add	r3, sp, #12
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	462a      	mov	r2, r5
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <_svfiprintf_r+0x1e4>)
 80066fa:	a904      	add	r1, sp, #16
 80066fc:	4640      	mov	r0, r8
 80066fe:	f000 f881 	bl	8006804 <_printf_i>
 8006702:	e7ea      	b.n	80066da <_svfiprintf_r+0x1aa>
 8006704:	08006def 	.word	0x08006def
 8006708:	08006df5 	.word	0x08006df5
 800670c:	08006df9 	.word	0x08006df9
 8006710:	00000000 	.word	0x00000000
 8006714:	0800647b 	.word	0x0800647b

08006718 <_printf_common>:
 8006718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	4691      	mov	r9, r2
 800671e:	461f      	mov	r7, r3
 8006720:	688a      	ldr	r2, [r1, #8]
 8006722:	690b      	ldr	r3, [r1, #16]
 8006724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006728:	4293      	cmp	r3, r2
 800672a:	bfb8      	it	lt
 800672c:	4613      	movlt	r3, r2
 800672e:	f8c9 3000 	str.w	r3, [r9]
 8006732:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006736:	4606      	mov	r6, r0
 8006738:	460c      	mov	r4, r1
 800673a:	b112      	cbz	r2, 8006742 <_printf_common+0x2a>
 800673c:	3301      	adds	r3, #1
 800673e:	f8c9 3000 	str.w	r3, [r9]
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	0699      	lsls	r1, r3, #26
 8006746:	bf42      	ittt	mi
 8006748:	f8d9 3000 	ldrmi.w	r3, [r9]
 800674c:	3302      	addmi	r3, #2
 800674e:	f8c9 3000 	strmi.w	r3, [r9]
 8006752:	6825      	ldr	r5, [r4, #0]
 8006754:	f015 0506 	ands.w	r5, r5, #6
 8006758:	d107      	bne.n	800676a <_printf_common+0x52>
 800675a:	f104 0a19 	add.w	sl, r4, #25
 800675e:	68e3      	ldr	r3, [r4, #12]
 8006760:	f8d9 2000 	ldr.w	r2, [r9]
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	429d      	cmp	r5, r3
 8006768:	db29      	blt.n	80067be <_printf_common+0xa6>
 800676a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	3300      	adds	r3, #0
 8006772:	bf18      	it	ne
 8006774:	2301      	movne	r3, #1
 8006776:	0692      	lsls	r2, r2, #26
 8006778:	d42e      	bmi.n	80067d8 <_printf_common+0xc0>
 800677a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800677e:	4639      	mov	r1, r7
 8006780:	4630      	mov	r0, r6
 8006782:	47c0      	blx	r8
 8006784:	3001      	adds	r0, #1
 8006786:	d021      	beq.n	80067cc <_printf_common+0xb4>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	68e5      	ldr	r5, [r4, #12]
 800678c:	f8d9 2000 	ldr.w	r2, [r9]
 8006790:	f003 0306 	and.w	r3, r3, #6
 8006794:	2b04      	cmp	r3, #4
 8006796:	bf08      	it	eq
 8006798:	1aad      	subeq	r5, r5, r2
 800679a:	68a3      	ldr	r3, [r4, #8]
 800679c:	6922      	ldr	r2, [r4, #16]
 800679e:	bf0c      	ite	eq
 80067a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067a4:	2500      	movne	r5, #0
 80067a6:	4293      	cmp	r3, r2
 80067a8:	bfc4      	itt	gt
 80067aa:	1a9b      	subgt	r3, r3, r2
 80067ac:	18ed      	addgt	r5, r5, r3
 80067ae:	f04f 0900 	mov.w	r9, #0
 80067b2:	341a      	adds	r4, #26
 80067b4:	454d      	cmp	r5, r9
 80067b6:	d11b      	bne.n	80067f0 <_printf_common+0xd8>
 80067b8:	2000      	movs	r0, #0
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	2301      	movs	r3, #1
 80067c0:	4652      	mov	r2, sl
 80067c2:	4639      	mov	r1, r7
 80067c4:	4630      	mov	r0, r6
 80067c6:	47c0      	blx	r8
 80067c8:	3001      	adds	r0, #1
 80067ca:	d103      	bne.n	80067d4 <_printf_common+0xbc>
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d4:	3501      	adds	r5, #1
 80067d6:	e7c2      	b.n	800675e <_printf_common+0x46>
 80067d8:	18e1      	adds	r1, r4, r3
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	2030      	movs	r0, #48	; 0x30
 80067de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067e2:	4422      	add	r2, r4
 80067e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067ec:	3302      	adds	r3, #2
 80067ee:	e7c4      	b.n	800677a <_printf_common+0x62>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4622      	mov	r2, r4
 80067f4:	4639      	mov	r1, r7
 80067f6:	4630      	mov	r0, r6
 80067f8:	47c0      	blx	r8
 80067fa:	3001      	adds	r0, #1
 80067fc:	d0e6      	beq.n	80067cc <_printf_common+0xb4>
 80067fe:	f109 0901 	add.w	r9, r9, #1
 8006802:	e7d7      	b.n	80067b4 <_printf_common+0x9c>

08006804 <_printf_i>:
 8006804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006808:	4617      	mov	r7, r2
 800680a:	7e0a      	ldrb	r2, [r1, #24]
 800680c:	b085      	sub	sp, #20
 800680e:	2a6e      	cmp	r2, #110	; 0x6e
 8006810:	4698      	mov	r8, r3
 8006812:	4606      	mov	r6, r0
 8006814:	460c      	mov	r4, r1
 8006816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006818:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800681c:	f000 80bc 	beq.w	8006998 <_printf_i+0x194>
 8006820:	d81a      	bhi.n	8006858 <_printf_i+0x54>
 8006822:	2a63      	cmp	r2, #99	; 0x63
 8006824:	d02e      	beq.n	8006884 <_printf_i+0x80>
 8006826:	d80a      	bhi.n	800683e <_printf_i+0x3a>
 8006828:	2a00      	cmp	r2, #0
 800682a:	f000 80c8 	beq.w	80069be <_printf_i+0x1ba>
 800682e:	2a58      	cmp	r2, #88	; 0x58
 8006830:	f000 808a 	beq.w	8006948 <_printf_i+0x144>
 8006834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006838:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800683c:	e02a      	b.n	8006894 <_printf_i+0x90>
 800683e:	2a64      	cmp	r2, #100	; 0x64
 8006840:	d001      	beq.n	8006846 <_printf_i+0x42>
 8006842:	2a69      	cmp	r2, #105	; 0x69
 8006844:	d1f6      	bne.n	8006834 <_printf_i+0x30>
 8006846:	6821      	ldr	r1, [r4, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800684e:	d023      	beq.n	8006898 <_printf_i+0x94>
 8006850:	1d11      	adds	r1, r2, #4
 8006852:	6019      	str	r1, [r3, #0]
 8006854:	6813      	ldr	r3, [r2, #0]
 8006856:	e027      	b.n	80068a8 <_printf_i+0xa4>
 8006858:	2a73      	cmp	r2, #115	; 0x73
 800685a:	f000 80b4 	beq.w	80069c6 <_printf_i+0x1c2>
 800685e:	d808      	bhi.n	8006872 <_printf_i+0x6e>
 8006860:	2a6f      	cmp	r2, #111	; 0x6f
 8006862:	d02a      	beq.n	80068ba <_printf_i+0xb6>
 8006864:	2a70      	cmp	r2, #112	; 0x70
 8006866:	d1e5      	bne.n	8006834 <_printf_i+0x30>
 8006868:	680a      	ldr	r2, [r1, #0]
 800686a:	f042 0220 	orr.w	r2, r2, #32
 800686e:	600a      	str	r2, [r1, #0]
 8006870:	e003      	b.n	800687a <_printf_i+0x76>
 8006872:	2a75      	cmp	r2, #117	; 0x75
 8006874:	d021      	beq.n	80068ba <_printf_i+0xb6>
 8006876:	2a78      	cmp	r2, #120	; 0x78
 8006878:	d1dc      	bne.n	8006834 <_printf_i+0x30>
 800687a:	2278      	movs	r2, #120	; 0x78
 800687c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006880:	496e      	ldr	r1, [pc, #440]	; (8006a3c <_printf_i+0x238>)
 8006882:	e064      	b.n	800694e <_printf_i+0x14a>
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800688a:	1d11      	adds	r1, r2, #4
 800688c:	6019      	str	r1, [r3, #0]
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006894:	2301      	movs	r3, #1
 8006896:	e0a3      	b.n	80069e0 <_printf_i+0x1dc>
 8006898:	f011 0f40 	tst.w	r1, #64	; 0x40
 800689c:	f102 0104 	add.w	r1, r2, #4
 80068a0:	6019      	str	r1, [r3, #0]
 80068a2:	d0d7      	beq.n	8006854 <_printf_i+0x50>
 80068a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	da03      	bge.n	80068b4 <_printf_i+0xb0>
 80068ac:	222d      	movs	r2, #45	; 0x2d
 80068ae:	425b      	negs	r3, r3
 80068b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80068b4:	4962      	ldr	r1, [pc, #392]	; (8006a40 <_printf_i+0x23c>)
 80068b6:	220a      	movs	r2, #10
 80068b8:	e017      	b.n	80068ea <_printf_i+0xe6>
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	6819      	ldr	r1, [r3, #0]
 80068be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80068c2:	d003      	beq.n	80068cc <_printf_i+0xc8>
 80068c4:	1d08      	adds	r0, r1, #4
 80068c6:	6018      	str	r0, [r3, #0]
 80068c8:	680b      	ldr	r3, [r1, #0]
 80068ca:	e006      	b.n	80068da <_printf_i+0xd6>
 80068cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068d0:	f101 0004 	add.w	r0, r1, #4
 80068d4:	6018      	str	r0, [r3, #0]
 80068d6:	d0f7      	beq.n	80068c8 <_printf_i+0xc4>
 80068d8:	880b      	ldrh	r3, [r1, #0]
 80068da:	4959      	ldr	r1, [pc, #356]	; (8006a40 <_printf_i+0x23c>)
 80068dc:	2a6f      	cmp	r2, #111	; 0x6f
 80068de:	bf14      	ite	ne
 80068e0:	220a      	movne	r2, #10
 80068e2:	2208      	moveq	r2, #8
 80068e4:	2000      	movs	r0, #0
 80068e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80068ea:	6865      	ldr	r5, [r4, #4]
 80068ec:	60a5      	str	r5, [r4, #8]
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	f2c0 809c 	blt.w	8006a2c <_printf_i+0x228>
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	f020 0004 	bic.w	r0, r0, #4
 80068fa:	6020      	str	r0, [r4, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d13f      	bne.n	8006980 <_printf_i+0x17c>
 8006900:	2d00      	cmp	r5, #0
 8006902:	f040 8095 	bne.w	8006a30 <_printf_i+0x22c>
 8006906:	4675      	mov	r5, lr
 8006908:	2a08      	cmp	r2, #8
 800690a:	d10b      	bne.n	8006924 <_printf_i+0x120>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	07da      	lsls	r2, r3, #31
 8006910:	d508      	bpl.n	8006924 <_printf_i+0x120>
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	6862      	ldr	r2, [r4, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	bfde      	ittt	le
 800691a:	2330      	movle	r3, #48	; 0x30
 800691c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006924:	ebae 0305 	sub.w	r3, lr, r5
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	f8cd 8000 	str.w	r8, [sp]
 800692e:	463b      	mov	r3, r7
 8006930:	aa03      	add	r2, sp, #12
 8006932:	4621      	mov	r1, r4
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff feef 	bl	8006718 <_printf_common>
 800693a:	3001      	adds	r0, #1
 800693c:	d155      	bne.n	80069ea <_printf_i+0x1e6>
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	b005      	add	sp, #20
 8006944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006948:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800694c:	493c      	ldr	r1, [pc, #240]	; (8006a40 <_printf_i+0x23c>)
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006956:	f100 0504 	add.w	r5, r0, #4
 800695a:	601d      	str	r5, [r3, #0]
 800695c:	d001      	beq.n	8006962 <_printf_i+0x15e>
 800695e:	6803      	ldr	r3, [r0, #0]
 8006960:	e002      	b.n	8006968 <_printf_i+0x164>
 8006962:	0655      	lsls	r5, r2, #25
 8006964:	d5fb      	bpl.n	800695e <_printf_i+0x15a>
 8006966:	8803      	ldrh	r3, [r0, #0]
 8006968:	07d0      	lsls	r0, r2, #31
 800696a:	bf44      	itt	mi
 800696c:	f042 0220 	orrmi.w	r2, r2, #32
 8006970:	6022      	strmi	r2, [r4, #0]
 8006972:	b91b      	cbnz	r3, 800697c <_printf_i+0x178>
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	f022 0220 	bic.w	r2, r2, #32
 800697a:	6022      	str	r2, [r4, #0]
 800697c:	2210      	movs	r2, #16
 800697e:	e7b1      	b.n	80068e4 <_printf_i+0xe0>
 8006980:	4675      	mov	r5, lr
 8006982:	fbb3 f0f2 	udiv	r0, r3, r2
 8006986:	fb02 3310 	mls	r3, r2, r0, r3
 800698a:	5ccb      	ldrb	r3, [r1, r3]
 800698c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006990:	4603      	mov	r3, r0
 8006992:	2800      	cmp	r0, #0
 8006994:	d1f5      	bne.n	8006982 <_printf_i+0x17e>
 8006996:	e7b7      	b.n	8006908 <_printf_i+0x104>
 8006998:	6808      	ldr	r0, [r1, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	6949      	ldr	r1, [r1, #20]
 800699e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80069a2:	d004      	beq.n	80069ae <_printf_i+0x1aa>
 80069a4:	1d10      	adds	r0, r2, #4
 80069a6:	6018      	str	r0, [r3, #0]
 80069a8:	6813      	ldr	r3, [r2, #0]
 80069aa:	6019      	str	r1, [r3, #0]
 80069ac:	e007      	b.n	80069be <_printf_i+0x1ba>
 80069ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069b2:	f102 0004 	add.w	r0, r2, #4
 80069b6:	6018      	str	r0, [r3, #0]
 80069b8:	6813      	ldr	r3, [r2, #0]
 80069ba:	d0f6      	beq.n	80069aa <_printf_i+0x1a6>
 80069bc:	8019      	strh	r1, [r3, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	4675      	mov	r5, lr
 80069c4:	e7b1      	b.n	800692a <_printf_i+0x126>
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	1d11      	adds	r1, r2, #4
 80069ca:	6019      	str	r1, [r3, #0]
 80069cc:	6815      	ldr	r5, [r2, #0]
 80069ce:	6862      	ldr	r2, [r4, #4]
 80069d0:	2100      	movs	r1, #0
 80069d2:	4628      	mov	r0, r5
 80069d4:	f7f9 fc04 	bl	80001e0 <memchr>
 80069d8:	b108      	cbz	r0, 80069de <_printf_i+0x1da>
 80069da:	1b40      	subs	r0, r0, r5
 80069dc:	6060      	str	r0, [r4, #4]
 80069de:	6863      	ldr	r3, [r4, #4]
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	2300      	movs	r3, #0
 80069e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e8:	e79f      	b.n	800692a <_printf_i+0x126>
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	462a      	mov	r2, r5
 80069ee:	4639      	mov	r1, r7
 80069f0:	4630      	mov	r0, r6
 80069f2:	47c0      	blx	r8
 80069f4:	3001      	adds	r0, #1
 80069f6:	d0a2      	beq.n	800693e <_printf_i+0x13a>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	079b      	lsls	r3, r3, #30
 80069fc:	d507      	bpl.n	8006a0e <_printf_i+0x20a>
 80069fe:	2500      	movs	r5, #0
 8006a00:	f104 0919 	add.w	r9, r4, #25
 8006a04:	68e3      	ldr	r3, [r4, #12]
 8006a06:	9a03      	ldr	r2, [sp, #12]
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	429d      	cmp	r5, r3
 8006a0c:	db05      	blt.n	8006a1a <_printf_i+0x216>
 8006a0e:	68e0      	ldr	r0, [r4, #12]
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	4298      	cmp	r0, r3
 8006a14:	bfb8      	it	lt
 8006a16:	4618      	movlt	r0, r3
 8006a18:	e793      	b.n	8006942 <_printf_i+0x13e>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	464a      	mov	r2, r9
 8006a1e:	4639      	mov	r1, r7
 8006a20:	4630      	mov	r0, r6
 8006a22:	47c0      	blx	r8
 8006a24:	3001      	adds	r0, #1
 8006a26:	d08a      	beq.n	800693e <_printf_i+0x13a>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	e7eb      	b.n	8006a04 <_printf_i+0x200>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1a7      	bne.n	8006980 <_printf_i+0x17c>
 8006a30:	780b      	ldrb	r3, [r1, #0]
 8006a32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a3a:	e765      	b.n	8006908 <_printf_i+0x104>
 8006a3c:	08006e11 	.word	0x08006e11
 8006a40:	08006e00 	.word	0x08006e00

08006a44 <__ascii_wctomb>:
 8006a44:	b149      	cbz	r1, 8006a5a <__ascii_wctomb+0x16>
 8006a46:	2aff      	cmp	r2, #255	; 0xff
 8006a48:	bf85      	ittet	hi
 8006a4a:	238a      	movhi	r3, #138	; 0x8a
 8006a4c:	6003      	strhi	r3, [r0, #0]
 8006a4e:	700a      	strbls	r2, [r1, #0]
 8006a50:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a54:	bf98      	it	ls
 8006a56:	2001      	movls	r0, #1
 8006a58:	4770      	bx	lr
 8006a5a:	4608      	mov	r0, r1
 8006a5c:	4770      	bx	lr

08006a5e <memmove>:
 8006a5e:	4288      	cmp	r0, r1
 8006a60:	b510      	push	{r4, lr}
 8006a62:	eb01 0302 	add.w	r3, r1, r2
 8006a66:	d803      	bhi.n	8006a70 <memmove+0x12>
 8006a68:	1e42      	subs	r2, r0, #1
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	d10c      	bne.n	8006a88 <memmove+0x2a>
 8006a6e:	bd10      	pop	{r4, pc}
 8006a70:	4298      	cmp	r0, r3
 8006a72:	d2f9      	bcs.n	8006a68 <memmove+0xa>
 8006a74:	1881      	adds	r1, r0, r2
 8006a76:	1ad2      	subs	r2, r2, r3
 8006a78:	42d3      	cmn	r3, r2
 8006a7a:	d100      	bne.n	8006a7e <memmove+0x20>
 8006a7c:	bd10      	pop	{r4, pc}
 8006a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a86:	e7f7      	b.n	8006a78 <memmove+0x1a>
 8006a88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a90:	e7eb      	b.n	8006a6a <memmove+0xc>

08006a92 <_realloc_r>:
 8006a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a94:	4607      	mov	r7, r0
 8006a96:	4614      	mov	r4, r2
 8006a98:	460e      	mov	r6, r1
 8006a9a:	b921      	cbnz	r1, 8006aa6 <_realloc_r+0x14>
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006aa2:	f7ff bb17 	b.w	80060d4 <_malloc_r>
 8006aa6:	b922      	cbnz	r2, 8006ab2 <_realloc_r+0x20>
 8006aa8:	f7ff fac6 	bl	8006038 <_free_r>
 8006aac:	4625      	mov	r5, r4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab2:	f000 f814 	bl	8006ade <_malloc_usable_size_r>
 8006ab6:	4284      	cmp	r4, r0
 8006ab8:	d90f      	bls.n	8006ada <_realloc_r+0x48>
 8006aba:	4621      	mov	r1, r4
 8006abc:	4638      	mov	r0, r7
 8006abe:	f7ff fb09 	bl	80060d4 <_malloc_r>
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d0f2      	beq.n	8006aae <_realloc_r+0x1c>
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4622      	mov	r2, r4
 8006acc:	f7ff faa0 	bl	8006010 <memcpy>
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f7ff fab0 	bl	8006038 <_free_r>
 8006ad8:	e7e9      	b.n	8006aae <_realloc_r+0x1c>
 8006ada:	4635      	mov	r5, r6
 8006adc:	e7e7      	b.n	8006aae <_realloc_r+0x1c>

08006ade <_malloc_usable_size_r>:
 8006ade:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	f1a0 0004 	sub.w	r0, r0, #4
 8006ae8:	bfbc      	itt	lt
 8006aea:	580b      	ldrlt	r3, [r1, r0]
 8006aec:	18c0      	addlt	r0, r0, r3
 8006aee:	4770      	bx	lr

08006af0 <sqrt>:
 8006af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006af4:	ed2d 8b02 	vpush	{d8}
 8006af8:	b08b      	sub	sp, #44	; 0x2c
 8006afa:	ec55 4b10 	vmov	r4, r5, d0
 8006afe:	f000 f851 	bl	8006ba4 <__ieee754_sqrt>
 8006b02:	4b26      	ldr	r3, [pc, #152]	; (8006b9c <sqrt+0xac>)
 8006b04:	eeb0 8a40 	vmov.f32	s16, s0
 8006b08:	eef0 8a60 	vmov.f32	s17, s1
 8006b0c:	f993 6000 	ldrsb.w	r6, [r3]
 8006b10:	1c73      	adds	r3, r6, #1
 8006b12:	d02a      	beq.n	8006b6a <sqrt+0x7a>
 8006b14:	4622      	mov	r2, r4
 8006b16:	462b      	mov	r3, r5
 8006b18:	4620      	mov	r0, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7fa f802 	bl	8000b24 <__aeabi_dcmpun>
 8006b20:	4607      	mov	r7, r0
 8006b22:	bb10      	cbnz	r0, 8006b6a <sqrt+0x7a>
 8006b24:	f04f 0800 	mov.w	r8, #0
 8006b28:	f04f 0900 	mov.w	r9, #0
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	4620      	mov	r0, r4
 8006b32:	4629      	mov	r1, r5
 8006b34:	f7f9 ffce 	bl	8000ad4 <__aeabi_dcmplt>
 8006b38:	b1b8      	cbz	r0, 8006b6a <sqrt+0x7a>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	4b18      	ldr	r3, [pc, #96]	; (8006ba0 <sqrt+0xb0>)
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	9708      	str	r7, [sp, #32]
 8006b44:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006b48:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b4c:	b9b6      	cbnz	r6, 8006b7c <sqrt+0x8c>
 8006b4e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006b52:	4668      	mov	r0, sp
 8006b54:	f000 f8d6 	bl	8006d04 <matherr>
 8006b58:	b1d0      	cbz	r0, 8006b90 <sqrt+0xa0>
 8006b5a:	9b08      	ldr	r3, [sp, #32]
 8006b5c:	b11b      	cbz	r3, 8006b66 <sqrt+0x76>
 8006b5e:	f000 f8d3 	bl	8006d08 <__errno>
 8006b62:	9b08      	ldr	r3, [sp, #32]
 8006b64:	6003      	str	r3, [r0, #0]
 8006b66:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006b6a:	eeb0 0a48 	vmov.f32	s0, s16
 8006b6e:	eef0 0a68 	vmov.f32	s1, s17
 8006b72:	b00b      	add	sp, #44	; 0x2c
 8006b74:	ecbd 8b02 	vpop	{d8}
 8006b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	4640      	mov	r0, r8
 8006b82:	4649      	mov	r1, r9
 8006b84:	f7f9 fe5e 	bl	8000844 <__aeabi_ddiv>
 8006b88:	2e02      	cmp	r6, #2
 8006b8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b8e:	d1e0      	bne.n	8006b52 <sqrt+0x62>
 8006b90:	f000 f8ba 	bl	8006d08 <__errno>
 8006b94:	2321      	movs	r3, #33	; 0x21
 8006b96:	6003      	str	r3, [r0, #0]
 8006b98:	e7df      	b.n	8006b5a <sqrt+0x6a>
 8006b9a:	bf00      	nop
 8006b9c:	20000200 	.word	0x20000200
 8006ba0:	08006f23 	.word	0x08006f23

08006ba4 <__ieee754_sqrt>:
 8006ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba8:	ec55 4b10 	vmov	r4, r5, d0
 8006bac:	4e54      	ldr	r6, [pc, #336]	; (8006d00 <__ieee754_sqrt+0x15c>)
 8006bae:	43ae      	bics	r6, r5
 8006bb0:	ee10 0a10 	vmov	r0, s0
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	462a      	mov	r2, r5
 8006bb8:	4621      	mov	r1, r4
 8006bba:	d113      	bne.n	8006be4 <__ieee754_sqrt+0x40>
 8006bbc:	ee10 2a10 	vmov	r2, s0
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	ee10 0a10 	vmov	r0, s0
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f7f9 fd12 	bl	80005f0 <__aeabi_dmul>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	f7f9 fb5a 	bl	800028c <__adddf3>
 8006bd8:	4604      	mov	r4, r0
 8006bda:	460d      	mov	r5, r1
 8006bdc:	ec45 4b10 	vmov	d0, r4, r5
 8006be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be4:	2d00      	cmp	r5, #0
 8006be6:	dc10      	bgt.n	8006c0a <__ieee754_sqrt+0x66>
 8006be8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006bec:	4330      	orrs	r0, r6
 8006bee:	d0f5      	beq.n	8006bdc <__ieee754_sqrt+0x38>
 8006bf0:	b15d      	cbz	r5, 8006c0a <__ieee754_sqrt+0x66>
 8006bf2:	ee10 2a10 	vmov	r2, s0
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7f9 fb44 	bl	8000288 <__aeabi_dsub>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	f7f9 fe1e 	bl	8000844 <__aeabi_ddiv>
 8006c08:	e7e6      	b.n	8006bd8 <__ieee754_sqrt+0x34>
 8006c0a:	151b      	asrs	r3, r3, #20
 8006c0c:	d10c      	bne.n	8006c28 <__ieee754_sqrt+0x84>
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	d06d      	beq.n	8006cee <__ieee754_sqrt+0x14a>
 8006c12:	2000      	movs	r0, #0
 8006c14:	02d6      	lsls	r6, r2, #11
 8006c16:	d56e      	bpl.n	8006cf6 <__ieee754_sqrt+0x152>
 8006c18:	1e44      	subs	r4, r0, #1
 8006c1a:	1b1b      	subs	r3, r3, r4
 8006c1c:	f1c0 0420 	rsb	r4, r0, #32
 8006c20:	fa21 f404 	lsr.w	r4, r1, r4
 8006c24:	4322      	orrs	r2, r4
 8006c26:	4081      	lsls	r1, r0
 8006c28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c2c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006c30:	07dd      	lsls	r5, r3, #31
 8006c32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c36:	bf42      	ittt	mi
 8006c38:	0052      	lslmi	r2, r2, #1
 8006c3a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8006c3e:	0049      	lslmi	r1, r1, #1
 8006c40:	1058      	asrs	r0, r3, #1
 8006c42:	2500      	movs	r5, #0
 8006c44:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8006c48:	441a      	add	r2, r3
 8006c4a:	0049      	lsls	r1, r1, #1
 8006c4c:	2316      	movs	r3, #22
 8006c4e:	462c      	mov	r4, r5
 8006c50:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006c54:	19a7      	adds	r7, r4, r6
 8006c56:	4297      	cmp	r7, r2
 8006c58:	bfde      	ittt	le
 8006c5a:	1bd2      	suble	r2, r2, r7
 8006c5c:	19bc      	addle	r4, r7, r6
 8006c5e:	19ad      	addle	r5, r5, r6
 8006c60:	0052      	lsls	r2, r2, #1
 8006c62:	3b01      	subs	r3, #1
 8006c64:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006c68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006c6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c70:	d1f0      	bne.n	8006c54 <__ieee754_sqrt+0xb0>
 8006c72:	f04f 0e20 	mov.w	lr, #32
 8006c76:	469c      	mov	ip, r3
 8006c78:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006c7c:	42a2      	cmp	r2, r4
 8006c7e:	eb06 070c 	add.w	r7, r6, ip
 8006c82:	dc02      	bgt.n	8006c8a <__ieee754_sqrt+0xe6>
 8006c84:	d112      	bne.n	8006cac <__ieee754_sqrt+0x108>
 8006c86:	428f      	cmp	r7, r1
 8006c88:	d810      	bhi.n	8006cac <__ieee754_sqrt+0x108>
 8006c8a:	2f00      	cmp	r7, #0
 8006c8c:	eb07 0c06 	add.w	ip, r7, r6
 8006c90:	da34      	bge.n	8006cfc <__ieee754_sqrt+0x158>
 8006c92:	f1bc 0f00 	cmp.w	ip, #0
 8006c96:	db31      	blt.n	8006cfc <__ieee754_sqrt+0x158>
 8006c98:	f104 0801 	add.w	r8, r4, #1
 8006c9c:	1b12      	subs	r2, r2, r4
 8006c9e:	428f      	cmp	r7, r1
 8006ca0:	bf88      	it	hi
 8006ca2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006ca6:	1bc9      	subs	r1, r1, r7
 8006ca8:	4433      	add	r3, r6
 8006caa:	4644      	mov	r4, r8
 8006cac:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006cb0:	f1be 0e01 	subs.w	lr, lr, #1
 8006cb4:	443a      	add	r2, r7
 8006cb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006cba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006cbe:	d1dd      	bne.n	8006c7c <__ieee754_sqrt+0xd8>
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	d006      	beq.n	8006cd2 <__ieee754_sqrt+0x12e>
 8006cc4:	1c5c      	adds	r4, r3, #1
 8006cc6:	bf13      	iteet	ne
 8006cc8:	3301      	addne	r3, #1
 8006cca:	3501      	addeq	r5, #1
 8006ccc:	4673      	moveq	r3, lr
 8006cce:	f023 0301 	bicne.w	r3, r3, #1
 8006cd2:	106a      	asrs	r2, r5, #1
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	07e9      	lsls	r1, r5, #31
 8006cd8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006cdc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006ce0:	bf48      	it	mi
 8006ce2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006ce6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006cea:	461c      	mov	r4, r3
 8006cec:	e776      	b.n	8006bdc <__ieee754_sqrt+0x38>
 8006cee:	0aca      	lsrs	r2, r1, #11
 8006cf0:	3b15      	subs	r3, #21
 8006cf2:	0549      	lsls	r1, r1, #21
 8006cf4:	e78b      	b.n	8006c0e <__ieee754_sqrt+0x6a>
 8006cf6:	0052      	lsls	r2, r2, #1
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	e78b      	b.n	8006c14 <__ieee754_sqrt+0x70>
 8006cfc:	46a0      	mov	r8, r4
 8006cfe:	e7cd      	b.n	8006c9c <__ieee754_sqrt+0xf8>
 8006d00:	7ff00000 	.word	0x7ff00000

08006d04 <matherr>:
 8006d04:	2000      	movs	r0, #0
 8006d06:	4770      	bx	lr

08006d08 <__errno>:
 8006d08:	4b01      	ldr	r3, [pc, #4]	; (8006d10 <__errno+0x8>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000030 	.word	0x20000030

08006d14 <_sbrk>:
 8006d14:	4b04      	ldr	r3, [pc, #16]	; (8006d28 <_sbrk+0x14>)
 8006d16:	6819      	ldr	r1, [r3, #0]
 8006d18:	4602      	mov	r2, r0
 8006d1a:	b909      	cbnz	r1, 8006d20 <_sbrk+0xc>
 8006d1c:	4903      	ldr	r1, [pc, #12]	; (8006d2c <_sbrk+0x18>)
 8006d1e:	6019      	str	r1, [r3, #0]
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	4402      	add	r2, r0
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	4770      	bx	lr
 8006d28:	200002f0 	.word	0x200002f0
 8006d2c:	200005e4 	.word	0x200005e4

08006d30 <_init>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	bf00      	nop
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr

08006d3c <_fini>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	bf00      	nop
 8006d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d42:	bc08      	pop	{r3}
 8006d44:	469e      	mov	lr, r3
 8006d46:	4770      	bx	lr
