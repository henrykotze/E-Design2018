
C:\Users\19231865\Desktop\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080050c8  080050c8  000150c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08005180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  8 .bss          00000178  20000088  20000088  00020088  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20000200  20000200  00020088  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c11f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000030ea  00000000  00000000  0003c1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008ecb  00000000  00000000  0003f2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  00048188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00048d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007d78  00000000  00000000  00049c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ab21e  00000000  00000000  00051978  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000fcb96  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000028d0  00000000  00000000  000fcc14  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0001be67  00000000  00000000  000ff4e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050b0 	.word	0x080050b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080050b0 	.word	0x080050b0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_uldivmod>:
 8000a98:	b953      	cbnz	r3, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9a:	b94a      	cbnz	r2, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	2800      	cmpeq	r0, #0
 8000aa2:	bf1c      	itt	ne
 8000aa4:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa8:	f04f 30ff 	movne.w	r0, #4294967295
 8000aac:	f000 b99e 	b.w	8000dec <__aeabi_idiv0>
 8000ab0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab8:	f000 f82a 	bl	8000b10 <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2ulz>:
 8000ac8:	b5d0      	push	{r4, r6, r7, lr}
 8000aca:	2200      	movs	r2, #0
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <__aeabi_d2ulz+0x40>)
 8000ace:	4606      	mov	r6, r0
 8000ad0:	460f      	mov	r7, r1
 8000ad2:	f7ff fd31 	bl	8000538 <__aeabi_dmul>
 8000ad6:	f000 f98b 	bl	8000df0 <__aeabi_d2uiz>
 8000ada:	4604      	mov	r4, r0
 8000adc:	f7ff fcb6 	bl	800044c <__aeabi_ui2d>
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <__aeabi_d2ulz+0x44>)
 8000ae4:	f7ff fd28 	bl	8000538 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4630      	mov	r0, r6
 8000aee:	4639      	mov	r1, r7
 8000af0:	f7ff fb6e 	bl	80001d0 <__aeabi_dsub>
 8000af4:	f000 f97c 	bl	8000df0 <__aeabi_d2uiz>
 8000af8:	4623      	mov	r3, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	ea42 0200 	orr.w	r2, r2, r0
 8000b00:	4610      	mov	r0, r2
 8000b02:	4619      	mov	r1, r3
 8000b04:	bdd0      	pop	{r4, r6, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	3df00000 	.word	0x3df00000
 8000b0c:	41f00000 	.word	0x41f00000

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	468c      	mov	ip, r1
 8000b16:	460d      	mov	r5, r1
 8000b18:	4604      	mov	r4, r0
 8000b1a:	9e08      	ldr	r6, [sp, #32]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d151      	bne.n	8000bc4 <__udivmoddi4+0xb4>
 8000b20:	428a      	cmp	r2, r1
 8000b22:	4617      	mov	r7, r2
 8000b24:	d96d      	bls.n	8000c02 <__udivmoddi4+0xf2>
 8000b26:	fab2 fe82 	clz	lr, r2
 8000b2a:	f1be 0f00 	cmp.w	lr, #0
 8000b2e:	d00b      	beq.n	8000b48 <__udivmoddi4+0x38>
 8000b30:	f1ce 0c20 	rsb	ip, lr, #32
 8000b34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b4c:	0c25      	lsrs	r5, r4, #16
 8000b4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000b52:	fa1f f987 	uxth.w	r9, r7
 8000b56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b5e:	fb08 f309 	mul.w	r3, r8, r9
 8000b62:	42ab      	cmp	r3, r5
 8000b64:	d90a      	bls.n	8000b7c <__udivmoddi4+0x6c>
 8000b66:	19ed      	adds	r5, r5, r7
 8000b68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b6c:	f080 8123 	bcs.w	8000db6 <__udivmoddi4+0x2a6>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	f240 8120 	bls.w	8000db6 <__udivmoddi4+0x2a6>
 8000b76:	f1a8 0802 	sub.w	r8, r8, #2
 8000b7a:	443d      	add	r5, r7
 8000b7c:	1aed      	subs	r5, r5, r3
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b8c:	fb00 f909 	mul.w	r9, r0, r9
 8000b90:	45a1      	cmp	r9, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x98>
 8000b94:	19e4      	adds	r4, r4, r7
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 810a 	bcs.w	8000db2 <__udivmoddi4+0x2a2>
 8000b9e:	45a1      	cmp	r9, r4
 8000ba0:	f240 8107 	bls.w	8000db2 <__udivmoddi4+0x2a2>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	eba4 0409 	sub.w	r4, r4, r9
 8000bac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d061      	beq.n	8000c7a <__udivmoddi4+0x16a>
 8000bb6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bba:	2300      	movs	r3, #0
 8000bbc:	6034      	str	r4, [r6, #0]
 8000bbe:	6073      	str	r3, [r6, #4]
 8000bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0xc8>
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d054      	beq.n	8000c76 <__udivmoddi4+0x166>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	f040 808e 	bne.w	8000cfe <__udivmoddi4+0x1ee>
 8000be2:	42ab      	cmp	r3, r5
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xdc>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2d0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb65 0503 	sbc.w	r5, r5, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	46ac      	mov	ip, r5
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d03f      	beq.n	8000c7a <__udivmoddi4+0x16a>
 8000bfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	b912      	cbnz	r2, 8000c0a <__udivmoddi4+0xfa>
 8000c04:	2701      	movs	r7, #1
 8000c06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c0a:	fab7 fe87 	clz	lr, r7
 8000c0e:	f1be 0f00 	cmp.w	lr, #0
 8000c12:	d134      	bne.n	8000c7e <__udivmoddi4+0x16e>
 8000c14:	1beb      	subs	r3, r5, r7
 8000c16:	0c3a      	lsrs	r2, r7, #16
 8000c18:	fa1f fc87 	uxth.w	ip, r7
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c22:	0c25      	lsrs	r5, r4, #16
 8000c24:	fb02 3318 	mls	r3, r2, r8, r3
 8000c28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c2c:	fb0c f308 	mul.w	r3, ip, r8
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x134>
 8000c34:	19ed      	adds	r5, r5, r7
 8000c36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x132>
 8000c3c:	42ab      	cmp	r3, r5
 8000c3e:	f200 80d1 	bhi.w	8000de4 <__udivmoddi4+0x2d4>
 8000c42:	4680      	mov	r8, r0
 8000c44:	1aed      	subs	r5, r5, r3
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000c50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c54:	fb0c fc00 	mul.w	ip, ip, r0
 8000c58:	45a4      	cmp	ip, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x15c>
 8000c5c:	19e4      	adds	r4, r4, r7
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x15a>
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	f200 80b8 	bhi.w	8000dda <__udivmoddi4+0x2ca>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c74:	e79d      	b.n	8000bb2 <__udivmoddi4+0xa2>
 8000c76:	4631      	mov	r1, r6
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	f1ce 0420 	rsb	r4, lr, #32
 8000c82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000c8e:	0c3a      	lsrs	r2, r7, #16
 8000c90:	fa25 f404 	lsr.w	r4, r5, r4
 8000c94:	ea48 0803 	orr.w	r8, r8, r3
 8000c98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ca0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cac:	fb01 f30c 	mul.w	r3, r1, ip
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1bc>
 8000cb8:	19ed      	adds	r5, r5, r7
 8000cba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cbe:	f080 808a 	bcs.w	8000dd6 <__udivmoddi4+0x2c6>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	f240 8087 	bls.w	8000dd6 <__udivmoddi4+0x2c6>
 8000cc8:	3902      	subs	r1, #2
 8000cca:	443d      	add	r5, r7
 8000ccc:	1aeb      	subs	r3, r5, r3
 8000cce:	fa1f f588 	uxth.w	r5, r8
 8000cd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cd6:	fb02 3310 	mls	r3, r2, r0, r3
 8000cda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cde:	fb00 f30c 	mul.w	r3, r0, ip
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x1e6>
 8000ce6:	19ed      	adds	r5, r5, r7
 8000ce8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cec:	d26f      	bcs.n	8000dce <__udivmoddi4+0x2be>
 8000cee:	42ab      	cmp	r3, r5
 8000cf0:	d96d      	bls.n	8000dce <__udivmoddi4+0x2be>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	443d      	add	r5, r7
 8000cf6:	1aeb      	subs	r3, r5, r3
 8000cf8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfc:	e78f      	b.n	8000c1e <__udivmoddi4+0x10e>
 8000cfe:	f1c1 0720 	rsb	r7, r1, #32
 8000d02:	fa22 f807 	lsr.w	r8, r2, r7
 8000d06:	408b      	lsls	r3, r1
 8000d08:	fa05 f401 	lsl.w	r4, r5, r1
 8000d0c:	ea48 0303 	orr.w	r3, r8, r3
 8000d10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d18:	40fd      	lsrs	r5, r7
 8000d1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d2a:	fa1f f883 	uxth.w	r8, r3
 8000d2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d32:	fb09 f408 	mul.w	r4, r9, r8
 8000d36:	42ac      	cmp	r4, r5
 8000d38:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x244>
 8000d42:	18ed      	adds	r5, r5, r3
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	d243      	bcs.n	8000dd2 <__udivmoddi4+0x2c2>
 8000d4a:	42ac      	cmp	r4, r5
 8000d4c:	d941      	bls.n	8000dd2 <__udivmoddi4+0x2c2>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	441d      	add	r5, r3
 8000d54:	1b2d      	subs	r5, r5, r4
 8000d56:	fa1f fe8e 	uxth.w	lr, lr
 8000d5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45a0      	cmp	r8, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x26e>
 8000d6e:	18e4      	adds	r4, r4, r3
 8000d70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d74:	d229      	bcs.n	8000dca <__udivmoddi4+0x2ba>
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	d927      	bls.n	8000dca <__udivmoddi4+0x2ba>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	441c      	add	r4, r3
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba4 0408 	sub.w	r4, r4, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454c      	cmp	r4, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	464d      	mov	r5, r9
 8000d90:	d315      	bcc.n	8000dbe <__udivmoddi4+0x2ae>
 8000d92:	d012      	beq.n	8000dba <__udivmoddi4+0x2aa>
 8000d94:	b156      	cbz	r6, 8000dac <__udivmoddi4+0x29c>
 8000d96:	ebba 030e 	subs.w	r3, sl, lr
 8000d9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000d9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431f      	orrs	r7, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	6037      	str	r7, [r6, #0]
 8000daa:	6074      	str	r4, [r6, #4]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	4618      	mov	r0, r3
 8000db4:	e6f8      	b.n	8000ba8 <__udivmoddi4+0x98>
 8000db6:	4690      	mov	r8, r2
 8000db8:	e6e0      	b.n	8000b7c <__udivmoddi4+0x6c>
 8000dba:	45c2      	cmp	sl, r8
 8000dbc:	d2ea      	bcs.n	8000d94 <__udivmoddi4+0x284>
 8000dbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc2:	eb69 0503 	sbc.w	r5, r9, r3
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7e4      	b.n	8000d94 <__udivmoddi4+0x284>
 8000dca:	4628      	mov	r0, r5
 8000dcc:	e7d7      	b.n	8000d7e <__udivmoddi4+0x26e>
 8000dce:	4640      	mov	r0, r8
 8000dd0:	e791      	b.n	8000cf6 <__udivmoddi4+0x1e6>
 8000dd2:	4681      	mov	r9, r0
 8000dd4:	e7be      	b.n	8000d54 <__udivmoddi4+0x244>
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	e778      	b.n	8000ccc <__udivmoddi4+0x1bc>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	e745      	b.n	8000c6c <__udivmoddi4+0x15c>
 8000de0:	4608      	mov	r0, r1
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xe6>
 8000de4:	f1a8 0802 	sub.w	r8, r8, #2
 8000de8:	443d      	add	r5, r7
 8000dea:	e72b      	b.n	8000c44 <__udivmoddi4+0x134>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <__aeabi_d2uiz>:
 8000df0:	004a      	lsls	r2, r1, #1
 8000df2:	d211      	bcs.n	8000e18 <__aeabi_d2uiz+0x28>
 8000df4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000df8:	d211      	bcs.n	8000e1e <__aeabi_d2uiz+0x2e>
 8000dfa:	d50d      	bpl.n	8000e18 <__aeabi_d2uiz+0x28>
 8000dfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e04:	d40e      	bmi.n	8000e24 <__aeabi_d2uiz+0x34>
 8000e06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e12:	fa23 f002 	lsr.w	r0, r3, r2
 8000e16:	4770      	bx	lr
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	4770      	bx	lr
 8000e1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e22:	d102      	bne.n	8000e2a <__aeabi_d2uiz+0x3a>
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	4770      	bx	lr
 8000e2a:	f04f 0000 	mov.w	r0, #0
 8000e2e:	4770      	bx	lr

08000e30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_InitTick+0x24>)
{
 8000e34:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e40:	f000 fd92 	bl	8001968 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	4621      	mov	r1, r4
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 fd4c 	bl	80018e8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000e50:	2000      	movs	r0, #0
 8000e52:	bd10      	pop	{r4, pc}
 8000e54:	20000000 	.word	0x20000000

08000e58 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x20>)
{
 8000e5a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	6813      	ldr	r3, [r2, #0]
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 fd2d 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff ffe0 	bl	8000e30 <HAL_InitTick>
  HAL_MspInit();
 8000e70:	f002 fe6c 	bl	8003b4c <HAL_MspInit>
}
 8000e74:	2000      	movs	r0, #0
 8000e76:	bd08      	pop	{r3, pc}
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e7c:	4a02      	ldr	r2, [pc, #8]	; (8000e88 <HAL_IncTick+0xc>)
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200000ec 	.word	0x200000ec

08000e8c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000e8c:	4b01      	ldr	r3, [pc, #4]	; (8000e94 <HAL_GetTick+0x8>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200000ec 	.word	0x200000ec

08000e98 <HAL_ADC_LevelOutOfWindowCallback>:
 8000e98:	4770      	bx	lr

08000e9a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e9a:	4770      	bx	lr

08000e9c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e9e:	6803      	ldr	r3, [r0, #0]
{
 8000ea0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000ea2:	6898      	ldr	r0, [r3, #8]
 8000ea4:	f000 0003 	and.w	r0, r0, #3
 8000ea8:	2801      	cmp	r0, #1
 8000eaa:	d001      	beq.n	8000eb0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000eac:	2000      	movs	r0, #0
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	07d2      	lsls	r2, r2, #31
 8000eb4:	d5fa      	bpl.n	8000eac <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	f002 020d 	and.w	r2, r2, #13
 8000ebc:	2a01      	cmp	r2, #1
 8000ebe:	d11b      	bne.n	8000ef8 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	f042 0202 	orr.w	r2, r2, #2
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	07db      	lsls	r3, r3, #31
 8000ed8:	d5e8      	bpl.n	8000eac <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eda:	f7ff ffd7 	bl	8000e8c <HAL_GetTick>
 8000ede:	1b40      	subs	r0, r0, r5
 8000ee0:	2802      	cmp	r0, #2
 8000ee2:	d9f6      	bls.n	8000ed2 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000f08:	bd38      	pop	{r3, r4, r5, pc}
	...

08000f0c <ADC_Enable>:
{
 8000f0c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f0e:	6803      	ldr	r3, [r0, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	2a01      	cmp	r2, #1
{
 8000f18:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f1a:	d104      	bne.n	8000f26 <ADC_Enable+0x1a>
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	07d2      	lsls	r2, r2, #31
 8000f20:	d501      	bpl.n	8000f26 <ADC_Enable+0x1a>
  return HAL_OK;
 8000f22:	2000      	movs	r0, #0
 8000f24:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000f26:	6899      	ldr	r1, [r3, #8]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <ADC_Enable+0x58>)
 8000f2a:	4211      	tst	r1, r2
 8000f2c:	d10f      	bne.n	8000f4e <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8000f36:	f7ff ffa9 	bl	8000e8c <HAL_GetTick>
 8000f3a:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	07db      	lsls	r3, r3, #31
 8000f42:	d4ee      	bmi.n	8000f22 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f44:	f7ff ffa2 	bl	8000e8c <HAL_GetTick>
 8000f48:	1b40      	subs	r0, r0, r5
 8000f4a:	2802      	cmp	r0, #2
 8000f4c:	d9f6      	bls.n	8000f3c <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	bd38      	pop	{r3, r4, r5, pc}
 8000f62:	bf00      	nop
 8000f64:	8000003f 	.word	0x8000003f

08000f68 <HAL_ADC_Init>:
{
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000f70:	4604      	mov	r4, r0
 8000f72:	2800      	cmp	r0, #0
 8000f74:	f000 80e3 	beq.w	800113e <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000f7a:	06d5      	lsls	r5, r2, #27
 8000f7c:	f100 80cc 	bmi.w	8001118 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f80:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8092 	beq.w	80010ac <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f88:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	00d2      	lsls	r2, r2, #3
 8000f90:	d502      	bpl.n	8000f98 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f92:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	d50a      	bpl.n	8000fae <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f9a:	f023 0312 	bic.w	r3, r3, #18
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000fac:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fb0:	06de      	lsls	r6, r3, #27
 8000fb2:	f100 80be 	bmi.w	8001132 <HAL_ADC_Init+0x1ca>
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	f040 80bb 	bne.w	8001132 <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000fc0:	f011 0104 	ands.w	r1, r1, #4
 8000fc4:	f040 80b5 	bne.w	8001132 <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fca:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000fce:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fd8:	bf0c      	ite	eq
 8000fda:	4a5a      	ldreq	r2, [pc, #360]	; (8001144 <HAL_ADC_Init+0x1dc>)
 8000fdc:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000fe0:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	f002 0203 	and.w	r2, r2, #3
 8000fe8:	2a01      	cmp	r2, #1
 8000fea:	d102      	bne.n	8000ff2 <HAL_ADC_Init+0x8a>
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	07d5      	lsls	r5, r2, #31
 8000ff0:	d410      	bmi.n	8001014 <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ff2:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ff4:	b13a      	cbz	r2, 8001006 <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ff6:	6895      	ldr	r5, [r2, #8]
 8000ff8:	f005 0503 	and.w	r5, r5, #3
 8000ffc:	2d01      	cmp	r5, #1
 8000ffe:	d102      	bne.n	8001006 <HAL_ADC_Init+0x9e>
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	07d2      	lsls	r2, r2, #31
 8001004:	d406      	bmi.n	8001014 <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001006:	4d50      	ldr	r5, [pc, #320]	; (8001148 <HAL_ADC_Init+0x1e0>)
 8001008:	6866      	ldr	r6, [r4, #4]
 800100a:	68aa      	ldr	r2, [r5, #8]
 800100c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001010:	4332      	orrs	r2, r6
 8001012:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001014:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001016:	68a6      	ldr	r6, [r4, #8]
 8001018:	69e5      	ldr	r5, [r4, #28]
 800101a:	2a01      	cmp	r2, #1
 800101c:	68e2      	ldr	r2, [r4, #12]
 800101e:	ea42 0206 	orr.w	r2, r2, r6
 8001022:	bf18      	it	ne
 8001024:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8001028:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 800102c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800102e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001030:	2901      	cmp	r1, #1
 8001032:	d107      	bne.n	8001044 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001034:	2d00      	cmp	r5, #0
 8001036:	d171      	bne.n	800111c <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001038:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800103a:	3901      	subs	r1, #1
 800103c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001040:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001044:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001046:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001048:	bf1e      	ittt	ne
 800104a:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 800104c:	4329      	orrne	r1, r5
 800104e:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001050:	6899      	ldr	r1, [r3, #8]
 8001052:	f011 0f0c 	tst.w	r1, #12
 8001056:	d10b      	bne.n	8001070 <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001058:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800105a:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800105c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001060:	f021 0102 	bic.w	r1, r1, #2
 8001064:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001068:	0049      	lsls	r1, r1, #1
 800106a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 800106e:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001070:	68dd      	ldr	r5, [r3, #12]
 8001072:	4936      	ldr	r1, [pc, #216]	; (800114c <HAL_ADC_Init+0x1e4>)
 8001074:	4029      	ands	r1, r5
 8001076:	430a      	orrs	r2, r1
 8001078:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800107a:	6922      	ldr	r2, [r4, #16]
 800107c:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800107e:	bf05      	ittet	eq
 8001080:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001082:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001084:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001086:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800108a:	bf06      	itte	eq
 800108c:	f021 010f 	biceq.w	r1, r1, #15
 8001090:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001092:	f022 020f 	bicne.w	r2, r2, #15
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001098:	2300      	movs	r3, #0
 800109a:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800109c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80010a8:	b016      	add	sp, #88	; 0x58
 80010aa:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80010ac:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80010ae:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80010b0:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80010b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80010b6:	f002 fd87 	bl	8003bc8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	00d8      	lsls	r0, r3, #3
 80010c0:	f53f af62 	bmi.w	8000f88 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff fee9 	bl	8000e9c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010cc:	06d1      	lsls	r1, r2, #27
 80010ce:	f53f af5c 	bmi.w	8000f8a <HAL_ADC_Init+0x22>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	f47f af59 	bne.w	8000f8a <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 80010d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010de:	f023 0302 	bic.w	r3, r3, #2
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010f0:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010f8:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_ADC_Init+0x1e8>)
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_ADC_Init+0x1ec>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	fbb3 f2f2 	udiv	r2, r3, r2
 8001104:	230a      	movs	r3, #10
 8001106:	4353      	muls	r3, r2
            wait_loop_index--;
 8001108:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800110a:	9b00      	ldr	r3, [sp, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f43f af3b 	beq.w	8000f88 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 8001112:	9b00      	ldr	r3, [sp, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	e7f7      	b.n	8001108 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001118:	4618      	mov	r0, r3
 800111a:	e748      	b.n	8000fae <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 800111c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800111e:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8001122:	f041 0120 	orr.w	r1, r1, #32
 8001126:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001128:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800112a:	f041 0101 	orr.w	r1, r1, #1
 800112e:	64a1      	str	r1, [r4, #72]	; 0x48
 8001130:	e788      	b.n	8001044 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001134:	f023 0312 	bic.w	r3, r3, #18
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800113e:	2001      	movs	r0, #1
 8001140:	e7b2      	b.n	80010a8 <HAL_ADC_Init+0x140>
 8001142:	bf00      	nop
 8001144:	50000100 	.word	0x50000100
 8001148:	50000300 	.word	0x50000300
 800114c:	fff0c007 	.word	0xfff0c007
 8001150:	20000000 	.word	0x20000000
 8001154:	000f4240 	.word	0x000f4240

08001158 <HAL_ADC_Start_IT>:
{
 8001158:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800115a:	6803      	ldr	r3, [r0, #0]
 800115c:	689d      	ldr	r5, [r3, #8]
 800115e:	f015 0504 	ands.w	r5, r5, #4
{
 8001162:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001164:	d16d      	bne.n	8001242 <HAL_ADC_Start_IT+0xea>
    __HAL_LOCK(hadc);
 8001166:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800116a:	2b01      	cmp	r3, #1
 800116c:	d069      	beq.n	8001242 <HAL_ADC_Start_IT+0xea>
 800116e:	2301      	movs	r3, #1
 8001170:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8001174:	f7ff feca 	bl	8000f0c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001178:	2800      	cmp	r0, #0
 800117a:	d15f      	bne.n	800123c <HAL_ADC_Start_IT+0xe4>
      ADC_STATE_CLR_SET(hadc->State,
 800117c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800117e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_ADC_Start_IT+0xf0>)
 800118e:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001190:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001192:	f013 0f1f 	tst.w	r3, #31
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	d002      	beq.n	80011a0 <HAL_ADC_Start_IT+0x48>
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d143      	bne.n	8001228 <HAL_ADC_Start_IT+0xd0>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80011a4:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011a6:	68da      	ldr	r2, [r3, #12]
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011a8:	0195      	lsls	r5, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011aa:	bf41      	itttt	mi
 80011ac:	6c62      	ldrmi	r2, [r4, #68]	; 0x44
 80011ae:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80011b2:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80011b6:	6462      	strmi	r2, [r4, #68]	; 0x44
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80011ba:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011be:	bf1c      	itt	ne
 80011c0:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 80011c2:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011ce:	221c      	movs	r2, #28
 80011d0:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 80011d2:	6962      	ldr	r2, [r4, #20]
 80011d4:	2a08      	cmp	r2, #8
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	bf03      	ittte	eq
 80011da:	f022 0204 	biceq.w	r2, r2, #4
 80011de:	605a      	streq	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80011e0:	685a      	ldreq	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80011e2:	f042 020c 	orrne.w	r2, r2, #12
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80011e6:	bf08      	it	eq
 80011e8:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80011ec:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80011ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80011f0:	2a01      	cmp	r2, #1
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80011f2:	bf02      	ittt	eq
 80011f4:	685a      	ldreq	r2, [r3, #4]
 80011f6:	f022 0210 	biceq.w	r2, r2, #16
 80011fa:	605a      	streq	r2, [r3, #4]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <HAL_ADC_Start_IT+0xf0>)
 80011fe:	6891      	ldr	r1, [r2, #8]
 8001200:	06c9      	lsls	r1, r1, #27
 8001202:	d00c      	beq.n	800121e <HAL_ADC_Start_IT+0xc6>
 8001204:	6891      	ldr	r1, [r2, #8]
 8001206:	f001 011f 	and.w	r1, r1, #31
 800120a:	2905      	cmp	r1, #5
 800120c:	d007      	beq.n	800121e <HAL_ADC_Start_IT+0xc6>
 800120e:	6892      	ldr	r2, [r2, #8]
 8001210:	f002 021f 	and.w	r2, r2, #31
 8001214:	2a09      	cmp	r2, #9
 8001216:	d002      	beq.n	800121e <HAL_ADC_Start_IT+0xc6>
 8001218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800121c:	d112      	bne.n	8001244 <HAL_ADC_Start_IT+0xec>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	f042 0204 	orr.w	r2, r2, #4
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001228:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800122c:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_ADC_Start_IT+0xf4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d1c1      	bne.n	80011b8 <HAL_ADC_Start_IT+0x60>
 8001234:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001238:	68d2      	ldr	r2, [r2, #12]
 800123a:	e7b5      	b.n	80011a8 <HAL_ADC_Start_IT+0x50>
      __HAL_UNLOCK(hadc);
 800123c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 8001240:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8001242:	2002      	movs	r0, #2
}
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	bf00      	nop
 8001248:	50000300 	.word	0x50000300
 800124c:	50000100 	.word	0x50000100

08001250 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001250:	6803      	ldr	r3, [r0, #0]
 8001252:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001254:	4770      	bx	lr

08001256 <HAL_ADCEx_InjectedConvCpltCallback>:
 8001256:	4770      	bx	lr

08001258 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8001258:	4770      	bx	lr

0800125a <HAL_ADCEx_LevelOutOfWindow2Callback>:
 800125a:	4770      	bx	lr

0800125c <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 800125c:	4770      	bx	lr
	...

08001260 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001260:	6803      	ldr	r3, [r0, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	0751      	lsls	r1, r2, #29
{
 8001266:	b510      	push	{r4, lr}
 8001268:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800126a:	d502      	bpl.n	8001272 <HAL_ADC_IRQHandler+0x12>
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	0752      	lsls	r2, r2, #29
 8001270:	d405      	bmi.n	800127e <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001272:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001274:	0710      	lsls	r0, r2, #28
 8001276:	d53e      	bpl.n	80012f6 <HAL_ADC_IRQHandler+0x96>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	0711      	lsls	r1, r2, #28
 800127c:	d53b      	bpl.n	80012f6 <HAL_ADC_IRQHandler+0x96>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001280:	06d2      	lsls	r2, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001282:	bf5e      	ittt	pl
 8001284:	6c62      	ldrpl	r2, [r4, #68]	; 0x44
 8001286:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800128a:	6462      	strpl	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800128c:	4a92      	ldr	r2, [pc, #584]	; (80014d8 <HAL_ADC_IRQHandler+0x278>)
 800128e:	6891      	ldr	r1, [r2, #8]
 8001290:	06c8      	lsls	r0, r1, #27
 8001292:	d00d      	beq.n	80012b0 <HAL_ADC_IRQHandler+0x50>
 8001294:	6891      	ldr	r1, [r2, #8]
 8001296:	f001 011f 	and.w	r1, r1, #31
 800129a:	2905      	cmp	r1, #5
 800129c:	d008      	beq.n	80012b0 <HAL_ADC_IRQHandler+0x50>
 800129e:	6892      	ldr	r2, [r2, #8]
 80012a0:	f002 021f 	and.w	r2, r2, #31
 80012a4:	2a09      	cmp	r2, #9
 80012a6:	d003      	beq.n	80012b0 <HAL_ADC_IRQHandler+0x50>
 80012a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ac:	f040 80e4 	bne.w	8001478 <HAL_ADC_IRQHandler+0x218>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80012b0:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80012b2:	68d9      	ldr	r1, [r3, #12]
 80012b4:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80012b8:	d117      	bne.n	80012ea <HAL_ADC_IRQHandler+0x8a>
 80012ba:	0491      	lsls	r1, r2, #18
 80012bc:	d415      	bmi.n	80012ea <HAL_ADC_IRQHandler+0x8a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	0712      	lsls	r2, r2, #28
 80012c2:	d512      	bpl.n	80012ea <HAL_ADC_IRQHandler+0x8a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	0750      	lsls	r0, r2, #29
 80012c8:	f100 80da 	bmi.w	8001480 <HAL_ADC_IRQHandler+0x220>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	f022 020c 	bic.w	r2, r2, #12
 80012d2:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012da:	6463      	str	r3, [r4, #68]	; 0x44
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012de:	04d9      	lsls	r1, r3, #19
 80012e0:	d403      	bmi.n	80012ea <HAL_ADC_IRQHandler+0x8a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 80012ea:	4620      	mov	r0, r4
 80012ec:	f002 f810 	bl	8003310 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	0692      	lsls	r2, r2, #26
 80012fc:	d502      	bpl.n	8001304 <HAL_ADC_IRQHandler+0xa4>
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	0690      	lsls	r0, r2, #26
 8001302:	d405      	bmi.n	8001310 <HAL_ADC_IRQHandler+0xb0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001304:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001306:	0651      	lsls	r1, r2, #25
 8001308:	d556      	bpl.n	80013b8 <HAL_ADC_IRQHandler+0x158>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	0652      	lsls	r2, r2, #25
 800130e:	d553      	bpl.n	80013b8 <HAL_ADC_IRQHandler+0x158>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001310:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001316:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001318:	4a6f      	ldr	r2, [pc, #444]	; (80014d8 <HAL_ADC_IRQHandler+0x278>)
 800131a:	6891      	ldr	r1, [r2, #8]
 800131c:	06c8      	lsls	r0, r1, #27
 800131e:	d00d      	beq.n	800133c <HAL_ADC_IRQHandler+0xdc>
 8001320:	6891      	ldr	r1, [r2, #8]
 8001322:	f001 011f 	and.w	r1, r1, #31
 8001326:	2905      	cmp	r1, #5
 8001328:	d008      	beq.n	800133c <HAL_ADC_IRQHandler+0xdc>
 800132a:	6892      	ldr	r2, [r2, #8]
 800132c:	f002 021f 	and.w	r2, r2, #31
 8001330:	2a09      	cmp	r2, #9
 8001332:	d003      	beq.n	800133c <HAL_ADC_IRQHandler+0xdc>
 8001334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001338:	f040 80ab 	bne.w	8001492 <HAL_ADC_IRQHandler+0x232>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800133c:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800133e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001340:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8001344:	d007      	beq.n	8001356 <HAL_ADC_IRQHandler+0xf6>
 8001346:	0191      	lsls	r1, r2, #6
 8001348:	d430      	bmi.n	80013ac <HAL_ADC_IRQHandler+0x14c>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800134a:	68d9      	ldr	r1, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800134c:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8001350:	d12c      	bne.n	80013ac <HAL_ADC_IRQHandler+0x14c>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001352:	0492      	lsls	r2, r2, #18
 8001354:	d42a      	bmi.n	80013ac <HAL_ADC_IRQHandler+0x14c>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	0650      	lsls	r0, r2, #25
 800135a:	d527      	bpl.n	80013ac <HAL_ADC_IRQHandler+0x14c>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800135c:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_ADC_IRQHandler+0x278>)
 800135e:	6891      	ldr	r1, [r2, #8]
 8001360:	06c9      	lsls	r1, r1, #27
 8001362:	d00d      	beq.n	8001380 <HAL_ADC_IRQHandler+0x120>
 8001364:	6891      	ldr	r1, [r2, #8]
 8001366:	f001 011f 	and.w	r1, r1, #31
 800136a:	2906      	cmp	r1, #6
 800136c:	d008      	beq.n	8001380 <HAL_ADC_IRQHandler+0x120>
 800136e:	6892      	ldr	r2, [r2, #8]
 8001370:	f002 021f 	and.w	r2, r2, #31
 8001374:	2a07      	cmp	r2, #7
 8001376:	d003      	beq.n	8001380 <HAL_ADC_IRQHandler+0x120>
 8001378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137c:	f040 808d 	bne.w	800149a <HAL_ADC_IRQHandler+0x23a>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001380:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001382:	0292      	lsls	r2, r2, #10
 8001384:	d412      	bmi.n	80013ac <HAL_ADC_IRQHandler+0x14c>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	0710      	lsls	r0, r2, #28
 800138a:	f100 808a 	bmi.w	80014a2 <HAL_ADC_IRQHandler+0x242>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001394:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001396:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800139c:	6463      	str	r3, [r4, #68]	; 0x44
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800139e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013a0:	05d9      	lsls	r1, r3, #23
 80013a2:	d403      	bmi.n	80013ac <HAL_ADC_IRQHandler+0x14c>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ac:	4620      	mov	r0, r4
 80013ae:	f7ff ff52 	bl	8001256 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	2260      	movs	r2, #96	; 0x60
 80013b6:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	0612      	lsls	r2, r2, #24
 80013be:	d50c      	bpl.n	80013da <HAL_ADC_IRQHandler+0x17a>
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	061b      	lsls	r3, r3, #24
 80013c4:	d509      	bpl.n	80013da <HAL_ADC_IRQHandler+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fd62 	bl	8000e98 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	05d0      	lsls	r0, r2, #23
 80013e0:	d50d      	bpl.n	80013fe <HAL_ADC_IRQHandler+0x19e>
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	05d9      	lsls	r1, r3, #23
 80013e6:	d50a      	bpl.n	80013fe <HAL_ADC_IRQHandler+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80013e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ee:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff ff32 	bl	800125a <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	0592      	lsls	r2, r2, #22
 8001404:	d50d      	bpl.n	8001422 <HAL_ADC_IRQHandler+0x1c2>
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	0598      	lsls	r0, r3, #22
 800140a:	d50a      	bpl.n	8001422 <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800140c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800140e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001412:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff ff21 	bl	800125c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	06d1      	lsls	r1, r2, #27
 8001428:	d510      	bpl.n	800144c <HAL_ADC_IRQHandler+0x1ec>
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	06d2      	lsls	r2, r2, #27
 800142e:	d50d      	bpl.n	800144c <HAL_ADC_IRQHandler+0x1ec>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001430:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001432:	2a01      	cmp	r2, #1
 8001434:	d042      	beq.n	80014bc <HAL_ADC_IRQHandler+0x25c>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001436:	4a28      	ldr	r2, [pc, #160]	; (80014d8 <HAL_ADC_IRQHandler+0x278>)
 8001438:	6891      	ldr	r1, [r2, #8]
 800143a:	06c8      	lsls	r0, r1, #27
 800143c:	d13a      	bne.n	80014b4 <HAL_ADC_IRQHandler+0x254>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001444:	d13a      	bne.n	80014bc <HAL_ADC_IRQHandler+0x25c>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	2210      	movs	r2, #16
 800144a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	0551      	lsls	r1, r2, #21
 8001452:	d53f      	bpl.n	80014d4 <HAL_ADC_IRQHandler+0x274>
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	0552      	lsls	r2, r2, #21
 8001458:	d53c      	bpl.n	80014d4 <HAL_ADC_IRQHandler+0x274>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800145a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800145c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001460:	6462      	str	r2, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001462:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001464:	f042 0208 	orr.w	r2, r2, #8
 8001468:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800146a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146e:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fef1 	bl	8001258 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8001476:	bd10      	pop	{r4, pc}
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001478:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800147c:	68d2      	ldr	r2, [r2, #12]
 800147e:	e718      	b.n	80012b2 <HAL_ADC_IRQHandler+0x52>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001488:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	64a3      	str	r3, [r4, #72]	; 0x48
 8001490:	e72b      	b.n	80012ea <HAL_ADC_IRQHandler+0x8a>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001492:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001496:	68d2      	ldr	r2, [r2, #12]
 8001498:	e751      	b.n	800133e <HAL_ADC_IRQHandler+0xde>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800149a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800149e:	68d2      	ldr	r2, [r2, #12]
 80014a0:	e76f      	b.n	8001382 <HAL_ADC_IRQHandler+0x122>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	6463      	str	r3, [r4, #68]	; 0x44
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64a3      	str	r3, [r4, #72]	; 0x48
 80014b2:	e77b      	b.n	80013ac <HAL_ADC_IRQHandler+0x14c>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014b4:	6893      	ldr	r3, [r2, #8]
 80014b6:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80014ba:	e7c3      	b.n	8001444 <HAL_ADC_IRQHandler+0x1e4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80014bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c2:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fce4 	bl	8000e9a <HAL_ADC_ErrorCallback>
 80014d2:	e7b8      	b.n	8001446 <HAL_ADC_IRQHandler+0x1e6>
 80014d4:	bd10      	pop	{r4, pc}
 80014d6:	bf00      	nop
 80014d8:	50000300 	.word	0x50000300

080014dc <HAL_ADC_ConfigChannel>:
{
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 80014e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014e8:	2b01      	cmp	r3, #1
{
 80014ea:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80014ec:	f000 8151 	beq.w	8001792 <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014f0:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014f2:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014f4:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80014f6:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014f8:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 80014fa:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014fe:	f100 8143 	bmi.w	8001788 <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 8001502:	6848      	ldr	r0, [r1, #4]
 8001504:	680c      	ldr	r4, [r1, #0]
 8001506:	2804      	cmp	r0, #4
 8001508:	f04f 0206 	mov.w	r2, #6
 800150c:	d831      	bhi.n	8001572 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 800150e:	4342      	muls	r2, r0
 8001510:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001512:	201f      	movs	r0, #31
 8001514:	4090      	lsls	r0, r2
 8001516:	ea27 0000 	bic.w	r0, r7, r0
 800151a:	fa04 f202 	lsl.w	r2, r4, r2
 800151e:	4302      	orrs	r2, r0
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	f012 0f0c 	tst.w	r2, #12
 8001528:	d162      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800152a:	2c09      	cmp	r4, #9
 800152c:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8001530:	688f      	ldr	r7, [r1, #8]
 8001532:	d946      	bls.n	80015c2 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001534:	4422      	add	r2, r4
 8001536:	6998      	ldr	r0, [r3, #24]
 8001538:	3a1e      	subs	r2, #30
 800153a:	f04f 0e07 	mov.w	lr, #7
 800153e:	fa0e fe02 	lsl.w	lr, lr, r2
 8001542:	ea20 000e 	bic.w	r0, r0, lr
 8001546:	fa07 f202 	lsl.w	r2, r7, r2
 800154a:	4302      	orrs	r2, r0
 800154c:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8001554:	694a      	ldr	r2, [r1, #20]
 8001556:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800155a:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 800155e:	690a      	ldr	r2, [r1, #16]
 8001560:	3a01      	subs	r2, #1
 8001562:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 8001566:	2a03      	cmp	r2, #3
 8001568:	d873      	bhi.n	8001652 <HAL_ADC_ConfigChannel+0x176>
 800156a:	e8df f002 	tbb	[pc, r2]
 800156e:	5137      	.short	0x5137
 8001570:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8001572:	2809      	cmp	r0, #9
 8001574:	d80b      	bhi.n	800158e <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001576:	4342      	muls	r2, r0
 8001578:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800157a:	3a1e      	subs	r2, #30
 800157c:	201f      	movs	r0, #31
 800157e:	4090      	lsls	r0, r2
 8001580:	ea27 0000 	bic.w	r0, r7, r0
 8001584:	fa04 f202 	lsl.w	r2, r4, r2
 8001588:	4302      	orrs	r2, r0
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
 800158c:	e7c9      	b.n	8001522 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 800158e:	280e      	cmp	r0, #14
 8001590:	d80b      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001592:	4342      	muls	r2, r0
 8001594:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8001596:	3a3c      	subs	r2, #60	; 0x3c
 8001598:	201f      	movs	r0, #31
 800159a:	4090      	lsls	r0, r2
 800159c:	ea27 0000 	bic.w	r0, r7, r0
 80015a0:	fa04 f202 	lsl.w	r2, r4, r2
 80015a4:	4302      	orrs	r2, r0
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
 80015a8:	e7bb      	b.n	8001522 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80015aa:	4342      	muls	r2, r0
 80015ac:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80015ae:	3a5a      	subs	r2, #90	; 0x5a
 80015b0:	201f      	movs	r0, #31
 80015b2:	4090      	lsls	r0, r2
 80015b4:	ea27 0000 	bic.w	r0, r7, r0
 80015b8:	fa04 f202 	lsl.w	r2, r4, r2
 80015bc:	4302      	orrs	r2, r0
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
 80015c0:	e7af      	b.n	8001522 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015c2:	6958      	ldr	r0, [r3, #20]
 80015c4:	4422      	add	r2, r4
 80015c6:	f04f 0e07 	mov.w	lr, #7
 80015ca:	fa0e fe02 	lsl.w	lr, lr, r2
 80015ce:	ea20 000e 	bic.w	r0, r0, lr
 80015d2:	fa07 f202 	lsl.w	r2, r7, r2
 80015d6:	4302      	orrs	r2, r0
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	e7b8      	b.n	800154e <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015de:	4f7a      	ldr	r7, [pc, #488]	; (80017c8 <HAL_ADC_ConfigChannel+0x2ec>)
 80015e0:	4017      	ands	r7, r2
 80015e2:	ea47 020c 	orr.w	r2, r7, ip
 80015e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015ea:	ea42 020e 	orr.w	r2, r2, lr
 80015ee:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	f002 0203 	and.w	r2, r2, #3
 80015f6:	2a01      	cmp	r2, #1
 80015f8:	f040 80cd 	bne.w	8001796 <HAL_ADC_ConfigChannel+0x2ba>
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	07d0      	lsls	r0, r2, #31
 8001600:	f140 80c9 	bpl.w	8001796 <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001604:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001606:	2300      	movs	r3, #0
 8001608:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 800160c:	b017      	add	sp, #92	; 0x5c
 800160e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001610:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001612:	4f6d      	ldr	r7, [pc, #436]	; (80017c8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001614:	4017      	ands	r7, r2
 8001616:	ea47 020c 	orr.w	r2, r7, ip
 800161a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800161e:	ea42 020e 	orr.w	r2, r2, lr
 8001622:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8001624:	e7e4      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001626:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001628:	4867      	ldr	r0, [pc, #412]	; (80017c8 <HAL_ADC_ConfigChannel+0x2ec>)
 800162a:	4010      	ands	r0, r2
 800162c:	ea40 020c 	orr.w	r2, r0, ip
 8001630:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001634:	ea42 020e 	orr.w	r2, r2, lr
 8001638:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800163a:	e7d9      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800163c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800163e:	4a62      	ldr	r2, [pc, #392]	; (80017c8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001640:	4002      	ands	r2, r0
 8001642:	ea42 020c 	orr.w	r2, r2, ip
 8001646:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800164a:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800164e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001650:	e7ce      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001652:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001654:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001658:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800165a:	bf02      	ittt	eq
 800165c:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800165e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001662:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001664:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001666:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800166a:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800166c:	bf02      	ittt	eq
 800166e:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8001670:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001674:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001676:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001678:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800167c:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800167e:	bf02      	ittt	eq
 8001680:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8001682:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001686:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001688:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800168a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800168e:	4594      	cmp	ip, r2
 8001690:	d1ae      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001692:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001694:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001698:	e7d9      	b.n	800164e <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800169a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800169e:	2101      	movs	r1, #1
 80016a0:	40a1      	lsls	r1, r4
 80016a2:	ea22 0201 	bic.w	r2, r2, r1
 80016a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016aa:	2c10      	cmp	r4, #16
 80016ac:	d143      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016ae:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_ADC_ConfigChannel+0x2f0>)
 80016b0:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016b2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016b6:	d1a5      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016bc:	bf0c      	ite	eq
 80016be:	4a44      	ldreq	r2, [pc, #272]	; (80017d0 <HAL_ADC_ConfigChannel+0x2f4>)
 80016c0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80016c4:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	2a01      	cmp	r2, #1
 80016ce:	d102      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x1fa>
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	07d1      	lsls	r1, r2, #31
 80016d4:	d452      	bmi.n	800177c <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016d6:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016d8:	b13a      	cbz	r2, 80016ea <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016da:	6891      	ldr	r1, [r2, #8]
 80016dc:	f001 0103 	and.w	r1, r1, #3
 80016e0:	2901      	cmp	r1, #1
 80016e2:	d102      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x20e>
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	07d2      	lsls	r2, r2, #31
 80016e8:	d448      	bmi.n	800177c <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016ea:	2c10      	cmp	r4, #16
 80016ec:	d132      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x278>
 80016ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f2:	d187      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016f4:	4a35      	ldr	r2, [pc, #212]	; (80017cc <HAL_ADC_ConfigChannel+0x2f0>)
 80016f6:	6893      	ldr	r3, [r2, #8]
 80016f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016fc:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_ADC_ConfigChannel+0x2f8>)
 8001700:	4a35      	ldr	r2, [pc, #212]	; (80017d8 <HAL_ADC_ConfigChannel+0x2fc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	fbb3 f2f2 	udiv	r2, r3, r2
 8001708:	230a      	movs	r3, #10
 800170a:	4353      	muls	r3, r2
            wait_loop_index--;
 800170c:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800170e:	9b00      	ldr	r3, [sp, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f43f af77 	beq.w	8001604 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8001716:	9b00      	ldr	r3, [sp, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	e7f7      	b.n	800170c <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 800171c:	1c60      	adds	r0, r4, #1
 800171e:	6959      	ldr	r1, [r3, #20]
 8001720:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001724:	2207      	movs	r2, #7
 8001726:	4082      	lsls	r2, r0
 8001728:	ea21 0102 	bic.w	r1, r1, r2
 800172c:	fa06 f200 	lsl.w	r2, r6, r0
 8001730:	430a      	orrs	r2, r1
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	e7b9      	b.n	80016aa <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001736:	2c11      	cmp	r4, #17
 8001738:	d104      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_ADC_ConfigChannel+0x2f0>)
 800173c:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800173e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001742:	e7b8      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001744:	2c12      	cmp	r4, #18
 8001746:	f47f af5d 	bne.w	8001604 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800174a:	4a20      	ldr	r2, [pc, #128]	; (80017cc <HAL_ADC_ConfigChannel+0x2f0>)
 800174c:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800174e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001752:	e7b0      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001754:	2c11      	cmp	r4, #17
 8001756:	d109      	bne.n	800176c <HAL_ADC_ConfigChannel+0x290>
 8001758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175c:	f47f af52 	bne.w	8001604 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001760:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_ADC_ConfigChannel+0x2f0>)
 8001762:	6893      	ldr	r3, [r2, #8]
 8001764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001768:	6093      	str	r3, [r2, #8]
 800176a:	e74b      	b.n	8001604 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800176c:	2c12      	cmp	r4, #18
 800176e:	f47f af49 	bne.w	8001604 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <HAL_ADC_ConfigChannel+0x2f0>)
 8001774:	6893      	ldr	r3, [r2, #8]
 8001776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800177a:	e7f5      	b.n	8001768 <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800177e:	f043 0320 	orr.w	r3, r3, #32
 8001782:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001784:	2001      	movs	r0, #1
 8001786:	e73e      	b.n	8001606 <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001788:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800178a:	f043 0320 	orr.w	r3, r3, #32
 800178e:	646b      	str	r3, [r5, #68]	; 0x44
 8001790:	e739      	b.n	8001606 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8001792:	2002      	movs	r0, #2
 8001794:	e73a      	b.n	800160c <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001796:	2e01      	cmp	r6, #1
 8001798:	f47f af7f 	bne.w	800169a <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800179c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017a0:	40a6      	lsls	r6, r4
 80017a2:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017a4:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017a6:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 80017aa:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017ac:	d9b6      	bls.n	800171c <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 80017ae:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80017b2:	6999      	ldr	r1, [r3, #24]
 80017b4:	3a1b      	subs	r2, #27
 80017b6:	2007      	movs	r0, #7
 80017b8:	4090      	lsls	r0, r2
 80017ba:	ea21 0100 	bic.w	r1, r1, r0
 80017be:	fa06 f202 	lsl.w	r2, r6, r2
 80017c2:	430a      	orrs	r2, r1
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	e770      	b.n	80016aa <HAL_ADC_ConfigChannel+0x1ce>
 80017c8:	83fff000 	.word	0x83fff000
 80017cc:	50000300 	.word	0x50000300
 80017d0:	50000100 	.word	0x50000100
 80017d4:	20000000 	.word	0x20000000
 80017d8:	000f4240 	.word	0x000f4240

080017dc <HAL_ADCEx_MultiModeConfigChannel>:
{
 80017dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017de:	4603      	mov	r3, r0
 80017e0:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017e2:	681c      	ldr	r4, [r3, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017e4:	6808      	ldr	r0, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017e6:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80017ea:	bf0c      	ite	eq
 80017ec:	4a33      	ldreq	r2, [pc, #204]	; (80018bc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80017ee:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80017f2:	9201      	str	r2, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80017f4:	9a01      	ldr	r2, [sp, #4]
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d049      	beq.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 80017fa:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 80017fe:	2d01      	cmp	r5, #1
 8001800:	d047      	beq.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 8001802:	2501      	movs	r5, #1
 8001804:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001808:	68a5      	ldr	r5, [r4, #8]
 800180a:	076f      	lsls	r7, r5, #29
 800180c:	d435      	bmi.n	800187a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800180e:	6895      	ldr	r5, [r2, #8]
 8001810:	076e      	lsls	r6, r5, #29
 8001812:	d432      	bmi.n	800187a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8001814:	4e2a      	ldr	r6, [pc, #168]	; (80018c0 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001816:	b1a0      	cbz	r0, 8001842 <HAL_ADCEx_MultiModeConfigChannel+0x66>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001818:	684d      	ldr	r5, [r1, #4]
 800181a:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800181e:	462f      	mov	r7, r5
 8001820:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001822:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 8001826:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 800182a:	433d      	orrs	r5, r7
 800182c:	60b5      	str	r5, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800182e:	68a5      	ldr	r5, [r4, #8]
 8001830:	f005 0503 	and.w	r5, r5, #3
 8001834:	2d01      	cmp	r5, #1
 8001836:	d12e      	bne.n	8001896 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8001838:	6824      	ldr	r4, [r4, #0]
 800183a:	07e5      	lsls	r5, r4, #31
 800183c:	d52b      	bpl.n	8001896 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	e020      	b.n	8001884 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001842:	68b1      	ldr	r1, [r6, #8]
 8001844:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8001848:	60b1      	str	r1, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800184a:	68a1      	ldr	r1, [r4, #8]
 800184c:	f001 0103 	and.w	r1, r1, #3
 8001850:	2901      	cmp	r1, #1
 8001852:	d102      	bne.n	800185a <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8001854:	6821      	ldr	r1, [r4, #0]
 8001856:	07c9      	lsls	r1, r1, #31
 8001858:	d4f1      	bmi.n	800183e <HAL_ADCEx_MultiModeConfigChannel+0x62>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800185a:	6891      	ldr	r1, [r2, #8]
 800185c:	f001 0103 	and.w	r1, r1, #3
 8001860:	2901      	cmp	r1, #1
 8001862:	d102      	bne.n	800186a <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	07d2      	lsls	r2, r2, #31
 8001868:	d4e9      	bmi.n	800183e <HAL_ADCEx_MultiModeConfigChannel+0x62>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800186a:	4915      	ldr	r1, [pc, #84]	; (80018c0 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800186c:	688a      	ldr	r2, [r1, #8]
 800186e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001872:	f022 020f 	bic.w	r2, r2, #15
 8001876:	608a      	str	r2, [r1, #8]
 8001878:	e7e1      	b.n	800183e <HAL_ADCEx_MultiModeConfigChannel+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800187a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800187c:	f042 0220 	orr.w	r2, r2, #32
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001882:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 800188a:	b017      	add	sp, #92	; 0x5c
 800188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800188e:	2001      	movs	r0, #1
 8001890:	e7fb      	b.n	800188a <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8001892:	2002      	movs	r0, #2
 8001894:	e7f9      	b.n	800188a <HAL_ADCEx_MultiModeConfigChannel+0xae>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001896:	6894      	ldr	r4, [r2, #8]
 8001898:	f004 0403 	and.w	r4, r4, #3
 800189c:	2c01      	cmp	r4, #1
 800189e:	d102      	bne.n	80018a6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	07d4      	lsls	r4, r2, #31
 80018a4:	d4cb      	bmi.n	800183e <HAL_ADCEx_MultiModeConfigChannel+0x62>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018a6:	4c06      	ldr	r4, [pc, #24]	; (80018c0 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80018a8:	6889      	ldr	r1, [r1, #8]
 80018aa:	68a2      	ldr	r2, [r4, #8]
 80018ac:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80018b0:	4308      	orrs	r0, r1
 80018b2:	f022 020f 	bic.w	r2, r2, #15
 80018b6:	4310      	orrs	r0, r2
 80018b8:	60a0      	str	r0, [r4, #8]
 80018ba:	e7c0      	b.n	800183e <HAL_ADCEx_MultiModeConfigChannel+0x62>
 80018bc:	50000100 	.word	0x50000100
 80018c0:	50000300 	.word	0x50000300

080018c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018d4:	0200      	lsls	r0, r0, #8
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80018de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018e0:	60d3      	str	r3, [r2, #12]
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ea:	b530      	push	{r4, r5, lr}
 80018ec:	68dc      	ldr	r4, [r3, #12]
 80018ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	bf28      	it	cs
 80018fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 0501 	mov.w	r5, #1
 8001904:	fa05 f303 	lsl.w	r3, r5, r3
 8001908:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190c:	bf8c      	ite	hi
 800190e:	3c03      	subhi	r4, #3
 8001910:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001912:	4019      	ands	r1, r3
 8001914:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001916:	fa05 f404 	lsl.w	r4, r5, r4
 800191a:	3c01      	subs	r4, #1
 800191c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800191e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	ea42 0201 	orr.w	r2, r2, r1
 8001924:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	bfaf      	iteee	ge
 800192a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	f000 000f 	andlt.w	r0, r0, #15
 8001932:	4b06      	ldrlt	r3, [pc, #24]	; (800194c <HAL_NVIC_SetPriority+0x64>)
 8001934:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	bfa5      	ittet	ge
 8001938:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800193c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001944:	bd30      	pop	{r4, r5, pc}
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	e000ed14 	.word	0xe000ed14

08001950 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001950:	0942      	lsrs	r2, r0, #5
 8001952:	2301      	movs	r3, #1
 8001954:	f000 001f 	and.w	r0, r0, #31
 8001958:	fa03 f000 	lsl.w	r0, r3, r0
 800195c:	4b01      	ldr	r3, [pc, #4]	; (8001964 <HAL_NVIC_EnableIRQ+0x14>)
 800195e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100

08001968 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	3801      	subs	r0, #1
 800196a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800196e:	d20a      	bcs.n	8001986 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001974:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	21f0      	movs	r1, #240	; 0xf0
 8001978:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001996:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001998:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800199a:	bf0c      	ite	eq
 800199c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019a0:	f022 0204 	bicne.w	r2, r2, #4
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	4770      	bx	lr
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80019ac:	4770      	bx	lr

080019ae <HAL_SYSTICK_IRQHandler>:
{
 80019ae:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80019b0:	f7ff fffc 	bl	80019ac <HAL_SYSTICK_Callback>
 80019b4:	bd08      	pop	{r3, pc}

080019b6 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019b6:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80019ba:	2a02      	cmp	r2, #2
{  
 80019bc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019be:	d003      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c0:	2204      	movs	r2, #4
 80019c2:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80019c4:	2001      	movs	r0, #1
 80019c6:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019c8:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019ca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019cc:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80019ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019d0:	f021 010e 	bic.w	r1, r1, #14
 80019d4:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019d6:	6811      	ldr	r1, [r2, #0]
 80019d8:	f021 0101 	bic.w	r1, r1, #1
 80019dc:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019de:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80019e8:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80019ea:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80019ee:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019f2:	b113      	cbz	r3, 80019fa <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 80019f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019f6:	4620      	mov	r0, r4
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80019fc:	bd10      	pop	{r4, pc}
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a04:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a06:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001b70 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4a56      	ldr	r2, [pc, #344]	; (8001b68 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a0e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001a10:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8001a14:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a16:	9c01      	ldr	r4, [sp, #4]
 8001a18:	40dc      	lsrs	r4, r3
 8001a1a:	d102      	bne.n	8001a22 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8001a1c:	b005      	add	sp, #20
 8001a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a22:	2401      	movs	r4, #1
 8001a24:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001a28:	9c01      	ldr	r4, [sp, #4]
 8001a2a:	ea14 050a 	ands.w	r5, r4, sl
 8001a2e:	f000 8093 	beq.w	8001b58 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a32:	684c      	ldr	r4, [r1, #4]
 8001a34:	f024 0b10 	bic.w	fp, r4, #16
 8001a38:	f1bb 0f02 	cmp.w	fp, #2
 8001a3c:	d111      	bne.n	8001a62 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001a3e:	08df      	lsrs	r7, r3, #3
 8001a40:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a44:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001a48:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a4a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a4e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8001a52:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a56:	690e      	ldr	r6, [r1, #16]
 8001a58:	fa06 f60e 	lsl.w	r6, r6, lr
 8001a5c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8001a60:	623e      	str	r6, [r7, #32]
 8001a62:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a66:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001a68:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6a:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a6e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a70:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a74:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a76:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a7a:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7e:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a82:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001a86:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a88:	d811      	bhi.n	8001aae <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001a8a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a8c:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a90:	68ce      	ldr	r6, [r1, #12]
 8001a92:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001a96:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001a9a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a9c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9e:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001aa2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001aa6:	409e      	lsls	r6, r3
 8001aa8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001aac:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001aae:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab2:	688e      	ldr	r6, [r1, #8]
 8001ab4:	fa06 f60c 	lsl.w	r6, r6, ip
 8001ab8:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aba:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001abc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001abe:	d54b      	bpl.n	8001b58 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001ac4:	f046 0601 	orr.w	r6, r6, #1
 8001ac8:	f8c8 6018 	str.w	r6, [r8, #24]
 8001acc:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001ad0:	f023 0703 	bic.w	r7, r3, #3
 8001ad4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ad8:	f006 0601 	and.w	r6, r6, #1
 8001adc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001ae0:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001ae2:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001ae8:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001aea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001aee:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001af2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001af6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001afa:	d02f      	beq.n	8001b5c <HAL_GPIO_Init+0x15c>
 8001afc:	4e1b      	ldr	r6, [pc, #108]	; (8001b6c <HAL_GPIO_Init+0x16c>)
 8001afe:	42b0      	cmp	r0, r6
 8001b00:	d02e      	beq.n	8001b60 <HAL_GPIO_Init+0x160>
 8001b02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b06:	42b0      	cmp	r0, r6
 8001b08:	d02c      	beq.n	8001b64 <HAL_GPIO_Init+0x164>
 8001b0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b0e:	42b0      	cmp	r0, r6
 8001b10:	bf14      	ite	ne
 8001b12:	2605      	movne	r6, #5
 8001b14:	2603      	moveq	r6, #3
 8001b16:	fa06 f60e 	lsl.w	r6, r6, lr
 8001b1a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b1e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001b20:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b24:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b28:	bf0c      	ite	eq
 8001b2a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b2c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001b2e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001b30:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b32:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b36:	bf0c      	ite	eq
 8001b38:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b3a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001b3c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001b3e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b40:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b44:	bf0c      	ite	eq
 8001b46:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b48:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8001b4a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001b4c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b50:	bf54      	ite	pl
 8001b52:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001b54:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001b56:	60d6      	str	r6, [r2, #12]
    position++;
 8001b58:	3301      	adds	r3, #1
 8001b5a:	e75c      	b.n	8001a16 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	e7da      	b.n	8001b16 <HAL_GPIO_Init+0x116>
 8001b60:	2601      	movs	r6, #1
 8001b62:	e7d8      	b.n	8001b16 <HAL_GPIO_Init+0x116>
 8001b64:	2602      	movs	r6, #2
 8001b66:	e7d6      	b.n	8001b16 <HAL_GPIO_Init+0x116>
 8001b68:	40010400 	.word	0x40010400
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b74:	b10a      	cbz	r2, 8001b7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b76:	6181      	str	r1, [r0, #24]
 8001b78:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b7a:	6281      	str	r1, [r0, #40]	; 0x28
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b80:	6803      	ldr	r3, [r0, #0]
 8001b82:	07da      	lsls	r2, r3, #31
{
 8001b84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b88:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	d411      	bmi.n	8001bb0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8c:	682b      	ldr	r3, [r5, #0]
 8001b8e:	079b      	lsls	r3, r3, #30
 8001b90:	f100 8088 	bmi.w	8001ca4 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	071c      	lsls	r4, r3, #28
 8001b98:	f100 80f8 	bmi.w	8001d8c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	0758      	lsls	r0, r3, #29
 8001ba0:	f100 8141 	bmi.w	8001e26 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	69ea      	ldr	r2, [r5, #28]
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	f040 81d7 	bne.w	8001f5a <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001bac:	2000      	movs	r0, #0
 8001bae:	e021      	b.n	8001bf4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bb0:	4cba      	ldr	r4, [pc, #744]	; (8001e9c <HAL_RCC_OscConfig+0x31c>)
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d007      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bbc:	6863      	ldr	r3, [r4, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d119      	bne.n	8001bfa <HAL_RCC_OscConfig+0x7a>
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	03df      	lsls	r7, r3, #15
 8001bca:	d516      	bpl.n	8001bfa <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	6821      	ldr	r1, [r4, #0]
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2201      	movs	r2, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	420b      	tst	r3, r1
 8001bea:	d0cf      	beq.n	8001b8c <HAL_RCC_OscConfig+0xc>
 8001bec:	686b      	ldr	r3, [r5, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1cc      	bne.n	8001b8c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001bf2:	2001      	movs	r0, #1
}
 8001bf4:	b002      	add	sp, #8
 8001bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	686a      	ldr	r2, [r5, #4]
 8001bfc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c00:	d125      	bne.n	8001c4e <HAL_RCC_OscConfig+0xce>
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c0c:	68a9      	ldr	r1, [r5, #8]
 8001c0e:	f023 030f 	bic.w	r3, r3, #15
 8001c12:	430b      	orrs	r3, r1
 8001c14:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c16:	b352      	cbz	r2, 8001c6e <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8001c18:	f7ff f938 	bl	8000e8c <HAL_GetTick>
 8001c1c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c20:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	2701      	movs	r7, #1
 8001c24:	fa96 f3a6 	rbit	r3, r6
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	fa96 f3a6 	rbit	r3, r6
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	fa07 f303 	lsl.w	r3, r7, r3
 8001c3a:	4213      	tst	r3, r2
 8001c3c:	d1a6      	bne.n	8001b8c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3e:	f7ff f925 	bl	8000e8c <HAL_GetTick>
 8001c42:	eba0 0008 	sub.w	r0, r0, r8
 8001c46:	2864      	cmp	r0, #100	; 0x64
 8001c48:	d9ec      	bls.n	8001c24 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	e7d2      	b.n	8001bf4 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	b932      	cbnz	r2, 8001c60 <HAL_RCC_OscConfig+0xe0>
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6023      	str	r3, [r4, #0]
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5e:	e7d3      	b.n	8001c08 <HAL_RCC_OscConfig+0x88>
 8001c60:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c64:	d1f5      	bne.n	8001c52 <HAL_RCC_OscConfig+0xd2>
 8001c66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6a:	6023      	str	r3, [r4, #0]
 8001c6c:	e7c9      	b.n	8001c02 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001c6e:	f7ff f90d 	bl	8000e8c <HAL_GetTick>
 8001c72:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c76:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c78:	2701      	movs	r7, #1
 8001c7a:	fa96 f3a6 	rbit	r3, r6
 8001c7e:	6822      	ldr	r2, [r4, #0]
 8001c80:	fa96 f3a6 	rbit	r3, r6
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa07 f303 	lsl.w	r3, r7, r3
 8001c90:	4213      	tst	r3, r2
 8001c92:	f43f af7b 	beq.w	8001b8c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c96:	f7ff f8f9 	bl	8000e8c <HAL_GetTick>
 8001c9a:	eba0 0008 	sub.w	r0, r0, r8
 8001c9e:	2864      	cmp	r0, #100	; 0x64
 8001ca0:	d9eb      	bls.n	8001c7a <HAL_RCC_OscConfig+0xfa>
 8001ca2:	e7d2      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ca4:	4c7d      	ldr	r4, [pc, #500]	; (8001e9c <HAL_RCC_OscConfig+0x31c>)
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	f013 0f0c 	tst.w	r3, #12
 8001cac:	d007      	beq.n	8001cbe <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d121      	bne.n	8001cfc <HAL_RCC_OscConfig+0x17c>
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	03de      	lsls	r6, r3, #15
 8001cbc:	d41e      	bmi.n	8001cfc <HAL_RCC_OscConfig+0x17c>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc4:	6821      	ldr	r1, [r4, #0]
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	420b      	tst	r3, r1
 8001cda:	d002      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x162>
 8001cdc:	692b      	ldr	r3, [r5, #16]
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d187      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	6821      	ldr	r1, [r4, #0]
 8001ce4:	23f8      	movs	r3, #248	; 0xf8
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	fab3 f283 	clz	r2, r3
 8001cee:	696b      	ldr	r3, [r5, #20]
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	6023      	str	r3, [r4, #0]
 8001cfa:	e74b      	b.n	8001b94 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfc:	692a      	ldr	r2, [r5, #16]
 8001cfe:	2601      	movs	r6, #1
 8001d00:	b30a      	cbz	r2, 8001d46 <HAL_RCC_OscConfig+0x1c6>
 8001d02:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	2702      	movs	r7, #2
 8001d16:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001d18:	f7ff f8b8 	bl	8000e8c <HAL_GetTick>
 8001d1c:	4680      	mov	r8, r0
 8001d1e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	fa97 f3a7 	rbit	r3, r7
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa06 f303 	lsl.w	r3, r6, r3
 8001d34:	4213      	tst	r3, r2
 8001d36:	d1d4      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d38:	f7ff f8a8 	bl	8000e8c <HAL_GetTick>
 8001d3c:	eba0 0008 	sub.w	r0, r0, r8
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d9ec      	bls.n	8001d1e <HAL_RCC_OscConfig+0x19e>
 8001d44:	e781      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
 8001d46:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	2702      	movs	r7, #2
 8001d5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f896 	bl	8000e8c <HAL_GetTick>
 8001d60:	4680      	mov	r8, r0
 8001d62:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d66:	6822      	ldr	r2, [r4, #0]
 8001d68:	fa97 f3a7 	rbit	r3, r7
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa06 f303 	lsl.w	r3, r6, r3
 8001d78:	4213      	tst	r3, r2
 8001d7a:	f43f af0b 	beq.w	8001b94 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f885 	bl	8000e8c <HAL_GetTick>
 8001d82:	eba0 0008 	sub.w	r0, r0, r8
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9eb      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1e2>
 8001d8a:	e75e      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8c:	69aa      	ldr	r2, [r5, #24]
 8001d8e:	4e43      	ldr	r6, [pc, #268]	; (8001e9c <HAL_RCC_OscConfig+0x31c>)
 8001d90:	4943      	ldr	r1, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x320>)
 8001d92:	2401      	movs	r4, #1
 8001d94:	b31a      	cbz	r2, 8001dde <HAL_RCC_OscConfig+0x25e>
 8001d96:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	440b      	add	r3, r1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	2702      	movs	r7, #2
 8001da4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001da6:	f7ff f871 	bl	8000e8c <HAL_GetTick>
 8001daa:	4680      	mov	r8, r0
 8001dac:	fa97 f3a7 	rbit	r3, r7
 8001db0:	fa97 f3a7 	rbit	r3, r7
 8001db4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001dba:	fa97 f3a7 	rbit	r3, r7
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	fa04 f303 	lsl.w	r3, r4, r3
 8001dca:	4213      	tst	r3, r2
 8001dcc:	f47f aee6 	bne.w	8001b9c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff f85c 	bl	8000e8c <HAL_GetTick>
 8001dd4:	eba0 0008 	sub.w	r0, r0, r8
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d9e7      	bls.n	8001dac <HAL_RCC_OscConfig+0x22c>
 8001ddc:	e735      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
 8001dde:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	440b      	add	r3, r1
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	2702      	movs	r7, #2
 8001dec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001dee:	f7ff f84d 	bl	8000e8c <HAL_GetTick>
 8001df2:	4680      	mov	r8, r0
 8001df4:	fa97 f3a7 	rbit	r3, r7
 8001df8:	fa97 f3a7 	rbit	r3, r7
 8001dfc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001e02:	fa97 f3a7 	rbit	r3, r7
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	fa04 f303 	lsl.w	r3, r4, r3
 8001e12:	4213      	tst	r3, r2
 8001e14:	f43f aec2 	beq.w	8001b9c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff f838 	bl	8000e8c <HAL_GetTick>
 8001e1c:	eba0 0008 	sub.w	r0, r0, r8
 8001e20:	2802      	cmp	r0, #2
 8001e22:	d9e7      	bls.n	8001df4 <HAL_RCC_OscConfig+0x274>
 8001e24:	e711      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e26:	4c1d      	ldr	r4, [pc, #116]	; (8001e9c <HAL_RCC_OscConfig+0x31c>)
 8001e28:	69e3      	ldr	r3, [r4, #28]
 8001e2a:	00d9      	lsls	r1, r3, #3
 8001e2c:	d434      	bmi.n	8001e98 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	69e3      	ldr	r3, [r4, #28]
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	61e3      	str	r3, [r4, #28]
 8001e36:	69e3      	ldr	r3, [r4, #28]
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e40:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	4f18      	ldr	r7, [pc, #96]	; (8001ea4 <HAL_RCC_OscConfig+0x324>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	05da      	lsls	r2, r3, #23
 8001e48:	d52e      	bpl.n	8001ea8 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	68eb      	ldr	r3, [r5, #12]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d13c      	bne.n	8001eca <HAL_RCC_OscConfig+0x34a>
 8001e50:	6a23      	ldr	r3, [r4, #32]
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e58:	f7ff f818 	bl	8000e8c <HAL_GetTick>
 8001e5c:	2702      	movs	r7, #2
 8001e5e:	4682      	mov	sl, r0
 8001e60:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e62:	f04f 0801 	mov.w	r8, #1
 8001e66:	fa97 f3a7 	rbit	r3, r7
 8001e6a:	fa97 f3a7 	rbit	r3, r7
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3ca>
 8001e72:	6a22      	ldr	r2, [r4, #32]
 8001e74:	fa99 f3a9 	rbit	r3, r9
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa08 f303 	lsl.w	r3, r8, r3
 8001e84:	4213      	tst	r3, r2
 8001e86:	d057      	beq.n	8001f38 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8001e88:	2e00      	cmp	r6, #0
 8001e8a:	f43f ae8b 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	69e3      	ldr	r3, [r4, #28]
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61e3      	str	r3, [r4, #28]
 8001e96:	e685      	b.n	8001ba4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001e98:	2600      	movs	r6, #0
 8001e9a:	e7d2      	b.n	8001e42 <HAL_RCC_OscConfig+0x2c2>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	10908120 	.word	0x10908120
 8001ea4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eae:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001eb0:	f7fe ffec 	bl	8000e8c <HAL_GetTick>
 8001eb4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	05db      	lsls	r3, r3, #23
 8001eba:	d4c6      	bmi.n	8001e4a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7fe ffe6 	bl	8000e8c <HAL_GetTick>
 8001ec0:	eba0 0008 	sub.w	r0, r0, r8
 8001ec4:	2864      	cmp	r0, #100	; 0x64
 8001ec6:	d9f6      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x336>
 8001ec8:	e6bf      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eca:	bb3b      	cbnz	r3, 8001f1c <HAL_RCC_OscConfig+0x39c>
 8001ecc:	6a23      	ldr	r3, [r4, #32]
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	6223      	str	r3, [r4, #32]
 8001ed4:	6a23      	ldr	r3, [r4, #32]
 8001ed6:	f023 0304 	bic.w	r3, r3, #4
 8001eda:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001edc:	f7fe ffd6 	bl	8000e8c <HAL_GetTick>
 8001ee0:	2702      	movs	r7, #2
 8001ee2:	4682      	mov	sl, r0
 8001ee4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	f04f 0801 	mov.w	r8, #1
 8001eea:	fa97 f3a7 	rbit	r3, r7
 8001eee:	fa97 f3a7 	rbit	r3, r7
 8001ef2:	b373      	cbz	r3, 8001f52 <HAL_RCC_OscConfig+0x3d2>
 8001ef4:	6a22      	ldr	r2, [r4, #32]
 8001ef6:	fa99 f3a9 	rbit	r3, r9
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	fa08 f303 	lsl.w	r3, r8, r3
 8001f06:	4213      	tst	r3, r2
 8001f08:	d0be      	beq.n	8001e88 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7fe ffbf 	bl	8000e8c <HAL_GetTick>
 8001f0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f12:	eba0 000a 	sub.w	r0, r0, sl
 8001f16:	4298      	cmp	r0, r3
 8001f18:	d9e7      	bls.n	8001eea <HAL_RCC_OscConfig+0x36a>
 8001f1a:	e696      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	6a23      	ldr	r3, [r4, #32]
 8001f20:	d103      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3aa>
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6223      	str	r3, [r4, #32]
 8001f28:	e792      	b.n	8001e50 <HAL_RCC_OscConfig+0x2d0>
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	6223      	str	r3, [r4, #32]
 8001f30:	6a23      	ldr	r3, [r4, #32]
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	e78e      	b.n	8001e56 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7fe ffa8 	bl	8000e8c <HAL_GetTick>
 8001f3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f40:	eba0 000a 	sub.w	r0, r0, sl
 8001f44:	4298      	cmp	r0, r3
 8001f46:	d98e      	bls.n	8001e66 <HAL_RCC_OscConfig+0x2e6>
 8001f48:	e67f      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
 8001f4a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f50:	e790      	b.n	8001e74 <HAL_RCC_OscConfig+0x2f4>
 8001f52:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f58:	e7cd      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5a:	4c41      	ldr	r4, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x4e0>)
 8001f5c:	6863      	ldr	r3, [r4, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	f43f ae45 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f68:	2a02      	cmp	r2, #2
 8001f6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f6e:	d152      	bne.n	8002016 <HAL_RCC_OscConfig+0x496>
 8001f70:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f86:	f7fe ff81 	bl	8000e8c <HAL_GetTick>
 8001f8a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001f8e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	2601      	movs	r6, #1
 8001f92:	fa97 f3a7 	rbit	r3, r7
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	fa97 f3a7 	rbit	r3, r7
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	fa06 f303 	lsl.w	r3, r6, r3
 8001fa8:	4213      	tst	r3, r2
 8001faa:	d12d      	bne.n	8002008 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fac:	6862      	ldr	r2, [r4, #4]
 8001fae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fb0:	6a29      	ldr	r1, [r5, #32]
 8001fb2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	6063      	str	r3, [r4, #4]
 8001fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001fd6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001fd8:	f7fe ff58 	bl	8000e8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001fde:	4607      	mov	r7, r0
 8001fe0:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	fa95 f3a5 	rbit	r3, r5
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	fa06 f303 	lsl.w	r3, r6, r3
 8001ff6:	4213      	tst	r3, r2
 8001ff8:	f47f add8 	bne.w	8001bac <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe ff46 	bl	8000e8c <HAL_GetTick>
 8002000:	1bc0      	subs	r0, r0, r7
 8002002:	2802      	cmp	r0, #2
 8002004:	d9ec      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x460>
 8002006:	e620      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe ff40 	bl	8000e8c <HAL_GetTick>
 800200c:	eba0 0008 	sub.w	r0, r0, r8
 8002010:	2802      	cmp	r0, #2
 8002012:	d9be      	bls.n	8001f92 <HAL_RCC_OscConfig+0x412>
 8002014:	e619      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
 8002016:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002022:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800202c:	f7fe ff2e 	bl	8000e8c <HAL_GetTick>
 8002030:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002034:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	2601      	movs	r6, #1
 8002038:	fa95 f3a5 	rbit	r3, r5
 800203c:	6822      	ldr	r2, [r4, #0]
 800203e:	fa95 f3a5 	rbit	r3, r5
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	fa06 f303 	lsl.w	r3, r6, r3
 800204e:	4213      	tst	r3, r2
 8002050:	f43f adac 	beq.w	8001bac <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe ff1a 	bl	8000e8c <HAL_GetTick>
 8002058:	1bc0      	subs	r0, r0, r7
 800205a:	2802      	cmp	r0, #2
 800205c:	d9ec      	bls.n	8002038 <HAL_RCC_OscConfig+0x4b8>
 800205e:	e5f4      	b.n	8001c4a <HAL_RCC_OscConfig+0xca>
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002066:	4c13      	ldr	r4, [pc, #76]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x50>)
 8002068:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800206a:	f001 030c 	and.w	r3, r1, #12
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11e      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0x4c>
 8002072:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002076:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800207a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x54>)
 8002088:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800208a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800208c:	220f      	movs	r2, #15
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	40d3      	lsrs	r3, r2
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_RCC_GetSysClockFreq+0x58>)
 800209e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020a0:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020a2:	bf4a      	itet	mi
 80020a4:	4b06      	ldrmi	r3, [pc, #24]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020a6:	4b07      	ldrpl	r3, [pc, #28]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020a8:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020ac:	4358      	muls	r0, r3
 80020ae:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020b2:	bd10      	pop	{r4, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	080050c8 	.word	0x080050c8
 80020bc:	080050d8 	.word	0x080050d8
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	003d0900 	.word	0x003d0900

080020c8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020c8:	4a5c      	ldr	r2, [pc, #368]	; (800223c <HAL_RCC_ClockConfig+0x174>)
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	428b      	cmp	r3, r1
{
 80020d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020d6:	4606      	mov	r6, r0
 80020d8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020da:	d330      	bcc.n	800213e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	6832      	ldr	r2, [r6, #0]
 80020de:	0791      	lsls	r1, r2, #30
 80020e0:	d43a      	bmi.n	8002158 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	07d2      	lsls	r2, r2, #31
 80020e4:	d440      	bmi.n	8002168 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80020e6:	4a55      	ldr	r2, [pc, #340]	; (800223c <HAL_RCC_ClockConfig+0x174>)
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	429d      	cmp	r5, r3
 80020f0:	f0c0 8092 	bcc.w	8002218 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	6832      	ldr	r2, [r6, #0]
 80020f6:	4c52      	ldr	r4, [pc, #328]	; (8002240 <HAL_RCC_ClockConfig+0x178>)
 80020f8:	f012 0f04 	tst.w	r2, #4
 80020fc:	f040 8097 	bne.w	800222e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	0713      	lsls	r3, r2, #28
 8002102:	d506      	bpl.n	8002112 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002104:	6863      	ldr	r3, [r4, #4]
 8002106:	6932      	ldr	r2, [r6, #16]
 8002108:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800210c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002110:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002112:	f7ff ffa7 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8002116:	6863      	ldr	r3, [r4, #4]
 8002118:	22f0      	movs	r2, #240	; 0xf0
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002126:	40d3      	lsrs	r3, r2
 8002128:	4a46      	ldr	r2, [pc, #280]	; (8002244 <HAL_RCC_ClockConfig+0x17c>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	40d8      	lsrs	r0, r3
 800212e:	4b46      	ldr	r3, [pc, #280]	; (8002248 <HAL_RCC_ClockConfig+0x180>)
 8002130:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002132:	2000      	movs	r0, #0
 8002134:	f7fe fe7c 	bl	8000e30 <HAL_InitTick>
  return HAL_OK;
 8002138:	2000      	movs	r0, #0
}
 800213a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	f023 0307 	bic.w	r3, r3, #7
 8002144:	430b      	orrs	r3, r1
 8002146:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	4299      	cmp	r1, r3
 8002150:	d0c4      	beq.n	80020dc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
 8002154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4939      	ldr	r1, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x178>)
 800215a:	68b0      	ldr	r0, [r6, #8]
 800215c:	684b      	ldr	r3, [r1, #4]
 800215e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002162:	4303      	orrs	r3, r0
 8002164:	604b      	str	r3, [r1, #4]
 8002166:	e7bc      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002168:	6872      	ldr	r2, [r6, #4]
 800216a:	4c35      	ldr	r4, [pc, #212]	; (8002240 <HAL_RCC_ClockConfig+0x178>)
 800216c:	2a01      	cmp	r2, #1
 800216e:	d128      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xfa>
 8002170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002174:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002178:	6821      	ldr	r1, [r4, #0]
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	d0e1      	beq.n	8002152 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	f023 0303 	bic.w	r3, r3, #3
 8002194:	431a      	orrs	r2, r3
 8002196:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8002198:	f7fe fe78 	bl	8000e8c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219c:	6873      	ldr	r3, [r6, #4]
 800219e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80021a0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	d11f      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	6863      	ldr	r3, [r4, #4]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d099      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b2:	f7fe fe6b 	bl	8000e8c <HAL_GetTick>
 80021b6:	1bc0      	subs	r0, r0, r7
 80021b8:	4540      	cmp	r0, r8
 80021ba:	d9f5      	bls.n	80021a8 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80021bc:	2003      	movs	r0, #3
 80021be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	2a02      	cmp	r2, #2
 80021c4:	bf0c      	ite	eq
 80021c6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80021ca:	2302      	movne	r3, #2
 80021cc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	4203      	tst	r3, r0
 80021e6:	e7d1      	b.n	800218c <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d110      	bne.n	800220e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ec:	6863      	ldr	r3, [r4, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	f43f af77 	beq.w	80020e6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7fe fe48 	bl	8000e8c <HAL_GetTick>
 80021fc:	1bc0      	subs	r0, r0, r7
 80021fe:	4540      	cmp	r0, r8
 8002200:	d9f4      	bls.n	80021ec <HAL_RCC_ClockConfig+0x124>
 8002202:	e7db      	b.n	80021bc <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7fe fe42 	bl	8000e8c <HAL_GetTick>
 8002208:	1bc0      	subs	r0, r0, r7
 800220a:	4540      	cmp	r0, r8
 800220c:	d8d6      	bhi.n	80021bc <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800220e:	6863      	ldr	r3, [r4, #4]
 8002210:	f013 0f0c 	tst.w	r3, #12
 8002214:	d1f6      	bne.n	8002204 <HAL_RCC_ClockConfig+0x13c>
 8002216:	e766      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002218:	6813      	ldr	r3, [r2, #0]
 800221a:	f023 0307 	bic.w	r3, r3, #7
 800221e:	432b      	orrs	r3, r5
 8002220:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	429d      	cmp	r5, r3
 800222a:	d192      	bne.n	8002152 <HAL_RCC_ClockConfig+0x8a>
 800222c:	e762      	b.n	80020f4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222e:	6863      	ldr	r3, [r4, #4]
 8002230:	68f1      	ldr	r1, [r6, #12]
 8002232:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002236:	430b      	orrs	r3, r1
 8002238:	6063      	str	r3, [r4, #4]
 800223a:	e761      	b.n	8002100 <HAL_RCC_ClockConfig+0x38>
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
 8002244:	080050fa 	.word	0x080050fa
 8002248:	20000000 	.word	0x20000000

0800224c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800224c:	4b01      	ldr	r3, [pc, #4]	; (8002254 <HAL_RCC_GetHCLKFreq+0x8>)
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800226c:	40d3      	lsrs	r3, r2
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002274:	6810      	ldr	r0, [r2, #0]
}    
 8002276:	40d8      	lsrs	r0, r3
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	0800510a 	.word	0x0800510a
 8002284:	20000000 	.word	0x20000000

08002288 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800228a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	fa92 f2a2 	rbit	r2, r2
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800229c:	40d3      	lsrs	r3, r2
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a0:	5cd3      	ldrb	r3, [r2, r3]
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80022a4:	6810      	ldr	r0, [r2, #0]
} 
 80022a6:	40d8      	lsrs	r0, r3
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	0800510a 	.word	0x0800510a
 80022b4:	20000000 	.word	0x20000000

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022b8:	6803      	ldr	r3, [r0, #0]
{
 80022ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022be:	03dc      	lsls	r4, r3, #15
{
 80022c0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022c2:	d520      	bpl.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c4:	4c55      	ldr	r4, [pc, #340]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c6:	69e3      	ldr	r3, [r4, #28]
 80022c8:	00d8      	lsls	r0, r3, #3
 80022ca:	d44d      	bmi.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	69e3      	ldr	r3, [r4, #28]
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	61e3      	str	r3, [r4, #28]
 80022d4:	69e3      	ldr	r3, [r4, #28]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022de:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4f4f      	ldr	r7, [pc, #316]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	05d9      	lsls	r1, r3, #23
 80022e6:	d541      	bpl.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022e8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022ea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022ee:	d151      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022f0:	6a23      	ldr	r3, [r4, #32]
 80022f2:	686a      	ldr	r2, [r5, #4]
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	4313      	orrs	r3, r2
 80022fa:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022fc:	b11e      	cbz	r6, 8002306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	69e3      	ldr	r3, [r4, #28]
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002304:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002306:	6828      	ldr	r0, [r5, #0]
 8002308:	07c4      	lsls	r4, r0, #31
 800230a:	d506      	bpl.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800230c:	4a43      	ldr	r2, [pc, #268]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800230e:	68a9      	ldr	r1, [r5, #8]
 8002310:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	430b      	orrs	r3, r1
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800231a:	0681      	lsls	r1, r0, #26
 800231c:	d506      	bpl.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231e:	4a3f      	ldr	r2, [pc, #252]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002320:	68e9      	ldr	r1, [r5, #12]
 8002322:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002324:	f023 0310 	bic.w	r3, r3, #16
 8002328:	430b      	orrs	r3, r1
 800232a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800232c:	0602      	lsls	r2, r0, #24
 800232e:	d506      	bpl.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002332:	6929      	ldr	r1, [r5, #16]
 8002334:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002336:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800233a:	430b      	orrs	r3, r1
 800233c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800233e:	04c3      	lsls	r3, r0, #19
 8002340:	d506      	bpl.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002342:	4a36      	ldr	r2, [pc, #216]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002344:	6969      	ldr	r1, [r5, #20]
 8002346:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800234c:	430b      	orrs	r3, r1
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002350:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8002354:	d01b      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002356:	4a31      	ldr	r2, [pc, #196]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002358:	69a9      	ldr	r1, [r5, #24]
 800235a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800235c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002360:	430b      	orrs	r3, r1
 8002362:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002364:	2000      	movs	r0, #0
 8002366:	e012      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8002368:	2600      	movs	r6, #0
 800236a:	e7b9      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002374:	f7fe fd8a 	bl	8000e8c <HAL_GetTick>
 8002378:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	05da      	lsls	r2, r3, #23
 800237e:	d4b3      	bmi.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002380:	f7fe fd84 	bl	8000e8c <HAL_GetTick>
 8002384:	eba0 0008 	sub.w	r0, r0, r8
 8002388:	2864      	cmp	r0, #100	; 0x64
 800238a:	d9f6      	bls.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
}
 800238e:	b002      	add	sp, #8
 8002390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002394:	686a      	ldr	r2, [r5, #4]
 8002396:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800239a:	4293      	cmp	r3, r2
 800239c:	d0a8      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800239e:	6a21      	ldr	r1, [r4, #32]
 80023a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80023a8:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ac:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002424 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023b0:	fab2 f282 	clz	r2, r2
 80023b4:	4472      	add	r2, lr
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	2701      	movs	r7, #1
 80023ba:	6017      	str	r7, [r2, #0]
 80023bc:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	4473      	add	r3, lr
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023cc:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80023ce:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023d0:	d58e      	bpl.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80023d2:	f7fe fd5b 	bl	8000e8c <HAL_GetTick>
 80023d6:	f04f 0802 	mov.w	r8, #2
 80023da:	4682      	mov	sl, r0
 80023dc:	46c1      	mov	r9, r8
 80023de:	fa98 f3a8 	rbit	r3, r8
 80023e2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	b1a3      	cbz	r3, 8002412 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80023e8:	6a22      	ldr	r2, [r4, #32]
 80023ea:	fa99 f3a9 	rbit	r3, r9
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	fa07 f303 	lsl.w	r3, r7, r3
 80023fa:	4213      	tst	r3, r2
 80023fc:	f47f af78 	bne.w	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002400:	f7fe fd44 	bl	8000e8c <HAL_GetTick>
 8002404:	f241 3388 	movw	r3, #5000	; 0x1388
 8002408:	eba0 000a 	sub.w	r0, r0, sl
 800240c:	4298      	cmp	r0, r3
 800240e:	d9e6      	bls.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x126>
 8002410:	e7bc      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002412:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002416:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002418:	e7e7      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x132>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
 8002424:	10908100 	.word	0x10908100

08002428 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002428:	6803      	ldr	r3, [r0, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800243a:	2000      	movs	r0, #0
 800243c:	4770      	bx	lr

0800243e <HAL_TIM_OC_DelayElapsedCallback>:
 800243e:	4770      	bx	lr

08002440 <HAL_TIM_IC_CaptureCallback>:
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_TriggerCallback>:
 8002444:	4770      	bx	lr

08002446 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002446:	6803      	ldr	r3, [r0, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	0791      	lsls	r1, r2, #30
{
 800244c:	b510      	push	{r4, lr}
 800244e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002450:	d50f      	bpl.n	8002472 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	0792      	lsls	r2, r2, #30
 8002456:	d50c      	bpl.n	8002472 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002458:	f06f 0202 	mvn.w	r2, #2
 800245c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800245e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002460:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002462:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002464:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002466:	f000 8085 	beq.w	8002574 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800246a:	f7ff ffe9 	bl	8002440 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	2300      	movs	r3, #0
 8002470:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	0752      	lsls	r2, r2, #29
 8002478:	d510      	bpl.n	800249c <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	0750      	lsls	r0, r2, #29
 800247e:	d50d      	bpl.n	800249c <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002480:	f06f 0204 	mvn.w	r2, #4
 8002484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002486:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002488:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800248a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248e:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002490:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002492:	d075      	beq.n	8002580 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002494:	f7ff ffd4 	bl	8002440 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002498:	2300      	movs	r3, #0
 800249a:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	0711      	lsls	r1, r2, #28
 80024a2:	d50f      	bpl.n	80024c4 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	0712      	lsls	r2, r2, #28
 80024a8:	d50c      	bpl.n	80024c4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024aa:	f06f 0208 	mvn.w	r2, #8
 80024ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b4:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b6:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80024b8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ba:	d067      	beq.n	800258c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80024bc:	f7ff ffc0 	bl	8002440 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c0:	2300      	movs	r3, #0
 80024c2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	06d0      	lsls	r0, r2, #27
 80024ca:	d510      	bpl.n	80024ee <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	06d1      	lsls	r1, r2, #27
 80024d0:	d50d      	bpl.n	80024ee <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024d2:	f06f 0210 	mvn.w	r2, #16
 80024d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024da:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024dc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e0:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e4:	d058      	beq.n	8002598 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	f7ff ffab 	bl	8002440 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	2300      	movs	r3, #0
 80024ec:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	07d2      	lsls	r2, r2, #31
 80024f4:	d508      	bpl.n	8002508 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	07d0      	lsls	r0, r2, #31
 80024fa:	d505      	bpl.n	8002508 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024fc:	f06f 0201 	mvn.w	r2, #1
 8002500:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002502:	4620      	mov	r0, r4
 8002504:	f001 f9f2 	bl	80038ec <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	0611      	lsls	r1, r2, #24
 800250e:	d508      	bpl.n	8002522 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	0612      	lsls	r2, r2, #24
 8002514:	d505      	bpl.n	8002522 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002516:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800251a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800251c:	4620      	mov	r0, r4
 800251e:	f000 f98a 	bl	8002836 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	05d0      	lsls	r0, r2, #23
 8002528:	d508      	bpl.n	800253c <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	0611      	lsls	r1, r2, #24
 800252e:	d505      	bpl.n	800253c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002530:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002534:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002536:	4620      	mov	r0, r4
 8002538:	f000 f97e 	bl	8002838 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	0652      	lsls	r2, r2, #25
 8002542:	d508      	bpl.n	8002556 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	0650      	lsls	r0, r2, #25
 8002548:	d505      	bpl.n	8002556 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800254a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800254e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff ff77 	bl	8002444 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	0691      	lsls	r1, r2, #26
 800255c:	d522      	bpl.n	80025a4 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	0692      	lsls	r2, r2, #26
 8002562:	d51f      	bpl.n	80025a4 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002564:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002568:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800256a:	611a      	str	r2, [r3, #16]
    }
  }
}
 800256c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002570:	f000 b960 	b.w	8002834 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002574:	f7ff ff63 	bl	800243e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ff62 	bl	8002442 <HAL_TIM_PWM_PulseFinishedCallback>
 800257e:	e776      	b.n	800246e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002580:	f7ff ff5d 	bl	800243e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff ff5c 	bl	8002442 <HAL_TIM_PWM_PulseFinishedCallback>
 800258a:	e785      	b.n	8002498 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258c:	f7ff ff57 	bl	800243e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff ff56 	bl	8002442 <HAL_TIM_PWM_PulseFinishedCallback>
 8002596:	e793      	b.n	80024c0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002598:	f7ff ff51 	bl	800243e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	4620      	mov	r0, r4
 800259e:	f7ff ff50 	bl	8002442 <HAL_TIM_PWM_PulseFinishedCallback>
 80025a2:	e7a2      	b.n	80024ea <HAL_TIM_IRQHandler+0xa4>
 80025a4:	bd10      	pop	{r4, pc}
	...

080025a8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a8:	4a21      	ldr	r2, [pc, #132]	; (8002630 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 80025aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ac:	4290      	cmp	r0, r2
{
 80025ae:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b0:	d005      	beq.n	80025be <TIM_Base_SetConfig+0x16>
 80025b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025b6:	d002      	beq.n	80025be <TIM_Base_SetConfig+0x16>
 80025b8:	4c1e      	ldr	r4, [pc, #120]	; (8002634 <TIM_Base_SetConfig+0x8c>)
 80025ba:	42a0      	cmp	r0, r4
 80025bc:	d10c      	bne.n	80025d8 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80025be:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c4:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80025c6:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ca:	d010      	beq.n	80025ee <TIM_Base_SetConfig+0x46>
 80025cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025d0:	d00d      	beq.n	80025ee <TIM_Base_SetConfig+0x46>
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <TIM_Base_SetConfig+0x8c>)
 80025d4:	4290      	cmp	r0, r2
 80025d6:	d00a      	beq.n	80025ee <TIM_Base_SetConfig+0x46>
 80025d8:	4a17      	ldr	r2, [pc, #92]	; (8002638 <TIM_Base_SetConfig+0x90>)
 80025da:	4290      	cmp	r0, r2
 80025dc:	d007      	beq.n	80025ee <TIM_Base_SetConfig+0x46>
 80025de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025e2:	4290      	cmp	r0, r2
 80025e4:	d003      	beq.n	80025ee <TIM_Base_SetConfig+0x46>
 80025e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ea:	4290      	cmp	r0, r2
 80025ec:	d103      	bne.n	80025f6 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ee:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f6:	694a      	ldr	r2, [r1, #20]
 80025f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025fc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80025fe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002600:	688b      	ldr	r3, [r1, #8]
 8002602:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002604:	680b      	ldr	r3, [r1, #0]
 8002606:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <TIM_Base_SetConfig+0x88>)
 800260a:	4298      	cmp	r0, r3
 800260c:	d00b      	beq.n	8002626 <TIM_Base_SetConfig+0x7e>
 800260e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002612:	4298      	cmp	r0, r3
 8002614:	d007      	beq.n	8002626 <TIM_Base_SetConfig+0x7e>
 8002616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261a:	4298      	cmp	r0, r3
 800261c:	d003      	beq.n	8002626 <TIM_Base_SetConfig+0x7e>
 800261e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002622:	4298      	cmp	r0, r3
 8002624:	d101      	bne.n	800262a <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002626:	690b      	ldr	r3, [r1, #16]
 8002628:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800262a:	2301      	movs	r3, #1
 800262c:	6143      	str	r3, [r0, #20]
 800262e:	bd10      	pop	{r4, pc}
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40000400 	.word	0x40000400
 8002638:	40014000 	.word	0x40014000

0800263c <HAL_TIM_Base_Init>:
{ 
 800263c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800263e:	4604      	mov	r4, r0
 8002640:	b1a0      	cbz	r0, 800266c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002642:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002646:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800264a:	b91b      	cbnz	r3, 8002654 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800264c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002650:	f001 fae4 	bl	8003c1c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002654:	2302      	movs	r3, #2
 8002656:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	1d21      	adds	r1, r4, #4
 800265e:	f7ff ffa3 	bl	80025a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002662:	2301      	movs	r3, #1
 8002664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002668:	2000      	movs	r0, #0
 800266a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
}
 800266e:	bd10      	pop	{r4, pc}

08002670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002670:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002672:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002674:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002676:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800267a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800267e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002680:	6083      	str	r3, [r0, #8]
 8002682:	bd10      	pop	{r4, pc}

08002684 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002684:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
{
 800268a:	b570      	push	{r4, r5, r6, lr}
 800268c:	4604      	mov	r4, r0
 800268e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002692:	d01a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002698:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800269a:	2301      	movs	r3, #1
 800269c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80026a0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026a2:	4b52      	ldr	r3, [pc, #328]	; (80027ec <HAL_TIM_ConfigClockSource+0x168>)
 80026a4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80026a6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80026a8:	680b      	ldr	r3, [r1, #0]
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	d075      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x116>
 80026ae:	d818      	bhi.n	80026e2 <HAL_TIM_ConfigClockSource+0x5e>
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	f000 808f 	beq.w	80027d4 <HAL_TIM_ConfigClockSource+0x150>
 80026b6:	d809      	bhi.n	80026cc <HAL_TIM_ConfigClockSource+0x48>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8085 	beq.w	80027c8 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 80026be:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80026c0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80026c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026c6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	f000 8087 	beq.w	80027e0 <HAL_TIM_ConfigClockSource+0x15c>
 80026d2:	2b30      	cmp	r3, #48	; 0x30
 80026d4:	d1f3      	bne.n	80026be <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 80026d6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80026d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80026dc:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80026e0:	e033      	b.n	800274a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80026e2:	2b70      	cmp	r3, #112	; 0x70
 80026e4:	d033      	beq.n	800274e <HAL_TIM_ConfigClockSource+0xca>
 80026e6:	d81b      	bhi.n	8002720 <HAL_TIM_ConfigClockSource+0x9c>
 80026e8:	2b50      	cmp	r3, #80	; 0x50
 80026ea:	d03f      	beq.n	800276c <HAL_TIM_ConfigClockSource+0xe8>
 80026ec:	2b60      	cmp	r3, #96	; 0x60
 80026ee:	d1e6      	bne.n	80026be <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80026f0:	684d      	ldr	r5, [r1, #4]
 80026f2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f4:	6a01      	ldr	r1, [r0, #32]
 80026f6:	f021 0110 	bic.w	r1, r1, #16
 80026fa:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fc:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80026fe:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002700:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002704:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002708:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800270c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002710:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002712:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002714:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800271a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800271e:	e014      	b.n	800274a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_ConfigClockSource+0xbc>
 8002726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272a:	d1c8      	bne.n	80026be <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 800272c:	68cb      	ldr	r3, [r1, #12]
 800272e:	684a      	ldr	r2, [r1, #4]
 8002730:	6889      	ldr	r1, [r1, #8]
 8002732:	f7ff ff9d 	bl	8002670 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002736:	6822      	ldr	r2, [r4, #0]
 8002738:	6893      	ldr	r3, [r2, #8]
 800273a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273e:	e013      	b.n	8002768 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002740:	6883      	ldr	r3, [r0, #8]
 8002742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002746:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800274a:	6083      	str	r3, [r0, #8]
 800274c:	e7b7      	b.n	80026be <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 800274e:	68cb      	ldr	r3, [r1, #12]
 8002750:	684a      	ldr	r2, [r1, #4]
 8002752:	6889      	ldr	r1, [r1, #8]
 8002754:	f7ff ff8c 	bl	8002670 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800275c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002760:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002768:	6093      	str	r3, [r2, #8]
    break;
 800276a:	e7a8      	b.n	80026be <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800276c:	684a      	ldr	r2, [r1, #4]
 800276e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002770:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002772:	6a05      	ldr	r5, [r0, #32]
 8002774:	f025 0501 	bic.w	r5, r5, #1
 8002778:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800277a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800277c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002784:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002788:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800278a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800278c:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800278e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002794:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002798:	e7d7      	b.n	800274a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800279a:	684a      	ldr	r2, [r1, #4]
 800279c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800279e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027a0:	6a05      	ldr	r5, [r0, #32]
 80027a2:	f025 0501 	bic.w	r5, r5, #1
 80027a6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80027a8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027aa:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027b2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80027b6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80027b8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80027ba:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80027bc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027c2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80027c6:	e7c0      	b.n	800274a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80027c8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027ce:	f043 0307 	orr.w	r3, r3, #7
 80027d2:	e7ba      	b.n	800274a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80027d4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027da:	f043 0317 	orr.w	r3, r3, #23
 80027de:	e7b4      	b.n	800274a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80027e0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027e6:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80027ea:	e7ae      	b.n	800274a <HAL_TIM_ConfigClockSource+0xc6>
 80027ec:	fffe0088 	.word	0xfffe0088

080027f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80027f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
{
 80027f6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80027f8:	d018      	beq.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027fa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027fc:	4d0c      	ldr	r5, [pc, #48]	; (8002830 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 80027fe:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002800:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002802:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002804:	bf02      	ittt	eq
 8002806:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002808:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800280c:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800280e:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002810:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002816:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002818:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281c:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281e:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002820:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002822:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002824:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002828:	4618      	mov	r0, r3
 800282a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800282c:	2002      	movs	r0, #2
} 
 800282e:	bd30      	pop	{r4, r5, pc}
 8002830:	40012c00 	.word	0x40012c00

08002834 <HAL_TIMEx_CommutationCallback>:
 8002834:	4770      	bx	lr

08002836 <HAL_TIMEx_BreakCallback>:
 8002836:	4770      	bx	lr

08002838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002838:	4770      	bx	lr

0800283a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800283a:	6803      	ldr	r3, [r0, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002842:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800284c:	2320      	movs	r3, #32
 800284e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002852:	4770      	bx	lr

08002854 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002854:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002858:	2b20      	cmp	r3, #32
 800285a:	d13d      	bne.n	80028d8 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 800285c:	2900      	cmp	r1, #0
 800285e:	d039      	beq.n	80028d4 <HAL_UART_Receive_IT+0x80>
 8002860:	2a00      	cmp	r2, #0
 8002862:	d037      	beq.n	80028d4 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8002864:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002868:	2b01      	cmp	r3, #1
 800286a:	d035      	beq.n	80028d8 <HAL_UART_Receive_IT+0x84>
 800286c:	2301      	movs	r3, #1
 800286e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8002872:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8002874:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 800287a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800287e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002882:	d119      	bne.n	80028b8 <HAL_UART_Receive_IT+0x64>
 8002884:	6903      	ldr	r3, [r0, #16]
 8002886:	b9ab      	cbnz	r3, 80028b4 <HAL_UART_Receive_IT+0x60>
 8002888:	f240 13ff 	movw	r3, #511	; 0x1ff
 800288c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002890:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002892:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002894:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002896:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289a:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 800289c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a0:	6891      	ldr	r1, [r2, #8]
 80028a2:	f041 0101 	orr.w	r1, r1, #1
 80028a6:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80028a8:	6811      	ldr	r1, [r2, #0]
 80028aa:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80028ae:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 80028b0:	4618      	mov	r0, r3
 80028b2:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80028b4:	23ff      	movs	r3, #255	; 0xff
 80028b6:	e7e9      	b.n	800288c <HAL_UART_Receive_IT+0x38>
 80028b8:	b923      	cbnz	r3, 80028c4 <HAL_UART_Receive_IT+0x70>
 80028ba:	6903      	ldr	r3, [r0, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f9      	beq.n	80028b4 <HAL_UART_Receive_IT+0x60>
 80028c0:	237f      	movs	r3, #127	; 0x7f
 80028c2:	e7e3      	b.n	800288c <HAL_UART_Receive_IT+0x38>
 80028c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028c8:	d1e2      	bne.n	8002890 <HAL_UART_Receive_IT+0x3c>
 80028ca:	6903      	ldr	r3, [r0, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f7      	beq.n	80028c0 <HAL_UART_Receive_IT+0x6c>
 80028d0:	233f      	movs	r3, #63	; 0x3f
 80028d2:	e7db      	b.n	800288c <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 80028d4:	2001      	movs	r0, #1
 80028d6:	4770      	bx	lr
    return HAL_BUSY;
 80028d8:	2002      	movs	r0, #2
}
 80028da:	4770      	bx	lr

080028dc <HAL_UART_TxCpltCallback>:
 80028dc:	4770      	bx	lr

080028de <HAL_UART_ErrorCallback>:
 80028de:	4770      	bx	lr

080028e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80028e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80028ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80028ee:	f7ff fff6 	bl	80028de <HAL_UART_ErrorCallback>
 80028f2:	bd08      	pop	{r3, pc}

080028f4 <UART_SetConfig>:
{
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80028f8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028fa:	6921      	ldr	r1, [r4, #16]
 80028fc:	68a3      	ldr	r3, [r4, #8]
 80028fe:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002900:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002902:	430b      	orrs	r3, r1
 8002904:	6961      	ldr	r1, [r4, #20]
 8002906:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002908:	4949      	ldr	r1, [pc, #292]	; (8002a30 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800290a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800290c:	4001      	ands	r1, r0
 800290e:	430b      	orrs	r3, r1
 8002910:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002912:	686b      	ldr	r3, [r5, #4]
 8002914:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002916:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002918:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800291c:	430b      	orrs	r3, r1
 800291e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002920:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002922:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002924:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002928:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800292a:	430b      	orrs	r3, r1
 800292c:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292e:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <UART_SetConfig+0x140>)
 8002930:	429d      	cmp	r5, r3
 8002932:	d112      	bne.n	800295a <UART_SetConfig+0x66>
 8002934:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002938:	493f      	ldr	r1, [pc, #252]	; (8002a38 <UART_SetConfig+0x144>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002940:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002944:	5ccb      	ldrb	r3, [r1, r3]
 8002946:	d13b      	bne.n	80029c0 <UART_SetConfig+0xcc>
    switch (clocksource)
 8002948:	2b08      	cmp	r3, #8
 800294a:	d836      	bhi.n	80029ba <UART_SetConfig+0xc6>
 800294c:	e8df f003 	tbb	[pc, r3]
 8002950:	3524210f 	.word	0x3524210f
 8002954:	3535352d 	.word	0x3535352d
 8002958:	30          	.byte	0x30
 8002959:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <UART_SetConfig+0x148>)
 800295c:	429d      	cmp	r5, r3
 800295e:	d003      	beq.n	8002968 <UART_SetConfig+0x74>
 8002960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002964:	429d      	cmp	r5, r3
 8002966:	d15e      	bne.n	8002a26 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002968:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800296c:	d131      	bne.n	80029d2 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800296e:	f7ff fc73 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002972:	6861      	ldr	r1, [r4, #4]
 8002974:	084a      	lsrs	r2, r1, #1
 8002976:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800297a:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800297e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002980:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002982:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8002986:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002988:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
 8002990:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002992:	f7ff fc79 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8002996:	e7ec      	b.n	8002972 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002998:	6860      	ldr	r0, [r4, #4]
 800299a:	0843      	lsrs	r3, r0, #1
 800299c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80029a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80029a8:	e7e9      	b.n	800297e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029aa:	f7ff fb5b 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 80029ae:	e7e0      	b.n	8002972 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029b0:	6860      	ldr	r0, [r4, #4]
 80029b2:	0843      	lsrs	r3, r0, #1
 80029b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80029b8:	e7f4      	b.n	80029a4 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80029ba:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80029bc:	2300      	movs	r3, #0
 80029be:	e7e0      	b.n	8002982 <UART_SetConfig+0x8e>
    switch (clocksource)
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d833      	bhi.n	8002a2c <UART_SetConfig+0x138>
 80029c4:	e8df f003 	tbb	[pc, r3]
 80029c8:	321b1005 	.word	0x321b1005
 80029cc:	32323227 	.word	0x32323227
 80029d0:	2a          	.byte	0x2a
 80029d1:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029d2:	f7ff fc41 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80029d6:	6863      	ldr	r3, [r4, #4]
 80029d8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80029e0:	b280      	uxth	r0, r0
 80029e2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029e4:	2000      	movs	r0, #0
        break;
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029e8:	f7ff fc4e 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029ec:	6863      	ldr	r3, [r4, #4]
 80029ee:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <UART_SetConfig+0x140>)
 80029f8:	b280      	uxth	r0, r0
 80029fa:	60d8      	str	r0, [r3, #12]
 80029fc:	e7f2      	b.n	80029e4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029fe:	6862      	ldr	r2, [r4, #4]
 8002a00:	0853      	lsrs	r3, r2, #1
 8002a02:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002a06:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <UART_SetConfig+0x140>)
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	60d3      	str	r3, [r2, #12]
 8002a14:	e7e6      	b.n	80029e4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a16:	f7ff fb25 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8002a1a:	e7e7      	b.n	80029ec <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a1c:	6862      	ldr	r2, [r4, #4]
 8002a1e:	0853      	lsrs	r3, r2, #1
 8002a20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a24:	e7f1      	b.n	8002a0a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a26:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a2a:	d0c6      	beq.n	80029ba <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
  return ret;
 8002a2e:	bd38      	pop	{r3, r4, r5, pc}
 8002a30:	efff69f3 	.word	0xefff69f3
 8002a34:	40013800 	.word	0x40013800
 8002a38:	080050e8 	.word	0x080050e8
 8002a3c:	40004400 	.word	0x40004400

08002a40 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a42:	07da      	lsls	r2, r3, #31
{
 8002a44:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a46:	d506      	bpl.n	8002a56 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a48:	6801      	ldr	r1, [r0, #0]
 8002a4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a4c:	684a      	ldr	r2, [r1, #4]
 8002a4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a52:	4322      	orrs	r2, r4
 8002a54:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a56:	079c      	lsls	r4, r3, #30
 8002a58:	d506      	bpl.n	8002a68 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a5a:	6801      	ldr	r1, [r0, #0]
 8002a5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a5e:	684a      	ldr	r2, [r1, #4]
 8002a60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a64:	4322      	orrs	r2, r4
 8002a66:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a68:	0759      	lsls	r1, r3, #29
 8002a6a:	d506      	bpl.n	8002a7a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a6c:	6801      	ldr	r1, [r0, #0]
 8002a6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a70:	684a      	ldr	r2, [r1, #4]
 8002a72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a76:	4322      	orrs	r2, r4
 8002a78:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a7a:	071a      	lsls	r2, r3, #28
 8002a7c:	d506      	bpl.n	8002a8c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a7e:	6801      	ldr	r1, [r0, #0]
 8002a80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a82:	684a      	ldr	r2, [r1, #4]
 8002a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a88:	4322      	orrs	r2, r4
 8002a8a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a8c:	06dc      	lsls	r4, r3, #27
 8002a8e:	d506      	bpl.n	8002a9e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a90:	6801      	ldr	r1, [r0, #0]
 8002a92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002a94:	688a      	ldr	r2, [r1, #8]
 8002a96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a9a:	4322      	orrs	r2, r4
 8002a9c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a9e:	0699      	lsls	r1, r3, #26
 8002aa0:	d506      	bpl.n	8002ab0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aa2:	6801      	ldr	r1, [r0, #0]
 8002aa4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002aa6:	688a      	ldr	r2, [r1, #8]
 8002aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aac:	4322      	orrs	r2, r4
 8002aae:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab0:	065a      	lsls	r2, r3, #25
 8002ab2:	d50f      	bpl.n	8002ad4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ab4:	6801      	ldr	r1, [r0, #0]
 8002ab6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ab8:	684a      	ldr	r2, [r1, #4]
 8002aba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002abe:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ac4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac6:	d105      	bne.n	8002ad4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ac8:	684a      	ldr	r2, [r1, #4]
 8002aca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002acc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ad0:	4322      	orrs	r2, r4
 8002ad2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	d506      	bpl.n	8002ae6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ad8:	6802      	ldr	r2, [r0, #0]
 8002ada:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002adc:	6853      	ldr	r3, [r2, #4]
 8002ade:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	6053      	str	r3, [r2, #4]
 8002ae6:	bd10      	pop	{r4, pc}

08002ae8 <UART_WaitOnFlagUntilTimeout>:
{
 8002ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aec:	9d06      	ldr	r5, [sp, #24]
 8002aee:	4604      	mov	r4, r0
 8002af0:	460f      	mov	r7, r1
 8002af2:	4616      	mov	r6, r2
 8002af4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af6:	6821      	ldr	r1, [r4, #0]
 8002af8:	69ca      	ldr	r2, [r1, #28]
 8002afa:	ea37 0302 	bics.w	r3, r7, r2
 8002afe:	bf0c      	ite	eq
 8002b00:	2201      	moveq	r2, #1
 8002b02:	2200      	movne	r2, #0
 8002b04:	42b2      	cmp	r2, r6
 8002b06:	d002      	beq.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002b08:	2000      	movs	r0, #0
}
 8002b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002b0e:	1c6b      	adds	r3, r5, #1
 8002b10:	d0f2      	beq.n	8002af8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b12:	b99d      	cbnz	r5, 8002b3c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002b26:	2320      	movs	r3, #32
 8002b28:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002b30:	2300      	movs	r3, #0
 8002b32:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002b36:	2003      	movs	r0, #3
 8002b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b3c:	f7fe f9a6 	bl	8000e8c <HAL_GetTick>
 8002b40:	eba0 0008 	sub.w	r0, r0, r8
 8002b44:	4285      	cmp	r5, r0
 8002b46:	d2d6      	bcs.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xe>
 8002b48:	e7e4      	b.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x2c>

08002b4a <HAL_UART_Transmit>:
{
 8002b4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002b4e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002b50:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002b54:	2b20      	cmp	r3, #32
{
 8002b56:	4604      	mov	r4, r0
 8002b58:	460d      	mov	r5, r1
 8002b5a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002b5c:	d14c      	bne.n	8002bf8 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8002b5e:	2900      	cmp	r1, #0
 8002b60:	d048      	beq.n	8002bf4 <HAL_UART_Transmit+0xaa>
 8002b62:	2a00      	cmp	r2, #0
 8002b64:	d046      	beq.n	8002bf4 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002b66:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d044      	beq.n	8002bf8 <HAL_UART_Transmit+0xae>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b78:	2321      	movs	r3, #33	; 0x21
 8002b7a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002b7e:	f7fe f985 	bl	8000e8c <HAL_GetTick>
    huart->TxXferSize = Size;
 8002b82:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002b86:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002b88:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002b8c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002b90:	b292      	uxth	r2, r2
 8002b92:	b962      	cbnz	r2, 8002bae <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b94:	9700      	str	r7, [sp, #0]
 8002b96:	4633      	mov	r3, r6
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff ffa4 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002ba0:	b998      	cbnz	r0, 8002bca <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002ba8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002bac:	e00e      	b.n	8002bcc <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002bae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	4633      	mov	r3, r6
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff ff90 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002bc8:	b118      	cbz	r0, 8002bd2 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002bca:	2003      	movs	r0, #3
}
 8002bcc:	b002      	add	sp, #8
 8002bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd2:	68a3      	ldr	r3, [r4, #8]
 8002bd4:	6822      	ldr	r2, [r4, #0]
 8002bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bda:	d107      	bne.n	8002bec <HAL_UART_Transmit+0xa2>
 8002bdc:	6923      	ldr	r3, [r4, #16]
 8002bde:	b92b      	cbnz	r3, 8002bec <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002be0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002bea:	e7cf      	b.n	8002b8c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002bec:	782b      	ldrb	r3, [r5, #0]
 8002bee:	8513      	strh	r3, [r2, #40]	; 0x28
 8002bf0:	3501      	adds	r5, #1
 8002bf2:	e7cb      	b.n	8002b8c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	e7e9      	b.n	8002bcc <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	e7e7      	b.n	8002bcc <HAL_UART_Transmit+0x82>

08002bfc <UART_CheckIdleState>:
{
 8002bfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bfe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	2600      	movs	r6, #0
 8002c02:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002c04:	f7fe f942 	bl	8000e8c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002c0e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c10:	d417      	bmi.n	8002c42 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	075b      	lsls	r3, r3, #29
 8002c18:	d50a      	bpl.n	8002c30 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2200      	movs	r2, #0
 8002c22:	462b      	mov	r3, r5
 8002c24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff ff5d 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002c2e:	b9a0      	cbnz	r0, 8002c5a <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002c30:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002c32:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002c34:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002c38:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002c40:	e00c      	b.n	8002c5c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4632      	mov	r2, r6
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7ff ff49 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d0db      	beq.n	8002c12 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002c5a:	2003      	movs	r0, #3
}
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}

08002c60 <HAL_UART_Init>:
{
 8002c60:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002c62:	4604      	mov	r4, r0
 8002c64:	b360      	cbz	r0, 8002cc0 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c66:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002c6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c6e:	b91b      	cbnz	r3, 8002c78 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c70:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002c74:	f000 ffee 	bl	8003c54 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c78:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c7a:	2324      	movs	r3, #36	; 0x24
 8002c7c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fe33 	bl	80028f4 <UART_SetConfig>
 8002c8e:	2801      	cmp	r0, #1
 8002c90:	d016      	beq.n	8002cc0 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c94:	b113      	cbz	r3, 8002c9c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff fed2 	bl	8002a40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002cb4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002cb6:	601a      	str	r2, [r3, #0]
}
 8002cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002cbc:	f7ff bf9e 	b.w	8002bfc <UART_CheckIdleState>
}
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	bd10      	pop	{r4, pc}

08002cc4 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cc4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002cc8:	2b21      	cmp	r3, #33	; 0x21
 8002cca:	d127      	bne.n	8002d1c <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8002ccc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002cd0:	6802      	ldr	r2, [r0, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	b94b      	cbnz	r3, 8002cea <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002cd6:	6811      	ldr	r1, [r2, #0]
 8002cd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002cdc:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cde:	6811      	ldr	r1, [r2, #0]
 8002ce0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002ce4:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cea:	6883      	ldr	r3, [r0, #8]
 8002cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002cf2:	d10e      	bne.n	8002d12 <UART_Transmit_IT+0x4e>
 8002cf4:	6901      	ldr	r1, [r0, #16]
 8002cf6:	b961      	cbnz	r1, 8002d12 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002cf8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002cfc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d00:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002d02:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002d04:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8002d10:	e7e9      	b.n	8002ce6 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	8513      	strh	r3, [r2, #40]	; 0x28
 8002d1a:	e7f3      	b.n	8002d04 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8002d1c:	2002      	movs	r0, #2
  }
}
 8002d1e:	4770      	bx	lr

08002d20 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d20:	6801      	ldr	r1, [r0, #0]
{
 8002d22:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d24:	680b      	ldr	r3, [r1, #0]
 8002d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d2a:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002d32:	f7ff fdd3 	bl	80028dc <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002d36:	2000      	movs	r0, #0
 8002d38:	bd08      	pop	{r3, pc}

08002d3a <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d3a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002d3e:	2b22      	cmp	r3, #34	; 0x22
{
 8002d40:	b510      	push	{r4, lr}
 8002d42:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d44:	d129      	bne.n	8002d9a <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d46:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d48:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8002d4a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	ea02 0201 	and.w	r2, r2, r1
 8002d56:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d58:	d11b      	bne.n	8002d92 <UART_Receive_IT+0x58>
 8002d5a:	6901      	ldr	r1, [r0, #16]
 8002d5c:	b9c9      	cbnz	r1, 8002d92 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8002d5e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8002d62:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002d64:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002d68:	3c01      	subs	r4, #1
 8002d6a:	b2a4      	uxth	r4, r4
 8002d6c:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8002d70:	b96c      	cbnz	r4, 8002d8e <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d72:	6803      	ldr	r3, [r0, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d84:	2320      	movs	r3, #32
 8002d86:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8002d8a:	f000 f9d7 	bl	800313c <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8002d8e:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002d90:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d92:	1c59      	adds	r1, r3, #1
 8002d94:	6541      	str	r1, [r0, #84]	; 0x54
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	e7e4      	b.n	8002d64 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	f042 0208 	orr.w	r2, r2, #8
 8002da0:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002da2:	2002      	movs	r0, #2
 8002da4:	bd10      	pop	{r4, pc}
	...

08002da8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002da8:	6802      	ldr	r2, [r0, #0]
 8002daa:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dac:	6811      	ldr	r1, [r2, #0]
{
 8002dae:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002db0:	f013 050f 	ands.w	r5, r3, #15
{
 8002db4:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002db6:	d107      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db8:	069e      	lsls	r6, r3, #26
 8002dba:	d505      	bpl.n	8002dc8 <HAL_UART_IRQHandler+0x20>
 8002dbc:	068e      	lsls	r6, r1, #26
 8002dbe:	d503      	bpl.n	8002dc8 <HAL_UART_IRQHandler+0x20>
}
 8002dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002dc4:	f7ff bfb9 	b.w	8002d3a <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002dc8:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	d05c      	beq.n	8002e88 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002dce:	f010 0501 	ands.w	r5, r0, #1
 8002dd2:	d102      	bne.n	8002dda <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002dd4:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002dd8:	d056      	beq.n	8002e88 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dda:	07d8      	lsls	r0, r3, #31
 8002ddc:	d507      	bpl.n	8002dee <HAL_UART_IRQHandler+0x46>
 8002dde:	05ce      	lsls	r6, r1, #23
 8002de0:	d505      	bpl.n	8002dee <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002de2:	2001      	movs	r0, #1
 8002de4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002de8:	f040 0001 	orr.w	r0, r0, #1
 8002dec:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dee:	0798      	lsls	r0, r3, #30
 8002df0:	d506      	bpl.n	8002e00 <HAL_UART_IRQHandler+0x58>
 8002df2:	b12d      	cbz	r5, 8002e00 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002df4:	2002      	movs	r0, #2
 8002df6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002df8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002dfa:	f040 0004 	orr.w	r0, r0, #4
 8002dfe:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e00:	075e      	lsls	r6, r3, #29
 8002e02:	d506      	bpl.n	8002e12 <HAL_UART_IRQHandler+0x6a>
 8002e04:	b12d      	cbz	r5, 8002e12 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002e06:	2004      	movs	r0, #4
 8002e08:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e0a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002e0c:	f040 0002 	orr.w	r0, r0, #2
 8002e10:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002e12:	0718      	lsls	r0, r3, #28
 8002e14:	d507      	bpl.n	8002e26 <HAL_UART_IRQHandler+0x7e>
 8002e16:	068e      	lsls	r6, r1, #26
 8002e18:	d400      	bmi.n	8002e1c <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e1a:	b125      	cbz	r5, 8002e26 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002e1c:	2008      	movs	r0, #8
 8002e1e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e20:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002e22:	4302      	orrs	r2, r0
 8002e24:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e26:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d050      	beq.n	8002ece <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e2c:	0698      	lsls	r0, r3, #26
 8002e2e:	d504      	bpl.n	8002e3a <HAL_UART_IRQHandler+0x92>
 8002e30:	068a      	lsls	r2, r1, #26
 8002e32:	d502      	bpl.n	8002e3a <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff ff80 	bl	8002d3a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002e3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002e3c:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8002e3e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002e40:	d404      	bmi.n	8002e4c <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002e46:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002e4a:	d019      	beq.n	8002e80 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8002e4c:	f7ff fcf5 	bl	800283a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	0656      	lsls	r6, r2, #25
 8002e56:	d50f      	bpl.n	8002e78 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e58:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002e5a:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e60:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002e62:	b148      	cbz	r0, 8002e78 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_UART_IRQHandler+0x128>)
 8002e66:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e68:	f7fe fda5 	bl	80019b6 <HAL_DMA_Abort_IT>
 8002e6c:	b378      	cbz	r0, 8002ece <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e6e:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8002e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e76:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f7ff fd30 	bl	80028de <HAL_UART_ErrorCallback>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002e80:	f7ff fd2d 	bl	80028de <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002e88:	02dd      	lsls	r5, r3, #11
 8002e8a:	d50e      	bpl.n	8002eaa <HAL_UART_IRQHandler+0x102>
 8002e8c:	0246      	lsls	r6, r0, #9
 8002e8e:	d50c      	bpl.n	8002eaa <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002e90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e94:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002e96:	2320      	movs	r3, #32
 8002e98:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8002e9c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8002ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002ea6:	f000 b815 	b.w	8002ed4 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eaa:	061d      	lsls	r5, r3, #24
 8002eac:	d506      	bpl.n	8002ebc <HAL_UART_IRQHandler+0x114>
 8002eae:	0608      	lsls	r0, r1, #24
 8002eb0:	d504      	bpl.n	8002ebc <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002eb2:	4620      	mov	r0, r4
}
 8002eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002eb8:	f7ff bf04 	b.w	8002cc4 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ebc:	065a      	lsls	r2, r3, #25
 8002ebe:	d506      	bpl.n	8002ece <HAL_UART_IRQHandler+0x126>
 8002ec0:	064b      	lsls	r3, r1, #25
 8002ec2:	d504      	bpl.n	8002ece <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002ec4:	4620      	mov	r0, r4
}
 8002ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002eca:	f7ff bf29 	b.w	8002d20 <UART_EndTransmit_IT>
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	080028e1 	.word	0x080028e1

08002ed4 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	4770      	bx	lr
	...

08002ed8 <uart_comms>:
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc1;


void uart_comms(){
 8002ed8:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8002eda:	4c8a      	ldr	r4, [pc, #552]	; (8003104 <uart_comms+0x22c>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	4621      	mov	r1, r4
 8002ee0:	4889      	ldr	r0, [pc, #548]	; (8003108 <uart_comms+0x230>)
 8002ee2:	f7ff fcb7 	bl	8002854 <HAL_UART_Receive_IT>
	rx_flag = 0;
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4b88      	ldr	r3, [pc, #544]	; (800310c <uart_comms+0x234>)
 8002eea:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <uart_comms+0x238>)
 8002eee:	4a89      	ldr	r2, [pc, #548]	; (8003114 <uart_comms+0x23c>)
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	7820      	ldrb	r0, [r4, #0]
 8002ef6:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	2a24      	cmp	r2, #36	; 0x24
 8002efe:	d00a      	beq.n	8002f16 <uart_comms+0x3e>

	uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	2a24      	cmp	r2, #36	; 0x24
 8002f04:	d00c      	beq.n	8002f20 <uart_comms+0x48>
				 }
				memset(uart_command,0x00, 40);
				memset(return_value,0x00, 15);
				uart_counter = 0;
		  }
		  else if(uart_counter > 39 ){
 8002f06:	4b83      	ldr	r3, [pc, #524]	; (8003114 <uart_comms+0x23c>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b27      	cmp	r3, #39	; 0x27
 8002f0c:	d902      	bls.n	8002f14 <uart_comms+0x3c>
			  uart_counter = 0;
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4b80      	ldr	r3, [pc, #512]	; (8003114 <uart_comms+0x23c>)
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
	uart_counter += 1;
 8002f16:	497f      	ldr	r1, [pc, #508]	; (8003114 <uart_comms+0x23c>)
 8002f18:	780a      	ldrb	r2, [r1, #0]
 8002f1a:	3201      	adds	r2, #1
 8002f1c:	700a      	strb	r2, [r1, #0]
 8002f1e:	e7ef      	b.n	8002f00 <uart_comms+0x28>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8002f20:	4a7c      	ldr	r2, [pc, #496]	; (8003114 <uart_comms+0x23c>)
 8002f22:	7812      	ldrb	r2, [r2, #0]
 8002f24:	1899      	adds	r1, r3, r2
 8002f26:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8002f2a:	290a      	cmp	r1, #10
 8002f2c:	d1eb      	bne.n	8002f06 <uart_comms+0x2e>
 8002f2e:	1899      	adds	r1, r3, r2
 8002f30:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 8002f34:	290d      	cmp	r1, #13
 8002f36:	d1e6      	bne.n	8002f06 <uart_comms+0x2e>
 8002f38:	2a02      	cmp	r2, #2
 8002f3a:	d9e4      	bls.n	8002f06 <uart_comms+0x2e>
		switch(uart_command[1]){
 8002f3c:	785a      	ldrb	r2, [r3, #1]
 8002f3e:	3a41      	subs	r2, #65	; 0x41
 8002f40:	2a09      	cmp	r2, #9
 8002f42:	d828      	bhi.n	8002f96 <uart_comms+0xbe>
 8002f44:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002f48:	0038000a 	.word	0x0038000a
 8002f4c:	00660048 	.word	0x00660048
 8002f50:	00860076 	.word	0x00860076
 8002f54:	00c200a3 	.word	0x00c200a3
 8002f58:	00d400cb 	.word	0x00d400cb
				memcpy(studentnumber, uart_command, 2 );
 8002f5c:	4a6e      	ldr	r2, [pc, #440]	; (8003118 <uart_comms+0x240>)
 8002f5e:	6811      	ldr	r1, [r2, #0]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	800b      	strh	r3, [r1, #0]
				memcpy(studentnumber+2,comma,1);
 8002f64:	6813      	ldr	r3, [r2, #0]
 8002f66:	496d      	ldr	r1, [pc, #436]	; (800311c <uart_comms+0x244>)
 8002f68:	7809      	ldrb	r1, [r1, #0]
 8002f6a:	7099      	strb	r1, [r3, #2]
				memcpy(studentnumber+3 ,studentnumber1,8 );
 8002f6c:	6813      	ldr	r3, [r2, #0]
 8002f6e:	496c      	ldr	r1, [pc, #432]	; (8003120 <uart_comms+0x248>)
 8002f70:	6808      	ldr	r0, [r1, #0]
 8002f72:	6849      	ldr	r1, [r1, #4]
 8002f74:	f8c3 0003 	str.w	r0, [r3, #3]
 8002f78:	f8c3 1007 	str.w	r1, [r3, #7]
				memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8002f7c:	6811      	ldr	r1, [r2, #0]
 8002f7e:	4b69      	ldr	r3, [pc, #420]	; (8003124 <uart_comms+0x24c>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f8c1 200b 	str.w	r2, [r1, #11]
 8002f88:	f8c1 300f 	str.w	r3, [r1, #15]
				HAL_UART_Transmit(&huart1, ((uint8_t*)studentnumber), 13, 10);
 8002f8c:	230a      	movs	r3, #10
 8002f8e:	220d      	movs	r2, #13
 8002f90:	485d      	ldr	r0, [pc, #372]	; (8003108 <uart_comms+0x230>)
 8002f92:	f7ff fdda 	bl	8002b4a <HAL_UART_Transmit>
				memset(uart_command,0x00, 40);
 8002f96:	2228      	movs	r2, #40	; 0x28
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <uart_comms+0x238>)
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	f000 ff3a 	bl	8003e16 <memset>
				memset(return_value,0x00, 15);
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <uart_comms+0x250>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	6053      	str	r3, [r2, #4]
 8002fac:	6093      	str	r3, [r2, #8]
 8002fae:	f8c2 300b 	str.w	r3, [r2, #11]
				uart_counter = 0;
 8002fb2:	4a58      	ldr	r2, [pc, #352]	; (8003114 <uart_comms+0x23c>)
 8002fb4:	7013      	strb	r3, [r2, #0]
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
					memcpy(return_value, uart_command, 2);
 8002fb8:	495b      	ldr	r1, [pc, #364]	; (8003128 <uart_comms+0x250>)
 8002fba:	680a      	ldr	r2, [r1, #0]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	8013      	strh	r3, [r2, #0]
					memcpy(return_value+2, endSimbol,2 );
 8002fc0:	680b      	ldr	r3, [r1, #0]
 8002fc2:	4a58      	ldr	r2, [pc, #352]	; (8003124 <uart_comms+0x24c>)
 8002fc4:	8812      	ldrh	r2, [r2, #0]
 8002fc6:	805a      	strh	r2, [r3, #2]
					HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 8002fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fcc:	2204      	movs	r2, #4
 8002fce:	6809      	ldr	r1, [r1, #0]
 8002fd0:	484d      	ldr	r0, [pc, #308]	; (8003108 <uart_comms+0x230>)
 8002fd2:	f7ff fdba 	bl	8002b4a <HAL_UART_Transmit>
 8002fd6:	e7de      	b.n	8002f96 <uart_comms+0xbe>
					 memcpy(return_value, uart_command, 2);
 8002fd8:	4953      	ldr	r1, [pc, #332]	; (8003128 <uart_comms+0x250>)
 8002fda:	680a      	ldr	r2, [r1, #0]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, endSimbol,2 );
 8002fe0:	680b      	ldr	r3, [r1, #0]
 8002fe2:	4a50      	ldr	r2, [pc, #320]	; (8003124 <uart_comms+0x24c>)
 8002fe4:	8812      	ldrh	r2, [r2, #0]
 8002fe6:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 8002fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fec:	2204      	movs	r2, #4
 8002fee:	6809      	ldr	r1, [r1, #0]
 8002ff0:	4845      	ldr	r0, [pc, #276]	; (8003108 <uart_comms+0x230>)
 8002ff2:	f7ff fdaa 	bl	8002b4a <HAL_UART_Transmit>
					 if(uart_command[2]=='0'){
 8002ff6:	4b46      	ldr	r3, [pc, #280]	; (8003110 <uart_comms+0x238>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	789b      	ldrb	r3, [r3, #2]
 8002ffc:	2b30      	cmp	r3, #48	; 0x30
 8002ffe:	d005      	beq.n	800300c <uart_comms+0x134>
					 else if(uart_command[2] == '1'){
 8003000:	2b31      	cmp	r3, #49	; 0x31
 8003002:	d1c8      	bne.n	8002f96 <uart_comms+0xbe>
						auto_heating = 1;	// auto heating on
 8003004:	2201      	movs	r2, #1
 8003006:	4b49      	ldr	r3, [pc, #292]	; (800312c <uart_comms+0x254>)
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e7c4      	b.n	8002f96 <uart_comms+0xbe>
						auto_heating = 0;	// auto heating off
 800300c:	2200      	movs	r2, #0
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <uart_comms+0x254>)
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e7c0      	b.n	8002f96 <uart_comms+0xbe>
					 memcpy(return_value, uart_command, 2);
 8003014:	4944      	ldr	r1, [pc, #272]	; (8003128 <uart_comms+0x250>)
 8003016:	680a      	ldr	r2, [r1, #0]
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, endSimbol,2 );
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	4a41      	ldr	r2, [pc, #260]	; (8003124 <uart_comms+0x24c>)
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 8003024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003028:	2204      	movs	r2, #4
 800302a:	6809      	ldr	r1, [r1, #0]
 800302c:	4836      	ldr	r0, [pc, #216]	; (8003108 <uart_comms+0x230>)
 800302e:	f7ff fd8c 	bl	8002b4a <HAL_UART_Transmit>
 8003032:	e7b0      	b.n	8002f96 <uart_comms+0xbe>
					 memcpy(return_value, uart_command, 2);
 8003034:	493c      	ldr	r1, [pc, #240]	; (8003128 <uart_comms+0x250>)
 8003036:	680a      	ldr	r2, [r1, #0]
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, endSimbol,2 );
 800303c:	680b      	ldr	r3, [r1, #0]
 800303e:	4a39      	ldr	r2, [pc, #228]	; (8003124 <uart_comms+0x24c>)
 8003040:	8812      	ldrh	r2, [r2, #0]
 8003042:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 8003044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003048:	2204      	movs	r2, #4
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	482e      	ldr	r0, [pc, #184]	; (8003108 <uart_comms+0x230>)
 800304e:	f7ff fd7c 	bl	8002b4a <HAL_UART_Transmit>
 8003052:	e7a0      	b.n	8002f96 <uart_comms+0xbe>
					 memcpy(return_value, uart_command,2);
 8003054:	4934      	ldr	r1, [pc, #208]	; (8003128 <uart_comms+0x250>)
 8003056:	680a      	ldr	r2, [r1, #0]
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2,endSimbol, 2);
 800305c:	680b      	ldr	r3, [r1, #0]
 800305e:	4a31      	ldr	r2, [pc, #196]	; (8003124 <uart_comms+0x24c>)
 8003060:	8812      	ldrh	r2, [r2, #0]
 8003062:	805a      	strh	r2, [r3, #2]
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, sizeof(return_value), 1000);
 8003064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003068:	2204      	movs	r2, #4
 800306a:	6809      	ldr	r1, [r1, #0]
 800306c:	4826      	ldr	r0, [pc, #152]	; (8003108 <uart_comms+0x230>)
 800306e:	f7ff fd6c 	bl	8002b4a <HAL_UART_Transmit>
					 sizeOfTemp = uart_counter - 5;
 8003072:	4b28      	ldr	r3, [pc, #160]	; (8003114 <uart_comms+0x23c>)
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	3a05      	subs	r2, #5
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <uart_comms+0x258>)
 800307c:	701a      	strb	r2, [r3, #0]
					 memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <uart_comms+0x238>)
 8003080:	6819      	ldr	r1, [r3, #0]
 8003082:	3103      	adds	r1, #3
 8003084:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <uart_comms+0x25c>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	f000 feba 	bl	8003e00 <memcpy>
					break;
 800308c:	e783      	b.n	8002f96 <uart_comms+0xbe>
					 memcpy(return_value, uart_command, 2);
 800308e:	4c26      	ldr	r4, [pc, #152]	; (8003128 <uart_comms+0x250>)
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, comma, 1);
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	4a20      	ldr	r2, [pc, #128]	; (800311c <uart_comms+0x244>)
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	709a      	strb	r2, [r3, #2]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 800309e:	6820      	ldr	r0, [r4, #0]
 80030a0:	4e23      	ldr	r6, [pc, #140]	; (8003130 <uart_comms+0x258>)
 80030a2:	7835      	ldrb	r5, [r6, #0]
 80030a4:	462a      	mov	r2, r5
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <uart_comms+0x25c>)
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	3003      	adds	r0, #3
 80030ac:	f000 fea8 	bl	8003e00 <memcpy>
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	3503      	adds	r5, #3
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <uart_comms+0x24c>)
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	535a      	strh	r2, [r3, r5]
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 80030ba:	7832      	ldrb	r2, [r6, #0]
 80030bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c0:	3205      	adds	r2, #5
 80030c2:	6821      	ldr	r1, [r4, #0]
 80030c4:	4810      	ldr	r0, [pc, #64]	; (8003108 <uart_comms+0x230>)
 80030c6:	f7ff fd40 	bl	8002b4a <HAL_UART_Transmit>
					 break;
 80030ca:	e764      	b.n	8002f96 <uart_comms+0xbe>
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value)+1, 1000);
 80030cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030d0:	2205      	movs	r2, #5
 80030d2:	4915      	ldr	r1, [pc, #84]	; (8003128 <uart_comms+0x250>)
 80030d4:	6809      	ldr	r1, [r1, #0]
 80030d6:	480c      	ldr	r0, [pc, #48]	; (8003108 <uart_comms+0x230>)
 80030d8:	f7ff fd37 	bl	8002b4a <HAL_UART_Transmit>
					 break;
 80030dc:	e75b      	b.n	8002f96 <uart_comms+0xbe>
					HAL_UART_Transmit(&huart1,(uint8_t*)time, sizeof(time), 1000);
 80030de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030e2:	2204      	movs	r2, #4
 80030e4:	4914      	ldr	r1, [pc, #80]	; (8003138 <uart_comms+0x260>)
 80030e6:	6809      	ldr	r1, [r1, #0]
 80030e8:	4807      	ldr	r0, [pc, #28]	; (8003108 <uart_comms+0x230>)
 80030ea:	f7ff fd2e 	bl	8002b4a <HAL_UART_Transmit>
					 break;
 80030ee:	e752      	b.n	8002f96 <uart_comms+0xbe>
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value), 1000);
 80030f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f4:	2204      	movs	r2, #4
 80030f6:	490c      	ldr	r1, [pc, #48]	; (8003128 <uart_comms+0x250>)
 80030f8:	6809      	ldr	r1, [r1, #0]
 80030fa:	4803      	ldr	r0, [pc, #12]	; (8003108 <uart_comms+0x230>)
 80030fc:	f7ff fd25 	bl	8002b4a <HAL_UART_Transmit>
					 break;
 8003100:	e749      	b.n	8002f96 <uart_comms+0xbe>
 8003102:	bf00      	nop
 8003104:	200001f8 	.word	0x200001f8
 8003108:	20000144 	.word	0x20000144
 800310c:	200000bc 	.word	0x200000bc
 8003110:	200000cc 	.word	0x200000cc
 8003114:	200000d0 	.word	0x200000d0
 8003118:	200001f4 	.word	0x200001f4
 800311c:	20000004 	.word	0x20000004
 8003120:	20000010 	.word	0x20000010
 8003124:	20000008 	.word	0x20000008
 8003128:	200000b8 	.word	0x200000b8
 800312c:	200000b6 	.word	0x200000b6
 8003130:	200000c8 	.word	0x200000c8
 8003134:	200000c4 	.word	0x200000c4
 8003138:	20000018 	.word	0x20000018

0800313c <HAL_UART_RxCpltCallback>:
		segment_counter = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
		rx_flag = 1;
 800313c:	2201      	movs	r2, #1
 800313e:	4b01      	ldr	r3, [pc, #4]	; (8003144 <HAL_UART_RxCpltCallback+0x8>)
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	4770      	bx	lr
 8003144:	200000bc 	.word	0x200000bc

08003148 <init_peripherals>:

}

void init_peripherals(){
 8003148:	b510      	push	{r4, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 800314a:	2201      	movs	r2, #1
 800314c:	2120      	movs	r1, #32
 800314e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003152:	f7fe fd0f 	bl	8001b74 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 8003156:	2201      	movs	r2, #1
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800315e:	f7fe fd09 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 8003162:	2201      	movs	r2, #1
 8003164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800316c:	f7fe fd02 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 8003170:	2201      	movs	r2, #1
 8003172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800317a:	f7fe fcfb 	bl	8001b74 <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 800317e:	4c28      	ldr	r4, [pc, #160]	; (8003220 <init_peripherals+0xd8>)
 8003180:	2201      	movs	r2, #1
 8003182:	2108      	movs	r1, #8
 8003184:	4620      	mov	r0, r4
 8003186:	f7fe fcf5 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 800318a:	2201      	movs	r2, #1
 800318c:	2110      	movs	r1, #16
 800318e:	4620      	mov	r0, r4
 8003190:	f7fe fcf0 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003194:	2201      	movs	r2, #1
 8003196:	2120      	movs	r1, #32
 8003198:	4620      	mov	r0, r4
 800319a:	f7fe fceb 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 800319e:	2201      	movs	r2, #1
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7fe fce6 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80031a8:	2201      	movs	r2, #1
 80031aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031ae:	4620      	mov	r0, r4
 80031b0:	f7fe fce0 	bl	8001b74 <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 80031b4:	2201      	movs	r2, #1
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	481a      	ldr	r0, [pc, #104]	; (8003224 <init_peripherals+0xdc>)
 80031ba:	f7fe fcdb 	bl	8001b74 <HAL_GPIO_WritePin>

	  studentnumber = (uint8_t*)malloc(15);
 80031be:	200f      	movs	r0, #15
 80031c0:	f000 fe16 	bl	8003df0 <malloc>
 80031c4:	4b18      	ldr	r3, [pc, #96]	; (8003228 <init_peripherals+0xe0>)
 80031c6:	6018      	str	r0, [r3, #0]
	  memset(studentnumber, 0x00, 15);
 80031c8:	2400      	movs	r4, #0
 80031ca:	6004      	str	r4, [r0, #0]
 80031cc:	6044      	str	r4, [r0, #4]
 80031ce:	6084      	str	r4, [r0, #8]
 80031d0:	f8c0 400b 	str.w	r4, [r0, #11]
	  return_value = (uint8_t*)malloc(15);
 80031d4:	200f      	movs	r0, #15
 80031d6:	f000 fe0b 	bl	8003df0 <malloc>
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <init_peripherals+0xe4>)
 80031dc:	6018      	str	r0, [r3, #0]
	  memset(return_value, 0x00, 15);
 80031de:	6004      	str	r4, [r0, #0]
 80031e0:	6044      	str	r4, [r0, #4]
 80031e2:	6084      	str	r4, [r0, #8]
 80031e4:	f8c0 400b 	str.w	r4, [r0, #11]
	  uart_command = (uint8_t*)malloc(40);
 80031e8:	2028      	movs	r0, #40	; 0x28
 80031ea:	f000 fe01 	bl	8003df0 <malloc>
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <init_peripherals+0xe8>)
 80031f0:	6018      	str	r0, [r3, #0]
	  memset(uart_command, 0x00, 40);
 80031f2:	2228      	movs	r2, #40	; 0x28
 80031f4:	4621      	mov	r1, r4
 80031f6:	f000 fe0e 	bl	8003e16 <memset>
	  set_temp = (uint8_t*)malloc(3);
 80031fa:	2003      	movs	r0, #3
 80031fc:	f000 fdf8 	bl	8003df0 <malloc>
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <init_peripherals+0xec>)
 8003202:	6018      	str	r0, [r3, #0]
	  memset(set_temp, 0x00, 3);
 8003204:	8004      	strh	r4, [r0, #0]
 8003206:	7084      	strb	r4, [r0, #2]
	  segment_val =(uint8_t*)malloc(4);
 8003208:	2004      	movs	r0, #4
 800320a:	f000 fdf1 	bl	8003df0 <malloc>
	  memset(segment_val, 0x00, 4);
 800320e:	6004      	str	r4, [r0, #0]
	  segment_val = studentnumber1;
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <init_peripherals+0xf0>)
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <init_peripherals+0xf4>)
 8003214:	601a      	str	r2, [r3, #0]


	HAL_TIM_Base_Start_IT(&htim2);
 8003216:	480a      	ldr	r0, [pc, #40]	; (8003240 <init_peripherals+0xf8>)
 8003218:	f7ff f906 	bl	8002428 <HAL_TIM_Base_Start_IT>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	bf00      	nop
 8003220:	48000400 	.word	0x48000400
 8003224:	48000800 	.word	0x48000800
 8003228:	200001f4 	.word	0x200001f4
 800322c:	200000b8 	.word	0x200000b8
 8003230:	200000cc 	.word	0x200000cc
 8003234:	200000c4 	.word	0x200000c4
 8003238:	20000010 	.word	0x20000010
 800323c:	200000c0 	.word	0x200000c0
 8003240:	200001b4 	.word	0x200001b4
 8003244:	00000000 	.word	0x00000000

08003248 <adc_comms>:

}

void adc_comms(){
 8003248:	b5d0      	push	{r4, r6, r7, lr}
	adc_raw_value = HAL_ADC_GetValue(&hadc1);
 800324a:	482b      	ldr	r0, [pc, #172]	; (80032f8 <adc_comms+0xb0>)
 800324c:	f7fe f800 	bl	8001250 <HAL_ADC_GetValue>
 8003250:	b280      	uxth	r0, r0
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <adc_comms+0xb4>)
 8003254:	8018      	strh	r0, [r3, #0]
	adc_buffer = (pow((adc_raw_value-2072)/8.629,2))+adc_buffer;
 8003256:	f6a0 0018 	subw	r0, r0, #2072	; 0x818
 800325a:	f7fd f907 	bl	800046c <__aeabi_i2d>
 800325e:	a322      	add	r3, pc, #136	; (adr r3, 80032e8 <adc_comms+0xa0>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd fa92 	bl	800078c <__aeabi_ddiv>
 8003268:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80032f0 <adc_comms+0xa8>
 800326c:	ec41 0b10 	vmov	d0, r0, r1
 8003270:	f000 fe4a 	bl	8003f08 <pow>
 8003274:	ec57 6b10 	vmov	r6, r7, d0
 8003278:	4c21      	ldr	r4, [pc, #132]	; (8003300 <adc_comms+0xb8>)
 800327a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800327e:	f7fd f925 	bl	80004cc <__aeabi_ul2d>
 8003282:	4632      	mov	r2, r6
 8003284:	463b      	mov	r3, r7
 8003286:	f7fc ffa5 	bl	80001d4 <__adddf3>
 800328a:	f7fd fc1d 	bl	8000ac8 <__aeabi_d2ulz>
 800328e:	e9c4 0100 	strd	r0, r1, [r4]
	adc_counter += 1;
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <adc_comms+0xbc>)
 8003294:	8813      	ldrh	r3, [r2, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	b29b      	uxth	r3, r3
 800329a:	8013      	strh	r3, [r2, #0]
	if(adc_counter == 40000){
 800329c:	f649 4240 	movw	r2, #40000	; 0x9c40
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <adc_comms+0x64>
//		segment_val  = (uint8_t)&voltage_rms;
		adc_buffer = 0;
	}


	HAL_ADC_Start_IT(&hadc1);
 80032a4:	4814      	ldr	r0, [pc, #80]	; (80032f8 <adc_comms+0xb0>)
 80032a6:	f7fd ff57 	bl	8001158 <HAL_ADC_Start_IT>
 80032aa:	bdd0      	pop	{r4, r6, r7, pc}
		voltage_rms = sqrt(adc_buffer/40000)+10;
 80032ac:	f649 4240 	movw	r2, #40000	; 0x9c40
 80032b0:	2300      	movs	r3, #0
 80032b2:	f7fd fbf1 	bl	8000a98 <__aeabi_uldivmod>
 80032b6:	f7fd f909 	bl	80004cc <__aeabi_ul2d>
 80032ba:	ec41 0b10 	vmov	d0, r0, r1
 80032be:	f000 ff9b 	bl	80041f8 <sqrt>
 80032c2:	2200      	movs	r2, #0
 80032c4:	4b10      	ldr	r3, [pc, #64]	; (8003308 <adc_comms+0xc0>)
 80032c6:	ec51 0b10 	vmov	r0, r1, d0
 80032ca:	f7fc ff83 	bl	80001d4 <__adddf3>
 80032ce:	f7fd fbfb 	bl	8000ac8 <__aeabi_d2ulz>
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <adc_comms+0xc4>)
 80032d4:	e9c3 0100 	strd	r0, r1, [r3]
		adc_counter = 0;
 80032d8:	2200      	movs	r2, #0
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <adc_comms+0xbc>)
 80032dc:	801a      	strh	r2, [r3, #0]
		adc_buffer = 0;
 80032de:	2000      	movs	r0, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	e9c4 0100 	strd	r0, r1, [r4]
 80032e6:	e7dd      	b.n	80032a4 <adc_comms+0x5c>
 80032e8:	49ba5e35 	.word	0x49ba5e35
 80032ec:	4021420c 	.word	0x4021420c
 80032f0:	00000000 	.word	0x00000000
 80032f4:	40000000 	.word	0x40000000
 80032f8:	200000f0 	.word	0x200000f0
 80032fc:	200000b4 	.word	0x200000b4
 8003300:	200000a8 	.word	0x200000a8
 8003304:	200000b0 	.word	0x200000b0
 8003308:	40240000 	.word	0x40240000
 800330c:	200000d8 	.word	0x200000d8

08003310 <HAL_ADC_ConvCpltCallback>:
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 8003310:	2201      	movs	r2, #1
 8003312:	4b01      	ldr	r3, [pc, #4]	; (8003318 <HAL_ADC_ConvCpltCallback+0x8>)
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	4770      	bx	lr
 8003318:	200000b2 	.word	0x200000b2

0800331c <seven_segment_display>:
}

void seven_segment_display(uint8_t num){
 800331c:	b510      	push	{r4, lr}

	switch(num){
 800331e:	2809      	cmp	r0, #9
 8003320:	f200 81b8 	bhi.w	8003694 <seven_segment_display+0x378>
 8003324:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003328:	000a018c 	.word	0x000a018c
 800332c:	00600035 	.word	0x00600035
 8003330:	00b6008b 	.word	0x00b6008b
 8003334:	010b00e0 	.word	0x010b00e0
 8003338:	01610136 	.word	0x01610136
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003344:	f7fe fc16 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8003348:	2200      	movs	r2, #0
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003350:	f7fe fc10 	bl	8001b74 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8003354:	2201      	movs	r2, #1
 8003356:	2120      	movs	r1, #32
 8003358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800335c:	f7fe fc0a 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8003360:	2201      	movs	r2, #1
 8003362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800336a:	f7fe fc03 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 800336e:	2201      	movs	r2, #1
 8003370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003378:	f7fe fbfc 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 800337c:	2201      	movs	r2, #1
 800337e:	2140      	movs	r1, #64	; 0x40
 8003380:	48c5      	ldr	r0, [pc, #788]	; (8003698 <seven_segment_display+0x37c>)
 8003382:	f7fe fbf7 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8003386:	2201      	movs	r2, #1
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	48c4      	ldr	r0, [pc, #784]	; (800369c <seven_segment_display+0x380>)
 800338c:	f7fe fbf2 	bl	8001b74 <HAL_GPIO_WritePin>
		break;
 8003390:	bd10      	pop	{r4, pc}
	case 2:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8003392:	2200      	movs	r2, #0
 8003394:	2120      	movs	r1, #32
 8003396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339a:	f7fe fbeb 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800339e:	2200      	movs	r2, #0
 80033a0:	2140      	movs	r1, #64	; 0x40
 80033a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a6:	f7fe fbe5 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80033aa:	2200      	movs	r2, #0
 80033ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b4:	f7fe fbde 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80033b8:	2200      	movs	r2, #0
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	48b7      	ldr	r0, [pc, #732]	; (800369c <seven_segment_display+0x380>)
 80033be:	f7fe fbd9 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80033c2:	2200      	movs	r2, #0
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	48b4      	ldr	r0, [pc, #720]	; (8003698 <seven_segment_display+0x37c>)
 80033c8:	f7fe fbd4 	bl	8001b74 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80033cc:	2201      	movs	r2, #1
 80033ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d6:	f7fe fbcd 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80033da:	2201      	movs	r2, #1
 80033dc:	2180      	movs	r1, #128	; 0x80
 80033de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e2:	f7fe fbc7 	bl	8001b74 <HAL_GPIO_WritePin>
		break;
 80033e6:	bd10      	pop	{r4, pc}

	case 3:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80033e8:	2200      	movs	r2, #0
 80033ea:	2120      	movs	r1, #32
 80033ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f0:	f7fe fbc0 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 80033f4:	2200      	movs	r2, #0
 80033f6:	2140      	movs	r1, #64	; 0x40
 80033f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033fc:	f7fe fbba 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003400:	2200      	movs	r2, #0
 8003402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800340a:	f7fe fbb3 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800340e:	2200      	movs	r2, #0
 8003410:	2180      	movs	r1, #128	; 0x80
 8003412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003416:	f7fe fbad 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800341a:	2200      	movs	r2, #0
 800341c:	2140      	movs	r1, #64	; 0x40
 800341e:	489e      	ldr	r0, [pc, #632]	; (8003698 <seven_segment_display+0x37c>)
 8003420:	f7fe fba8 	bl	8001b74 <HAL_GPIO_WritePin>

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003424:	2201      	movs	r2, #1
 8003426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800342a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800342e:	f7fe fba1 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003432:	2201      	movs	r2, #1
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	4899      	ldr	r0, [pc, #612]	; (800369c <seven_segment_display+0x380>)
 8003438:	f7fe fb9c 	bl	8001b74 <HAL_GPIO_WritePin>

		break;
 800343c:	bd10      	pop	{r4, pc}
	case 4:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800343e:	2200      	movs	r2, #0
 8003440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003448:	f7fe fb94 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800344c:	2200      	movs	r2, #0
 800344e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003456:	f7fe fb8d 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800345a:	2200      	movs	r2, #0
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003462:	f7fe fb87 	bl	8001b74 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003466:	2201      	movs	r2, #1
 8003468:	2120      	movs	r1, #32
 800346a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346e:	f7fe fb81 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003472:	2201      	movs	r2, #1
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	4889      	ldr	r0, [pc, #548]	; (800369c <seven_segment_display+0x380>)
 8003478:	f7fe fb7c 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 800347c:	2201      	movs	r2, #1
 800347e:	2120      	movs	r1, #32
 8003480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003484:	f7fe fb76 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003488:	2201      	movs	r2, #1
 800348a:	2140      	movs	r1, #64	; 0x40
 800348c:	4882      	ldr	r0, [pc, #520]	; (8003698 <seven_segment_display+0x37c>)
 800348e:	f7fe fb71 	bl	8001b74 <HAL_GPIO_WritePin>

		break;
 8003492:	bd10      	pop	{r4, pc}
	case 5:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003494:	2200      	movs	r2, #0
 8003496:	2120      	movs	r1, #32
 8003498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349c:	f7fe fb6a 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034aa:	f7fe fb63 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80034ae:	2200      	movs	r2, #0
 80034b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b8:	f7fe fb5c 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80034bc:	2200      	movs	r2, #0
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c4:	f7fe fb56 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80034c8:	2200      	movs	r2, #0
 80034ca:	2140      	movs	r1, #64	; 0x40
 80034cc:	4872      	ldr	r0, [pc, #456]	; (8003698 <seven_segment_display+0x37c>)
 80034ce:	f7fe fb51 	bl	8001b74 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 80034d2:	2201      	movs	r2, #1
 80034d4:	2140      	movs	r1, #64	; 0x40
 80034d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034da:	f7fe fb4b 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80034de:	2201      	movs	r2, #1
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	486e      	ldr	r0, [pc, #440]	; (800369c <seven_segment_display+0x380>)
 80034e4:	f7fe fb46 	bl	8001b74 <HAL_GPIO_WritePin>

	case 6:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80034e8:	2200      	movs	r2, #0
 80034ea:	2120      	movs	r1, #32
 80034ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f0:	f7fe fb40 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80034f4:	2200      	movs	r2, #0
 80034f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034fe:	f7fe fb39 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003502:	2200      	movs	r2, #0
 8003504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800350c:	f7fe fb32 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003510:	2200      	movs	r2, #0
 8003512:	2180      	movs	r1, #128	; 0x80
 8003514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003518:	f7fe fb2c 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	485d      	ldr	r0, [pc, #372]	; (8003698 <seven_segment_display+0x37c>)
 8003522:	f7fe fb27 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003526:	2200      	movs	r2, #0
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	485c      	ldr	r0, [pc, #368]	; (800369c <seven_segment_display+0x380>)
 800352c:	f7fe fb22 	bl	8001b74 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8003530:	2201      	movs	r2, #1
 8003532:	2140      	movs	r1, #64	; 0x40
 8003534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003538:	f7fe fb1c 	bl	8001b74 <HAL_GPIO_WritePin>
		break;
 800353c:	bd10      	pop	{r4, pc}
	case 7:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800353e:	2200      	movs	r2, #0
 8003540:	2120      	movs	r1, #32
 8003542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003546:	f7fe fb15 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800354a:	2200      	movs	r2, #0
 800354c:	2140      	movs	r1, #64	; 0x40
 800354e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003552:	f7fe fb0f 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003556:	2200      	movs	r2, #0
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800355e:	f7fe fb09 	bl	8001b74 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003562:	2201      	movs	r2, #1
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	484d      	ldr	r0, [pc, #308]	; (800369c <seven_segment_display+0x380>)
 8003568:	f7fe fb04 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800356c:	2201      	movs	r2, #1
 800356e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003576:	f7fe fafd 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800357a:	2201      	movs	r2, #1
 800357c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003584:	f7fe faf6 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003588:	2201      	movs	r2, #1
 800358a:	2140      	movs	r1, #64	; 0x40
 800358c:	4842      	ldr	r0, [pc, #264]	; (8003698 <seven_segment_display+0x37c>)
 800358e:	f7fe faf1 	bl	8001b74 <HAL_GPIO_WritePin>

		break;
 8003592:	bd10      	pop	{r4, pc}
	case 8:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003594:	2200      	movs	r2, #0
 8003596:	2120      	movs	r1, #32
 8003598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800359c:	f7fe faea 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80035a0:	4c3d      	ldr	r4, [pc, #244]	; (8003698 <seven_segment_display+0x37c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	2140      	movs	r1, #64	; 0x40
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7fe fae4 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b4:	f7fe fade 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80035b8:	2200      	movs	r2, #0
 80035ba:	2140      	movs	r1, #64	; 0x40
 80035bc:	4620      	mov	r0, r4
 80035be:	f7fe fad9 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80035c2:	2200      	movs	r2, #0
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	4835      	ldr	r0, [pc, #212]	; (800369c <seven_segment_display+0x380>)
 80035c8:	f7fe fad4 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80035cc:	2200      	movs	r2, #0
 80035ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d6:	f7fe facd 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80035da:	2200      	movs	r2, #0
 80035dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035e4:	f7fe fac6 	bl	8001b74 <HAL_GPIO_WritePin>
		break;
 80035e8:	bd10      	pop	{r4, pc}
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80035ea:	2200      	movs	r2, #0
 80035ec:	2120      	movs	r1, #32
 80035ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035f2:	f7fe fabf 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80035f6:	4c28      	ldr	r4, [pc, #160]	; (8003698 <seven_segment_display+0x37c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	2140      	movs	r1, #64	; 0x40
 80035fc:	4620      	mov	r0, r4
 80035fe:	f7fe fab9 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003602:	2200      	movs	r2, #0
 8003604:	2180      	movs	r1, #128	; 0x80
 8003606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800360a:	f7fe fab3 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800360e:	2200      	movs	r2, #0
 8003610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003618:	f7fe faac 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003626:	f7fe faa5 	bl	8001b74 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800362a:	2201      	movs	r2, #1
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	481b      	ldr	r0, [pc, #108]	; (800369c <seven_segment_display+0x380>)
 8003630:	f7fe faa0 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003634:	2201      	movs	r2, #1
 8003636:	2140      	movs	r1, #64	; 0x40
 8003638:	4620      	mov	r0, r4
 800363a:	f7fe fa9b 	bl	8001b74 <HAL_GPIO_WritePin>
		break;
 800363e:	bd10      	pop	{r4, pc}
	case 0:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003640:	2200      	movs	r2, #0
 8003642:	2120      	movs	r1, #32
 8003644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003648:	f7fe fa94 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800364c:	4c12      	ldr	r4, [pc, #72]	; (8003698 <seven_segment_display+0x37c>)
 800364e:	2200      	movs	r2, #0
 8003650:	2140      	movs	r1, #64	; 0x40
 8003652:	4620      	mov	r0, r4
 8003654:	f7fe fa8e 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003658:	2200      	movs	r2, #0
 800365a:	2180      	movs	r1, #128	; 0x80
 800365c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003660:	f7fe fa88 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003664:	2200      	movs	r2, #0
 8003666:	2140      	movs	r1, #64	; 0x40
 8003668:	4620      	mov	r0, r4
 800366a:	f7fe fa83 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 800366e:	2200      	movs	r2, #0
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	480a      	ldr	r0, [pc, #40]	; (800369c <seven_segment_display+0x380>)
 8003674:	f7fe fa7e 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003678:	2200      	movs	r2, #0
 800367a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800367e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003682:	f7fe fa77 	bl	8001b74 <HAL_GPIO_WritePin>
		//OFF

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003686:	2201      	movs	r2, #1
 8003688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800368c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003690:	f7fe fa70 	bl	8001b74 <HAL_GPIO_WritePin>
 8003694:	bd10      	pop	{r4, pc}
 8003696:	bf00      	nop
 8003698:	48000400 	.word	0x48000400
 800369c:	48000800 	.word	0x48000800

080036a0 <seven_segment>:
void seven_segment(){
 80036a0:	b510      	push	{r4, lr}
	if(segment_counter == 0){	// Left Most Digit
 80036a2:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <seven_segment+0x12c>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b133      	cbz	r3, 80036b6 <seven_segment+0x16>
	else if( segment_counter == 1){		// Middle left Digit
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d027      	beq.n	80036fc <seven_segment+0x5c>
	else if( segment_counter == 2){		// Middle Right Digit
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d048      	beq.n	8003742 <seven_segment+0xa2>
	else if( segment_counter == 3){ // Right Most Digit
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d069      	beq.n	8003788 <seven_segment+0xe8>
 80036b4:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 80036b6:	4c46      	ldr	r4, [pc, #280]	; (80037d0 <seven_segment+0x130>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036be:	4620      	mov	r0, r4
 80036c0:	f7fe fa58 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80036c4:	2201      	movs	r2, #1
 80036c6:	2110      	movs	r1, #16
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7fe fa53 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80036ce:	2201      	movs	r2, #1
 80036d0:	2120      	movs	r1, #32
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7fe fa4e 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80036d8:	2201      	movs	r2, #1
 80036da:	2108      	movs	r1, #8
 80036dc:	4620      	mov	r0, r4
 80036de:	f7fe fa49 	bl	8001b74 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 80036e2:	4c3a      	ldr	r4, [pc, #232]	; (80037cc <seven_segment+0x12c>)
 80036e4:	7823      	ldrb	r3, [r4, #0]
 80036e6:	4a3b      	ldr	r2, [pc, #236]	; (80037d4 <seven_segment+0x134>)
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	5cd0      	ldrb	r0, [r2, r3]
 80036ec:	3830      	subs	r0, #48	; 0x30
 80036ee:	b2c0      	uxtb	r0, r0
 80036f0:	f7ff fe14 	bl	800331c <seven_segment_display>
		segment_counter += 1;
 80036f4:	7823      	ldrb	r3, [r4, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	7023      	strb	r3, [r4, #0]
 80036fa:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80036fc:	4c34      	ldr	r4, [pc, #208]	; (80037d0 <seven_segment+0x130>)
 80036fe:	2201      	movs	r2, #1
 8003700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003704:	4620      	mov	r0, r4
 8003706:	f7fe fa35 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 800370a:	2200      	movs	r2, #0
 800370c:	2110      	movs	r1, #16
 800370e:	4620      	mov	r0, r4
 8003710:	f7fe fa30 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003714:	2201      	movs	r2, #1
 8003716:	2120      	movs	r1, #32
 8003718:	4620      	mov	r0, r4
 800371a:	f7fe fa2b 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 800371e:	2201      	movs	r2, #1
 8003720:	2108      	movs	r1, #8
 8003722:	4620      	mov	r0, r4
 8003724:	f7fe fa26 	bl	8001b74 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003728:	4c28      	ldr	r4, [pc, #160]	; (80037cc <seven_segment+0x12c>)
 800372a:	7823      	ldrb	r3, [r4, #0]
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <seven_segment+0x134>)
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	5cd0      	ldrb	r0, [r2, r3]
 8003732:	3830      	subs	r0, #48	; 0x30
 8003734:	b2c0      	uxtb	r0, r0
 8003736:	f7ff fdf1 	bl	800331c <seven_segment_display>
		segment_counter += 1;
 800373a:	7823      	ldrb	r3, [r4, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	7023      	strb	r3, [r4, #0]
 8003740:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003742:	4c23      	ldr	r4, [pc, #140]	; (80037d0 <seven_segment+0x130>)
 8003744:	2201      	movs	r2, #1
 8003746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800374a:	4620      	mov	r0, r4
 800374c:	f7fe fa12 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003750:	2201      	movs	r2, #1
 8003752:	2110      	movs	r1, #16
 8003754:	4620      	mov	r0, r4
 8003756:	f7fe fa0d 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 800375a:	2200      	movs	r2, #0
 800375c:	2120      	movs	r1, #32
 800375e:	4620      	mov	r0, r4
 8003760:	f7fe fa08 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003764:	2201      	movs	r2, #1
 8003766:	2108      	movs	r1, #8
 8003768:	4620      	mov	r0, r4
 800376a:	f7fe fa03 	bl	8001b74 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 800376e:	4c17      	ldr	r4, [pc, #92]	; (80037cc <seven_segment+0x12c>)
 8003770:	7823      	ldrb	r3, [r4, #0]
 8003772:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <seven_segment+0x134>)
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	5cd0      	ldrb	r0, [r2, r3]
 8003778:	3830      	subs	r0, #48	; 0x30
 800377a:	b2c0      	uxtb	r0, r0
 800377c:	f7ff fdce 	bl	800331c <seven_segment_display>
		segment_counter += 1;
 8003780:	7823      	ldrb	r3, [r4, #0]
 8003782:	3301      	adds	r3, #1
 8003784:	7023      	strb	r3, [r4, #0]
 8003786:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003788:	4c11      	ldr	r4, [pc, #68]	; (80037d0 <seven_segment+0x130>)
 800378a:	2201      	movs	r2, #1
 800378c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003790:	4620      	mov	r0, r4
 8003792:	f7fe f9ef 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003796:	2201      	movs	r2, #1
 8003798:	2110      	movs	r1, #16
 800379a:	4620      	mov	r0, r4
 800379c:	f7fe f9ea 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80037a0:	2201      	movs	r2, #1
 80037a2:	2120      	movs	r1, #32
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7fe f9e5 	bl	8001b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 80037aa:	2200      	movs	r2, #0
 80037ac:	2108      	movs	r1, #8
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7fe f9e0 	bl	8001b74 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 80037b4:	4c05      	ldr	r4, [pc, #20]	; (80037cc <seven_segment+0x12c>)
 80037b6:	7823      	ldrb	r3, [r4, #0]
 80037b8:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <seven_segment+0x134>)
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	5cd0      	ldrb	r0, [r2, r3]
 80037be:	3830      	subs	r0, #48	; 0x30
 80037c0:	b2c0      	uxtb	r0, r0
 80037c2:	f7ff fdab 	bl	800331c <seven_segment_display>
		segment_counter = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	7023      	strb	r3, [r4, #0]
}
 80037ca:	e773      	b.n	80036b4 <seven_segment+0x14>
 80037cc:	200000bd 	.word	0x200000bd
 80037d0:	48000400 	.word	0x48000400
 80037d4:	200000c0 	.word	0x200000c0

080037d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037dc:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <MX_GPIO_Init+0x104>)
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80037e4:	615a      	str	r2, [r3, #20]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80037ec:	9201      	str	r2, [sp, #4]
 80037ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80037f6:	615a      	str	r2, [r3, #20]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80037fe:	9202      	str	r2, [sp, #8]
 8003800:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003808:	615a      	str	r2, [r3, #20]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003810:	9203      	str	r2, [sp, #12]
 8003812:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800381a:	615a      	str	r2, [r3, #20]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003822:	9304      	str	r3, [sp, #16]
 8003824:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003826:	2200      	movs	r2, #0
 8003828:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800382c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003830:	f7fe f9a0 	bl	8001b74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003834:	4e2a      	ldr	r6, [pc, #168]	; (80038e0 <MX_GPIO_Init+0x108>)
 8003836:	2200      	movs	r2, #0
 8003838:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800383c:	4630      	mov	r0, r6
 800383e:	f7fe f999 	bl	8001b74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003842:	4d28      	ldr	r5, [pc, #160]	; (80038e4 <MX_GPIO_Init+0x10c>)
 8003844:	2200      	movs	r2, #0
 8003846:	2180      	movs	r1, #128	; 0x80
 8003848:	4628      	mov	r0, r5
 800384a:	f7fe f993 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800384e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003852:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <MX_GPIO_Init+0x110>)
 8003856:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2400      	movs	r4, #0
 800385a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800385c:	a905      	add	r1, sp, #20
 800385e:	4628      	mov	r0, r5
 8003860:	f7fe f8ce 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8003864:	230b      	movs	r3, #11
 8003866:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003868:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800386c:	a905      	add	r1, sp, #20
 800386e:	4628      	mov	r0, r5
 8003870:	f7fe f8c6 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003874:	2313      	movs	r3, #19
 8003876:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003878:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387c:	a905      	add	r1, sp, #20
 800387e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003882:	f7fe f8bd 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003886:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800388a:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800388c:	2701      	movs	r7, #1
 800388e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003894:	a905      	add	r1, sp, #20
 8003896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800389a:	f7fe f8b1 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800389e:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80038a2:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038aa:	a905      	add	r1, sp, #20
 80038ac:	4630      	mov	r0, r6
 80038ae:	f7fe f8a7 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b6:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038bc:	a905      	add	r1, sp, #20
 80038be:	4628      	mov	r0, r5
 80038c0:	f7fe f89e 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ce:	a905      	add	r1, sp, #20
 80038d0:	4630      	mov	r0, r6
 80038d2:	f7fe f895 	bl	8001a00 <HAL_GPIO_Init>

}
 80038d6:	b00b      	add	sp, #44	; 0x2c
 80038d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	48000400 	.word	0x48000400
 80038e4:	48000800 	.word	0x48000800
 80038e8:	10210000 	.word	0x10210000

080038ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80038ec:	4770      	bx	lr

080038ee <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80038ee:	e7fe      	b.n	80038ee <_Error_Handler>

080038f0 <MX_TIM2_Init>:
{
 80038f0:	b500      	push	{lr}
 80038f2:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80038f4:	4818      	ldr	r0, [pc, #96]	; (8003958 <MX_TIM2_Init+0x68>)
 80038f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038fa:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003900:	2300      	movs	r3, #0
 8003902:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 63999999;
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <MX_TIM2_Init+0x6c>)
 8003906:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003908:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800390c:	f7fe fe96 	bl	800263c <HAL_TIM_Base_Init>
 8003910:	b998      	cbnz	r0, 800393a <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003912:	a908      	add	r1, sp, #32
 8003914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003918:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800391c:	480e      	ldr	r0, [pc, #56]	; (8003958 <MX_TIM2_Init+0x68>)
 800391e:	f7fe feb1 	bl	8002684 <HAL_TIM_ConfigClockSource>
 8003922:	b978      	cbnz	r0, 8003944 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003928:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800392a:	a901      	add	r1, sp, #4
 800392c:	480a      	ldr	r0, [pc, #40]	; (8003958 <MX_TIM2_Init+0x68>)
 800392e:	f7fe ff5f 	bl	80027f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003932:	b960      	cbnz	r0, 800394e <MX_TIM2_Init+0x5e>
}
 8003934:	b009      	add	sp, #36	; 0x24
 8003936:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800393a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800393e:	4808      	ldr	r0, [pc, #32]	; (8003960 <MX_TIM2_Init+0x70>)
 8003940:	f7ff ffd5 	bl	80038ee <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003944:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003948:	4805      	ldr	r0, [pc, #20]	; (8003960 <MX_TIM2_Init+0x70>)
 800394a:	f7ff ffd0 	bl	80038ee <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800394e:	f240 111d 	movw	r1, #285	; 0x11d
 8003952:	4803      	ldr	r0, [pc, #12]	; (8003960 <MX_TIM2_Init+0x70>)
 8003954:	f7ff ffcb 	bl	80038ee <_Error_Handler>
 8003958:	200001b4 	.word	0x200001b4
 800395c:	03d08fff 	.word	0x03d08fff
 8003960:	080050ec 	.word	0x080050ec

08003964 <MX_USART1_UART_Init>:
{
 8003964:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003966:	480c      	ldr	r0, [pc, #48]	; (8003998 <MX_USART1_UART_Init+0x34>)
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <MX_USART1_UART_Init+0x38>)
 800396a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800396c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003970:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003972:	2300      	movs	r3, #0
 8003974:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003976:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003978:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800397a:	220c      	movs	r2, #12
 800397c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800397e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003980:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003982:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003984:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003986:	f7ff f96b 	bl	8002c60 <HAL_UART_Init>
 800398a:	b900      	cbnz	r0, 800398e <MX_USART1_UART_Init+0x2a>
 800398c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800398e:	f44f 7199 	mov.w	r1, #306	; 0x132
 8003992:	4803      	ldr	r0, [pc, #12]	; (80039a0 <MX_USART1_UART_Init+0x3c>)
 8003994:	f7ff ffab 	bl	80038ee <_Error_Handler>
 8003998:	20000144 	.word	0x20000144
 800399c:	40013800 	.word	0x40013800
 80039a0:	080050ec 	.word	0x080050ec

080039a4 <MX_ADC1_Init>:
{
 80039a4:	b500      	push	{lr}
 80039a6:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 80039a8:	481d      	ldr	r0, [pc, #116]	; (8003a20 <MX_ADC1_Init+0x7c>)
 80039aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039ae:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80039b0:	2300      	movs	r3, #0
 80039b2:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039b4:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80039b6:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80039b8:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039ba:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039bc:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039be:	2201      	movs	r2, #1
 80039c0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039c2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80039c4:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80039c6:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039c8:	2204      	movs	r2, #4
 80039ca:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80039cc:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80039ce:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039d0:	f7fd faca 	bl	8000f68 <HAL_ADC_Init>
 80039d4:	b9c0      	cbnz	r0, 8003a08 <MX_ADC1_Init+0x64>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80039d6:	a90a      	add	r1, sp, #40	; 0x28
 80039d8:	2300      	movs	r3, #0
 80039da:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80039de:	4810      	ldr	r0, [pc, #64]	; (8003a20 <MX_ADC1_Init+0x7c>)
 80039e0:	f7fd fefc 	bl	80017dc <HAL_ADCEx_MultiModeConfigChannel>
 80039e4:	b9a0      	cbnz	r0, 8003a10 <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_8;
 80039e6:	2308      	movs	r3, #8
 80039e8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039ee:	2300      	movs	r3, #0
 80039f0:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80039f2:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039f4:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 80039f6:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039f8:	a901      	add	r1, sp, #4
 80039fa:	4809      	ldr	r0, [pc, #36]	; (8003a20 <MX_ADC1_Init+0x7c>)
 80039fc:	f7fd fd6e 	bl	80014dc <HAL_ADC_ConfigChannel>
 8003a00:	b950      	cbnz	r0, 8003a18 <MX_ADC1_Init+0x74>
}
 8003a02:	b00b      	add	sp, #44	; 0x2c
 8003a04:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003a08:	21e7      	movs	r1, #231	; 0xe7
 8003a0a:	4806      	ldr	r0, [pc, #24]	; (8003a24 <MX_ADC1_Init+0x80>)
 8003a0c:	f7ff ff6f 	bl	80038ee <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003a10:	21ef      	movs	r1, #239	; 0xef
 8003a12:	4804      	ldr	r0, [pc, #16]	; (8003a24 <MX_ADC1_Init+0x80>)
 8003a14:	f7ff ff6b 	bl	80038ee <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003a18:	21fc      	movs	r1, #252	; 0xfc
 8003a1a:	4802      	ldr	r0, [pc, #8]	; (8003a24 <MX_ADC1_Init+0x80>)
 8003a1c:	f7ff ff67 	bl	80038ee <_Error_Handler>
 8003a20:	200000f0 	.word	0x200000f0
 8003a24:	080050ec 	.word	0x080050ec

08003a28 <SystemClock_Config>:
{
 8003a28:	b500      	push	{lr}
 8003a2a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a30:	2201      	movs	r2, #1
 8003a32:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003a34:	2210      	movs	r2, #16
 8003a36:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a38:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003a3e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003a42:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a44:	a80c      	add	r0, sp, #48	; 0x30
 8003a46:	f7fe f89b 	bl	8001b80 <HAL_RCC_OscConfig>
 8003a4a:	bb60      	cbnz	r0, 8003aa6 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a4c:	230f      	movs	r3, #15
 8003a4e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a50:	2102      	movs	r1, #2
 8003a52:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a54:	2300      	movs	r3, #0
 8003a56:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a5c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a5e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a60:	a807      	add	r0, sp, #28
 8003a62:	f7fe fb31 	bl	80020c8 <HAL_RCC_ClockConfig>
 8003a66:	bb10      	cbnz	r0, 8003aae <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8003a68:	2381      	movs	r3, #129	; 0x81
 8003a6a:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV64;
 8003a70:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003a74:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a76:	4668      	mov	r0, sp
 8003a78:	f7fe fc1e 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8003a7c:	b9d8      	cbnz	r0, 8003ab6 <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003a7e:	f7fe fbe5 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <SystemClock_Config+0x98>)
 8003a84:	fba3 3000 	umull	r3, r0, r3, r0
 8003a88:	0980      	lsrs	r0, r0, #6
 8003a8a:	f7fd ff6d 	bl	8001968 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003a8e:	2004      	movs	r0, #4
 8003a90:	f7fd ff80 	bl	8001994 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	4611      	mov	r1, r2
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	f7fd ff24 	bl	80018e8 <HAL_NVIC_SetPriority>
}
 8003aa0:	b017      	add	sp, #92	; 0x5c
 8003aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003aa6:	21a9      	movs	r1, #169	; 0xa9
 8003aa8:	4806      	ldr	r0, [pc, #24]	; (8003ac4 <SystemClock_Config+0x9c>)
 8003aaa:	f7ff ff20 	bl	80038ee <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003aae:	21b7      	movs	r1, #183	; 0xb7
 8003ab0:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <SystemClock_Config+0x9c>)
 8003ab2:	f7ff ff1c 	bl	80038ee <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003ab6:	21bf      	movs	r1, #191	; 0xbf
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <SystemClock_Config+0x9c>)
 8003aba:	f7ff ff18 	bl	80038ee <_Error_Handler>
 8003abe:	bf00      	nop
 8003ac0:	10624dd3 	.word	0x10624dd3
 8003ac4:	080050ec 	.word	0x080050ec

08003ac8 <main>:
{
 8003ac8:	b508      	push	{r3, lr}
  HAL_Init();
 8003aca:	f7fd f9c5 	bl	8000e58 <HAL_Init>
  SystemClock_Config();
 8003ace:	f7ff ffab 	bl	8003a28 <SystemClock_Config>
  MX_GPIO_Init();
 8003ad2:	f7ff fe81 	bl	80037d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003ad6:	f7ff ff0b 	bl	80038f0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003ada:	f7ff ff43 	bl	8003964 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003ade:	f7ff ff61 	bl	80039a4 <MX_ADC1_Init>
  init_peripherals();
 8003ae2:	f7ff fb31 	bl	8003148 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4912      	ldr	r1, [pc, #72]	; (8003b34 <main+0x6c>)
 8003aea:	4813      	ldr	r0, [pc, #76]	; (8003b38 <main+0x70>)
 8003aec:	f7fe feb2 	bl	8002854 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 8003af0:	4812      	ldr	r0, [pc, #72]	; (8003b3c <main+0x74>)
 8003af2:	f7fd fb31 	bl	8001158 <HAL_ADC_Start_IT>
 8003af6:	e009      	b.n	8003b0c <main+0x44>
		  rx_flag = 0;
 8003af8:	2200      	movs	r2, #0
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <main+0x78>)
 8003afc:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8003afe:	f7ff f9eb 	bl	8002ed8 <uart_comms>
 8003b02:	e007      	b.n	8003b14 <main+0x4c>
	  if(adc_flag == 1){	// ADC conversion
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <main+0x7c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d00d      	beq.n	8003b28 <main+0x60>
	  if(rx_flag == 1 ){ 	// UART Comms
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <main+0x78>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d0f1      	beq.n	8003af8 <main+0x30>
	  if(tim2_flag == 1){	// Seven Segment
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <main+0x80>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d1f3      	bne.n	8003b04 <main+0x3c>
		  tim2_flag = 0;
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <main+0x80>)
 8003b20:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 8003b22:	f7ff fdbd 	bl	80036a0 <seven_segment>
 8003b26:	e7ed      	b.n	8003b04 <main+0x3c>
		  adc_flag = 0;
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <main+0x7c>)
 8003b2c:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8003b2e:	f7ff fb8b 	bl	8003248 <adc_comms>
 8003b32:	e7eb      	b.n	8003b0c <main+0x44>
 8003b34:	200001f8 	.word	0x200001f8
 8003b38:	20000144 	.word	0x20000144
 8003b3c:	200000f0 	.word	0x200000f0
 8003b40:	200000bc 	.word	0x200000bc
 8003b44:	200000b2 	.word	0x200000b2
 8003b48:	200000a4 	.word	0x200000a4

08003b4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_MspInit+0x78>)
{
 8003b4e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	619a      	str	r2, [r3, #24]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003b60:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b62:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003b64:	f7fd feae 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	f06f 000b 	mvn.w	r0, #11
 8003b70:	f7fd feba 	bl	80018e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	4611      	mov	r1, r2
 8003b78:	f06f 000a 	mvn.w	r0, #10
 8003b7c:	f7fd feb4 	bl	80018e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003b80:	2200      	movs	r2, #0
 8003b82:	4611      	mov	r1, r2
 8003b84:	f06f 0009 	mvn.w	r0, #9
 8003b88:	f7fd feae 	bl	80018e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4611      	mov	r1, r2
 8003b90:	f06f 0004 	mvn.w	r0, #4
 8003b94:	f7fd fea8 	bl	80018e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	f06f 0003 	mvn.w	r0, #3
 8003ba0:	f7fd fea2 	bl	80018e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	f06f 0001 	mvn.w	r0, #1
 8003bac:	f7fd fe9c 	bl	80018e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	f7fd fe96 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bbc:	b003      	add	sp, #12
 8003bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bc8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003bca:	6803      	ldr	r3, [r0, #0]
 8003bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003bd0:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8003bd2:	d11e      	bne.n	8003c12 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bd4:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003bd8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2400      	movs	r4, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bde:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be0:	480d      	ldr	r0, [pc, #52]	; (8003c18 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003be2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003be6:	615a      	str	r2, [r3, #20]
 8003be8:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfe:	f7fd feff 	bl	8001a00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003c02:	2012      	movs	r0, #18
 8003c04:	4622      	mov	r2, r4
 8003c06:	4621      	mov	r1, r4
 8003c08:	f7fd fe6e 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003c0c:	2012      	movs	r0, #18
 8003c0e:	f7fd fe9f 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c12:	b006      	add	sp, #24
 8003c14:	bd10      	pop	{r4, pc}
 8003c16:	bf00      	nop
 8003c18:	48000800 	.word	0x48000800

08003c1c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8003c1c:	6803      	ldr	r3, [r0, #0]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8003c22:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8003c24:	d112      	bne.n	8003c4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c26:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c2a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	61da      	str	r2, [r3, #28]
 8003c34:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c36:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c3e:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c40:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c42:	f7fd fe51 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c46:	201c      	movs	r0, #28
 8003c48:	f7fd fe82 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c4c:	b003      	add	sp, #12
 8003c4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003c54 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c54:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003c56:	6802      	ldr	r2, [r0, #0]
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_UART_MspInit+0x54>)
 8003c5a:	429a      	cmp	r2, r3
{
 8003c5c:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8003c5e:	d120      	bne.n	8003ca2 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c60:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c66:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c68:	4810      	ldr	r0, [pc, #64]	; (8003cac <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6e:	619a      	str	r2, [r3, #24]
 8003c70:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c7c:	2330      	movs	r3, #48	; 0x30
 8003c7e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c80:	2302      	movs	r3, #2
 8003c82:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c88:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c8e:	f7fd feb7 	bl	8001a00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c92:	2025      	movs	r0, #37	; 0x25
 8003c94:	4622      	mov	r2, r4
 8003c96:	4621      	mov	r1, r4
 8003c98:	f7fd fe26 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c9c:	2025      	movs	r0, #37	; 0x25
 8003c9e:	f7fd fe57 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ca2:	b006      	add	sp, #24
 8003ca4:	bd10      	pop	{r4, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40013800 	.word	0x40013800
 8003cac:	48000800 	.word	0x48000800

08003cb0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003cb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cb2:	f7fd f8e3 	bl	8000e7c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003cb6:	f7fd fe7a 	bl	80019ae <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tim2_flag = 1;
 8003cba:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <SysTick_Handler+0x14>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	bd08      	pop	{r3, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200000a4 	.word	0x200000a4

08003cc8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <ADC1_2_IRQHandler+0x8>)
 8003cca:	f7fd bac9 	b.w	8001260 <HAL_ADC_IRQHandler>
 8003cce:	bf00      	nop
 8003cd0:	200000f0 	.word	0x200000f0

08003cd4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cd4:	4801      	ldr	r0, [pc, #4]	; (8003cdc <TIM2_IRQHandler+0x8>)
 8003cd6:	f7fe bbb6 	b.w	8002446 <HAL_TIM_IRQHandler>
 8003cda:	bf00      	nop
 8003cdc:	200001b4 	.word	0x200001b4

08003ce0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <USART1_IRQHandler+0x8>)
 8003ce2:	f7ff b861 	b.w	8002da8 <HAL_UART_IRQHandler>
 8003ce6:	bf00      	nop
 8003ce8:	20000144 	.word	0x20000144

08003cec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cec:	4915      	ldr	r1, [pc, #84]	; (8003d44 <SystemInit+0x58>)
 8003cee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003cf2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <SystemInit+0x5c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003d04:	6858      	ldr	r0, [r3, #4]
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <SystemInit+0x60>)
 8003d08:	4002      	ands	r2, r0
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003d12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d16:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003d26:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	f022 020f 	bic.w	r2, r2, #15
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003d30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d32:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <SystemInit+0x64>)
 8003d34:	4002      	ands	r2, r0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d40:	608b      	str	r3, [r1, #8]
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	f87fc00c 	.word	0xf87fc00c
 8003d50:	ff00fccc 	.word	0xff00fccc

08003d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d5a:	e003      	b.n	8003d64 <LoopCopyDataInit>

08003d5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d62:	3104      	adds	r1, #4

08003d64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d64:	480b      	ldr	r0, [pc, #44]	; (8003d94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d6c:	d3f6      	bcc.n	8003d5c <CopyDataInit>
	ldr	r2, =_sbss
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d70:	e002      	b.n	8003d78 <LoopFillZerobss>

08003d72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d74:	f842 3b04 	str.w	r3, [r2], #4

08003d78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <LoopForever+0x16>)
	cmp	r2, r3
 8003d7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d7c:	d3f9      	bcc.n	8003d72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d7e:	f7ff ffb5 	bl	8003cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d82:	f000 f811 	bl	8003da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d86:	f7ff fe9f 	bl	8003ac8 <main>

08003d8a <LoopForever>:

LoopForever:
    b LoopForever
 8003d8a:	e7fe      	b.n	8003d8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d8c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003d90:	08005180 	.word	0x08005180
	ldr	r0, =_sdata
 8003d94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d98:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8003d9c:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8003da0:	20000200 	.word	0x20000200

08003da4 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003da4:	e7fe      	b.n	8003da4 <BusFault_Handler>
	...

08003da8 <__libc_init_array>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4e0d      	ldr	r6, [pc, #52]	; (8003de0 <__libc_init_array+0x38>)
 8003dac:	4c0d      	ldr	r4, [pc, #52]	; (8003de4 <__libc_init_array+0x3c>)
 8003dae:	1ba4      	subs	r4, r4, r6
 8003db0:	10a4      	asrs	r4, r4, #2
 8003db2:	2500      	movs	r5, #0
 8003db4:	42a5      	cmp	r5, r4
 8003db6:	d109      	bne.n	8003dcc <__libc_init_array+0x24>
 8003db8:	4e0b      	ldr	r6, [pc, #44]	; (8003de8 <__libc_init_array+0x40>)
 8003dba:	4c0c      	ldr	r4, [pc, #48]	; (8003dec <__libc_init_array+0x44>)
 8003dbc:	f001 f978 	bl	80050b0 <_init>
 8003dc0:	1ba4      	subs	r4, r4, r6
 8003dc2:	10a4      	asrs	r4, r4, #2
 8003dc4:	2500      	movs	r5, #0
 8003dc6:	42a5      	cmp	r5, r4
 8003dc8:	d105      	bne.n	8003dd6 <__libc_init_array+0x2e>
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dd0:	4798      	blx	r3
 8003dd2:	3501      	adds	r5, #1
 8003dd4:	e7ee      	b.n	8003db4 <__libc_init_array+0xc>
 8003dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dda:	4798      	blx	r3
 8003ddc:	3501      	adds	r5, #1
 8003dde:	e7f2      	b.n	8003dc6 <__libc_init_array+0x1e>
 8003de0:	08005178 	.word	0x08005178
 8003de4:	08005178 	.word	0x08005178
 8003de8:	08005178 	.word	0x08005178
 8003dec:	0800517c 	.word	0x0800517c

08003df0 <malloc>:
 8003df0:	4b02      	ldr	r3, [pc, #8]	; (8003dfc <malloc+0xc>)
 8003df2:	4601      	mov	r1, r0
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	f000 b817 	b.w	8003e28 <_malloc_r>
 8003dfa:	bf00      	nop
 8003dfc:	2000001c 	.word	0x2000001c

08003e00 <memcpy>:
 8003e00:	b510      	push	{r4, lr}
 8003e02:	1e43      	subs	r3, r0, #1
 8003e04:	440a      	add	r2, r1
 8003e06:	4291      	cmp	r1, r2
 8003e08:	d100      	bne.n	8003e0c <memcpy+0xc>
 8003e0a:	bd10      	pop	{r4, pc}
 8003e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e14:	e7f7      	b.n	8003e06 <memcpy+0x6>

08003e16 <memset>:
 8003e16:	4402      	add	r2, r0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d100      	bne.n	8003e20 <memset+0xa>
 8003e1e:	4770      	bx	lr
 8003e20:	f803 1b01 	strb.w	r1, [r3], #1
 8003e24:	e7f9      	b.n	8003e1a <memset+0x4>
	...

08003e28 <_malloc_r>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	1ccd      	adds	r5, r1, #3
 8003e2c:	f025 0503 	bic.w	r5, r5, #3
 8003e30:	3508      	adds	r5, #8
 8003e32:	2d0c      	cmp	r5, #12
 8003e34:	bf38      	it	cc
 8003e36:	250c      	movcc	r5, #12
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	db01      	blt.n	8003e42 <_malloc_r+0x1a>
 8003e3e:	42a9      	cmp	r1, r5
 8003e40:	d903      	bls.n	8003e4a <_malloc_r+0x22>
 8003e42:	230c      	movs	r3, #12
 8003e44:	6033      	str	r3, [r6, #0]
 8003e46:	2000      	movs	r0, #0
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
 8003e4a:	f000 f85b 	bl	8003f04 <__malloc_lock>
 8003e4e:	4a23      	ldr	r2, [pc, #140]	; (8003edc <_malloc_r+0xb4>)
 8003e50:	6814      	ldr	r4, [r2, #0]
 8003e52:	4621      	mov	r1, r4
 8003e54:	b991      	cbnz	r1, 8003e7c <_malloc_r+0x54>
 8003e56:	4c22      	ldr	r4, [pc, #136]	; (8003ee0 <_malloc_r+0xb8>)
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	b91b      	cbnz	r3, 8003e64 <_malloc_r+0x3c>
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f000 f841 	bl	8003ee4 <_sbrk_r>
 8003e62:	6020      	str	r0, [r4, #0]
 8003e64:	4629      	mov	r1, r5
 8003e66:	4630      	mov	r0, r6
 8003e68:	f000 f83c 	bl	8003ee4 <_sbrk_r>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d126      	bne.n	8003ebe <_malloc_r+0x96>
 8003e70:	230c      	movs	r3, #12
 8003e72:	6033      	str	r3, [r6, #0]
 8003e74:	4630      	mov	r0, r6
 8003e76:	f000 f846 	bl	8003f06 <__malloc_unlock>
 8003e7a:	e7e4      	b.n	8003e46 <_malloc_r+0x1e>
 8003e7c:	680b      	ldr	r3, [r1, #0]
 8003e7e:	1b5b      	subs	r3, r3, r5
 8003e80:	d41a      	bmi.n	8003eb8 <_malloc_r+0x90>
 8003e82:	2b0b      	cmp	r3, #11
 8003e84:	d90f      	bls.n	8003ea6 <_malloc_r+0x7e>
 8003e86:	600b      	str	r3, [r1, #0]
 8003e88:	50cd      	str	r5, [r1, r3]
 8003e8a:	18cc      	adds	r4, r1, r3
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f000 f83a 	bl	8003f06 <__malloc_unlock>
 8003e92:	f104 000b 	add.w	r0, r4, #11
 8003e96:	1d23      	adds	r3, r4, #4
 8003e98:	f020 0007 	bic.w	r0, r0, #7
 8003e9c:	1ac3      	subs	r3, r0, r3
 8003e9e:	d01b      	beq.n	8003ed8 <_malloc_r+0xb0>
 8003ea0:	425a      	negs	r2, r3
 8003ea2:	50e2      	str	r2, [r4, r3]
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
 8003ea6:	428c      	cmp	r4, r1
 8003ea8:	bf0d      	iteet	eq
 8003eaa:	6863      	ldreq	r3, [r4, #4]
 8003eac:	684b      	ldrne	r3, [r1, #4]
 8003eae:	6063      	strne	r3, [r4, #4]
 8003eb0:	6013      	streq	r3, [r2, #0]
 8003eb2:	bf18      	it	ne
 8003eb4:	460c      	movne	r4, r1
 8003eb6:	e7e9      	b.n	8003e8c <_malloc_r+0x64>
 8003eb8:	460c      	mov	r4, r1
 8003eba:	6849      	ldr	r1, [r1, #4]
 8003ebc:	e7ca      	b.n	8003e54 <_malloc_r+0x2c>
 8003ebe:	1cc4      	adds	r4, r0, #3
 8003ec0:	f024 0403 	bic.w	r4, r4, #3
 8003ec4:	42a0      	cmp	r0, r4
 8003ec6:	d005      	beq.n	8003ed4 <_malloc_r+0xac>
 8003ec8:	1a21      	subs	r1, r4, r0
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f000 f80a 	bl	8003ee4 <_sbrk_r>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d0cd      	beq.n	8003e70 <_malloc_r+0x48>
 8003ed4:	6025      	str	r5, [r4, #0]
 8003ed6:	e7d9      	b.n	8003e8c <_malloc_r+0x64>
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
 8003eda:	bf00      	nop
 8003edc:	200000e0 	.word	0x200000e0
 8003ee0:	200000e4 	.word	0x200000e4

08003ee4 <_sbrk_r>:
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	4c06      	ldr	r4, [pc, #24]	; (8003f00 <_sbrk_r+0x1c>)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	4605      	mov	r5, r0
 8003eec:	4608      	mov	r0, r1
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	f001 f8d0 	bl	8005094 <_sbrk>
 8003ef4:	1c43      	adds	r3, r0, #1
 8003ef6:	d102      	bne.n	8003efe <_sbrk_r+0x1a>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	b103      	cbz	r3, 8003efe <_sbrk_r+0x1a>
 8003efc:	602b      	str	r3, [r5, #0]
 8003efe:	bd38      	pop	{r3, r4, r5, pc}
 8003f00:	200001fc 	.word	0x200001fc

08003f04 <__malloc_lock>:
 8003f04:	4770      	bx	lr

08003f06 <__malloc_unlock>:
 8003f06:	4770      	bx	lr

08003f08 <pow>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	ed2d 8b04 	vpush	{d8-d9}
 8003f10:	b08d      	sub	sp, #52	; 0x34
 8003f12:	ec57 6b10 	vmov	r6, r7, d0
 8003f16:	ec55 4b11 	vmov	r4, r5, d1
 8003f1a:	f000 f9c9 	bl	80042b0 <__ieee754_pow>
 8003f1e:	4bae      	ldr	r3, [pc, #696]	; (80041d8 <pow+0x2d0>)
 8003f20:	eeb0 8a40 	vmov.f32	s16, s0
 8003f24:	eef0 8a60 	vmov.f32	s17, s1
 8003f28:	f993 9000 	ldrsb.w	r9, [r3]
 8003f2c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003f30:	4698      	mov	r8, r3
 8003f32:	d05f      	beq.n	8003ff4 <pow+0xec>
 8003f34:	4622      	mov	r2, r4
 8003f36:	462b      	mov	r3, r5
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc fd96 	bl	8000a6c <__aeabi_dcmpun>
 8003f40:	4683      	mov	fp, r0
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d156      	bne.n	8003ff4 <pow+0xec>
 8003f46:	4632      	mov	r2, r6
 8003f48:	463b      	mov	r3, r7
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	4639      	mov	r1, r7
 8003f4e:	f7fc fd8d 	bl	8000a6c <__aeabi_dcmpun>
 8003f52:	9001      	str	r0, [sp, #4]
 8003f54:	b1e8      	cbz	r0, 8003f92 <pow+0x8a>
 8003f56:	2200      	movs	r2, #0
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	f7fc fd53 	bl	8000a08 <__aeabi_dcmpeq>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d046      	beq.n	8003ff4 <pow+0xec>
 8003f66:	2301      	movs	r3, #1
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	4b9c      	ldr	r3, [pc, #624]	; (80041dc <pow+0x2d4>)
 8003f6c:	9303      	str	r3, [sp, #12]
 8003f6e:	4b9c      	ldr	r3, [pc, #624]	; (80041e0 <pow+0x2d8>)
 8003f70:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003f74:	2200      	movs	r2, #0
 8003f76:	f1b9 0f02 	cmp.w	r9, #2
 8003f7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003f7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003f82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f86:	d033      	beq.n	8003ff0 <pow+0xe8>
 8003f88:	a802      	add	r0, sp, #8
 8003f8a:	f000 ff62 	bl	8004e52 <matherr>
 8003f8e:	bb48      	cbnz	r0, 8003fe4 <pow+0xdc>
 8003f90:	e05e      	b.n	8004050 <pow+0x148>
 8003f92:	f04f 0a00 	mov.w	sl, #0
 8003f96:	f04f 0b00 	mov.w	fp, #0
 8003f9a:	4652      	mov	r2, sl
 8003f9c:	465b      	mov	r3, fp
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	f7fc fd31 	bl	8000a08 <__aeabi_dcmpeq>
 8003fa6:	ec4b ab19 	vmov	d9, sl, fp
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d055      	beq.n	800405a <pow+0x152>
 8003fae:	4652      	mov	r2, sl
 8003fb0:	465b      	mov	r3, fp
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	f7fc fd27 	bl	8000a08 <__aeabi_dcmpeq>
 8003fba:	4680      	mov	r8, r0
 8003fbc:	b318      	cbz	r0, 8004006 <pow+0xfe>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	9302      	str	r3, [sp, #8]
 8003fc2:	4b86      	ldr	r3, [pc, #536]	; (80041dc <pow+0x2d4>)
 8003fc4:	9303      	str	r3, [sp, #12]
 8003fc6:	9b01      	ldr	r3, [sp, #4]
 8003fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8003fca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003fce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003fd2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003fd6:	f1b9 0f00 	cmp.w	r9, #0
 8003fda:	d0d5      	beq.n	8003f88 <pow+0x80>
 8003fdc:	4b80      	ldr	r3, [pc, #512]	; (80041e0 <pow+0x2d8>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe6:	b11b      	cbz	r3, 8003ff0 <pow+0xe8>
 8003fe8:	f001 f84e 	bl	8005088 <__errno>
 8003fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fee:	6003      	str	r3, [r0, #0]
 8003ff0:	ed9d 8b08 	vldr	d8, [sp, #32]
 8003ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8003ff8:	eef0 0a68 	vmov.f32	s1, s17
 8003ffc:	b00d      	add	sp, #52	; 0x34
 8003ffe:	ecbd 8b04 	vpop	{d8-d9}
 8004002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004006:	ec45 4b10 	vmov	d0, r4, r5
 800400a:	f000 ff1a 	bl	8004e42 <finite>
 800400e:	2800      	cmp	r0, #0
 8004010:	d0f0      	beq.n	8003ff4 <pow+0xec>
 8004012:	4652      	mov	r2, sl
 8004014:	465b      	mov	r3, fp
 8004016:	4620      	mov	r0, r4
 8004018:	4629      	mov	r1, r5
 800401a:	f7fc fcff 	bl	8000a1c <__aeabi_dcmplt>
 800401e:	2800      	cmp	r0, #0
 8004020:	d0e8      	beq.n	8003ff4 <pow+0xec>
 8004022:	2301      	movs	r3, #1
 8004024:	9302      	str	r3, [sp, #8]
 8004026:	4b6d      	ldr	r3, [pc, #436]	; (80041dc <pow+0x2d4>)
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	4b6b      	ldr	r3, [pc, #428]	; (80041d8 <pow+0x2d0>)
 800402c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004030:	f993 3000 	ldrsb.w	r3, [r3]
 8004034:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004038:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800403c:	b913      	cbnz	r3, 8004044 <pow+0x13c>
 800403e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004042:	e7a1      	b.n	8003f88 <pow+0x80>
 8004044:	4967      	ldr	r1, [pc, #412]	; (80041e4 <pow+0x2dc>)
 8004046:	2000      	movs	r0, #0
 8004048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d19b      	bne.n	8003f88 <pow+0x80>
 8004050:	f001 f81a 	bl	8005088 <__errno>
 8004054:	2321      	movs	r3, #33	; 0x21
 8004056:	6003      	str	r3, [r0, #0]
 8004058:	e7c4      	b.n	8003fe4 <pow+0xdc>
 800405a:	eeb0 0a48 	vmov.f32	s0, s16
 800405e:	eef0 0a68 	vmov.f32	s1, s17
 8004062:	f000 feee 	bl	8004e42 <finite>
 8004066:	9001      	str	r0, [sp, #4]
 8004068:	2800      	cmp	r0, #0
 800406a:	f040 808a 	bne.w	8004182 <pow+0x27a>
 800406e:	ec47 6b10 	vmov	d0, r6, r7
 8004072:	f000 fee6 	bl	8004e42 <finite>
 8004076:	2800      	cmp	r0, #0
 8004078:	f000 8083 	beq.w	8004182 <pow+0x27a>
 800407c:	ec45 4b10 	vmov	d0, r4, r5
 8004080:	f000 fedf 	bl	8004e42 <finite>
 8004084:	2800      	cmp	r0, #0
 8004086:	d07c      	beq.n	8004182 <pow+0x27a>
 8004088:	ec53 2b18 	vmov	r2, r3, d8
 800408c:	ee18 0a10 	vmov	r0, s16
 8004090:	4619      	mov	r1, r3
 8004092:	f7fc fceb 	bl	8000a6c <__aeabi_dcmpun>
 8004096:	f998 9000 	ldrsb.w	r9, [r8]
 800409a:	4b50      	ldr	r3, [pc, #320]	; (80041dc <pow+0x2d4>)
 800409c:	b1b0      	cbz	r0, 80040cc <pow+0x1c4>
 800409e:	2201      	movs	r2, #1
 80040a0:	9303      	str	r3, [sp, #12]
 80040a2:	9b01      	ldr	r3, [sp, #4]
 80040a4:	9202      	str	r2, [sp, #8]
 80040a6:	930a      	str	r3, [sp, #40]	; 0x28
 80040a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80040ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80040b0:	f1b9 0f00 	cmp.w	r9, #0
 80040b4:	d0c3      	beq.n	800403e <pow+0x136>
 80040b6:	4652      	mov	r2, sl
 80040b8:	465b      	mov	r3, fp
 80040ba:	4650      	mov	r0, sl
 80040bc:	4659      	mov	r1, fp
 80040be:	f7fc fb65 	bl	800078c <__aeabi_ddiv>
 80040c2:	f1b9 0f02 	cmp.w	r9, #2
 80040c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80040ca:	e7c0      	b.n	800404e <pow+0x146>
 80040cc:	2203      	movs	r2, #3
 80040ce:	9202      	str	r2, [sp, #8]
 80040d0:	9303      	str	r3, [sp, #12]
 80040d2:	900a      	str	r0, [sp, #40]	; 0x28
 80040d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80040d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80040dc:	f1b9 0f00 	cmp.w	r9, #0
 80040e0:	d12c      	bne.n	800413c <pow+0x234>
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <pow+0x2e0>)
 80040e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80040e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80040ec:	4630      	mov	r0, r6
 80040ee:	4652      	mov	r2, sl
 80040f0:	465b      	mov	r3, fp
 80040f2:	4639      	mov	r1, r7
 80040f4:	f7fc fc92 	bl	8000a1c <__aeabi_dcmplt>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d066      	beq.n	80041ca <pow+0x2c2>
 80040fc:	2200      	movs	r2, #0
 80040fe:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <pow+0x2e4>)
 8004100:	4620      	mov	r0, r4
 8004102:	4629      	mov	r1, r5
 8004104:	f7fc fa18 	bl	8000538 <__aeabi_dmul>
 8004108:	4604      	mov	r4, r0
 800410a:	460d      	mov	r5, r1
 800410c:	ec45 4b10 	vmov	d0, r4, r5
 8004110:	f000 feaa 	bl	8004e68 <rint>
 8004114:	4620      	mov	r0, r4
 8004116:	ec53 2b10 	vmov	r2, r3, d0
 800411a:	4629      	mov	r1, r5
 800411c:	f7fc fc74 	bl	8000a08 <__aeabi_dcmpeq>
 8004120:	b920      	cbnz	r0, 800412c <pow+0x224>
 8004122:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <pow+0x2e8>)
 8004124:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004128:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800412c:	f998 3000 	ldrsb.w	r3, [r8]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d14a      	bne.n	80041ca <pow+0x2c2>
 8004134:	f000 ffa8 	bl	8005088 <__errno>
 8004138:	2322      	movs	r3, #34	; 0x22
 800413a:	e78c      	b.n	8004056 <pow+0x14e>
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <pow+0x2ec>)
 800413e:	2200      	movs	r2, #0
 8004140:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004144:	4630      	mov	r0, r6
 8004146:	4652      	mov	r2, sl
 8004148:	465b      	mov	r3, fp
 800414a:	4639      	mov	r1, r7
 800414c:	f7fc fc66 	bl	8000a1c <__aeabi_dcmplt>
 8004150:	2800      	cmp	r0, #0
 8004152:	d0eb      	beq.n	800412c <pow+0x224>
 8004154:	2200      	movs	r2, #0
 8004156:	4b25      	ldr	r3, [pc, #148]	; (80041ec <pow+0x2e4>)
 8004158:	4620      	mov	r0, r4
 800415a:	4629      	mov	r1, r5
 800415c:	f7fc f9ec 	bl	8000538 <__aeabi_dmul>
 8004160:	4604      	mov	r4, r0
 8004162:	460d      	mov	r5, r1
 8004164:	ec45 4b10 	vmov	d0, r4, r5
 8004168:	f000 fe7e 	bl	8004e68 <rint>
 800416c:	4620      	mov	r0, r4
 800416e:	ec53 2b10 	vmov	r2, r3, d0
 8004172:	4629      	mov	r1, r5
 8004174:	f7fc fc48 	bl	8000a08 <__aeabi_dcmpeq>
 8004178:	2800      	cmp	r0, #0
 800417a:	d1d7      	bne.n	800412c <pow+0x224>
 800417c:	2200      	movs	r2, #0
 800417e:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <pow+0x2dc>)
 8004180:	e7d2      	b.n	8004128 <pow+0x220>
 8004182:	2200      	movs	r2, #0
 8004184:	2300      	movs	r3, #0
 8004186:	ec51 0b18 	vmov	r0, r1, d8
 800418a:	f7fc fc3d 	bl	8000a08 <__aeabi_dcmpeq>
 800418e:	2800      	cmp	r0, #0
 8004190:	f43f af30 	beq.w	8003ff4 <pow+0xec>
 8004194:	ec47 6b10 	vmov	d0, r6, r7
 8004198:	f000 fe53 	bl	8004e42 <finite>
 800419c:	2800      	cmp	r0, #0
 800419e:	f43f af29 	beq.w	8003ff4 <pow+0xec>
 80041a2:	ec45 4b10 	vmov	d0, r4, r5
 80041a6:	f000 fe4c 	bl	8004e42 <finite>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	f43f af22 	beq.w	8003ff4 <pow+0xec>
 80041b0:	2304      	movs	r3, #4
 80041b2:	9302      	str	r3, [sp, #8]
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <pow+0x2d4>)
 80041b6:	9303      	str	r3, [sp, #12]
 80041b8:	2300      	movs	r3, #0
 80041ba:	930a      	str	r3, [sp, #40]	; 0x28
 80041bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80041c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80041c4:	ed8d 9b08 	vstr	d9, [sp, #32]
 80041c8:	e7b0      	b.n	800412c <pow+0x224>
 80041ca:	a802      	add	r0, sp, #8
 80041cc:	f000 fe41 	bl	8004e52 <matherr>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	f47f af07 	bne.w	8003fe4 <pow+0xdc>
 80041d6:	e7ad      	b.n	8004134 <pow+0x22c>
 80041d8:	20000080 	.word	0x20000080
 80041dc:	08005120 	.word	0x08005120
 80041e0:	3ff00000 	.word	0x3ff00000
 80041e4:	fff00000 	.word	0xfff00000
 80041e8:	47efffff 	.word	0x47efffff
 80041ec:	3fe00000 	.word	0x3fe00000
 80041f0:	c7efffff 	.word	0xc7efffff
 80041f4:	7ff00000 	.word	0x7ff00000

080041f8 <sqrt>:
 80041f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041fc:	ed2d 8b02 	vpush	{d8}
 8004200:	b08b      	sub	sp, #44	; 0x2c
 8004202:	ec55 4b10 	vmov	r4, r5, d0
 8004206:	f000 fd65 	bl	8004cd4 <__ieee754_sqrt>
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <sqrt+0xac>)
 800420c:	eeb0 8a40 	vmov.f32	s16, s0
 8004210:	eef0 8a60 	vmov.f32	s17, s1
 8004214:	f993 6000 	ldrsb.w	r6, [r3]
 8004218:	1c73      	adds	r3, r6, #1
 800421a:	d02a      	beq.n	8004272 <sqrt+0x7a>
 800421c:	4622      	mov	r2, r4
 800421e:	462b      	mov	r3, r5
 8004220:	4620      	mov	r0, r4
 8004222:	4629      	mov	r1, r5
 8004224:	f7fc fc22 	bl	8000a6c <__aeabi_dcmpun>
 8004228:	4607      	mov	r7, r0
 800422a:	bb10      	cbnz	r0, 8004272 <sqrt+0x7a>
 800422c:	f04f 0800 	mov.w	r8, #0
 8004230:	f04f 0900 	mov.w	r9, #0
 8004234:	4642      	mov	r2, r8
 8004236:	464b      	mov	r3, r9
 8004238:	4620      	mov	r0, r4
 800423a:	4629      	mov	r1, r5
 800423c:	f7fc fbee 	bl	8000a1c <__aeabi_dcmplt>
 8004240:	b1b8      	cbz	r0, 8004272 <sqrt+0x7a>
 8004242:	2301      	movs	r3, #1
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <sqrt+0xb0>)
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	9708      	str	r7, [sp, #32]
 800424c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004250:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004254:	b9b6      	cbnz	r6, 8004284 <sqrt+0x8c>
 8004256:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800425a:	4668      	mov	r0, sp
 800425c:	f000 fdf9 	bl	8004e52 <matherr>
 8004260:	b1d0      	cbz	r0, 8004298 <sqrt+0xa0>
 8004262:	9b08      	ldr	r3, [sp, #32]
 8004264:	b11b      	cbz	r3, 800426e <sqrt+0x76>
 8004266:	f000 ff0f 	bl	8005088 <__errno>
 800426a:	9b08      	ldr	r3, [sp, #32]
 800426c:	6003      	str	r3, [r0, #0]
 800426e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004272:	eeb0 0a48 	vmov.f32	s0, s16
 8004276:	eef0 0a68 	vmov.f32	s1, s17
 800427a:	b00b      	add	sp, #44	; 0x2c
 800427c:	ecbd 8b02 	vpop	{d8}
 8004280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	4640      	mov	r0, r8
 800428a:	4649      	mov	r1, r9
 800428c:	f7fc fa7e 	bl	800078c <__aeabi_ddiv>
 8004290:	2e02      	cmp	r6, #2
 8004292:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004296:	d1e0      	bne.n	800425a <sqrt+0x62>
 8004298:	f000 fef6 	bl	8005088 <__errno>
 800429c:	2321      	movs	r3, #33	; 0x21
 800429e:	6003      	str	r3, [r0, #0]
 80042a0:	e7df      	b.n	8004262 <sqrt+0x6a>
 80042a2:	bf00      	nop
 80042a4:	20000080 	.word	0x20000080
 80042a8:	08005124 	.word	0x08005124
 80042ac:	00000000 	.word	0x00000000

080042b0 <__ieee754_pow>:
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	b091      	sub	sp, #68	; 0x44
 80042b6:	ed8d 1b00 	vstr	d1, [sp]
 80042ba:	e89d 0204 	ldmia.w	sp, {r2, r9}
 80042be:	ec57 6b10 	vmov	r6, r7, d0
 80042c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80042c6:	ea58 0302 	orrs.w	r3, r8, r2
 80042ca:	ee10 aa10 	vmov	sl, s0
 80042ce:	463d      	mov	r5, r7
 80042d0:	f000 84bd 	beq.w	8004c4e <__ieee754_pow+0x99e>
 80042d4:	4b78      	ldr	r3, [pc, #480]	; (80044b8 <__ieee754_pow+0x208>)
 80042d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80042da:	429c      	cmp	r4, r3
 80042dc:	dc09      	bgt.n	80042f2 <__ieee754_pow+0x42>
 80042de:	d103      	bne.n	80042e8 <__ieee754_pow+0x38>
 80042e0:	b93e      	cbnz	r6, 80042f2 <__ieee754_pow+0x42>
 80042e2:	45a0      	cmp	r8, r4
 80042e4:	dc0d      	bgt.n	8004302 <__ieee754_pow+0x52>
 80042e6:	e001      	b.n	80042ec <__ieee754_pow+0x3c>
 80042e8:	4598      	cmp	r8, r3
 80042ea:	dc02      	bgt.n	80042f2 <__ieee754_pow+0x42>
 80042ec:	4598      	cmp	r8, r3
 80042ee:	d10e      	bne.n	800430e <__ieee754_pow+0x5e>
 80042f0:	b16a      	cbz	r2, 800430e <__ieee754_pow+0x5e>
 80042f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80042f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80042fa:	ea54 030a 	orrs.w	r3, r4, sl
 80042fe:	f000 84a6 	beq.w	8004c4e <__ieee754_pow+0x99e>
 8004302:	486e      	ldr	r0, [pc, #440]	; (80044bc <__ieee754_pow+0x20c>)
 8004304:	b011      	add	sp, #68	; 0x44
 8004306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	f000 bda5 	b.w	8004e58 <nan>
 800430e:	2d00      	cmp	r5, #0
 8004310:	da53      	bge.n	80043ba <__ieee754_pow+0x10a>
 8004312:	4b6b      	ldr	r3, [pc, #428]	; (80044c0 <__ieee754_pow+0x210>)
 8004314:	4598      	cmp	r8, r3
 8004316:	dc4d      	bgt.n	80043b4 <__ieee754_pow+0x104>
 8004318:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800431c:	4598      	cmp	r8, r3
 800431e:	dd4c      	ble.n	80043ba <__ieee754_pow+0x10a>
 8004320:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004324:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004328:	2b14      	cmp	r3, #20
 800432a:	dd26      	ble.n	800437a <__ieee754_pow+0xca>
 800432c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004330:	fa22 f103 	lsr.w	r1, r2, r3
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	429a      	cmp	r2, r3
 800433a:	d13e      	bne.n	80043ba <__ieee754_pow+0x10a>
 800433c:	f001 0101 	and.w	r1, r1, #1
 8004340:	f1c1 0b02 	rsb	fp, r1, #2
 8004344:	2a00      	cmp	r2, #0
 8004346:	d15b      	bne.n	8004400 <__ieee754_pow+0x150>
 8004348:	4b5b      	ldr	r3, [pc, #364]	; (80044b8 <__ieee754_pow+0x208>)
 800434a:	4598      	cmp	r8, r3
 800434c:	d124      	bne.n	8004398 <__ieee754_pow+0xe8>
 800434e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004352:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004356:	ea53 030a 	orrs.w	r3, r3, sl
 800435a:	f000 8478 	beq.w	8004c4e <__ieee754_pow+0x99e>
 800435e:	4b59      	ldr	r3, [pc, #356]	; (80044c4 <__ieee754_pow+0x214>)
 8004360:	429c      	cmp	r4, r3
 8004362:	dd2d      	ble.n	80043c0 <__ieee754_pow+0x110>
 8004364:	f1b9 0f00 	cmp.w	r9, #0
 8004368:	f280 8475 	bge.w	8004c56 <__ieee754_pow+0x9a6>
 800436c:	2000      	movs	r0, #0
 800436e:	2100      	movs	r1, #0
 8004370:	ec41 0b10 	vmov	d0, r0, r1
 8004374:	b011      	add	sp, #68	; 0x44
 8004376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437a:	2a00      	cmp	r2, #0
 800437c:	d13e      	bne.n	80043fc <__ieee754_pow+0x14c>
 800437e:	f1c3 0314 	rsb	r3, r3, #20
 8004382:	fa48 f103 	asr.w	r1, r8, r3
 8004386:	fa01 f303 	lsl.w	r3, r1, r3
 800438a:	4598      	cmp	r8, r3
 800438c:	f040 846b 	bne.w	8004c66 <__ieee754_pow+0x9b6>
 8004390:	f001 0101 	and.w	r1, r1, #1
 8004394:	f1c1 0b02 	rsb	fp, r1, #2
 8004398:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <__ieee754_pow+0x218>)
 800439a:	4598      	cmp	r8, r3
 800439c:	d118      	bne.n	80043d0 <__ieee754_pow+0x120>
 800439e:	f1b9 0f00 	cmp.w	r9, #0
 80043a2:	f280 845c 	bge.w	8004c5e <__ieee754_pow+0x9ae>
 80043a6:	4948      	ldr	r1, [pc, #288]	; (80044c8 <__ieee754_pow+0x218>)
 80043a8:	4632      	mov	r2, r6
 80043aa:	463b      	mov	r3, r7
 80043ac:	2000      	movs	r0, #0
 80043ae:	f7fc f9ed 	bl	800078c <__aeabi_ddiv>
 80043b2:	e7dd      	b.n	8004370 <__ieee754_pow+0xc0>
 80043b4:	f04f 0b02 	mov.w	fp, #2
 80043b8:	e7c4      	b.n	8004344 <__ieee754_pow+0x94>
 80043ba:	f04f 0b00 	mov.w	fp, #0
 80043be:	e7c1      	b.n	8004344 <__ieee754_pow+0x94>
 80043c0:	f1b9 0f00 	cmp.w	r9, #0
 80043c4:	dad2      	bge.n	800436c <__ieee754_pow+0xbc>
 80043c6:	e89d 0009 	ldmia.w	sp, {r0, r3}
 80043ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80043ce:	e7cf      	b.n	8004370 <__ieee754_pow+0xc0>
 80043d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80043d4:	d106      	bne.n	80043e4 <__ieee754_pow+0x134>
 80043d6:	4632      	mov	r2, r6
 80043d8:	463b      	mov	r3, r7
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	f7fc f8ab 	bl	8000538 <__aeabi_dmul>
 80043e2:	e7c5      	b.n	8004370 <__ieee754_pow+0xc0>
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <__ieee754_pow+0x21c>)
 80043e6:	4599      	cmp	r9, r3
 80043e8:	d10a      	bne.n	8004400 <__ieee754_pow+0x150>
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	db08      	blt.n	8004400 <__ieee754_pow+0x150>
 80043ee:	ec47 6b10 	vmov	d0, r6, r7
 80043f2:	b011      	add	sp, #68	; 0x44
 80043f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f8:	f000 bc6c 	b.w	8004cd4 <__ieee754_sqrt>
 80043fc:	f04f 0b00 	mov.w	fp, #0
 8004400:	ec47 6b10 	vmov	d0, r6, r7
 8004404:	f000 fd16 	bl	8004e34 <fabs>
 8004408:	ec51 0b10 	vmov	r0, r1, d0
 800440c:	f1ba 0f00 	cmp.w	sl, #0
 8004410:	d127      	bne.n	8004462 <__ieee754_pow+0x1b2>
 8004412:	b124      	cbz	r4, 800441e <__ieee754_pow+0x16e>
 8004414:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <__ieee754_pow+0x218>)
 8004416:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800441a:	429a      	cmp	r2, r3
 800441c:	d121      	bne.n	8004462 <__ieee754_pow+0x1b2>
 800441e:	f1b9 0f00 	cmp.w	r9, #0
 8004422:	da05      	bge.n	8004430 <__ieee754_pow+0x180>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	2000      	movs	r0, #0
 800442a:	4927      	ldr	r1, [pc, #156]	; (80044c8 <__ieee754_pow+0x218>)
 800442c:	f7fc f9ae 	bl	800078c <__aeabi_ddiv>
 8004430:	2d00      	cmp	r5, #0
 8004432:	da9d      	bge.n	8004370 <__ieee754_pow+0xc0>
 8004434:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004438:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800443c:	ea54 030b 	orrs.w	r3, r4, fp
 8004440:	d108      	bne.n	8004454 <__ieee754_pow+0x1a4>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	f7fb fec1 	bl	80001d0 <__aeabi_dsub>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	e7ac      	b.n	80043ae <__ieee754_pow+0xfe>
 8004454:	f1bb 0f01 	cmp.w	fp, #1
 8004458:	d18a      	bne.n	8004370 <__ieee754_pow+0xc0>
 800445a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800445e:	4619      	mov	r1, r3
 8004460:	e786      	b.n	8004370 <__ieee754_pow+0xc0>
 8004462:	0fed      	lsrs	r5, r5, #31
 8004464:	1e6b      	subs	r3, r5, #1
 8004466:	930d      	str	r3, [sp, #52]	; 0x34
 8004468:	ea5b 0303 	orrs.w	r3, fp, r3
 800446c:	d102      	bne.n	8004474 <__ieee754_pow+0x1c4>
 800446e:	4632      	mov	r2, r6
 8004470:	463b      	mov	r3, r7
 8004472:	e7e8      	b.n	8004446 <__ieee754_pow+0x196>
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <__ieee754_pow+0x220>)
 8004476:	4598      	cmp	r8, r3
 8004478:	f340 80fe 	ble.w	8004678 <__ieee754_pow+0x3c8>
 800447c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004480:	4598      	cmp	r8, r3
 8004482:	dd0a      	ble.n	800449a <__ieee754_pow+0x1ea>
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <__ieee754_pow+0x214>)
 8004486:	429c      	cmp	r4, r3
 8004488:	dc0d      	bgt.n	80044a6 <__ieee754_pow+0x1f6>
 800448a:	f1b9 0f00 	cmp.w	r9, #0
 800448e:	f6bf af6d 	bge.w	800436c <__ieee754_pow+0xbc>
 8004492:	a307      	add	r3, pc, #28	; (adr r3, 80044b0 <__ieee754_pow+0x200>)
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	e79f      	b.n	80043da <__ieee754_pow+0x12a>
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <__ieee754_pow+0x224>)
 800449c:	429c      	cmp	r4, r3
 800449e:	ddf4      	ble.n	800448a <__ieee754_pow+0x1da>
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <__ieee754_pow+0x218>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	dd18      	ble.n	80044d8 <__ieee754_pow+0x228>
 80044a6:	f1b9 0f00 	cmp.w	r9, #0
 80044aa:	dcf2      	bgt.n	8004492 <__ieee754_pow+0x1e2>
 80044ac:	e75e      	b.n	800436c <__ieee754_pow+0xbc>
 80044ae:	bf00      	nop
 80044b0:	8800759c 	.word	0x8800759c
 80044b4:	7e37e43c 	.word	0x7e37e43c
 80044b8:	7ff00000 	.word	0x7ff00000
 80044bc:	08005128 	.word	0x08005128
 80044c0:	433fffff 	.word	0x433fffff
 80044c4:	3fefffff 	.word	0x3fefffff
 80044c8:	3ff00000 	.word	0x3ff00000
 80044cc:	3fe00000 	.word	0x3fe00000
 80044d0:	41e00000 	.word	0x41e00000
 80044d4:	3feffffe 	.word	0x3feffffe
 80044d8:	2200      	movs	r2, #0
 80044da:	4b63      	ldr	r3, [pc, #396]	; (8004668 <__ieee754_pow+0x3b8>)
 80044dc:	f7fb fe78 	bl	80001d0 <__aeabi_dsub>
 80044e0:	a355      	add	r3, pc, #340	; (adr r3, 8004638 <__ieee754_pow+0x388>)
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	4604      	mov	r4, r0
 80044e8:	460d      	mov	r5, r1
 80044ea:	f7fc f825 	bl	8000538 <__aeabi_dmul>
 80044ee:	a354      	add	r3, pc, #336	; (adr r3, 8004640 <__ieee754_pow+0x390>)
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	4606      	mov	r6, r0
 80044f6:	460f      	mov	r7, r1
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	f7fc f81c 	bl	8000538 <__aeabi_dmul>
 8004500:	2200      	movs	r2, #0
 8004502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004506:	4b59      	ldr	r3, [pc, #356]	; (800466c <__ieee754_pow+0x3bc>)
 8004508:	4620      	mov	r0, r4
 800450a:	4629      	mov	r1, r5
 800450c:	f7fc f814 	bl	8000538 <__aeabi_dmul>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	a14c      	add	r1, pc, #304	; (adr r1, 8004648 <__ieee754_pow+0x398>)
 8004516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800451a:	f7fb fe59 	bl	80001d0 <__aeabi_dsub>
 800451e:	4622      	mov	r2, r4
 8004520:	462b      	mov	r3, r5
 8004522:	f7fc f809 	bl	8000538 <__aeabi_dmul>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	2000      	movs	r0, #0
 800452c:	4950      	ldr	r1, [pc, #320]	; (8004670 <__ieee754_pow+0x3c0>)
 800452e:	f7fb fe4f 	bl	80001d0 <__aeabi_dsub>
 8004532:	4622      	mov	r2, r4
 8004534:	462b      	mov	r3, r5
 8004536:	4680      	mov	r8, r0
 8004538:	4689      	mov	r9, r1
 800453a:	4620      	mov	r0, r4
 800453c:	4629      	mov	r1, r5
 800453e:	f7fb fffb 	bl	8000538 <__aeabi_dmul>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4640      	mov	r0, r8
 8004548:	4649      	mov	r1, r9
 800454a:	f7fb fff5 	bl	8000538 <__aeabi_dmul>
 800454e:	a340      	add	r3, pc, #256	; (adr r3, 8004650 <__ieee754_pow+0x3a0>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fb fff0 	bl	8000538 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004560:	f7fb fe36 	bl	80001d0 <__aeabi_dsub>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4604      	mov	r4, r0
 800456a:	460d      	mov	r5, r1
 800456c:	4630      	mov	r0, r6
 800456e:	4639      	mov	r1, r7
 8004570:	f7fb fe30 	bl	80001d4 <__adddf3>
 8004574:	2000      	movs	r0, #0
 8004576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800457a:	4632      	mov	r2, r6
 800457c:	463b      	mov	r3, r7
 800457e:	f7fb fe27 	bl	80001d0 <__aeabi_dsub>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4620      	mov	r0, r4
 8004588:	4629      	mov	r1, r5
 800458a:	f7fb fe21 	bl	80001d0 <__aeabi_dsub>
 800458e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004590:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004594:	4313      	orrs	r3, r2
 8004596:	4606      	mov	r6, r0
 8004598:	460f      	mov	r7, r1
 800459a:	f040 81eb 	bne.w	8004974 <__ieee754_pow+0x6c4>
 800459e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004658 <__ieee754_pow+0x3a8>
 80045a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80045a6:	2400      	movs	r4, #0
 80045a8:	4622      	mov	r2, r4
 80045aa:	462b      	mov	r3, r5
 80045ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80045b4:	f7fb fe0c 	bl	80001d0 <__aeabi_dsub>
 80045b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045bc:	f7fb ffbc 	bl	8000538 <__aeabi_dmul>
 80045c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045c4:	4680      	mov	r8, r0
 80045c6:	4689      	mov	r9, r1
 80045c8:	4630      	mov	r0, r6
 80045ca:	4639      	mov	r1, r7
 80045cc:	f7fb ffb4 	bl	8000538 <__aeabi_dmul>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4640      	mov	r0, r8
 80045d6:	4649      	mov	r1, r9
 80045d8:	f7fb fdfc 	bl	80001d4 <__adddf3>
 80045dc:	4622      	mov	r2, r4
 80045de:	462b      	mov	r3, r5
 80045e0:	4680      	mov	r8, r0
 80045e2:	4689      	mov	r9, r1
 80045e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045e8:	f7fb ffa6 	bl	8000538 <__aeabi_dmul>
 80045ec:	460b      	mov	r3, r1
 80045ee:	4604      	mov	r4, r0
 80045f0:	460d      	mov	r5, r1
 80045f2:	4602      	mov	r2, r0
 80045f4:	4649      	mov	r1, r9
 80045f6:	4640      	mov	r0, r8
 80045f8:	e9cd 4500 	strd	r4, r5, [sp]
 80045fc:	f7fb fdea 	bl	80001d4 <__adddf3>
 8004600:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <__ieee754_pow+0x3c4>)
 8004602:	4299      	cmp	r1, r3
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	468b      	mov	fp, r1
 800460a:	f340 82f7 	ble.w	8004bfc <__ieee754_pow+0x94c>
 800460e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004612:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004616:	4303      	orrs	r3, r0
 8004618:	f000 81ea 	beq.w	80049f0 <__ieee754_pow+0x740>
 800461c:	a310      	add	r3, pc, #64	; (adr r3, 8004660 <__ieee754_pow+0x3b0>)
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004626:	f7fb ff87 	bl	8000538 <__aeabi_dmul>
 800462a:	a30d      	add	r3, pc, #52	; (adr r3, 8004660 <__ieee754_pow+0x3b0>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	e6d5      	b.n	80043de <__ieee754_pow+0x12e>
 8004632:	bf00      	nop
 8004634:	f3af 8000 	nop.w
 8004638:	60000000 	.word	0x60000000
 800463c:	3ff71547 	.word	0x3ff71547
 8004640:	f85ddf44 	.word	0xf85ddf44
 8004644:	3e54ae0b 	.word	0x3e54ae0b
 8004648:	55555555 	.word	0x55555555
 800464c:	3fd55555 	.word	0x3fd55555
 8004650:	652b82fe 	.word	0x652b82fe
 8004654:	3ff71547 	.word	0x3ff71547
 8004658:	00000000 	.word	0x00000000
 800465c:	bff00000 	.word	0xbff00000
 8004660:	8800759c 	.word	0x8800759c
 8004664:	7e37e43c 	.word	0x7e37e43c
 8004668:	3ff00000 	.word	0x3ff00000
 800466c:	3fd00000 	.word	0x3fd00000
 8004670:	3fe00000 	.word	0x3fe00000
 8004674:	408fffff 	.word	0x408fffff
 8004678:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	da05      	bge.n	800468e <__ieee754_pow+0x3de>
 8004682:	4bd3      	ldr	r3, [pc, #844]	; (80049d0 <__ieee754_pow+0x720>)
 8004684:	f7fb ff58 	bl	8000538 <__aeabi_dmul>
 8004688:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800468c:	460c      	mov	r4, r1
 800468e:	1523      	asrs	r3, r4, #20
 8004690:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004694:	4413      	add	r3, r2
 8004696:	9307      	str	r3, [sp, #28]
 8004698:	4bce      	ldr	r3, [pc, #824]	; (80049d4 <__ieee754_pow+0x724>)
 800469a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800469e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80046a2:	429c      	cmp	r4, r3
 80046a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80046a8:	dd08      	ble.n	80046bc <__ieee754_pow+0x40c>
 80046aa:	4bcb      	ldr	r3, [pc, #812]	; (80049d8 <__ieee754_pow+0x728>)
 80046ac:	429c      	cmp	r4, r3
 80046ae:	f340 815e 	ble.w	800496e <__ieee754_pow+0x6be>
 80046b2:	9b07      	ldr	r3, [sp, #28]
 80046b4:	3301      	adds	r3, #1
 80046b6:	9307      	str	r3, [sp, #28]
 80046b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80046bc:	f04f 0a00 	mov.w	sl, #0
 80046c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80046c4:	930c      	str	r3, [sp, #48]	; 0x30
 80046c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046c8:	4bc4      	ldr	r3, [pc, #784]	; (80049dc <__ieee754_pow+0x72c>)
 80046ca:	4413      	add	r3, r2
 80046cc:	ed93 7b00 	vldr	d7, [r3]
 80046d0:	4629      	mov	r1, r5
 80046d2:	ec53 2b17 	vmov	r2, r3, d7
 80046d6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80046da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80046de:	f7fb fd77 	bl	80001d0 <__aeabi_dsub>
 80046e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046e6:	4606      	mov	r6, r0
 80046e8:	460f      	mov	r7, r1
 80046ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80046ee:	f7fb fd71 	bl	80001d4 <__adddf3>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	2000      	movs	r0, #0
 80046f8:	49b9      	ldr	r1, [pc, #740]	; (80049e0 <__ieee754_pow+0x730>)
 80046fa:	f7fc f847 	bl	800078c <__aeabi_ddiv>
 80046fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4630      	mov	r0, r6
 8004708:	4639      	mov	r1, r7
 800470a:	f7fb ff15 	bl	8000538 <__aeabi_dmul>
 800470e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004712:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004716:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800471a:	2300      	movs	r3, #0
 800471c:	9302      	str	r3, [sp, #8]
 800471e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004722:	106d      	asrs	r5, r5, #1
 8004724:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004728:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800472c:	2200      	movs	r2, #0
 800472e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004732:	4640      	mov	r0, r8
 8004734:	4649      	mov	r1, r9
 8004736:	4614      	mov	r4, r2
 8004738:	461d      	mov	r5, r3
 800473a:	f7fb fefd 	bl	8000538 <__aeabi_dmul>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4630      	mov	r0, r6
 8004744:	4639      	mov	r1, r7
 8004746:	f7fb fd43 	bl	80001d0 <__aeabi_dsub>
 800474a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800474e:	4606      	mov	r6, r0
 8004750:	460f      	mov	r7, r1
 8004752:	4620      	mov	r0, r4
 8004754:	4629      	mov	r1, r5
 8004756:	f7fb fd3b 	bl	80001d0 <__aeabi_dsub>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004762:	f7fb fd35 	bl	80001d0 <__aeabi_dsub>
 8004766:	4642      	mov	r2, r8
 8004768:	464b      	mov	r3, r9
 800476a:	f7fb fee5 	bl	8000538 <__aeabi_dmul>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4630      	mov	r0, r6
 8004774:	4639      	mov	r1, r7
 8004776:	f7fb fd2b 	bl	80001d0 <__aeabi_dsub>
 800477a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800477e:	f7fb fedb 	bl	8000538 <__aeabi_dmul>
 8004782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004786:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	f7fb fed3 	bl	8000538 <__aeabi_dmul>
 8004792:	a37b      	add	r3, pc, #492	; (adr r3, 8004980 <__ieee754_pow+0x6d0>)
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	4604      	mov	r4, r0
 800479a:	460d      	mov	r5, r1
 800479c:	f7fb fecc 	bl	8000538 <__aeabi_dmul>
 80047a0:	a379      	add	r3, pc, #484	; (adr r3, 8004988 <__ieee754_pow+0x6d8>)
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f7fb fd15 	bl	80001d4 <__adddf3>
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	f7fb fec3 	bl	8000538 <__aeabi_dmul>
 80047b2:	a377      	add	r3, pc, #476	; (adr r3, 8004990 <__ieee754_pow+0x6e0>)
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f7fb fd0c 	bl	80001d4 <__adddf3>
 80047bc:	4622      	mov	r2, r4
 80047be:	462b      	mov	r3, r5
 80047c0:	f7fb feba 	bl	8000538 <__aeabi_dmul>
 80047c4:	a374      	add	r3, pc, #464	; (adr r3, 8004998 <__ieee754_pow+0x6e8>)
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f7fb fd03 	bl	80001d4 <__adddf3>
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	f7fb feb1 	bl	8000538 <__aeabi_dmul>
 80047d6:	a372      	add	r3, pc, #456	; (adr r3, 80049a0 <__ieee754_pow+0x6f0>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fb fcfa 	bl	80001d4 <__adddf3>
 80047e0:	4622      	mov	r2, r4
 80047e2:	462b      	mov	r3, r5
 80047e4:	f7fb fea8 	bl	8000538 <__aeabi_dmul>
 80047e8:	a36f      	add	r3, pc, #444	; (adr r3, 80049a8 <__ieee754_pow+0x6f8>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fb fcf1 	bl	80001d4 <__adddf3>
 80047f2:	4622      	mov	r2, r4
 80047f4:	4606      	mov	r6, r0
 80047f6:	460f      	mov	r7, r1
 80047f8:	462b      	mov	r3, r5
 80047fa:	4620      	mov	r0, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	f7fb fe9b 	bl	8000538 <__aeabi_dmul>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4630      	mov	r0, r6
 8004808:	4639      	mov	r1, r7
 800480a:	f7fb fe95 	bl	8000538 <__aeabi_dmul>
 800480e:	4642      	mov	r2, r8
 8004810:	4604      	mov	r4, r0
 8004812:	460d      	mov	r5, r1
 8004814:	464b      	mov	r3, r9
 8004816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800481a:	f7fb fcdb 	bl	80001d4 <__adddf3>
 800481e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004822:	f7fb fe89 	bl	8000538 <__aeabi_dmul>
 8004826:	4622      	mov	r2, r4
 8004828:	462b      	mov	r3, r5
 800482a:	f7fb fcd3 	bl	80001d4 <__adddf3>
 800482e:	4642      	mov	r2, r8
 8004830:	4606      	mov	r6, r0
 8004832:	460f      	mov	r7, r1
 8004834:	464b      	mov	r3, r9
 8004836:	4640      	mov	r0, r8
 8004838:	4649      	mov	r1, r9
 800483a:	f7fb fe7d 	bl	8000538 <__aeabi_dmul>
 800483e:	2200      	movs	r2, #0
 8004840:	4b68      	ldr	r3, [pc, #416]	; (80049e4 <__ieee754_pow+0x734>)
 8004842:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004846:	f7fb fcc5 	bl	80001d4 <__adddf3>
 800484a:	4632      	mov	r2, r6
 800484c:	463b      	mov	r3, r7
 800484e:	f7fb fcc1 	bl	80001d4 <__adddf3>
 8004852:	9802      	ldr	r0, [sp, #8]
 8004854:	460d      	mov	r5, r1
 8004856:	4604      	mov	r4, r0
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4640      	mov	r0, r8
 800485e:	4649      	mov	r1, r9
 8004860:	f7fb fe6a 	bl	8000538 <__aeabi_dmul>
 8004864:	2200      	movs	r2, #0
 8004866:	4680      	mov	r8, r0
 8004868:	4689      	mov	r9, r1
 800486a:	4b5e      	ldr	r3, [pc, #376]	; (80049e4 <__ieee754_pow+0x734>)
 800486c:	4620      	mov	r0, r4
 800486e:	4629      	mov	r1, r5
 8004870:	f7fb fcae 	bl	80001d0 <__aeabi_dsub>
 8004874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004878:	f7fb fcaa 	bl	80001d0 <__aeabi_dsub>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4630      	mov	r0, r6
 8004882:	4639      	mov	r1, r7
 8004884:	f7fb fca4 	bl	80001d0 <__aeabi_dsub>
 8004888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800488c:	f7fb fe54 	bl	8000538 <__aeabi_dmul>
 8004890:	4622      	mov	r2, r4
 8004892:	4606      	mov	r6, r0
 8004894:	460f      	mov	r7, r1
 8004896:	462b      	mov	r3, r5
 8004898:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800489c:	f7fb fe4c 	bl	8000538 <__aeabi_dmul>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4630      	mov	r0, r6
 80048a6:	4639      	mov	r1, r7
 80048a8:	f7fb fc94 	bl	80001d4 <__adddf3>
 80048ac:	4606      	mov	r6, r0
 80048ae:	460f      	mov	r7, r1
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4640      	mov	r0, r8
 80048b6:	4649      	mov	r1, r9
 80048b8:	f7fb fc8c 	bl	80001d4 <__adddf3>
 80048bc:	9802      	ldr	r0, [sp, #8]
 80048be:	a33c      	add	r3, pc, #240	; (adr r3, 80049b0 <__ieee754_pow+0x700>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	4604      	mov	r4, r0
 80048c6:	460d      	mov	r5, r1
 80048c8:	f7fb fe36 	bl	8000538 <__aeabi_dmul>
 80048cc:	4642      	mov	r2, r8
 80048ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80048d2:	464b      	mov	r3, r9
 80048d4:	4620      	mov	r0, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	f7fb fc7a 	bl	80001d0 <__aeabi_dsub>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4630      	mov	r0, r6
 80048e2:	4639      	mov	r1, r7
 80048e4:	f7fb fc74 	bl	80001d0 <__aeabi_dsub>
 80048e8:	a333      	add	r3, pc, #204	; (adr r3, 80049b8 <__ieee754_pow+0x708>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fb fe23 	bl	8000538 <__aeabi_dmul>
 80048f2:	a333      	add	r3, pc, #204	; (adr r3, 80049c0 <__ieee754_pow+0x710>)
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	4606      	mov	r6, r0
 80048fa:	460f      	mov	r7, r1
 80048fc:	4620      	mov	r0, r4
 80048fe:	4629      	mov	r1, r5
 8004900:	f7fb fe1a 	bl	8000538 <__aeabi_dmul>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4630      	mov	r0, r6
 800490a:	4639      	mov	r1, r7
 800490c:	f7fb fc62 	bl	80001d4 <__adddf3>
 8004910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004912:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <__ieee754_pow+0x738>)
 8004914:	4413      	add	r3, r2
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fc5b 	bl	80001d4 <__adddf3>
 800491e:	4604      	mov	r4, r0
 8004920:	9807      	ldr	r0, [sp, #28]
 8004922:	460d      	mov	r5, r1
 8004924:	f7fb fda2 	bl	800046c <__aeabi_i2d>
 8004928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800492a:	4b30      	ldr	r3, [pc, #192]	; (80049ec <__ieee754_pow+0x73c>)
 800492c:	4413      	add	r3, r2
 800492e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004932:	4606      	mov	r6, r0
 8004934:	460f      	mov	r7, r1
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800493e:	f7fb fc49 	bl	80001d4 <__adddf3>
 8004942:	4642      	mov	r2, r8
 8004944:	464b      	mov	r3, r9
 8004946:	f7fb fc45 	bl	80001d4 <__adddf3>
 800494a:	4632      	mov	r2, r6
 800494c:	463b      	mov	r3, r7
 800494e:	f7fb fc41 	bl	80001d4 <__adddf3>
 8004952:	9802      	ldr	r0, [sp, #8]
 8004954:	4632      	mov	r2, r6
 8004956:	463b      	mov	r3, r7
 8004958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800495c:	f7fb fc38 	bl	80001d0 <__aeabi_dsub>
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	f7fb fc34 	bl	80001d0 <__aeabi_dsub>
 8004968:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800496c:	e607      	b.n	800457e <__ieee754_pow+0x2ce>
 800496e:	f04f 0a01 	mov.w	sl, #1
 8004972:	e6a5      	b.n	80046c0 <__ieee754_pow+0x410>
 8004974:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80049c8 <__ieee754_pow+0x718>
 8004978:	e613      	b.n	80045a2 <__ieee754_pow+0x2f2>
 800497a:	bf00      	nop
 800497c:	f3af 8000 	nop.w
 8004980:	4a454eef 	.word	0x4a454eef
 8004984:	3fca7e28 	.word	0x3fca7e28
 8004988:	93c9db65 	.word	0x93c9db65
 800498c:	3fcd864a 	.word	0x3fcd864a
 8004990:	a91d4101 	.word	0xa91d4101
 8004994:	3fd17460 	.word	0x3fd17460
 8004998:	518f264d 	.word	0x518f264d
 800499c:	3fd55555 	.word	0x3fd55555
 80049a0:	db6fabff 	.word	0xdb6fabff
 80049a4:	3fdb6db6 	.word	0x3fdb6db6
 80049a8:	33333303 	.word	0x33333303
 80049ac:	3fe33333 	.word	0x3fe33333
 80049b0:	e0000000 	.word	0xe0000000
 80049b4:	3feec709 	.word	0x3feec709
 80049b8:	dc3a03fd 	.word	0xdc3a03fd
 80049bc:	3feec709 	.word	0x3feec709
 80049c0:	145b01f5 	.word	0x145b01f5
 80049c4:	be3e2fe0 	.word	0xbe3e2fe0
 80049c8:	00000000 	.word	0x00000000
 80049cc:	3ff00000 	.word	0x3ff00000
 80049d0:	43400000 	.word	0x43400000
 80049d4:	0003988e 	.word	0x0003988e
 80049d8:	000bb679 	.word	0x000bb679
 80049dc:	08005130 	.word	0x08005130
 80049e0:	3ff00000 	.word	0x3ff00000
 80049e4:	40080000 	.word	0x40080000
 80049e8:	08005150 	.word	0x08005150
 80049ec:	08005140 	.word	0x08005140
 80049f0:	a3b6      	add	r3, pc, #728	; (adr r3, 8004ccc <__ieee754_pow+0xa1c>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	4640      	mov	r0, r8
 80049f8:	4649      	mov	r1, r9
 80049fa:	f7fb fbeb 	bl	80001d4 <__adddf3>
 80049fe:	4622      	mov	r2, r4
 8004a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a04:	462b      	mov	r3, r5
 8004a06:	4630      	mov	r0, r6
 8004a08:	4639      	mov	r1, r7
 8004a0a:	f7fb fbe1 	bl	80001d0 <__aeabi_dsub>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a16:	f7fc f81f 	bl	8000a58 <__aeabi_dcmpgt>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f47f adfe 	bne.w	800461c <__ieee754_pow+0x36c>
 8004a20:	4aa5      	ldr	r2, [pc, #660]	; (8004cb8 <__ieee754_pow+0xa08>)
 8004a22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a26:	4293      	cmp	r3, r2
 8004a28:	f340 810c 	ble.w	8004c44 <__ieee754_pow+0x994>
 8004a2c:	151b      	asrs	r3, r3, #20
 8004a2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004a32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004a36:	fa4a f303 	asr.w	r3, sl, r3
 8004a3a:	445b      	add	r3, fp
 8004a3c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004a40:	4e9e      	ldr	r6, [pc, #632]	; (8004cbc <__ieee754_pow+0xa0c>)
 8004a42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004a46:	4116      	asrs	r6, r2
 8004a48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	ea23 0106 	bic.w	r1, r3, r6
 8004a52:	f1c2 0214 	rsb	r2, r2, #20
 8004a56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004a5a:	fa4a fa02 	asr.w	sl, sl, r2
 8004a5e:	f1bb 0f00 	cmp.w	fp, #0
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	bfb8      	it	lt
 8004a6c:	f1ca 0a00 	rsblt	sl, sl, #0
 8004a70:	f7fb fbae 	bl	80001d0 <__aeabi_dsub>
 8004a74:	e9cd 0100 	strd	r0, r1, [sp]
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a80:	f7fb fba8 	bl	80001d4 <__adddf3>
 8004a84:	2000      	movs	r0, #0
 8004a86:	a37a      	add	r3, pc, #488	; (adr r3, 8004c70 <__ieee754_pow+0x9c0>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	460d      	mov	r5, r1
 8004a90:	f7fb fd52 	bl	8000538 <__aeabi_dmul>
 8004a94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a98:	4606      	mov	r6, r0
 8004a9a:	460f      	mov	r7, r1
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	f7fb fb96 	bl	80001d0 <__aeabi_dsub>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	4649      	mov	r1, r9
 8004aac:	f7fb fb90 	bl	80001d0 <__aeabi_dsub>
 8004ab0:	a371      	add	r3, pc, #452	; (adr r3, 8004c78 <__ieee754_pow+0x9c8>)
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f7fb fd3f 	bl	8000538 <__aeabi_dmul>
 8004aba:	a371      	add	r3, pc, #452	; (adr r3, 8004c80 <__ieee754_pow+0x9d0>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	4680      	mov	r8, r0
 8004ac2:	4689      	mov	r9, r1
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	f7fb fd36 	bl	8000538 <__aeabi_dmul>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f7fb fb7e 	bl	80001d4 <__adddf3>
 8004ad8:	4604      	mov	r4, r0
 8004ada:	460d      	mov	r5, r1
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fb fb76 	bl	80001d4 <__adddf3>
 8004ae8:	4632      	mov	r2, r6
 8004aea:	463b      	mov	r3, r7
 8004aec:	4680      	mov	r8, r0
 8004aee:	4689      	mov	r9, r1
 8004af0:	f7fb fb6e 	bl	80001d0 <__aeabi_dsub>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb fb68 	bl	80001d0 <__aeabi_dsub>
 8004b00:	4642      	mov	r2, r8
 8004b02:	4606      	mov	r6, r0
 8004b04:	460f      	mov	r7, r1
 8004b06:	464b      	mov	r3, r9
 8004b08:	4640      	mov	r0, r8
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	f7fb fd14 	bl	8000538 <__aeabi_dmul>
 8004b10:	a35d      	add	r3, pc, #372	; (adr r3, 8004c88 <__ieee754_pow+0x9d8>)
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	4604      	mov	r4, r0
 8004b18:	460d      	mov	r5, r1
 8004b1a:	f7fb fd0d 	bl	8000538 <__aeabi_dmul>
 8004b1e:	a35c      	add	r3, pc, #368	; (adr r3, 8004c90 <__ieee754_pow+0x9e0>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f7fb fb54 	bl	80001d0 <__aeabi_dsub>
 8004b28:	4622      	mov	r2, r4
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	f7fb fd04 	bl	8000538 <__aeabi_dmul>
 8004b30:	a359      	add	r3, pc, #356	; (adr r3, 8004c98 <__ieee754_pow+0x9e8>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fb4d 	bl	80001d4 <__adddf3>
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	f7fb fcfb 	bl	8000538 <__aeabi_dmul>
 8004b42:	a357      	add	r3, pc, #348	; (adr r3, 8004ca0 <__ieee754_pow+0x9f0>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fb42 	bl	80001d0 <__aeabi_dsub>
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	462b      	mov	r3, r5
 8004b50:	f7fb fcf2 	bl	8000538 <__aeabi_dmul>
 8004b54:	a354      	add	r3, pc, #336	; (adr r3, 8004ca8 <__ieee754_pow+0x9f8>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb fb3b 	bl	80001d4 <__adddf3>
 8004b5e:	4622      	mov	r2, r4
 8004b60:	462b      	mov	r3, r5
 8004b62:	f7fb fce9 	bl	8000538 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	f7fb fb2f 	bl	80001d0 <__aeabi_dsub>
 8004b72:	4604      	mov	r4, r0
 8004b74:	460d      	mov	r5, r1
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	f7fb fcdb 	bl	8000538 <__aeabi_dmul>
 8004b82:	2200      	movs	r2, #0
 8004b84:	e9cd 0100 	strd	r0, r1, [sp]
 8004b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f7fb fb1e 	bl	80001d0 <__aeabi_dsub>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b9c:	f7fb fdf6 	bl	800078c <__aeabi_ddiv>
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460d      	mov	r5, r1
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	4640      	mov	r0, r8
 8004baa:	4649      	mov	r1, r9
 8004bac:	f7fb fcc4 	bl	8000538 <__aeabi_dmul>
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	f7fb fb0e 	bl	80001d4 <__adddf3>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fb fb06 	bl	80001d0 <__aeabi_dsub>
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	f7fb fb02 	bl	80001d0 <__aeabi_dsub>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	493b      	ldr	r1, [pc, #236]	; (8004cc0 <__ieee754_pow+0xa10>)
 8004bd4:	f7fb fafc 	bl	80001d0 <__aeabi_dsub>
 8004bd8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004bdc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	da31      	bge.n	8004c4a <__ieee754_pow+0x99a>
 8004be6:	4650      	mov	r0, sl
 8004be8:	ec43 2b10 	vmov	d0, r2, r3
 8004bec:	f000 f9c4 	bl	8004f78 <scalbn>
 8004bf0:	ec51 0b10 	vmov	r0, r1, d0
 8004bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bf8:	f7ff bbf1 	b.w	80043de <__ieee754_pow+0x12e>
 8004bfc:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <__ieee754_pow+0xa14>)
 8004bfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004c02:	429e      	cmp	r6, r3
 8004c04:	f77f af0c 	ble.w	8004a20 <__ieee754_pow+0x770>
 8004c08:	4b2f      	ldr	r3, [pc, #188]	; (8004cc8 <__ieee754_pow+0xa18>)
 8004c0a:	440b      	add	r3, r1
 8004c0c:	4303      	orrs	r3, r0
 8004c0e:	d00b      	beq.n	8004c28 <__ieee754_pow+0x978>
 8004c10:	a327      	add	r3, pc, #156	; (adr r3, 8004cb0 <__ieee754_pow+0xa00>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c1a:	f7fb fc8d 	bl	8000538 <__aeabi_dmul>
 8004c1e:	a324      	add	r3, pc, #144	; (adr r3, 8004cb0 <__ieee754_pow+0xa00>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f7ff bbdb 	b.w	80043de <__ieee754_pow+0x12e>
 8004c28:	4622      	mov	r2, r4
 8004c2a:	462b      	mov	r3, r5
 8004c2c:	f7fb fad0 	bl	80001d0 <__aeabi_dsub>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4640      	mov	r0, r8
 8004c36:	4649      	mov	r1, r9
 8004c38:	f7fb fefa 	bl	8000a30 <__aeabi_dcmple>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f43f aeef 	beq.w	8004a20 <__ieee754_pow+0x770>
 8004c42:	e7e5      	b.n	8004c10 <__ieee754_pow+0x960>
 8004c44:	f04f 0a00 	mov.w	sl, #0
 8004c48:	e716      	b.n	8004a78 <__ieee754_pow+0x7c8>
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	e7d2      	b.n	8004bf4 <__ieee754_pow+0x944>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	491b      	ldr	r1, [pc, #108]	; (8004cc0 <__ieee754_pow+0xa10>)
 8004c52:	f7ff bb8d 	b.w	8004370 <__ieee754_pow+0xc0>
 8004c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c5a:	f7ff bb89 	b.w	8004370 <__ieee754_pow+0xc0>
 8004c5e:	4630      	mov	r0, r6
 8004c60:	4639      	mov	r1, r7
 8004c62:	f7ff bb85 	b.w	8004370 <__ieee754_pow+0xc0>
 8004c66:	4693      	mov	fp, r2
 8004c68:	f7ff bb96 	b.w	8004398 <__ieee754_pow+0xe8>
 8004c6c:	f3af 8000 	nop.w
 8004c70:	00000000 	.word	0x00000000
 8004c74:	3fe62e43 	.word	0x3fe62e43
 8004c78:	fefa39ef 	.word	0xfefa39ef
 8004c7c:	3fe62e42 	.word	0x3fe62e42
 8004c80:	0ca86c39 	.word	0x0ca86c39
 8004c84:	be205c61 	.word	0xbe205c61
 8004c88:	72bea4d0 	.word	0x72bea4d0
 8004c8c:	3e663769 	.word	0x3e663769
 8004c90:	c5d26bf1 	.word	0xc5d26bf1
 8004c94:	3ebbbd41 	.word	0x3ebbbd41
 8004c98:	af25de2c 	.word	0xaf25de2c
 8004c9c:	3f11566a 	.word	0x3f11566a
 8004ca0:	16bebd93 	.word	0x16bebd93
 8004ca4:	3f66c16c 	.word	0x3f66c16c
 8004ca8:	5555553e 	.word	0x5555553e
 8004cac:	3fc55555 	.word	0x3fc55555
 8004cb0:	c2f8f359 	.word	0xc2f8f359
 8004cb4:	01a56e1f 	.word	0x01a56e1f
 8004cb8:	3fe00000 	.word	0x3fe00000
 8004cbc:	000fffff 	.word	0x000fffff
 8004cc0:	3ff00000 	.word	0x3ff00000
 8004cc4:	4090cbff 	.word	0x4090cbff
 8004cc8:	3f6f3400 	.word	0x3f6f3400
 8004ccc:	652b82fe 	.word	0x652b82fe
 8004cd0:	3c971547 	.word	0x3c971547

08004cd4 <__ieee754_sqrt>:
 8004cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	ec55 4b10 	vmov	r4, r5, d0
 8004cdc:	4e54      	ldr	r6, [pc, #336]	; (8004e30 <__ieee754_sqrt+0x15c>)
 8004cde:	43ae      	bics	r6, r5
 8004ce0:	ee10 0a10 	vmov	r0, s0
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	4621      	mov	r1, r4
 8004cea:	d113      	bne.n	8004d14 <__ieee754_sqrt+0x40>
 8004cec:	ee10 2a10 	vmov	r2, s0
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	ee10 0a10 	vmov	r0, s0
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fb fc1e 	bl	8000538 <__aeabi_dmul>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4620      	mov	r0, r4
 8004d02:	4629      	mov	r1, r5
 8004d04:	f7fb fa66 	bl	80001d4 <__adddf3>
 8004d08:	4604      	mov	r4, r0
 8004d0a:	460d      	mov	r5, r1
 8004d0c:	ec45 4b10 	vmov	d0, r4, r5
 8004d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	dc10      	bgt.n	8004d3a <__ieee754_sqrt+0x66>
 8004d18:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004d1c:	4330      	orrs	r0, r6
 8004d1e:	d0f5      	beq.n	8004d0c <__ieee754_sqrt+0x38>
 8004d20:	b15d      	cbz	r5, 8004d3a <__ieee754_sqrt+0x66>
 8004d22:	ee10 2a10 	vmov	r2, s0
 8004d26:	462b      	mov	r3, r5
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	f7fb fa50 	bl	80001d0 <__aeabi_dsub>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	f7fb fd2a 	bl	800078c <__aeabi_ddiv>
 8004d38:	e7e6      	b.n	8004d08 <__ieee754_sqrt+0x34>
 8004d3a:	151b      	asrs	r3, r3, #20
 8004d3c:	d10c      	bne.n	8004d58 <__ieee754_sqrt+0x84>
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	d06d      	beq.n	8004e1e <__ieee754_sqrt+0x14a>
 8004d42:	2000      	movs	r0, #0
 8004d44:	02d6      	lsls	r6, r2, #11
 8004d46:	d56e      	bpl.n	8004e26 <__ieee754_sqrt+0x152>
 8004d48:	1e44      	subs	r4, r0, #1
 8004d4a:	1b1b      	subs	r3, r3, r4
 8004d4c:	f1c0 0420 	rsb	r4, r0, #32
 8004d50:	fa21 f404 	lsr.w	r4, r1, r4
 8004d54:	4322      	orrs	r2, r4
 8004d56:	4081      	lsls	r1, r0
 8004d58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004d5c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004d60:	07dd      	lsls	r5, r3, #31
 8004d62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d66:	bf42      	ittt	mi
 8004d68:	0052      	lslmi	r2, r2, #1
 8004d6a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8004d6e:	0049      	lslmi	r1, r1, #1
 8004d70:	1058      	asrs	r0, r3, #1
 8004d72:	2500      	movs	r5, #0
 8004d74:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8004d78:	441a      	add	r2, r3
 8004d7a:	0049      	lsls	r1, r1, #1
 8004d7c:	2316      	movs	r3, #22
 8004d7e:	462c      	mov	r4, r5
 8004d80:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004d84:	19a7      	adds	r7, r4, r6
 8004d86:	4297      	cmp	r7, r2
 8004d88:	bfde      	ittt	le
 8004d8a:	1bd2      	suble	r2, r2, r7
 8004d8c:	19bc      	addle	r4, r7, r6
 8004d8e:	19ad      	addle	r5, r5, r6
 8004d90:	0052      	lsls	r2, r2, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004d98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004da0:	d1f0      	bne.n	8004d84 <__ieee754_sqrt+0xb0>
 8004da2:	f04f 0e20 	mov.w	lr, #32
 8004da6:	469c      	mov	ip, r3
 8004da8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004dac:	42a2      	cmp	r2, r4
 8004dae:	eb06 070c 	add.w	r7, r6, ip
 8004db2:	dc02      	bgt.n	8004dba <__ieee754_sqrt+0xe6>
 8004db4:	d112      	bne.n	8004ddc <__ieee754_sqrt+0x108>
 8004db6:	428f      	cmp	r7, r1
 8004db8:	d810      	bhi.n	8004ddc <__ieee754_sqrt+0x108>
 8004dba:	2f00      	cmp	r7, #0
 8004dbc:	eb07 0c06 	add.w	ip, r7, r6
 8004dc0:	da34      	bge.n	8004e2c <__ieee754_sqrt+0x158>
 8004dc2:	f1bc 0f00 	cmp.w	ip, #0
 8004dc6:	db31      	blt.n	8004e2c <__ieee754_sqrt+0x158>
 8004dc8:	f104 0801 	add.w	r8, r4, #1
 8004dcc:	1b12      	subs	r2, r2, r4
 8004dce:	428f      	cmp	r7, r1
 8004dd0:	bf88      	it	hi
 8004dd2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004dd6:	1bc9      	subs	r1, r1, r7
 8004dd8:	4433      	add	r3, r6
 8004dda:	4644      	mov	r4, r8
 8004ddc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8004de0:	f1be 0e01 	subs.w	lr, lr, #1
 8004de4:	443a      	add	r2, r7
 8004de6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004dea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004dee:	d1dd      	bne.n	8004dac <__ieee754_sqrt+0xd8>
 8004df0:	430a      	orrs	r2, r1
 8004df2:	d006      	beq.n	8004e02 <__ieee754_sqrt+0x12e>
 8004df4:	1c5c      	adds	r4, r3, #1
 8004df6:	bf13      	iteet	ne
 8004df8:	3301      	addne	r3, #1
 8004dfa:	3501      	addeq	r5, #1
 8004dfc:	4673      	moveq	r3, lr
 8004dfe:	f023 0301 	bicne.w	r3, r3, #1
 8004e02:	106a      	asrs	r2, r5, #1
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	07e9      	lsls	r1, r5, #31
 8004e08:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004e0c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004e10:	bf48      	it	mi
 8004e12:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004e16:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004e1a:	461c      	mov	r4, r3
 8004e1c:	e776      	b.n	8004d0c <__ieee754_sqrt+0x38>
 8004e1e:	0aca      	lsrs	r2, r1, #11
 8004e20:	3b15      	subs	r3, #21
 8004e22:	0549      	lsls	r1, r1, #21
 8004e24:	e78b      	b.n	8004d3e <__ieee754_sqrt+0x6a>
 8004e26:	0052      	lsls	r2, r2, #1
 8004e28:	3001      	adds	r0, #1
 8004e2a:	e78b      	b.n	8004d44 <__ieee754_sqrt+0x70>
 8004e2c:	46a0      	mov	r8, r4
 8004e2e:	e7cd      	b.n	8004dcc <__ieee754_sqrt+0xf8>
 8004e30:	7ff00000 	.word	0x7ff00000

08004e34 <fabs>:
 8004e34:	ec53 2b10 	vmov	r2, r3, d0
 8004e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e3c:	ec43 2b10 	vmov	d0, r2, r3
 8004e40:	4770      	bx	lr

08004e42 <finite>:
 8004e42:	ee10 3a90 	vmov	r3, s1
 8004e46:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8004e4a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004e4e:	0fc0      	lsrs	r0, r0, #31
 8004e50:	4770      	bx	lr

08004e52 <matherr>:
 8004e52:	2000      	movs	r0, #0
 8004e54:	4770      	bx	lr
	...

08004e58 <nan>:
 8004e58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004e60 <nan+0x8>
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	00000000 	.word	0x00000000
 8004e64:	7ff80000 	.word	0x7ff80000

08004e68 <rint>:
 8004e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e6a:	ec51 0b10 	vmov	r0, r1, d0
 8004e6e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8004e72:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8004e76:	2e13      	cmp	r6, #19
 8004e78:	ee10 7a10 	vmov	r7, s0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4602      	mov	r2, r0
 8004e80:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004e84:	dc58      	bgt.n	8004f38 <rint+0xd0>
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	da2b      	bge.n	8004ee2 <rint+0x7a>
 8004e8a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004e8e:	4302      	orrs	r2, r0
 8004e90:	d023      	beq.n	8004eda <rint+0x72>
 8004e92:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004e96:	4302      	orrs	r2, r0
 8004e98:	4251      	negs	r1, r2
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	0b09      	lsrs	r1, r1, #12
 8004e9e:	0c5b      	lsrs	r3, r3, #17
 8004ea0:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8004ea4:	045b      	lsls	r3, r3, #17
 8004ea6:	ea41 0703 	orr.w	r7, r1, r3
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <rint+0x108>)
 8004eac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004eb6:	ee10 0a10 	vmov	r0, s0
 8004eba:	4632      	mov	r2, r6
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	f7fb f989 	bl	80001d4 <__adddf3>
 8004ec2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	4632      	mov	r2, r6
 8004eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ece:	f7fb f97f 	bl	80001d0 <__aeabi_dsub>
 8004ed2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ed6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8004eda:	ec41 0b10 	vmov	d0, r0, r1
 8004ede:	b003      	add	sp, #12
 8004ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee2:	4c24      	ldr	r4, [pc, #144]	; (8004f74 <rint+0x10c>)
 8004ee4:	4134      	asrs	r4, r6
 8004ee6:	ea01 0704 	and.w	r7, r1, r4
 8004eea:	4307      	orrs	r7, r0
 8004eec:	d0f5      	beq.n	8004eda <rint+0x72>
 8004eee:	0861      	lsrs	r1, r4, #1
 8004ef0:	ea03 0001 	and.w	r0, r3, r1
 8004ef4:	4302      	orrs	r2, r0
 8004ef6:	d00b      	beq.n	8004f10 <rint+0xa8>
 8004ef8:	ea23 0101 	bic.w	r1, r3, r1
 8004efc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f00:	2e13      	cmp	r6, #19
 8004f02:	fa43 f306 	asr.w	r3, r3, r6
 8004f06:	bf0c      	ite	eq
 8004f08:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8004f0c:	2200      	movne	r2, #0
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	4619      	mov	r1, r3
 8004f12:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <rint+0x108>)
 8004f14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004f18:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	462b      	mov	r3, r5
 8004f20:	4622      	mov	r2, r4
 8004f22:	f7fb f957 	bl	80001d4 <__adddf3>
 8004f26:	e9cd 0100 	strd	r0, r1, [sp]
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f32:	f7fb f94d 	bl	80001d0 <__aeabi_dsub>
 8004f36:	e7d0      	b.n	8004eda <rint+0x72>
 8004f38:	2e33      	cmp	r6, #51	; 0x33
 8004f3a:	dd08      	ble.n	8004f4e <rint+0xe6>
 8004f3c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004f40:	d1cb      	bne.n	8004eda <rint+0x72>
 8004f42:	ee10 2a10 	vmov	r2, s0
 8004f46:	460b      	mov	r3, r1
 8004f48:	f7fb f944 	bl	80001d4 <__adddf3>
 8004f4c:	e7c5      	b.n	8004eda <rint+0x72>
 8004f4e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8004f52:	f04f 34ff 	mov.w	r4, #4294967295
 8004f56:	40f4      	lsrs	r4, r6
 8004f58:	4220      	tst	r0, r4
 8004f5a:	d0be      	beq.n	8004eda <rint+0x72>
 8004f5c:	0861      	lsrs	r1, r4, #1
 8004f5e:	420f      	tst	r7, r1
 8004f60:	bf1f      	itttt	ne
 8004f62:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8004f66:	ea27 0101 	bicne.w	r1, r7, r1
 8004f6a:	4132      	asrne	r2, r6
 8004f6c:	430a      	orrne	r2, r1
 8004f6e:	e7cf      	b.n	8004f10 <rint+0xa8>
 8004f70:	08005160 	.word	0x08005160
 8004f74:	000fffff 	.word	0x000fffff

08004f78 <scalbn>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	ec55 4b10 	vmov	r4, r5, d0
 8004f7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004f82:	4606      	mov	r6, r0
 8004f84:	462b      	mov	r3, r5
 8004f86:	b9b2      	cbnz	r2, 8004fb6 <scalbn+0x3e>
 8004f88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004f8c:	4323      	orrs	r3, r4
 8004f8e:	d03c      	beq.n	800500a <scalbn+0x92>
 8004f90:	2200      	movs	r2, #0
 8004f92:	4b33      	ldr	r3, [pc, #204]	; (8005060 <scalbn+0xe8>)
 8004f94:	4629      	mov	r1, r5
 8004f96:	ee10 0a10 	vmov	r0, s0
 8004f9a:	f7fb facd 	bl	8000538 <__aeabi_dmul>
 8004f9e:	4a31      	ldr	r2, [pc, #196]	; (8005064 <scalbn+0xec>)
 8004fa0:	4296      	cmp	r6, r2
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	460d      	mov	r5, r1
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	da13      	bge.n	8004fd2 <scalbn+0x5a>
 8004faa:	a329      	add	r3, pc, #164	; (adr r3, 8005050 <scalbn+0xd8>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb fac2 	bl	8000538 <__aeabi_dmul>
 8004fb4:	e00a      	b.n	8004fcc <scalbn+0x54>
 8004fb6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004fba:	428a      	cmp	r2, r1
 8004fbc:	d10c      	bne.n	8004fd8 <scalbn+0x60>
 8004fbe:	ee10 2a10 	vmov	r2, s0
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	f7fb f904 	bl	80001d4 <__adddf3>
 8004fcc:	4604      	mov	r4, r0
 8004fce:	460d      	mov	r5, r1
 8004fd0:	e01b      	b.n	800500a <scalbn+0x92>
 8004fd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004fd6:	3a36      	subs	r2, #54	; 0x36
 8004fd8:	4432      	add	r2, r6
 8004fda:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004fde:	428a      	cmp	r2, r1
 8004fe0:	dd0b      	ble.n	8004ffa <scalbn+0x82>
 8004fe2:	ec45 4b11 	vmov	d1, r4, r5
 8004fe6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005058 <scalbn+0xe0>
 8004fea:	f000 f83f 	bl	800506c <copysign>
 8004fee:	a31a      	add	r3, pc, #104	; (adr r3, 8005058 <scalbn+0xe0>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	ec51 0b10 	vmov	r0, r1, d0
 8004ff8:	e7da      	b.n	8004fb0 <scalbn+0x38>
 8004ffa:	2a00      	cmp	r2, #0
 8004ffc:	dd08      	ble.n	8005010 <scalbn+0x98>
 8004ffe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005002:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005006:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800500a:	ec45 4b10 	vmov	d0, r4, r5
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005014:	da0d      	bge.n	8005032 <scalbn+0xba>
 8005016:	f24c 3350 	movw	r3, #50000	; 0xc350
 800501a:	429e      	cmp	r6, r3
 800501c:	ec45 4b11 	vmov	d1, r4, r5
 8005020:	dce1      	bgt.n	8004fe6 <scalbn+0x6e>
 8005022:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8005050 <scalbn+0xd8>
 8005026:	f000 f821 	bl	800506c <copysign>
 800502a:	a309      	add	r3, pc, #36	; (adr r3, 8005050 <scalbn+0xd8>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	e7e0      	b.n	8004ff4 <scalbn+0x7c>
 8005032:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005036:	3236      	adds	r2, #54	; 0x36
 8005038:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800503c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005040:	4620      	mov	r0, r4
 8005042:	4629      	mov	r1, r5
 8005044:	2200      	movs	r2, #0
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <scalbn+0xf0>)
 8005048:	e7b2      	b.n	8004fb0 <scalbn+0x38>
 800504a:	bf00      	nop
 800504c:	f3af 8000 	nop.w
 8005050:	c2f8f359 	.word	0xc2f8f359
 8005054:	01a56e1f 	.word	0x01a56e1f
 8005058:	8800759c 	.word	0x8800759c
 800505c:	7e37e43c 	.word	0x7e37e43c
 8005060:	43500000 	.word	0x43500000
 8005064:	ffff3cb0 	.word	0xffff3cb0
 8005068:	3c900000 	.word	0x3c900000

0800506c <copysign>:
 800506c:	ec53 2b10 	vmov	r2, r3, d0
 8005070:	ee11 0a90 	vmov	r0, s3
 8005074:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005078:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800507c:	ea41 0300 	orr.w	r3, r1, r0
 8005080:	ec43 2b10 	vmov	d0, r2, r3
 8005084:	4770      	bx	lr
	...

08005088 <__errno>:
 8005088:	4b01      	ldr	r3, [pc, #4]	; (8005090 <__errno+0x8>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	2000001c 	.word	0x2000001c

08005094 <_sbrk>:
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <_sbrk+0x14>)
 8005096:	6819      	ldr	r1, [r3, #0]
 8005098:	4602      	mov	r2, r0
 800509a:	b909      	cbnz	r1, 80050a0 <_sbrk+0xc>
 800509c:	4903      	ldr	r1, [pc, #12]	; (80050ac <_sbrk+0x18>)
 800509e:	6019      	str	r1, [r3, #0]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	4402      	add	r2, r0
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	4770      	bx	lr
 80050a8:	200000e8 	.word	0x200000e8
 80050ac:	20000200 	.word	0x20000200

080050b0 <_init>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr

080050bc <_fini>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr
