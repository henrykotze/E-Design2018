
C:\Users\19231865\Desktop\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  08005418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
  8 .bss          00000244  20000098  20000098  00020098  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200002dc  200002dc  00020098  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d013  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000032a7  00000000  00000000  0003d0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b923  00000000  00000000  00040382  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  0004bca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0004c858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008bea  00000000  00000000  0004da50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ab453  00000000  00000000  0005663a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00101a8d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002de8  00000000  00000000  00101b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0001c704  00000000  00000000  001048f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005340 	.word	0x08005340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08005340 	.word	0x08005340

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b99e 	b.w	8000ee4 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f82a 	bl	8000c08 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2ulz>:
 8000bc0:	b5d0      	push	{r4, r6, r7, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <__aeabi_d2ulz+0x40>)
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fd11 	bl	80005f0 <__aeabi_dmul>
 8000bce:	f7ff ffbf 	bl	8000b50 <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc96 	bl	8000504 <__aeabi_ui2d>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <__aeabi_d2ulz+0x44>)
 8000bdc:	f7ff fd08 	bl	80005f0 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff fb4e 	bl	8000288 <__aeabi_dsub>
 8000bec:	f7ff ffb0 	bl	8000b50 <__aeabi_d2uiz>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	ea42 0200 	orr.w	r2, r2, r0
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	9e08      	ldr	r6, [sp, #32]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d151      	bne.n	8000cbc <__udivmoddi4+0xb4>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d96d      	bls.n	8000cfa <__udivmoddi4+0xf2>
 8000c1e:	fab2 fe82 	clz	lr, r2
 8000c22:	f1be 0f00 	cmp.w	lr, #0
 8000c26:	d00b      	beq.n	8000c40 <__udivmoddi4+0x38>
 8000c28:	f1ce 0c20 	rsb	ip, lr, #32
 8000c2c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c34:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c38:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c3c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c40:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c44:	0c25      	lsrs	r5, r4, #16
 8000c46:	fbbc f8fa 	udiv	r8, ip, sl
 8000c4a:	fa1f f987 	uxth.w	r9, r7
 8000c4e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c52:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c56:	fb08 f309 	mul.w	r3, r8, r9
 8000c5a:	42ab      	cmp	r3, r5
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x6c>
 8000c5e:	19ed      	adds	r5, r5, r7
 8000c60:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c64:	f080 8123 	bcs.w	8000eae <__udivmoddi4+0x2a6>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f240 8120 	bls.w	8000eae <__udivmoddi4+0x2a6>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	443d      	add	r5, r7
 8000c74:	1aed      	subs	r5, r5, r3
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c7c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb00 f909 	mul.w	r9, r0, r9
 8000c88:	45a1      	cmp	r9, r4
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x98>
 8000c8c:	19e4      	adds	r4, r4, r7
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	f080 810a 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8107 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	443c      	add	r4, r7
 8000ca0:	eba4 0409 	sub.w	r4, r4, r9
 8000ca4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d061      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cae:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	6034      	str	r4, [r6, #0]
 8000cb6:	6073      	str	r3, [r6, #4]
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xc8>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d054      	beq.n	8000d6e <__udivmoddi4+0x166>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	f040 808e 	bne.w	8000df6 <__udivmoddi4+0x1ee>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xdc>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80fa 	bhi.w	8000ed8 <__udivmoddi4+0x2d0>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb65 0503 	sbc.w	r5, r5, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	46ac      	mov	ip, r5
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d03f      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cf2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	b912      	cbnz	r2, 8000d02 <__udivmoddi4+0xfa>
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d02:	fab7 fe87 	clz	lr, r7
 8000d06:	f1be 0f00 	cmp.w	lr, #0
 8000d0a:	d134      	bne.n	8000d76 <__udivmoddi4+0x16e>
 8000d0c:	1beb      	subs	r3, r5, r7
 8000d0e:	0c3a      	lsrs	r2, r7, #16
 8000d10:	fa1f fc87 	uxth.w	ip, r7
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d1a:	0c25      	lsrs	r5, r4, #16
 8000d1c:	fb02 3318 	mls	r3, r2, r8, r3
 8000d20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d24:	fb0c f308 	mul.w	r3, ip, r8
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x134>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x132>
 8000d34:	42ab      	cmp	r3, r5
 8000d36:	f200 80d1 	bhi.w	8000edc <__udivmoddi4+0x2d4>
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d44:	fb02 5510 	mls	r5, r2, r0, r5
 8000d48:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d4c:	fb0c fc00 	mul.w	ip, ip, r0
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x15c>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x15a>
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	f200 80b8 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 040c 	sub.w	r4, r4, ip
 8000d68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6c:	e79d      	b.n	8000caa <__udivmoddi4+0xa2>
 8000d6e:	4631      	mov	r1, r6
 8000d70:	4630      	mov	r0, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1ce 0420 	rsb	r4, lr, #32
 8000d7a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d82:	fa20 f804 	lsr.w	r8, r0, r4
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa25 f404 	lsr.w	r4, r5, r4
 8000d8c:	ea48 0803 	orr.w	r8, r8, r3
 8000d90:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d94:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d98:	fb02 4411 	mls	r4, r2, r1, r4
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000da4:	fb01 f30c 	mul.w	r3, r1, ip
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1bc>
 8000db0:	19ed      	adds	r5, r5, r7
 8000db2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db6:	f080 808a 	bcs.w	8000ece <__udivmoddi4+0x2c6>
 8000dba:	42ab      	cmp	r3, r5
 8000dbc:	f240 8087 	bls.w	8000ece <__udivmoddi4+0x2c6>
 8000dc0:	3902      	subs	r1, #2
 8000dc2:	443d      	add	r5, r7
 8000dc4:	1aeb      	subs	r3, r5, r3
 8000dc6:	fa1f f588 	uxth.w	r5, r8
 8000dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dce:	fb02 3310 	mls	r3, r2, r0, r3
 8000dd2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dd6:	fb00 f30c 	mul.w	r3, r0, ip
 8000dda:	42ab      	cmp	r3, r5
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1e6>
 8000dde:	19ed      	adds	r5, r5, r7
 8000de0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de4:	d26f      	bcs.n	8000ec6 <__udivmoddi4+0x2be>
 8000de6:	42ab      	cmp	r3, r5
 8000de8:	d96d      	bls.n	8000ec6 <__udivmoddi4+0x2be>
 8000dea:	3802      	subs	r0, #2
 8000dec:	443d      	add	r5, r7
 8000dee:	1aeb      	subs	r3, r5, r3
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	e78f      	b.n	8000d16 <__udivmoddi4+0x10e>
 8000df6:	f1c1 0720 	rsb	r7, r1, #32
 8000dfa:	fa22 f807 	lsr.w	r8, r2, r7
 8000dfe:	408b      	lsls	r3, r1
 8000e00:	fa05 f401 	lsl.w	r4, r5, r1
 8000e04:	ea48 0303 	orr.w	r3, r8, r3
 8000e08:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e16:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e1a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e1e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e22:	fa1f f883 	uxth.w	r8, r3
 8000e26:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e2a:	fb09 f408 	mul.w	r4, r9, r8
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	fa02 f201 	lsl.w	r2, r2, r1
 8000e34:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x244>
 8000e3a:	18ed      	adds	r5, r5, r3
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d243      	bcs.n	8000eca <__udivmoddi4+0x2c2>
 8000e42:	42ac      	cmp	r4, r5
 8000e44:	d941      	bls.n	8000eca <__udivmoddi4+0x2c2>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	441d      	add	r5, r3
 8000e4c:	1b2d      	subs	r5, r5, r4
 8000e4e:	fa1f fe8e 	uxth.w	lr, lr
 8000e52:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e56:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e5a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45a0      	cmp	r8, r4
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x26e>
 8000e66:	18e4      	adds	r4, r4, r3
 8000e68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e6c:	d229      	bcs.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e6e:	45a0      	cmp	r8, r4
 8000e70:	d927      	bls.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e72:	3802      	subs	r0, #2
 8000e74:	441c      	add	r4, r3
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba4 0408 	sub.w	r4, r4, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454c      	cmp	r4, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	464d      	mov	r5, r9
 8000e88:	d315      	bcc.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e8a:	d012      	beq.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e8c:	b156      	cbz	r6, 8000ea4 <__udivmoddi4+0x29c>
 8000e8e:	ebba 030e 	subs.w	r3, sl, lr
 8000e92:	eb64 0405 	sbc.w	r4, r4, r5
 8000e96:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9a:	40cb      	lsrs	r3, r1
 8000e9c:	431f      	orrs	r7, r3
 8000e9e:	40cc      	lsrs	r4, r1
 8000ea0:	6037      	str	r7, [r6, #0]
 8000ea2:	6074      	str	r4, [r6, #4]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e6f8      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000eae:	4690      	mov	r8, r2
 8000eb0:	e6e0      	b.n	8000c74 <__udivmoddi4+0x6c>
 8000eb2:	45c2      	cmp	sl, r8
 8000eb4:	d2ea      	bcs.n	8000e8c <__udivmoddi4+0x284>
 8000eb6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eba:	eb69 0503 	sbc.w	r5, r9, r3
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7e4      	b.n	8000e8c <__udivmoddi4+0x284>
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	e7d7      	b.n	8000e76 <__udivmoddi4+0x26e>
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	e791      	b.n	8000dee <__udivmoddi4+0x1e6>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e7be      	b.n	8000e4c <__udivmoddi4+0x244>
 8000ece:	4601      	mov	r1, r0
 8000ed0:	e778      	b.n	8000dc4 <__udivmoddi4+0x1bc>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	e745      	b.n	8000d64 <__udivmoddi4+0x15c>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xe6>
 8000edc:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee0:	443d      	add	r5, r7
 8000ee2:	e72b      	b.n	8000d3c <__udivmoddi4+0x134>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_InitTick+0x24>)
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_InitTick+0x28>)
 8000eec:	681b      	ldr	r3, [r3, #0]
{
 8000eee:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
{
 8000ef4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000ef6:	0998      	lsrs	r0, r3, #6
 8000ef8:	f000 fc96 	bl	8001828 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000efc:	4621      	mov	r1, r4
 8000efe:	2200      	movs	r2, #0
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fc4e 	bl	80017a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	10624dd3 	.word	0x10624dd3

08000f14 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x20>)
{
 8000f16:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fc2d 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_InitTick>
  HAL_MspInit();
 8000f2c:	f003 fb02 	bl	8004534 <HAL_MspInit>
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	bd08      	pop	{r3, pc}
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_IncTick+0xc>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000144 	.word	0x20000144

08000f48 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000144 	.word	0x20000144

08000f54 <HAL_ADC_ConvHalfCpltCallback>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f5c:	6802      	ldr	r2, [r0, #0]
{
 8000f5e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f60:	6893      	ldr	r3, [r2, #8]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d002      	beq.n	8000f70 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f70:	6811      	ldr	r1, [r2, #0]
 8000f72:	07c9      	lsls	r1, r1, #31
 8000f74:	d5f9      	bpl.n	8000f6a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f76:	6891      	ldr	r1, [r2, #8]
 8000f78:	f001 010d 	and.w	r1, r1, #13
 8000f7c:	2901      	cmp	r1, #1
 8000f7e:	d009      	beq.n	8000f94 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000f82:	f042 0210 	orr.w	r2, r2, #16
 8000f86:	6442      	str	r2, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f88:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	6482      	str	r2, [r0, #72]	; 0x48
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8000f94:	6893      	ldr	r3, [r2, #8]
 8000f96:	2103      	movs	r1, #3
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6093      	str	r3, [r2, #8]
 8000f9e:	6011      	str	r1, [r2, #0]
 8000fa0:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000fa2:	f7ff ffd1 	bl	8000f48 <HAL_GetTick>
 8000fa6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	07db      	lsls	r3, r3, #31
 8000fae:	d5dc      	bpl.n	8000f6a <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fb0:	f7ff ffca 	bl	8000f48 <HAL_GetTick>
 8000fb4:	1b40      	subs	r0, r0, r5
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9f6      	bls.n	8000fa8 <ADC_Disable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e7ce      	b.n	8000f6c <ADC_Disable+0x10>
 8000fce:	bf00      	nop

08000fd0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd0:	6802      	ldr	r2, [r0, #0]
{
 8000fd2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd4:	6893      	ldr	r3, [r2, #8]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d00d      	beq.n	8000ffa <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fde:	6891      	ldr	r1, [r2, #8]
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <ADC_Enable+0x70>)
 8000fe2:	4219      	tst	r1, r3
 8000fe4:	d00e      	beq.n	8001004 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fee:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	07d9      	lsls	r1, r3, #31
 8000ffe:	d5ee      	bpl.n	8000fde <ADC_Enable+0xe>
  return HAL_OK;
 8001000:	2000      	movs	r0, #0
 8001002:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001004:	6893      	ldr	r3, [r2, #8]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6093      	str	r3, [r2, #8]
 800100c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();  
 800100e:	f7ff ff9b 	bl	8000f48 <HAL_GetTick>
 8001012:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001014:	e004      	b.n	8001020 <ADC_Enable+0x50>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001016:	f7ff ff97 	bl	8000f48 <HAL_GetTick>
 800101a:	1b40      	subs	r0, r0, r5
 800101c:	2802      	cmp	r0, #2
 800101e:	d804      	bhi.n	800102a <ADC_Enable+0x5a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	07db      	lsls	r3, r3, #31
 8001026:	d5f6      	bpl.n	8001016 <ADC_Enable+0x46>
 8001028:	e7ea      	b.n	8001000 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
 800103c:	bd38      	pop	{r3, r4, r5, pc}
 800103e:	bf00      	nop
 8001040:	8000003f 	.word	0x8000003f

08001044 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001044:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001046:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800104e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8001056:	f7ff bf7f 	b.w	8000f58 <HAL_ADC_ErrorCallback>
 800105a:	bf00      	nop

0800105c <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800105c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800105e:	f7ff bf79 	b.w	8000f54 <HAL_ADC_ConvHalfCpltCallback>
 8001062:	bf00      	nop

08001064 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001064:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001068:	f012 0f50 	tst.w	r2, #80	; 0x50
 800106c:	d118      	bne.n	80010a0 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800106e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001070:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001078:	68ca      	ldr	r2, [r1, #12]
 800107a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800107e:	d10c      	bne.n	800109a <ADC_DMAConvCplt+0x36>
 8001080:	69da      	ldr	r2, [r3, #28]
 8001082:	b952      	cbnz	r2, 800109a <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108a:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800108e:	04d2      	lsls	r2, r2, #19
 8001090:	d403      	bmi.n	800109a <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 800109a:	4618      	mov	r0, r3
 800109c:	f002 bd4c 	b.w	8003b38 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	4718      	bx	r3
 80010a6:	bf00      	nop

080010a8 <HAL_ADC_Init>:
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80010b0:	2800      	cmp	r0, #0
 80010b2:	f000 809d 	beq.w	80011f0 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010b8:	f013 0310 	ands.w	r3, r3, #16
 80010bc:	4604      	mov	r4, r0
 80010be:	d117      	bne.n	80010f0 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010c0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80010c2:	2d00      	cmp	r5, #0
 80010c4:	f000 8087 	beq.w	80011d6 <HAL_ADC_Init+0x12e>
 80010c8:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010ca:	6891      	ldr	r1, [r2, #8]
 80010cc:	00c9      	lsls	r1, r1, #3
 80010ce:	d576      	bpl.n	80011be <HAL_ADC_Init+0x116>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010d0:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010d2:	008f      	lsls	r7, r1, #2
 80010d4:	d473      	bmi.n	80011be <HAL_ADC_Init+0x116>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80010d8:	06ce      	lsls	r6, r1, #27
 80010da:	d400      	bmi.n	80010de <HAL_ADC_Init+0x36>
 80010dc:	b163      	cbz	r3, 80010f8 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 80010de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010e0:	f023 0312 	bic.w	r3, r3, #18
 80010e4:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 80010e8:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	6463      	str	r3, [r4, #68]	; 0x44
}
 80010ec:	b017      	add	sp, #92	; 0x5c
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010f2:	06db      	lsls	r3, r3, #27
 80010f4:	d4f3      	bmi.n	80010de <HAL_ADC_Init+0x36>
 80010f6:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010f8:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80010fa:	f010 0004 	ands.w	r0, r0, #4
 80010fe:	d1ee      	bne.n	80010de <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001102:	f421 7181 	bic.w	r1, r1, #258	; 0x102
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001106:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800110a:	f041 0102 	orr.w	r1, r1, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800110e:	bf08      	it	eq
 8001110:	4b65      	ldreq	r3, [pc, #404]	; (80012a8 <HAL_ADC_Init+0x200>)
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001114:	bf18      	it	ne
 8001116:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 800111a:	9301      	str	r3, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800111c:	6893      	ldr	r3, [r2, #8]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b01      	cmp	r3, #1
 8001124:	f000 809c 	beq.w	8001260 <HAL_ADC_Init+0x1b8>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001128:	9901      	ldr	r1, [sp, #4]
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800112a:	688b      	ldr	r3, [r1, #8]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d060      	beq.n	80011f6 <HAL_ADC_Init+0x14e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001134:	495d      	ldr	r1, [pc, #372]	; (80012ac <HAL_ADC_Init+0x204>)
 8001136:	6865      	ldr	r5, [r4, #4]
 8001138:	688b      	ldr	r3, [r1, #8]
 800113a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800113e:	432b      	orrs	r3, r5
 8001140:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001142:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8001144:	68e1      	ldr	r1, [r4, #12]
 8001146:	68a3      	ldr	r3, [r4, #8]
 8001148:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800114a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800114c:	2f01      	cmp	r7, #1
 800114e:	ea43 0301 	orr.w	r3, r3, r1
 8001152:	bf18      	it	ne
 8001154:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8001158:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800115c:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800115e:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001162:	f000 8086 	beq.w	8001272 <HAL_ADC_Init+0x1ca>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d002      	beq.n	8001172 <HAL_ADC_Init+0xca>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800116c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800116e:	430b      	orrs	r3, r1
 8001170:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001172:	6893      	ldr	r3, [r2, #8]
 8001174:	f013 0f0c 	tst.w	r3, #12
 8001178:	d10b      	bne.n	8001192 <HAL_ADC_Init+0xea>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800117a:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800117c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800117e:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001180:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001184:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001186:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800118a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800118e:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001190:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 8001192:	68d5      	ldr	r5, [r2, #12]
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <HAL_ADC_Init+0x208>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001196:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001198:	402b      	ands	r3, r5
 800119a:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800119c:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800119e:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011a0:	d06f      	beq.n	8001282 <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80011aa:	2000      	movs	r0, #0
 80011ac:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011b0:	f023 0303 	bic.w	r3, r3, #3
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6463      	str	r3, [r4, #68]	; 0x44
}
 80011ba:	b017      	add	sp, #92	; 0x5c
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80011be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c0:	f023 0312 	bic.w	r3, r3, #18
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011d4:	e783      	b.n	80010de <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 80011d6:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80011d8:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80011da:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80011dc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80011e0:	f003 f9e6 	bl	80045b0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	6893      	ldr	r3, [r2, #8]
 80011e8:	00de      	lsls	r6, r3, #3
 80011ea:	d508      	bpl.n	80011fe <HAL_ADC_Init+0x156>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	462b      	mov	r3, r5
 80011ee:	e76c      	b.n	80010ca <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
}
 80011f2:	b017      	add	sp, #92	; 0x5c
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011f6:	680b      	ldr	r3, [r1, #0]
 80011f8:	07d9      	lsls	r1, r3, #31
 80011fa:	d4a2      	bmi.n	8001142 <HAL_ADC_Init+0x9a>
 80011fc:	e79a      	b.n	8001134 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff feac 	bl	8000f5c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001204:	6c62      	ldr	r2, [r4, #68]	; 0x44
        tmp_hal_status = ADC_Disable(hadc);
 8001206:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001208:	06d0      	lsls	r0, r2, #27
 800120a:	f53f af5d 	bmi.w	80010c8 <HAL_ADC_Init+0x20>
 800120e:	2b00      	cmp	r3, #0
 8001210:	f47f af5a 	bne.w	80010c8 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8001214:	6c60      	ldr	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001216:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001218:	4926      	ldr	r1, [pc, #152]	; (80012b4 <HAL_ADC_Init+0x20c>)
 800121a:	4d27      	ldr	r5, [pc, #156]	; (80012b8 <HAL_ADC_Init+0x210>)
 800121c:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 800121e:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8001222:	f020 0002 	bic.w	r0, r0, #2
 8001226:	f040 0002 	orr.w	r0, r0, #2
 800122a:	6460      	str	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800122c:	6890      	ldr	r0, [r2, #8]
 800122e:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8001232:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001234:	fba5 0101 	umull	r0, r1, r5, r1
 8001238:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800123a:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800123c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001240:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001242:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001246:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001248:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 800124a:	9900      	ldr	r1, [sp, #0]
 800124c:	2900      	cmp	r1, #0
 800124e:	f43f af3c 	beq.w	80010ca <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8001252:	9900      	ldr	r1, [sp, #0]
 8001254:	3901      	subs	r1, #1
 8001256:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 8001258:	9900      	ldr	r1, [sp, #0]
 800125a:	2900      	cmp	r1, #0
 800125c:	d1f9      	bne.n	8001252 <HAL_ADC_Init+0x1aa>
 800125e:	e734      	b.n	80010ca <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	07dd      	lsls	r5, r3, #31
 8001264:	f53f af6d 	bmi.w	8001142 <HAL_ADC_Init+0x9a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001268:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800126a:	2900      	cmp	r1, #0
 800126c:	f43f af62 	beq.w	8001134 <HAL_ADC_Init+0x8c>
 8001270:	e75b      	b.n	800112a <HAL_ADC_Init+0x82>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001272:	b976      	cbnz	r6, 8001292 <HAL_ADC_Init+0x1ea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001276:	3b01      	subs	r3, #1
 8001278:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 800127c:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 8001280:	e771      	b.n	8001166 <HAL_ADC_Init+0xbe>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001282:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001284:	6a23      	ldr	r3, [r4, #32]
 8001286:	f021 010f 	bic.w	r1, r1, #15
 800128a:	3b01      	subs	r3, #1
 800128c:	430b      	orrs	r3, r1
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	e78b      	b.n	80011aa <HAL_ADC_Init+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 8001292:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001294:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80012a6:	e75e      	b.n	8001166 <HAL_ADC_Init+0xbe>
 80012a8:	50000100 	.word	0x50000100
 80012ac:	50000300 	.word	0x50000300
 80012b0:	fff0c007 	.word	0xfff0c007
 80012b4:	20000000 	.word	0x20000000
 80012b8:	431bde83 	.word	0x431bde83

080012bc <HAL_ADC_Start_DMA>:
{
 80012bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c0:	6803      	ldr	r3, [r0, #0]
 80012c2:	689c      	ldr	r4, [r3, #8]
 80012c4:	f014 0404 	ands.w	r4, r4, #4
 80012c8:	d003      	beq.n	80012d2 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 80012ca:	2402      	movs	r4, #2
}
 80012cc:	4620      	mov	r0, r4
 80012ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hadc);
 80012d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	4605      	mov	r5, r0
 80012da:	d0f6      	beq.n	80012ca <HAL_ADC_Start_DMA+0xe>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012dc:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80013c4 <HAL_ADC_Start_DMA+0x108>
 80012e0:	f8d9 6008 	ldr.w	r6, [r9, #8]
    __HAL_LOCK(hadc);
 80012e4:	2701      	movs	r7, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012e6:	f016 061f 	ands.w	r6, r6, #31
    __HAL_LOCK(hadc);
 80012ea:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012ee:	d005      	beq.n	80012fc <HAL_ADC_Start_DMA+0x40>
      __HAL_UNLOCK(hadc);
 80012f0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 80012f4:	463c      	mov	r4, r7
}
 80012f6:	4620      	mov	r0, r4
 80012f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012fc:	4690      	mov	r8, r2
 80012fe:	460f      	mov	r7, r1
      tmp_hal_status = ADC_Enable(hadc);
 8001300:	f7ff fe66 	bl	8000fd0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001304:	4604      	mov	r4, r0
 8001306:	2800      	cmp	r0, #0
 8001308:	d13d      	bne.n	8001386 <HAL_ADC_Start_DMA+0xca>
        ADC_STATE_CLR_SET(hadc->State,
 800130a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800130c:	6829      	ldr	r1, [r5, #0]
 800130e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001312:	f023 0301 	bic.w	r3, r3, #1
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	646b      	str	r3, [r5, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800131c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001320:	06d8      	lsls	r0, r3, #27
 8001322:	d033      	beq.n	800138c <HAL_ADC_Start_DMA+0xd0>
 8001324:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8001328:	d030      	beq.n	800138c <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800132a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <HAL_ADC_Start_DMA+0xf8>)
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800132e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001332:	4291      	cmp	r1, r2
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001334:	646b      	str	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001336:	d037      	beq.n	80013a8 <HAL_ADC_Start_DMA+0xec>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001338:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800133a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_ADC_Start_DMA+0xfc>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001342:	bf1c      	itt	ne
 8001344:	6cab      	ldrne	r3, [r5, #72]	; 0x48
 8001346:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800134a:	64ab      	str	r3, [r5, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 800134c:	2600      	movs	r6, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_ADC_Start_DMA+0x100>)
        __HAL_UNLOCK(hadc);
 8001350:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001354:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001356:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_ADC_Start_DMA+0x104>)
 800135a:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800135c:	231c      	movs	r3, #28
 800135e:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001360:	684b      	ldr	r3, [r1, #4]
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001368:	68ce      	ldr	r6, [r1, #12]
 800136a:	f046 0601 	orr.w	r6, r6, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800136e:	4643      	mov	r3, r8
 8001370:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001372:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001374:	3140      	adds	r1, #64	; 0x40
 8001376:	f000 fabb 	bl	80018f0 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800137a:	682a      	ldr	r2, [r5, #0]
 800137c:	6893      	ldr	r3, [r2, #8]
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6093      	str	r3, [r2, #8]
 8001384:	e7a2      	b.n	80012cc <HAL_ADC_Start_DMA+0x10>
        __HAL_UNLOCK(hadc);
 8001386:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
 800138a:	e79f      	b.n	80012cc <HAL_ADC_Start_DMA+0x10>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800138c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800138e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001392:	646b      	str	r3, [r5, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001394:	68cb      	ldr	r3, [r1, #12]
 8001396:	019a      	lsls	r2, r3, #6
 8001398:	d5ce      	bpl.n	8001338 <HAL_ADC_Start_DMA+0x7c>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800139a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800139c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a4:	646b      	str	r3, [r5, #68]	; 0x44
 80013a6:	e7c7      	b.n	8001338 <HAL_ADC_Start_DMA+0x7c>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	019b      	lsls	r3, r3, #6
 80013b0:	d5c2      	bpl.n	8001338 <HAL_ADC_Start_DMA+0x7c>
 80013b2:	e7f2      	b.n	800139a <HAL_ADC_Start_DMA+0xde>
 80013b4:	50000100 	.word	0x50000100
 80013b8:	08001065 	.word	0x08001065
 80013bc:	0800105d 	.word	0x0800105d
 80013c0:	08001045 	.word	0x08001045
 80013c4:	50000300 	.word	0x50000300

080013c8 <HAL_ADCEx_Calibration_Start>:
{
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80013ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d102      	bne.n	80013d8 <HAL_ADCEx_Calibration_Start+0x10>
 80013d2:	2502      	movs	r5, #2
}
 80013d4:	4628      	mov	r0, r5
 80013d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 80013d8:	2701      	movs	r7, #1
 80013da:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
 80013de:	4604      	mov	r4, r0
 80013e0:	460e      	mov	r6, r1
  tmp_hal_status = ADC_Disable(hadc);
 80013e2:	f7ff fdbb 	bl	8000f5c <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80013e6:	4605      	mov	r5, r0
 80013e8:	b9f0      	cbnz	r0, 8001428 <HAL_ADCEx_Calibration_Start+0x60>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80013ea:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80013ec:	6467      	str	r7, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80013ee:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013f0:	42be      	cmp	r6, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80013f2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80013f6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013f8:	d026      	beq.n	8001448 <HAL_ADCEx_Calibration_Start+0x80>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001400:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001402:	f7ff fda1 	bl	8000f48 <HAL_GetTick>
 8001406:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001408:	e004      	b.n	8001414 <HAL_ADCEx_Calibration_Start+0x4c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800140a:	f7ff fd9d 	bl	8000f48 <HAL_GetTick>
 800140e:	1b80      	subs	r0, r0, r6
 8001410:	280a      	cmp	r0, #10
 8001412:	d80e      	bhi.n	8001432 <HAL_ADCEx_Calibration_Start+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dbf6      	blt.n	800140a <HAL_ADCEx_Calibration_Start+0x42>
    ADC_STATE_CLR_SET(hadc->State,
 800141c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8001428:	2300      	movs	r3, #0
 800142a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800142e:	4628      	mov	r0, r5
 8001430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8001432:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001434:	f023 0312 	bic.w	r3, r3, #18
 8001438:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 800143c:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800143e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001440:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001444:	2501      	movs	r5, #1
 8001446:	e7c5      	b.n	80013d4 <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e7d3      	b.n	80013fa <HAL_ADCEx_Calibration_Start+0x32>
 8001452:	bf00      	nop

08001454 <HAL_ADC_ConfigChannel>:
{
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	4603      	mov	r3, r0
 8001458:	b097      	sub	sp, #92	; 0x5c
  __HAL_LOCK(hadc);
 800145a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 800145e:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001460:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8001462:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hadc);
 8001464:	d047      	beq.n	80014f6 <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001466:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001468:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800146a:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 800146c:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800146e:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8001470:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001474:	d508      	bpl.n	8001488 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001478:	f042 0220 	orr.w	r2, r2, #32
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001484:	b017      	add	sp, #92	; 0x5c
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 8001488:	6848      	ldr	r0, [r1, #4]
 800148a:	2804      	cmp	r0, #4
 800148c:	d936      	bls.n	80014fc <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 800148e:	2809      	cmp	r0, #9
 8001490:	d871      	bhi.n	8001576 <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->SQR2,
 8001492:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001496:	0040      	lsls	r0, r0, #1
 8001498:	381e      	subs	r0, #30
 800149a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800149c:	680d      	ldr	r5, [r1, #0]
 800149e:	271f      	movs	r7, #31
 80014a0:	4087      	lsls	r7, r0
 80014a2:	ea26 0607 	bic.w	r6, r6, r7
 80014a6:	fa05 f000 	lsl.w	r0, r5, r0
 80014aa:	4330      	orrs	r0, r6
 80014ac:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014ae:	6890      	ldr	r0, [r2, #8]
 80014b0:	f010 0f0c 	tst.w	r0, #12
 80014b4:	d133      	bne.n	800151e <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014b6:	2d09      	cmp	r5, #9
 80014b8:	d94f      	bls.n	800155a <HAL_ADC_ConfigChannel+0x106>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014ba:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80014be:	3f1e      	subs	r7, #30
 80014c0:	6990      	ldr	r0, [r2, #24]
 80014c2:	688e      	ldr	r6, [r1, #8]
 80014c4:	f04f 0e07 	mov.w	lr, #7
 80014c8:	fa0e fe07 	lsl.w	lr, lr, r7
 80014cc:	ea20 000e 	bic.w	r0, r0, lr
 80014d0:	40be      	lsls	r6, r7
 80014d2:	4330      	orrs	r0, r6
 80014d4:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014d6:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 80014d8:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014da:	694f      	ldr	r7, [r1, #20]
 80014dc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80014e0:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 80014e2:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014e4:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80014e8:	2e03      	cmp	r6, #3
 80014ea:	f200 80cf 	bhi.w	800168c <HAL_ADC_ConfigChannel+0x238>
 80014ee:	e8df f006 	tbb	[pc, r6]
 80014f2:	747e      	.short	0x747e
 80014f4:	606a      	.short	0x606a
  __HAL_LOCK(hadc);
 80014f6:	2002      	movs	r0, #2
}
 80014f8:	b017      	add	sp, #92	; 0x5c
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 80014fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001500:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001502:	680d      	ldr	r5, [r1, #0]
 8001504:	0040      	lsls	r0, r0, #1
 8001506:	271f      	movs	r7, #31
 8001508:	4087      	lsls	r7, r0
 800150a:	ea26 0607 	bic.w	r6, r6, r7
 800150e:	fa05 f000 	lsl.w	r0, r5, r0
 8001512:	4330      	orrs	r0, r6
 8001514:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001516:	6890      	ldr	r0, [r2, #8]
 8001518:	f010 0f0c 	tst.w	r0, #12
 800151c:	d0cb      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800151e:	6890      	ldr	r0, [r2, #8]
 8001520:	f000 0003 	and.w	r0, r0, #3
 8001524:	2801      	cmp	r0, #1
 8001526:	d014      	beq.n	8001552 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001528:	2c01      	cmp	r4, #1
 800152a:	f000 8093 	beq.w	8001654 <HAL_ADC_ConfigChannel+0x200>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800152e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001532:	2001      	movs	r0, #1
 8001534:	40a8      	lsls	r0, r5
 8001536:	ea21 0100 	bic.w	r1, r1, r0
 800153a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800153e:	2d10      	cmp	r5, #16
 8001540:	f000 8083 	beq.w	800164a <HAL_ADC_ConfigChannel+0x1f6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001544:	2d11      	cmp	r5, #17
 8001546:	f000 809c 	beq.w	8001682 <HAL_ADC_ConfigChannel+0x22e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800154a:	2d12      	cmp	r5, #18
 800154c:	d059      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001550:	e795      	b.n	800147e <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001552:	6810      	ldr	r0, [r2, #0]
 8001554:	07c0      	lsls	r0, r0, #31
 8001556:	d5e7      	bpl.n	8001528 <HAL_ADC_ConfigChannel+0xd4>
 8001558:	e7f9      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800155a:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800155e:	6950      	ldr	r0, [r2, #20]
 8001560:	688e      	ldr	r6, [r1, #8]
 8001562:	2707      	movs	r7, #7
 8001564:	fa07 f70e 	lsl.w	r7, r7, lr
 8001568:	ea20 0007 	bic.w	r0, r0, r7
 800156c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001570:	4330      	orrs	r0, r6
 8001572:	6150      	str	r0, [r2, #20]
 8001574:	e7af      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 8001576:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001578:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800157c:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8001580:	d80b      	bhi.n	800159a <HAL_ADC_ConfigChannel+0x146>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001582:	383c      	subs	r0, #60	; 0x3c
 8001584:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8001586:	680d      	ldr	r5, [r1, #0]
 8001588:	271f      	movs	r7, #31
 800158a:	4087      	lsls	r7, r0
 800158c:	ea26 0607 	bic.w	r6, r6, r7
 8001590:	fa05 f000 	lsl.w	r0, r5, r0
 8001594:	4330      	orrs	r0, r6
 8001596:	6390      	str	r0, [r2, #56]	; 0x38
 8001598:	e789      	b.n	80014ae <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800159a:	385a      	subs	r0, #90	; 0x5a
 800159c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800159e:	680d      	ldr	r5, [r1, #0]
 80015a0:	271f      	movs	r7, #31
 80015a2:	4087      	lsls	r7, r0
 80015a4:	ea26 0607 	bic.w	r6, r6, r7
 80015a8:	fa05 f000 	lsl.w	r0, r5, r0
 80015ac:	4330      	orrs	r0, r6
 80015ae:	63d0      	str	r0, [r2, #60]	; 0x3c
 80015b0:	e77d      	b.n	80014ae <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015b2:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 80015b4:	4e6d      	ldr	r6, [pc, #436]	; (800176c <HAL_ADC_ConfigChannel+0x318>)
 80015b6:	403e      	ands	r6, r7
 80015b8:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015bc:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80015c0:	4338      	orrs	r0, r7
 80015c2:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 80015c4:	e7ab      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015c6:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80015c8:	4e68      	ldr	r6, [pc, #416]	; (800176c <HAL_ADC_ConfigChannel+0x318>)
 80015ca:	403e      	ands	r6, r7
 80015cc:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015d0:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80015d4:	4338      	orrs	r0, r7
 80015d6:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80015d8:	e7a1      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015da:	6e57      	ldr	r7, [r2, #100]	; 0x64
 80015dc:	4e63      	ldr	r6, [pc, #396]	; (800176c <HAL_ADC_ConfigChannel+0x318>)
 80015de:	403e      	ands	r6, r7
 80015e0:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015e4:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80015e8:	4338      	orrs	r0, r7
 80015ea:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80015ec:	e797      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015ee:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80015f0:	4e5e      	ldr	r6, [pc, #376]	; (800176c <HAL_ADC_ConfigChannel+0x318>)
 80015f2:	403e      	ands	r6, r7
 80015f4:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015f8:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80015fc:	4338      	orrs	r0, r7
 80015fe:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 8001600:	e78d      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001602:	495b      	ldr	r1, [pc, #364]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 8001604:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001606:	024c      	lsls	r4, r1, #9
 8001608:	d4a1      	bmi.n	800154e <HAL_ADC_ConfigChannel+0xfa>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800160a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800160e:	bf0c      	ite	eq
 8001610:	4958      	ldreq	r1, [pc, #352]	; (8001774 <HAL_ADC_ConfigChannel+0x320>)
 8001612:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
 8001616:	9101      	str	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001618:	6891      	ldr	r1, [r2, #8]
 800161a:	f001 0103 	and.w	r1, r1, #3
 800161e:	2901      	cmp	r1, #1
 8001620:	d05d      	beq.n	80016de <HAL_ADC_ConfigChannel+0x28a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001622:	9801      	ldr	r0, [sp, #4]
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001624:	6881      	ldr	r1, [r0, #8]
 8001626:	f001 0103 	and.w	r1, r1, #3
 800162a:	2901      	cmp	r1, #1
 800162c:	d05e      	beq.n	80016ec <HAL_ADC_ConfigChannel+0x298>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800162e:	2d10      	cmp	r5, #16
 8001630:	d074      	beq.n	800171c <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001632:	2d11      	cmp	r5, #17
 8001634:	f000 808f 	beq.w	8001756 <HAL_ADC_ConfigChannel+0x302>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001638:	2d12      	cmp	r5, #18
 800163a:	d188      	bne.n	800154e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800163c:	494c      	ldr	r1, [pc, #304]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 800163e:	688a      	ldr	r2, [r1, #8]
 8001640:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001644:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001646:	2000      	movs	r0, #0
 8001648:	e719      	b.n	800147e <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800164a:	4949      	ldr	r1, [pc, #292]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 800164c:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800164e:	020f      	lsls	r7, r1, #8
 8001650:	d5db      	bpl.n	800160a <HAL_ADC_ConfigChannel+0x1b6>
 8001652:	e77c      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001654:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8001658:	40ac      	lsls	r4, r5
 800165a:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800165c:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800165e:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001662:	d92e      	bls.n	80016c2 <HAL_ADC_ConfigChannel+0x26e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001664:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8001668:	688e      	ldr	r6, [r1, #8]
 800166a:	6994      	ldr	r4, [r2, #24]
 800166c:	f1a0 011b 	sub.w	r1, r0, #27
 8001670:	2707      	movs	r7, #7
 8001672:	408f      	lsls	r7, r1
 8001674:	fa06 f001 	lsl.w	r0, r6, r1
 8001678:	ea24 0107 	bic.w	r1, r4, r7
 800167c:	4301      	orrs	r1, r0
 800167e:	6191      	str	r1, [r2, #24]
 8001680:	e75d      	b.n	800153e <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001682:	493b      	ldr	r1, [pc, #236]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 8001684:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001686:	01ce      	lsls	r6, r1, #7
 8001688:	d5bf      	bpl.n	800160a <HAL_ADC_ConfigChannel+0x1b6>
 800168a:	e760      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800168c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800168e:	06a8      	lsls	r0, r5, #26
 8001690:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001694:	4286      	cmp	r6, r0
 8001696:	d037      	beq.n	8001708 <HAL_ADC_ConfigChannel+0x2b4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001698:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800169a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800169e:	42b0      	cmp	r0, r6
 80016a0:	d02d      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x2aa>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016a2:	6e96      	ldr	r6, [r2, #104]	; 0x68
 80016a4:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80016a8:	42b0      	cmp	r0, r6
 80016aa:	d032      	beq.n	8001712 <HAL_ADC_ConfigChannel+0x2be>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ac:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 80016ae:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80016b2:	42b0      	cmp	r0, r6
 80016b4:	f47f af33 	bne.w	800151e <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016b8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80016ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80016be:	66d0      	str	r0, [r2, #108]	; 0x6c
 80016c0:	e72d      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 80016c2:	1c68      	adds	r0, r5, #1
 80016c4:	688e      	ldr	r6, [r1, #8]
 80016c6:	6954      	ldr	r4, [r2, #20]
 80016c8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80016cc:	2707      	movs	r7, #7
 80016ce:	408f      	lsls	r7, r1
 80016d0:	fa06 f001 	lsl.w	r0, r6, r1
 80016d4:	ea24 0107 	bic.w	r1, r4, r7
 80016d8:	4301      	orrs	r1, r0
 80016da:	6151      	str	r1, [r2, #20]
 80016dc:	e732      	b.n	8001544 <HAL_ADC_ConfigChannel+0xf0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016de:	6811      	ldr	r1, [r2, #0]
 80016e0:	07c8      	lsls	r0, r1, #31
 80016e2:	d406      	bmi.n	80016f2 <HAL_ADC_ConfigChannel+0x29e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016e4:	9801      	ldr	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d0a1      	beq.n	800162e <HAL_ADC_ConfigChannel+0x1da>
 80016ea:	e79b      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1d0>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016ec:	6801      	ldr	r1, [r0, #0]
 80016ee:	07c9      	lsls	r1, r1, #31
 80016f0:	d59d      	bpl.n	800162e <HAL_ADC_ConfigChannel+0x1da>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
 80016fc:	e6bf      	b.n	800147e <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016fe:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001700:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001704:	6656      	str	r6, [r2, #100]	; 0x64
 8001706:	e7cc      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x24e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001708:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800170a:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800170e:	6616      	str	r6, [r2, #96]	; 0x60
 8001710:	e7c2      	b.n	8001698 <HAL_ADC_ConfigChannel+0x244>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001712:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8001714:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001718:	6696      	str	r6, [r2, #104]	; 0x68
 800171a:	e7c7      	b.n	80016ac <HAL_ADC_ConfigChannel+0x258>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800171c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001720:	f47f af15 	bne.w	800154e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001724:	4912      	ldr	r1, [pc, #72]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001726:	4c14      	ldr	r4, [pc, #80]	; (8001778 <HAL_ADC_ConfigChannel+0x324>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001728:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800172c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001730:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001732:	220a      	movs	r2, #10
 8001734:	6821      	ldr	r1, [r4, #0]
 8001736:	fbb1 f1f0 	udiv	r1, r1, r0
 800173a:	fb02 f201 	mul.w	r2, r2, r1
 800173e:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001740:	9a00      	ldr	r2, [sp, #0]
 8001742:	2a00      	cmp	r2, #0
 8001744:	f43f af03 	beq.w	800154e <HAL_ADC_ConfigChannel+0xfa>
            wait_loop_index--;
 8001748:	9a00      	ldr	r2, [sp, #0]
 800174a:	3a01      	subs	r2, #1
 800174c:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800174e:	9a00      	ldr	r2, [sp, #0]
 8001750:	2a00      	cmp	r2, #0
 8001752:	d1f9      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x2f4>
 8001754:	e6fb      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001756:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800175a:	f47f aef8 	bne.w	800154e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800175e:	4904      	ldr	r1, [pc, #16]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 8001760:	688a      	ldr	r2, [r1, #8]
 8001762:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001766:	608a      	str	r2, [r1, #8]
 8001768:	e6f1      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
 800176a:	bf00      	nop
 800176c:	83fff000 	.word	0x83fff000
 8001770:	50000300 	.word	0x50000300
 8001774:	50000100 	.word	0x50000100
 8001778:	20000000 	.word	0x20000000
 800177c:	000f4240 	.word	0x000f4240

08001780 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001782:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001784:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001788:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800178a:	0200      	lsls	r0, r0, #8
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001798:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800179a:	60d3      	str	r3, [r2, #12]
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a6:	b470      	push	{r4, r5, r6}
 80017a8:	68dc      	ldr	r4, [r3, #12]
 80017aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ae:	f1c4 0607 	rsb	r6, r4, #7
 80017b2:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	bf28      	it	cs
 80017ba:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d917      	bls.n	80017f0 <HAL_NVIC_SetPriority+0x4c>
 80017c0:	3c03      	subs	r4, #3
 80017c2:	2501      	movs	r5, #1
 80017c4:	40a5      	lsls	r5, r4
 80017c6:	3d01      	subs	r5, #1
 80017c8:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ca:	2301      	movs	r3, #1
 80017cc:	40b3      	lsls	r3, r6
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4019      	ands	r1, r3
 80017d2:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80017d4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80017da:	db0c      	blt.n	80017f6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017e4:	0109      	lsls	r1, r1, #4
 80017e6:	b2c9      	uxtb	r1, r1
 80017e8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017ec:	bc70      	pop	{r4, r5, r6}
 80017ee:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f0:	2200      	movs	r2, #0
 80017f2:	4614      	mov	r4, r2
 80017f4:	e7e9      	b.n	80017ca <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_NVIC_SetPriority+0x68>)
 80017f8:	f000 000f 	and.w	r0, r0, #15
 80017fc:	0109      	lsls	r1, r1, #4
 80017fe:	4403      	add	r3, r0
 8001800:	b2c9      	uxtb	r1, r1
 8001802:	7619      	strb	r1, [r3, #24]
 8001804:	bc70      	pop	{r4, r5, r6}
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	e000ecfc 	.word	0xe000ecfc

08001810 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001810:	f000 011f 	and.w	r1, r0, #31
 8001814:	2301      	movs	r3, #1
 8001816:	0940      	lsrs	r0, r0, #5
 8001818:	4a02      	ldr	r2, [pc, #8]	; (8001824 <HAL_NVIC_EnableIRQ+0x14>)
 800181a:	408b      	lsls	r3, r1
 800181c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	3801      	subs	r0, #1
 800182a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800182e:	d20e      	bcs.n	800184e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	4c08      	ldr	r4, [pc, #32]	; (8001858 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	20f0      	movs	r0, #240	; 0xf0
 800183a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001840:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001842:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800184c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800185e:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001860:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001862:	bf0c      	ite	eq
 8001864:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001868:	f023 0304 	bicne.w	r3, r3, #4
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4770      	bx	lr
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <HAL_SYSTICK_IRQHandler>:
{
 8001878:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800187a:	f7ff fffb 	bl	8001874 <HAL_SYSTICK_Callback>
 800187e:	bd08      	pop	{r3, pc}

08001880 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001880:	2800      	cmp	r0, #0
 8001882:	d02d      	beq.n	80018e0 <HAL_DMA_Init+0x60>
{ 
 8001884:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001886:	6842      	ldr	r2, [r0, #4]
 8001888:	6887      	ldr	r7, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	68c6      	ldr	r6, [r0, #12]
 800188c:	6904      	ldr	r4, [r0, #16]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800188e:	4915      	ldr	r1, [pc, #84]	; (80018e4 <HAL_DMA_Init+0x64>)
 8001890:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001892:	433a      	orrs	r2, r7
  tmp = hdma->Instance->CCR;
 8001894:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	695d      	ldr	r5, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001898:	4f13      	ldr	r7, [pc, #76]	; (80018e8 <HAL_DMA_Init+0x68>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189a:	4332      	orrs	r2, r6
 800189c:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	699e      	ldr	r6, [r3, #24]
  tmp = hdma->Instance->CCR;
 80018a0:	6804      	ldr	r4, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a4:	69dd      	ldr	r5, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a6:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018a8:	4401      	add	r1, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018aa:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018ae:	fba7 6101 	umull	r6, r1, r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b2:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018b4:	f024 0430 	bic.w	r4, r4, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80018b8:	4322      	orrs	r2, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018ba:	0909      	lsrs	r1, r1, #4
  hdma->Instance->CCR = tmp;  
 80018bc:	6002      	str	r2, [r0, #0]
  hdma->DmaBaseAddress = DMA1;
 80018be:	4c0b      	ldr	r4, [pc, #44]	; (80018ec <HAL_DMA_Init+0x6c>)
 80018c0:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80018c2:	2000      	movs	r0, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018c4:	0089      	lsls	r1, r1, #2
  hdma->State = HAL_DMA_STATE_READY;
 80018c6:	2201      	movs	r2, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018c8:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->XferCpltCallback = NULL;
 80018ca:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80018cc:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80018ce:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80018d0:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d2:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80018d4:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80018d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}  
 80018dc:	bcf0      	pop	{r4, r5, r6, r7}
 80018de:	4770      	bx	lr
    return HAL_ERROR;
 80018e0:	2001      	movs	r0, #1
 80018e2:	4770      	bx	lr
 80018e4:	bffdfff8 	.word	0xbffdfff8
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	40020000 	.word	0x40020000

080018f0 <HAL_DMA_Start_IT>:
{
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80018f2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80018f6:	2c01      	cmp	r4, #1
 80018f8:	d00b      	beq.n	8001912 <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 80018fa:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80018fe:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001900:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001902:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001906:	d006      	beq.n	8001916 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8001908:	2300      	movs	r3, #0
 800190a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800190e:	2002      	movs	r0, #2
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8001912:	2002      	movs	r0, #2
} 
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001916:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001918:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800191a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191e:	2600      	movs	r6, #0
 8001920:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001922:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001924:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001926:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800192a:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 800192c:	f04f 0c02 	mov.w	ip, #2
 8001930:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001934:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001936:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 800193a:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 800193c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800193e:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8001940:	bf0b      	itete	eq
 8001942:	60aa      	streq	r2, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001944:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001946:	60e9      	streq	r1, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 8001948:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800194a:	b14b      	cbz	r3, 8001960 <HAL_DMA_Start_IT+0x70>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	f043 030e 	orr.w	r3, r3, #14
 8001952:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800195c:	2000      	movs	r0, #0
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	f043 030a 	orr.w	r3, r3, #10
 8001966:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	602b      	str	r3, [r5, #0]
 8001970:	e7f0      	b.n	8001954 <HAL_DMA_Start_IT+0x64>
 8001972:	bf00      	nop

08001974 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001974:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001978:	2a02      	cmp	r2, #2
{  
 800197a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197c:	d003      	beq.n	8001986 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197e:	2204      	movs	r2, #4
 8001980:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001982:	2001      	movs	r0, #1
 8001984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001986:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001988:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800198a:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800198c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 800198e:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001990:	f024 040e 	bic.w	r4, r4, #14
 8001994:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001996:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001998:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800199a:	f024 0401 	bic.w	r4, r4, #1
 800199e:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019a0:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 80019a4:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019a6:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80019a8:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80019ac:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019b0:	b116      	cbz	r6, 80019b8 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80019b2:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 80019b4:	4620      	mov	r0, r4
 80019b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b8:	4630      	mov	r0, r6
}
 80019ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019bc <HAL_DMA_IRQHandler>:
{
 80019bc:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019be:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019c2:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80019c4:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019c6:	2304      	movs	r3, #4
 80019c8:	4093      	lsls	r3, r2
 80019ca:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 80019cc:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019ce:	d00d      	beq.n	80019ec <HAL_DMA_IRQHandler+0x30>
 80019d0:	0777      	lsls	r7, r6, #29
 80019d2:	d50b      	bpl.n	80019ec <HAL_DMA_IRQHandler+0x30>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	0692      	lsls	r2, r2, #26
 80019d8:	d403      	bmi.n	80019e2 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	f022 0204 	bic.w	r2, r2, #4
 80019e0:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80019e2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019e4:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80019e6:	b1c2      	cbz	r2, 8001a1a <HAL_DMA_IRQHandler+0x5e>
}  
 80019e8:	bcf0      	pop	{r4, r5, r6, r7}
  		hdma->XferCpltCallback(hdma);
 80019ea:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019ec:	2302      	movs	r3, #2
 80019ee:	4093      	lsls	r3, r2
 80019f0:	4219      	tst	r1, r3
 80019f2:	d014      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x62>
 80019f4:	07b7      	lsls	r7, r6, #30
 80019f6:	d512      	bpl.n	8001a1e <HAL_DMA_IRQHandler+0x62>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	0692      	lsls	r2, r2, #26
 80019fc:	d406      	bmi.n	8001a0c <HAL_DMA_IRQHandler+0x50>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019fe:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001a00:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a02:	f022 020a 	bic.w	r2, r2, #10
 8001a06:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001a08:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001a0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a0e:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8001a10:	2300      	movs	r3, #0
 8001a12:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d1e6      	bne.n	80019e8 <HAL_DMA_IRQHandler+0x2c>
}  
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a1e:	2308      	movs	r3, #8
 8001a20:	4093      	lsls	r3, r2
 8001a22:	420b      	tst	r3, r1
 8001a24:	d0f9      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x5e>
 8001a26:	0733      	lsls	r3, r6, #28
 8001a28:	d5f7      	bpl.n	8001a1a <HAL_DMA_IRQHandler+0x5e>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a2a:	6821      	ldr	r1, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001a2c:	6b06      	ldr	r6, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a2e:	2301      	movs	r3, #1
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a30:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a34:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8001a38:	2700      	movs	r7, #0
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a3a:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a3c:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a3e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001a40:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001a44:	f880 7020 	strb.w	r7, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001a48:	2e00      	cmp	r6, #0
 8001a4a:	d0e6      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x5e>
    	hdma->XferErrorCallback(hdma);
 8001a4c:	4633      	mov	r3, r6
}  
 8001a4e:	bcf0      	pop	{r4, r5, r6, r7}
    	hdma->XferErrorCallback(hdma);
 8001a50:	4718      	bx	r3
 8001a52:	bf00      	nop

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a56:	6809      	ldr	r1, [r1, #0]
 8001a58:	2900      	cmp	r1, #0
 8001a5a:	f000 80d9 	beq.w	8001c10 <HAL_GPIO_Init+0x1bc>
{
 8001a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a62:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8001c24 <HAL_GPIO_Init+0x1d0>
{
 8001a66:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a68:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a6a:	f04f 0801 	mov.w	r8, #1
 8001a6e:	e079      	b.n	8001b64 <HAL_GPIO_Init+0x110>
 8001a70:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a74:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001a76:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7a:	fa03 f309 	lsl.w	r3, r3, r9
 8001a7e:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a80:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a84:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a88:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a90:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a94:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001a98:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9a:	f240 8098 	bls.w	8001bce <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8001a9e:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa4:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa6:	fa02 f209 	lsl.w	r2, r2, r9
 8001aaa:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aac:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8001aae:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab0:	d554      	bpl.n	8001b5c <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b58      	ldr	r3, [pc, #352]	; (8001c14 <HAL_GPIO_Init+0x1c0>)
 8001ab4:	4a57      	ldr	r2, [pc, #348]	; (8001c14 <HAL_GPIO_Init+0x1c0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	6993      	ldr	r3, [r2, #24]
 8001ac0:	f025 0603 	bic.w	r6, r5, #3
 8001ac4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001ad0:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001ad2:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001ad8:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	f04f 090f 	mov.w	r9, #15
 8001ae0:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ae4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001ae8:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aec:	f000 8086 	beq.w	8001bfc <HAL_GPIO_Init+0x1a8>
 8001af0:	4a49      	ldr	r2, [pc, #292]	; (8001c18 <HAL_GPIO_Init+0x1c4>)
 8001af2:	4290      	cmp	r0, r2
 8001af4:	f000 8084 	beq.w	8001c00 <HAL_GPIO_Init+0x1ac>
 8001af8:	4a48      	ldr	r2, [pc, #288]	; (8001c1c <HAL_GPIO_Init+0x1c8>)
 8001afa:	4290      	cmp	r0, r2
 8001afc:	f000 8083 	beq.w	8001c06 <HAL_GPIO_Init+0x1b2>
 8001b00:	4a47      	ldr	r2, [pc, #284]	; (8001c20 <HAL_GPIO_Init+0x1cc>)
 8001b02:	4290      	cmp	r0, r2
 8001b04:	bf0b      	itete	eq
 8001b06:	f04f 0903 	moveq.w	r9, #3
 8001b0a:	2205      	movne	r2, #5
 8001b0c:	fa09 f303 	lsleq.w	r3, r9, r3
 8001b10:	fa02 f303 	lslne.w	r3, r2, r3
 8001b14:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b18:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8001b1a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b20:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8001b22:	bf54      	ite	pl
 8001b24:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001b26:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8001b28:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001b2c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b30:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8001b32:	bf54      	ite	pl
 8001b34:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001b36:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8001b38:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b40:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001b42:	bf54      	ite	pl
 8001b44:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001b46:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8001b48:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001b4c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b50:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b52:	bf54      	ite	pl
 8001b54:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001b56:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8001b58:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001b5c:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b5e:	fa31 f305 	lsrs.w	r3, r1, r5
 8001b62:	d048      	beq.n	8001bf6 <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b64:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8001b68:	ea12 0701 	ands.w	r7, r2, r1
 8001b6c:	d0f6      	beq.n	8001b5c <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b6e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8001b72:	f024 0a10 	bic.w	sl, r4, #16
 8001b76:	f1ba 0f02 	cmp.w	sl, #2
 8001b7a:	f47f af79 	bne.w	8001a70 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8001b7e:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001b82:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8001b8a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	f04f 0a0f 	mov.w	sl, #15
 8001b94:	fa0a fb03 	lsl.w	fp, sl, r3
 8001b98:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8001ba0:	fa06 f303 	lsl.w	r3, r6, r3
 8001ba4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8001ba8:	f8c9 3020 	str.w	r3, [r9, #32]
 8001bac:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb0:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001bb2:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb6:	fa03 f309 	lsl.w	r3, r3, r9
 8001bba:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bbc:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc0:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc4:	fa06 f609 	lsl.w	r6, r6, r9
 8001bc8:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8001bcc:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8001bce:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd0:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd4:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001bd8:	fa06 f609 	lsl.w	r6, r6, r9
 8001bdc:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001be0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001be2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001be6:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bea:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bee:	40ae      	lsls	r6, r5
 8001bf0:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001bf2:	6046      	str	r6, [r0, #4]
 8001bf4:	e753      	b.n	8001a9e <HAL_GPIO_Init+0x4a>
  }
}
 8001bf6:	b003      	add	sp, #12
 8001bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e789      	b.n	8001b14 <HAL_GPIO_Init+0xc0>
 8001c00:	fa08 f303 	lsl.w	r3, r8, r3
 8001c04:	e786      	b.n	8001b14 <HAL_GPIO_Init+0xc0>
 8001c06:	f04f 0902 	mov.w	r9, #2
 8001c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8001c0e:	e781      	b.n	8001b14 <HAL_GPIO_Init+0xc0>
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	48000c00 	.word	0x48000c00
 8001c24:	40010400 	.word	0x40010400

08001c28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c28:	b90a      	cbnz	r2, 8001c2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c2a:	6281      	str	r1, [r0, #40]	; 0x28
 8001c2c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c2e:	6181      	str	r1, [r0, #24]
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop

08001c34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop

08001c38 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001c3a:	6951      	ldr	r1, [r2, #20]
 8001c3c:	4201      	tst	r1, r0
 8001c3e:	d100      	bne.n	8001c42 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001c40:	4770      	bx	lr
{
 8001c42:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c44:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c46:	f7ff fff5 	bl	8001c34 <HAL_GPIO_EXTI_Callback>
 8001c4a:	bd08      	pop	{r3, pc}
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c54:	6803      	ldr	r3, [r0, #0]
 8001c56:	07d9      	lsls	r1, r3, #31
{
 8001c58:	b083      	sub	sp, #12
 8001c5a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5c:	d543      	bpl.n	8001ce6 <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c5e:	49c0      	ldr	r1, [pc, #768]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001c60:	684a      	ldr	r2, [r1, #4]
 8001c62:	f002 020c 	and.w	r2, r2, #12
 8001c66:	2a04      	cmp	r2, #4
 8001c68:	f000 8184 	beq.w	8001f74 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c6c:	684a      	ldr	r2, [r1, #4]
 8001c6e:	f002 020c 	and.w	r2, r2, #12
 8001c72:	2a08      	cmp	r2, #8
 8001c74:	f000 817a 	beq.w	8001f6c <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c78:	6863      	ldr	r3, [r4, #4]
 8001c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7e:	f000 823d 	beq.w	80020fc <HAL_RCC_OscConfig+0x4ac>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 81a1 	beq.w	8001fca <HAL_RCC_OscConfig+0x37a>
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8c:	f000 8297 	beq.w	80021be <HAL_RCC_OscConfig+0x56e>
 8001c90:	4bb3      	ldr	r3, [pc, #716]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca0:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca2:	4daf      	ldr	r5, [pc, #700]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001ca4:	68a2      	ldr	r2, [r4, #8]
 8001ca6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001ca8:	f023 030f 	bic.w	r3, r3, #15
 8001cac:	4313      	orrs	r3, r2
 8001cae:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f94a 	bl	8000f48 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001cb8:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	2601      	movs	r6, #1
 8001cbc:	e005      	b.n	8001cca <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbe:	f7ff f943 	bl	8000f48 <HAL_GetTick>
 8001cc2:	1bc0      	subs	r0, r0, r7
 8001cc4:	2864      	cmp	r0, #100	; 0x64
 8001cc6:	f200 81b9 	bhi.w	800203c <HAL_RCC_OscConfig+0x3ec>
 8001cca:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	682a      	ldr	r2, [r5, #0]
 8001cd0:	fa98 f3a8 	rbit	r3, r8
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	fa06 f303 	lsl.w	r3, r6, r3
 8001ce0:	4213      	tst	r3, r2
 8001ce2:	d0ec      	beq.n	8001cbe <HAL_RCC_OscConfig+0x6e>
 8001ce4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	079f      	lsls	r7, r3, #30
 8001ce8:	d542      	bpl.n	8001d70 <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cea:	4a9d      	ldr	r2, [pc, #628]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001cec:	6851      	ldr	r1, [r2, #4]
 8001cee:	f011 0f0c 	tst.w	r1, #12
 8001cf2:	f000 80f7 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cf6:	6851      	ldr	r1, [r2, #4]
 8001cf8:	f001 010c 	and.w	r1, r1, #12
 8001cfc:	2908      	cmp	r1, #8
 8001cfe:	f000 80ed 	beq.w	8001edc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d02:	6922      	ldr	r2, [r4, #16]
 8001d04:	2a00      	cmp	r2, #0
 8001d06:	f000 81d3 	beq.w	80020b0 <HAL_RCC_OscConfig+0x460>
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1c:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8001d20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d22:	f7ff f911 	bl	8000f48 <HAL_GetTick>
 8001d26:	f04f 0802 	mov.w	r8, #2
 8001d2a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4d8c      	ldr	r5, [pc, #560]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001d2e:	e005      	b.n	8001d3c <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff f90a 	bl	8000f48 <HAL_GetTick>
 8001d34:	1bc0      	subs	r0, r0, r7
 8001d36:	2802      	cmp	r0, #2
 8001d38:	f200 8180 	bhi.w	800203c <HAL_RCC_OscConfig+0x3ec>
 8001d3c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	682a      	ldr	r2, [r5, #0]
 8001d42:	fa98 f3a8 	rbit	r3, r8
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	fa06 f303 	lsl.w	r3, r6, r3
 8001d52:	4213      	tst	r3, r2
 8001d54:	d0ec      	beq.n	8001d30 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	6829      	ldr	r1, [r5, #0]
 8001d58:	22f8      	movs	r2, #248	; 0xf8
 8001d5a:	fa92 f2a2 	rbit	r2, r2
 8001d5e:	6963      	ldr	r3, [r4, #20]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	602b      	str	r3, [r5, #0]
 8001d6e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d70:	071d      	lsls	r5, r3, #28
 8001d72:	d44f      	bmi.n	8001e14 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	0758      	lsls	r0, r3, #29
 8001d76:	d57b      	bpl.n	8001e70 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d78:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	00d1      	lsls	r1, r2, #3
 8001d7e:	f100 8110 	bmi.w	8001fa2 <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d88:	61da      	str	r2, [r3, #28]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d94:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	4d72      	ldr	r5, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001d9a:	682b      	ldr	r3, [r5, #0]
 8001d9c:	05da      	lsls	r2, r3, #23
 8001d9e:	f140 813d 	bpl.w	800201c <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da2:	68e3      	ldr	r3, [r4, #12]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	f000 81af 	beq.w	8002108 <HAL_RCC_OscConfig+0x4b8>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8154 	beq.w	8002058 <HAL_RCC_OscConfig+0x408>
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001db4:	6a1a      	ldr	r2, [r3, #32]
 8001db6:	f000 820f 	beq.w	80021d8 <HAL_RCC_OscConfig+0x588>
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	621a      	str	r2, [r3, #32]
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	f022 0204 	bic.w	r2, r2, #4
 8001dc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7ff f8be 	bl	8000f48 <HAL_GetTick>
 8001dcc:	f04f 0902 	mov.w	r9, #2
 8001dd0:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	4e63      	ldr	r6, [pc, #396]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001dd4:	2501      	movs	r5, #1
 8001dd6:	e015      	b.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
 8001dd8:	fa99 f3a9 	rbit	r3, r9
 8001ddc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001dde:	fa99 f3a9 	rbit	r3, r9
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	fa05 f303 	lsl.w	r3, r5, r3
 8001dee:	4213      	tst	r3, r2
 8001df0:	f040 8128 	bne.w	8002044 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff f8a8 	bl	8000f48 <HAL_GetTick>
 8001df8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dfc:	1bc0      	subs	r0, r0, r7
 8001dfe:	4298      	cmp	r0, r3
 8001e00:	f200 811c 	bhi.w	800203c <HAL_RCC_OscConfig+0x3ec>
 8001e04:	fa99 f3a9 	rbit	r3, r9
 8001e08:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0e3      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x188>
 8001e10:	6a32      	ldr	r2, [r6, #32]
 8001e12:	e7e4      	b.n	8001dde <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e14:	69a2      	ldr	r2, [r4, #24]
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	d07b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2c2>
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4e4f      	ldr	r6, [pc, #316]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 8001e24:	fab1 f181 	clz	r1, r1
 8001e28:	440b      	add	r3, r1
 8001e2a:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2c:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e30:	f7ff f88a 	bl	8000f48 <HAL_GetTick>
 8001e34:	f04f 0802 	mov.w	r8, #2
 8001e38:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e005      	b.n	8001e48 <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f884 	bl	8000f48 <HAL_GetTick>
 8001e40:	1bc0      	subs	r0, r0, r7
 8001e42:	2802      	cmp	r0, #2
 8001e44:	f200 80fa 	bhi.w	800203c <HAL_RCC_OscConfig+0x3ec>
 8001e48:	fa98 f3a8 	rbit	r3, r8
 8001e4c:	fa98 f3a8 	rbit	r3, r8
 8001e50:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e54:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001e56:	fa98 f3a8 	rbit	r3, r8
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	fa05 f303 	lsl.w	r3, r5, r3
 8001e66:	4213      	tst	r3, r2
 8001e68:	d0e8      	beq.n	8001e3c <HAL_RCC_OscConfig+0x1ec>
 8001e6a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6c:	0758      	lsls	r0, r3, #29
 8001e6e:	d483      	bmi.n	8001d78 <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e70:	69e3      	ldr	r3, [r4, #28]
 8001e72:	b37b      	cbz	r3, 8001ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e74:	4d3a      	ldr	r5, [pc, #232]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001e76:	686a      	ldr	r2, [r5, #4]
 8001e78:	f002 020c 	and.w	r2, r2, #12
 8001e7c:	2a08      	cmp	r2, #8
 8001e7e:	d044      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e86:	f000 8145 	beq.w	8002114 <HAL_RCC_OscConfig+0x4c4>
 8001e8a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f852 	bl	8000f48 <HAL_GetTick>
 8001ea4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001ea8:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	2601      	movs	r6, #1
 8001eac:	e005      	b.n	8001eba <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff f84b 	bl	8000f48 <HAL_GetTick>
 8001eb2:	1bc0      	subs	r0, r0, r7
 8001eb4:	2802      	cmp	r0, #2
 8001eb6:	f200 80c1 	bhi.w	800203c <HAL_RCC_OscConfig+0x3ec>
 8001eba:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	682a      	ldr	r2, [r5, #0]
 8001ec0:	fa94 f3a4 	rbit	r3, r4
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa06 f303 	lsl.w	r3, r6, r3
 8001ed0:	4213      	tst	r3, r2
 8001ed2:	d1ec      	bne.n	8001eae <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
}
 8001ed6:	b003      	add	sp, #12
 8001ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001edc:	6852      	ldr	r2, [r2, #4]
 8001ede:	03d6      	lsls	r6, r2, #15
 8001ee0:	f53f af0f 	bmi.w	8001d02 <HAL_RCC_OscConfig+0xb2>
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	491d      	ldr	r1, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
 8001eec:	6808      	ldr	r0, [r1, #0]
 8001eee:	fa92 f2a2 	rbit	r2, r2
 8001ef2:	fab2 f282 	clz	r2, r2
 8001ef6:	f002 021f 	and.w	r2, r2, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f202 	lsl.w	r2, r1, r2
 8001f00:	4202      	tst	r2, r0
 8001f02:	d051      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x358>
 8001f04:	6922      	ldr	r2, [r4, #16]
 8001f06:	428a      	cmp	r2, r1
 8001f08:	d04e      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 8001f0a:	2001      	movs	r0, #1
}
 8001f0c:	b003      	add	sp, #12
 8001f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f12:	2501      	movs	r5, #1
 8001f14:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	4e11      	ldr	r6, [pc, #68]	; (8001f60 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 8001f1c:	fab1 f181 	clz	r1, r1
 8001f20:	440b      	add	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f04f 0802 	mov.w	r8, #2
 8001f28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f80d 	bl	8000f48 <HAL_GetTick>
 8001f2e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	e004      	b.n	8001f3c <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f32:	f7ff f809 	bl	8000f48 <HAL_GetTick>
 8001f36:	1bc0      	subs	r0, r0, r7
 8001f38:	2802      	cmp	r0, #2
 8001f3a:	d87f      	bhi.n	800203c <HAL_RCC_OscConfig+0x3ec>
 8001f3c:	fa98 f3a8 	rbit	r3, r8
 8001f40:	fa98 f3a8 	rbit	r3, r8
 8001f44:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001f4a:	fa98 f3a8 	rbit	r3, r8
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	fa05 f303 	lsl.w	r3, r5, r3
 8001f5a:	4213      	tst	r3, r2
 8001f5c:	d1e9      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2e2>
 8001f5e:	e784      	b.n	8001e6a <HAL_RCC_OscConfig+0x21a>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f6c:	684a      	ldr	r2, [r1, #4]
 8001f6e:	03d2      	lsls	r2, r2, #15
 8001f70:	f57f ae82 	bpl.w	8001c78 <HAL_RCC_OscConfig+0x28>
 8001f74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f78:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	499a      	ldr	r1, [pc, #616]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
 8001f7e:	6808      	ldr	r0, [r1, #0]
 8001f80:	fa92 f2a2 	rbit	r2, r2
 8001f84:	fab2 f282 	clz	r2, r2
 8001f88:	f002 021f 	and.w	r2, r2, #31
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	4202      	tst	r2, r0
 8001f94:	f43f aea7 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x96>
 8001f98:	6862      	ldr	r2, [r4, #4]
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	f47f aea3 	bne.w	8001ce6 <HAL_RCC_OscConfig+0x96>
 8001fa0:	e7b3      	b.n	8001f0a <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	f04f 0800 	mov.w	r8, #0
 8001fa6:	e6f7      	b.n	8001d98 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4d8f      	ldr	r5, [pc, #572]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
 8001faa:	21f8      	movs	r1, #248	; 0xf8
 8001fac:	6828      	ldr	r0, [r5, #0]
 8001fae:	fa91 f1a1 	rbit	r1, r1
 8001fb2:	6962      	ldr	r2, [r4, #20]
 8001fb4:	fab1 f181 	clz	r1, r1
 8001fb8:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8001fbc:	408a      	lsls	r2, r1
 8001fbe:	4302      	orrs	r2, r0
 8001fc0:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	071d      	lsls	r5, r3, #28
 8001fc4:	f57f aed6 	bpl.w	8001d74 <HAL_RCC_OscConfig+0x124>
 8001fc8:	e724      	b.n	8001e14 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	4d87      	ldr	r5, [pc, #540]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	602b      	str	r3, [r5, #0]
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fdc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001fde:	68a2      	ldr	r2, [r4, #8]
 8001fe0:	f023 030f 	bic.w	r3, r3, #15
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8001fe8:	f7fe ffae 	bl	8000f48 <HAL_GetTick>
 8001fec:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001ff0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	2601      	movs	r6, #1
 8001ff4:	e004      	b.n	8002000 <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff6:	f7fe ffa7 	bl	8000f48 <HAL_GetTick>
 8001ffa:	1bc0      	subs	r0, r0, r7
 8001ffc:	2864      	cmp	r0, #100	; 0x64
 8001ffe:	d81d      	bhi.n	800203c <HAL_RCC_OscConfig+0x3ec>
 8002000:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002004:	682a      	ldr	r2, [r5, #0]
 8002006:	fa98 f3a8 	rbit	r3, r8
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	fa06 f303 	lsl.w	r3, r6, r3
 8002016:	4213      	tst	r3, r2
 8002018:	d1ed      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3a6>
 800201a:	e663      	b.n	8001ce4 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002024:	f7fe ff90 	bl	8000f48 <HAL_GetTick>
 8002028:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	f53f aeb8 	bmi.w	8001da2 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7fe ff89 	bl	8000f48 <HAL_GetTick>
 8002036:	1b80      	subs	r0, r0, r6
 8002038:	2864      	cmp	r0, #100	; 0x64
 800203a:	d9f6      	bls.n	800202a <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 800203c:	2003      	movs	r0, #3
}
 800203e:	b003      	add	sp, #12
 8002040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 8002044:	f1b8 0f00 	cmp.w	r8, #0
 8002048:	f43f af12 	beq.w	8001e70 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
 800204e:	69d3      	ldr	r3, [r2, #28]
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	e70b      	b.n	8001e70 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	4d63      	ldr	r5, [pc, #396]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
 800205a:	6a2b      	ldr	r3, [r5, #32]
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	622b      	str	r3, [r5, #32]
 8002062:	6a2b      	ldr	r3, [r5, #32]
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800206a:	f7fe ff6d 	bl	8000f48 <HAL_GetTick>
 800206e:	f04f 0902 	mov.w	r9, #2
 8002072:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	2601      	movs	r6, #1
 8002076:	e013      	b.n	80020a0 <HAL_RCC_OscConfig+0x450>
 8002078:	fa99 f3a9 	rbit	r3, r9
 800207c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800207e:	fa99 f3a9 	rbit	r3, r9
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	fa06 f303 	lsl.w	r3, r6, r3
 800208e:	4213      	tst	r3, r2
 8002090:	d0d8      	beq.n	8002044 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7fe ff59 	bl	8000f48 <HAL_GetTick>
 8002096:	f241 3388 	movw	r3, #5000	; 0x1388
 800209a:	1bc0      	subs	r0, r0, r7
 800209c:	4298      	cmp	r0, r3
 800209e:	d8cd      	bhi.n	800203c <HAL_RCC_OscConfig+0x3ec>
 80020a0:	fa99 f3a9 	rbit	r3, r9
 80020a4:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0e5      	beq.n	8002078 <HAL_RCC_OscConfig+0x428>
 80020ac:	6a2a      	ldr	r2, [r5, #32]
 80020ae:	e7e6      	b.n	800207e <HAL_RCC_OscConfig+0x42e>
 80020b0:	2501      	movs	r5, #1
 80020b2:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f04f 0802 	mov.w	r8, #2
 80020c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020ca:	f7fe ff3d 	bl	8000f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4e46      	ldr	r6, [pc, #280]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 80020d0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	e004      	b.n	80020de <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d4:	f7fe ff38 	bl	8000f48 <HAL_GetTick>
 80020d8:	1bc0      	subs	r0, r0, r7
 80020da:	2802      	cmp	r0, #2
 80020dc:	d8ae      	bhi.n	800203c <HAL_RCC_OscConfig+0x3ec>
 80020de:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	6832      	ldr	r2, [r6, #0]
 80020e4:	fa98 f3a8 	rbit	r3, r8
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	fa05 f303 	lsl.w	r3, r5, r3
 80020f4:	4213      	tst	r3, r2
 80020f6:	d1ed      	bne.n	80020d4 <HAL_RCC_OscConfig+0x484>
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	e639      	b.n	8001d70 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fc:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
 80020fe:	6813      	ldr	r3, [r2, #0]
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e5cc      	b.n	8001ca2 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002108:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
 800210a:	6a13      	ldr	r3, [r2, #32]
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	e659      	b.n	8001dc8 <HAL_RCC_OscConfig+0x178>
 8002114:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002120:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800212a:	f7fe ff0d 	bl	8000f48 <HAL_GetTick>
 800212e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002132:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	2601      	movs	r6, #1
 8002136:	e005      	b.n	8002144 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ff06 	bl	8000f48 <HAL_GetTick>
 800213c:	1bc0      	subs	r0, r0, r7
 800213e:	2802      	cmp	r0, #2
 8002140:	f63f af7c 	bhi.w	800203c <HAL_RCC_OscConfig+0x3ec>
 8002144:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002148:	682a      	ldr	r2, [r5, #0]
 800214a:	fa98 f3a8 	rbit	r3, r8
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	fa06 f303 	lsl.w	r3, r6, r3
 800215a:	4213      	tst	r3, r2
 800215c:	d1ec      	bne.n	8002138 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215e:	686a      	ldr	r2, [r5, #4]
 8002160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002162:	6a21      	ldr	r1, [r4, #32]
 8002164:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002168:	430b      	orrs	r3, r1
 800216a:	4313      	orrs	r3, r2
 800216c:	606b      	str	r3, [r5, #4]
 800216e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002172:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800217e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002188:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800218a:	f7fe fedd 	bl	8000f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218e:	4e16      	ldr	r6, [pc, #88]	; (80021e8 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8002190:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002192:	2501      	movs	r5, #1
 8002194:	e005      	b.n	80021a2 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe fed7 	bl	8000f48 <HAL_GetTick>
 800219a:	1bc0      	subs	r0, r0, r7
 800219c:	2802      	cmp	r0, #2
 800219e:	f63f af4d 	bhi.w	800203c <HAL_RCC_OscConfig+0x3ec>
 80021a2:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a6:	6832      	ldr	r2, [r6, #0]
 80021a8:	fa94 f3a4 	rbit	r3, r4
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa05 f303 	lsl.w	r3, r5, r3
 80021b8:	4213      	tst	r3, r2
 80021ba:	d0ec      	beq.n	8002196 <HAL_RCC_OscConfig+0x546>
 80021bc:	e68a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021c2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e564      	b.n	8001ca2 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	f042 0204 	orr.w	r2, r2, #4
 80021dc:	621a      	str	r2, [r3, #32]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	621a      	str	r2, [r3, #32]
 80021e6:	e5ef      	b.n	8001dc8 <HAL_RCC_OscConfig+0x178>
 80021e8:	40021000 	.word	0x40021000

080021ec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_RCC_GetSysClockFreq+0x54>)
 80021ee:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f0:	f003 010c 	and.w	r1, r3, #12
 80021f4:	2908      	cmp	r1, #8
 80021f6:	d121      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0x50>
 80021f8:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80021fc:	fa91 f1a1 	rbit	r1, r1
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002200:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8002204:	fab1 f181 	clz	r1, r1
 8002208:	fa20 f101 	lsr.w	r1, r0, r1
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800220e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002210:	5c40      	ldrb	r0, [r0, r1]
 8002212:	210f      	movs	r1, #15
 8002214:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002218:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800221a:	fab1 f181 	clz	r1, r1
 800221e:	f002 020f 	and.w	r2, r2, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002222:	bf4c      	ite	mi
 8002224:	4b08      	ldrmi	r3, [pc, #32]	; (8002248 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002226:	4b09      	ldrpl	r3, [pc, #36]	; (800224c <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002228:	fa22 f201 	lsr.w	r2, r2, r1
 800222c:	4908      	ldr	r1, [pc, #32]	; (8002250 <HAL_RCC_GetSysClockFreq+0x64>)
 800222e:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002230:	bf48      	it	mi
 8002232:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002236:	fb03 f000 	mul.w	r0, r3, r0
 800223a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	08005358 	.word	0x08005358
 8002248:	007a1200 	.word	0x007a1200
 800224c:	003d0900 	.word	0x003d0900
 8002250:	08005368 	.word	0x08005368

08002254 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002254:	4a5f      	ldr	r2, [pc, #380]	; (80023d4 <HAL_RCC_ClockConfig+0x180>)
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	428b      	cmp	r3, r1
 800225e:	d20b      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002260:	6813      	ldr	r3, [r2, #0]
 8002262:	f023 0307 	bic.w	r3, r3, #7
 8002266:	430b      	orrs	r3, r1
 8002268:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4299      	cmp	r1, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8002274:	2001      	movs	r0, #1
}
 8002276:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	6803      	ldr	r3, [r0, #0]
{
 800227a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227e:	079c      	lsls	r4, r3, #30
 8002280:	d506      	bpl.n	8002290 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002282:	4c55      	ldr	r4, [pc, #340]	; (80023d8 <HAL_RCC_ClockConfig+0x184>)
 8002284:	6885      	ldr	r5, [r0, #8]
 8002286:	6862      	ldr	r2, [r4, #4]
 8002288:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800228c:	432a      	orrs	r2, r5
 800228e:	6062      	str	r2, [r4, #4]
 8002290:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	07d9      	lsls	r1, r3, #31
 8002294:	4606      	mov	r6, r0
 8002296:	d531      	bpl.n	80022fc <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002298:	6842      	ldr	r2, [r0, #4]
 800229a:	2a01      	cmp	r2, #1
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a0:	2a02      	cmp	r2, #2
 80022a2:	bf0c      	ite	eq
 80022a4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80022a8:	2302      	movne	r3, #2
 80022aa:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	494a      	ldr	r1, [pc, #296]	; (80023d8 <HAL_RCC_ClockConfig+0x184>)
 80022b0:	6808      	ldr	r0, [r1, #0]
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	4203      	tst	r3, r0
 80022c6:	d029      	beq.n	800231c <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c8:	4d43      	ldr	r5, [pc, #268]	; (80023d8 <HAL_RCC_ClockConfig+0x184>)
 80022ca:	686b      	ldr	r3, [r5, #4]
 80022cc:	f023 0303 	bic.w	r3, r3, #3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80022d4:	f7fe fe38 	bl	8000f48 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d8:	6873      	ldr	r3, [r6, #4]
 80022da:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80022dc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e2:	d023      	beq.n	800232c <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xa0>
 80022e8:	e058      	b.n	800239c <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ea:	f7fe fe2d 	bl	8000f48 <HAL_GetTick>
 80022ee:	1bc0      	subs	r0, r0, r7
 80022f0:	4540      	cmp	r0, r8
 80022f2:	d859      	bhi.n	80023a8 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f4:	686b      	ldr	r3, [r5, #4]
 80022f6:	f013 0f0c 	tst.w	r3, #12
 80022fa:	d1f6      	bne.n	80022ea <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80022fc:	4a35      	ldr	r2, [pc, #212]	; (80023d4 <HAL_RCC_ClockConfig+0x180>)
 80022fe:	6813      	ldr	r3, [r2, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	429c      	cmp	r4, r3
 8002306:	d217      	bcs.n	8002338 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	f023 0307 	bic.w	r3, r3, #7
 800230e:	4323      	orrs	r3, r4
 8002310:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002312:	6813      	ldr	r3, [r2, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	429c      	cmp	r4, r3
 800231a:	d00d      	beq.n	8002338 <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 800231c:	2001      	movs	r0, #1
 800231e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002322:	f7fe fe11 	bl	8000f48 <HAL_GetTick>
 8002326:	1bc0      	subs	r0, r0, r7
 8002328:	4540      	cmp	r0, r8
 800232a:	d83d      	bhi.n	80023a8 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800232c:	686b      	ldr	r3, [r5, #4]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b04      	cmp	r3, #4
 8002334:	d1f5      	bne.n	8002322 <HAL_RCC_ClockConfig+0xce>
 8002336:	e7e1      	b.n	80022fc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	6833      	ldr	r3, [r6, #0]
 800233a:	075a      	lsls	r2, r3, #29
 800233c:	d506      	bpl.n	800234c <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233e:	4926      	ldr	r1, [pc, #152]	; (80023d8 <HAL_RCC_ClockConfig+0x184>)
 8002340:	68f0      	ldr	r0, [r6, #12]
 8002342:	684a      	ldr	r2, [r1, #4]
 8002344:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002348:	4302      	orrs	r2, r0
 800234a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	071b      	lsls	r3, r3, #28
 800234e:	d507      	bpl.n	8002360 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002350:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <HAL_RCC_ClockConfig+0x184>)
 8002352:	6931      	ldr	r1, [r6, #16]
 8002354:	6853      	ldr	r3, [r2, #4]
 8002356:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800235a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800235e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002360:	f7ff ff44 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_RCC_ClockConfig+0x184>)
 8002366:	4601      	mov	r1, r0
 8002368:	22f0      	movs	r2, #240	; 0xf0
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	fa92 f2a2 	rbit	r2, r2
 8002370:	fab2 f282 	clz	r2, r2
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	40d3      	lsrs	r3, r2
 800237a:	4818      	ldr	r0, [pc, #96]	; (80023dc <HAL_RCC_ClockConfig+0x188>)
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_RCC_ClockConfig+0x18c>)
 800237e:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002380:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002382:	fa21 f303 	lsr.w	r3, r1, r3
 8002386:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002388:	f7fe fdae 	bl	8000ee8 <HAL_InitTick>
  return HAL_OK;
 800238c:	2000      	movs	r0, #0
}
 800238e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7fe fdd9 	bl	8000f48 <HAL_GetTick>
 8002396:	1bc0      	subs	r0, r0, r7
 8002398:	4540      	cmp	r0, r8
 800239a:	d805      	bhi.n	80023a8 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239c:	686b      	ldr	r3, [r5, #4]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d1f5      	bne.n	8002392 <HAL_RCC_ClockConfig+0x13e>
 80023a6:	e7a9      	b.n	80022fc <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 80023a8:	2003      	movs	r0, #3
 80023aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b2:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <HAL_RCC_ClockConfig+0x184>)
 80023b8:	6809      	ldr	r1, [r1, #0]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	420b      	tst	r3, r1
 80023cc:	f47f af7c 	bne.w	80022c8 <HAL_RCC_ClockConfig+0x74>
 80023d0:	e7a4      	b.n	800231c <HAL_RCC_ClockConfig+0xc8>
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	080053ac 	.word	0x080053ac
 80023e0:	20000000 	.word	0x20000000

080023e4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80023e4:	4b01      	ldr	r3, [pc, #4]	; (80023ec <HAL_RCC_GetHCLKFreq+0x8>)
}
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000000 	.word	0x20000000

080023f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	fa92 f2a2 	rbit	r2, r2
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002404:	40d3      	lsrs	r3, r2
 8002406:	4904      	ldr	r1, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	6810      	ldr	r0, [r2, #0]
}    
 800240e:	40d8      	lsrs	r0, r3
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	080053bc 	.word	0x080053bc
 800241c:	20000000 	.word	0x20000000

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002422:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	fa92 f2a2 	rbit	r2, r2
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002434:	40d3      	lsrs	r3, r2
 8002436:	4904      	ldr	r1, [pc, #16]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	6810      	ldr	r0, [r2, #0]
} 
 800243e:	40d8      	lsrs	r0, r3
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	080053bc 	.word	0x080053bc
 800244c:	20000000 	.word	0x20000000

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002454:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002456:	6800      	ldr	r0, [r0, #0]
 8002458:	03c5      	lsls	r5, r0, #15
{
 800245a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800245c:	d538      	bpl.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	00d1      	lsls	r1, r2, #3
 8002464:	d567      	bpl.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	4d59      	ldr	r5, [pc, #356]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 800246c:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	d570      	bpl.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002472:	4d55      	ldr	r5, [pc, #340]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002474:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002476:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800247a:	d01f      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800247c:	6861      	ldr	r1, [r4, #4]
 800247e:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8002482:	4293      	cmp	r3, r2
 8002484:	d01b      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002486:	6a29      	ldr	r1, [r5, #32]
 8002488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002490:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002494:	4f4e      	ldr	r7, [pc, #312]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002496:	fab2 f282 	clz	r2, r2
 800249a:	443a      	add	r2, r7
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	f04f 0e01 	mov.w	lr, #1
 80024a2:	f8c2 e000 	str.w	lr, [r2]
 80024a6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	443b      	add	r3, r7
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b4:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b6:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80024b8:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ba:	d461      	bmi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80024bc:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024be:	4a42      	ldr	r2, [pc, #264]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024c0:	6a13      	ldr	r3, [r2, #32]
 80024c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c6:	430b      	orrs	r3, r1
 80024c8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ca:	2e00      	cmp	r6, #0
 80024cc:	d153      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x126>
 80024ce:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d0:	07c5      	lsls	r5, r0, #31
 80024d2:	d506      	bpl.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d4:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024d6:	68a1      	ldr	r1, [r4, #8]
 80024d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	430b      	orrs	r3, r1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e2:	0681      	lsls	r1, r0, #26
 80024e4:	d506      	bpl.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e6:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024e8:	68e1      	ldr	r1, [r4, #12]
 80024ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80024ec:	f023 0310 	bic.w	r3, r3, #16
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024f4:	0602      	lsls	r2, r0, #24
 80024f6:	d506      	bpl.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024f8:	4a33      	ldr	r2, [pc, #204]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024fa:	6921      	ldr	r1, [r4, #16]
 80024fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024fe:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002502:	430b      	orrs	r3, r1
 8002504:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002506:	04c3      	lsls	r3, r0, #19
 8002508:	d40d      	bmi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800250a:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800250e:	d007      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002510:	4a2d      	ldr	r2, [pc, #180]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002512:	69a1      	ldr	r1, [r4, #24]
 8002514:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800251a:	430b      	orrs	r3, r1
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800251e:	2000      	movs	r0, #0
}
 8002520:	b003      	add	sp, #12
 8002522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002526:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002528:	6961      	ldr	r1, [r4, #20]
 800252a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800252c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002530:	430b      	orrs	r3, r1
 8002532:	6313      	str	r3, [r2, #48]	; 0x30
 8002534:	e7e9      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4d24      	ldr	r5, [pc, #144]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800253e:	61da      	str	r2, [r3, #28]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 800254e:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	d48e      	bmi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800255c:	f7fe fcf4 	bl	8000f48 <HAL_GetTick>
 8002560:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	682b      	ldr	r3, [r5, #0]
 8002564:	05db      	lsls	r3, r3, #23
 8002566:	d484      	bmi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fcee 	bl	8000f48 <HAL_GetTick>
 800256c:	1bc0      	subs	r0, r0, r7
 800256e:	2864      	cmp	r0, #100	; 0x64
 8002570:	d9f7      	bls.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8002572:	2003      	movs	r0, #3
 8002574:	e7d4      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	69d3      	ldr	r3, [r2, #28]
 8002578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	e7a6      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8002582:	f7fe fce1 	bl	8000f48 <HAL_GetTick>
 8002586:	f04f 0902 	mov.w	r9, #2
 800258a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e014      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800258e:	fa99 f3a9 	rbit	r3, r9
 8002592:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002594:	fa99 f3a9 	rbit	r3, r9
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa07 f303 	lsl.w	r3, r7, r3
 80025a4:	4213      	tst	r3, r2
 80025a6:	d189      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe fcce 	bl	8000f48 <HAL_GetTick>
 80025ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80025b0:	eba0 0008 	sub.w	r0, r0, r8
 80025b4:	4298      	cmp	r0, r3
 80025b6:	d8dc      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80025b8:	fa99 f3a9 	rbit	r3, r9
 80025bc:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0e4      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80025c4:	6a2a      	ldr	r2, [r5, #32]
 80025c6:	e7e5      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	10908100 	.word	0x10908100

080025d4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d4:	6803      	ldr	r3, [r0, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80025e6:	2000      	movs	r0, #0
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop

080025ec <HAL_TIM_IC_Start_IT>:
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 80025ec:	290c      	cmp	r1, #12
 80025ee:	d82f      	bhi.n	8002650 <HAL_TIM_IC_Start_IT+0x64>
 80025f0:	e8df f001 	tbb	[pc, r1]
 80025f4:	2e2e2e28 	.word	0x2e2e2e28
 80025f8:	2e2e2e22 	.word	0x2e2e2e22
 80025fc:	2e2e2e1c 	.word	0x2e2e2e1c
 8002600:	07          	.byte	0x07
 8002601:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002602:	6803      	ldr	r3, [r0, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	f042 0210 	orr.w	r2, r2, #16
 800260a:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800260c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800260e:	2201      	movs	r2, #1
 8002610:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8002614:	ea20 0001 	bic.w	r0, r0, r1
 8002618:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	4311      	orrs	r1, r2
 800261e:	6219      	str	r1, [r3, #32]
  __HAL_TIM_ENABLE(htim);  
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
} 
 8002628:	2000      	movs	r0, #0
 800262a:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800262c:	6803      	ldr	r3, [r0, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	f042 0208 	orr.w	r2, r2, #8
 8002634:	60da      	str	r2, [r3, #12]
    break;
 8002636:	e7e9      	b.n	800260c <HAL_TIM_IC_Start_IT+0x20>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002638:	6803      	ldr	r3, [r0, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	f042 0204 	orr.w	r2, r2, #4
 8002640:	60da      	str	r2, [r3, #12]
    break;
 8002642:	e7e3      	b.n	800260c <HAL_TIM_IC_Start_IT+0x20>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002644:	6803      	ldr	r3, [r0, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	f042 0202 	orr.w	r2, r2, #2
 800264c:	60da      	str	r2, [r3, #12]
    break;
 800264e:	e7dd      	b.n	800260c <HAL_TIM_IC_Start_IT+0x20>
 8002650:	6803      	ldr	r3, [r0, #0]
 8002652:	e7db      	b.n	800260c <HAL_TIM_IC_Start_IT+0x20>

08002654 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002654:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002658:	2b01      	cmp	r3, #1
 800265a:	d040      	beq.n	80026de <HAL_TIM_ConfigClockSource+0x8a>
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800265e:	6803      	ldr	r3, [r0, #0]
{
 8002660:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002662:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002666:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002668:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800266a:	4a5d      	ldr	r2, [pc, #372]	; (80027e0 <HAL_TIM_ConfigClockSource+0x18c>)
  switch (sClockSourceConfig->ClockSource)
 800266c:	2c40      	cmp	r4, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800266e:	ea02 0205 	and.w	r2, r2, r5
  __HAL_LOCK(htim);
 8002672:	f04f 0501 	mov.w	r5, #1
 8002676:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800267a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800267c:	d079      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x11e>
 800267e:	d918      	bls.n	80026b2 <HAL_TIM_ConfigClockSource+0x5e>
 8002680:	2c70      	cmp	r4, #112	; 0x70
 8002682:	d062      	beq.n	800274a <HAL_TIM_ConfigClockSource+0xf6>
 8002684:	d92d      	bls.n	80026e2 <HAL_TIM_ConfigClockSource+0x8e>
 8002686:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800268a:	d057      	beq.n	800273c <HAL_TIM_ConfigClockSource+0xe8>
 800268c:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8002690:	d11c      	bne.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002692:	688a      	ldr	r2, [r1, #8]
 8002694:	684d      	ldr	r5, [r1, #4]
 8002696:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002698:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800269a:	432a      	orrs	r2, r5
 800269c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026a0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026a4:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80026a6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ae:	609a      	str	r2, [r3, #8]
    break;
 80026b0:	e00c      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 80026b2:	2c10      	cmp	r4, #16
 80026b4:	d032      	beq.n	800271c <HAL_TIM_ConfigClockSource+0xc8>
 80026b6:	d938      	bls.n	800272a <HAL_TIM_ConfigClockSource+0xd6>
 80026b8:	2c20      	cmp	r4, #32
 80026ba:	d072      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x14e>
 80026bc:	2c30      	cmp	r4, #48	; 0x30
 80026be:	d105      	bne.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 80026c0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80026c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80026c6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 80026ca:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80026cc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80026ce:	2201      	movs	r2, #1
 80026d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80026d8:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80026da:	4618      	mov	r0, r3
}
 80026dc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80026de:	2002      	movs	r0, #2
 80026e0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80026e2:	2c50      	cmp	r4, #80	; 0x50
 80026e4:	d064      	beq.n	80027b0 <HAL_TIM_ConfigClockSource+0x15c>
 80026e6:	2c60      	cmp	r4, #96	; 0x60
 80026e8:	d1f0      	bne.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ea:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80026ec:	684d      	ldr	r5, [r1, #4]
 80026ee:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f0:	f024 0410 	bic.w	r4, r4, #16
 80026f4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80026f8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026fa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002702:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002706:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800270a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800270c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800270e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002710:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002714:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	e7d7      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 800271c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800271e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002722:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e7d0      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 800272a:	2c00      	cmp	r4, #0
 800272c:	d1ce      	bne.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 800272e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002730:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002734:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	e7c7      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002742:	f022 0207 	bic.w	r2, r2, #7
 8002746:	609a      	str	r2, [r3, #8]
    break;
 8002748:	e7c0      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800274a:	688a      	ldr	r2, [r1, #8]
 800274c:	684d      	ldr	r5, [r1, #4]
 800274e:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002750:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002752:	432a      	orrs	r2, r5
 8002754:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002758:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800275c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800275e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002760:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002762:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002766:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800276e:	609a      	str	r2, [r3, #8]
    break;
 8002770:	e7ac      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 8002772:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002774:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002776:	684c      	ldr	r4, [r1, #4]
 8002778:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800277a:	f026 0601 	bic.w	r6, r6, #1
 800277e:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002780:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002782:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002786:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800278a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800278e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002792:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002794:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002796:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800279a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	e794      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 80027a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027a8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	e78d      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 80027b0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80027b4:	684c      	ldr	r4, [r1, #4]
 80027b6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b8:	f026 0601 	bic.w	r6, r6, #1
 80027bc:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80027be:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027c0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027c8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80027cc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80027ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80027d2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027d8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	e775      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x78>
 80027e0:	fffe0088 	.word	0xfffe0088

080027e4 <HAL_TIM_OC_DelayElapsedCallback>:
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop

080027e8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop

080027ec <HAL_TIM_TriggerCallback>:
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027f0:	6803      	ldr	r3, [r0, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	0791      	lsls	r1, r2, #30
{
 80027f6:	b510      	push	{r4, lr}
 80027f8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027fa:	d502      	bpl.n	8002802 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	0792      	lsls	r2, r2, #30
 8002800:	d465      	bmi.n	80028ce <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	0752      	lsls	r2, r2, #29
 8002806:	d502      	bpl.n	800280e <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	0750      	lsls	r0, r2, #29
 800280c:	d44c      	bmi.n	80028a8 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	0711      	lsls	r1, r2, #28
 8002812:	d502      	bpl.n	800281a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	0712      	lsls	r2, r2, #28
 8002818:	d434      	bmi.n	8002884 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	06d0      	lsls	r0, r2, #27
 800281e:	d502      	bpl.n	8002826 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	06d1      	lsls	r1, r2, #27
 8002824:	d41e      	bmi.n	8002864 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	07d2      	lsls	r2, r2, #31
 800282a:	d502      	bpl.n	8002832 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	07d0      	lsls	r0, r2, #31
 8002830:	d46b      	bmi.n	800290a <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	0611      	lsls	r1, r2, #24
 8002836:	d502      	bpl.n	800283e <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	0612      	lsls	r2, r2, #24
 800283c:	d46d      	bmi.n	800291a <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	05d0      	lsls	r0, r2, #23
 8002842:	d502      	bpl.n	800284a <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	0611      	lsls	r1, r2, #24
 8002848:	d46f      	bmi.n	800292a <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	0652      	lsls	r2, r2, #25
 800284e:	d502      	bpl.n	8002856 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	0650      	lsls	r0, r2, #25
 8002854:	d451      	bmi.n	80028fa <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	0691      	lsls	r1, r2, #26
 800285a:	d502      	bpl.n	8002862 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	0692      	lsls	r2, r2, #26
 8002860:	d443      	bmi.n	80028ea <HAL_TIM_IRQHandler+0xfa>
 8002862:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002864:	f06f 0210 	mvn.w	r2, #16
 8002868:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800286a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800286c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800286e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002872:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002874:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002876:	d06c      	beq.n	8002952 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8002878:	f001 f964 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287c:	2200      	movs	r2, #0
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	7722      	strb	r2, [r4, #28]
 8002882:	e7d0      	b.n	8002826 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002884:	f06f 0208 	mvn.w	r2, #8
 8002888:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800288a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800288e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002890:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002892:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002894:	d15a      	bne.n	800294c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	f7ff ffa5 	bl	80027e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff ffa4 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a0:	2200      	movs	r2, #0
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	7722      	strb	r2, [r4, #28]
 80028a6:	e7b8      	b.n	800281a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028a8:	f06f 0204 	mvn.w	r2, #4
 80028ac:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ae:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80028b8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ba:	d144      	bne.n	8002946 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028bc:	f7ff ff92 	bl	80027e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff ff91 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	2200      	movs	r2, #0
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	7722      	strb	r2, [r4, #28]
 80028cc:	e79f      	b.n	800280e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028ce:	f06f 0202 	mvn.w	r2, #2
 80028d2:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d8:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028da:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028dc:	d02d      	beq.n	800293a <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 80028de:	f001 f931 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	2200      	movs	r2, #0
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	7722      	strb	r2, [r4, #28]
 80028e8:	e78b      	b.n	8002802 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028ea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80028ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028f0:	611a      	str	r2, [r3, #16]
}
 80028f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80028f6:	f000 b8d5 	b.w	8002aa4 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff ff73 	bl	80027ec <HAL_TIM_TriggerCallback>
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	e7a5      	b.n	8002856 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800290a:	f06f 0201 	mvn.w	r2, #1
 800290e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002910:	4620      	mov	r0, r4
 8002912:	f001 fc71 	bl	80041f8 <HAL_TIM_PeriodElapsedCallback>
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	e78b      	b.n	8002832 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800291a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800291e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002920:	4620      	mov	r0, r4
 8002922:	f000 f8c1 	bl	8002aa8 <HAL_TIMEx_BreakCallback>
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	e789      	b.n	800283e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800292a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800292e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002930:	4620      	mov	r0, r4
 8002932:	f000 f8bb 	bl	8002aac <HAL_TIMEx_Break2Callback>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	e787      	b.n	800284a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800293a:	f7ff ff53 	bl	80027e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff ff52 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002944:	e7cd      	b.n	80028e2 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	f001 f8fd 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 800294a:	e7bc      	b.n	80028c6 <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 800294c:	f001 f8fa 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8002950:	e7a6      	b.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	f7ff ff47 	bl	80027e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002956:	4620      	mov	r0, r4
 8002958:	f7ff ff46 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
 800295c:	e78e      	b.n	800287c <HAL_TIM_IRQHandler+0x8c>
 800295e:	bf00      	nop

08002960 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002960:	4a2d      	ldr	r2, [pc, #180]	; (8002a18 <TIM_Base_SetConfig+0xb8>)
  tmpcr1 = TIMx->CR1;
 8002962:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002964:	4290      	cmp	r0, r2
{
 8002966:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002968:	d04e      	beq.n	8002a08 <TIM_Base_SetConfig+0xa8>
 800296a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800296e:	d02f      	beq.n	80029d0 <TIM_Base_SetConfig+0x70>
 8002970:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002974:	4290      	cmp	r0, r2
 8002976:	d02b      	beq.n	80029d0 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002978:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800297c:	4290      	cmp	r0, r2
 800297e:	d014      	beq.n	80029aa <TIM_Base_SetConfig+0x4a>
 8002980:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002984:	4290      	cmp	r0, r2
 8002986:	d010      	beq.n	80029aa <TIM_Base_SetConfig+0x4a>
 8002988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800298c:	4290      	cmp	r0, r2
 800298e:	d00c      	beq.n	80029aa <TIM_Base_SetConfig+0x4a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002990:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002992:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002994:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800299c:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800299e:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a0:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80029a2:	6282      	str	r2, [r0, #40]	; 0x28
}
 80029a4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 80029a6:	6143      	str	r3, [r0, #20]
}
 80029a8:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029aa:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ac:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029bc:	688b      	ldr	r3, [r1, #8]
 80029be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80029c0:	680b      	ldr	r3, [r1, #0]
 80029c2:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80029c4:	690b      	ldr	r3, [r1, #16]
 80029c6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80029c8:	2301      	movs	r3, #1
 80029ca:	6143      	str	r3, [r0, #20]
}
 80029cc:	bcf0      	pop	{r4, r5, r6, r7}
 80029ce:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80029d0:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d2:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d4:	694a      	ldr	r2, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d6:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80029d8:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029de:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ea:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029ec:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <TIM_Base_SetConfig+0xbc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f0:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80029f2:	4298      	cmp	r0, r3
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80029f4:	6285      	str	r5, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80029f6:	d0e5      	beq.n	80029c4 <TIM_Base_SetConfig+0x64>
 80029f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029fc:	4298      	cmp	r0, r3
 80029fe:	d0e1      	beq.n	80029c4 <TIM_Base_SetConfig+0x64>
  TIMx->EGR = TIM_EGR_UG;
 8002a00:	2301      	movs	r3, #1
 8002a02:	6143      	str	r3, [r0, #20]
}
 8002a04:	bcf0      	pop	{r4, r5, r6, r7}
 8002a06:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002a08:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a0c:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a12:	432b      	orrs	r3, r5
 8002a14:	e7cb      	b.n	80029ae <TIM_Base_SetConfig+0x4e>
 8002a16:	bf00      	nop
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40014400 	.word	0x40014400

08002a20 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002a20:	b1b8      	cbz	r0, 8002a52 <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 8002a26:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	b15b      	cbz	r3, 8002a48 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8002a30:	2302      	movs	r3, #2
 8002a32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	1d21      	adds	r1, r4, #4
 8002a3a:	f7ff ff91 	bl	8002960 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a44:	2000      	movs	r0, #0
 8002a46:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a4c:	f001 fe02 	bl	8004654 <HAL_TIM_Base_MspInit>
 8002a50:	e7ee      	b.n	8002a30 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop

08002a58 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002a58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d016      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x36>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a60:	6802      	ldr	r2, [r0, #0]
{
 8002a62:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a64:	4d0e      	ldr	r5, [pc, #56]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8002a66:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a6a:	42aa      	cmp	r2, r5
 8002a6c:	d012      	beq.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a6e:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a70:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a76:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a7a:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002a7c:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a7e:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8002a80:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002a82:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002a84:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  
  return HAL_OK;
} 
 8002a88:	4620      	mov	r0, r4
 8002a8a:	bc70      	pop	{r4, r5, r6}
 8002a8c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a8e:	2302      	movs	r3, #2
} 
 8002a90:	4618      	mov	r0, r3
 8002a92:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a94:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a9a:	432b      	orrs	r3, r5
 8002a9c:	e7e7      	b.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x16>
 8002a9e:	bf00      	nop
 8002aa0:	40012c00 	.word	0x40012c00

08002aa4 <HAL_TIMEx_CommutationCallback>:
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop

08002aa8 <HAL_TIMEx_BreakCallback>:
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop

08002aac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop

08002ab0 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002ab0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d001      	beq.n	8002abc <HAL_UART_Transmit_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2002      	movs	r0, #2
 8002aba:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002abc:	b1c9      	cbz	r1, 8002af2 <HAL_UART_Transmit_IT+0x42>
 8002abe:	b1c2      	cbz	r2, 8002af2 <HAL_UART_Transmit_IT+0x42>
    __HAL_LOCK(huart);
 8002ac0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d0f7      	beq.n	8002ab8 <HAL_UART_Transmit_IT+0x8>
{
 8002ac8:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aca:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002acc:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 8002ace:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad2:	2421      	movs	r4, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad6:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ada:	682c      	ldr	r4, [r5, #0]
    huart->pTxBuffPtr = pData;
 8002adc:	64c1      	str	r1, [r0, #76]	; 0x4c
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ade:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 8002ae2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    __HAL_UNLOCK(huart);
 8002ae6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 8002aea:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002aec:	602c      	str	r4, [r5, #0]
  }
}
 8002aee:	bc30      	pop	{r4, r5}
 8002af0:	4770      	bx	lr
      return HAL_ERROR;
 8002af2:	2001      	movs	r0, #1
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002af8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d001      	beq.n	8002b04 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2002      	movs	r0, #2
  }
}
 8002b02:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002b04:	b349      	cbz	r1, 8002b5a <HAL_UART_Receive_IT+0x62>
 8002b06:	b342      	cbz	r2, 8002b5a <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 8002b08:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d0f7      	beq.n	8002b00 <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 8002b10:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8002b12:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 8002b18:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 8002b1c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b20:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 8002b24:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8002b28:	d027      	beq.n	8002b7a <HAL_UART_Receive_IT+0x82>
 8002b2a:	b9c3      	cbnz	r3, 8002b5e <HAL_UART_Receive_IT+0x66>
 8002b2c:	6903      	ldr	r3, [r0, #16]
 8002b2e:	b303      	cbz	r3, 8002b72 <HAL_UART_Receive_IT+0x7a>
 8002b30:	237f      	movs	r3, #127	; 0x7f
 8002b32:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b38:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b3a:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b3e:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b42:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8002b44:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b48:	f041 0101 	orr.w	r1, r1, #1
 8002b4c:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b4e:	6811      	ldr	r1, [r2, #0]
 8002b50:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 8002b54:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b56:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002b58:	4770      	bx	lr
      return HAL_ERROR;
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b62:	d1e8      	bne.n	8002b36 <HAL_UART_Receive_IT+0x3e>
 8002b64:	6903      	ldr	r3, [r0, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0e2      	beq.n	8002b30 <HAL_UART_Receive_IT+0x38>
 8002b6a:	233f      	movs	r3, #63	; 0x3f
 8002b6c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002b70:	e7e1      	b.n	8002b36 <HAL_UART_Receive_IT+0x3e>
 8002b72:	23ff      	movs	r3, #255	; 0xff
 8002b74:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002b78:	e7dd      	b.n	8002b36 <HAL_UART_Receive_IT+0x3e>
 8002b7a:	6903      	ldr	r3, [r0, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f8      	bne.n	8002b72 <HAL_UART_Receive_IT+0x7a>
 8002b80:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002b84:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002b88:	e7d5      	b.n	8002b36 <HAL_UART_Receive_IT+0x3e>
 8002b8a:	bf00      	nop

08002b8c <HAL_UART_TxCpltCallback>:
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop

08002b90 <HAL_UART_ErrorCallback>:
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop

08002b94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b94:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002b96:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 8002b9e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8002ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002ba4:	f7ff fff4 	bl	8002b90 <HAL_UART_ErrorCallback>
 8002ba8:	bd08      	pop	{r3, pc}
 8002baa:	bf00      	nop

08002bac <UART_SetConfig>:
{
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bae:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bb0:	6907      	ldr	r7, [r0, #16]
 8002bb2:	6883      	ldr	r3, [r0, #8]
 8002bb4:	6946      	ldr	r6, [r0, #20]
 8002bb6:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bb8:	4a62      	ldr	r2, [pc, #392]	; (8002d44 <UART_SetConfig+0x198>)
{
 8002bba:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bbc:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bbe:	6820      	ldr	r0, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002bc0:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc2:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bc4:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bcc:	6862      	ldr	r2, [r4, #4]
 8002bce:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002bd0:	69ab      	ldr	r3, [r5, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bd2:	485d      	ldr	r0, [pc, #372]	; (8002d48 <UART_SetConfig+0x19c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002bd8:	4332      	orrs	r2, r6
 8002bda:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002bdc:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002bde:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002be0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002be4:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be6:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002be8:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bea:	d01b      	beq.n	8002c24 <UART_SetConfig+0x78>
 8002bec:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <UART_SetConfig+0x1a0>)
 8002bee:	429c      	cmp	r4, r3
 8002bf0:	d00a      	beq.n	8002c08 <UART_SetConfig+0x5c>
 8002bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf6:	429c      	cmp	r4, r3
 8002bf8:	d006      	beq.n	8002c08 <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bfa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002bfe:	d158      	bne.n	8002cb2 <UART_SetConfig+0x106>
 8002c00:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8002c02:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8002c04:	60e3      	str	r3, [r4, #12]
 8002c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c08:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002c0c:	d053      	beq.n	8002cb6 <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c0e:	f7ff fbef 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8002c12:	686b      	ldr	r3, [r5, #4]
 8002c14:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c18:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c1c:	b280      	uxth	r0, r0
 8002c1e:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c20:	2000      	movs	r0, #0
        break;
 8002c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c24:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <UART_SetConfig+0x1a4>)
 8002c26:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <UART_SetConfig+0x1a8>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c2e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	d051      	beq.n	8002cda <UART_SetConfig+0x12e>
    switch (clocksource)
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d83b      	bhi.n	8002cb2 <UART_SetConfig+0x106>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <UART_SetConfig+0x94>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c0f 	.word	0x08002c0f
 8002c44:	08002cad 	.word	0x08002cad
 8002c48:	08002c93 	.word	0x08002c93
 8002c4c:	08002cb3 	.word	0x08002cb3
 8002c50:	08002c7b 	.word	0x08002c7b
 8002c54:	08002cb3 	.word	0x08002cb3
 8002c58:	08002cb3 	.word	0x08002cb3
 8002c5c:	08002cb3 	.word	0x08002cb3
 8002c60:	08002c65 	.word	0x08002c65
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c64:	686a      	ldr	r2, [r5, #4]
 8002c66:	4938      	ldr	r1, [pc, #224]	; (8002d48 <UART_SetConfig+0x19c>)
 8002c68:	0853      	lsrs	r3, r2, #1
 8002c6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c76:	2000      	movs	r0, #0
        break;
 8002c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c7a:	f7ff fab7 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002c7e:	686b      	ldr	r3, [r5, #4]
 8002c80:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <UART_SetConfig+0x19c>)
 8002c82:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c86:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c8a:	b280      	uxth	r0, r0
 8002c8c:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c8e:	2000      	movs	r0, #0
        break;
 8002c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c92:	686a      	ldr	r2, [r5, #4]
 8002c94:	492c      	ldr	r1, [pc, #176]	; (8002d48 <UART_SetConfig+0x19c>)
 8002c96:	0853      	lsrs	r3, r2, #1
 8002c98:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002c9c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca8:	2000      	movs	r0, #0
        break;
 8002caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002cac:	f7ff fbb8 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8002cb0:	e7e5      	b.n	8002c7e <UART_SetConfig+0xd2>
        ret = HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
  return ret;
 8002cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cb6:	f7ff fb9b 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002cba:	686a      	ldr	r2, [r5, #4]
 8002cbc:	682c      	ldr	r4, [r5, #0]
 8002cbe:	0853      	lsrs	r3, r2, #1
 8002cc0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002cc4:	fbb0 f0f2 	udiv	r0, r0, r2
 8002cc8:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8002ccc:	f020 000f 	bic.w	r0, r0, #15
 8002cd0:	4303      	orrs	r3, r0
 8002cd2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd4:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8002cd6:	60e3      	str	r3, [r4, #12]
 8002cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d890      	bhi.n	8002c00 <UART_SetConfig+0x54>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <UART_SetConfig+0x138>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002cb7 	.word	0x08002cb7
 8002ce8:	08002d09 	.word	0x08002d09
 8002cec:	08002d31 	.word	0x08002d31
 8002cf0:	08002c01 	.word	0x08002c01
 8002cf4:	08002d2b 	.word	0x08002d2b
 8002cf8:	08002c01 	.word	0x08002c01
 8002cfc:	08002c01 	.word	0x08002c01
 8002d00:	08002c01 	.word	0x08002c01
 8002d04:	08002d0f 	.word	0x08002d0f
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d08:	f7ff fb8a 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8002d0c:	e7d5      	b.n	8002cba <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d0e:	686b      	ldr	r3, [r5, #4]
 8002d10:	085a      	lsrs	r2, r3, #1
 8002d12:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d1a:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8002d1e:	f022 020f 	bic.w	r2, r2, #15
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d26:	2000      	movs	r0, #0
        break;
 8002d28:	e76c      	b.n	8002c04 <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d2a:	f7ff fa5f 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002d2e:	e7c4      	b.n	8002cba <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d30:	686a      	ldr	r2, [r5, #4]
 8002d32:	0853      	lsrs	r3, r2, #1
 8002d34:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d38:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002d3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d40:	e7eb      	b.n	8002d1a <UART_SetConfig+0x16e>
 8002d42:	bf00      	nop
 8002d44:	efff69f3 	.word	0xefff69f3
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40004400 	.word	0x40004400
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08005378 	.word	0x08005378

08002d58 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d5a:	07da      	lsls	r2, r3, #31
{
 8002d5c:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d5e:	d506      	bpl.n	8002d6e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d60:	6801      	ldr	r1, [r0, #0]
 8002d62:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002d64:	684a      	ldr	r2, [r1, #4]
 8002d66:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002d6a:	4322      	orrs	r2, r4
 8002d6c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d6e:	079c      	lsls	r4, r3, #30
 8002d70:	d506      	bpl.n	8002d80 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d72:	6801      	ldr	r1, [r0, #0]
 8002d74:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002d76:	684a      	ldr	r2, [r1, #4]
 8002d78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d7c:	4322      	orrs	r2, r4
 8002d7e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d80:	0759      	lsls	r1, r3, #29
 8002d82:	d506      	bpl.n	8002d92 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d84:	6801      	ldr	r1, [r0, #0]
 8002d86:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002d88:	684a      	ldr	r2, [r1, #4]
 8002d8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d8e:	4322      	orrs	r2, r4
 8002d90:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d92:	071a      	lsls	r2, r3, #28
 8002d94:	d506      	bpl.n	8002da4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d96:	6801      	ldr	r1, [r0, #0]
 8002d98:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002d9a:	684a      	ldr	r2, [r1, #4]
 8002d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da0:	4322      	orrs	r2, r4
 8002da2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002da4:	06dc      	lsls	r4, r3, #27
 8002da6:	d506      	bpl.n	8002db6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002da8:	6801      	ldr	r1, [r0, #0]
 8002daa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002dac:	688a      	ldr	r2, [r1, #8]
 8002dae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002db2:	4322      	orrs	r2, r4
 8002db4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002db6:	0699      	lsls	r1, r3, #26
 8002db8:	d506      	bpl.n	8002dc8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dba:	6801      	ldr	r1, [r0, #0]
 8002dbc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002dbe:	688a      	ldr	r2, [r1, #8]
 8002dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc4:	4322      	orrs	r2, r4
 8002dc6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dc8:	065a      	lsls	r2, r3, #25
 8002dca:	d509      	bpl.n	8002de0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dcc:	6801      	ldr	r1, [r0, #0]
 8002dce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002dd0:	684a      	ldr	r2, [r1, #4]
 8002dd2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002dd6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dd8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ddc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dde:	d00b      	beq.n	8002df8 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	d506      	bpl.n	8002df2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002de4:	6802      	ldr	r2, [r0, #0]
 8002de6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002de8:	6853      	ldr	r3, [r2, #4]
 8002dea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002dee:	430b      	orrs	r3, r1
 8002df0:	6053      	str	r3, [r2, #4]
}
 8002df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002df6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002df8:	684a      	ldr	r2, [r1, #4]
 8002dfa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002dfc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002e00:	4322      	orrs	r2, r4
 8002e02:	604a      	str	r2, [r1, #4]
 8002e04:	e7ec      	b.n	8002de0 <UART_AdvFeatureConfig+0x88>
 8002e06:	bf00      	nop

08002e08 <UART_WaitOnFlagUntilTimeout>:
{
 8002e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e0c:	9d08      	ldr	r5, [sp, #32]
 8002e0e:	4680      	mov	r8, r0
 8002e10:	460f      	mov	r7, r1
 8002e12:	4616      	mov	r6, r2
 8002e14:	4699      	mov	r9, r3
 8002e16:	f8d8 4000 	ldr.w	r4, [r8]
 8002e1a:	e001      	b.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 8002e1c:	1c6b      	adds	r3, r5, #1
 8002e1e:	d10a      	bne.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	69e0      	ldr	r0, [r4, #28]
 8002e22:	ea37 0300 	bics.w	r3, r7, r0
 8002e26:	bf0c      	ite	eq
 8002e28:	2001      	moveq	r0, #1
 8002e2a:	2000      	movne	r0, #0
 8002e2c:	42b0      	cmp	r0, r6
 8002e2e:	d0f5      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8002e30:	2000      	movs	r0, #0
}
 8002e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e36:	b13d      	cbz	r5, 8002e48 <UART_WaitOnFlagUntilTimeout+0x40>
 8002e38:	f7fe f886 	bl	8000f48 <HAL_GetTick>
 8002e3c:	eba0 0009 	sub.w	r0, r0, r9
 8002e40:	4285      	cmp	r5, r0
 8002e42:	d2e8      	bcs.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xe>
 8002e44:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e4e:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e50:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002e52:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e54:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002e58:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5a:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 8002e5c:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002e5e:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8002e62:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8002e66:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 8002e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e6e:	bf00      	nop

08002e70 <HAL_UART_Transmit>:
{
 8002e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e74:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8002e76:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 8002e7a:	2920      	cmp	r1, #32
{
 8002e7c:	b084      	sub	sp, #16
  if(huart->gState == HAL_UART_STATE_READY)
 8002e7e:	d003      	beq.n	8002e88 <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 8002e80:	2002      	movs	r0, #2
}
 8002e82:	b004      	add	sp, #16
 8002e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((pData == NULL ) || (Size == 0U))
 8002e88:	b395      	cbz	r5, 8002ef0 <HAL_UART_Transmit+0x80>
 8002e8a:	b38a      	cbz	r2, 8002ef0 <HAL_UART_Transmit+0x80>
 8002e8c:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8002e8e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	4604      	mov	r4, r0
 8002e96:	d0f3      	beq.n	8002e80 <HAL_UART_Transmit+0x10>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e98:	2000      	movs	r0, #0
    __HAL_LOCK(huart);
 8002e9a:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	66e0      	str	r0, [r4, #108]	; 0x6c
    __HAL_LOCK(huart);
 8002ea0:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8002ea8:	9203      	str	r2, [sp, #12]
    tickstart = HAL_GetTick();
 8002eaa:	f7fe f84d 	bl	8000f48 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002eae:	9a03      	ldr	r2, [sp, #12]
 8002eb0:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002eb4:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 8002eb6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002eba:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
 8002ebe:	b2b6      	uxth	r6, r6
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec0:	4643      	mov	r3, r8
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	4620      	mov	r0, r4
    while(huart->TxXferCount > 0U)
 8002ec8:	b306      	cbz	r6, 8002f0c <HAL_UART_Transmit+0x9c>
      huart->TxXferCount--;
 8002eca:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002ed0:	3e01      	subs	r6, #1
 8002ed2:	b2b6      	uxth	r6, r6
 8002ed4:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed8:	f7ff ff96 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002edc:	b9a0      	cbnz	r0, 8002f08 <HAL_UART_Transmit+0x98>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ede:	68a3      	ldr	r3, [r4, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee4:	d006      	beq.n	8002ef4 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	782a      	ldrb	r2, [r5, #0]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
 8002eec:	3501      	adds	r5, #1
 8002eee:	e7e4      	b.n	8002eba <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	e7c6      	b.n	8002e82 <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef4:	6923      	ldr	r3, [r4, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f5      	bne.n	8002ee6 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002efa:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f04:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002f06:	e7d8      	b.n	8002eba <HAL_UART_Transmit+0x4a>
        return HAL_TIMEOUT;
 8002f08:	2003      	movs	r0, #3
 8002f0a:	e7ba      	b.n	8002e82 <HAL_UART_Transmit+0x12>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0c:	9700      	str	r7, [sp, #0]
 8002f0e:	4632      	mov	r2, r6
 8002f10:	2140      	movs	r1, #64	; 0x40
 8002f12:	f7ff ff79 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d1f6      	bne.n	8002f08 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_READY;
 8002f1a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002f1c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8002f20:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8002f24:	e7ad      	b.n	8002e82 <HAL_UART_Transmit+0x12>
 8002f26:	bf00      	nop

08002f28 <UART_CheckIdleState>:
{
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	2500      	movs	r5, #0
{
 8002f2e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002f32:	f7fe f809 	bl	8000f48 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8002f3c:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f3e:	d40c      	bmi.n	8002f5a <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	075b      	lsls	r3, r3, #29
 8002f44:	d417      	bmi.n	8002f76 <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 8002f46:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002f48:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002f4a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002f4e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002f52:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8002f56:	b002      	add	sp, #8
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	462a      	mov	r2, r5
 8002f62:	4603      	mov	r3, r0
 8002f64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff ff4d 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002f6e:	b180      	cbz	r0, 8002f92 <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 8002f70:	2003      	movs	r0, #3
}
 8002f72:	b002      	add	sp, #8
 8002f74:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f76:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	4633      	mov	r3, r6
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff ff3f 	bl	8002e08 <UART_WaitOnFlagUntilTimeout>
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d0db      	beq.n	8002f46 <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 8002f8e:	2003      	movs	r0, #3
 8002f90:	e7ef      	b.n	8002f72 <UART_CheckIdleState+0x4a>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	e7d4      	b.n	8002f40 <UART_CheckIdleState+0x18>
 8002f96:	bf00      	nop

08002f98 <HAL_UART_Init>:
  if(huart == NULL)
 8002f98:	b390      	cbz	r0, 8003000 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002f9a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8002f9e:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8002fa0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	b303      	cbz	r3, 8002fea <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8002fa8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002faa:	2324      	movs	r3, #36	; 0x24
 8002fac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002fb0:	6813      	ldr	r3, [r2, #0]
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff fdf7 	bl	8002bac <UART_SetConfig>
 8002fbe:	2801      	cmp	r0, #1
 8002fc0:	d018      	beq.n	8002ff4 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fc4:	b9c3      	cbnz	r3, 8002ff8 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002fde:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002fe0:	601a      	str	r2, [r3, #0]
}
 8002fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002fe6:	f7ff bf9f 	b.w	8002f28 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 8002fea:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002fee:	f001 fb63 	bl	80046b8 <HAL_UART_MspInit>
 8002ff2:	e7d9      	b.n	8002fa8 <HAL_UART_Init+0x10>
}
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff fead 	bl	8002d58 <UART_AdvFeatureConfig>
 8002ffe:	e7e2      	b.n	8002fc6 <HAL_UART_Init+0x2e>
}
 8003000:	2001      	movs	r0, #1
 8003002:	4770      	bx	lr

08003004 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003004:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003008:	2b21      	cmp	r3, #33	; 0x21
 800300a:	d001      	beq.n	8003010 <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800300c:	2002      	movs	r0, #2
  }
}
 800300e:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8003010:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003014:	b29b      	uxth	r3, r3
 8003016:	b18b      	cbz	r3, 800303c <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	6883      	ldr	r3, [r0, #8]
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	d018      	beq.n	8003052 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003020:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003022:	6802      	ldr	r2, [r0, #0]
 8003024:	1c59      	adds	r1, r3, #1
 8003026:	64c1      	str	r1, [r0, #76]	; 0x4c
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800302c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003030:	3b01      	subs	r3, #1
 8003032:	b29b      	uxth	r3, r3
 8003034:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8003038:	2000      	movs	r0, #0
 800303a:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800303c:	6802      	ldr	r2, [r0, #0]
 800303e:	6811      	ldr	r1, [r2, #0]
 8003040:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003044:	6011      	str	r1, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003046:	6811      	ldr	r1, [r2, #0]
 8003048:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800304c:	4618      	mov	r0, r3
 800304e:	6011      	str	r1, [r2, #0]
 8003050:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003052:	6903      	ldr	r3, [r0, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e3      	bne.n	8003020 <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003058:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800305a:	6801      	ldr	r1, [r0, #0]
 800305c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003064:	850a      	strh	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003066:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003068:	e7e0      	b.n	800302c <UART_Transmit_IT+0x28>
 800306a:	bf00      	nop

0800306c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800306c:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800306e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003072:	2b22      	cmp	r3, #34	; 0x22
 8003074:	d006      	beq.n	8003084 <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003076:	6802      	ldr	r2, [r0, #0]
 8003078:	6993      	ldr	r3, [r2, #24]
 800307a:	f043 0308 	orr.w	r3, r3, #8
 800307e:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8003080:	2002      	movs	r0, #2
 8003082:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003084:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003086:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003088:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 800308a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003092:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003094:	d01d      	beq.n	80030d2 <UART_Receive_IT+0x66>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003096:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003098:	400b      	ands	r3, r1
 800309a:	1c51      	adds	r1, r2, #1
 800309c:	6541      	str	r1, [r0, #84]	; 0x54
 800309e:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 80030a0:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80030a4:	3c01      	subs	r4, #1
 80030a6:	b2a4      	uxth	r4, r4
 80030a8:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80030ac:	b10c      	cbz	r4, 80030b2 <UART_Receive_IT+0x46>
    return HAL_OK;
 80030ae:	2000      	movs	r0, #0
  }
}
 80030b0:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b2:	6803      	ldr	r3, [r0, #0]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80030ba:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030bc:	6899      	ldr	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80030be:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	f021 0101 	bic.w	r1, r1, #1
 80030c4:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80030c6:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80030ca:	f000 fb1d 	bl	8003708 <HAL_UART_RxCpltCallback>
 80030ce:	4620      	mov	r0, r4
 80030d0:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d2:	6902      	ldr	r2, [r0, #16]
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d1de      	bne.n	8003096 <UART_Receive_IT+0x2a>
      *tmp = (uint16_t)(uhdata & uhMask);
 80030d8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80030da:	400b      	ands	r3, r1
 80030dc:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 80030e0:	6542      	str	r2, [r0, #84]	; 0x54
 80030e2:	e7dd      	b.n	80030a0 <UART_Receive_IT+0x34>

080030e4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030e4:	6803      	ldr	r3, [r0, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e8:	6819      	ldr	r1, [r3, #0]
{
 80030ea:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80030ec:	0715      	lsls	r5, r2, #28
{
 80030ee:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80030f0:	d110      	bne.n	8003114 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030f2:	0696      	lsls	r6, r2, #26
 80030f4:	d45b      	bmi.n	80031ae <HAL_UART_IRQHandler+0xca>
  cr3its = READ_REG(huart->Instance->CR3);
 80030f6:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80030f8:	02d5      	lsls	r5, r2, #11
 80030fa:	d501      	bpl.n	8003100 <HAL_UART_IRQHandler+0x1c>
 80030fc:	0240      	lsls	r0, r0, #9
 80030fe:	d47f      	bmi.n	8003200 <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003100:	0616      	lsls	r6, r2, #24
 8003102:	d502      	bpl.n	800310a <HAL_UART_IRQHandler+0x26>
 8003104:	060d      	lsls	r5, r1, #24
 8003106:	f100 808c 	bmi.w	8003222 <HAL_UART_IRQHandler+0x13e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800310a:	0650      	lsls	r0, r2, #25
 800310c:	d501      	bpl.n	8003112 <HAL_UART_IRQHandler+0x2e>
 800310e:	064a      	lsls	r2, r1, #25
 8003110:	d464      	bmi.n	80031dc <HAL_UART_IRQHandler+0xf8>
 8003112:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8003114:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003116:	f010 0501 	ands.w	r5, r0, #1
 800311a:	d04e      	beq.n	80031ba <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800311c:	07d6      	lsls	r6, r2, #31
 800311e:	d507      	bpl.n	8003130 <HAL_UART_IRQHandler+0x4c>
 8003120:	05c8      	lsls	r0, r1, #23
 8003122:	d505      	bpl.n	8003130 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003124:	2001      	movs	r0, #1
 8003126:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003128:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800312a:	f040 0001 	orr.w	r0, r0, #1
 800312e:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003130:	0796      	lsls	r6, r2, #30
 8003132:	d548      	bpl.n	80031c6 <HAL_UART_IRQHandler+0xe2>
 8003134:	b13d      	cbz	r5, 8003146 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003136:	2002      	movs	r0, #2
 8003138:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800313c:	f040 0004 	orr.w	r0, r0, #4
 8003140:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003142:	0750      	lsls	r0, r2, #29
 8003144:	d443      	bmi.n	80031ce <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003146:	0710      	lsls	r0, r2, #28
 8003148:	d503      	bpl.n	8003152 <HAL_UART_IRQHandler+0x6e>
 800314a:	068e      	lsls	r6, r1, #26
 800314c:	d451      	bmi.n	80031f2 <HAL_UART_IRQHandler+0x10e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800314e:	2d00      	cmp	r5, #0
 8003150:	d14f      	bne.n	80031f2 <HAL_UART_IRQHandler+0x10e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003152:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003154:	2800      	cmp	r0, #0
 8003156:	d0dc      	beq.n	8003112 <HAL_UART_IRQHandler+0x2e>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003158:	0690      	lsls	r0, r2, #26
 800315a:	d501      	bpl.n	8003160 <HAL_UART_IRQHandler+0x7c>
 800315c:	0689      	lsls	r1, r1, #26
 800315e:	d465      	bmi.n	800322c <HAL_UART_IRQHandler+0x148>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003160:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003162:	0712      	lsls	r2, r2, #28
 8003164:	d403      	bmi.n	800316e <HAL_UART_IRQHandler+0x8a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003166:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003168:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800316c:	d063      	beq.n	8003236 <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003174:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003178:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	0656      	lsls	r6, r2, #25
 8003188:	d547      	bpl.n	800321a <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800318a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800318c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800318e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003192:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003194:	2800      	cmp	r0, #0
 8003196:	d040      	beq.n	800321a <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003198:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_UART_IRQHandler+0x15c>)
 800319a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800319c:	f7fe fbea 	bl	8001974 <HAL_DMA_Abort_IT>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d0b6      	beq.n	8003112 <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80031a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031ac:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ae:	068d      	lsls	r5, r1, #26
 80031b0:	d5a1      	bpl.n	80030f6 <HAL_UART_IRQHandler+0x12>
}
 80031b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80031b6:	f7ff bf59 	b.w	800306c <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80031ba:	f411 7f90 	tst.w	r1, #288	; 0x120
 80031be:	d09b      	beq.n	80030f8 <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031c0:	07d6      	lsls	r6, r2, #31
 80031c2:	d5b5      	bpl.n	8003130 <HAL_UART_IRQHandler+0x4c>
 80031c4:	e7ac      	b.n	8003120 <HAL_UART_IRQHandler+0x3c>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c6:	0756      	lsls	r6, r2, #29
 80031c8:	d5bd      	bpl.n	8003146 <HAL_UART_IRQHandler+0x62>
 80031ca:	2d00      	cmp	r5, #0
 80031cc:	d0bb      	beq.n	8003146 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80031ce:	2004      	movs	r0, #4
 80031d0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80031d4:	f040 0002 	orr.w	r0, r0, #2
 80031d8:	66e0      	str	r0, [r4, #108]	; 0x6c
 80031da:	e7b4      	b.n	8003146 <HAL_UART_IRQHandler+0x62>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031dc:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80031de:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e4:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80031e6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80031ec:	f7ff fcce 	bl	8002b8c <HAL_UART_TxCpltCallback>
 80031f0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80031f2:	2008      	movs	r0, #8
 80031f4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80031f8:	f040 0008 	orr.w	r0, r0, #8
 80031fc:	66e0      	str	r0, [r4, #108]	; 0x6c
 80031fe:	e7a8      	b.n	8003152 <HAL_UART_IRQHandler+0x6e>
    huart->gState  = HAL_UART_STATE_READY;
 8003200:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003202:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003206:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003208:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 800320a:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800320e:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8003212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003216:	f000 b815 	b.w	8003244 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff fcb8 	bl	8002b90 <HAL_UART_ErrorCallback>
 8003220:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8003222:	4620      	mov	r0, r4
}
 8003224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8003228:	f7ff beec 	b.w	8003004 <UART_Transmit_IT>
        UART_Receive_IT(huart);
 800322c:	4620      	mov	r0, r4
 800322e:	f7ff ff1d 	bl	800306c <UART_Receive_IT>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	e794      	b.n	8003160 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff fcaa 	bl	8002b90 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	08002b95 	.word	0x08002b95

08003244 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop

08003248 <uart_comms>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void uart_comms(){
 8003248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
	uart_command[uart_counter] = rx_buffer;
 800324c:	4cbc      	ldr	r4, [pc, #752]	; (8003540 <uart_comms+0x2f8>)
 800324e:	4dbd      	ldr	r5, [pc, #756]	; (8003544 <uart_comms+0x2fc>)
 8003250:	49bd      	ldr	r1, [pc, #756]	; (8003548 <uart_comms+0x300>)
 8003252:	7823      	ldrb	r3, [r4, #0]
 8003254:	682a      	ldr	r2, [r5, #0]
	rx_flag = 0;
 8003256:	48bd      	ldr	r0, [pc, #756]	; (800354c <uart_comms+0x304>)
	uart_command[uart_counter] = rx_buffer;
 8003258:	7809      	ldrb	r1, [r1, #0]
	rx_flag = 0;
 800325a:	2600      	movs	r6, #0
 800325c:	7006      	strb	r6, [r0, #0]
	uart_command[uart_counter] = rx_buffer;
 800325e:	54d1      	strb	r1, [r2, r3]
	if(uart_command[0] == '$'){
 8003260:	682a      	ldr	r2, [r5, #0]
 8003262:	7813      	ldrb	r3, [r2, #0]
 8003264:	2b24      	cmp	r3, #36	; 0x24

	uart_counter += 1;
 8003266:	7823      	ldrb	r3, [r4, #0]
	if(uart_command[0] == '$'){
 8003268:	d005      	beq.n	8003276 <uart_comms+0x2e>
				 }
				memset(uart_command,0x00, 40);
				memset(return_value,0x00, 50);
				uart_counter = 0;
		  }
		  else if(uart_counter > 39 ){
 800326a:	2b27      	cmp	r3, #39	; 0x27
			  uart_counter = 0;
 800326c:	bf84      	itt	hi
 800326e:	2300      	movhi	r3, #0
 8003270:	7023      	strbhi	r3, [r4, #0]
 8003272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uart_counter += 1;
 8003276:	3301      	adds	r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	7023      	strb	r3, [r4, #0]
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 800327c:	7811      	ldrb	r1, [r2, #0]
 800327e:	2924      	cmp	r1, #36	; 0x24
 8003280:	d1f3      	bne.n	800326a <uart_comms+0x22>
 8003282:	18d1      	adds	r1, r2, r3
 8003284:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8003288:	280a      	cmp	r0, #10
 800328a:	d1ee      	bne.n	800326a <uart_comms+0x22>
 800328c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 8003290:	290d      	cmp	r1, #13
 8003292:	d1ea      	bne.n	800326a <uart_comms+0x22>
 8003294:	2b02      	cmp	r3, #2
 8003296:	d9ec      	bls.n	8003272 <uart_comms+0x2a>
		switch(uart_command[1]){
 8003298:	7853      	ldrb	r3, [r2, #1]
 800329a:	3b41      	subs	r3, #65	; 0x41
 800329c:	2b0a      	cmp	r3, #10
 800329e:	f200 8214 	bhi.w	80036ca <uart_comms+0x482>
 80032a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80032a6:	01b3      	.short	0x01b3
 80032a8:	019901d1 	.word	0x019901d1
 80032ac:	013d0175 	.word	0x013d0175
 80032b0:	00fa011c 	.word	0x00fa011c
 80032b4:	00e700f1 	.word	0x00e700f1
 80032b8:	000b00de 	.word	0x000b00de
					 memcpy(return_value, uart_command, 2);
 80032bc:	4ea4      	ldr	r6, [pc, #656]	; (8003550 <uart_comms+0x308>)
 80032be:	8812      	ldrh	r2, [r2, #0]
 80032c0:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2,comma,1 );
 80032c2:	4fa4      	ldr	r7, [pc, #656]	; (8003554 <uart_comms+0x30c>)
					 memcpy(return_value, uart_command, 2);
 80032c4:	801a      	strh	r2, [r3, #0]
					 memcpy(return_value+2,comma,1 );
 80032c6:	6832      	ldr	r2, [r6, #0]
 80032c8:	f897 9000 	ldrb.w	r9, [r7]
					 memcpy(return_value+3,current_rms,strlen(current_rms));
 80032cc:	4ba2      	ldr	r3, [pc, #648]	; (8003558 <uart_comms+0x310>)
					 memcpy(return_value+2,comma,1 );
 80032ce:	f882 9002 	strb.w	r9, [r2, #2]
					 memcpy(return_value+3,current_rms,strlen(current_rms));
 80032d2:	f8d3 8000 	ldr.w	r8, [r3]
 80032d6:	4640      	mov	r0, r8
 80032d8:	f7fc ff7a 	bl	80001d0 <strlen>
 80032dc:	6833      	ldr	r3, [r6, #0]
 80032de:	4602      	mov	r2, r0
 80032e0:	4641      	mov	r1, r8
 80032e2:	1cd8      	adds	r0, r3, #3
 80032e4:	f001 fad8 	bl	8004898 <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 80032e8:	f8d6 8000 	ldr.w	r8, [r6]
 80032ec:	4640      	mov	r0, r8
 80032ee:	f7fc ff6f 	bl	80001d0 <strlen>
 80032f2:	f808 9000 	strb.w	r9, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 80032f6:	f8d6 8000 	ldr.w	r8, [r6]
 80032fa:	4640      	mov	r0, r8
 80032fc:	f7fc ff68 	bl	80001d0 <strlen>
 8003300:	4b96      	ldr	r3, [pc, #600]	; (800355c <uart_comms+0x314>)
 8003302:	f8d3 9000 	ldr.w	r9, [r3]
 8003306:	4682      	mov	sl, r0
 8003308:	4648      	mov	r0, r9
 800330a:	f7fc ff61 	bl	80001d0 <strlen>
 800330e:	4649      	mov	r1, r9
 8003310:	4602      	mov	r2, r0
 8003312:	eb08 000a 	add.w	r0, r8, sl
 8003316:	f001 fabf 	bl	8004898 <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 800331a:	f8d6 8000 	ldr.w	r8, [r6]
 800331e:	4640      	mov	r0, r8
 8003320:	f7fc ff56 	bl	80001d0 <strlen>
 8003324:	783b      	ldrb	r3, [r7, #0]
 8003326:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 800332a:	f8d6 8000 	ldr.w	r8, [r6]
 800332e:	4640      	mov	r0, r8
 8003330:	f7fc ff4e 	bl	80001d0 <strlen>
 8003334:	4b8a      	ldr	r3, [pc, #552]	; (8003560 <uart_comms+0x318>)
 8003336:	f8d3 9000 	ldr.w	r9, [r3]
 800333a:	4682      	mov	sl, r0
 800333c:	4648      	mov	r0, r9
 800333e:	f7fc ff47 	bl	80001d0 <strlen>
 8003342:	4649      	mov	r1, r9
 8003344:	4602      	mov	r2, r0
 8003346:	eb08 000a 	add.w	r0, r8, sl
 800334a:	f001 faa5 	bl	8004898 <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 800334e:	f8d6 8000 	ldr.w	r8, [r6]
 8003352:	4640      	mov	r0, r8
 8003354:	f7fc ff3c 	bl	80001d0 <strlen>
 8003358:	783b      	ldrb	r3, [r7, #0]
 800335a:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 800335e:	f8d6 8000 	ldr.w	r8, [r6]
 8003362:	4640      	mov	r0, r8
 8003364:	f7fc ff34 	bl	80001d0 <strlen>
 8003368:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <uart_comms+0x31c>)
 800336a:	f8d3 9000 	ldr.w	r9, [r3]
 800336e:	4682      	mov	sl, r0
 8003370:	4648      	mov	r0, r9
 8003372:	f7fc ff2d 	bl	80001d0 <strlen>
 8003376:	4649      	mov	r1, r9
 8003378:	4602      	mov	r2, r0
 800337a:	eb08 000a 	add.w	r0, r8, sl
 800337e:	f001 fa8b 	bl	8004898 <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 8003382:	f8d6 8000 	ldr.w	r8, [r6]
 8003386:	4640      	mov	r0, r8
 8003388:	f7fc ff22 	bl	80001d0 <strlen>
 800338c:	783b      	ldrb	r3, [r7, #0]
 800338e:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8003392:	f8d6 8000 	ldr.w	r8, [r6]
 8003396:	4640      	mov	r0, r8
 8003398:	f7fc ff1a 	bl	80001d0 <strlen>
 800339c:	4b72      	ldr	r3, [pc, #456]	; (8003568 <uart_comms+0x320>)
 800339e:	f8d3 9000 	ldr.w	r9, [r3]
 80033a2:	4682      	mov	sl, r0
 80033a4:	4648      	mov	r0, r9
 80033a6:	f7fc ff13 	bl	80001d0 <strlen>
 80033aa:	4649      	mov	r1, r9
 80033ac:	4602      	mov	r2, r0
 80033ae:	eb08 000a 	add.w	r0, r8, sl
 80033b2:	f001 fa71 	bl	8004898 <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 80033b6:	f8d6 8000 	ldr.w	r8, [r6]
 80033ba:	4640      	mov	r0, r8
 80033bc:	f7fc ff08 	bl	80001d0 <strlen>
 80033c0:	783b      	ldrb	r3, [r7, #0]
 80033c2:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 80033c6:	f8d6 8000 	ldr.w	r8, [r6]
 80033ca:	4640      	mov	r0, r8
 80033cc:	f7fc ff00 	bl	80001d0 <strlen>
 80033d0:	4b66      	ldr	r3, [pc, #408]	; (800356c <uart_comms+0x324>)
 80033d2:	f8d3 9000 	ldr.w	r9, [r3]
 80033d6:	4682      	mov	sl, r0
 80033d8:	4648      	mov	r0, r9
 80033da:	f7fc fef9 	bl	80001d0 <strlen>
 80033de:	4649      	mov	r1, r9
 80033e0:	4602      	mov	r2, r0
 80033e2:	eb08 000a 	add.w	r0, r8, sl
 80033e6:	f001 fa57 	bl	8004898 <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 80033ea:	f8d6 8000 	ldr.w	r8, [r6]
 80033ee:	4640      	mov	r0, r8
 80033f0:	f7fc feee 	bl	80001d0 <strlen>
 80033f4:	783b      	ldrb	r3, [r7, #0]
 80033f6:	f808 3000 	strb.w	r3, [r8, r0]
					 if(valve_state == valve_OPEN){
 80033fa:	4a5d      	ldr	r2, [pc, #372]	; (8003570 <uart_comms+0x328>)
 80033fc:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <uart_comms+0x32c>)
 80033fe:	6817      	ldr	r7, [r2, #0]
						 memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8003400:	f8d6 8000 	ldr.w	r8, [r6]
					 if(valve_state == valve_OPEN){
 8003404:	429f      	cmp	r7, r3
						 memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8003406:	4640      	mov	r0, r8
					 if(valve_state == valve_OPEN){
 8003408:	f000 8141 	beq.w	800368e <uart_comms+0x446>
						 memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 800340c:	f7fc fee0 	bl	80001d0 <strlen>
 8003410:	4681      	mov	r9, r0
 8003412:	4638      	mov	r0, r7
 8003414:	f7fc fedc 	bl	80001d0 <strlen>
 8003418:	4639      	mov	r1, r7
 800341a:	4602      	mov	r2, r0
 800341c:	eb08 0009 	add.w	r0, r8, r9
 8003420:	f001 fa3a 	bl	8004898 <memcpy>
					 memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8003424:	6837      	ldr	r7, [r6, #0]
 8003426:	4638      	mov	r0, r7
 8003428:	f7fc fed2 	bl	80001d0 <strlen>
 800342c:	4b52      	ldr	r3, [pc, #328]	; (8003578 <uart_comms+0x330>)
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	523b      	strh	r3, [r7, r0]
					 HAL_UART_Transmit(&huart1,return_value, (uint16_t)strlen((char*)return_value),100);
 8003432:	6837      	ldr	r7, [r6, #0]
 8003434:	4638      	mov	r0, r7
 8003436:	f7fc fecb 	bl	80001d0 <strlen>
 800343a:	4639      	mov	r1, r7
 800343c:	b282      	uxth	r2, r0
 800343e:	2364      	movs	r3, #100	; 0x64
 8003440:	484e      	ldr	r0, [pc, #312]	; (800357c <uart_comms+0x334>)
 8003442:	f7ff fd15 	bl	8002e70 <HAL_UART_Transmit>
				memset(uart_command,0x00, 40);
 8003446:	2228      	movs	r2, #40	; 0x28
 8003448:	2100      	movs	r1, #0
 800344a:	6828      	ldr	r0, [r5, #0]
 800344c:	f001 fa2f 	bl	80048ae <memset>
				memset(return_value,0x00, 50);
 8003450:	6830      	ldr	r0, [r6, #0]
 8003452:	2232      	movs	r2, #50	; 0x32
 8003454:	2100      	movs	r1, #0
 8003456:	f001 fa2a 	bl	80048ae <memset>
				uart_counter = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	7023      	strb	r3, [r4, #0]
 800345e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value), 1000);
 8003462:	4e3b      	ldr	r6, [pc, #236]	; (8003550 <uart_comms+0x308>)
 8003464:	4845      	ldr	r0, [pc, #276]	; (800357c <uart_comms+0x334>)
 8003466:	6831      	ldr	r1, [r6, #0]
 8003468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800346c:	2204      	movs	r2, #4
 800346e:	f7ff fcff 	bl	8002e70 <HAL_UART_Transmit>
					 break;
 8003472:	e7e8      	b.n	8003446 <uart_comms+0x1fe>
					HAL_UART_Transmit(&huart1,(uint8_t*)time, sizeof(time), 1000);
 8003474:	4b42      	ldr	r3, [pc, #264]	; (8003580 <uart_comms+0x338>)
 8003476:	4841      	ldr	r0, [pc, #260]	; (800357c <uart_comms+0x334>)
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	4e35      	ldr	r6, [pc, #212]	; (8003550 <uart_comms+0x308>)
 800347c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003480:	2204      	movs	r2, #4
 8003482:	f7ff fcf5 	bl	8002e70 <HAL_UART_Transmit>
					 break;
 8003486:	e7de      	b.n	8003446 <uart_comms+0x1fe>
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value)+1, 1000);
 8003488:	4e31      	ldr	r6, [pc, #196]	; (8003550 <uart_comms+0x308>)
 800348a:	483c      	ldr	r0, [pc, #240]	; (800357c <uart_comms+0x334>)
 800348c:	6831      	ldr	r1, [r6, #0]
 800348e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003492:	2205      	movs	r2, #5
 8003494:	f7ff fcec 	bl	8002e70 <HAL_UART_Transmit>
					 break;
 8003498:	e7d5      	b.n	8003446 <uart_comms+0x1fe>
					 memcpy(return_value, uart_command, 2);
 800349a:	4e2d      	ldr	r6, [pc, #180]	; (8003550 <uart_comms+0x308>)
 800349c:	8811      	ldrh	r1, [r2, #0]
 800349e:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2, comma, 1);
 80034a0:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <uart_comms+0x30c>)
					 memcpy(return_value, uart_command, 2);
 80034a2:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2, comma, 1);
 80034a4:	6833      	ldr	r3, [r6, #0]
 80034a6:	7812      	ldrb	r2, [r2, #0]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 80034a8:	4f36      	ldr	r7, [pc, #216]	; (8003584 <uart_comms+0x33c>)
					 memcpy(return_value+2, comma, 1);
 80034aa:	709a      	strb	r2, [r3, #2]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 80034ac:	f897 8000 	ldrb.w	r8, [r7]
 80034b0:	6830      	ldr	r0, [r6, #0]
 80034b2:	4b35      	ldr	r3, [pc, #212]	; (8003588 <uart_comms+0x340>)
 80034b4:	4642      	mov	r2, r8
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	3003      	adds	r0, #3
 80034ba:	f001 f9ed 	bl	8004898 <memcpy>
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 80034be:	6833      	ldr	r3, [r6, #0]
 80034c0:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <uart_comms+0x330>)
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 80034c2:	482e      	ldr	r0, [pc, #184]	; (800357c <uart_comms+0x334>)
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 80034c4:	8811      	ldrh	r1, [r2, #0]
 80034c6:	eb03 0208 	add.w	r2, r3, r8
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 80034ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 80034ce:	f8a2 1003 	strh.w	r1, [r2, #3]
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 80034d2:	783a      	ldrb	r2, [r7, #0]
 80034d4:	6831      	ldr	r1, [r6, #0]
 80034d6:	3205      	adds	r2, #5
 80034d8:	f7ff fcca 	bl	8002e70 <HAL_UART_Transmit>
					 break;
 80034dc:	e7b3      	b.n	8003446 <uart_comms+0x1fe>
					 memcpy(return_value, uart_command,2);
 80034de:	4e1c      	ldr	r6, [pc, #112]	; (8003550 <uart_comms+0x308>)
 80034e0:	8811      	ldrh	r1, [r2, #0]
 80034e2:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2,endSimbol, 2);
 80034e4:	4a24      	ldr	r2, [pc, #144]	; (8003578 <uart_comms+0x330>)
					 memcpy(return_value, uart_command,2);
 80034e6:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2,endSimbol, 2);
 80034e8:	6833      	ldr	r3, [r6, #0]
 80034ea:	8812      	ldrh	r2, [r2, #0]
 80034ec:	805a      	strh	r2, [r3, #2]
					 memset(set_temp, 0x00, 4);
 80034ee:	4f26      	ldr	r7, [pc, #152]	; (8003588 <uart_comms+0x340>)
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, sizeof(return_value), 1000);
 80034f0:	6831      	ldr	r1, [r6, #0]
 80034f2:	4822      	ldr	r0, [pc, #136]	; (800357c <uart_comms+0x334>)
 80034f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f8:	2204      	movs	r2, #4
 80034fa:	f7ff fcb9 	bl	8002e70 <HAL_UART_Transmit>
					 sizeOfTemp = uart_counter - 5;
 80034fe:	7823      	ldrb	r3, [r4, #0]
					 memset(set_temp, 0x00, 4);
 8003500:	6839      	ldr	r1, [r7, #0]
					 sizeOfTemp = uart_counter - 5;
 8003502:	4a20      	ldr	r2, [pc, #128]	; (8003584 <uart_comms+0x33c>)
 8003504:	3b05      	subs	r3, #5
					 memset(set_temp, 0x00, 4);
 8003506:	2000      	movs	r0, #0
					 sizeOfTemp = uart_counter - 5;
 8003508:	7013      	strb	r3, [r2, #0]
					 memset(set_temp, 0x00, 4);
 800350a:	6008      	str	r0, [r1, #0]
					 memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 800350c:	6829      	ldr	r1, [r5, #0]
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	6838      	ldr	r0, [r7, #0]
 8003512:	3103      	adds	r1, #3
 8003514:	f001 f9c0 	bl	8004898 <memcpy>
					 segment_val =set_temp;
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <uart_comms+0x344>)
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	601a      	str	r2, [r3, #0]
					break;
 800351e:	e792      	b.n	8003446 <uart_comms+0x1fe>
					 memcpy(return_value, uart_command, 2);
 8003520:	4e0b      	ldr	r6, [pc, #44]	; (8003550 <uart_comms+0x308>)
 8003522:	8811      	ldrh	r1, [r2, #0]
 8003524:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2, endSimbol,2 );
 8003526:	4a14      	ldr	r2, [pc, #80]	; (8003578 <uart_comms+0x330>)
					 memcpy(return_value, uart_command, 2);
 8003528:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2, endSimbol,2 );
 800352a:	6833      	ldr	r3, [r6, #0]
 800352c:	8812      	ldrh	r2, [r2, #0]
 800352e:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 8003530:	6831      	ldr	r1, [r6, #0]
 8003532:	4812      	ldr	r0, [pc, #72]	; (800357c <uart_comms+0x334>)
 8003534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003538:	2204      	movs	r2, #4
 800353a:	f7ff fc99 	bl	8002e70 <HAL_UART_Transmit>
 800353e:	e782      	b.n	8003446 <uart_comms+0x1fe>
 8003540:	20000120 	.word	0x20000120
 8003544:	2000011c 	.word	0x2000011c
 8003548:	200002d4 	.word	0x200002d4
 800354c:	20000100 	.word	0x20000100
 8003550:	200000fc 	.word	0x200000fc
 8003554:	20000004 	.word	0x20000004
 8003558:	200000e8 	.word	0x200000e8
 800355c:	20000130 	.word	0x20000130
 8003560:	200000dc 	.word	0x200000dc
 8003564:	200000ec 	.word	0x200000ec
 8003568:	20000118 	.word	0x20000118
 800356c:	200000f0 	.word	0x200000f0
 8003570:	20000124 	.word	0x20000124
 8003574:	2000002c 	.word	0x2000002c
 8003578:	20000008 	.word	0x20000008
 800357c:	200001dc 	.word	0x200001dc
 8003580:	20000020 	.word	0x20000020
 8003584:	2000010c 	.word	0x2000010c
 8003588:	20000108 	.word	0x20000108
 800358c:	20000104 	.word	0x20000104
					 memcpy(return_value, uart_command, 2);
 8003590:	4e4f      	ldr	r6, [pc, #316]	; (80036d0 <uart_comms+0x488>)
 8003592:	8811      	ldrh	r1, [r2, #0]
 8003594:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2, endSimbol,2 );
 8003596:	4a4f      	ldr	r2, [pc, #316]	; (80036d4 <uart_comms+0x48c>)
					 memcpy(return_value, uart_command, 2);
 8003598:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2, endSimbol,2 );
 800359a:	6833      	ldr	r3, [r6, #0]
 800359c:	8812      	ldrh	r2, [r2, #0]
 800359e:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 80035a0:	6831      	ldr	r1, [r6, #0]
 80035a2:	484d      	ldr	r0, [pc, #308]	; (80036d8 <uart_comms+0x490>)
 80035a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a8:	2204      	movs	r2, #4
 80035aa:	f7ff fc61 	bl	8002e70 <HAL_UART_Transmit>
					 if(auto_heating == 0){	// if auto heating off
 80035ae:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <uart_comms+0x494>)
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	2a00      	cmp	r2, #0
 80035b4:	f47f af47 	bne.w	8003446 <uart_comms+0x1fe>
						 if(uart_command[3]=='0'){
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d073      	beq.n	80036a8 <uart_comms+0x460>
						 else if(uart_command[3] == '1'){
 80035c0:	2b31      	cmp	r3, #49	; 0x31
 80035c2:	f47f af40 	bne.w	8003446 <uart_comms+0x1fe>
							 heater_state = heater_ON;
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <uart_comms+0x498>)
 80035c8:	4a46      	ldr	r2, [pc, #280]	; (80036e4 <uart_comms+0x49c>)
 80035ca:	601a      	str	r2, [r3, #0]
							 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);	// Heater
 80035cc:	2201      	movs	r2, #1
 80035ce:	4846      	ldr	r0, [pc, #280]	; (80036e8 <uart_comms+0x4a0>)
 80035d0:	4611      	mov	r1, r2
 80035d2:	f7fe fb29 	bl	8001c28 <HAL_GPIO_WritePin>
 80035d6:	e736      	b.n	8003446 <uart_comms+0x1fe>
					 memcpy(return_value, uart_command, 2);
 80035d8:	4e3d      	ldr	r6, [pc, #244]	; (80036d0 <uart_comms+0x488>)
 80035da:	8811      	ldrh	r1, [r2, #0]
 80035dc:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2, endSimbol,2 );
 80035de:	4a3d      	ldr	r2, [pc, #244]	; (80036d4 <uart_comms+0x48c>)
					 memcpy(return_value, uart_command, 2);
 80035e0:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2, endSimbol,2 );
 80035e2:	6833      	ldr	r3, [r6, #0]
 80035e4:	8812      	ldrh	r2, [r2, #0]
 80035e6:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 80035e8:	6831      	ldr	r1, [r6, #0]
 80035ea:	483b      	ldr	r0, [pc, #236]	; (80036d8 <uart_comms+0x490>)
 80035ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f0:	2204      	movs	r2, #4
 80035f2:	f7ff fc3d 	bl	8002e70 <HAL_UART_Transmit>
					 if(uart_command[2]=='0'){
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	789b      	ldrb	r3, [r3, #2]
 80035fa:	2b30      	cmp	r3, #48	; 0x30
 80035fc:	d043      	beq.n	8003686 <uart_comms+0x43e>
					 else if(uart_command[2] == '1'){
 80035fe:	2b31      	cmp	r3, #49	; 0x31
 8003600:	f47f af21 	bne.w	8003446 <uart_comms+0x1fe>
						 auto_heating = 1;
 8003604:	4b35      	ldr	r3, [pc, #212]	; (80036dc <uart_comms+0x494>)
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e71c      	b.n	8003446 <uart_comms+0x1fe>
				memcpy(studentnumber, uart_command, 2 );
 800360c:	4b37      	ldr	r3, [pc, #220]	; (80036ec <uart_comms+0x4a4>)
 800360e:	8810      	ldrh	r0, [r2, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
				memcpy(studentnumber+2,comma,1);
 8003612:	4937      	ldr	r1, [pc, #220]	; (80036f0 <uart_comms+0x4a8>)
				memcpy(studentnumber, uart_command, 2 );
 8003614:	8010      	strh	r0, [r2, #0]
				memcpy(studentnumber+2,comma,1);
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	7809      	ldrb	r1, [r1, #0]
 800361a:	7091      	strb	r1, [r2, #2]
				memcpy(studentnumber+3 ,studentnumber1,8 );
 800361c:	4a35      	ldr	r2, [pc, #212]	; (80036f4 <uart_comms+0x4ac>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	6811      	ldr	r1, [r2, #0]
 8003622:	6856      	ldr	r6, [r2, #4]
 8003624:	f8c0 1003 	str.w	r1, [r0, #3]
				memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8003628:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <uart_comms+0x48c>)
				memcpy(studentnumber+3 ,studentnumber1,8 );
 800362a:	f8c0 6007 	str.w	r6, [r0, #7]
				memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	6852      	ldr	r2, [r2, #4]
 8003634:	f8c1 200f 	str.w	r2, [r1, #15]
 8003638:	f8c1 300b 	str.w	r3, [r1, #11]
				HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 800363c:	220d      	movs	r2, #13
 800363e:	4826      	ldr	r0, [pc, #152]	; (80036d8 <uart_comms+0x490>)
 8003640:	4e23      	ldr	r6, [pc, #140]	; (80036d0 <uart_comms+0x488>)
 8003642:	f7ff fa35 	bl	8002ab0 <HAL_UART_Transmit_IT>
				break;
 8003646:	e6fe      	b.n	8003446 <uart_comms+0x1fe>
					memcpy(return_value, uart_command, 2);
 8003648:	4e21      	ldr	r6, [pc, #132]	; (80036d0 <uart_comms+0x488>)
 800364a:	8811      	ldrh	r1, [r2, #0]
 800364c:	6833      	ldr	r3, [r6, #0]
					memcpy(return_value+2, endSimbol,2 );
 800364e:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <uart_comms+0x48c>)
					memcpy(return_value, uart_command, 2);
 8003650:	8019      	strh	r1, [r3, #0]
					memcpy(return_value+2, endSimbol,2 );
 8003652:	6833      	ldr	r3, [r6, #0]
 8003654:	8812      	ldrh	r2, [r2, #0]
 8003656:	805a      	strh	r2, [r3, #2]
					HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 8003658:	6831      	ldr	r1, [r6, #0]
 800365a:	481f      	ldr	r0, [pc, #124]	; (80036d8 <uart_comms+0x490>)
 800365c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003660:	2204      	movs	r2, #4
 8003662:	f7ff fc05 	bl	8002e70 <HAL_UART_Transmit>
					 if(uart_command[3]=='1'){
 8003666:	682b      	ldr	r3, [r5, #0]
 8003668:	78db      	ldrb	r3, [r3, #3]
 800366a:	2b31      	cmp	r3, #49	; 0x31
 800366c:	d024      	beq.n	80036b8 <uart_comms+0x470>
					 else if(uart_command[3] == '0'){
 800366e:	2b30      	cmp	r3, #48	; 0x30
 8003670:	f47f aee9 	bne.w	8003446 <uart_comms+0x1fe>
						 valve_state=valve_CLOSE;
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <uart_comms+0x4b0>)
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <uart_comms+0x4b4>)
 8003678:	601a      	str	r2, [r3, #0]
						 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);		// Valve
 800367a:	481b      	ldr	r0, [pc, #108]	; (80036e8 <uart_comms+0x4a0>)
 800367c:	2200      	movs	r2, #0
 800367e:	2102      	movs	r1, #2
 8003680:	f7fe fad2 	bl	8001c28 <HAL_GPIO_WritePin>
 8003684:	e6df      	b.n	8003446 <uart_comms+0x1fe>
						 auto_heating = 0;
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <uart_comms+0x494>)
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e6db      	b.n	8003446 <uart_comms+0x1fe>
						 memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 800368e:	f7fc fd9f 	bl	80001d0 <strlen>
 8003692:	4681      	mov	r9, r0
 8003694:	4638      	mov	r0, r7
 8003696:	f7fc fd9b 	bl	80001d0 <strlen>
 800369a:	4639      	mov	r1, r7
 800369c:	1e42      	subs	r2, r0, #1
 800369e:	eb08 0009 	add.w	r0, r8, r9
 80036a2:	f001 f8f9 	bl	8004898 <memcpy>
 80036a6:	e6bd      	b.n	8003424 <uart_comms+0x1dc>
							 heater_state = heater_OFF;
 80036a8:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <uart_comms+0x498>)
 80036aa:	4915      	ldr	r1, [pc, #84]	; (8003700 <uart_comms+0x4b8>)
 80036ac:	6019      	str	r1, [r3, #0]
							 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);	// Heater
 80036ae:	480e      	ldr	r0, [pc, #56]	; (80036e8 <uart_comms+0x4a0>)
 80036b0:	2101      	movs	r1, #1
 80036b2:	f7fe fab9 	bl	8001c28 <HAL_GPIO_WritePin>
 80036b6:	e6c6      	b.n	8003446 <uart_comms+0x1fe>
						valve_state = valve_OPEN;
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <uart_comms+0x4b0>)
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <uart_comms+0x4bc>)
 80036bc:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);		// Valve
 80036be:	480a      	ldr	r0, [pc, #40]	; (80036e8 <uart_comms+0x4a0>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	2102      	movs	r1, #2
 80036c4:	f7fe fab0 	bl	8001c28 <HAL_GPIO_WritePin>
 80036c8:	e6bd      	b.n	8003446 <uart_comms+0x1fe>
 80036ca:	4e01      	ldr	r6, [pc, #4]	; (80036d0 <uart_comms+0x488>)
 80036cc:	e6bb      	b.n	8003446 <uart_comms+0x1fe>
 80036ce:	bf00      	nop
 80036d0:	200000fc 	.word	0x200000fc
 80036d4:	20000008 	.word	0x20000008
 80036d8:	200001dc 	.word	0x200001dc
 80036dc:	200000e0 	.word	0x200000e0
 80036e0:	200000f0 	.word	0x200000f0
 80036e4:	20000014 	.word	0x20000014
 80036e8:	48000800 	.word	0x48000800
 80036ec:	200002d0 	.word	0x200002d0
 80036f0:	20000004 	.word	0x20000004
 80036f4:	20000018 	.word	0x20000018
 80036f8:	20000124 	.word	0x20000124
 80036fc:	20000024 	.word	0x20000024
 8003700:	20000010 	.word	0x20000010
 8003704:	2000002c 	.word	0x2000002c

08003708 <HAL_UART_RxCpltCallback>:
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003708:	b410      	push	{r4}
		rx_flag = 1;
 800370a:	4c05      	ldr	r4, [pc, #20]	; (8003720 <HAL_UART_RxCpltCallback+0x18>)
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 800370c:	4905      	ldr	r1, [pc, #20]	; (8003724 <HAL_UART_RxCpltCallback+0x1c>)
 800370e:	4806      	ldr	r0, [pc, #24]	; (8003728 <HAL_UART_RxCpltCallback+0x20>)
		rx_flag = 1;
 8003710:	2301      	movs	r3, #1
 8003712:	7023      	strb	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8003714:	461a      	mov	r2, r3

}
 8003716:	f85d 4b04 	ldr.w	r4, [sp], #4
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 800371a:	f7ff b9ed 	b.w	8002af8 <HAL_UART_Receive_IT>
 800371e:	bf00      	nop
 8003720:	20000100 	.word	0x20000100
 8003724:	200002d4 	.word	0x200002d4
 8003728:	200001dc 	.word	0x200001dc

0800372c <init_peripherals>:

void init_peripherals(){
 800372c:	b538      	push	{r3, r4, r5, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 800372e:	2201      	movs	r2, #1
 8003730:	2120      	movs	r1, #32
 8003732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003736:	f7fe fa77 	bl	8001c28 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 800373a:	2201      	movs	r2, #1
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003742:	f7fe fa71 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003746:	4c50      	ldr	r4, [pc, #320]	; (8003888 <init_peripherals+0x15c>)
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 8003748:	4d50      	ldr	r5, [pc, #320]	; (800388c <init_peripherals+0x160>)
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 800374a:	2201      	movs	r2, #1
 800374c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003754:	f7fe fa68 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 8003758:	2201      	movs	r2, #1
 800375a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800375e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003762:	f7fe fa61 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003766:	4620      	mov	r0, r4
 8003768:	2201      	movs	r2, #1
 800376a:	2108      	movs	r1, #8
 800376c:	f7fe fa5c 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003770:	4620      	mov	r0, r4
 8003772:	2201      	movs	r2, #1
 8003774:	2110      	movs	r1, #16
 8003776:	f7fe fa57 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 800377a:	4620      	mov	r0, r4
 800377c:	2201      	movs	r2, #1
 800377e:	2120      	movs	r1, #32
 8003780:	f7fe fa52 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 8003784:	4620      	mov	r0, r4
 8003786:	2201      	movs	r2, #1
 8003788:	2140      	movs	r1, #64	; 0x40
 800378a:	f7fe fa4d 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 800378e:	4620      	mov	r0, r4
 8003790:	2201      	movs	r2, #1
 8003792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003796:	f7fe fa47 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 800379a:	4628      	mov	r0, r5
 800379c:	2201      	movs	r2, #1
 800379e:	2180      	movs	r1, #128	; 0x80
 80037a0:	f7fe fa42 	bl	8001c28 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);		// Heater
 80037a4:	2201      	movs	r2, #1
 80037a6:	4628      	mov	r0, r5
 80037a8:	4611      	mov	r1, r2
 80037aa:	f7fe fa3d 	bl	8001c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);		// Valve
 80037ae:	2201      	movs	r2, #1
 80037b0:	4628      	mov	r0, r5
 80037b2:	2102      	movs	r1, #2
 80037b4:	f7fe fa38 	bl	8001c28 <HAL_GPIO_WritePin>

	  studentnumber = (uint8_t*)malloc(15);
 80037b8:	2101      	movs	r1, #1
 80037ba:	200f      	movs	r0, #15
 80037bc:	f001 f838 	bl	8004830 <calloc>
 80037c0:	4b33      	ldr	r3, [pc, #204]	; (8003890 <init_peripherals+0x164>)
	  memset(studentnumber, 0x00, 15);

	  return_value = (uint8_t*)malloc(50);
 80037c2:	2101      	movs	r1, #1
	  studentnumber = (uint8_t*)malloc(15);
 80037c4:	6018      	str	r0, [r3, #0]
	  return_value = (uint8_t*)malloc(50);
 80037c6:	2032      	movs	r0, #50	; 0x32
 80037c8:	f001 f832 	bl	8004830 <calloc>
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <init_peripherals+0x168>)
	  memset(return_value, 0x00, 50);

	  uart_command = (uint8_t*)malloc(40);
 80037ce:	2101      	movs	r1, #1
	  return_value = (uint8_t*)malloc(50);
 80037d0:	6018      	str	r0, [r3, #0]
	  uart_command = (uint8_t*)malloc(40);
 80037d2:	2028      	movs	r0, #40	; 0x28
 80037d4:	f001 f82c 	bl	8004830 <calloc>
 80037d8:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <init_peripherals+0x16c>)
 80037da:	6018      	str	r0, [r3, #0]
	  memset(uart_command, 0x00, 40);

	  set_temp = (uint8_t*)malloc(3);
 80037dc:	2003      	movs	r0, #3
 80037de:	f001 f853 	bl	8004888 <malloc>
 80037e2:	492e      	ldr	r1, [pc, #184]	; (800389c <init_peripherals+0x170>)
	  memset(set_temp, 0x00, 4);

	  segment_val =set_temp;
 80037e4:	4a2e      	ldr	r2, [pc, #184]	; (80038a0 <init_peripherals+0x174>)
	  set_temp = (uint8_t*)malloc(3);
 80037e6:	6008      	str	r0, [r1, #0]
 80037e8:	4603      	mov	r3, r0
	  memset(set_temp, 0x00, 4);
 80037ea:	2400      	movs	r4, #0
 80037ec:	601c      	str	r4, [r3, #0]
//	  memset(segment_val, 0x00, 4);

	  ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 80037ee:	201c      	movs	r0, #28
	  segment_val =set_temp;
 80037f0:	6013      	str	r3, [r2, #0]
	  ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 80037f2:	f001 f849 	bl	8004888 <malloc>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <init_peripherals+0x178>)
	  memset(ADC1_buffer, 0x00, 7);
 80037fa:	6004      	str	r4, [r0, #0]
 80037fc:	f8c3 4003 	str.w	r4, [r3, #3]

	  ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8003800:	201c      	movs	r0, #28
	  ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8003802:	6013      	str	r3, [r2, #0]
	  ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8003804:	f001 f840 	bl	8004888 <malloc>
 8003808:	4603      	mov	r3, r0
 800380a:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <init_peripherals+0x17c>)
	  memset(ADC2_buffer, 0x00, 7);
 800380c:	6004      	str	r4, [r0, #0]

	  voltage_rms =(char*)malloc(3*sizeof(char));
 800380e:	2101      	movs	r1, #1
	  memset(ADC2_buffer, 0x00, 7);
 8003810:	f8c3 4003 	str.w	r4, [r3, #3]
	  voltage_rms =(char*)malloc(3*sizeof(char));
 8003814:	2003      	movs	r0, #3
	  ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8003816:	6013      	str	r3, [r2, #0]
	  voltage_rms =(char*)malloc(3*sizeof(char));
 8003818:	f001 f80a 	bl	8004830 <calloc>
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <init_peripherals+0x180>)
	  ambient_temp = (char*)malloc(3*sizeof(char));
	  geyser_temp = (char*)malloc(3*sizeof(char));

	  //HEATER
	  heater_state = (char*)malloc(5*sizeof(char));
	  heater_state = heater_OFF;
 800381e:	4c24      	ldr	r4, [pc, #144]	; (80038b0 <init_peripherals+0x184>)
	  voltage_rms =(char*)malloc(3*sizeof(char));
 8003820:	6018      	str	r0, [r3, #0]
	  current_rms =(char*)malloc(4*sizeof(char));
 8003822:	2101      	movs	r1, #1
 8003824:	2004      	movs	r0, #4
 8003826:	f001 f803 	bl	8004830 <calloc>
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <init_peripherals+0x188>)
	  total_water =(char*)malloc(20*sizeof(char));
 800382c:	2101      	movs	r1, #1
	  current_rms =(char*)malloc(4*sizeof(char));
 800382e:	6018      	str	r0, [r3, #0]
	  total_water =(char*)malloc(20*sizeof(char));
 8003830:	2014      	movs	r0, #20
 8003832:	f000 fffd 	bl	8004830 <calloc>
	  sprintf(total_water,"%lu", water_acc);
 8003836:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <init_peripherals+0x18c>)
	  total_water =(char*)malloc(20*sizeof(char));
 8003838:	4b20      	ldr	r3, [pc, #128]	; (80038bc <init_peripherals+0x190>)
	  sprintf(total_water,"%lu", water_acc);
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	4920      	ldr	r1, [pc, #128]	; (80038c0 <init_peripherals+0x194>)
	  total_water =(char*)malloc(20*sizeof(char));
 800383e:	6018      	str	r0, [r3, #0]
	  sprintf(total_water,"%lu", water_acc);
 8003840:	f001 f908 	bl	8004a54 <siprintf>
	  voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8003844:	2010      	movs	r0, #16
 8003846:	f001 f81f 	bl	8004888 <malloc>
 800384a:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <init_peripherals+0x198>)
 800384c:	6018      	str	r0, [r3, #0]
	  current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 800384e:	2010      	movs	r0, #16
 8003850:	f001 f81a 	bl	8004888 <malloc>
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <init_peripherals+0x19c>)
 8003856:	6018      	str	r0, [r3, #0]
	  ambient_temp = (char*)malloc(3*sizeof(char));
 8003858:	2003      	movs	r0, #3
 800385a:	f001 f815 	bl	8004888 <malloc>
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <init_peripherals+0x1a0>)
 8003860:	6018      	str	r0, [r3, #0]
	  geyser_temp = (char*)malloc(3*sizeof(char));
 8003862:	2003      	movs	r0, #3
 8003864:	f001 f810 	bl	8004888 <malloc>
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <init_peripherals+0x1a4>)

	  //Valve
	  valve_state = (char*)malloc(8*sizeof(char));
	  valve_state = valve_CLOSE;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <init_peripherals+0x1a8>)
	  heater_state = heater_OFF;
 800386c:	491a      	ldr	r1, [pc, #104]	; (80038d8 <init_peripherals+0x1ac>)
	  geyser_temp = (char*)malloc(3*sizeof(char));
 800386e:	6010      	str	r0, [r2, #0]
	  valve_state = valve_CLOSE;
 8003870:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <init_peripherals+0x1b0>)

	HAL_TIM_Base_Start_IT(&htim2);
 8003872:	481b      	ldr	r0, [pc, #108]	; (80038e0 <init_peripherals+0x1b4>)
	  heater_state = heater_OFF;
 8003874:	600c      	str	r4, [r1, #0]
	  valve_state = valve_CLOSE;
 8003876:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8003878:	f7fe feac 	bl	80025d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800387c:	4819      	ldr	r0, [pc, #100]	; (80038e4 <init_peripherals+0x1b8>)
				// p696 on HAL & Low level drivers

//	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);

}
 800387e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 8003882:	f7fe bea7 	b.w	80025d4 <HAL_TIM_Base_Start_IT>
 8003886:	bf00      	nop
 8003888:	48000400 	.word	0x48000400
 800388c:	48000800 	.word	0x48000800
 8003890:	200002d0 	.word	0x200002d0
 8003894:	200000fc 	.word	0x200000fc
 8003898:	2000011c 	.word	0x2000011c
 800389c:	20000108 	.word	0x20000108
 80038a0:	20000104 	.word	0x20000104
 80038a4:	200000b8 	.word	0x200000b8
 80038a8:	200000bc 	.word	0x200000bc
 80038ac:	20000130 	.word	0x20000130
 80038b0:	20000010 	.word	0x20000010
 80038b4:	200000e8 	.word	0x200000e8
 80038b8:	20000134 	.word	0x20000134
 80038bc:	20000118 	.word	0x20000118
 80038c0:	0800537c 	.word	0x0800537c
 80038c4:	2000012c 	.word	0x2000012c
 80038c8:	200000e4 	.word	0x200000e4
 80038cc:	200000dc 	.word	0x200000dc
 80038d0:	200000ec 	.word	0x200000ec
 80038d4:	20000124 	.word	0x20000124
 80038d8:	200000f0 	.word	0x200000f0
 80038dc:	20000024 	.word	0x20000024
 80038e0:	2000024c 	.word	0x2000024c
 80038e4:	2000019c 	.word	0x2000019c

080038e8 <adc_comms>:

void adc_comms(){



	 adc_raw_voltage =  ADC1_buffer[0];
 80038e8:	4b83      	ldr	r3, [pc, #524]	; (8003af8 <adc_comms+0x210>)
	 adc_raw_current =	ADC1_buffer[1];
 80038ea:	4a84      	ldr	r2, [pc, #528]	; (8003afc <adc_comms+0x214>)
	 adc_raw_voltage =  ADC1_buffer[0];
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4984      	ldr	r1, [pc, #528]	; (8003b00 <adc_comms+0x218>)
 80038f0:	6818      	ldr	r0, [r3, #0]
void adc_comms(){
 80038f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 adc_raw_current =	ADC1_buffer[1];
 80038f6:	f8d3 8004 	ldr.w	r8, [r3, #4]
	 raw_ambient_temp = ADC1_buffer[2];
 80038fa:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 raw_geyser_temp = ADC1_buffer[3];
 80038fe:	68dc      	ldr	r4, [r3, #12]
 8003900:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8003b30 <adc_comms+0x248>
	 raw_ambient_temp = ADC1_buffer[2];
 8003904:	4b7f      	ldr	r3, [pc, #508]	; (8003b04 <adc_comms+0x21c>)
	 adc_raw_current =	ADC1_buffer[1];
 8003906:	f8c2 8000 	str.w	r8, [r2]
void adc_comms(){
 800390a:	b083      	sub	sp, #12
	 raw_ambient_temp = ADC1_buffer[2];
 800390c:	f8c3 b000 	str.w	fp, [r3]
	 adc_raw_voltage =  ADC1_buffer[0];
 8003910:	6008      	str	r0, [r1, #0]
	 raw_geyser_temp = ADC1_buffer[3];
 8003912:	f8c9 4000 	str.w	r4, [r9]


	//Converting Voltage
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202)/0.008629,2))+adc_buffer_voltage;
 8003916:	f7fc fdf5 	bl	8000504 <__aeabi_ui2d>
 800391a:	a36f      	add	r3, pc, #444	; (adr r3, 8003ad8 <adc_comms+0x1f0>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f7fc fcb2 	bl	8000288 <__aeabi_dsub>
 8003924:	a36e      	add	r3, pc, #440	; (adr r3, 8003ae0 <adc_comms+0x1f8>)
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f7fc fe61 	bl	80005f0 <__aeabi_dmul>
 800392e:	f8df a204 	ldr.w	sl, [pc, #516]	; 8003b34 <adc_comms+0x24c>

	//Converting Current
	adc_buffer_current = (pow((adc_raw_current-2072.202)/0.14603,2))+adc_buffer_current;
 8003932:	4d75      	ldr	r5, [pc, #468]	; (8003b08 <adc_comms+0x220>)
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202)/0.008629,2))+adc_buffer_voltage;
 8003934:	4606      	mov	r6, r0
 8003936:	460f      	mov	r7, r1
 8003938:	e9da 0100 	ldrd	r0, r1, [sl]
 800393c:	f7fc fe22 	bl	8000584 <__aeabi_ul2d>
 8003940:	4632      	mov	r2, r6
 8003942:	e9cd 0100 	strd	r0, r1, [sp]
 8003946:	463b      	mov	r3, r7
 8003948:	4630      	mov	r0, r6
 800394a:	4639      	mov	r1, r7
 800394c:	f7fc fe50 	bl	80005f0 <__aeabi_dmul>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003958:	f7fc fc98 	bl	800028c <__adddf3>
 800395c:	f7fd f930 	bl	8000bc0 <__aeabi_d2ulz>
 8003960:	e9ca 0100 	strd	r0, r1, [sl]
	adc_buffer_current = (pow((adc_raw_current-2072.202)/0.14603,2))+adc_buffer_current;
 8003964:	4640      	mov	r0, r8
 8003966:	f7fc fdcd 	bl	8000504 <__aeabi_ui2d>
 800396a:	a35b      	add	r3, pc, #364	; (adr r3, 8003ad8 <adc_comms+0x1f0>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f7fc fc8a 	bl	8000288 <__aeabi_dsub>
 8003974:	a35c      	add	r3, pc, #368	; (adr r3, 8003ae8 <adc_comms+0x200>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f7fc fe39 	bl	80005f0 <__aeabi_dmul>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003986:	e9cd 2300 	strd	r2, r3, [sp]
 800398a:	f7fc fdfb 	bl	8000584 <__aeabi_ul2d>
 800398e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003992:	4606      	mov	r6, r0
 8003994:	460f      	mov	r7, r1
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7fc fe29 	bl	80005f0 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4630      	mov	r0, r6
 80039a4:	4639      	mov	r1, r7
 80039a6:	f7fc fc71 	bl	800028c <__adddf3>
 80039aa:	f7fd f909 	bl	8000bc0 <__aeabi_d2ulz>
 80039ae:	e9c5 0100 	strd	r0, r1, [r5]

	//Converting Ambient temperature
	if( (raw_ambient_temp-615)/12.3 < 100){
 80039b2:	f2ab 2067 	subw	r0, fp, #615	; 0x267
 80039b6:	f7fc fda5 	bl	8000504 <__aeabi_ui2d>
 80039ba:	a34d      	add	r3, pc, #308	; (adr r3, 8003af0 <adc_comms+0x208>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fe16 	bl	80005f0 <__aeabi_dmul>
 80039c4:	2200      	movs	r2, #0
 80039c6:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <adc_comms+0x224>)
 80039c8:	f7fd f884 	bl	8000ad4 <__aeabi_dcmplt>
 80039cc:	b9c0      	cbnz	r0, 8003a00 <adc_comms+0x118>
		raw_ambient_temp =(raw_ambient_temp-615-71)/12.3;
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-615)/12.3 < 100){
 80039ce:	f2a4 2067 	subw	r0, r4, #615	; 0x267
 80039d2:	f7fc fd97 	bl	8000504 <__aeabi_ui2d>
 80039d6:	a346      	add	r3, pc, #280	; (adr r3, 8003af0 <adc_comms+0x208>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f7fc fe08 	bl	80005f0 <__aeabi_dmul>
 80039e0:	2200      	movs	r2, #0
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <adc_comms+0x224>)
 80039e4:	f7fd f876 	bl	8000ad4 <__aeabi_dcmplt>
 80039e8:	bb00      	cbnz	r0, 8003a2c <adc_comms+0x144>
	//Convert to chart




	adc_counter += 1;
 80039ea:	4c49      	ldr	r4, [pc, #292]	; (8003b10 <adc_comms+0x228>)
 80039ec:	8823      	ldrh	r3, [r4, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	b29b      	uxth	r3, r3
	if(adc_counter == 2000){
 80039f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
	adc_counter += 1;
 80039f6:	8023      	strh	r3, [r4, #0]
	if(adc_counter == 2000){
 80039f8:	d02c      	beq.n	8003a54 <adc_comms+0x16c>
		adc_counter = 0;

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}
}
 80039fa:	b003      	add	sp, #12
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		raw_ambient_temp =(raw_ambient_temp-615-71)/12.3;
 8003a00:	f2ab 20ae 	subw	r0, fp, #686	; 0x2ae
 8003a04:	f7fc fd7e 	bl	8000504 <__aeabi_ui2d>
 8003a08:	a339      	add	r3, pc, #228	; (adr r3, 8003af0 <adc_comms+0x208>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f7fc fdef 	bl	80005f0 <__aeabi_dmul>
 8003a12:	f7fd f89d 	bl	8000b50 <__aeabi_d2uiz>
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003a16:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <adc_comms+0x22c>)
 8003a18:	493f      	ldr	r1, [pc, #252]	; (8003b18 <adc_comms+0x230>)
		raw_ambient_temp =(raw_ambient_temp-615-71)/12.3;
 8003a1a:	4602      	mov	r2, r0
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003a1c:	6818      	ldr	r0, [r3, #0]
		raw_ambient_temp =(raw_ambient_temp-615-71)/12.3;
 8003a1e:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <adc_comms+0x21c>)
 8003a20:	601a      	str	r2, [r3, #0]
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003a22:	f001 f817 	bl	8004a54 <siprintf>
 8003a26:	f8d9 4000 	ldr.w	r4, [r9]
 8003a2a:	e7d0      	b.n	80039ce <adc_comms+0xe6>
		raw_geyser_temp = (raw_geyser_temp-615-71)/12.3;
 8003a2c:	f2a4 20ae 	subw	r0, r4, #686	; 0x2ae
 8003a30:	f7fc fd68 	bl	8000504 <__aeabi_ui2d>
 8003a34:	a32e      	add	r3, pc, #184	; (adr r3, 8003af0 <adc_comms+0x208>)
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f7fc fdd9 	bl	80005f0 <__aeabi_dmul>
 8003a3e:	f7fd f887 	bl	8000b50 <__aeabi_d2uiz>
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003a42:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <adc_comms+0x234>)
 8003a44:	4934      	ldr	r1, [pc, #208]	; (8003b18 <adc_comms+0x230>)
		raw_geyser_temp = (raw_geyser_temp-615-71)/12.3;
 8003a46:	4602      	mov	r2, r0
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003a48:	6818      	ldr	r0, [r3, #0]
		raw_geyser_temp = (raw_geyser_temp-615-71)/12.3;
 8003a4a:	f8c9 2000 	str.w	r2, [r9]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003a4e:	f001 f801 	bl	8004a54 <siprintf>
 8003a52:	e7ca      	b.n	80039ea <adc_comms+0x102>
		*voltage_int_rms = sqrt(adc_buffer_voltage/2000);
 8003a54:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <adc_comms+0x238>)
		*current_int_rms = sqrt(adc_buffer_current/2000);
 8003a56:	4e33      	ldr	r6, [pc, #204]	; (8003b24 <adc_comms+0x23c>)
		*voltage_int_rms = sqrt(adc_buffer_voltage/2000);
 8003a58:	681f      	ldr	r7, [r3, #0]
 8003a5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e9da 0100 	ldrd	r0, r1, [sl]
 8003a64:	f7fd f894 	bl	8000b90 <__aeabi_uldivmod>
 8003a68:	f7fc fd8c 	bl	8000584 <__aeabi_ul2d>
 8003a6c:	ec41 0b10 	vmov	d0, r0, r1
 8003a70:	f001 fb46 	bl	8005100 <sqrt>
 8003a74:	ec51 0b10 	vmov	r0, r1, d0
 8003a78:	f7fd f86a 	bl	8000b50 <__aeabi_d2uiz>
		*current_int_rms = sqrt(adc_buffer_current/2000);
 8003a7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a80:	2300      	movs	r3, #0
		*voltage_int_rms = sqrt(adc_buffer_voltage/2000);
 8003a82:	6038      	str	r0, [r7, #0]
		*current_int_rms = sqrt(adc_buffer_current/2000);
 8003a84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003a88:	f7fd f882 	bl	8000b90 <__aeabi_uldivmod>
 8003a8c:	f7fc fd7a 	bl	8000584 <__aeabi_ul2d>
 8003a90:	ec41 0b10 	vmov	d0, r0, r1
 8003a94:	f001 fb34 	bl	8005100 <sqrt>
 8003a98:	ec51 0b10 	vmov	r0, r1, d0
 8003a9c:	f7fd f858 	bl	8000b50 <__aeabi_d2uiz>
 8003aa0:	6832      	ldr	r2, [r6, #0]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <adc_comms+0x240>)
		*current_int_rms = sqrt(adc_buffer_current/2000);
 8003aa4:	6010      	str	r0, [r2, #0]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	491b      	ldr	r1, [pc, #108]	; (8003b18 <adc_comms+0x230>)
 8003aac:	f000 ffd2 	bl	8004a54 <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 8003ab0:	6832      	ldr	r2, [r6, #0]
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <adc_comms+0x244>)
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	4917      	ldr	r1, [pc, #92]	; (8003b18 <adc_comms+0x230>)
 8003aba:	f000 ffcb 	bl	8004a54 <siprintf>
		adc_buffer_voltage = 0;
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e9ca 2300 	strd	r2, r3, [sl]
		adc_buffer_current = 0;
 8003ac6:	e9c5 2300 	strd	r2, r3, [r5]
		adc_counter = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	8023      	strh	r3, [r4, #0]
}
 8003ace:	b003      	add	sp, #12
 8003ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad4:	f3af 8000 	nop.w
 8003ad8:	6c8b4396 	.word	0x6c8b4396
 8003adc:	40a03067 	.word	0x40a03067
 8003ae0:	a3da61ba 	.word	0xa3da61ba
 8003ae4:	405cf8d9 	.word	0x405cf8d9
 8003ae8:	fc3f99e7 	.word	0xfc3f99e7
 8003aec:	401b6441 	.word	0x401b6441
 8003af0:	4d0214d0 	.word	0x4d0214d0
 8003af4:	3fb4d021 	.word	0x3fb4d021
 8003af8:	200000b8 	.word	0x200000b8
 8003afc:	200000d4 	.word	0x200000d4
 8003b00:	200000d8 	.word	0x200000d8
 8003b04:	200000f4 	.word	0x200000f4
 8003b08:	200000c0 	.word	0x200000c0
 8003b0c:	40590000 	.word	0x40590000
 8003b10:	200000d0 	.word	0x200000d0
 8003b14:	200000dc 	.word	0x200000dc
 8003b18:	0800537c 	.word	0x0800537c
 8003b1c:	200000ec 	.word	0x200000ec
 8003b20:	2000012c 	.word	0x2000012c
 8003b24:	200000e4 	.word	0x200000e4
 8003b28:	20000130 	.word	0x20000130
 8003b2c:	200000e8 	.word	0x200000e8
 8003b30:	200000f8 	.word	0x200000f8
 8003b34:	200000c8 	.word	0x200000c8

08003b38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 8003b38:	4b01      	ldr	r3, [pc, #4]	; (8003b40 <HAL_ADC_ConvCpltCallback+0x8>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	4770      	bx	lr
 8003b40:	200000d2 	.word	0x200000d2

08003b44 <HAL_TIM_IC_CaptureCallback>:
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8003b44:	4b01      	ldr	r3, [pc, #4]	; (8003b4c <HAL_TIM_IC_CaptureCallback+0x8>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	4770      	bx	lr
 8003b4c:	2000010d 	.word	0x2000010d

08003b50 <seven_segment_display>:
}

void seven_segment_display(uint8_t num){
 8003b50:	b508      	push	{r3, lr}
	switch(num){
 8003b52:	2809      	cmp	r0, #9
 8003b54:	f200 81bf 	bhi.w	8003ed6 <seven_segment_display+0x386>
 8003b58:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003b5c:	006c003b 	.word	0x006c003b
 8003b60:	00c40098 	.word	0x00c40098
 8003b64:	011200e8 	.word	0x011200e8
 8003b68:	016a013e 	.word	0x016a013e
 8003b6c:	000a018c 	.word	0x000a018c
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
		break;
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003b70:	2200      	movs	r2, #0
 8003b72:	2120      	movs	r1, #32
 8003b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b78:	f7fe f856 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2140      	movs	r1, #64	; 0x40
 8003b80:	48e9      	ldr	r0, [pc, #932]	; (8003f28 <seven_segment_display+0x3d8>)
 8003b82:	f7fe f851 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003b86:	2200      	movs	r2, #0
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8e:	f7fe f84b 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003b92:	2200      	movs	r2, #0
 8003b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b9c:	f7fe f844 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003baa:	f7fe f83d 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb6:	f7fe f837 	bl	8001c28 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003bba:	48dc      	ldr	r0, [pc, #880]	; (8003f2c <seven_segment_display+0x3dc>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003bc0:	f7fe f832 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	2140      	movs	r1, #64	; 0x40
 8003bc8:	48d7      	ldr	r0, [pc, #860]	; (8003f28 <seven_segment_display+0x3d8>)

	}



}
 8003bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003bce:	f7fe b82b 	b.w	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bda:	f7fe f825 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003bde:	2200      	movs	r2, #0
 8003be0:	2120      	movs	r1, #32
 8003be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be6:	f7fe f81f 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003bea:	2200      	movs	r2, #0
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	48ce      	ldr	r0, [pc, #824]	; (8003f28 <seven_segment_display+0x3d8>)
 8003bf0:	f7fe f81a 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfc:	f7fe f814 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	48c8      	ldr	r0, [pc, #800]	; (8003f28 <seven_segment_display+0x3d8>)
 8003c06:	f7fe f80f 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2180      	movs	r1, #128	; 0x80
 8003c0e:	48c7      	ldr	r0, [pc, #796]	; (8003f2c <seven_segment_display+0x3dc>)
 8003c10:	f7fe f80a 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c1e:	f7fe f803 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003c22:	2201      	movs	r2, #1
 8003c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003c30:	f7fd bffa 	b.w	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003c34:	2200      	movs	r2, #0
 8003c36:	2140      	movs	r1, #64	; 0x40
 8003c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c3c:	f7fd fff4 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8003c40:	2200      	movs	r2, #0
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c48:	f7fd ffee 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	2120      	movs	r1, #32
 8003c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c54:	f7fd ffe8 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c62:	f7fd ffe1 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8003c66:	2201      	movs	r2, #1
 8003c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c70:	f7fd ffda 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8003c74:	48ac      	ldr	r0, [pc, #688]	; (8003f28 <seven_segment_display+0x3d8>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	2140      	movs	r1, #64	; 0x40
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003c7a:	f7fd ffd5 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003c7e:	2201      	movs	r2, #1
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	48aa      	ldr	r0, [pc, #680]	; (8003f2c <seven_segment_display+0x3dc>)
}
 8003c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003c88:	f7fd bfce 	b.w	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2120      	movs	r1, #32
 8003c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c94:	f7fd ffc8 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2140      	movs	r1, #64	; 0x40
 8003c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca0:	f7fd ffc2 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cae:	f7fd ffbb 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	489d      	ldr	r0, [pc, #628]	; (8003f2c <seven_segment_display+0x3dc>)
 8003cb8:	f7fd ffb6 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2140      	movs	r1, #64	; 0x40
 8003cc0:	4899      	ldr	r0, [pc, #612]	; (8003f28 <seven_segment_display+0x3d8>)
 8003cc2:	f7fd ffb1 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cd0:	f7fd ffaa 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003ce0:	f7fd bfa2 	b.w	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cec:	f7fd ff9c 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2140      	movs	r1, #64	; 0x40
 8003cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cf8:	f7fd ff96 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d06:	f7fd ff8f 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d12:	f7fd ff89 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003d16:	2200      	movs	r2, #0
 8003d18:	2140      	movs	r1, #64	; 0x40
 8003d1a:	4883      	ldr	r0, [pc, #524]	; (8003f28 <seven_segment_display+0x3d8>)
 8003d1c:	f7fd ff84 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003d20:	2201      	movs	r2, #1
 8003d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d2a:	e7a6      	b.n	8003c7a <seven_segment_display+0x12a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d34:	f7fd ff78 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d42:	f7fd ff71 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003d46:	2200      	movs	r2, #0
 8003d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d50:	f7fd ff6a 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003d54:	2200      	movs	r2, #0
 8003d56:	2180      	movs	r1, #128	; 0x80
 8003d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5c:	f7fd ff64 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003d60:	2201      	movs	r2, #1
 8003d62:	2120      	movs	r1, #32
 8003d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d68:	f7fd ff5e 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	2180      	movs	r1, #128	; 0x80
 8003d70:	486e      	ldr	r0, [pc, #440]	; (8003f2c <seven_segment_display+0x3dc>)
 8003d72:	f7fd ff59 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003d76:	2201      	movs	r2, #1
 8003d78:	2120      	movs	r1, #32
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d7e:	e71f      	b.n	8003bc0 <seven_segment_display+0x70>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003d80:	2200      	movs	r2, #0
 8003d82:	2120      	movs	r1, #32
 8003d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d88:	f7fd ff4e 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d96:	f7fd ff47 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da4:	f7fd ff40 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003da8:	2200      	movs	r2, #0
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003db0:	f7fd ff3a 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8003db4:	2201      	movs	r2, #1
 8003db6:	2140      	movs	r1, #64	; 0x40
 8003db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dbc:	f7fd ff34 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	4859      	ldr	r0, [pc, #356]	; (8003f2c <seven_segment_display+0x3dc>)
 8003dc6:	f7fd ff2f 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2140      	movs	r1, #64	; 0x40
 8003dce:	4856      	ldr	r0, [pc, #344]	; (8003f28 <seven_segment_display+0x3d8>)
}
 8003dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8003dd4:	f7fd bf28 	b.w	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2120      	movs	r1, #32
 8003ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de0:	f7fd ff22 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dee:	f7fd ff1b 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dfc:	f7fd ff14 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003e00:	2200      	movs	r2, #0
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e08:	f7fd ff0e 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2140      	movs	r1, #64	; 0x40
 8003e10:	4845      	ldr	r0, [pc, #276]	; (8003f28 <seven_segment_display+0x3d8>)
 8003e12:	f7fd ff09 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003e16:	4845      	ldr	r0, [pc, #276]	; (8003f2c <seven_segment_display+0x3dc>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8003e1c:	f7fd ff04 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8003e20:	2201      	movs	r2, #1
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8003e2c:	f7fd befc 	b.w	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003e30:	2200      	movs	r2, #0
 8003e32:	2120      	movs	r1, #32
 8003e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e38:	f7fd fef6 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2140      	movs	r1, #64	; 0x40
 8003e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e44:	f7fd fef0 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e50:	f7fd feea 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003e54:	2201      	movs	r2, #1
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	4834      	ldr	r0, [pc, #208]	; (8003f2c <seven_segment_display+0x3dc>)
 8003e5a:	f7fd fee5 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e68:	f7fd fede 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e72:	e782      	b.n	8003d7a <seven_segment_display+0x22a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003e74:	2200      	movs	r2, #0
 8003e76:	2140      	movs	r1, #64	; 0x40
 8003e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e7c:	f7fd fed4 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003e80:	2200      	movs	r2, #0
 8003e82:	2120      	movs	r1, #32
 8003e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e88:	f7fd fece 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4825      	ldr	r0, [pc, #148]	; (8003f28 <seven_segment_display+0x3d8>)
 8003e92:	f7fd fec9 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003e96:	2200      	movs	r2, #0
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9e:	f7fd fec3 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2140      	movs	r1, #64	; 0x40
 8003ea6:	4820      	ldr	r0, [pc, #128]	; (8003f28 <seven_segment_display+0x3d8>)
 8003ea8:	f7fd febe 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003eac:	2200      	movs	r2, #0
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	481e      	ldr	r0, [pc, #120]	; (8003f2c <seven_segment_display+0x3dc>)
 8003eb2:	f7fd feb9 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec0:	f7fd feb2 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003ed2:	f7fd bea9 	b.w	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	2120      	movs	r1, #32
 8003eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ede:	f7fd fea3 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	4810      	ldr	r0, [pc, #64]	; (8003f28 <seven_segment_display+0x3d8>)
 8003ee8:	f7fd fe9e 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003eec:	2201      	movs	r2, #1
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ef4:	f7fd fe98 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	480a      	ldr	r0, [pc, #40]	; (8003f28 <seven_segment_display+0x3d8>)
 8003efe:	f7fd fe93 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003f02:	2201      	movs	r2, #1
 8003f04:	2180      	movs	r1, #128	; 0x80
 8003f06:	4809      	ldr	r0, [pc, #36]	; (8003f2c <seven_segment_display+0x3dc>)
 8003f08:	f7fd fe8e 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f16:	f7fd fe87 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f24:	e77a      	b.n	8003e1c <seven_segment_display+0x2cc>
 8003f26:	bf00      	nop
 8003f28:	48000400 	.word	0x48000400
 8003f2c:	48000800 	.word	0x48000800

08003f30 <seven_segment>:
void seven_segment(){
 8003f30:	b538      	push	{r3, r4, r5, lr}
	if(segment_counter == 0){	// Left Most Digit
 8003f32:	4d30      	ldr	r5, [pc, #192]	; (8003ff4 <seven_segment+0xc4>)
 8003f34:	782c      	ldrb	r4, [r5, #0]
 8003f36:	b134      	cbz	r4, 8003f46 <seven_segment+0x16>
	else if( segment_counter == 1){		// Middle left Digit
 8003f38:	2c01      	cmp	r4, #1
 8003f3a:	d045      	beq.n	8003fc8 <seven_segment+0x98>
	else if( segment_counter == 2){		// Middle Right Digit
 8003f3c:	2c02      	cmp	r4, #2
 8003f3e:	d04b      	beq.n	8003fd8 <seven_segment+0xa8>
	else if( segment_counter == 3){ // Right Most Digit
 8003f40:	2c03      	cmp	r4, #3
 8003f42:	d021      	beq.n	8003f88 <seven_segment+0x58>
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8003f46:	4622      	mov	r2, r4
 8003f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f4c:	482a      	ldr	r0, [pc, #168]	; (8003ff8 <seven_segment+0xc8>)
 8003f4e:	f7fd fe6b 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003f52:	2201      	movs	r2, #1
 8003f54:	2110      	movs	r1, #16
 8003f56:	4828      	ldr	r0, [pc, #160]	; (8003ff8 <seven_segment+0xc8>)
 8003f58:	f7fd fe66 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2120      	movs	r1, #32
 8003f60:	4825      	ldr	r0, [pc, #148]	; (8003ff8 <seven_segment+0xc8>)
 8003f62:	f7fd fe61 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003f66:	2201      	movs	r2, #1
 8003f68:	2108      	movs	r1, #8
 8003f6a:	4823      	ldr	r0, [pc, #140]	; (8003ff8 <seven_segment+0xc8>)
 8003f6c:	f7fd fe5c 	bl	8001c28 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 8003f70:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <seven_segment+0xcc>)
 8003f72:	782b      	ldrb	r3, [r5, #0]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	5cd0      	ldrb	r0, [r2, r3]
 8003f78:	3830      	subs	r0, #48	; 0x30
 8003f7a:	b2c0      	uxtb	r0, r0
 8003f7c:	f7ff fde8 	bl	8003b50 <seven_segment_display>
		segment_counter += 1;
 8003f80:	782b      	ldrb	r3, [r5, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	702b      	strb	r3, [r5, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f8e:	481a      	ldr	r0, [pc, #104]	; (8003ff8 <seven_segment+0xc8>)
 8003f90:	f7fd fe4a 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003f94:	2201      	movs	r2, #1
 8003f96:	2110      	movs	r1, #16
 8003f98:	4817      	ldr	r0, [pc, #92]	; (8003ff8 <seven_segment+0xc8>)
 8003f9a:	f7fd fe45 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	2120      	movs	r1, #32
 8003fa2:	4815      	ldr	r0, [pc, #84]	; (8003ff8 <seven_segment+0xc8>)
 8003fa4:	f7fd fe40 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2108      	movs	r1, #8
 8003fac:	4812      	ldr	r0, [pc, #72]	; (8003ff8 <seven_segment+0xc8>)
 8003fae:	f7fd fe3b 	bl	8001c28 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <seven_segment+0xcc>)
 8003fb4:	782b      	ldrb	r3, [r5, #0]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	5cd0      	ldrb	r0, [r2, r3]
 8003fba:	3830      	subs	r0, #48	; 0x30
 8003fbc:	b2c0      	uxtb	r0, r0
 8003fbe:	f7ff fdc7 	bl	8003b50 <seven_segment_display>
		segment_counter = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	702b      	strb	r3, [r5, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003fc8:	4622      	mov	r2, r4
 8003fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fce:	480a      	ldr	r0, [pc, #40]	; (8003ff8 <seven_segment+0xc8>)
 8003fd0:	f7fd fe2a 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	e7bd      	b.n	8003f54 <seven_segment+0x24>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fde:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <seven_segment+0xc8>)
 8003fe0:	f7fd fe22 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2110      	movs	r1, #16
 8003fe8:	4803      	ldr	r0, [pc, #12]	; (8003ff8 <seven_segment+0xc8>)
 8003fea:	f7fd fe1d 	bl	8001c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8003fee:	2200      	movs	r2, #0
 8003ff0:	e7b5      	b.n	8003f5e <seven_segment+0x2e>
 8003ff2:	bf00      	nop
 8003ff4:	20000101 	.word	0x20000101
 8003ff8:	48000400 	.word	0x48000400
 8003ffc:	20000104 	.word	0x20000104

08004000 <liters_pumped>:

void liters_pumped(){
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	tim3_now = htim3.Instance->CNT; // timer value
 8004002:	4b1e      	ldr	r3, [pc, #120]	; (800407c <liters_pumped+0x7c>)

	// register auto-reload value: 65535

	if(tim3_prev - tim3_now  > 0 && valve_trig == 0){
 8004004:	4d1e      	ldr	r5, [pc, #120]	; (8004080 <liters_pumped+0x80>)
	tim3_now = htim3.Instance->CNT; // timer value
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <liters_pumped+0x84>)
 800400a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if(tim3_prev - tim3_now  > 0 && valve_trig == 0){
 800400c:	682b      	ldr	r3, [r5, #0]
	tim3_now = htim3.Instance->CNT; // timer value
 800400e:	6014      	str	r4, [r2, #0]
	if(tim3_prev - tim3_now  > 0 && valve_trig == 0){
 8004010:	429c      	cmp	r4, r3
 8004012:	d00a      	beq.n	800402a <liters_pumped+0x2a>
 8004014:	4f1c      	ldr	r7, [pc, #112]	; (8004088 <liters_pumped+0x88>)
 8004016:	783e      	ldrb	r6, [r7, #0]
		if( (65535 + tim3_now)-tim3_prev > 5100 && valve_trig == 0){
 8004018:	1ae3      	subs	r3, r4, r3
	if(tim3_prev - tim3_now  > 0 && valve_trig == 0){
 800401a:	b93e      	cbnz	r6, 800402c <liters_pumped+0x2c>
		if( (65535 + tim3_now)-tim3_prev > 5100 && valve_trig == 0){
 800401c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004020:	33ff      	adds	r3, #255	; 0xff
 8004022:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8004026:	4293      	cmp	r3, r2
 8004028:	d817      	bhi.n	800405a <liters_pumped+0x5a>
 800402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		water_acc+=100;
		valve_trig = 0;
		sprintf(total_water,"%lu", water_acc);
	}

	else if (tim3_prev - tim3_now  > 0 && valve_trig == 1){
 800402c:	2e01      	cmp	r6, #1
 800402e:	d1fc      	bne.n	800402a <liters_pumped+0x2a>
			if( (65535 + tim3_now) - tim3_prev > 5100 && valve_trig == 1){
 8004030:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004034:	33ff      	adds	r3, #255	; 0xff
 8004036:	f241 32ec 	movw	r2, #5100	; 0x13ec
 800403a:	4293      	cmp	r3, r2
 800403c:	d9f5      	bls.n	800402a <liters_pumped+0x2a>
				tim3_prev = tim3_now;
				water_acc+=100;
 800403e:	4e13      	ldr	r6, [pc, #76]	; (800408c <liters_pumped+0x8c>)
				sprintf(total_water,"%lu", water_acc);
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <liters_pumped+0x90>)
				water_acc+=100;
 8004042:	6833      	ldr	r3, [r6, #0]
				sprintf(total_water,"%lu", water_acc);
 8004044:	6810      	ldr	r0, [r2, #0]
 8004046:	4913      	ldr	r1, [pc, #76]	; (8004094 <liters_pumped+0x94>)
				tim3_prev = tim3_now;
 8004048:	602c      	str	r4, [r5, #0]
				water_acc+=100;
 800404a:	3364      	adds	r3, #100	; 0x64
				sprintf(total_water,"%lu", water_acc);
 800404c:	461a      	mov	r2, r3
				water_acc+=100;
 800404e:	6033      	str	r3, [r6, #0]
				sprintf(total_water,"%lu", water_acc);
 8004050:	f000 fd00 	bl	8004a54 <siprintf>
				valve_trig = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	703b      	strb	r3, [r7, #0]
			water_acc+=100;
			sprintf(total_water,"%lu", water_acc);
			valve_trig = 0;
		}

}
 8004058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			water_acc+=100;
 800405a:	f8df e030 	ldr.w	lr, [pc, #48]	; 800408c <liters_pumped+0x8c>
			sprintf(total_water,"%lu", water_acc);
 800405e:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <liters_pumped+0x90>)
			water_acc+=100;
 8004060:	f8de 3000 	ldr.w	r3, [lr]
			valve_trig = 0;
 8004064:	703e      	strb	r6, [r7, #0]
			water_acc+=100;
 8004066:	3364      	adds	r3, #100	; 0x64
			sprintf(total_water,"%lu", water_acc);
 8004068:	6810      	ldr	r0, [r2, #0]
			tim3_prev = tim3_now;
 800406a:	602c      	str	r4, [r5, #0]
			sprintf(total_water,"%lu", water_acc);
 800406c:	461a      	mov	r2, r3
			water_acc+=100;
 800406e:	f8ce 3000 	str.w	r3, [lr]
			sprintf(total_water,"%lu", water_acc);
 8004072:	4908      	ldr	r1, [pc, #32]	; (8004094 <liters_pumped+0x94>)
}
 8004074:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			sprintf(total_water,"%lu", water_acc);
 8004078:	f000 bcec 	b.w	8004a54 <siprintf>
 800407c:	2000019c 	.word	0x2000019c
 8004080:	20000114 	.word	0x20000114
 8004084:	20000110 	.word	0x20000110
 8004088:	20000128 	.word	0x20000128
 800408c:	20000134 	.word	0x20000134
 8004090:	20000118 	.word	0x20000118
 8004094:	0800537c 	.word	0x0800537c

08004098 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800409e:	4b45      	ldr	r3, [pc, #276]	; (80041b4 <MX_GPIO_Init+0x11c>)
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80040a6:	615a      	str	r2, [r3, #20]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80040ae:	9201      	str	r2, [sp, #4]
 80040b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80040b8:	615a      	str	r2, [r3, #20]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80040c0:	9202      	str	r2, [sp, #8]
 80040c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80040ca:	615a      	str	r2, [r3, #20]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80040d2:	9203      	str	r2, [sp, #12]
 80040d4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040dc:	615a      	str	r2, [r3, #20]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e4:	9304      	str	r3, [sp, #16]
 80040e6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 80040e8:	4d33      	ldr	r5, [pc, #204]	; (80041b8 <MX_GPIO_Init+0x120>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	2183      	movs	r1, #131	; 0x83
 80040ee:	4628      	mov	r0, r5
 80040f0:	f7fd fd9a 	bl	8001c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80040f4:	2200      	movs	r2, #0
 80040f6:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80040fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040fe:	f7fd fd93 	bl	8001c28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8004102:	4f2e      	ldr	r7, [pc, #184]	; (80041bc <MX_GPIO_Init+0x124>)
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800410a:	4638      	mov	r0, r7
 800410c:	f7fd fd8c 	bl	8001c28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004114:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004116:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80041c0 <MX_GPIO_Init+0x128>
 800411a:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2400      	movs	r4, #0
 8004120:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004122:	a905      	add	r1, sp, #20
 8004124:	4628      	mov	r0, r5
 8004126:	f7fd fc95 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 800412a:	2383      	movs	r3, #131	; 0x83
 800412c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412e:	2601      	movs	r6, #1
 8004130:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004136:	a905      	add	r1, sp, #20
 8004138:	4628      	mov	r0, r5
 800413a:	f7fd fc8b 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800413e:	2313      	movs	r3, #19
 8004140:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004142:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004146:	a905      	add	r1, sp, #20
 8004148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800414c:	f7fd fc82 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8004150:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004154:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004156:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004158:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415c:	a905      	add	r1, sp, #20
 800415e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004162:	f7fd fc77 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8004166:	f240 3302 	movw	r3, #770	; 0x302
 800416a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800416c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004170:	a905      	add	r1, sp, #20
 8004172:	4638      	mov	r0, r7
 8004174:	f7fd fc6e 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8004178:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800417c:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800417e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004182:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004184:	a905      	add	r1, sp, #20
 8004186:	4638      	mov	r0, r7
 8004188:	f7fd fc64 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 800418c:	2340      	movs	r3, #64	; 0x40
 800418e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004190:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004194:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 8004196:	a905      	add	r1, sp, #20
 8004198:	4628      	mov	r0, r5
 800419a:	f7fd fc5b 	bl	8001a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800419e:	4622      	mov	r2, r4
 80041a0:	4621      	mov	r1, r4
 80041a2:	2017      	movs	r0, #23
 80041a4:	f7fd fafe 	bl	80017a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80041a8:	2017      	movs	r0, #23
 80041aa:	f7fd fb31 	bl	8001810 <HAL_NVIC_EnableIRQ>

}
 80041ae:	b00a      	add	sp, #40	; 0x28
 80041b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b4:	40021000 	.word	0x40021000
 80041b8:	48000800 	.word	0x48000800
 80041bc:	48000400 	.word	0x48000400
 80041c0:	10110000 	.word	0x10110000

080041c4 <MX_DMA_Init>:
{
 80041c4:	b500      	push	{lr}
 80041c6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <MX_DMA_Init+0x30>)
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	615a      	str	r2, [r3, #20]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	4611      	mov	r1, r2
 80041e0:	200c      	movs	r0, #12
 80041e2:	f7fd fadf 	bl	80017a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80041e6:	200c      	movs	r0, #12
 80041e8:	f7fd fb12 	bl	8001810 <HAL_NVIC_EnableIRQ>
}
 80041ec:	b003      	add	sp, #12
 80041ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80041f8:	4770      	bx	lr

080041fa <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80041fa:	e7fe      	b.n	80041fa <_Error_Handler>

080041fc <MX_TIM2_Init>:
{
 80041fc:	b500      	push	{lr}
 80041fe:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8004200:	4818      	ldr	r0, [pc, #96]	; (8004264 <MX_TIM2_Init+0x68>)
 8004202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004206:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 8004208:	2301      	movs	r3, #1
 800420a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800420c:	2300      	movs	r3, #0
 800420e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 63999999;
 8004210:	4a15      	ldr	r2, [pc, #84]	; (8004268 <MX_TIM2_Init+0x6c>)
 8004212:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004214:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004216:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004218:	f7fe fc02 	bl	8002a20 <HAL_TIM_Base_Init>
 800421c:	b998      	cbnz	r0, 8004246 <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800421e:	a908      	add	r1, sp, #32
 8004220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004224:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004228:	480e      	ldr	r0, [pc, #56]	; (8004264 <MX_TIM2_Init+0x68>)
 800422a:	f7fe fa13 	bl	8002654 <HAL_TIM_ConfigClockSource>
 800422e:	b978      	cbnz	r0, 8004250 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004230:	2300      	movs	r3, #0
 8004232:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004234:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004236:	a901      	add	r1, sp, #4
 8004238:	480a      	ldr	r0, [pc, #40]	; (8004264 <MX_TIM2_Init+0x68>)
 800423a:	f7fe fc0d 	bl	8002a58 <HAL_TIMEx_MasterConfigSynchronization>
 800423e:	b960      	cbnz	r0, 800425a <MX_TIM2_Init+0x5e>
}
 8004240:	b009      	add	sp, #36	; 0x24
 8004242:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004246:	f240 1131 	movw	r1, #305	; 0x131
 800424a:	4808      	ldr	r0, [pc, #32]	; (800426c <MX_TIM2_Init+0x70>)
 800424c:	f7ff ffd5 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004250:	f240 1137 	movw	r1, #311	; 0x137
 8004254:	4805      	ldr	r0, [pc, #20]	; (800426c <MX_TIM2_Init+0x70>)
 8004256:	f7ff ffd0 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800425a:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800425e:	4803      	ldr	r0, [pc, #12]	; (800426c <MX_TIM2_Init+0x70>)
 8004260:	f7ff ffcb 	bl	80041fa <_Error_Handler>
 8004264:	2000024c 	.word	0x2000024c
 8004268:	03d08fff 	.word	0x03d08fff
 800426c:	08005380 	.word	0x08005380

08004270 <MX_USART1_UART_Init>:
{
 8004270:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8004272:	480c      	ldr	r0, [pc, #48]	; (80042a4 <MX_USART1_UART_Init+0x34>)
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <MX_USART1_UART_Init+0x38>)
 8004276:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004278:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800427c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800427e:	2300      	movs	r3, #0
 8004280:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004282:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004284:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004286:	220c      	movs	r2, #12
 8004288:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800428a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800428c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800428e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004290:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004292:	f7fe fe81 	bl	8002f98 <HAL_UART_Init>
 8004296:	b900      	cbnz	r0, 800429a <MX_USART1_UART_Init+0x2a>
 8004298:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800429a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800429e:	4803      	ldr	r0, [pc, #12]	; (80042ac <MX_USART1_UART_Init+0x3c>)
 80042a0:	f7ff ffab 	bl	80041fa <_Error_Handler>
 80042a4:	200001dc 	.word	0x200001dc
 80042a8:	40013800 	.word	0x40013800
 80042ac:	08005380 	.word	0x08005380

080042b0 <MX_ADC2_Init>:
{
 80042b0:	b500      	push	{lr}
 80042b2:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 80042b4:	4826      	ldr	r0, [pc, #152]	; (8004350 <MX_ADC2_Init+0xa0>)
 80042b6:	4b27      	ldr	r3, [pc, #156]	; (8004354 <MX_ADC2_Init+0xa4>)
 80042b8:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80042ba:	2300      	movs	r3, #0
 80042bc:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80042be:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042c0:	2201      	movs	r2, #1
 80042c2:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80042c4:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80042c6:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042c8:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042ca:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042cc:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 3;
 80042ce:	2103      	movs	r1, #3
 80042d0:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80042d2:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042d4:	2104      	movs	r1, #4
 80042d6:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80042d8:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80042da:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80042dc:	f7fc fee4 	bl	80010a8 <HAL_ADC_Init>
 80042e0:	bb10      	cbnz	r0, 8004328 <MX_ADC2_Init+0x78>
  sConfig.Channel = ADC_CHANNEL_8;
 80042e2:	2308      	movs	r3, #8
 80042e4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042ea:	2300      	movs	r3, #0
 80042ec:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80042ee:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042f0:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80042f2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042f4:	4669      	mov	r1, sp
 80042f6:	4816      	ldr	r0, [pc, #88]	; (8004350 <MX_ADC2_Init+0xa0>)
 80042f8:	f7fd f8ac 	bl	8001454 <HAL_ADC_ConfigChannel>
 80042fc:	b9c0      	cbnz	r0, 8004330 <MX_ADC2_Init+0x80>
  sConfig.Channel = ADC_CHANNEL_9;
 80042fe:	2309      	movs	r3, #9
 8004300:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004302:	2302      	movs	r3, #2
 8004304:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004306:	4669      	mov	r1, sp
 8004308:	4811      	ldr	r0, [pc, #68]	; (8004350 <MX_ADC2_Init+0xa0>)
 800430a:	f7fd f8a3 	bl	8001454 <HAL_ADC_ConfigChannel>
 800430e:	b9a0      	cbnz	r0, 800433a <MX_ADC2_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_12;
 8004310:	230c      	movs	r3, #12
 8004312:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004314:	2303      	movs	r3, #3
 8004316:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004318:	4669      	mov	r1, sp
 800431a:	480d      	ldr	r0, [pc, #52]	; (8004350 <MX_ADC2_Init+0xa0>)
 800431c:	f7fd f89a 	bl	8001454 <HAL_ADC_ConfigChannel>
 8004320:	b980      	cbnz	r0, 8004344 <MX_ADC2_Init+0x94>
}
 8004322:	b007      	add	sp, #28
 8004324:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004328:	21fe      	movs	r1, #254	; 0xfe
 800432a:	480b      	ldr	r0, [pc, #44]	; (8004358 <MX_ADC2_Init+0xa8>)
 800432c:	f7ff ff65 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004330:	f240 110b 	movw	r1, #267	; 0x10b
 8004334:	4808      	ldr	r0, [pc, #32]	; (8004358 <MX_ADC2_Init+0xa8>)
 8004336:	f7ff ff60 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800433a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800433e:	4806      	ldr	r0, [pc, #24]	; (8004358 <MX_ADC2_Init+0xa8>)
 8004340:	f7ff ff5b 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004344:	f240 111d 	movw	r1, #285	; 0x11d
 8004348:	4803      	ldr	r0, [pc, #12]	; (8004358 <MX_ADC2_Init+0xa8>)
 800434a:	f7ff ff56 	bl	80041fa <_Error_Handler>
 800434e:	bf00      	nop
 8004350:	20000148 	.word	0x20000148
 8004354:	50000100 	.word	0x50000100
 8004358:	08005380 	.word	0x08005380

0800435c <MX_TIM3_Init>:
{
 800435c:	b500      	push	{lr}
 800435e:	b089      	sub	sp, #36	; 0x24
  htim3.Instance = TIM3;
 8004360:	4818      	ldr	r0, [pc, #96]	; (80043c4 <MX_TIM3_Init+0x68>)
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <MX_TIM3_Init+0x6c>)
 8004364:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 64;
 8004366:	2340      	movs	r3, #64	; 0x40
 8004368:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800436a:	2300      	movs	r3, #0
 800436c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 800436e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004372:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004374:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004376:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004378:	f7fe fb52 	bl	8002a20 <HAL_TIM_Base_Init>
 800437c:	b998      	cbnz	r0, 80043a6 <MX_TIM3_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800437e:	a908      	add	r1, sp, #32
 8004380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004384:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004388:	480e      	ldr	r0, [pc, #56]	; (80043c4 <MX_TIM3_Init+0x68>)
 800438a:	f7fe f963 	bl	8002654 <HAL_TIM_ConfigClockSource>
 800438e:	b978      	cbnz	r0, 80043b0 <MX_TIM3_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004390:	2300      	movs	r3, #0
 8004392:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004394:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004396:	a901      	add	r1, sp, #4
 8004398:	480a      	ldr	r0, [pc, #40]	; (80043c4 <MX_TIM3_Init+0x68>)
 800439a:	f7fe fb5d 	bl	8002a58 <HAL_TIMEx_MasterConfigSynchronization>
 800439e:	b960      	cbnz	r0, 80043ba <MX_TIM3_Init+0x5e>
}
 80043a0:	b009      	add	sp, #36	; 0x24
 80043a2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80043a6:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80043aa:	4808      	ldr	r0, [pc, #32]	; (80043cc <MX_TIM3_Init+0x70>)
 80043ac:	f7ff ff25 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80043b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80043b4:	4805      	ldr	r0, [pc, #20]	; (80043cc <MX_TIM3_Init+0x70>)
 80043b6:	f7ff ff20 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80043ba:	f240 115f 	movw	r1, #351	; 0x15f
 80043be:	4803      	ldr	r0, [pc, #12]	; (80043cc <MX_TIM3_Init+0x70>)
 80043c0:	f7ff ff1b 	bl	80041fa <_Error_Handler>
 80043c4:	2000019c 	.word	0x2000019c
 80043c8:	40000400 	.word	0x40000400
 80043cc:	08005380 	.word	0x08005380

080043d0 <SystemClock_Config>:
{
 80043d0:	b500      	push	{lr}
 80043d2:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80043d4:	2302      	movs	r3, #2
 80043d6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043d8:	2201      	movs	r2, #1
 80043da:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80043dc:	2210      	movs	r2, #16
 80043de:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043e0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80043e2:	2300      	movs	r3, #0
 80043e4:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80043e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80043ea:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043ec:	a80c      	add	r0, sp, #48	; 0x30
 80043ee:	f7fd fc2f 	bl	8001c50 <HAL_RCC_OscConfig>
 80043f2:	bb60      	cbnz	r0, 800444e <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043f4:	230f      	movs	r3, #15
 80043f6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043f8:	2102      	movs	r1, #2
 80043fa:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043fc:	2300      	movs	r3, #0
 80043fe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004404:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004406:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004408:	a807      	add	r0, sp, #28
 800440a:	f7fd ff23 	bl	8002254 <HAL_RCC_ClockConfig>
 800440e:	bb10      	cbnz	r0, 8004456 <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8004410:	2381      	movs	r3, #129	; 0x81
 8004412:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004414:	2300      	movs	r3, #0
 8004416:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 8004418:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800441c:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800441e:	4668      	mov	r0, sp
 8004420:	f7fe f816 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8004424:	b9d8      	cbnz	r0, 800445e <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004426:	f7fd ffdd 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <SystemClock_Config+0x98>)
 800442c:	fba3 3000 	umull	r3, r0, r3, r0
 8004430:	0980      	lsrs	r0, r0, #6
 8004432:	f7fd f9f9 	bl	8001828 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004436:	2004      	movs	r0, #4
 8004438:	f7fd fa10 	bl	800185c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 800443c:	2202      	movs	r2, #2
 800443e:	2100      	movs	r1, #0
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	f7fd f9ae 	bl	80017a4 <HAL_NVIC_SetPriority>
}
 8004448:	b017      	add	sp, #92	; 0x5c
 800444a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800444e:	21c1      	movs	r1, #193	; 0xc1
 8004450:	4806      	ldr	r0, [pc, #24]	; (800446c <SystemClock_Config+0x9c>)
 8004452:	f7ff fed2 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004456:	21cf      	movs	r1, #207	; 0xcf
 8004458:	4804      	ldr	r0, [pc, #16]	; (800446c <SystemClock_Config+0x9c>)
 800445a:	f7ff fece 	bl	80041fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800445e:	21d7      	movs	r1, #215	; 0xd7
 8004460:	4802      	ldr	r0, [pc, #8]	; (800446c <SystemClock_Config+0x9c>)
 8004462:	f7ff feca 	bl	80041fa <_Error_Handler>
 8004466:	bf00      	nop
 8004468:	10624dd3 	.word	0x10624dd3
 800446c:	08005380 	.word	0x08005380

08004470 <main>:
{
 8004470:	b508      	push	{r3, lr}
  HAL_Init();
 8004472:	f7fc fd4f 	bl	8000f14 <HAL_Init>
  SystemClock_Config();
 8004476:	f7ff ffab 	bl	80043d0 <SystemClock_Config>
  MX_GPIO_Init();
 800447a:	f7ff fe0d 	bl	8004098 <MX_GPIO_Init>
  MX_DMA_Init();
 800447e:	f7ff fea1 	bl	80041c4 <MX_DMA_Init>
  MX_TIM2_Init();
 8004482:	f7ff febb 	bl	80041fc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004486:	f7ff fef3 	bl	8004270 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 800448a:	f7ff ff11 	bl	80042b0 <MX_ADC2_Init>
  MX_TIM3_Init();
 800448e:	f7ff ff65 	bl	800435c <MX_TIM3_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8004492:	4c1f      	ldr	r4, [pc, #124]	; (8004510 <main+0xa0>)
 8004494:	2100      	movs	r1, #0
 8004496:	4620      	mov	r0, r4
 8004498:	f7fc ff96 	bl	80013c8 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 800449c:	f7ff f946 	bl	800372c <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80044a0:	2201      	movs	r2, #1
 80044a2:	491c      	ldr	r1, [pc, #112]	; (8004514 <main+0xa4>)
 80044a4:	481c      	ldr	r0, [pc, #112]	; (8004518 <main+0xa8>)
 80044a6:	f7fe fb27 	bl	8002af8 <HAL_UART_Receive_IT>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 80044aa:	2207      	movs	r2, #7
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <main+0xac>)
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7fc ff03 	bl	80012bc <HAL_ADC_Start_DMA>
 HAL_TIM_IC_Start_IT(&htim3,1);
 80044b6:	2101      	movs	r1, #1
 80044b8:	4819      	ldr	r0, [pc, #100]	; (8004520 <main+0xb0>)
 80044ba:	f7fe f897 	bl	80025ec <HAL_TIM_IC_Start_IT>
 80044be:	e00f      	b.n	80044e0 <main+0x70>
		  rx_flag = 0;
 80044c0:	2200      	movs	r2, #0
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <main+0xb4>)
 80044c4:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 80044c6:	f7fe febf 	bl	8003248 <uart_comms>
 80044ca:	e00d      	b.n	80044e8 <main+0x78>
		  tim2_flag = 0;
 80044cc:	2200      	movs	r2, #0
 80044ce:	4b16      	ldr	r3, [pc, #88]	; (8004528 <main+0xb8>)
 80044d0:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 80044d2:	f7ff fd2d 	bl	8003f30 <seven_segment>
 80044d6:	e00b      	b.n	80044f0 <main+0x80>
	  if(tim3_flag == 1 ){ // also check for time specification.
 80044d8:	4b14      	ldr	r3, [pc, #80]	; (800452c <main+0xbc>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d011      	beq.n	8004504 <main+0x94>
	  if(rx_flag == 1 ){ 	// UART Comms
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <main+0xb4>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d0eb      	beq.n	80044c0 <main+0x50>
	  if(tim2_flag == 1){	// Seven Segment
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <main+0xb8>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d0ed      	beq.n	80044cc <main+0x5c>
	  if(adc_flag == 1){	// ADC conversion
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <main+0xc0>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d1ef      	bne.n	80044d8 <main+0x68>
		  adc_flag = 0;
 80044f8:	2200      	movs	r2, #0
 80044fa:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <main+0xc0>)
 80044fc:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 80044fe:	f7ff f9f3 	bl	80038e8 <adc_comms>
 8004502:	e7e9      	b.n	80044d8 <main+0x68>
		  tim3_flag = 0;
 8004504:	2200      	movs	r2, #0
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <main+0xbc>)
 8004508:	701a      	strb	r2, [r3, #0]
		  liters_pumped();
 800450a:	f7ff fd79 	bl	8004000 <liters_pumped>
 800450e:	e7e7      	b.n	80044e0 <main+0x70>
 8004510:	20000148 	.word	0x20000148
 8004514:	200002d4 	.word	0x200002d4
 8004518:	200001dc 	.word	0x200001dc
 800451c:	200000b8 	.word	0x200000b8
 8004520:	2000019c 	.word	0x2000019c
 8004524:	20000100 	.word	0x20000100
 8004528:	200000b4 	.word	0x200000b4
 800452c:	2000010d 	.word	0x2000010d
 8004530:	200000d2 	.word	0x200000d2

08004534 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_MspInit+0x78>)
{
 8004536:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	619a      	str	r2, [r3, #24]
 8004540:	699b      	ldr	r3, [r3, #24]
{
 8004542:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800454a:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800454e:	f7fd f917 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 8004552:	2202      	movs	r2, #2
 8004554:	2100      	movs	r1, #0
 8004556:	f06f 000b 	mvn.w	r0, #11
 800455a:	f7fd f923 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 800455e:	2202      	movs	r2, #2
 8004560:	2100      	movs	r1, #0
 8004562:	f06f 000a 	mvn.w	r0, #10
 8004566:	f7fd f91d 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 800456a:	2202      	movs	r2, #2
 800456c:	2100      	movs	r1, #0
 800456e:	f06f 0009 	mvn.w	r0, #9
 8004572:	f7fd f917 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 8004576:	2202      	movs	r2, #2
 8004578:	2100      	movs	r1, #0
 800457a:	f06f 0004 	mvn.w	r0, #4
 800457e:	f7fd f911 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 8004582:	2202      	movs	r2, #2
 8004584:	2100      	movs	r1, #0
 8004586:	f06f 0003 	mvn.w	r0, #3
 800458a:	f7fd f90b 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 800458e:	2202      	movs	r2, #2
 8004590:	2100      	movs	r1, #0
 8004592:	f06f 0001 	mvn.w	r0, #1
 8004596:	f7fd f905 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 800459a:	2202      	movs	r2, #2
 800459c:	2100      	movs	r1, #0
 800459e:	f04f 30ff 	mov.w	r0, #4294967295
 80045a2:	f7fd f8ff 	bl	80017a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045a6:	b003      	add	sp, #12
 80045a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80045ac:	40021000 	.word	0x40021000

080045b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <HAL_ADC_MspInit+0x88>)
 80045b2:	6802      	ldr	r2, [r0, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d000      	beq.n	80045ba <HAL_ADC_MspInit+0xa>
 80045b8:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <HAL_ADC_MspInit+0x8c>)
{
 80045bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045be:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80045c0:	4d1f      	ldr	r5, [pc, #124]	; (8004640 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80045c6:	615a      	str	r2, [r3, #20]
 80045c8:	695b      	ldr	r3, [r3, #20]
{
 80045ca:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	2600      	movs	r6, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045d2:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045d4:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045d6:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d8:	a901      	add	r1, sp, #4
 80045da:	4604      	mov	r4, r0
 80045dc:	4819      	ldr	r0, [pc, #100]	; (8004644 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045de:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045e0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045e2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e4:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045e6:	f7fd fa35 	bl	8001a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045ea:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ec:	a901      	add	r1, sp, #4
 80045ee:	4816      	ldr	r0, [pc, #88]	; (8004648 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045f0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	9603      	str	r6, [sp, #12]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80045f6:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f8:	f7fd fa2c 	bl	8001a54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80045fc:	f8df e050 	ldr.w	lr, [pc, #80]	; 8004650 <HAL_ADC_MspInit+0xa0>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004600:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004602:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004606:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800460a:	2320      	movs	r3, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800460c:	4628      	mov	r0, r5
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800460e:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004610:	61ee      	str	r6, [r5, #28]
    hdma_adc2.Instance = DMA1_Channel2;
 8004612:	f8c5 e000 	str.w	lr, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004616:	60ef      	str	r7, [r5, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004618:	6129      	str	r1, [r5, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800461a:	616a      	str	r2, [r5, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800461c:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800461e:	f7fd f92f 	bl	8001880 <HAL_DMA_Init>
 8004622:	b918      	cbnz	r0, 800462c <HAL_ADC_MspInit+0x7c>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004624:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004626:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004628:	b007      	add	sp, #28
 800462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 800462c:	2179      	movs	r1, #121	; 0x79
 800462e:	4807      	ldr	r0, [pc, #28]	; (800464c <HAL_ADC_MspInit+0x9c>)
 8004630:	f7ff fde3 	bl	80041fa <_Error_Handler>
 8004634:	e7f6      	b.n	8004624 <HAL_ADC_MspInit+0x74>
 8004636:	bf00      	nop
 8004638:	50000100 	.word	0x50000100
 800463c:	40021000 	.word	0x40021000
 8004640:	2000028c 	.word	0x2000028c
 8004644:	48000800 	.word	0x48000800
 8004648:	48000400 	.word	0x48000400
 800464c:	08005390 	.word	0x08005390
 8004650:	4002001c 	.word	0x4002001c

08004654 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004654:	b500      	push	{lr}

  if(htim_base->Instance==TIM2)
 8004656:	6803      	ldr	r3, [r0, #0]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800465c:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 800465e:	d012      	beq.n	8004686 <HAL_TIM_Base_MspInit+0x32>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004660:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <HAL_TIM_Base_MspInit+0x5c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d002      	beq.n	800466c <HAL_TIM_Base_MspInit+0x18>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004666:	b003      	add	sp, #12
 8004668:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_TIM_Base_MspInit+0x60>)
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	f042 0202 	orr.w	r2, r2, #2
 8004674:	61da      	str	r2, [r3, #28]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	9b01      	ldr	r3, [sp, #4]
}
 8004680:	b003      	add	sp, #12
 8004682:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004686:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800468a:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	61da      	str	r2, [r3, #28]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800469c:	2202      	movs	r2, #2
 800469e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046a0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 80046a2:	f7fd f87f 	bl	80017a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046a6:	201c      	movs	r0, #28
 80046a8:	f7fd f8b2 	bl	8001810 <HAL_NVIC_EnableIRQ>
 80046ac:	e7db      	b.n	8004666 <HAL_TIM_Base_MspInit+0x12>
 80046ae:	bf00      	nop
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40021000 	.word	0x40021000

080046b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80046b8:	6802      	ldr	r2, [r0, #0]
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <HAL_UART_MspInit+0x54>)
 80046bc:	429a      	cmp	r2, r3
 80046be:	d000      	beq.n	80046c2 <HAL_UART_MspInit+0xa>
 80046c0:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046c2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 80046c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 80046c8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ca:	4811      	ldr	r0, [pc, #68]	; (8004710 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80046cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d0:	619a      	str	r2, [r3, #24]
 80046d2:	699b      	ldr	r3, [r3, #24]
{
 80046d4:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 80046d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046da:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046de:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046e0:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046e2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80046e4:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ea:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 80046ec:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80046ee:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046f4:	f7fd f9ae 	bl	8001a54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 80046f8:	4621      	mov	r1, r4
 80046fa:	2201      	movs	r2, #1
 80046fc:	2025      	movs	r0, #37	; 0x25
 80046fe:	f7fd f851 	bl	80017a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004702:	2025      	movs	r0, #37	; 0x25
 8004704:	f7fd f884 	bl	8001810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004708:	b007      	add	sp, #28
 800470a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470c:	40013800 	.word	0x40013800
 8004710:	48000800 	.word	0x48000800

08004714 <SVC_Handler>:
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop

08004718 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop

0800471c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800471c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800471e:	f7fc fc0b 	bl	8000f38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004722:	f7fd f8a9 	bl	8001878 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tim2_flag = 1;
 8004726:	4b02      	ldr	r3, [pc, #8]	; (8004730 <SysTick_Handler+0x14>)
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	bd08      	pop	{r3, pc}
 800472e:	bf00      	nop
 8004730:	200000b4 	.word	0x200000b4

08004734 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004734:	4801      	ldr	r0, [pc, #4]	; (800473c <DMA1_Channel2_IRQHandler+0x8>)
 8004736:	f7fd b941 	b.w	80019bc <HAL_DMA_IRQHandler>
 800473a:	bf00      	nop
 800473c:	2000028c 	.word	0x2000028c

08004740 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8004740:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004742:	2040      	movs	r0, #64	; 0x40
 8004744:	f7fd fa78 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 8004748:	4b01      	ldr	r3, [pc, #4]	; (8004750 <EXTI9_5_IRQHandler+0x10>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	bd08      	pop	{r3, pc}
 8004750:	2000010d 	.word	0x2000010d

08004754 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004754:	4801      	ldr	r0, [pc, #4]	; (800475c <TIM2_IRQHandler+0x8>)
 8004756:	f7fe b84b 	b.w	80027f0 <HAL_TIM_IRQHandler>
 800475a:	bf00      	nop
 800475c:	2000024c 	.word	0x2000024c

08004760 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <USART1_IRQHandler+0x8>)
 8004762:	f7fe bcbf 	b.w	80030e4 <HAL_UART_IRQHandler>
 8004766:	bf00      	nop
 8004768:	200001dc 	.word	0x200001dc

0800476c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800476c:	4917      	ldr	r1, [pc, #92]	; (80047cc <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004772:	4819      	ldr	r0, [pc, #100]	; (80047d8 <SystemInit+0x6c>)
{
 8004774:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004776:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800477a:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800477e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8004782:	681c      	ldr	r4, [r3, #0]
 8004784:	f044 0401 	orr.w	r4, r4, #1
 8004788:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 800478a:	685c      	ldr	r4, [r3, #4]
 800478c:	4022      	ands	r2, r4
 800478e:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800479a:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047a2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80047aa:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	f022 020f 	bic.w	r2, r2, #15
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 80047b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80047b6:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 80047b8:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 80047be:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 80047c0:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047c2:	608a      	str	r2, [r1, #8]
#endif
}
 80047c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000ed00 	.word	0xe000ed00
 80047d0:	40021000 	.word	0x40021000
 80047d4:	f87fc00c 	.word	0xf87fc00c
 80047d8:	ff00fccc 	.word	0xff00fccc

080047dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80047dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004814 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80047e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80047e2:	e003      	b.n	80047ec <LoopCopyDataInit>

080047e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80047e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80047e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80047ea:	3104      	adds	r1, #4

080047ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80047ec:	480b      	ldr	r0, [pc, #44]	; (800481c <LoopForever+0xa>)
	ldr	r3, =_edata
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <LoopForever+0xe>)
	adds	r2, r0, r1
 80047f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80047f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80047f4:	d3f6      	bcc.n	80047e4 <CopyDataInit>
	ldr	r2, =_sbss
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <LoopForever+0x12>)
	b	LoopFillZerobss
 80047f8:	e002      	b.n	8004800 <LoopFillZerobss>

080047fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80047fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80047fc:	f842 3b04 	str.w	r3, [r2], #4

08004800 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004800:	4b09      	ldr	r3, [pc, #36]	; (8004828 <LoopForever+0x16>)
	cmp	r2, r3
 8004802:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004804:	d3f9      	bcc.n	80047fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004806:	f7ff ffb1 	bl	800476c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800480a:	f000 f819 	bl	8004840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800480e:	f7ff fe2f 	bl	8004470 <main>

08004812 <LoopForever>:

LoopForever:
    b LoopForever
 8004812:	e7fe      	b.n	8004812 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004814:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004818:	08005418 	.word	0x08005418
	ldr	r0, =_sdata
 800481c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004820:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 8004824:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 8004828:	200002dc 	.word	0x200002dc

0800482c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800482c:	e7fe      	b.n	800482c <ADC1_2_IRQHandler>
	...

08004830 <calloc>:
 8004830:	4b02      	ldr	r3, [pc, #8]	; (800483c <calloc+0xc>)
 8004832:	460a      	mov	r2, r1
 8004834:	4601      	mov	r1, r0
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f000 b841 	b.w	80048be <_calloc_r>
 800483c:	20000030 	.word	0x20000030

08004840 <__libc_init_array>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4e0d      	ldr	r6, [pc, #52]	; (8004878 <__libc_init_array+0x38>)
 8004844:	4c0d      	ldr	r4, [pc, #52]	; (800487c <__libc_init_array+0x3c>)
 8004846:	1ba4      	subs	r4, r4, r6
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	2500      	movs	r5, #0
 800484c:	42a5      	cmp	r5, r4
 800484e:	d109      	bne.n	8004864 <__libc_init_array+0x24>
 8004850:	4e0b      	ldr	r6, [pc, #44]	; (8004880 <__libc_init_array+0x40>)
 8004852:	4c0c      	ldr	r4, [pc, #48]	; (8004884 <__libc_init_array+0x44>)
 8004854:	f000 fd74 	bl	8005340 <_init>
 8004858:	1ba4      	subs	r4, r4, r6
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	2500      	movs	r5, #0
 800485e:	42a5      	cmp	r5, r4
 8004860:	d105      	bne.n	800486e <__libc_init_array+0x2e>
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004868:	4798      	blx	r3
 800486a:	3501      	adds	r5, #1
 800486c:	e7ee      	b.n	800484c <__libc_init_array+0xc>
 800486e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004872:	4798      	blx	r3
 8004874:	3501      	adds	r5, #1
 8004876:	e7f2      	b.n	800485e <__libc_init_array+0x1e>
 8004878:	08005410 	.word	0x08005410
 800487c:	08005410 	.word	0x08005410
 8004880:	08005410 	.word	0x08005410
 8004884:	08005414 	.word	0x08005414

08004888 <malloc>:
 8004888:	4b02      	ldr	r3, [pc, #8]	; (8004894 <malloc+0xc>)
 800488a:	4601      	mov	r1, r0
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	f000 b873 	b.w	8004978 <_malloc_r>
 8004892:	bf00      	nop
 8004894:	20000030 	.word	0x20000030

08004898 <memcpy>:
 8004898:	b510      	push	{r4, lr}
 800489a:	1e43      	subs	r3, r0, #1
 800489c:	440a      	add	r2, r1
 800489e:	4291      	cmp	r1, r2
 80048a0:	d100      	bne.n	80048a4 <memcpy+0xc>
 80048a2:	bd10      	pop	{r4, pc}
 80048a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ac:	e7f7      	b.n	800489e <memcpy+0x6>

080048ae <memset>:
 80048ae:	4402      	add	r2, r0
 80048b0:	4603      	mov	r3, r0
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d100      	bne.n	80048b8 <memset+0xa>
 80048b6:	4770      	bx	lr
 80048b8:	f803 1b01 	strb.w	r1, [r3], #1
 80048bc:	e7f9      	b.n	80048b2 <memset+0x4>

080048be <_calloc_r>:
 80048be:	b538      	push	{r3, r4, r5, lr}
 80048c0:	fb02 f401 	mul.w	r4, r2, r1
 80048c4:	4621      	mov	r1, r4
 80048c6:	f000 f857 	bl	8004978 <_malloc_r>
 80048ca:	4605      	mov	r5, r0
 80048cc:	b118      	cbz	r0, 80048d6 <_calloc_r+0x18>
 80048ce:	4622      	mov	r2, r4
 80048d0:	2100      	movs	r1, #0
 80048d2:	f7ff ffec 	bl	80048ae <memset>
 80048d6:	4628      	mov	r0, r5
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080048dc <_free_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4605      	mov	r5, r0
 80048e0:	2900      	cmp	r1, #0
 80048e2:	d045      	beq.n	8004970 <_free_r+0x94>
 80048e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e8:	1f0c      	subs	r4, r1, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bfb8      	it	lt
 80048ee:	18e4      	addlt	r4, r4, r3
 80048f0:	f000 f8d4 	bl	8004a9c <__malloc_lock>
 80048f4:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <_free_r+0x98>)
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	4610      	mov	r0, r2
 80048fa:	b933      	cbnz	r3, 800490a <_free_r+0x2e>
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	6014      	str	r4, [r2, #0]
 8004900:	4628      	mov	r0, r5
 8004902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004906:	f000 b8ca 	b.w	8004a9e <__malloc_unlock>
 800490a:	42a3      	cmp	r3, r4
 800490c:	d90c      	bls.n	8004928 <_free_r+0x4c>
 800490e:	6821      	ldr	r1, [r4, #0]
 8004910:	1862      	adds	r2, r4, r1
 8004912:	4293      	cmp	r3, r2
 8004914:	bf04      	itt	eq
 8004916:	681a      	ldreq	r2, [r3, #0]
 8004918:	685b      	ldreq	r3, [r3, #4]
 800491a:	6063      	str	r3, [r4, #4]
 800491c:	bf04      	itt	eq
 800491e:	1852      	addeq	r2, r2, r1
 8004920:	6022      	streq	r2, [r4, #0]
 8004922:	6004      	str	r4, [r0, #0]
 8004924:	e7ec      	b.n	8004900 <_free_r+0x24>
 8004926:	4613      	mov	r3, r2
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	b10a      	cbz	r2, 8004930 <_free_r+0x54>
 800492c:	42a2      	cmp	r2, r4
 800492e:	d9fa      	bls.n	8004926 <_free_r+0x4a>
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	1858      	adds	r0, r3, r1
 8004934:	42a0      	cmp	r0, r4
 8004936:	d10b      	bne.n	8004950 <_free_r+0x74>
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	4401      	add	r1, r0
 800493c:	1858      	adds	r0, r3, r1
 800493e:	4282      	cmp	r2, r0
 8004940:	6019      	str	r1, [r3, #0]
 8004942:	d1dd      	bne.n	8004900 <_free_r+0x24>
 8004944:	6810      	ldr	r0, [r2, #0]
 8004946:	6852      	ldr	r2, [r2, #4]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	4401      	add	r1, r0
 800494c:	6019      	str	r1, [r3, #0]
 800494e:	e7d7      	b.n	8004900 <_free_r+0x24>
 8004950:	d902      	bls.n	8004958 <_free_r+0x7c>
 8004952:	230c      	movs	r3, #12
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	e7d3      	b.n	8004900 <_free_r+0x24>
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	1821      	adds	r1, r4, r0
 800495c:	428a      	cmp	r2, r1
 800495e:	bf04      	itt	eq
 8004960:	6811      	ldreq	r1, [r2, #0]
 8004962:	6852      	ldreq	r2, [r2, #4]
 8004964:	6062      	str	r2, [r4, #4]
 8004966:	bf04      	itt	eq
 8004968:	1809      	addeq	r1, r1, r0
 800496a:	6021      	streq	r1, [r4, #0]
 800496c:	605c      	str	r4, [r3, #4]
 800496e:	e7c7      	b.n	8004900 <_free_r+0x24>
 8004970:	bd38      	pop	{r3, r4, r5, pc}
 8004972:	bf00      	nop
 8004974:	20000138 	.word	0x20000138

08004978 <_malloc_r>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	1ccd      	adds	r5, r1, #3
 800497c:	f025 0503 	bic.w	r5, r5, #3
 8004980:	3508      	adds	r5, #8
 8004982:	2d0c      	cmp	r5, #12
 8004984:	bf38      	it	cc
 8004986:	250c      	movcc	r5, #12
 8004988:	2d00      	cmp	r5, #0
 800498a:	4606      	mov	r6, r0
 800498c:	db01      	blt.n	8004992 <_malloc_r+0x1a>
 800498e:	42a9      	cmp	r1, r5
 8004990:	d903      	bls.n	800499a <_malloc_r+0x22>
 8004992:	230c      	movs	r3, #12
 8004994:	6033      	str	r3, [r6, #0]
 8004996:	2000      	movs	r0, #0
 8004998:	bd70      	pop	{r4, r5, r6, pc}
 800499a:	f000 f87f 	bl	8004a9c <__malloc_lock>
 800499e:	4a23      	ldr	r2, [pc, #140]	; (8004a2c <_malloc_r+0xb4>)
 80049a0:	6814      	ldr	r4, [r2, #0]
 80049a2:	4621      	mov	r1, r4
 80049a4:	b991      	cbnz	r1, 80049cc <_malloc_r+0x54>
 80049a6:	4c22      	ldr	r4, [pc, #136]	; (8004a30 <_malloc_r+0xb8>)
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	b91b      	cbnz	r3, 80049b4 <_malloc_r+0x3c>
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f841 	bl	8004a34 <_sbrk_r>
 80049b2:	6020      	str	r0, [r4, #0]
 80049b4:	4629      	mov	r1, r5
 80049b6:	4630      	mov	r0, r6
 80049b8:	f000 f83c 	bl	8004a34 <_sbrk_r>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d126      	bne.n	8004a0e <_malloc_r+0x96>
 80049c0:	230c      	movs	r3, #12
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 f86a 	bl	8004a9e <__malloc_unlock>
 80049ca:	e7e4      	b.n	8004996 <_malloc_r+0x1e>
 80049cc:	680b      	ldr	r3, [r1, #0]
 80049ce:	1b5b      	subs	r3, r3, r5
 80049d0:	d41a      	bmi.n	8004a08 <_malloc_r+0x90>
 80049d2:	2b0b      	cmp	r3, #11
 80049d4:	d90f      	bls.n	80049f6 <_malloc_r+0x7e>
 80049d6:	600b      	str	r3, [r1, #0]
 80049d8:	50cd      	str	r5, [r1, r3]
 80049da:	18cc      	adds	r4, r1, r3
 80049dc:	4630      	mov	r0, r6
 80049de:	f000 f85e 	bl	8004a9e <__malloc_unlock>
 80049e2:	f104 000b 	add.w	r0, r4, #11
 80049e6:	1d23      	adds	r3, r4, #4
 80049e8:	f020 0007 	bic.w	r0, r0, #7
 80049ec:	1ac3      	subs	r3, r0, r3
 80049ee:	d01b      	beq.n	8004a28 <_malloc_r+0xb0>
 80049f0:	425a      	negs	r2, r3
 80049f2:	50e2      	str	r2, [r4, r3]
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	428c      	cmp	r4, r1
 80049f8:	bf0d      	iteet	eq
 80049fa:	6863      	ldreq	r3, [r4, #4]
 80049fc:	684b      	ldrne	r3, [r1, #4]
 80049fe:	6063      	strne	r3, [r4, #4]
 8004a00:	6013      	streq	r3, [r2, #0]
 8004a02:	bf18      	it	ne
 8004a04:	460c      	movne	r4, r1
 8004a06:	e7e9      	b.n	80049dc <_malloc_r+0x64>
 8004a08:	460c      	mov	r4, r1
 8004a0a:	6849      	ldr	r1, [r1, #4]
 8004a0c:	e7ca      	b.n	80049a4 <_malloc_r+0x2c>
 8004a0e:	1cc4      	adds	r4, r0, #3
 8004a10:	f024 0403 	bic.w	r4, r4, #3
 8004a14:	42a0      	cmp	r0, r4
 8004a16:	d005      	beq.n	8004a24 <_malloc_r+0xac>
 8004a18:	1a21      	subs	r1, r4, r0
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f000 f80a 	bl	8004a34 <_sbrk_r>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d0cd      	beq.n	80049c0 <_malloc_r+0x48>
 8004a24:	6025      	str	r5, [r4, #0]
 8004a26:	e7d9      	b.n	80049dc <_malloc_r+0x64>
 8004a28:	bd70      	pop	{r4, r5, r6, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000138 	.word	0x20000138
 8004a30:	2000013c 	.word	0x2000013c

08004a34 <_sbrk_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4c06      	ldr	r4, [pc, #24]	; (8004a50 <_sbrk_r+0x1c>)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	f000 fc70 	bl	8005324 <_sbrk>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_sbrk_r+0x1a>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_sbrk_r+0x1a>
 8004a4c:	602b      	str	r3, [r5, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	200002d8 	.word	0x200002d8

08004a54 <siprintf>:
 8004a54:	b40e      	push	{r1, r2, r3}
 8004a56:	b500      	push	{lr}
 8004a58:	b09c      	sub	sp, #112	; 0x70
 8004a5a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a60:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004a64:	9002      	str	r0, [sp, #8]
 8004a66:	9006      	str	r0, [sp, #24]
 8004a68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a6c:	480a      	ldr	r0, [pc, #40]	; (8004a98 <siprintf+0x44>)
 8004a6e:	9104      	str	r1, [sp, #16]
 8004a70:	9107      	str	r1, [sp, #28]
 8004a72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a7a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004a7e:	6800      	ldr	r0, [r0, #0]
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	a902      	add	r1, sp, #8
 8004a84:	f000 f868 	bl	8004b58 <_svfiprintf_r>
 8004a88:	9b02      	ldr	r3, [sp, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	b01c      	add	sp, #112	; 0x70
 8004a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a94:	b003      	add	sp, #12
 8004a96:	4770      	bx	lr
 8004a98:	20000030 	.word	0x20000030

08004a9c <__malloc_lock>:
 8004a9c:	4770      	bx	lr

08004a9e <__malloc_unlock>:
 8004a9e:	4770      	bx	lr

08004aa0 <__ssputs_r>:
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	688e      	ldr	r6, [r1, #8]
 8004aa6:	429e      	cmp	r6, r3
 8004aa8:	4682      	mov	sl, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	4691      	mov	r9, r2
 8004aae:	4698      	mov	r8, r3
 8004ab0:	d835      	bhi.n	8004b1e <__ssputs_r+0x7e>
 8004ab2:	898a      	ldrh	r2, [r1, #12]
 8004ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ab8:	d031      	beq.n	8004b1e <__ssputs_r+0x7e>
 8004aba:	6825      	ldr	r5, [r4, #0]
 8004abc:	6909      	ldr	r1, [r1, #16]
 8004abe:	1a6f      	subs	r7, r5, r1
 8004ac0:	6965      	ldr	r5, [r4, #20]
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac8:	fb95 f5f3 	sdiv	r5, r5, r3
 8004acc:	f108 0301 	add.w	r3, r8, #1
 8004ad0:	443b      	add	r3, r7
 8004ad2:	429d      	cmp	r5, r3
 8004ad4:	bf38      	it	cc
 8004ad6:	461d      	movcc	r5, r3
 8004ad8:	0553      	lsls	r3, r2, #21
 8004ada:	d531      	bpl.n	8004b40 <__ssputs_r+0xa0>
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7ff ff4b 	bl	8004978 <_malloc_r>
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	b950      	cbnz	r0, 8004afc <__ssputs_r+0x5c>
 8004ae6:	230c      	movs	r3, #12
 8004ae8:	f8ca 3000 	str.w	r3, [sl]
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af2:	81a3      	strh	r3, [r4, #12]
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	463a      	mov	r2, r7
 8004afe:	6921      	ldr	r1, [r4, #16]
 8004b00:	f7ff feca 	bl	8004898 <memcpy>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	6126      	str	r6, [r4, #16]
 8004b12:	6165      	str	r5, [r4, #20]
 8004b14:	443e      	add	r6, r7
 8004b16:	1bed      	subs	r5, r5, r7
 8004b18:	6026      	str	r6, [r4, #0]
 8004b1a:	60a5      	str	r5, [r4, #8]
 8004b1c:	4646      	mov	r6, r8
 8004b1e:	4546      	cmp	r6, r8
 8004b20:	bf28      	it	cs
 8004b22:	4646      	movcs	r6, r8
 8004b24:	4632      	mov	r2, r6
 8004b26:	4649      	mov	r1, r9
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	f000 fa9f 	bl	800506c <memmove>
 8004b2e:	68a3      	ldr	r3, [r4, #8]
 8004b30:	1b9b      	subs	r3, r3, r6
 8004b32:	60a3      	str	r3, [r4, #8]
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	441e      	add	r6, r3
 8004b38:	6026      	str	r6, [r4, #0]
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	462a      	mov	r2, r5
 8004b42:	f000 faad 	bl	80050a0 <_realloc_r>
 8004b46:	4606      	mov	r6, r0
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d1e1      	bne.n	8004b10 <__ssputs_r+0x70>
 8004b4c:	6921      	ldr	r1, [r4, #16]
 8004b4e:	4650      	mov	r0, sl
 8004b50:	f7ff fec4 	bl	80048dc <_free_r>
 8004b54:	e7c7      	b.n	8004ae6 <__ssputs_r+0x46>
	...

08004b58 <_svfiprintf_r>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	b09d      	sub	sp, #116	; 0x74
 8004b5e:	4680      	mov	r8, r0
 8004b60:	9303      	str	r3, [sp, #12]
 8004b62:	898b      	ldrh	r3, [r1, #12]
 8004b64:	061c      	lsls	r4, r3, #24
 8004b66:	460d      	mov	r5, r1
 8004b68:	4616      	mov	r6, r2
 8004b6a:	d50f      	bpl.n	8004b8c <_svfiprintf_r+0x34>
 8004b6c:	690b      	ldr	r3, [r1, #16]
 8004b6e:	b96b      	cbnz	r3, 8004b8c <_svfiprintf_r+0x34>
 8004b70:	2140      	movs	r1, #64	; 0x40
 8004b72:	f7ff ff01 	bl	8004978 <_malloc_r>
 8004b76:	6028      	str	r0, [r5, #0]
 8004b78:	6128      	str	r0, [r5, #16]
 8004b7a:	b928      	cbnz	r0, 8004b88 <_svfiprintf_r+0x30>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	f8c8 3000 	str.w	r3, [r8]
 8004b82:	f04f 30ff 	mov.w	r0, #4294967295
 8004b86:	e0c5      	b.n	8004d14 <_svfiprintf_r+0x1bc>
 8004b88:	2340      	movs	r3, #64	; 0x40
 8004b8a:	616b      	str	r3, [r5, #20]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b90:	2320      	movs	r3, #32
 8004b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b96:	2330      	movs	r3, #48	; 0x30
 8004b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b9c:	f04f 0b01 	mov.w	fp, #1
 8004ba0:	4637      	mov	r7, r6
 8004ba2:	463c      	mov	r4, r7
 8004ba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d13c      	bne.n	8004c26 <_svfiprintf_r+0xce>
 8004bac:	ebb7 0a06 	subs.w	sl, r7, r6
 8004bb0:	d00b      	beq.n	8004bca <_svfiprintf_r+0x72>
 8004bb2:	4653      	mov	r3, sl
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4640      	mov	r0, r8
 8004bba:	f7ff ff71 	bl	8004aa0 <__ssputs_r>
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f000 80a3 	beq.w	8004d0a <_svfiprintf_r+0x1b2>
 8004bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc6:	4453      	add	r3, sl
 8004bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bca:	783b      	ldrb	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 809c 	beq.w	8004d0a <_svfiprintf_r+0x1b2>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd8:	9304      	str	r3, [sp, #16]
 8004bda:	9307      	str	r3, [sp, #28]
 8004bdc:	9205      	str	r2, [sp, #20]
 8004bde:	9306      	str	r3, [sp, #24]
 8004be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004be4:	931a      	str	r3, [sp, #104]	; 0x68
 8004be6:	2205      	movs	r2, #5
 8004be8:	7821      	ldrb	r1, [r4, #0]
 8004bea:	4850      	ldr	r0, [pc, #320]	; (8004d2c <_svfiprintf_r+0x1d4>)
 8004bec:	f7fb faf8 	bl	80001e0 <memchr>
 8004bf0:	1c67      	adds	r7, r4, #1
 8004bf2:	9b04      	ldr	r3, [sp, #16]
 8004bf4:	b9d8      	cbnz	r0, 8004c2e <_svfiprintf_r+0xd6>
 8004bf6:	06d9      	lsls	r1, r3, #27
 8004bf8:	bf44      	itt	mi
 8004bfa:	2220      	movmi	r2, #32
 8004bfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c00:	071a      	lsls	r2, r3, #28
 8004c02:	bf44      	itt	mi
 8004c04:	222b      	movmi	r2, #43	; 0x2b
 8004c06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c0a:	7822      	ldrb	r2, [r4, #0]
 8004c0c:	2a2a      	cmp	r2, #42	; 0x2a
 8004c0e:	d016      	beq.n	8004c3e <_svfiprintf_r+0xe6>
 8004c10:	9a07      	ldr	r2, [sp, #28]
 8004c12:	2100      	movs	r1, #0
 8004c14:	200a      	movs	r0, #10
 8004c16:	4627      	mov	r7, r4
 8004c18:	3401      	adds	r4, #1
 8004c1a:	783b      	ldrb	r3, [r7, #0]
 8004c1c:	3b30      	subs	r3, #48	; 0x30
 8004c1e:	2b09      	cmp	r3, #9
 8004c20:	d951      	bls.n	8004cc6 <_svfiprintf_r+0x16e>
 8004c22:	b1c9      	cbz	r1, 8004c58 <_svfiprintf_r+0x100>
 8004c24:	e011      	b.n	8004c4a <_svfiprintf_r+0xf2>
 8004c26:	2b25      	cmp	r3, #37	; 0x25
 8004c28:	d0c0      	beq.n	8004bac <_svfiprintf_r+0x54>
 8004c2a:	4627      	mov	r7, r4
 8004c2c:	e7b9      	b.n	8004ba2 <_svfiprintf_r+0x4a>
 8004c2e:	4a3f      	ldr	r2, [pc, #252]	; (8004d2c <_svfiprintf_r+0x1d4>)
 8004c30:	1a80      	subs	r0, r0, r2
 8004c32:	fa0b f000 	lsl.w	r0, fp, r0
 8004c36:	4318      	orrs	r0, r3
 8004c38:	9004      	str	r0, [sp, #16]
 8004c3a:	463c      	mov	r4, r7
 8004c3c:	e7d3      	b.n	8004be6 <_svfiprintf_r+0x8e>
 8004c3e:	9a03      	ldr	r2, [sp, #12]
 8004c40:	1d11      	adds	r1, r2, #4
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	9103      	str	r1, [sp, #12]
 8004c46:	2a00      	cmp	r2, #0
 8004c48:	db01      	blt.n	8004c4e <_svfiprintf_r+0xf6>
 8004c4a:	9207      	str	r2, [sp, #28]
 8004c4c:	e004      	b.n	8004c58 <_svfiprintf_r+0x100>
 8004c4e:	4252      	negs	r2, r2
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	9207      	str	r2, [sp, #28]
 8004c56:	9304      	str	r3, [sp, #16]
 8004c58:	783b      	ldrb	r3, [r7, #0]
 8004c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c5c:	d10e      	bne.n	8004c7c <_svfiprintf_r+0x124>
 8004c5e:	787b      	ldrb	r3, [r7, #1]
 8004c60:	2b2a      	cmp	r3, #42	; 0x2a
 8004c62:	f107 0101 	add.w	r1, r7, #1
 8004c66:	d132      	bne.n	8004cce <_svfiprintf_r+0x176>
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	9203      	str	r2, [sp, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bfb8      	it	lt
 8004c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c78:	3702      	adds	r7, #2
 8004c7a:	9305      	str	r3, [sp, #20]
 8004c7c:	4c2c      	ldr	r4, [pc, #176]	; (8004d30 <_svfiprintf_r+0x1d8>)
 8004c7e:	7839      	ldrb	r1, [r7, #0]
 8004c80:	2203      	movs	r2, #3
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7fb faac 	bl	80001e0 <memchr>
 8004c88:	b138      	cbz	r0, 8004c9a <_svfiprintf_r+0x142>
 8004c8a:	2340      	movs	r3, #64	; 0x40
 8004c8c:	1b00      	subs	r0, r0, r4
 8004c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c92:	9b04      	ldr	r3, [sp, #16]
 8004c94:	4303      	orrs	r3, r0
 8004c96:	9304      	str	r3, [sp, #16]
 8004c98:	3701      	adds	r7, #1
 8004c9a:	7839      	ldrb	r1, [r7, #0]
 8004c9c:	4825      	ldr	r0, [pc, #148]	; (8004d34 <_svfiprintf_r+0x1dc>)
 8004c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ca2:	2206      	movs	r2, #6
 8004ca4:	1c7e      	adds	r6, r7, #1
 8004ca6:	f7fb fa9b 	bl	80001e0 <memchr>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d035      	beq.n	8004d1a <_svfiprintf_r+0x1c2>
 8004cae:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <_svfiprintf_r+0x1e0>)
 8004cb0:	b9fb      	cbnz	r3, 8004cf2 <_svfiprintf_r+0x19a>
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	3307      	adds	r3, #7
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	3308      	adds	r3, #8
 8004cbc:	9303      	str	r3, [sp, #12]
 8004cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc0:	444b      	add	r3, r9
 8004cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc4:	e76c      	b.n	8004ba0 <_svfiprintf_r+0x48>
 8004cc6:	fb00 3202 	mla	r2, r0, r2, r3
 8004cca:	2101      	movs	r1, #1
 8004ccc:	e7a3      	b.n	8004c16 <_svfiprintf_r+0xbe>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9305      	str	r3, [sp, #20]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	240a      	movs	r4, #10
 8004cd6:	460f      	mov	r7, r1
 8004cd8:	3101      	adds	r1, #1
 8004cda:	783a      	ldrb	r2, [r7, #0]
 8004cdc:	3a30      	subs	r2, #48	; 0x30
 8004cde:	2a09      	cmp	r2, #9
 8004ce0:	d903      	bls.n	8004cea <_svfiprintf_r+0x192>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0ca      	beq.n	8004c7c <_svfiprintf_r+0x124>
 8004ce6:	9005      	str	r0, [sp, #20]
 8004ce8:	e7c8      	b.n	8004c7c <_svfiprintf_r+0x124>
 8004cea:	fb04 2000 	mla	r0, r4, r0, r2
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e7f1      	b.n	8004cd6 <_svfiprintf_r+0x17e>
 8004cf2:	ab03      	add	r3, sp, #12
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	462a      	mov	r2, r5
 8004cf8:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <_svfiprintf_r+0x1e4>)
 8004cfa:	a904      	add	r1, sp, #16
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	f3af 8000 	nop.w
 8004d02:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d06:	4681      	mov	r9, r0
 8004d08:	d1d9      	bne.n	8004cbe <_svfiprintf_r+0x166>
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	065b      	lsls	r3, r3, #25
 8004d0e:	f53f af38 	bmi.w	8004b82 <_svfiprintf_r+0x2a>
 8004d12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d14:	b01d      	add	sp, #116	; 0x74
 8004d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1a:	ab03      	add	r3, sp, #12
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	462a      	mov	r2, r5
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <_svfiprintf_r+0x1e4>)
 8004d22:	a904      	add	r1, sp, #16
 8004d24:	4640      	mov	r0, r8
 8004d26:	f000 f881 	bl	8004e2c <_printf_i>
 8004d2a:	e7ea      	b.n	8004d02 <_svfiprintf_r+0x1aa>
 8004d2c:	080053d0 	.word	0x080053d0
 8004d30:	080053d6 	.word	0x080053d6
 8004d34:	080053da 	.word	0x080053da
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	08004aa1 	.word	0x08004aa1

08004d40 <_printf_common>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	4691      	mov	r9, r2
 8004d46:	461f      	mov	r7, r3
 8004d48:	688a      	ldr	r2, [r1, #8]
 8004d4a:	690b      	ldr	r3, [r1, #16]
 8004d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bfb8      	it	lt
 8004d54:	4613      	movlt	r3, r2
 8004d56:	f8c9 3000 	str.w	r3, [r9]
 8004d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	b112      	cbz	r2, 8004d6a <_printf_common+0x2a>
 8004d64:	3301      	adds	r3, #1
 8004d66:	f8c9 3000 	str.w	r3, [r9]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	0699      	lsls	r1, r3, #26
 8004d6e:	bf42      	ittt	mi
 8004d70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d74:	3302      	addmi	r3, #2
 8004d76:	f8c9 3000 	strmi.w	r3, [r9]
 8004d7a:	6825      	ldr	r5, [r4, #0]
 8004d7c:	f015 0506 	ands.w	r5, r5, #6
 8004d80:	d107      	bne.n	8004d92 <_printf_common+0x52>
 8004d82:	f104 0a19 	add.w	sl, r4, #25
 8004d86:	68e3      	ldr	r3, [r4, #12]
 8004d88:	f8d9 2000 	ldr.w	r2, [r9]
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	429d      	cmp	r5, r3
 8004d90:	db29      	blt.n	8004de6 <_printf_common+0xa6>
 8004d92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	3300      	adds	r3, #0
 8004d9a:	bf18      	it	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	0692      	lsls	r2, r2, #26
 8004da0:	d42e      	bmi.n	8004e00 <_printf_common+0xc0>
 8004da2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004da6:	4639      	mov	r1, r7
 8004da8:	4630      	mov	r0, r6
 8004daa:	47c0      	blx	r8
 8004dac:	3001      	adds	r0, #1
 8004dae:	d021      	beq.n	8004df4 <_printf_common+0xb4>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	68e5      	ldr	r5, [r4, #12]
 8004db4:	f8d9 2000 	ldr.w	r2, [r9]
 8004db8:	f003 0306 	and.w	r3, r3, #6
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	bf08      	it	eq
 8004dc0:	1aad      	subeq	r5, r5, r2
 8004dc2:	68a3      	ldr	r3, [r4, #8]
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	bf0c      	ite	eq
 8004dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dcc:	2500      	movne	r5, #0
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	bfc4      	itt	gt
 8004dd2:	1a9b      	subgt	r3, r3, r2
 8004dd4:	18ed      	addgt	r5, r5, r3
 8004dd6:	f04f 0900 	mov.w	r9, #0
 8004dda:	341a      	adds	r4, #26
 8004ddc:	454d      	cmp	r5, r9
 8004dde:	d11b      	bne.n	8004e18 <_printf_common+0xd8>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de6:	2301      	movs	r3, #1
 8004de8:	4652      	mov	r2, sl
 8004dea:	4639      	mov	r1, r7
 8004dec:	4630      	mov	r0, r6
 8004dee:	47c0      	blx	r8
 8004df0:	3001      	adds	r0, #1
 8004df2:	d103      	bne.n	8004dfc <_printf_common+0xbc>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	e7c2      	b.n	8004d86 <_printf_common+0x46>
 8004e00:	18e1      	adds	r1, r4, r3
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	2030      	movs	r0, #48	; 0x30
 8004e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e0a:	4422      	add	r2, r4
 8004e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e14:	3302      	adds	r3, #2
 8004e16:	e7c4      	b.n	8004da2 <_printf_common+0x62>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	4630      	mov	r0, r6
 8004e20:	47c0      	blx	r8
 8004e22:	3001      	adds	r0, #1
 8004e24:	d0e6      	beq.n	8004df4 <_printf_common+0xb4>
 8004e26:	f109 0901 	add.w	r9, r9, #1
 8004e2a:	e7d7      	b.n	8004ddc <_printf_common+0x9c>

08004e2c <_printf_i>:
 8004e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e30:	4617      	mov	r7, r2
 8004e32:	7e0a      	ldrb	r2, [r1, #24]
 8004e34:	b085      	sub	sp, #20
 8004e36:	2a6e      	cmp	r2, #110	; 0x6e
 8004e38:	4698      	mov	r8, r3
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e40:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004e44:	f000 80bc 	beq.w	8004fc0 <_printf_i+0x194>
 8004e48:	d81a      	bhi.n	8004e80 <_printf_i+0x54>
 8004e4a:	2a63      	cmp	r2, #99	; 0x63
 8004e4c:	d02e      	beq.n	8004eac <_printf_i+0x80>
 8004e4e:	d80a      	bhi.n	8004e66 <_printf_i+0x3a>
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	f000 80c8 	beq.w	8004fe6 <_printf_i+0x1ba>
 8004e56:	2a58      	cmp	r2, #88	; 0x58
 8004e58:	f000 808a 	beq.w	8004f70 <_printf_i+0x144>
 8004e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004e64:	e02a      	b.n	8004ebc <_printf_i+0x90>
 8004e66:	2a64      	cmp	r2, #100	; 0x64
 8004e68:	d001      	beq.n	8004e6e <_printf_i+0x42>
 8004e6a:	2a69      	cmp	r2, #105	; 0x69
 8004e6c:	d1f6      	bne.n	8004e5c <_printf_i+0x30>
 8004e6e:	6821      	ldr	r1, [r4, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e76:	d023      	beq.n	8004ec0 <_printf_i+0x94>
 8004e78:	1d11      	adds	r1, r2, #4
 8004e7a:	6019      	str	r1, [r3, #0]
 8004e7c:	6813      	ldr	r3, [r2, #0]
 8004e7e:	e027      	b.n	8004ed0 <_printf_i+0xa4>
 8004e80:	2a73      	cmp	r2, #115	; 0x73
 8004e82:	f000 80b4 	beq.w	8004fee <_printf_i+0x1c2>
 8004e86:	d808      	bhi.n	8004e9a <_printf_i+0x6e>
 8004e88:	2a6f      	cmp	r2, #111	; 0x6f
 8004e8a:	d02a      	beq.n	8004ee2 <_printf_i+0xb6>
 8004e8c:	2a70      	cmp	r2, #112	; 0x70
 8004e8e:	d1e5      	bne.n	8004e5c <_printf_i+0x30>
 8004e90:	680a      	ldr	r2, [r1, #0]
 8004e92:	f042 0220 	orr.w	r2, r2, #32
 8004e96:	600a      	str	r2, [r1, #0]
 8004e98:	e003      	b.n	8004ea2 <_printf_i+0x76>
 8004e9a:	2a75      	cmp	r2, #117	; 0x75
 8004e9c:	d021      	beq.n	8004ee2 <_printf_i+0xb6>
 8004e9e:	2a78      	cmp	r2, #120	; 0x78
 8004ea0:	d1dc      	bne.n	8004e5c <_printf_i+0x30>
 8004ea2:	2278      	movs	r2, #120	; 0x78
 8004ea4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004ea8:	496e      	ldr	r1, [pc, #440]	; (8005064 <_printf_i+0x238>)
 8004eaa:	e064      	b.n	8004f76 <_printf_i+0x14a>
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004eb2:	1d11      	adds	r1, r2, #4
 8004eb4:	6019      	str	r1, [r3, #0]
 8004eb6:	6813      	ldr	r3, [r2, #0]
 8004eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0a3      	b.n	8005008 <_printf_i+0x1dc>
 8004ec0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ec4:	f102 0104 	add.w	r1, r2, #4
 8004ec8:	6019      	str	r1, [r3, #0]
 8004eca:	d0d7      	beq.n	8004e7c <_printf_i+0x50>
 8004ecc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da03      	bge.n	8004edc <_printf_i+0xb0>
 8004ed4:	222d      	movs	r2, #45	; 0x2d
 8004ed6:	425b      	negs	r3, r3
 8004ed8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004edc:	4962      	ldr	r1, [pc, #392]	; (8005068 <_printf_i+0x23c>)
 8004ede:	220a      	movs	r2, #10
 8004ee0:	e017      	b.n	8004f12 <_printf_i+0xe6>
 8004ee2:	6820      	ldr	r0, [r4, #0]
 8004ee4:	6819      	ldr	r1, [r3, #0]
 8004ee6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004eea:	d003      	beq.n	8004ef4 <_printf_i+0xc8>
 8004eec:	1d08      	adds	r0, r1, #4
 8004eee:	6018      	str	r0, [r3, #0]
 8004ef0:	680b      	ldr	r3, [r1, #0]
 8004ef2:	e006      	b.n	8004f02 <_printf_i+0xd6>
 8004ef4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ef8:	f101 0004 	add.w	r0, r1, #4
 8004efc:	6018      	str	r0, [r3, #0]
 8004efe:	d0f7      	beq.n	8004ef0 <_printf_i+0xc4>
 8004f00:	880b      	ldrh	r3, [r1, #0]
 8004f02:	4959      	ldr	r1, [pc, #356]	; (8005068 <_printf_i+0x23c>)
 8004f04:	2a6f      	cmp	r2, #111	; 0x6f
 8004f06:	bf14      	ite	ne
 8004f08:	220a      	movne	r2, #10
 8004f0a:	2208      	moveq	r2, #8
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004f12:	6865      	ldr	r5, [r4, #4]
 8004f14:	60a5      	str	r5, [r4, #8]
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	f2c0 809c 	blt.w	8005054 <_printf_i+0x228>
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	f020 0004 	bic.w	r0, r0, #4
 8004f22:	6020      	str	r0, [r4, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d13f      	bne.n	8004fa8 <_printf_i+0x17c>
 8004f28:	2d00      	cmp	r5, #0
 8004f2a:	f040 8095 	bne.w	8005058 <_printf_i+0x22c>
 8004f2e:	4675      	mov	r5, lr
 8004f30:	2a08      	cmp	r2, #8
 8004f32:	d10b      	bne.n	8004f4c <_printf_i+0x120>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	07da      	lsls	r2, r3, #31
 8004f38:	d508      	bpl.n	8004f4c <_printf_i+0x120>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	6862      	ldr	r2, [r4, #4]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	bfde      	ittt	le
 8004f42:	2330      	movle	r3, #48	; 0x30
 8004f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f4c:	ebae 0305 	sub.w	r3, lr, r5
 8004f50:	6123      	str	r3, [r4, #16]
 8004f52:	f8cd 8000 	str.w	r8, [sp]
 8004f56:	463b      	mov	r3, r7
 8004f58:	aa03      	add	r2, sp, #12
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f7ff feef 	bl	8004d40 <_printf_common>
 8004f62:	3001      	adds	r0, #1
 8004f64:	d155      	bne.n	8005012 <_printf_i+0x1e6>
 8004f66:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6a:	b005      	add	sp, #20
 8004f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f70:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004f74:	493c      	ldr	r1, [pc, #240]	; (8005068 <_printf_i+0x23c>)
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004f7e:	f100 0504 	add.w	r5, r0, #4
 8004f82:	601d      	str	r5, [r3, #0]
 8004f84:	d001      	beq.n	8004f8a <_printf_i+0x15e>
 8004f86:	6803      	ldr	r3, [r0, #0]
 8004f88:	e002      	b.n	8004f90 <_printf_i+0x164>
 8004f8a:	0655      	lsls	r5, r2, #25
 8004f8c:	d5fb      	bpl.n	8004f86 <_printf_i+0x15a>
 8004f8e:	8803      	ldrh	r3, [r0, #0]
 8004f90:	07d0      	lsls	r0, r2, #31
 8004f92:	bf44      	itt	mi
 8004f94:	f042 0220 	orrmi.w	r2, r2, #32
 8004f98:	6022      	strmi	r2, [r4, #0]
 8004f9a:	b91b      	cbnz	r3, 8004fa4 <_printf_i+0x178>
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	f022 0220 	bic.w	r2, r2, #32
 8004fa2:	6022      	str	r2, [r4, #0]
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	e7b1      	b.n	8004f0c <_printf_i+0xe0>
 8004fa8:	4675      	mov	r5, lr
 8004faa:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fae:	fb02 3310 	mls	r3, r2, r0, r3
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d1f5      	bne.n	8004faa <_printf_i+0x17e>
 8004fbe:	e7b7      	b.n	8004f30 <_printf_i+0x104>
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	6949      	ldr	r1, [r1, #20]
 8004fc6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004fca:	d004      	beq.n	8004fd6 <_printf_i+0x1aa>
 8004fcc:	1d10      	adds	r0, r2, #4
 8004fce:	6018      	str	r0, [r3, #0]
 8004fd0:	6813      	ldr	r3, [r2, #0]
 8004fd2:	6019      	str	r1, [r3, #0]
 8004fd4:	e007      	b.n	8004fe6 <_printf_i+0x1ba>
 8004fd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fda:	f102 0004 	add.w	r0, r2, #4
 8004fde:	6018      	str	r0, [r3, #0]
 8004fe0:	6813      	ldr	r3, [r2, #0]
 8004fe2:	d0f6      	beq.n	8004fd2 <_printf_i+0x1a6>
 8004fe4:	8019      	strh	r1, [r3, #0]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	4675      	mov	r5, lr
 8004fec:	e7b1      	b.n	8004f52 <_printf_i+0x126>
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	1d11      	adds	r1, r2, #4
 8004ff2:	6019      	str	r1, [r3, #0]
 8004ff4:	6815      	ldr	r5, [r2, #0]
 8004ff6:	6862      	ldr	r2, [r4, #4]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f7fb f8f0 	bl	80001e0 <memchr>
 8005000:	b108      	cbz	r0, 8005006 <_printf_i+0x1da>
 8005002:	1b40      	subs	r0, r0, r5
 8005004:	6060      	str	r0, [r4, #4]
 8005006:	6863      	ldr	r3, [r4, #4]
 8005008:	6123      	str	r3, [r4, #16]
 800500a:	2300      	movs	r3, #0
 800500c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005010:	e79f      	b.n	8004f52 <_printf_i+0x126>
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	462a      	mov	r2, r5
 8005016:	4639      	mov	r1, r7
 8005018:	4630      	mov	r0, r6
 800501a:	47c0      	blx	r8
 800501c:	3001      	adds	r0, #1
 800501e:	d0a2      	beq.n	8004f66 <_printf_i+0x13a>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	079b      	lsls	r3, r3, #30
 8005024:	d507      	bpl.n	8005036 <_printf_i+0x20a>
 8005026:	2500      	movs	r5, #0
 8005028:	f104 0919 	add.w	r9, r4, #25
 800502c:	68e3      	ldr	r3, [r4, #12]
 800502e:	9a03      	ldr	r2, [sp, #12]
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	429d      	cmp	r5, r3
 8005034:	db05      	blt.n	8005042 <_printf_i+0x216>
 8005036:	68e0      	ldr	r0, [r4, #12]
 8005038:	9b03      	ldr	r3, [sp, #12]
 800503a:	4298      	cmp	r0, r3
 800503c:	bfb8      	it	lt
 800503e:	4618      	movlt	r0, r3
 8005040:	e793      	b.n	8004f6a <_printf_i+0x13e>
 8005042:	2301      	movs	r3, #1
 8005044:	464a      	mov	r2, r9
 8005046:	4639      	mov	r1, r7
 8005048:	4630      	mov	r0, r6
 800504a:	47c0      	blx	r8
 800504c:	3001      	adds	r0, #1
 800504e:	d08a      	beq.n	8004f66 <_printf_i+0x13a>
 8005050:	3501      	adds	r5, #1
 8005052:	e7eb      	b.n	800502c <_printf_i+0x200>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1a7      	bne.n	8004fa8 <_printf_i+0x17c>
 8005058:	780b      	ldrb	r3, [r1, #0]
 800505a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800505e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005062:	e765      	b.n	8004f30 <_printf_i+0x104>
 8005064:	080053f2 	.word	0x080053f2
 8005068:	080053e1 	.word	0x080053e1

0800506c <memmove>:
 800506c:	4288      	cmp	r0, r1
 800506e:	b510      	push	{r4, lr}
 8005070:	eb01 0302 	add.w	r3, r1, r2
 8005074:	d803      	bhi.n	800507e <memmove+0x12>
 8005076:	1e42      	subs	r2, r0, #1
 8005078:	4299      	cmp	r1, r3
 800507a:	d10c      	bne.n	8005096 <memmove+0x2a>
 800507c:	bd10      	pop	{r4, pc}
 800507e:	4298      	cmp	r0, r3
 8005080:	d2f9      	bcs.n	8005076 <memmove+0xa>
 8005082:	1881      	adds	r1, r0, r2
 8005084:	1ad2      	subs	r2, r2, r3
 8005086:	42d3      	cmn	r3, r2
 8005088:	d100      	bne.n	800508c <memmove+0x20>
 800508a:	bd10      	pop	{r4, pc}
 800508c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005090:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005094:	e7f7      	b.n	8005086 <memmove+0x1a>
 8005096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800509e:	e7eb      	b.n	8005078 <memmove+0xc>

080050a0 <_realloc_r>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	4607      	mov	r7, r0
 80050a4:	4614      	mov	r4, r2
 80050a6:	460e      	mov	r6, r1
 80050a8:	b921      	cbnz	r1, 80050b4 <_realloc_r+0x14>
 80050aa:	4611      	mov	r1, r2
 80050ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050b0:	f7ff bc62 	b.w	8004978 <_malloc_r>
 80050b4:	b922      	cbnz	r2, 80050c0 <_realloc_r+0x20>
 80050b6:	f7ff fc11 	bl	80048dc <_free_r>
 80050ba:	4625      	mov	r5, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c0:	f000 f814 	bl	80050ec <_malloc_usable_size_r>
 80050c4:	4284      	cmp	r4, r0
 80050c6:	d90f      	bls.n	80050e8 <_realloc_r+0x48>
 80050c8:	4621      	mov	r1, r4
 80050ca:	4638      	mov	r0, r7
 80050cc:	f7ff fc54 	bl	8004978 <_malloc_r>
 80050d0:	4605      	mov	r5, r0
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d0f2      	beq.n	80050bc <_realloc_r+0x1c>
 80050d6:	4631      	mov	r1, r6
 80050d8:	4622      	mov	r2, r4
 80050da:	f7ff fbdd 	bl	8004898 <memcpy>
 80050de:	4631      	mov	r1, r6
 80050e0:	4638      	mov	r0, r7
 80050e2:	f7ff fbfb 	bl	80048dc <_free_r>
 80050e6:	e7e9      	b.n	80050bc <_realloc_r+0x1c>
 80050e8:	4635      	mov	r5, r6
 80050ea:	e7e7      	b.n	80050bc <_realloc_r+0x1c>

080050ec <_malloc_usable_size_r>:
 80050ec:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80050f0:	2800      	cmp	r0, #0
 80050f2:	f1a0 0004 	sub.w	r0, r0, #4
 80050f6:	bfbc      	itt	lt
 80050f8:	580b      	ldrlt	r3, [r1, r0]
 80050fa:	18c0      	addlt	r0, r0, r3
 80050fc:	4770      	bx	lr
	...

08005100 <sqrt>:
 8005100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005104:	ed2d 8b02 	vpush	{d8}
 8005108:	b08b      	sub	sp, #44	; 0x2c
 800510a:	ec55 4b10 	vmov	r4, r5, d0
 800510e:	f000 f851 	bl	80051b4 <__ieee754_sqrt>
 8005112:	4b26      	ldr	r3, [pc, #152]	; (80051ac <sqrt+0xac>)
 8005114:	eeb0 8a40 	vmov.f32	s16, s0
 8005118:	eef0 8a60 	vmov.f32	s17, s1
 800511c:	f993 6000 	ldrsb.w	r6, [r3]
 8005120:	1c73      	adds	r3, r6, #1
 8005122:	d02a      	beq.n	800517a <sqrt+0x7a>
 8005124:	4622      	mov	r2, r4
 8005126:	462b      	mov	r3, r5
 8005128:	4620      	mov	r0, r4
 800512a:	4629      	mov	r1, r5
 800512c:	f7fb fcfa 	bl	8000b24 <__aeabi_dcmpun>
 8005130:	4607      	mov	r7, r0
 8005132:	bb10      	cbnz	r0, 800517a <sqrt+0x7a>
 8005134:	f04f 0800 	mov.w	r8, #0
 8005138:	f04f 0900 	mov.w	r9, #0
 800513c:	4642      	mov	r2, r8
 800513e:	464b      	mov	r3, r9
 8005140:	4620      	mov	r0, r4
 8005142:	4629      	mov	r1, r5
 8005144:	f7fb fcc6 	bl	8000ad4 <__aeabi_dcmplt>
 8005148:	b1b8      	cbz	r0, 800517a <sqrt+0x7a>
 800514a:	2301      	movs	r3, #1
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <sqrt+0xb0>)
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	9708      	str	r7, [sp, #32]
 8005154:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005158:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800515c:	b9b6      	cbnz	r6, 800518c <sqrt+0x8c>
 800515e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005162:	4668      	mov	r0, sp
 8005164:	f000 f8d6 	bl	8005314 <matherr>
 8005168:	b1d0      	cbz	r0, 80051a0 <sqrt+0xa0>
 800516a:	9b08      	ldr	r3, [sp, #32]
 800516c:	b11b      	cbz	r3, 8005176 <sqrt+0x76>
 800516e:	f000 f8d3 	bl	8005318 <__errno>
 8005172:	9b08      	ldr	r3, [sp, #32]
 8005174:	6003      	str	r3, [r0, #0]
 8005176:	ed9d 8b06 	vldr	d8, [sp, #24]
 800517a:	eeb0 0a48 	vmov.f32	s0, s16
 800517e:	eef0 0a68 	vmov.f32	s1, s17
 8005182:	b00b      	add	sp, #44	; 0x2c
 8005184:	ecbd 8b02 	vpop	{d8}
 8005188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	4640      	mov	r0, r8
 8005192:	4649      	mov	r1, r9
 8005194:	f7fb fb56 	bl	8000844 <__aeabi_ddiv>
 8005198:	2e02      	cmp	r6, #2
 800519a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800519e:	d1e0      	bne.n	8005162 <sqrt+0x62>
 80051a0:	f000 f8ba 	bl	8005318 <__errno>
 80051a4:	2321      	movs	r3, #33	; 0x21
 80051a6:	6003      	str	r3, [r0, #0]
 80051a8:	e7df      	b.n	800516a <sqrt+0x6a>
 80051aa:	bf00      	nop
 80051ac:	20000094 	.word	0x20000094
 80051b0:	08005403 	.word	0x08005403

080051b4 <__ieee754_sqrt>:
 80051b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b8:	ec55 4b10 	vmov	r4, r5, d0
 80051bc:	4e54      	ldr	r6, [pc, #336]	; (8005310 <__ieee754_sqrt+0x15c>)
 80051be:	43ae      	bics	r6, r5
 80051c0:	ee10 0a10 	vmov	r0, s0
 80051c4:	462b      	mov	r3, r5
 80051c6:	462a      	mov	r2, r5
 80051c8:	4621      	mov	r1, r4
 80051ca:	d113      	bne.n	80051f4 <__ieee754_sqrt+0x40>
 80051cc:	ee10 2a10 	vmov	r2, s0
 80051d0:	462b      	mov	r3, r5
 80051d2:	ee10 0a10 	vmov	r0, s0
 80051d6:	4629      	mov	r1, r5
 80051d8:	f7fb fa0a 	bl	80005f0 <__aeabi_dmul>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4620      	mov	r0, r4
 80051e2:	4629      	mov	r1, r5
 80051e4:	f7fb f852 	bl	800028c <__adddf3>
 80051e8:	4604      	mov	r4, r0
 80051ea:	460d      	mov	r5, r1
 80051ec:	ec45 4b10 	vmov	d0, r4, r5
 80051f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	dc10      	bgt.n	800521a <__ieee754_sqrt+0x66>
 80051f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80051fc:	4330      	orrs	r0, r6
 80051fe:	d0f5      	beq.n	80051ec <__ieee754_sqrt+0x38>
 8005200:	b15d      	cbz	r5, 800521a <__ieee754_sqrt+0x66>
 8005202:	ee10 2a10 	vmov	r2, s0
 8005206:	462b      	mov	r3, r5
 8005208:	4620      	mov	r0, r4
 800520a:	4629      	mov	r1, r5
 800520c:	f7fb f83c 	bl	8000288 <__aeabi_dsub>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	f7fb fb16 	bl	8000844 <__aeabi_ddiv>
 8005218:	e7e6      	b.n	80051e8 <__ieee754_sqrt+0x34>
 800521a:	151b      	asrs	r3, r3, #20
 800521c:	d10c      	bne.n	8005238 <__ieee754_sqrt+0x84>
 800521e:	2a00      	cmp	r2, #0
 8005220:	d06d      	beq.n	80052fe <__ieee754_sqrt+0x14a>
 8005222:	2000      	movs	r0, #0
 8005224:	02d6      	lsls	r6, r2, #11
 8005226:	d56e      	bpl.n	8005306 <__ieee754_sqrt+0x152>
 8005228:	1e44      	subs	r4, r0, #1
 800522a:	1b1b      	subs	r3, r3, r4
 800522c:	f1c0 0420 	rsb	r4, r0, #32
 8005230:	fa21 f404 	lsr.w	r4, r1, r4
 8005234:	4322      	orrs	r2, r4
 8005236:	4081      	lsls	r1, r0
 8005238:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800523c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005240:	07dd      	lsls	r5, r3, #31
 8005242:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005246:	bf42      	ittt	mi
 8005248:	0052      	lslmi	r2, r2, #1
 800524a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800524e:	0049      	lslmi	r1, r1, #1
 8005250:	1058      	asrs	r0, r3, #1
 8005252:	2500      	movs	r5, #0
 8005254:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8005258:	441a      	add	r2, r3
 800525a:	0049      	lsls	r1, r1, #1
 800525c:	2316      	movs	r3, #22
 800525e:	462c      	mov	r4, r5
 8005260:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005264:	19a7      	adds	r7, r4, r6
 8005266:	4297      	cmp	r7, r2
 8005268:	bfde      	ittt	le
 800526a:	1bd2      	suble	r2, r2, r7
 800526c:	19bc      	addle	r4, r7, r6
 800526e:	19ad      	addle	r5, r5, r6
 8005270:	0052      	lsls	r2, r2, #1
 8005272:	3b01      	subs	r3, #1
 8005274:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005278:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800527c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005280:	d1f0      	bne.n	8005264 <__ieee754_sqrt+0xb0>
 8005282:	f04f 0e20 	mov.w	lr, #32
 8005286:	469c      	mov	ip, r3
 8005288:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800528c:	42a2      	cmp	r2, r4
 800528e:	eb06 070c 	add.w	r7, r6, ip
 8005292:	dc02      	bgt.n	800529a <__ieee754_sqrt+0xe6>
 8005294:	d112      	bne.n	80052bc <__ieee754_sqrt+0x108>
 8005296:	428f      	cmp	r7, r1
 8005298:	d810      	bhi.n	80052bc <__ieee754_sqrt+0x108>
 800529a:	2f00      	cmp	r7, #0
 800529c:	eb07 0c06 	add.w	ip, r7, r6
 80052a0:	da34      	bge.n	800530c <__ieee754_sqrt+0x158>
 80052a2:	f1bc 0f00 	cmp.w	ip, #0
 80052a6:	db31      	blt.n	800530c <__ieee754_sqrt+0x158>
 80052a8:	f104 0801 	add.w	r8, r4, #1
 80052ac:	1b12      	subs	r2, r2, r4
 80052ae:	428f      	cmp	r7, r1
 80052b0:	bf88      	it	hi
 80052b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80052b6:	1bc9      	subs	r1, r1, r7
 80052b8:	4433      	add	r3, r6
 80052ba:	4644      	mov	r4, r8
 80052bc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80052c0:	f1be 0e01 	subs.w	lr, lr, #1
 80052c4:	443a      	add	r2, r7
 80052c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80052ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80052ce:	d1dd      	bne.n	800528c <__ieee754_sqrt+0xd8>
 80052d0:	430a      	orrs	r2, r1
 80052d2:	d006      	beq.n	80052e2 <__ieee754_sqrt+0x12e>
 80052d4:	1c5c      	adds	r4, r3, #1
 80052d6:	bf13      	iteet	ne
 80052d8:	3301      	addne	r3, #1
 80052da:	3501      	addeq	r5, #1
 80052dc:	4673      	moveq	r3, lr
 80052de:	f023 0301 	bicne.w	r3, r3, #1
 80052e2:	106a      	asrs	r2, r5, #1
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	07e9      	lsls	r1, r5, #31
 80052e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80052ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80052f0:	bf48      	it	mi
 80052f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80052f6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80052fa:	461c      	mov	r4, r3
 80052fc:	e776      	b.n	80051ec <__ieee754_sqrt+0x38>
 80052fe:	0aca      	lsrs	r2, r1, #11
 8005300:	3b15      	subs	r3, #21
 8005302:	0549      	lsls	r1, r1, #21
 8005304:	e78b      	b.n	800521e <__ieee754_sqrt+0x6a>
 8005306:	0052      	lsls	r2, r2, #1
 8005308:	3001      	adds	r0, #1
 800530a:	e78b      	b.n	8005224 <__ieee754_sqrt+0x70>
 800530c:	46a0      	mov	r8, r4
 800530e:	e7cd      	b.n	80052ac <__ieee754_sqrt+0xf8>
 8005310:	7ff00000 	.word	0x7ff00000

08005314 <matherr>:
 8005314:	2000      	movs	r0, #0
 8005316:	4770      	bx	lr

08005318 <__errno>:
 8005318:	4b01      	ldr	r3, [pc, #4]	; (8005320 <__errno+0x8>)
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000030 	.word	0x20000030

08005324 <_sbrk>:
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <_sbrk+0x14>)
 8005326:	6819      	ldr	r1, [r3, #0]
 8005328:	4602      	mov	r2, r0
 800532a:	b909      	cbnz	r1, 8005330 <_sbrk+0xc>
 800532c:	4903      	ldr	r1, [pc, #12]	; (800533c <_sbrk+0x18>)
 800532e:	6019      	str	r1, [r3, #0]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	4402      	add	r2, r0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	4770      	bx	lr
 8005338:	20000140 	.word	0x20000140
 800533c:	200002dc 	.word	0x200002dc

08005340 <_init>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr

0800534c <_fini>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr
