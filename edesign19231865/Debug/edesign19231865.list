
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005344  08005344  00015344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  0800534c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
  8 .bss          00000240  20000098  20000098  00020098  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200002d8  200002d8  00020098  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001cb25  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000031ac  00000000  00000000  0003cbed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008f66  00000000  00000000  0003fd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00048d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  000498c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007f2f  00000000  00000000  0004a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ab3f2  00000000  00000000  00052707  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000fdaf9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002a98  00000000  00000000  000fdb78  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0001c6f2  00000000  00000000  00100610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005274 	.word	0x08005274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08005274 	.word	0x08005274

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b99e 	b.w	8000ee4 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f82a 	bl	8000c08 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2ulz>:
 8000bc0:	b5d0      	push	{r4, r6, r7, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <__aeabi_d2ulz+0x40>)
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fd11 	bl	80005f0 <__aeabi_dmul>
 8000bce:	f7ff ffbf 	bl	8000b50 <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc96 	bl	8000504 <__aeabi_ui2d>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <__aeabi_d2ulz+0x44>)
 8000bdc:	f7ff fd08 	bl	80005f0 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff fb4e 	bl	8000288 <__aeabi_dsub>
 8000bec:	f7ff ffb0 	bl	8000b50 <__aeabi_d2uiz>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	ea42 0200 	orr.w	r2, r2, r0
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	9e08      	ldr	r6, [sp, #32]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d151      	bne.n	8000cbc <__udivmoddi4+0xb4>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d96d      	bls.n	8000cfa <__udivmoddi4+0xf2>
 8000c1e:	fab2 fe82 	clz	lr, r2
 8000c22:	f1be 0f00 	cmp.w	lr, #0
 8000c26:	d00b      	beq.n	8000c40 <__udivmoddi4+0x38>
 8000c28:	f1ce 0c20 	rsb	ip, lr, #32
 8000c2c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c34:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c38:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c3c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c40:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c44:	0c25      	lsrs	r5, r4, #16
 8000c46:	fbbc f8fa 	udiv	r8, ip, sl
 8000c4a:	fa1f f987 	uxth.w	r9, r7
 8000c4e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c52:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c56:	fb08 f309 	mul.w	r3, r8, r9
 8000c5a:	42ab      	cmp	r3, r5
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x6c>
 8000c5e:	19ed      	adds	r5, r5, r7
 8000c60:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c64:	f080 8123 	bcs.w	8000eae <__udivmoddi4+0x2a6>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f240 8120 	bls.w	8000eae <__udivmoddi4+0x2a6>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	443d      	add	r5, r7
 8000c74:	1aed      	subs	r5, r5, r3
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c7c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb00 f909 	mul.w	r9, r0, r9
 8000c88:	45a1      	cmp	r9, r4
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x98>
 8000c8c:	19e4      	adds	r4, r4, r7
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	f080 810a 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8107 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	443c      	add	r4, r7
 8000ca0:	eba4 0409 	sub.w	r4, r4, r9
 8000ca4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d061      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cae:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	6034      	str	r4, [r6, #0]
 8000cb6:	6073      	str	r3, [r6, #4]
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xc8>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d054      	beq.n	8000d6e <__udivmoddi4+0x166>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	f040 808e 	bne.w	8000df6 <__udivmoddi4+0x1ee>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xdc>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80fa 	bhi.w	8000ed8 <__udivmoddi4+0x2d0>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb65 0503 	sbc.w	r5, r5, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	46ac      	mov	ip, r5
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d03f      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cf2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	b912      	cbnz	r2, 8000d02 <__udivmoddi4+0xfa>
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d02:	fab7 fe87 	clz	lr, r7
 8000d06:	f1be 0f00 	cmp.w	lr, #0
 8000d0a:	d134      	bne.n	8000d76 <__udivmoddi4+0x16e>
 8000d0c:	1beb      	subs	r3, r5, r7
 8000d0e:	0c3a      	lsrs	r2, r7, #16
 8000d10:	fa1f fc87 	uxth.w	ip, r7
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d1a:	0c25      	lsrs	r5, r4, #16
 8000d1c:	fb02 3318 	mls	r3, r2, r8, r3
 8000d20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d24:	fb0c f308 	mul.w	r3, ip, r8
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x134>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x132>
 8000d34:	42ab      	cmp	r3, r5
 8000d36:	f200 80d1 	bhi.w	8000edc <__udivmoddi4+0x2d4>
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d44:	fb02 5510 	mls	r5, r2, r0, r5
 8000d48:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d4c:	fb0c fc00 	mul.w	ip, ip, r0
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x15c>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x15a>
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	f200 80b8 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 040c 	sub.w	r4, r4, ip
 8000d68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6c:	e79d      	b.n	8000caa <__udivmoddi4+0xa2>
 8000d6e:	4631      	mov	r1, r6
 8000d70:	4630      	mov	r0, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1ce 0420 	rsb	r4, lr, #32
 8000d7a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d82:	fa20 f804 	lsr.w	r8, r0, r4
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa25 f404 	lsr.w	r4, r5, r4
 8000d8c:	ea48 0803 	orr.w	r8, r8, r3
 8000d90:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d94:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d98:	fb02 4411 	mls	r4, r2, r1, r4
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000da4:	fb01 f30c 	mul.w	r3, r1, ip
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1bc>
 8000db0:	19ed      	adds	r5, r5, r7
 8000db2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db6:	f080 808a 	bcs.w	8000ece <__udivmoddi4+0x2c6>
 8000dba:	42ab      	cmp	r3, r5
 8000dbc:	f240 8087 	bls.w	8000ece <__udivmoddi4+0x2c6>
 8000dc0:	3902      	subs	r1, #2
 8000dc2:	443d      	add	r5, r7
 8000dc4:	1aeb      	subs	r3, r5, r3
 8000dc6:	fa1f f588 	uxth.w	r5, r8
 8000dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dce:	fb02 3310 	mls	r3, r2, r0, r3
 8000dd2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dd6:	fb00 f30c 	mul.w	r3, r0, ip
 8000dda:	42ab      	cmp	r3, r5
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1e6>
 8000dde:	19ed      	adds	r5, r5, r7
 8000de0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de4:	d26f      	bcs.n	8000ec6 <__udivmoddi4+0x2be>
 8000de6:	42ab      	cmp	r3, r5
 8000de8:	d96d      	bls.n	8000ec6 <__udivmoddi4+0x2be>
 8000dea:	3802      	subs	r0, #2
 8000dec:	443d      	add	r5, r7
 8000dee:	1aeb      	subs	r3, r5, r3
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	e78f      	b.n	8000d16 <__udivmoddi4+0x10e>
 8000df6:	f1c1 0720 	rsb	r7, r1, #32
 8000dfa:	fa22 f807 	lsr.w	r8, r2, r7
 8000dfe:	408b      	lsls	r3, r1
 8000e00:	fa05 f401 	lsl.w	r4, r5, r1
 8000e04:	ea48 0303 	orr.w	r3, r8, r3
 8000e08:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e16:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e1a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e1e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e22:	fa1f f883 	uxth.w	r8, r3
 8000e26:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e2a:	fb09 f408 	mul.w	r4, r9, r8
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	fa02 f201 	lsl.w	r2, r2, r1
 8000e34:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x244>
 8000e3a:	18ed      	adds	r5, r5, r3
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d243      	bcs.n	8000eca <__udivmoddi4+0x2c2>
 8000e42:	42ac      	cmp	r4, r5
 8000e44:	d941      	bls.n	8000eca <__udivmoddi4+0x2c2>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	441d      	add	r5, r3
 8000e4c:	1b2d      	subs	r5, r5, r4
 8000e4e:	fa1f fe8e 	uxth.w	lr, lr
 8000e52:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e56:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e5a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45a0      	cmp	r8, r4
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x26e>
 8000e66:	18e4      	adds	r4, r4, r3
 8000e68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e6c:	d229      	bcs.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e6e:	45a0      	cmp	r8, r4
 8000e70:	d927      	bls.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e72:	3802      	subs	r0, #2
 8000e74:	441c      	add	r4, r3
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba4 0408 	sub.w	r4, r4, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454c      	cmp	r4, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	464d      	mov	r5, r9
 8000e88:	d315      	bcc.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e8a:	d012      	beq.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e8c:	b156      	cbz	r6, 8000ea4 <__udivmoddi4+0x29c>
 8000e8e:	ebba 030e 	subs.w	r3, sl, lr
 8000e92:	eb64 0405 	sbc.w	r4, r4, r5
 8000e96:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9a:	40cb      	lsrs	r3, r1
 8000e9c:	431f      	orrs	r7, r3
 8000e9e:	40cc      	lsrs	r4, r1
 8000ea0:	6037      	str	r7, [r6, #0]
 8000ea2:	6074      	str	r4, [r6, #4]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e6f8      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000eae:	4690      	mov	r8, r2
 8000eb0:	e6e0      	b.n	8000c74 <__udivmoddi4+0x6c>
 8000eb2:	45c2      	cmp	sl, r8
 8000eb4:	d2ea      	bcs.n	8000e8c <__udivmoddi4+0x284>
 8000eb6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eba:	eb69 0503 	sbc.w	r5, r9, r3
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7e4      	b.n	8000e8c <__udivmoddi4+0x284>
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	e7d7      	b.n	8000e76 <__udivmoddi4+0x26e>
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	e791      	b.n	8000dee <__udivmoddi4+0x1e6>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e7be      	b.n	8000e4c <__udivmoddi4+0x244>
 8000ece:	4601      	mov	r1, r0
 8000ed0:	e778      	b.n	8000dc4 <__udivmoddi4+0x1bc>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	e745      	b.n	8000d64 <__udivmoddi4+0x15c>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xe6>
 8000edc:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee0:	443d      	add	r5, r7
 8000ee2:	e72b      	b.n	8000d3c <__udivmoddi4+0x134>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_InitTick+0x24>)
{
 8000eec:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef8:	f000 fc88 	bl	800180c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	4621      	mov	r1, r4
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fc42 	bl	800178c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	20000000 	.word	0x20000000

08000f10 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x20>)
{
 8000f12:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	6813      	ldr	r3, [r2, #0]
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 fc23 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ffe0 	bl	8000ee8 <HAL_InitTick>
  HAL_MspInit();
 8000f28:	f003 faa8 	bl	800447c <HAL_MspInit>
}
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	bd08      	pop	{r3, pc}
 8000f30:	40022000 	.word	0x40022000

08000f34 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f34:	4a02      	ldr	r2, [pc, #8]	; (8000f40 <HAL_IncTick+0xc>)
 8000f36:	6813      	ldr	r3, [r2, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000140 	.word	0x20000140

08000f44 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f44:	4b01      	ldr	r3, [pc, #4]	; (8000f4c <HAL_GetTick+0x8>)
 8000f46:	6818      	ldr	r0, [r3, #0]
}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000140 	.word	0x20000140

08000f50 <HAL_ADC_ConvHalfCpltCallback>:
 8000f50:	4770      	bx	lr

08000f52 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f52:	4770      	bx	lr

08000f54 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000f54:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f56:	6803      	ldr	r3, [r0, #0]
{
 8000f58:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f5a:	6898      	ldr	r0, [r3, #8]
 8000f5c:	f000 0003 	and.w	r0, r0, #3
 8000f60:	2801      	cmp	r0, #1
 8000f62:	d001      	beq.n	8000f68 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f64:	2000      	movs	r0, #0
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	07d2      	lsls	r2, r2, #31
 8000f6c:	d5fa      	bpl.n	8000f64 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	f002 020d 	and.w	r2, r2, #13
 8000f74:	2a01      	cmp	r2, #1
 8000f76:	d11b      	bne.n	8000fb0 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	f042 0202 	orr.w	r2, r2, #2
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	2203      	movs	r2, #3
 8000f82:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	07db      	lsls	r3, r3, #31
 8000f90:	d5e8      	bpl.n	8000f64 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f92:	f7ff ffd7 	bl	8000f44 <HAL_GetTick>
 8000f96:	1b40      	subs	r0, r0, r5
 8000f98:	2802      	cmp	r0, #2
 8000f9a:	d9f6      	bls.n	8000f8a <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000fac:	2001      	movs	r0, #1
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08000fc4 <ADC_Enable>:
{
 8000fc4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fc6:	6803      	ldr	r3, [r0, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	2a01      	cmp	r2, #1
{
 8000fd0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd2:	d104      	bne.n	8000fde <ADC_Enable+0x1a>
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	07d2      	lsls	r2, r2, #31
 8000fd8:	d501      	bpl.n	8000fde <ADC_Enable+0x1a>
  return HAL_OK;
 8000fda:	2000      	movs	r0, #0
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fde:	6899      	ldr	r1, [r3, #8]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <ADC_Enable+0x58>)
 8000fe2:	4211      	tst	r1, r2
 8000fe4:	d10f      	bne.n	8001006 <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8000fee:	f7ff ffa9 	bl	8000f44 <HAL_GetTick>
 8000ff2:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	07db      	lsls	r3, r3, #31
 8000ffa:	d4ee      	bmi.n	8000fda <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ffc:	f7ff ffa2 	bl	8000f44 <HAL_GetTick>
 8001000:	1b40      	subs	r0, r0, r5
 8001002:	2802      	cmp	r0, #2
 8001004:	d9f6      	bls.n	8000ff4 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001006:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800100e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
 8001018:	bd38      	pop	{r3, r4, r5, pc}
 800101a:	bf00      	nop
 800101c:	8000003f 	.word	0x8000003f

08001020 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001020:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001022:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800102a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8001032:	f7ff bf8e 	b.w	8000f52 <HAL_ADC_ErrorCallback>

08001036 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001036:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001038:	f7ff bf8a 	b.w	8000f50 <HAL_ADC_ConvHalfCpltCallback>

0800103c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800103c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800103e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001040:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001044:	d118      	bne.n	8001078 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68d2      	ldr	r2, [r2, #12]
 8001052:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001056:	d10c      	bne.n	8001072 <ADC_DMAConvCplt+0x36>
 8001058:	69da      	ldr	r2, [r3, #28]
 800105a:	b952      	cbnz	r2, 8001072 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800105c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800105e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001062:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001066:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001068:	bf5e      	ittt	pl
 800106a:	6c5a      	ldrpl	r2, [r3, #68]	; 0x44
 800106c:	f042 0201 	orrpl.w	r2, r2, #1
 8001070:	645a      	strpl	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8001072:	4618      	mov	r0, r3
 8001074:	f002 bd02 	b.w	8003a7c <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4718      	bx	r3
	...

08001080 <HAL_ADC_Init>:
{
 8001080:	b570      	push	{r4, r5, r6, lr}
 8001082:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8001088:	4604      	mov	r4, r0
 800108a:	2800      	cmp	r0, #0
 800108c:	f000 80e3 	beq.w	8001256 <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001092:	06d5      	lsls	r5, r2, #27
 8001094:	f100 80cc 	bmi.w	8001230 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001098:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8092 	beq.w	80011c4 <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a0:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	00d2      	lsls	r2, r2, #3
 80010a8:	d502      	bpl.n	80010b0 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010aa:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	d50a      	bpl.n	80010c6 <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80010b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010b2:	f023 0312 	bic.w	r3, r3, #18
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010c8:	06de      	lsls	r6, r3, #27
 80010ca:	f100 80be 	bmi.w	800124a <HAL_ADC_Init+0x1ca>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	f040 80bb 	bne.w	800124a <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80010d8:	f011 0104 	ands.w	r1, r1, #4
 80010dc:	f040 80b5 	bne.w	800124a <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 80010e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010e2:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010e6:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010f0:	bf0c      	ite	eq
 80010f2:	4a5a      	ldreq	r2, [pc, #360]	; (800125c <HAL_ADC_Init+0x1dc>)
 80010f4:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80010f8:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	f002 0203 	and.w	r2, r2, #3
 8001100:	2a01      	cmp	r2, #1
 8001102:	d102      	bne.n	800110a <HAL_ADC_Init+0x8a>
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	07d5      	lsls	r5, r2, #31
 8001108:	d410      	bmi.n	800112c <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800110a:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800110c:	b13a      	cbz	r2, 800111e <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800110e:	6895      	ldr	r5, [r2, #8]
 8001110:	f005 0503 	and.w	r5, r5, #3
 8001114:	2d01      	cmp	r5, #1
 8001116:	d102      	bne.n	800111e <HAL_ADC_Init+0x9e>
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	07d2      	lsls	r2, r2, #31
 800111c:	d406      	bmi.n	800112c <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800111e:	4d50      	ldr	r5, [pc, #320]	; (8001260 <HAL_ADC_Init+0x1e0>)
 8001120:	6866      	ldr	r6, [r4, #4]
 8001122:	68aa      	ldr	r2, [r5, #8]
 8001124:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001128:	4332      	orrs	r2, r6
 800112a:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800112c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800112e:	68a6      	ldr	r6, [r4, #8]
 8001130:	69e5      	ldr	r5, [r4, #28]
 8001132:	2a01      	cmp	r2, #1
 8001134:	68e2      	ldr	r2, [r4, #12]
 8001136:	ea42 0206 	orr.w	r2, r2, r6
 800113a:	bf18      	it	ne
 800113c:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8001140:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8001144:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001146:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001148:	2901      	cmp	r1, #1
 800114a:	d107      	bne.n	800115c <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800114c:	2d00      	cmp	r5, #0
 800114e:	d171      	bne.n	8001234 <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001150:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001152:	3901      	subs	r1, #1
 8001154:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001158:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800115c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800115e:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001160:	bf1e      	ittt	ne
 8001162:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 8001164:	4329      	orrne	r1, r5
 8001166:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001168:	6899      	ldr	r1, [r3, #8]
 800116a:	f011 0f0c 	tst.w	r1, #12
 800116e:	d10b      	bne.n	8001188 <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001170:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001172:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001174:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001178:	f021 0102 	bic.w	r1, r1, #2
 800117c:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800117e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001180:	0049      	lsls	r1, r1, #1
 8001182:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8001186:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001188:	68dd      	ldr	r5, [r3, #12]
 800118a:	4936      	ldr	r1, [pc, #216]	; (8001264 <HAL_ADC_Init+0x1e4>)
 800118c:	4029      	ands	r1, r5
 800118e:	430a      	orrs	r2, r1
 8001190:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001192:	6922      	ldr	r2, [r4, #16]
 8001194:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001196:	bf05      	ittet	eq
 8001198:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800119a:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800119c:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800119e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80011a2:	bf06      	itte	eq
 80011a4:	f021 010f 	biceq.w	r1, r1, #15
 80011a8:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011aa:	f022 020f 	bicne.w	r2, r2, #15
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	2300      	movs	r3, #0
 80011b2:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80011b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6463      	str	r3, [r4, #68]	; 0x44
}
 80011c0:	b016      	add	sp, #88	; 0x58
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80011c6:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80011c8:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80011ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80011ce:	f003 f993 	bl	80044f8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	00d8      	lsls	r0, r3, #3
 80011d8:	f53f af62 	bmi.w	80010a0 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff feb9 	bl	8000f54 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80011e4:	06d1      	lsls	r1, r2, #27
 80011e6:	f53f af5c 	bmi.w	80010a2 <HAL_ADC_Init+0x22>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	f47f af59 	bne.w	80010a2 <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 80011f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011f6:	f023 0302 	bic.w	r3, r3, #2
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001208:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001210:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_ADC_Init+0x1e8>)
 8001214:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_ADC_Init+0x1ec>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	fbb3 f2f2 	udiv	r2, r3, r2
 800121c:	230a      	movs	r3, #10
 800121e:	4353      	muls	r3, r2
            wait_loop_index--;
 8001220:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8001222:	9b00      	ldr	r3, [sp, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	f43f af3b 	beq.w	80010a0 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 800122a:	9b00      	ldr	r3, [sp, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	e7f7      	b.n	8001220 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001230:	4618      	mov	r0, r3
 8001232:	e748      	b.n	80010c6 <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8001234:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001236:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 800123a:	f041 0120 	orr.w	r1, r1, #32
 800123e:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001240:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001242:	f041 0101 	orr.w	r1, r1, #1
 8001246:	64a1      	str	r1, [r4, #72]	; 0x48
 8001248:	e788      	b.n	800115c <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800124c:	f023 0312 	bic.w	r3, r3, #18
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001256:	2001      	movs	r0, #1
 8001258:	e7b2      	b.n	80011c0 <HAL_ADC_Init+0x140>
 800125a:	bf00      	nop
 800125c:	50000100 	.word	0x50000100
 8001260:	50000300 	.word	0x50000300
 8001264:	fff0c007 	.word	0xfff0c007
 8001268:	20000000 	.word	0x20000000
 800126c:	000f4240 	.word	0x000f4240

08001270 <HAL_ADC_Start_DMA>:
{
 8001270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001274:	6803      	ldr	r3, [r0, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f013 0304 	ands.w	r3, r3, #4
{
 800127c:	4604      	mov	r4, r0
 800127e:	460f      	mov	r7, r1
 8001280:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001282:	d171      	bne.n	8001368 <HAL_ADC_Start_DMA+0xf8>
    __HAL_LOCK(hadc);
 8001284:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001288:	2a01      	cmp	r2, #1
 800128a:	d06d      	beq.n	8001368 <HAL_ADC_Start_DMA+0xf8>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800128c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800137c <HAL_ADC_Start_DMA+0x10c>
 8001290:	f8d9 5008 	ldr.w	r5, [r9, #8]
    __HAL_LOCK(hadc);
 8001294:	2601      	movs	r6, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001296:	f015 051f 	ands.w	r5, r5, #31
    __HAL_LOCK(hadc);
 800129a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800129e:	d160      	bne.n	8001362 <HAL_ADC_Start_DMA+0xf2>
      tmp_hal_status = ADC_Enable(hadc);
 80012a0:	f7ff fe90 	bl	8000fc4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80012a4:	4606      	mov	r6, r0
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d158      	bne.n	800135c <HAL_ADC_Start_DMA+0xec>
        ADC_STATE_CLR_SET(hadc->State,
 80012aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80012ac:	6821      	ldr	r1, [r4, #0]
 80012ae:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 80012b2:	f020 0001 	bic.w	r0, r0, #1
 80012b6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80012ba:	6460      	str	r0, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012bc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80012c0:	f013 0f1f 	tst.w	r3, #31
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012c6:	d002      	beq.n	80012ce <HAL_ADC_Start_DMA+0x5e>
 80012c8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80012cc:	d134      	bne.n	8001338 <HAL_ADC_Start_DMA+0xc8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012d2:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012d4:	68cb      	ldr	r3, [r1, #12]
 80012d6:	019a      	lsls	r2, r3, #6
 80012d8:	d505      	bpl.n	80012e6 <HAL_ADC_Start_DMA+0x76>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e4:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ea:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ee:	bf1c      	itt	ne
 80012f0:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 80012f2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80012f6:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 80012f8:	2300      	movs	r3, #0
 80012fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_ADC_Start_DMA+0xfc>)
 8001300:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_ADC_Start_DMA+0x100>)
 8001304:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_ADC_Start_DMA+0x104>)
 8001308:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800130a:	231c      	movs	r3, #28
 800130c:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800130e:	684b      	ldr	r3, [r1, #4]
 8001310:	f043 0310 	orr.w	r3, r3, #16
 8001314:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001316:	68cb      	ldr	r3, [r1, #12]
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800131e:	463a      	mov	r2, r7
 8001320:	4643      	mov	r3, r8
 8001322:	3140      	adds	r1, #64	; 0x40
 8001324:	f000 face 	bl	80018c4 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001328:	6822      	ldr	r2, [r4, #0]
 800132a:	6893      	ldr	r3, [r2, #8]
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	6093      	str	r3, [r2, #8]
}
 8001332:	4630      	mov	r0, r6
 8001334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800133c:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_ADC_Start_DMA+0x108>)
 8001340:	4299      	cmp	r1, r3
 8001342:	d1d0      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x76>
 8001344:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	019b      	lsls	r3, r3, #6
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800134c:	bf41      	itttt	mi
 800134e:	6c60      	ldrmi	r0, [r4, #68]	; 0x44
 8001350:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001354:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001358:	6460      	strmi	r0, [r4, #68]	; 0x44
 800135a:	e7c4      	b.n	80012e6 <HAL_ADC_Start_DMA+0x76>
        __HAL_UNLOCK(hadc);
 800135c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 8001360:	e7e7      	b.n	8001332 <HAL_ADC_Start_DMA+0xc2>
      __HAL_UNLOCK(hadc);
 8001362:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001366:	e7e4      	b.n	8001332 <HAL_ADC_Start_DMA+0xc2>
    tmp_hal_status = HAL_BUSY;
 8001368:	2602      	movs	r6, #2
 800136a:	e7e2      	b.n	8001332 <HAL_ADC_Start_DMA+0xc2>
 800136c:	0800103d 	.word	0x0800103d
 8001370:	08001037 	.word	0x08001037
 8001374:	08001021 	.word	0x08001021
 8001378:	50000100 	.word	0x50000100
 800137c:	50000300 	.word	0x50000300

08001380 <HAL_ADC_ConfigChannel>:
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 8001388:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800138c:	2b01      	cmp	r3, #1
{
 800138e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001390:	f000 8151 	beq.w	8001636 <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001394:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001396:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001398:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800139a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800139c:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 800139e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a2:	f100 8143 	bmi.w	800162c <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 80013a6:	6848      	ldr	r0, [r1, #4]
 80013a8:	680c      	ldr	r4, [r1, #0]
 80013aa:	2804      	cmp	r0, #4
 80013ac:	f04f 0206 	mov.w	r2, #6
 80013b0:	d831      	bhi.n	8001416 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 80013b2:	4342      	muls	r2, r0
 80013b4:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80013b6:	201f      	movs	r0, #31
 80013b8:	4090      	lsls	r0, r2
 80013ba:	ea27 0000 	bic.w	r0, r7, r0
 80013be:	fa04 f202 	lsl.w	r2, r4, r2
 80013c2:	4302      	orrs	r2, r0
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	f012 0f0c 	tst.w	r2, #12
 80013cc:	d162      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013ce:	2c09      	cmp	r4, #9
 80013d0:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80013d4:	688f      	ldr	r7, [r1, #8]
 80013d6:	d946      	bls.n	8001466 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013d8:	4422      	add	r2, r4
 80013da:	6998      	ldr	r0, [r3, #24]
 80013dc:	3a1e      	subs	r2, #30
 80013de:	f04f 0e07 	mov.w	lr, #7
 80013e2:	fa0e fe02 	lsl.w	lr, lr, r2
 80013e6:	ea20 000e 	bic.w	r0, r0, lr
 80013ea:	fa07 f202 	lsl.w	r2, r7, r2
 80013ee:	4302      	orrs	r2, r0
 80013f0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 80013f8:	694a      	ldr	r2, [r1, #20]
 80013fa:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80013fe:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8001402:	690a      	ldr	r2, [r1, #16]
 8001404:	3a01      	subs	r2, #1
 8001406:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 800140a:	2a03      	cmp	r2, #3
 800140c:	d873      	bhi.n	80014f6 <HAL_ADC_ConfigChannel+0x176>
 800140e:	e8df f002 	tbb	[pc, r2]
 8001412:	5137      	.short	0x5137
 8001414:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8001416:	2809      	cmp	r0, #9
 8001418:	d80b      	bhi.n	8001432 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800141a:	4342      	muls	r2, r0
 800141c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800141e:	3a1e      	subs	r2, #30
 8001420:	201f      	movs	r0, #31
 8001422:	4090      	lsls	r0, r2
 8001424:	ea27 0000 	bic.w	r0, r7, r0
 8001428:	fa04 f202 	lsl.w	r2, r4, r2
 800142c:	4302      	orrs	r2, r0
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
 8001430:	e7c9      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8001432:	280e      	cmp	r0, #14
 8001434:	d80b      	bhi.n	800144e <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001436:	4342      	muls	r2, r0
 8001438:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800143a:	3a3c      	subs	r2, #60	; 0x3c
 800143c:	201f      	movs	r0, #31
 800143e:	4090      	lsls	r0, r2
 8001440:	ea27 0000 	bic.w	r0, r7, r0
 8001444:	fa04 f202 	lsl.w	r2, r4, r2
 8001448:	4302      	orrs	r2, r0
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
 800144c:	e7bb      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800144e:	4342      	muls	r2, r0
 8001450:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8001452:	3a5a      	subs	r2, #90	; 0x5a
 8001454:	201f      	movs	r0, #31
 8001456:	4090      	lsls	r0, r2
 8001458:	ea27 0000 	bic.w	r0, r7, r0
 800145c:	fa04 f202 	lsl.w	r2, r4, r2
 8001460:	4302      	orrs	r2, r0
 8001462:	63da      	str	r2, [r3, #60]	; 0x3c
 8001464:	e7af      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001466:	6958      	ldr	r0, [r3, #20]
 8001468:	4422      	add	r2, r4
 800146a:	f04f 0e07 	mov.w	lr, #7
 800146e:	fa0e fe02 	lsl.w	lr, lr, r2
 8001472:	ea20 000e 	bic.w	r0, r0, lr
 8001476:	fa07 f202 	lsl.w	r2, r7, r2
 800147a:	4302      	orrs	r2, r0
 800147c:	615a      	str	r2, [r3, #20]
 800147e:	e7b8      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001480:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001482:	4f7a      	ldr	r7, [pc, #488]	; (800166c <HAL_ADC_ConfigChannel+0x2ec>)
 8001484:	4017      	ands	r7, r2
 8001486:	ea47 020c 	orr.w	r2, r7, ip
 800148a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800148e:	ea42 020e 	orr.w	r2, r2, lr
 8001492:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	2a01      	cmp	r2, #1
 800149c:	f040 80cd 	bne.w	800163a <HAL_ADC_ConfigChannel+0x2ba>
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	07d0      	lsls	r0, r2, #31
 80014a4:	f140 80c9 	bpl.w	800163a <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80014aa:	2300      	movs	r3, #0
 80014ac:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 80014b0:	b017      	add	sp, #92	; 0x5c
 80014b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014b6:	4f6d      	ldr	r7, [pc, #436]	; (800166c <HAL_ADC_ConfigChannel+0x2ec>)
 80014b8:	4017      	ands	r7, r2
 80014ba:	ea47 020c 	orr.w	r2, r7, ip
 80014be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014c2:	ea42 020e 	orr.w	r2, r2, lr
 80014c6:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80014c8:	e7e4      	b.n	8001494 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014cc:	4867      	ldr	r0, [pc, #412]	; (800166c <HAL_ADC_ConfigChannel+0x2ec>)
 80014ce:	4010      	ands	r0, r2
 80014d0:	ea40 020c 	orr.w	r2, r0, ip
 80014d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014d8:	ea42 020e 	orr.w	r2, r2, lr
 80014dc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80014de:	e7d9      	b.n	8001494 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014e0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80014e2:	4a62      	ldr	r2, [pc, #392]	; (800166c <HAL_ADC_ConfigChannel+0x2ec>)
 80014e4:	4002      	ands	r2, r0
 80014e6:	ea42 020c 	orr.w	r2, r2, ip
 80014ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014ee:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80014f4:	e7ce      	b.n	8001494 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014f8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80014fc:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014fe:	bf02      	ittt	eq
 8001500:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8001502:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001506:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001508:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800150a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800150e:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001510:	bf02      	ittt	eq
 8001512:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8001514:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001518:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800151a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800151c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001520:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001522:	bf02      	ittt	eq
 8001524:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8001526:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800152a:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800152c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800152e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001532:	4594      	cmp	ip, r2
 8001534:	d1ae      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001536:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001538:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800153c:	e7d9      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800153e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001542:	2101      	movs	r1, #1
 8001544:	40a1      	lsls	r1, r4
 8001546:	ea22 0201 	bic.w	r2, r2, r1
 800154a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800154e:	2c10      	cmp	r4, #16
 8001550:	d143      	bne.n	80015da <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001552:	4a47      	ldr	r2, [pc, #284]	; (8001670 <HAL_ADC_ConfigChannel+0x2f0>)
 8001554:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001556:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800155a:	d1a5      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800155c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001560:	bf0c      	ite	eq
 8001562:	4a44      	ldreq	r2, [pc, #272]	; (8001674 <HAL_ADC_ConfigChannel+0x2f4>)
 8001564:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8001568:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	f002 0203 	and.w	r2, r2, #3
 8001570:	2a01      	cmp	r2, #1
 8001572:	d102      	bne.n	800157a <HAL_ADC_ConfigChannel+0x1fa>
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	07d1      	lsls	r1, r2, #31
 8001578:	d452      	bmi.n	8001620 <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800157a:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800157c:	b13a      	cbz	r2, 800158e <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800157e:	6891      	ldr	r1, [r2, #8]
 8001580:	f001 0103 	and.w	r1, r1, #3
 8001584:	2901      	cmp	r1, #1
 8001586:	d102      	bne.n	800158e <HAL_ADC_ConfigChannel+0x20e>
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	07d2      	lsls	r2, r2, #31
 800158c:	d448      	bmi.n	8001620 <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800158e:	2c10      	cmp	r4, #16
 8001590:	d132      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x278>
 8001592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001596:	d187      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001598:	4a35      	ldr	r2, [pc, #212]	; (8001670 <HAL_ADC_ConfigChannel+0x2f0>)
 800159a:	6893      	ldr	r3, [r2, #8]
 800159c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015a0:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015a2:	4b35      	ldr	r3, [pc, #212]	; (8001678 <HAL_ADC_ConfigChannel+0x2f8>)
 80015a4:	4a35      	ldr	r2, [pc, #212]	; (800167c <HAL_ADC_ConfigChannel+0x2fc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80015ac:	230a      	movs	r3, #10
 80015ae:	4353      	muls	r3, r2
            wait_loop_index--;
 80015b0:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80015b2:	9b00      	ldr	r3, [sp, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f43f af77 	beq.w	80014a8 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 80015ba:	9b00      	ldr	r3, [sp, #0]
 80015bc:	3b01      	subs	r3, #1
 80015be:	e7f7      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 80015c0:	1c60      	adds	r0, r4, #1
 80015c2:	6959      	ldr	r1, [r3, #20]
 80015c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80015c8:	2207      	movs	r2, #7
 80015ca:	4082      	lsls	r2, r0
 80015cc:	ea21 0102 	bic.w	r1, r1, r2
 80015d0:	fa06 f200 	lsl.w	r2, r6, r0
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	e7b9      	b.n	800154e <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015da:	2c11      	cmp	r4, #17
 80015dc:	d104      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015de:	4a24      	ldr	r2, [pc, #144]	; (8001670 <HAL_ADC_ConfigChannel+0x2f0>)
 80015e0:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015e2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80015e6:	e7b8      	b.n	800155a <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015e8:	2c12      	cmp	r4, #18
 80015ea:	f47f af5d 	bne.w	80014a8 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <HAL_ADC_ConfigChannel+0x2f0>)
 80015f0:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015f2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80015f6:	e7b0      	b.n	800155a <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015f8:	2c11      	cmp	r4, #17
 80015fa:	d109      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x290>
 80015fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001600:	f47f af52 	bne.w	80014a8 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <HAL_ADC_ConfigChannel+0x2f0>)
 8001606:	6893      	ldr	r3, [r2, #8]
 8001608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800160c:	6093      	str	r3, [r2, #8]
 800160e:	e74b      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001610:	2c12      	cmp	r4, #18
 8001612:	f47f af49 	bne.w	80014a8 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001616:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_ADC_ConfigChannel+0x2f0>)
 8001618:	6893      	ldr	r3, [r2, #8]
 800161a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800161e:	e7f5      	b.n	800160c <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001620:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001628:	2001      	movs	r0, #1
 800162a:	e73e      	b.n	80014aa <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800162e:	f043 0320 	orr.w	r3, r3, #32
 8001632:	646b      	str	r3, [r5, #68]	; 0x44
 8001634:	e739      	b.n	80014aa <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8001636:	2002      	movs	r0, #2
 8001638:	e73a      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800163a:	2e01      	cmp	r6, #1
 800163c:	f47f af7f 	bne.w	800153e <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001640:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001644:	40a6      	lsls	r6, r4
 8001646:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001648:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800164a:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 800164e:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001650:	d9b6      	bls.n	80015c0 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001652:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001656:	6999      	ldr	r1, [r3, #24]
 8001658:	3a1b      	subs	r2, #27
 800165a:	2007      	movs	r0, #7
 800165c:	4090      	lsls	r0, r2
 800165e:	ea21 0100 	bic.w	r1, r1, r0
 8001662:	fa06 f202 	lsl.w	r2, r6, r2
 8001666:	430a      	orrs	r2, r1
 8001668:	619a      	str	r2, [r3, #24]
 800166a:	e770      	b.n	800154e <HAL_ADC_ConfigChannel+0x1ce>
 800166c:	83fff000 	.word	0x83fff000
 8001670:	50000300 	.word	0x50000300
 8001674:	50000100 	.word	0x50000100
 8001678:	20000000 	.word	0x20000000
 800167c:	000f4240 	.word	0x000f4240

08001680 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	4603      	mov	r3, r0
 8001684:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001686:	681c      	ldr	r4, [r3, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001688:	6808      	ldr	r0, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800168a:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800168e:	bf0c      	ite	eq
 8001690:	4a33      	ldreq	r2, [pc, #204]	; (8001760 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001692:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8001696:	9201      	str	r2, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001698:	9a01      	ldr	r2, [sp, #4]
 800169a:	2a00      	cmp	r2, #0
 800169c:	d049      	beq.n	8001732 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 800169e:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 80016a2:	2d01      	cmp	r5, #1
 80016a4:	d047      	beq.n	8001736 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 80016a6:	2501      	movs	r5, #1
 80016a8:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80016ac:	68a5      	ldr	r5, [r4, #8]
 80016ae:	076f      	lsls	r7, r5, #29
 80016b0:	d435      	bmi.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80016b2:	6895      	ldr	r5, [r2, #8]
 80016b4:	076e      	lsls	r6, r5, #29
 80016b6:	d432      	bmi.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80016b8:	4e2a      	ldr	r6, [pc, #168]	; (8001764 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016ba:	b1a0      	cbz	r0, 80016e6 <HAL_ADCEx_MultiModeConfigChannel+0x66>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016bc:	684d      	ldr	r5, [r1, #4]
 80016be:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80016c2:	462f      	mov	r7, r5
 80016c4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80016c6:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 80016ca:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 80016ce:	433d      	orrs	r5, r7
 80016d0:	60b5      	str	r5, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016d2:	68a5      	ldr	r5, [r4, #8]
 80016d4:	f005 0503 	and.w	r5, r5, #3
 80016d8:	2d01      	cmp	r5, #1
 80016da:	d12e      	bne.n	800173a <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80016dc:	6824      	ldr	r4, [r4, #0]
 80016de:	07e5      	lsls	r5, r4, #31
 80016e0:	d52b      	bpl.n	800173a <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e2:	2000      	movs	r0, #0
 80016e4:	e020      	b.n	8001728 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80016e6:	68b1      	ldr	r1, [r6, #8]
 80016e8:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80016ec:	60b1      	str	r1, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016ee:	68a1      	ldr	r1, [r4, #8]
 80016f0:	f001 0103 	and.w	r1, r1, #3
 80016f4:	2901      	cmp	r1, #1
 80016f6:	d102      	bne.n	80016fe <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 80016f8:	6821      	ldr	r1, [r4, #0]
 80016fa:	07c9      	lsls	r1, r1, #31
 80016fc:	d4f1      	bmi.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016fe:	6891      	ldr	r1, [r2, #8]
 8001700:	f001 0103 	and.w	r1, r1, #3
 8001704:	2901      	cmp	r1, #1
 8001706:	d102      	bne.n	800170e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	07d2      	lsls	r2, r2, #31
 800170c:	d4e9      	bmi.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800170e:	4915      	ldr	r1, [pc, #84]	; (8001764 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8001710:	688a      	ldr	r2, [r1, #8]
 8001712:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001716:	f022 020f 	bic.w	r2, r2, #15
 800171a:	608a      	str	r2, [r1, #8]
 800171c:	e7e1      	b.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800171e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001720:	f042 0220 	orr.w	r2, r2, #32
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001726:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 800172e:	b017      	add	sp, #92	; 0x5c
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001732:	2001      	movs	r0, #1
 8001734:	e7fb      	b.n	800172e <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8001736:	2002      	movs	r0, #2
 8001738:	e7f9      	b.n	800172e <HAL_ADCEx_MultiModeConfigChannel+0xae>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800173a:	6894      	ldr	r4, [r2, #8]
 800173c:	f004 0403 	and.w	r4, r4, #3
 8001740:	2c01      	cmp	r4, #1
 8001742:	d102      	bne.n	800174a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	07d4      	lsls	r4, r2, #31
 8001748:	d4cb      	bmi.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800174a:	4c06      	ldr	r4, [pc, #24]	; (8001764 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800174c:	6889      	ldr	r1, [r1, #8]
 800174e:	68a2      	ldr	r2, [r4, #8]
 8001750:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001754:	4308      	orrs	r0, r1
 8001756:	f022 020f 	bic.w	r2, r2, #15
 800175a:	4310      	orrs	r0, r2
 800175c:	60a0      	str	r0, [r4, #8]
 800175e:	e7c0      	b.n	80016e2 <HAL_ADCEx_MultiModeConfigChannel+0x62>
 8001760:	50000100 	.word	0x50000100
 8001764:	50000300 	.word	0x50000300

08001768 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800176a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	0c1b      	lsrs	r3, r3, #16
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001778:	0200      	lsls	r0, r0, #8
 800177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001782:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001784:	60d3      	str	r3, [r2, #12]
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178e:	b530      	push	{r4, r5, lr}
 8001790:	68dc      	ldr	r4, [r3, #12]
 8001792:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001796:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	2b04      	cmp	r3, #4
 800179e:	bf28      	it	cs
 80017a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 0501 	mov.w	r5, #1
 80017a8:	fa05 f303 	lsl.w	r3, r5, r3
 80017ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b0:	bf8c      	ite	hi
 80017b2:	3c03      	subhi	r4, #3
 80017b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b6:	4019      	ands	r1, r3
 80017b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ba:	fa05 f404 	lsl.w	r4, r5, r4
 80017be:	3c01      	subs	r4, #1
 80017c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80017c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	ea42 0201 	orr.w	r2, r2, r1
 80017c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	bfaf      	iteee	ge
 80017ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	f000 000f 	andlt.w	r0, r0, #15
 80017d6:	4b06      	ldrlt	r3, [pc, #24]	; (80017f0 <HAL_NVIC_SetPriority+0x64>)
 80017d8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	bfa5      	ittet	ge
 80017dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80017e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80017e8:	bd30      	pop	{r4, r5, pc}
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	e000ed14 	.word	0xe000ed14

080017f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017f4:	0942      	lsrs	r2, r0, #5
 80017f6:	2301      	movs	r3, #1
 80017f8:	f000 001f 	and.w	r0, r0, #31
 80017fc:	fa03 f000 	lsl.w	r0, r3, r0
 8001800:	4b01      	ldr	r3, [pc, #4]	; (8001808 <HAL_NVIC_EnableIRQ+0x14>)
 8001802:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	3801      	subs	r0, #1
 800180e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001812:	d20a      	bcs.n	800182a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001818:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	21f0      	movs	r1, #240	; 0xf0
 800181c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800183a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800183c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800183e:	bf0c      	ite	eq
 8001840:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001844:	f022 0204 	bicne.w	r2, r2, #4
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	4770      	bx	lr
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001850:	4770      	bx	lr

08001852 <HAL_SYSTICK_IRQHandler>:
{
 8001852:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001854:	f7ff fffc 	bl	8001850 <HAL_SYSTICK_Callback>
 8001858:	bd08      	pop	{r3, pc}
	...

0800185c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800185c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800185e:	b350      	cbz	r0, 80018b6 <HAL_DMA_Init+0x5a>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001860:	6884      	ldr	r4, [r0, #8]
 8001862:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8001864:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8001866:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001868:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 800186a:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186c:	4323      	orrs	r3, r4
 800186e:	6904      	ldr	r4, [r0, #16]
 8001870:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001872:	6944      	ldr	r4, [r0, #20]
 8001874:	4323      	orrs	r3, r4
 8001876:	6984      	ldr	r4, [r0, #24]
 8001878:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800187a:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800187c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001880:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8001884:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001886:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001888:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_DMA_Init+0x60>)
 800188c:	2214      	movs	r2, #20
 800188e:	440b      	add	r3, r1
 8001890:	fbb3 f3f2 	udiv	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_DMA_Init+0x64>)
 800189a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800189c:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80018a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80018a4:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80018a6:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a8:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80018aa:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80018ae:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
}  
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	bf00      	nop
 80018bc:	bffdfff8 	.word	0xbffdfff8
 80018c0:	40020000 	.word	0x40020000

080018c4 <HAL_DMA_Start_IT>:
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80018c6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80018ca:	2c01      	cmp	r4, #1
 80018cc:	d035      	beq.n	800193a <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ce:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80018d2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d4:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80018d6:	f880 4020 	strb.w	r4, [r0, #32]
 80018da:	f04f 0600 	mov.w	r6, #0
 80018de:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e2:	d128      	bne.n	8001936 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80018e4:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018e8:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ea:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018ec:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ee:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018f0:	f026 0601 	bic.w	r6, r6, #1
 80018f4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018f6:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80018f8:	40bd      	lsls	r5, r7
 80018fa:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80018fc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018fe:	6843      	ldr	r3, [r0, #4]
 8001900:	6805      	ldr	r5, [r0, #0]
 8001902:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001904:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001906:	bf0b      	itete	eq
 8001908:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800190a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800190c:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800190e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001910:	b14b      	cbz	r3, 8001926 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001918:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800191a:	682b      	ldr	r3, [r5, #0]
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001922:	2000      	movs	r0, #0
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	f043 030a 	orr.w	r3, r3, #10
 800192c:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	e7f0      	b.n	8001918 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001936:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800193a:	2002      	movs	r0, #2
} 
 800193c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800193e <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800193e:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001942:	2a02      	cmp	r2, #2
{  
 8001944:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001946:	d003      	beq.n	8001950 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001948:	2204      	movs	r2, #4
 800194a:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800194c:	2001      	movs	r0, #1
 800194e:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001950:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001952:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001954:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8001956:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001958:	f021 010e 	bic.w	r1, r1, #14
 800195c:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800195e:	6811      	ldr	r1, [r2, #0]
 8001960:	f021 0101 	bic.w	r1, r1, #1
 8001964:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001966:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001970:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001972:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001976:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800197a:	b113      	cbz	r3, 8001982 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 800197c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800197e:	4620      	mov	r0, r4
 8001980:	bd10      	pop	{r4, pc}
 8001982:	4618      	mov	r0, r3
}
 8001984:	bd10      	pop	{r4, pc}

08001986 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001986:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001988:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800198a:	6803      	ldr	r3, [r0, #0]
{
 800198c:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800198e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001990:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001992:	2404      	movs	r4, #4
 8001994:	4094      	lsls	r4, r2
 8001996:	4226      	tst	r6, r4
 8001998:	d00e      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x32>
 800199a:	f015 0f04 	tst.w	r5, #4
 800199e:	d00b      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019a4:	bf5e      	ittt	pl
 80019a6:	681a      	ldrpl	r2, [r3, #0]
 80019a8:	f022 0204 	bicpl.w	r2, r2, #4
 80019ac:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019b0:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80019b2:	b373      	cbz	r3, 8001a12 <HAL_DMA_IRQHandler+0x8c>
}  
 80019b4:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80019b6:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019b8:	2402      	movs	r4, #2
 80019ba:	4094      	lsls	r4, r2
 80019bc:	4226      	tst	r6, r4
 80019be:	d012      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x60>
 80019c0:	f015 0f02 	tst.w	r5, #2
 80019c4:	d00f      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	0695      	lsls	r5, r2, #26
 80019ca:	d406      	bmi.n	80019da <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f022 020a 	bic.w	r2, r2, #10
 80019d2:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80019da:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019dc:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80019de:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80019e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019e4:	e7e5      	b.n	80019b2 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019e6:	2408      	movs	r4, #8
 80019e8:	4094      	lsls	r4, r2
 80019ea:	4234      	tst	r4, r6
 80019ec:	d011      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x8c>
 80019ee:	072c      	lsls	r4, r5, #28
 80019f0:	d50f      	bpl.n	8001a12 <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	f024 040e 	bic.w	r4, r4, #14
 80019f8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019fa:	2301      	movs	r3, #1
 80019fc:	fa03 f202 	lsl.w	r2, r3, r2
 8001a00:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a02:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001a04:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001a0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a10:	e7cf      	b.n	80019b2 <HAL_DMA_IRQHandler+0x2c>
}  
 8001a12:	bc70      	pop	{r4, r5, r6}
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a1e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001b88 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a26:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001a28:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8001a2c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a2e:	9c01      	ldr	r4, [sp, #4]
 8001a30:	40dc      	lsrs	r4, r3
 8001a32:	d102      	bne.n	8001a3a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8001a34:	b005      	add	sp, #20
 8001a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a3a:	2401      	movs	r4, #1
 8001a3c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001a40:	9c01      	ldr	r4, [sp, #4]
 8001a42:	ea14 050a 	ands.w	r5, r4, sl
 8001a46:	f000 8093 	beq.w	8001b70 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4a:	684c      	ldr	r4, [r1, #4]
 8001a4c:	f024 0b10 	bic.w	fp, r4, #16
 8001a50:	f1bb 0f02 	cmp.w	fp, #2
 8001a54:	d111      	bne.n	8001a7a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001a56:	08df      	lsrs	r7, r3, #3
 8001a58:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001a60:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a66:	fa09 fc0e 	lsl.w	ip, r9, lr
 8001a6a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a6e:	690e      	ldr	r6, [r1, #16]
 8001a70:	fa06 f60e 	lsl.w	r6, r6, lr
 8001a74:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8001a78:	623e      	str	r6, [r7, #32]
 8001a7a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001a80:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a82:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a86:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a88:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a92:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a96:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001a9e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa0:	d811      	bhi.n	8001ac6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001aa2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa8:	68ce      	ldr	r6, [r1, #12]
 8001aaa:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001aae:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001ab2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ab4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab6:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001aba:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001abe:	409e      	lsls	r6, r3
 8001ac0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001ac4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ac6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aca:	688e      	ldr	r6, [r1, #8]
 8001acc:	fa06 f60c 	lsl.w	r6, r6, ip
 8001ad0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001ad4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	d54b      	bpl.n	8001b70 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001adc:	f046 0601 	orr.w	r6, r6, #1
 8001ae0:	f8c8 6018 	str.w	r6, [r8, #24]
 8001ae4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001ae8:	f023 0703 	bic.w	r7, r3, #3
 8001aec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001af0:	f006 0601 	and.w	r6, r6, #1
 8001af4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001af8:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001afa:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001b00:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b02:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001b06:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b0a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b0e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b12:	d02f      	beq.n	8001b74 <HAL_GPIO_Init+0x15c>
 8001b14:	4e1b      	ldr	r6, [pc, #108]	; (8001b84 <HAL_GPIO_Init+0x16c>)
 8001b16:	42b0      	cmp	r0, r6
 8001b18:	d02e      	beq.n	8001b78 <HAL_GPIO_Init+0x160>
 8001b1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b1e:	42b0      	cmp	r0, r6
 8001b20:	d02c      	beq.n	8001b7c <HAL_GPIO_Init+0x164>
 8001b22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b26:	42b0      	cmp	r0, r6
 8001b28:	bf14      	ite	ne
 8001b2a:	2605      	movne	r6, #5
 8001b2c:	2603      	moveq	r6, #3
 8001b2e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001b32:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b36:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001b38:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b40:	bf0c      	ite	eq
 8001b42:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b44:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001b46:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001b48:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b4a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	bf0c      	ite	eq
 8001b50:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b52:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001b54:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001b56:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b58:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	bf0c      	ite	eq
 8001b5e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b60:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8001b62:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001b64:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b66:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b68:	bf54      	ite	pl
 8001b6a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001b6c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001b6e:	60d6      	str	r6, [r2, #12]
    position++;
 8001b70:	3301      	adds	r3, #1
 8001b72:	e75c      	b.n	8001a2e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b74:	2600      	movs	r6, #0
 8001b76:	e7da      	b.n	8001b2e <HAL_GPIO_Init+0x116>
 8001b78:	2601      	movs	r6, #1
 8001b7a:	e7d8      	b.n	8001b2e <HAL_GPIO_Init+0x116>
 8001b7c:	2602      	movs	r6, #2
 8001b7e:	e7d6      	b.n	8001b2e <HAL_GPIO_Init+0x116>
 8001b80:	40010400 	.word	0x40010400
 8001b84:	48000400 	.word	0x48000400
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	b10a      	cbz	r2, 8001b92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8e:	6181      	str	r1, [r0, #24]
 8001b90:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b92:	6281      	str	r1, [r0, #40]	; 0x28
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b98:	6803      	ldr	r3, [r0, #0]
 8001b9a:	07da      	lsls	r2, r3, #31
{
 8001b9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ba0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	d411      	bmi.n	8001bc8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	079b      	lsls	r3, r3, #30
 8001ba8:	f100 8088 	bmi.w	8001cbc <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	071c      	lsls	r4, r3, #28
 8001bb0:	f100 80f8 	bmi.w	8001da4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	0758      	lsls	r0, r3, #29
 8001bb8:	f100 8141 	bmi.w	8001e3e <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bbc:	69ea      	ldr	r2, [r5, #28]
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	f040 81d7 	bne.w	8001f72 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	e021      	b.n	8001c0c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bc8:	4cba      	ldr	r4, [pc, #744]	; (8001eb4 <HAL_RCC_OscConfig+0x31c>)
 8001bca:	6863      	ldr	r3, [r4, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d007      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd4:	6863      	ldr	r3, [r4, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d119      	bne.n	8001c12 <HAL_RCC_OscConfig+0x7a>
 8001bde:	6863      	ldr	r3, [r4, #4]
 8001be0:	03df      	lsls	r7, r3, #15
 8001be2:	d516      	bpl.n	8001c12 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	6821      	ldr	r1, [r4, #0]
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	420b      	tst	r3, r1
 8001c02:	d0cf      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xc>
 8001c04:	686b      	ldr	r3, [r5, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1cc      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001c0a:	2001      	movs	r0, #1
}
 8001c0c:	b002      	add	sp, #8
 8001c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	686a      	ldr	r2, [r5, #4]
 8001c14:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c18:	d125      	bne.n	8001c66 <HAL_RCC_OscConfig+0xce>
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c24:	68a9      	ldr	r1, [r5, #8]
 8001c26:	f023 030f 	bic.w	r3, r3, #15
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2e:	b352      	cbz	r2, 8001c86 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8001c30:	f7ff f988 	bl	8000f44 <HAL_GetTick>
 8001c34:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c38:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	2701      	movs	r7, #1
 8001c3c:	fa96 f3a6 	rbit	r3, r6
 8001c40:	6822      	ldr	r2, [r4, #0]
 8001c42:	fa96 f3a6 	rbit	r3, r6
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	fa07 f303 	lsl.w	r3, r7, r3
 8001c52:	4213      	tst	r3, r2
 8001c54:	d1a6      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c56:	f7ff f975 	bl	8000f44 <HAL_GetTick>
 8001c5a:	eba0 0008 	sub.w	r0, r0, r8
 8001c5e:	2864      	cmp	r0, #100	; 0x64
 8001c60:	d9ec      	bls.n	8001c3c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001c62:	2003      	movs	r0, #3
 8001c64:	e7d2      	b.n	8001c0c <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	b932      	cbnz	r2, 8001c78 <HAL_RCC_OscConfig+0xe0>
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6023      	str	r3, [r4, #0]
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	e7d3      	b.n	8001c20 <HAL_RCC_OscConfig+0x88>
 8001c78:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c7c:	d1f5      	bne.n	8001c6a <HAL_RCC_OscConfig+0xd2>
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c82:	6023      	str	r3, [r4, #0]
 8001c84:	e7c9      	b.n	8001c1a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001c86:	f7ff f95d 	bl	8000f44 <HAL_GetTick>
 8001c8a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c8e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c90:	2701      	movs	r7, #1
 8001c92:	fa96 f3a6 	rbit	r3, r6
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	fa96 f3a6 	rbit	r3, r6
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa07 f303 	lsl.w	r3, r7, r3
 8001ca8:	4213      	tst	r3, r2
 8001caa:	f43f af7b 	beq.w	8001ba4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cae:	f7ff f949 	bl	8000f44 <HAL_GetTick>
 8001cb2:	eba0 0008 	sub.w	r0, r0, r8
 8001cb6:	2864      	cmp	r0, #100	; 0x64
 8001cb8:	d9eb      	bls.n	8001c92 <HAL_RCC_OscConfig+0xfa>
 8001cba:	e7d2      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cbc:	4c7d      	ldr	r4, [pc, #500]	; (8001eb4 <HAL_RCC_OscConfig+0x31c>)
 8001cbe:	6863      	ldr	r3, [r4, #4]
 8001cc0:	f013 0f0c 	tst.w	r3, #12
 8001cc4:	d007      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cc6:	6863      	ldr	r3, [r4, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d121      	bne.n	8001d14 <HAL_RCC_OscConfig+0x17c>
 8001cd0:	6863      	ldr	r3, [r4, #4]
 8001cd2:	03de      	lsls	r6, r3, #15
 8001cd4:	d41e      	bmi.n	8001d14 <HAL_RCC_OscConfig+0x17c>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cdc:	6821      	ldr	r1, [r4, #0]
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	420b      	tst	r3, r1
 8001cf2:	d002      	beq.n	8001cfa <HAL_RCC_OscConfig+0x162>
 8001cf4:	692b      	ldr	r3, [r5, #16]
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d187      	bne.n	8001c0a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	6821      	ldr	r1, [r4, #0]
 8001cfc:	23f8      	movs	r3, #248	; 0xf8
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	fab3 f283 	clz	r2, r3
 8001d06:	696b      	ldr	r3, [r5, #20]
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	6023      	str	r3, [r4, #0]
 8001d12:	e74b      	b.n	8001bac <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d14:	692a      	ldr	r2, [r5, #16]
 8001d16:	2601      	movs	r6, #1
 8001d18:	b30a      	cbz	r2, 8001d5e <HAL_RCC_OscConfig+0x1c6>
 8001d1a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	2702      	movs	r7, #2
 8001d2e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001d30:	f7ff f908 	bl	8000f44 <HAL_GetTick>
 8001d34:	4680      	mov	r8, r0
 8001d36:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	6822      	ldr	r2, [r4, #0]
 8001d3c:	fa97 f3a7 	rbit	r3, r7
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa06 f303 	lsl.w	r3, r6, r3
 8001d4c:	4213      	tst	r3, r2
 8001d4e:	d1d4      	bne.n	8001cfa <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff f8f8 	bl	8000f44 <HAL_GetTick>
 8001d54:	eba0 0008 	sub.w	r0, r0, r8
 8001d58:	2802      	cmp	r0, #2
 8001d5a:	d9ec      	bls.n	8001d36 <HAL_RCC_OscConfig+0x19e>
 8001d5c:	e781      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
 8001d5e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	2702      	movs	r7, #2
 8001d72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d74:	f7ff f8e6 	bl	8000f44 <HAL_GetTick>
 8001d78:	4680      	mov	r8, r0
 8001d7a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	fa97 f3a7 	rbit	r3, r7
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa06 f303 	lsl.w	r3, r6, r3
 8001d90:	4213      	tst	r3, r2
 8001d92:	f43f af0b 	beq.w	8001bac <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff f8d5 	bl	8000f44 <HAL_GetTick>
 8001d9a:	eba0 0008 	sub.w	r0, r0, r8
 8001d9e:	2802      	cmp	r0, #2
 8001da0:	d9eb      	bls.n	8001d7a <HAL_RCC_OscConfig+0x1e2>
 8001da2:	e75e      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da4:	69aa      	ldr	r2, [r5, #24]
 8001da6:	4e43      	ldr	r6, [pc, #268]	; (8001eb4 <HAL_RCC_OscConfig+0x31c>)
 8001da8:	4943      	ldr	r1, [pc, #268]	; (8001eb8 <HAL_RCC_OscConfig+0x320>)
 8001daa:	2401      	movs	r4, #1
 8001dac:	b31a      	cbz	r2, 8001df6 <HAL_RCC_OscConfig+0x25e>
 8001dae:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	440b      	add	r3, r1
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	2702      	movs	r7, #2
 8001dbc:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f8c1 	bl	8000f44 <HAL_GetTick>
 8001dc2:	4680      	mov	r8, r0
 8001dc4:	fa97 f3a7 	rbit	r3, r7
 8001dc8:	fa97 f3a7 	rbit	r3, r7
 8001dcc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001dd2:	fa97 f3a7 	rbit	r3, r7
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	fa04 f303 	lsl.w	r3, r4, r3
 8001de2:	4213      	tst	r3, r2
 8001de4:	f47f aee6 	bne.w	8001bb4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff f8ac 	bl	8000f44 <HAL_GetTick>
 8001dec:	eba0 0008 	sub.w	r0, r0, r8
 8001df0:	2802      	cmp	r0, #2
 8001df2:	d9e7      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x22c>
 8001df4:	e735      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
 8001df6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	440b      	add	r3, r1
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	2702      	movs	r7, #2
 8001e04:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e06:	f7ff f89d 	bl	8000f44 <HAL_GetTick>
 8001e0a:	4680      	mov	r8, r0
 8001e0c:	fa97 f3a7 	rbit	r3, r7
 8001e10:	fa97 f3a7 	rbit	r3, r7
 8001e14:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001e1a:	fa97 f3a7 	rbit	r3, r7
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	fa04 f303 	lsl.w	r3, r4, r3
 8001e2a:	4213      	tst	r3, r2
 8001e2c:	f43f aec2 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff f888 	bl	8000f44 <HAL_GetTick>
 8001e34:	eba0 0008 	sub.w	r0, r0, r8
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	d9e7      	bls.n	8001e0c <HAL_RCC_OscConfig+0x274>
 8001e3c:	e711      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4c1d      	ldr	r4, [pc, #116]	; (8001eb4 <HAL_RCC_OscConfig+0x31c>)
 8001e40:	69e3      	ldr	r3, [r4, #28]
 8001e42:	00d9      	lsls	r1, r3, #3
 8001e44:	d434      	bmi.n	8001eb0 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	69e3      	ldr	r3, [r4, #28]
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61e3      	str	r3, [r4, #28]
 8001e4e:	69e3      	ldr	r3, [r4, #28]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e58:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4f18      	ldr	r7, [pc, #96]	; (8001ebc <HAL_RCC_OscConfig+0x324>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	05da      	lsls	r2, r3, #23
 8001e60:	d52e      	bpl.n	8001ec0 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e62:	68eb      	ldr	r3, [r5, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d13c      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x34a>
 8001e68:	6a23      	ldr	r3, [r4, #32]
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e70:	f7ff f868 	bl	8000f44 <HAL_GetTick>
 8001e74:	2702      	movs	r7, #2
 8001e76:	4682      	mov	sl, r0
 8001e78:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7a:	f04f 0801 	mov.w	r8, #1
 8001e7e:	fa97 f3a7 	rbit	r3, r7
 8001e82:	fa97 f3a7 	rbit	r3, r7
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3ca>
 8001e8a:	6a22      	ldr	r2, [r4, #32]
 8001e8c:	fa99 f3a9 	rbit	r3, r9
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	fa08 f303 	lsl.w	r3, r8, r3
 8001e9c:	4213      	tst	r3, r2
 8001e9e:	d057      	beq.n	8001f50 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8001ea0:	2e00      	cmp	r6, #0
 8001ea2:	f43f ae8b 	beq.w	8001bbc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	69e3      	ldr	r3, [r4, #28]
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eac:	61e3      	str	r3, [r4, #28]
 8001eae:	e685      	b.n	8001bbc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001eb0:	2600      	movs	r6, #0
 8001eb2:	e7d2      	b.n	8001e5a <HAL_RCC_OscConfig+0x2c2>
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	10908120 	.word	0x10908120
 8001ebc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f83c 	bl	8000f44 <HAL_GetTick>
 8001ecc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	05db      	lsls	r3, r3, #23
 8001ed2:	d4c6      	bmi.n	8001e62 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7ff f836 	bl	8000f44 <HAL_GetTick>
 8001ed8:	eba0 0008 	sub.w	r0, r0, r8
 8001edc:	2864      	cmp	r0, #100	; 0x64
 8001ede:	d9f6      	bls.n	8001ece <HAL_RCC_OscConfig+0x336>
 8001ee0:	e6bf      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee2:	bb3b      	cbnz	r3, 8001f34 <HAL_RCC_OscConfig+0x39c>
 8001ee4:	6a23      	ldr	r3, [r4, #32]
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	6223      	str	r3, [r4, #32]
 8001eec:	6a23      	ldr	r3, [r4, #32]
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ef4:	f7ff f826 	bl	8000f44 <HAL_GetTick>
 8001ef8:	2702      	movs	r7, #2
 8001efa:	4682      	mov	sl, r0
 8001efc:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	f04f 0801 	mov.w	r8, #1
 8001f02:	fa97 f3a7 	rbit	r3, r7
 8001f06:	fa97 f3a7 	rbit	r3, r7
 8001f0a:	b373      	cbz	r3, 8001f6a <HAL_RCC_OscConfig+0x3d2>
 8001f0c:	6a22      	ldr	r2, [r4, #32]
 8001f0e:	fa99 f3a9 	rbit	r3, r9
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	fa08 f303 	lsl.w	r3, r8, r3
 8001f1e:	4213      	tst	r3, r2
 8001f20:	d0be      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff f80f 	bl	8000f44 <HAL_GetTick>
 8001f26:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f2a:	eba0 000a 	sub.w	r0, r0, sl
 8001f2e:	4298      	cmp	r0, r3
 8001f30:	d9e7      	bls.n	8001f02 <HAL_RCC_OscConfig+0x36a>
 8001f32:	e696      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	6a23      	ldr	r3, [r4, #32]
 8001f38:	d103      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6223      	str	r3, [r4, #32]
 8001f40:	e792      	b.n	8001e68 <HAL_RCC_OscConfig+0x2d0>
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6223      	str	r3, [r4, #32]
 8001f48:	6a23      	ldr	r3, [r4, #32]
 8001f4a:	f023 0304 	bic.w	r3, r3, #4
 8001f4e:	e78e      	b.n	8001e6e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7fe fff8 	bl	8000f44 <HAL_GetTick>
 8001f54:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f58:	eba0 000a 	sub.w	r0, r0, sl
 8001f5c:	4298      	cmp	r0, r3
 8001f5e:	d98e      	bls.n	8001e7e <HAL_RCC_OscConfig+0x2e6>
 8001f60:	e67f      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
 8001f62:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f68:	e790      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f4>
 8001f6a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f70:	e7cd      	b.n	8001f0e <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f72:	4c41      	ldr	r4, [pc, #260]	; (8002078 <HAL_RCC_OscConfig+0x4e0>)
 8001f74:	6863      	ldr	r3, [r4, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	f43f ae45 	beq.w	8001c0a <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f80:	2a02      	cmp	r2, #2
 8001f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f86:	d152      	bne.n	800202e <HAL_RCC_OscConfig+0x496>
 8001f88:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f9e:	f7fe ffd1 	bl	8000f44 <HAL_GetTick>
 8001fa2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001fa6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	2601      	movs	r6, #1
 8001faa:	fa97 f3a7 	rbit	r3, r7
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	fa97 f3a7 	rbit	r3, r7
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	fa06 f303 	lsl.w	r3, r6, r3
 8001fc0:	4213      	tst	r3, r2
 8001fc2:	d12d      	bne.n	8002020 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc4:	6862      	ldr	r2, [r4, #4]
 8001fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fc8:	6a29      	ldr	r1, [r5, #32]
 8001fca:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	6063      	str	r3, [r4, #4]
 8001fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001fee:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ffa8 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001ff6:	4607      	mov	r7, r0
 8001ff8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ffc:	6822      	ldr	r2, [r4, #0]
 8001ffe:	fa95 f3a5 	rbit	r3, r5
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	fa06 f303 	lsl.w	r3, r6, r3
 800200e:	4213      	tst	r3, r2
 8002010:	f47f add8 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ff96 	bl	8000f44 <HAL_GetTick>
 8002018:	1bc0      	subs	r0, r0, r7
 800201a:	2802      	cmp	r0, #2
 800201c:	d9ec      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x460>
 800201e:	e620      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe ff90 	bl	8000f44 <HAL_GetTick>
 8002024:	eba0 0008 	sub.w	r0, r0, r8
 8002028:	2802      	cmp	r0, #2
 800202a:	d9be      	bls.n	8001faa <HAL_RCC_OscConfig+0x412>
 800202c:	e619      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
 800202e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800203a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002044:	f7fe ff7e 	bl	8000f44 <HAL_GetTick>
 8002048:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800204c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	2601      	movs	r6, #1
 8002050:	fa95 f3a5 	rbit	r3, r5
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	fa95 f3a5 	rbit	r3, r5
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	fa06 f303 	lsl.w	r3, r6, r3
 8002066:	4213      	tst	r3, r2
 8002068:	f43f adac 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe ff6a 	bl	8000f44 <HAL_GetTick>
 8002070:	1bc0      	subs	r0, r0, r7
 8002072:	2802      	cmp	r0, #2
 8002074:	d9ec      	bls.n	8002050 <HAL_RCC_OscConfig+0x4b8>
 8002076:	e5f4      	b.n	8001c62 <HAL_RCC_OscConfig+0xca>
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800207e:	4c13      	ldr	r4, [pc, #76]	; (80020cc <HAL_RCC_GetSysClockFreq+0x50>)
 8002080:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002082:	f001 030c 	and.w	r3, r1, #12
 8002086:	2b08      	cmp	r3, #8
 8002088:	d11e      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x4c>
 800208a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800208e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002092:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x54>)
 80020a0:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa92 f2a2 	rbit	r2, r2
 80020aa:	fab2 f282 	clz	r2, r2
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	40d3      	lsrs	r3, r2
 80020b4:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x58>)
 80020b6:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020b8:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020ba:	bf4a      	itet	mi
 80020bc:	4b06      	ldrmi	r3, [pc, #24]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020be:	4b07      	ldrpl	r3, [pc, #28]	; (80020dc <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020c0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020c4:	4358      	muls	r0, r3
 80020c6:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020ca:	bd10      	pop	{r4, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	0800528c 	.word	0x0800528c
 80020d4:	0800529c 	.word	0x0800529c
 80020d8:	007a1200 	.word	0x007a1200
 80020dc:	003d0900 	.word	0x003d0900

080020e0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020e0:	4a5c      	ldr	r2, [pc, #368]	; (8002254 <HAL_RCC_ClockConfig+0x174>)
 80020e2:	6813      	ldr	r3, [r2, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	428b      	cmp	r3, r1
{
 80020ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ee:	4606      	mov	r6, r0
 80020f0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020f2:	d330      	bcc.n	8002156 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	6832      	ldr	r2, [r6, #0]
 80020f6:	0791      	lsls	r1, r2, #30
 80020f8:	d43a      	bmi.n	8002170 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	07d2      	lsls	r2, r2, #31
 80020fc:	d440      	bmi.n	8002180 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80020fe:	4a55      	ldr	r2, [pc, #340]	; (8002254 <HAL_RCC_ClockConfig+0x174>)
 8002100:	6813      	ldr	r3, [r2, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	429d      	cmp	r5, r3
 8002108:	f0c0 8092 	bcc.w	8002230 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	6832      	ldr	r2, [r6, #0]
 800210e:	4c52      	ldr	r4, [pc, #328]	; (8002258 <HAL_RCC_ClockConfig+0x178>)
 8002110:	f012 0f04 	tst.w	r2, #4
 8002114:	f040 8097 	bne.w	8002246 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	0713      	lsls	r3, r2, #28
 800211a:	d506      	bpl.n	800212a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211c:	6863      	ldr	r3, [r4, #4]
 800211e:	6932      	ldr	r2, [r6, #16]
 8002120:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002124:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002128:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800212a:	f7ff ffa7 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	22f0      	movs	r2, #240	; 0xf0
 8002132:	fa92 f2a2 	rbit	r2, r2
 8002136:	fab2 f282 	clz	r2, r2
 800213a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213e:	40d3      	lsrs	r3, r2
 8002140:	4a46      	ldr	r2, [pc, #280]	; (800225c <HAL_RCC_ClockConfig+0x17c>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	40d8      	lsrs	r0, r3
 8002146:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCC_ClockConfig+0x180>)
 8002148:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800214a:	2000      	movs	r0, #0
 800214c:	f7fe fecc 	bl	8000ee8 <HAL_InitTick>
  return HAL_OK;
 8002150:	2000      	movs	r0, #0
}
 8002152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	f023 0307 	bic.w	r3, r3, #7
 800215c:	430b      	orrs	r3, r1
 800215e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002160:	6813      	ldr	r3, [r2, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	4299      	cmp	r1, r3
 8002168:	d0c4      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800216a:	2001      	movs	r0, #1
 800216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4939      	ldr	r1, [pc, #228]	; (8002258 <HAL_RCC_ClockConfig+0x178>)
 8002172:	68b0      	ldr	r0, [r6, #8]
 8002174:	684b      	ldr	r3, [r1, #4]
 8002176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217a:	4303      	orrs	r3, r0
 800217c:	604b      	str	r3, [r1, #4]
 800217e:	e7bc      	b.n	80020fa <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002180:	6872      	ldr	r2, [r6, #4]
 8002182:	4c35      	ldr	r4, [pc, #212]	; (8002258 <HAL_RCC_ClockConfig+0x178>)
 8002184:	2a01      	cmp	r2, #1
 8002186:	d128      	bne.n	80021da <HAL_RCC_ClockConfig+0xfa>
 8002188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002190:	6821      	ldr	r1, [r4, #0]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	d0e1      	beq.n	800216a <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	6863      	ldr	r3, [r4, #4]
 80021a8:	f023 0303 	bic.w	r3, r3, #3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80021b0:	f7fe fec8 	bl	8000f44 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b4:	6873      	ldr	r3, [r6, #4]
 80021b6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80021b8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ba:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	d11f      	bne.n	8002200 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	6863      	ldr	r3, [r4, #4]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d099      	beq.n	80020fe <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f7fe febb 	bl	8000f44 <HAL_GetTick>
 80021ce:	1bc0      	subs	r0, r0, r7
 80021d0:	4540      	cmp	r0, r8
 80021d2:	d9f5      	bls.n	80021c0 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80021d4:	2003      	movs	r0, #3
 80021d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021da:	2a02      	cmp	r2, #2
 80021dc:	bf0c      	ite	eq
 80021de:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80021e2:	2302      	movne	r3, #2
 80021e4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	6820      	ldr	r0, [r4, #0]
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4203      	tst	r3, r0
 80021fe:	e7d1      	b.n	80021a4 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002200:	2b02      	cmp	r3, #2
 8002202:	d110      	bne.n	8002226 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	6863      	ldr	r3, [r4, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	f43f af77 	beq.w	80020fe <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe fe98 	bl	8000f44 <HAL_GetTick>
 8002214:	1bc0      	subs	r0, r0, r7
 8002216:	4540      	cmp	r0, r8
 8002218:	d9f4      	bls.n	8002204 <HAL_RCC_ClockConfig+0x124>
 800221a:	e7db      	b.n	80021d4 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7fe fe92 	bl	8000f44 <HAL_GetTick>
 8002220:	1bc0      	subs	r0, r0, r7
 8002222:	4540      	cmp	r0, r8
 8002224:	d8d6      	bhi.n	80021d4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	f013 0f0c 	tst.w	r3, #12
 800222c:	d1f6      	bne.n	800221c <HAL_RCC_ClockConfig+0x13c>
 800222e:	e766      	b.n	80020fe <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002230:	6813      	ldr	r3, [r2, #0]
 8002232:	f023 0307 	bic.w	r3, r3, #7
 8002236:	432b      	orrs	r3, r5
 8002238:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	429d      	cmp	r5, r3
 8002242:	d192      	bne.n	800216a <HAL_RCC_ClockConfig+0x8a>
 8002244:	e762      	b.n	800210c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002246:	6863      	ldr	r3, [r4, #4]
 8002248:	68f1      	ldr	r1, [r6, #12]
 800224a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800224e:	430b      	orrs	r3, r1
 8002250:	6063      	str	r3, [r4, #4]
 8002252:	e761      	b.n	8002118 <HAL_RCC_ClockConfig+0x38>
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
 800225c:	080052dd 	.word	0x080052dd
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002264:	4b01      	ldr	r3, [pc, #4]	; (800226c <HAL_RCC_GetHCLKFreq+0x8>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002272:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	fa92 f2a2 	rbit	r2, r2
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002284:	40d3      	lsrs	r3, r2
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800228c:	6810      	ldr	r0, [r2, #0]
}    
 800228e:	40d8      	lsrs	r0, r3
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	080052ed 	.word	0x080052ed
 800229c:	20000000 	.word	0x20000000

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	fa92 f2a2 	rbit	r2, r2
 80022ac:	fab2 f282 	clz	r2, r2
 80022b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022b4:	40d3      	lsrs	r3, r2
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x2c>)
 80022bc:	6810      	ldr	r0, [r2, #0]
} 
 80022be:	40d8      	lsrs	r0, r3
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	080052ed 	.word	0x080052ed
 80022cc:	20000000 	.word	0x20000000

080022d0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022d0:	6803      	ldr	r3, [r0, #0]
{
 80022d2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022d6:	03dc      	lsls	r4, r3, #15
{
 80022d8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022da:	d520      	bpl.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022dc:	4c55      	ldr	r4, [pc, #340]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022de:	69e3      	ldr	r3, [r4, #28]
 80022e0:	00d8      	lsls	r0, r3, #3
 80022e2:	d44d      	bmi.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	69e3      	ldr	r3, [r4, #28]
 80022e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ea:	61e3      	str	r3, [r4, #28]
 80022ec:	69e3      	ldr	r3, [r4, #28]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022f6:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4f4f      	ldr	r7, [pc, #316]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	05d9      	lsls	r1, r3, #23
 80022fe:	d541      	bpl.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002300:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002302:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002306:	d151      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002308:	6a23      	ldr	r3, [r4, #32]
 800230a:	686a      	ldr	r2, [r5, #4]
 800230c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002310:	4313      	orrs	r3, r2
 8002312:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002314:	b11e      	cbz	r6, 800231e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	69e3      	ldr	r3, [r4, #28]
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800231e:	6828      	ldr	r0, [r5, #0]
 8002320:	07c4      	lsls	r4, r0, #31
 8002322:	d506      	bpl.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002324:	4a43      	ldr	r2, [pc, #268]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002326:	68a9      	ldr	r1, [r5, #8]
 8002328:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	430b      	orrs	r3, r1
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002332:	0681      	lsls	r1, r0, #26
 8002334:	d506      	bpl.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002336:	4a3f      	ldr	r2, [pc, #252]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002338:	68e9      	ldr	r1, [r5, #12]
 800233a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800233c:	f023 0310 	bic.w	r3, r3, #16
 8002340:	430b      	orrs	r3, r1
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002344:	0602      	lsls	r2, r0, #24
 8002346:	d506      	bpl.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002348:	4a3a      	ldr	r2, [pc, #232]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800234a:	6929      	ldr	r1, [r5, #16]
 800234c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800234e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002352:	430b      	orrs	r3, r1
 8002354:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002356:	04c3      	lsls	r3, r0, #19
 8002358:	d506      	bpl.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800235a:	4a36      	ldr	r2, [pc, #216]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800235c:	6969      	ldr	r1, [r5, #20]
 800235e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002364:	430b      	orrs	r3, r1
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002368:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800236c:	d01b      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800236e:	4a31      	ldr	r2, [pc, #196]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002370:	69a9      	ldr	r1, [r5, #24]
 8002372:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002378:	430b      	orrs	r3, r1
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800237c:	2000      	movs	r0, #0
 800237e:	e012      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8002380:	2600      	movs	r6, #0
 8002382:	e7b9      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800238c:	f7fe fdda 	bl	8000f44 <HAL_GetTick>
 8002390:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	05da      	lsls	r2, r3, #23
 8002396:	d4b3      	bmi.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe fdd4 	bl	8000f44 <HAL_GetTick>
 800239c:	eba0 0008 	sub.w	r0, r0, r8
 80023a0:	2864      	cmp	r0, #100	; 0x64
 80023a2:	d9f6      	bls.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 80023a4:	2003      	movs	r0, #3
}
 80023a6:	b002      	add	sp, #8
 80023a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ac:	686a      	ldr	r2, [r5, #4]
 80023ae:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d0a8      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b6:	6a21      	ldr	r1, [r4, #32]
 80023b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023bc:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80023c0:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80023c4:	f8df e074 	ldr.w	lr, [pc, #116]	; 800243c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	4472      	add	r2, lr
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	2701      	movs	r7, #1
 80023d2:	6017      	str	r7, [r2, #0]
 80023d4:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	4473      	add	r3, lr
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e4:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80023e6:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e8:	d58e      	bpl.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80023ea:	f7fe fdab 	bl	8000f44 <HAL_GetTick>
 80023ee:	f04f 0802 	mov.w	r8, #2
 80023f2:	4682      	mov	sl, r0
 80023f4:	46c1      	mov	r9, r8
 80023f6:	fa98 f3a8 	rbit	r3, r8
 80023fa:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	b1a3      	cbz	r3, 800242a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002400:	6a22      	ldr	r2, [r4, #32]
 8002402:	fa99 f3a9 	rbit	r3, r9
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	fa07 f303 	lsl.w	r3, r7, r3
 8002412:	4213      	tst	r3, r2
 8002414:	f47f af78 	bne.w	8002308 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe fd94 	bl	8000f44 <HAL_GetTick>
 800241c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002420:	eba0 000a 	sub.w	r0, r0, sl
 8002424:	4298      	cmp	r0, r3
 8002426:	d9e6      	bls.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8002428:	e7bc      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800242a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002430:	e7e7      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	10908100 	.word	0x10908100

08002440 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002440:	6803      	ldr	r3, [r0, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002452:	2000      	movs	r0, #0
 8002454:	4770      	bx	lr

08002456 <HAL_TIM_IC_MspInit>:
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_OC_DelayElapsedCallback>:
 8002458:	4770      	bx	lr

0800245a <HAL_TIM_IC_CaptureCallback>:
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_PWM_PulseFinishedCallback>:
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800245e:	6803      	ldr	r3, [r0, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	0791      	lsls	r1, r2, #30
{
 8002464:	b510      	push	{r4, lr}
 8002466:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002468:	d50f      	bpl.n	800248a <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	0792      	lsls	r2, r2, #30
 800246e:	d50c      	bpl.n	800248a <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002470:	f06f 0202 	mvn.w	r2, #2
 8002474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002476:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002478:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800247a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800247e:	f000 8085 	beq.w	800258c <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002482:	f7ff ffea 	bl	800245a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	2300      	movs	r3, #0
 8002488:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	0752      	lsls	r2, r2, #29
 8002490:	d510      	bpl.n	80024b4 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	0750      	lsls	r0, r2, #29
 8002496:	d50d      	bpl.n	80024b4 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002498:	f06f 0204 	mvn.w	r2, #4
 800249c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a6:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80024a8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024aa:	d075      	beq.n	8002598 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80024ac:	f7ff ffd5 	bl	800245a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b0:	2300      	movs	r3, #0
 80024b2:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	0711      	lsls	r1, r2, #28
 80024ba:	d50f      	bpl.n	80024dc <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	0712      	lsls	r2, r2, #28
 80024c0:	d50c      	bpl.n	80024dc <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024c2:	f06f 0208 	mvn.w	r2, #8
 80024c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ca:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024cc:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ce:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80024d0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d2:	d067      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80024d4:	f7ff ffc1 	bl	800245a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d8:	2300      	movs	r3, #0
 80024da:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	06d0      	lsls	r0, r2, #27
 80024e2:	d510      	bpl.n	8002506 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	06d1      	lsls	r1, r2, #27
 80024e8:	d50d      	bpl.n	8002506 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024ea:	f06f 0210 	mvn.w	r2, #16
 80024ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f2:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f8:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024fc:	d058      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	f7ff ffac 	bl	800245a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	2300      	movs	r3, #0
 8002504:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	07d2      	lsls	r2, r2, #31
 800250c:	d508      	bpl.n	8002520 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	07d0      	lsls	r0, r2, #31
 8002512:	d505      	bpl.n	8002520 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002514:	f06f 0201 	mvn.w	r2, #1
 8002518:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800251a:	4620      	mov	r0, r4
 800251c:	f001 fdd6 	bl	80040cc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	0611      	lsls	r1, r2, #24
 8002526:	d508      	bpl.n	800253a <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	0612      	lsls	r2, r2, #24
 800252c:	d505      	bpl.n	800253a <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800252e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002532:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002534:	4620      	mov	r0, r4
 8002536:	f000 fafe 	bl	8002b36 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	05d0      	lsls	r0, r2, #23
 8002540:	d508      	bpl.n	8002554 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	0611      	lsls	r1, r2, #24
 8002546:	d505      	bpl.n	8002554 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002548:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800254c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800254e:	4620      	mov	r0, r4
 8002550:	f000 faf2 	bl	8002b38 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	0652      	lsls	r2, r2, #25
 800255a:	d508      	bpl.n	800256e <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	0650      	lsls	r0, r2, #25
 8002560:	d505      	bpl.n	800256e <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002566:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002568:	4620      	mov	r0, r4
 800256a:	f001 fa8d 	bl	8003a88 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	0691      	lsls	r1, r2, #26
 8002574:	d522      	bpl.n	80025bc <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	0692      	lsls	r2, r2, #26
 800257a:	d51f      	bpl.n	80025bc <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800257c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002580:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002582:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002588:	f000 bad4 	b.w	8002b34 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800258c:	f7ff ff64 	bl	8002458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff ff63 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
 8002596:	e776      	b.n	8002486 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002598:	f7ff ff5e 	bl	8002458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	4620      	mov	r0, r4
 800259e:	f7ff ff5d 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
 80025a2:	e785      	b.n	80024b0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a4:	f7ff ff58 	bl	8002458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff ff57 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
 80025ae:	e793      	b.n	80024d8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b0:	f7ff ff52 	bl	8002458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff ff51 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
 80025ba:	e7a2      	b.n	8002502 <HAL_TIM_IRQHandler+0xa4>
 80025bc:	bd10      	pop	{r4, pc}
	...

080025c0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c0:	4a21      	ldr	r2, [pc, #132]	; (8002648 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 80025c2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c4:	4290      	cmp	r0, r2
{
 80025c6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c8:	d005      	beq.n	80025d6 <TIM_Base_SetConfig+0x16>
 80025ca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025ce:	d002      	beq.n	80025d6 <TIM_Base_SetConfig+0x16>
 80025d0:	4c1e      	ldr	r4, [pc, #120]	; (800264c <TIM_Base_SetConfig+0x8c>)
 80025d2:	42a0      	cmp	r0, r4
 80025d4:	d10c      	bne.n	80025f0 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80025d6:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025dc:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80025de:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e2:	d010      	beq.n	8002606 <TIM_Base_SetConfig+0x46>
 80025e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025e8:	d00d      	beq.n	8002606 <TIM_Base_SetConfig+0x46>
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <TIM_Base_SetConfig+0x8c>)
 80025ec:	4290      	cmp	r0, r2
 80025ee:	d00a      	beq.n	8002606 <TIM_Base_SetConfig+0x46>
 80025f0:	4a17      	ldr	r2, [pc, #92]	; (8002650 <TIM_Base_SetConfig+0x90>)
 80025f2:	4290      	cmp	r0, r2
 80025f4:	d007      	beq.n	8002606 <TIM_Base_SetConfig+0x46>
 80025f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025fa:	4290      	cmp	r0, r2
 80025fc:	d003      	beq.n	8002606 <TIM_Base_SetConfig+0x46>
 80025fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002602:	4290      	cmp	r0, r2
 8002604:	d103      	bne.n	800260e <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002606:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800260e:	694a      	ldr	r2, [r1, #20]
 8002610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002614:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002616:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002618:	688b      	ldr	r3, [r1, #8]
 800261a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800261c:	680b      	ldr	r3, [r1, #0]
 800261e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <TIM_Base_SetConfig+0x88>)
 8002622:	4298      	cmp	r0, r3
 8002624:	d00b      	beq.n	800263e <TIM_Base_SetConfig+0x7e>
 8002626:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800262a:	4298      	cmp	r0, r3
 800262c:	d007      	beq.n	800263e <TIM_Base_SetConfig+0x7e>
 800262e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002632:	4298      	cmp	r0, r3
 8002634:	d003      	beq.n	800263e <TIM_Base_SetConfig+0x7e>
 8002636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263a:	4298      	cmp	r0, r3
 800263c:	d101      	bne.n	8002642 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800263e:	690b      	ldr	r3, [r1, #16]
 8002640:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002642:	2301      	movs	r3, #1
 8002644:	6143      	str	r3, [r0, #20]
 8002646:	bd10      	pop	{r4, pc}
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40000400 	.word	0x40000400
 8002650:	40014000 	.word	0x40014000

08002654 <HAL_TIM_Base_Init>:
{ 
 8002654:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002656:	4604      	mov	r4, r0
 8002658:	b1a0      	cbz	r0, 8002684 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800265a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800265e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002662:	b91b      	cbnz	r3, 800266c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002664:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002668:	f001 ff94 	bl	8004594 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800266c:	2302      	movs	r3, #2
 800266e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002672:	6820      	ldr	r0, [r4, #0]
 8002674:	1d21      	adds	r1, r4, #4
 8002676:	f7ff ffa3 	bl	80025c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800267a:	2301      	movs	r3, #1
 800267c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002680:	2000      	movs	r0, #0
 8002682:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002684:	2001      	movs	r0, #1
}
 8002686:	bd10      	pop	{r4, pc}

08002688 <HAL_TIM_IC_Init>:
{
 8002688:	b510      	push	{r4, lr}
  if(htim == NULL)
 800268a:	4604      	mov	r4, r0
 800268c:	b1a0      	cbz	r0, 80026b8 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800268e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002692:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002696:	b91b      	cbnz	r3, 80026a0 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002698:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800269c:	f7ff fedb 	bl	8002456 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 80026a0:	2302      	movs	r3, #2
 80026a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80026a6:	6820      	ldr	r0, [r4, #0]
 80026a8:	1d21      	adds	r1, r4, #4
 80026aa:	f7ff ff89 	bl	80025c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80026b4:	2000      	movs	r0, #0
 80026b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026b8:	2001      	movs	r0, #1
}
 80026ba:	bd10      	pop	{r4, pc}

080026bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026be:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026c0:	4e12      	ldr	r6, [pc, #72]	; (800270c <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c2:	f024 0401 	bic.w	r4, r4, #1
 80026c6:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026c8:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80026ca:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80026cc:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026ce:	d00a      	beq.n	80026e6 <TIM_TI1_SetConfig+0x2a>
 80026d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026d4:	d007      	beq.n	80026e6 <TIM_TI1_SetConfig+0x2a>
 80026d6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80026da:	42b0      	cmp	r0, r6
 80026dc:	d003      	beq.n	80026e6 <TIM_TI1_SetConfig+0x2a>
 80026de:	f506 369e 	add.w	r6, r6, #80896	; 0x13c00
 80026e2:	42b0      	cmp	r0, r6
 80026e4:	d10f      	bne.n	8002706 <TIM_TI1_SetConfig+0x4a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80026e6:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80026ea:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026ec:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026f2:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026f4:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026f8:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026fc:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026fe:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002700:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002702:	6201      	str	r1, [r0, #32]
}
 8002704:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002706:	f044 0201 	orr.w	r2, r4, #1
 800270a:	e7ef      	b.n	80026ec <TIM_TI1_SetConfig+0x30>
 800270c:	40012c00 	.word	0x40012c00

08002710 <HAL_TIM_IC_ConfigChannel>:
{
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002712:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002716:	2b01      	cmp	r3, #1
{
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
 800271c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002720:	d019      	beq.n	8002756 <HAL_TIM_IC_ConfigChannel+0x46>
 8002722:	2301      	movs	r3, #1
 8002724:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800272c:	b9a2      	cbnz	r2, 8002758 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800272e:	68cb      	ldr	r3, [r1, #12]
 8002730:	6820      	ldr	r0, [r4, #0]
 8002732:	c906      	ldmia	r1, {r1, r2}
 8002734:	f7ff ffc2 	bl	80026bc <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002738:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800273a:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	f022 020c 	bic.w	r2, r2, #12
 8002742:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	430a      	orrs	r2, r1
 8002748:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800274a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800274c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800274e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002752:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002758:	2a04      	cmp	r2, #4
 800275a:	688e      	ldr	r6, [r1, #8]
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	68e8      	ldr	r0, [r5, #12]
 8002760:	c982      	ldmia	r1, {r1, r7}
 8002762:	d11f      	bne.n	80027a4 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	f022 0210 	bic.w	r2, r2, #16
 800276a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800276c:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 800276e:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002770:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002774:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002778:	0300      	lsls	r0, r0, #12
 800277a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800277c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002780:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002782:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002784:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002788:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800278c:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800278e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002790:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002798:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80027a0:	619e      	str	r6, [r3, #24]
 80027a2:	e7d2      	b.n	800274a <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80027a4:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027a6:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80027a8:	d11c      	bne.n	80027e4 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027b0:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80027b2:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80027b4:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 80027b8:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80027ba:	0100      	lsls	r0, r0, #4
 80027bc:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80027be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027c2:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80027c4:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027c6:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80027ca:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027ce:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80027d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80027d2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	f022 020c 	bic.w	r2, r2, #12
 80027da:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027e0:	61de      	str	r6, [r3, #28]
 80027e2:	e7b2      	b.n	800274a <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027ea:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80027ec:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80027f2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027f6:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80027f8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027fc:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80027fe:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002800:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002802:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002806:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800280a:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800280c:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800280e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002816:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800281e:	e7df      	b.n	80027e0 <HAL_TIM_IC_ConfigChannel+0xd0>

08002820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002820:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002822:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002824:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002826:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800282a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800282e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002830:	6083      	str	r3, [r0, #8]
 8002832:	bd10      	pop	{r4, pc}

08002834 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002834:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002838:	2b01      	cmp	r3, #1
{
 800283a:	b570      	push	{r4, r5, r6, lr}
 800283c:	4604      	mov	r4, r0
 800283e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002842:	d01a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002848:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800284a:	2301      	movs	r3, #1
 800284c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002850:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002852:	4b52      	ldr	r3, [pc, #328]	; (800299c <HAL_TIM_ConfigClockSource+0x168>)
 8002854:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002856:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002858:	680b      	ldr	r3, [r1, #0]
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d075      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x116>
 800285e:	d818      	bhi.n	8002892 <HAL_TIM_ConfigClockSource+0x5e>
 8002860:	2b10      	cmp	r3, #16
 8002862:	f000 808f 	beq.w	8002984 <HAL_TIM_ConfigClockSource+0x150>
 8002866:	d809      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x48>
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8085 	beq.w	8002978 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 800286e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002870:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002876:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800287a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800287c:	2b20      	cmp	r3, #32
 800287e:	f000 8087 	beq.w	8002990 <HAL_TIM_ConfigClockSource+0x15c>
 8002882:	2b30      	cmp	r3, #48	; 0x30
 8002884:	d1f3      	bne.n	800286e <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8002886:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800288c:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002890:	e033      	b.n	80028fa <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002892:	2b70      	cmp	r3, #112	; 0x70
 8002894:	d033      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0xca>
 8002896:	d81b      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x9c>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d03f      	beq.n	800291c <HAL_TIM_ConfigClockSource+0xe8>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d1e6      	bne.n	800286e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80028a0:	684d      	ldr	r5, [r1, #4]
 80028a2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a4:	6a01      	ldr	r1, [r0, #32]
 80028a6:	f021 0110 	bic.w	r1, r1, #16
 80028aa:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ac:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80028ae:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80028b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028bc:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80028c0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80028c2:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80028c4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80028ca:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80028ce:	e014      	b.n	80028fa <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d4:	d00c      	beq.n	80028f0 <HAL_TIM_ConfigClockSource+0xbc>
 80028d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028da:	d1c8      	bne.n	800286e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80028dc:	68cb      	ldr	r3, [r1, #12]
 80028de:	684a      	ldr	r2, [r1, #4]
 80028e0:	6889      	ldr	r1, [r1, #8]
 80028e2:	f7ff ff9d 	bl	8002820 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e6:	6822      	ldr	r2, [r4, #0]
 80028e8:	6893      	ldr	r3, [r2, #8]
 80028ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ee:	e013      	b.n	8002918 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80028f0:	6883      	ldr	r3, [r0, #8]
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80028fa:	6083      	str	r3, [r0, #8]
 80028fc:	e7b7      	b.n	800286e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80028fe:	68cb      	ldr	r3, [r1, #12]
 8002900:	684a      	ldr	r2, [r1, #4]
 8002902:	6889      	ldr	r1, [r1, #8]
 8002904:	f7ff ff8c 	bl	8002820 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002908:	6822      	ldr	r2, [r4, #0]
 800290a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800290c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002910:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002918:	6093      	str	r3, [r2, #8]
    break;
 800291a:	e7a8      	b.n	800286e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800291c:	684a      	ldr	r2, [r1, #4]
 800291e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002920:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002922:	6a05      	ldr	r5, [r0, #32]
 8002924:	f025 0501 	bic.w	r5, r5, #1
 8002928:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800292a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800292c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002934:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002938:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800293a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800293c:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800293e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002944:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002948:	e7d7      	b.n	80028fa <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800294a:	684a      	ldr	r2, [r1, #4]
 800294c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800294e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002950:	6a05      	ldr	r5, [r0, #32]
 8002952:	f025 0501 	bic.w	r5, r5, #1
 8002956:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002958:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800295a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800295e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002962:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002966:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002968:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800296a:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800296c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002972:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002976:	e7c0      	b.n	80028fa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002978:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800297e:	f043 0307 	orr.w	r3, r3, #7
 8002982:	e7ba      	b.n	80028fa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002984:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800298a:	f043 0317 	orr.w	r3, r3, #23
 800298e:	e7b4      	b.n	80028fa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002990:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002996:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800299a:	e7ae      	b.n	80028fa <HAL_TIM_ConfigClockSource+0xc6>
 800299c:	fffe0088 	.word	0xfffe0088

080029a0 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 80029a0:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80029a2:	684a      	ldr	r2, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 80029a4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80029aa:	4313      	orrs	r3, r2
{
 80029ac:	b430      	push	{r4, r5}
  tmpsmcr &= ~TIM_SMCR_SMS;
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80029b2:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 80029b4:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80029b8:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 80029ba:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80029bc:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80029be:	d01c      	beq.n	80029fa <TIM_SlaveTimer_SetConfig+0x5a>
 80029c0:	d803      	bhi.n	80029ca <TIM_SlaveTimer_SetConfig+0x2a>
 80029c2:	2a40      	cmp	r2, #64	; 0x40
 80029c4:	d00b      	beq.n	80029de <TIM_SlaveTimer_SetConfig+0x3e>
}
 80029c6:	bc30      	pop	{r4, r5}
 80029c8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80029ca:	2a60      	cmp	r2, #96	; 0x60
 80029cc:	d025      	beq.n	8002a1a <TIM_SlaveTimer_SetConfig+0x7a>
 80029ce:	2a70      	cmp	r2, #112	; 0x70
 80029d0:	d1f9      	bne.n	80029c6 <TIM_SlaveTimer_SetConfig+0x26>
      TIM_ETR_SetConfig(htim->Instance, 
 80029d2:	690b      	ldr	r3, [r1, #16]
 80029d4:	688a      	ldr	r2, [r1, #8]
 80029d6:	68c9      	ldr	r1, [r1, #12]
}
 80029d8:	bc30      	pop	{r4, r5}
      TIM_ETR_SetConfig(htim->Instance, 
 80029da:	f7ff bf21 	b.w	8002820 <TIM_ETR_SetConfig>
      tmpccer = htim->Instance->CCER;
 80029de:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80029e0:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80029e2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 80029ea:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80029f0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80029f4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80029f6:	6202      	str	r2, [r0, #32]
 80029f8:	e7e5      	b.n	80029c6 <TIM_SlaveTimer_SetConfig+0x26>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fa:	688a      	ldr	r2, [r1, #8]
 80029fc:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80029fe:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a00:	6a04      	ldr	r4, [r0, #32]
 8002a02:	f024 0401 	bic.w	r4, r4, #1
 8002a06:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002a08:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a12:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002a16:	430a      	orrs	r2, r1
 8002a18:	e7ec      	b.n	80029f4 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1a:	688c      	ldr	r4, [r1, #8]
 8002a1c:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1e:	6a01      	ldr	r1, [r0, #32]
 8002a20:	f021 0110 	bic.w	r1, r1, #16
 8002a24:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a26:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002a28:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a2a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a32:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a36:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002a3a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a3c:	6203      	str	r3, [r0, #32]
}
 8002a3e:	e7c2      	b.n	80029c6 <TIM_SlaveTimer_SetConfig+0x26>

08002a40 <HAL_TIM_SlaveConfigSynchronization>:
{
 8002a40:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002a42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
{
 8002a48:	4604      	mov	r4, r0
 8002a4a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002a4e:	d015      	beq.n	8002a7c <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8002a50:	2501      	movs	r5, #1
 8002a52:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8002a5a:	f7ff ffa1 	bl	80029a0 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a66:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002a68:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8002a6a:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002a6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a70:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002a72:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 8002a76:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002a7c:	4618      	mov	r0, r3
} 
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}

08002a80 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a80:	6a03      	ldr	r3, [r0, #32]
{
 8002a82:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002a84:	2401      	movs	r4, #1
 8002a86:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002a88:	ea23 0304 	bic.w	r3, r3, r4
 8002a8c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002a8e:	6a03      	ldr	r3, [r0, #32]
 8002a90:	408a      	lsls	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6202      	str	r2, [r0, #32]
 8002a96:	bd10      	pop	{r4, pc}

08002a98 <HAL_TIM_IC_Start_IT>:
{
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	4604      	mov	r4, r0
  switch (Channel)
 8002a9c:	290c      	cmp	r1, #12
 8002a9e:	d80d      	bhi.n	8002abc <HAL_TIM_IC_Start_IT+0x24>
 8002aa0:	e8df f001 	tbb	[pc, r1]
 8002aa4:	0c0c0c07 	.word	0x0c0c0c07
 8002aa8:	0c0c0c17 	.word	0x0c0c0c17
 8002aac:	0c0c0c1c 	.word	0x0c0c0c1c
 8002ab0:	21          	.byte	0x21
 8002ab1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ab2:	6802      	ldr	r2, [r0, #0]
 8002ab4:	68d3      	ldr	r3, [r2, #12]
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002aba:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002abc:	6820      	ldr	r0, [r4, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f7ff ffde 	bl	8002a80 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6013      	str	r3, [r2, #0]
} 
 8002ace:	2000      	movs	r0, #0
 8002ad0:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ad2:	6802      	ldr	r2, [r0, #0]
 8002ad4:	68d3      	ldr	r3, [r2, #12]
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	e7ee      	b.n	8002aba <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002adc:	6802      	ldr	r2, [r0, #0]
 8002ade:	68d3      	ldr	r3, [r2, #12]
 8002ae0:	f043 0308 	orr.w	r3, r3, #8
 8002ae4:	e7e9      	b.n	8002aba <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ae6:	6802      	ldr	r2, [r0, #0]
 8002ae8:	68d3      	ldr	r3, [r2, #12]
 8002aea:	f043 0310 	orr.w	r3, r3, #16
 8002aee:	e7e4      	b.n	8002aba <HAL_TIM_IC_Start_IT+0x22>

08002af0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002af0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
{
 8002af6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002af8:	d018      	beq.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002afa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002afc:	4d0c      	ldr	r5, [pc, #48]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8002afe:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002b00:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b02:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b04:	bf02      	ittt	eq
 8002b06:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b08:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b0c:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b0e:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b10:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b16:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b18:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1c:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b1e:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002b20:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002b22:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002b24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002b2c:	2002      	movs	r0, #2
} 
 8002b2e:	bd30      	pop	{r4, r5, pc}
 8002b30:	40012c00 	.word	0x40012c00

08002b34 <HAL_TIMEx_CommutationCallback>:
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIMEx_BreakCallback>:
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b38:	4770      	bx	lr

08002b3a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b3a:	6803      	ldr	r3, [r0, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b42:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002b52:	4770      	bx	lr

08002b54 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8002b54:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d11a      	bne.n	8002b92 <HAL_UART_Transmit_IT+0x3e>
    if((pData == NULL ) || (Size == 0U))
 8002b5c:	b1b9      	cbz	r1, 8002b8e <HAL_UART_Transmit_IT+0x3a>
 8002b5e:	b1b2      	cbz	r2, 8002b8e <HAL_UART_Transmit_IT+0x3a>
    __HAL_LOCK(huart);
 8002b60:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d014      	beq.n	8002b92 <HAL_UART_Transmit_IT+0x3e>
    huart->TxXferCount = Size;
 8002b68:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->pTxBuffPtr = pData;
 8002b6c:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8002b6e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b72:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b74:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b76:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b78:	2221      	movs	r2, #33	; 0x21
 8002b7a:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b7e:	680a      	ldr	r2, [r1, #0]
    __HAL_UNLOCK(huart);
 8002b80:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b88:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	4770      	bx	lr
      return HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
 8002b90:	4770      	bx	lr
    return HAL_BUSY;
 8002b92:	2002      	movs	r0, #2
}
 8002b94:	4770      	bx	lr

08002b96 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002b96:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d13d      	bne.n	8002c1a <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 8002b9e:	2900      	cmp	r1, #0
 8002ba0:	d039      	beq.n	8002c16 <HAL_UART_Receive_IT+0x80>
 8002ba2:	2a00      	cmp	r2, #0
 8002ba4:	d037      	beq.n	8002c16 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8002ba6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d035      	beq.n	8002c1a <HAL_UART_Receive_IT+0x84>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8002bb4:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8002bb6:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8002bbc:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002bc0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002bc4:	d119      	bne.n	8002bfa <HAL_UART_Receive_IT+0x64>
 8002bc6:	6903      	ldr	r3, [r0, #16]
 8002bc8:	b9ab      	cbnz	r3, 8002bf6 <HAL_UART_Receive_IT+0x60>
 8002bca:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002bce:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd2:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd4:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd8:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8002bde:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	6891      	ldr	r1, [r2, #8]
 8002be4:	f041 0101 	orr.w	r1, r1, #1
 8002be8:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002bea:	6811      	ldr	r1, [r2, #0]
 8002bec:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8002bf0:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002bf6:	23ff      	movs	r3, #255	; 0xff
 8002bf8:	e7e9      	b.n	8002bce <HAL_UART_Receive_IT+0x38>
 8002bfa:	b923      	cbnz	r3, 8002c06 <HAL_UART_Receive_IT+0x70>
 8002bfc:	6903      	ldr	r3, [r0, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f9      	beq.n	8002bf6 <HAL_UART_Receive_IT+0x60>
 8002c02:	237f      	movs	r3, #127	; 0x7f
 8002c04:	e7e3      	b.n	8002bce <HAL_UART_Receive_IT+0x38>
 8002c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0a:	d1e2      	bne.n	8002bd2 <HAL_UART_Receive_IT+0x3c>
 8002c0c:	6903      	ldr	r3, [r0, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f7      	beq.n	8002c02 <HAL_UART_Receive_IT+0x6c>
 8002c12:	233f      	movs	r3, #63	; 0x3f
 8002c14:	e7db      	b.n	8002bce <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
 8002c18:	4770      	bx	lr
    return HAL_BUSY;
 8002c1a:	2002      	movs	r0, #2
}
 8002c1c:	4770      	bx	lr

08002c1e <HAL_UART_TxCpltCallback>:
 8002c1e:	4770      	bx	lr

08002c20 <HAL_UART_ErrorCallback>:
 8002c20:	4770      	bx	lr

08002c22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c22:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002c24:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002c2c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002c30:	f7ff fff6 	bl	8002c20 <HAL_UART_ErrorCallback>
 8002c34:	bd08      	pop	{r3, pc}
	...

08002c38 <UART_SetConfig>:
{
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c3c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c3e:	6921      	ldr	r1, [r4, #16]
 8002c40:	68a3      	ldr	r3, [r4, #8]
 8002c42:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c44:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c46:	430b      	orrs	r3, r1
 8002c48:	6961      	ldr	r1, [r4, #20]
 8002c4a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c4c:	4949      	ldr	r1, [pc, #292]	; (8002d74 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c4e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c50:	4001      	ands	r1, r0
 8002c52:	430b      	orrs	r3, r1
 8002c54:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c56:	686b      	ldr	r3, [r5, #4]
 8002c58:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c5a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c60:	430b      	orrs	r3, r1
 8002c62:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c64:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c66:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c68:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c6c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <UART_SetConfig+0x140>)
 8002c74:	429d      	cmp	r5, r3
 8002c76:	d112      	bne.n	8002c9e <UART_SetConfig+0x66>
 8002c78:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002c7c:	493f      	ldr	r1, [pc, #252]	; (8002d7c <UART_SetConfig+0x144>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002c88:	5ccb      	ldrb	r3, [r1, r3]
 8002c8a:	d13b      	bne.n	8002d04 <UART_SetConfig+0xcc>
    switch (clocksource)
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d836      	bhi.n	8002cfe <UART_SetConfig+0xc6>
 8002c90:	e8df f003 	tbb	[pc, r3]
 8002c94:	3524210f 	.word	0x3524210f
 8002c98:	3535352d 	.word	0x3535352d
 8002c9c:	30          	.byte	0x30
 8002c9d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <UART_SetConfig+0x148>)
 8002ca0:	429d      	cmp	r5, r3
 8002ca2:	d003      	beq.n	8002cac <UART_SetConfig+0x74>
 8002ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ca8:	429d      	cmp	r5, r3
 8002caa:	d15e      	bne.n	8002d6a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002cb0:	d131      	bne.n	8002d16 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cb2:	f7ff fadd 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cb6:	6861      	ldr	r1, [r4, #4]
 8002cb8:	084a      	lsrs	r2, r1, #1
 8002cba:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002cbe:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cc2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002cc6:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8002cca:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ccc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60cb      	str	r3, [r1, #12]
 8002cd4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002cd6:	f7ff fae3 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8002cda:	e7ec      	b.n	8002cb6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002cdc:	6860      	ldr	r0, [r4, #4]
 8002cde:	0843      	lsrs	r3, r0, #1
 8002ce0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002ce4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ce8:	fbb3 f3f0 	udiv	r3, r3, r0
 8002cec:	e7e9      	b.n	8002cc2 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cee:	f7ff f9c5 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8002cf2:	e7e0      	b.n	8002cb6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cf4:	6860      	ldr	r0, [r4, #4]
 8002cf6:	0843      	lsrs	r3, r0, #1
 8002cf8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002cfc:	e7f4      	b.n	8002ce8 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8002cfe:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e7e0      	b.n	8002cc6 <UART_SetConfig+0x8e>
    switch (clocksource)
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d833      	bhi.n	8002d70 <UART_SetConfig+0x138>
 8002d08:	e8df f003 	tbb	[pc, r3]
 8002d0c:	321b1005 	.word	0x321b1005
 8002d10:	32323227 	.word	0x32323227
 8002d14:	2a          	.byte	0x2a
 8002d15:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d16:	f7ff faab 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8002d1a:	6863      	ldr	r3, [r4, #4]
 8002d1c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002d20:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d24:	b280      	uxth	r0, r0
 8002d26:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d28:	2000      	movs	r0, #0
        break;
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d2c:	f7ff fab8 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d30:	6863      	ldr	r3, [r4, #4]
 8002d32:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002d36:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <UART_SetConfig+0x140>)
 8002d3c:	b280      	uxth	r0, r0
 8002d3e:	60d8      	str	r0, [r3, #12]
 8002d40:	e7f2      	b.n	8002d28 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d42:	6862      	ldr	r2, [r4, #4]
 8002d44:	0853      	lsrs	r3, r2, #1
 8002d46:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002d4a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <UART_SetConfig+0x140>)
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	60d3      	str	r3, [r2, #12]
 8002d58:	e7e6      	b.n	8002d28 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d5a:	f7ff f98f 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8002d5e:	e7e7      	b.n	8002d30 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d60:	6862      	ldr	r2, [r4, #4]
 8002d62:	0853      	lsrs	r3, r2, #1
 8002d64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d68:	e7f1      	b.n	8002d4e <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002d6e:	d0c6      	beq.n	8002cfe <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8002d70:	2001      	movs	r0, #1
  return ret;
 8002d72:	bd38      	pop	{r3, r4, r5, pc}
 8002d74:	efff69f3 	.word	0xefff69f3
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	080052ac 	.word	0x080052ac
 8002d80:	40004400 	.word	0x40004400

08002d84 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d86:	07da      	lsls	r2, r3, #31
{
 8002d88:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d8a:	d506      	bpl.n	8002d9a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d8c:	6801      	ldr	r1, [r0, #0]
 8002d8e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002d90:	684a      	ldr	r2, [r1, #4]
 8002d92:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002d96:	4322      	orrs	r2, r4
 8002d98:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d9a:	079c      	lsls	r4, r3, #30
 8002d9c:	d506      	bpl.n	8002dac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d9e:	6801      	ldr	r1, [r0, #0]
 8002da0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002da2:	684a      	ldr	r2, [r1, #4]
 8002da4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002da8:	4322      	orrs	r2, r4
 8002daa:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dac:	0759      	lsls	r1, r3, #29
 8002dae:	d506      	bpl.n	8002dbe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002db0:	6801      	ldr	r1, [r0, #0]
 8002db2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002db4:	684a      	ldr	r2, [r1, #4]
 8002db6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dba:	4322      	orrs	r2, r4
 8002dbc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dbe:	071a      	lsls	r2, r3, #28
 8002dc0:	d506      	bpl.n	8002dd0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dc2:	6801      	ldr	r1, [r0, #0]
 8002dc4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002dc6:	684a      	ldr	r2, [r1, #4]
 8002dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dcc:	4322      	orrs	r2, r4
 8002dce:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dd0:	06dc      	lsls	r4, r3, #27
 8002dd2:	d506      	bpl.n	8002de2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dd4:	6801      	ldr	r1, [r0, #0]
 8002dd6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002dd8:	688a      	ldr	r2, [r1, #8]
 8002dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dde:	4322      	orrs	r2, r4
 8002de0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002de2:	0699      	lsls	r1, r3, #26
 8002de4:	d506      	bpl.n	8002df4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002de6:	6801      	ldr	r1, [r0, #0]
 8002de8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002dea:	688a      	ldr	r2, [r1, #8]
 8002dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df0:	4322      	orrs	r2, r4
 8002df2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002df4:	065a      	lsls	r2, r3, #25
 8002df6:	d50f      	bpl.n	8002e18 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002df8:	6801      	ldr	r1, [r0, #0]
 8002dfa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002dfc:	684a      	ldr	r2, [r1, #4]
 8002dfe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002e02:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e08:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e0a:	d105      	bne.n	8002e18 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e0c:	684a      	ldr	r2, [r1, #4]
 8002e0e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002e10:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002e14:	4322      	orrs	r2, r4
 8002e16:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	d506      	bpl.n	8002e2a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e1c:	6802      	ldr	r2, [r0, #0]
 8002e1e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002e20:	6853      	ldr	r3, [r2, #4]
 8002e22:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002e26:	430b      	orrs	r3, r1
 8002e28:	6053      	str	r3, [r2, #4]
 8002e2a:	bd10      	pop	{r4, pc}

08002e2c <UART_WaitOnFlagUntilTimeout>:
{
 8002e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e30:	9d06      	ldr	r5, [sp, #24]
 8002e32:	4604      	mov	r4, r0
 8002e34:	460f      	mov	r7, r1
 8002e36:	4616      	mov	r6, r2
 8002e38:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3a:	6821      	ldr	r1, [r4, #0]
 8002e3c:	69ca      	ldr	r2, [r1, #28]
 8002e3e:	ea37 0302 	bics.w	r3, r7, r2
 8002e42:	bf0c      	ite	eq
 8002e44:	2201      	moveq	r2, #1
 8002e46:	2200      	movne	r2, #0
 8002e48:	42b2      	cmp	r2, r6
 8002e4a:	d002      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002e4c:	2000      	movs	r0, #0
}
 8002e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002e52:	1c6b      	adds	r3, r5, #1
 8002e54:	d0f2      	beq.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e56:	b99d      	cbnz	r5, 8002e80 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002e70:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002e74:	2300      	movs	r3, #0
 8002e76:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002e7a:	2003      	movs	r0, #3
 8002e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e80:	f7fe f860 	bl	8000f44 <HAL_GetTick>
 8002e84:	eba0 0008 	sub.w	r0, r0, r8
 8002e88:	4285      	cmp	r5, r0
 8002e8a:	d2d6      	bcs.n	8002e3a <UART_WaitOnFlagUntilTimeout+0xe>
 8002e8c:	e7e4      	b.n	8002e58 <UART_WaitOnFlagUntilTimeout+0x2c>

08002e8e <HAL_UART_Transmit>:
{
 8002e8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e92:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002e94:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002e98:	2b20      	cmp	r3, #32
{
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	460d      	mov	r5, r1
 8002e9e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002ea0:	d14c      	bne.n	8002f3c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8002ea2:	2900      	cmp	r1, #0
 8002ea4:	d048      	beq.n	8002f38 <HAL_UART_Transmit+0xaa>
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d046      	beq.n	8002f38 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002eaa:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d044      	beq.n	8002f3c <HAL_UART_Transmit+0xae>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebc:	2321      	movs	r3, #33	; 0x21
 8002ebe:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f83f 	bl	8000f44 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002ec6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002eca:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002ecc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002ed0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002ed4:	b292      	uxth	r2, r2
 8002ed6:	b962      	cbnz	r2, 8002ef2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed8:	9700      	str	r7, [sp, #0]
 8002eda:	4633      	mov	r3, r6
 8002edc:	2140      	movs	r1, #64	; 0x40
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f7ff ffa4 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002ee4:	b998      	cbnz	r0, 8002f0e <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002eec:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002ef0:	e00e      	b.n	8002f10 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002ef2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f00:	2200      	movs	r2, #0
 8002f02:	4633      	mov	r3, r6
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7ff ff90 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002f0c:	b118      	cbz	r0, 8002f16 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002f0e:	2003      	movs	r0, #3
}
 8002f10:	b002      	add	sp, #8
 8002f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f16:	68a3      	ldr	r3, [r4, #8]
 8002f18:	6822      	ldr	r2, [r4, #0]
 8002f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1e:	d107      	bne.n	8002f30 <HAL_UART_Transmit+0xa2>
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	b92b      	cbnz	r3, 8002f30 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002f24:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002f2e:	e7cf      	b.n	8002ed0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002f30:	782b      	ldrb	r3, [r5, #0]
 8002f32:	8513      	strh	r3, [r2, #40]	; 0x28
 8002f34:	3501      	adds	r5, #1
 8002f36:	e7cb      	b.n	8002ed0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002f38:	2001      	movs	r0, #1
 8002f3a:	e7e9      	b.n	8002f10 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	e7e7      	b.n	8002f10 <HAL_UART_Transmit+0x82>

08002f40 <UART_CheckIdleState>:
{
 8002f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f42:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	2600      	movs	r6, #0
 8002f46:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002f48:	f7fd fffc 	bl	8000f44 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002f52:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f54:	d417      	bmi.n	8002f86 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	075b      	lsls	r3, r3, #29
 8002f5c:	d50a      	bpl.n	8002f74 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	462b      	mov	r3, r5
 8002f68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7ff ff5d 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002f72:	b9a0      	cbnz	r0, 8002f9e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002f74:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002f76:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002f78:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002f7c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002f80:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002f84:	e00c      	b.n	8002fa0 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4632      	mov	r2, r6
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7ff ff49 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d0db      	beq.n	8002f56 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002f9e:	2003      	movs	r0, #3
}
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}

08002fa4 <HAL_UART_Init>:
{
 8002fa4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	b360      	cbz	r0, 8003004 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002faa:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002fae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fb2:	b91b      	cbnz	r3, 8002fbc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002fb4:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002fb8:	f001 fb28 	bl	800460c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002fbc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002fbe:	2324      	movs	r3, #36	; 0x24
 8002fc0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7ff fe33 	bl	8002c38 <UART_SetConfig>
 8002fd2:	2801      	cmp	r0, #1
 8002fd4:	d016      	beq.n	8003004 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fd8:	b113      	cbz	r3, 8002fe0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f7ff fed2 	bl	8002d84 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002ff8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002ffa:	601a      	str	r2, [r3, #0]
}
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003000:	f7ff bf9e 	b.w	8002f40 <UART_CheckIdleState>
}
 8003004:	2001      	movs	r0, #1
 8003006:	bd10      	pop	{r4, pc}

08003008 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003008:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800300c:	2b21      	cmp	r3, #33	; 0x21
 800300e:	d127      	bne.n	8003060 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8003010:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003014:	6802      	ldr	r2, [r0, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	b94b      	cbnz	r3, 800302e <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800301a:	6811      	ldr	r1, [r2, #0]
 800301c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003020:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003022:	6811      	ldr	r1, [r2, #0]
 8003024:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003028:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 800302a:	2000      	movs	r0, #0
 800302c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302e:	6883      	ldr	r3, [r0, #8]
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003034:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003036:	d10e      	bne.n	8003056 <UART_Transmit_IT+0x4e>
 8003038:	6901      	ldr	r1, [r0, #16]
 800303a:	b961      	cbnz	r1, 8003056 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800303c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003040:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003044:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003046:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8003048:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800304c:	3b01      	subs	r3, #1
 800304e:	b29b      	uxth	r3, r3
 8003050:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8003054:	e7e9      	b.n	800302a <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003056:	1c59      	adds	r1, r3, #1
 8003058:	64c1      	str	r1, [r0, #76]	; 0x4c
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	8513      	strh	r3, [r2, #40]	; 0x28
 800305e:	e7f3      	b.n	8003048 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8003060:	2002      	movs	r0, #2
  }
}
 8003062:	4770      	bx	lr

08003064 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003064:	6801      	ldr	r1, [r0, #0]
{
 8003066:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003068:	680b      	ldr	r3, [r1, #0]
 800306a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306e:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003070:	2320      	movs	r3, #32
 8003072:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003076:	f7ff fdd2 	bl	8002c1e <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800307a:	2000      	movs	r0, #0
 800307c:	bd08      	pop	{r3, pc}

0800307e <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800307e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003082:	2b22      	cmp	r3, #34	; 0x22
{
 8003084:	b510      	push	{r4, lr}
 8003086:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003088:	d129      	bne.n	80030de <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800308a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800308e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	ea02 0201 	and.w	r2, r2, r1
 800309a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800309c:	d11b      	bne.n	80030d6 <UART_Receive_IT+0x58>
 800309e:	6901      	ldr	r1, [r0, #16]
 80030a0:	b9c9      	cbnz	r1, 80030d6 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80030a2:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80030a6:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80030a8:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80030ac:	3c01      	subs	r4, #1
 80030ae:	b2a4      	uxth	r4, r4
 80030b0:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80030b4:	b96c      	cbnz	r4, 80030d2 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b6:	6803      	ldr	r3, [r0, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030c8:	2320      	movs	r3, #32
 80030ca:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80030ce:	f000 fae5 	bl	800369c <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80030d2:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80030d4:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	6541      	str	r1, [r0, #84]	; 0x54
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e7e4      	b.n	80030a8 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	f042 0208 	orr.w	r2, r2, #8
 80030e4:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80030e6:	2002      	movs	r0, #2
 80030e8:	bd10      	pop	{r4, pc}
	...

080030ec <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030ec:	6802      	ldr	r2, [r0, #0]
 80030ee:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030f0:	6811      	ldr	r1, [r2, #0]
{
 80030f2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80030f4:	f013 050f 	ands.w	r5, r3, #15
{
 80030f8:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80030fa:	d107      	bne.n	800310c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030fc:	069e      	lsls	r6, r3, #26
 80030fe:	d505      	bpl.n	800310c <HAL_UART_IRQHandler+0x20>
 8003100:	068e      	lsls	r6, r1, #26
 8003102:	d503      	bpl.n	800310c <HAL_UART_IRQHandler+0x20>
}
 8003104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003108:	f7ff bfb9 	b.w	800307e <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 800310c:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800310e:	2d00      	cmp	r5, #0
 8003110:	d05c      	beq.n	80031cc <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003112:	f010 0501 	ands.w	r5, r0, #1
 8003116:	d102      	bne.n	800311e <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003118:	f411 7f90 	tst.w	r1, #288	; 0x120
 800311c:	d056      	beq.n	80031cc <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800311e:	07d8      	lsls	r0, r3, #31
 8003120:	d507      	bpl.n	8003132 <HAL_UART_IRQHandler+0x46>
 8003122:	05ce      	lsls	r6, r1, #23
 8003124:	d505      	bpl.n	8003132 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003126:	2001      	movs	r0, #1
 8003128:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800312a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800312c:	f040 0001 	orr.w	r0, r0, #1
 8003130:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003132:	0798      	lsls	r0, r3, #30
 8003134:	d506      	bpl.n	8003144 <HAL_UART_IRQHandler+0x58>
 8003136:	b12d      	cbz	r5, 8003144 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003138:	2002      	movs	r0, #2
 800313a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800313e:	f040 0004 	orr.w	r0, r0, #4
 8003142:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003144:	075e      	lsls	r6, r3, #29
 8003146:	d506      	bpl.n	8003156 <HAL_UART_IRQHandler+0x6a>
 8003148:	b12d      	cbz	r5, 8003156 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800314a:	2004      	movs	r0, #4
 800314c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800314e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003150:	f040 0002 	orr.w	r0, r0, #2
 8003154:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003156:	0718      	lsls	r0, r3, #28
 8003158:	d507      	bpl.n	800316a <HAL_UART_IRQHandler+0x7e>
 800315a:	068e      	lsls	r6, r1, #26
 800315c:	d400      	bmi.n	8003160 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800315e:	b125      	cbz	r5, 800316a <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003160:	2008      	movs	r0, #8
 8003162:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003164:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003166:	4302      	orrs	r2, r0
 8003168:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800316a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800316c:	2a00      	cmp	r2, #0
 800316e:	d050      	beq.n	8003212 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003170:	0698      	lsls	r0, r3, #26
 8003172:	d504      	bpl.n	800317e <HAL_UART_IRQHandler+0x92>
 8003174:	068a      	lsls	r2, r1, #26
 8003176:	d502      	bpl.n	800317e <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8003178:	4620      	mov	r0, r4
 800317a:	f7ff ff80 	bl	800307e <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800317e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003180:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8003182:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003184:	d404      	bmi.n	8003190 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800318a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800318e:	d019      	beq.n	80031c4 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8003190:	f7ff fcd3 	bl	8002b3a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	0656      	lsls	r6, r2, #25
 800319a:	d50f      	bpl.n	80031bc <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800319c:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800319e:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a4:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80031a6:	b148      	cbz	r0, 80031bc <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <HAL_UART_IRQHandler+0x128>)
 80031aa:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ac:	f7fe fbc7 	bl	800193e <HAL_DMA_Abort_IT>
 80031b0:	b378      	cbz	r0, 8003212 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80031b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031ba:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80031bc:	4620      	mov	r0, r4
 80031be:	f7ff fd2f 	bl	8002c20 <HAL_UART_ErrorCallback>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80031c4:	f7ff fd2c 	bl	8002c20 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	66e5      	str	r5, [r4, #108]	; 0x6c
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80031cc:	02dd      	lsls	r5, r3, #11
 80031ce:	d50e      	bpl.n	80031ee <HAL_UART_IRQHandler+0x102>
 80031d0:	0246      	lsls	r6, r0, #9
 80031d2:	d50c      	bpl.n	80031ee <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80031d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031d8:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80031da:	2320      	movs	r3, #32
 80031dc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80031e0:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80031e2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80031e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80031ea:	f000 b815 	b.w	8003218 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031ee:	061d      	lsls	r5, r3, #24
 80031f0:	d506      	bpl.n	8003200 <HAL_UART_IRQHandler+0x114>
 80031f2:	0608      	lsls	r0, r1, #24
 80031f4:	d504      	bpl.n	8003200 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 80031f6:	4620      	mov	r0, r4
}
 80031f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 80031fc:	f7ff bf04 	b.w	8003008 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003200:	065a      	lsls	r2, r3, #25
 8003202:	d506      	bpl.n	8003212 <HAL_UART_IRQHandler+0x126>
 8003204:	064b      	lsls	r3, r1, #25
 8003206:	d504      	bpl.n	8003212 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8003208:	4620      	mov	r0, r4
}
 800320a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 800320e:	f7ff bf29 	b.w	8003064 <UART_EndTransmit_IT>
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	08002c23 	.word	0x08002c23

08003218 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003218:	4770      	bx	lr
	...

0800321c <uart_comms>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc1;


void uart_comms(){
 800321c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
	uart_command[uart_counter] = rx_buffer;
 8003220:	4cba      	ldr	r4, [pc, #744]	; (800350c <uart_comms+0x2f0>)
 8003222:	4dbb      	ldr	r5, [pc, #748]	; (8003510 <uart_comms+0x2f4>)
 8003224:	49bb      	ldr	r1, [pc, #748]	; (8003514 <uart_comms+0x2f8>)
 8003226:	7823      	ldrb	r3, [r4, #0]
 8003228:	682a      	ldr	r2, [r5, #0]
	rx_flag = 0;
 800322a:	48bb      	ldr	r0, [pc, #748]	; (8003518 <uart_comms+0x2fc>)
	uart_command[uart_counter] = rx_buffer;
 800322c:	7809      	ldrb	r1, [r1, #0]
	rx_flag = 0;
 800322e:	2600      	movs	r6, #0
 8003230:	7006      	strb	r6, [r0, #0]
	uart_command[uart_counter] = rx_buffer;
 8003232:	54d1      	strb	r1, [r2, r3]
	if(uart_command[0] == '$'){
 8003234:	682a      	ldr	r2, [r5, #0]
 8003236:	7813      	ldrb	r3, [r2, #0]
 8003238:	2b24      	cmp	r3, #36	; 0x24

	uart_counter += 1;
 800323a:	7823      	ldrb	r3, [r4, #0]
	if(uart_command[0] == '$'){
 800323c:	d005      	beq.n	800324a <uart_comms+0x2e>
				 }
				memset(uart_command,0x00, 40);
				memset(return_value,0x00, 50);
				uart_counter = 0;
		  }
		  else if(uart_counter > 39 ){
 800323e:	2b27      	cmp	r3, #39	; 0x27
			  uart_counter = 0;
 8003240:	bf84      	itt	hi
 8003242:	2300      	movhi	r3, #0
 8003244:	7023      	strbhi	r3, [r4, #0]
 8003246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uart_counter += 1;
 800324a:	3301      	adds	r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	7023      	strb	r3, [r4, #0]
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8003250:	7811      	ldrb	r1, [r2, #0]
 8003252:	2924      	cmp	r1, #36	; 0x24
 8003254:	d1f3      	bne.n	800323e <uart_comms+0x22>
 8003256:	18d1      	adds	r1, r2, r3
 8003258:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800325c:	280a      	cmp	r0, #10
 800325e:	d1ee      	bne.n	800323e <uart_comms+0x22>
 8003260:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 8003264:	290d      	cmp	r1, #13
 8003266:	d1ea      	bne.n	800323e <uart_comms+0x22>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d9ec      	bls.n	8003246 <uart_comms+0x2a>
		switch(uart_command[1]){
 800326c:	7853      	ldrb	r3, [r2, #1]
 800326e:	3b41      	subs	r3, #65	; 0x41
 8003270:	2b0a      	cmp	r3, #10
 8003272:	f200 81f5 	bhi.w	8003660 <uart_comms+0x444>
 8003276:	e8df f013 	tbh	[pc, r3, lsl #1]
 800327a:	01c8      	.short	0x01c8
 800327c:	018f01a9 	.word	0x018f01a9
 8003280:	0139016f 	.word	0x0139016f
 8003284:	00f60118 	.word	0x00f60118
 8003288:	00e300ed 	.word	0x00e300ed
 800328c:	000b00da 	.word	0x000b00da
					 memcpy(return_value, uart_command, 2);
 8003290:	4ea2      	ldr	r6, [pc, #648]	; (800351c <uart_comms+0x300>)
 8003292:	8812      	ldrh	r2, [r2, #0]
 8003294:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2,comma,1 );
 8003296:	4fa2      	ldr	r7, [pc, #648]	; (8003520 <uart_comms+0x304>)
					 memcpy(return_value, uart_command, 2);
 8003298:	801a      	strh	r2, [r3, #0]
					 memcpy(return_value+2,comma,1 );
 800329a:	6832      	ldr	r2, [r6, #0]
 800329c:	f897 9000 	ldrb.w	r9, [r7]
					 memcpy(return_value+3,current_rms,strlen(current_rms));
 80032a0:	4ba0      	ldr	r3, [pc, #640]	; (8003524 <uart_comms+0x308>)
					 memcpy(return_value+2,comma,1 );
 80032a2:	f882 9002 	strb.w	r9, [r2, #2]
					 memcpy(return_value+3,current_rms,strlen(current_rms));
 80032a6:	f8d3 8000 	ldr.w	r8, [r3]
 80032aa:	4640      	mov	r0, r8
 80032ac:	f7fc ff90 	bl	80001d0 <strlen>
 80032b0:	6833      	ldr	r3, [r6, #0]
 80032b2:	4602      	mov	r2, r0
 80032b4:	4641      	mov	r1, r8
 80032b6:	1cd8      	adds	r0, r3, #3
 80032b8:	f001 fa88 	bl	80047cc <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 80032bc:	f8d6 8000 	ldr.w	r8, [r6]
 80032c0:	4640      	mov	r0, r8
 80032c2:	f7fc ff85 	bl	80001d0 <strlen>
 80032c6:	f808 9000 	strb.w	r9, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 80032ca:	f8d6 8000 	ldr.w	r8, [r6]
 80032ce:	4640      	mov	r0, r8
 80032d0:	f7fc ff7e 	bl	80001d0 <strlen>
 80032d4:	4b94      	ldr	r3, [pc, #592]	; (8003528 <uart_comms+0x30c>)
 80032d6:	f8d3 9000 	ldr.w	r9, [r3]
 80032da:	4682      	mov	sl, r0
 80032dc:	4648      	mov	r0, r9
 80032de:	f7fc ff77 	bl	80001d0 <strlen>
 80032e2:	4649      	mov	r1, r9
 80032e4:	4602      	mov	r2, r0
 80032e6:	eb08 000a 	add.w	r0, r8, sl
 80032ea:	f001 fa6f 	bl	80047cc <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 80032ee:	f8d6 8000 	ldr.w	r8, [r6]
 80032f2:	4640      	mov	r0, r8
 80032f4:	f7fc ff6c 	bl	80001d0 <strlen>
 80032f8:	783b      	ldrb	r3, [r7, #0]
 80032fa:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 80032fe:	f8d6 8000 	ldr.w	r8, [r6]
 8003302:	4640      	mov	r0, r8
 8003304:	f7fc ff64 	bl	80001d0 <strlen>
 8003308:	4b88      	ldr	r3, [pc, #544]	; (800352c <uart_comms+0x310>)
 800330a:	f8d3 9000 	ldr.w	r9, [r3]
 800330e:	4682      	mov	sl, r0
 8003310:	4648      	mov	r0, r9
 8003312:	f7fc ff5d 	bl	80001d0 <strlen>
 8003316:	4649      	mov	r1, r9
 8003318:	4602      	mov	r2, r0
 800331a:	eb08 000a 	add.w	r0, r8, sl
 800331e:	f001 fa55 	bl	80047cc <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 8003322:	f8d6 8000 	ldr.w	r8, [r6]
 8003326:	4640      	mov	r0, r8
 8003328:	f7fc ff52 	bl	80001d0 <strlen>
 800332c:	783b      	ldrb	r3, [r7, #0]
 800332e:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 8003332:	f8d6 8000 	ldr.w	r8, [r6]
 8003336:	4640      	mov	r0, r8
 8003338:	f7fc ff4a 	bl	80001d0 <strlen>
 800333c:	4b7c      	ldr	r3, [pc, #496]	; (8003530 <uart_comms+0x314>)
 800333e:	f8d3 9000 	ldr.w	r9, [r3]
 8003342:	4682      	mov	sl, r0
 8003344:	4648      	mov	r0, r9
 8003346:	f7fc ff43 	bl	80001d0 <strlen>
 800334a:	4649      	mov	r1, r9
 800334c:	4602      	mov	r2, r0
 800334e:	eb08 000a 	add.w	r0, r8, sl
 8003352:	f001 fa3b 	bl	80047cc <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 8003356:	f8d6 8000 	ldr.w	r8, [r6]
 800335a:	4640      	mov	r0, r8
 800335c:	f7fc ff38 	bl	80001d0 <strlen>
 8003360:	783b      	ldrb	r3, [r7, #0]
 8003362:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8003366:	f8d6 8000 	ldr.w	r8, [r6]
 800336a:	4640      	mov	r0, r8
 800336c:	f7fc ff30 	bl	80001d0 <strlen>
 8003370:	4b70      	ldr	r3, [pc, #448]	; (8003534 <uart_comms+0x318>)
 8003372:	f8d3 9000 	ldr.w	r9, [r3]
 8003376:	4682      	mov	sl, r0
 8003378:	4648      	mov	r0, r9
 800337a:	f7fc ff29 	bl	80001d0 <strlen>
 800337e:	4649      	mov	r1, r9
 8003380:	4602      	mov	r2, r0
 8003382:	eb08 000a 	add.w	r0, r8, sl
 8003386:	f001 fa21 	bl	80047cc <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 800338a:	f8d6 8000 	ldr.w	r8, [r6]
 800338e:	4640      	mov	r0, r8
 8003390:	f7fc ff1e 	bl	80001d0 <strlen>
 8003394:	783b      	ldrb	r3, [r7, #0]
 8003396:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 800339a:	f8d6 8000 	ldr.w	r8, [r6]
 800339e:	4640      	mov	r0, r8
 80033a0:	f7fc ff16 	bl	80001d0 <strlen>
 80033a4:	4b64      	ldr	r3, [pc, #400]	; (8003538 <uart_comms+0x31c>)
 80033a6:	f8d3 9000 	ldr.w	r9, [r3]
 80033aa:	4682      	mov	sl, r0
 80033ac:	4648      	mov	r0, r9
 80033ae:	f7fc ff0f 	bl	80001d0 <strlen>
 80033b2:	4649      	mov	r1, r9
 80033b4:	4602      	mov	r2, r0
 80033b6:	eb08 000a 	add.w	r0, r8, sl
 80033ba:	f001 fa07 	bl	80047cc <memcpy>
					 memcpy(return_value+strlen((char*)return_value),comma,1 );
 80033be:	f8d6 8000 	ldr.w	r8, [r6]
 80033c2:	4640      	mov	r0, r8
 80033c4:	f7fc ff04 	bl	80001d0 <strlen>
 80033c8:	783b      	ldrb	r3, [r7, #0]
 80033ca:	f808 3000 	strb.w	r3, [r8, r0]
					 memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 80033ce:	6837      	ldr	r7, [r6, #0]
 80033d0:	4638      	mov	r0, r7
 80033d2:	f7fc fefd 	bl	80001d0 <strlen>
 80033d6:	4b59      	ldr	r3, [pc, #356]	; (800353c <uart_comms+0x320>)
 80033d8:	f8d3 8000 	ldr.w	r8, [r3]
 80033dc:	4681      	mov	r9, r0
 80033de:	4640      	mov	r0, r8
 80033e0:	f7fc fef6 	bl	80001d0 <strlen>
 80033e4:	4641      	mov	r1, r8
 80033e6:	4602      	mov	r2, r0
 80033e8:	eb07 0009 	add.w	r0, r7, r9
 80033ec:	f001 f9ee 	bl	80047cc <memcpy>
					 memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 80033f0:	6837      	ldr	r7, [r6, #0]
 80033f2:	4638      	mov	r0, r7
 80033f4:	f7fc feec 	bl	80001d0 <strlen>
 80033f8:	4b51      	ldr	r3, [pc, #324]	; (8003540 <uart_comms+0x324>)
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	523b      	strh	r3, [r7, r0]
					 HAL_UART_Transmit(&huart1,return_value, (uint16_t)strlen((char*)return_value),100);
 80033fe:	6837      	ldr	r7, [r6, #0]
 8003400:	4638      	mov	r0, r7
 8003402:	f7fc fee5 	bl	80001d0 <strlen>
 8003406:	4639      	mov	r1, r7
 8003408:	b282      	uxth	r2, r0
 800340a:	2364      	movs	r3, #100	; 0x64
 800340c:	484d      	ldr	r0, [pc, #308]	; (8003544 <uart_comms+0x328>)
 800340e:	f7ff fd3e 	bl	8002e8e <HAL_UART_Transmit>
				memset(uart_command,0x00, 40);
 8003412:	2228      	movs	r2, #40	; 0x28
 8003414:	2100      	movs	r1, #0
 8003416:	6828      	ldr	r0, [r5, #0]
 8003418:	f001 f9e3 	bl	80047e2 <memset>
				memset(return_value,0x00, 50);
 800341c:	6830      	ldr	r0, [r6, #0]
 800341e:	2232      	movs	r2, #50	; 0x32
 8003420:	2100      	movs	r1, #0
 8003422:	f001 f9de 	bl	80047e2 <memset>
				uart_counter = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	7023      	strb	r3, [r4, #0]
 800342a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value), 1000);
 800342e:	4e3b      	ldr	r6, [pc, #236]	; (800351c <uart_comms+0x300>)
 8003430:	4844      	ldr	r0, [pc, #272]	; (8003544 <uart_comms+0x328>)
 8003432:	6831      	ldr	r1, [r6, #0]
 8003434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003438:	2204      	movs	r2, #4
 800343a:	f7ff fd28 	bl	8002e8e <HAL_UART_Transmit>
					 break;
 800343e:	e7e8      	b.n	8003412 <uart_comms+0x1f6>
					HAL_UART_Transmit(&huart1,(uint8_t*)time, sizeof(time), 1000);
 8003440:	4b41      	ldr	r3, [pc, #260]	; (8003548 <uart_comms+0x32c>)
 8003442:	4840      	ldr	r0, [pc, #256]	; (8003544 <uart_comms+0x328>)
 8003444:	6819      	ldr	r1, [r3, #0]
 8003446:	4e35      	ldr	r6, [pc, #212]	; (800351c <uart_comms+0x300>)
 8003448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800344c:	2204      	movs	r2, #4
 800344e:	f7ff fd1e 	bl	8002e8e <HAL_UART_Transmit>
					 break;
 8003452:	e7de      	b.n	8003412 <uart_comms+0x1f6>
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value)+1, 1000);
 8003454:	4e31      	ldr	r6, [pc, #196]	; (800351c <uart_comms+0x300>)
 8003456:	483b      	ldr	r0, [pc, #236]	; (8003544 <uart_comms+0x328>)
 8003458:	6831      	ldr	r1, [r6, #0]
 800345a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800345e:	2205      	movs	r2, #5
 8003460:	f7ff fd15 	bl	8002e8e <HAL_UART_Transmit>
					 break;
 8003464:	e7d5      	b.n	8003412 <uart_comms+0x1f6>
					 memcpy(return_value, uart_command, 2);
 8003466:	4e2d      	ldr	r6, [pc, #180]	; (800351c <uart_comms+0x300>)
 8003468:	8811      	ldrh	r1, [r2, #0]
 800346a:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2, comma, 1);
 800346c:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <uart_comms+0x304>)
					 memcpy(return_value, uart_command, 2);
 800346e:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2, comma, 1);
 8003470:	6833      	ldr	r3, [r6, #0]
 8003472:	7812      	ldrb	r2, [r2, #0]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8003474:	4f35      	ldr	r7, [pc, #212]	; (800354c <uart_comms+0x330>)
					 memcpy(return_value+2, comma, 1);
 8003476:	709a      	strb	r2, [r3, #2]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8003478:	f897 8000 	ldrb.w	r8, [r7]
 800347c:	6830      	ldr	r0, [r6, #0]
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <uart_comms+0x334>)
 8003480:	4642      	mov	r2, r8
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	3003      	adds	r0, #3
 8003486:	f001 f9a1 	bl	80047cc <memcpy>
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 800348a:	6833      	ldr	r3, [r6, #0]
 800348c:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <uart_comms+0x324>)
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 800348e:	482d      	ldr	r0, [pc, #180]	; (8003544 <uart_comms+0x328>)
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 8003490:	8811      	ldrh	r1, [r2, #0]
 8003492:	eb03 0208 	add.w	r2, r3, r8
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 8003496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 800349a:	f8a2 1003 	strh.w	r1, [r2, #3]
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 800349e:	783a      	ldrb	r2, [r7, #0]
 80034a0:	6831      	ldr	r1, [r6, #0]
 80034a2:	3205      	adds	r2, #5
 80034a4:	f7ff fcf3 	bl	8002e8e <HAL_UART_Transmit>
					 break;
 80034a8:	e7b3      	b.n	8003412 <uart_comms+0x1f6>
					 memcpy(return_value, uart_command,2);
 80034aa:	4e1c      	ldr	r6, [pc, #112]	; (800351c <uart_comms+0x300>)
 80034ac:	8811      	ldrh	r1, [r2, #0]
 80034ae:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2,endSimbol, 2);
 80034b0:	4a23      	ldr	r2, [pc, #140]	; (8003540 <uart_comms+0x324>)
					 memcpy(return_value, uart_command,2);
 80034b2:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2,endSimbol, 2);
 80034b4:	6833      	ldr	r3, [r6, #0]
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	805a      	strh	r2, [r3, #2]
					 memset(set_temp, 0x00, 4);
 80034ba:	4f25      	ldr	r7, [pc, #148]	; (8003550 <uart_comms+0x334>)
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, sizeof(return_value), 1000);
 80034bc:	6831      	ldr	r1, [r6, #0]
 80034be:	4821      	ldr	r0, [pc, #132]	; (8003544 <uart_comms+0x328>)
 80034c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034c4:	2204      	movs	r2, #4
 80034c6:	f7ff fce2 	bl	8002e8e <HAL_UART_Transmit>
					 sizeOfTemp = uart_counter - 5;
 80034ca:	7823      	ldrb	r3, [r4, #0]
					 memset(set_temp, 0x00, 4);
 80034cc:	6839      	ldr	r1, [r7, #0]
					 sizeOfTemp = uart_counter - 5;
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <uart_comms+0x330>)
 80034d0:	3b05      	subs	r3, #5
					 memset(set_temp, 0x00, 4);
 80034d2:	2000      	movs	r0, #0
					 sizeOfTemp = uart_counter - 5;
 80034d4:	7013      	strb	r3, [r2, #0]
					 memset(set_temp, 0x00, 4);
 80034d6:	6008      	str	r0, [r1, #0]
					 memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 80034d8:	6829      	ldr	r1, [r5, #0]
 80034da:	7812      	ldrb	r2, [r2, #0]
 80034dc:	6838      	ldr	r0, [r7, #0]
 80034de:	3103      	adds	r1, #3
 80034e0:	f001 f974 	bl	80047cc <memcpy>
					 segment_val =set_temp;
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <uart_comms+0x338>)
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	601a      	str	r2, [r3, #0]
					break;
 80034ea:	e792      	b.n	8003412 <uart_comms+0x1f6>
					 memcpy(return_value, uart_command, 2);
 80034ec:	4e0b      	ldr	r6, [pc, #44]	; (800351c <uart_comms+0x300>)
 80034ee:	8811      	ldrh	r1, [r2, #0]
 80034f0:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2, endSimbol,2 );
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <uart_comms+0x324>)
					 memcpy(return_value, uart_command, 2);
 80034f4:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2, endSimbol,2 );
 80034f6:	6833      	ldr	r3, [r6, #0]
 80034f8:	8812      	ldrh	r2, [r2, #0]
 80034fa:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 80034fc:	6831      	ldr	r1, [r6, #0]
 80034fe:	4811      	ldr	r0, [pc, #68]	; (8003544 <uart_comms+0x328>)
 8003500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003504:	2204      	movs	r2, #4
 8003506:	f7ff fcc2 	bl	8002e8e <HAL_UART_Transmit>
 800350a:	e782      	b.n	8003412 <uart_comms+0x1f6>
 800350c:	20000120 	.word	0x20000120
 8003510:	2000011c 	.word	0x2000011c
 8003514:	200002d0 	.word	0x200002d0
 8003518:	20000100 	.word	0x20000100
 800351c:	200000fc 	.word	0x200000fc
 8003520:	20000004 	.word	0x20000004
 8003524:	200000e8 	.word	0x200000e8
 8003528:	2000012c 	.word	0x2000012c
 800352c:	200000dc 	.word	0x200000dc
 8003530:	200000ec 	.word	0x200000ec
 8003534:	20000118 	.word	0x20000118
 8003538:	200000f0 	.word	0x200000f0
 800353c:	20000124 	.word	0x20000124
 8003540:	20000008 	.word	0x20000008
 8003544:	200001d8 	.word	0x200001d8
 8003548:	20000020 	.word	0x20000020
 800354c:	2000010c 	.word	0x2000010c
 8003550:	20000108 	.word	0x20000108
 8003554:	20000104 	.word	0x20000104
					 memcpy(return_value, uart_command, 2);
 8003558:	4e42      	ldr	r6, [pc, #264]	; (8003664 <uart_comms+0x448>)
 800355a:	8811      	ldrh	r1, [r2, #0]
 800355c:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2, endSimbol,2 );
 800355e:	4a42      	ldr	r2, [pc, #264]	; (8003668 <uart_comms+0x44c>)
					 memcpy(return_value, uart_command, 2);
 8003560:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2, endSimbol,2 );
 8003562:	6833      	ldr	r3, [r6, #0]
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 8003568:	6831      	ldr	r1, [r6, #0]
 800356a:	4840      	ldr	r0, [pc, #256]	; (800366c <uart_comms+0x450>)
 800356c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003570:	2204      	movs	r2, #4
 8003572:	f7ff fc8c 	bl	8002e8e <HAL_UART_Transmit>
					 if(auto_heating == 0){	// if auto heating off
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <uart_comms+0x454>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f47f af49 	bne.w	8003412 <uart_comms+0x1f6>
						 if(uart_command[2]=='0'){
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	789b      	ldrb	r3, [r3, #2]
 8003584:	3b30      	subs	r3, #48	; 0x30
 8003586:	2b01      	cmp	r3, #1
 8003588:	f63f af43 	bhi.w	8003412 <uart_comms+0x1f6>
							 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);	// Heater
 800358c:	2201      	movs	r2, #1
 800358e:	4611      	mov	r1, r2
 8003590:	4838      	ldr	r0, [pc, #224]	; (8003674 <uart_comms+0x458>)
 8003592:	f7fe fafb 	bl	8001b8c <HAL_GPIO_WritePin>
 8003596:	e73c      	b.n	8003412 <uart_comms+0x1f6>
					 memcpy(return_value, uart_command, 2);
 8003598:	4e32      	ldr	r6, [pc, #200]	; (8003664 <uart_comms+0x448>)
 800359a:	8811      	ldrh	r1, [r2, #0]
 800359c:	6833      	ldr	r3, [r6, #0]
					 memcpy(return_value+2, endSimbol,2 );
 800359e:	4a32      	ldr	r2, [pc, #200]	; (8003668 <uart_comms+0x44c>)
					 memcpy(return_value, uart_command, 2);
 80035a0:	8019      	strh	r1, [r3, #0]
					 memcpy(return_value+2, endSimbol,2 );
 80035a2:	6833      	ldr	r3, [r6, #0]
 80035a4:	8812      	ldrh	r2, [r2, #0]
 80035a6:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 80035a8:	6831      	ldr	r1, [r6, #0]
 80035aa:	4830      	ldr	r0, [pc, #192]	; (800366c <uart_comms+0x450>)
 80035ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b0:	2204      	movs	r2, #4
 80035b2:	f7ff fc6c 	bl	8002e8e <HAL_UART_Transmit>
					 if(uart_command[2]=='0'){
 80035b6:	682b      	ldr	r3, [r5, #0]
 80035b8:	789b      	ldrb	r3, [r3, #2]
 80035ba:	2b30      	cmp	r3, #48	; 0x30
 80035bc:	d043      	beq.n	8003646 <uart_comms+0x42a>
					 else if(uart_command[2] == '1'){
 80035be:	2b31      	cmp	r3, #49	; 0x31
 80035c0:	f47f af27 	bne.w	8003412 <uart_comms+0x1f6>
						 heater_state = heater_ON;	// auto heating on
 80035c4:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <uart_comms+0x45c>)
 80035c6:	4a2d      	ldr	r2, [pc, #180]	; (800367c <uart_comms+0x460>)
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e722      	b.n	8003412 <uart_comms+0x1f6>
					memcpy(return_value, uart_command, 2);
 80035cc:	4e25      	ldr	r6, [pc, #148]	; (8003664 <uart_comms+0x448>)
 80035ce:	8811      	ldrh	r1, [r2, #0]
 80035d0:	6833      	ldr	r3, [r6, #0]
					memcpy(return_value+2, endSimbol,2 );
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <uart_comms+0x44c>)
					memcpy(return_value, uart_command, 2);
 80035d4:	8019      	strh	r1, [r3, #0]
					memcpy(return_value+2, endSimbol,2 );
 80035d6:	6833      	ldr	r3, [r6, #0]
 80035d8:	8812      	ldrh	r2, [r2, #0]
 80035da:	805a      	strh	r2, [r3, #2]
					HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 80035dc:	6831      	ldr	r1, [r6, #0]
 80035de:	4823      	ldr	r0, [pc, #140]	; (800366c <uart_comms+0x450>)
 80035e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e4:	2204      	movs	r2, #4
 80035e6:	f7ff fc52 	bl	8002e8e <HAL_UART_Transmit>
					 if(uart_command[2]=='0'){
 80035ea:	682b      	ldr	r3, [r5, #0]
 80035ec:	789b      	ldrb	r3, [r3, #2]
 80035ee:	2b30      	cmp	r3, #48	; 0x30
 80035f0:	d02d      	beq.n	800364e <uart_comms+0x432>
					 else if(uart_command[2] == '1'){
 80035f2:	2b31      	cmp	r3, #49	; 0x31
 80035f4:	f47f af0d 	bne.w	8003412 <uart_comms+0x1f6>
						 valve_state = valve_OPEN;
 80035f8:	4b21      	ldr	r3, [pc, #132]	; (8003680 <uart_comms+0x464>)
 80035fa:	4a22      	ldr	r2, [pc, #136]	; (8003684 <uart_comms+0x468>)
 80035fc:	601a      	str	r2, [r3, #0]
						 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);		// Valve
 80035fe:	481d      	ldr	r0, [pc, #116]	; (8003674 <uart_comms+0x458>)
 8003600:	2200      	movs	r2, #0
 8003602:	2102      	movs	r1, #2
 8003604:	f7fe fac2 	bl	8001b8c <HAL_GPIO_WritePin>
 8003608:	e703      	b.n	8003412 <uart_comms+0x1f6>
				memcpy(studentnumber, uart_command, 2 );
 800360a:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <uart_comms+0x46c>)
 800360c:	8810      	ldrh	r0, [r2, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
				memcpy(studentnumber+2,comma,1);
 8003610:	491e      	ldr	r1, [pc, #120]	; (800368c <uart_comms+0x470>)
				memcpy(studentnumber, uart_command, 2 );
 8003612:	8010      	strh	r0, [r2, #0]
				memcpy(studentnumber+2,comma,1);
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	7809      	ldrb	r1, [r1, #0]
 8003618:	7091      	strb	r1, [r2, #2]
				memcpy(studentnumber+3 ,studentnumber1,8 );
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <uart_comms+0x474>)
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	6811      	ldr	r1, [r2, #0]
 8003620:	6856      	ldr	r6, [r2, #4]
 8003622:	f8c0 1003 	str.w	r1, [r0, #3]
				memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8003626:	4a10      	ldr	r2, [pc, #64]	; (8003668 <uart_comms+0x44c>)
				memcpy(studentnumber+3 ,studentnumber1,8 );
 8003628:	f8c0 6007 	str.w	r6, [r0, #7]
				memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	6852      	ldr	r2, [r2, #4]
 8003632:	f8c1 200f 	str.w	r2, [r1, #15]
 8003636:	f8c1 300b 	str.w	r3, [r1, #11]
				HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 800363a:	220d      	movs	r2, #13
 800363c:	480b      	ldr	r0, [pc, #44]	; (800366c <uart_comms+0x450>)
 800363e:	4e09      	ldr	r6, [pc, #36]	; (8003664 <uart_comms+0x448>)
 8003640:	f7ff fa88 	bl	8002b54 <HAL_UART_Transmit_IT>
				break;
 8003644:	e6e5      	b.n	8003412 <uart_comms+0x1f6>
						heater_state = heater_OFF;	// auto heating off
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <uart_comms+0x45c>)
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <uart_comms+0x478>)
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e6e1      	b.n	8003412 <uart_comms+0x1f6>
						valve_state=valve_CLOSE;
 800364e:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <uart_comms+0x464>)
 8003650:	4a11      	ldr	r2, [pc, #68]	; (8003698 <uart_comms+0x47c>)
 8003652:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);		// Valve
 8003654:	4807      	ldr	r0, [pc, #28]	; (8003674 <uart_comms+0x458>)
 8003656:	2201      	movs	r2, #1
 8003658:	2102      	movs	r1, #2
 800365a:	f7fe fa97 	bl	8001b8c <HAL_GPIO_WritePin>
 800365e:	e6d8      	b.n	8003412 <uart_comms+0x1f6>
 8003660:	4e00      	ldr	r6, [pc, #0]	; (8003664 <uart_comms+0x448>)
 8003662:	e6d6      	b.n	8003412 <uart_comms+0x1f6>
 8003664:	200000fc 	.word	0x200000fc
 8003668:	20000008 	.word	0x20000008
 800366c:	200001d8 	.word	0x200001d8
 8003670:	200000e0 	.word	0x200000e0
 8003674:	48000800 	.word	0x48000800
 8003678:	200000f0 	.word	0x200000f0
 800367c:	20000014 	.word	0x20000014
 8003680:	20000124 	.word	0x20000124
 8003684:	2000002c 	.word	0x2000002c
 8003688:	200002cc 	.word	0x200002cc
 800368c:	20000004 	.word	0x20000004
 8003690:	20000018 	.word	0x20000018
 8003694:	20000010 	.word	0x20000010
 8003698:	20000024 	.word	0x20000024

0800369c <HAL_UART_RxCpltCallback>:
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800369c:	b410      	push	{r4}
		rx_flag = 1;
 800369e:	4c05      	ldr	r4, [pc, #20]	; (80036b4 <HAL_UART_RxCpltCallback+0x18>)
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80036a0:	4905      	ldr	r1, [pc, #20]	; (80036b8 <HAL_UART_RxCpltCallback+0x1c>)
 80036a2:	4806      	ldr	r0, [pc, #24]	; (80036bc <HAL_UART_RxCpltCallback+0x20>)
		rx_flag = 1;
 80036a4:	2301      	movs	r3, #1
 80036a6:	7023      	strb	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80036a8:	461a      	mov	r2, r3

}
 80036aa:	f85d 4b04 	ldr.w	r4, [sp], #4
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80036ae:	f7ff ba72 	b.w	8002b96 <HAL_UART_Receive_IT>
 80036b2:	bf00      	nop
 80036b4:	20000100 	.word	0x20000100
 80036b8:	200002d0 	.word	0x200002d0
 80036bc:	200001d8 	.word	0x200001d8

080036c0 <init_peripherals>:

void init_peripherals(){
 80036c0:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 80036c2:	2201      	movs	r2, #1
 80036c4:	2120      	movs	r1, #32
 80036c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ca:	f7fe fa5f 	bl	8001b8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 80036ce:	2201      	movs	r2, #1
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d6:	f7fe fa59 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80036da:	4c4e      	ldr	r4, [pc, #312]	; (8003814 <init_peripherals+0x154>)
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 80036dc:	4d4e      	ldr	r5, [pc, #312]	; (8003818 <init_peripherals+0x158>)

	  //Valve
	  valve_state = valve_CLOSE;

	HAL_TIM_Base_Start_IT(&htim2);
	HAL_TIM_Base_Start_IT(&htim3);
 80036de:	4e4f      	ldr	r6, [pc, #316]	; (800381c <init_peripherals+0x15c>)
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 80036e0:	2201      	movs	r2, #1
 80036e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ea:	f7fe fa4f 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80036ee:	2201      	movs	r2, #1
 80036f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f8:	f7fe fa48 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80036fc:	4620      	mov	r0, r4
 80036fe:	2201      	movs	r2, #1
 8003700:	2108      	movs	r1, #8
 8003702:	f7fe fa43 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003706:	4620      	mov	r0, r4
 8003708:	2201      	movs	r2, #1
 800370a:	2110      	movs	r1, #16
 800370c:	f7fe fa3e 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003710:	4620      	mov	r0, r4
 8003712:	2201      	movs	r2, #1
 8003714:	2120      	movs	r1, #32
 8003716:	f7fe fa39 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 800371a:	4620      	mov	r0, r4
 800371c:	2201      	movs	r2, #1
 800371e:	2140      	movs	r1, #64	; 0x40
 8003720:	f7fe fa34 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003724:	4620      	mov	r0, r4
 8003726:	2201      	movs	r2, #1
 8003728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800372c:	f7fe fa2e 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 8003730:	4628      	mov	r0, r5
 8003732:	2201      	movs	r2, #1
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	f7fe fa29 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);		// Heater
 800373a:	2201      	movs	r2, #1
 800373c:	4628      	mov	r0, r5
 800373e:	4611      	mov	r1, r2
 8003740:	f7fe fa24 	bl	8001b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);		// Valve
 8003744:	2201      	movs	r2, #1
 8003746:	4628      	mov	r0, r5
 8003748:	2102      	movs	r1, #2
 800374a:	f7fe fa1f 	bl	8001b8c <HAL_GPIO_WritePin>
	  studentnumber = (uint8_t*)malloc(15);
 800374e:	2101      	movs	r1, #1
 8003750:	200f      	movs	r0, #15
 8003752:	f001 f807 	bl	8004764 <calloc>
 8003756:	4b32      	ldr	r3, [pc, #200]	; (8003820 <init_peripherals+0x160>)
	  return_value = (uint8_t*)malloc(50);
 8003758:	2101      	movs	r1, #1
	  studentnumber = (uint8_t*)malloc(15);
 800375a:	6018      	str	r0, [r3, #0]
	  return_value = (uint8_t*)malloc(50);
 800375c:	2032      	movs	r0, #50	; 0x32
 800375e:	f001 f801 	bl	8004764 <calloc>
 8003762:	4b30      	ldr	r3, [pc, #192]	; (8003824 <init_peripherals+0x164>)
	  uart_command = (uint8_t*)malloc(40);
 8003764:	2101      	movs	r1, #1
	  return_value = (uint8_t*)malloc(50);
 8003766:	6018      	str	r0, [r3, #0]
	  uart_command = (uint8_t*)malloc(40);
 8003768:	2028      	movs	r0, #40	; 0x28
 800376a:	f000 fffb 	bl	8004764 <calloc>
 800376e:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <init_peripherals+0x168>)
 8003770:	6018      	str	r0, [r3, #0]
	  set_temp = (uint8_t*)malloc(3);
 8003772:	2003      	movs	r0, #3
 8003774:	f001 f822 	bl	80047bc <malloc>
 8003778:	492c      	ldr	r1, [pc, #176]	; (800382c <init_peripherals+0x16c>)
	  segment_val =set_temp;
 800377a:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <init_peripherals+0x170>)
	  set_temp = (uint8_t*)malloc(3);
 800377c:	6008      	str	r0, [r1, #0]
 800377e:	4603      	mov	r3, r0
	  memset(set_temp, 0x00, 4);
 8003780:	2400      	movs	r4, #0
 8003782:	601c      	str	r4, [r3, #0]
	  ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8003784:	201c      	movs	r0, #28
	  segment_val =set_temp;
 8003786:	6013      	str	r3, [r2, #0]
	  ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8003788:	f001 f818 	bl	80047bc <malloc>
 800378c:	4603      	mov	r3, r0
 800378e:	4a29      	ldr	r2, [pc, #164]	; (8003834 <init_peripherals+0x174>)
	  memset(ADC1_buffer, 0x00, 7);
 8003790:	6004      	str	r4, [r0, #0]
	  voltage_rms =(char*)malloc(3*sizeof(char));
 8003792:	2101      	movs	r1, #1
	  memset(ADC1_buffer, 0x00, 7);
 8003794:	f8c3 4003 	str.w	r4, [r3, #3]
	  voltage_rms =(char*)malloc(3*sizeof(char));
 8003798:	2003      	movs	r0, #3
	  ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 800379a:	6013      	str	r3, [r2, #0]
	  voltage_rms =(char*)malloc(3*sizeof(char));
 800379c:	f000 ffe2 	bl	8004764 <calloc>
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <init_peripherals+0x178>)
	  heater_state = heater_OFF;
 80037a2:	4c26      	ldr	r4, [pc, #152]	; (800383c <init_peripherals+0x17c>)
	  voltage_rms =(char*)malloc(3*sizeof(char));
 80037a4:	6018      	str	r0, [r3, #0]
	  current_rms =(char*)malloc(4*sizeof(char));
 80037a6:	2101      	movs	r1, #1
 80037a8:	2004      	movs	r0, #4
 80037aa:	f000 ffdb 	bl	8004764 <calloc>
 80037ae:	4b24      	ldr	r3, [pc, #144]	; (8003840 <init_peripherals+0x180>)
	  total_water =(char*)malloc(4*sizeof(char));
 80037b0:	2101      	movs	r1, #1
	  current_rms =(char*)malloc(4*sizeof(char));
 80037b2:	6018      	str	r0, [r3, #0]
	  total_water =(char*)malloc(4*sizeof(char));
 80037b4:	2004      	movs	r0, #4
 80037b6:	f000 ffd5 	bl	8004764 <calloc>
	  sprintf(total_water,"%lu", water_acc);
 80037ba:	4a22      	ldr	r2, [pc, #136]	; (8003844 <init_peripherals+0x184>)
	  total_water =(char*)malloc(4*sizeof(char));
 80037bc:	4b22      	ldr	r3, [pc, #136]	; (8003848 <init_peripherals+0x188>)
	  sprintf(total_water,"%lu", water_acc);
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	4922      	ldr	r1, [pc, #136]	; (800384c <init_peripherals+0x18c>)
	  total_water =(char*)malloc(4*sizeof(char));
 80037c2:	6018      	str	r0, [r3, #0]
	  sprintf(total_water,"%lu", water_acc);
 80037c4:	f001 f8e0 	bl	8004988 <siprintf>
	  voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80037c8:	2010      	movs	r0, #16
 80037ca:	f000 fff7 	bl	80047bc <malloc>
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <init_peripherals+0x190>)
 80037d0:	6018      	str	r0, [r3, #0]
	  current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80037d2:	2010      	movs	r0, #16
 80037d4:	f000 fff2 	bl	80047bc <malloc>
 80037d8:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <init_peripherals+0x194>)
 80037da:	6018      	str	r0, [r3, #0]
	  ambient_temp = (char*)malloc(3*sizeof(char));
 80037dc:	2003      	movs	r0, #3
 80037de:	f000 ffed 	bl	80047bc <malloc>
 80037e2:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <init_peripherals+0x198>)
 80037e4:	6018      	str	r0, [r3, #0]
	  geyser_temp = (char*)malloc(3*sizeof(char));
 80037e6:	2003      	movs	r0, #3
 80037e8:	f000 ffe8 	bl	80047bc <malloc>
 80037ec:	4a1b      	ldr	r2, [pc, #108]	; (800385c <init_peripherals+0x19c>)
	  heater_state = heater_OFF;
 80037ee:	491c      	ldr	r1, [pc, #112]	; (8003860 <init_peripherals+0x1a0>)
	  valve_state = valve_CLOSE;
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <init_peripherals+0x1a4>)
	  geyser_temp = (char*)malloc(3*sizeof(char));
 80037f2:	6010      	str	r0, [r2, #0]
	  valve_state = valve_CLOSE;
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <init_peripherals+0x1a8>)
	HAL_TIM_Base_Start_IT(&htim2);
 80037f6:	481d      	ldr	r0, [pc, #116]	; (800386c <init_peripherals+0x1ac>)
	  heater_state = heater_OFF;
 80037f8:	600c      	str	r4, [r1, #0]
	  valve_state = valve_CLOSE;
 80037fa:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80037fc:	f7fe fe20 	bl	8002440 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8003800:	4630      	mov	r0, r6
 8003802:	f7fe fe1d 	bl	8002440 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,1);			// p696 on HAL & Low level drivers
 8003806:	4630      	mov	r0, r6
 8003808:	2101      	movs	r1, #1

//	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);

}
 800380a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_IC_Start_IT(&htim3,1);			// p696 on HAL & Low level drivers
 800380e:	f7ff b943 	b.w	8002a98 <HAL_TIM_IC_Start_IT>
 8003812:	bf00      	nop
 8003814:	48000400 	.word	0x48000400
 8003818:	48000800 	.word	0x48000800
 800381c:	20000144 	.word	0x20000144
 8003820:	200002cc 	.word	0x200002cc
 8003824:	200000fc 	.word	0x200000fc
 8003828:	2000011c 	.word	0x2000011c
 800382c:	20000108 	.word	0x20000108
 8003830:	20000104 	.word	0x20000104
 8003834:	200000b8 	.word	0x200000b8
 8003838:	2000012c 	.word	0x2000012c
 800383c:	20000010 	.word	0x20000010
 8003840:	200000e8 	.word	0x200000e8
 8003844:	20000130 	.word	0x20000130
 8003848:	20000118 	.word	0x20000118
 800384c:	080052b0 	.word	0x080052b0
 8003850:	20000128 	.word	0x20000128
 8003854:	200000e4 	.word	0x200000e4
 8003858:	200000dc 	.word	0x200000dc
 800385c:	200000ec 	.word	0x200000ec
 8003860:	200000f0 	.word	0x200000f0
 8003864:	20000124 	.word	0x20000124
 8003868:	20000024 	.word	0x20000024
 800386c:	2000028c 	.word	0x2000028c

08003870 <adc_comms>:

void adc_comms(){


	raw_ambient_temp = ADC1_buffer[3];
 8003870:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <adc_comms+0x1d0>)
		 raw_geyser_temp = ADC1_buffer[4];
	 adc_raw_voltage =  ADC1_buffer[0];
	 adc_raw_current =	ADC1_buffer[1];
 8003872:	4a74      	ldr	r2, [pc, #464]	; (8003a44 <adc_comms+0x1d4>)
	raw_ambient_temp = ADC1_buffer[3];
 8003874:	681b      	ldr	r3, [r3, #0]
	 adc_raw_voltage =  ADC1_buffer[0];
 8003876:	4974      	ldr	r1, [pc, #464]	; (8003a48 <adc_comms+0x1d8>)
void adc_comms(){
 8003878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		 raw_geyser_temp = ADC1_buffer[4];
 800387c:	4c73      	ldr	r4, [pc, #460]	; (8003a4c <adc_comms+0x1dc>)
	raw_ambient_temp = ADC1_buffer[3];
 800387e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8003a74 <adc_comms+0x204>
 8003882:	f8d3 b00c 	ldr.w	fp, [r3, #12]
		 raw_geyser_temp = ADC1_buffer[4];
 8003886:	f8d3 9010 	ldr.w	r9, [r3, #16]
	raw_ambient_temp = ADC1_buffer[3];
 800388a:	f8c8 b000 	str.w	fp, [r8]
		 raw_geyser_temp = ADC1_buffer[4];
 800388e:	f8c4 9000 	str.w	r9, [r4]
	 adc_raw_voltage =  ADC1_buffer[0];
 8003892:	6818      	ldr	r0, [r3, #0]
	 adc_raw_current =	ADC1_buffer[1];
 8003894:	685e      	ldr	r6, [r3, #4]
 8003896:	6016      	str	r6, [r2, #0]
void adc_comms(){
 8003898:	b085      	sub	sp, #20
	 adc_raw_voltage =  ADC1_buffer[0];
 800389a:	6008      	str	r0, [r1, #0]


	//Converting Voltage
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202)/0.008629,2))+adc_buffer_voltage;
 800389c:	f7fc fe32 	bl	8000504 <__aeabi_ui2d>
 80038a0:	a35f      	add	r3, pc, #380	; (adr r3, 8003a20 <adc_comms+0x1b0>)
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f7fc fcef 	bl	8000288 <__aeabi_dsub>
 80038aa:	a35f      	add	r3, pc, #380	; (adr r3, 8003a28 <adc_comms+0x1b8>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fc fe9e 	bl	80005f0 <__aeabi_dmul>
 80038b4:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8003a78 <adc_comms+0x208>

	//Converting Current
	adc_buffer_current = (pow((adc_raw_current-2072.202)/0.14603,2))+adc_buffer_current;
 80038b8:	4d65      	ldr	r5, [pc, #404]	; (8003a50 <adc_comms+0x1e0>)
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202)/0.008629,2))+adc_buffer_voltage;
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	e9da 0100 	ldrd	r0, r1, [sl]
 80038c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038c6:	f7fc fe5d 	bl	8000584 <__aeabi_ul2d>
 80038ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038ce:	e9cd 0100 	strd	r0, r1, [sp]
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	f7fc fe8b 	bl	80005f0 <__aeabi_dmul>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038e2:	f7fc fcd3 	bl	800028c <__adddf3>
 80038e6:	f7fd f96b 	bl	8000bc0 <__aeabi_d2ulz>
 80038ea:	e9ca 0100 	strd	r0, r1, [sl]
	adc_buffer_current = (pow((adc_raw_current-2072.202)/0.14603,2))+adc_buffer_current;
 80038ee:	4630      	mov	r0, r6
 80038f0:	f7fc fe08 	bl	8000504 <__aeabi_ui2d>
 80038f4:	a34a      	add	r3, pc, #296	; (adr r3, 8003a20 <adc_comms+0x1b0>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f7fc fcc5 	bl	8000288 <__aeabi_dsub>
 80038fe:	a34c      	add	r3, pc, #304	; (adr r3, 8003a30 <adc_comms+0x1c0>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fc fe74 	bl	80005f0 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003910:	e9cd 2300 	strd	r2, r3, [sp]
 8003914:	f7fc fe36 	bl	8000584 <__aeabi_ul2d>
 8003918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800391c:	4606      	mov	r6, r0
 800391e:	460f      	mov	r7, r1
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f7fc fe64 	bl	80005f0 <__aeabi_dmul>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4630      	mov	r0, r6
 800392e:	4639      	mov	r1, r7
 8003930:	f7fc fcac 	bl	800028c <__adddf3>
 8003934:	f7fd f944 	bl	8000bc0 <__aeabi_d2ulz>
 8003938:	e9c5 0100 	strd	r0, r1, [r5]

	//Converting Ambient temperature
	raw_ambient_temp = (raw_ambient_temp-615)/12.3;
 800393c:	f2ab 2067 	subw	r0, fp, #615	; 0x267
 8003940:	f7fc fde0 	bl	8000504 <__aeabi_ui2d>
 8003944:	a33c      	add	r3, pc, #240	; (adr r3, 8003a38 <adc_comms+0x1c8>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fe51 	bl	80005f0 <__aeabi_dmul>
 800394e:	f7fd f8ff 	bl	8000b50 <__aeabi_d2uiz>
 8003952:	4606      	mov	r6, r0
 8003954:	f8c8 0000 	str.w	r0, [r8]
	//Converting Geyser Temperature
	raw_geyser_temp = (raw_geyser_temp-615)/12.3;
 8003958:	f2a9 2067 	subw	r0, r9, #615	; 0x267
 800395c:	f7fc fdd2 	bl	8000504 <__aeabi_ui2d>
 8003960:	a335      	add	r3, pc, #212	; (adr r3, 8003a38 <adc_comms+0x1c8>)
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f7fc fe43 	bl	80005f0 <__aeabi_dmul>
 800396a:	f7fd f8f1 	bl	8000b50 <__aeabi_d2uiz>

	//Convert to chart
	sprintf(ambient_temp,"%lu", raw_ambient_temp);
 800396e:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <adc_comms+0x1e4>)
	raw_geyser_temp = (raw_geyser_temp-615)/12.3;
 8003970:	6020      	str	r0, [r4, #0]
	sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003972:	4632      	mov	r2, r6
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	4938      	ldr	r1, [pc, #224]	; (8003a58 <adc_comms+0x1e8>)
	sprintf(geyser_temp,"%lu", raw_geyser_temp);


	adc_counter += 1;
 8003978:	4e38      	ldr	r6, [pc, #224]	; (8003a5c <adc_comms+0x1ec>)
	sprintf(ambient_temp,"%lu", raw_ambient_temp);
 800397a:	f001 f805 	bl	8004988 <siprintf>
	sprintf(geyser_temp,"%lu", raw_geyser_temp);
 800397e:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <adc_comms+0x1f0>)
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	4934      	ldr	r1, [pc, #208]	; (8003a58 <adc_comms+0x1e8>)
 8003986:	f000 ffff 	bl	8004988 <siprintf>
	adc_counter += 1;
 800398a:	8833      	ldrh	r3, [r6, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	b29b      	uxth	r3, r3
	if(adc_counter == 2000){
 8003990:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
	adc_counter += 1;
 8003994:	8033      	strh	r3, [r6, #0]
	if(adc_counter == 2000){
 8003996:	d002      	beq.n	800399e <adc_comms+0x12e>
		adc_counter = 0;

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}
}
 8003998:	b005      	add	sp, #20
 800399a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*voltage_int_rms = sqrt(adc_buffer_voltage/2000);
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <adc_comms+0x1f4>)
		*current_int_rms = sqrt(adc_buffer_current/2000);
 80039a0:	4c31      	ldr	r4, [pc, #196]	; (8003a68 <adc_comms+0x1f8>)
		*voltage_int_rms = sqrt(adc_buffer_voltage/2000);
 80039a2:	681f      	ldr	r7, [r3, #0]
 80039a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80039a8:	2300      	movs	r3, #0
 80039aa:	e9da 0100 	ldrd	r0, r1, [sl]
 80039ae:	f7fd f8ef 	bl	8000b90 <__aeabi_uldivmod>
 80039b2:	f7fc fde7 	bl	8000584 <__aeabi_ul2d>
 80039b6:	ec41 0b10 	vmov	d0, r0, r1
 80039ba:	f001 fb3b 	bl	8005034 <sqrt>
 80039be:	ec51 0b10 	vmov	r0, r1, d0
 80039c2:	f7fd f8c5 	bl	8000b50 <__aeabi_d2uiz>
		*current_int_rms = sqrt(adc_buffer_current/2000);
 80039c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80039ca:	2300      	movs	r3, #0
		*voltage_int_rms = sqrt(adc_buffer_voltage/2000);
 80039cc:	6038      	str	r0, [r7, #0]
		*current_int_rms = sqrt(adc_buffer_current/2000);
 80039ce:	e9d5 0100 	ldrd	r0, r1, [r5]
 80039d2:	f7fd f8dd 	bl	8000b90 <__aeabi_uldivmod>
 80039d6:	f7fc fdd5 	bl	8000584 <__aeabi_ul2d>
 80039da:	ec41 0b10 	vmov	d0, r0, r1
 80039de:	f001 fb29 	bl	8005034 <sqrt>
 80039e2:	ec51 0b10 	vmov	r0, r1, d0
 80039e6:	f7fd f8b3 	bl	8000b50 <__aeabi_d2uiz>
 80039ea:	6822      	ldr	r2, [r4, #0]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 80039ec:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <adc_comms+0x1fc>)
		*current_int_rms = sqrt(adc_buffer_current/2000);
 80039ee:	6010      	str	r0, [r2, #0]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	4918      	ldr	r1, [pc, #96]	; (8003a58 <adc_comms+0x1e8>)
 80039f6:	f000 ffc7 	bl	8004988 <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <adc_comms+0x200>)
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	4915      	ldr	r1, [pc, #84]	; (8003a58 <adc_comms+0x1e8>)
 8003a04:	f000 ffc0 	bl	8004988 <siprintf>
		adc_buffer_voltage = 0;
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e9ca 2300 	strd	r2, r3, [sl]
		adc_buffer_current = 0;
 8003a10:	e9c5 2300 	strd	r2, r3, [r5]
		adc_counter = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	8033      	strh	r3, [r6, #0]
}
 8003a18:	b005      	add	sp, #20
 8003a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a1e:	bf00      	nop
 8003a20:	6c8b4396 	.word	0x6c8b4396
 8003a24:	40a03067 	.word	0x40a03067
 8003a28:	a3da61ba 	.word	0xa3da61ba
 8003a2c:	405cf8d9 	.word	0x405cf8d9
 8003a30:	fc3f99e7 	.word	0xfc3f99e7
 8003a34:	401b6441 	.word	0x401b6441
 8003a38:	4d0214d0 	.word	0x4d0214d0
 8003a3c:	3fb4d021 	.word	0x3fb4d021
 8003a40:	200000b8 	.word	0x200000b8
 8003a44:	200000d4 	.word	0x200000d4
 8003a48:	200000d8 	.word	0x200000d8
 8003a4c:	200000f8 	.word	0x200000f8
 8003a50:	200000c0 	.word	0x200000c0
 8003a54:	200000dc 	.word	0x200000dc
 8003a58:	080052b0 	.word	0x080052b0
 8003a5c:	200000d0 	.word	0x200000d0
 8003a60:	200000ec 	.word	0x200000ec
 8003a64:	20000128 	.word	0x20000128
 8003a68:	200000e4 	.word	0x200000e4
 8003a6c:	2000012c 	.word	0x2000012c
 8003a70:	200000e8 	.word	0x200000e8
 8003a74:	200000f4 	.word	0x200000f4
 8003a78:	200000c8 	.word	0x200000c8

08003a7c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <HAL_ADC_ConvCpltCallback+0x8>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	4770      	bx	lr
 8003a84:	200000d2 	.word	0x200000d2

08003a88 <HAL_TIM_TriggerCallback>:
}

void HAL_TIM_TriggerCallback (TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8003a88:	4b01      	ldr	r3, [pc, #4]	; (8003a90 <HAL_TIM_TriggerCallback+0x8>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	4770      	bx	lr
 8003a90:	2000010d 	.word	0x2000010d

08003a94 <seven_segment_display>:
}

void seven_segment_display(uint8_t num){
 8003a94:	b508      	push	{r3, lr}
	switch(num){
 8003a96:	2809      	cmp	r0, #9
 8003a98:	f200 81bf 	bhi.w	8003e1a <seven_segment_display+0x386>
 8003a9c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003aa0:	006c003b 	.word	0x006c003b
 8003aa4:	00c40098 	.word	0x00c40098
 8003aa8:	011200e8 	.word	0x011200e8
 8003aac:	016a013e 	.word	0x016a013e
 8003ab0:	000a018c 	.word	0x000a018c
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
		break;
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003abc:	f7fe f866 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	48e9      	ldr	r0, [pc, #932]	; (8003e6c <seven_segment_display+0x3d8>)
 8003ac6:	f7fe f861 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003aca:	2200      	movs	r2, #0
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad2:	f7fe f85b 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae0:	f7fe f854 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aee:	f7fe f84d 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003afa:	f7fe f847 	bl	8001b8c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003afe:	48dc      	ldr	r0, [pc, #880]	; (8003e70 <seven_segment_display+0x3dc>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003b04:	f7fe f842 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003b08:	2201      	movs	r2, #1
 8003b0a:	2140      	movs	r1, #64	; 0x40
 8003b0c:	48d7      	ldr	r0, [pc, #860]	; (8003e6c <seven_segment_display+0x3d8>)

	}



}
 8003b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003b12:	f7fe b83b 	b.w	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2140      	movs	r1, #64	; 0x40
 8003b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1e:	f7fe f835 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003b22:	2200      	movs	r2, #0
 8003b24:	2120      	movs	r1, #32
 8003b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b2a:	f7fe f82f 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2140      	movs	r1, #64	; 0x40
 8003b32:	48ce      	ldr	r0, [pc, #824]	; (8003e6c <seven_segment_display+0x3d8>)
 8003b34:	f7fe f82a 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b40:	f7fe f824 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003b44:	2200      	movs	r2, #0
 8003b46:	2140      	movs	r1, #64	; 0x40
 8003b48:	48c8      	ldr	r0, [pc, #800]	; (8003e6c <seven_segment_display+0x3d8>)
 8003b4a:	f7fe f81f 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	48c7      	ldr	r0, [pc, #796]	; (8003e70 <seven_segment_display+0x3dc>)
 8003b54:	f7fe f81a 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b62:	f7fe f813 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003b66:	2201      	movs	r2, #1
 8003b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003b74:	f7fe b80a 	b.w	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2140      	movs	r1, #64	; 0x40
 8003b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b80:	f7fe f804 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8003b84:	2200      	movs	r2, #0
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8c:	f7fd fffe 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8003b90:	2201      	movs	r2, #1
 8003b92:	2120      	movs	r1, #32
 8003b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b98:	f7fd fff8 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba6:	f7fd fff1 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8003baa:	2201      	movs	r2, #1
 8003bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb4:	f7fd ffea 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8003bb8:	48ac      	ldr	r0, [pc, #688]	; (8003e6c <seven_segment_display+0x3d8>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	2140      	movs	r1, #64	; 0x40
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003bbe:	f7fd ffe5 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	48aa      	ldr	r0, [pc, #680]	; (8003e70 <seven_segment_display+0x3dc>)
}
 8003bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003bcc:	f7fd bfde 	b.w	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd8:	f7fd ffd8 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2140      	movs	r1, #64	; 0x40
 8003be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be4:	f7fd ffd2 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf2:	f7fd ffcb 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	489d      	ldr	r0, [pc, #628]	; (8003e70 <seven_segment_display+0x3dc>)
 8003bfc:	f7fd ffc6 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	4899      	ldr	r0, [pc, #612]	; (8003e6c <seven_segment_display+0x3d8>)
 8003c06:	f7fd ffc1 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c14:	f7fd ffba 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003c18:	2201      	movs	r2, #1
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003c24:	f7fd bfb2 	b.w	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c30:	f7fd ffac 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8003c34:	2200      	movs	r2, #0
 8003c36:	2140      	movs	r1, #64	; 0x40
 8003c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c3c:	f7fd ffa6 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003c40:	2200      	movs	r2, #0
 8003c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4a:	f7fd ff9f 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2180      	movs	r1, #128	; 0x80
 8003c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c56:	f7fd ff99 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2140      	movs	r1, #64	; 0x40
 8003c5e:	4883      	ldr	r0, [pc, #524]	; (8003e6c <seven_segment_display+0x3d8>)
 8003c60:	f7fd ff94 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003c64:	2201      	movs	r2, #1
 8003c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6e:	e7a6      	b.n	8003bbe <seven_segment_display+0x12a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003c70:	2200      	movs	r2, #0
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c78:	f7fd ff88 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c86:	f7fd ff81 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c94:	f7fd ff7a 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca0:	f7fd ff74 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2120      	movs	r1, #32
 8003ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cac:	f7fd ff6e 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	486e      	ldr	r0, [pc, #440]	; (8003e70 <seven_segment_display+0x3dc>)
 8003cb6:	f7fd ff69 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003cba:	2201      	movs	r2, #1
 8003cbc:	2120      	movs	r1, #32
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cc2:	e71f      	b.n	8003b04 <seven_segment_display+0x70>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2120      	movs	r1, #32
 8003cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ccc:	f7fd ff5e 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cda:	f7fd ff57 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce8:	f7fd ff50 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003cec:	2200      	movs	r2, #0
 8003cee:	2180      	movs	r1, #128	; 0x80
 8003cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cf4:	f7fd ff4a 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	2140      	movs	r1, #64	; 0x40
 8003cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d00:	f7fd ff44 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003d04:	2201      	movs	r2, #1
 8003d06:	2180      	movs	r1, #128	; 0x80
 8003d08:	4859      	ldr	r0, [pc, #356]	; (8003e70 <seven_segment_display+0x3dc>)
 8003d0a:	f7fd ff3f 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2140      	movs	r1, #64	; 0x40
 8003d12:	4856      	ldr	r0, [pc, #344]	; (8003e6c <seven_segment_display+0x3d8>)
}
 8003d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8003d18:	f7fd bf38 	b.w	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2120      	movs	r1, #32
 8003d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d24:	f7fd ff32 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d32:	f7fd ff2b 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003d36:	2200      	movs	r2, #0
 8003d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d40:	f7fd ff24 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d4c:	f7fd ff1e 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003d50:	2200      	movs	r2, #0
 8003d52:	2140      	movs	r1, #64	; 0x40
 8003d54:	4845      	ldr	r0, [pc, #276]	; (8003e6c <seven_segment_display+0x3d8>)
 8003d56:	f7fd ff19 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003d5a:	4845      	ldr	r0, [pc, #276]	; (8003e70 <seven_segment_display+0x3dc>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8003d60:	f7fd ff14 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8003d64:	2201      	movs	r2, #1
 8003d66:	2140      	movs	r1, #64	; 0x40
 8003d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003d6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8003d70:	f7fd bf0c 	b.w	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003d74:	2200      	movs	r2, #0
 8003d76:	2120      	movs	r1, #32
 8003d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d7c:	f7fd ff06 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003d80:	2200      	movs	r2, #0
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d88:	f7fd ff00 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d94:	f7fd fefa 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003d98:	2201      	movs	r2, #1
 8003d9a:	2180      	movs	r1, #128	; 0x80
 8003d9c:	4834      	ldr	r0, [pc, #208]	; (8003e70 <seven_segment_display+0x3dc>)
 8003d9e:	f7fd fef5 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003da2:	2201      	movs	r2, #1
 8003da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dac:	f7fd feee 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003db6:	e782      	b.n	8003cbe <seven_segment_display+0x22a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003db8:	2200      	movs	r2, #0
 8003dba:	2140      	movs	r1, #64	; 0x40
 8003dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc0:	f7fd fee4 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2120      	movs	r1, #32
 8003dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dcc:	f7fd fede 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2140      	movs	r1, #64	; 0x40
 8003dd4:	4825      	ldr	r0, [pc, #148]	; (8003e6c <seven_segment_display+0x3d8>)
 8003dd6:	f7fd fed9 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de2:	f7fd fed3 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003de6:	2200      	movs	r2, #0
 8003de8:	2140      	movs	r1, #64	; 0x40
 8003dea:	4820      	ldr	r0, [pc, #128]	; (8003e6c <seven_segment_display+0x3d8>)
 8003dec:	f7fd fece 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	481e      	ldr	r0, [pc, #120]	; (8003e70 <seven_segment_display+0x3dc>)
 8003df6:	f7fd fec9 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e04:	f7fd fec2 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003e16:	f7fd beb9 	b.w	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e22:	f7fd feb3 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 8003e26:	2201      	movs	r2, #1
 8003e28:	2140      	movs	r1, #64	; 0x40
 8003e2a:	4810      	ldr	r0, [pc, #64]	; (8003e6c <seven_segment_display+0x3d8>)
 8003e2c:	f7fd feae 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003e30:	2201      	movs	r2, #1
 8003e32:	2180      	movs	r1, #128	; 0x80
 8003e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e38:	f7fd fea8 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	2140      	movs	r1, #64	; 0x40
 8003e40:	480a      	ldr	r0, [pc, #40]	; (8003e6c <seven_segment_display+0x3d8>)
 8003e42:	f7fd fea3 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003e46:	2201      	movs	r2, #1
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	4809      	ldr	r0, [pc, #36]	; (8003e70 <seven_segment_display+0x3dc>)
 8003e4c:	f7fd fe9e 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003e50:	2201      	movs	r2, #1
 8003e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e5a:	f7fd fe97 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e68:	e77a      	b.n	8003d60 <seven_segment_display+0x2cc>
 8003e6a:	bf00      	nop
 8003e6c:	48000400 	.word	0x48000400
 8003e70:	48000800 	.word	0x48000800

08003e74 <seven_segment>:
void seven_segment(){
 8003e74:	b538      	push	{r3, r4, r5, lr}
	if(segment_counter == 0){	// Left Most Digit
 8003e76:	4d30      	ldr	r5, [pc, #192]	; (8003f38 <seven_segment+0xc4>)
 8003e78:	782c      	ldrb	r4, [r5, #0]
 8003e7a:	b134      	cbz	r4, 8003e8a <seven_segment+0x16>
	else if( segment_counter == 1){		// Middle left Digit
 8003e7c:	2c01      	cmp	r4, #1
 8003e7e:	d045      	beq.n	8003f0c <seven_segment+0x98>
	else if( segment_counter == 2){		// Middle Right Digit
 8003e80:	2c02      	cmp	r4, #2
 8003e82:	d04b      	beq.n	8003f1c <seven_segment+0xa8>
	else if( segment_counter == 3){ // Right Most Digit
 8003e84:	2c03      	cmp	r4, #3
 8003e86:	d021      	beq.n	8003ecc <seven_segment+0x58>
 8003e88:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e90:	482a      	ldr	r0, [pc, #168]	; (8003f3c <seven_segment+0xc8>)
 8003e92:	f7fd fe7b 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003e96:	2201      	movs	r2, #1
 8003e98:	2110      	movs	r1, #16
 8003e9a:	4828      	ldr	r0, [pc, #160]	; (8003f3c <seven_segment+0xc8>)
 8003e9c:	f7fd fe76 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	2120      	movs	r1, #32
 8003ea4:	4825      	ldr	r0, [pc, #148]	; (8003f3c <seven_segment+0xc8>)
 8003ea6:	f7fd fe71 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2108      	movs	r1, #8
 8003eae:	4823      	ldr	r0, [pc, #140]	; (8003f3c <seven_segment+0xc8>)
 8003eb0:	f7fd fe6c 	bl	8001b8c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <seven_segment+0xcc>)
 8003eb6:	782b      	ldrb	r3, [r5, #0]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	5cd0      	ldrb	r0, [r2, r3]
 8003ebc:	3830      	subs	r0, #48	; 0x30
 8003ebe:	b2c0      	uxtb	r0, r0
 8003ec0:	f7ff fde8 	bl	8003a94 <seven_segment_display>
		segment_counter += 1;
 8003ec4:	782b      	ldrb	r3, [r5, #0]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	702b      	strb	r3, [r5, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ed2:	481a      	ldr	r0, [pc, #104]	; (8003f3c <seven_segment+0xc8>)
 8003ed4:	f7fd fe5a 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003ed8:	2201      	movs	r2, #1
 8003eda:	2110      	movs	r1, #16
 8003edc:	4817      	ldr	r0, [pc, #92]	; (8003f3c <seven_segment+0xc8>)
 8003ede:	f7fd fe55 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	4815      	ldr	r0, [pc, #84]	; (8003f3c <seven_segment+0xc8>)
 8003ee8:	f7fd fe50 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8003eec:	2200      	movs	r2, #0
 8003eee:	2108      	movs	r1, #8
 8003ef0:	4812      	ldr	r0, [pc, #72]	; (8003f3c <seven_segment+0xc8>)
 8003ef2:	f7fd fe4b 	bl	8001b8c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003ef6:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <seven_segment+0xcc>)
 8003ef8:	782b      	ldrb	r3, [r5, #0]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	5cd0      	ldrb	r0, [r2, r3]
 8003efe:	3830      	subs	r0, #48	; 0x30
 8003f00:	b2c0      	uxtb	r0, r0
 8003f02:	f7ff fdc7 	bl	8003a94 <seven_segment_display>
		segment_counter = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	702b      	strb	r3, [r5, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f12:	480a      	ldr	r0, [pc, #40]	; (8003f3c <seven_segment+0xc8>)
 8003f14:	f7fd fe3a 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8003f18:	2200      	movs	r2, #0
 8003f1a:	e7bd      	b.n	8003e98 <seven_segment+0x24>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f22:	4806      	ldr	r0, [pc, #24]	; (8003f3c <seven_segment+0xc8>)
 8003f24:	f7fd fe32 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2110      	movs	r1, #16
 8003f2c:	4803      	ldr	r0, [pc, #12]	; (8003f3c <seven_segment+0xc8>)
 8003f2e:	f7fd fe2d 	bl	8001b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8003f32:	2200      	movs	r2, #0
 8003f34:	e7b5      	b.n	8003ea2 <seven_segment+0x2e>
 8003f36:	bf00      	nop
 8003f38:	20000101 	.word	0x20000101
 8003f3c:	48000400 	.word	0x48000400
 8003f40:	20000104 	.word	0x20000104

08003f44 <liters_pumped>:

void liters_pumped(){

	tim3_now = htim3.Instance->CNT; // timer value
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <liters_pumped+0x38>)
 8003f46:	490e      	ldr	r1, [pc, #56]	; (8003f80 <liters_pumped+0x3c>)
 8003f48:	681a      	ldr	r2, [r3, #0]
void liters_pumped(){
 8003f4a:	b470      	push	{r4, r5, r6}

	if(tim3_now - tim3_prev > 5000){ //using f=1MHz
 8003f4c:	4d0d      	ldr	r5, [pc, #52]	; (8003f84 <liters_pumped+0x40>)
	tim3_now = htim3.Instance->CNT; // timer value
 8003f4e:	6a54      	ldr	r4, [r2, #36]	; 0x24
	if(tim3_now - tim3_prev > 5000){ //using f=1MHz
 8003f50:	682b      	ldr	r3, [r5, #0]
	tim3_now = htim3.Instance->CNT; // timer value
 8003f52:	600c      	str	r4, [r1, #0]
	if(tim3_now - tim3_prev > 5000){ //using f=1MHz
 8003f54:	1ae3      	subs	r3, r4, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d801      	bhi.n	8003f62 <liters_pumped+0x1e>
		water_acc+=100;
		sprintf(total_water,"%lu", water_acc);
	}


}
 8003f5e:	bc70      	pop	{r4, r5, r6}
 8003f60:	4770      	bx	lr
		water_acc+=100;
 8003f62:	4e09      	ldr	r6, [pc, #36]	; (8003f88 <liters_pumped+0x44>)
		sprintf(total_water,"%lu", water_acc);
 8003f64:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <liters_pumped+0x48>)
		water_acc+=100;
 8003f66:	6833      	ldr	r3, [r6, #0]
		sprintf(total_water,"%lu", water_acc);
 8003f68:	6810      	ldr	r0, [r2, #0]
		tim3_prev = tim3_now;
 8003f6a:	602c      	str	r4, [r5, #0]
		water_acc+=100;
 8003f6c:	3364      	adds	r3, #100	; 0x64
 8003f6e:	6033      	str	r3, [r6, #0]
		sprintf(total_water,"%lu", water_acc);
 8003f70:	4907      	ldr	r1, [pc, #28]	; (8003f90 <liters_pumped+0x4c>)
 8003f72:	461a      	mov	r2, r3
}
 8003f74:	bc70      	pop	{r4, r5, r6}
		sprintf(total_water,"%lu", water_acc);
 8003f76:	f000 bd07 	b.w	8004988 <siprintf>
 8003f7a:	bf00      	nop
 8003f7c:	20000144 	.word	0x20000144
 8003f80:	20000110 	.word	0x20000110
 8003f84:	20000114 	.word	0x20000114
 8003f88:	20000130 	.word	0x20000130
 8003f8c:	20000118 	.word	0x20000118
 8003f90:	080052b0 	.word	0x080052b0

08003f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8003f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f96:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f98:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <MX_GPIO_Init+0xf4>)
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003fa0:	615a      	str	r2, [r3, #20]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003fa8:	9201      	str	r2, [sp, #4]
 8003faa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003fb2:	615a      	str	r2, [r3, #20]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003fba:	9202      	str	r2, [sp, #8]
 8003fbc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fc4:	615a      	str	r2, [r3, #20]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003fcc:	9203      	str	r2, [sp, #12]
 8003fce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003fd6:	615a      	str	r2, [r3, #20]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	9304      	str	r3, [sp, #16]
 8003fe0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8003fe2:	4f2a      	ldr	r7, [pc, #168]	; (800408c <MX_GPIO_Init+0xf8>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2183      	movs	r1, #131	; 0x83
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7fd fdcf 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8003ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff8:	f7fd fdc8 	bl	8001b8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003ffc:	4d24      	ldr	r5, [pc, #144]	; (8004090 <MX_GPIO_Init+0xfc>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8004004:	4628      	mov	r0, r5
 8004006:	f7fd fdc1 	bl	8001b8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800400a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800400e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004010:	4b20      	ldr	r3, [pc, #128]	; (8004094 <MX_GPIO_Init+0x100>)
 8004012:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2400      	movs	r4, #0
 8004016:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004018:	a905      	add	r1, sp, #20
 800401a:	4638      	mov	r0, r7
 800401c:	f7fd fcfc 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8004020:	2383      	movs	r3, #131	; 0x83
 8004022:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004024:	2601      	movs	r6, #1
 8004026:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800402c:	a905      	add	r1, sp, #20
 800402e:	4638      	mov	r0, r7
 8004030:	f7fd fcf2 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8004034:	2313      	movs	r3, #19
 8004036:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004038:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403c:	a905      	add	r1, sp, #20
 800403e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004042:	f7fd fce9 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8004046:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800404a:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800404c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004052:	a905      	add	r1, sp, #20
 8004054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004058:	f7fd fcde 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800405c:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8004060:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004062:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004066:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004068:	a905      	add	r1, sp, #20
 800406a:	4628      	mov	r0, r5
 800406c:	f7fd fcd4 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004070:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004074:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004076:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407a:	a905      	add	r1, sp, #20
 800407c:	4628      	mov	r0, r5
 800407e:	f7fd fccb 	bl	8001a18 <HAL_GPIO_Init>

}
 8004082:	b00b      	add	sp, #44	; 0x2c
 8004084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	48000800 	.word	0x48000800
 8004090:	48000400 	.word	0x48000400
 8004094:	10110000 	.word	0x10110000

08004098 <MX_DMA_Init>:
{
 8004098:	b500      	push	{lr}
 800409a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <MX_DMA_Init+0x30>)
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	615a      	str	r2, [r3, #20]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040b0:	2200      	movs	r2, #0
 80040b2:	4611      	mov	r1, r2
 80040b4:	200b      	movs	r0, #11
 80040b6:	f7fd fb69 	bl	800178c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040ba:	200b      	movs	r0, #11
 80040bc:	f7fd fb9a 	bl	80017f4 <HAL_NVIC_EnableIRQ>
}
 80040c0:	b003      	add	sp, #12
 80040c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000

080040cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80040cc:	4770      	bx	lr

080040ce <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80040ce:	e7fe      	b.n	80040ce <_Error_Handler>

080040d0 <MX_TIM2_Init>:
{
 80040d0:	b500      	push	{lr}
 80040d2:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80040d4:	4818      	ldr	r0, [pc, #96]	; (8004138 <MX_TIM2_Init+0x68>)
 80040d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040da:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 80040dc:	2301      	movs	r3, #1
 80040de:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e0:	2300      	movs	r3, #0
 80040e2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 63999999;
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <MX_TIM2_Init+0x6c>)
 80040e6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ea:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80040ec:	f7fe fab2 	bl	8002654 <HAL_TIM_Base_Init>
 80040f0:	b998      	cbnz	r0, 800411a <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040f2:	a908      	add	r1, sp, #32
 80040f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80040fc:	480e      	ldr	r0, [pc, #56]	; (8004138 <MX_TIM2_Init+0x68>)
 80040fe:	f7fe fb99 	bl	8002834 <HAL_TIM_ConfigClockSource>
 8004102:	b978      	cbnz	r0, 8004124 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004108:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800410a:	a901      	add	r1, sp, #4
 800410c:	480a      	ldr	r0, [pc, #40]	; (8004138 <MX_TIM2_Init+0x68>)
 800410e:	f7fe fcef 	bl	8002af0 <HAL_TIMEx_MasterConfigSynchronization>
 8004112:	b960      	cbnz	r0, 800412e <MX_TIM2_Init+0x5e>
}
 8004114:	b009      	add	sp, #36	; 0x24
 8004116:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800411a:	f240 1137 	movw	r1, #311	; 0x137
 800411e:	4808      	ldr	r0, [pc, #32]	; (8004140 <MX_TIM2_Init+0x70>)
 8004120:	f7ff ffd5 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004124:	f240 113d 	movw	r1, #317	; 0x13d
 8004128:	4805      	ldr	r0, [pc, #20]	; (8004140 <MX_TIM2_Init+0x70>)
 800412a:	f7ff ffd0 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800412e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004132:	4803      	ldr	r0, [pc, #12]	; (8004140 <MX_TIM2_Init+0x70>)
 8004134:	f7ff ffcb 	bl	80040ce <_Error_Handler>
 8004138:	2000028c 	.word	0x2000028c
 800413c:	03d08fff 	.word	0x03d08fff
 8004140:	080052b4 	.word	0x080052b4

08004144 <MX_USART1_UART_Init>:
{
 8004144:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8004146:	480c      	ldr	r0, [pc, #48]	; (8004178 <MX_USART1_UART_Init+0x34>)
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <MX_USART1_UART_Init+0x38>)
 800414a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800414c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004150:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004152:	2300      	movs	r3, #0
 8004154:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004156:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004158:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800415a:	220c      	movs	r2, #12
 800415c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800415e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004160:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004162:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004164:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004166:	f7fe ff1d 	bl	8002fa4 <HAL_UART_Init>
 800416a:	b900      	cbnz	r0, 800416e <MX_USART1_UART_Init+0x2a>
 800416c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800416e:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8004172:	4803      	ldr	r0, [pc, #12]	; (8004180 <MX_USART1_UART_Init+0x3c>)
 8004174:	f7ff ffab 	bl	80040ce <_Error_Handler>
 8004178:	200001d8 	.word	0x200001d8
 800417c:	40013800 	.word	0x40013800
 8004180:	080052b4 	.word	0x080052b4

08004184 <MX_ADC1_Init>:
{
 8004184:	b500      	push	{lr}
 8004186:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 8004188:	4834      	ldr	r0, [pc, #208]	; (800425c <MX_ADC1_Init+0xd8>)
 800418a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800418e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004190:	2300      	movs	r3, #0
 8004192:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004194:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004196:	2201      	movs	r2, #1
 8004198:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800419a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800419c:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800419e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041a0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041a2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
 80041a4:	2104      	movs	r1, #4
 80041a6:	6201      	str	r1, [r0, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80041a8:	6342      	str	r2, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041aa:	6141      	str	r1, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80041ac:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80041ae:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041b0:	f7fc ff66 	bl	8001080 <HAL_ADC_Init>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d135      	bne.n	8004224 <MX_ADC1_Init+0xa0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80041b8:	a90a      	add	r1, sp, #40	; 0x28
 80041ba:	2300      	movs	r3, #0
 80041bc:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80041c0:	4826      	ldr	r0, [pc, #152]	; (800425c <MX_ADC1_Init+0xd8>)
 80041c2:	f7fd fa5d 	bl	8001680 <HAL_ADCEx_MultiModeConfigChannel>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d130      	bne.n	800422c <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_8;
 80041ca:	2308      	movs	r3, #8
 80041cc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80041ce:	2301      	movs	r3, #1
 80041d0:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80041d2:	2300      	movs	r3, #0
 80041d4:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80041d6:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80041d8:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 80041da:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041dc:	a901      	add	r1, sp, #4
 80041de:	481f      	ldr	r0, [pc, #124]	; (800425c <MX_ADC1_Init+0xd8>)
 80041e0:	f7fd f8ce 	bl	8001380 <HAL_ADC_ConfigChannel>
 80041e4:	bb30      	cbnz	r0, 8004234 <MX_ADC1_Init+0xb0>
  sConfig.Channel = ADC_CHANNEL_9;
 80041e6:	2309      	movs	r3, #9
 80041e8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80041ea:	2302      	movs	r3, #2
 80041ec:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041ee:	a901      	add	r1, sp, #4
 80041f0:	481a      	ldr	r0, [pc, #104]	; (800425c <MX_ADC1_Init+0xd8>)
 80041f2:	f7fd f8c5 	bl	8001380 <HAL_ADC_ConfigChannel>
 80041f6:	bb10      	cbnz	r0, 800423e <MX_ADC1_Init+0xba>
  sConfig.Channel = ADC_CHANNEL_11;
 80041f8:	230b      	movs	r3, #11
 80041fa:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80041fc:	2303      	movs	r3, #3
 80041fe:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004200:	a901      	add	r1, sp, #4
 8004202:	4816      	ldr	r0, [pc, #88]	; (800425c <MX_ADC1_Init+0xd8>)
 8004204:	f7fd f8bc 	bl	8001380 <HAL_ADC_ConfigChannel>
 8004208:	b9f0      	cbnz	r0, 8004248 <MX_ADC1_Init+0xc4>
  sConfig.Channel = ADC_CHANNEL_12;
 800420a:	230c      	movs	r3, #12
 800420c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800420e:	2304      	movs	r3, #4
 8004210:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004212:	eb0d 0103 	add.w	r1, sp, r3
 8004216:	4811      	ldr	r0, [pc, #68]	; (800425c <MX_ADC1_Init+0xd8>)
 8004218:	f7fd f8b2 	bl	8001380 <HAL_ADC_ConfigChannel>
 800421c:	b9c8      	cbnz	r0, 8004252 <MX_ADC1_Init+0xce>
}
 800421e:	b00b      	add	sp, #44	; 0x2c
 8004220:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004224:	21f3      	movs	r1, #243	; 0xf3
 8004226:	480e      	ldr	r0, [pc, #56]	; (8004260 <MX_ADC1_Init+0xdc>)
 8004228:	f7ff ff51 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800422c:	21fb      	movs	r1, #251	; 0xfb
 800422e:	480c      	ldr	r0, [pc, #48]	; (8004260 <MX_ADC1_Init+0xdc>)
 8004230:	f7ff ff4d 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004234:	f44f 7184 	mov.w	r1, #264	; 0x108
 8004238:	4809      	ldr	r0, [pc, #36]	; (8004260 <MX_ADC1_Init+0xdc>)
 800423a:	f7ff ff48 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800423e:	f240 1111 	movw	r1, #273	; 0x111
 8004242:	4807      	ldr	r0, [pc, #28]	; (8004260 <MX_ADC1_Init+0xdc>)
 8004244:	f7ff ff43 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004248:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800424c:	4804      	ldr	r0, [pc, #16]	; (8004260 <MX_ADC1_Init+0xdc>)
 800424e:	f7ff ff3e 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004252:	f240 1123 	movw	r1, #291	; 0x123
 8004256:	4802      	ldr	r0, [pc, #8]	; (8004260 <MX_ADC1_Init+0xdc>)
 8004258:	f7ff ff39 	bl	80040ce <_Error_Handler>
 800425c:	20000184 	.word	0x20000184
 8004260:	080052b4 	.word	0x080052b4

08004264 <MX_TIM3_Init>:
{
 8004264:	b500      	push	{lr}
 8004266:	b091      	sub	sp, #68	; 0x44
  htim3.Instance = TIM3;
 8004268:	482d      	ldr	r0, [pc, #180]	; (8004320 <MX_TIM3_Init+0xbc>)
 800426a:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <MX_TIM3_Init+0xc0>)
 800426c:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 64;
 800426e:	2340      	movs	r3, #64	; 0x40
 8004270:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004272:	2300      	movs	r3, #0
 8004274:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8004276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800427a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800427c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800427e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004280:	f7fe f9e8 	bl	8002654 <HAL_TIM_Base_Init>
 8004284:	bb68      	cbnz	r0, 80042e2 <MX_TIM3_Init+0x7e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004286:	a910      	add	r1, sp, #64	; 0x40
 8004288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800428c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004290:	4823      	ldr	r0, [pc, #140]	; (8004320 <MX_TIM3_Init+0xbc>)
 8004292:	f7fe facf 	bl	8002834 <HAL_TIM_ConfigClockSource>
 8004296:	bb48      	cbnz	r0, 80042ec <MX_TIM3_Init+0x88>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004298:	4821      	ldr	r0, [pc, #132]	; (8004320 <MX_TIM3_Init+0xbc>)
 800429a:	f7fe f9f5 	bl	8002688 <HAL_TIM_IC_Init>
 800429e:	bb50      	cbnz	r0, 80042f6 <MX_TIM3_Init+0x92>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80042a0:	2306      	movs	r3, #6
 80042a2:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerFilter = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 80042ac:	a907      	add	r1, sp, #28
 80042ae:	481c      	ldr	r0, [pc, #112]	; (8004320 <MX_TIM3_Init+0xbc>)
 80042b0:	f7fe fbc6 	bl	8002a40 <HAL_TIM_SlaveConfigSynchronization>
 80042b4:	bb20      	cbnz	r0, 8004300 <MX_TIM3_Init+0x9c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ba:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042bc:	a904      	add	r1, sp, #16
 80042be:	4818      	ldr	r0, [pc, #96]	; (8004320 <MX_TIM3_Init+0xbc>)
 80042c0:	f7fe fc16 	bl	8002af0 <HAL_TIMEx_MasterConfigSynchronization>
 80042c4:	bb08      	cbnz	r0, 800430a <MX_TIM3_Init+0xa6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80042c6:	2200      	movs	r2, #0
 80042c8:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 80042ca:	2303      	movs	r3, #3
 80042cc:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80042ce:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 80042d0:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80042d2:	4669      	mov	r1, sp
 80042d4:	4812      	ldr	r0, [pc, #72]	; (8004320 <MX_TIM3_Init+0xbc>)
 80042d6:	f7fe fa1b 	bl	8002710 <HAL_TIM_IC_ConfigChannel>
 80042da:	b9d8      	cbnz	r0, 8004314 <MX_TIM3_Init+0xb0>
}
 80042dc:	b011      	add	sp, #68	; 0x44
 80042de:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80042e2:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80042e6:	4810      	ldr	r0, [pc, #64]	; (8004328 <MX_TIM3_Init+0xc4>)
 80042e8:	f7ff fef1 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80042ec:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80042f0:	480d      	ldr	r0, [pc, #52]	; (8004328 <MX_TIM3_Init+0xc4>)
 80042f2:	f7ff feec 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80042f6:	f240 1165 	movw	r1, #357	; 0x165
 80042fa:	480b      	ldr	r0, [pc, #44]	; (8004328 <MX_TIM3_Init+0xc4>)
 80042fc:	f7ff fee7 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004300:	f240 116d 	movw	r1, #365	; 0x16d
 8004304:	4808      	ldr	r0, [pc, #32]	; (8004328 <MX_TIM3_Init+0xc4>)
 8004306:	f7ff fee2 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800430a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800430e:	4806      	ldr	r0, [pc, #24]	; (8004328 <MX_TIM3_Init+0xc4>)
 8004310:	f7ff fedd 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004314:	f240 117d 	movw	r1, #381	; 0x17d
 8004318:	4803      	ldr	r0, [pc, #12]	; (8004328 <MX_TIM3_Init+0xc4>)
 800431a:	f7ff fed8 	bl	80040ce <_Error_Handler>
 800431e:	bf00      	nop
 8004320:	20000144 	.word	0x20000144
 8004324:	40000400 	.word	0x40000400
 8004328:	080052b4 	.word	0x080052b4

0800432c <SystemClock_Config>:
{
 800432c:	b500      	push	{lr}
 800432e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004330:	2302      	movs	r3, #2
 8004332:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004334:	2201      	movs	r2, #1
 8004336:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004338:	2210      	movs	r2, #16
 800433a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800433c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800433e:	2300      	movs	r3, #0
 8004340:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004342:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004346:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004348:	a80c      	add	r0, sp, #48	; 0x30
 800434a:	f7fd fc25 	bl	8001b98 <HAL_RCC_OscConfig>
 800434e:	bb60      	cbnz	r0, 80043aa <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004350:	230f      	movs	r3, #15
 8004352:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004354:	2102      	movs	r1, #2
 8004356:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004358:	2300      	movs	r3, #0
 800435a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800435c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004360:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004362:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004364:	a807      	add	r0, sp, #28
 8004366:	f7fd febb 	bl	80020e0 <HAL_RCC_ClockConfig>
 800436a:	bb10      	cbnz	r0, 80043b2 <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 800436c:	2381      	movs	r3, #129	; 0x81
 800436e:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004370:	2300      	movs	r3, #0
 8004372:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 8004374:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004378:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800437a:	4668      	mov	r0, sp
 800437c:	f7fd ffa8 	bl	80022d0 <HAL_RCCEx_PeriphCLKConfig>
 8004380:	b9d8      	cbnz	r0, 80043ba <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004382:	f7fd ff6f 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8004386:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <SystemClock_Config+0x98>)
 8004388:	fba3 3000 	umull	r3, r0, r3, r0
 800438c:	0980      	lsrs	r0, r0, #6
 800438e:	f7fd fa3d 	bl	800180c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004392:	2004      	movs	r0, #4
 8004394:	f7fd fa50 	bl	8001838 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004398:	2200      	movs	r2, #0
 800439a:	4611      	mov	r1, r2
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	f7fd f9f4 	bl	800178c <HAL_NVIC_SetPriority>
}
 80043a4:	b017      	add	sp, #92	; 0x5c
 80043a6:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80043aa:	21b5      	movs	r1, #181	; 0xb5
 80043ac:	4806      	ldr	r0, [pc, #24]	; (80043c8 <SystemClock_Config+0x9c>)
 80043ae:	f7ff fe8e 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80043b2:	21c3      	movs	r1, #195	; 0xc3
 80043b4:	4804      	ldr	r0, [pc, #16]	; (80043c8 <SystemClock_Config+0x9c>)
 80043b6:	f7ff fe8a 	bl	80040ce <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80043ba:	21cb      	movs	r1, #203	; 0xcb
 80043bc:	4802      	ldr	r0, [pc, #8]	; (80043c8 <SystemClock_Config+0x9c>)
 80043be:	f7ff fe86 	bl	80040ce <_Error_Handler>
 80043c2:	bf00      	nop
 80043c4:	10624dd3 	.word	0x10624dd3
 80043c8:	080052b4 	.word	0x080052b4

080043cc <main>:
{
 80043cc:	b508      	push	{r3, lr}
  HAL_Init();
 80043ce:	f7fc fd9f 	bl	8000f10 <HAL_Init>
  SystemClock_Config();
 80043d2:	f7ff ffab 	bl	800432c <SystemClock_Config>
  MX_GPIO_Init();
 80043d6:	f7ff fddd 	bl	8003f94 <MX_GPIO_Init>
  MX_DMA_Init();
 80043da:	f7ff fe5d 	bl	8004098 <MX_DMA_Init>
  MX_TIM2_Init();
 80043de:	f7ff fe77 	bl	80040d0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80043e2:	f7ff feaf 	bl	8004144 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80043e6:	f7ff fecd 	bl	8004184 <MX_ADC1_Init>
  MX_TIM3_Init();
 80043ea:	f7ff ff3b 	bl	8004264 <MX_TIM3_Init>
  init_peripherals();
 80043ee:	f7ff f967 	bl	80036c0 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80043f2:	2201      	movs	r2, #1
 80043f4:	4919      	ldr	r1, [pc, #100]	; (800445c <main+0x90>)
 80043f6:	481a      	ldr	r0, [pc, #104]	; (8004460 <main+0x94>)
 80043f8:	f7fe fbcd 	bl	8002b96 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, ADC1_buffer, 7);
 80043fc:	2207      	movs	r2, #7
 80043fe:	4b19      	ldr	r3, [pc, #100]	; (8004464 <main+0x98>)
 8004400:	6819      	ldr	r1, [r3, #0]
 8004402:	4819      	ldr	r0, [pc, #100]	; (8004468 <main+0x9c>)
 8004404:	f7fc ff34 	bl	8001270 <HAL_ADC_Start_DMA>
 8004408:	e00f      	b.n	800442a <main+0x5e>
		  rx_flag = 0;
 800440a:	2200      	movs	r2, #0
 800440c:	4b17      	ldr	r3, [pc, #92]	; (800446c <main+0xa0>)
 800440e:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8004410:	f7fe ff04 	bl	800321c <uart_comms>
 8004414:	e00d      	b.n	8004432 <main+0x66>
		  tim2_flag = 0;
 8004416:	2200      	movs	r2, #0
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <main+0xa4>)
 800441a:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 800441c:	f7ff fd2a 	bl	8003e74 <seven_segment>
 8004420:	e00b      	b.n	800443a <main+0x6e>
	  if(tim3_flag == 1 ){ // also check for time specification.
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <main+0xa8>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d011      	beq.n	800444e <main+0x82>
	  if(rx_flag == 1 ){ 	// UART Comms
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <main+0xa0>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d0eb      	beq.n	800440a <main+0x3e>
	  if(tim2_flag == 1){	// Seven Segment
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <main+0xa4>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d0ed      	beq.n	8004416 <main+0x4a>
	  if(adc_flag == 1){	// ADC conversion
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <main+0xac>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d1ef      	bne.n	8004422 <main+0x56>
		  adc_flag = 0;
 8004442:	2200      	movs	r2, #0
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <main+0xac>)
 8004446:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8004448:	f7ff fa12 	bl	8003870 <adc_comms>
 800444c:	e7e9      	b.n	8004422 <main+0x56>
		  tim3_flag = 0;
 800444e:	2200      	movs	r2, #0
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <main+0xa8>)
 8004452:	701a      	strb	r2, [r3, #0]
		  liters_pumped();
 8004454:	f7ff fd76 	bl	8003f44 <liters_pumped>
 8004458:	e7e7      	b.n	800442a <main+0x5e>
 800445a:	bf00      	nop
 800445c:	200002d0 	.word	0x200002d0
 8004460:	200001d8 	.word	0x200001d8
 8004464:	200000b8 	.word	0x200000b8
 8004468:	20000184 	.word	0x20000184
 800446c:	20000100 	.word	0x20000100
 8004470:	200000b4 	.word	0x200000b4
 8004474:	2000010d 	.word	0x2000010d
 8004478:	200000d2 	.word	0x200000d2

0800447c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_MspInit+0x78>)
{
 800447e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	619a      	str	r2, [r3, #24]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004490:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004492:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004494:	f7fd f968 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004498:	2200      	movs	r2, #0
 800449a:	4611      	mov	r1, r2
 800449c:	f06f 000b 	mvn.w	r0, #11
 80044a0:	f7fd f974 	bl	800178c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80044a4:	2200      	movs	r2, #0
 80044a6:	4611      	mov	r1, r2
 80044a8:	f06f 000a 	mvn.w	r0, #10
 80044ac:	f7fd f96e 	bl	800178c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80044b0:	2200      	movs	r2, #0
 80044b2:	4611      	mov	r1, r2
 80044b4:	f06f 0009 	mvn.w	r0, #9
 80044b8:	f7fd f968 	bl	800178c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80044bc:	2200      	movs	r2, #0
 80044be:	4611      	mov	r1, r2
 80044c0:	f06f 0004 	mvn.w	r0, #4
 80044c4:	f7fd f962 	bl	800178c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80044c8:	2200      	movs	r2, #0
 80044ca:	4611      	mov	r1, r2
 80044cc:	f06f 0003 	mvn.w	r0, #3
 80044d0:	f7fd f95c 	bl	800178c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80044d4:	2200      	movs	r2, #0
 80044d6:	4611      	mov	r1, r2
 80044d8:	f06f 0001 	mvn.w	r0, #1
 80044dc:	f7fd f956 	bl	800178c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80044e0:	2200      	movs	r2, #0
 80044e2:	4611      	mov	r1, r2
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	f7fd f950 	bl	800178c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ec:	b003      	add	sp, #12
 80044ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000

080044f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044f8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80044fa:	6803      	ldr	r3, [r0, #0]
 80044fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8004500:	b086      	sub	sp, #24
 8004502:	4606      	mov	r6, r0
  if(hadc->Instance==ADC1)
 8004504:	d139      	bne.n	800457a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004506:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800450a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PC3     ------> ADC1_IN9
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800450e:	2403      	movs	r4, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004510:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004512:	481b      	ldr	r0, [pc, #108]	; (8004580 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004514:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004518:	615a      	str	r2, [r3, #20]
 800451a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800451c:	9402      	str	r4, [sp, #8]
    __HAL_RCC_ADC12_CLK_ENABLE();
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2500      	movs	r5, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004526:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800452a:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800452c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800452e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004530:	f7fd fa72 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004534:	4813      	ldr	r0, [pc, #76]	; (8004584 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004536:	9401      	str	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004538:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800453a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	9503      	str	r5, [sp, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800453e:	4c12      	ldr	r4, [pc, #72]	; (8004588 <HAL_ADC_MspInit+0x90>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004540:	f7fd fa6a 	bl	8001a18 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004546:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004548:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004554:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800455a:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800455c:	2320      	movs	r3, #32
 800455e:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004560:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004566:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004568:	f7fd f978 	bl	800185c <HAL_DMA_Init>
 800456c:	b118      	cbz	r0, 8004576 <HAL_ADC_MspInit+0x7e>
    {
      _Error_Handler(__FILE__, __LINE__);
 800456e:	217a      	movs	r1, #122	; 0x7a
 8004570:	4807      	ldr	r0, [pc, #28]	; (8004590 <HAL_ADC_MspInit+0x98>)
 8004572:	f7ff fdac 	bl	80040ce <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004576:	63f4      	str	r4, [r6, #60]	; 0x3c
 8004578:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800457a:	b006      	add	sp, #24
 800457c:	bd70      	pop	{r4, r5, r6, pc}
 800457e:	bf00      	nop
 8004580:	48000800 	.word	0x48000800
 8004584:	48000400 	.word	0x48000400
 8004588:	20000248 	.word	0x20000248
 800458c:	40020008 	.word	0x40020008
 8004590:	080052c2 	.word	0x080052c2

08004594 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004594:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8004596:	6803      	ldr	r3, [r0, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d115      	bne.n	80045ca <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800459e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045a2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	61da      	str	r2, [r3, #28]
 80045ac:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045ae:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045b6:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045b8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045ba:	f7fd f8e7 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045be:	201c      	movs	r0, #28
 80045c0:	f7fd f918 	bl	80017f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80045c4:	b007      	add	sp, #28
 80045c6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 80045ca:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <HAL_TIM_Base_MspInit+0x6c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d1f9      	bne.n	80045c4 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <HAL_TIM_Base_MspInit+0x70>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <HAL_TIM_Base_MspInit+0x74>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	f042 0202 	orr.w	r2, r2, #2
 80045da:	61da      	str	r2, [r3, #28]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045e6:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045ea:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ee:	2302      	movs	r3, #2
 80045f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045f8:	f7fd fa0e 	bl	8001a18 <HAL_GPIO_Init>
}
 80045fc:	e7e2      	b.n	80045c4 <HAL_TIM_Base_MspInit+0x30>
 80045fe:	bf00      	nop
 8004600:	40000400 	.word	0x40000400
 8004604:	40021000 	.word	0x40021000
 8004608:	48000800 	.word	0x48000800

0800460c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800460c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800460e:	6802      	ldr	r2, [r0, #0]
 8004610:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_UART_MspInit+0x54>)
 8004612:	429a      	cmp	r2, r3
{
 8004614:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8004616:	d120      	bne.n	800465a <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004618:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800461e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004620:	4810      	ldr	r0, [pc, #64]	; (8004664 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004626:	619a      	str	r2, [r3, #24]
 8004628:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 800462c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004634:	2330      	movs	r3, #48	; 0x30
 8004636:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800463c:	2303      	movs	r3, #3
 800463e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004640:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004642:	2307      	movs	r3, #7
 8004644:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004646:	f7fd f9e7 	bl	8001a18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800464a:	2025      	movs	r0, #37	; 0x25
 800464c:	4622      	mov	r2, r4
 800464e:	4621      	mov	r1, r4
 8004650:	f7fd f89c 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004654:	2025      	movs	r0, #37	; 0x25
 8004656:	f7fd f8cd 	bl	80017f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800465a:	b006      	add	sp, #24
 800465c:	bd10      	pop	{r4, pc}
 800465e:	bf00      	nop
 8004660:	40013800 	.word	0x40013800
 8004664:	48000800 	.word	0x48000800

08004668 <SVC_Handler>:
 8004668:	4770      	bx	lr

0800466a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800466a:	4770      	bx	lr

0800466c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800466c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800466e:	f7fc fc61 	bl	8000f34 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004672:	f7fd f8ee 	bl	8001852 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tim2_flag = 1;
 8004676:	4b02      	ldr	r3, [pc, #8]	; (8004680 <SysTick_Handler+0x14>)
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	bd08      	pop	{r3, pc}
 800467e:	bf00      	nop
 8004680:	200000b4 	.word	0x200000b4

08004684 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004684:	4801      	ldr	r0, [pc, #4]	; (800468c <DMA1_Channel1_IRQHandler+0x8>)
 8004686:	f7fd b97e 	b.w	8001986 <HAL_DMA_IRQHandler>
 800468a:	bf00      	nop
 800468c:	20000248 	.word	0x20000248

08004690 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <TIM2_IRQHandler+0x8>)
 8004692:	f7fd bee4 	b.w	800245e <HAL_TIM_IRQHandler>
 8004696:	bf00      	nop
 8004698:	2000028c 	.word	0x2000028c

0800469c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <USART1_IRQHandler+0x8>)
 800469e:	f7fe bd25 	b.w	80030ec <HAL_UART_IRQHandler>
 80046a2:	bf00      	nop
 80046a4:	200001d8 	.word	0x200001d8

080046a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046a8:	4915      	ldr	r1, [pc, #84]	; (8004700 <SystemInit+0x58>)
 80046aa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80046ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <SystemInit+0x5c>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80046c0:	6858      	ldr	r0, [r3, #4]
 80046c2:	4a11      	ldr	r2, [pc, #68]	; (8004708 <SystemInit+0x60>)
 80046c4:	4002      	ands	r2, r0
 80046c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80046ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046d2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046da:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80046e2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	f022 020f 	bic.w	r2, r2, #15
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80046ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046ee:	4a07      	ldr	r2, [pc, #28]	; (800470c <SystemInit+0x64>)
 80046f0:	4002      	ands	r2, r0
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80046f4:	2200      	movs	r2, #0
 80046f6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046fc:	608b      	str	r3, [r1, #8]
 80046fe:	4770      	bx	lr
 8004700:	e000ed00 	.word	0xe000ed00
 8004704:	40021000 	.word	0x40021000
 8004708:	f87fc00c 	.word	0xf87fc00c
 800470c:	ff00fccc 	.word	0xff00fccc

08004710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004748 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004714:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004716:	e003      	b.n	8004720 <LoopCopyDataInit>

08004718 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800471a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800471c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800471e:	3104      	adds	r1, #4

08004720 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004720:	480b      	ldr	r0, [pc, #44]	; (8004750 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004724:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004726:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004728:	d3f6      	bcc.n	8004718 <CopyDataInit>
	ldr	r2, =_sbss
 800472a:	4a0b      	ldr	r2, [pc, #44]	; (8004758 <LoopForever+0x12>)
	b	LoopFillZerobss
 800472c:	e002      	b.n	8004734 <LoopFillZerobss>

0800472e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800472e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004730:	f842 3b04 	str.w	r3, [r2], #4

08004734 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <LoopForever+0x16>)
	cmp	r2, r3
 8004736:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004738:	d3f9      	bcc.n	800472e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800473a:	f7ff ffb5 	bl	80046a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800473e:	f000 f819 	bl	8004774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004742:	f7ff fe43 	bl	80043cc <main>

08004746 <LoopForever>:

LoopForever:
    b LoopForever
 8004746:	e7fe      	b.n	8004746 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004748:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800474c:	0800534c 	.word	0x0800534c
	ldr	r0, =_sdata
 8004750:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004754:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 8004758:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 800475c:	200002d8 	.word	0x200002d8

08004760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004760:	e7fe      	b.n	8004760 <ADC1_2_IRQHandler>
	...

08004764 <calloc>:
 8004764:	4b02      	ldr	r3, [pc, #8]	; (8004770 <calloc+0xc>)
 8004766:	460a      	mov	r2, r1
 8004768:	4601      	mov	r1, r0
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	f000 b841 	b.w	80047f2 <_calloc_r>
 8004770:	20000030 	.word	0x20000030

08004774 <__libc_init_array>:
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	4e0d      	ldr	r6, [pc, #52]	; (80047ac <__libc_init_array+0x38>)
 8004778:	4c0d      	ldr	r4, [pc, #52]	; (80047b0 <__libc_init_array+0x3c>)
 800477a:	1ba4      	subs	r4, r4, r6
 800477c:	10a4      	asrs	r4, r4, #2
 800477e:	2500      	movs	r5, #0
 8004780:	42a5      	cmp	r5, r4
 8004782:	d109      	bne.n	8004798 <__libc_init_array+0x24>
 8004784:	4e0b      	ldr	r6, [pc, #44]	; (80047b4 <__libc_init_array+0x40>)
 8004786:	4c0c      	ldr	r4, [pc, #48]	; (80047b8 <__libc_init_array+0x44>)
 8004788:	f000 fd74 	bl	8005274 <_init>
 800478c:	1ba4      	subs	r4, r4, r6
 800478e:	10a4      	asrs	r4, r4, #2
 8004790:	2500      	movs	r5, #0
 8004792:	42a5      	cmp	r5, r4
 8004794:	d105      	bne.n	80047a2 <__libc_init_array+0x2e>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800479c:	4798      	blx	r3
 800479e:	3501      	adds	r5, #1
 80047a0:	e7ee      	b.n	8004780 <__libc_init_array+0xc>
 80047a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047a6:	4798      	blx	r3
 80047a8:	3501      	adds	r5, #1
 80047aa:	e7f2      	b.n	8004792 <__libc_init_array+0x1e>
 80047ac:	08005344 	.word	0x08005344
 80047b0:	08005344 	.word	0x08005344
 80047b4:	08005344 	.word	0x08005344
 80047b8:	08005348 	.word	0x08005348

080047bc <malloc>:
 80047bc:	4b02      	ldr	r3, [pc, #8]	; (80047c8 <malloc+0xc>)
 80047be:	4601      	mov	r1, r0
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	f000 b873 	b.w	80048ac <_malloc_r>
 80047c6:	bf00      	nop
 80047c8:	20000030 	.word	0x20000030

080047cc <memcpy>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	1e43      	subs	r3, r0, #1
 80047d0:	440a      	add	r2, r1
 80047d2:	4291      	cmp	r1, r2
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xc>
 80047d6:	bd10      	pop	{r4, pc}
 80047d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e0:	e7f7      	b.n	80047d2 <memcpy+0x6>

080047e2 <memset>:
 80047e2:	4402      	add	r2, r0
 80047e4:	4603      	mov	r3, r0
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d100      	bne.n	80047ec <memset+0xa>
 80047ea:	4770      	bx	lr
 80047ec:	f803 1b01 	strb.w	r1, [r3], #1
 80047f0:	e7f9      	b.n	80047e6 <memset+0x4>

080047f2 <_calloc_r>:
 80047f2:	b538      	push	{r3, r4, r5, lr}
 80047f4:	fb02 f401 	mul.w	r4, r2, r1
 80047f8:	4621      	mov	r1, r4
 80047fa:	f000 f857 	bl	80048ac <_malloc_r>
 80047fe:	4605      	mov	r5, r0
 8004800:	b118      	cbz	r0, 800480a <_calloc_r+0x18>
 8004802:	4622      	mov	r2, r4
 8004804:	2100      	movs	r1, #0
 8004806:	f7ff ffec 	bl	80047e2 <memset>
 800480a:	4628      	mov	r0, r5
 800480c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004810 <_free_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4605      	mov	r5, r0
 8004814:	2900      	cmp	r1, #0
 8004816:	d045      	beq.n	80048a4 <_free_r+0x94>
 8004818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800481c:	1f0c      	subs	r4, r1, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	bfb8      	it	lt
 8004822:	18e4      	addlt	r4, r4, r3
 8004824:	f000 f8d4 	bl	80049d0 <__malloc_lock>
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <_free_r+0x98>)
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	4610      	mov	r0, r2
 800482e:	b933      	cbnz	r3, 800483e <_free_r+0x2e>
 8004830:	6063      	str	r3, [r4, #4]
 8004832:	6014      	str	r4, [r2, #0]
 8004834:	4628      	mov	r0, r5
 8004836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800483a:	f000 b8ca 	b.w	80049d2 <__malloc_unlock>
 800483e:	42a3      	cmp	r3, r4
 8004840:	d90c      	bls.n	800485c <_free_r+0x4c>
 8004842:	6821      	ldr	r1, [r4, #0]
 8004844:	1862      	adds	r2, r4, r1
 8004846:	4293      	cmp	r3, r2
 8004848:	bf04      	itt	eq
 800484a:	681a      	ldreq	r2, [r3, #0]
 800484c:	685b      	ldreq	r3, [r3, #4]
 800484e:	6063      	str	r3, [r4, #4]
 8004850:	bf04      	itt	eq
 8004852:	1852      	addeq	r2, r2, r1
 8004854:	6022      	streq	r2, [r4, #0]
 8004856:	6004      	str	r4, [r0, #0]
 8004858:	e7ec      	b.n	8004834 <_free_r+0x24>
 800485a:	4613      	mov	r3, r2
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	b10a      	cbz	r2, 8004864 <_free_r+0x54>
 8004860:	42a2      	cmp	r2, r4
 8004862:	d9fa      	bls.n	800485a <_free_r+0x4a>
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	1858      	adds	r0, r3, r1
 8004868:	42a0      	cmp	r0, r4
 800486a:	d10b      	bne.n	8004884 <_free_r+0x74>
 800486c:	6820      	ldr	r0, [r4, #0]
 800486e:	4401      	add	r1, r0
 8004870:	1858      	adds	r0, r3, r1
 8004872:	4282      	cmp	r2, r0
 8004874:	6019      	str	r1, [r3, #0]
 8004876:	d1dd      	bne.n	8004834 <_free_r+0x24>
 8004878:	6810      	ldr	r0, [r2, #0]
 800487a:	6852      	ldr	r2, [r2, #4]
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	4401      	add	r1, r0
 8004880:	6019      	str	r1, [r3, #0]
 8004882:	e7d7      	b.n	8004834 <_free_r+0x24>
 8004884:	d902      	bls.n	800488c <_free_r+0x7c>
 8004886:	230c      	movs	r3, #12
 8004888:	602b      	str	r3, [r5, #0]
 800488a:	e7d3      	b.n	8004834 <_free_r+0x24>
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	1821      	adds	r1, r4, r0
 8004890:	428a      	cmp	r2, r1
 8004892:	bf04      	itt	eq
 8004894:	6811      	ldreq	r1, [r2, #0]
 8004896:	6852      	ldreq	r2, [r2, #4]
 8004898:	6062      	str	r2, [r4, #4]
 800489a:	bf04      	itt	eq
 800489c:	1809      	addeq	r1, r1, r0
 800489e:	6021      	streq	r1, [r4, #0]
 80048a0:	605c      	str	r4, [r3, #4]
 80048a2:	e7c7      	b.n	8004834 <_free_r+0x24>
 80048a4:	bd38      	pop	{r3, r4, r5, pc}
 80048a6:	bf00      	nop
 80048a8:	20000134 	.word	0x20000134

080048ac <_malloc_r>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	1ccd      	adds	r5, r1, #3
 80048b0:	f025 0503 	bic.w	r5, r5, #3
 80048b4:	3508      	adds	r5, #8
 80048b6:	2d0c      	cmp	r5, #12
 80048b8:	bf38      	it	cc
 80048ba:	250c      	movcc	r5, #12
 80048bc:	2d00      	cmp	r5, #0
 80048be:	4606      	mov	r6, r0
 80048c0:	db01      	blt.n	80048c6 <_malloc_r+0x1a>
 80048c2:	42a9      	cmp	r1, r5
 80048c4:	d903      	bls.n	80048ce <_malloc_r+0x22>
 80048c6:	230c      	movs	r3, #12
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	2000      	movs	r0, #0
 80048cc:	bd70      	pop	{r4, r5, r6, pc}
 80048ce:	f000 f87f 	bl	80049d0 <__malloc_lock>
 80048d2:	4a23      	ldr	r2, [pc, #140]	; (8004960 <_malloc_r+0xb4>)
 80048d4:	6814      	ldr	r4, [r2, #0]
 80048d6:	4621      	mov	r1, r4
 80048d8:	b991      	cbnz	r1, 8004900 <_malloc_r+0x54>
 80048da:	4c22      	ldr	r4, [pc, #136]	; (8004964 <_malloc_r+0xb8>)
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	b91b      	cbnz	r3, 80048e8 <_malloc_r+0x3c>
 80048e0:	4630      	mov	r0, r6
 80048e2:	f000 f841 	bl	8004968 <_sbrk_r>
 80048e6:	6020      	str	r0, [r4, #0]
 80048e8:	4629      	mov	r1, r5
 80048ea:	4630      	mov	r0, r6
 80048ec:	f000 f83c 	bl	8004968 <_sbrk_r>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d126      	bne.n	8004942 <_malloc_r+0x96>
 80048f4:	230c      	movs	r3, #12
 80048f6:	6033      	str	r3, [r6, #0]
 80048f8:	4630      	mov	r0, r6
 80048fa:	f000 f86a 	bl	80049d2 <__malloc_unlock>
 80048fe:	e7e4      	b.n	80048ca <_malloc_r+0x1e>
 8004900:	680b      	ldr	r3, [r1, #0]
 8004902:	1b5b      	subs	r3, r3, r5
 8004904:	d41a      	bmi.n	800493c <_malloc_r+0x90>
 8004906:	2b0b      	cmp	r3, #11
 8004908:	d90f      	bls.n	800492a <_malloc_r+0x7e>
 800490a:	600b      	str	r3, [r1, #0]
 800490c:	50cd      	str	r5, [r1, r3]
 800490e:	18cc      	adds	r4, r1, r3
 8004910:	4630      	mov	r0, r6
 8004912:	f000 f85e 	bl	80049d2 <__malloc_unlock>
 8004916:	f104 000b 	add.w	r0, r4, #11
 800491a:	1d23      	adds	r3, r4, #4
 800491c:	f020 0007 	bic.w	r0, r0, #7
 8004920:	1ac3      	subs	r3, r0, r3
 8004922:	d01b      	beq.n	800495c <_malloc_r+0xb0>
 8004924:	425a      	negs	r2, r3
 8004926:	50e2      	str	r2, [r4, r3]
 8004928:	bd70      	pop	{r4, r5, r6, pc}
 800492a:	428c      	cmp	r4, r1
 800492c:	bf0d      	iteet	eq
 800492e:	6863      	ldreq	r3, [r4, #4]
 8004930:	684b      	ldrne	r3, [r1, #4]
 8004932:	6063      	strne	r3, [r4, #4]
 8004934:	6013      	streq	r3, [r2, #0]
 8004936:	bf18      	it	ne
 8004938:	460c      	movne	r4, r1
 800493a:	e7e9      	b.n	8004910 <_malloc_r+0x64>
 800493c:	460c      	mov	r4, r1
 800493e:	6849      	ldr	r1, [r1, #4]
 8004940:	e7ca      	b.n	80048d8 <_malloc_r+0x2c>
 8004942:	1cc4      	adds	r4, r0, #3
 8004944:	f024 0403 	bic.w	r4, r4, #3
 8004948:	42a0      	cmp	r0, r4
 800494a:	d005      	beq.n	8004958 <_malloc_r+0xac>
 800494c:	1a21      	subs	r1, r4, r0
 800494e:	4630      	mov	r0, r6
 8004950:	f000 f80a 	bl	8004968 <_sbrk_r>
 8004954:	3001      	adds	r0, #1
 8004956:	d0cd      	beq.n	80048f4 <_malloc_r+0x48>
 8004958:	6025      	str	r5, [r4, #0]
 800495a:	e7d9      	b.n	8004910 <_malloc_r+0x64>
 800495c:	bd70      	pop	{r4, r5, r6, pc}
 800495e:	bf00      	nop
 8004960:	20000134 	.word	0x20000134
 8004964:	20000138 	.word	0x20000138

08004968 <_sbrk_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4c06      	ldr	r4, [pc, #24]	; (8004984 <_sbrk_r+0x1c>)
 800496c:	2300      	movs	r3, #0
 800496e:	4605      	mov	r5, r0
 8004970:	4608      	mov	r0, r1
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	f000 fc70 	bl	8005258 <_sbrk>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_sbrk_r+0x1a>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	b103      	cbz	r3, 8004982 <_sbrk_r+0x1a>
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	200002d4 	.word	0x200002d4

08004988 <siprintf>:
 8004988:	b40e      	push	{r1, r2, r3}
 800498a:	b500      	push	{lr}
 800498c:	b09c      	sub	sp, #112	; 0x70
 800498e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004992:	ab1d      	add	r3, sp, #116	; 0x74
 8004994:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004998:	9002      	str	r0, [sp, #8]
 800499a:	9006      	str	r0, [sp, #24]
 800499c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049a0:	480a      	ldr	r0, [pc, #40]	; (80049cc <siprintf+0x44>)
 80049a2:	9104      	str	r1, [sp, #16]
 80049a4:	9107      	str	r1, [sp, #28]
 80049a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ae:	f8ad 1016 	strh.w	r1, [sp, #22]
 80049b2:	6800      	ldr	r0, [r0, #0]
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	a902      	add	r1, sp, #8
 80049b8:	f000 f868 	bl	8004a8c <_svfiprintf_r>
 80049bc:	9b02      	ldr	r3, [sp, #8]
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	b01c      	add	sp, #112	; 0x70
 80049c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c8:	b003      	add	sp, #12
 80049ca:	4770      	bx	lr
 80049cc:	20000030 	.word	0x20000030

080049d0 <__malloc_lock>:
 80049d0:	4770      	bx	lr

080049d2 <__malloc_unlock>:
 80049d2:	4770      	bx	lr

080049d4 <__ssputs_r>:
 80049d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	688e      	ldr	r6, [r1, #8]
 80049da:	429e      	cmp	r6, r3
 80049dc:	4682      	mov	sl, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	4691      	mov	r9, r2
 80049e2:	4698      	mov	r8, r3
 80049e4:	d835      	bhi.n	8004a52 <__ssputs_r+0x7e>
 80049e6:	898a      	ldrh	r2, [r1, #12]
 80049e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049ec:	d031      	beq.n	8004a52 <__ssputs_r+0x7e>
 80049ee:	6825      	ldr	r5, [r4, #0]
 80049f0:	6909      	ldr	r1, [r1, #16]
 80049f2:	1a6f      	subs	r7, r5, r1
 80049f4:	6965      	ldr	r5, [r4, #20]
 80049f6:	2302      	movs	r3, #2
 80049f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a00:	f108 0301 	add.w	r3, r8, #1
 8004a04:	443b      	add	r3, r7
 8004a06:	429d      	cmp	r5, r3
 8004a08:	bf38      	it	cc
 8004a0a:	461d      	movcc	r5, r3
 8004a0c:	0553      	lsls	r3, r2, #21
 8004a0e:	d531      	bpl.n	8004a74 <__ssputs_r+0xa0>
 8004a10:	4629      	mov	r1, r5
 8004a12:	f7ff ff4b 	bl	80048ac <_malloc_r>
 8004a16:	4606      	mov	r6, r0
 8004a18:	b950      	cbnz	r0, 8004a30 <__ssputs_r+0x5c>
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	f8ca 3000 	str.w	r3, [sl]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a30:	463a      	mov	r2, r7
 8004a32:	6921      	ldr	r1, [r4, #16]
 8004a34:	f7ff feca 	bl	80047cc <memcpy>
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	81a3      	strh	r3, [r4, #12]
 8004a44:	6126      	str	r6, [r4, #16]
 8004a46:	6165      	str	r5, [r4, #20]
 8004a48:	443e      	add	r6, r7
 8004a4a:	1bed      	subs	r5, r5, r7
 8004a4c:	6026      	str	r6, [r4, #0]
 8004a4e:	60a5      	str	r5, [r4, #8]
 8004a50:	4646      	mov	r6, r8
 8004a52:	4546      	cmp	r6, r8
 8004a54:	bf28      	it	cs
 8004a56:	4646      	movcs	r6, r8
 8004a58:	4632      	mov	r2, r6
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	f000 fa9f 	bl	8004fa0 <memmove>
 8004a62:	68a3      	ldr	r3, [r4, #8]
 8004a64:	1b9b      	subs	r3, r3, r6
 8004a66:	60a3      	str	r3, [r4, #8]
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	441e      	add	r6, r3
 8004a6c:	6026      	str	r6, [r4, #0]
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a74:	462a      	mov	r2, r5
 8004a76:	f000 faad 	bl	8004fd4 <_realloc_r>
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d1e1      	bne.n	8004a44 <__ssputs_r+0x70>
 8004a80:	6921      	ldr	r1, [r4, #16]
 8004a82:	4650      	mov	r0, sl
 8004a84:	f7ff fec4 	bl	8004810 <_free_r>
 8004a88:	e7c7      	b.n	8004a1a <__ssputs_r+0x46>
	...

08004a8c <_svfiprintf_r>:
 8004a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a90:	b09d      	sub	sp, #116	; 0x74
 8004a92:	4680      	mov	r8, r0
 8004a94:	9303      	str	r3, [sp, #12]
 8004a96:	898b      	ldrh	r3, [r1, #12]
 8004a98:	061c      	lsls	r4, r3, #24
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	d50f      	bpl.n	8004ac0 <_svfiprintf_r+0x34>
 8004aa0:	690b      	ldr	r3, [r1, #16]
 8004aa2:	b96b      	cbnz	r3, 8004ac0 <_svfiprintf_r+0x34>
 8004aa4:	2140      	movs	r1, #64	; 0x40
 8004aa6:	f7ff ff01 	bl	80048ac <_malloc_r>
 8004aaa:	6028      	str	r0, [r5, #0]
 8004aac:	6128      	str	r0, [r5, #16]
 8004aae:	b928      	cbnz	r0, 8004abc <_svfiprintf_r+0x30>
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	f8c8 3000 	str.w	r3, [r8]
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aba:	e0c5      	b.n	8004c48 <_svfiprintf_r+0x1bc>
 8004abc:	2340      	movs	r3, #64	; 0x40
 8004abe:	616b      	str	r3, [r5, #20]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aca:	2330      	movs	r3, #48	; 0x30
 8004acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ad0:	f04f 0b01 	mov.w	fp, #1
 8004ad4:	4637      	mov	r7, r6
 8004ad6:	463c      	mov	r4, r7
 8004ad8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d13c      	bne.n	8004b5a <_svfiprintf_r+0xce>
 8004ae0:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ae4:	d00b      	beq.n	8004afe <_svfiprintf_r+0x72>
 8004ae6:	4653      	mov	r3, sl
 8004ae8:	4632      	mov	r2, r6
 8004aea:	4629      	mov	r1, r5
 8004aec:	4640      	mov	r0, r8
 8004aee:	f7ff ff71 	bl	80049d4 <__ssputs_r>
 8004af2:	3001      	adds	r0, #1
 8004af4:	f000 80a3 	beq.w	8004c3e <_svfiprintf_r+0x1b2>
 8004af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004afa:	4453      	add	r3, sl
 8004afc:	9309      	str	r3, [sp, #36]	; 0x24
 8004afe:	783b      	ldrb	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 809c 	beq.w	8004c3e <_svfiprintf_r+0x1b2>
 8004b06:	2300      	movs	r3, #0
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0c:	9304      	str	r3, [sp, #16]
 8004b0e:	9307      	str	r3, [sp, #28]
 8004b10:	9205      	str	r2, [sp, #20]
 8004b12:	9306      	str	r3, [sp, #24]
 8004b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b18:	931a      	str	r3, [sp, #104]	; 0x68
 8004b1a:	2205      	movs	r2, #5
 8004b1c:	7821      	ldrb	r1, [r4, #0]
 8004b1e:	4850      	ldr	r0, [pc, #320]	; (8004c60 <_svfiprintf_r+0x1d4>)
 8004b20:	f7fb fb5e 	bl	80001e0 <memchr>
 8004b24:	1c67      	adds	r7, r4, #1
 8004b26:	9b04      	ldr	r3, [sp, #16]
 8004b28:	b9d8      	cbnz	r0, 8004b62 <_svfiprintf_r+0xd6>
 8004b2a:	06d9      	lsls	r1, r3, #27
 8004b2c:	bf44      	itt	mi
 8004b2e:	2220      	movmi	r2, #32
 8004b30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b34:	071a      	lsls	r2, r3, #28
 8004b36:	bf44      	itt	mi
 8004b38:	222b      	movmi	r2, #43	; 0x2b
 8004b3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b3e:	7822      	ldrb	r2, [r4, #0]
 8004b40:	2a2a      	cmp	r2, #42	; 0x2a
 8004b42:	d016      	beq.n	8004b72 <_svfiprintf_r+0xe6>
 8004b44:	9a07      	ldr	r2, [sp, #28]
 8004b46:	2100      	movs	r1, #0
 8004b48:	200a      	movs	r0, #10
 8004b4a:	4627      	mov	r7, r4
 8004b4c:	3401      	adds	r4, #1
 8004b4e:	783b      	ldrb	r3, [r7, #0]
 8004b50:	3b30      	subs	r3, #48	; 0x30
 8004b52:	2b09      	cmp	r3, #9
 8004b54:	d951      	bls.n	8004bfa <_svfiprintf_r+0x16e>
 8004b56:	b1c9      	cbz	r1, 8004b8c <_svfiprintf_r+0x100>
 8004b58:	e011      	b.n	8004b7e <_svfiprintf_r+0xf2>
 8004b5a:	2b25      	cmp	r3, #37	; 0x25
 8004b5c:	d0c0      	beq.n	8004ae0 <_svfiprintf_r+0x54>
 8004b5e:	4627      	mov	r7, r4
 8004b60:	e7b9      	b.n	8004ad6 <_svfiprintf_r+0x4a>
 8004b62:	4a3f      	ldr	r2, [pc, #252]	; (8004c60 <_svfiprintf_r+0x1d4>)
 8004b64:	1a80      	subs	r0, r0, r2
 8004b66:	fa0b f000 	lsl.w	r0, fp, r0
 8004b6a:	4318      	orrs	r0, r3
 8004b6c:	9004      	str	r0, [sp, #16]
 8004b6e:	463c      	mov	r4, r7
 8004b70:	e7d3      	b.n	8004b1a <_svfiprintf_r+0x8e>
 8004b72:	9a03      	ldr	r2, [sp, #12]
 8004b74:	1d11      	adds	r1, r2, #4
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	9103      	str	r1, [sp, #12]
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	db01      	blt.n	8004b82 <_svfiprintf_r+0xf6>
 8004b7e:	9207      	str	r2, [sp, #28]
 8004b80:	e004      	b.n	8004b8c <_svfiprintf_r+0x100>
 8004b82:	4252      	negs	r2, r2
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	9207      	str	r2, [sp, #28]
 8004b8a:	9304      	str	r3, [sp, #16]
 8004b8c:	783b      	ldrb	r3, [r7, #0]
 8004b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b90:	d10e      	bne.n	8004bb0 <_svfiprintf_r+0x124>
 8004b92:	787b      	ldrb	r3, [r7, #1]
 8004b94:	2b2a      	cmp	r3, #42	; 0x2a
 8004b96:	f107 0101 	add.w	r1, r7, #1
 8004b9a:	d132      	bne.n	8004c02 <_svfiprintf_r+0x176>
 8004b9c:	9b03      	ldr	r3, [sp, #12]
 8004b9e:	1d1a      	adds	r2, r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	9203      	str	r2, [sp, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bfb8      	it	lt
 8004ba8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bac:	3702      	adds	r7, #2
 8004bae:	9305      	str	r3, [sp, #20]
 8004bb0:	4c2c      	ldr	r4, [pc, #176]	; (8004c64 <_svfiprintf_r+0x1d8>)
 8004bb2:	7839      	ldrb	r1, [r7, #0]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fb fb12 	bl	80001e0 <memchr>
 8004bbc:	b138      	cbz	r0, 8004bce <_svfiprintf_r+0x142>
 8004bbe:	2340      	movs	r3, #64	; 0x40
 8004bc0:	1b00      	subs	r0, r0, r4
 8004bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8004bc6:	9b04      	ldr	r3, [sp, #16]
 8004bc8:	4303      	orrs	r3, r0
 8004bca:	9304      	str	r3, [sp, #16]
 8004bcc:	3701      	adds	r7, #1
 8004bce:	7839      	ldrb	r1, [r7, #0]
 8004bd0:	4825      	ldr	r0, [pc, #148]	; (8004c68 <_svfiprintf_r+0x1dc>)
 8004bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bd6:	2206      	movs	r2, #6
 8004bd8:	1c7e      	adds	r6, r7, #1
 8004bda:	f7fb fb01 	bl	80001e0 <memchr>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d035      	beq.n	8004c4e <_svfiprintf_r+0x1c2>
 8004be2:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <_svfiprintf_r+0x1e0>)
 8004be4:	b9fb      	cbnz	r3, 8004c26 <_svfiprintf_r+0x19a>
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	3307      	adds	r3, #7
 8004bea:	f023 0307 	bic.w	r3, r3, #7
 8004bee:	3308      	adds	r3, #8
 8004bf0:	9303      	str	r3, [sp, #12]
 8004bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf4:	444b      	add	r3, r9
 8004bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf8:	e76c      	b.n	8004ad4 <_svfiprintf_r+0x48>
 8004bfa:	fb00 3202 	mla	r2, r0, r2, r3
 8004bfe:	2101      	movs	r1, #1
 8004c00:	e7a3      	b.n	8004b4a <_svfiprintf_r+0xbe>
 8004c02:	2300      	movs	r3, #0
 8004c04:	9305      	str	r3, [sp, #20]
 8004c06:	4618      	mov	r0, r3
 8004c08:	240a      	movs	r4, #10
 8004c0a:	460f      	mov	r7, r1
 8004c0c:	3101      	adds	r1, #1
 8004c0e:	783a      	ldrb	r2, [r7, #0]
 8004c10:	3a30      	subs	r2, #48	; 0x30
 8004c12:	2a09      	cmp	r2, #9
 8004c14:	d903      	bls.n	8004c1e <_svfiprintf_r+0x192>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ca      	beq.n	8004bb0 <_svfiprintf_r+0x124>
 8004c1a:	9005      	str	r0, [sp, #20]
 8004c1c:	e7c8      	b.n	8004bb0 <_svfiprintf_r+0x124>
 8004c1e:	fb04 2000 	mla	r0, r4, r0, r2
 8004c22:	2301      	movs	r3, #1
 8004c24:	e7f1      	b.n	8004c0a <_svfiprintf_r+0x17e>
 8004c26:	ab03      	add	r3, sp, #12
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	462a      	mov	r2, r5
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <_svfiprintf_r+0x1e4>)
 8004c2e:	a904      	add	r1, sp, #16
 8004c30:	4640      	mov	r0, r8
 8004c32:	f3af 8000 	nop.w
 8004c36:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c3a:	4681      	mov	r9, r0
 8004c3c:	d1d9      	bne.n	8004bf2 <_svfiprintf_r+0x166>
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	065b      	lsls	r3, r3, #25
 8004c42:	f53f af38 	bmi.w	8004ab6 <_svfiprintf_r+0x2a>
 8004c46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c48:	b01d      	add	sp, #116	; 0x74
 8004c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4e:	ab03      	add	r3, sp, #12
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	462a      	mov	r2, r5
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <_svfiprintf_r+0x1e4>)
 8004c56:	a904      	add	r1, sp, #16
 8004c58:	4640      	mov	r0, r8
 8004c5a:	f000 f881 	bl	8004d60 <_printf_i>
 8004c5e:	e7ea      	b.n	8004c36 <_svfiprintf_r+0x1aa>
 8004c60:	08005304 	.word	0x08005304
 8004c64:	0800530a 	.word	0x0800530a
 8004c68:	0800530e 	.word	0x0800530e
 8004c6c:	00000000 	.word	0x00000000
 8004c70:	080049d5 	.word	0x080049d5

08004c74 <_printf_common>:
 8004c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	4691      	mov	r9, r2
 8004c7a:	461f      	mov	r7, r3
 8004c7c:	688a      	ldr	r2, [r1, #8]
 8004c7e:	690b      	ldr	r3, [r1, #16]
 8004c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c84:	4293      	cmp	r3, r2
 8004c86:	bfb8      	it	lt
 8004c88:	4613      	movlt	r3, r2
 8004c8a:	f8c9 3000 	str.w	r3, [r9]
 8004c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c92:	4606      	mov	r6, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	b112      	cbz	r2, 8004c9e <_printf_common+0x2a>
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f8c9 3000 	str.w	r3, [r9]
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	0699      	lsls	r1, r3, #26
 8004ca2:	bf42      	ittt	mi
 8004ca4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ca8:	3302      	addmi	r3, #2
 8004caa:	f8c9 3000 	strmi.w	r3, [r9]
 8004cae:	6825      	ldr	r5, [r4, #0]
 8004cb0:	f015 0506 	ands.w	r5, r5, #6
 8004cb4:	d107      	bne.n	8004cc6 <_printf_common+0x52>
 8004cb6:	f104 0a19 	add.w	sl, r4, #25
 8004cba:	68e3      	ldr	r3, [r4, #12]
 8004cbc:	f8d9 2000 	ldr.w	r2, [r9]
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	429d      	cmp	r5, r3
 8004cc4:	db29      	blt.n	8004d1a <_printf_common+0xa6>
 8004cc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004cca:	6822      	ldr	r2, [r4, #0]
 8004ccc:	3300      	adds	r3, #0
 8004cce:	bf18      	it	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	0692      	lsls	r2, r2, #26
 8004cd4:	d42e      	bmi.n	8004d34 <_printf_common+0xc0>
 8004cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cda:	4639      	mov	r1, r7
 8004cdc:	4630      	mov	r0, r6
 8004cde:	47c0      	blx	r8
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d021      	beq.n	8004d28 <_printf_common+0xb4>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	68e5      	ldr	r5, [r4, #12]
 8004ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8004cec:	f003 0306 	and.w	r3, r3, #6
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	bf08      	it	eq
 8004cf4:	1aad      	subeq	r5, r5, r2
 8004cf6:	68a3      	ldr	r3, [r4, #8]
 8004cf8:	6922      	ldr	r2, [r4, #16]
 8004cfa:	bf0c      	ite	eq
 8004cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d00:	2500      	movne	r5, #0
 8004d02:	4293      	cmp	r3, r2
 8004d04:	bfc4      	itt	gt
 8004d06:	1a9b      	subgt	r3, r3, r2
 8004d08:	18ed      	addgt	r5, r5, r3
 8004d0a:	f04f 0900 	mov.w	r9, #0
 8004d0e:	341a      	adds	r4, #26
 8004d10:	454d      	cmp	r5, r9
 8004d12:	d11b      	bne.n	8004d4c <_printf_common+0xd8>
 8004d14:	2000      	movs	r0, #0
 8004d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4639      	mov	r1, r7
 8004d20:	4630      	mov	r0, r6
 8004d22:	47c0      	blx	r8
 8004d24:	3001      	adds	r0, #1
 8004d26:	d103      	bne.n	8004d30 <_printf_common+0xbc>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d30:	3501      	adds	r5, #1
 8004d32:	e7c2      	b.n	8004cba <_printf_common+0x46>
 8004d34:	18e1      	adds	r1, r4, r3
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	2030      	movs	r0, #48	; 0x30
 8004d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d3e:	4422      	add	r2, r4
 8004d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d48:	3302      	adds	r3, #2
 8004d4a:	e7c4      	b.n	8004cd6 <_printf_common+0x62>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4622      	mov	r2, r4
 8004d50:	4639      	mov	r1, r7
 8004d52:	4630      	mov	r0, r6
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0e6      	beq.n	8004d28 <_printf_common+0xb4>
 8004d5a:	f109 0901 	add.w	r9, r9, #1
 8004d5e:	e7d7      	b.n	8004d10 <_printf_common+0x9c>

08004d60 <_printf_i>:
 8004d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d64:	4617      	mov	r7, r2
 8004d66:	7e0a      	ldrb	r2, [r1, #24]
 8004d68:	b085      	sub	sp, #20
 8004d6a:	2a6e      	cmp	r2, #110	; 0x6e
 8004d6c:	4698      	mov	r8, r3
 8004d6e:	4606      	mov	r6, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d74:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004d78:	f000 80bc 	beq.w	8004ef4 <_printf_i+0x194>
 8004d7c:	d81a      	bhi.n	8004db4 <_printf_i+0x54>
 8004d7e:	2a63      	cmp	r2, #99	; 0x63
 8004d80:	d02e      	beq.n	8004de0 <_printf_i+0x80>
 8004d82:	d80a      	bhi.n	8004d9a <_printf_i+0x3a>
 8004d84:	2a00      	cmp	r2, #0
 8004d86:	f000 80c8 	beq.w	8004f1a <_printf_i+0x1ba>
 8004d8a:	2a58      	cmp	r2, #88	; 0x58
 8004d8c:	f000 808a 	beq.w	8004ea4 <_printf_i+0x144>
 8004d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d94:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004d98:	e02a      	b.n	8004df0 <_printf_i+0x90>
 8004d9a:	2a64      	cmp	r2, #100	; 0x64
 8004d9c:	d001      	beq.n	8004da2 <_printf_i+0x42>
 8004d9e:	2a69      	cmp	r2, #105	; 0x69
 8004da0:	d1f6      	bne.n	8004d90 <_printf_i+0x30>
 8004da2:	6821      	ldr	r1, [r4, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004daa:	d023      	beq.n	8004df4 <_printf_i+0x94>
 8004dac:	1d11      	adds	r1, r2, #4
 8004dae:	6019      	str	r1, [r3, #0]
 8004db0:	6813      	ldr	r3, [r2, #0]
 8004db2:	e027      	b.n	8004e04 <_printf_i+0xa4>
 8004db4:	2a73      	cmp	r2, #115	; 0x73
 8004db6:	f000 80b4 	beq.w	8004f22 <_printf_i+0x1c2>
 8004dba:	d808      	bhi.n	8004dce <_printf_i+0x6e>
 8004dbc:	2a6f      	cmp	r2, #111	; 0x6f
 8004dbe:	d02a      	beq.n	8004e16 <_printf_i+0xb6>
 8004dc0:	2a70      	cmp	r2, #112	; 0x70
 8004dc2:	d1e5      	bne.n	8004d90 <_printf_i+0x30>
 8004dc4:	680a      	ldr	r2, [r1, #0]
 8004dc6:	f042 0220 	orr.w	r2, r2, #32
 8004dca:	600a      	str	r2, [r1, #0]
 8004dcc:	e003      	b.n	8004dd6 <_printf_i+0x76>
 8004dce:	2a75      	cmp	r2, #117	; 0x75
 8004dd0:	d021      	beq.n	8004e16 <_printf_i+0xb6>
 8004dd2:	2a78      	cmp	r2, #120	; 0x78
 8004dd4:	d1dc      	bne.n	8004d90 <_printf_i+0x30>
 8004dd6:	2278      	movs	r2, #120	; 0x78
 8004dd8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004ddc:	496e      	ldr	r1, [pc, #440]	; (8004f98 <_printf_i+0x238>)
 8004dde:	e064      	b.n	8004eaa <_printf_i+0x14a>
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004de6:	1d11      	adds	r1, r2, #4
 8004de8:	6019      	str	r1, [r3, #0]
 8004dea:	6813      	ldr	r3, [r2, #0]
 8004dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0a3      	b.n	8004f3c <_printf_i+0x1dc>
 8004df4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004df8:	f102 0104 	add.w	r1, r2, #4
 8004dfc:	6019      	str	r1, [r3, #0]
 8004dfe:	d0d7      	beq.n	8004db0 <_printf_i+0x50>
 8004e00:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da03      	bge.n	8004e10 <_printf_i+0xb0>
 8004e08:	222d      	movs	r2, #45	; 0x2d
 8004e0a:	425b      	negs	r3, r3
 8004e0c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e10:	4962      	ldr	r1, [pc, #392]	; (8004f9c <_printf_i+0x23c>)
 8004e12:	220a      	movs	r2, #10
 8004e14:	e017      	b.n	8004e46 <_printf_i+0xe6>
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e1e:	d003      	beq.n	8004e28 <_printf_i+0xc8>
 8004e20:	1d08      	adds	r0, r1, #4
 8004e22:	6018      	str	r0, [r3, #0]
 8004e24:	680b      	ldr	r3, [r1, #0]
 8004e26:	e006      	b.n	8004e36 <_printf_i+0xd6>
 8004e28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e2c:	f101 0004 	add.w	r0, r1, #4
 8004e30:	6018      	str	r0, [r3, #0]
 8004e32:	d0f7      	beq.n	8004e24 <_printf_i+0xc4>
 8004e34:	880b      	ldrh	r3, [r1, #0]
 8004e36:	4959      	ldr	r1, [pc, #356]	; (8004f9c <_printf_i+0x23c>)
 8004e38:	2a6f      	cmp	r2, #111	; 0x6f
 8004e3a:	bf14      	ite	ne
 8004e3c:	220a      	movne	r2, #10
 8004e3e:	2208      	moveq	r2, #8
 8004e40:	2000      	movs	r0, #0
 8004e42:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004e46:	6865      	ldr	r5, [r4, #4]
 8004e48:	60a5      	str	r5, [r4, #8]
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	f2c0 809c 	blt.w	8004f88 <_printf_i+0x228>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	f020 0004 	bic.w	r0, r0, #4
 8004e56:	6020      	str	r0, [r4, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d13f      	bne.n	8004edc <_printf_i+0x17c>
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	f040 8095 	bne.w	8004f8c <_printf_i+0x22c>
 8004e62:	4675      	mov	r5, lr
 8004e64:	2a08      	cmp	r2, #8
 8004e66:	d10b      	bne.n	8004e80 <_printf_i+0x120>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	07da      	lsls	r2, r3, #31
 8004e6c:	d508      	bpl.n	8004e80 <_printf_i+0x120>
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	6862      	ldr	r2, [r4, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	bfde      	ittt	le
 8004e76:	2330      	movle	r3, #48	; 0x30
 8004e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e80:	ebae 0305 	sub.w	r3, lr, r5
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	f8cd 8000 	str.w	r8, [sp]
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	aa03      	add	r2, sp, #12
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4630      	mov	r0, r6
 8004e92:	f7ff feef 	bl	8004c74 <_printf_common>
 8004e96:	3001      	adds	r0, #1
 8004e98:	d155      	bne.n	8004f46 <_printf_i+0x1e6>
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	b005      	add	sp, #20
 8004ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ea4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004ea8:	493c      	ldr	r1, [pc, #240]	; (8004f9c <_printf_i+0x23c>)
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004eb2:	f100 0504 	add.w	r5, r0, #4
 8004eb6:	601d      	str	r5, [r3, #0]
 8004eb8:	d001      	beq.n	8004ebe <_printf_i+0x15e>
 8004eba:	6803      	ldr	r3, [r0, #0]
 8004ebc:	e002      	b.n	8004ec4 <_printf_i+0x164>
 8004ebe:	0655      	lsls	r5, r2, #25
 8004ec0:	d5fb      	bpl.n	8004eba <_printf_i+0x15a>
 8004ec2:	8803      	ldrh	r3, [r0, #0]
 8004ec4:	07d0      	lsls	r0, r2, #31
 8004ec6:	bf44      	itt	mi
 8004ec8:	f042 0220 	orrmi.w	r2, r2, #32
 8004ecc:	6022      	strmi	r2, [r4, #0]
 8004ece:	b91b      	cbnz	r3, 8004ed8 <_printf_i+0x178>
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	f022 0220 	bic.w	r2, r2, #32
 8004ed6:	6022      	str	r2, [r4, #0]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	e7b1      	b.n	8004e40 <_printf_i+0xe0>
 8004edc:	4675      	mov	r5, lr
 8004ede:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ee2:	fb02 3310 	mls	r3, r2, r0, r3
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004eec:	4603      	mov	r3, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d1f5      	bne.n	8004ede <_printf_i+0x17e>
 8004ef2:	e7b7      	b.n	8004e64 <_printf_i+0x104>
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	6949      	ldr	r1, [r1, #20]
 8004efa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004efe:	d004      	beq.n	8004f0a <_printf_i+0x1aa>
 8004f00:	1d10      	adds	r0, r2, #4
 8004f02:	6018      	str	r0, [r3, #0]
 8004f04:	6813      	ldr	r3, [r2, #0]
 8004f06:	6019      	str	r1, [r3, #0]
 8004f08:	e007      	b.n	8004f1a <_printf_i+0x1ba>
 8004f0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f0e:	f102 0004 	add.w	r0, r2, #4
 8004f12:	6018      	str	r0, [r3, #0]
 8004f14:	6813      	ldr	r3, [r2, #0]
 8004f16:	d0f6      	beq.n	8004f06 <_printf_i+0x1a6>
 8004f18:	8019      	strh	r1, [r3, #0]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	6123      	str	r3, [r4, #16]
 8004f1e:	4675      	mov	r5, lr
 8004f20:	e7b1      	b.n	8004e86 <_printf_i+0x126>
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	1d11      	adds	r1, r2, #4
 8004f26:	6019      	str	r1, [r3, #0]
 8004f28:	6815      	ldr	r5, [r2, #0]
 8004f2a:	6862      	ldr	r2, [r4, #4]
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f7fb f956 	bl	80001e0 <memchr>
 8004f34:	b108      	cbz	r0, 8004f3a <_printf_i+0x1da>
 8004f36:	1b40      	subs	r0, r0, r5
 8004f38:	6060      	str	r0, [r4, #4]
 8004f3a:	6863      	ldr	r3, [r4, #4]
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f44:	e79f      	b.n	8004e86 <_printf_i+0x126>
 8004f46:	6923      	ldr	r3, [r4, #16]
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4639      	mov	r1, r7
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	47c0      	blx	r8
 8004f50:	3001      	adds	r0, #1
 8004f52:	d0a2      	beq.n	8004e9a <_printf_i+0x13a>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	079b      	lsls	r3, r3, #30
 8004f58:	d507      	bpl.n	8004f6a <_printf_i+0x20a>
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	f104 0919 	add.w	r9, r4, #25
 8004f60:	68e3      	ldr	r3, [r4, #12]
 8004f62:	9a03      	ldr	r2, [sp, #12]
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	429d      	cmp	r5, r3
 8004f68:	db05      	blt.n	8004f76 <_printf_i+0x216>
 8004f6a:	68e0      	ldr	r0, [r4, #12]
 8004f6c:	9b03      	ldr	r3, [sp, #12]
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	bfb8      	it	lt
 8004f72:	4618      	movlt	r0, r3
 8004f74:	e793      	b.n	8004e9e <_printf_i+0x13e>
 8004f76:	2301      	movs	r3, #1
 8004f78:	464a      	mov	r2, r9
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	47c0      	blx	r8
 8004f80:	3001      	adds	r0, #1
 8004f82:	d08a      	beq.n	8004e9a <_printf_i+0x13a>
 8004f84:	3501      	adds	r5, #1
 8004f86:	e7eb      	b.n	8004f60 <_printf_i+0x200>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1a7      	bne.n	8004edc <_printf_i+0x17c>
 8004f8c:	780b      	ldrb	r3, [r1, #0]
 8004f8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f96:	e765      	b.n	8004e64 <_printf_i+0x104>
 8004f98:	08005326 	.word	0x08005326
 8004f9c:	08005315 	.word	0x08005315

08004fa0 <memmove>:
 8004fa0:	4288      	cmp	r0, r1
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	eb01 0302 	add.w	r3, r1, r2
 8004fa8:	d803      	bhi.n	8004fb2 <memmove+0x12>
 8004faa:	1e42      	subs	r2, r0, #1
 8004fac:	4299      	cmp	r1, r3
 8004fae:	d10c      	bne.n	8004fca <memmove+0x2a>
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	d2f9      	bcs.n	8004faa <memmove+0xa>
 8004fb6:	1881      	adds	r1, r0, r2
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	42d3      	cmn	r3, r2
 8004fbc:	d100      	bne.n	8004fc0 <memmove+0x20>
 8004fbe:	bd10      	pop	{r4, pc}
 8004fc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004fc8:	e7f7      	b.n	8004fba <memmove+0x1a>
 8004fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fce:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004fd2:	e7eb      	b.n	8004fac <memmove+0xc>

08004fd4 <_realloc_r>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	4607      	mov	r7, r0
 8004fd8:	4614      	mov	r4, r2
 8004fda:	460e      	mov	r6, r1
 8004fdc:	b921      	cbnz	r1, 8004fe8 <_realloc_r+0x14>
 8004fde:	4611      	mov	r1, r2
 8004fe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fe4:	f7ff bc62 	b.w	80048ac <_malloc_r>
 8004fe8:	b922      	cbnz	r2, 8004ff4 <_realloc_r+0x20>
 8004fea:	f7ff fc11 	bl	8004810 <_free_r>
 8004fee:	4625      	mov	r5, r4
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff4:	f000 f814 	bl	8005020 <_malloc_usable_size_r>
 8004ff8:	4284      	cmp	r4, r0
 8004ffa:	d90f      	bls.n	800501c <_realloc_r+0x48>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4638      	mov	r0, r7
 8005000:	f7ff fc54 	bl	80048ac <_malloc_r>
 8005004:	4605      	mov	r5, r0
 8005006:	2800      	cmp	r0, #0
 8005008:	d0f2      	beq.n	8004ff0 <_realloc_r+0x1c>
 800500a:	4631      	mov	r1, r6
 800500c:	4622      	mov	r2, r4
 800500e:	f7ff fbdd 	bl	80047cc <memcpy>
 8005012:	4631      	mov	r1, r6
 8005014:	4638      	mov	r0, r7
 8005016:	f7ff fbfb 	bl	8004810 <_free_r>
 800501a:	e7e9      	b.n	8004ff0 <_realloc_r+0x1c>
 800501c:	4635      	mov	r5, r6
 800501e:	e7e7      	b.n	8004ff0 <_realloc_r+0x1c>

08005020 <_malloc_usable_size_r>:
 8005020:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005024:	2800      	cmp	r0, #0
 8005026:	f1a0 0004 	sub.w	r0, r0, #4
 800502a:	bfbc      	itt	lt
 800502c:	580b      	ldrlt	r3, [r1, r0]
 800502e:	18c0      	addlt	r0, r0, r3
 8005030:	4770      	bx	lr
	...

08005034 <sqrt>:
 8005034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005038:	ed2d 8b02 	vpush	{d8}
 800503c:	b08b      	sub	sp, #44	; 0x2c
 800503e:	ec55 4b10 	vmov	r4, r5, d0
 8005042:	f000 f851 	bl	80050e8 <__ieee754_sqrt>
 8005046:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <sqrt+0xac>)
 8005048:	eeb0 8a40 	vmov.f32	s16, s0
 800504c:	eef0 8a60 	vmov.f32	s17, s1
 8005050:	f993 6000 	ldrsb.w	r6, [r3]
 8005054:	1c73      	adds	r3, r6, #1
 8005056:	d02a      	beq.n	80050ae <sqrt+0x7a>
 8005058:	4622      	mov	r2, r4
 800505a:	462b      	mov	r3, r5
 800505c:	4620      	mov	r0, r4
 800505e:	4629      	mov	r1, r5
 8005060:	f7fb fd60 	bl	8000b24 <__aeabi_dcmpun>
 8005064:	4607      	mov	r7, r0
 8005066:	bb10      	cbnz	r0, 80050ae <sqrt+0x7a>
 8005068:	f04f 0800 	mov.w	r8, #0
 800506c:	f04f 0900 	mov.w	r9, #0
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	4620      	mov	r0, r4
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb fd2c 	bl	8000ad4 <__aeabi_dcmplt>
 800507c:	b1b8      	cbz	r0, 80050ae <sqrt+0x7a>
 800507e:	2301      	movs	r3, #1
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <sqrt+0xb0>)
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	9708      	str	r7, [sp, #32]
 8005088:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800508c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005090:	b9b6      	cbnz	r6, 80050c0 <sqrt+0x8c>
 8005092:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005096:	4668      	mov	r0, sp
 8005098:	f000 f8d6 	bl	8005248 <matherr>
 800509c:	b1d0      	cbz	r0, 80050d4 <sqrt+0xa0>
 800509e:	9b08      	ldr	r3, [sp, #32]
 80050a0:	b11b      	cbz	r3, 80050aa <sqrt+0x76>
 80050a2:	f000 f8d3 	bl	800524c <__errno>
 80050a6:	9b08      	ldr	r3, [sp, #32]
 80050a8:	6003      	str	r3, [r0, #0]
 80050aa:	ed9d 8b06 	vldr	d8, [sp, #24]
 80050ae:	eeb0 0a48 	vmov.f32	s0, s16
 80050b2:	eef0 0a68 	vmov.f32	s1, s17
 80050b6:	b00b      	add	sp, #44	; 0x2c
 80050b8:	ecbd 8b02 	vpop	{d8}
 80050bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	4640      	mov	r0, r8
 80050c6:	4649      	mov	r1, r9
 80050c8:	f7fb fbbc 	bl	8000844 <__aeabi_ddiv>
 80050cc:	2e02      	cmp	r6, #2
 80050ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80050d2:	d1e0      	bne.n	8005096 <sqrt+0x62>
 80050d4:	f000 f8ba 	bl	800524c <__errno>
 80050d8:	2321      	movs	r3, #33	; 0x21
 80050da:	6003      	str	r3, [r0, #0]
 80050dc:	e7df      	b.n	800509e <sqrt+0x6a>
 80050de:	bf00      	nop
 80050e0:	20000094 	.word	0x20000094
 80050e4:	08005337 	.word	0x08005337

080050e8 <__ieee754_sqrt>:
 80050e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ec:	ec55 4b10 	vmov	r4, r5, d0
 80050f0:	4e54      	ldr	r6, [pc, #336]	; (8005244 <__ieee754_sqrt+0x15c>)
 80050f2:	43ae      	bics	r6, r5
 80050f4:	ee10 0a10 	vmov	r0, s0
 80050f8:	462b      	mov	r3, r5
 80050fa:	462a      	mov	r2, r5
 80050fc:	4621      	mov	r1, r4
 80050fe:	d113      	bne.n	8005128 <__ieee754_sqrt+0x40>
 8005100:	ee10 2a10 	vmov	r2, s0
 8005104:	462b      	mov	r3, r5
 8005106:	ee10 0a10 	vmov	r0, s0
 800510a:	4629      	mov	r1, r5
 800510c:	f7fb fa70 	bl	80005f0 <__aeabi_dmul>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb f8b8 	bl	800028c <__adddf3>
 800511c:	4604      	mov	r4, r0
 800511e:	460d      	mov	r5, r1
 8005120:	ec45 4b10 	vmov	d0, r4, r5
 8005124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005128:	2d00      	cmp	r5, #0
 800512a:	dc10      	bgt.n	800514e <__ieee754_sqrt+0x66>
 800512c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005130:	4330      	orrs	r0, r6
 8005132:	d0f5      	beq.n	8005120 <__ieee754_sqrt+0x38>
 8005134:	b15d      	cbz	r5, 800514e <__ieee754_sqrt+0x66>
 8005136:	ee10 2a10 	vmov	r2, s0
 800513a:	462b      	mov	r3, r5
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb f8a2 	bl	8000288 <__aeabi_dsub>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	f7fb fb7c 	bl	8000844 <__aeabi_ddiv>
 800514c:	e7e6      	b.n	800511c <__ieee754_sqrt+0x34>
 800514e:	151b      	asrs	r3, r3, #20
 8005150:	d10c      	bne.n	800516c <__ieee754_sqrt+0x84>
 8005152:	2a00      	cmp	r2, #0
 8005154:	d06d      	beq.n	8005232 <__ieee754_sqrt+0x14a>
 8005156:	2000      	movs	r0, #0
 8005158:	02d6      	lsls	r6, r2, #11
 800515a:	d56e      	bpl.n	800523a <__ieee754_sqrt+0x152>
 800515c:	1e44      	subs	r4, r0, #1
 800515e:	1b1b      	subs	r3, r3, r4
 8005160:	f1c0 0420 	rsb	r4, r0, #32
 8005164:	fa21 f404 	lsr.w	r4, r1, r4
 8005168:	4322      	orrs	r2, r4
 800516a:	4081      	lsls	r1, r0
 800516c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005170:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005174:	07dd      	lsls	r5, r3, #31
 8005176:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800517a:	bf42      	ittt	mi
 800517c:	0052      	lslmi	r2, r2, #1
 800517e:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8005182:	0049      	lslmi	r1, r1, #1
 8005184:	1058      	asrs	r0, r3, #1
 8005186:	2500      	movs	r5, #0
 8005188:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800518c:	441a      	add	r2, r3
 800518e:	0049      	lsls	r1, r1, #1
 8005190:	2316      	movs	r3, #22
 8005192:	462c      	mov	r4, r5
 8005194:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005198:	19a7      	adds	r7, r4, r6
 800519a:	4297      	cmp	r7, r2
 800519c:	bfde      	ittt	le
 800519e:	1bd2      	suble	r2, r2, r7
 80051a0:	19bc      	addle	r4, r7, r6
 80051a2:	19ad      	addle	r5, r5, r6
 80051a4:	0052      	lsls	r2, r2, #1
 80051a6:	3b01      	subs	r3, #1
 80051a8:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80051ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80051b0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80051b4:	d1f0      	bne.n	8005198 <__ieee754_sqrt+0xb0>
 80051b6:	f04f 0e20 	mov.w	lr, #32
 80051ba:	469c      	mov	ip, r3
 80051bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80051c0:	42a2      	cmp	r2, r4
 80051c2:	eb06 070c 	add.w	r7, r6, ip
 80051c6:	dc02      	bgt.n	80051ce <__ieee754_sqrt+0xe6>
 80051c8:	d112      	bne.n	80051f0 <__ieee754_sqrt+0x108>
 80051ca:	428f      	cmp	r7, r1
 80051cc:	d810      	bhi.n	80051f0 <__ieee754_sqrt+0x108>
 80051ce:	2f00      	cmp	r7, #0
 80051d0:	eb07 0c06 	add.w	ip, r7, r6
 80051d4:	da34      	bge.n	8005240 <__ieee754_sqrt+0x158>
 80051d6:	f1bc 0f00 	cmp.w	ip, #0
 80051da:	db31      	blt.n	8005240 <__ieee754_sqrt+0x158>
 80051dc:	f104 0801 	add.w	r8, r4, #1
 80051e0:	1b12      	subs	r2, r2, r4
 80051e2:	428f      	cmp	r7, r1
 80051e4:	bf88      	it	hi
 80051e6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80051ea:	1bc9      	subs	r1, r1, r7
 80051ec:	4433      	add	r3, r6
 80051ee:	4644      	mov	r4, r8
 80051f0:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80051f4:	f1be 0e01 	subs.w	lr, lr, #1
 80051f8:	443a      	add	r2, r7
 80051fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80051fe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005202:	d1dd      	bne.n	80051c0 <__ieee754_sqrt+0xd8>
 8005204:	430a      	orrs	r2, r1
 8005206:	d006      	beq.n	8005216 <__ieee754_sqrt+0x12e>
 8005208:	1c5c      	adds	r4, r3, #1
 800520a:	bf13      	iteet	ne
 800520c:	3301      	addne	r3, #1
 800520e:	3501      	addeq	r5, #1
 8005210:	4673      	moveq	r3, lr
 8005212:	f023 0301 	bicne.w	r3, r3, #1
 8005216:	106a      	asrs	r2, r5, #1
 8005218:	085b      	lsrs	r3, r3, #1
 800521a:	07e9      	lsls	r1, r5, #31
 800521c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005220:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005224:	bf48      	it	mi
 8005226:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800522a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800522e:	461c      	mov	r4, r3
 8005230:	e776      	b.n	8005120 <__ieee754_sqrt+0x38>
 8005232:	0aca      	lsrs	r2, r1, #11
 8005234:	3b15      	subs	r3, #21
 8005236:	0549      	lsls	r1, r1, #21
 8005238:	e78b      	b.n	8005152 <__ieee754_sqrt+0x6a>
 800523a:	0052      	lsls	r2, r2, #1
 800523c:	3001      	adds	r0, #1
 800523e:	e78b      	b.n	8005158 <__ieee754_sqrt+0x70>
 8005240:	46a0      	mov	r8, r4
 8005242:	e7cd      	b.n	80051e0 <__ieee754_sqrt+0xf8>
 8005244:	7ff00000 	.word	0x7ff00000

08005248 <matherr>:
 8005248:	2000      	movs	r0, #0
 800524a:	4770      	bx	lr

0800524c <__errno>:
 800524c:	4b01      	ldr	r3, [pc, #4]	; (8005254 <__errno+0x8>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20000030 	.word	0x20000030

08005258 <_sbrk>:
 8005258:	4b04      	ldr	r3, [pc, #16]	; (800526c <_sbrk+0x14>)
 800525a:	6819      	ldr	r1, [r3, #0]
 800525c:	4602      	mov	r2, r0
 800525e:	b909      	cbnz	r1, 8005264 <_sbrk+0xc>
 8005260:	4903      	ldr	r1, [pc, #12]	; (8005270 <_sbrk+0x18>)
 8005262:	6019      	str	r1, [r3, #0]
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	4402      	add	r2, r0
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	4770      	bx	lr
 800526c:	2000013c 	.word	0x2000013c
 8005270:	200002d8 	.word	0x200002d8

08005274 <_init>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr

08005280 <_fini>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr
