
C:\Users\labuser\Desktop\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007ae4  08007ae4  00017ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000022c  20000000  08007aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002022c  2**0
                  CONTENTS
  7 .bss          000003bc  20000230  20000230  00020230  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200005ec  200005ec  00020230  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000365ca  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005340  00000000  00000000  00056826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f330  00000000  00000000  0005bb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000de8  00000000  00000000  0006ae98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002c58  00000000  00000000  0006bc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00022c37  00000000  00000000  0006e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000150f3  00000000  00000000  0009150f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000aafbb  00000000  00000000  000a6602  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  001515bd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003400  00000000  00000000  0015163c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078f0 	.word	0x080078f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	080078f0 	.word	0x080078f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	d1ed      	bne.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_f2ulz>:
 8000dac:	b5d0      	push	{r4, r6, r7, lr}
 8000dae:	f7ff fbcb 	bl	8000548 <__aeabi_f2d>
 8000db2:	2200      	movs	r2, #0
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <__aeabi_f2ulz+0x44>)
 8000db6:	4606      	mov	r6, r0
 8000db8:	460f      	mov	r7, r1
 8000dba:	f7ff fc19 	bl	80005f0 <__aeabi_dmul>
 8000dbe:	f7ff fec7 	bl	8000b50 <__aeabi_d2uiz>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	f7ff fb9e 	bl	8000504 <__aeabi_ui2d>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <__aeabi_f2ulz+0x48>)
 8000dcc:	f7ff fc10 	bl	80005f0 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	4639      	mov	r1, r7
 8000dd8:	f7ff fa56 	bl	8000288 <__aeabi_dsub>
 8000ddc:	f7ff feb8 	bl	8000b50 <__aeabi_d2uiz>
 8000de0:	4623      	mov	r3, r4
 8000de2:	2200      	movs	r2, #0
 8000de4:	ea42 0200 	orr.w	r2, r2, r0
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	bdd0      	pop	{r4, r6, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	3df00000 	.word	0x3df00000
 8000df4:	41f00000 	.word	0x41f00000

08000df8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_InitTick+0x24>)
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <HAL_InitTick+0x28>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
{
 8000dfe:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
{
 8000e04:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000e06:	0998      	lsrs	r0, r3, #6
 8000e08:	f000 fca8 	bl	800175c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 fc60 	bl	80016d8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000e18:	2000      	movs	r0, #0
 8000e1a:	bd10      	pop	{r4, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	10624dd3 	.word	0x10624dd3

08000e24 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x20>)
{
 8000e26:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 fc3f 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_InitTick>
  HAL_MspInit();
 8000e3c:	f004 ff7a 	bl	8005d34 <HAL_MspInit>
}
 8000e40:	2000      	movs	r0, #0
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e48:	4a02      	ldr	r2, [pc, #8]	; (8000e54 <HAL_IncTick+0xc>)
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000328 	.word	0x20000328

08000e58 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <HAL_GetTick+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000328 	.word	0x20000328

08000e64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6a:	f7ff fff5 	bl	8000e58 <HAL_GetTick>
  uint32_t wait = Delay;
 8000e6e:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e70:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e72:	4605      	mov	r5, r0
  {
     wait++;
 8000e74:	bf18      	it	ne
 8000e76:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	1b40      	subs	r0, r0, r5
 8000e7e:	42a0      	cmp	r0, r4
 8000e80:	d3fa      	bcc.n	8000e78 <HAL_Delay+0x14>
  {
  }
}
 8000e82:	b003      	add	sp, #12
 8000e84:	bd30      	pop	{r4, r5, pc}
 8000e86:	bf00      	nop

08000e88 <HAL_ADC_ConvHalfCpltCallback>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e90:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000e92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000e9a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000ea2:	f7ff bff3 	b.w	8000e8c <HAL_ADC_ErrorCallback>
 8000ea6:	bf00      	nop

08000ea8 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000ea8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000eaa:	f7ff bfed 	b.w	8000e88 <HAL_ADC_ConvHalfCpltCallback>
 8000eae:	bf00      	nop

08000eb0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eb4:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000eb8:	d118      	bne.n	8000eec <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ebc:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ec2:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ec4:	68ca      	ldr	r2, [r1, #12]
 8000ec6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000eca:	d10c      	bne.n	8000ee6 <ADC_DMAConvCplt+0x36>
 8000ecc:	69da      	ldr	r2, [r3, #28]
 8000ece:	b952      	cbnz	r2, 8000ee6 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eda:	04d2      	lsls	r2, r2, #19
 8000edc:	d403      	bmi.n	8000ee6 <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ee0:	f042 0201 	orr.w	r2, r2, #1
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 bdb0 	b.w	8004a4c <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4718      	bx	r3
 8000ef2:	bf00      	nop

08000ef4 <HAL_ADC_Init>:
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8000efc:	2800      	cmp	r0, #0
 8000efe:	f000 8099 	beq.w	8001034 <HAL_ADC_Init+0x140>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f02:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f04:	f013 0310 	ands.w	r3, r3, #16
 8000f08:	4604      	mov	r4, r0
 8000f0a:	d117      	bne.n	8000f3c <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	f000 8083 	beq.w	800101a <HAL_ADC_Init+0x126>
 8000f14:	6802      	ldr	r2, [r0, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f16:	6891      	ldr	r1, [r2, #8]
 8000f18:	00c8      	lsls	r0, r1, #3
 8000f1a:	d572      	bpl.n	8001002 <HAL_ADC_Init+0x10e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f1c:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f1e:	0089      	lsls	r1, r1, #2
 8000f20:	d46f      	bmi.n	8001002 <HAL_ADC_Init+0x10e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f22:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000f24:	06cf      	lsls	r7, r1, #27
 8000f26:	d400      	bmi.n	8000f2a <HAL_ADC_Init+0x36>
 8000f28:	b163      	cbz	r3, 8000f44 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 8000f2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f2c:	f023 0312 	bic.w	r3, r3, #18
 8000f30:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8000f34:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8000f36:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000f38:	b003      	add	sp, #12
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f3e:	06db      	lsls	r3, r3, #27
 8000f40:	d4f3      	bmi.n	8000f2a <HAL_ADC_Init+0x36>
 8000f42:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f44:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000f46:	f010 0004 	ands.w	r0, r0, #4
 8000f4a:	d1ee      	bne.n	8000f2a <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8000f4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000f4e:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000f52:	f041 0102 	orr.w	r1, r1, #2
 8000f56:	6461      	str	r1, [r4, #68]	; 0x44
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f58:	6893      	ldr	r3, [r2, #8]
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f5a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f5e:	f003 0303 	and.w	r3, r3, #3
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f62:	f000 80a3 	beq.w	80010ac <HAL_ADC_Init+0x1b8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f66:	2b01      	cmp	r3, #1
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f68:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f6c:	f000 80a2 	beq.w	80010b4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f70:	688b      	ldr	r3, [r1, #8]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d05f      	beq.n	800103a <HAL_ADC_Init+0x146>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f7a:	4972      	ldr	r1, [pc, #456]	; (8001144 <HAL_ADC_Init+0x250>)
 8000f7c:	6865      	ldr	r5, [r4, #4]
 8000f7e:	688b      	ldr	r3, [r1, #8]
 8000f80:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f84:	432b      	orrs	r3, r5
 8000f86:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000f88:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8000f8a:	68e1      	ldr	r1, [r4, #12]
 8000f8c:	68a3      	ldr	r3, [r4, #8]
 8000f8e:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f90:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000f92:	2f01      	cmp	r7, #1
 8000f94:	ea43 0301 	orr.w	r3, r3, r1
 8000f98:	bf18      	it	ne
 8000f9a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8000f9e:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa2:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000fa4:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa8:	d078      	beq.n	800109c <HAL_ADC_Init+0x1a8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000faa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d002      	beq.n	8000fb6 <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fb6:	6893      	ldr	r3, [r2, #8]
 8000fb8:	f013 0f0c 	tst.w	r3, #12
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_ADC_Init+0xe2>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fbe:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000fc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000fc2:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fc4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000fc8:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fca:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000fce:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fd2:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000fd4:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 8000fd6:	68d5      	ldr	r5, [r2, #12]
 8000fd8:	4b5b      	ldr	r3, [pc, #364]	; (8001148 <HAL_ADC_Init+0x254>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fda:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000fdc:	402b      	ands	r3, r5
 8000fde:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fe0:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8000fe2:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fe4:	d06b      	beq.n	80010be <HAL_ADC_Init+0x1ca>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fe6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fe8:	f023 030f 	bic.w	r3, r3, #15
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ff4:	f023 0303 	bic.w	r3, r3, #3
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000ffe:	b003      	add	sp, #12
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8001002:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001004:	f023 0312 	bic.w	r3, r3, #18
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800100e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001016:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001018:	e787      	b.n	8000f2a <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 800101a:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800101c:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800101e:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8001020:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8001024:	f004 fec4 	bl	8005db0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001028:	6822      	ldr	r2, [r4, #0]
 800102a:	6893      	ldr	r3, [r2, #8]
 800102c:	00df      	lsls	r7, r3, #3
 800102e:	d508      	bpl.n	8001042 <HAL_ADC_Init+0x14e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	e770      	b.n	8000f16 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
}
 8001036:	b003      	add	sp, #12
 8001038:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800103a:	680b      	ldr	r3, [r1, #0]
 800103c:	07dd      	lsls	r5, r3, #31
 800103e:	d4a3      	bmi.n	8000f88 <HAL_ADC_Init+0x94>
 8001040:	e79b      	b.n	8000f7a <HAL_ADC_Init+0x86>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001042:	6893      	ldr	r3, [r2, #8]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d04b      	beq.n	80010e4 <HAL_ADC_Init+0x1f0>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800104c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800104e:	06dd      	lsls	r5, r3, #27
 8001050:	d4ee      	bmi.n	8001030 <HAL_ADC_Init+0x13c>
          ADC_STATE_CLR_SET(hadc->State,
 8001052:	6c61      	ldr	r1, [r4, #68]	; 0x44
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001054:	4b3d      	ldr	r3, [pc, #244]	; (800114c <HAL_ADC_Init+0x258>)
 8001056:	483e      	ldr	r0, [pc, #248]	; (8001150 <HAL_ADC_Init+0x25c>)
 8001058:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 800105a:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 800105e:	f021 0102 	bic.w	r1, r1, #2
 8001062:	f041 0102 	orr.w	r1, r1, #2
 8001066:	6461      	str	r1, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001068:	6891      	ldr	r1, [r2, #8]
 800106a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800106e:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001070:	fba0 1303 	umull	r1, r3, r0, r3
 8001074:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001076:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001078:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800107c:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800107e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001082:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001084:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001086:	9b01      	ldr	r3, [sp, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	f43f af44 	beq.w	8000f16 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800108e:	9b01      	ldr	r3, [sp, #4]
 8001090:	3b01      	subs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001094:	9b01      	ldr	r3, [sp, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <HAL_ADC_Init+0x19a>
 800109a:	e73c      	b.n	8000f16 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800109c:	b9be      	cbnz	r6, 80010ce <HAL_ADC_Init+0x1da>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800109e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010a0:	3b01      	subs	r3, #1
 80010a2:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 80010a6:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 80010aa:	e77e      	b.n	8000faa <HAL_ADC_Init+0xb6>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010ac:	2b01      	cmp	r3, #1
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010ae:	4929      	ldr	r1, [pc, #164]	; (8001154 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010b0:	f47f af5e 	bne.w	8000f70 <HAL_ADC_Init+0x7c>
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	07de      	lsls	r6, r3, #31
 80010b8:	f53f af66 	bmi.w	8000f88 <HAL_ADC_Init+0x94>
 80010bc:	e758      	b.n	8000f70 <HAL_ADC_Init+0x7c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80010c0:	6a23      	ldr	r3, [r4, #32]
 80010c2:	f021 010f 	bic.w	r1, r1, #15
 80010c6:	3b01      	subs	r3, #1
 80010c8:	430b      	orrs	r3, r1
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30
 80010cc:	e78f      	b.n	8000fee <HAL_ADC_Init+0xfa>
        ADC_STATE_CLR_SET(hadc->State,
 80010ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010d0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80010e2:	e762      	b.n	8000faa <HAL_ADC_Init+0xb6>
  if (ADC_IS_ENABLE(hadc) != RESET )
 80010e4:	6813      	ldr	r3, [r2, #0]
 80010e6:	07de      	lsls	r6, r3, #31
 80010e8:	d5b0      	bpl.n	800104c <HAL_ADC_Init+0x158>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80010ea:	6893      	ldr	r3, [r2, #8]
 80010ec:	f003 030d 	and.w	r3, r3, #13
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d00a      	beq.n	800110a <HAL_ADC_Init+0x216>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001104:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001106:	2301      	movs	r3, #1
 8001108:	e705      	b.n	8000f16 <HAL_ADC_Init+0x22>
      __HAL_ADC_DISABLE(hadc);
 800110a:	6893      	ldr	r3, [r2, #8]
 800110c:	2103      	movs	r1, #3
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	6093      	str	r3, [r2, #8]
 8001114:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8001116:	f7ff fe9f 	bl	8000e58 <HAL_GetTick>
 800111a:	4605      	mov	r5, r0
 800111c:	e004      	b.n	8001128 <HAL_ADC_Init+0x234>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800111e:	f7ff fe9b 	bl	8000e58 <HAL_GetTick>
 8001122:	1b40      	subs	r0, r0, r5
 8001124:	2802      	cmp	r0, #2
 8001126:	d809      	bhi.n	800113c <HAL_ADC_Init+0x248>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001128:	6822      	ldr	r2, [r4, #0]
 800112a:	6893      	ldr	r3, [r2, #8]
 800112c:	f013 0301 	ands.w	r3, r3, #1
 8001130:	d1f5      	bne.n	800111e <HAL_ADC_Init+0x22a>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001132:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001134:	06c9      	lsls	r1, r1, #27
 8001136:	f53f aeee 	bmi.w	8000f16 <HAL_ADC_Init+0x22>
 800113a:	e78a      	b.n	8001052 <HAL_ADC_Init+0x15e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800113c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800113e:	6822      	ldr	r2, [r4, #0]
 8001140:	e7d9      	b.n	80010f6 <HAL_ADC_Init+0x202>
 8001142:	bf00      	nop
 8001144:	50000300 	.word	0x50000300
 8001148:	fff0c007 	.word	0xfff0c007
 800114c:	20000000 	.word	0x20000000
 8001150:	431bde83 	.word	0x431bde83
 8001154:	50000100 	.word	0x50000100

08001158 <HAL_ADC_Start_DMA>:
{
 8001158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800115c:	6805      	ldr	r5, [r0, #0]
 800115e:	68ac      	ldr	r4, [r5, #8]
 8001160:	0767      	lsls	r7, r4, #29
 8001162:	d502      	bpl.n	800116a <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_BUSY;
 8001164:	2002      	movs	r0, #2
 8001166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 800116a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800116e:	2b01      	cmp	r3, #1
 8001170:	d0f8      	beq.n	8001164 <HAL_ADC_Start_DMA+0xc>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <HAL_ADC_Start_DMA+0x134>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4690      	mov	r8, r2
 8001178:	06de      	lsls	r6, r3, #27
    __HAL_LOCK(hadc);
 800117a:	f04f 0201 	mov.w	r2, #1
 800117e:	460f      	mov	r7, r1
 8001180:	4604      	mov	r4, r0
 8001182:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001186:	d005      	beq.n	8001194 <HAL_ADC_Start_DMA+0x3c>
      __HAL_UNLOCK(hadc);
 8001188:	2300      	movs	r3, #0
 800118a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 800118e:	2001      	movs	r0, #1
 8001190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001194:	68ab      	ldr	r3, [r5, #8]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	4293      	cmp	r3, r2
 800119c:	d00c      	beq.n	80011b8 <HAL_ADC_Start_DMA+0x60>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800119e:	68aa      	ldr	r2, [r5, #8]
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <HAL_ADC_Start_DMA+0x138>)
 80011a2:	421a      	tst	r2, r3
 80011a4:	d059      	beq.n	800125a <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80011b6:	e7e7      	b.n	8001188 <HAL_ADC_Start_DMA+0x30>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	07d8      	lsls	r0, r3, #31
 80011bc:	d5ef      	bpl.n	800119e <HAL_ADC_Start_DMA+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 80011be:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011c0:	4a32      	ldr	r2, [pc, #200]	; (800128c <HAL_ADC_Start_DMA+0x134>)
        ADC_STATE_CLR_SET(hadc->State,
 80011c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011d0:	6893      	ldr	r3, [r2, #8]
 80011d2:	f013 0f1f 	tst.w	r3, #31
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011d8:	d032      	beq.n	8001240 <HAL_ADC_Start_DMA+0xe8>
 80011da:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 80011de:	d02f      	beq.n	8001240 <HAL_ADC_Start_DMA+0xe8>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011e0:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <HAL_ADC_Start_DMA+0x13c>)
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011e6:	4295      	cmp	r5, r2
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011e8:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011ea:	d048      	beq.n	800127e <HAL_ADC_Start_DMA+0x126>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80011f0:	4929      	ldr	r1, [pc, #164]	; (8001298 <HAL_ADC_Start_DMA+0x140>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011f2:	4a2a      	ldr	r2, [pc, #168]	; (800129c <HAL_ADC_Start_DMA+0x144>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011f8:	bf1c      	itt	ne
 80011fa:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 80011fc:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001200:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 8001202:	2600      	movs	r6, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_ADC_Start_DMA+0x148>)
        __HAL_UNLOCK(hadc);
 8001206:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800120a:	62c3      	str	r3, [r0, #44]	; 0x2c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800120c:	231c      	movs	r3, #28
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800120e:	6281      	str	r1, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001210:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001212:	602b      	str	r3, [r5, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001214:	686b      	ldr	r3, [r5, #4]
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	606b      	str	r3, [r5, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800121c:	68e9      	ldr	r1, [r5, #12]
 800121e:	f041 0101 	orr.w	r1, r1, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001222:	4643      	mov	r3, r8
 8001224:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001226:	60e9      	str	r1, [r5, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001228:	f105 0140 	add.w	r1, r5, #64	; 0x40
 800122c:	f000 fafa 	bl	8001824 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	6893      	ldr	r3, [r2, #8]
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	4630      	mov	r0, r6
 800123a:	6093      	str	r3, [r2, #8]
 800123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001240:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001244:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001246:	68eb      	ldr	r3, [r5, #12]
 8001248:	019a      	lsls	r2, r3, #6
 800124a:	d5cf      	bpl.n	80011ec <HAL_ADC_Start_DMA+0x94>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800124c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800124e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001256:	6463      	str	r3, [r4, #68]	; 0x44
 8001258:	e7c8      	b.n	80011ec <HAL_ADC_Start_DMA+0x94>
    __HAL_ADC_ENABLE(hadc);
 800125a:	68ab      	ldr	r3, [r5, #8]
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();  
 8001262:	f7ff fdf9 	bl	8000e58 <HAL_GetTick>
 8001266:	4606      	mov	r6, r0
 8001268:	e004      	b.n	8001274 <HAL_ADC_Start_DMA+0x11c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800126a:	f7ff fdf5 	bl	8000e58 <HAL_GetTick>
 800126e:	1b80      	subs	r0, r0, r6
 8001270:	2802      	cmp	r0, #2
 8001272:	d898      	bhi.n	80011a6 <HAL_ADC_Start_DMA+0x4e>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001274:	6825      	ldr	r5, [r4, #0]
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	07d9      	lsls	r1, r3, #31
 800127a:	d5f6      	bpl.n	800126a <HAL_ADC_Start_DMA+0x112>
 800127c:	e79f      	b.n	80011be <HAL_ADC_Start_DMA+0x66>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800127e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	019b      	lsls	r3, r3, #6
 8001286:	d5b1      	bpl.n	80011ec <HAL_ADC_Start_DMA+0x94>
 8001288:	e7e0      	b.n	800124c <HAL_ADC_Start_DMA+0xf4>
 800128a:	bf00      	nop
 800128c:	50000300 	.word	0x50000300
 8001290:	8000003f 	.word	0x8000003f
 8001294:	50000100 	.word	0x50000100
 8001298:	08000eb1 	.word	0x08000eb1
 800129c:	08000e91 	.word	0x08000e91
 80012a0:	08000ea9 	.word	0x08000ea9

080012a4 <HAL_ADCEx_Calibration_Start>:
  __HAL_LOCK(hadc);
 80012a4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_ADCEx_Calibration_Start+0xc>
 80012ac:	2002      	movs	r0, #2
 80012ae:	4770      	bx	lr
  if (ADC_IS_ENABLE(hadc) != RESET )
 80012b0:	6803      	ldr	r3, [r0, #0]
{
 80012b2:	b570      	push	{r4, r5, r6, lr}
 80012b4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 80012b6:	6898      	ldr	r0, [r3, #8]
  __HAL_LOCK(hadc);
 80012b8:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET )
 80012ba:	f000 0003 	and.w	r0, r0, #3
 80012be:	4290      	cmp	r0, r2
 80012c0:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 80012c2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) != RESET )
 80012c6:	d023      	beq.n	8001310 <HAL_ADCEx_Calibration_Start+0x6c>
    hadc->State = HAL_ADC_STATE_READY;
 80012c8:	2201      	movs	r2, #1
 80012ca:	6462      	str	r2, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80012cc:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012ce:	2d01      	cmp	r5, #1
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80012d0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80012d4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012d6:	d03a      	beq.n	800134e <HAL_ADCEx_Calibration_Start+0xaa>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012de:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80012e0:	f7ff fdba 	bl	8000e58 <HAL_GetTick>
 80012e4:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012e6:	e004      	b.n	80012f2 <HAL_ADCEx_Calibration_Start+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012e8:	f7ff fdb6 	bl	8000e58 <HAL_GetTick>
 80012ec:	1b40      	subs	r0, r0, r5
 80012ee:	280a      	cmp	r0, #10
 80012f0:	d822      	bhi.n	8001338 <HAL_ADCEx_Calibration_Start+0x94>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dbf6      	blt.n	80012e8 <HAL_ADCEx_Calibration_Start+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80012fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012fc:	f023 0303 	bic.w	r3, r3, #3
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6463      	str	r3, [r4, #68]	; 0x44
 8001306:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001308:	2300      	movs	r3, #0
 800130a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 800130e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	07d1      	lsls	r1, r2, #31
 8001314:	d5d8      	bpl.n	80012c8 <HAL_ADCEx_Calibration_Start+0x24>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	f002 020d 	and.w	r2, r2, #13
 800131c:	2a01      	cmp	r2, #1
 800131e:	d01b      	beq.n	8001358 <HAL_ADCEx_Calibration_Start+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001328:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_UNLOCK(hadc);
 8001330:	2300      	movs	r3, #0
 8001332:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8001336:	bd70      	pop	{r4, r5, r6, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8001338:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800133a:	f023 0312 	bic.w	r3, r3, #18
 800133e:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8001342:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8001344:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001346:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800134a:	2001      	movs	r0, #1
 800134c:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	e7bf      	b.n	80012d8 <HAL_ADCEx_Calibration_Start+0x34>
      __HAL_ADC_DISABLE(hadc);
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	2103      	movs	r1, #3
 800135c:	f042 0202 	orr.w	r2, r2, #2
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001364:	f7ff fd78 	bl	8000e58 <HAL_GetTick>
 8001368:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	07d2      	lsls	r2, r2, #31
 8001370:	d5aa      	bpl.n	80012c8 <HAL_ADCEx_Calibration_Start+0x24>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001372:	f7ff fd71 	bl	8000e58 <HAL_GetTick>
 8001376:	1b80      	subs	r0, r0, r6
 8001378:	2802      	cmp	r0, #2
 800137a:	d9f6      	bls.n	800136a <HAL_ADCEx_Calibration_Start+0xc6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001384:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	64a3      	str	r3, [r4, #72]	; 0x48
 800138c:	2001      	movs	r0, #1
 800138e:	e7bb      	b.n	8001308 <HAL_ADCEx_Calibration_Start+0x64>

08001390 <HAL_ADC_ConfigChannel>:
{
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	4603      	mov	r3, r0
 8001394:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8001396:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 800139a:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 800139c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 800139e:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80013a0:	d047      	beq.n	8001432 <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a2:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013a4:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a6:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 80013a8:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013aa:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 80013ac:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013b0:	d508      	bpl.n	80013c4 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013b4:	f042 0220 	orr.w	r2, r2, #32
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80013c0:	b003      	add	sp, #12
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 80013c4:	6848      	ldr	r0, [r1, #4]
 80013c6:	2804      	cmp	r0, #4
 80013c8:	d936      	bls.n	8001438 <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 80013ca:	2809      	cmp	r0, #9
 80013cc:	d870      	bhi.n	80014b0 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->SQR2,
 80013ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80013d2:	0040      	lsls	r0, r0, #1
 80013d4:	381e      	subs	r0, #30
 80013d6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80013d8:	680d      	ldr	r5, [r1, #0]
 80013da:	271f      	movs	r7, #31
 80013dc:	4087      	lsls	r7, r0
 80013de:	ea26 0607 	bic.w	r6, r6, r7
 80013e2:	fa05 f000 	lsl.w	r0, r5, r0
 80013e6:	4330      	orrs	r0, r6
 80013e8:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013ea:	6890      	ldr	r0, [r2, #8]
 80013ec:	f010 0f0c 	tst.w	r0, #12
 80013f0:	d133      	bne.n	800145a <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013f2:	2d09      	cmp	r5, #9
 80013f4:	d94e      	bls.n	8001494 <HAL_ADC_ConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013f6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80013fa:	3f1e      	subs	r7, #30
 80013fc:	6990      	ldr	r0, [r2, #24]
 80013fe:	688e      	ldr	r6, [r1, #8]
 8001400:	f04f 0e07 	mov.w	lr, #7
 8001404:	fa0e fe07 	lsl.w	lr, lr, r7
 8001408:	ea20 000e 	bic.w	r0, r0, lr
 800140c:	40be      	lsls	r6, r7
 800140e:	4330      	orrs	r0, r6
 8001410:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001412:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8001414:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001416:	694f      	ldr	r7, [r1, #20]
 8001418:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800141c:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 800141e:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001420:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8001424:	2e03      	cmp	r6, #3
 8001426:	f200 80cb 	bhi.w	80015c0 <HAL_ADC_ConfigChannel+0x230>
 800142a:	e8df f006 	tbb	[pc, r6]
 800142e:	737d      	.short	0x737d
 8001430:	5f69      	.short	0x5f69
  __HAL_LOCK(hadc);
 8001432:	2002      	movs	r0, #2
}
 8001434:	b003      	add	sp, #12
 8001436:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 8001438:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800143c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800143e:	680d      	ldr	r5, [r1, #0]
 8001440:	0040      	lsls	r0, r0, #1
 8001442:	271f      	movs	r7, #31
 8001444:	4087      	lsls	r7, r0
 8001446:	ea26 0607 	bic.w	r6, r6, r7
 800144a:	fa05 f000 	lsl.w	r0, r5, r0
 800144e:	4330      	orrs	r0, r6
 8001450:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001452:	6890      	ldr	r0, [r2, #8]
 8001454:	f010 0f0c 	tst.w	r0, #12
 8001458:	d0cb      	beq.n	80013f2 <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800145a:	6890      	ldr	r0, [r2, #8]
 800145c:	f000 0003 	and.w	r0, r0, #3
 8001460:	2801      	cmp	r0, #1
 8001462:	d013      	beq.n	800148c <HAL_ADC_ConfigChannel+0xfc>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001464:	2c01      	cmp	r4, #1
 8001466:	f000 808f 	beq.w	8001588 <HAL_ADC_ConfigChannel+0x1f8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800146a:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 800146e:	2001      	movs	r0, #1
 8001470:	40a8      	lsls	r0, r5
 8001472:	ea21 0100 	bic.w	r1, r1, r0
 8001476:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800147a:	2d10      	cmp	r5, #16
 800147c:	d07f      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800147e:	2d11      	cmp	r5, #17
 8001480:	f000 8099 	beq.w	80015b6 <HAL_ADC_ConfigChannel+0x226>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001484:	2d12      	cmp	r5, #18
 8001486:	d059      	beq.n	800153c <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800148a:	e796      	b.n	80013ba <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800148c:	6810      	ldr	r0, [r2, #0]
 800148e:	07c0      	lsls	r0, r0, #31
 8001490:	d5e8      	bpl.n	8001464 <HAL_ADC_ConfigChannel+0xd4>
 8001492:	e7f9      	b.n	8001488 <HAL_ADC_ConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001494:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8001498:	6950      	ldr	r0, [r2, #20]
 800149a:	688e      	ldr	r6, [r1, #8]
 800149c:	2707      	movs	r7, #7
 800149e:	fa07 f70e 	lsl.w	r7, r7, lr
 80014a2:	ea20 0007 	bic.w	r0, r0, r7
 80014a6:	fa06 f60e 	lsl.w	r6, r6, lr
 80014aa:	4330      	orrs	r0, r6
 80014ac:	6150      	str	r0, [r2, #20]
 80014ae:	e7b0      	b.n	8001412 <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 80014b0:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80014b6:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 80014ba:	d80b      	bhi.n	80014d4 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014bc:	383c      	subs	r0, #60	; 0x3c
 80014be:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80014c0:	680d      	ldr	r5, [r1, #0]
 80014c2:	271f      	movs	r7, #31
 80014c4:	4087      	lsls	r7, r0
 80014c6:	ea26 0607 	bic.w	r6, r6, r7
 80014ca:	fa05 f000 	lsl.w	r0, r5, r0
 80014ce:	4330      	orrs	r0, r6
 80014d0:	6390      	str	r0, [r2, #56]	; 0x38
 80014d2:	e78a      	b.n	80013ea <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014d4:	385a      	subs	r0, #90	; 0x5a
 80014d6:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80014d8:	680d      	ldr	r5, [r1, #0]
 80014da:	271f      	movs	r7, #31
 80014dc:	4087      	lsls	r7, r0
 80014de:	ea26 0607 	bic.w	r6, r6, r7
 80014e2:	fa05 f000 	lsl.w	r0, r5, r0
 80014e6:	4330      	orrs	r0, r6
 80014e8:	63d0      	str	r0, [r2, #60]	; 0x3c
 80014ea:	e77e      	b.n	80013ea <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014ec:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 80014ee:	4e6c      	ldr	r6, [pc, #432]	; (80016a0 <HAL_ADC_ConfigChannel+0x310>)
 80014f0:	403e      	ands	r6, r7
 80014f2:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80014f6:	4330      	orrs	r0, r6
 80014f8:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 80014fc:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 80014fe:	e7ac      	b.n	800145a <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001500:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8001502:	4e67      	ldr	r6, [pc, #412]	; (80016a0 <HAL_ADC_ConfigChannel+0x310>)
 8001504:	403e      	ands	r6, r7
 8001506:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800150a:	4330      	orrs	r0, r6
 800150c:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8001510:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8001512:	e7a2      	b.n	800145a <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001514:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8001516:	4e62      	ldr	r6, [pc, #392]	; (80016a0 <HAL_ADC_ConfigChannel+0x310>)
 8001518:	403e      	ands	r6, r7
 800151a:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800151e:	4330      	orrs	r0, r6
 8001520:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8001524:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8001526:	e798      	b.n	800145a <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001528:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800152a:	4e5d      	ldr	r6, [pc, #372]	; (80016a0 <HAL_ADC_ConfigChannel+0x310>)
 800152c:	403e      	ands	r6, r7
 800152e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8001532:	4330      	orrs	r0, r6
 8001534:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 8001538:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 800153a:	e78e      	b.n	800145a <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800153c:	4959      	ldr	r1, [pc, #356]	; (80016a4 <HAL_ADC_ConfigChannel+0x314>)
 800153e:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001540:	024e      	lsls	r6, r1, #9
 8001542:	d4a1      	bmi.n	8001488 <HAL_ADC_ConfigChannel+0xf8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001544:	6891      	ldr	r1, [r2, #8]
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001546:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800154a:	f001 0103 	and.w	r1, r1, #3
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800154e:	d060      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x282>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001550:	2901      	cmp	r1, #1
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001552:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001556:	d05f      	beq.n	8001618 <HAL_ADC_ConfigChannel+0x288>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001558:	6881      	ldr	r1, [r0, #8]
 800155a:	f001 0103 	and.w	r1, r1, #3
 800155e:	2901      	cmp	r1, #1
 8001560:	d072      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x2b8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001562:	2d10      	cmp	r5, #16
 8001564:	d074      	beq.n	8001650 <HAL_ADC_ConfigChannel+0x2c0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001566:	2d11      	cmp	r5, #17
 8001568:	f000 808f 	beq.w	800168a <HAL_ADC_ConfigChannel+0x2fa>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800156c:	2d12      	cmp	r5, #18
 800156e:	d18b      	bne.n	8001488 <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001570:	494c      	ldr	r1, [pc, #304]	; (80016a4 <HAL_ADC_ConfigChannel+0x314>)
 8001572:	688a      	ldr	r2, [r1, #8]
 8001574:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001578:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800157a:	2000      	movs	r0, #0
 800157c:	e71d      	b.n	80013ba <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800157e:	4949      	ldr	r1, [pc, #292]	; (80016a4 <HAL_ADC_ConfigChannel+0x314>)
 8001580:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001582:	0209      	lsls	r1, r1, #8
 8001584:	d5de      	bpl.n	8001544 <HAL_ADC_ConfigChannel+0x1b4>
 8001586:	e77f      	b.n	8001488 <HAL_ADC_ConfigChannel+0xf8>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001588:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 800158c:	40ac      	lsls	r4, r5
 800158e:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001590:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001592:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001596:	d92e      	bls.n	80015f6 <HAL_ADC_ConfigChannel+0x266>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001598:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800159c:	688e      	ldr	r6, [r1, #8]
 800159e:	6994      	ldr	r4, [r2, #24]
 80015a0:	f1a0 011b 	sub.w	r1, r0, #27
 80015a4:	2707      	movs	r7, #7
 80015a6:	408f      	lsls	r7, r1
 80015a8:	fa06 f001 	lsl.w	r0, r6, r1
 80015ac:	ea24 0107 	bic.w	r1, r4, r7
 80015b0:	4301      	orrs	r1, r0
 80015b2:	6191      	str	r1, [r2, #24]
 80015b4:	e761      	b.n	800147a <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015b6:	493b      	ldr	r1, [pc, #236]	; (80016a4 <HAL_ADC_ConfigChannel+0x314>)
 80015b8:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015ba:	01cf      	lsls	r7, r1, #7
 80015bc:	d5c2      	bpl.n	8001544 <HAL_ADC_ConfigChannel+0x1b4>
 80015be:	e763      	b.n	8001488 <HAL_ADC_ConfigChannel+0xf8>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015c0:	6e16      	ldr	r6, [r2, #96]	; 0x60
 80015c2:	06a8      	lsls	r0, r5, #26
 80015c4:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80015c8:	4286      	cmp	r6, r0
 80015ca:	d038      	beq.n	800163e <HAL_ADC_ConfigChannel+0x2ae>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015cc:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80015ce:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80015d2:	42b0      	cmp	r0, r6
 80015d4:	d02e      	beq.n	8001634 <HAL_ADC_ConfigChannel+0x2a4>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015d6:	6e96      	ldr	r6, [r2, #104]	; 0x68
 80015d8:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80015dc:	42b0      	cmp	r0, r6
 80015de:	d024      	beq.n	800162a <HAL_ADC_ConfigChannel+0x29a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015e0:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 80015e2:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80015e6:	42b0      	cmp	r0, r6
 80015e8:	f47f af37 	bne.w	800145a <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015ec:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80015ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80015f2:	66d0      	str	r0, [r2, #108]	; 0x6c
 80015f4:	e731      	b.n	800145a <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 80015f6:	1c68      	adds	r0, r5, #1
 80015f8:	688e      	ldr	r6, [r1, #8]
 80015fa:	6954      	ldr	r4, [r2, #20]
 80015fc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001600:	2707      	movs	r7, #7
 8001602:	408f      	lsls	r7, r1
 8001604:	fa06 f001 	lsl.w	r0, r6, r1
 8001608:	ea24 0107 	bic.w	r1, r4, r7
 800160c:	4301      	orrs	r1, r0
 800160e:	6151      	str	r1, [r2, #20]
 8001610:	e735      	b.n	800147e <HAL_ADC_ConfigChannel+0xee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001612:	2901      	cmp	r1, #1
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001614:	4824      	ldr	r0, [pc, #144]	; (80016a8 <HAL_ADC_ConfigChannel+0x318>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001616:	d19f      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1c8>
 8001618:	6811      	ldr	r1, [r2, #0]
 800161a:	07cc      	lsls	r4, r1, #31
 800161c:	d59c      	bpl.n	8001558 <HAL_ADC_ConfigChannel+0x1c8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001620:	f042 0220 	orr.w	r2, r2, #32
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001626:	2001      	movs	r0, #1
 8001628:	e6c7      	b.n	80013ba <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800162a:	6e96      	ldr	r6, [r2, #104]	; 0x68
 800162c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001630:	6696      	str	r6, [r2, #104]	; 0x68
 8001632:	e7d5      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x250>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001634:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001636:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800163a:	6656      	str	r6, [r2, #100]	; 0x64
 800163c:	e7cb      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x246>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800163e:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8001640:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001644:	6616      	str	r6, [r2, #96]	; 0x60
 8001646:	e7c1      	b.n	80015cc <HAL_ADC_ConfigChannel+0x23c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001648:	6801      	ldr	r1, [r0, #0]
 800164a:	07c9      	lsls	r1, r1, #31
 800164c:	d4e7      	bmi.n	800161e <HAL_ADC_ConfigChannel+0x28e>
 800164e:	e788      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1d2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001650:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001654:	f47f af18 	bne.w	8001488 <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001658:	4912      	ldr	r1, [pc, #72]	; (80016a4 <HAL_ADC_ConfigChannel+0x314>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165a:	4c14      	ldr	r4, [pc, #80]	; (80016ac <HAL_ADC_ConfigChannel+0x31c>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800165c:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165e:	4814      	ldr	r0, [pc, #80]	; (80016b0 <HAL_ADC_ConfigChannel+0x320>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001660:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001664:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001666:	220a      	movs	r2, #10
 8001668:	6821      	ldr	r1, [r4, #0]
 800166a:	fbb1 f1f0 	udiv	r1, r1, r0
 800166e:	fb02 f201 	mul.w	r2, r2, r1
 8001672:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001674:	9a01      	ldr	r2, [sp, #4]
 8001676:	2a00      	cmp	r2, #0
 8001678:	f43f af06 	beq.w	8001488 <HAL_ADC_ConfigChannel+0xf8>
            wait_loop_index--;
 800167c:	9a01      	ldr	r2, [sp, #4]
 800167e:	3a01      	subs	r2, #1
 8001680:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001682:	9a01      	ldr	r2, [sp, #4]
 8001684:	2a00      	cmp	r2, #0
 8001686:	d1f9      	bne.n	800167c <HAL_ADC_ConfigChannel+0x2ec>
 8001688:	e6fe      	b.n	8001488 <HAL_ADC_ConfigChannel+0xf8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800168a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800168e:	f47f aefb 	bne.w	8001488 <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001692:	4904      	ldr	r1, [pc, #16]	; (80016a4 <HAL_ADC_ConfigChannel+0x314>)
 8001694:	688a      	ldr	r2, [r1, #8]
 8001696:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800169a:	608a      	str	r2, [r1, #8]
 800169c:	e6f4      	b.n	8001488 <HAL_ADC_ConfigChannel+0xf8>
 800169e:	bf00      	nop
 80016a0:	83fff000 	.word	0x83fff000
 80016a4:	50000300 	.word	0x50000300
 80016a8:	50000100 	.word	0x50000100
 80016ac:	20000000 	.word	0x20000000
 80016b0:	000f4240 	.word	0x000f4240

080016b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80016bc:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016be:	0200      	lsls	r0, r0, #8
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80016cc:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016ce:	60d3      	str	r3, [r2, #12]
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b470      	push	{r4, r5, r6}
 80016dc:	68dc      	ldr	r4, [r3, #12]
 80016de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e2:	f1c4 0607 	rsb	r6, r4, #7
 80016e6:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	bf28      	it	cs
 80016ee:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d917      	bls.n	8001724 <HAL_NVIC_SetPriority+0x4c>
 80016f4:	3c03      	subs	r4, #3
 80016f6:	2501      	movs	r5, #1
 80016f8:	40a5      	lsls	r5, r4
 80016fa:	3d01      	subs	r5, #1
 80016fc:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fe:	2301      	movs	r3, #1
 8001700:	40b3      	lsls	r3, r6
 8001702:	3b01      	subs	r3, #1
 8001704:	4019      	ands	r1, r3
 8001706:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001708:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800170e:	db0c      	blt.n	800172a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001714:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001718:	0109      	lsls	r1, r1, #4
 800171a:	b2c9      	uxtb	r1, r1
 800171c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001720:	bc70      	pop	{r4, r5, r6}
 8001722:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001724:	2200      	movs	r2, #0
 8001726:	4614      	mov	r4, r2
 8001728:	e7e9      	b.n	80016fe <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_NVIC_SetPriority+0x68>)
 800172c:	f000 000f 	and.w	r0, r0, #15
 8001730:	0109      	lsls	r1, r1, #4
 8001732:	4403      	add	r3, r0
 8001734:	b2c9      	uxtb	r1, r1
 8001736:	7619      	strb	r1, [r3, #24]
 8001738:	bc70      	pop	{r4, r5, r6}
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	e000ecfc 	.word	0xe000ecfc

08001744 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001744:	f000 011f 	and.w	r1, r0, #31
 8001748:	2301      	movs	r3, #1
 800174a:	0940      	lsrs	r0, r0, #5
 800174c:	4a02      	ldr	r2, [pc, #8]	; (8001758 <HAL_NVIC_EnableIRQ+0x14>)
 800174e:	408b      	lsls	r3, r1
 8001750:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100

0800175c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	3801      	subs	r0, #1
 800175e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001762:	d20e      	bcs.n	8001782 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	4c08      	ldr	r4, [pc, #32]	; (800178c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	20f0      	movs	r0, #240	; 0xf0
 800176e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001772:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001774:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001776:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800177c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001780:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001792:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001794:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001796:	bf0c      	ite	eq
 8001798:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800179c:	f023 0304 	bicne.w	r3, r3, #4
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4770      	bx	lr
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <HAL_SYSTICK_IRQHandler>:
{
 80017ac:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80017ae:	f7ff fffb 	bl	80017a8 <HAL_SYSTICK_Callback>
 80017b2:	bd08      	pop	{r3, pc}

080017b4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d02d      	beq.n	8001814 <HAL_DMA_Init+0x60>
{ 
 80017b8:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017ba:	6842      	ldr	r2, [r0, #4]
 80017bc:	6887      	ldr	r7, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	68c6      	ldr	r6, [r0, #12]
 80017c0:	6904      	ldr	r4, [r0, #16]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017c2:	4915      	ldr	r1, [pc, #84]	; (8001818 <HAL_DMA_Init+0x64>)
 80017c4:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 80017c6:	433a      	orrs	r2, r7
  tmp = hdma->Instance->CCR;
 80017c8:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	695d      	ldr	r5, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017cc:	4f13      	ldr	r7, [pc, #76]	; (800181c <HAL_DMA_Init+0x68>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	4332      	orrs	r2, r6
 80017d0:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	699e      	ldr	r6, [r3, #24]
  tmp = hdma->Instance->CCR;
 80017d4:	6804      	ldr	r4, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d8:	69dd      	ldr	r5, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017dc:	4401      	add	r1, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017de:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017e2:	fba7 6101 	umull	r6, r1, r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e6:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017e8:	f024 0430 	bic.w	r4, r4, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80017ec:	4322      	orrs	r2, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017ee:	0909      	lsrs	r1, r1, #4
  hdma->Instance->CCR = tmp;  
 80017f0:	6002      	str	r2, [r0, #0]
  hdma->DmaBaseAddress = DMA1;
 80017f2:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <HAL_DMA_Init+0x6c>)
 80017f4:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80017f6:	2000      	movs	r0, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017f8:	0089      	lsls	r1, r1, #2
  hdma->State = HAL_DMA_STATE_READY;
 80017fa:	2201      	movs	r2, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017fc:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->XferCpltCallback = NULL;
 80017fe:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001800:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001802:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001804:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001806:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8001808:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800180c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}  
 8001810:	bcf0      	pop	{r4, r5, r6, r7}
 8001812:	4770      	bx	lr
    return HAL_ERROR;
 8001814:	2001      	movs	r0, #1
 8001816:	4770      	bx	lr
 8001818:	bffdfff8 	.word	0xbffdfff8
 800181c:	cccccccd 	.word	0xcccccccd
 8001820:	40020000 	.word	0x40020000

08001824 <HAL_DMA_Start_IT>:
{
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001826:	f890 4020 	ldrb.w	r4, [r0, #32]
 800182a:	2c01      	cmp	r4, #1
 800182c:	d00b      	beq.n	8001846 <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 800182e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001832:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001834:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001836:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800183a:	d006      	beq.n	800184a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 800183c:	2300      	movs	r3, #0
 800183e:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001842:	2002      	movs	r0, #2
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8001846:	2002      	movs	r0, #2
} 
 8001848:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800184a:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800184c:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800184e:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001852:	2600      	movs	r6, #0
 8001854:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001856:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001858:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800185a:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800185e:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001860:	f04f 0c02 	mov.w	ip, #2
 8001864:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001868:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800186a:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 800186e:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001870:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001872:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8001874:	bf0b      	itete	eq
 8001876:	60aa      	streq	r2, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001878:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 800187a:	60e9      	streq	r1, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 800187c:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800187e:	b14b      	cbz	r3, 8001894 <HAL_DMA_Start_IT+0x70>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	f043 030e 	orr.w	r3, r3, #14
 8001886:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001890:	2000      	movs	r0, #0
 8001892:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	f043 030a 	orr.w	r3, r3, #10
 800189a:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800189c:	682b      	ldr	r3, [r5, #0]
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	602b      	str	r3, [r5, #0]
 80018a4:	e7f0      	b.n	8001888 <HAL_DMA_Start_IT+0x64>
 80018a6:	bf00      	nop

080018a8 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018a8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80018ac:	2a02      	cmp	r2, #2
{  
 80018ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b0:	d003      	beq.n	80018ba <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b2:	2204      	movs	r2, #4
 80018b4:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
 80018b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ba:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018be:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018c0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 80018c2:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018c4:	f024 040e 	bic.w	r4, r4, #14
 80018c8:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018ca:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018cc:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018ce:	f024 0401 	bic.w	r4, r4, #1
 80018d2:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018d4:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 80018d8:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018da:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018dc:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80018e0:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80018e4:	b116      	cbz	r6, 80018ec <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80018e6:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 80018e8:	4620      	mov	r0, r4
 80018ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ec:	4630      	mov	r0, r6
}
 80018ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018f0 <HAL_DMA_IRQHandler>:
{
 80018f0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f2:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f6:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018f8:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018fa:	2304      	movs	r3, #4
 80018fc:	4093      	lsls	r3, r2
 80018fe:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 8001900:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001902:	d00d      	beq.n	8001920 <HAL_DMA_IRQHandler+0x30>
 8001904:	0777      	lsls	r7, r6, #29
 8001906:	d50b      	bpl.n	8001920 <HAL_DMA_IRQHandler+0x30>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001908:	6822      	ldr	r2, [r4, #0]
 800190a:	0692      	lsls	r2, r2, #26
 800190c:	d403      	bmi.n	8001916 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	f022 0204 	bic.w	r2, r2, #4
 8001914:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001916:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001918:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800191a:	b1c2      	cbz	r2, 800194e <HAL_DMA_IRQHandler+0x5e>
}  
 800191c:	bcf0      	pop	{r4, r5, r6, r7}
  		hdma->XferCpltCallback(hdma);
 800191e:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001920:	2302      	movs	r3, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	4219      	tst	r1, r3
 8001926:	d014      	beq.n	8001952 <HAL_DMA_IRQHandler+0x62>
 8001928:	07b7      	lsls	r7, r6, #30
 800192a:	d512      	bpl.n	8001952 <HAL_DMA_IRQHandler+0x62>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	0692      	lsls	r2, r2, #26
 8001930:	d406      	bmi.n	8001940 <HAL_DMA_IRQHandler+0x50>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001932:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001934:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001936:	f022 020a 	bic.w	r2, r2, #10
 800193a:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800193c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001940:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001942:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8001944:	2300      	movs	r3, #0
 8001946:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800194a:	2a00      	cmp	r2, #0
 800194c:	d1e6      	bne.n	800191c <HAL_DMA_IRQHandler+0x2c>
}  
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001952:	2308      	movs	r3, #8
 8001954:	4093      	lsls	r3, r2
 8001956:	420b      	tst	r3, r1
 8001958:	d0f9      	beq.n	800194e <HAL_DMA_IRQHandler+0x5e>
 800195a:	0733      	lsls	r3, r6, #28
 800195c:	d5f7      	bpl.n	800194e <HAL_DMA_IRQHandler+0x5e>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800195e:	6821      	ldr	r1, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001960:	6b06      	ldr	r6, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001962:	2301      	movs	r3, #1
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001964:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001968:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 800196c:	2700      	movs	r7, #0
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800196e:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001970:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001972:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001974:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001978:	f880 7020 	strb.w	r7, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800197c:	2e00      	cmp	r6, #0
 800197e:	d0e6      	beq.n	800194e <HAL_DMA_IRQHandler+0x5e>
    	hdma->XferErrorCallback(hdma);
 8001980:	4633      	mov	r3, r6
}  
 8001982:	bcf0      	pop	{r4, r5, r6, r7}
    	hdma->XferErrorCallback(hdma);
 8001984:	4718      	bx	r3
 8001986:	bf00      	nop

08001988 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800198c:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8001b1c <HAL_FLASH_Program+0x194>
 8001990:	f899 4018 	ldrb.w	r4, [r9, #24]
 8001994:	2c01      	cmp	r4, #1
{
 8001996:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8001998:	d103      	bne.n	80019a2 <HAL_FLASH_Program+0x1a>
 800199a:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 800199c:	b003      	add	sp, #12
 800199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a2:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 80019a4:	2301      	movs	r3, #1
 80019a6:	4693      	mov	fp, r2
 80019a8:	460f      	mov	r7, r1
 80019aa:	4680      	mov	r8, r0
 80019ac:	f889 3018 	strb.w	r3, [r9, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff fa52 	bl	8000e58 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80019b4:	4c58      	ldr	r4, [pc, #352]	; (8001b18 <HAL_FLASH_Program+0x190>)
  uint32_t tickstart = HAL_GetTick();
 80019b6:	4606      	mov	r6, r0
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80019b8:	f24c 3550 	movw	r5, #50000	; 0xc350
 80019bc:	e005      	b.n	80019ca <HAL_FLASH_Program+0x42>
 80019be:	f7ff fa4b 	bl	8000e58 <HAL_GetTick>
 80019c2:	1b80      	subs	r0, r0, r6
 80019c4:	42a8      	cmp	r0, r5
 80019c6:	f200 80a1 	bhi.w	8001b0c <HAL_FLASH_Program+0x184>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80019ca:	68e3      	ldr	r3, [r4, #12]
 80019cc:	07db      	lsls	r3, r3, #31
 80019ce:	d4f6      	bmi.n	80019be <HAL_FLASH_Program+0x36>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80019d0:	68e3      	ldr	r3, [r4, #12]
 80019d2:	069d      	lsls	r5, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019d4:	bf44      	itt	mi
 80019d6:	2320      	movmi	r3, #32
 80019d8:	60e3      	strmi	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80019da:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <HAL_FLASH_Program+0x190>)
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	06d0      	lsls	r0, r2, #27
 80019e0:	d402      	bmi.n	80019e8 <HAL_FLASH_Program+0x60>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019e2:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80019e4:	0759      	lsls	r1, r3, #29
 80019e6:	d521      	bpl.n	8001a2c <HAL_FLASH_Program+0xa4>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80019e8:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <HAL_FLASH_Program+0x190>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f013 0310 	ands.w	r3, r3, #16
 80019f0:	f000 808e 	beq.w	8001b10 <HAL_FLASH_Program+0x188>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	f8c9 301c 	str.w	r3, [r9, #28]
 8001a00:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8001a02:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a04:	4a44      	ldr	r2, [pc, #272]	; (8001b18 <HAL_FLASH_Program+0x190>)
 8001a06:	68d2      	ldr	r2, [r2, #12]
 8001a08:	0752      	lsls	r2, r2, #29
 8001a0a:	d506      	bpl.n	8001a1a <HAL_FLASH_Program+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a0c:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8001a14:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a16:	f8c9 201c 	str.w	r2, [r9, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a1a:	4a3f      	ldr	r2, [pc, #252]	; (8001b18 <HAL_FLASH_Program+0x190>)
    return HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a1e:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8001a20:	2300      	movs	r3, #0
 8001a22:	f889 3018 	strb.w	r3, [r9, #24]
}
 8001a26:	b003      	add	sp, #12
 8001a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a2c:	f1b8 0f01 	cmp.w	r8, #1
 8001a30:	d070      	beq.n	8001b14 <HAL_FLASH_Program+0x18c>
      nbiterations = 2U;
 8001a32:	f1b8 0f02 	cmp.w	r8, #2
 8001a36:	bf14      	ite	ne
 8001a38:	2304      	movne	r3, #4
 8001a3a:	2302      	moveq	r3, #2
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	1cba      	adds	r2, r7, #2
 8001a42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a46:	4c34      	ldr	r4, [pc, #208]	; (8001b18 <HAL_FLASH_Program+0x190>)
 8001a48:	9301      	str	r3, [sp, #4]
      nbiterations = 4U;
 8001a4a:	f04f 0800 	mov.w	r8, #0
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a4e:	f24c 3650 	movw	r6, #50000	; 0xc350
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a52:	2100      	movs	r1, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001a54:	f1c8 0220 	rsb	r2, r8, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a58:	f8c9 101c 	str.w	r1, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001a5c:	fa0a f202 	lsl.w	r2, sl, r2
 8001a60:	fa2b f308 	lsr.w	r3, fp, r8
 8001a64:	f1a8 0120 	sub.w	r1, r8, #32
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	fa2a f101 	lsr.w	r1, sl, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a6e:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001a70:	430b      	orrs	r3, r1
 8001a72:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8001a7a:	803b      	strh	r3, [r7, #0]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff f9ec 	bl	8000e58 <HAL_GetTick>
 8001a80:	4605      	mov	r5, r0
 8001a82:	e004      	b.n	8001a8e <HAL_FLASH_Program+0x106>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a84:	f7ff f9e8 	bl	8000e58 <HAL_GetTick>
 8001a88:	1b40      	subs	r0, r0, r5
 8001a8a:	42b0      	cmp	r0, r6
 8001a8c:	d83a      	bhi.n	8001b04 <HAL_FLASH_Program+0x17c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a8e:	68e3      	ldr	r3, [r4, #12]
 8001a90:	07db      	lsls	r3, r3, #31
 8001a92:	d4f7      	bmi.n	8001a84 <HAL_FLASH_Program+0xfc>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a94:	68e3      	ldr	r3, [r4, #12]
 8001a96:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a98:	bf44      	itt	mi
 8001a9a:	2320      	movmi	r3, #32
 8001a9c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a9e:	68e3      	ldr	r3, [r4, #12]
 8001aa0:	06d9      	lsls	r1, r3, #27
 8001aa2:	d403      	bmi.n	8001aac <HAL_FLASH_Program+0x124>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001aa4:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001aa6:	f010 0004 	ands.w	r0, r0, #4
 8001aaa:	d020      	beq.n	8001aee <HAL_FLASH_Program+0x166>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_FLASH_Program+0x190>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f013 0310 	ands.w	r3, r3, #16
 8001ab4:	d028      	beq.n	8001b08 <HAL_FLASH_Program+0x180>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ab6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	f8c9 301c 	str.w	r3, [r9, #28]
 8001ac2:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8001ac4:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_FLASH_Program+0x190>)
 8001ac8:	68d2      	ldr	r2, [r2, #12]
 8001aca:	0752      	lsls	r2, r2, #29
 8001acc:	d506      	bpl.n	8001adc <HAL_FLASH_Program+0x154>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001ace:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8001ad6:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001ad8:	f8c9 201c 	str.w	r2, [r9, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <HAL_FLASH_Program+0x190>)
    return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ae0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <HAL_FLASH_Program+0x190>)
 8001ae4:	6913      	ldr	r3, [r2, #16]
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6113      	str	r3, [r2, #16]
 8001aec:	e798      	b.n	8001a20 <HAL_FLASH_Program+0x98>
 8001aee:	6923      	ldr	r3, [r4, #16]
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	3702      	adds	r7, #2
 8001afa:	42bb      	cmp	r3, r7
 8001afc:	f108 0810 	add.w	r8, r8, #16
 8001b00:	d1a7      	bne.n	8001a52 <HAL_FLASH_Program+0xca>
 8001b02:	e78d      	b.n	8001a20 <HAL_FLASH_Program+0x98>
        return HAL_TIMEOUT;
 8001b04:	2003      	movs	r0, #3
 8001b06:	e7ec      	b.n	8001ae2 <HAL_FLASH_Program+0x15a>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b08:	2104      	movs	r1, #4
 8001b0a:	e7dc      	b.n	8001ac6 <HAL_FLASH_Program+0x13e>
        return HAL_TIMEOUT;
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	e787      	b.n	8001a20 <HAL_FLASH_Program+0x98>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b10:	2104      	movs	r1, #4
 8001b12:	e777      	b.n	8001a04 <HAL_FLASH_Program+0x7c>
      nbiterations = 1U;
 8001b14:	4643      	mov	r3, r8
 8001b16:	e791      	b.n	8001a3c <HAL_FLASH_Program+0xb4>
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	20000330 	.word	0x20000330

08001b20 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_FLASH_Unlock+0x18>)
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	0612      	lsls	r2, r2, #24
 8001b26:	d505      	bpl.n	8001b34 <HAL_FLASH_Unlock+0x14>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b28:	4904      	ldr	r1, [pc, #16]	; (8001b3c <HAL_FLASH_Unlock+0x1c>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b2c:	6059      	str	r1, [r3, #4]
  return HAL_OK; 
 8001b2e:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b30:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8001b32:	4770      	bx	lr
    return HAL_ERROR;
 8001b34:	2001      	movs	r0, #1
}
 8001b36:	4770      	bx	lr
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	45670123 	.word	0x45670123
 8001b40:	cdef89ab 	.word	0xcdef89ab

08001b44 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b44:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <HAL_FLASH_Lock+0x10>)
 8001b46:	6913      	ldr	r3, [r2, #16]
 8001b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4c:	6113      	str	r3, [r2, #16]
}
 8001b4e:	2000      	movs	r0, #0
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b5a:	6809      	ldr	r1, [r1, #0]
 8001b5c:	2900      	cmp	r1, #0
 8001b5e:	f000 80d9 	beq.w	8001d14 <HAL_GPIO_Init+0x1bc>
{
 8001b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b66:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8001d28 <HAL_GPIO_Init+0x1d0>
{
 8001b6a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b6c:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b6e:	f04f 0801 	mov.w	r8, #1
 8001b72:	e079      	b.n	8001c68 <HAL_GPIO_Init+0x110>
 8001b74:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b78:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001b7a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7e:	fa03 f309 	lsl.w	r3, r3, r9
 8001b82:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b88:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8c:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b90:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b98:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001b9c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9e:	f240 8098 	bls.w	8001cd2 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8001ba2:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba4:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba8:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001baa:	fa02 f209 	lsl.w	r2, r2, r9
 8001bae:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb0:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8001bb2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb4:	d554      	bpl.n	8001c60 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_GPIO_Init+0x1c0>)
 8001bb8:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_GPIO_Init+0x1c0>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	6993      	ldr	r3, [r2, #24]
 8001bc4:	f025 0603 	bic.w	r6, r5, #3
 8001bc8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001bd4:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001bd6:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001bdc:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	f04f 090f 	mov.w	r9, #15
 8001be4:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001be8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001bec:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bf0:	f000 8086 	beq.w	8001d00 <HAL_GPIO_Init+0x1a8>
 8001bf4:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <HAL_GPIO_Init+0x1c4>)
 8001bf6:	4290      	cmp	r0, r2
 8001bf8:	f000 8084 	beq.w	8001d04 <HAL_GPIO_Init+0x1ac>
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_GPIO_Init+0x1c8>)
 8001bfe:	4290      	cmp	r0, r2
 8001c00:	f000 8083 	beq.w	8001d0a <HAL_GPIO_Init+0x1b2>
 8001c04:	4a47      	ldr	r2, [pc, #284]	; (8001d24 <HAL_GPIO_Init+0x1cc>)
 8001c06:	4290      	cmp	r0, r2
 8001c08:	bf0b      	itete	eq
 8001c0a:	f04f 0903 	moveq.w	r9, #3
 8001c0e:	2205      	movne	r2, #5
 8001c10:	fa09 f303 	lsleq.w	r3, r9, r3
 8001c14:	fa02 f303 	lslne.w	r3, r2, r3
 8001c18:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c1c:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8001c1e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c24:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8001c26:	bf54      	ite	pl
 8001c28:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001c2a:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8001c2c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001c30:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c34:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8001c36:	bf54      	ite	pl
 8001c38:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001c3a:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8001c3c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c40:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c44:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001c46:	bf54      	ite	pl
 8001c48:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001c4a:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8001c4c:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001c50:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001c56:	bf54      	ite	pl
 8001c58:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001c5a:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8001c5c:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001c60:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c62:	fa31 f305 	lsrs.w	r3, r1, r5
 8001c66:	d048      	beq.n	8001cfa <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c68:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8001c6c:	ea12 0701 	ands.w	r7, r2, r1
 8001c70:	d0f6      	beq.n	8001c60 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c72:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8001c76:	f024 0a10 	bic.w	sl, r4, #16
 8001c7a:	f1ba 0f02 	cmp.w	sl, #2
 8001c7e:	f47f af79 	bne.w	8001b74 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8001c82:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001c86:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8a:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8001c8e:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f04f 0a0f 	mov.w	sl, #15
 8001c98:	fa0a fb03 	lsl.w	fp, sl, r3
 8001c9c:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca0:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8001ca4:	fa06 f303 	lsl.w	r3, r6, r3
 8001ca8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8001cac:	f8c9 3020 	str.w	r3, [r9, #32]
 8001cb0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb4:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001cb6:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cba:	fa03 f309 	lsl.w	r3, r3, r9
 8001cbe:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc4:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc8:	fa06 f609 	lsl.w	r6, r6, r9
 8001ccc:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8001cd0:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8001cd2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd4:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd8:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001cdc:	fa06 f609 	lsl.w	r6, r6, r9
 8001ce0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001ce4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ce6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cea:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cee:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cf2:	40ae      	lsls	r6, r5
 8001cf4:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001cf6:	6046      	str	r6, [r0, #4]
 8001cf8:	e753      	b.n	8001ba2 <HAL_GPIO_Init+0x4a>
  }
}
 8001cfa:	b003      	add	sp, #12
 8001cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d00:	2300      	movs	r3, #0
 8001d02:	e789      	b.n	8001c18 <HAL_GPIO_Init+0xc0>
 8001d04:	fa08 f303 	lsl.w	r3, r8, r3
 8001d08:	e786      	b.n	8001c18 <HAL_GPIO_Init+0xc0>
 8001d0a:	f04f 0902 	mov.w	r9, #2
 8001d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8001d12:	e781      	b.n	8001c18 <HAL_GPIO_Init+0xc0>
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	48000800 	.word	0x48000800
 8001d24:	48000c00 	.word	0x48000c00
 8001d28:	40010400 	.word	0x40010400

08001d2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d2c:	6903      	ldr	r3, [r0, #16]
 8001d2e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001d30:	bf14      	ite	ne
 8001d32:	2001      	movne	r0, #1
 8001d34:	2000      	moveq	r0, #0
 8001d36:	4770      	bx	lr

08001d38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	b90a      	cbnz	r2, 8001d3e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3a:	6281      	str	r1, [r0, #40]	; 0x28
 8001d3c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3e:	6181      	str	r1, [r0, #24]
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop

08001d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001d46:	6951      	ldr	r1, [r2, #20]
 8001d48:	4201      	tst	r1, r0
 8001d4a:	d100      	bne.n	8001d4e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001d4c:	4770      	bx	lr
{
 8001d4e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d50:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d52:	f002 fe87 	bl	8004a64 <HAL_GPIO_EXTI_Callback>
 8001d56:	bd08      	pop	{r3, pc}
 8001d58:	40010400 	.word	0x40010400

08001d5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b570      	push	{r4, r5, r6, lr}
 8001d5e:	4604      	mov	r4, r0
 8001d60:	460d      	mov	r5, r1
 8001d62:	4616      	mov	r6, r2
 8001d64:	1c6b      	adds	r3, r5, #1
 8001d66:	6822      	ldr	r2, [r4, #0]
 8001d68:	d128      	bne.n	8001dbc <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d6a:	6993      	ldr	r3, [r2, #24]
 8001d6c:	0798      	lsls	r0, r3, #30
 8001d6e:	d428      	bmi.n	8001dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d70:	6993      	ldr	r3, [r2, #24]
 8001d72:	06d9      	lsls	r1, r3, #27
 8001d74:	d5f9      	bpl.n	8001d6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d76:	6993      	ldr	r3, [r2, #24]
 8001d78:	069d      	lsls	r5, r3, #26
 8001d7a:	d5fc      	bpl.n	8001d76 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7c:	2110      	movs	r1, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d80:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d82:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d84:	6993      	ldr	r3, [r2, #24]
 8001d86:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8001d88:	bf44      	itt	mi
 8001d8a:	2300      	movmi	r3, #0
 8001d8c:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d8e:	6993      	ldr	r3, [r2, #24]
 8001d90:	07d9      	lsls	r1, r3, #31
 8001d92:	d403      	bmi.n	8001d9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d94:	6993      	ldr	r3, [r2, #24]
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6193      	str	r3, [r2, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d9c:	6853      	ldr	r3, [r2, #4]
 8001d9e:	491f      	ldr	r1, [pc, #124]	; (8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001da0:	2604      	movs	r6, #4
    I2C_RESET_CR2(hi2c);
 8001da2:	400b      	ands	r3, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	2520      	movs	r5, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da6:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001da8:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8001daa:	2001      	movs	r0, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dac:	6466      	str	r6, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dae:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dbc:	6993      	ldr	r3, [r2, #24]
 8001dbe:	079b      	lsls	r3, r3, #30
 8001dc0:	d501      	bpl.n	8001dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  return HAL_OK;
 8001dc2:	2000      	movs	r0, #0
}
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dc6:	6993      	ldr	r3, [r2, #24]
 8001dc8:	06d9      	lsls	r1, r3, #27
 8001dca:	d419      	bmi.n	8001e00 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dcc:	b125      	cbz	r5, 8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x7c>
 8001dce:	f7ff f843 	bl	8000e58 <HAL_GetTick>
 8001dd2:	1b80      	subs	r0, r0, r6
 8001dd4:	4285      	cmp	r5, r0
 8001dd6:	d2c5      	bcs.n	8001d64 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dde:	430b      	orrs	r3, r1
 8001de0:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001de2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001dea:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001df2:	b14d      	cbz	r5, 8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8001df4:	f7ff f830 	bl	8000e58 <HAL_GetTick>
 8001df8:	1b80      	subs	r0, r0, r6
 8001dfa:	4285      	cmp	r5, r0
 8001dfc:	d304      	bcc.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8001dfe:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e00:	6993      	ldr	r3, [r2, #24]
 8001e02:	069b      	lsls	r3, r3, #26
 8001e04:	d5f5      	bpl.n	8001df2 <I2C_WaitOnTXISFlagUntilTimeout+0x96>
 8001e06:	e7b9      	b.n	8001d7c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8001e10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	fe00e800 	.word	0xfe00e800

08001e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	4604      	mov	r4, r0
 8001e24:	4616      	mov	r6, r2
 8001e26:	460d      	mov	r5, r1
 8001e28:	b929      	cbnz	r1, 8001e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8001e2a:	e03b      	b.n	8001ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e2c:	f7ff f814 	bl	8000e58 <HAL_GetTick>
 8001e30:	1b80      	subs	r0, r0, r6
 8001e32:	4285      	cmp	r5, r0
 8001e34:	d33d      	bcc.n	8001eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e36:	6822      	ldr	r2, [r4, #0]
 8001e38:	6993      	ldr	r3, [r2, #24]
 8001e3a:	0698      	lsls	r0, r3, #26
 8001e3c:	d446      	bmi.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e3e:	6993      	ldr	r3, [r2, #24]
 8001e40:	06d9      	lsls	r1, r3, #27
 8001e42:	d5f3      	bpl.n	8001e2c <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8001e44:	1c68      	adds	r0, r5, #1
 8001e46:	d122      	bne.n	8001e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e48:	6993      	ldr	r3, [r2, #24]
 8001e4a:	0699      	lsls	r1, r3, #26
 8001e4c:	d5fc      	bpl.n	8001e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e4e:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e50:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e52:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e54:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e56:	6993      	ldr	r3, [r2, #24]
 8001e58:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8001e5a:	bf44      	itt	mi
 8001e5c:	2300      	movmi	r3, #0
 8001e5e:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e60:	6993      	ldr	r3, [r2, #24]
 8001e62:	07d9      	lsls	r1, r3, #31
 8001e64:	d403      	bmi.n	8001e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e66:	6993      	ldr	r3, [r2, #24]
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 8001e6e:	6853      	ldr	r3, [r2, #4]
 8001e70:	491c      	ldr	r1, [pc, #112]	; (8001ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e72:	2604      	movs	r6, #4
    I2C_RESET_CR2(hi2c);
 8001e74:	400b      	ands	r3, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	2520      	movs	r5, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001e7a:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e7e:	6466      	str	r6, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001e80:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8e:	6993      	ldr	r3, [r2, #24]
 8001e90:	069b      	lsls	r3, r3, #26
 8001e92:	d4dc      	bmi.n	8001e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e94:	b1e5      	cbz	r5, 8001ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8001e96:	f7fe ffdf 	bl	8000e58 <HAL_GetTick>
 8001e9a:	1b80      	subs	r0, r0, r6
 8001e9c:	4285      	cmp	r5, r0
 8001e9e:	d317      	bcc.n	8001ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	e7cf      	b.n	8001e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ea4:	6802      	ldr	r2, [r0, #0]
 8001ea6:	6993      	ldr	r3, [r2, #24]
 8001ea8:	069b      	lsls	r3, r3, #26
 8001eaa:	d40f      	bmi.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eac:	6993      	ldr	r3, [r2, #24]
 8001eae:	06db      	lsls	r3, r3, #27
 8001eb0:	d4c8      	bmi.n	8001e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb6:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001ebc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001ec4:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001ecc:	2000      	movs	r0, #0
}
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8001ed8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	fe00e800 	.word	0xfe00e800

08001ee8 <I2C_RequestMemoryRead>:
{
 8001ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001eec:	f8d0 e000 	ldr.w	lr, [r0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001ef0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8001f94 <I2C_RequestMemoryRead+0xac>
  tmpreg = hi2c->Instance->CR2;
 8001ef4:	f8de 4004 	ldr.w	r4, [lr, #4]
{
 8001ef8:	9e06      	ldr	r6, [sp, #24]
 8001efa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001efe:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001f02:	ea04 040c 	and.w	r4, r4, ip
{
 8001f06:	461f      	mov	r7, r3
 8001f08:	4321      	orrs	r1, r4

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 8001f10:	4690      	mov	r8, r2
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001f12:	f8ce 1004 	str.w	r1, [lr, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f16:	9a07      	ldr	r2, [sp, #28]
 8001f18:	4631      	mov	r1, r6
{
 8001f1a:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1c:	f7ff ff1e 	bl	8001d5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001f20:	b960      	cbnz	r0, 8001f3c <I2C_RequestMemoryRead+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f22:	2f01      	cmp	r7, #1
 8001f24:	4604      	mov	r4, r0
 8001f26:	d010      	beq.n	8001f4a <I2C_RequestMemoryRead+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f28:	682b      	ldr	r3, [r5, #0]
 8001f2a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f30:	4631      	mov	r1, r6
 8001f32:	9a07      	ldr	r2, [sp, #28]
 8001f34:	4628      	mov	r0, r5
 8001f36:	f7ff ff11 	bl	8001d5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001f3a:	b130      	cbz	r0, 8001f4a <I2C_RequestMemoryRead+0x62>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d01b      	beq.n	8001f7a <I2C_RequestMemoryRead+0x92>
    return HAL_TIMEOUT;
 8001f42:	2403      	movs	r4, #3
}
 8001f44:	4620      	mov	r0, r4
 8001f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f4a:	6829      	ldr	r1, [r5, #0]
 8001f4c:	fa5f f388 	uxtb.w	r3, r8
 8001f50:	628b      	str	r3, [r1, #40]	; 0x28
 8001f52:	1c70      	adds	r0, r6, #1
 8001f54:	d105      	bne.n	8001f62 <I2C_RequestMemoryRead+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f56:	698b      	ldr	r3, [r1, #24]
 8001f58:	065a      	lsls	r2, r3, #25
 8001f5a:	d5fc      	bpl.n	8001f56 <I2C_RequestMemoryRead+0x6e>
}
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f62:	698b      	ldr	r3, [r1, #24]
 8001f64:	065b      	lsls	r3, r3, #25
 8001f66:	d4ed      	bmi.n	8001f44 <I2C_RequestMemoryRead+0x5c>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f68:	b15e      	cbz	r6, 8001f82 <I2C_RequestMemoryRead+0x9a>
 8001f6a:	f7fe ff75 	bl	8000e58 <HAL_GetTick>
 8001f6e:	9b07      	ldr	r3, [sp, #28]
 8001f70:	1ac0      	subs	r0, r0, r3
 8001f72:	4286      	cmp	r6, r0
 8001f74:	d305      	bcc.n	8001f82 <I2C_RequestMemoryRead+0x9a>
 8001f76:	6829      	ldr	r1, [r5, #0]
 8001f78:	e7eb      	b.n	8001f52 <I2C_RequestMemoryRead+0x6a>
      return HAL_ERROR;
 8001f7a:	2401      	movs	r4, #1
}
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f82:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	2220      	movs	r2, #32
 8001f86:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8001f8a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8001f92:	e7d6      	b.n	8001f42 <I2C_RequestMemoryRead+0x5a>
 8001f94:	fc009800 	.word	0xfc009800

08001f98 <I2C_RequestMemoryWrite>:
{
 8001f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  tmpreg = hi2c->Instance->CR2;
 8001f9c:	f8d0 e000 	ldr.w	lr, [r0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001fa0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8002048 <I2C_RequestMemoryWrite+0xb0>
  tmpreg = hi2c->Instance->CR2;
 8001fa4:	f8de 4004 	ldr.w	r4, [lr, #4]
{
 8001fa8:	9e06      	ldr	r6, [sp, #24]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001faa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001fae:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001fb2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001fb6:	ea04 040c 	and.w	r4, r4, ip
{
 8001fba:	461f      	mov	r7, r3
 8001fbc:	4321      	orrs	r1, r4
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 8001fc4:	4690      	mov	r8, r2
  hi2c->Instance->CR2 = tmpreg;
 8001fc6:	f8ce 1004 	str.w	r1, [lr, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fca:	9a07      	ldr	r2, [sp, #28]
 8001fcc:	4631      	mov	r1, r6
{
 8001fce:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd0:	f7ff fec4 	bl	8001d5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001fd4:	b960      	cbnz	r0, 8001ff0 <I2C_RequestMemoryWrite+0x58>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fd6:	2f01      	cmp	r7, #1
 8001fd8:	4604      	mov	r4, r0
 8001fda:	d010      	beq.n	8001ffe <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fdc:	682b      	ldr	r3, [r5, #0]
 8001fde:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe4:	4631      	mov	r1, r6
 8001fe6:	9a07      	ldr	r2, [sp, #28]
 8001fe8:	4628      	mov	r0, r5
 8001fea:	f7ff feb7 	bl	8001d5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001fee:	b130      	cbz	r0, 8001ffe <I2C_RequestMemoryWrite+0x66>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d01b      	beq.n	800202e <I2C_RequestMemoryWrite+0x96>
    return HAL_TIMEOUT;
 8001ff6:	2403      	movs	r4, #3
}
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ffe:	6829      	ldr	r1, [r5, #0]
 8002000:	fa5f f388 	uxtb.w	r3, r8
 8002004:	628b      	str	r3, [r1, #40]	; 0x28
 8002006:	1c70      	adds	r0, r6, #1
 8002008:	d105      	bne.n	8002016 <I2C_RequestMemoryWrite+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800200a:	698b      	ldr	r3, [r1, #24]
 800200c:	061a      	lsls	r2, r3, #24
 800200e:	d5fc      	bpl.n	800200a <I2C_RequestMemoryWrite+0x72>
}
 8002010:	4620      	mov	r0, r4
 8002012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002016:	698b      	ldr	r3, [r1, #24]
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	d4ed      	bmi.n	8001ff8 <I2C_RequestMemoryWrite+0x60>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800201c:	b15e      	cbz	r6, 8002036 <I2C_RequestMemoryWrite+0x9e>
 800201e:	f7fe ff1b 	bl	8000e58 <HAL_GetTick>
 8002022:	9b07      	ldr	r3, [sp, #28]
 8002024:	1ac0      	subs	r0, r0, r3
 8002026:	4286      	cmp	r6, r0
 8002028:	d305      	bcc.n	8002036 <I2C_RequestMemoryWrite+0x9e>
 800202a:	6829      	ldr	r1, [r5, #0]
 800202c:	e7eb      	b.n	8002006 <I2C_RequestMemoryWrite+0x6e>
      return HAL_ERROR;
 800202e:	2401      	movs	r4, #1
}
 8002030:	4620      	mov	r0, r4
 8002032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002036:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002038:	2220      	movs	r2, #32
 800203a:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800203e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002042:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8002046:	e7d6      	b.n	8001ff6 <I2C_RequestMemoryWrite+0x5e>
 8002048:	fc009800 	.word	0xfc009800

0800204c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800204c:	2800      	cmp	r0, #0
 800204e:	d051      	beq.n	80020f4 <HAL_I2C_Init+0xa8>
{
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002052:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002056:	4604      	mov	r4, r0
 8002058:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800205c:	2b00      	cmp	r3, #0
 800205e:	d040      	beq.n	80020e2 <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 8002060:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002062:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002064:	2224      	movs	r2, #36	; 0x24
 8002066:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800206a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800206c:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 800206e:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8002076:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002078:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800207a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800207c:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800207e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002082:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002084:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002086:	d031      	beq.n	80020ec <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002088:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800208c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800208e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002090:	bf04      	itt	eq
 8002092:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002096:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002098:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800209a:	6922      	ldr	r2, [r4, #16]
 800209c:	f8d4 e014 	ldr.w	lr, [r4, #20]
 80020a0:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020a2:	69e0      	ldr	r0, [r4, #28]
 80020a4:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020a6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80020aa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80020ae:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020b0:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020b2:	ea42 020e 	orr.w	r2, r2, lr
 80020b6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020ba:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020bc:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 80020c0:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020c2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020c4:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80020c6:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c8:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 80020ca:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80020d0:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 80020d2:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d4:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 80020e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80020e2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80020e6:	f003 feb5 	bl	8005e54 <HAL_I2C_MspInit>
 80020ea:	e7b9      	b.n	8002060 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	e7d1      	b.n	8002098 <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
 80020f6:	4770      	bx	lr

080020f8 <HAL_I2C_Mem_Write>:
{
 80020f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fc:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002100:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	2c20      	cmp	r4, #32
{
 8002104:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002108:	d003      	beq.n	8002112 <HAL_I2C_Mem_Write+0x1a>
    return HAL_BUSY;
 800210a:	2002      	movs	r0, #2
}
 800210c:	b002      	add	sp, #8
 800210e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002112:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002114:	2c00      	cmp	r4, #0
 8002116:	d03b      	beq.n	8002190 <HAL_I2C_Mem_Write+0x98>
 8002118:	2d00      	cmp	r5, #0
 800211a:	d039      	beq.n	8002190 <HAL_I2C_Mem_Write+0x98>
    __HAL_LOCK(hi2c);
 800211c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002120:	2c01      	cmp	r4, #1
 8002122:	d0f2      	beq.n	800210a <HAL_I2C_Mem_Write+0x12>
 8002124:	461f      	mov	r7, r3
 8002126:	2301      	movs	r3, #1
 8002128:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800212c:	4690      	mov	r8, r2
 800212e:	4689      	mov	r9, r1
 8002130:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002132:	f7fe fe91 	bl	8000e58 <HAL_GetTick>
 8002136:	4682      	mov	sl, r0
 8002138:	e005      	b.n	8002146 <HAL_I2C_Mem_Write+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800213a:	f7fe fe8d 	bl	8000e58 <HAL_GetTick>
 800213e:	eba0 000a 	sub.w	r0, r0, sl
 8002142:	2819      	cmp	r0, #25
 8002144:	d826      	bhi.n	8002194 <HAL_I2C_Mem_Write+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	699e      	ldr	r6, [r3, #24]
 800214a:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800214e:	d1f4      	bne.n	800213a <HAL_I2C_Mem_Write+0x42>
    hi2c->pBuffPtr  = pData;
 8002150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002152:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002154:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002156:	2140      	movs	r1, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->XferISR   = NULL;
 800215a:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800215c:	4642      	mov	r2, r8
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f8cd a004 	str.w	sl, [sp, #4]
 8002164:	463b      	mov	r3, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002166:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800216a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800216e:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	6466      	str	r6, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002172:	4649      	mov	r1, r9
    hi2c->XferCount = Size;
 8002174:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002176:	f7ff ff0f 	bl	8001f98 <I2C_RequestMemoryWrite>
 800217a:	b1a0      	cbz	r0, 80021a6 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800217e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002182:	2b04      	cmp	r3, #4
 8002184:	d004      	beq.n	8002190 <HAL_I2C_Mem_Write+0x98>
          return HAL_TIMEOUT;
 8002186:	2003      	movs	r0, #3
 8002188:	e7c0      	b.n	800210c <HAL_I2C_Mem_Write+0x14>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800218c:	2b04      	cmp	r3, #4
 800218e:	d1fa      	bne.n	8002186 <HAL_I2C_Mem_Write+0x8e>
        return HAL_ERROR;
 8002190:	2001      	movs	r0, #1
 8002192:	e7bb      	b.n	800210c <HAL_I2C_Mem_Write+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002196:	2220      	movs	r2, #32
 8002198:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800219c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021a4:	e7ef      	b.n	8002186 <HAL_I2C_Mem_Write+0x8e>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 80021a8:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2bff      	cmp	r3, #255	; 0xff
 80021ae:	d95e      	bls.n	800226e <HAL_I2C_Mem_Write+0x176>
  tmpreg = hi2c->Instance->CR2;
 80021b0:	684a      	ldr	r2, [r1, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021b2:	4842      	ldr	r0, [pc, #264]	; (80022bc <HAL_I2C_Mem_Write+0x1c4>)
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80021b4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80021b8:	f049 73ff 	orr.w	r3, r9, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021bc:	4002      	ands	r2, r0
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80021be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c2:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c4:	22ff      	movs	r2, #255	; 0xff
 80021c6:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 80021c8:	604b      	str	r3, [r1, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80021ca:	f049 75ff 	orr.w	r5, r9, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021ce:	4e3b      	ldr	r6, [pc, #236]	; (80022bc <HAL_I2C_Mem_Write+0x1c4>)
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80021d0:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 80021d4:	e003      	b.n	80021de <HAL_I2C_Mem_Write+0xe6>
    while (hi2c->XferCount > 0U);
 80021d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d057      	beq.n	800228e <HAL_I2C_Mem_Write+0x196>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021de:	4652      	mov	r2, sl
 80021e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff fdba 	bl	8001d5c <I2C_WaitOnTXISFlagUntilTimeout>
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d1ce      	bne.n	800218a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80021ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021ee:	6821      	ldr	r1, [r4, #0]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	6262      	str	r2, [r4, #36]	; 0x24
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 80021f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80021fc:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 80021fe:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8002200:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8002202:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8002204:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002206:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e4      	bne.n	80021d6 <HAL_I2C_Mem_Write+0xde>
 800220c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0e0      	beq.n	80021d6 <HAL_I2C_Mem_Write+0xde>
 8002214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002216:	3301      	adds	r3, #1
 8002218:	d10d      	bne.n	8002236 <HAL_I2C_Mem_Write+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800221a:	698b      	ldr	r3, [r1, #24]
 800221c:	061a      	lsls	r2, r3, #24
 800221e:	d5fc      	bpl.n	800221a <HAL_I2C_Mem_Write+0x122>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002220:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	2bff      	cmp	r3, #255	; 0xff
 8002226:	d915      	bls.n	8002254 <HAL_I2C_Mem_Write+0x15c>
  tmpreg = hi2c->Instance->CR2;
 8002228:	684b      	ldr	r3, [r1, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800222a:	4033      	ands	r3, r6
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800222c:	432b      	orrs	r3, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800222e:	22ff      	movs	r2, #255	; 0xff
 8002230:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	e7cf      	b.n	80021d6 <HAL_I2C_Mem_Write+0xde>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002236:	698b      	ldr	r3, [r1, #24]
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	d4f1      	bmi.n	8002220 <HAL_I2C_Mem_Write+0x128>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800223c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0a8      	beq.n	8002194 <HAL_I2C_Mem_Write+0x9c>
 8002242:	f7fe fe09 	bl	8000e58 <HAL_GetTick>
 8002246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002248:	eba0 000a 	sub.w	r0, r0, sl
 800224c:	4283      	cmp	r3, r0
 800224e:	d3a1      	bcc.n	8002194 <HAL_I2C_Mem_Write+0x9c>
 8002250:	6821      	ldr	r1, [r4, #0]
 8002252:	e7e0      	b.n	8002216 <HAL_I2C_Mem_Write+0x11e>
          hi2c->XferSize = hi2c->XferCount;
 8002254:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 8002256:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002258:	b292      	uxth	r2, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800225a:	b2d3      	uxtb	r3, r2
 800225c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8002260:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002264:	4030      	ands	r0, r6
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002266:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002268:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e7b3      	b.n	80021d6 <HAL_I2C_Mem_Write+0xde>
      hi2c->XferSize = hi2c->XferCount;
 800226e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002270:	4812      	ldr	r0, [pc, #72]	; (80022bc <HAL_I2C_Mem_Write+0x1c4>)
  tmpreg = hi2c->Instance->CR2;
 8002272:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002274:	f3c9 0909 	ubfx	r9, r9, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 8002278:	b292      	uxth	r2, r2
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800227a:	4003      	ands	r3, r0
 800227c:	f049 7000 	orr.w	r0, r9, #33554432	; 0x2000000
 8002280:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002282:	b2d0      	uxtb	r0, r2
 8002284:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 8002288:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e79d      	b.n	80021ca <HAL_I2C_Mem_Write+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228e:	4652      	mov	r2, sl
 8002290:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fdc4 	bl	8001e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002298:	2800      	cmp	r0, #0
 800229a:	f47f af76 	bne.w	800218a <HAL_I2C_Mem_Write+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80022a0:	4d07      	ldr	r5, [pc, #28]	; (80022c0 <HAL_I2C_Mem_Write+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a2:	2120      	movs	r1, #32
 80022a4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	402a      	ands	r2, r5
 80022aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022b0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80022b8:	e728      	b.n	800210c <HAL_I2C_Mem_Write+0x14>
 80022ba:	bf00      	nop
 80022bc:	fc009800 	.word	0xfc009800
 80022c0:	fe00e800 	.word	0xfe00e800

080022c4 <HAL_I2C_Mem_Read>:
{
 80022c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80022cc:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	2c20      	cmp	r4, #32
{
 80022d0:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d4:	d003      	beq.n	80022de <HAL_I2C_Mem_Read+0x1a>
    return HAL_BUSY;
 80022d6:	2002      	movs	r0, #2
}
 80022d8:	b002      	add	sp, #8
 80022da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 80022de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80022e0:	2c00      	cmp	r4, #0
 80022e2:	d045      	beq.n	8002370 <HAL_I2C_Mem_Read+0xac>
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	d043      	beq.n	8002370 <HAL_I2C_Mem_Read+0xac>
    __HAL_LOCK(hi2c);
 80022e8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80022ec:	2c01      	cmp	r4, #1
 80022ee:	d0f2      	beq.n	80022d6 <HAL_I2C_Mem_Read+0x12>
 80022f0:	461f      	mov	r7, r3
 80022f2:	2301      	movs	r3, #1
 80022f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80022f8:	4690      	mov	r8, r2
 80022fa:	460e      	mov	r6, r1
 80022fc:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80022fe:	f7fe fdab 	bl	8000e58 <HAL_GetTick>
 8002302:	4681      	mov	r9, r0
 8002304:	e005      	b.n	8002312 <HAL_I2C_Mem_Read+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002306:	f7fe fda7 	bl	8000e58 <HAL_GetTick>
 800230a:	eba0 0009 	sub.w	r0, r0, r9
 800230e:	2819      	cmp	r0, #25
 8002310:	d83c      	bhi.n	800238c <HAL_I2C_Mem_Read+0xc8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f413 4a00 	ands.w	sl, r3, #32768	; 0x8000
 800231a:	d1f4      	bne.n	8002306 <HAL_I2C_Mem_Read+0x42>
    hi2c->pBuffPtr  = pData;
 800231c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800231e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002320:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002322:	2140      	movs	r1, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->XferISR   = NULL;
 8002326:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800232a:	4642      	mov	r2, r8
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002332:	463b      	mov	r3, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002334:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002338:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800233c:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233e:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002342:	4631      	mov	r1, r6
    hi2c->XferCount = Size;
 8002344:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002346:	f7ff fdcf 	bl	8001ee8 <I2C_RequestMemoryRead>
 800234a:	b348      	cbz	r0, 80023a0 <HAL_I2C_Mem_Read+0xdc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800234e:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002352:	2b04      	cmp	r3, #4
 8002354:	d00c      	beq.n	8002370 <HAL_I2C_Mem_Read+0xac>
        return HAL_TIMEOUT;
 8002356:	2003      	movs	r0, #3
 8002358:	e7be      	b.n	80022d8 <HAL_I2C_Mem_Read+0x14>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	464a      	mov	r2, r9
 800235c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800235e:	4620      	mov	r0, r4
 8002360:	f7ff fd5e 	bl	8001e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002364:	2800      	cmp	r0, #0
 8002366:	f000 8090 	beq.w	800248a <HAL_I2C_Mem_Read+0x1c6>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800236c:	2b04      	cmp	r3, #4
 800236e:	d1f2      	bne.n	8002356 <HAL_I2C_Mem_Read+0x92>
        return HAL_ERROR;
 8002370:	2001      	movs	r0, #1
 8002372:	e7b1      	b.n	80022d8 <HAL_I2C_Mem_Read+0x14>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	6993      	ldr	r3, [r2, #24]
 8002376:	061b      	lsls	r3, r3, #24
 8002378:	d45d      	bmi.n	8002436 <HAL_I2C_Mem_Read+0x172>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800237a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800237c:	b133      	cbz	r3, 800238c <HAL_I2C_Mem_Read+0xc8>
 800237e:	f7fe fd6b 	bl	8000e58 <HAL_GetTick>
 8002382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002384:	eba0 0009 	sub.w	r0, r0, r9
 8002388:	4283      	cmp	r3, r0
 800238a:	d24e      	bcs.n	800242a <HAL_I2C_Mem_Read+0x166>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800238e:	2220      	movs	r2, #32
 8002390:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8002394:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_TIMEOUT;
 800239c:	2003      	movs	r0, #3
 800239e:	e79b      	b.n	80022d8 <HAL_I2C_Mem_Read+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 80023a2:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2bff      	cmp	r3, #255	; 0xff
 80023a8:	d95d      	bls.n	8002466 <HAL_I2C_Mem_Read+0x1a2>
  tmpreg = hi2c->Instance->CR2;
 80023aa:	6851      	ldr	r1, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80023ac:	483e      	ldr	r0, [pc, #248]	; (80024a8 <HAL_I2C_Mem_Read+0x1e4>)
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80023ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80023b2:	f046 73ff 	orr.w	r3, r6, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80023b6:	4001      	ands	r1, r0
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80023b8:	f443 3392 	orr.w	r3, r3, #74752	; 0x12400
 80023bc:	430b      	orrs	r3, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023be:	21ff      	movs	r1, #255	; 0xff
 80023c0:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 80023c2:	6053      	str	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80023c4:	f046 75ff 	orr.w	r5, r6, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80023c8:	4f37      	ldr	r7, [pc, #220]	; (80024a8 <HAL_I2C_Mem_Read+0x1e4>)
 80023ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80023cc:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 80023d0:	3301      	adds	r3, #1
 80023d2:	d11a      	bne.n	800240a <HAL_I2C_Mem_Read+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d4:	6993      	ldr	r3, [r2, #24]
 80023d6:	075b      	lsls	r3, r3, #29
 80023d8:	d5fc      	bpl.n	80023d4 <HAL_I2C_Mem_Read+0x110>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80023da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023de:	1c59      	adds	r1, r3, #1
 80023e0:	6261      	str	r1, [r4, #36]	; 0x24
 80023e2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80023e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80023e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80023e8:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 80023ea:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 80023ec:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 80023ee:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 80023f0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80023f2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80023f4:	b913      	cbnz	r3, 80023fc <HAL_I2C_Mem_Read+0x138>
 80023f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b9ab      	cbnz	r3, 8002428 <HAL_I2C_Mem_Read+0x164>
    while (hi2c->XferCount > 0U);
 80023fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0aa      	beq.n	800235a <HAL_I2C_Mem_Read+0x96>
 8002404:	6822      	ldr	r2, [r4, #0]
 8002406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002408:	e7e2      	b.n	80023d0 <HAL_I2C_Mem_Read+0x10c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240a:	6993      	ldr	r3, [r2, #24]
 800240c:	0758      	lsls	r0, r3, #29
 800240e:	d4e4      	bmi.n	80023da <HAL_I2C_Mem_Read+0x116>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ba      	beq.n	800238c <HAL_I2C_Mem_Read+0xc8>
 8002416:	f7fe fd1f 	bl	8000e58 <HAL_GetTick>
 800241a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800241c:	eba0 0009 	sub.w	r0, r0, r9
 8002420:	4283      	cmp	r3, r0
 8002422:	d3b3      	bcc.n	800238c <HAL_I2C_Mem_Read+0xc8>
 8002424:	6822      	ldr	r2, [r4, #0]
 8002426:	e7d3      	b.n	80023d0 <HAL_I2C_Mem_Read+0x10c>
 8002428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	d1a1      	bne.n	8002374 <HAL_I2C_Mem_Read+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002430:	6993      	ldr	r3, [r2, #24]
 8002432:	0619      	lsls	r1, r3, #24
 8002434:	d5fc      	bpl.n	8002430 <HAL_I2C_Mem_Read+0x16c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002436:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	2bff      	cmp	r3, #255	; 0xff
 800243c:	d906      	bls.n	800244c <HAL_I2C_Mem_Read+0x188>
  tmpreg = hi2c->Instance->CR2;
 800243e:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002440:	403b      	ands	r3, r7
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002442:	432b      	orrs	r3, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002444:	21ff      	movs	r1, #255	; 0xff
 8002446:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8002448:	6053      	str	r3, [r2, #4]
 800244a:	e7d7      	b.n	80023fc <HAL_I2C_Mem_Read+0x138>
          hi2c->XferSize = hi2c->XferCount;
 800244c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 800244e:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002450:	b289      	uxth	r1, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002452:	b2cb      	uxtb	r3, r1
 8002454:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800245c:	4038      	ands	r0, r7
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800245e:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 8002460:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8002462:	6053      	str	r3, [r2, #4]
 8002464:	e7ca      	b.n	80023fc <HAL_I2C_Mem_Read+0x138>
      hi2c->XferSize = hi2c->XferCount;
 8002466:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002468:	4d0f      	ldr	r5, [pc, #60]	; (80024a8 <HAL_I2C_Mem_Read+0x1e4>)
  tmpreg = hi2c->Instance->CR2;
 800246a:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800246c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002470:	f046 7000 	orr.w	r0, r6, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8002474:	b289      	uxth	r1, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002476:	402b      	ands	r3, r5
 8002478:	f440 5010 	orr.w	r0, r0, #9216	; 0x2400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800247c:	b2cd      	uxtb	r5, r1
 800247e:	4303      	orrs	r3, r0
 8002480:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 8002484:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8002486:	6053      	str	r3, [r2, #4]
 8002488:	e79c      	b.n	80023c4 <HAL_I2C_Mem_Read+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800248c:	4d07      	ldr	r5, [pc, #28]	; (80024ac <HAL_I2C_Mem_Read+0x1e8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248e:	2120      	movs	r1, #32
 8002490:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	402a      	ands	r2, r5
 8002496:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002498:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800249c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80024a4:	e718      	b.n	80022d8 <HAL_I2C_Mem_Read+0x14>
 80024a6:	bf00      	nop
 80024a8:	fc009800 	.word	0xfc009800
 80024ac:	fe00e800 	.word	0xfe00e800

080024b0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024b0:	6803      	ldr	r3, [r0, #0]
{
 80024b2:	b410      	push	{r4}
  if (hi2c->XferISR != NULL)
 80024b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024b6:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024b8:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80024ba:	b11c      	cbz	r4, 80024c4 <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 80024bc:	4623      	mov	r3, r4
}
 80024be:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 80024c2:	4718      	bx	r3
}
 80024c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <HAL_I2C_SlaveTxCpltCallback>:
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <HAL_I2C_SlaveRxCpltCallback>:
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <HAL_I2C_AddrCallback>:
{
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop

080024d8 <HAL_I2C_ListenCpltCallback>:
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <HAL_I2C_ErrorCallback>:
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <HAL_I2C_AbortCpltCallback>:
{
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop

080024e4 <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024e4:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024e6:	4a46      	ldr	r2, [pc, #280]	; (8002600 <I2C_ITError+0x11c>)
{
 80024e8:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024ea:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024ee:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80024f0:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80024f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80024f4:	4319      	orrs	r1, r3
 80024f6:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80024f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80024fc:	2b28      	cmp	r3, #40	; 0x28
{
 80024fe:	4604      	mov	r4, r0
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002500:	d02c      	beq.n	800255c <I2C_ITError+0x78>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002502:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002506:	2b29      	cmp	r3, #41	; 0x29
 8002508:	d028      	beq.n	800255c <I2C_ITError+0x78>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800250a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800250e:	2b2a      	cmp	r3, #42	; 0x2a
 8002510:	d024      	beq.n	800255c <I2C_ITError+0x78>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002512:	6803      	ldr	r3, [r0, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002514:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002518:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8002522:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002524:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002528:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 800252a:	bf1c      	itt	ne
 800252c:	2220      	movne	r2, #32
 800252e:	f880 2041 	strbne.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	2200      	movs	r2, #0
 8002534:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002536:	6342      	str	r2, [r0, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 800253e:	d12e      	bne.n	800259e <I2C_ITError+0xba>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 8002546:	d13e      	bne.n	80025c6 <I2C_ITError+0xe2>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002548:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800254c:	2b60      	cmp	r3, #96	; 0x60
 800254e:	d04d      	beq.n	80025ec <I2C_ITError+0x108>
    __HAL_UNLOCK(hi2c);
 8002550:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002554:	4620      	mov	r0, r4
 8002556:	f7ff ffc1 	bl	80024dc <HAL_I2C_ErrorCallback>
 800255a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800255c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002560:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002564:	6823      	ldr	r3, [r4, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002566:	4d27      	ldr	r5, [pc, #156]	; (8002604 <I2C_ITError+0x120>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002568:	681a      	ldr	r2, [r3, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800256a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 800256e:	2928      	cmp	r1, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002570:	f000 0028 	and.w	r0, r0, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002574:	bf14      	ite	ne
 8002576:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 800257a:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800257e:	2828      	cmp	r0, #40	; 0x28
 8002580:	bf18      	it	ne
 8002582:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002586:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002588:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800258c:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800258e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002592:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002594:	681a      	ldr	r2, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002596:	6365      	str	r5, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002598:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 800259c:	d0d0      	beq.n	8002540 <I2C_ITError+0x5c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800259e:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80025a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80025a2:	4e19      	ldr	r6, [pc, #100]	; (8002608 <I2C_ITError+0x124>)
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    __HAL_UNLOCK(hi2c);
 80025a8:	2500      	movs	r5, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025aa:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80025ac:	4608      	mov	r0, r1
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80025ae:	634e      	str	r6, [r1, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80025b0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80025b4:	f7ff f978 	bl	80018a8 <HAL_DMA_Abort_IT>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d0ce      	beq.n	800255a <I2C_ITError+0x76>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80025bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80025be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80025c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025c4:	4718      	bx	r3
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025c6:	6819      	ldr	r1, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025c8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80025ca:	4e0f      	ldr	r6, [pc, #60]	; (8002608 <I2C_ITError+0x124>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025cc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80025d0:	6019      	str	r1, [r3, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025d2:	4628      	mov	r0, r5
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025d4:	636e      	str	r6, [r5, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80025d6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025da:	f7ff f965 	bl	80018a8 <HAL_DMA_Abort_IT>
 80025de:	2800      	cmp	r0, #0
 80025e0:	d0bb      	beq.n	800255a <I2C_ITError+0x76>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 80025e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025ea:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80025ee:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff ff72 	bl	80024e0 <HAL_I2C_AbortCpltCallback>
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
 80025fe:	bf00      	nop
 8002600:	ffff0000 	.word	0xffff0000
 8002604:	08002771 	.word	0x08002771
 8002608:	08002a89 	.word	0x08002a89

0800260c <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800260c:	6803      	ldr	r3, [r0, #0]
 800260e:	2220      	movs	r2, #32
{
 8002610:	b570      	push	{r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002612:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002614:	2208      	movs	r2, #8
 8002616:	61da      	str	r2, [r3, #28]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002618:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800261c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  I2C_RESET_CR2(hi2c);
 8002620:	4d51      	ldr	r5, [pc, #324]	; (8002768 <I2C_ITSlaveCplt+0x15c>)
{
 8002622:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	f020 00fe 	bic.w	r0, r0, #254	; 0xfe
 800262a:	6018      	str	r0, [r3, #0]
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800262c:	6858      	ldr	r0, [r3, #4]
 800262e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002632:	6058      	str	r0, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	402a      	ands	r2, r5
 8002638:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	0796      	lsls	r6, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800263e:	bf44      	itt	mi
 8002640:	2200      	movmi	r2, #0
 8002642:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	07d5      	lsls	r5, r2, #31
 8002648:	d403      	bmi.n	8002652 <I2C_ITSlaveCplt+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	619a      	str	r2, [r3, #24]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	0450      	lsls	r0, r2, #17
 8002656:	d42d      	bmi.n	80026b4 <I2C_ITSlaveCplt+0xa8>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8002658:	681a      	ldr	r2, [r3, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800265a:	0412      	lsls	r2, r2, #16
 800265c:	d42a      	bmi.n	80026b4 <I2C_ITSlaveCplt+0xa8>
  if (hi2c->XferCount != 0U)
 800265e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002660:	b292      	uxth	r2, r2
 8002662:	b11a      	cbz	r2, 800266c <I2C_ITSlaveCplt+0x60>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002664:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002666:	f042 0204 	orr.w	r2, r2, #4
 800266a:	6462      	str	r2, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 800266c:	f011 0604 	ands.w	r6, r1, #4
 8002670:	d006      	beq.n	8002680 <I2C_ITSlaveCplt+0x74>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002672:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	1c51      	adds	r1, r2, #1
 8002678:	6261      	str	r1, [r4, #36]	; 0x24
 800267a:	7013      	strb	r3, [r2, #0]
    if ((hi2c->XferSize > 0U))
 800267c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800267e:	bb73      	cbnz	r3, 80026de <I2C_ITSlaveCplt+0xd2>
  hi2c->PreviousState = I2C_STATE_NONE;
 8002680:	2500      	movs	r5, #0
 8002682:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002688:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800268a:	6365      	str	r5, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800268c:	2b00      	cmp	r3, #0
 800268e:	d131      	bne.n	80026f4 <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002690:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002692:	4936      	ldr	r1, [pc, #216]	; (800276c <I2C_ITSlaveCplt+0x160>)
 8002694:	428a      	cmp	r2, r1
 8002696:	d118      	bne.n	80026ca <I2C_ITSlaveCplt+0xbe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002698:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800269c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026a0:	2a22      	cmp	r2, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	f04f 0220 	mov.w	r2, #32
 80026a6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026aa:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026ac:	d058      	beq.n	8002760 <I2C_ITSlaveCplt+0x154>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026ae:	f7ff ff0d 	bl	80024cc <HAL_I2C_SlaveTxCpltCallback>
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 80026b4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80026b8:	2a21      	cmp	r2, #33	; 0x21
 80026ba:	bf0c      	ite	eq
 80026bc:	6ba2      	ldreq	r2, [r4, #56]	; 0x38
 80026be:	6be2      	ldrne	r2, [r4, #60]	; 0x3c
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	6852      	ldr	r2, [r2, #4]
 80026c4:	b292      	uxth	r2, r2
 80026c6:	8562      	strh	r2, [r4, #42]	; 0x2a
 80026c8:	e7c9      	b.n	800265e <I2C_ITSlaveCplt+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026cc:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 80026ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7ff fefe 	bl	80024d8 <HAL_I2C_ListenCpltCallback>
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 80026de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026e0:	3a01      	subs	r2, #1
 80026e2:	b292      	uxth	r2, r2
 80026e4:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
      hi2c->XferSize--;
 80026e8:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ea:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 80026ee:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026f0:	6462      	str	r2, [r4, #68]	; 0x44
 80026f2:	e7c5      	b.n	8002680 <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80026f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff fef4 	bl	80024e4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80026fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002700:	2b28      	cmp	r3, #40	; 0x28
 8002702:	d1d6      	bne.n	80026b2 <I2C_ITSlaveCplt+0xa6>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <I2C_ITSlaveCplt+0x160>)
 8002706:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8002708:	2320      	movs	r3, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 800270c:	6365      	str	r5, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 800270e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002712:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8002716:	b18e      	cbz	r6, 800273c <I2C_ITSlaveCplt+0x130>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	1c59      	adds	r1, r3, #1
 800271e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002720:	6261      	str	r1, [r4, #36]	; 0x24
 8002722:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8002724:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002726:	b14b      	cbz	r3, 800273c <I2C_ITSlaveCplt+0x130>
      hi2c->XferCount--;
 8002728:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800272a:	3a01      	subs	r2, #1
 800272c:	b292      	uxth	r2, r2
 800272e:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002730:	6c62      	ldr	r2, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8002732:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002734:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 8002738:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800273a:	6462      	str	r2, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800273c:	6823      	ldr	r3, [r4, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800273e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002742:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002746:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002748:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800274a:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 800274e:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002750:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002752:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002754:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002756:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800275a:	f7ff febd 	bl	80024d8 <HAL_I2C_ListenCpltCallback>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002760:	f7ff feb6 	bl	80024d0 <HAL_I2C_SlaveRxCpltCallback>
 8002764:	bd70      	pop	{r4, r5, r6, pc}
 8002766:	bf00      	nop
 8002768:	fe00e800 	.word	0xfe00e800
 800276c:	ffff0000 	.word	0xffff0000

08002770 <I2C_Slave_ISR_IT>:
{
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8002772:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002776:	2b01      	cmp	r3, #1
 8002778:	f000 80b0 	beq.w	80028dc <I2C_Slave_ISR_IT+0x16c>
 800277c:	460d      	mov	r5, r1
 800277e:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002780:	06e9      	lsls	r1, r5, #27
 8002782:	4616      	mov	r6, r2
 8002784:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8002786:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 800278a:	d423      	bmi.n	80027d4 <I2C_Slave_ISR_IT+0x64>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 800278c:	0769      	lsls	r1, r5, #29
 800278e:	d56d      	bpl.n	800286c <I2C_Slave_ISR_IT+0xfc>
 8002790:	0772      	lsls	r2, r6, #29
 8002792:	d56b      	bpl.n	800286c <I2C_Slave_ISR_IT+0xfc>
    if (hi2c->XferCount > 0U)
 8002794:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	b163      	cbz	r3, 80027b4 <I2C_Slave_ISR_IT+0x44>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800279a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	1c59      	adds	r1, r3, #1
 80027a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a2:	6261      	str	r1, [r4, #36]	; 0x24
 80027a4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80027a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80027ae:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80027b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027b2:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 80027b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b91b      	cbnz	r3, 80027c2 <I2C_Slave_ISR_IT+0x52>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 80027ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 80027bc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80027c0:	d168      	bne.n	8002894 <I2C_Slave_ISR_IT+0x124>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80027c2:	06aa      	lsls	r2, r5, #26
 80027c4:	d502      	bpl.n	80027cc <I2C_Slave_ISR_IT+0x5c>
 80027c6:	06b3      	lsls	r3, r6, #26
 80027c8:	f100 808a 	bmi.w	80028e0 <I2C_Slave_ISR_IT+0x170>
  __HAL_UNLOCK(hi2c);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 80027d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 80027d4:	06f2      	lsls	r2, r6, #27
 80027d6:	d5d9      	bpl.n	800278c <I2C_Slave_ISR_IT+0x1c>
    if (hi2c->XferCount == 0U)
 80027d8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 8088 	bne.w	80028f2 <I2C_Slave_ISR_IT+0x182>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 80027e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80027e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027e8:	f000 80a6 	beq.w	8002938 <I2C_Slave_ISR_IT+0x1c8>
 80027ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80027ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f2:	f000 80a1 	beq.w	8002938 <I2C_Slave_ISR_IT+0x1c8>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027fc:	d075      	beq.n	80028ea <I2C_Slave_ISR_IT+0x17a>
 80027fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002802:	2b29      	cmp	r3, #41	; 0x29
 8002804:	d171      	bne.n	80028ea <I2C_Slave_ISR_IT+0x17a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	2210      	movs	r2, #16
 800280a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002810:	bf44      	itt	mi
 8002812:	2200      	movmi	r2, #0
 8002814:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	07d0      	lsls	r0, r2, #31
 800281a:	d403      	bmi.n	8002824 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	619a      	str	r2, [r3, #24]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	2200      	movs	r2, #0
 8002826:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800282a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800282e:	2929      	cmp	r1, #41	; 0x29
 8002830:	f000 810f 	beq.w	8002a52 <I2C_Slave_ISR_IT+0x2e2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002834:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8002838:	292a      	cmp	r1, #42	; 0x2a
 800283a:	d1c2      	bne.n	80027c2 <I2C_Slave_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800283c:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800283e:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002840:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002844:	6321      	str	r1, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002846:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800284a:	6818      	ldr	r0, [r3, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800284c:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002850:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002852:	bf14      	ite	ne
 8002854:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8002858:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 800285c:	4001      	ands	r1, r0
 800285e:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002860:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002862:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002866:	f7ff fe33 	bl	80024d0 <HAL_I2C_SlaveRxCpltCallback>
 800286a:	e7aa      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 800286c:	072b      	lsls	r3, r5, #28
 800286e:	d501      	bpl.n	8002874 <I2C_Slave_ISR_IT+0x104>
 8002870:	0737      	lsls	r7, r6, #28
 8002872:	d446      	bmi.n	8002902 <I2C_Slave_ISR_IT+0x192>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8002874:	07a8      	lsls	r0, r5, #30
 8002876:	d5a4      	bpl.n	80027c2 <I2C_Slave_ISR_IT+0x52>
 8002878:	07b1      	lsls	r1, r6, #30
 800287a:	d5a2      	bpl.n	80027c2 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800287c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d14b      	bne.n	800291c <I2C_Slave_ISR_IT+0x1ac>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8002884:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002886:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288a:	d002      	beq.n	8002892 <I2C_Slave_ISR_IT+0x122>
 800288c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d197      	bne.n	80027c2 <I2C_Slave_ISR_IT+0x52>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	2300      	movs	r3, #0
 8002894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002898:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800289c:	2a29      	cmp	r2, #41	; 0x29
 800289e:	f000 80b1 	beq.w	8002a04 <I2C_Slave_ISR_IT+0x294>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028a2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80028a6:	2a2a      	cmp	r2, #42	; 0x2a
 80028a8:	d18b      	bne.n	80027c2 <I2C_Slave_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028aa:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028ac:	2222      	movs	r2, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028ae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028b2:	6322      	str	r2, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80028b4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028b8:	6821      	ldr	r1, [r4, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80028ba:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028be:	6808      	ldr	r0, [r1, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80028c0:	2a28      	cmp	r2, #40	; 0x28
 80028c2:	bf14      	ite	ne
 80028c4:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
 80028c8:	f06f 0244 	mvneq.w	r2, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028cc:	4002      	ands	r2, r0
 80028ce:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028d0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80028d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028d6:	f7ff fdfb 	bl	80024d0 <HAL_I2C_SlaveRxCpltCallback>
 80028da:	e772      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80028dc:	2002      	movs	r0, #2
}
 80028de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80028e0:	4629      	mov	r1, r5
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff fe92 	bl	800260c <I2C_ITSlaveCplt>
 80028e8:	e770      	b.n	80027cc <I2C_Slave_ISR_IT+0x5c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	61da      	str	r2, [r3, #28]
 80028f0:	e767      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f2:	6803      	ldr	r3, [r0, #0]
 80028f4:	2210      	movs	r2, #16
 80028f6:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6443      	str	r3, [r0, #68]	; 0x44
 8002900:	e75f      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8002902:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002906:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800290a:	2b28      	cmp	r3, #40	; 0x28
 800290c:	d049      	beq.n	80029a2 <I2C_Slave_ISR_IT+0x232>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	2108      	movs	r1, #8
    __HAL_UNLOCK(hi2c);
 8002912:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002914:	61d1      	str	r1, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8002916:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800291a:	e752      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800291c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800291e:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 8002920:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002922:	1c58      	adds	r0, r3, #1
 8002924:	6260      	str	r0, [r4, #36]	; 0x24
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800292a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800292c:	3b01      	subs	r3, #1
 800292e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002930:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002932:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002934:	8522      	strh	r2, [r4, #40]	; 0x28
 8002936:	e744      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8002938:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800293c:	2b28      	cmp	r3, #40	; 0x28
 800293e:	f47f af5a 	bne.w	80027f6 <I2C_Slave_ISR_IT+0x86>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002942:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <I2C_Slave_ISR_IT+0x314>)
 8002944:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8002946:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8002948:	2300      	movs	r3, #0
 800294a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 800294c:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 800294e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002952:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8002956:	076b      	lsls	r3, r5, #29
 8002958:	d511      	bpl.n	800297e <I2C_Slave_ISR_IT+0x20e>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800295a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	1c59      	adds	r1, r3, #1
 8002960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002962:	6261      	str	r1, [r4, #36]	; 0x24
 8002964:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8002966:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002968:	b14b      	cbz	r3, 800297e <I2C_Slave_ISR_IT+0x20e>
      hi2c->XferCount--;
 800296a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800296c:	3a01      	subs	r2, #1
 800296e:	b292      	uxth	r2, r2
 8002970:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002972:	6c62      	ldr	r2, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8002974:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002976:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 800297a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800297c:	6462      	str	r2, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800297e:	6823      	ldr	r3, [r4, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002980:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002984:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002988:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298a:	2710      	movs	r7, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800298c:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 8002990:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002992:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002994:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002996:	61df      	str	r7, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002998:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800299c:	f7ff fd9c 	bl	80024d8 <HAL_I2C_ListenCpltCallback>
 80029a0:	e70f      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
    transferdirection = I2C_GET_DIR(hi2c);
 80029a2:	6820      	ldr	r0, [r4, #0]
 80029a4:	6981      	ldr	r1, [r0, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80029a6:	6983      	ldr	r3, [r0, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80029a8:	f8d0 e008 	ldr.w	lr, [r0, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80029ac:	68c7      	ldr	r7, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80029ae:	0c1b      	lsrs	r3, r3, #16
 80029b0:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b4:	68e3      	ldr	r3, [r4, #12]
 80029b6:	2b02      	cmp	r3, #2
    transferdirection = I2C_GET_DIR(hi2c);
 80029b8:	f3c1 4100 	ubfx	r1, r1, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029bc:	d117      	bne.n	80029ee <I2C_Slave_ISR_IT+0x27e>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80029be:	f3ce 0e09 	ubfx	lr, lr, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80029c2:	ea82 13de 	eor.w	r3, r2, lr, lsr #7
 80029c6:	f013 0306 	ands.w	r3, r3, #6
 80029ca:	d134      	bne.n	8002a36 <I2C_Slave_ISR_IT+0x2c6>
        hi2c->AddrEventCount++;
 80029cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80029ce:	3201      	adds	r2, #1
 80029d0:	64a2      	str	r2, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80029d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80029d4:	2a02      	cmp	r2, #2
 80029d6:	f47f aef4 	bne.w	80027c2 <I2C_Slave_ISR_IT+0x52>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029da:	2708      	movs	r7, #8
          hi2c->AddrEventCount = 0U;
 80029dc:	64a3      	str	r3, [r4, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029de:	4672      	mov	r2, lr
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029e0:	61c7      	str	r7, [r0, #28]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029e2:	4620      	mov	r0, r4
          __HAL_UNLOCK(hi2c);
 80029e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029e8:	f7ff fd74 	bl	80024d4 <HAL_I2C_AddrCallback>
 80029ec:	e6e9      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029ee:	6803      	ldr	r3, [r0, #0]
      __HAL_UNLOCK(hi2c);
 80029f0:	2700      	movs	r7, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029f2:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 80029f6:	6003      	str	r3, [r0, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029f8:	4620      	mov	r0, r4
      __HAL_UNLOCK(hi2c);
 80029fa:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029fe:	f7ff fd69 	bl	80024d4 <HAL_I2C_AddrCallback>
 8002a02:	e6de      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a04:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a06:	2221      	movs	r2, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a08:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a0c:	6322      	str	r2, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002a0e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a12:	6821      	ldr	r1, [r4, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002a14:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a18:	6808      	ldr	r0, [r1, #0]
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002a1a:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a1c:	bf14      	ite	ne
 8002a1e:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
 8002a22:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8002a26:	4002      	ands	r2, r0
 8002a28:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a2a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a30:	f7ff fd4c 	bl	80024cc <HAL_I2C_SlaveTxCpltCallback>
 8002a34:	e6c5      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a36:	6803      	ldr	r3, [r0, #0]
        __HAL_UNLOCK(hi2c);
 8002a38:	f04f 0e00 	mov.w	lr, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a3c:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8002a40:	6003      	str	r3, [r0, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a42:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8002a46:	4620      	mov	r0, r4
        __HAL_UNLOCK(hi2c);
 8002a48:	f884 e040 	strb.w	lr, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a4c:	f7ff fd42 	bl	80024d4 <HAL_I2C_AddrCallback>
 8002a50:	e6b7      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a52:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a54:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a56:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a5a:	6321      	str	r1, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002a5c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a60:	6818      	ldr	r0, [r3, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002a62:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002a66:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a68:	bf14      	ite	ne
 8002a6a:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8002a6e:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 8002a72:	4001      	ands	r1, r0
 8002a74:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a76:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002a78:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a7c:	f7ff fd26 	bl	80024cc <HAL_I2C_SlaveTxCpltCallback>
 8002a80:	e69f      	b.n	80027c2 <I2C_Slave_ISR_IT+0x52>
 8002a82:	bf00      	nop
 8002a84:	ffff0000 	.word	0xffff0000

08002a88 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a88:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a8a:	6802      	ldr	r2, [r0, #0]
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002a8c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a8e:	6853      	ldr	r3, [r2, #4]
 8002a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
{
 8002a94:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002a96:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a98:	6053      	str	r3, [r2, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a9a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002a9e:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002aa0:	2a60      	cmp	r2, #96	; 0x60
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002aa2:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002aa4:	634b      	str	r3, [r1, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002aa6:	d002      	beq.n	8002aae <I2C_DMAAbort+0x26>
    HAL_I2C_ErrorCallback(hi2c);
 8002aa8:	f7ff fd18 	bl	80024dc <HAL_I2C_ErrorCallback>
 8002aac:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ab4:	f7ff fd14 	bl	80024e0 <HAL_I2C_AbortCpltCallback>
 8002ab8:	bd10      	pop	{r4, pc}
 8002aba:	bf00      	nop

08002abc <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002abc:	6801      	ldr	r1, [r0, #0]
 8002abe:	698b      	ldr	r3, [r1, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ac0:	680a      	ldr	r2, [r1, #0]
{
 8002ac2:	b570      	push	{r4, r5, r6, lr}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002ac4:	05dd      	lsls	r5, r3, #23
 8002ac6:	d518      	bpl.n	8002afa <HAL_I2C_ER_IRQHandler+0x3e>
 8002ac8:	0614      	lsls	r4, r2, #24
 8002aca:	d558      	bpl.n	8002b7e <HAL_I2C_ER_IRQHandler+0xc2>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002acc:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ace:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002ad6:	055e      	lsls	r6, r3, #21
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ad8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ada:	61cc      	str	r4, [r1, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002adc:	d55d      	bpl.n	8002b9a <HAL_I2C_ER_IRQHandler+0xde>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ade:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ae0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ae4:	f042 0208 	orr.w	r2, r2, #8
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002ae8:	059d      	lsls	r5, r3, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002aea:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aec:	61cc      	str	r4, [r1, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002aee:	d44c      	bmi.n	8002b8a <HAL_I2C_ER_IRQHandler+0xce>
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002af0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002af2:	f013 0f0b 	tst.w	r3, #11
 8002af6:	d108      	bne.n	8002b0a <HAL_I2C_ER_IRQHandler+0x4e>
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002afa:	055c      	lsls	r4, r3, #21
 8002afc:	d541      	bpl.n	8002b82 <HAL_I2C_ER_IRQHandler+0xc6>
 8002afe:	0612      	lsls	r2, r2, #24
 8002b00:	d4ed      	bmi.n	8002ade <HAL_I2C_ER_IRQHandler+0x22>
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b02:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b04:	f013 0f0b 	tst.w	r3, #11
 8002b08:	d0f6      	beq.n	8002af8 <HAL_I2C_ER_IRQHandler+0x3c>
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b0a:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b0c:	4c4d      	ldr	r4, [pc, #308]	; (8002c44 <HAL_I2C_ER_IRQHandler+0x188>)
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b10:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b14:	62c4      	str	r4, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002b16:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002b18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	6443      	str	r3, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002b1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b22:	2b28      	cmp	r3, #40	; 0x28
 8002b24:	d03c      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0xe4>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002b26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002b2a:	2b29      	cmp	r3, #41	; 0x29
 8002b2c:	d038      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0xe4>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002b32:	2b2a      	cmp	r3, #42	; 0x2a
 8002b34:	d034      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0xe4>
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002b36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002b3a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b3e:	680b      	ldr	r3, [r1, #0]
 8002b40:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002b44:	600b      	str	r3, [r1, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002b46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b4a:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002b4c:	bf1c      	itt	ne
 8002b4e:	2320      	movne	r3, #32
 8002b50:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002b58:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b5a:	680b      	ldr	r3, [r1, #0]
 8002b5c:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8002b60:	4604      	mov	r4, r0
 8002b62:	d13e      	bne.n	8002be2 <HAL_I2C_ER_IRQHandler+0x126>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002b64:	680a      	ldr	r2, [r1, #0]
 8002b66:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002b6a:	d14f      	bne.n	8002c0c <HAL_I2C_ER_IRQHandler+0x150>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b6c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b70:	2b60      	cmp	r3, #96	; 0x60
 8002b72:	d05f      	beq.n	8002c34 <HAL_I2C_ER_IRQHandler+0x178>
    __HAL_UNLOCK(hi2c);
 8002b74:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002b78:	f7ff fcb0 	bl	80024dc <HAL_I2C_ErrorCallback>
}
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002b7e:	055c      	lsls	r4, r3, #21
 8002b80:	d4b6      	bmi.n	8002af0 <HAL_I2C_ER_IRQHandler+0x34>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002b82:	059e      	lsls	r6, r3, #22
 8002b84:	d5b4      	bpl.n	8002af0 <HAL_I2C_ER_IRQHandler+0x34>
 8002b86:	0615      	lsls	r5, r2, #24
 8002b88:	d5b2      	bpl.n	8002af0 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b96:	61ca      	str	r2, [r1, #28]
 8002b98:	e7aa      	b.n	8002af0 <HAL_I2C_ER_IRQHandler+0x34>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002b9a:	059b      	lsls	r3, r3, #22
 8002b9c:	d4f5      	bmi.n	8002b8a <HAL_I2C_ER_IRQHandler+0xce>
 8002b9e:	e7a7      	b.n	8002af0 <HAL_I2C_ER_IRQHandler+0x34>
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002ba0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002ba4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ba8:	680e      	ldr	r6, [r1, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002baa:	4d27      	ldr	r5, [pc, #156]	; (8002c48 <HAL_I2C_ER_IRQHandler+0x18c>)
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002bac:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8002bb0:	2c28      	cmp	r4, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002bb2:	f002 0228 	and.w	r2, r2, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002bb6:	bf14      	ite	ne
 8002bb8:	f06f 03f6 	mvnne.w	r3, #246	; 0xf6
 8002bbc:	f06f 0346 	mvneq.w	r3, #70	; 0x46
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002bc0:	2a28      	cmp	r2, #40	; 0x28
 8002bc2:	bf18      	it	ne
 8002bc4:	f06f 03f6 	mvnne.w	r3, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002bc8:	4033      	ands	r3, r6
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bca:	2428      	movs	r4, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bcc:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002bce:	600b      	str	r3, [r1, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bd0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bd4:	6302      	str	r2, [r0, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002bd6:	680b      	ldr	r3, [r1, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002bd8:	6345      	str	r5, [r0, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002bda:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8002bde:	4604      	mov	r4, r0
 8002be0:	d0c0      	beq.n	8002b64 <HAL_I2C_ER_IRQHandler+0xa8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002be2:	680b      	ldr	r3, [r1, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002be4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002be6:	4e19      	ldr	r6, [pc, #100]	; (8002c4c <HAL_I2C_ER_IRQHandler+0x190>)
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_UNLOCK(hi2c);
 8002bec:	2500      	movs	r5, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bee:	600b      	str	r3, [r1, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bf0:	4610      	mov	r0, r2
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bf2:	6356      	str	r6, [r2, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8002bf4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bf8:	f7fe fe56 	bl	80018a8 <HAL_DMA_Abort_IT>
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	f43f af7b 	beq.w	8002af8 <HAL_I2C_ER_IRQHandler+0x3c>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8002c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c0a:	4718      	bx	r3
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c0c:	680a      	ldr	r2, [r1, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c0e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002c10:	4e0e      	ldr	r6, [pc, #56]	; (8002c4c <HAL_I2C_ER_IRQHandler+0x190>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c16:	600a      	str	r2, [r1, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c18:	4628      	mov	r0, r5
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c1a:	636e      	str	r6, [r5, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8002c1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c20:	f7fe fe42 	bl	80018a8 <HAL_DMA_Abort_IT>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f43f af67 	beq.w	8002af8 <HAL_I2C_ER_IRQHandler+0x3c>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8002c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c32:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002c36:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c3e:	f7ff fc4f 	bl	80024e0 <HAL_I2C_AbortCpltCallback>
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	ffff0000 	.word	0xffff0000
 8002c48:	08002771 	.word	0x08002771
 8002c4c:	08002a89 	.word	0x08002a89

08002c50 <HAL_I2C_GetState>:
  return hi2c->State;
 8002c50:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop

08002c58 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c58:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d001      	beq.n	8002c66 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002c62:	2002      	movs	r0, #2
 8002c64:	4770      	bx	lr
 8002c66:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8002c68:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002c6c:	2801      	cmp	r0, #1
 8002c6e:	d0f8      	beq.n	8002c62 <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8002c70:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8002c72:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c74:	2424      	movs	r4, #36	; 0x24
 8002c76:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002c7a:	6804      	ldr	r4, [r0, #0]
 8002c7c:	f024 0401 	bic.w	r4, r4, #1
 8002c80:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c82:	6804      	ldr	r4, [r0, #0]
 8002c84:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002c88:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c8a:	6804      	ldr	r4, [r0, #0]
 8002c8c:	4321      	orrs	r1, r4
 8002c8e:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002c90:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8002c92:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8002c94:	f041 0101 	orr.w	r1, r1, #1
 8002c98:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8002c9a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002c9c:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8002ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d001      	beq.n	8002cba <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	4770      	bx	lr
 8002cba:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8002cbc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002cc0:	2801      	cmp	r0, #1
 8002cc2:	d0f8      	beq.n	8002cb6 <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8002cc4:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8002cc6:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	2424      	movs	r4, #36	; 0x24
 8002cca:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002cce:	6804      	ldr	r4, [r0, #0]
 8002cd0:	f024 0401 	bic.w	r4, r4, #1
 8002cd4:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8002cd6:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002cd8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002cdc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002ce0:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002ce2:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8002ce4:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8002ce6:	f041 0101 	orr.w	r1, r1, #1
 8002cea:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8002cec:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002cee:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8002cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002cfc:	4a02      	ldr	r2, [pc, #8]	; (8002d08 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4770      	bx	lr
 8002d08:	40007000 	.word	0x40007000

08002d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d10:	6803      	ldr	r3, [r0, #0]
 8002d12:	07d9      	lsls	r1, r3, #31
{
 8002d14:	b083      	sub	sp, #12
 8002d16:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d18:	d543      	bpl.n	8002da2 <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d1a:	49c0      	ldr	r1, [pc, #768]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002d1c:	684a      	ldr	r2, [r1, #4]
 8002d1e:	f002 020c 	and.w	r2, r2, #12
 8002d22:	2a04      	cmp	r2, #4
 8002d24:	f000 8184 	beq.w	8003030 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d28:	684a      	ldr	r2, [r1, #4]
 8002d2a:	f002 020c 	and.w	r2, r2, #12
 8002d2e:	2a08      	cmp	r2, #8
 8002d30:	f000 817a 	beq.w	8003028 <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3a:	f000 823d 	beq.w	80031b8 <HAL_RCC_OscConfig+0x4ac>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 81a1 	beq.w	8003086 <HAL_RCC_OscConfig+0x37a>
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d48:	f000 8297 	beq.w	800327a <HAL_RCC_OscConfig+0x56e>
 8002d4c:	4bb3      	ldr	r3, [pc, #716]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d5c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5e:	4daf      	ldr	r5, [pc, #700]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002d60:	68a2      	ldr	r2, [r4, #8]
 8002d62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002d64:	f023 030f 	bic.w	r3, r3, #15
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f874 	bl	8000e58 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002d74:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	2601      	movs	r6, #1
 8002d78:	e005      	b.n	8002d86 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7a:	f7fe f86d 	bl	8000e58 <HAL_GetTick>
 8002d7e:	1bc0      	subs	r0, r0, r7
 8002d80:	2864      	cmp	r0, #100	; 0x64
 8002d82:	f200 81b9 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8002d86:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	682a      	ldr	r2, [r5, #0]
 8002d8c:	fa98 f3a8 	rbit	r3, r8
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa06 f303 	lsl.w	r3, r6, r3
 8002d9c:	4213      	tst	r3, r2
 8002d9e:	d0ec      	beq.n	8002d7a <HAL_RCC_OscConfig+0x6e>
 8002da0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	079f      	lsls	r7, r3, #30
 8002da4:	d542      	bpl.n	8002e2c <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002da6:	4a9d      	ldr	r2, [pc, #628]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002da8:	6851      	ldr	r1, [r2, #4]
 8002daa:	f011 0f0c 	tst.w	r1, #12
 8002dae:	f000 80f7 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002db2:	6851      	ldr	r1, [r2, #4]
 8002db4:	f001 010c 	and.w	r1, r1, #12
 8002db8:	2908      	cmp	r1, #8
 8002dba:	f000 80ed 	beq.w	8002f98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dbe:	6922      	ldr	r2, [r4, #16]
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	f000 81d3 	beq.w	800316c <HAL_RCC_OscConfig+0x460>
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dd8:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dde:	f7fe f83b 	bl	8000e58 <HAL_GetTick>
 8002de2:	f04f 0802 	mov.w	r8, #2
 8002de6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	4d8c      	ldr	r5, [pc, #560]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002dea:	e005      	b.n	8002df8 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe f834 	bl	8000e58 <HAL_GetTick>
 8002df0:	1bc0      	subs	r0, r0, r7
 8002df2:	2802      	cmp	r0, #2
 8002df4:	f200 8180 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8002df8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	682a      	ldr	r2, [r5, #0]
 8002dfe:	fa98 f3a8 	rbit	r3, r8
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	fa06 f303 	lsl.w	r3, r6, r3
 8002e0e:	4213      	tst	r3, r2
 8002e10:	d0ec      	beq.n	8002dec <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	6829      	ldr	r1, [r5, #0]
 8002e14:	22f8      	movs	r2, #248	; 0xf8
 8002e16:	fa92 f2a2 	rbit	r2, r2
 8002e1a:	6963      	ldr	r3, [r4, #20]
 8002e1c:	fab2 f282 	clz	r2, r2
 8002e20:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8002e24:	4093      	lsls	r3, r2
 8002e26:	430b      	orrs	r3, r1
 8002e28:	602b      	str	r3, [r5, #0]
 8002e2a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2c:	071d      	lsls	r5, r3, #28
 8002e2e:	d44f      	bmi.n	8002ed0 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	0758      	lsls	r0, r3, #29
 8002e32:	d57b      	bpl.n	8002f2c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e34:	4b79      	ldr	r3, [pc, #484]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	00d1      	lsls	r1, r2, #3
 8002e3a:	f100 8110 	bmi.w	800305e <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e44:	61da      	str	r2, [r3, #28]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e50:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4d72      	ldr	r5, [pc, #456]	; (8003020 <HAL_RCC_OscConfig+0x314>)
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	05da      	lsls	r2, r3, #23
 8002e5a:	f140 813d 	bpl.w	80030d8 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5e:	68e3      	ldr	r3, [r4, #12]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	f000 81af 	beq.w	80031c4 <HAL_RCC_OscConfig+0x4b8>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8154 	beq.w	8003114 <HAL_RCC_OscConfig+0x408>
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	4b6b      	ldr	r3, [pc, #428]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	f000 820f 	beq.w	8003294 <HAL_RCC_OscConfig+0x588>
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	621a      	str	r2, [r3, #32]
 8002e7c:	6a1a      	ldr	r2, [r3, #32]
 8002e7e:	f022 0204 	bic.w	r2, r2, #4
 8002e82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fd ffe8 	bl	8000e58 <HAL_GetTick>
 8002e88:	f04f 0902 	mov.w	r9, #2
 8002e8c:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	4e63      	ldr	r6, [pc, #396]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002e90:	2501      	movs	r5, #1
 8002e92:	e015      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1b4>
 8002e94:	fa99 f3a9 	rbit	r3, r9
 8002e98:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002e9a:	fa99 f3a9 	rbit	r3, r9
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	fa05 f303 	lsl.w	r3, r5, r3
 8002eaa:	4213      	tst	r3, r2
 8002eac:	f040 8128 	bne.w	8003100 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fd ffd2 	bl	8000e58 <HAL_GetTick>
 8002eb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eb8:	1bc0      	subs	r0, r0, r7
 8002eba:	4298      	cmp	r0, r3
 8002ebc:	f200 811c 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8002ec0:	fa99 f3a9 	rbit	r3, r9
 8002ec4:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0e3      	beq.n	8002e94 <HAL_RCC_OscConfig+0x188>
 8002ecc:	6a32      	ldr	r2, [r6, #32]
 8002ece:	e7e4      	b.n	8002e9a <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed0:	69a2      	ldr	r2, [r4, #24]
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	d07b      	beq.n	8002fce <HAL_RCC_OscConfig+0x2c2>
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8002edc:	4b51      	ldr	r3, [pc, #324]	; (8003024 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	4e4f      	ldr	r6, [pc, #316]	; (800301c <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	fab1 f181 	clz	r1, r1
 8002ee4:	440b      	add	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee8:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8002eea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002eec:	f7fd ffb4 	bl	8000e58 <HAL_GetTick>
 8002ef0:	f04f 0802 	mov.w	r8, #2
 8002ef4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	e005      	b.n	8002f04 <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7fd ffae 	bl	8000e58 <HAL_GetTick>
 8002efc:	1bc0      	subs	r0, r0, r7
 8002efe:	2802      	cmp	r0, #2
 8002f00:	f200 80fa 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8002f04:	fa98 f3a8 	rbit	r3, r8
 8002f08:	fa98 f3a8 	rbit	r3, r8
 8002f0c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002f12:	fa98 f3a8 	rbit	r3, r8
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	fa05 f303 	lsl.w	r3, r5, r3
 8002f22:	4213      	tst	r3, r2
 8002f24:	d0e8      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x1ec>
 8002f26:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	0758      	lsls	r0, r3, #29
 8002f2a:	d483      	bmi.n	8002e34 <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2c:	69e3      	ldr	r3, [r4, #28]
 8002f2e:	b37b      	cbz	r3, 8002f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f30:	4d3a      	ldr	r5, [pc, #232]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002f32:	686a      	ldr	r2, [r5, #4]
 8002f34:	f002 020c 	and.w	r2, r2, #12
 8002f38:	2a08      	cmp	r2, #8
 8002f3a:	d044      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f42:	f000 8145 	beq.w	80031d0 <HAL_RCC_OscConfig+0x4c4>
 8002f46:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fd ff7c 	bl	8000e58 <HAL_GetTick>
 8002f60:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002f64:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f66:	2601      	movs	r6, #1
 8002f68:	e005      	b.n	8002f76 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fd ff75 	bl	8000e58 <HAL_GetTick>
 8002f6e:	1bc0      	subs	r0, r0, r7
 8002f70:	2802      	cmp	r0, #2
 8002f72:	f200 80c1 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8002f76:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7a:	682a      	ldr	r2, [r5, #0]
 8002f7c:	fa94 f3a4 	rbit	r3, r4
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa06 f303 	lsl.w	r3, r6, r3
 8002f8c:	4213      	tst	r3, r2
 8002f8e:	d1ec      	bne.n	8002f6a <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002f90:	2000      	movs	r0, #0
}
 8002f92:	b003      	add	sp, #12
 8002f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f98:	6852      	ldr	r2, [r2, #4]
 8002f9a:	03d6      	lsls	r6, r2, #15
 8002f9c:	f53f af0f 	bmi.w	8002dbe <HAL_RCC_OscConfig+0xb2>
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	491d      	ldr	r1, [pc, #116]	; (800301c <HAL_RCC_OscConfig+0x310>)
 8002fa8:	6808      	ldr	r0, [r1, #0]
 8002faa:	fa92 f2a2 	rbit	r2, r2
 8002fae:	fab2 f282 	clz	r2, r2
 8002fb2:	f002 021f 	and.w	r2, r2, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	4202      	tst	r2, r0
 8002fbe:	d051      	beq.n	8003064 <HAL_RCC_OscConfig+0x358>
 8002fc0:	6922      	ldr	r2, [r4, #16]
 8002fc2:	428a      	cmp	r2, r1
 8002fc4:	d04e      	beq.n	8003064 <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 8002fc6:	2001      	movs	r0, #1
}
 8002fc8:	b003      	add	sp, #12
 8002fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fce:	2501      	movs	r5, #1
 8002fd0:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd6:	4e11      	ldr	r6, [pc, #68]	; (800301c <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 8002fd8:	fab1 f181 	clz	r1, r1
 8002fdc:	440b      	add	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	f04f 0802 	mov.w	r8, #2
 8002fe4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002fe6:	f7fd ff37 	bl	8000e58 <HAL_GetTick>
 8002fea:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	e004      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fee:	f7fd ff33 	bl	8000e58 <HAL_GetTick>
 8002ff2:	1bc0      	subs	r0, r0, r7
 8002ff4:	2802      	cmp	r0, #2
 8002ff6:	d87f      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8002ff8:	fa98 f3a8 	rbit	r3, r8
 8002ffc:	fa98 f3a8 	rbit	r3, r8
 8003000:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003006:	fa98 f3a8 	rbit	r3, r8
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	fa05 f303 	lsl.w	r3, r5, r3
 8003016:	4213      	tst	r3, r2
 8003018:	d1e9      	bne.n	8002fee <HAL_RCC_OscConfig+0x2e2>
 800301a:	e784      	b.n	8002f26 <HAL_RCC_OscConfig+0x21a>
 800301c:	40021000 	.word	0x40021000
 8003020:	40007000 	.word	0x40007000
 8003024:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003028:	684a      	ldr	r2, [r1, #4]
 800302a:	03d2      	lsls	r2, r2, #15
 800302c:	f57f ae82 	bpl.w	8002d34 <HAL_RCC_OscConfig+0x28>
 8003030:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003034:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	499a      	ldr	r1, [pc, #616]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
 800303a:	6808      	ldr	r0, [r1, #0]
 800303c:	fa92 f2a2 	rbit	r2, r2
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	f002 021f 	and.w	r2, r2, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f202 	lsl.w	r2, r1, r2
 800304e:	4202      	tst	r2, r0
 8003050:	f43f aea7 	beq.w	8002da2 <HAL_RCC_OscConfig+0x96>
 8003054:	6862      	ldr	r2, [r4, #4]
 8003056:	2a00      	cmp	r2, #0
 8003058:	f47f aea3 	bne.w	8002da2 <HAL_RCC_OscConfig+0x96>
 800305c:	e7b3      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 800305e:	f04f 0800 	mov.w	r8, #0
 8003062:	e6f7      	b.n	8002e54 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4d8f      	ldr	r5, [pc, #572]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
 8003066:	21f8      	movs	r1, #248	; 0xf8
 8003068:	6828      	ldr	r0, [r5, #0]
 800306a:	fa91 f1a1 	rbit	r1, r1
 800306e:	6962      	ldr	r2, [r4, #20]
 8003070:	fab1 f181 	clz	r1, r1
 8003074:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8003078:	408a      	lsls	r2, r1
 800307a:	4302      	orrs	r2, r0
 800307c:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307e:	071d      	lsls	r5, r3, #28
 8003080:	f57f aed6 	bpl.w	8002e30 <HAL_RCC_OscConfig+0x124>
 8003084:	e724      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003086:	4d87      	ldr	r5, [pc, #540]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308e:	602b      	str	r3, [r5, #0]
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003098:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800309a:	68a2      	ldr	r2, [r4, #8]
 800309c:	f023 030f 	bic.w	r3, r3, #15
 80030a0:	4313      	orrs	r3, r2
 80030a2:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 80030a4:	f7fd fed8 	bl	8000e58 <HAL_GetTick>
 80030a8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80030ac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	2601      	movs	r6, #1
 80030b0:	e004      	b.n	80030bc <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b2:	f7fd fed1 	bl	8000e58 <HAL_GetTick>
 80030b6:	1bc0      	subs	r0, r0, r7
 80030b8:	2864      	cmp	r0, #100	; 0x64
 80030ba:	d81d      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x3ec>
 80030bc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c0:	682a      	ldr	r2, [r5, #0]
 80030c2:	fa98 f3a8 	rbit	r3, r8
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	fa06 f303 	lsl.w	r3, r6, r3
 80030d2:	4213      	tst	r3, r2
 80030d4:	d1ed      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3a6>
 80030d6:	e663      	b.n	8002da0 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030de:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80030e0:	f7fd feba 	bl	8000e58 <HAL_GetTick>
 80030e4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	682b      	ldr	r3, [r5, #0]
 80030e8:	05db      	lsls	r3, r3, #23
 80030ea:	f53f aeb8 	bmi.w	8002e5e <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ee:	f7fd feb3 	bl	8000e58 <HAL_GetTick>
 80030f2:	1b80      	subs	r0, r0, r6
 80030f4:	2864      	cmp	r0, #100	; 0x64
 80030f6:	d9f6      	bls.n	80030e6 <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 80030f8:	2003      	movs	r0, #3
}
 80030fa:	b003      	add	sp, #12
 80030fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 8003100:	f1b8 0f00 	cmp.w	r8, #0
 8003104:	f43f af12 	beq.w	8002f2c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4a66      	ldr	r2, [pc, #408]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
 800310a:	69d3      	ldr	r3, [r2, #28]
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	61d3      	str	r3, [r2, #28]
 8003112:	e70b      	b.n	8002f2c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003114:	4d63      	ldr	r5, [pc, #396]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
 8003116:	6a2b      	ldr	r3, [r5, #32]
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	622b      	str	r3, [r5, #32]
 800311e:	6a2b      	ldr	r3, [r5, #32]
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003126:	f7fd fe97 	bl	8000e58 <HAL_GetTick>
 800312a:	f04f 0902 	mov.w	r9, #2
 800312e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	2601      	movs	r6, #1
 8003132:	e013      	b.n	800315c <HAL_RCC_OscConfig+0x450>
 8003134:	fa99 f3a9 	rbit	r3, r9
 8003138:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800313a:	fa99 f3a9 	rbit	r3, r9
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	fa06 f303 	lsl.w	r3, r6, r3
 800314a:	4213      	tst	r3, r2
 800314c:	d0d8      	beq.n	8003100 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fd fe83 	bl	8000e58 <HAL_GetTick>
 8003152:	f241 3388 	movw	r3, #5000	; 0x1388
 8003156:	1bc0      	subs	r0, r0, r7
 8003158:	4298      	cmp	r0, r3
 800315a:	d8cd      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x3ec>
 800315c:	fa99 f3a9 	rbit	r3, r9
 8003160:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0e5      	beq.n	8003134 <HAL_RCC_OscConfig+0x428>
 8003168:	6a2a      	ldr	r2, [r5, #32]
 800316a:	e7e6      	b.n	800313a <HAL_RCC_OscConfig+0x42e>
 800316c:	2501      	movs	r5, #1
 800316e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800317a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	f04f 0802 	mov.w	r8, #2
 8003184:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003186:	f7fd fe67 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318a:	4e46      	ldr	r6, [pc, #280]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 800318c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	e004      	b.n	800319a <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003190:	f7fd fe62 	bl	8000e58 <HAL_GetTick>
 8003194:	1bc0      	subs	r0, r0, r7
 8003196:	2802      	cmp	r0, #2
 8003198:	d8ae      	bhi.n	80030f8 <HAL_RCC_OscConfig+0x3ec>
 800319a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	6832      	ldr	r2, [r6, #0]
 80031a0:	fa98 f3a8 	rbit	r3, r8
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa05 f303 	lsl.w	r3, r5, r3
 80031b0:	4213      	tst	r3, r2
 80031b2:	d1ed      	bne.n	8003190 <HAL_RCC_OscConfig+0x484>
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	e639      	b.n	8002e2c <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	4a3a      	ldr	r2, [pc, #232]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e5cc      	b.n	8002d5e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	4a37      	ldr	r2, [pc, #220]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
 80031c6:	6a13      	ldr	r3, [r2, #32]
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	e659      	b.n	8002e84 <HAL_RCC_OscConfig+0x178>
 80031d0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031e6:	f7fd fe37 	bl	8000e58 <HAL_GetTick>
 80031ea:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80031ee:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	2601      	movs	r6, #1
 80031f2:	e005      	b.n	8003200 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fd fe30 	bl	8000e58 <HAL_GetTick>
 80031f8:	1bc0      	subs	r0, r0, r7
 80031fa:	2802      	cmp	r0, #2
 80031fc:	f63f af7c 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x3ec>
 8003200:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	682a      	ldr	r2, [r5, #0]
 8003206:	fa98 f3a8 	rbit	r3, r8
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	fa06 f303 	lsl.w	r3, r6, r3
 8003216:	4213      	tst	r3, r2
 8003218:	d1ec      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321a:	686a      	ldr	r2, [r5, #4]
 800321c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800321e:	6a21      	ldr	r1, [r4, #32]
 8003220:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003224:	430b      	orrs	r3, r1
 8003226:	4313      	orrs	r3, r2
 8003228:	606b      	str	r3, [r5, #4]
 800322a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800322e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800323a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003244:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003246:	f7fd fe07 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324a:	4e16      	ldr	r6, [pc, #88]	; (80032a4 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 800324c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324e:	2501      	movs	r5, #1
 8003250:	e005      	b.n	800325e <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7fd fe01 	bl	8000e58 <HAL_GetTick>
 8003256:	1bc0      	subs	r0, r0, r7
 8003258:	2802      	cmp	r0, #2
 800325a:	f63f af4d 	bhi.w	80030f8 <HAL_RCC_OscConfig+0x3ec>
 800325e:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003262:	6832      	ldr	r2, [r6, #0]
 8003264:	fa94 f3a4 	rbit	r3, r4
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa05 f303 	lsl.w	r3, r5, r3
 8003274:	4213      	tst	r3, r2
 8003276:	d0ec      	beq.n	8003252 <HAL_RCC_OscConfig+0x546>
 8003278:	e68a      	b.n	8002f90 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800327e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e564      	b.n	8002d5e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	f042 0204 	orr.w	r2, r2, #4
 8003298:	621a      	str	r2, [r3, #32]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	621a      	str	r2, [r3, #32]
 80032a2:	e5ef      	b.n	8002e84 <HAL_RCC_OscConfig+0x178>
 80032a4:	40021000 	.word	0x40021000

080032a8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80032a8:	4a70      	ldr	r2, [pc, #448]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	428b      	cmp	r3, r1
 80032b2:	d20b      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x24>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	f023 0307 	bic.w	r3, r3, #7
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032be:	6813      	ldr	r3, [r2, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4299      	cmp	r1, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x24>
    {
      return HAL_ERROR;
 80032c8:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80032ca:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	6803      	ldr	r3, [r0, #0]
{
 80032ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d2:	079e      	lsls	r6, r3, #30
 80032d4:	d506      	bpl.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d6:	4c66      	ldr	r4, [pc, #408]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	6885      	ldr	r5, [r0, #8]
 80032da:	6862      	ldr	r2, [r4, #4]
 80032dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032e0:	432a      	orrs	r2, r5
 80032e2:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e4:	07dd      	lsls	r5, r3, #31
 80032e6:	4606      	mov	r6, r0
 80032e8:	460c      	mov	r4, r1
 80032ea:	d531      	bpl.n	8003350 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ec:	6842      	ldr	r2, [r0, #4]
 80032ee:	2a01      	cmp	r2, #1
 80032f0:	f000 80aa 	beq.w	8003448 <HAL_RCC_ClockConfig+0x1a0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f4:	2a02      	cmp	r2, #2
 80032f6:	bf0c      	ite	eq
 80032f8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80032fc:	2302      	movne	r3, #2
 80032fe:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003302:	495b      	ldr	r1, [pc, #364]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	6808      	ldr	r0, [r1, #0]
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2101      	movs	r1, #1
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	4203      	tst	r3, r0
 800331a:	d029      	beq.n	8003370 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331c:	4d54      	ldr	r5, [pc, #336]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	686b      	ldr	r3, [r5, #4]
 8003320:	f023 0303 	bic.w	r3, r3, #3
 8003324:	4313      	orrs	r3, r2
 8003326:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003328:	f7fd fd96 	bl	8000e58 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332c:	6873      	ldr	r3, [r6, #4]
 800332e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8003330:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003332:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	d023      	beq.n	8003380 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003338:	2b02      	cmp	r3, #2
 800333a:	d105      	bne.n	8003348 <HAL_RCC_ClockConfig+0xa0>
 800333c:	e07b      	b.n	8003436 <HAL_RCC_ClockConfig+0x18e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333e:	f7fd fd8b 	bl	8000e58 <HAL_GetTick>
 8003342:	1bc0      	subs	r0, r0, r7
 8003344:	4540      	cmp	r0, r8
 8003346:	d87c      	bhi.n	8003442 <HAL_RCC_ClockConfig+0x19a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003348:	686b      	ldr	r3, [r5, #4]
 800334a:	f013 0f0c 	tst.w	r3, #12
 800334e:	d1f6      	bne.n	800333e <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003350:	4a46      	ldr	r2, [pc, #280]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	6813      	ldr	r3, [r2, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	429c      	cmp	r4, r3
 800335a:	d217      	bcs.n	800338c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335c:	6813      	ldr	r3, [r2, #0]
 800335e:	f023 0307 	bic.w	r3, r3, #7
 8003362:	4323      	orrs	r3, r4
 8003364:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	429c      	cmp	r4, r3
 800336e:	d00d      	beq.n	800338c <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 8003370:	2001      	movs	r0, #1
 8003372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003376:	f7fd fd6f 	bl	8000e58 <HAL_GetTick>
 800337a:	1bc0      	subs	r0, r0, r7
 800337c:	4540      	cmp	r0, r8
 800337e:	d860      	bhi.n	8003442 <HAL_RCC_ClockConfig+0x19a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003380:	686b      	ldr	r3, [r5, #4]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d1f5      	bne.n	8003376 <HAL_RCC_ClockConfig+0xce>
 800338a:	e7e1      	b.n	8003350 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	6833      	ldr	r3, [r6, #0]
 800338e:	0758      	lsls	r0, r3, #29
 8003390:	d506      	bpl.n	80033a0 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003392:	4937      	ldr	r1, [pc, #220]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	68f0      	ldr	r0, [r6, #12]
 8003396:	684a      	ldr	r2, [r1, #4]
 8003398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800339c:	4302      	orrs	r2, r0
 800339e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	0719      	lsls	r1, r3, #28
 80033a2:	d507      	bpl.n	80033b4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a4:	4a32      	ldr	r2, [pc, #200]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	6931      	ldr	r1, [r6, #16]
 80033a8:	6853      	ldr	r3, [r2, #4]
 80033aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80033ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033b2:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80033b4:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 80033b6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033b8:	f002 010c 	and.w	r1, r2, #12
 80033bc:	2908      	cmp	r1, #8
 80033be:	d016      	beq.n	80033ee <HAL_RCC_ClockConfig+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c0:	492c      	ldr	r1, [pc, #176]	; (8003474 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033c2:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	22f0      	movs	r2, #240	; 0xf0
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	fa92 f2a2 	rbit	r2, r2
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d4:	40d3      	lsrs	r3, r2
 80033d6:	4828      	ldr	r0, [pc, #160]	; (8003478 <HAL_RCC_ClockConfig+0x1d0>)
 80033d8:	4a28      	ldr	r2, [pc, #160]	; (800347c <HAL_RCC_ClockConfig+0x1d4>)
 80033da:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 80033dc:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033de:	fa21 f303 	lsr.w	r3, r1, r3
 80033e2:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80033e4:	f7fd fd08 	bl	8000df8 <HAL_InitTick>
  return HAL_OK;
 80033e8:	2000      	movs	r0, #0
}
 80033ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033ee:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80033f2:	fa91 f1a1 	rbit	r1, r1
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033f6:	fab1 f181 	clz	r1, r1
 80033fa:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80033fe:	40c8      	lsrs	r0, r1
 8003400:	4c1f      	ldr	r4, [pc, #124]	; (8003480 <HAL_RCC_ClockConfig+0x1d8>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003404:	5c23      	ldrb	r3, [r4, r0]
 8003406:	200f      	movs	r0, #15
 8003408:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800340c:	fab0 f080 	clz	r0, r0
 8003410:	f001 010f 	and.w	r1, r1, #15
 8003414:	40c1      	lsrs	r1, r0
 8003416:	481b      	ldr	r0, [pc, #108]	; (8003484 <HAL_RCC_ClockConfig+0x1dc>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003418:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800341a:	5c40      	ldrb	r0, [r0, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800341c:	bf4a      	itet	mi
 800341e:	4915      	ldrmi	r1, [pc, #84]	; (8003474 <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003420:	4919      	ldrpl	r1, [pc, #100]	; (8003488 <HAL_RCC_ClockConfig+0x1e0>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003422:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003426:	fb01 f103 	mul.w	r1, r1, r3
 800342a:	e7ca      	b.n	80033c2 <HAL_RCC_ClockConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fd fd14 	bl	8000e58 <HAL_GetTick>
 8003430:	1bc0      	subs	r0, r0, r7
 8003432:	4540      	cmp	r0, r8
 8003434:	d805      	bhi.n	8003442 <HAL_RCC_ClockConfig+0x19a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003436:	686b      	ldr	r3, [r5, #4]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d1f5      	bne.n	800342c <HAL_RCC_ClockConfig+0x184>
 8003440:	e786      	b.n	8003350 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 8003442:	2003      	movs	r0, #3
 8003444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800344c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003452:	6809      	ldr	r1, [r1, #0]
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	420b      	tst	r3, r1
 8003466:	f47f af59 	bne.w	800331c <HAL_RCC_ClockConfig+0x74>
 800346a:	e781      	b.n	8003370 <HAL_RCC_ClockConfig+0xc8>
 800346c:	40022000 	.word	0x40022000
 8003470:	40021000 	.word	0x40021000
 8003474:	007a1200 	.word	0x007a1200
 8003478:	08007954 	.word	0x08007954
 800347c:	20000000 	.word	0x20000000
 8003480:	08007908 	.word	0x08007908
 8003484:	08007918 	.word	0x08007918
 8003488:	003d0900 	.word	0x003d0900

0800348c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x54>)
 800348e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003490:	f003 010c 	and.w	r1, r3, #12
 8003494:	2908      	cmp	r1, #8
 8003496:	d121      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x50>
 8003498:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 800349c:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034a0:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80034a4:	fab1 f181 	clz	r1, r1
 80034a8:	fa20 f101 	lsr.w	r1, r0, r1
 80034ac:	480d      	ldr	r0, [pc, #52]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034b0:	5c40      	ldrb	r0, [r0, r1]
 80034b2:	210f      	movs	r1, #15
 80034b4:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034b8:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034ba:	fab1 f181 	clz	r1, r1
 80034be:	f002 020f 	and.w	r2, r2, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80034c2:	bf4c      	ite	mi
 80034c4:	4b08      	ldrmi	r3, [pc, #32]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80034c6:	4b09      	ldrpl	r3, [pc, #36]	; (80034ec <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034c8:	fa22 f201 	lsr.w	r2, r2, r1
 80034cc:	4908      	ldr	r1, [pc, #32]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x64>)
 80034ce:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80034d0:	bf48      	it	mi
 80034d2:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80034d6:	fb03 f000 	mul.w	r0, r3, r0
 80034da:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034de:	4770      	bx	lr
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08007908 	.word	0x08007908
 80034e8:	007a1200 	.word	0x007a1200
 80034ec:	003d0900 	.word	0x003d0900
 80034f0:	08007918 	.word	0x08007918

080034f4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80034f4:	4b01      	ldr	r3, [pc, #4]	; (80034fc <HAL_RCC_GetHCLKFreq+0x8>)
}
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000000 	.word	0x20000000

08003500 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003502:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	fa92 f2a2 	rbit	r2, r2
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003514:	40d3      	lsrs	r3, r2
 8003516:	4904      	ldr	r1, [pc, #16]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	6810      	ldr	r0, [r2, #0]
}    
 800351e:	40d8      	lsrs	r0, r3
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	08007964 	.word	0x08007964
 800352c:	20000000 	.word	0x20000000

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	fa92 f2a2 	rbit	r2, r2
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003544:	40d3      	lsrs	r3, r2
 8003546:	4904      	ldr	r1, [pc, #16]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8003548:	4a04      	ldr	r2, [pc, #16]	; (800355c <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	6810      	ldr	r0, [r2, #0]
} 
 800354e:	40d8      	lsrs	r0, r3
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	08007964 	.word	0x08007964
 800355c:	20000000 	.word	0x20000000

08003560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003564:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003566:	6800      	ldr	r0, [r0, #0]
 8003568:	03c5      	lsls	r5, r0, #15
{
 800356a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800356c:	d538      	bpl.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b5a      	ldr	r3, [pc, #360]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	00d1      	lsls	r1, r2, #3
 8003574:	d567      	bpl.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4d59      	ldr	r5, [pc, #356]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 800357c:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003580:	d570      	bpl.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003582:	4d55      	ldr	r5, [pc, #340]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003584:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003586:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800358a:	d01f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800358c:	6861      	ldr	r1, [r4, #4]
 800358e:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003592:	4293      	cmp	r3, r2
 8003594:	d01b      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003596:	6a29      	ldr	r1, [r5, #32]
 8003598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800359c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80035a0:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	4f4e      	ldr	r7, [pc, #312]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80035a6:	fab2 f282 	clz	r2, r2
 80035aa:	443a      	add	r2, r7
 80035ac:	0092      	lsls	r2, r2, #2
 80035ae:	f04f 0e01 	mov.w	lr, #1
 80035b2:	f8c2 e000 	str.w	lr, [r2]
 80035b6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	443b      	add	r3, r7
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035c4:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035c6:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80035c8:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035ca:	d461      	bmi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80035cc:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035ce:	4a42      	ldr	r2, [pc, #264]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80035d0:	6a13      	ldr	r3, [r2, #32]
 80035d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035da:	2e00      	cmp	r6, #0
 80035dc:	d153      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x126>
 80035de:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035e0:	07c5      	lsls	r5, r0, #31
 80035e2:	d506      	bpl.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e4:	4a3c      	ldr	r2, [pc, #240]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80035e6:	68a1      	ldr	r1, [r4, #8]
 80035e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035f2:	0681      	lsls	r1, r0, #26
 80035f4:	d506      	bpl.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f6:	4a38      	ldr	r2, [pc, #224]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80035f8:	68e1      	ldr	r1, [r4, #12]
 80035fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80035fc:	f023 0310 	bic.w	r3, r3, #16
 8003600:	430b      	orrs	r3, r1
 8003602:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003604:	0602      	lsls	r2, r0, #24
 8003606:	d506      	bpl.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003608:	4a33      	ldr	r2, [pc, #204]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800360a:	6921      	ldr	r1, [r4, #16]
 800360c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800360e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003612:	430b      	orrs	r3, r1
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003616:	04c3      	lsls	r3, r0, #19
 8003618:	d40d      	bmi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800361a:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800361e:	d007      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003620:	4a2d      	ldr	r2, [pc, #180]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003622:	69a1      	ldr	r1, [r4, #24]
 8003624:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800362a:	430b      	orrs	r3, r1
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800362e:	2000      	movs	r0, #0
}
 8003630:	b003      	add	sp, #12
 8003632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003636:	4a28      	ldr	r2, [pc, #160]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003638:	6961      	ldr	r1, [r4, #20]
 800363a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	430b      	orrs	r3, r1
 8003642:	6313      	str	r3, [r2, #48]	; 0x30
 8003644:	e7e9      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4d24      	ldr	r5, [pc, #144]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800364a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800364e:	61da      	str	r2, [r3, #28]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	682b      	ldr	r3, [r5, #0]
 800365c:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 800365e:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	d48e      	bmi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800366c:	f7fd fbf4 	bl	8000e58 <HAL_GetTick>
 8003670:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	682b      	ldr	r3, [r5, #0]
 8003674:	05db      	lsls	r3, r3, #23
 8003676:	d484      	bmi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003678:	f7fd fbee 	bl	8000e58 <HAL_GetTick>
 800367c:	1bc0      	subs	r0, r0, r7
 800367e:	2864      	cmp	r0, #100	; 0x64
 8003680:	d9f7      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8003682:	2003      	movs	r0, #3
 8003684:	e7d4      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003686:	69d3      	ldr	r3, [r2, #28]
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]
 800368e:	e7a6      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8003692:	f7fd fbe1 	bl	8000e58 <HAL_GetTick>
 8003696:	f04f 0902 	mov.w	r9, #2
 800369a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e014      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800369e:	fa99 f3a9 	rbit	r3, r9
 80036a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80036a4:	fa99 f3a9 	rbit	r3, r9
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa07 f303 	lsl.w	r3, r7, r3
 80036b4:	4213      	tst	r3, r2
 80036b6:	d189      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fd fbce 	bl	8000e58 <HAL_GetTick>
 80036bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80036c0:	eba0 0008 	sub.w	r0, r0, r8
 80036c4:	4298      	cmp	r0, r3
 80036c6:	d8dc      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80036c8:	fa99 f3a9 	rbit	r3, r9
 80036cc:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0e4      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80036d4:	6a2a      	ldr	r2, [r5, #32]
 80036d6:	e7e5      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40007000 	.word	0x40007000
 80036e0:	10908100 	.word	0x10908100

080036e4 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d067      	beq.n	80037b8 <HAL_RTC_Init+0xd4>
{
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80036ea:	7f43      	ldrb	r3, [r0, #29]
 80036ec:	4604      	mov	r4, r0
 80036ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d04a      	beq.n	800378c <HAL_RTC_Init+0xa8>
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80036fa:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036fc:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80036fe:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003700:	6259      	str	r1, [r3, #36]	; 0x24
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	0655      	lsls	r5, r2, #25
 8003708:	d529      	bpl.n	800375e <HAL_RTC_Init+0x7a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800370a:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800370c:	6862      	ldr	r2, [r4, #4]
 800370e:	6927      	ldr	r7, [r4, #16]
 8003710:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003712:	68a0      	ldr	r0, [r4, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003714:	68e5      	ldr	r5, [r4, #12]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003716:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800371a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800371e:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	433a      	orrs	r2, r7
 8003724:	4332      	orrs	r2, r6
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800372a:	611d      	str	r5, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003732:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800373a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	0692      	lsls	r2, r2, #26
 8003740:	d528      	bpl.n	8003794 <HAL_RTC_Init+0xb0>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003742:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003744:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003746:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800374a:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800374c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800374e:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003750:	4302      	orrs	r2, r0
    hrtc->State = HAL_RTC_STATE_READY;
 8003752:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
    return HAL_OK;
 8003756:	2000      	movs	r0, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003758:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800375a:	7761      	strb	r1, [r4, #29]
    return HAL_OK;
 800375c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800375e:	f04f 32ff 	mov.w	r2, #4294967295
 8003762:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 8003764:	f7fd fb78 	bl	8000e58 <HAL_GetTick>
 8003768:	4605      	mov	r5, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	0650      	lsls	r0, r2, #25
 8003770:	d4cb      	bmi.n	800370a <HAL_RTC_Init+0x26>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003772:	f7fd fb71 	bl	8000e58 <HAL_GetTick>
 8003776:	1b40      	subs	r0, r0, r5
 8003778:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800377c:	d9f5      	bls.n	800376a <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003782:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003784:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003786:	2001      	movs	r0, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003788:	7763      	strb	r3, [r4, #29]
}
 800378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800378c:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800378e:	f002 fb9b 	bl	8005ec8 <HAL_RTC_MspInit>
 8003792:	e7b0      	b.n	80036f6 <HAL_RTC_Init+0x12>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800379a:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800379c:	f7fd fb5c 	bl	8000e58 <HAL_GetTick>
 80037a0:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	0691      	lsls	r1, r2, #26
 80037a8:	d4cb      	bmi.n	8003742 <HAL_RTC_Init+0x5e>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80037aa:	f7fd fb55 	bl	8000e58 <HAL_GetTick>
 80037ae:	1b40      	subs	r0, r0, r5
 80037b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037b4:	d9f5      	bls.n	80037a2 <HAL_RTC_Init+0xbe>
 80037b6:	e7e2      	b.n	800377e <HAL_RTC_Init+0x9a>
     return HAL_ERROR;
 80037b8:	2001      	movs	r0, #1
 80037ba:	4770      	bx	lr

080037bc <HAL_RTC_SetTime>:
{
 80037bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 80037c0:	7f03      	ldrb	r3, [r0, #28]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d078      	beq.n	80038b8 <HAL_RTC_SetTime+0xfc>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037c6:	2302      	movs	r3, #2
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80037c8:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037ca:	7743      	strb	r3, [r0, #29]
 80037cc:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80037ce:	2101      	movs	r1, #1
 80037d0:	4605      	mov	r5, r0
 80037d2:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80037d4:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 80037d6:	2a00      	cmp	r2, #0
 80037d8:	d035      	beq.n	8003846 <HAL_RTC_SetTime+0x8a>
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037da:	7861      	ldrb	r1, [r4, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037dc:	7822      	ldrb	r2, [r4, #0]
              ((uint32_t)sTime->Seconds) | \
 80037de:	78a3      	ldrb	r3, [r4, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80037e0:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80037e4:	bf14      	ite	ne
 80037e6:	78e7      	ldrbne	r7, [r4, #3]
      sTime->TimeFormat = 0x00U;
 80037e8:	70e7      	strbeq	r7, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037ea:	ea4f 2101 	mov.w	r1, r1, lsl #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80037f2:	bf18      	it	ne
 80037f4:	043f      	lslne	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037f6:	4319      	orrs	r1, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037f8:	430f      	orrs	r7, r1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037fa:	22ca      	movs	r2, #202	; 0xca
 80037fc:	2353      	movs	r3, #83	; 0x53
 80037fe:	6272      	str	r2, [r6, #36]	; 0x24
 8003800:	6273      	str	r3, [r6, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003802:	68f3      	ldr	r3, [r6, #12]
 8003804:	065a      	lsls	r2, r3, #25
 8003806:	d55a      	bpl.n	80038be <HAL_RTC_SetTime+0x102>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003808:	f007 377f 	and.w	r7, r7, #2139062143	; 0x7f7f7f7f
 800380c:	f027 47fe 	bic.w	r7, r7, #2130706432	; 0x7f000000
 8003810:	6037      	str	r7, [r6, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003812:	68b2      	ldr	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003814:	68e3      	ldr	r3, [r4, #12]
 8003816:	6921      	ldr	r1, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800381c:	60b2      	str	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800381e:	68b2      	ldr	r2, [r6, #8]
 8003820:	430b      	orrs	r3, r1
 8003822:	4313      	orrs	r3, r2
 8003824:	60b3      	str	r3, [r6, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003826:	68f3      	ldr	r3, [r6, #12]
 8003828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382c:	60f3      	str	r3, [r6, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800382e:	68b3      	ldr	r3, [r6, #8]
 8003830:	069b      	lsls	r3, r3, #26
 8003832:	d560      	bpl.n	80038f6 <HAL_RTC_SetTime+0x13a>
   __HAL_UNLOCK(hrtc); 
 8003834:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003836:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8003838:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800383a:	6271      	str	r1, [r6, #36]	; 0x24
   return HAL_OK;
 800383c:	4618      	mov	r0, r3
   hrtc->State = HAL_RTC_STATE_READY;
 800383e:	776a      	strb	r2, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 8003840:	772b      	strb	r3, [r5, #28]
   return HAL_OK;
 8003842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003846:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 800384a:	bf18      	it	ne
 800384c:	78e7      	ldrbne	r7, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800384e:	7821      	ldrb	r1, [r4, #0]
      sTime->TimeFormat = 0x00U;
 8003850:	bf0c      	ite	eq
 8003852:	70e7      	strbeq	r7, [r4, #3]
 8003854:	043f      	lslne	r7, r7, #16
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  
  while(Value >= 10U)
 8003856:	2909      	cmp	r1, #9
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	d907      	bls.n	800386e <HAL_RTC_SetTime+0xb2>
  {
    bcdhigh++;
    Value -= 10U;
 800385e:	390a      	subs	r1, #10
 8003860:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 8003862:	2909      	cmp	r1, #9
    bcdhigh++;
 8003864:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8003868:	d8f9      	bhi.n	800385e <HAL_RTC_SetTime+0xa2>
 800386a:	0100      	lsls	r0, r0, #4
 800386c:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800386e:	7863      	ldrb	r3, [r4, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003870:	4301      	orrs	r1, r0
  while(Value >= 10U)
 8003872:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003874:	ea4f 4001 	mov.w	r0, r1, lsl #16
  while(Value >= 10U)
 8003878:	d958      	bls.n	800392c <HAL_RTC_SetTime+0x170>
 800387a:	2100      	movs	r1, #0
    Value -= 10U;
 800387c:	3b0a      	subs	r3, #10
 800387e:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003880:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003882:	f101 0101 	add.w	r1, r1, #1
  while(Value >= 10U)
 8003886:	d8f9      	bhi.n	800387c <HAL_RTC_SetTime+0xc0>
 8003888:	0109      	lsls	r1, r1, #4
 800388a:	fa5f fe81 	uxtb.w	lr, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800388e:	78a1      	ldrb	r1, [r4, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003890:	ea43 030e 	orr.w	r3, r3, lr
  while(Value >= 10U)
 8003894:	2909      	cmp	r1, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003896:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 800389a:	d94a      	bls.n	8003932 <HAL_RTC_SetTime+0x176>
    Value -= 10U;
 800389c:	390a      	subs	r1, #10
 800389e:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 80038a0:	2909      	cmp	r1, #9
    bcdhigh++;
 80038a2:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 80038a6:	d8f9      	bhi.n	800389c <HAL_RTC_SetTime+0xe0>
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038ac:	4307      	orrs	r7, r0
 80038ae:	433b      	orrs	r3, r7
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80038b0:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038b2:	ea43 0701 	orr.w	r7, r3, r1
 80038b6:	e7a0      	b.n	80037fa <HAL_RTC_SetTime+0x3e>
  __HAL_LOCK(hrtc);
 80038b8:	2002      	movs	r0, #2
 80038ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80038c4:	f7fd fac8 	bl	8000e58 <HAL_GetTick>
 80038c8:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038ca:	682e      	ldr	r6, [r5, #0]
 80038cc:	68f3      	ldr	r3, [r6, #12]
 80038ce:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 80038d2:	d199      	bne.n	8003808 <HAL_RTC_SetTime+0x4c>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80038d4:	f7fd fac0 	bl	8000e58 <HAL_GetTick>
 80038d8:	eba0 0009 	sub.w	r0, r0, r9
 80038dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80038e0:	d9f3      	bls.n	80038ca <HAL_RTC_SetTime+0x10e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80038e2:	682a      	ldr	r2, [r5, #0]
 80038e4:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038e6:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80038e8:	6251      	str	r1, [r2, #36]	; 0x24
    return HAL_ERROR;
 80038ea:	2001      	movs	r0, #1
    __HAL_UNLOCK(hrtc);
 80038ec:	f885 801c 	strb.w	r8, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038f0:	776b      	strb	r3, [r5, #29]
    return HAL_ERROR;
 80038f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80038f6:	68f3      	ldr	r3, [r6, #12]
 80038f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038fc:	60f3      	str	r3, [r6, #12]
  tickstart = HAL_GetTick();
 80038fe:	f7fd faab 	bl	8000e58 <HAL_GetTick>
 8003902:	4607      	mov	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003904:	682e      	ldr	r6, [r5, #0]
 8003906:	68f4      	ldr	r4, [r6, #12]
 8003908:	f014 0420 	ands.w	r4, r4, #32
 800390c:	d192      	bne.n	8003834 <HAL_RTC_SetTime+0x78>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800390e:	f7fd faa3 	bl	8000e58 <HAL_GetTick>
 8003912:	1bc0      	subs	r0, r0, r7
 8003914:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003918:	d9f4      	bls.n	8003904 <HAL_RTC_SetTime+0x148>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800391a:	682a      	ldr	r2, [r5, #0]
 800391c:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800391e:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003920:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003922:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 8003924:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003926:	776b      	strb	r3, [r5, #29]
}
 8003928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while(Value >= 10U)
 800392c:	f04f 0e00 	mov.w	lr, #0
 8003930:	e7ad      	b.n	800388e <HAL_RTC_SetTime+0xd2>
 8003932:	2200      	movs	r2, #0
 8003934:	e7ba      	b.n	80038ac <HAL_RTC_SetTime+0xf0>
 8003936:	bf00      	nop

08003938 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003938:	6803      	ldr	r3, [r0, #0]
{
 800393a:	b5f0      	push	{r4, r5, r6, r7, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800393c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800393e:	691c      	ldr	r4, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8003940:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003942:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8003944:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003948:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800394c:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800394e:	f3c3 2706 	ubfx	r7, r3, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003952:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003956:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8003958:	f000 0e40 	and.w	lr, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800395c:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003960:	608c      	str	r4, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8003962:	f881 e003 	strb.w	lr, [r1, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003966:	700e      	strb	r6, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8003968:	704f      	strb	r7, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800396a:	708b      	strb	r3, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 800396c:	b9ba      	cbnz	r2, 800399e <HAL_RTC_GetTime+0x66>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800396e:	093d      	lsrs	r5, r7, #4
 8003970:	091c      	lsrs	r4, r3, #4
 8003972:	0936      	lsrs	r6, r6, #4
 8003974:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003978:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800397c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8003980:	f000 000f 	and.w	r0, r0, #15
 8003984:	f007 070f 	and.w	r7, r7, #15
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003990:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 8003994:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003998:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800399a:	704d      	strb	r5, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 800399c:	708c      	strb	r4, [r1, #2]
}
 800399e:	2000      	movs	r0, #0
 80039a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a2:	bf00      	nop

080039a4 <HAL_RTC_SetDate>:
{
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80039a6:	7f03      	ldrb	r3, [r0, #28]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d060      	beq.n	8003a6e <HAL_RTC_SetDate+0xca>
 80039ac:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80039ae:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 80039b0:	2001      	movs	r0, #1
 80039b2:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80039b4:	7763      	strb	r3, [r4, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039b6:	b32a      	cbz	r2, 8003a04 <HAL_RTC_SetDate+0x60>
                  (((uint32_t)sDate->Month) << 8U) | \
 80039b8:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039ba:	78ca      	ldrb	r2, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 80039bc:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80039be:	780d      	ldrb	r5, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 80039c0:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80039c6:	4318      	orrs	r0, r3
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039c8:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	21ca      	movs	r1, #202	; 0xca
 80039d0:	2353      	movs	r3, #83	; 0x53
 80039d2:	6251      	str	r1, [r2, #36]	; 0x24
 80039d4:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039d6:	68d3      	ldr	r3, [r2, #12]
 80039d8:	0659      	lsls	r1, r3, #25
 80039da:	d54a      	bpl.n	8003a72 <HAL_RTC_SetDate+0xce>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80039dc:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80039e0:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80039e4:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039e6:	68d3      	ldr	r3, [r2, #12]
 80039e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ec:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039ee:	6893      	ldr	r3, [r2, #8]
 80039f0:	069b      	lsls	r3, r3, #26
 80039f2:	d55d      	bpl.n	8003ab0 <HAL_RTC_SetDate+0x10c>
    __HAL_UNLOCK(hrtc);
 80039f4:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80039f6:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 80039f8:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80039fa:	6250      	str	r0, [r2, #36]	; 0x24
    return HAL_OK;    
 80039fc:	4618      	mov	r0, r3
    hrtc->State = HAL_RTC_STATE_READY ;
 80039fe:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003a00:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a04:	784e      	ldrb	r6, [r1, #1]
 8003a06:	06f0      	lsls	r0, r6, #27
 8003a08:	d44c      	bmi.n	8003aa4 <HAL_RTC_SetDate+0x100>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a0a:	78cb      	ldrb	r3, [r1, #3]
  while(Value >= 10U)
 8003a0c:	2b09      	cmp	r3, #9
 8003a0e:	f04f 0000 	mov.w	r0, #0
 8003a12:	d907      	bls.n	8003a24 <HAL_RTC_SetDate+0x80>
    Value -= 10U;
 8003a14:	3b0a      	subs	r3, #10
 8003a16:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003a18:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003a1a:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8003a1e:	d8f9      	bhi.n	8003a14 <HAL_RTC_SetDate+0x70>
 8003a20:	0100      	lsls	r0, r0, #4
 8003a22:	b2c0      	uxtb	r0, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a24:	4303      	orrs	r3, r0
  while(Value >= 10U)
 8003a26:	2e09      	cmp	r6, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a28:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 8003a2c:	f04f 0500 	mov.w	r5, #0
 8003a30:	d908      	bls.n	8003a44 <HAL_RTC_SetDate+0xa0>
    Value -= 10U;
 8003a32:	f1a6 000a 	sub.w	r0, r6, #10
 8003a36:	b2c6      	uxtb	r6, r0
  while(Value >= 10U)
 8003a38:	2e09      	cmp	r6, #9
    bcdhigh++;
 8003a3a:	f105 0501 	add.w	r5, r5, #1
  while(Value >= 10U)
 8003a3e:	d8f8      	bhi.n	8003a32 <HAL_RTC_SetDate+0x8e>
 8003a40:	012d      	lsls	r5, r5, #4
 8003a42:	b2ed      	uxtb	r5, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a44:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a46:	4335      	orrs	r5, r6
  while(Value >= 10U)
 8003a48:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a4a:	ea4f 2505 	mov.w	r5, r5, lsl #8
  while(Value >= 10U)
 8003a4e:	d949      	bls.n	8003ae4 <HAL_RTC_SetDate+0x140>
    Value -= 10U;
 8003a50:	380a      	subs	r0, #10
 8003a52:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8003a54:	2809      	cmp	r0, #9
    bcdhigh++;
 8003a56:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8003a5a:	d8f9      	bhi.n	8003a50 <HAL_RTC_SetDate+0xac>
 8003a5c:	0112      	lsls	r2, r2, #4
 8003a5e:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13U));   
 8003a60:	7809      	ldrb	r1, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a62:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8003a66:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a68:	4310      	orrs	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a6a:	4305      	orrs	r5, r0
 8003a6c:	e7ae      	b.n	80039cc <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 8003a6e:	2002      	movs	r0, #2
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003a78:	f7fd f9ee 	bl	8000e58 <HAL_GetTick>
 8003a7c:	4607      	mov	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	68d6      	ldr	r6, [r2, #12]
 8003a82:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8003a86:	d1a9      	bne.n	80039dc <HAL_RTC_SetDate+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003a88:	f7fd f9e6 	bl	8000e58 <HAL_GetTick>
 8003a8c:	1bc0      	subs	r0, r0, r7
 8003a8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003a92:	d9f4      	bls.n	8003a7e <HAL_RTC_SetDate+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a98:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003a9a:	6251      	str	r1, [r2, #36]	; 0x24
    return HAL_ERROR;
 8003a9c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hrtc);
 8003a9e:	7726      	strb	r6, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003aa0:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8003aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003aa4:	f026 0510 	bic.w	r5, r6, #16
 8003aa8:	350a      	adds	r5, #10
 8003aaa:	b2ee      	uxtb	r6, r5
 8003aac:	704e      	strb	r6, [r1, #1]
 8003aae:	e7ac      	b.n	8003a0a <HAL_RTC_SetDate+0x66>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ab0:	68d3      	ldr	r3, [r2, #12]
 8003ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ab6:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8003ab8:	f7fd f9ce 	bl	8000e58 <HAL_GetTick>
 8003abc:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003abe:	6822      	ldr	r2, [r4, #0]
 8003ac0:	68d5      	ldr	r5, [r2, #12]
 8003ac2:	f015 0520 	ands.w	r5, r5, #32
 8003ac6:	d195      	bne.n	80039f4 <HAL_RTC_SetDate+0x50>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003ac8:	f7fd f9c6 	bl	8000e58 <HAL_GetTick>
 8003acc:	1b80      	subs	r0, r0, r6
 8003ace:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ad2:	d9f4      	bls.n	8003abe <HAL_RTC_SetDate+0x11a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ad8:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003ada:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003adc:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 8003ade:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ae0:	7763      	strb	r3, [r4, #29]
}
 8003ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(Value >= 10U)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	e7bb      	b.n	8003a60 <HAL_RTC_SetDate+0xbc>

08003ae8 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8003ae8:	6803      	ldr	r3, [r0, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003af0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
{
 8003af4:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003af6:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003afa:	b2dd      	uxtb	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003afc:	f3c3 3742 	ubfx	r7, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003b00:	f004 061f 	and.w	r6, r4, #31
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003b04:	0c1b      	lsrs	r3, r3, #16
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003b06:	700f      	strb	r7, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003b08:	704e      	strb	r6, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003b0a:	70cb      	strb	r3, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003b0c:	708d      	strb	r5, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8003b0e:	b9ba      	cbnz	r2, 8003b40 <HAL_RTC_GetDate+0x58>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003b10:	0936      	lsrs	r6, r6, #4
 8003b12:	0928      	lsrs	r0, r5, #4
 8003b14:	091a      	lsrs	r2, r3, #4
 8003b16:	00b7      	lsls	r7, r6, #2
 8003b18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8003b1c:	f004 040f 	and.w	r4, r4, #15
 8003b20:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003b24:	443e      	add	r6, r7
 8003b26:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8003b32:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8003b36:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8003b3a:	7088      	strb	r0, [r1, #2]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b3c:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b3e:	70cb      	strb	r3, [r1, #3]
}
 8003b40:	2000      	movs	r0, #0
 8003b42:	bcf0      	pop	{r4, r5, r6, r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop

08003b48 <RTC_EnterInitMode>:
{
 8003b48:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b4a:	6803      	ldr	r3, [r0, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	0652      	lsls	r2, r2, #25
 8003b50:	d501      	bpl.n	8003b56 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8003b52:	2000      	movs	r0, #0
 8003b54:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b56:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5a:	60da      	str	r2, [r3, #12]
 8003b5c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8003b5e:	f7fd f97b 	bl	8000e58 <HAL_GetTick>
 8003b62:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	065b      	lsls	r3, r3, #25
 8003b6a:	d4f2      	bmi.n	8003b52 <RTC_EnterInitMode+0xa>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003b6c:	f7fd f974 	bl	8000e58 <HAL_GetTick>
 8003b70:	1b40      	subs	r0, r0, r5
 8003b72:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b76:	d9f5      	bls.n	8003b64 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003b78:	2003      	movs	r0, #3
}
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}

08003b7c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b80:	7f03      	ldrb	r3, [r0, #28]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d058      	beq.n	8003c38 <HAL_RTCEx_SetWakeUpTimer_IT+0xbc>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b86:	6803      	ldr	r3, [r0, #0]
 8003b88:	4605      	mov	r5, r0
 8003b8a:	4617      	mov	r7, r2
 8003b8c:	4688      	mov	r8, r1
 8003b8e:	2253      	movs	r2, #83	; 0x53
 8003b90:	21ca      	movs	r1, #202	; 0xca
  __HAL_LOCK(hrtc);
 8003b92:	2401      	movs	r4, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b94:	2002      	movs	r0, #2
 8003b96:	7768      	strb	r0, [r5, #29]
  __HAL_LOCK(hrtc);
 8003b98:	772c      	strb	r4, [r5, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b9a:	6259      	str	r1, [r3, #36]	; 0x24
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	0551      	lsls	r1, r2, #21
 8003ba2:	d50d      	bpl.n	8003bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
    tickstart = HAL_GetTick();
 8003ba4:	f7fd f958 	bl	8000e58 <HAL_GetTick>
 8003ba8:	4604      	mov	r4, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003baa:	e005      	b.n	8003bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x3c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003bac:	f7fd f954 	bl	8000e58 <HAL_GetTick>
 8003bb0:	1b00      	subs	r0, r0, r4
 8003bb2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bb6:	d84b      	bhi.n	8003c50 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	0752      	lsls	r2, r2, #29
 8003bbe:	d4f5      	bmi.n	8003bac <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc6:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003bd0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003bd2:	f7fd f941 	bl	8000e58 <HAL_GetTick>
 8003bd6:	4681      	mov	r9, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003bd8:	e006      	b.n	8003be8 <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003bda:	f7fd f93d 	bl	8000e58 <HAL_GetTick>
 8003bde:	eba0 0009 	sub.w	r0, r0, r9
 8003be2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003be6:	d82a      	bhi.n	8003c3e <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003be8:	682e      	ldr	r6, [r5, #0]
 8003bea:	68f4      	ldr	r4, [r6, #12]
 8003bec:	f014 0404 	ands.w	r4, r4, #4
 8003bf0:	d0f3      	beq.n	8003bda <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003bf2:	f8c6 8014 	str.w	r8, [r6, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003bf6:	68b2      	ldr	r2, [r6, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003bf8:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003bfa:	f022 0207 	bic.w	r2, r2, #7
 8003bfe:	60b2      	str	r2, [r6, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003c00:	68b2      	ldr	r2, [r6, #8]
 8003c02:	4317      	orrs	r7, r2
 8003c04:	60b7      	str	r7, [r6, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c0c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c14:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003c16:	68b3      	ldr	r3, [r6, #8]
 8003c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c1c:	60b3      	str	r3, [r6, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c1e:	68b3      	ldr	r3, [r6, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c20:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c22:	24ff      	movs	r4, #255	; 0xff
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  hrtc->State = HAL_RTC_STATE_READY;
 8003c28:	2101      	movs	r1, #1
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c2a:	60b3      	str	r3, [r6, #8]

  return HAL_OK;
 8003c2c:	4610      	mov	r0, r2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c2e:	6274      	str	r4, [r6, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003c30:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8003c32:	772a      	strb	r2, [r5, #28]
  return HAL_OK;
 8003c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8003c38:	2002      	movs	r0, #2
}
 8003c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c3e:	682a      	ldr	r2, [r5, #0]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c42:	21ff      	movs	r1, #255	; 0xff
 8003c44:	6251      	str	r1, [r2, #36]	; 0x24
      return HAL_TIMEOUT;
 8003c46:	4618      	mov	r0, r3
      __HAL_UNLOCK(hrtc);
 8003c48:	772c      	strb	r4, [r5, #28]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c4a:	776b      	strb	r3, [r5, #29]
      return HAL_TIMEOUT;
 8003c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c50:	6829      	ldr	r1, [r5, #0]
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c54:	20ff      	movs	r0, #255	; 0xff
       __HAL_UNLOCK(hrtc);
 8003c56:	2200      	movs	r2, #0
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c58:	6248      	str	r0, [r1, #36]	; 0x24
       return HAL_TIMEOUT;
 8003c5a:	4618      	mov	r0, r3
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c5c:	776b      	strb	r3, [r5, #29]
       __HAL_UNLOCK(hrtc);
 8003c5e:	772a      	strb	r2, [r5, #28]
       return HAL_TIMEOUT;
 8003c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c64:	40010400 	.word	0x40010400

08003c68 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003c68:	6803      	ldr	r3, [r0, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	055b      	lsls	r3, r3, #21
{
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003c72:	d507      	bpl.n	8003c84 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003c74:	f000 fef0 	bl	8004a58 <HAL_RTCEx_WakeUpTimerEventCallback>
    
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003c78:	6822      	ldr	r2, [r4, #0]
 8003c7a:	68d3      	ldr	r3, [r2, #12]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8003c82:	60d3      	str	r3, [r2, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003c84:	4a03      	ldr	r2, [pc, #12]	; (8003c94 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8003c86:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c8a:	2301      	movs	r3, #1
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003c8c:	6151      	str	r1, [r2, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8003c8e:	7763      	strb	r3, [r4, #29]
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	bf00      	nop
 8003c94:	40010400 	.word	0x40010400

08003c98 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003c98:	6803      	ldr	r3, [r0, #0]
 8003c9a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003c9c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003ca4:	6803      	ldr	r3, [r0, #0]
 8003ca6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003ca8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop

08003cb0 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003cb0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d001      	beq.n	8003cbc <HAL_UART_Transmit_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2002      	movs	r0, #2
 8003cba:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003cbc:	b1c9      	cbz	r1, 8003cf2 <HAL_UART_Transmit_IT+0x42>
 8003cbe:	b1c2      	cbz	r2, 8003cf2 <HAL_UART_Transmit_IT+0x42>
    __HAL_LOCK(huart);
 8003cc0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d0f7      	beq.n	8003cb8 <HAL_UART_Transmit_IT+0x8>
{
 8003cc8:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ccc:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 8003cce:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd2:	2421      	movs	r4, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd6:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cda:	682c      	ldr	r4, [r5, #0]
    huart->pTxBuffPtr = pData;
 8003cdc:	64c1      	str	r1, [r0, #76]	; 0x4c
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cde:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 8003ce2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    __HAL_UNLOCK(huart);
 8003ce6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 8003cea:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cec:	602c      	str	r4, [r5, #0]
  }
}
 8003cee:	bc30      	pop	{r4, r5}
 8003cf0:	4770      	bx	lr
      return HAL_ERROR;
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop

08003cf8 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003cf8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d001      	beq.n	8003d04 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2002      	movs	r0, #2
  }
}
 8003d02:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003d04:	b349      	cbz	r1, 8003d5a <HAL_UART_Receive_IT+0x62>
 8003d06:	b342      	cbz	r2, 8003d5a <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 8003d08:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d0f7      	beq.n	8003d00 <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 8003d10:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8003d12:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 8003d18:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 8003d1c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8003d20:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 8003d24:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8003d28:	d027      	beq.n	8003d7a <HAL_UART_Receive_IT+0x82>
 8003d2a:	b9c3      	cbnz	r3, 8003d5e <HAL_UART_Receive_IT+0x66>
 8003d2c:	6903      	ldr	r3, [r0, #16]
 8003d2e:	b303      	cbz	r3, 8003d72 <HAL_UART_Receive_IT+0x7a>
 8003d30:	237f      	movs	r3, #127	; 0x7f
 8003d32:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d3a:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d3e:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8003d44:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	f041 0101 	orr.w	r1, r1, #1
 8003d4c:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d4e:	6811      	ldr	r1, [r2, #0]
 8003d50:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 8003d54:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d56:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8003d58:	4770      	bx	lr
      return HAL_ERROR;
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8003d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d62:	d1e8      	bne.n	8003d36 <HAL_UART_Receive_IT+0x3e>
 8003d64:	6903      	ldr	r3, [r0, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0e2      	beq.n	8003d30 <HAL_UART_Receive_IT+0x38>
 8003d6a:	233f      	movs	r3, #63	; 0x3f
 8003d6c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003d70:	e7e1      	b.n	8003d36 <HAL_UART_Receive_IT+0x3e>
 8003d72:	23ff      	movs	r3, #255	; 0xff
 8003d74:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003d78:	e7dd      	b.n	8003d36 <HAL_UART_Receive_IT+0x3e>
 8003d7a:	6903      	ldr	r3, [r0, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f8      	bne.n	8003d72 <HAL_UART_Receive_IT+0x7a>
 8003d80:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003d84:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003d88:	e7d5      	b.n	8003d36 <HAL_UART_Receive_IT+0x3e>
 8003d8a:	bf00      	nop

08003d8c <HAL_UART_TxCpltCallback>:
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop

08003d90 <HAL_UART_ErrorCallback>:
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop

08003d94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d94:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003d96:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 8003d9e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8003da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003da4:	f7ff fff4 	bl	8003d90 <HAL_UART_ErrorCallback>
 8003da8:	bd08      	pop	{r3, pc}
 8003daa:	bf00      	nop

08003dac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dac:	6803      	ldr	r3, [r0, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db0:	6819      	ldr	r1, [r3, #0]
{
 8003db2:	b570      	push	{r4, r5, r6, lr}
 8003db4:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003db6:	0710      	lsls	r0, r2, #28
 8003db8:	d111      	bne.n	8003dde <HAL_UART_IRQHandler+0x32>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dba:	0696      	lsls	r6, r2, #26
 8003dbc:	d45f      	bmi.n	8003e7e <HAL_UART_IRQHandler+0xd2>
  cr3its = READ_REG(huart->Instance->CR3);
 8003dbe:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003dc0:	02d5      	lsls	r5, r2, #11
 8003dc2:	d502      	bpl.n	8003dca <HAL_UART_IRQHandler+0x1e>
 8003dc4:	0240      	lsls	r0, r0, #9
 8003dc6:	f100 8088 	bmi.w	8003eda <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dca:	0616      	lsls	r6, r2, #24
 8003dcc:	d502      	bpl.n	8003dd4 <HAL_UART_IRQHandler+0x28>
 8003dce:	060d      	lsls	r5, r1, #24
 8003dd0:	f100 8094 	bmi.w	8003efc <HAL_UART_IRQHandler+0x150>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dd4:	0650      	lsls	r0, r2, #25
 8003dd6:	d501      	bpl.n	8003ddc <HAL_UART_IRQHandler+0x30>
 8003dd8:	064a      	lsls	r2, r1, #25
 8003dda:	d46c      	bmi.n	8003eb6 <HAL_UART_IRQHandler+0x10a>
 8003ddc:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8003dde:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003de0:	f010 0601 	ands.w	r6, r0, #1
 8003de4:	461d      	mov	r5, r3
 8003de6:	d055      	beq.n	8003e94 <HAL_UART_IRQHandler+0xe8>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de8:	07d0      	lsls	r0, r2, #31
 8003dea:	d507      	bpl.n	8003dfc <HAL_UART_IRQHandler+0x50>
 8003dec:	05c8      	lsls	r0, r1, #23
 8003dee:	d505      	bpl.n	8003dfc <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003df0:	2001      	movs	r0, #1
 8003df2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003df4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003df6:	f040 0001 	orr.w	r0, r0, #1
 8003dfa:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dfc:	0790      	lsls	r0, r2, #30
 8003dfe:	d54f      	bpl.n	8003ea0 <HAL_UART_IRQHandler+0xf4>
 8003e00:	b13e      	cbz	r6, 8003e12 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003e02:	2002      	movs	r0, #2
 8003e04:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e08:	f040 0004 	orr.w	r0, r0, #4
 8003e0c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e0e:	0750      	lsls	r0, r2, #29
 8003e10:	d44a      	bmi.n	8003ea8 <HAL_UART_IRQHandler+0xfc>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003e12:	0710      	lsls	r0, r2, #28
 8003e14:	d503      	bpl.n	8003e1e <HAL_UART_IRQHandler+0x72>
 8003e16:	0688      	lsls	r0, r1, #26
 8003e18:	d458      	bmi.n	8003ecc <HAL_UART_IRQHandler+0x120>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e1a:	2e00      	cmp	r6, #0
 8003e1c:	d156      	bne.n	8003ecc <HAL_UART_IRQHandler+0x120>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e1e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d0db      	beq.n	8003ddc <HAL_UART_IRQHandler+0x30>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e24:	0690      	lsls	r0, r2, #26
 8003e26:	d502      	bpl.n	8003e2e <HAL_UART_IRQHandler+0x82>
 8003e28:	068a      	lsls	r2, r1, #26
 8003e2a:	f100 80a7 	bmi.w	8003f7c <HAL_UART_IRQHandler+0x1d0>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003e2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	d404      	bmi.n	8003e3e <HAL_UART_IRQHandler+0x92>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003e34:	68ae      	ldr	r6, [r5, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003e36:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8003e3a:	f000 80a8 	beq.w	8003f8e <HAL_UART_IRQHandler+0x1e2>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3e:	682b      	ldr	r3, [r5, #0]
 8003e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e44:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	68ab      	ldr	r3, [r5, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003e48:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	60ab      	str	r3, [r5, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	68ab      	ldr	r3, [r5, #8]
 8003e56:	065e      	lsls	r6, r3, #25
 8003e58:	d54c      	bpl.n	8003ef4 <HAL_UART_IRQHandler+0x148>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5a:	68ab      	ldr	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 8003e5c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e62:	60ab      	str	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d045      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x148>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e68:	4b72      	ldr	r3, [pc, #456]	; (8004034 <HAL_UART_IRQHandler+0x288>)
 8003e6a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e6c:	f7fd fd1c 	bl	80018a8 <HAL_DMA_Abort_IT>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d0b3      	beq.n	8003ddc <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e74:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8003e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e7c:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e7e:	068d      	lsls	r5, r1, #26
 8003e80:	d59d      	bpl.n	8003dbe <HAL_UART_IRQHandler+0x12>
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e82:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8003e86:	2a22      	cmp	r2, #34	; 0x22
 8003e88:	d052      	beq.n	8003f30 <HAL_UART_IRQHandler+0x184>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	f042 0208 	orr.w	r2, r2, #8
 8003e90:	619a      	str	r2, [r3, #24]
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003e94:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003e98:	d092      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e9a:	07d0      	lsls	r0, r2, #31
 8003e9c:	d5ae      	bpl.n	8003dfc <HAL_UART_IRQHandler+0x50>
 8003e9e:	e7a5      	b.n	8003dec <HAL_UART_IRQHandler+0x40>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea0:	0750      	lsls	r0, r2, #29
 8003ea2:	d5b6      	bpl.n	8003e12 <HAL_UART_IRQHandler+0x66>
 8003ea4:	2e00      	cmp	r6, #0
 8003ea6:	d0b4      	beq.n	8003e12 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003ea8:	2004      	movs	r0, #4
 8003eaa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eac:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003eae:	f040 0002 	orr.w	r0, r0, #2
 8003eb2:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003eb4:	e7ad      	b.n	8003e12 <HAL_UART_IRQHandler+0x66>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eb6:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003eb8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ebe:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003ec0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003ec2:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003ec6:	f7ff ff61 	bl	8003d8c <HAL_UART_TxCpltCallback>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003ecc:	2008      	movs	r0, #8
 8003ece:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ed0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003ed2:	f040 0008 	orr.w	r0, r0, #8
 8003ed6:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003ed8:	e7a1      	b.n	8003e1e <HAL_UART_IRQHandler+0x72>
    huart->gState  = HAL_UART_STATE_READY;
 8003eda:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003edc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003ee0:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003ee2:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 8003ee4:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8003eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003ef0:	f000 ba26 	b.w	8004340 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7ff ff4b 	bl	8003d90 <HAL_UART_ErrorCallback>
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003efc:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8003f00:	2a21      	cmp	r2, #33	; 0x21
 8003f02:	f47f af6b 	bne.w	8003ddc <HAL_UART_IRQHandler+0x30>
    if(huart->TxXferCount == 0U)
 8003f06:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003f0a:	b292      	uxth	r2, r2
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d05a      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x21a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f10:	68a2      	ldr	r2, [r4, #8]
 8003f12:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003f16:	d068      	beq.n	8003fea <HAL_UART_IRQHandler+0x23e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003f18:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003f1a:	1c51      	adds	r1, r2, #1
 8003f1c:	64e1      	str	r1, [r4, #76]	; 0x4c
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8003f22:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f30:	68a2      	ldr	r2, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 8003f34:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f38:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f3c:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3e:	d04b      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x22c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003f42:	400b      	ands	r3, r1
 8003f44:	1c51      	adds	r1, r2, #1
 8003f46:	6561      	str	r1, [r4, #84]	; 0x54
 8003f48:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8003f4a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f af40 	bne.w	8003ddc <HAL_UART_IRQHandler+0x30>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f64:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	689a      	ldr	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003f68:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	609a      	str	r2, [r3, #8]
      HAL_UART_RxCpltCallback(huart);
 8003f70:	4620      	mov	r0, r4
      huart->RxState = HAL_UART_STATE_READY;
 8003f72:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003f76:	f000 fd59 	bl	8004a2c <HAL_UART_RxCpltCallback>
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7c:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8003f80:	2a22      	cmp	r2, #34	; 0x22
 8003f82:	d009      	beq.n	8003f98 <HAL_UART_IRQHandler+0x1ec>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	f042 0208 	orr.w	r2, r2, #8
 8003f8a:	619a      	str	r2, [r3, #24]
 8003f8c:	e74f      	b.n	8003e2e <HAL_UART_IRQHandler+0x82>
        HAL_UART_ErrorCallback(huart);
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f7ff fefe 	bl	8003d90 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	66e6      	str	r6, [r4, #108]	; 0x6c
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f98:	68a0      	ldr	r0, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f9a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 8003f9c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fa4:	b292      	uxth	r2, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa6:	d03b      	beq.n	8004020 <HAL_UART_IRQHandler+0x274>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003faa:	400a      	ands	r2, r1
 8003fac:	1c59      	adds	r1, r3, #1
 8003fae:	6561      	str	r1, [r4, #84]	; 0x54
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0U)
 8003fb4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8003fb8:	3a01      	subs	r2, #1
 8003fba:	b292      	uxth	r2, r2
 8003fbc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8003fc0:	b1f2      	cbz	r2, 8004000 <HAL_UART_IRQHandler+0x254>
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	e733      	b.n	8003e2e <HAL_UART_IRQHandler+0x82>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fcc:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	6922      	ldr	r2, [r4, #16]
 8003fda:	2a00      	cmp	r2, #0
 8003fdc:	d1b0      	bne.n	8003f40 <HAL_UART_IRQHandler+0x194>
      *tmp = (uint16_t)(uhdata & uhMask);
 8003fde:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 8003fe6:	6562      	str	r2, [r4, #84]	; 0x54
 8003fe8:	e7af      	b.n	8003f4a <HAL_UART_IRQHandler+0x19e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fea:	6922      	ldr	r2, [r4, #16]
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d193      	bne.n	8003f18 <HAL_UART_IRQHandler+0x16c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003ff0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003ff2:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003ff6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003ffa:	8519      	strh	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003ffc:	64e2      	str	r2, [r4, #76]	; 0x4c
 8003ffe:	e790      	b.n	8003f22 <HAL_UART_IRQHandler+0x176>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004006:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004008:	689a      	ldr	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800400a:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	609a      	str	r2, [r3, #8]
      HAL_UART_RxCpltCallback(huart);
 8004012:	4620      	mov	r0, r4
      huart->RxState = HAL_UART_STATE_READY;
 8004014:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8004018:	f000 fd08 	bl	8004a2c <HAL_UART_RxCpltCallback>
 800401c:	6825      	ldr	r5, [r4, #0]
 800401e:	e706      	b.n	8003e2e <HAL_UART_IRQHandler+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004020:	6920      	ldr	r0, [r4, #16]
 8004022:	2800      	cmp	r0, #0
 8004024:	d1c0      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x1fc>
      *tmp = (uint16_t)(uhdata & uhMask);
 8004026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004028:	400a      	ands	r2, r1
 800402a:	f820 2b02 	strh.w	r2, [r0], #2
      huart->pRxBuffPtr +=2U;
 800402e:	6560      	str	r0, [r4, #84]	; 0x54
 8004030:	e7c0      	b.n	8003fb4 <HAL_UART_IRQHandler+0x208>
 8004032:	bf00      	nop
 8004034:	08003d95 	.word	0x08003d95

08004038 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004038:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800403a:	07da      	lsls	r2, r3, #31
{
 800403c:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800403e:	d506      	bpl.n	800404e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004040:	6801      	ldr	r1, [r0, #0]
 8004042:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004044:	684a      	ldr	r2, [r1, #4]
 8004046:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800404a:	4322      	orrs	r2, r4
 800404c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800404e:	079c      	lsls	r4, r3, #30
 8004050:	d506      	bpl.n	8004060 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004052:	6801      	ldr	r1, [r0, #0]
 8004054:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004056:	684a      	ldr	r2, [r1, #4]
 8004058:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800405c:	4322      	orrs	r2, r4
 800405e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004060:	0759      	lsls	r1, r3, #29
 8004062:	d506      	bpl.n	8004072 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004064:	6801      	ldr	r1, [r0, #0]
 8004066:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004068:	684a      	ldr	r2, [r1, #4]
 800406a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800406e:	4322      	orrs	r2, r4
 8004070:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004072:	071a      	lsls	r2, r3, #28
 8004074:	d506      	bpl.n	8004084 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004076:	6801      	ldr	r1, [r0, #0]
 8004078:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800407a:	684a      	ldr	r2, [r1, #4]
 800407c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004080:	4322      	orrs	r2, r4
 8004082:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004084:	06dc      	lsls	r4, r3, #27
 8004086:	d506      	bpl.n	8004096 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004088:	6801      	ldr	r1, [r0, #0]
 800408a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800408c:	688a      	ldr	r2, [r1, #8]
 800408e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004092:	4322      	orrs	r2, r4
 8004094:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004096:	0699      	lsls	r1, r3, #26
 8004098:	d506      	bpl.n	80040a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409a:	6801      	ldr	r1, [r0, #0]
 800409c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800409e:	688a      	ldr	r2, [r1, #8]
 80040a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040a4:	4322      	orrs	r2, r4
 80040a6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040a8:	065a      	lsls	r2, r3, #25
 80040aa:	d509      	bpl.n	80040c0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040ac:	6801      	ldr	r1, [r0, #0]
 80040ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80040b0:	684a      	ldr	r2, [r1, #4]
 80040b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80040b6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040bc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040be:	d00b      	beq.n	80040d8 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	d506      	bpl.n	80040d2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c4:	6802      	ldr	r2, [r0, #0]
 80040c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80040c8:	6853      	ldr	r3, [r2, #4]
 80040ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6053      	str	r3, [r2, #4]
}
 80040d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040d6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040d8:	684a      	ldr	r2, [r1, #4]
 80040da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80040dc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80040e0:	4322      	orrs	r2, r4
 80040e2:	604a      	str	r2, [r1, #4]
 80040e4:	e7ec      	b.n	80040c0 <UART_AdvFeatureConfig+0x88>
 80040e6:	bf00      	nop

080040e8 <HAL_UART_Init>:
  if(huart == NULL)
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f000 80af 	beq.w	800424c <HAL_UART_Init+0x164>
{
 80040ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80040f0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80040f4:	4604      	mov	r4, r0
 80040f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d031      	beq.n	8004162 <HAL_UART_Init+0x7a>
  __HAL_UART_DISABLE(huart);
 80040fe:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004100:	6927      	ldr	r7, [r4, #16]
 8004102:	6966      	ldr	r6, [r4, #20]
 8004104:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004106:	4a89      	ldr	r2, [pc, #548]	; (800432c <HAL_UART_Init+0x244>)
  huart->gState = HAL_UART_STATE_BUSY;
 8004108:	2324      	movs	r3, #36	; 0x24
 800410a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800410e:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004110:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004112:	f020 0001 	bic.w	r0, r0, #1
 8004116:	6028      	str	r0, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004118:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800411a:	433b      	orrs	r3, r7
 800411c:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800411e:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004120:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004122:	4313      	orrs	r3, r2
 8004124:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004126:	686a      	ldr	r2, [r5, #4]
 8004128:	68e6      	ldr	r6, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800412a:	69a3      	ldr	r3, [r4, #24]
 800412c:	6a27      	ldr	r7, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412e:	4880      	ldr	r0, [pc, #512]	; (8004330 <HAL_UART_Init+0x248>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004130:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004134:	4332      	orrs	r2, r6
 8004136:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004138:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800413a:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800413c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004140:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004142:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004144:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004146:	d06f      	beq.n	8004228 <HAL_UART_Init+0x140>
 8004148:	4b7a      	ldr	r3, [pc, #488]	; (8004334 <HAL_UART_Init+0x24c>)
 800414a:	429d      	cmp	r5, r3
 800414c:	d00e      	beq.n	800416c <HAL_UART_Init+0x84>
 800414e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004152:	429d      	cmp	r5, r3
 8004154:	d00a      	beq.n	800416c <HAL_UART_Init+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004156:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800415a:	f000 80a2 	beq.w	80042a2 <HAL_UART_Init+0x1ba>
    return HAL_ERROR;
 800415e:	2001      	movs	r0, #1
 8004160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004162:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004166:	f001 fecf 	bl	8005f08 <HAL_UART_MspInit>
 800416a:	e7c8      	b.n	80040fe <HAL_UART_Init+0x16>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004170:	f000 8094 	beq.w	800429c <HAL_UART_Init+0x1b4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004174:	f7ff f9c4 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
 8004178:	6862      	ldr	r2, [r4, #4]
 800417a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800417e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004188:	2b00      	cmp	r3, #0
 800418a:	d149      	bne.n	8004220 <HAL_UART_Init+0x138>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004194:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800419c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800419e:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a8:	66e1      	str	r1, [r4, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80041aa:	f7fc fe55 	bl	8000e58 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80041b4:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041b6:	d40b      	bmi.n	80041d0 <HAL_UART_Init+0xe8>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	0752      	lsls	r2, r2, #29
 80041bc:	d424      	bmi.n	8004208 <HAL_UART_Init+0x120>
  huart->gState  = HAL_UART_STATE_READY;
 80041be:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80041c0:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80041c2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80041c6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80041ca:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80041ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d0:	69dd      	ldr	r5, [r3, #28]
 80041d2:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80041d6:	d1ef      	bne.n	80041b8 <HAL_UART_Init+0xd0>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80041d8:	f7fc fe3e 	bl	8000e58 <HAL_GetTick>
 80041dc:	1b80      	subs	r0, r0, r6
 80041de:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e2:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80041e4:	d3f4      	bcc.n	80041d0 <HAL_UART_Init+0xe8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	689a      	ldr	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80041f0:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80041f8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80041fa:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 80041fe:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004202:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8004206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004208:	69dd      	ldr	r5, [r3, #28]
 800420a:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800420e:	d1d6      	bne.n	80041be <HAL_UART_Init+0xd6>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004210:	f7fc fe22 	bl	8000e58 <HAL_GetTick>
 8004214:	1b80      	subs	r0, r0, r6
 8004216:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800421a:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800421c:	d3f4      	bcc.n	8004208 <HAL_UART_Init+0x120>
 800421e:	e7e2      	b.n	80041e6 <HAL_UART_Init+0xfe>
    UART_AdvFeatureConfig(huart);
 8004220:	4620      	mov	r0, r4
 8004222:	f7ff ff09 	bl	8004038 <UART_AdvFeatureConfig>
 8004226:	e7b1      	b.n	800418c <HAL_UART_Init+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004228:	4b43      	ldr	r3, [pc, #268]	; (8004338 <HAL_UART_Init+0x250>)
 800422a:	4a44      	ldr	r2, [pc, #272]	; (800433c <HAL_UART_Init+0x254>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004232:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004236:	5cd3      	ldrb	r3, [r2, r3]
 8004238:	d13b      	bne.n	80042b2 <HAL_UART_Init+0x1ca>
    switch (clocksource)
 800423a:	2b08      	cmp	r3, #8
 800423c:	d834      	bhi.n	80042a8 <HAL_UART_Init+0x1c0>
 800423e:	e8df f003 	tbb	[pc, r3]
 8004242:	2a2d      	.short	0x2a2d
 8004244:	33153320 	.word	0x33153320
 8004248:	3333      	.short	0x3333
 800424a:	07          	.byte	0x07
 800424b:	00          	.byte	0x00
    return HAL_ERROR;
 800424c:	2001      	movs	r0, #1
}
 800424e:	4770      	bx	lr
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004250:	6862      	ldr	r2, [r4, #4]
 8004252:	0853      	lsrs	r3, r2, #1
 8004254:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004258:	fbb3 f3f2 	udiv	r3, r3, r2
 800425c:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 800425e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004262:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8004266:	4313      	orrs	r3, r2
 8004268:	60eb      	str	r3, [r5, #12]
 800426a:	e78c      	b.n	8004186 <HAL_UART_Init+0x9e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800426c:	f7ff f90e 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8004270:	6862      	ldr	r2, [r4, #4]
 8004272:	6825      	ldr	r5, [r4, #0]
 8004274:	0853      	lsrs	r3, r2, #1
 8004276:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800427a:	fbb3 f3f2 	udiv	r3, r3, r2
 800427e:	b29b      	uxth	r3, r3
 8004280:	e7ed      	b.n	800425e <HAL_UART_Init+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004282:	6862      	ldr	r2, [r4, #4]
 8004284:	0853      	lsrs	r3, r2, #1
 8004286:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800428a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800428e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	e7e3      	b.n	800425e <HAL_UART_Init+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004296:	f7ff f94b 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 800429a:	e7e9      	b.n	8004270 <HAL_UART_Init+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800429c:	f7ff f930 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
 80042a0:	e7e6      	b.n	8004270 <HAL_UART_Init+0x188>
    huart->Instance->BRR = brrtemp;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60eb      	str	r3, [r5, #12]
 80042a6:	e75a      	b.n	800415e <HAL_UART_Init+0x76>
 80042a8:	4b21      	ldr	r3, [pc, #132]	; (8004330 <HAL_UART_Init+0x248>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 80042ae:	2001      	movs	r0, #1
 80042b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	f63f af53 	bhi.w	800415e <HAL_UART_Init+0x76>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <HAL_UART_Init+0x1d8>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	08004175 	.word	0x08004175
 80042c4:	080042e5 	.word	0x080042e5
 80042c8:	08004315 	.word	0x08004315
 80042cc:	0800415f 	.word	0x0800415f
 80042d0:	0800430f 	.word	0x0800430f
 80042d4:	0800415f 	.word	0x0800415f
 80042d8:	0800415f 	.word	0x0800415f
 80042dc:	0800415f 	.word	0x0800415f
 80042e0:	080042fb 	.word	0x080042fb
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80042e4:	f7ff f924 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042e8:	6862      	ldr	r2, [r4, #4]
 80042ea:	4911      	ldr	r1, [pc, #68]	; (8004330 <HAL_UART_Init+0x248>)
 80042ec:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80042f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	60cb      	str	r3, [r1, #12]
 80042f8:	e745      	b.n	8004186 <HAL_UART_Init+0x9e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80042fa:	6862      	ldr	r2, [r4, #4]
 80042fc:	490c      	ldr	r1, [pc, #48]	; (8004330 <HAL_UART_Init+0x248>)
 80042fe:	0853      	lsrs	r3, r2, #1
 8004300:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004304:	fbb3 f3f2 	udiv	r3, r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	60cb      	str	r3, [r1, #12]
 800430c:	e73b      	b.n	8004186 <HAL_UART_Init+0x9e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800430e:	f7ff f8bd 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8004312:	e7e9      	b.n	80042e8 <HAL_UART_Init+0x200>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004314:	6862      	ldr	r2, [r4, #4]
 8004316:	4906      	ldr	r1, [pc, #24]	; (8004330 <HAL_UART_Init+0x248>)
 8004318:	0853      	lsrs	r3, r2, #1
 800431a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800431e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004322:	fbb3 f3f2 	udiv	r3, r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	60cb      	str	r3, [r1, #12]
 800432a:	e72c      	b.n	8004186 <HAL_UART_Init+0x9e>
 800432c:	efff69f3 	.word	0xefff69f3
 8004330:	40013800 	.word	0x40013800
 8004334:	40004400 	.word	0x40004400
 8004338:	40021000 	.word	0x40021000
 800433c:	08007928 	.word	0x08007928

08004340 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop

08004344 <adc_comms>:
extern ADC_HandleTypeDef hadc2;


void adc_comms(){

	adc_raw_voltage =  ADC1_buffer[0];
 8004344:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <adc_comms+0x1f0>)
 8004346:	487c      	ldr	r0, [pc, #496]	; (8004538 <adc_comms+0x1f4>)
 8004348:	681a      	ldr	r2, [r3, #0]
	adc_raw_current =	ADC1_buffer[1];
 800434a:	497c      	ldr	r1, [pc, #496]	; (800453c <adc_comms+0x1f8>)
	adc_raw_voltage =  ADC1_buffer[0];
 800434c:	6813      	ldr	r3, [r2, #0]
void adc_comms(){
 800434e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	raw_ambient_temp = ADC1_buffer[2];
	raw_geyser_temp = ADC1_buffer[3];


	//Converting Voltage
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 8004352:	ee07 3a90 	vmov	s15, r3
void adc_comms(){
 8004356:	ed2d 8b02 	vpush	{d8}
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 800435a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800435e:	eddf 8a78 	vldr	s17, [pc, #480]	; 8004540 <adc_comms+0x1fc>
 8004362:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8004590 <adc_comms+0x24c>
	raw_ambient_temp = ADC1_buffer[2];
 8004366:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8004594 <adc_comms+0x250>
	raw_geyser_temp = ADC1_buffer[3];
 800436a:	4f76      	ldr	r7, [pc, #472]	; (8004544 <adc_comms+0x200>)
	adc_raw_current =	ADC1_buffer[1];
 800436c:	6854      	ldr	r4, [r2, #4]
	raw_ambient_temp = ADC1_buffer[2];
 800436e:	6896      	ldr	r6, [r2, #8]
	raw_geyser_temp = ADC1_buffer[3];
 8004370:	68d5      	ldr	r5, [r2, #12]
	adc_raw_voltage =  ADC1_buffer[0];
 8004372:	6003      	str	r3, [r0, #0]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 8004374:	ee37 7a68 	vsub.f32	s14, s14, s17
	adc_raw_current =	ADC1_buffer[1];
 8004378:	600c      	str	r4, [r1, #0]
	raw_ambient_temp = ADC1_buffer[2];
 800437a:	f8ca 6000 	str.w	r6, [sl]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 800437e:	e9d8 0100 	ldrd	r0, r1, [r8]
	raw_geyser_temp = ADC1_buffer[3];
 8004382:	603d      	str	r5, [r7, #0]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 8004384:	ee27 8a07 	vmul.f32	s16, s14, s14
 8004388:	f7fc fcca 	bl	8000d20 <__aeabi_ul2f>
 800438c:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8004548 <adc_comms+0x204>

	//Converting Current
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 8004390:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8004598 <adc_comms+0x254>
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 8004394:	ee07 0a10 	vmov	s14, r0
 8004398:	eea8 7a27 	vfma.f32	s14, s16, s15
 800439c:	ee17 0a10 	vmov	r0, s14
 80043a0:	f7fc fd04 	bl	8000dac <__aeabi_f2ulz>
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 80043a4:	ee07 4a90 	vmov	s15, r4
 80043a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 80043ac:	e9c8 0100 	strd	r0, r1, [r8]
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 80043b0:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80043b4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80043b8:	ee27 8aa7 	vmul.f32	s16, s15, s15
 80043bc:	f7fc fcb0 	bl	8000d20 <__aeabi_ul2f>
 80043c0:	eddf 7a62 	vldr	s15, [pc, #392]	; 800454c <adc_comms+0x208>
 80043c4:	ee07 0a10 	vmov	s14, r0
 80043c8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80043cc:	ee17 0a10 	vmov	r0, s14
 80043d0:	f7fc fcec 	bl	8000dac <__aeabi_f2ulz>

	//Converting Ambient temperature
	if( (raw_ambient_temp-620.5f)/12.4f < 100){
 80043d4:	ee07 6a90 	vmov	s15, r6
 80043d8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8004550 <adc_comms+0x20c>
 80043dc:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004554 <adc_comms+0x210>
 80043e0:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 8004558 <adc_comms+0x214>
 80043e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 80043e8:	e9c9 0100 	strd	r0, r1, [r9]
	if( (raw_ambient_temp-620.5f)/12.4f < 100){
 80043ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80043f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80043f4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80043f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fc:	d43e      	bmi.n	800447c <adc_comms+0x138>
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-620.5f)/12.4f < 100){
 80043fe:	ee07 5a90 	vmov	s15, r5
 8004402:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004550 <adc_comms+0x20c>
 8004406:	eddf 6a53 	vldr	s13, [pc, #332]	; 8004554 <adc_comms+0x210>
 800440a:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8004558 <adc_comms+0x214>
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004416:	ee27 7a26 	vmul.f32	s14, s14, s13
 800441a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800441e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004422:	d525      	bpl.n	8004470 <adc_comms+0x12c>
		raw_geyser_temp = (raw_geyser_temp-620.4f)/12.4f;
 8004424:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800455c <adc_comms+0x218>
		geyser_temp_int = raw_geyser_temp;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004428:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <adc_comms+0x21c>)
		geyser_temp_int = raw_geyser_temp;
 800442a:	4c4e      	ldr	r4, [pc, #312]	; (8004564 <adc_comms+0x220>)
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	494e      	ldr	r1, [pc, #312]	; (8004568 <adc_comms+0x224>)
		raw_geyser_temp = (raw_geyser_temp-620.4f)/12.4f;
 8004430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004434:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800443c:	ee17 3a90 	vmov	r3, s15
	}
	else{
		raw_geyser_temp = (raw_geyser_temp-620.4f)/12.41f;
		raw_geyser_temp = 50;
		geyser_temp_int = 50;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004440:	461a      	mov	r2, r3
		geyser_temp_int = 50;
 8004442:	7023      	strb	r3, [r4, #0]
		raw_geyser_temp = 50;
 8004444:	603b      	str	r3, [r7, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004446:	f002 fc93 	bl	8006d70 <siprintf>
		sprintf(segment_val, "%lu", raw_geyser_temp);
 800444a:	4b48      	ldr	r3, [pc, #288]	; (800456c <adc_comms+0x228>)
	}
	adc_counter += 1;
 800444c:	4c48      	ldr	r4, [pc, #288]	; (8004570 <adc_comms+0x22c>)
		sprintf(segment_val, "%lu", raw_geyser_temp);
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	4945      	ldr	r1, [pc, #276]	; (8004568 <adc_comms+0x224>)
 8004454:	f002 fc8c 	bl	8006d70 <siprintf>
	adc_counter += 1;
 8004458:	8823      	ldrh	r3, [r4, #0]
 800445a:	3301      	adds	r3, #1
 800445c:	b29b      	uxth	r3, r3
	if(adc_counter == 5000){
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
	adc_counter += 1;
 8004464:	8023      	strh	r3, [r4, #0]
	if(adc_counter == 5000){
 8004466:	d01c      	beq.n	80044a2 <adc_comms+0x15e>

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}

}
 8004468:	ecbd 8b02 	vpop	{d8}
 800446c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004470:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <adc_comms+0x21c>)
		geyser_temp_int = 50;
 8004472:	4c3c      	ldr	r4, [pc, #240]	; (8004564 <adc_comms+0x220>)
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	493c      	ldr	r1, [pc, #240]	; (8004568 <adc_comms+0x224>)
		raw_geyser_temp = 50;
 8004478:	2332      	movs	r3, #50	; 0x32
 800447a:	e7e1      	b.n	8004440 <adc_comms+0xfc>
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
 800447c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800455c <adc_comms+0x218>
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 8004480:	4b3c      	ldr	r3, [pc, #240]	; (8004574 <adc_comms+0x230>)
 8004482:	493d      	ldr	r1, [pc, #244]	; (8004578 <adc_comms+0x234>)
 8004484:	6818      	ldr	r0, [r3, #0]
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
 8004486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800448a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800448e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 8004492:	ee17 2a90 	vmov	r2, s15
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
 8004496:	edca 7a00 	vstr	s15, [sl]
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 800449a:	f002 fc69 	bl	8006d70 <siprintf>
 800449e:	683d      	ldr	r5, [r7, #0]
 80044a0:	e7ad      	b.n	80043fe <adc_comms+0xba>
		*voltage_int_rms = sqrt(adc_buffer_voltage/5000.f);
 80044a2:	4b36      	ldr	r3, [pc, #216]	; (800457c <adc_comms+0x238>)
 80044a4:	ed9f 8a36 	vldr	s16, [pc, #216]	; 8004580 <adc_comms+0x23c>
 80044a8:	681e      	ldr	r6, [r3, #0]
		*current_int_rms = sqrt(adc_buffer_current/5000.f);
 80044aa:	4d36      	ldr	r5, [pc, #216]	; (8004584 <adc_comms+0x240>)
		*voltage_int_rms = sqrt(adc_buffer_voltage/5000.f);
 80044ac:	e9d8 0100 	ldrd	r0, r1, [r8]
 80044b0:	f7fc fc36 	bl	8000d20 <__aeabi_ul2f>
 80044b4:	ee07 0a90 	vmov	s15, r0
 80044b8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80044bc:	ee17 0a90 	vmov	r0, s15
 80044c0:	f7fc f842 	bl	8000548 <__aeabi_f2d>
 80044c4:	ec41 0b10 	vmov	d0, r0, r1
 80044c8:	f003 f8f2 	bl	80076b0 <sqrt>
 80044cc:	ec51 0b10 	vmov	r0, r1, d0
 80044d0:	f7fc fb3e 	bl	8000b50 <__aeabi_d2uiz>
 80044d4:	6030      	str	r0, [r6, #0]
		*current_int_rms = sqrt(adc_buffer_current/5000.f);
 80044d6:	e9d9 0100 	ldrd	r0, r1, [r9]
 80044da:	f7fc fc21 	bl	8000d20 <__aeabi_ul2f>
 80044de:	ee07 0a90 	vmov	s15, r0
 80044e2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80044e6:	ee17 0a90 	vmov	r0, s15
 80044ea:	f7fc f82d 	bl	8000548 <__aeabi_f2d>
 80044ee:	ec41 0b10 	vmov	d0, r0, r1
 80044f2:	f003 f8dd 	bl	80076b0 <sqrt>
 80044f6:	ec51 0b10 	vmov	r0, r1, d0
 80044fa:	f7fc fb29 	bl	8000b50 <__aeabi_d2uiz>
 80044fe:	682a      	ldr	r2, [r5, #0]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <adc_comms+0x244>)
		*current_int_rms = sqrt(adc_buffer_current/5000.f);
 8004502:	6010      	str	r0, [r2, #0]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8004504:	6832      	ldr	r2, [r6, #0]
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	4917      	ldr	r1, [pc, #92]	; (8004568 <adc_comms+0x224>)
 800450a:	f002 fc31 	bl	8006d70 <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 800450e:	4b1f      	ldr	r3, [pc, #124]	; (800458c <adc_comms+0x248>)
 8004510:	682a      	ldr	r2, [r5, #0]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	4914      	ldr	r1, [pc, #80]	; (8004568 <adc_comms+0x224>)
 8004518:	f002 fc2a 	bl	8006d70 <siprintf>
}
 800451c:	ecbd 8b02 	vpop	{d8}
		adc_buffer_voltage = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	2200      	movs	r2, #0
 8004524:	e9c8 2300 	strd	r2, r3, [r8]
		adc_buffer_current = 0;
 8004528:	e9c9 2300 	strd	r2, r3, [r9]
		adc_counter = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	8023      	strh	r3, [r4, #0]
}
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	2000024c 	.word	0x2000024c
 8004538:	20000270 	.word	0x20000270
 800453c:	2000026c 	.word	0x2000026c
 8004540:	4500be87 	.word	0x4500be87
 8004544:	200002d4 	.word	0x200002d4
 8004548:	464f19a4 	.word	0x464f19a4
 800454c:	42395c34 	.word	0x42395c34
 8004550:	441b2000 	.word	0x441b2000
 8004554:	3da5294b 	.word	0x3da5294b
 8004558:	42c80000 	.word	0x42c80000
 800455c:	441b199a 	.word	0x441b199a
 8004560:	2000029c 	.word	0x2000029c
 8004564:	200002a0 	.word	0x200002a0
 8004568:	08007930 	.word	0x08007930
 800456c:	200002e0 	.word	0x200002e0
 8004570:	20000268 	.word	0x20000268
 8004574:	20000274 	.word	0x20000274
 8004578:	0800792c 	.word	0x0800792c
 800457c:	20000310 	.word	0x20000310
 8004580:	3951b717 	.word	0x3951b717
 8004584:	2000027c 	.word	0x2000027c
 8004588:	20000314 	.word	0x20000314
 800458c:	20000280 	.word	0x20000280
 8004590:	20000260 	.word	0x20000260
 8004594:	200002d0 	.word	0x200002d0
 8004598:	20000258 	.word	0x20000258

0800459c <write2Flash>:
extern RTC_HandleTypeDef hrtc;




void write2Flash(){
 800459c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if(log_counter <= 100){
 80045a0:	4d07      	ldr	r5, [pc, #28]	; (80045c0 <write2Flash+0x24>)
 80045a2:	782b      	ldrb	r3, [r5, #0]
 80045a4:	2b64      	cmp	r3, #100	; 0x64
 80045a6:	d90f      	bls.n	80045c8 <write2Flash+0x2c>
 80045a8:	4c06      	ldr	r4, [pc, #24]	; (80045c4 <write2Flash+0x28>)
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	2232      	movs	r2, #50	; 0x32
 80045ae:	2100      	movs	r1, #0
 80045b0:	f002 fb19 	bl	8006be6 <memset>


			log_counter += 1;
 80045b4:	782b      	ldrb	r3, [r5, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	702b      	strb	r3, [r5, #0]
 80045ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop
 80045c0:	200002bc 	.word	0x200002bc
 80045c4:	20000298 	.word	0x20000298
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80045c8:	f8df 8370 	ldr.w	r8, [pc, #880]	; 800493c <write2Flash+0x3a0>
		log_empty = 0;
 80045cc:	4bc4      	ldr	r3, [pc, #784]	; (80048e0 <write2Flash+0x344>)
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80045ce:	f8d8 1000 	ldr.w	r1, [r8]
 80045d2:	48c4      	ldr	r0, [pc, #784]	; (80048e4 <write2Flash+0x348>)
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 80045d4:	4cc4      	ldr	r4, [pc, #784]	; (80048e8 <write2Flash+0x34c>)
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80045d6:	4ec5      	ldr	r6, [pc, #788]	; (80048ec <write2Flash+0x350>)
		itoa((time->Hours),temp_time_var,10  );
 80045d8:	4fc5      	ldr	r7, [pc, #788]	; (80048f0 <write2Flash+0x354>)
		log_empty = 0;
 80045da:	f04f 0900 	mov.w	r9, #0
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80045de:	464a      	mov	r2, r9
		log_empty = 0;
 80045e0:	f883 9000 	strb.w	r9, [r3]
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80045e4:	f7ff f9a8 	bl	8003938 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80045e8:	4bc2      	ldr	r3, [pc, #776]	; (80048f4 <write2Flash+0x358>)
 80045ea:	48be      	ldr	r0, [pc, #760]	; (80048e4 <write2Flash+0x348>)
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	464a      	mov	r2, r9
 80045f0:	f7ff fa7a 	bl	8003ae8 <HAL_RTC_GetDate>
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 80045f4:	f8d4 9000 	ldr.w	r9, [r4]
 80045f8:	4648      	mov	r0, r9
 80045fa:	f7fb fde9 	bl	80001d0 <strlen>
 80045fe:	4682      	mov	sl, r0
 8004600:	48bd      	ldr	r0, [pc, #756]	; (80048f8 <write2Flash+0x35c>)
 8004602:	f7fb fde5 	bl	80001d0 <strlen>
 8004606:	49bc      	ldr	r1, [pc, #752]	; (80048f8 <write2Flash+0x35c>)
 8004608:	4602      	mov	r2, r0
 800460a:	eb09 000a 	add.w	r0, r9, sl
 800460e:	f002 fadf 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004612:	f8d4 9000 	ldr.w	r9, [r4]
 8004616:	4648      	mov	r0, r9
 8004618:	f7fb fdda 	bl	80001d0 <strlen>
 800461c:	7833      	ldrb	r3, [r6, #0]
 800461e:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Hours),temp_time_var,10  );
 8004622:	f8d8 3000 	ldr.w	r3, [r8]
 8004626:	6839      	ldr	r1, [r7, #0]
 8004628:	7818      	ldrb	r0, [r3, #0]
 800462a:	220a      	movs	r2, #10
 800462c:	f002 fac6 	bl	8006bbc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8004630:	f8d4 9000 	ldr.w	r9, [r4]
 8004634:	4648      	mov	r0, r9
 8004636:	f7fb fdcb 	bl	80001d0 <strlen>
 800463a:	f8d7 a000 	ldr.w	sl, [r7]
 800463e:	4683      	mov	fp, r0
 8004640:	4650      	mov	r0, sl
 8004642:	f7fb fdc5 	bl	80001d0 <strlen>
 8004646:	4651      	mov	r1, sl
 8004648:	4602      	mov	r2, r0
 800464a:	eb09 000b 	add.w	r0, r9, fp
 800464e:	f002 fabf 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004652:	f8d4 9000 	ldr.w	r9, [r4]
 8004656:	4648      	mov	r0, r9
 8004658:	f7fb fdba 	bl	80001d0 <strlen>
 800465c:	7833      	ldrb	r3, [r6, #0]
 800465e:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Minutes),temp_time_var,10  );
 8004662:	f8d8 3000 	ldr.w	r3, [r8]
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	7858      	ldrb	r0, [r3, #1]
 800466a:	220a      	movs	r2, #10
 800466c:	f002 faa6 	bl	8006bbc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8004670:	f8d4 9000 	ldr.w	r9, [r4]
 8004674:	4648      	mov	r0, r9
 8004676:	f7fb fdab 	bl	80001d0 <strlen>
 800467a:	f8d7 a000 	ldr.w	sl, [r7]
 800467e:	4683      	mov	fp, r0
 8004680:	4650      	mov	r0, sl
 8004682:	f7fb fda5 	bl	80001d0 <strlen>
 8004686:	4651      	mov	r1, sl
 8004688:	4602      	mov	r2, r0
 800468a:	eb09 000b 	add.w	r0, r9, fp
 800468e:	f002 fa9f 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004692:	f8d4 9000 	ldr.w	r9, [r4]
 8004696:	4648      	mov	r0, r9
 8004698:	f7fb fd9a 	bl	80001d0 <strlen>
 800469c:	7833      	ldrb	r3, [r6, #0]
 800469e:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Seconds),temp_time_var,10  );
 80046a2:	f8d8 3000 	ldr.w	r3, [r8]
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	7898      	ldrb	r0, [r3, #2]
 80046aa:	220a      	movs	r2, #10
 80046ac:	f002 fa86 	bl	8006bbc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 80046b0:	f8d4 8000 	ldr.w	r8, [r4]
 80046b4:	4640      	mov	r0, r8
 80046b6:	f7fb fd8b 	bl	80001d0 <strlen>
 80046ba:	683f      	ldr	r7, [r7, #0]
 80046bc:	4681      	mov	r9, r0
 80046be:	4638      	mov	r0, r7
 80046c0:	f7fb fd86 	bl	80001d0 <strlen>
 80046c4:	4639      	mov	r1, r7
 80046c6:	4602      	mov	r2, r0
 80046c8:	eb08 0009 	add.w	r0, r8, r9
 80046cc:	f002 fa80 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80046d0:	6827      	ldr	r7, [r4, #0]
 80046d2:	4638      	mov	r0, r7
 80046d4:	f7fb fd7c 	bl	80001d0 <strlen>
 80046d8:	7833      	ldrb	r3, [r6, #0]
 80046da:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 80046dc:	6827      	ldr	r7, [r4, #0]
 80046de:	4638      	mov	r0, r7
 80046e0:	f7fb fd76 	bl	80001d0 <strlen>
 80046e4:	4b85      	ldr	r3, [pc, #532]	; (80048fc <write2Flash+0x360>)
 80046e6:	f8d3 8000 	ldr.w	r8, [r3]
 80046ea:	4681      	mov	r9, r0
 80046ec:	4640      	mov	r0, r8
 80046ee:	f7fb fd6f 	bl	80001d0 <strlen>
 80046f2:	4641      	mov	r1, r8
 80046f4:	4602      	mov	r2, r0
 80046f6:	eb07 0009 	add.w	r0, r7, r9
 80046fa:	f002 fa69 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80046fe:	6827      	ldr	r7, [r4, #0]
 8004700:	4638      	mov	r0, r7
 8004702:	f7fb fd65 	bl	80001d0 <strlen>
 8004706:	7833      	ldrb	r3, [r6, #0]
 8004708:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 800470a:	6827      	ldr	r7, [r4, #0]
 800470c:	4638      	mov	r0, r7
 800470e:	f7fb fd5f 	bl	80001d0 <strlen>
 8004712:	4b7b      	ldr	r3, [pc, #492]	; (8004900 <write2Flash+0x364>)
 8004714:	f8d3 8000 	ldr.w	r8, [r3]
 8004718:	4681      	mov	r9, r0
 800471a:	4640      	mov	r0, r8
 800471c:	f7fb fd58 	bl	80001d0 <strlen>
 8004720:	4641      	mov	r1, r8
 8004722:	4602      	mov	r2, r0
 8004724:	eb07 0009 	add.w	r0, r7, r9
 8004728:	f002 fa52 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800472c:	6827      	ldr	r7, [r4, #0]
 800472e:	4638      	mov	r0, r7
 8004730:	f7fb fd4e 	bl	80001d0 <strlen>
 8004734:	7833      	ldrb	r3, [r6, #0]
 8004736:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 8004738:	6827      	ldr	r7, [r4, #0]
 800473a:	4638      	mov	r0, r7
 800473c:	f7fb fd48 	bl	80001d0 <strlen>
 8004740:	4b70      	ldr	r3, [pc, #448]	; (8004904 <write2Flash+0x368>)
 8004742:	f8d3 8000 	ldr.w	r8, [r3]
 8004746:	4681      	mov	r9, r0
 8004748:	4640      	mov	r0, r8
 800474a:	f7fb fd41 	bl	80001d0 <strlen>
 800474e:	4641      	mov	r1, r8
 8004750:	4602      	mov	r2, r0
 8004752:	eb07 0009 	add.w	r0, r7, r9
 8004756:	f002 fa3b 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800475a:	6827      	ldr	r7, [r4, #0]
 800475c:	4638      	mov	r0, r7
 800475e:	f7fb fd37 	bl	80001d0 <strlen>
 8004762:	7833      	ldrb	r3, [r6, #0]
 8004764:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8004766:	6827      	ldr	r7, [r4, #0]
 8004768:	4638      	mov	r0, r7
 800476a:	f7fb fd31 	bl	80001d0 <strlen>
 800476e:	4b66      	ldr	r3, [pc, #408]	; (8004908 <write2Flash+0x36c>)
 8004770:	f8d3 8000 	ldr.w	r8, [r3]
 8004774:	4681      	mov	r9, r0
 8004776:	4640      	mov	r0, r8
 8004778:	f7fb fd2a 	bl	80001d0 <strlen>
 800477c:	4641      	mov	r1, r8
 800477e:	4602      	mov	r2, r0
 8004780:	eb07 0009 	add.w	r0, r7, r9
 8004784:	f002 fa24 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004788:	6827      	ldr	r7, [r4, #0]
 800478a:	4638      	mov	r0, r7
 800478c:	f7fb fd20 	bl	80001d0 <strlen>
 8004790:	7833      	ldrb	r3, [r6, #0]
 8004792:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8004794:	6827      	ldr	r7, [r4, #0]
 8004796:	4638      	mov	r0, r7
 8004798:	f7fb fd1a 	bl	80001d0 <strlen>
 800479c:	4b5b      	ldr	r3, [pc, #364]	; (800490c <write2Flash+0x370>)
 800479e:	f8d3 8000 	ldr.w	r8, [r3]
 80047a2:	4681      	mov	r9, r0
 80047a4:	4640      	mov	r0, r8
 80047a6:	f7fb fd13 	bl	80001d0 <strlen>
 80047aa:	4641      	mov	r1, r8
 80047ac:	4602      	mov	r2, r0
 80047ae:	eb07 0009 	add.w	r0, r7, r9
 80047b2:	f002 fa0d 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80047b6:	6827      	ldr	r7, [r4, #0]
 80047b8:	4638      	mov	r0, r7
 80047ba:	f7fb fd09 	bl	80001d0 <strlen>
 80047be:	7833      	ldrb	r3, [r6, #0]
 80047c0:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 80047c2:	6827      	ldr	r7, [r4, #0]
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7fb fd03 	bl	80001d0 <strlen>
 80047ca:	4b51      	ldr	r3, [pc, #324]	; (8004910 <write2Flash+0x374>)
 80047cc:	f8d3 8000 	ldr.w	r8, [r3]
 80047d0:	4681      	mov	r9, r0
 80047d2:	4640      	mov	r0, r8
 80047d4:	f7fb fcfc 	bl	80001d0 <strlen>
 80047d8:	4641      	mov	r1, r8
 80047da:	4602      	mov	r2, r0
 80047dc:	eb07 0009 	add.w	r0, r7, r9
 80047e0:	f002 f9f6 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80047e4:	6827      	ldr	r7, [r4, #0]
 80047e6:	4638      	mov	r0, r7
 80047e8:	f7fb fcf2 	bl	80001d0 <strlen>
 80047ec:	7833      	ldrb	r3, [r6, #0]
 80047ee:	543b      	strb	r3, [r7, r0]
		if(valve_state == valve_OPEN){
 80047f0:	4a48      	ldr	r2, [pc, #288]	; (8004914 <write2Flash+0x378>)
 80047f2:	4b49      	ldr	r3, [pc, #292]	; (8004918 <write2Flash+0x37c>)
 80047f4:	6816      	ldr	r6, [r2, #0]
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80047f6:	6827      	ldr	r7, [r4, #0]
		if(valve_state == valve_OPEN){
 80047f8:	429e      	cmp	r6, r3
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80047fa:	4638      	mov	r0, r7
		if(valve_state == valve_OPEN){
 80047fc:	f000 80dd 	beq.w	80049ba <write2Flash+0x41e>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 8004800:	f7fb fce6 	bl	80001d0 <strlen>
 8004804:	4680      	mov	r8, r0
 8004806:	4630      	mov	r0, r6
 8004808:	f7fb fce2 	bl	80001d0 <strlen>
 800480c:	4631      	mov	r1, r6
 800480e:	4602      	mov	r2, r0
 8004810:	eb07 0008 	add.w	r0, r7, r8
 8004814:	f002 f9dc 	bl	8006bd0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 8004818:	6826      	ldr	r6, [r4, #0]
 800481a:	4630      	mov	r0, r6
 800481c:	f7fb fcd8 	bl	80001d0 <strlen>
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <write2Flash+0x380>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	5233      	strh	r3, [r6, r0]
		if(log_counter == 0){
 8004826:	782b      	ldrb	r3, [r5, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8089 	beq.w	8004940 <write2Flash+0x3a4>
			HAL_FLASH_Unlock();
 800482e:	f7fd f977 	bl	8001b20 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008800+64*log_counter, *((uint64_t*)(flash_stored)) );
 8004832:	7829      	ldrb	r1, [r5, #0]
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	f101 1120 	add.w	r1, r1, #2097184	; 0x200020
 800483a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	0189      	lsls	r1, r1, #6
 8004844:	2003      	movs	r0, #3
 8004846:	f7fd f89f 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008808+64*log_counter, *((uint64_t*)(flash_stored)+1) );
 800484a:	7828      	ldrb	r0, [r5, #0]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	4934      	ldr	r1, [pc, #208]	; (8004920 <write2Flash+0x384>)
 8004850:	2640      	movs	r6, #64	; 0x40
 8004852:	fb06 1100 	mla	r1, r6, r0, r1
 8004856:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800485a:	2003      	movs	r0, #3
 800485c:	f7fd f894 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008810+64*log_counter, *((uint64_t*)(flash_stored)+2) );
 8004860:	7829      	ldrb	r1, [r5, #0]
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	4a2f      	ldr	r2, [pc, #188]	; (8004924 <write2Flash+0x388>)
 8004866:	2003      	movs	r0, #3
 8004868:	fb06 2101 	mla	r1, r6, r1, r2
 800486c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004870:	f7fd f88a 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008818+64*log_counter, *((uint64_t*)(flash_stored)+3) );
 8004874:	7829      	ldrb	r1, [r5, #0]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	4a2b      	ldr	r2, [pc, #172]	; (8004928 <write2Flash+0x38c>)
 800487a:	2003      	movs	r0, #3
 800487c:	fb06 2101 	mla	r1, r6, r1, r2
 8004880:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004884:	f7fd f880 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008820+64*log_counter, *((uint64_t*)(flash_stored)+4) );
 8004888:	7829      	ldrb	r1, [r5, #0]
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <write2Flash+0x390>)
 800488e:	2003      	movs	r0, #3
 8004890:	fb06 2101 	mla	r1, r6, r1, r2
 8004894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004898:	f7fd f876 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008828+64*log_counter, *((uint64_t*)(flash_stored)+5) );
 800489c:	7829      	ldrb	r1, [r5, #0]
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	4a23      	ldr	r2, [pc, #140]	; (8004930 <write2Flash+0x394>)
 80048a2:	2003      	movs	r0, #3
 80048a4:	fb06 2101 	mla	r1, r6, r1, r2
 80048a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80048ac:	f7fd f86c 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008830+64*log_counter, *((uint64_t*)(flash_stored)+6) );
 80048b0:	7829      	ldrb	r1, [r5, #0]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <write2Flash+0x398>)
 80048b6:	2003      	movs	r0, #3
 80048b8:	fb06 2101 	mla	r1, r6, r1, r2
 80048bc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80048c0:	f7fd f862 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008838+64*log_counter, *((uint64_t*)(flash_stored)+7) );
 80048c4:	7829      	ldrb	r1, [r5, #0]
 80048c6:	4a1c      	ldr	r2, [pc, #112]	; (8004938 <write2Flash+0x39c>)
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	fb06 2101 	mla	r1, r6, r1, r2
 80048ce:	2003      	movs	r0, #3
 80048d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80048d4:	f7fd f858 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80048d8:	f7fd f934 	bl	8001b44 <HAL_FLASH_Lock>
 80048dc:	e665      	b.n	80045aa <write2Flash+0xe>
 80048de:	bf00      	nop
 80048e0:	2000001b 	.word	0x2000001b
 80048e4:	200004a8 	.word	0x200004a8
 80048e8:	20000298 	.word	0x20000298
 80048ec:	20000004 	.word	0x20000004
 80048f0:	200002ec 	.word	0x200002ec
 80048f4:	20000284 	.word	0x20000284
 80048f8:	2000001c 	.word	0x2000001c
 80048fc:	20000280 	.word	0x20000280
 8004900:	20000314 	.word	0x20000314
 8004904:	20000274 	.word	0x20000274
 8004908:	2000029c 	.word	0x2000029c
 800490c:	200002f8 	.word	0x200002f8
 8004910:	200002b0 	.word	0x200002b0
 8004914:	20000308 	.word	0x20000308
 8004918:	20000054 	.word	0x20000054
 800491c:	20000008 	.word	0x20000008
 8004920:	08008808 	.word	0x08008808
 8004924:	08008810 	.word	0x08008810
 8004928:	08008818 	.word	0x08008818
 800492c:	08008820 	.word	0x08008820
 8004930:	08008828 	.word	0x08008828
 8004934:	08008830 	.word	0x08008830
 8004938:	08008838 	.word	0x08008838
 800493c:	200002f4 	.word	0x200002f4
			HAL_FLASH_Unlock();
 8004940:	f7fd f8ee 	bl	8001b20 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008800, *((uint64_t*)(flash_stored)) );
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	4923      	ldr	r1, [pc, #140]	; (80049d4 <write2Flash+0x438>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	2003      	movs	r0, #3
 800494e:	f7fd f81b 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008808, *((uint64_t*)(flash_stored)+1) );
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	4920      	ldr	r1, [pc, #128]	; (80049d8 <write2Flash+0x43c>)
 8004956:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800495a:	2003      	movs	r0, #3
 800495c:	f7fd f814 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008810, *((uint64_t*)(flash_stored)+2) );
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	491e      	ldr	r1, [pc, #120]	; (80049dc <write2Flash+0x440>)
 8004964:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004968:	2003      	movs	r0, #3
 800496a:	f7fd f80d 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008818, *((uint64_t*)(flash_stored)+3) );
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	491b      	ldr	r1, [pc, #108]	; (80049e0 <write2Flash+0x444>)
 8004972:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004976:	2003      	movs	r0, #3
 8004978:	f7fd f806 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008820, *((uint64_t*)(flash_stored)+4) );
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	4919      	ldr	r1, [pc, #100]	; (80049e4 <write2Flash+0x448>)
 8004980:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004984:	2003      	movs	r0, #3
 8004986:	f7fc ffff 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008828, *((uint64_t*)(flash_stored)+5) );
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	4916      	ldr	r1, [pc, #88]	; (80049e8 <write2Flash+0x44c>)
 800498e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004992:	2003      	movs	r0, #3
 8004994:	f7fc fff8 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008830, *((uint64_t*)(flash_stored)+6) );
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	4914      	ldr	r1, [pc, #80]	; (80049ec <write2Flash+0x450>)
 800499c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80049a0:	2003      	movs	r0, #3
 80049a2:	f7fc fff1 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008838, *((uint64_t*)(flash_stored)+7) );
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	4911      	ldr	r1, [pc, #68]	; (80049f0 <write2Flash+0x454>)
 80049aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80049ae:	2003      	movs	r0, #3
 80049b0:	f7fc ffea 	bl	8001988 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80049b4:	f7fd f8c6 	bl	8001b44 <HAL_FLASH_Lock>
 80049b8:	e5f7      	b.n	80045aa <write2Flash+0xe>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80049ba:	f7fb fc09 	bl	80001d0 <strlen>
 80049be:	4680      	mov	r8, r0
 80049c0:	4630      	mov	r0, r6
 80049c2:	f7fb fc05 	bl	80001d0 <strlen>
 80049c6:	4631      	mov	r1, r6
 80049c8:	1e42      	subs	r2, r0, #1
 80049ca:	eb07 0008 	add.w	r0, r7, r8
 80049ce:	f002 f8ff 	bl	8006bd0 <memcpy>
 80049d2:	e721      	b.n	8004818 <write2Flash+0x27c>
 80049d4:	08008800 	.word	0x08008800
 80049d8:	08008808 	.word	0x08008808
 80049dc:	08008810 	.word	0x08008810
 80049e0:	08008818 	.word	0x08008818
 80049e4:	08008820 	.word	0x08008820
 80049e8:	08008828 	.word	0x08008828
 80049ec:	08008830 	.word	0x08008830
 80049f0:	08008838 	.word	0x08008838

080049f4 <logPosition>:
}


void logPosition(){
	uint32_t* mem = (uint32_t*)(0x08008800);
	while(*mem != 0xFFFFFFFF){
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <logPosition+0x2c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	d00f      	beq.n	8004a1c <logPosition+0x28>
 80049fc:	4909      	ldr	r1, [pc, #36]	; (8004a24 <logPosition+0x30>)
 80049fe:	780a      	ldrb	r2, [r1, #0]
		log_counter += 1;
 8004a00:	3201      	adds	r2, #1
 8004a02:	b2d2      	uxtb	r2, r2
		mem = (uint32_t*)(0x08008800 + 64*log_counter);
 8004a04:	f102 1320 	add.w	r3, r2, #2097184	; 0x200020
 8004a08:	f503 7300 	add.w	r3, r3, #512	; 0x200
	while(*mem != 0xFFFFFFFF){
 8004a0c:	019b      	lsls	r3, r3, #6
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	d1f5      	bne.n	8004a00 <logPosition+0xc>
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <logPosition+0x34>)
 8004a16:	700a      	strb	r2, [r1, #0]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	08008800 	.word	0x08008800
 8004a24:	200002bc 	.word	0x200002bc
 8004a28:	2000001b 	.word	0x2000001b

08004a2c <HAL_UART_RxCpltCallback>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004a2c:	b508      	push	{r3, lr}
	rx_flag = 1;
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_UART_RxCpltCallback+0x14>)
 8004a32:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_UART_RxCpltCallback+0x18>)
 8004a36:	4804      	ldr	r0, [pc, #16]	; (8004a48 <HAL_UART_RxCpltCallback+0x1c>)
 8004a38:	f7ff f95e 	bl	8003cf8 <HAL_UART_Receive_IT>
 8004a3c:	bd08      	pop	{r3, pc}
 8004a3e:	bf00      	nop
 8004a40:	200002dd 	.word	0x200002dd
 8004a44:	200005a4 	.word	0x200005a4
 8004a48:	20000438 	.word	0x20000438

08004a4c <HAL_ADC_ConvCpltCallback>:

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4b01      	ldr	r3, [pc, #4]	; (8004a54 <HAL_ADC_ConvCpltCallback+0x8>)
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	4770      	bx	lr
 8004a54:	2000026a 	.word	0x2000026a

08004a58 <HAL_RTCEx_WakeUpTimerEventCallback>:
////	tim3_flag = 1;
//}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4b01      	ldr	r3, [pc, #4]	; (8004a60 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	4770      	bx	lr
 8004a60:	200002dc 	.word	0x200002dc

08004a64 <HAL_GPIO_EXTI_Callback>:
////	pump_flag = 0;
////	HAL_TIM_Base_Stop_IT(&htim2);
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_6){
 8004a64:	2840      	cmp	r0, #64	; 0x40
 8004a66:	d000      	beq.n	8004a6a <HAL_GPIO_EXTI_Callback+0x6>
 8004a68:	4770      	bx	lr
		pump_flag = 1;
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <HAL_GPIO_EXTI_Callback+0x10>)
 8004a6e:	701a      	strb	r2, [r3, #0]
	}
}
 8004a70:	e7fa      	b.n	8004a68 <HAL_GPIO_EXTI_Callback+0x4>
 8004a72:	bf00      	nop
 8004a74:	200002cc 	.word	0x200002cc

08004a78 <heating_control>:
		}
	}
}


void heating_control(){
 8004a78:	b430      	push	{r4, r5}

	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 4) ) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a7a:	4c1c      	ldr	r4, [pc, #112]	; (8004aec <heating_control+0x74>)
 8004a7c:	4d1c      	ldr	r5, [pc, #112]	; (8004af0 <heating_control+0x78>)
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	42ab      	cmp	r3, r5
 8004a82:	d004      	beq.n	8004a8e <heating_control+0x16>
	}
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a84:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <heating_control+0x7c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d011      	beq.n	8004aae <heating_control+0x36>
	}
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
}
 8004a8a:	bc30      	pop	{r4, r5}
 8004a8c:	4770      	bx	lr
	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 4) ) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <heating_control+0x80>)
 8004a90:	491a      	ldr	r1, [pc, #104]	; (8004afc <heating_control+0x84>)
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	7808      	ldrb	r0, [r1, #0]
 8004a96:	7811      	ldrb	r1, [r2, #0]
 8004a98:	1f0a      	subs	r2, r1, #4
 8004a9a:	4290      	cmp	r0, r2
 8004a9c:	db1a      	blt.n	8004ad4 <heating_control+0x5c>
		heater_state = heater_OFF;
 8004a9e:	6025      	str	r5, [r4, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004aa6:	4816      	ldr	r0, [pc, #88]	; (8004b00 <heating_control+0x88>)
}
 8004aa8:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004aaa:	f7fd b945 	b.w	8001d38 <HAL_GPIO_WritePin>
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && !(geyser_temp_int > (*set_temp+4 ))){
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <heating_control+0x80>)
 8004ab0:	4912      	ldr	r1, [pc, #72]	; (8004afc <heating_control+0x84>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	7808      	ldrb	r0, [r1, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	1f19      	subs	r1, r3, #4
 8004aba:	4288      	cmp	r0, r1
 8004abc:	db11      	blt.n	8004ae2 <heating_control+0x6a>
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4298      	cmp	r0, r3
 8004ac2:	dcec      	bgt.n	8004a9e <heating_control+0x26>
		heater_state = heater_ON;
 8004ac4:	6022      	str	r2, [r4, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004ac6:	480e      	ldr	r0, [pc, #56]	; (8004b00 <heating_control+0x88>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 8004ace:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004ad0:	f7fd b932 	b.w	8001d38 <HAL_GPIO_WritePin>
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
 8004ad4:	1d0a      	adds	r2, r1, #4
 8004ad6:	4290      	cmp	r0, r2
 8004ad8:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <heating_control+0x7c>)
 8004ada:	ddf3      	ble.n	8004ac4 <heating_control+0x4c>
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && !(geyser_temp_int > (*set_temp+4 ))){
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d1d4      	bne.n	8004a8a <heating_control+0x12>
 8004ae0:	460b      	mov	r3, r1
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4298      	cmp	r0, r3
 8004ae6:	dcd0      	bgt.n	8004a8a <heating_control+0x12>
 8004ae8:	e7ec      	b.n	8004ac4 <heating_control+0x4c>
 8004aea:	bf00      	nop
 8004aec:	200002b0 	.word	0x200002b0
 8004af0:	20000014 	.word	0x20000014
 8004af4:	20000018 	.word	0x20000018
 8004af8:	200002e4 	.word	0x200002e4
 8004afc:	200002a0 	.word	0x200002a0
 8004b00:	48000400 	.word	0x48000400

08004b04 <heating_scheduling>:
void heating_scheduling(){
 8004b04:	b538      	push	{r3, r4, r5, lr}
	if(auto_heating == 1){
 8004b06:	4b54      	ldr	r3, [pc, #336]	; (8004c58 <heating_scheduling+0x154>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d000      	beq.n	8004b10 <heating_scheduling+0xc>
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004b10:	4c52      	ldr	r4, [pc, #328]	; (8004c5c <heating_scheduling+0x158>)
 8004b12:	4853      	ldr	r0, [pc, #332]	; (8004c60 <heating_scheduling+0x15c>)
 8004b14:	6821      	ldr	r1, [r4, #0]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f7fe ff0e 	bl	8003938 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8004b1c:	4b51      	ldr	r3, [pc, #324]	; (8004c64 <heating_scheduling+0x160>)
 8004b1e:	4850      	ldr	r0, [pc, #320]	; (8004c60 <heating_scheduling+0x15c>)
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f7fe ffe0 	bl	8003ae8 <HAL_RTC_GetDate>
		if( (time->Hours - heating_schedule[0].Hours) > 0 && (time->Hours - heating_schedule[1].Hours) < 0){
 8004b28:	6821      	ldr	r1, [r4, #0]
 8004b2a:	4b4f      	ldr	r3, [pc, #316]	; (8004c68 <heating_scheduling+0x164>)
 8004b2c:	780a      	ldrb	r2, [r1, #0]
 8004b2e:	7818      	ldrb	r0, [r3, #0]
 8004b30:	1a14      	subs	r4, r2, r0
 8004b32:	2c00      	cmp	r4, #0
 8004b34:	dd03      	ble.n	8004b3e <heating_scheduling+0x3a>
 8004b36:	7d1c      	ldrb	r4, [r3, #20]
 8004b38:	1b14      	subs	r4, r2, r4
 8004b3a:	2c00      	cmp	r4, #0
 8004b3c:	db46      	blt.n	8004bcc <heating_scheduling+0xc8>
		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 8004b3e:	4282      	cmp	r2, r0
 8004b40:	d02d      	beq.n	8004b9e <heating_scheduling+0x9a>
 8004b42:	7d18      	ldrb	r0, [r3, #20]
 8004b44:	4290      	cmp	r0, r2
 8004b46:	d02a      	beq.n	8004b9e <heating_scheduling+0x9a>
		else if( (time->Hours - heating_schedule[2].Hours) > 0 && (time->Hours - heating_schedule[3].Hours) < 0){
 8004b48:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8004b4c:	1a14      	subs	r4, r2, r0
 8004b4e:	2c00      	cmp	r4, #0
 8004b50:	dd04      	ble.n	8004b5c <heating_scheduling+0x58>
 8004b52:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8004b56:	1b14      	subs	r4, r2, r4
 8004b58:	2c00      	cmp	r4, #0
 8004b5a:	db37      	blt.n	8004bcc <heating_scheduling+0xc8>
		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 8004b5c:	4282      	cmp	r2, r0
 8004b5e:	d056      	beq.n	8004c0e <heating_scheduling+0x10a>
 8004b60:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 8004b64:	4290      	cmp	r0, r2
 8004b66:	d06f      	beq.n	8004c48 <heating_scheduling+0x144>
		else if( (time->Hours - heating_schedule[4].Hours) > 0 && (time->Hours - heating_schedule[5].Hours) < 0){
 8004b68:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
 8004b6c:	1a14      	subs	r4, r2, r0
 8004b6e:	2c00      	cmp	r4, #0
 8004b70:	dd04      	ble.n	8004b7c <heating_scheduling+0x78>
 8004b72:	f893 4064 	ldrb.w	r4, [r3, #100]	; 0x64
 8004b76:	1b14      	subs	r4, r2, r4
 8004b78:	2c00      	cmp	r4, #0
 8004b7a:	db27      	blt.n	8004bcc <heating_scheduling+0xc8>
		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 8004b7c:	4282      	cmp	r2, r0
 8004b7e:	d029      	beq.n	8004bd4 <heating_scheduling+0xd0>
 8004b80:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
 8004b84:	4290      	cmp	r0, r2
 8004b86:	d025      	beq.n	8004bd4 <heating_scheduling+0xd0>
			heater_state = heater_OFF;
 8004b88:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <heating_scheduling+0x168>)
 8004b8a:	4a39      	ldr	r2, [pc, #228]	; (8004c70 <heating_scheduling+0x16c>)
 8004b8c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004b8e:	4839      	ldr	r0, [pc, #228]	; (8004c74 <heating_scheduling+0x170>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 8004b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004b9a:	f7fd b8cd 	b.w	8001d38 <HAL_GPIO_WritePin>
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 8004b9e:	7848      	ldrb	r0, [r1, #1]
 8004ba0:	785c      	ldrb	r4, [r3, #1]
 8004ba2:	1b05      	subs	r5, r0, r4
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	dd03      	ble.n	8004bb0 <heating_scheduling+0xac>
 8004ba8:	7d5d      	ldrb	r5, [r3, #21]
 8004baa:	1b45      	subs	r5, r0, r5
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	db0d      	blt.n	8004bcc <heating_scheduling+0xc8>
				&& ( (time->Minutes - heating_schedule[0].Minutes == 0) || (time->Minutes - heating_schedule[1].Minutes == 0) )
 8004bb0:	4284      	cmp	r4, r0
 8004bb2:	d002      	beq.n	8004bba <heating_scheduling+0xb6>
 8004bb4:	7d5c      	ldrb	r4, [r3, #21]
 8004bb6:	4284      	cmp	r4, r0
 8004bb8:	d1c6      	bne.n	8004b48 <heating_scheduling+0x44>
				&& ( (time->Seconds - heating_schedule[0].Seconds > 0) && (time->Seconds - heating_schedule[1].Seconds < 0) ) ){
 8004bba:	7888      	ldrb	r0, [r1, #2]
 8004bbc:	789c      	ldrb	r4, [r3, #2]
 8004bbe:	1b04      	subs	r4, r0, r4
 8004bc0:	2c00      	cmp	r4, #0
 8004bc2:	ddc1      	ble.n	8004b48 <heating_scheduling+0x44>
 8004bc4:	7d9c      	ldrb	r4, [r3, #22]
 8004bc6:	1b00      	subs	r0, r0, r4
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	dabd      	bge.n	8004b48 <heating_scheduling+0x44>
}
 8004bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			heating_control();
 8004bd0:	f7ff bf52 	b.w	8004a78 <heating_control>
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 8004bd4:	784a      	ldrb	r2, [r1, #1]
 8004bd6:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51
 8004bda:	1a14      	subs	r4, r2, r0
 8004bdc:	2c00      	cmp	r4, #0
 8004bde:	dd04      	ble.n	8004bea <heating_scheduling+0xe6>
 8004be0:	f893 4065 	ldrb.w	r4, [r3, #101]	; 0x65
 8004be4:	1b14      	subs	r4, r2, r4
 8004be6:	2c00      	cmp	r4, #0
 8004be8:	dbf0      	blt.n	8004bcc <heating_scheduling+0xc8>
				&& ( (time->Minutes - heating_schedule[4].Minutes == 0) || (time->Minutes - heating_schedule[5].Minutes == 0) )
 8004bea:	4282      	cmp	r2, r0
 8004bec:	d003      	beq.n	8004bf6 <heating_scheduling+0xf2>
 8004bee:	f893 0065 	ldrb.w	r0, [r3, #101]	; 0x65
 8004bf2:	4290      	cmp	r0, r2
 8004bf4:	d1c8      	bne.n	8004b88 <heating_scheduling+0x84>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
 8004bf6:	788a      	ldrb	r2, [r1, #2]
 8004bf8:	f893 1052 	ldrb.w	r1, [r3, #82]	; 0x52
 8004bfc:	1a51      	subs	r1, r2, r1
 8004bfe:	2900      	cmp	r1, #0
 8004c00:	ddc2      	ble.n	8004b88 <heating_scheduling+0x84>
 8004c02:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004c06:	1ad2      	subs	r2, r2, r3
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	dabd      	bge.n	8004b88 <heating_scheduling+0x84>
 8004c0c:	e7de      	b.n	8004bcc <heating_scheduling+0xc8>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 8004c0e:	7848      	ldrb	r0, [r1, #1]
 8004c10:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 8004c14:	1b05      	subs	r5, r0, r4
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	dd04      	ble.n	8004c24 <heating_scheduling+0x120>
 8004c1a:	f893 503d 	ldrb.w	r5, [r3, #61]	; 0x3d
 8004c1e:	1b45      	subs	r5, r0, r5
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	dbd3      	blt.n	8004bcc <heating_scheduling+0xc8>
				&& ( (time->Minutes - heating_schedule[2].Minutes == 0) || (time->Minutes - heating_schedule[3].Minutes == 0) )
 8004c24:	4284      	cmp	r4, r0
 8004c26:	d003      	beq.n	8004c30 <heating_scheduling+0x12c>
 8004c28:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 8004c2c:	4284      	cmp	r4, r0
 8004c2e:	d19b      	bne.n	8004b68 <heating_scheduling+0x64>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
 8004c30:	7888      	ldrb	r0, [r1, #2]
 8004c32:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 8004c36:	1b04      	subs	r4, r0, r4
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	dd95      	ble.n	8004b68 <heating_scheduling+0x64>
 8004c3c:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
 8004c40:	1b00      	subs	r0, r0, r4
 8004c42:	2800      	cmp	r0, #0
 8004c44:	da90      	bge.n	8004b68 <heating_scheduling+0x64>
 8004c46:	e7c1      	b.n	8004bcc <heating_scheduling+0xc8>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 8004c48:	7848      	ldrb	r0, [r1, #1]
 8004c4a:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 8004c4e:	1b05      	subs	r5, r0, r4
 8004c50:	2d00      	cmp	r5, #0
 8004c52:	dde7      	ble.n	8004c24 <heating_scheduling+0x120>
 8004c54:	e7e1      	b.n	8004c1a <heating_scheduling+0x116>
 8004c56:	bf00      	nop
 8004c58:	20000278 	.word	0x20000278
 8004c5c:	200002f4 	.word	0x200002f4
 8004c60:	200004a8 	.word	0x200004a8
 8004c64:	20000284 	.word	0x20000284
 8004c68:	20000528 	.word	0x20000528
 8004c6c:	200002b0 	.word	0x200002b0
 8004c70:	20000014 	.word	0x20000014
 8004c74:	48000400 	.word	0x48000400

08004c78 <init_iqs263>:
extern I2C_HandleTypeDef hi2c1;




int init_iqs263(){
 8004c78:	b530      	push	{r4, r5, lr}
 8004c7a:	b087      	sub	sp, #28
	// READING DEVICE INFORMATION
//	 data_buffer[0] = SYSTEM_FLAGS_VAL;
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004c7c:	2110      	movs	r1, #16
 8004c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c82:	f7fd f853 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004c86:	2801      	cmp	r0, #1
 8004c88:	d0f8      	beq.n	8004c7c <init_iqs263+0x4>
	 uint8_t sysflag_byte[] = {0};
 8004c8a:	aa06      	add	r2, sp, #24
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f802 3d04 	strb.w	r3, [r2, #-4]!
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, (uint8_t)SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  sysflag_byte, 1,50);
 8004c92:	2132      	movs	r1, #50	; 0x32
 8004c94:	2301      	movs	r3, #1
 8004c96:	48ce      	ldr	r0, [pc, #824]	; (8004fd0 <init_iqs263+0x358>)
 8004c98:	9200      	str	r2, [sp, #0]
 8004c9a:	9102      	str	r1, [sp, #8]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004ca2:	4604      	mov	r4, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, (uint8_t)SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  sysflag_byte, 1,50);
 8004ca4:	f7fd fa28 	bl	80020f8 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7fd ffd1 	bl	8002c50 <HAL_I2C_GetState>
 8004cae:	2820      	cmp	r0, #32
 8004cb0:	d1fa      	bne.n	8004ca8 <init_iqs263+0x30>

	 	HAL_Delay(42);
 8004cb2:	202a      	movs	r0, #42	; 0x2a
	    // Set active channels
	 data_buffer[0] = ACTIVE_CHS;
 8004cb4:	4dc7      	ldr	r5, [pc, #796]	; (8004fd4 <init_iqs263+0x35c>)
	 	HAL_Delay(42);
 8004cb6:	f7fc f8d5 	bl	8000e64 <HAL_Delay>
	 data_buffer[0] = ACTIVE_CHS;
 8004cba:	230f      	movs	r3, #15
 8004cbc:	702b      	strb	r3, [r5, #0]
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004cbe:	2110      	movs	r1, #16
 8004cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cc4:	f7fd f832 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004cc8:	2801      	cmp	r0, #1
 8004cca:	d0f8      	beq.n	8004cbe <init_iqs263+0x46>
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, ACTIVE_CHANNELS, I2C_MEMADD_SIZE_8BIT,  data_buffer, 1,50);
 8004ccc:	2232      	movs	r2, #50	; 0x32
 8004cce:	2301      	movs	r3, #1
 8004cd0:	48bf      	ldr	r0, [pc, #764]	; (8004fd0 <init_iqs263+0x358>)
 8004cd2:	9202      	str	r2, [sp, #8]
 8004cd4:	9500      	str	r5, [sp, #0]
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	220d      	movs	r2, #13
 8004cda:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004cdc:	4604      	mov	r4, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, ACTIVE_CHANNELS, I2C_MEMADD_SIZE_8BIT,  data_buffer, 1,50);
 8004cde:	f7fd fa0b 	bl	80020f8 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7fd ffb4 	bl	8002c50 <HAL_I2C_GetState>
 8004ce8:	2820      	cmp	r0, #32
 8004cea:	d1fa      	bne.n	8004ce2 <init_iqs263+0x6a>
	 HAL_Delay(42);
 8004cec:	202a      	movs	r0, #42	; 0x2a
 8004cee:	f7fc f8b9 	bl	8000e64 <HAL_Delay>
	 // Setup touch and prox thresholds for each channel
	 data_buffer[0] = PROX_THRESHOLD;
 8004cf2:	4ab9      	ldr	r2, [pc, #740]	; (8004fd8 <init_iqs263+0x360>)
 8004cf4:	4bb9      	ldr	r3, [pc, #740]	; (8004fdc <init_iqs263+0x364>)
 8004cf6:	602a      	str	r2, [r5, #0]
 8004cf8:	606b      	str	r3, [r5, #4]
	 data_buffer[4] = MOVEMENT_THRESHOLD;
	 data_buffer[5] = RESEED_BLOCK;
	 data_buffer[6] = HALT_TIME;
	 data_buffer[7] = I2C_TIMEOUT;

	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004cfa:	2110      	movs	r1, #16
 8004cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d00:	f7fd f814 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004d04:	2801      	cmp	r0, #1
 8004d06:	d0f8      	beq.n	8004cfa <init_iqs263+0x82>
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, THRESHOLDS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 8,50);
 8004d08:	2232      	movs	r2, #50	; 0x32
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	48b0      	ldr	r0, [pc, #704]	; (8004fd0 <init_iqs263+0x358>)
 8004d0e:	9202      	str	r2, [sp, #8]
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	9500      	str	r5, [sp, #0]
 8004d14:	2301      	movs	r3, #1
 8004d16:	220a      	movs	r2, #10
 8004d18:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d1a:	4604      	mov	r4, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, THRESHOLDS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 8,50);
 8004d1c:	f7fd f9ec 	bl	80020f8 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7fd ff95 	bl	8002c50 <HAL_I2C_GetState>
 8004d26:	2820      	cmp	r0, #32
 8004d28:	d1fa      	bne.n	8004d20 <init_iqs263+0xa8>
	 HAL_Delay(42);
 8004d2a:	202a      	movs	r0, #42	; 0x2a
 8004d2c:	f7fc f89a 	bl	8000e64 <HAL_Delay>

	// Set the ATI Targets (Target Counts)
	data_buffer[0] = ATI_TARGET_TOUCH;
 8004d30:	2230      	movs	r2, #48	; 0x30
	data_buffer[1] = ATI_TARGET_PROX;
 8004d32:	2340      	movs	r3, #64	; 0x40
	data_buffer[0] = ATI_TARGET_TOUCH;
 8004d34:	702a      	strb	r2, [r5, #0]
	data_buffer[1] = ATI_TARGET_PROX;
 8004d36:	706b      	strb	r3, [r5, #1]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004d38:	2110      	movs	r1, #16
 8004d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d3e:	f7fc fff5 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004d42:	2801      	cmp	r0, #1
 8004d44:	d0f8      	beq.n	8004d38 <init_iqs263+0xc0>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8004d46:	2232      	movs	r2, #50	; 0x32
 8004d48:	2302      	movs	r3, #2
 8004d4a:	48a1      	ldr	r0, [pc, #644]	; (8004fd0 <init_iqs263+0x358>)
 8004d4c:	9202      	str	r2, [sp, #8]
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	9500      	str	r5, [sp, #0]
 8004d52:	2301      	movs	r3, #1
 8004d54:	220b      	movs	r2, #11
 8004d56:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d58:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8004d5a:	f7fd f9cd 	bl	80020f8 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f7fd ff76 	bl	8002c50 <HAL_I2C_GetState>
 8004d64:	2820      	cmp	r0, #32
 8004d66:	d1fa      	bne.n	8004d5e <init_iqs263+0xe6>
	HAL_Delay(42);
 8004d68:	202a      	movs	r0, #42	; 0x2a
 8004d6a:	f7fc f87b 	bl	8000e64 <HAL_Delay>
	// Set the BASE value for each channel
	data_buffer[0] = MULTIPLIERS_CH0;
 8004d6e:	f04f 3308 	mov.w	r3, #134744072	; 0x8080808
 8004d72:	602b      	str	r3, [r5, #0]
	data_buffer[1] = MULTIPLIERS_CH1;
	data_buffer[2] = MULTIPLIERS_CH2;
	data_buffer[3] = MULTIPLIERS_CH3;

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004d74:	2110      	movs	r1, #16
 8004d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d7a:	f7fc ffd7 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004d7e:	2801      	cmp	r0, #1
 8004d80:	d0f8      	beq.n	8004d74 <init_iqs263+0xfc>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, MULTIPLIERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8004d82:	2232      	movs	r2, #50	; 0x32
 8004d84:	2304      	movs	r3, #4
 8004d86:	4892      	ldr	r0, [pc, #584]	; (8004fd0 <init_iqs263+0x358>)
 8004d88:	9202      	str	r2, [sp, #8]
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	9500      	str	r5, [sp, #0]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	2207      	movs	r2, #7
 8004d92:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d94:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, MULTIPLIERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8004d96:	f7fd f9af 	bl	80020f8 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7fd ff58 	bl	8002c50 <HAL_I2C_GetState>
 8004da0:	2820      	cmp	r0, #32
 8004da2:	d1fa      	bne.n	8004d9a <init_iqs263+0x122>
	HAL_Delay(42);
 8004da4:	202a      	movs	r0, #42	; 0x2a
 8004da6:	f7fc f85d 	bl	8000e64 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004daa:	2110      	movs	r1, #16
 8004dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004db0:	f7fc ffbc 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004db4:	2801      	cmp	r0, #1
 8004db6:	d0f8      	beq.n	8004daa <init_iqs263+0x132>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004db8:	2232      	movs	r2, #50	; 0x32
 8004dba:	2305      	movs	r3, #5
 8004dbc:	4884      	ldr	r0, [pc, #528]	; (8004fd0 <init_iqs263+0x358>)
 8004dbe:	9202      	str	r2, [sp, #8]
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	9500      	str	r5, [sp, #0]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	2209      	movs	r2, #9
 8004dc8:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004dca:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004dcc:	f7fd fa7a 	bl	80022c4 <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f7fd ff3d 	bl	8002c50 <HAL_I2C_GetState>
 8004dd6:	2820      	cmp	r0, #32
 8004dd8:	d1fa      	bne.n	8004dd0 <init_iqs263+0x158>
	HAL_Delay(42);
 8004dda:	202a      	movs	r0, #42	; 0x2a
 8004ddc:	f7fc f842 	bl	8000e64 <HAL_Delay>
	// Setup prox settings
//	data_buffer[0] = 0;
	data_buffer[0] = PROXSETTINGS0_VAL;
 8004de0:	2300      	movs	r3, #0
	data_buffer[1] = PROXSETTINGS1_VAL;
 8004de2:	211d      	movs	r1, #29
//	data_buffer[2] = 8;
	data_buffer[2] = PROXSETTINGS2_VAL;
 8004de4:	2204      	movs	r2, #4
	data_buffer[0] = PROXSETTINGS0_VAL;
 8004de6:	702b      	strb	r3, [r5, #0]
	data_buffer[3] = PROXSETTINGS3_VAL;
 8004de8:	70eb      	strb	r3, [r5, #3]
	data_buffer[4] = EVENT_MASK_VAL;
 8004dea:	712b      	strb	r3, [r5, #4]
	data_buffer[1] = PROXSETTINGS1_VAL;
 8004dec:	7069      	strb	r1, [r5, #1]
	data_buffer[2] = PROXSETTINGS2_VAL;
 8004dee:	70aa      	strb	r2, [r5, #2]


	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004df0:	2110      	movs	r1, #16
 8004df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004df6:	f7fc ff99 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004dfa:	2801      	cmp	r0, #1
 8004dfc:	d0f8      	beq.n	8004df0 <init_iqs263+0x178>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004dfe:	2232      	movs	r2, #50	; 0x32
 8004e00:	2305      	movs	r3, #5
 8004e02:	4873      	ldr	r0, [pc, #460]	; (8004fd0 <init_iqs263+0x358>)
 8004e04:	9202      	str	r2, [sp, #8]
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	9500      	str	r5, [sp, #0]
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	2209      	movs	r2, #9
 8004e0e:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e10:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004e12:	f7fd f971 	bl	80020f8 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7fd ff1a 	bl	8002c50 <HAL_I2C_GetState>
 8004e1c:	2820      	cmp	r0, #32
 8004e1e:	d1fa      	bne.n	8004e16 <init_iqs263+0x19e>
	HAL_Delay(42);
 8004e20:	202a      	movs	r0, #42	; 0x2a
 8004e22:	f7fc f81f 	bl	8000e64 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004e26:	2110      	movs	r1, #16
 8004e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e2c:	f7fc ff7e 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004e30:	2801      	cmp	r0, #1
 8004e32:	d0f8      	beq.n	8004e26 <init_iqs263+0x1ae>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004e34:	2232      	movs	r2, #50	; 0x32
 8004e36:	2305      	movs	r3, #5
 8004e38:	4865      	ldr	r0, [pc, #404]	; (8004fd0 <init_iqs263+0x358>)
 8004e3a:	9202      	str	r2, [sp, #8]
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	9500      	str	r5, [sp, #0]
 8004e40:	2301      	movs	r3, #1
 8004e42:	2209      	movs	r2, #9
 8004e44:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e46:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004e48:	f7fd fa3c 	bl	80022c4 <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f7fd feff 	bl	8002c50 <HAL_I2C_GetState>
 8004e52:	2820      	cmp	r0, #32
 8004e54:	d1fa      	bne.n	8004e4c <init_iqs263+0x1d4>
	HAL_Delay(42);
 8004e56:	202a      	movs	r0, #42	; 0x2a
 8004e58:	f7fc f804 	bl	8000e64 <HAL_Delay>

    // Setup Compensation (PCC)
    data_buffer[0] = COMPENSATION_CH0;
 8004e5c:	4b60      	ldr	r3, [pc, #384]	; (8004fe0 <init_iqs263+0x368>)
 8004e5e:	602b      	str	r3, [r5, #0]
    data_buffer[1] = COMPENSATION_CH1;
    data_buffer[2] = COMPENSATION_CH2;
    data_buffer[3] = COMPENSATION_CH3;

    while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004e60:	2110      	movs	r1, #16
 8004e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e66:	f7fc ff61 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004e6a:	2801      	cmp	r0, #1
 8004e6c:	d0f8      	beq.n	8004e60 <init_iqs263+0x1e8>
    HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, COMPENSATION, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8004e6e:	2232      	movs	r2, #50	; 0x32
 8004e70:	2304      	movs	r3, #4
 8004e72:	4857      	ldr	r0, [pc, #348]	; (8004fd0 <init_iqs263+0x358>)
 8004e74:	9202      	str	r2, [sp, #8]
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	9500      	str	r5, [sp, #0]
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e80:	4604      	mov	r4, r0
    HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, COMPENSATION, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8004e82:	f7fd f939 	bl	80020f8 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7fd fee2 	bl	8002c50 <HAL_I2C_GetState>
 8004e8c:	2820      	cmp	r0, #32
 8004e8e:	d1fa      	bne.n	8004e86 <init_iqs263+0x20e>
	HAL_Delay(42);
 8004e90:	202a      	movs	r0, #42	; 0x2a
 8004e92:	f7fb ffe7 	bl	8000e64 <HAL_Delay>

	// Set timings on the IQS263
	data_buffer[0] = LOW_POWER;
 8004e96:	2300      	movs	r3, #0
 8004e98:	702b      	strb	r3, [r5, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004e9a:	2110      	movs	r1, #16
 8004e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ea0:	f7fc ff44 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004ea4:	2801      	cmp	r0, #1
 8004ea6:	d0f8      	beq.n	8004e9a <init_iqs263+0x222>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004ea8:	2232      	movs	r2, #50	; 0x32
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4848      	ldr	r0, [pc, #288]	; (8004fd0 <init_iqs263+0x358>)
 8004eae:	9202      	str	r2, [sp, #8]
 8004eb0:	9500      	str	r5, [sp, #0]
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	220b      	movs	r2, #11
 8004eb6:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004eb8:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004eba:	f7fd f91d 	bl	80020f8 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7fd fec6 	bl	8002c50 <HAL_I2C_GetState>
 8004ec4:	2820      	cmp	r0, #32
 8004ec6:	d1fa      	bne.n	8004ebe <init_iqs263+0x246>
	HAL_Delay(42);
 8004ec8:	202a      	movs	r0, #42	; 0x2a
 8004eca:	f7fb ffcb 	bl	8000e64 <HAL_Delay>
	// Set gesture timers on IQS263
	data_buffer[0] = TAP_TIMER;
 8004ece:	2105      	movs	r1, #5
	data_buffer[1] = FLICK_TIMER;
 8004ed0:	2251      	movs	r2, #81	; 0x51
	data_buffer[2] = FLICK_THRESHOLD;
 8004ed2:	2333      	movs	r3, #51	; 0x33
	data_buffer[0] = TAP_TIMER;
 8004ed4:	7029      	strb	r1, [r5, #0]
	data_buffer[1] = FLICK_TIMER;
 8004ed6:	706a      	strb	r2, [r5, #1]
	data_buffer[2] = FLICK_THRESHOLD;
 8004ed8:	70ab      	strb	r3, [r5, #2]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004eda:	2110      	movs	r1, #16
 8004edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ee0:	f7fc ff24 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004ee4:	2801      	cmp	r0, #1
 8004ee6:	d0f8      	beq.n	8004eda <init_iqs263+0x262>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, GESTURE_TIMERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 3,50);
 8004ee8:	2232      	movs	r2, #50	; 0x32
 8004eea:	2303      	movs	r3, #3
 8004eec:	4838      	ldr	r0, [pc, #224]	; (8004fd0 <init_iqs263+0x358>)
 8004eee:	9202      	str	r2, [sp, #8]
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	9500      	str	r5, [sp, #0]
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	220c      	movs	r2, #12
 8004ef8:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004efa:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, GESTURE_TIMERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 3,50);
 8004efc:	f7fd f8fc 	bl	80020f8 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004f00:	4620      	mov	r0, r4
 8004f02:	f7fd fea5 	bl	8002c50 <HAL_I2C_GetState>
 8004f06:	2820      	cmp	r0, #32
 8004f08:	d1fa      	bne.n	8004f00 <init_iqs263+0x288>
	HAL_Delay(42);
 8004f0a:	202a      	movs	r0, #42	; 0x2a
 8004f0c:	f7fb ffaa 	bl	8000e64 <HAL_Delay>

	// Redo ati
	data_buffer[0] = 0x10;
 8004f10:	2310      	movs	r3, #16
 8004f12:	702b      	strb	r3, [r5, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004f14:	2110      	movs	r1, #16
 8004f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f1a:	f7fc ff07 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004f1e:	2801      	cmp	r0, #1
 8004f20:	d0f8      	beq.n	8004f14 <init_iqs263+0x29c>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004f22:	2232      	movs	r2, #50	; 0x32
 8004f24:	2301      	movs	r3, #1
 8004f26:	482a      	ldr	r0, [pc, #168]	; (8004fd0 <init_iqs263+0x358>)
 8004f28:	9202      	str	r2, [sp, #8]
 8004f2a:	9500      	str	r5, [sp, #0]
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2209      	movs	r2, #9
 8004f30:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004f32:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004f34:	f7fd f8e0 	bl	80020f8 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7fd fe89 	bl	8002c50 <HAL_I2C_GetState>
 8004f3e:	2820      	cmp	r0, #32
 8004f40:	d1fa      	bne.n	8004f38 <init_iqs263+0x2c0>
	HAL_Delay(42);
 8004f42:	202a      	movs	r0, #42	; 0x2a
 8004f44:	f7fb ff8e 	bl	8000e64 <HAL_Delay>
	do
	    {
			HAL_Delay(10);
	        while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
	        HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004f48:	4c21      	ldr	r4, [pc, #132]	; (8004fd0 <init_iqs263+0x358>)
			HAL_Delay(10);
 8004f4a:	200a      	movs	r0, #10
 8004f4c:	f7fb ff8a 	bl	8000e64 <HAL_Delay>
	        while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004f50:	2110      	movs	r1, #16
 8004f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f56:	f7fc fee9 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004f5a:	2801      	cmp	r0, #1
 8004f5c:	d0f8      	beq.n	8004f50 <init_iqs263+0x2d8>
	        HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004f5e:	2232      	movs	r2, #50	; 0x32
 8004f60:	2301      	movs	r3, #1
 8004f62:	9202      	str	r2, [sp, #8]
 8004f64:	9500      	str	r5, [sp, #0]
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2188      	movs	r1, #136	; 0x88
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7fd f9a9 	bl	80022c4 <HAL_I2C_Mem_Read>
	        while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004f72:	4620      	mov	r0, r4
 8004f74:	f7fd fe6c 	bl	8002c50 <HAL_I2C_GetState>
 8004f78:	2820      	cmp	r0, #32
 8004f7a:	d1fa      	bne.n	8004f72 <init_iqs263+0x2fa>
	        HAL_Delay(42);
 8004f7c:	202a      	movs	r0, #42	; 0x2a
 8004f7e:	f7fb ff71 	bl	8000e64 <HAL_Delay>
	    }
	    while ((data_buffer[0] & 0b00000100) == 0b00000100);
 8004f82:	782b      	ldrb	r3, [r5, #0]
 8004f84:	075b      	lsls	r3, r3, #29
 8004f86:	d4e0      	bmi.n	8004f4a <init_iqs263+0x2d2>

	// read the error bit to determine if ATI error occured
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004f88:	2110      	movs	r1, #16
 8004f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f8e:	f7fc fecd 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004f92:	2801      	cmp	r0, #1
 8004f94:	d0f8      	beq.n	8004f88 <init_iqs263+0x310>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8004f96:	2232      	movs	r2, #50	; 0x32
 8004f98:	2302      	movs	r3, #2
 8004f9a:	480d      	ldr	r0, [pc, #52]	; (8004fd0 <init_iqs263+0x358>)
 8004f9c:	9202      	str	r2, [sp, #8]
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	9500      	str	r5, [sp, #0]
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	2209      	movs	r2, #9
 8004fa6:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004fa8:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8004faa:	f7fd f98b 	bl	80022c4 <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f7fd fe4e 	bl	8002c50 <HAL_I2C_GetState>
 8004fb4:	2820      	cmp	r0, #32
 8004fb6:	d1fa      	bne.n	8004fae <init_iqs263+0x336>
	HAL_Delay(42);
 8004fb8:	202a      	movs	r0, #42	; 0x2a
 8004fba:	f7fb ff53 	bl	8000e64 <HAL_Delay>
	if ( (data_buffer[1] & 0x02) == 0x02){
 8004fbe:	786b      	ldrb	r3, [r5, #1]
		return -1;
	}
	return 1;
 8004fc0:	f013 0f02 	tst.w	r3, #2
}
 8004fc4:	bf14      	ite	ne
 8004fc6:	f04f 30ff 	movne.w	r0, #4294967295
 8004fca:	2001      	moveq	r0, #1
 8004fcc:	b007      	add	sp, #28
 8004fce:	bd30      	pop	{r4, r5, pc}
 8004fd0:	200003a4 	.word	0x200003a4
 8004fd4:	200005bc 	.word	0x200005bc
 8004fd8:	20202008 	.word	0x20202008
 8004fdc:	04140003 	.word	0x04140003
 8004fe0:	494a4951 	.word	0x494a4951

08004fe4 <handleEvents>:

void handleEvents(void){
 8004fe4:	b570      	push	{r4, r5, r6, lr}


		display_set_temp = 0;
 8004fe6:	4e22      	ldr	r6, [pc, #136]	; (8005070 <handleEvents+0x8c>)
 8004fe8:	2300      	movs	r3, #0
void handleEvents(void){
 8004fea:	b084      	sub	sp, #16
		display_set_temp = 0;
 8004fec:	7033      	strb	r3, [r6, #0]
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){};
 8004fee:	2110      	movs	r1, #16
 8004ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff4:	f7fc fe9a 	bl	8001d2c <HAL_GPIO_ReadPin>
 8004ff8:	2801      	cmp	r0, #1
 8004ffa:	d0f8      	beq.n	8004fee <handleEvents+0xa>
		HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, 0x03, I2C_MEMADD_SIZE_8BIT,  &recv_buffer[2], 1,10);
 8004ffc:	230a      	movs	r3, #10
 8004ffe:	2401      	movs	r4, #1
 8005000:	4d1c      	ldr	r5, [pc, #112]	; (8005074 <handleEvents+0x90>)
 8005002:	9302      	str	r3, [sp, #8]
 8005004:	9401      	str	r4, [sp, #4]
 8005006:	4623      	mov	r3, r4
 8005008:	9500      	str	r5, [sp, #0]
 800500a:	2203      	movs	r2, #3
 800500c:	2188      	movs	r1, #136	; 0x88
 800500e:	481a      	ldr	r0, [pc, #104]	; (8005078 <handleEvents+0x94>)
 8005010:	f7fd f958 	bl	80022c4 <HAL_I2C_Mem_Read>

			  // do something

		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 8005014:	782b      	ldrb	r3, [r5, #0]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d00d      	beq.n	8005036 <handleEvents+0x52>
				*set_temp -= 1;
				display_set_temp = 1;
				touch_flag = 1;
			}
		}
		else if(recv_buffer[2]== 0x05 && touch_flag == 0)	// middle position on slider
 800501a:	2b05      	cmp	r3, #5
 800501c:	d005      	beq.n	800502a <handleEvents+0x46>
		{
			display_set_temp = 1;
		}


		else if (recv_buffer[2]== 0x09 && touch_flag == 0)	// right most position on slider
 800501e:	2b09      	cmp	r3, #9
 8005020:	d018      	beq.n	8005054 <handleEvents+0x70>
				display_set_temp = 1;
				touch_flag = 1;
			}
		}
		else{
			display_set_temp = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	7033      	strb	r3, [r6, #0]
		}
}
 8005026:	b004      	add	sp, #16
 8005028:	bd70      	pop	{r4, r5, r6, pc}
		else if(recv_buffer[2]== 0x05 && touch_flag == 0)	// middle position on slider
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <handleEvents+0x98>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f7      	bne.n	8005022 <handleEvents+0x3e>
			display_set_temp = 1;
 8005032:	7034      	strb	r4, [r6, #0]
 8005034:	e7f7      	b.n	8005026 <handleEvents+0x42>
		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <handleEvents+0x98>)
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	2a00      	cmp	r2, #0
 800503c:	d1f1      	bne.n	8005022 <handleEvents+0x3e>
			if(*set_temp - 1 >= 0 ){
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <handleEvents+0x9c>)
 8005040:	6811      	ldr	r1, [r2, #0]
 8005042:	780a      	ldrb	r2, [r1, #0]
 8005044:	2a00      	cmp	r2, #0
 8005046:	d0ee      	beq.n	8005026 <handleEvents+0x42>
				*set_temp -= 1;
 8005048:	3a01      	subs	r2, #1
 800504a:	700a      	strb	r2, [r1, #0]
				display_set_temp = 1;
 800504c:	7034      	strb	r4, [r6, #0]
				touch_flag = 1;
 800504e:	701c      	strb	r4, [r3, #0]
}
 8005050:	b004      	add	sp, #16
 8005052:	bd70      	pop	{r4, r5, r6, pc}
		else if (recv_buffer[2]== 0x09 && touch_flag == 0)	// right most position on slider
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <handleEvents+0x98>)
 8005056:	781a      	ldrb	r2, [r3, #0]
 8005058:	2a00      	cmp	r2, #0
 800505a:	d1e2      	bne.n	8005022 <handleEvents+0x3e>
			if(*set_temp +1 <= 100){
 800505c:	4a08      	ldr	r2, [pc, #32]	; (8005080 <handleEvents+0x9c>)
 800505e:	6811      	ldr	r1, [r2, #0]
 8005060:	780a      	ldrb	r2, [r1, #0]
 8005062:	2a63      	cmp	r2, #99	; 0x63
 8005064:	dcdf      	bgt.n	8005026 <handleEvents+0x42>
				*set_temp += 1;
 8005066:	3201      	adds	r2, #1
 8005068:	700a      	strb	r2, [r1, #0]
				display_set_temp = 1;
 800506a:	7034      	strb	r4, [r6, #0]
				touch_flag = 1;
 800506c:	701c      	strb	r4, [r3, #0]
 800506e:	e7da      	b.n	8005026 <handleEvents+0x42>
 8005070:	20000288 	.word	0x20000288
 8005074:	200005aa 	.word	0x200005aa
 8005078:	200003a4 	.word	0x200003a4
 800507c:	20000048 	.word	0x20000048
 8005080:	200002e4 	.word	0x200002e4

08005084 <init_peripherals>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 8005084:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 8005086:	2201      	movs	r2, #1
 8005088:	2120      	movs	r1, #32
 800508a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800508e:	f7fc fe53 	bl	8001d38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 8005092:	2201      	movs	r2, #1
 8005094:	2180      	movs	r1, #128	; 0x80
 8005096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800509a:	f7fc fe4d 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 800509e:	2201      	movs	r2, #1
 80050a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050a8:	f7fc fe46 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80050ac:	2201      	movs	r2, #1
 80050ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b6:	f7fc fe3f 	bl	8001d38 <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80050ba:	4c8e      	ldr	r4, [pc, #568]	; (80052f4 <init_peripherals+0x270>)
 80050bc:	2201      	movs	r2, #1
 80050be:	2108      	movs	r1, #8
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7fc fe39 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80050c6:	2201      	movs	r2, #1
 80050c8:	2110      	movs	r1, #16
 80050ca:	4620      	mov	r0, r4
 80050cc:	f7fc fe34 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80050d0:	2201      	movs	r2, #1
 80050d2:	2120      	movs	r1, #32
 80050d4:	4620      	mov	r0, r4
 80050d6:	f7fc fe2f 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 80050da:	2201      	movs	r2, #1
 80050dc:	2140      	movs	r1, #64	; 0x40
 80050de:	4620      	mov	r0, r4
 80050e0:	f7fc fe2a 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80050e4:	2201      	movs	r2, #1
 80050e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050ea:	4620      	mov	r0, r4
 80050ec:	f7fc fe24 	bl	8001d38 <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 80050f0:	2201      	movs	r2, #1
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	4880      	ldr	r0, [pc, #512]	; (80052f8 <init_peripherals+0x274>)
 80050f6:	f7fc fe1f 	bl	8001d38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 80050fa:	2200      	movs	r2, #0
 80050fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005100:	4620      	mov	r0, r4
 8005102:	f7fc fe19 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8005106:	2201      	movs	r2, #1
 8005108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800510c:	4620      	mov	r0, r4
 800510e:	f7fc fe13 	bl	8001d38 <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 8005112:	200f      	movs	r0, #15
 8005114:	f001 fd54 	bl	8006bc0 <malloc>
 8005118:	4b78      	ldr	r3, [pc, #480]	; (80052fc <init_peripherals+0x278>)
 800511a:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 800511c:	2400      	movs	r4, #0
 800511e:	6004      	str	r4, [r0, #0]
 8005120:	6044      	str	r4, [r0, #4]
 8005122:	6084      	str	r4, [r0, #8]
 8005124:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8005128:	2032      	movs	r0, #50	; 0x32
 800512a:	f001 fd49 	bl	8006bc0 <malloc>
 800512e:	4b74      	ldr	r3, [pc, #464]	; (8005300 <init_peripherals+0x27c>)
 8005130:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 8005132:	2232      	movs	r2, #50	; 0x32
 8005134:	4621      	mov	r1, r4
 8005136:	f001 fd56 	bl	8006be6 <memset>

	uart_command = (uint8_t*)malloc(60);
 800513a:	203c      	movs	r0, #60	; 0x3c
 800513c:	f001 fd40 	bl	8006bc0 <malloc>
 8005140:	4e70      	ldr	r6, [pc, #448]	; (8005304 <init_peripherals+0x280>)
 8005142:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 8005144:	253c      	movs	r5, #60	; 0x3c
 8005146:	462a      	mov	r2, r5
 8005148:	4621      	mov	r1, r4
 800514a:	f001 fd4c 	bl	8006be6 <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 800514e:	4628      	mov	r0, r5
 8005150:	f001 fd36 	bl	8006bc0 <malloc>
 8005154:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <init_peripherals+0x284>)
 8005156:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 8005158:	462a      	mov	r2, r5
 800515a:	4621      	mov	r1, r4
 800515c:	6830      	ldr	r0, [r6, #0]
 800515e:	f001 fd42 	bl	8006be6 <memset>



	set_temp = (uint8_t*)malloc(4);
 8005162:	2004      	movs	r0, #4
 8005164:	f001 fd2c 	bl	8006bc0 <malloc>
 8005168:	4b68      	ldr	r3, [pc, #416]	; (800530c <init_peripherals+0x288>)
 800516a:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 800516c:	6004      	str	r4, [r0, #0]
	*set_temp = 0;
 800516e:	7004      	strb	r4, [r0, #0]
//	segment_val =set_temp;
	//	  memset(segment_val, 0x00, 4);
	segment_val = (char*)malloc(4);
 8005170:	2004      	movs	r0, #4
 8005172:	f001 fd25 	bl	8006bc0 <malloc>
 8005176:	4b66      	ldr	r3, [pc, #408]	; (8005310 <init_peripherals+0x28c>)
 8005178:	6018      	str	r0, [r3, #0]
	memset(segment_val, 0x00, 4);
 800517a:	6004      	str	r4, [r0, #0]
//
	temp_val = (char*)malloc(4);
 800517c:	2004      	movs	r0, #4
 800517e:	f001 fd1f 	bl	8006bc0 <malloc>
 8005182:	4b64      	ldr	r3, [pc, #400]	; (8005314 <init_peripherals+0x290>)
 8005184:	6018      	str	r0, [r3, #0]
	memset(temp_val, 0x00, 4);
 8005186:	6004      	str	r4, [r0, #0]

	ADC1_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8005188:	2014      	movs	r0, #20
 800518a:	f001 fd19 	bl	8006bc0 <malloc>
 800518e:	4b62      	ldr	r3, [pc, #392]	; (8005318 <init_peripherals+0x294>)
 8005190:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 5);
 8005192:	6004      	str	r4, [r0, #0]
 8005194:	7104      	strb	r4, [r0, #4]

	ADC2_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8005196:	2014      	movs	r0, #20
 8005198:	f001 fd12 	bl	8006bc0 <malloc>
 800519c:	4b5f      	ldr	r3, [pc, #380]	; (800531c <init_peripherals+0x298>)
 800519e:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 5);
 80051a0:	6004      	str	r4, [r0, #0]
 80051a2:	7104      	strb	r4, [r0, #4]

	voltage_rms =(char*)malloc(3*sizeof(char));
 80051a4:	2003      	movs	r0, #3
 80051a6:	f001 fd0b 	bl	8006bc0 <malloc>
 80051aa:	4b5d      	ldr	r3, [pc, #372]	; (8005320 <init_peripherals+0x29c>)
 80051ac:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 80051ae:	8004      	strh	r4, [r0, #0]
 80051b0:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 80051b2:	2004      	movs	r0, #4
 80051b4:	f001 fd04 	bl	8006bc0 <malloc>
 80051b8:	4b5a      	ldr	r3, [pc, #360]	; (8005324 <init_peripherals+0x2a0>)
 80051ba:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 80051bc:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 80051be:	2014      	movs	r0, #20
 80051c0:	f001 fcfe 	bl	8006bc0 <malloc>
 80051c4:	4a58      	ldr	r2, [pc, #352]	; (8005328 <init_peripherals+0x2a4>)
 80051c6:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 80051c8:	6004      	str	r4, [r0, #0]
 80051ca:	6044      	str	r4, [r0, #4]
 80051cc:	6084      	str	r4, [r0, #8]
 80051ce:	60c4      	str	r4, [r0, #12]
 80051d0:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 80051d2:	4b56      	ldr	r3, [pc, #344]	; (800532c <init_peripherals+0x2a8>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4956      	ldr	r1, [pc, #344]	; (8005330 <init_peripherals+0x2ac>)
 80051d8:	f001 fdca 	bl	8006d70 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80051dc:	2010      	movs	r0, #16
 80051de:	f001 fcef 	bl	8006bc0 <malloc>
 80051e2:	4b54      	ldr	r3, [pc, #336]	; (8005334 <init_peripherals+0x2b0>)
 80051e4:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80051e6:	2010      	movs	r0, #16
 80051e8:	f001 fcea 	bl	8006bc0 <malloc>
 80051ec:	4b52      	ldr	r3, [pc, #328]	; (8005338 <init_peripherals+0x2b4>)
 80051ee:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 80051f0:	2004      	movs	r0, #4
 80051f2:	f001 fce5 	bl	8006bc0 <malloc>
 80051f6:	4b51      	ldr	r3, [pc, #324]	; (800533c <init_peripherals+0x2b8>)
 80051f8:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 80051fa:	2004      	movs	r0, #4
 80051fc:	f001 fce0 	bl	8006bc0 <malloc>
 8005200:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <init_peripherals+0x2bc>)
 8005202:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 8005204:	4a4f      	ldr	r2, [pc, #316]	; (8005344 <init_peripherals+0x2c0>)
 8005206:	4b50      	ldr	r3, [pc, #320]	; (8005348 <init_peripherals+0x2c4>)
 8005208:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 800520a:	4a50      	ldr	r2, [pc, #320]	; (800534c <init_peripherals+0x2c8>)
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <init_peripherals+0x2cc>)
 800520e:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 8005210:	200f      	movs	r0, #15
 8005212:	f001 fcd5 	bl	8006bc0 <malloc>
 8005216:	4e4f      	ldr	r6, [pc, #316]	; (8005354 <init_peripherals+0x2d0>)
 8005218:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 800521a:	6004      	str	r4, [r0, #0]
 800521c:	6044      	str	r4, [r0, #4]
 800521e:	6084      	str	r4, [r0, #8]
 8005220:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 8005224:	200f      	movs	r0, #15
 8005226:	f001 fccb 	bl	8006bc0 <malloc>
 800522a:	4d4b      	ldr	r5, [pc, #300]	; (8005358 <init_peripherals+0x2d4>)
 800522c:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 800522e:	6004      	str	r4, [r0, #0]
 8005230:	6044      	str	r4, [r0, #4]
 8005232:	6084      	str	r4, [r0, #8]
 8005234:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8005238:	200f      	movs	r0, #15
 800523a:	f001 fcc1 	bl	8006bc0 <malloc>
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <init_peripherals+0x2d8>)
 8005240:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 8005242:	6004      	str	r4, [r0, #0]
 8005244:	6044      	str	r4, [r0, #4]
 8005246:	6084      	str	r4, [r0, #8]
 8005248:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 800524c:	4b44      	ldr	r3, [pc, #272]	; (8005360 <init_peripherals+0x2dc>)
 800524e:	6832      	ldr	r2, [r6, #0]
 8005250:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 8005252:	682a      	ldr	r2, [r5, #0]
 8005254:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 8005256:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 8005258:	2014      	movs	r0, #20
 800525a:	f001 fcb1 	bl	8006bc0 <malloc>
 800525e:	4b41      	ldr	r3, [pc, #260]	; (8005364 <init_peripherals+0x2e0>)
 8005260:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 8005262:	6004      	str	r4, [r0, #0]
 8005264:	6044      	str	r4, [r0, #4]
 8005266:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 8005268:	4b3f      	ldr	r3, [pc, #252]	; (8005368 <init_peripherals+0x2e4>)
 800526a:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 800526c:	2018      	movs	r0, #24
 800526e:	f001 fca7 	bl	8006bc0 <malloc>
 8005272:	4e3e      	ldr	r6, [pc, #248]	; (800536c <init_peripherals+0x2e8>)
 8005274:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 8005276:	6004      	str	r4, [r0, #0]
 8005278:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 800527a:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 800527c:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 800527e:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005280:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8005282:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 8005284:	2004      	movs	r0, #4
 8005286:	f001 fc9b 	bl	8006bc0 <malloc>
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <init_peripherals+0x2ec>)
 800528c:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 800528e:	2501      	movs	r5, #1
 8005290:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 8005292:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 8005294:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 8005296:	70c4      	strb	r4, [r0, #3]


//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);

	log_receiced_num = (uint8_t*)malloc(3*sizeof(uint8_t));
 8005298:	2003      	movs	r0, #3
 800529a:	f001 fc91 	bl	8006bc0 <malloc>
 800529e:	4b35      	ldr	r3, [pc, #212]	; (8005374 <init_peripherals+0x2f0>)
 80052a0:	6018      	str	r0, [r3, #0]
	memset(log_receiced_num, 0x00, 3);
 80052a2:	8004      	strh	r4, [r0, #0]
 80052a4:	7084      	strb	r4, [r0, #2]
	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 80052a6:	2046      	movs	r0, #70	; 0x46
 80052a8:	f001 fc8a 	bl	8006bc0 <malloc>
 80052ac:	4b32      	ldr	r3, [pc, #200]	; (8005378 <init_peripherals+0x2f4>)
 80052ae:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 80052b0:	2246      	movs	r2, #70	; 0x46
 80052b2:	4621      	mov	r1, r4
 80052b4:	f001 fc97 	bl	8006be6 <memset>


	new_time = malloc(6*sizeof(uint32_t));
 80052b8:	2018      	movs	r0, #24
 80052ba:	f001 fc81 	bl	8006bc0 <malloc>
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <init_peripherals+0x2f8>)
 80052c0:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 80052c2:	6004      	str	r4, [r0, #0]
 80052c4:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 80052c6:	2003      	movs	r0, #3
 80052c8:	f001 fc7a 	bl	8006bc0 <malloc>
 80052cc:	4b2c      	ldr	r3, [pc, #176]	; (8005380 <init_peripherals+0x2fc>)
 80052ce:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 80052d0:	8004      	strh	r4, [r0, #0]
 80052d2:	7084      	strb	r4, [r0, #2]

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 80052d4:	2004      	movs	r0, #4
 80052d6:	f001 fc73 	bl	8006bc0 <malloc>
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <init_peripherals+0x300>)
 80052dc:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 80052de:	2010      	movs	r0, #16
 80052e0:	f001 fc6e 	bl	8006bc0 <malloc>
 80052e4:	4b28      	ldr	r3, [pc, #160]	; (8005388 <init_peripherals+0x304>)
 80052e6:	6018      	str	r0, [r3, #0]

	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 80052e8:	462a      	mov	r2, r5
 80052ea:	6831      	ldr	r1, [r6, #0]
 80052ec:	4827      	ldr	r0, [pc, #156]	; (800538c <init_peripherals+0x308>)
 80052ee:	f7fe fb23 	bl	8003938 <HAL_RTC_GetTime>
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	48000400 	.word	0x48000400
 80052f8:	48000800 	.word	0x48000800
 80052fc:	200005a0 	.word	0x200005a0
 8005300:	200002d8 	.word	0x200002d8
 8005304:	200002fc 	.word	0x200002fc
 8005308:	20000300 	.word	0x20000300
 800530c:	200002e4 	.word	0x200002e4
 8005310:	200002e0 	.word	0x200002e0
 8005314:	200002f0 	.word	0x200002f0
 8005318:	2000024c 	.word	0x2000024c
 800531c:	20000250 	.word	0x20000250
 8005320:	20000314 	.word	0x20000314
 8005324:	20000280 	.word	0x20000280
 8005328:	200002f8 	.word	0x200002f8
 800532c:	20000318 	.word	0x20000318
 8005330:	08007930 	.word	0x08007930
 8005334:	20000310 	.word	0x20000310
 8005338:	2000027c 	.word	0x2000027c
 800533c:	20000274 	.word	0x20000274
 8005340:	2000029c 	.word	0x2000029c
 8005344:	20000014 	.word	0x20000014
 8005348:	200002b0 	.word	0x200002b0
 800534c:	2000004c 	.word	0x2000004c
 8005350:	20000308 	.word	0x20000308
 8005354:	200002a4 	.word	0x200002a4
 8005358:	200002a8 	.word	0x200002a8
 800535c:	200002ac 	.word	0x200002ac
 8005360:	200005dc 	.word	0x200005dc
 8005364:	200002b4 	.word	0x200002b4
 8005368:	200005b8 	.word	0x200005b8
 800536c:	200002f4 	.word	0x200002f4
 8005370:	20000284 	.word	0x20000284
 8005374:	200002c0 	.word	0x200002c0
 8005378:	20000298 	.word	0x20000298
 800537c:	200002c4 	.word	0x200002c4
 8005380:	200002ec 	.word	0x200002ec
 8005384:	20000290 	.word	0x20000290
 8005388:	200002c8 	.word	0x200002c8
 800538c:	200004a8 	.word	0x200004a8

08005390 <liters_pumped>:
extern ADC_HandleTypeDef hadc2;


void liters_pumped(){

	if(valve_timer == 5){
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <liters_pumped+0x2c>)
 8005392:	781a      	ldrb	r2, [r3, #0]
 8005394:	2a05      	cmp	r2, #5
 8005396:	d000      	beq.n	800539a <liters_pumped+0xa>
 8005398:	4770      	bx	lr
void liters_pumped(){
 800539a:	b4f0      	push	{r4, r5, r6, r7}
		pump_flag = 0;
		valve_timer = 0;
		water_acc+=100;
 800539c:	4e08      	ldr	r6, [pc, #32]	; (80053c0 <liters_pumped+0x30>)
		pump_flag = 0;
 800539e:	4f09      	ldr	r7, [pc, #36]	; (80053c4 <liters_pumped+0x34>)
		water_acc+=100;
 80053a0:	6834      	ldr	r4, [r6, #0]
		sprintf(total_water,"%lu", water_acc);
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <liters_pumped+0x38>)
 80053a4:	4909      	ldr	r1, [pc, #36]	; (80053cc <liters_pumped+0x3c>)
 80053a6:	6810      	ldr	r0, [r2, #0]
		pump_flag = 0;
 80053a8:	2500      	movs	r5, #0
		water_acc+=100;
 80053aa:	3464      	adds	r4, #100	; 0x64
		pump_flag = 0;
 80053ac:	703d      	strb	r5, [r7, #0]
		valve_timer = 0;
 80053ae:	701d      	strb	r5, [r3, #0]
		sprintf(total_water,"%lu", water_acc);
 80053b0:	4622      	mov	r2, r4
		water_acc+=100;
 80053b2:	6034      	str	r4, [r6, #0]

	}
}
 80053b4:	bcf0      	pop	{r4, r5, r6, r7}
		sprintf(total_water,"%lu", water_acc);
 80053b6:	f001 bcdb 	b.w	8006d70 <siprintf>
 80053ba:	bf00      	nop
 80053bc:	2000030c 	.word	0x2000030c
 80053c0:	20000318 	.word	0x20000318
 80053c4:	200002cc 	.word	0x200002cc
 80053c8:	200002f8 	.word	0x200002f8
 80053cc:	08007930 	.word	0x08007930

080053d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	b096      	sub	sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 80053d4:	f7fd fc92 	bl	8002cfc <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80053d8:	4a25      	ldr	r2, [pc, #148]	; (8005470 <SystemClock_Config+0xa0>)
 80053da:	6a13      	ldr	r3, [r2, #32]
 80053dc:	f023 0318 	bic.w	r3, r3, #24
 80053e0:	6213      	str	r3, [r2, #32]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80053e2:	2606      	movs	r6, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80053e4:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80053e6:	2510      	movs	r5, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053e8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80053ea:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80053ec:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053f0:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80053f2:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80053f4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80053f6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80053f8:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053fa:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80053fc:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80053fe:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005400:	f7fd fc84 	bl	8002d0c <HAL_RCC_OscConfig>
 8005404:	b100      	cbz	r0, 8005408 <SystemClock_Config+0x38>
 8005406:	e7fe      	b.n	8005406 <SystemClock_Config+0x36>
 8005408:	4603      	mov	r3, r0
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800540a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800540e:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005410:	4621      	mov	r1, r4
 8005412:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005414:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005416:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005418:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800541a:	9500      	str	r5, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800541c:	9203      	str	r2, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800541e:	f7fd ff43 	bl	80032a8 <HAL_RCC_ClockConfig>
 8005422:	4603      	mov	r3, r0
 8005424:	b100      	cbz	r0, 8005428 <SystemClock_Config+0x58>
 8005426:	e7fe      	b.n	8005426 <SystemClock_Config+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005428:	4d12      	ldr	r5, [pc, #72]	; (8005474 <SystemClock_Config+0xa4>)
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800542a:	9007      	str	r0, [sp, #28]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 800542c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005430:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005434:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005436:	9505      	str	r5, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005438:	9308      	str	r3, [sp, #32]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 800543a:	9109      	str	r1, [sp, #36]	; 0x24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800543c:	9206      	str	r2, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800543e:	f7fe f88f 	bl	8003560 <HAL_RCCEx_PeriphCLKConfig>
 8005442:	4605      	mov	r5, r0
 8005444:	b100      	cbz	r0, 8005448 <SystemClock_Config+0x78>
 8005446:	e7fe      	b.n	8005446 <SystemClock_Config+0x76>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005448:	f7fe f854 	bl	80034f4 <HAL_RCC_GetHCLKFreq>
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <SystemClock_Config+0xa8>)
 800544e:	fba3 3000 	umull	r3, r0, r3, r0
 8005452:	0980      	lsrs	r0, r0, #6
 8005454:	f7fc f982 	bl	800175c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005458:	2004      	movs	r0, #4
 800545a:	f7fc f999 	bl	8001790 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 800545e:	4622      	mov	r2, r4
 8005460:	4629      	mov	r1, r5
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
 8005466:	f7fc f937 	bl	80016d8 <HAL_NVIC_SetPriority>
}
 800546a:	b016      	add	sp, #88	; 0x58
 800546c:	bd70      	pop	{r4, r5, r6, pc}
 800546e:	bf00      	nop
 8005470:	40021000 	.word	0x40021000
 8005474:	000100a1 	.word	0x000100a1
 8005478:	10624dd3 	.word	0x10624dd3

0800547c <main>:
{
 800547c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005480:	4e9e      	ldr	r6, [pc, #632]	; (80056fc <main+0x280>)
{
 8005482:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8005484:	f7fb fcce 	bl	8000e24 <HAL_Init>
  SystemClock_Config();
 8005488:	f7ff ffa2 	bl	80053d0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800548c:	6973      	ldr	r3, [r6, #20]
 800548e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005492:	6173      	str	r3, [r6, #20]
 8005494:	6973      	ldr	r3, [r6, #20]
 8005496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800549a:	9302      	str	r3, [sp, #8]
 800549c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800549e:	6973      	ldr	r3, [r6, #20]
 80054a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054a4:	6173      	str	r3, [r6, #20]
 80054a6:	6973      	ldr	r3, [r6, #20]
 80054a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b0:	6973      	ldr	r3, [r6, #20]
 80054b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b6:	6173      	str	r3, [r6, #20]
 80054b8:	6973      	ldr	r3, [r6, #20]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054c2:	6973      	ldr	r3, [r6, #20]
 80054c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c8:	6173      	str	r3, [r6, #20]
 80054ca:	6973      	ldr	r3, [r6, #20]
 80054cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054d0:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 80054d2:	2201      	movs	r2, #1
 80054d4:	2112      	movs	r1, #18
 80054d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054da:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 80054dc:	f7fc fc2c 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80054e0:	2200      	movs	r2, #0
 80054e2:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80054e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ea:	f7fc fc25 	bl	8001d38 <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80054ee:	2200      	movs	r2, #0
 80054f0:	f246 4178 	movw	r1, #25720	; 0x6478
 80054f4:	4882      	ldr	r0, [pc, #520]	; (8005700 <main+0x284>)
 80054f6:	f7fc fc1f 	bl	8001d38 <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80054fa:	2200      	movs	r2, #0
 80054fc:	2180      	movs	r1, #128	; 0x80
 80054fe:	4881      	ldr	r0, [pc, #516]	; (8005704 <main+0x288>)

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005500:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8005502:	f7fc fc19 	bl	8001d38 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005506:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800550a:	4b7f      	ldr	r3, [pc, #508]	; (8005708 <main+0x28c>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800550c:	487d      	ldr	r0, [pc, #500]	; (8005704 <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800550e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005510:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005512:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	9408      	str	r4, [sp, #32]

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8005518:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800551c:	f7fc fb1c 	bl	8001b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005520:	a906      	add	r1, sp, #24
 8005522:	4878      	ldr	r0, [pc, #480]	; (8005704 <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005524:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8005526:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005528:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800552c:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005530:	f7fc fb12 	bl	8001b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005534:	4b75      	ldr	r3, [pc, #468]	; (800570c <main+0x290>)
 8005536:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8005538:	a906      	add	r1, sp, #24
 800553a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 800553e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005540:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8005542:	f7fc fb09 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 8005546:	2212      	movs	r2, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005548:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554a:	a906      	add	r1, sp, #24
 800554c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 8005550:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005552:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005554:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005556:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005558:	f7fc fafe 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 800555c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005560:	a906      	add	r1, sp, #24
 8005562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8005566:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005568:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800556c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800556e:	f7fc faf3 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005572:	a906      	add	r1, sp, #24
 8005574:	4862      	ldr	r0, [pc, #392]	; (8005700 <main+0x284>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005576:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005578:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557c:	f7fc faec 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8005580:	f246 4378 	movw	r3, #25720	; 0x6478
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005584:	a906      	add	r1, sp, #24
 8005586:	485e      	ldr	r0, [pc, #376]	; (8005700 <main+0x284>)
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8005588:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800558a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005590:	f7fc fae2 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIGGER_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIGGER_Pin;
 8005594:	2240      	movs	r2, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005596:	4b5e      	ldr	r3, [pc, #376]	; (8005710 <main+0x294>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(FLOW_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8005598:	485a      	ldr	r0, [pc, #360]	; (8005704 <main+0x288>)
  GPIO_InitStruct.Pin = FLOW_TRIGGER_Pin;
 800559a:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init(FLOW_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800559c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800559e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80055a0:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(FLOW_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80055a2:	f7fc fad9 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 80055a6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 80055a8:	a906      	add	r1, sp, #24
 80055aa:	4856      	ldr	r0, [pc, #344]	; (8005704 <main+0x288>)
  GPIO_InitStruct.Pin = SEG_5_Pin;
 80055ac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ae:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 80055b4:	f7fc fad0 	bl	8001b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80055b8:	4622      	mov	r2, r4
 80055ba:	4621      	mov	r1, r4
 80055bc:	2006      	movs	r0, #6
 80055be:	f7fc f88b 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80055c2:	2006      	movs	r0, #6
 80055c4:	f7fc f8be 	bl	8001744 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 80055c8:	462a      	mov	r2, r5
 80055ca:	4621      	mov	r1, r4
 80055cc:	2017      	movs	r0, #23
 80055ce:	f7fc f883 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80055d2:	2017      	movs	r0, #23
 80055d4:	f7fc f8b6 	bl	8001744 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80055d8:	6973      	ldr	r3, [r6, #20]
 80055da:	432b      	orrs	r3, r5
 80055dc:	6173      	str	r3, [r6, #20]
 80055de:	6973      	ldr	r3, [r6, #20]
 80055e0:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 80055e2:	462a      	mov	r2, r5
 80055e4:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80055e6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 80055e8:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80055ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 80055ec:	f7fc f874 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80055f0:	200c      	movs	r0, #12
 80055f2:	f7fc f8a7 	bl	8001744 <HAL_NVIC_EnableIRQ>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f6:	4a47      	ldr	r2, [pc, #284]	; (8005714 <main+0x298>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f8:	4947      	ldr	r1, [pc, #284]	; (8005718 <main+0x29c>)
  huart1.Instance = USART1;
 80055fa:	4b48      	ldr	r3, [pc, #288]	; (800571c <main+0x2a0>)
 80055fc:	68c8      	ldr	r0, [r1, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055fe:	f882 430d 	strb.w	r4, [r2, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005602:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005606:	f8c2 9000 	str.w	r9, [r2]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800560a:	68c9      	ldr	r1, [r1, #12]
 800560c:	f8df e120 	ldr.w	lr, [pc, #288]	; 8005730 <main+0x2b4>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005610:	f882 430e 	strb.w	r4, [r2, #782]	; 0x30e
  huart1.Init.BaudRate = 115200;
 8005614:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005618:	6010      	str	r0, [r2, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800561a:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800561c:	4618      	mov	r0, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800561e:	609c      	str	r4, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005620:	60dc      	str	r4, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005622:	611c      	str	r4, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005624:	619c      	str	r4, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005626:	61dc      	str	r4, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005628:	621c      	str	r4, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800562a:	625c      	str	r4, [r3, #36]	; 0x24
  huart1.Instance = USART1;
 800562c:	f8c3 e000 	str.w	lr, [r3]
  huart1.Init.BaudRate = 115200;
 8005630:	6059      	str	r1, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005632:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005634:	f7fe fd58 	bl	80040e8 <HAL_UART_Init>
 8005638:	b100      	cbz	r0, 800563c <main+0x1c0>
 800563a:	e7fe      	b.n	800563a <main+0x1be>
  hadc2.Instance = ADC2;
 800563c:	4c38      	ldr	r4, [pc, #224]	; (8005720 <main+0x2a4>)
 800563e:	4a39      	ldr	r2, [pc, #228]	; (8005724 <main+0x2a8>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005640:	6060      	str	r0, [r4, #4]
 8005642:	4603      	mov	r3, r0
  hadc2.Init.NbrOfConversion = 4;
 8005644:	f04f 0904 	mov.w	r9, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005648:	4620      	mov	r0, r4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800564a:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800564c:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800564e:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005650:	6263      	str	r3, [r4, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005652:	6323      	str	r3, [r4, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005654:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005656:	60e3      	str	r3, [r4, #12]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005658:	6365      	str	r5, [r4, #52]	; 0x34
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800565a:	61a3      	str	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800565c:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc2.Instance = ADC2;
 800565e:	6022      	str	r2, [r4, #0]
  hadc2.Init.NbrOfConversion = 4;
 8005660:	f8c4 9020 	str.w	r9, [r4, #32]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005664:	f8c4 9014 	str.w	r9, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005668:	f7fb fc44 	bl	8000ef4 <HAL_ADC_Init>
 800566c:	b100      	cbz	r0, 8005670 <main+0x1f4>
 800566e:	e7fe      	b.n	800566e <main+0x1f2>
  sConfig.Channel = ADC_CHANNEL_8;
 8005670:	2208      	movs	r2, #8
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8005672:	2307      	movs	r3, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005674:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005676:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 8005678:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800567a:	a906      	add	r1, sp, #24
 800567c:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800567e:	9507      	str	r5, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_8;
 8005680:	9206      	str	r2, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8005682:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005684:	f7fb fe84 	bl	8001390 <HAL_ADC_ConfigChannel>
 8005688:	b100      	cbz	r0, 800568c <main+0x210>
 800568a:	e7fe      	b.n	800568a <main+0x20e>
  sConfig.Channel = ADC_CHANNEL_9;
 800568c:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800568e:	a906      	add	r1, sp, #24
 8005690:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005692:	9707      	str	r7, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_9;
 8005694:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005696:	f7fb fe7b 	bl	8001390 <HAL_ADC_ConfigChannel>
 800569a:	b100      	cbz	r0, 800569e <main+0x222>
 800569c:	e7fe      	b.n	800569c <main+0x220>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800569e:	a906      	add	r1, sp, #24
 80056a0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_12;
 80056a2:	9606      	str	r6, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80056a4:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80056a8:	f7fb fe72 	bl	8001390 <HAL_ADC_ConfigChannel>
 80056ac:	b100      	cbz	r0, 80056b0 <main+0x234>
 80056ae:	e7fe      	b.n	80056ae <main+0x232>
  sConfig.Channel = ADC_CHANNEL_13;
 80056b0:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80056b2:	4620      	mov	r0, r4
 80056b4:	a906      	add	r1, sp, #24
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80056b6:	f8cd 901c 	str.w	r9, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_13;
 80056ba:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80056bc:	f7fb fe68 	bl	8001390 <HAL_ADC_ConfigChannel>
 80056c0:	4606      	mov	r6, r0
 80056c2:	b100      	cbz	r0, 80056c6 <main+0x24a>
 80056c4:	e7fe      	b.n	80056c4 <main+0x248>
  hrtc.Instance = RTC;
 80056c6:	4c18      	ldr	r4, [pc, #96]	; (8005728 <main+0x2ac>)
 80056c8:	4b18      	ldr	r3, [pc, #96]	; (800572c <main+0x2b0>)
 80056ca:	6023      	str	r3, [r4, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80056cc:	4620      	mov	r0, r4
 80056ce:	4631      	mov	r1, r6
 80056d0:	f7fe fae8 	bl	8003ca4 <HAL_RTCEx_BKUPRead>
 80056d4:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80056d8:	4298      	cmp	r0, r3
 80056da:	d030      	beq.n	800573e <main+0x2c2>
  hrtc.Init.SynchPrediv = 255;
 80056dc:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.AsynchPrediv = 127;
 80056de:	227f      	movs	r2, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80056e0:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 80056e2:	60e3      	str	r3, [r4, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80056e4:	6066      	str	r6, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80056e6:	6126      	str	r6, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80056e8:	6166      	str	r6, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80056ea:	61a6      	str	r6, [r4, #24]
  hrtc.Init.AsynchPrediv = 127;
 80056ec:	60a2      	str	r2, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80056ee:	f7fd fff9 	bl	80036e4 <HAL_RTC_Init>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d037      	beq.n	8005768 <main+0x2ec>
 80056f8:	e7fe      	b.n	80056f8 <main+0x27c>
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	48000400 	.word	0x48000400
 8005704:	48000800 	.word	0x48000800
 8005708:	10110000 	.word	0x10110000
 800570c:	10210000 	.word	0x10210000
 8005710:	10310000 	.word	0x10310000
 8005714:	e000e100 	.word	0xe000e100
 8005718:	e000ed00 	.word	0xe000ed00
 800571c:	20000438 	.word	0x20000438
 8005720:	20000350 	.word	0x20000350
 8005724:	50000100 	.word	0x50000100
 8005728:	200004a8 	.word	0x200004a8
 800572c:	40002800 	.word	0x40002800
 8005730:	40013800 	.word	0x40013800
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8005734:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005738:	4838      	ldr	r0, [pc, #224]	; (800581c <main+0x3a0>)
 800573a:	f7fe faad 	bl	8003c98 <HAL_RTCEx_BKUPWrite>
  hi2c1.Instance = I2C1;
 800573e:	4c38      	ldr	r4, [pc, #224]	; (8005820 <main+0x3a4>)
 8005740:	4b38      	ldr	r3, [pc, #224]	; (8005824 <main+0x3a8>)
 8005742:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8005744:	f240 220b 	movw	r2, #523	; 0x20b
  hi2c1.Init.OwnAddress1 = 0;
 8005748:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800574a:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800574c:	2501      	movs	r5, #1
  hi2c1.Init.Timing = 0x0000020B;
 800574e:	6062      	str	r2, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005750:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005752:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005754:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005756:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005758:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800575a:	6223      	str	r3, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800575c:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800575e:	f7fc fc75 	bl	800204c <HAL_I2C_Init>
 8005762:	4601      	mov	r1, r0
 8005764:	b178      	cbz	r0, 8005786 <main+0x30a>
 8005766:	e7fe      	b.n	8005766 <main+0x2ea>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005768:	a906      	add	r1, sp, #24
 800576a:	462a      	mov	r2, r5
 800576c:	4620      	mov	r0, r4
  sTime.Hours = 0x0;
 800576e:	f88d 3018 	strb.w	r3, [sp, #24]
  sTime.Minutes = 0x0;
 8005772:	f88d 3019 	strb.w	r3, [sp, #25]
  sTime.Seconds = 0x0;
 8005776:	f88d 301a 	strb.w	r3, [sp, #26]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800577a:	9309      	str	r3, [sp, #36]	; 0x24
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800577c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800577e:	f7fe f81d 	bl	80037bc <HAL_RTC_SetTime>
 8005782:	b130      	cbz	r0, 8005792 <main+0x316>
 8005784:	e7fe      	b.n	8005784 <main+0x308>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005786:	4620      	mov	r0, r4
 8005788:	f7fd fa66 	bl	8002c58 <HAL_I2CEx_ConfigAnalogFilter>
 800578c:	4601      	mov	r1, r0
 800578e:	b150      	cbz	r0, 80057a6 <main+0x32a>
 8005790:	e7fe      	b.n	8005790 <main+0x314>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005792:	a90c      	add	r1, sp, #48	; 0x30
 8005794:	4b24      	ldr	r3, [pc, #144]	; (8005828 <main+0x3ac>)
 8005796:	f841 3d30 	str.w	r3, [r1, #-48]!
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800579a:	462a      	mov	r2, r5
 800579c:	4620      	mov	r0, r4
 800579e:	f7fe f901 	bl	80039a4 <HAL_RTC_SetDate>
 80057a2:	b130      	cbz	r0, 80057b2 <main+0x336>
 80057a4:	e7fe      	b.n	80057a4 <main+0x328>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7fd fa80 	bl	8002cac <HAL_I2CEx_ConfigDigitalFilter>
 80057ac:	4604      	mov	r4, r0
 80057ae:	b150      	cbz	r0, 80057c6 <main+0x34a>
 80057b0:	e7fe      	b.n	80057b0 <main+0x334>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80057b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057b6:	2200      	movs	r2, #0
 80057b8:	4818      	ldr	r0, [pc, #96]	; (800581c <main+0x3a0>)
 80057ba:	f7fe f9df 	bl	8003b7c <HAL_RTCEx_SetWakeUpTimer_IT>
 80057be:	4601      	mov	r1, r0
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d0b7      	beq.n	8005734 <main+0x2b8>
 80057c4:	e7fe      	b.n	80057c4 <main+0x348>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80057c6:	4601      	mov	r1, r0
 80057c8:	4818      	ldr	r0, [pc, #96]	; (800582c <main+0x3b0>)
 80057ca:	f7fb fd6b 	bl	80012a4 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 80057ce:	f7ff fc59 	bl	8005084 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80057d2:	462a      	mov	r2, r5
 80057d4:	4916      	ldr	r1, [pc, #88]	; (8005830 <main+0x3b4>)
 80057d6:	4817      	ldr	r0, [pc, #92]	; (8005834 <main+0x3b8>)
 80057d8:	f7fe fa8e 	bl	8003cf8 <HAL_UART_Receive_IT>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 4);
 80057dc:	4b16      	ldr	r3, [pc, #88]	; (8005838 <main+0x3bc>)
 80057de:	4813      	ldr	r0, [pc, #76]	; (800582c <main+0x3b0>)
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	2204      	movs	r2, #4
 80057e4:	f7fb fcb8 	bl	8001158 <HAL_ADC_Start_DMA>
 	 HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80057e8:	4b14      	ldr	r3, [pc, #80]	; (800583c <main+0x3c0>)
 80057ea:	480c      	ldr	r0, [pc, #48]	; (800581c <main+0x3a0>)
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	4622      	mov	r2, r4
 80057f0:	f7fe f8a2 	bl	8003938 <HAL_RTC_GetTime>
 	 HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <main+0x3c4>)
 80057f6:	4809      	ldr	r0, [pc, #36]	; (800581c <main+0x3a0>)
 80057f8:	6819      	ldr	r1, [r3, #0]
 80057fa:	4622      	mov	r2, r4
 80057fc:	f7fe f974 	bl	8003ae8 <HAL_RTC_GetDate>
  int i2c_state = init_iqs263();
 8005800:	f7ff fa3a 	bl	8004c78 <init_iqs263>
 8005804:	4604      	mov	r4, r0
  logPosition();
 8005806:	f7ff f8f5 	bl	80049f4 <logPosition>
  while (i2c_state)
 800580a:	b114      	cbz	r4, 8005812 <main+0x396>
	  mainLoop();
 800580c:	f001 f8e8 	bl	80069e0 <mainLoop>
 8005810:	e7fb      	b.n	800580a <main+0x38e>
}
 8005812:	4620      	mov	r0, r4
 8005814:	b00d      	add	sp, #52	; 0x34
 8005816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800581a:	bf00      	nop
 800581c:	200004a8 	.word	0x200004a8
 8005820:	200003a4 	.word	0x200003a4
 8005824:	40005400 	.word	0x40005400
 8005828:	00010101 	.word	0x00010101
 800582c:	20000350 	.word	0x20000350
 8005830:	200005a4 	.word	0x200005a4
 8005834:	20000438 	.word	0x20000438
 8005838:	2000024c 	.word	0x2000024c
 800583c:	200002f4 	.word	0x200002f4
 8005840:	20000284 	.word	0x20000284

08005844 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005844:	e7fe      	b.n	8005844 <_Error_Handler>
 8005846:	bf00      	nop

08005848 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8005848:	b570      	push	{r4, r5, r6, lr}
	if(display_set_temp){
 800584a:	4b3a      	ldr	r3, [pc, #232]	; (8005934 <seven_segment+0xec>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	b18b      	cbz	r3, 8005874 <seven_segment+0x2c>
		sprintf(segment_val, "%d", *set_temp);
 8005850:	4b39      	ldr	r3, [pc, #228]	; (8005938 <seven_segment+0xf0>)
 8005852:	4e3a      	ldr	r6, [pc, #232]	; (800593c <seven_segment+0xf4>)
 8005854:	681b      	ldr	r3, [r3, #0]
	}
	else {
		sprintf(segment_val, "%lu", raw_geyser_temp);
	}

	if(segment_counter == 0){	// Left Most Digit
 8005856:	4d3a      	ldr	r5, [pc, #232]	; (8005940 <seven_segment+0xf8>)
		sprintf(segment_val, "%d", *set_temp);
 8005858:	6830      	ldr	r0, [r6, #0]
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	4939      	ldr	r1, [pc, #228]	; (8005944 <seven_segment+0xfc>)
 800585e:	f001 fa87 	bl	8006d70 <siprintf>
	if(segment_counter == 0){	// Left Most Digit
 8005862:	782c      	ldrb	r4, [r5, #0]
 8005864:	b18c      	cbz	r4, 800588a <seven_segment+0x42>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8005866:	2c01      	cmp	r4, #1
 8005868:	d04e      	beq.n	8005908 <seven_segment+0xc0>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 800586a:	2c02      	cmp	r4, #2
 800586c:	d054      	beq.n	8005918 <seven_segment+0xd0>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 800586e:	2c03      	cmp	r4, #3
 8005870:	d02b      	beq.n	80058ca <seven_segment+0x82>
 8005872:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(segment_val, "%lu", raw_geyser_temp);
 8005874:	4b34      	ldr	r3, [pc, #208]	; (8005948 <seven_segment+0x100>)
 8005876:	4e31      	ldr	r6, [pc, #196]	; (800593c <seven_segment+0xf4>)
	if(segment_counter == 0){	// Left Most Digit
 8005878:	4d31      	ldr	r5, [pc, #196]	; (8005940 <seven_segment+0xf8>)
		sprintf(segment_val, "%lu", raw_geyser_temp);
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	6830      	ldr	r0, [r6, #0]
 800587e:	4933      	ldr	r1, [pc, #204]	; (800594c <seven_segment+0x104>)
 8005880:	f001 fa76 	bl	8006d70 <siprintf>
	if(segment_counter == 0){	// Left Most Digit
 8005884:	782c      	ldrb	r4, [r5, #0]
 8005886:	2c00      	cmp	r4, #0
 8005888:	d1ed      	bne.n	8005866 <seven_segment+0x1e>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 800588a:	4622      	mov	r2, r4
 800588c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005890:	482f      	ldr	r0, [pc, #188]	; (8005950 <seven_segment+0x108>)
 8005892:	f7fc fa51 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8005896:	2201      	movs	r2, #1
 8005898:	2110      	movs	r1, #16
 800589a:	482d      	ldr	r0, [pc, #180]	; (8005950 <seven_segment+0x108>)
 800589c:	f7fc fa4c 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80058a0:	2201      	movs	r2, #1
 80058a2:	2120      	movs	r1, #32
 80058a4:	482a      	ldr	r0, [pc, #168]	; (8005950 <seven_segment+0x108>)
 80058a6:	f7fc fa47 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80058aa:	2201      	movs	r2, #1
 80058ac:	2108      	movs	r1, #8
 80058ae:	4828      	ldr	r0, [pc, #160]	; (8005950 <seven_segment+0x108>)
 80058b0:	f7fc fa42 	bl	8001d38 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 80058b4:	782b      	ldrb	r3, [r5, #0]
 80058b6:	6832      	ldr	r2, [r6, #0]
 80058b8:	5cd0      	ldrb	r0, [r2, r3]
 80058ba:	3830      	subs	r0, #48	; 0x30
 80058bc:	b2c0      	uxtb	r0, r0
 80058be:	f000 f849 	bl	8005954 <seven_segment_display>
		segment_counter += 1;
 80058c2:	782b      	ldrb	r3, [r5, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	702b      	strb	r3, [r5, #0]
 80058c8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80058ca:	2201      	movs	r2, #1
 80058cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058d0:	481f      	ldr	r0, [pc, #124]	; (8005950 <seven_segment+0x108>)
 80058d2:	f7fc fa31 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80058d6:	2201      	movs	r2, #1
 80058d8:	2110      	movs	r1, #16
 80058da:	481d      	ldr	r0, [pc, #116]	; (8005950 <seven_segment+0x108>)
 80058dc:	f7fc fa2c 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80058e0:	2201      	movs	r2, #1
 80058e2:	2120      	movs	r1, #32
 80058e4:	481a      	ldr	r0, [pc, #104]	; (8005950 <seven_segment+0x108>)
 80058e6:	f7fc fa27 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 80058ea:	2200      	movs	r2, #0
 80058ec:	2108      	movs	r1, #8
 80058ee:	4818      	ldr	r0, [pc, #96]	; (8005950 <seven_segment+0x108>)
 80058f0:	f7fc fa22 	bl	8001d38 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 80058f4:	782b      	ldrb	r3, [r5, #0]
 80058f6:	6832      	ldr	r2, [r6, #0]
 80058f8:	5cd0      	ldrb	r0, [r2, r3]
 80058fa:	3830      	subs	r0, #48	; 0x30
 80058fc:	b2c0      	uxtb	r0, r0
 80058fe:	f000 f829 	bl	8005954 <seven_segment_display>
		segment_counter = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	702b      	strb	r3, [r5, #0]
 8005906:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005908:	4622      	mov	r2, r4
 800590a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800590e:	4810      	ldr	r0, [pc, #64]	; (8005950 <seven_segment+0x108>)
 8005910:	f7fc fa12 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8005914:	2200      	movs	r2, #0
 8005916:	e7bf      	b.n	8005898 <seven_segment+0x50>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005918:	2201      	movs	r2, #1
 800591a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800591e:	480c      	ldr	r0, [pc, #48]	; (8005950 <seven_segment+0x108>)
 8005920:	f7fc fa0a 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8005924:	2201      	movs	r2, #1
 8005926:	2110      	movs	r1, #16
 8005928:	4809      	ldr	r0, [pc, #36]	; (8005950 <seven_segment+0x108>)
 800592a:	f7fc fa05 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 800592e:	2200      	movs	r2, #0
 8005930:	e7b7      	b.n	80058a2 <seven_segment+0x5a>
 8005932:	bf00      	nop
 8005934:	20000288 	.word	0x20000288
 8005938:	200002e4 	.word	0x200002e4
 800593c:	200002e0 	.word	0x200002e0
 8005940:	200002de 	.word	0x200002de
 8005944:	08007934 	.word	0x08007934
 8005948:	200002d4 	.word	0x200002d4
 800594c:	08007930 	.word	0x08007930
 8005950:	48000400 	.word	0x48000400

08005954 <seven_segment_display>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8005954:	b508      	push	{r3, lr}
	switch(num){
 8005956:	2809      	cmp	r0, #9
 8005958:	f200 81bf 	bhi.w	8005cda <seven_segment_display+0x386>
 800595c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005960:	006c003b 	.word	0x006c003b
 8005964:	00c40098 	.word	0x00c40098
 8005968:	011200e8 	.word	0x011200e8
 800596c:	016a013e 	.word	0x016a013e
 8005970:	000a018c 	.word	0x000a018c
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
		break;
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005974:	2200      	movs	r2, #0
 8005976:	2120      	movs	r1, #32
 8005978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800597c:	f7fc f9dc 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005980:	2200      	movs	r2, #0
 8005982:	2140      	movs	r1, #64	; 0x40
 8005984:	48e9      	ldr	r0, [pc, #932]	; (8005d2c <seven_segment_display+0x3d8>)
 8005986:	f7fc f9d7 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800598a:	2200      	movs	r2, #0
 800598c:	2180      	movs	r1, #128	; 0x80
 800598e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005992:	f7fc f9d1 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005996:	2200      	movs	r2, #0
 8005998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800599c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059a0:	f7fc f9ca 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ae:	f7fc f9c3 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80059b2:	2200      	movs	r2, #0
 80059b4:	2140      	movs	r1, #64	; 0x40
 80059b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ba:	f7fc f9bd 	bl	8001d38 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80059be:	48dc      	ldr	r0, [pc, #880]	; (8005d30 <seven_segment_display+0x3dc>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80059c4:	f7fc f9b8 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80059c8:	2201      	movs	r2, #1
 80059ca:	2140      	movs	r1, #64	; 0x40
 80059cc:	48d7      	ldr	r0, [pc, #860]	; (8005d2c <seven_segment_display+0x3d8>)

	}



}
 80059ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80059d2:	f7fc b9b1 	b.w	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80059d6:	2200      	movs	r2, #0
 80059d8:	2140      	movs	r1, #64	; 0x40
 80059da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059de:	f7fc f9ab 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80059e2:	2200      	movs	r2, #0
 80059e4:	2120      	movs	r1, #32
 80059e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ea:	f7fc f9a5 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80059ee:	2200      	movs	r2, #0
 80059f0:	2140      	movs	r1, #64	; 0x40
 80059f2:	48ce      	ldr	r0, [pc, #824]	; (8005d2c <seven_segment_display+0x3d8>)
 80059f4:	f7fc f9a0 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80059f8:	2200      	movs	r2, #0
 80059fa:	2180      	movs	r1, #128	; 0x80
 80059fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a00:	f7fc f99a 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005a04:	2200      	movs	r2, #0
 8005a06:	2140      	movs	r1, #64	; 0x40
 8005a08:	48c8      	ldr	r0, [pc, #800]	; (8005d2c <seven_segment_display+0x3d8>)
 8005a0a:	f7fc f995 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2180      	movs	r1, #128	; 0x80
 8005a12:	48c7      	ldr	r0, [pc, #796]	; (8005d30 <seven_segment_display+0x3dc>)
 8005a14:	f7fc f990 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a22:	f7fc f989 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005a26:	2201      	movs	r2, #1
 8005a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8005a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005a34:	f7fc b980 	b.w	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2140      	movs	r1, #64	; 0x40
 8005a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a40:	f7fc f97a 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8005a44:	2200      	movs	r2, #0
 8005a46:	2180      	movs	r1, #128	; 0x80
 8005a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a4c:	f7fc f974 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8005a50:	2201      	movs	r2, #1
 8005a52:	2120      	movs	r1, #32
 8005a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a58:	f7fc f96e 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a66:	f7fc f967 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a74:	f7fc f960 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8005a78:	48ac      	ldr	r0, [pc, #688]	; (8005d2c <seven_segment_display+0x3d8>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	2140      	movs	r1, #64	; 0x40
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005a7e:	f7fc f95b 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005a82:	2201      	movs	r2, #1
 8005a84:	2180      	movs	r1, #128	; 0x80
 8005a86:	48aa      	ldr	r0, [pc, #680]	; (8005d30 <seven_segment_display+0x3dc>)
}
 8005a88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005a8c:	f7fc b954 	b.w	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8005a90:	2200      	movs	r2, #0
 8005a92:	2120      	movs	r1, #32
 8005a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a98:	f7fc f94e 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2140      	movs	r1, #64	; 0x40
 8005aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aa4:	f7fc f948 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ab2:	f7fc f941 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2180      	movs	r1, #128	; 0x80
 8005aba:	489d      	ldr	r0, [pc, #628]	; (8005d30 <seven_segment_display+0x3dc>)
 8005abc:	f7fc f93c 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2140      	movs	r1, #64	; 0x40
 8005ac4:	4899      	ldr	r0, [pc, #612]	; (8005d2c <seven_segment_display+0x3d8>)
 8005ac6:	f7fc f937 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005aca:	2201      	movs	r2, #1
 8005acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad4:	f7fc f930 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8005ad8:	2201      	movs	r2, #1
 8005ada:	2180      	movs	r1, #128	; 0x80
 8005adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8005ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8005ae4:	f7fc b928 	b.w	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2120      	movs	r1, #32
 8005aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005af0:	f7fc f922 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8005af4:	2200      	movs	r2, #0
 8005af6:	2140      	movs	r1, #64	; 0x40
 8005af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005afc:	f7fc f91c 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005b00:	2200      	movs	r2, #0
 8005b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b0a:	f7fc f915 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2180      	movs	r1, #128	; 0x80
 8005b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b16:	f7fc f90f 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	4883      	ldr	r0, [pc, #524]	; (8005d2c <seven_segment_display+0x3d8>)
 8005b20:	f7fc f90a 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005b24:	2201      	movs	r2, #1
 8005b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b2e:	e7a6      	b.n	8005a7e <seven_segment_display+0x12a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005b30:	2200      	movs	r2, #0
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b38:	f7fc f8fe 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b46:	f7fc f8f7 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b54:	f7fc f8f0 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b60:	f7fc f8ea 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005b64:	2201      	movs	r2, #1
 8005b66:	2120      	movs	r1, #32
 8005b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b6c:	f7fc f8e4 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005b70:	2201      	movs	r2, #1
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	486e      	ldr	r0, [pc, #440]	; (8005d30 <seven_segment_display+0x3dc>)
 8005b76:	f7fc f8df 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2120      	movs	r1, #32
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b82:	e71f      	b.n	80059c4 <seven_segment_display+0x70>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005b84:	2200      	movs	r2, #0
 8005b86:	2120      	movs	r1, #32
 8005b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b8c:	f7fc f8d4 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005b90:	2200      	movs	r2, #0
 8005b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b9a:	f7fc f8cd 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ba8:	f7fc f8c6 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005bac:	2200      	movs	r2, #0
 8005bae:	2180      	movs	r1, #128	; 0x80
 8005bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bb4:	f7fc f8c0 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2140      	movs	r1, #64	; 0x40
 8005bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bc0:	f7fc f8ba 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	2180      	movs	r1, #128	; 0x80
 8005bc8:	4859      	ldr	r0, [pc, #356]	; (8005d30 <seven_segment_display+0x3dc>)
 8005bca:	f7fc f8b5 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2140      	movs	r1, #64	; 0x40
 8005bd2:	4856      	ldr	r0, [pc, #344]	; (8005d2c <seven_segment_display+0x3d8>)
}
 8005bd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8005bd8:	f7fc b8ae 	b.w	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2120      	movs	r1, #32
 8005be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005be4:	f7fc f8a8 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005be8:	2200      	movs	r2, #0
 8005bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bf2:	f7fc f8a1 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c00:	f7fc f89a 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005c04:	2200      	movs	r2, #0
 8005c06:	2180      	movs	r1, #128	; 0x80
 8005c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c0c:	f7fc f894 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005c10:	2200      	movs	r2, #0
 8005c12:	2140      	movs	r1, #64	; 0x40
 8005c14:	4845      	ldr	r0, [pc, #276]	; (8005d2c <seven_segment_display+0x3d8>)
 8005c16:	f7fc f88f 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005c1a:	4845      	ldr	r0, [pc, #276]	; (8005d30 <seven_segment_display+0x3dc>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8005c20:	f7fc f88a 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8005c24:	2201      	movs	r2, #1
 8005c26:	2140      	movs	r1, #64	; 0x40
 8005c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8005c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8005c30:	f7fc b882 	b.w	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005c34:	2200      	movs	r2, #0
 8005c36:	2120      	movs	r1, #32
 8005c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c3c:	f7fc f87c 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005c40:	2200      	movs	r2, #0
 8005c42:	2140      	movs	r1, #64	; 0x40
 8005c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c48:	f7fc f876 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c54:	f7fc f870 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	4834      	ldr	r0, [pc, #208]	; (8005d30 <seven_segment_display+0x3dc>)
 8005c5e:	f7fc f86b 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005c62:	2201      	movs	r2, #1
 8005c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c6c:	f7fc f864 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005c70:	2201      	movs	r2, #1
 8005c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c76:	e782      	b.n	8005b7e <seven_segment_display+0x22a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2140      	movs	r1, #64	; 0x40
 8005c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c80:	f7fc f85a 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005c84:	2200      	movs	r2, #0
 8005c86:	2120      	movs	r1, #32
 8005c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c8c:	f7fc f854 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005c90:	2200      	movs	r2, #0
 8005c92:	2140      	movs	r1, #64	; 0x40
 8005c94:	4825      	ldr	r0, [pc, #148]	; (8005d2c <seven_segment_display+0x3d8>)
 8005c96:	f7fc f84f 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2180      	movs	r1, #128	; 0x80
 8005c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ca2:	f7fc f849 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	4820      	ldr	r0, [pc, #128]	; (8005d2c <seven_segment_display+0x3d8>)
 8005cac:	f7fc f844 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2180      	movs	r1, #128	; 0x80
 8005cb4:	481e      	ldr	r0, [pc, #120]	; (8005d30 <seven_segment_display+0x3dc>)
 8005cb6:	f7fc f83f 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cc4:	f7fc f838 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8005cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005cd6:	f7fc b82f 	b.w	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005cda:	2201      	movs	r2, #1
 8005cdc:	2120      	movs	r1, #32
 8005cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ce2:	f7fc f829 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	2140      	movs	r1, #64	; 0x40
 8005cea:	4810      	ldr	r0, [pc, #64]	; (8005d2c <seven_segment_display+0x3d8>)
 8005cec:	f7fc f824 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	2180      	movs	r1, #128	; 0x80
 8005cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cf8:	f7fc f81e 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	2140      	movs	r1, #64	; 0x40
 8005d00:	480a      	ldr	r0, [pc, #40]	; (8005d2c <seven_segment_display+0x3d8>)
 8005d02:	f7fc f819 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005d06:	2201      	movs	r2, #1
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	4809      	ldr	r0, [pc, #36]	; (8005d30 <seven_segment_display+0x3dc>)
 8005d0c:	f7fc f814 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005d10:	2201      	movs	r2, #1
 8005d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d1a:	f7fc f80d 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d28:	e77a      	b.n	8005c20 <seven_segment_display+0x2cc>
 8005d2a:	bf00      	nop
 8005d2c:	48000400 	.word	0x48000400
 8005d30:	48000800 	.word	0x48000800

08005d34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <HAL_MspInit+0x78>)
{
 8005d36:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	619a      	str	r2, [r3, #24]
 8005d40:	699b      	ldr	r3, [r3, #24]
{
 8005d42:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005d4a:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d4c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005d4e:	f7fb fcb1 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 8005d52:	2202      	movs	r2, #2
 8005d54:	2100      	movs	r1, #0
 8005d56:	f06f 000b 	mvn.w	r0, #11
 8005d5a:	f7fb fcbd 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 8005d5e:	2202      	movs	r2, #2
 8005d60:	2100      	movs	r1, #0
 8005d62:	f06f 000a 	mvn.w	r0, #10
 8005d66:	f7fb fcb7 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f06f 0009 	mvn.w	r0, #9
 8005d72:	f7fb fcb1 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 8005d76:	2202      	movs	r2, #2
 8005d78:	2100      	movs	r1, #0
 8005d7a:	f06f 0004 	mvn.w	r0, #4
 8005d7e:	f7fb fcab 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 8005d82:	2202      	movs	r2, #2
 8005d84:	2100      	movs	r1, #0
 8005d86:	f06f 0003 	mvn.w	r0, #3
 8005d8a:	f7fb fca5 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 8005d8e:	2202      	movs	r2, #2
 8005d90:	2100      	movs	r1, #0
 8005d92:	f06f 0001 	mvn.w	r0, #1
 8005d96:	f7fb fc9f 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005da2:	f7fb fc99 	bl	80016d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005da6:	b003      	add	sp, #12
 8005da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dac:	40021000 	.word	0x40021000

08005db0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8005db0:	4b21      	ldr	r3, [pc, #132]	; (8005e38 <HAL_ADC_MspInit+0x88>)
 8005db2:	6802      	ldr	r2, [r0, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d000      	beq.n	8005dba <HAL_ADC_MspInit+0xa>
 8005db8:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005dba:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <HAL_ADC_MspInit+0x8c>)
{
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005dbe:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8005dc0:	4d1f      	ldr	r5, [pc, #124]	; (8005e40 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005dc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005dc6:	615a      	str	r2, [r3, #20]
 8005dc8:	695b      	ldr	r3, [r3, #20]
{
 8005dca:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd0:	2600      	movs	r6, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005dd2:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dd4:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 8005dd6:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dd8:	a901      	add	r1, sp, #4
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4819      	ldr	r0, [pc, #100]	; (8005e44 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005dde:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 8005de0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005de2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de4:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005de6:	f7fb feb7 	bl	8001b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GPIO_PIN_12;
 8005dea:	f241 0304 	movw	r3, #4100	; 0x1004
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dee:	a901      	add	r1, sp, #4
 8005df0:	4815      	ldr	r0, [pc, #84]	; (8005e48 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005df2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GPIO_PIN_12;
 8005df4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df6:	9603      	str	r6, [sp, #12]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005df8:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dfa:	f7fb fead 	bl	8001b58 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8005dfe:	f8df e050 	ldr.w	lr, [pc, #80]	; 8005e50 <HAL_ADC_MspInit+0xa0>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e02:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e04:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005e0c:	2320      	movs	r3, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005e0e:	4628      	mov	r0, r5
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e10:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005e12:	61ee      	str	r6, [r5, #28]
    hdma_adc2.Instance = DMA1_Channel2;
 8005e14:	f8c5 e000 	str.w	lr, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005e18:	60ef      	str	r7, [r5, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e1a:	6129      	str	r1, [r5, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e1c:	616a      	str	r2, [r5, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005e1e:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005e20:	f7fb fcc8 	bl	80017b4 <HAL_DMA_Init>
 8005e24:	b918      	cbnz	r0, 8005e2e <HAL_ADC_MspInit+0x7e>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005e26:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005e28:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005e2a:	b007      	add	sp, #28
 8005e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 8005e2e:	217a      	movs	r1, #122	; 0x7a
 8005e30:	4806      	ldr	r0, [pc, #24]	; (8005e4c <HAL_ADC_MspInit+0x9c>)
 8005e32:	f7ff fd07 	bl	8005844 <_Error_Handler>
 8005e36:	e7f6      	b.n	8005e26 <HAL_ADC_MspInit+0x76>
 8005e38:	50000100 	.word	0x50000100
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	200004e0 	.word	0x200004e0
 8005e44:	48000800 	.word	0x48000800
 8005e48:	48000400 	.word	0x48000400
 8005e4c:	08007938 	.word	0x08007938
 8005e50:	4002001c 	.word	0x4002001c

08005e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005e54:	6802      	ldr	r2, [r0, #0]
 8005e56:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_I2C_MspInit+0x68>)
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d000      	beq.n	8005e5e <HAL_I2C_MspInit+0xa>
 8005e5c:	4770      	bx	lr
{
 8005e5e:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e60:	2304      	movs	r3, #4
{
 8005e62:	b086      	sub	sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e64:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e66:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e6a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8005e6c:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e70:	2512      	movs	r5, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e72:	4813      	ldr	r0, [pc, #76]	; (8005ec0 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e74:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e76:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8005e78:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e7a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7c:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e7e:	f7fb fe6b 	bl	8001b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e82:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <HAL_I2C_MspInit+0x70>)
 8005e84:	69da      	ldr	r2, [r3, #28]
 8005e86:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005e8a:	61da      	str	r2, [r3, #28]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005e92:	4622      	mov	r2, r4
 8005e94:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e96:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005e98:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e9a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005e9c:	f7fb fc1c 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005ea0:	201f      	movs	r0, #31
 8005ea2:	f7fb fc4f 	bl	8001744 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	2020      	movs	r0, #32
 8005eac:	f7fb fc14 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005eb0:	2020      	movs	r0, #32
 8005eb2:	f7fb fc47 	bl	8001744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005eb6:	b006      	add	sp, #24
 8005eb8:	bd70      	pop	{r4, r5, r6, pc}
 8005eba:	bf00      	nop
 8005ebc:	40005400 	.word	0x40005400
 8005ec0:	48000400 	.word	0x48000400
 8005ec4:	40021000 	.word	0x40021000

08005ec8 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005ec8:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 8005eca:	6802      	ldr	r2, [r0, #0]
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <HAL_RTC_MspInit+0x38>)
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d000      	beq.n	8005ed4 <HAL_RTC_MspInit+0xc>
 8005ed2:	bd08      	pop	{r3, pc}
 8005ed4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ed8:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005edc:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <HAL_RTC_MspInit+0x3c>)
 8005ede:	fab2 f282 	clz	r2, r2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	2101      	movs	r1, #1
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8005ee8:	2200      	movs	r2, #0
    __HAL_RCC_RTC_ENABLE();
 8005eea:	6019      	str	r1, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8005eec:	2003      	movs	r0, #3
 8005eee:	4611      	mov	r1, r2
 8005ef0:	f7fb fbf2 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8005ef4:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8005efa:	f7fb bc23 	b.w	8001744 <HAL_NVIC_EnableIRQ>
 8005efe:	bf00      	nop
 8005f00:	40002800 	.word	0x40002800
 8005f04:	10908100 	.word	0x10908100

08005f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8005f08:	6802      	ldr	r2, [r0, #0]
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <HAL_UART_MspInit+0x54>)
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d000      	beq.n	8005f12 <HAL_UART_MspInit+0xa>
 8005f10:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f12:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 8005f16:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f18:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f1a:	4811      	ldr	r0, [pc, #68]	; (8005f60 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f20:	619a      	str	r2, [r3, #24]
 8005f22:	699b      	ldr	r3, [r3, #24]
{
 8005f24:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f2a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f2c:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f2e:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f30:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f32:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f34:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f36:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f3a:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f3c:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f3e:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f40:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f42:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f44:	f7fb fe08 	bl	8001b58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005f48:	4622      	mov	r2, r4
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	2025      	movs	r0, #37	; 0x25
 8005f4e:	f7fb fbc3 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005f52:	2025      	movs	r0, #37	; 0x25
 8005f54:	f7fb fbf6 	bl	8001744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005f58:	b007      	add	sp, #28
 8005f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5c:	40013800 	.word	0x40013800
 8005f60:	48000800 	.word	0x48000800

08005f64 <SVC_Handler>:
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <PendSV_Handler>:
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop

08005f6c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005f6c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f6e:	f7fa ff6b 	bl	8000e48 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005f72:	f7fb fc1b 	bl	80017ac <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
  RTC_timer_flag = 1;
  flash_flag = 1;
  adc_flag = 1;
  if(pump_flag == 1){
 8005f76:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <SysTick_Handler+0x30>)
  systick_flag = 1;
 8005f78:	4d09      	ldr	r5, [pc, #36]	; (8005fa0 <SysTick_Handler+0x34>)
  if(pump_flag == 1){
 8005f7a:	781a      	ldrb	r2, [r3, #0]
  RTC_timer_flag = 1;
 8005f7c:	4c09      	ldr	r4, [pc, #36]	; (8005fa4 <SysTick_Handler+0x38>)
  flash_flag = 1;
 8005f7e:	480a      	ldr	r0, [pc, #40]	; (8005fa8 <SysTick_Handler+0x3c>)
  adc_flag = 1;
 8005f80:	490a      	ldr	r1, [pc, #40]	; (8005fac <SysTick_Handler+0x40>)
  systick_flag = 1;
 8005f82:	2301      	movs	r3, #1
  if(pump_flag == 1){
 8005f84:	429a      	cmp	r2, r3
  systick_flag = 1;
 8005f86:	702b      	strb	r3, [r5, #0]
  RTC_timer_flag = 1;
 8005f88:	7023      	strb	r3, [r4, #0]
  flash_flag = 1;
 8005f8a:	7003      	strb	r3, [r0, #0]
  adc_flag = 1;
 8005f8c:	700b      	strb	r3, [r1, #0]
  if(pump_flag == 1){
 8005f8e:	d103      	bne.n	8005f98 <SysTick_Handler+0x2c>
	  valve_timer += 1;
 8005f90:	4a07      	ldr	r2, [pc, #28]	; (8005fb0 <SysTick_Handler+0x44>)
 8005f92:	7813      	ldrb	r3, [r2, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	7013      	strb	r3, [r2, #0]
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200002cc 	.word	0x200002cc
 8005fa0:	200002e9 	.word	0x200002e9
 8005fa4:	20000254 	.word	0x20000254
 8005fa8:	20000294 	.word	0x20000294
 8005fac:	2000026a 	.word	0x2000026a
 8005fb0:	2000030c 	.word	0x2000030c

08005fb4 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <RTC_WKUP_IRQHandler+0x8>)
 8005fb6:	f7fd be57 	b.w	8003c68 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8005fba:	bf00      	nop
 8005fbc:	200004a8 	.word	0x200004a8

08005fc0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f7fb bebf 	b.w	8001d44 <HAL_GPIO_EXTI_IRQHandler>
 8005fc6:	bf00      	nop

08005fc8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005fc8:	4801      	ldr	r0, [pc, #4]	; (8005fd0 <DMA1_Channel2_IRQHandler+0x8>)
 8005fca:	f7fb bc91 	b.w	80018f0 <HAL_DMA_IRQHandler>
 8005fce:	bf00      	nop
 8005fd0:	200004e0 	.word	0x200004e0

08005fd4 <DMA1_Channel3_IRQHandler>:
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop

08005fd8 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop

08005fdc <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8005fdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005fde:	2040      	movs	r0, #64	; 0x40
 8005fe0:	f7fb feb0 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  pump_flag = 1;
 8005fe4:	4b01      	ldr	r3, [pc, #4]	; (8005fec <EXTI9_5_IRQHandler+0x10>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	bd08      	pop	{r3, pc}
 8005fec:	200002cc 	.word	0x200002cc

08005ff0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <I2C1_EV_IRQHandler+0x8>)
 8005ff2:	f7fc ba5d 	b.w	80024b0 <HAL_I2C_EV_IRQHandler>
 8005ff6:	bf00      	nop
 8005ff8:	200003a4 	.word	0x200003a4

08005ffc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <I2C1_ER_IRQHandler+0x8>)
 8005ffe:	f7fc bd5d 	b.w	8002abc <HAL_I2C_ER_IRQHandler>
 8006002:	bf00      	nop
 8006004:	200003a4 	.word	0x200003a4

08006008 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <USART1_IRQHandler+0x8>)
 800600a:	f7fd becf 	b.w	8003dac <HAL_UART_IRQHandler>
 800600e:	bf00      	nop
 8006010:	20000438 	.word	0x20000438

08006014 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006014:	4917      	ldr	r1, [pc, #92]	; (8006074 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8006018:	4a18      	ldr	r2, [pc, #96]	; (800607c <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800601a:	4819      	ldr	r0, [pc, #100]	; (8006080 <SystemInit+0x6c>)
{
 800601c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800601e:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 8006022:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8006026:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 800602a:	681c      	ldr	r4, [r3, #0]
 800602c:	f044 0401 	orr.w	r4, r4, #1
 8006030:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8006032:	685c      	ldr	r4, [r3, #4]
 8006034:	4022      	ands	r2, r4
 8006036:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800603e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006042:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800604a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8006052:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	f022 020f 	bic.w	r2, r2, #15
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 800605c:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800605e:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006060:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006066:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8006068:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800606a:	608a      	str	r2, [r1, #8]
#endif
}
 800606c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	e000ed00 	.word	0xe000ed00
 8006078:	40021000 	.word	0x40021000
 800607c:	f87fc00c 	.word	0xf87fc00c
 8006080:	ff00fccc 	.word	0xff00fccc

08006084 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 8006084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
 8006088:	2200      	movs	r2, #0
 800608a:	4b9a      	ldr	r3, [pc, #616]	; (80062f4 <uart_comms+0x270>)
 800608c:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 800608e:	4b9a      	ldr	r3, [pc, #616]	; (80062f8 <uart_comms+0x274>)
 8006090:	4a9a      	ldr	r2, [pc, #616]	; (80062fc <uart_comms+0x278>)
 8006092:	7812      	ldrb	r2, [r2, #0]
 8006094:	6819      	ldr	r1, [r3, #0]
 8006096:	489a      	ldr	r0, [pc, #616]	; (8006300 <uart_comms+0x27c>)
 8006098:	7800      	ldrb	r0, [r0, #0]
 800609a:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	781a      	ldrb	r2, [r3, #0]
 80060a0:	2a24      	cmp	r2, #36	; 0x24
 80060a2:	d00b      	beq.n	80060bc <uart_comms+0x38>

		uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	2a24      	cmp	r2, #36	; 0x24
 80060a8:	d00d      	beq.n	80060c6 <uart_comms+0x42>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 80060aa:	4b94      	ldr	r3, [pc, #592]	; (80062fc <uart_comms+0x278>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b3b      	cmp	r3, #59	; 0x3b
 80060b0:	d902      	bls.n	80060b8 <uart_comms+0x34>
		uart_counter = 0;
 80060b2:	2200      	movs	r2, #0
 80060b4:	4b91      	ldr	r3, [pc, #580]	; (80062fc <uart_comms+0x278>)
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_counter += 1;
 80060bc:	498f      	ldr	r1, [pc, #572]	; (80062fc <uart_comms+0x278>)
 80060be:	780a      	ldrb	r2, [r1, #0]
 80060c0:	3201      	adds	r2, #1
 80060c2:	700a      	strb	r2, [r1, #0]
 80060c4:	e7ee      	b.n	80060a4 <uart_comms+0x20>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80060c6:	4a8d      	ldr	r2, [pc, #564]	; (80062fc <uart_comms+0x278>)
 80060c8:	7812      	ldrb	r2, [r2, #0]
 80060ca:	1899      	adds	r1, r3, r2
 80060cc:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80060d0:	290a      	cmp	r1, #10
 80060d2:	d1ea      	bne.n	80060aa <uart_comms+0x26>
 80060d4:	4413      	add	r3, r2
 80060d6:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80060da:	2b0d      	cmp	r3, #13
 80060dc:	d1e5      	bne.n	80060aa <uart_comms+0x26>
 80060de:	2a02      	cmp	r2, #2
 80060e0:	d9e3      	bls.n	80060aa <uart_comms+0x26>
		memset(return_value,0x00, 50);
 80060e2:	2232      	movs	r2, #50	; 0x32
 80060e4:	2100      	movs	r1, #0
 80060e6:	4b87      	ldr	r3, [pc, #540]	; (8006304 <uart_comms+0x280>)
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	f000 fd7c 	bl	8006be6 <memset>
		uart_command_copy = uart_command;
 80060ee:	4b82      	ldr	r3, [pc, #520]	; (80062f8 <uart_comms+0x274>)
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	4b85      	ldr	r3, [pc, #532]	; (8006308 <uart_comms+0x284>)
 80060f4:	6018      	str	r0, [r3, #0]
		switch(uart_command[1]){
 80060f6:	7843      	ldrb	r3, [r0, #1]
 80060f8:	3b41      	subs	r3, #65	; 0x41
 80060fa:	2b0b      	cmp	r3, #11
 80060fc:	d829      	bhi.n	8006152 <uart_comms+0xce>
 80060fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006102:	000c      	.short	0x000c
 8006104:	00600033 	.word	0x00600033
 8006108:	00af007f 	.word	0x00af007f
 800610c:	012700ce 	.word	0x012700ce
 8006110:	01ac0153 	.word	0x01ac0153
 8006114:	034d0223 	.word	0x034d0223
 8006118:	0404      	.short	0x0404
			memcpy(studentnumber, uart_command, 2 );
 800611a:	4b7c      	ldr	r3, [pc, #496]	; (800630c <uart_comms+0x288>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	8801      	ldrh	r1, [r0, #0]
 8006120:	8011      	strh	r1, [r2, #0]
			memcpy(studentnumber+2,comma,1);
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	497a      	ldr	r1, [pc, #488]	; (8006310 <uart_comms+0x28c>)
 8006126:	7809      	ldrb	r1, [r1, #0]
 8006128:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4979      	ldr	r1, [pc, #484]	; (8006314 <uart_comms+0x290>)
 800612e:	6808      	ldr	r0, [r1, #0]
 8006130:	6849      	ldr	r1, [r1, #4]
 8006132:	f8c2 0003 	str.w	r0, [r2, #3]
 8006136:	f8c2 1007 	str.w	r1, [r2, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 800613a:	6819      	ldr	r1, [r3, #0]
 800613c:	4b76      	ldr	r3, [pc, #472]	; (8006318 <uart_comms+0x294>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f8c1 200b 	str.w	r2, [r1, #11]
 8006146:	f8c1 300f 	str.w	r3, [r1, #15]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 800614a:	220d      	movs	r2, #13
 800614c:	4873      	ldr	r0, [pc, #460]	; (800631c <uart_comms+0x298>)
 800614e:	f7fd fdaf 	bl	8003cb0 <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 8006152:	223c      	movs	r2, #60	; 0x3c
 8006154:	2100      	movs	r1, #0
 8006156:	4b68      	ldr	r3, [pc, #416]	; (80062f8 <uart_comms+0x274>)
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	f000 fd44 	bl	8006be6 <memset>
		uart_counter = 0;
 800615e:	2200      	movs	r2, #0
 8006160:	4b66      	ldr	r3, [pc, #408]	; (80062fc <uart_comms+0x278>)
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if(uart_command[3]=='1'){
 8006168:	78c3      	ldrb	r3, [r0, #3]
 800616a:	2b31      	cmp	r3, #49	; 0x31
 800616c:	d015      	beq.n	800619a <uart_comms+0x116>
			else if(uart_command[3] == '0'){
 800616e:	2b30      	cmp	r3, #48	; 0x30
 8006170:	d01d      	beq.n	80061ae <uart_comms+0x12a>
			memcpy(return_value, uart_command, 2);
 8006172:	4b64      	ldr	r3, [pc, #400]	; (8006304 <uart_comms+0x280>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4960      	ldr	r1, [pc, #384]	; (80062f8 <uart_comms+0x274>)
 8006178:	6809      	ldr	r1, [r1, #0]
 800617a:	8809      	ldrh	r1, [r1, #0]
 800617c:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	4965      	ldr	r1, [pc, #404]	; (8006318 <uart_comms+0x294>)
 8006182:	8809      	ldrh	r1, [r1, #0]
 8006184:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8006186:	681c      	ldr	r4, [r3, #0]
 8006188:	4620      	mov	r0, r4
 800618a:	f7fa f821 	bl	80001d0 <strlen>
 800618e:	b282      	uxth	r2, r0
 8006190:	4621      	mov	r1, r4
 8006192:	4862      	ldr	r0, [pc, #392]	; (800631c <uart_comms+0x298>)
 8006194:	f7fd fd8c 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 8006198:	e7db      	b.n	8006152 <uart_comms+0xce>
				valve_state = valve_OPEN;
 800619a:	4a61      	ldr	r2, [pc, #388]	; (8006320 <uart_comms+0x29c>)
 800619c:	4b61      	ldr	r3, [pc, #388]	; (8006324 <uart_comms+0x2a0>)
 800619e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 80061a0:	2201      	movs	r2, #1
 80061a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061a6:	4860      	ldr	r0, [pc, #384]	; (8006328 <uart_comms+0x2a4>)
 80061a8:	f7fb fdc6 	bl	8001d38 <HAL_GPIO_WritePin>
 80061ac:	e7e1      	b.n	8006172 <uart_comms+0xee>
				valve_state=valve_CLOSE;
 80061ae:	4a5f      	ldr	r2, [pc, #380]	; (800632c <uart_comms+0x2a8>)
 80061b0:	4b5c      	ldr	r3, [pc, #368]	; (8006324 <uart_comms+0x2a0>)
 80061b2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 80061b4:	2200      	movs	r2, #0
 80061b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061ba:	485b      	ldr	r0, [pc, #364]	; (8006328 <uart_comms+0x2a4>)
 80061bc:	f7fb fdbc 	bl	8001d38 <HAL_GPIO_WritePin>
 80061c0:	e7d7      	b.n	8006172 <uart_comms+0xee>
			if(uart_command[3]=='0'){
 80061c2:	78c3      	ldrb	r3, [r0, #3]
 80061c4:	2b30      	cmp	r3, #48	; 0x30
 80061c6:	d013      	beq.n	80061f0 <uart_comms+0x16c>
			else if(uart_command[3] == '1'){
 80061c8:	2b31      	cmp	r3, #49	; 0x31
 80061ca:	d015      	beq.n	80061f8 <uart_comms+0x174>
			memcpy(return_value, uart_command, 2);
 80061cc:	4b4d      	ldr	r3, [pc, #308]	; (8006304 <uart_comms+0x280>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	8801      	ldrh	r1, [r0, #0]
 80061d2:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	4950      	ldr	r1, [pc, #320]	; (8006318 <uart_comms+0x294>)
 80061d8:	8809      	ldrh	r1, [r1, #0]
 80061da:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 80061dc:	681c      	ldr	r4, [r3, #0]
 80061de:	4620      	mov	r0, r4
 80061e0:	f7f9 fff6 	bl	80001d0 <strlen>
 80061e4:	b282      	uxth	r2, r0
 80061e6:	4621      	mov	r1, r4
 80061e8:	484c      	ldr	r0, [pc, #304]	; (800631c <uart_comms+0x298>)
 80061ea:	f7fd fd61 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 80061ee:	e7b0      	b.n	8006152 <uart_comms+0xce>
				auto_heating = 0;
 80061f0:	2200      	movs	r2, #0
 80061f2:	4b4f      	ldr	r3, [pc, #316]	; (8006330 <uart_comms+0x2ac>)
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e7e9      	b.n	80061cc <uart_comms+0x148>
				auto_heating = 1;
 80061f8:	2201      	movs	r2, #1
 80061fa:	4b4d      	ldr	r3, [pc, #308]	; (8006330 <uart_comms+0x2ac>)
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e7e5      	b.n	80061cc <uart_comms+0x148>
			if(auto_heating == 0){	// if auto heating off
 8006200:	4b4b      	ldr	r3, [pc, #300]	; (8006330 <uart_comms+0x2ac>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b923      	cbnz	r3, 8006210 <uart_comms+0x18c>
				if(uart_command[3]=='0'){
 8006206:	78c3      	ldrb	r3, [r0, #3]
 8006208:	2b30      	cmp	r3, #48	; 0x30
 800620a:	d015      	beq.n	8006238 <uart_comms+0x1b4>
				else if(uart_command[3] == '1'){
 800620c:	2b31      	cmp	r3, #49	; 0x31
 800620e:	d01d      	beq.n	800624c <uart_comms+0x1c8>
			memcpy(return_value, uart_command, 2);
 8006210:	4b3c      	ldr	r3, [pc, #240]	; (8006304 <uart_comms+0x280>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4938      	ldr	r1, [pc, #224]	; (80062f8 <uart_comms+0x274>)
 8006216:	6809      	ldr	r1, [r1, #0]
 8006218:	8809      	ldrh	r1, [r1, #0]
 800621a:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	493e      	ldr	r1, [pc, #248]	; (8006318 <uart_comms+0x294>)
 8006220:	8809      	ldrh	r1, [r1, #0]
 8006222:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8006224:	681c      	ldr	r4, [r3, #0]
 8006226:	4620      	mov	r0, r4
 8006228:	f7f9 ffd2 	bl	80001d0 <strlen>
 800622c:	b282      	uxth	r2, r0
 800622e:	4621      	mov	r1, r4
 8006230:	483a      	ldr	r0, [pc, #232]	; (800631c <uart_comms+0x298>)
 8006232:	f7fd fd3d 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 8006236:	e78c      	b.n	8006152 <uart_comms+0xce>
					heater_state = heater_OFF;
 8006238:	4a3e      	ldr	r2, [pc, #248]	; (8006334 <uart_comms+0x2b0>)
 800623a:	4b3f      	ldr	r3, [pc, #252]	; (8006338 <uart_comms+0x2b4>)
 800623c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 800623e:	2200      	movs	r2, #0
 8006240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006244:	4838      	ldr	r0, [pc, #224]	; (8006328 <uart_comms+0x2a4>)
 8006246:	f7fb fd77 	bl	8001d38 <HAL_GPIO_WritePin>
 800624a:	e7e1      	b.n	8006210 <uart_comms+0x18c>
					heater_state = heater_ON;
 800624c:	4a3b      	ldr	r2, [pc, #236]	; (800633c <uart_comms+0x2b8>)
 800624e:	4b3a      	ldr	r3, [pc, #232]	; (8006338 <uart_comms+0x2b4>)
 8006250:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 8006252:	2201      	movs	r2, #1
 8006254:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006258:	4833      	ldr	r0, [pc, #204]	; (8006328 <uart_comms+0x2a4>)
 800625a:	f7fb fd6d 	bl	8001d38 <HAL_GPIO_WritePin>
 800625e:	e7d7      	b.n	8006210 <uart_comms+0x18c>
			if(uart_command[3]=='0'){ // logging disable
 8006260:	78c3      	ldrb	r3, [r0, #3]
 8006262:	2b30      	cmp	r3, #48	; 0x30
 8006264:	d013      	beq.n	800628e <uart_comms+0x20a>
			else if(uart_command[3] == '1'){ // logging enable
 8006266:	2b31      	cmp	r3, #49	; 0x31
 8006268:	d015      	beq.n	8006296 <uart_comms+0x212>
			memcpy(return_value, uart_command, 2);
 800626a:	4b26      	ldr	r3, [pc, #152]	; (8006304 <uart_comms+0x280>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	8801      	ldrh	r1, [r0, #0]
 8006270:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	4928      	ldr	r1, [pc, #160]	; (8006318 <uart_comms+0x294>)
 8006276:	8809      	ldrh	r1, [r1, #0]
 8006278:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 800627a:	681c      	ldr	r4, [r3, #0]
 800627c:	4620      	mov	r0, r4
 800627e:	f7f9 ffa7 	bl	80001d0 <strlen>
 8006282:	b282      	uxth	r2, r0
 8006284:	4621      	mov	r1, r4
 8006286:	4825      	ldr	r0, [pc, #148]	; (800631c <uart_comms+0x298>)
 8006288:	f7fd fd12 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 800628c:	e761      	b.n	8006152 <uart_comms+0xce>
				enableFlashLogging = 0;
 800628e:	2200      	movs	r2, #0
 8006290:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <uart_comms+0x2bc>)
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	e7e9      	b.n	800626a <uart_comms+0x1e6>
				enableFlashLogging = 1;
 8006296:	2201      	movs	r2, #1
 8006298:	4b29      	ldr	r3, [pc, #164]	; (8006340 <uart_comms+0x2bc>)
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e7e5      	b.n	800626a <uart_comms+0x1e6>
			sizeOfTemp = uart_counter - 5;
 800629e:	4b17      	ldr	r3, [pc, #92]	; (80062fc <uart_comms+0x278>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	3b05      	subs	r3, #5
 80062a4:	4a27      	ldr	r2, [pc, #156]	; (8006344 <uart_comms+0x2c0>)
 80062a6:	7013      	strb	r3, [r2, #0]
			memset(temp_val, 0x00, 4);
 80062a8:	4c27      	ldr	r4, [pc, #156]	; (8006348 <uart_comms+0x2c4>)
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	2600      	movs	r6, #0
 80062ae:	601e      	str	r6, [r3, #0]
			memcpy(temp_val, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 80062b0:	4d11      	ldr	r5, [pc, #68]	; (80062f8 <uart_comms+0x274>)
 80062b2:	6829      	ldr	r1, [r5, #0]
 80062b4:	7812      	ldrb	r2, [r2, #0]
 80062b6:	3103      	adds	r1, #3
 80062b8:	6820      	ldr	r0, [r4, #0]
 80062ba:	f000 fc89 	bl	8006bd0 <memcpy>
			*set_temp = strtol(temp_val, NULL,10);
 80062be:	4b23      	ldr	r3, [pc, #140]	; (800634c <uart_comms+0x2c8>)
 80062c0:	681f      	ldr	r7, [r3, #0]
 80062c2:	220a      	movs	r2, #10
 80062c4:	4631      	mov	r1, r6
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	f000 fe4a 	bl	8006f60 <strtol>
 80062cc:	7038      	strb	r0, [r7, #0]
			memcpy(return_value, uart_command,2);
 80062ce:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <uart_comms+0x280>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	6829      	ldr	r1, [r5, #0]
 80062d4:	8809      	ldrh	r1, [r1, #0]
 80062d6:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2,endSimbol, 2);
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	490f      	ldr	r1, [pc, #60]	; (8006318 <uart_comms+0x294>)
 80062dc:	8809      	ldrh	r1, [r1, #0]
 80062de:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80062e0:	681c      	ldr	r4, [r3, #0]
 80062e2:	4620      	mov	r0, r4
 80062e4:	f7f9 ff74 	bl	80001d0 <strlen>
 80062e8:	b282      	uxth	r2, r0
 80062ea:	4621      	mov	r1, r4
 80062ec:	480b      	ldr	r0, [pc, #44]	; (800631c <uart_comms+0x298>)
 80062ee:	f7fd fcdf 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 80062f2:	e72e      	b.n	8006152 <uart_comms+0xce>
 80062f4:	200002dd 	.word	0x200002dd
 80062f8:	200002fc 	.word	0x200002fc
 80062fc:	20000304 	.word	0x20000304
 8006300:	200005a4 	.word	0x200005a4
 8006304:	200002d8 	.word	0x200002d8
 8006308:	20000300 	.word	0x20000300
 800630c:	200005a0 	.word	0x200005a0
 8006310:	20000004 	.word	0x20000004
 8006314:	20000040 	.word	0x20000040
 8006318:	20000008 	.word	0x20000008
 800631c:	20000438 	.word	0x20000438
 8006320:	20000054 	.word	0x20000054
 8006324:	20000308 	.word	0x20000308
 8006328:	48000400 	.word	0x48000400
 800632c:	2000004c 	.word	0x2000004c
 8006330:	20000278 	.word	0x20000278
 8006334:	20000014 	.word	0x20000014
 8006338:	200002b0 	.word	0x200002b0
 800633c:	20000018 	.word	0x20000018
 8006340:	20000289 	.word	0x20000289
 8006344:	200002e8 	.word	0x200002e8
 8006348:	200002f0 	.word	0x200002f0
 800634c:	200002e4 	.word	0x200002e4
			memcpy(return_value, uart_command, 2);
 8006350:	4cb0      	ldr	r4, [pc, #704]	; (8006614 <uart_comms+0x590>)
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	8802      	ldrh	r2, [r0, #0]
 8006356:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	4aaf      	ldr	r2, [pc, #700]	; (8006618 <uart_comms+0x594>)
 800635c:	7812      	ldrb	r2, [r2, #0]
 800635e:	709a      	strb	r2, [r3, #2]
			sprintf(temp_val,"%d", *set_temp);
 8006360:	4bae      	ldr	r3, [pc, #696]	; (800661c <uart_comms+0x598>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4eae      	ldr	r6, [pc, #696]	; (8006620 <uart_comms+0x59c>)
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	49ae      	ldr	r1, [pc, #696]	; (8006624 <uart_comms+0x5a0>)
 800636a:	6830      	ldr	r0, [r6, #0]
 800636c:	f000 fd00 	bl	8006d70 <siprintf>
			memcpy(return_value+3, temp_val, strlen(temp_val));
 8006370:	6825      	ldr	r5, [r4, #0]
 8006372:	3503      	adds	r5, #3
 8006374:	6836      	ldr	r6, [r6, #0]
 8006376:	4630      	mov	r0, r6
 8006378:	f7f9 ff2a 	bl	80001d0 <strlen>
 800637c:	4602      	mov	r2, r0
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	f000 fc25 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),endSimbol, 2);
 8006386:	6825      	ldr	r5, [r4, #0]
 8006388:	4628      	mov	r0, r5
 800638a:	f7f9 ff21 	bl	80001d0 <strlen>
 800638e:	4ba6      	ldr	r3, [pc, #664]	; (8006628 <uart_comms+0x5a4>)
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006394:	6824      	ldr	r4, [r4, #0]
 8006396:	4620      	mov	r0, r4
 8006398:	f7f9 ff1a 	bl	80001d0 <strlen>
 800639c:	b282      	uxth	r2, r0
 800639e:	4621      	mov	r1, r4
 80063a0:	48a2      	ldr	r0, [pc, #648]	; (800662c <uart_comms+0x5a8>)
 80063a2:	f7fd fc85 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 80063a6:	e6d4      	b.n	8006152 <uart_comms+0xce>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 80063a8:	4ca1      	ldr	r4, [pc, #644]	; (8006630 <uart_comms+0x5ac>)
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	22ca      	movs	r2, #202	; 0xca
 80063ae:	625a      	str	r2, [r3, #36]	; 0x24
 80063b0:	2253      	movs	r2, #83	; 0x53
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7fd fbc7 	bl	8003b48 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 80063ba:	499e      	ldr	r1, [pc, #632]	; (8006634 <uart_comms+0x5b0>)
 80063bc:	4b9e      	ldr	r3, [pc, #632]	; (8006638 <uart_comms+0x5b4>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	f000 fcfa 	bl	8006db8 <strtok>
 80063c4:	4e9d      	ldr	r6, [pc, #628]	; (800663c <uart_comms+0x5b8>)
 80063c6:	6030      	str	r0, [r6, #0]
			time->Hours = strtol(heating_info, NULL,10);
 80063c8:	4d9d      	ldr	r5, [pc, #628]	; (8006640 <uart_comms+0x5bc>)
 80063ca:	682f      	ldr	r7, [r5, #0]
 80063cc:	220a      	movs	r2, #10
 80063ce:	2100      	movs	r1, #0
 80063d0:	f000 fdc6 	bl	8006f60 <strtol>
 80063d4:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 80063d6:	499b      	ldr	r1, [pc, #620]	; (8006644 <uart_comms+0x5c0>)
 80063d8:	2000      	movs	r0, #0
 80063da:	f000 fced 	bl	8006db8 <strtok>
 80063de:	6030      	str	r0, [r6, #0]
			time->Minutes = strtol(heating_info, NULL,10);
 80063e0:	682f      	ldr	r7, [r5, #0]
 80063e2:	220a      	movs	r2, #10
 80063e4:	2100      	movs	r1, #0
 80063e6:	f000 fdbb 	bl	8006f60 <strtol>
 80063ea:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 80063ec:	4996      	ldr	r1, [pc, #600]	; (8006648 <uart_comms+0x5c4>)
 80063ee:	2000      	movs	r0, #0
 80063f0:	f000 fce2 	bl	8006db8 <strtok>
 80063f4:	6030      	str	r0, [r6, #0]
			time->Seconds = strtol(heating_info, NULL,10);
 80063f6:	682e      	ldr	r6, [r5, #0]
 80063f8:	220a      	movs	r2, #10
 80063fa:	2100      	movs	r1, #0
 80063fc:	f000 fdb0 	bl	8006f60 <strtol>
 8006400:	70b0      	strb	r0, [r6, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8006402:	2200      	movs	r2, #0
 8006404:	6829      	ldr	r1, [r5, #0]
 8006406:	4620      	mov	r0, r4
 8006408:	f7fd f9d8 	bl	80037bc <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 800640c:	4e8f      	ldr	r6, [pc, #572]	; (800664c <uart_comms+0x5c8>)
 800640e:	2200      	movs	r2, #0
 8006410:	6831      	ldr	r1, [r6, #0]
 8006412:	4620      	mov	r0, r4
 8006414:	f7fd fac6 	bl	80039a4 <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	22ff      	movs	r2, #255	; 0xff
 800641c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 800641e:	2200      	movs	r2, #0
 8006420:	6829      	ldr	r1, [r5, #0]
 8006422:	4620      	mov	r0, r4
 8006424:	f7fd fa88 	bl	8003938 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8006428:	2200      	movs	r2, #0
 800642a:	6831      	ldr	r1, [r6, #0]
 800642c:	4620      	mov	r0, r4
 800642e:	f7fd fb5b 	bl	8003ae8 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 8006432:	4b78      	ldr	r3, [pc, #480]	; (8006614 <uart_comms+0x590>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4986      	ldr	r1, [pc, #536]	; (8006650 <uart_comms+0x5cc>)
 8006438:	6809      	ldr	r1, [r1, #0]
 800643a:	8809      	ldrh	r1, [r1, #0]
 800643c:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2,endSimbol, 2);
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4979      	ldr	r1, [pc, #484]	; (8006628 <uart_comms+0x5a4>)
 8006442:	8809      	ldrh	r1, [r1, #0]
 8006444:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8006446:	681c      	ldr	r4, [r3, #0]
 8006448:	4620      	mov	r0, r4
 800644a:	f7f9 fec1 	bl	80001d0 <strlen>
 800644e:	b282      	uxth	r2, r0
 8006450:	4621      	mov	r1, r4
 8006452:	4876      	ldr	r0, [pc, #472]	; (800662c <uart_comms+0x5a8>)
 8006454:	f7fd fc2c 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 8006458:	e67b      	b.n	8006152 <uart_comms+0xce>
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 800645a:	4e79      	ldr	r6, [pc, #484]	; (8006640 <uart_comms+0x5bc>)
 800645c:	4c74      	ldr	r4, [pc, #464]	; (8006630 <uart_comms+0x5ac>)
 800645e:	2200      	movs	r2, #0
 8006460:	6831      	ldr	r1, [r6, #0]
 8006462:	4620      	mov	r0, r4
 8006464:	f7fd fa68 	bl	8003938 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8006468:	2200      	movs	r2, #0
 800646a:	4b78      	ldr	r3, [pc, #480]	; (800664c <uart_comms+0x5c8>)
 800646c:	6819      	ldr	r1, [r3, #0]
 800646e:	4620      	mov	r0, r4
 8006470:	f7fd fb3a 	bl	8003ae8 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 8006474:	4c67      	ldr	r4, [pc, #412]	; (8006614 <uart_comms+0x590>)
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	4a75      	ldr	r2, [pc, #468]	; (8006650 <uart_comms+0x5cc>)
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	8812      	ldrh	r2, [r2, #0]
 800647e:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8006618 <uart_comms+0x594>
 8006486:	f898 2000 	ldrb.w	r2, [r8]
 800648a:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 800648c:	6833      	ldr	r3, [r6, #0]
 800648e:	4d71      	ldr	r5, [pc, #452]	; (8006654 <uart_comms+0x5d0>)
 8006490:	220a      	movs	r2, #10
 8006492:	6829      	ldr	r1, [r5, #0]
 8006494:	7818      	ldrb	r0, [r3, #0]
 8006496:	f000 fb91 	bl	8006bbc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 800649a:	6827      	ldr	r7, [r4, #0]
 800649c:	4638      	mov	r0, r7
 800649e:	f7f9 fe97 	bl	80001d0 <strlen>
 80064a2:	4407      	add	r7, r0
 80064a4:	f8d5 9000 	ldr.w	r9, [r5]
 80064a8:	4648      	mov	r0, r9
 80064aa:	f7f9 fe91 	bl	80001d0 <strlen>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4649      	mov	r1, r9
 80064b2:	4638      	mov	r0, r7
 80064b4:	f000 fb8c 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80064b8:	6827      	ldr	r7, [r4, #0]
 80064ba:	4638      	mov	r0, r7
 80064bc:	f7f9 fe88 	bl	80001d0 <strlen>
 80064c0:	f898 3000 	ldrb.w	r3, [r8]
 80064c4:	543b      	strb	r3, [r7, r0]
			itoa((time->Minutes),temp_time_var,10  );
 80064c6:	6833      	ldr	r3, [r6, #0]
 80064c8:	220a      	movs	r2, #10
 80064ca:	6829      	ldr	r1, [r5, #0]
 80064cc:	7858      	ldrb	r0, [r3, #1]
 80064ce:	f000 fb75 	bl	8006bbc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 80064d2:	6827      	ldr	r7, [r4, #0]
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7f9 fe7b 	bl	80001d0 <strlen>
 80064da:	4407      	add	r7, r0
 80064dc:	f8d5 9000 	ldr.w	r9, [r5]
 80064e0:	4648      	mov	r0, r9
 80064e2:	f7f9 fe75 	bl	80001d0 <strlen>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4649      	mov	r1, r9
 80064ea:	4638      	mov	r0, r7
 80064ec:	f000 fb70 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80064f0:	6827      	ldr	r7, [r4, #0]
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7f9 fe6c 	bl	80001d0 <strlen>
 80064f8:	f898 3000 	ldrb.w	r3, [r8]
 80064fc:	543b      	strb	r3, [r7, r0]
			itoa((time->Seconds),temp_time_var,10  );
 80064fe:	6833      	ldr	r3, [r6, #0]
 8006500:	220a      	movs	r2, #10
 8006502:	6829      	ldr	r1, [r5, #0]
 8006504:	7898      	ldrb	r0, [r3, #2]
 8006506:	f000 fb59 	bl	8006bbc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 800650a:	6826      	ldr	r6, [r4, #0]
 800650c:	4630      	mov	r0, r6
 800650e:	f7f9 fe5f 	bl	80001d0 <strlen>
 8006512:	4406      	add	r6, r0
 8006514:	682d      	ldr	r5, [r5, #0]
 8006516:	4628      	mov	r0, r5
 8006518:	f7f9 fe5a 	bl	80001d0 <strlen>
 800651c:	4602      	mov	r2, r0
 800651e:	4629      	mov	r1, r5
 8006520:	4630      	mov	r0, r6
 8006522:	f000 fb55 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8006526:	6825      	ldr	r5, [r4, #0]
 8006528:	4628      	mov	r0, r5
 800652a:	f7f9 fe51 	bl	80001d0 <strlen>
 800652e:	4b3e      	ldr	r3, [pc, #248]	; (8006628 <uart_comms+0x5a4>)
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006534:	6824      	ldr	r4, [r4, #0]
 8006536:	4620      	mov	r0, r4
 8006538:	f7f9 fe4a 	bl	80001d0 <strlen>
 800653c:	b282      	uxth	r2, r0
 800653e:	4621      	mov	r1, r4
 8006540:	483a      	ldr	r0, [pc, #232]	; (800662c <uart_comms+0x5a8>)
 8006542:	f7fd fbb5 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 8006546:	e604      	b.n	8006152 <uart_comms+0xce>
			if(uart_command[3] == '1'){ // first heating schedule
 8006548:	78c3      	ldrb	r3, [r0, #3]
 800654a:	2b31      	cmp	r3, #49	; 0x31
 800654c:	d019      	beq.n	8006582 <uart_comms+0x4fe>
			else if(uart_command[3] == '2'){ // second heating schedule
 800654e:	2b32      	cmp	r3, #50	; 0x32
 8006550:	f000 8086 	beq.w	8006660 <uart_comms+0x5dc>
			else if(uart_command[3] == '3'){ // 3rd heating schedule
 8006554:	2b33      	cmp	r3, #51	; 0x33
 8006556:	f000 80d2 	beq.w	80066fe <uart_comms+0x67a>
			memcpy(return_value, uart_command, 2);
 800655a:	4b2e      	ldr	r3, [pc, #184]	; (8006614 <uart_comms+0x590>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	493c      	ldr	r1, [pc, #240]	; (8006650 <uart_comms+0x5cc>)
 8006560:	6809      	ldr	r1, [r1, #0]
 8006562:	8809      	ldrh	r1, [r1, #0]
 8006564:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	492f      	ldr	r1, [pc, #188]	; (8006628 <uart_comms+0x5a4>)
 800656a:	8809      	ldrh	r1, [r1, #0]
 800656c:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 800656e:	681c      	ldr	r4, [r3, #0]
 8006570:	4620      	mov	r0, r4
 8006572:	f7f9 fe2d 	bl	80001d0 <strlen>
 8006576:	b282      	uxth	r2, r0
 8006578:	4621      	mov	r1, r4
 800657a:	482c      	ldr	r0, [pc, #176]	; (800662c <uart_comms+0x5a8>)
 800657c:	f7fd fb98 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 8006580:	e5e7      	b.n	8006152 <uart_comms+0xce>
				heating_info = strtok((char*)uart_command_copy, ",");
 8006582:	4d30      	ldr	r5, [pc, #192]	; (8006644 <uart_comms+0x5c0>)
 8006584:	4629      	mov	r1, r5
 8006586:	f000 fc17 	bl	8006db8 <strtok>
 800658a:	4c2c      	ldr	r4, [pc, #176]	; (800663c <uart_comms+0x5b8>)
 800658c:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 800658e:	4629      	mov	r1, r5
 8006590:	2000      	movs	r0, #0
 8006592:	f000 fc11 	bl	8006db8 <strtok>
 8006596:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 8006598:	4629      	mov	r1, r5
 800659a:	2000      	movs	r0, #0
 800659c:	f000 fc0c 	bl	8006db8 <strtok>
 80065a0:	6020      	str	r0, [r4, #0]
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 80065a2:	220a      	movs	r2, #10
 80065a4:	2100      	movs	r1, #0
 80065a6:	f000 fcdb 	bl	8006f60 <strtol>
 80065aa:	4e2b      	ldr	r6, [pc, #172]	; (8006658 <uart_comms+0x5d4>)
 80065ac:	7030      	strb	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 80065ae:	4629      	mov	r1, r5
 80065b0:	2000      	movs	r0, #0
 80065b2:	f000 fc01 	bl	8006db8 <strtok>
 80065b6:	6020      	str	r0, [r4, #0]
				heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 80065b8:	220a      	movs	r2, #10
 80065ba:	2100      	movs	r1, #0
 80065bc:	f000 fcd0 	bl	8006f60 <strtol>
 80065c0:	7070      	strb	r0, [r6, #1]
				heating_info = (strtok(NULL, ","));
 80065c2:	4629      	mov	r1, r5
 80065c4:	2000      	movs	r0, #0
 80065c6:	f000 fbf7 	bl	8006db8 <strtok>
 80065ca:	6020      	str	r0, [r4, #0]
				heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 80065cc:	220a      	movs	r2, #10
 80065ce:	2100      	movs	r1, #0
 80065d0:	f000 fcc6 	bl	8006f60 <strtol>
 80065d4:	70b0      	strb	r0, [r6, #2]
				heating_info = (strtok(NULL, ","));
 80065d6:	4629      	mov	r1, r5
 80065d8:	2000      	movs	r0, #0
 80065da:	f000 fbed 	bl	8006db8 <strtok>
 80065de:	6020      	str	r0, [r4, #0]
				heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 80065e0:	220a      	movs	r2, #10
 80065e2:	2100      	movs	r1, #0
 80065e4:	f000 fcbc 	bl	8006f60 <strtol>
 80065e8:	7530      	strb	r0, [r6, #20]
				heating_info = (strtok(NULL, ","));
 80065ea:	4629      	mov	r1, r5
 80065ec:	2000      	movs	r0, #0
 80065ee:	f000 fbe3 	bl	8006db8 <strtok>
 80065f2:	6020      	str	r0, [r4, #0]
				heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 80065f4:	220a      	movs	r2, #10
 80065f6:	2100      	movs	r1, #0
 80065f8:	f000 fcb2 	bl	8006f60 <strtol>
 80065fc:	7570      	strb	r0, [r6, #21]
				heating_info = (strtok(NULL, "\r\n"));
 80065fe:	4917      	ldr	r1, [pc, #92]	; (800665c <uart_comms+0x5d8>)
 8006600:	2000      	movs	r0, #0
 8006602:	f000 fbd9 	bl	8006db8 <strtok>
 8006606:	6020      	str	r0, [r4, #0]
				heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8006608:	220a      	movs	r2, #10
 800660a:	2100      	movs	r1, #0
 800660c:	f000 fca8 	bl	8006f60 <strtol>
 8006610:	75b0      	strb	r0, [r6, #22]
 8006612:	e7a2      	b.n	800655a <uart_comms+0x4d6>
 8006614:	200002d8 	.word	0x200002d8
 8006618:	20000004 	.word	0x20000004
 800661c:	200002e4 	.word	0x200002e4
 8006620:	200002f0 	.word	0x200002f0
 8006624:	08007934 	.word	0x08007934
 8006628:	20000008 	.word	0x20000008
 800662c:	20000438 	.word	0x20000438
 8006630:	200004a8 	.word	0x200004a8
 8006634:	0800796c 	.word	0x0800796c
 8006638:	20000300 	.word	0x20000300
 800663c:	200002b4 	.word	0x200002b4
 8006640:	200002f4 	.word	0x200002f4
 8006644:	08007970 	.word	0x08007970
 8006648:	08007974 	.word	0x08007974
 800664c:	20000284 	.word	0x20000284
 8006650:	200002fc 	.word	0x200002fc
 8006654:	200002ec 	.word	0x200002ec
 8006658:	20000528 	.word	0x20000528
 800665c:	08007978 	.word	0x08007978
				heating_info = strtok((char*)uart_command_copy, ",");
 8006660:	4dc9      	ldr	r5, [pc, #804]	; (8006988 <uart_comms+0x904>)
 8006662:	4629      	mov	r1, r5
 8006664:	f000 fba8 	bl	8006db8 <strtok>
 8006668:	4cc8      	ldr	r4, [pc, #800]	; (800698c <uart_comms+0x908>)
 800666a:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 800666c:	4629      	mov	r1, r5
 800666e:	2000      	movs	r0, #0
 8006670:	f000 fba2 	bl	8006db8 <strtok>
 8006674:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 8006676:	4629      	mov	r1, r5
 8006678:	2000      	movs	r0, #0
 800667a:	f000 fb9d 	bl	8006db8 <strtok>
 800667e:	6020      	str	r0, [r4, #0]
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8006680:	220a      	movs	r2, #10
 8006682:	2100      	movs	r1, #0
 8006684:	f000 fc6c 	bl	8006f60 <strtol>
 8006688:	4ec1      	ldr	r6, [pc, #772]	; (8006990 <uart_comms+0x90c>)
 800668a:	f886 0028 	strb.w	r0, [r6, #40]	; 0x28
				heating_info = (strtok(NULL, ","));
 800668e:	4629      	mov	r1, r5
 8006690:	2000      	movs	r0, #0
 8006692:	f000 fb91 	bl	8006db8 <strtok>
 8006696:	6020      	str	r0, [r4, #0]
				heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8006698:	220a      	movs	r2, #10
 800669a:	2100      	movs	r1, #0
 800669c:	f000 fc60 	bl	8006f60 <strtol>
 80066a0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
				heating_info = (strtok(NULL, ","));
 80066a4:	4629      	mov	r1, r5
 80066a6:	2000      	movs	r0, #0
 80066a8:	f000 fb86 	bl	8006db8 <strtok>
 80066ac:	6020      	str	r0, [r4, #0]
				heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 80066ae:	220a      	movs	r2, #10
 80066b0:	2100      	movs	r1, #0
 80066b2:	f000 fc55 	bl	8006f60 <strtol>
 80066b6:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
				heating_info = (strtok(NULL, ","));
 80066ba:	4629      	mov	r1, r5
 80066bc:	2000      	movs	r0, #0
 80066be:	f000 fb7b 	bl	8006db8 <strtok>
 80066c2:	6020      	str	r0, [r4, #0]
				heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 80066c4:	220a      	movs	r2, #10
 80066c6:	2100      	movs	r1, #0
 80066c8:	f000 fc4a 	bl	8006f60 <strtol>
 80066cc:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
				heating_info = (strtok(NULL, ","));
 80066d0:	4629      	mov	r1, r5
 80066d2:	2000      	movs	r0, #0
 80066d4:	f000 fb70 	bl	8006db8 <strtok>
 80066d8:	6020      	str	r0, [r4, #0]
				heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 80066da:	220a      	movs	r2, #10
 80066dc:	2100      	movs	r1, #0
 80066de:	f000 fc3f 	bl	8006f60 <strtol>
 80066e2:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
				heating_info = (strtok(NULL, "\r\n"));
 80066e6:	49ab      	ldr	r1, [pc, #684]	; (8006994 <uart_comms+0x910>)
 80066e8:	2000      	movs	r0, #0
 80066ea:	f000 fb65 	bl	8006db8 <strtok>
 80066ee:	6020      	str	r0, [r4, #0]
				heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 80066f0:	220a      	movs	r2, #10
 80066f2:	2100      	movs	r1, #0
 80066f4:	f000 fc34 	bl	8006f60 <strtol>
 80066f8:	f886 003e 	strb.w	r0, [r6, #62]	; 0x3e
 80066fc:	e72d      	b.n	800655a <uart_comms+0x4d6>
				heating_info = strtok((char*)uart_command_copy, ",");
 80066fe:	4da2      	ldr	r5, [pc, #648]	; (8006988 <uart_comms+0x904>)
 8006700:	4629      	mov	r1, r5
 8006702:	f000 fb59 	bl	8006db8 <strtok>
 8006706:	4ca1      	ldr	r4, [pc, #644]	; (800698c <uart_comms+0x908>)
 8006708:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 800670a:	4629      	mov	r1, r5
 800670c:	2000      	movs	r0, #0
 800670e:	f000 fb53 	bl	8006db8 <strtok>
 8006712:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 8006714:	4629      	mov	r1, r5
 8006716:	2000      	movs	r0, #0
 8006718:	f000 fb4e 	bl	8006db8 <strtok>
 800671c:	6020      	str	r0, [r4, #0]
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 800671e:	220a      	movs	r2, #10
 8006720:	2100      	movs	r1, #0
 8006722:	f000 fc1d 	bl	8006f60 <strtol>
 8006726:	4e9a      	ldr	r6, [pc, #616]	; (8006990 <uart_comms+0x90c>)
 8006728:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
				heating_info = (strtok(NULL, ","));
 800672c:	4629      	mov	r1, r5
 800672e:	2000      	movs	r0, #0
 8006730:	f000 fb42 	bl	8006db8 <strtok>
 8006734:	6020      	str	r0, [r4, #0]
				heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8006736:	220a      	movs	r2, #10
 8006738:	2100      	movs	r1, #0
 800673a:	f000 fc11 	bl	8006f60 <strtol>
 800673e:	f886 0051 	strb.w	r0, [r6, #81]	; 0x51
				heating_info = (strtok(NULL, ","));
 8006742:	4629      	mov	r1, r5
 8006744:	2000      	movs	r0, #0
 8006746:	f000 fb37 	bl	8006db8 <strtok>
 800674a:	6020      	str	r0, [r4, #0]
				heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 800674c:	220a      	movs	r2, #10
 800674e:	2100      	movs	r1, #0
 8006750:	f000 fc06 	bl	8006f60 <strtol>
 8006754:	f886 0052 	strb.w	r0, [r6, #82]	; 0x52
				heating_info = (strtok(NULL, ","));
 8006758:	4629      	mov	r1, r5
 800675a:	2000      	movs	r0, #0
 800675c:	f000 fb2c 	bl	8006db8 <strtok>
 8006760:	6020      	str	r0, [r4, #0]
				heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8006762:	220a      	movs	r2, #10
 8006764:	2100      	movs	r1, #0
 8006766:	f000 fbfb 	bl	8006f60 <strtol>
 800676a:	f886 0064 	strb.w	r0, [r6, #100]	; 0x64
				heating_info = (strtok(NULL, ","));
 800676e:	4629      	mov	r1, r5
 8006770:	2000      	movs	r0, #0
 8006772:	f000 fb21 	bl	8006db8 <strtok>
 8006776:	6020      	str	r0, [r4, #0]
				heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 8006778:	220a      	movs	r2, #10
 800677a:	2100      	movs	r1, #0
 800677c:	f000 fbf0 	bl	8006f60 <strtol>
 8006780:	f886 0065 	strb.w	r0, [r6, #101]	; 0x65
				heating_info = (strtok(NULL, "\r\n"));
 8006784:	4983      	ldr	r1, [pc, #524]	; (8006994 <uart_comms+0x910>)
 8006786:	2000      	movs	r0, #0
 8006788:	f000 fb16 	bl	8006db8 <strtok>
 800678c:	6020      	str	r0, [r4, #0]
				heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 800678e:	220a      	movs	r2, #10
 8006790:	2100      	movs	r1, #0
 8006792:	f000 fbe5 	bl	8006f60 <strtol>
 8006796:	f886 0066 	strb.w	r0, [r6, #102]	; 0x66
 800679a:	e6de      	b.n	800655a <uart_comms+0x4d6>
			memcpy(return_value, uart_command, 2);
 800679c:	4c7e      	ldr	r4, [pc, #504]	; (8006998 <uart_comms+0x914>)
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	8802      	ldrh	r2, [r0, #0]
 80067a2:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	4d7d      	ldr	r5, [pc, #500]	; (800699c <uart_comms+0x918>)
 80067a8:	782f      	ldrb	r7, [r5, #0]
 80067aa:	709f      	strb	r7, [r3, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 80067ac:	6826      	ldr	r6, [r4, #0]
 80067ae:	3603      	adds	r6, #3
 80067b0:	4b7b      	ldr	r3, [pc, #492]	; (80069a0 <uart_comms+0x91c>)
 80067b2:	f8d3 8000 	ldr.w	r8, [r3]
 80067b6:	4640      	mov	r0, r8
 80067b8:	f7f9 fd0a 	bl	80001d0 <strlen>
 80067bc:	4602      	mov	r2, r0
 80067be:	4641      	mov	r1, r8
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 fa05 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80067c6:	6826      	ldr	r6, [r4, #0]
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7f9 fd01 	bl	80001d0 <strlen>
 80067ce:	5437      	strb	r7, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 80067d0:	6826      	ldr	r6, [r4, #0]
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7f9 fcfc 	bl	80001d0 <strlen>
 80067d8:	4406      	add	r6, r0
 80067da:	4b72      	ldr	r3, [pc, #456]	; (80069a4 <uart_comms+0x920>)
 80067dc:	681f      	ldr	r7, [r3, #0]
 80067de:	4638      	mov	r0, r7
 80067e0:	f7f9 fcf6 	bl	80001d0 <strlen>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4639      	mov	r1, r7
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 f9f1 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80067ee:	6826      	ldr	r6, [r4, #0]
 80067f0:	4630      	mov	r0, r6
 80067f2:	f7f9 fced 	bl	80001d0 <strlen>
 80067f6:	782b      	ldrb	r3, [r5, #0]
 80067f8:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 80067fa:	6826      	ldr	r6, [r4, #0]
 80067fc:	4630      	mov	r0, r6
 80067fe:	f7f9 fce7 	bl	80001d0 <strlen>
 8006802:	4406      	add	r6, r0
 8006804:	4b68      	ldr	r3, [pc, #416]	; (80069a8 <uart_comms+0x924>)
 8006806:	681f      	ldr	r7, [r3, #0]
 8006808:	4638      	mov	r0, r7
 800680a:	f7f9 fce1 	bl	80001d0 <strlen>
 800680e:	4602      	mov	r2, r0
 8006810:	4639      	mov	r1, r7
 8006812:	4630      	mov	r0, r6
 8006814:	f000 f9dc 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006818:	6826      	ldr	r6, [r4, #0]
 800681a:	4630      	mov	r0, r6
 800681c:	f7f9 fcd8 	bl	80001d0 <strlen>
 8006820:	782b      	ldrb	r3, [r5, #0]
 8006822:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 8006824:	6826      	ldr	r6, [r4, #0]
 8006826:	4630      	mov	r0, r6
 8006828:	f7f9 fcd2 	bl	80001d0 <strlen>
 800682c:	4406      	add	r6, r0
 800682e:	4b5f      	ldr	r3, [pc, #380]	; (80069ac <uart_comms+0x928>)
 8006830:	681f      	ldr	r7, [r3, #0]
 8006832:	4638      	mov	r0, r7
 8006834:	f7f9 fccc 	bl	80001d0 <strlen>
 8006838:	4602      	mov	r2, r0
 800683a:	4639      	mov	r1, r7
 800683c:	4630      	mov	r0, r6
 800683e:	f000 f9c7 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006842:	6826      	ldr	r6, [r4, #0]
 8006844:	4630      	mov	r0, r6
 8006846:	f7f9 fcc3 	bl	80001d0 <strlen>
 800684a:	782b      	ldrb	r3, [r5, #0]
 800684c:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 800684e:	6826      	ldr	r6, [r4, #0]
 8006850:	4630      	mov	r0, r6
 8006852:	f7f9 fcbd 	bl	80001d0 <strlen>
 8006856:	4406      	add	r6, r0
 8006858:	4b55      	ldr	r3, [pc, #340]	; (80069b0 <uart_comms+0x92c>)
 800685a:	681f      	ldr	r7, [r3, #0]
 800685c:	4638      	mov	r0, r7
 800685e:	f7f9 fcb7 	bl	80001d0 <strlen>
 8006862:	4602      	mov	r2, r0
 8006864:	4639      	mov	r1, r7
 8006866:	4630      	mov	r0, r6
 8006868:	f000 f9b2 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800686c:	6826      	ldr	r6, [r4, #0]
 800686e:	4630      	mov	r0, r6
 8006870:	f7f9 fcae 	bl	80001d0 <strlen>
 8006874:	782b      	ldrb	r3, [r5, #0]
 8006876:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8006878:	6826      	ldr	r6, [r4, #0]
 800687a:	4630      	mov	r0, r6
 800687c:	f7f9 fca8 	bl	80001d0 <strlen>
 8006880:	4406      	add	r6, r0
 8006882:	4b4c      	ldr	r3, [pc, #304]	; (80069b4 <uart_comms+0x930>)
 8006884:	681f      	ldr	r7, [r3, #0]
 8006886:	4638      	mov	r0, r7
 8006888:	f7f9 fca2 	bl	80001d0 <strlen>
 800688c:	4602      	mov	r2, r0
 800688e:	4639      	mov	r1, r7
 8006890:	4630      	mov	r0, r6
 8006892:	f000 f99d 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006896:	6824      	ldr	r4, [r4, #0]
 8006898:	4620      	mov	r0, r4
 800689a:	f7f9 fc99 	bl	80001d0 <strlen>
 800689e:	782b      	ldrb	r3, [r5, #0]
 80068a0:	5423      	strb	r3, [r4, r0]
			if(valve_state == valve_OPEN){
 80068a2:	4b45      	ldr	r3, [pc, #276]	; (80069b8 <uart_comms+0x934>)
 80068a4:	681c      	ldr	r4, [r3, #0]
 80068a6:	4b45      	ldr	r3, [pc, #276]	; (80069bc <uart_comms+0x938>)
 80068a8:	429c      	cmp	r4, r3
 80068aa:	d01f      	beq.n	80068ec <uart_comms+0x868>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 80068ac:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <uart_comms+0x914>)
 80068ae:	681d      	ldr	r5, [r3, #0]
 80068b0:	4628      	mov	r0, r5
 80068b2:	f7f9 fc8d 	bl	80001d0 <strlen>
 80068b6:	4405      	add	r5, r0
 80068b8:	4620      	mov	r0, r4
 80068ba:	f7f9 fc89 	bl	80001d0 <strlen>
 80068be:	4602      	mov	r2, r0
 80068c0:	4621      	mov	r1, r4
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 f984 	bl	8006bd0 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 80068c8:	4c33      	ldr	r4, [pc, #204]	; (8006998 <uart_comms+0x914>)
 80068ca:	6825      	ldr	r5, [r4, #0]
 80068cc:	4628      	mov	r0, r5
 80068ce:	f7f9 fc7f 	bl	80001d0 <strlen>
 80068d2:	4b3b      	ldr	r3, [pc, #236]	; (80069c0 <uart_comms+0x93c>)
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80068d8:	6824      	ldr	r4, [r4, #0]
 80068da:	4620      	mov	r0, r4
 80068dc:	f7f9 fc78 	bl	80001d0 <strlen>
 80068e0:	b282      	uxth	r2, r0
 80068e2:	4621      	mov	r1, r4
 80068e4:	4837      	ldr	r0, [pc, #220]	; (80069c4 <uart_comms+0x940>)
 80068e6:	f7fd f9e3 	bl	8003cb0 <HAL_UART_Transmit_IT>
			break;
 80068ea:	e432      	b.n	8006152 <uart_comms+0xce>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 80068ec:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <uart_comms+0x914>)
 80068ee:	681d      	ldr	r5, [r3, #0]
 80068f0:	4628      	mov	r0, r5
 80068f2:	f7f9 fc6d 	bl	80001d0 <strlen>
 80068f6:	4405      	add	r5, r0
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7f9 fc69 	bl	80001d0 <strlen>
 80068fe:	1e42      	subs	r2, r0, #1
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f964 	bl	8006bd0 <memcpy>
 8006908:	e7de      	b.n	80068c8 <uart_comms+0x844>
			memset(log_receiced_num,0x00,2);
 800690a:	4c2f      	ldr	r4, [pc, #188]	; (80069c8 <uart_comms+0x944>)
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	2600      	movs	r6, #0
 8006910:	801e      	strh	r6, [r3, #0]
			memcpy(log_receiced_num,(uart_command+3), strlen((char*)uart_command)-5);
 8006912:	4b2e      	ldr	r3, [pc, #184]	; (80069cc <uart_comms+0x948>)
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	1cc5      	adds	r5, r0, #3
 8006918:	f7f9 fc5a 	bl	80001d0 <strlen>
 800691c:	1f42      	subs	r2, r0, #5
 800691e:	4629      	mov	r1, r5
 8006920:	6820      	ldr	r0, [r4, #0]
 8006922:	f000 f955 	bl	8006bd0 <memcpy>
			*log_receiced_num = strtol((char*)log_receiced_num,NULL,10);
 8006926:	6825      	ldr	r5, [r4, #0]
 8006928:	220a      	movs	r2, #10
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	f000 fb17 	bl	8006f60 <strtol>
 8006932:	7028      	strb	r0, [r5, #0]
			if(*log_receiced_num >= log_counter || log_empty){
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <uart_comms+0x94c>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d202      	bcs.n	8006946 <uart_comms+0x8c2>
 8006940:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <uart_comms+0x950>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	b1f3      	cbz	r3, 8006984 <uart_comms+0x900>
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)noLoggingData, strlen((char*)noLoggingData));
 8006946:	4c24      	ldr	r4, [pc, #144]	; (80069d8 <uart_comms+0x954>)
 8006948:	4620      	mov	r0, r4
 800694a:	f7f9 fc41 	bl	80001d0 <strlen>
 800694e:	b282      	uxth	r2, r0
 8006950:	4621      	mov	r1, r4
 8006952:	481c      	ldr	r0, [pc, #112]	; (80069c4 <uart_comms+0x940>)
 8006954:	f7fd f9ac 	bl	8003cb0 <HAL_UART_Transmit_IT>
 8006958:	f7ff bbfb 	b.w	8006152 <uart_comms+0xce>
					HAL_UART_Transmit_IT(&huart1,(uint8_t*)(flash_mem_start+64*(*log_receiced_num)), strlen((char*)(flash_mem_start+64*(*log_receiced_num))));
 800695c:	4a1f      	ldr	r2, [pc, #124]	; (80069dc <uart_comms+0x958>)
 800695e:	6814      	ldr	r4, [r2, #0]
 8006960:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 8006964:	4620      	mov	r0, r4
 8006966:	f7f9 fc33 	bl	80001d0 <strlen>
 800696a:	b282      	uxth	r2, r0
 800696c:	4621      	mov	r1, r4
 800696e:	4815      	ldr	r0, [pc, #84]	; (80069c4 <uart_comms+0x940>)
 8006970:	f7fd f99e 	bl	8003cb0 <HAL_UART_Transmit_IT>
				for(int i = 0; i<=*log_receiced_num;i++){
 8006974:	3501      	adds	r5, #1
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <uart_comms+0x944>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	429d      	cmp	r5, r3
 800697e:	dded      	ble.n	800695c <uart_comms+0x8d8>
 8006980:	f7ff bbe7 	b.w	8006152 <uart_comms+0xce>
 8006984:	2500      	movs	r5, #0
 8006986:	e7f6      	b.n	8006976 <uart_comms+0x8f2>
 8006988:	08007970 	.word	0x08007970
 800698c:	200002b4 	.word	0x200002b4
 8006990:	20000528 	.word	0x20000528
 8006994:	08007978 	.word	0x08007978
 8006998:	200002d8 	.word	0x200002d8
 800699c:	20000004 	.word	0x20000004
 80069a0:	20000280 	.word	0x20000280
 80069a4:	20000314 	.word	0x20000314
 80069a8:	20000274 	.word	0x20000274
 80069ac:	2000029c 	.word	0x2000029c
 80069b0:	200002f8 	.word	0x200002f8
 80069b4:	200002b0 	.word	0x200002b0
 80069b8:	20000308 	.word	0x20000308
 80069bc:	20000054 	.word	0x20000054
 80069c0:	20000008 	.word	0x20000008
 80069c4:	20000438 	.word	0x20000438
 80069c8:	200002c0 	.word	0x200002c0
 80069cc:	200002fc 	.word	0x200002fc
 80069d0:	200002bc 	.word	0x200002bc
 80069d4:	2000001b 	.word	0x2000001b
 80069d8:	20000020 	.word	0x20000020
 80069dc:	20000010 	.word	0x20000010

080069e0 <mainLoop>:
ADC_ChannelConfTypeDef Channel_4;
extern uint32_t uwTick;



void mainLoop(){
 80069e0:	b538      	push	{r3, r4, r5, lr}
	  if(rx_flag == 1 ){ 	// UART Comms
 80069e2:	4b36      	ldr	r3, [pc, #216]	; (8006abc <mainLoop+0xdc>)
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	2a01      	cmp	r2, #1
 80069e8:	d055      	beq.n	8006a96 <mainLoop+0xb6>
		  rx_flag = 0;
		  uart_comms();
	  }

	  // Seven Segment
	  if(systick_flag == 1 && uwTick%10){
 80069ea:	4a35      	ldr	r2, [pc, #212]	; (8006ac0 <mainLoop+0xe0>)
 80069ec:	7813      	ldrb	r3, [r2, #0]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d031      	beq.n	8006a56 <mainLoop+0x76>
 80069f2:	4d34      	ldr	r5, [pc, #208]	; (8006ac4 <mainLoop+0xe4>)
		  seven_segment();


	  }

	  if(i2c_counter == 250){
 80069f4:	682b      	ldr	r3, [r5, #0]
		  i2c_counter = 0;
		  touch_flag = 0;
 80069f6:	4c34      	ldr	r4, [pc, #208]	; (8006ac8 <mainLoop+0xe8>)
	  if(i2c_counter == 250){
 80069f8:	2bfa      	cmp	r3, #250	; 0xfa
 80069fa:	d051      	beq.n	8006aa0 <mainLoop+0xc0>
		  handleEvents();
	  }

	  // ADC conversion
	  if(adc_flag == 1){
 80069fc:	4b33      	ldr	r3, [pc, #204]	; (8006acc <mainLoop+0xec>)
 80069fe:	781a      	ldrb	r2, [r3, #0]
 8006a00:	2a01      	cmp	r2, #1
 8006a02:	d056      	beq.n	8006ab2 <mainLoop+0xd2>
		  adc_flag = 0;
		  adc_comms();
	  }
	  // Nothing at the moment
	  if(touch_flag == 1 ){
 8006a04:	7823      	ldrb	r3, [r4, #0]
 8006a06:	2b01      	cmp	r3, #1
		  touch_flag = 0;
 8006a08:	bf04      	itt	eq
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	7023      	strbeq	r3, [r4, #0]
	  }
	  // scheduling of heating and RTC
	  if(RTC_timer_flag == 1){
 8006a0e:	4b30      	ldr	r3, [pc, #192]	; (8006ad0 <mainLoop+0xf0>)
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	2a01      	cmp	r2, #1
 8006a14:	d011      	beq.n	8006a3a <mainLoop+0x5a>
			  heating_scheduling();
		  }
	  }

	  // Writing to FLASH
	  if(flash_flag){
 8006a16:	4b2f      	ldr	r3, [pc, #188]	; (8006ad4 <mainLoop+0xf4>)
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	b14a      	cbz	r2, 8006a30 <mainLoop+0x50>
		  flash_flag = 0;
		  flash_counter += 1;
 8006a1c:	492e      	ldr	r1, [pc, #184]	; (8006ad8 <mainLoop+0xf8>)
 8006a1e:	680a      	ldr	r2, [r1, #0]
		  if(flash_counter == 10000){
 8006a20:	f242 7410 	movw	r4, #10000	; 0x2710
		  flash_counter += 1;
 8006a24:	3201      	adds	r2, #1
		  flash_flag = 0;
 8006a26:	2000      	movs	r0, #0
		  if(flash_counter == 10000){
 8006a28:	42a2      	cmp	r2, r4
		  flash_flag = 0;
 8006a2a:	7018      	strb	r0, [r3, #0]
		  if(flash_counter == 10000){
 8006a2c:	d027      	beq.n	8006a7e <mainLoop+0x9e>
		  flash_counter += 1;
 8006a2e:	600a      	str	r2, [r1, #0]
			  write2Flash();
		  	  }
		  }
	  }
	  // Pumping is occurring
	  if(pump_flag == 1){
 8006a30:	4b2a      	ldr	r3, [pc, #168]	; (8006adc <mainLoop+0xfc>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d02a      	beq.n	8006a8e <mainLoop+0xae>
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
		  fake_RTC_timer += 1;
 8006a3a:	4929      	ldr	r1, [pc, #164]	; (8006ae0 <mainLoop+0x100>)
 8006a3c:	880a      	ldrh	r2, [r1, #0]
 8006a3e:	3201      	adds	r2, #1
 8006a40:	b292      	uxth	r2, r2
		  RTC_timer_flag = 0;
 8006a42:	2000      	movs	r0, #0
		  if(fake_RTC_timer == 1000){
 8006a44:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
		  fake_RTC_timer += 1;
 8006a48:	800a      	strh	r2, [r1, #0]
		  RTC_timer_flag = 0;
 8006a4a:	7018      	strb	r0, [r3, #0]
		  if(fake_RTC_timer == 1000){
 8006a4c:	d1e3      	bne.n	8006a16 <mainLoop+0x36>
			  fake_RTC_timer = 0;
 8006a4e:	8008      	strh	r0, [r1, #0]
			  heating_scheduling();
 8006a50:	f7fe f858 	bl	8004b04 <heating_scheduling>
 8006a54:	e7df      	b.n	8006a16 <mainLoop+0x36>
	  if(systick_flag == 1 && uwTick%10){
 8006a56:	4923      	ldr	r1, [pc, #140]	; (8006ae4 <mainLoop+0x104>)
 8006a58:	4b23      	ldr	r3, [pc, #140]	; (8006ae8 <mainLoop+0x108>)
 8006a5a:	6809      	ldr	r1, [r1, #0]
		  i2c_counter += 1;
 8006a5c:	4d19      	ldr	r5, [pc, #100]	; (8006ac4 <mainLoop+0xe4>)
	  if(systick_flag == 1 && uwTick%10){
 8006a5e:	fba3 0301 	umull	r0, r3, r3, r1
 8006a62:	08db      	lsrs	r3, r3, #3
 8006a64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a68:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8006a6c:	d0c2      	beq.n	80069f4 <mainLoop+0x14>
		  i2c_counter += 1;
 8006a6e:	682b      	ldr	r3, [r5, #0]
		  systick_flag = 0;
 8006a70:	2100      	movs	r1, #0
		  i2c_counter += 1;
 8006a72:	3301      	adds	r3, #1
 8006a74:	602b      	str	r3, [r5, #0]
		  systick_flag = 0;
 8006a76:	7011      	strb	r1, [r2, #0]
		  seven_segment();
 8006a78:	f7fe fee6 	bl	8005848 <seven_segment>
 8006a7c:	e7ba      	b.n	80069f4 <mainLoop+0x14>
			  if(enableFlashLogging){
 8006a7e:	4b1b      	ldr	r3, [pc, #108]	; (8006aec <mainLoop+0x10c>)
			  flash_counter = 0;
 8006a80:	6008      	str	r0, [r1, #0]
			  if(enableFlashLogging){
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0d3      	beq.n	8006a30 <mainLoop+0x50>
			  write2Flash();
 8006a88:	f7fd fd88 	bl	800459c <write2Flash>
 8006a8c:	e7d0      	b.n	8006a30 <mainLoop+0x50>
		  liters_pumped();
	  }



}
 8006a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  liters_pumped();
 8006a92:	f7fe bc7d 	b.w	8005390 <liters_pumped>
		  rx_flag = 0;
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8006a9a:	f7ff faf3 	bl	8006084 <uart_comms>
 8006a9e:	e7a4      	b.n	80069ea <mainLoop+0xa>
		  i2c_counter = 0;
 8006aa0:	2300      	movs	r3, #0
		  touch_flag = 0;
 8006aa2:	7023      	strb	r3, [r4, #0]
		  i2c_counter = 0;
 8006aa4:	602b      	str	r3, [r5, #0]
		  handleEvents();
 8006aa6:	f7fe fa9d 	bl	8004fe4 <handleEvents>
	  if(adc_flag == 1){
 8006aaa:	4b08      	ldr	r3, [pc, #32]	; (8006acc <mainLoop+0xec>)
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	2a01      	cmp	r2, #1
 8006ab0:	d1a8      	bne.n	8006a04 <mainLoop+0x24>
		  adc_flag = 0;
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8006ab6:	f7fd fc45 	bl	8004344 <adc_comms>
 8006aba:	e7a3      	b.n	8006a04 <mainLoop+0x24>
 8006abc:	200002dd 	.word	0x200002dd
 8006ac0:	200002e9 	.word	0x200002e9
 8006ac4:	200002b8 	.word	0x200002b8
 8006ac8:	20000048 	.word	0x20000048
 8006acc:	2000026a 	.word	0x2000026a
 8006ad0:	20000254 	.word	0x20000254
 8006ad4:	20000294 	.word	0x20000294
 8006ad8:	2000028c 	.word	0x2000028c
 8006adc:	200002cc 	.word	0x200002cc
 8006ae0:	2000028a 	.word	0x2000028a
 8006ae4:	20000328 	.word	0x20000328
 8006ae8:	cccccccd 	.word	0xcccccccd
 8006aec:	20000289 	.word	0x20000289

08006af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006af4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006af6:	e003      	b.n	8006b00 <LoopCopyDataInit>

08006af8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006afa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006afc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006afe:	3104      	adds	r1, #4

08006b00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006b00:	480b      	ldr	r0, [pc, #44]	; (8006b30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006b02:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006b04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006b06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006b08:	d3f6      	bcc.n	8006af8 <CopyDataInit>
	ldr	r2, =_sbss
 8006b0a:	4a0b      	ldr	r2, [pc, #44]	; (8006b38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006b0c:	e002      	b.n	8006b14 <LoopFillZerobss>

08006b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006b0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006b10:	f842 3b04 	str.w	r3, [r2], #4

08006b14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <LoopForever+0x16>)
	cmp	r2, r3
 8006b16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006b18:	d3f9      	bcc.n	8006b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006b1a:	f7ff fa7b 	bl	8006014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b1e:	f000 f811 	bl	8006b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006b22:	f7fe fcab 	bl	800547c <main>

08006b26 <LoopForever>:

LoopForever:
    b LoopForever
 8006b26:	e7fe      	b.n	8006b26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b28:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006b2c:	08007aec 	.word	0x08007aec
	ldr	r0, =_sdata
 8006b30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006b34:	2000022c 	.word	0x2000022c
	ldr	r2, =_sbss
 8006b38:	20000230 	.word	0x20000230
	ldr	r3, = _ebss
 8006b3c:	200005ec 	.word	0x200005ec

08006b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006b40:	e7fe      	b.n	8006b40 <ADC1_2_IRQHandler>
	...

08006b44 <__libc_init_array>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4e0d      	ldr	r6, [pc, #52]	; (8006b7c <__libc_init_array+0x38>)
 8006b48:	4c0d      	ldr	r4, [pc, #52]	; (8006b80 <__libc_init_array+0x3c>)
 8006b4a:	1ba4      	subs	r4, r4, r6
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	2500      	movs	r5, #0
 8006b50:	42a5      	cmp	r5, r4
 8006b52:	d109      	bne.n	8006b68 <__libc_init_array+0x24>
 8006b54:	4e0b      	ldr	r6, [pc, #44]	; (8006b84 <__libc_init_array+0x40>)
 8006b56:	4c0c      	ldr	r4, [pc, #48]	; (8006b88 <__libc_init_array+0x44>)
 8006b58:	f000 feca 	bl	80078f0 <_init>
 8006b5c:	1ba4      	subs	r4, r4, r6
 8006b5e:	10a4      	asrs	r4, r4, #2
 8006b60:	2500      	movs	r5, #0
 8006b62:	42a5      	cmp	r5, r4
 8006b64:	d105      	bne.n	8006b72 <__libc_init_array+0x2e>
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b6c:	4798      	blx	r3
 8006b6e:	3501      	adds	r5, #1
 8006b70:	e7ee      	b.n	8006b50 <__libc_init_array+0xc>
 8006b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b76:	4798      	blx	r3
 8006b78:	3501      	adds	r5, #1
 8006b7a:	e7f2      	b.n	8006b62 <__libc_init_array+0x1e>
 8006b7c:	08007ae4 	.word	0x08007ae4
 8006b80:	08007ae4 	.word	0x08007ae4
 8006b84:	08007ae4 	.word	0x08007ae4
 8006b88:	08007ae8 	.word	0x08007ae8

08006b8c <__itoa>:
 8006b8c:	1e93      	subs	r3, r2, #2
 8006b8e:	2b22      	cmp	r3, #34	; 0x22
 8006b90:	b510      	push	{r4, lr}
 8006b92:	460c      	mov	r4, r1
 8006b94:	d904      	bls.n	8006ba0 <__itoa+0x14>
 8006b96:	2300      	movs	r3, #0
 8006b98:	700b      	strb	r3, [r1, #0]
 8006b9a:	461c      	mov	r4, r3
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	bd10      	pop	{r4, pc}
 8006ba0:	2a0a      	cmp	r2, #10
 8006ba2:	d109      	bne.n	8006bb8 <__itoa+0x2c>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	da07      	bge.n	8006bb8 <__itoa+0x2c>
 8006ba8:	232d      	movs	r3, #45	; 0x2d
 8006baa:	700b      	strb	r3, [r1, #0]
 8006bac:	4240      	negs	r0, r0
 8006bae:	2101      	movs	r1, #1
 8006bb0:	4421      	add	r1, r4
 8006bb2:	f000 f9eb 	bl	8006f8c <__utoa>
 8006bb6:	e7f1      	b.n	8006b9c <__itoa+0x10>
 8006bb8:	2100      	movs	r1, #0
 8006bba:	e7f9      	b.n	8006bb0 <__itoa+0x24>

08006bbc <itoa>:
 8006bbc:	f7ff bfe6 	b.w	8006b8c <__itoa>

08006bc0 <malloc>:
 8006bc0:	4b02      	ldr	r3, [pc, #8]	; (8006bcc <malloc+0xc>)
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	f000 b865 	b.w	8006c94 <_malloc_r>
 8006bca:	bf00      	nop
 8006bcc:	20000058 	.word	0x20000058

08006bd0 <memcpy>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	1e43      	subs	r3, r0, #1
 8006bd4:	440a      	add	r2, r1
 8006bd6:	4291      	cmp	r1, r2
 8006bd8:	d100      	bne.n	8006bdc <memcpy+0xc>
 8006bda:	bd10      	pop	{r4, pc}
 8006bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006be4:	e7f7      	b.n	8006bd6 <memcpy+0x6>

08006be6 <memset>:
 8006be6:	4402      	add	r2, r0
 8006be8:	4603      	mov	r3, r0
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d100      	bne.n	8006bf0 <memset+0xa>
 8006bee:	4770      	bx	lr
 8006bf0:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf4:	e7f9      	b.n	8006bea <memset+0x4>
	...

08006bf8 <_free_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d045      	beq.n	8006c8c <_free_r+0x94>
 8006c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c04:	1f0c      	subs	r4, r1, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	bfb8      	it	lt
 8006c0a:	18e4      	addlt	r4, r4, r3
 8006c0c:	f000 fa13 	bl	8007036 <__malloc_lock>
 8006c10:	4a1f      	ldr	r2, [pc, #124]	; (8006c90 <_free_r+0x98>)
 8006c12:	6813      	ldr	r3, [r2, #0]
 8006c14:	4610      	mov	r0, r2
 8006c16:	b933      	cbnz	r3, 8006c26 <_free_r+0x2e>
 8006c18:	6063      	str	r3, [r4, #4]
 8006c1a:	6014      	str	r4, [r2, #0]
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c22:	f000 ba09 	b.w	8007038 <__malloc_unlock>
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	d90c      	bls.n	8006c44 <_free_r+0x4c>
 8006c2a:	6821      	ldr	r1, [r4, #0]
 8006c2c:	1862      	adds	r2, r4, r1
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	bf04      	itt	eq
 8006c32:	681a      	ldreq	r2, [r3, #0]
 8006c34:	685b      	ldreq	r3, [r3, #4]
 8006c36:	6063      	str	r3, [r4, #4]
 8006c38:	bf04      	itt	eq
 8006c3a:	1852      	addeq	r2, r2, r1
 8006c3c:	6022      	streq	r2, [r4, #0]
 8006c3e:	6004      	str	r4, [r0, #0]
 8006c40:	e7ec      	b.n	8006c1c <_free_r+0x24>
 8006c42:	4613      	mov	r3, r2
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	b10a      	cbz	r2, 8006c4c <_free_r+0x54>
 8006c48:	42a2      	cmp	r2, r4
 8006c4a:	d9fa      	bls.n	8006c42 <_free_r+0x4a>
 8006c4c:	6819      	ldr	r1, [r3, #0]
 8006c4e:	1858      	adds	r0, r3, r1
 8006c50:	42a0      	cmp	r0, r4
 8006c52:	d10b      	bne.n	8006c6c <_free_r+0x74>
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	4401      	add	r1, r0
 8006c58:	1858      	adds	r0, r3, r1
 8006c5a:	4282      	cmp	r2, r0
 8006c5c:	6019      	str	r1, [r3, #0]
 8006c5e:	d1dd      	bne.n	8006c1c <_free_r+0x24>
 8006c60:	6810      	ldr	r0, [r2, #0]
 8006c62:	6852      	ldr	r2, [r2, #4]
 8006c64:	605a      	str	r2, [r3, #4]
 8006c66:	4401      	add	r1, r0
 8006c68:	6019      	str	r1, [r3, #0]
 8006c6a:	e7d7      	b.n	8006c1c <_free_r+0x24>
 8006c6c:	d902      	bls.n	8006c74 <_free_r+0x7c>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	602b      	str	r3, [r5, #0]
 8006c72:	e7d3      	b.n	8006c1c <_free_r+0x24>
 8006c74:	6820      	ldr	r0, [r4, #0]
 8006c76:	1821      	adds	r1, r4, r0
 8006c78:	428a      	cmp	r2, r1
 8006c7a:	bf04      	itt	eq
 8006c7c:	6811      	ldreq	r1, [r2, #0]
 8006c7e:	6852      	ldreq	r2, [r2, #4]
 8006c80:	6062      	str	r2, [r4, #4]
 8006c82:	bf04      	itt	eq
 8006c84:	1809      	addeq	r1, r1, r0
 8006c86:	6021      	streq	r1, [r4, #0]
 8006c88:	605c      	str	r4, [r3, #4]
 8006c8a:	e7c7      	b.n	8006c1c <_free_r+0x24>
 8006c8c:	bd38      	pop	{r3, r4, r5, pc}
 8006c8e:	bf00      	nop
 8006c90:	2000031c 	.word	0x2000031c

08006c94 <_malloc_r>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	1ccd      	adds	r5, r1, #3
 8006c98:	f025 0503 	bic.w	r5, r5, #3
 8006c9c:	3508      	adds	r5, #8
 8006c9e:	2d0c      	cmp	r5, #12
 8006ca0:	bf38      	it	cc
 8006ca2:	250c      	movcc	r5, #12
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	db01      	blt.n	8006cae <_malloc_r+0x1a>
 8006caa:	42a9      	cmp	r1, r5
 8006cac:	d903      	bls.n	8006cb6 <_malloc_r+0x22>
 8006cae:	230c      	movs	r3, #12
 8006cb0:	6033      	str	r3, [r6, #0]
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
 8006cb6:	f000 f9be 	bl	8007036 <__malloc_lock>
 8006cba:	4a23      	ldr	r2, [pc, #140]	; (8006d48 <_malloc_r+0xb4>)
 8006cbc:	6814      	ldr	r4, [r2, #0]
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	b991      	cbnz	r1, 8006ce8 <_malloc_r+0x54>
 8006cc2:	4c22      	ldr	r4, [pc, #136]	; (8006d4c <_malloc_r+0xb8>)
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	b91b      	cbnz	r3, 8006cd0 <_malloc_r+0x3c>
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f000 f841 	bl	8006d50 <_sbrk_r>
 8006cce:	6020      	str	r0, [r4, #0]
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 f83c 	bl	8006d50 <_sbrk_r>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d126      	bne.n	8006d2a <_malloc_r+0x96>
 8006cdc:	230c      	movs	r3, #12
 8006cde:	6033      	str	r3, [r6, #0]
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f000 f9a9 	bl	8007038 <__malloc_unlock>
 8006ce6:	e7e4      	b.n	8006cb2 <_malloc_r+0x1e>
 8006ce8:	680b      	ldr	r3, [r1, #0]
 8006cea:	1b5b      	subs	r3, r3, r5
 8006cec:	d41a      	bmi.n	8006d24 <_malloc_r+0x90>
 8006cee:	2b0b      	cmp	r3, #11
 8006cf0:	d90f      	bls.n	8006d12 <_malloc_r+0x7e>
 8006cf2:	600b      	str	r3, [r1, #0]
 8006cf4:	50cd      	str	r5, [r1, r3]
 8006cf6:	18cc      	adds	r4, r1, r3
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 f99d 	bl	8007038 <__malloc_unlock>
 8006cfe:	f104 000b 	add.w	r0, r4, #11
 8006d02:	1d23      	adds	r3, r4, #4
 8006d04:	f020 0007 	bic.w	r0, r0, #7
 8006d08:	1ac3      	subs	r3, r0, r3
 8006d0a:	d01b      	beq.n	8006d44 <_malloc_r+0xb0>
 8006d0c:	425a      	negs	r2, r3
 8006d0e:	50e2      	str	r2, [r4, r3]
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	428c      	cmp	r4, r1
 8006d14:	bf0d      	iteet	eq
 8006d16:	6863      	ldreq	r3, [r4, #4]
 8006d18:	684b      	ldrne	r3, [r1, #4]
 8006d1a:	6063      	strne	r3, [r4, #4]
 8006d1c:	6013      	streq	r3, [r2, #0]
 8006d1e:	bf18      	it	ne
 8006d20:	460c      	movne	r4, r1
 8006d22:	e7e9      	b.n	8006cf8 <_malloc_r+0x64>
 8006d24:	460c      	mov	r4, r1
 8006d26:	6849      	ldr	r1, [r1, #4]
 8006d28:	e7ca      	b.n	8006cc0 <_malloc_r+0x2c>
 8006d2a:	1cc4      	adds	r4, r0, #3
 8006d2c:	f024 0403 	bic.w	r4, r4, #3
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	d005      	beq.n	8006d40 <_malloc_r+0xac>
 8006d34:	1a21      	subs	r1, r4, r0
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f80a 	bl	8006d50 <_sbrk_r>
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d0cd      	beq.n	8006cdc <_malloc_r+0x48>
 8006d40:	6025      	str	r5, [r4, #0]
 8006d42:	e7d9      	b.n	8006cf8 <_malloc_r+0x64>
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	bf00      	nop
 8006d48:	2000031c 	.word	0x2000031c
 8006d4c:	20000320 	.word	0x20000320

08006d50 <_sbrk_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4c06      	ldr	r4, [pc, #24]	; (8006d6c <_sbrk_r+0x1c>)
 8006d54:	2300      	movs	r3, #0
 8006d56:	4605      	mov	r5, r0
 8006d58:	4608      	mov	r0, r1
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	f000 fdba 	bl	80078d4 <_sbrk>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d102      	bne.n	8006d6a <_sbrk_r+0x1a>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	b103      	cbz	r3, 8006d6a <_sbrk_r+0x1a>
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	200005e8 	.word	0x200005e8

08006d70 <siprintf>:
 8006d70:	b40e      	push	{r1, r2, r3}
 8006d72:	b500      	push	{lr}
 8006d74:	b09c      	sub	sp, #112	; 0x70
 8006d76:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d7c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006d80:	9002      	str	r0, [sp, #8]
 8006d82:	9006      	str	r0, [sp, #24]
 8006d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d88:	480a      	ldr	r0, [pc, #40]	; (8006db4 <siprintf+0x44>)
 8006d8a:	9104      	str	r1, [sp, #16]
 8006d8c:	9107      	str	r1, [sp, #28]
 8006d8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d96:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	a902      	add	r1, sp, #8
 8006da0:	f000 f9a6 	bl	80070f0 <_svfiprintf_r>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	b01c      	add	sp, #112	; 0x70
 8006dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db0:	b003      	add	sp, #12
 8006db2:	4770      	bx	lr
 8006db4:	20000058 	.word	0x20000058

08006db8 <strtok>:
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <strtok+0x50>)
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	681d      	ldr	r5, [r3, #0]
 8006dc0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	b9b4      	cbnz	r4, 8006df6 <strtok+0x3e>
 8006dc8:	2050      	movs	r0, #80	; 0x50
 8006dca:	f7ff fef9 	bl	8006bc0 <malloc>
 8006dce:	65a8      	str	r0, [r5, #88]	; 0x58
 8006dd0:	6004      	str	r4, [r0, #0]
 8006dd2:	6044      	str	r4, [r0, #4]
 8006dd4:	6084      	str	r4, [r0, #8]
 8006dd6:	60c4      	str	r4, [r0, #12]
 8006dd8:	6104      	str	r4, [r0, #16]
 8006dda:	6144      	str	r4, [r0, #20]
 8006ddc:	6184      	str	r4, [r0, #24]
 8006dde:	6284      	str	r4, [r0, #40]	; 0x28
 8006de0:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006de2:	6304      	str	r4, [r0, #48]	; 0x30
 8006de4:	6344      	str	r4, [r0, #52]	; 0x34
 8006de6:	6384      	str	r4, [r0, #56]	; 0x38
 8006de8:	63c4      	str	r4, [r0, #60]	; 0x3c
 8006dea:	6404      	str	r4, [r0, #64]	; 0x40
 8006dec:	6444      	str	r4, [r0, #68]	; 0x44
 8006dee:	6484      	str	r4, [r0, #72]	; 0x48
 8006df0:	64c4      	str	r4, [r0, #76]	; 0x4c
 8006df2:	7704      	strb	r4, [r0, #28]
 8006df4:	6244      	str	r4, [r0, #36]	; 0x24
 8006df6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006df8:	4639      	mov	r1, r7
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	f000 b803 	b.w	8006e0c <__strtok_r>
 8006e06:	bf00      	nop
 8006e08:	20000058 	.word	0x20000058

08006e0c <__strtok_r>:
 8006e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0e:	b918      	cbnz	r0, 8006e18 <__strtok_r+0xc>
 8006e10:	6810      	ldr	r0, [r2, #0]
 8006e12:	b908      	cbnz	r0, 8006e18 <__strtok_r+0xc>
 8006e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e16:	4620      	mov	r0, r4
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460f      	mov	r7, r1
 8006e1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e20:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e24:	b91e      	cbnz	r6, 8006e2e <__strtok_r+0x22>
 8006e26:	b965      	cbnz	r5, 8006e42 <__strtok_r+0x36>
 8006e28:	6015      	str	r5, [r2, #0]
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2e:	42b5      	cmp	r5, r6
 8006e30:	d1f6      	bne.n	8006e20 <__strtok_r+0x14>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1ef      	bne.n	8006e16 <__strtok_r+0xa>
 8006e36:	6014      	str	r4, [r2, #0]
 8006e38:	7003      	strb	r3, [r0, #0]
 8006e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3c:	461c      	mov	r4, r3
 8006e3e:	e00c      	b.n	8006e5a <__strtok_r+0x4e>
 8006e40:	b915      	cbnz	r5, 8006e48 <__strtok_r+0x3c>
 8006e42:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e46:	460e      	mov	r6, r1
 8006e48:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	d1f7      	bne.n	8006e40 <__strtok_r+0x34>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0f3      	beq.n	8006e3c <__strtok_r+0x30>
 8006e54:	2300      	movs	r3, #0
 8006e56:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e5a:	6014      	str	r4, [r2, #0]
 8006e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e5e <_strtol_l.isra.0>:
 8006e5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e62:	4680      	mov	r8, r0
 8006e64:	4689      	mov	r9, r1
 8006e66:	4692      	mov	sl, r2
 8006e68:	461f      	mov	r7, r3
 8006e6a:	468b      	mov	fp, r1
 8006e6c:	465d      	mov	r5, fp
 8006e6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e74:	f000 f8ca 	bl	800700c <__locale_ctype_ptr_l>
 8006e78:	4420      	add	r0, r4
 8006e7a:	7846      	ldrb	r6, [r0, #1]
 8006e7c:	f016 0608 	ands.w	r6, r6, #8
 8006e80:	d10b      	bne.n	8006e9a <_strtol_l.isra.0+0x3c>
 8006e82:	2c2d      	cmp	r4, #45	; 0x2d
 8006e84:	d10b      	bne.n	8006e9e <_strtol_l.isra.0+0x40>
 8006e86:	782c      	ldrb	r4, [r5, #0]
 8006e88:	2601      	movs	r6, #1
 8006e8a:	f10b 0502 	add.w	r5, fp, #2
 8006e8e:	b167      	cbz	r7, 8006eaa <_strtol_l.isra.0+0x4c>
 8006e90:	2f10      	cmp	r7, #16
 8006e92:	d114      	bne.n	8006ebe <_strtol_l.isra.0+0x60>
 8006e94:	2c30      	cmp	r4, #48	; 0x30
 8006e96:	d00a      	beq.n	8006eae <_strtol_l.isra.0+0x50>
 8006e98:	e011      	b.n	8006ebe <_strtol_l.isra.0+0x60>
 8006e9a:	46ab      	mov	fp, r5
 8006e9c:	e7e6      	b.n	8006e6c <_strtol_l.isra.0+0xe>
 8006e9e:	2c2b      	cmp	r4, #43	; 0x2b
 8006ea0:	bf04      	itt	eq
 8006ea2:	782c      	ldrbeq	r4, [r5, #0]
 8006ea4:	f10b 0502 	addeq.w	r5, fp, #2
 8006ea8:	e7f1      	b.n	8006e8e <_strtol_l.isra.0+0x30>
 8006eaa:	2c30      	cmp	r4, #48	; 0x30
 8006eac:	d127      	bne.n	8006efe <_strtol_l.isra.0+0xa0>
 8006eae:	782b      	ldrb	r3, [r5, #0]
 8006eb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006eb4:	2b58      	cmp	r3, #88	; 0x58
 8006eb6:	d14b      	bne.n	8006f50 <_strtol_l.isra.0+0xf2>
 8006eb8:	786c      	ldrb	r4, [r5, #1]
 8006eba:	2710      	movs	r7, #16
 8006ebc:	3502      	adds	r5, #2
 8006ebe:	2e00      	cmp	r6, #0
 8006ec0:	bf0c      	ite	eq
 8006ec2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006ec6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006eca:	2200      	movs	r2, #0
 8006ecc:	fbb1 fef7 	udiv	lr, r1, r7
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006ed6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d811      	bhi.n	8006f02 <_strtol_l.isra.0+0xa4>
 8006ede:	461c      	mov	r4, r3
 8006ee0:	42a7      	cmp	r7, r4
 8006ee2:	dd1d      	ble.n	8006f20 <_strtol_l.isra.0+0xc2>
 8006ee4:	1c53      	adds	r3, r2, #1
 8006ee6:	d007      	beq.n	8006ef8 <_strtol_l.isra.0+0x9a>
 8006ee8:	4586      	cmp	lr, r0
 8006eea:	d316      	bcc.n	8006f1a <_strtol_l.isra.0+0xbc>
 8006eec:	d101      	bne.n	8006ef2 <_strtol_l.isra.0+0x94>
 8006eee:	45a4      	cmp	ip, r4
 8006ef0:	db13      	blt.n	8006f1a <_strtol_l.isra.0+0xbc>
 8006ef2:	fb00 4007 	mla	r0, r0, r7, r4
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006efc:	e7eb      	b.n	8006ed6 <_strtol_l.isra.0+0x78>
 8006efe:	270a      	movs	r7, #10
 8006f00:	e7dd      	b.n	8006ebe <_strtol_l.isra.0+0x60>
 8006f02:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006f06:	2b19      	cmp	r3, #25
 8006f08:	d801      	bhi.n	8006f0e <_strtol_l.isra.0+0xb0>
 8006f0a:	3c37      	subs	r4, #55	; 0x37
 8006f0c:	e7e8      	b.n	8006ee0 <_strtol_l.isra.0+0x82>
 8006f0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006f12:	2b19      	cmp	r3, #25
 8006f14:	d804      	bhi.n	8006f20 <_strtol_l.isra.0+0xc2>
 8006f16:	3c57      	subs	r4, #87	; 0x57
 8006f18:	e7e2      	b.n	8006ee0 <_strtol_l.isra.0+0x82>
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	e7eb      	b.n	8006ef8 <_strtol_l.isra.0+0x9a>
 8006f20:	1c53      	adds	r3, r2, #1
 8006f22:	d108      	bne.n	8006f36 <_strtol_l.isra.0+0xd8>
 8006f24:	2322      	movs	r3, #34	; 0x22
 8006f26:	f8c8 3000 	str.w	r3, [r8]
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	f1ba 0f00 	cmp.w	sl, #0
 8006f30:	d107      	bne.n	8006f42 <_strtol_l.isra.0+0xe4>
 8006f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	b106      	cbz	r6, 8006f3a <_strtol_l.isra.0+0xdc>
 8006f38:	4240      	negs	r0, r0
 8006f3a:	f1ba 0f00 	cmp.w	sl, #0
 8006f3e:	d00c      	beq.n	8006f5a <_strtol_l.isra.0+0xfc>
 8006f40:	b122      	cbz	r2, 8006f4c <_strtol_l.isra.0+0xee>
 8006f42:	3d01      	subs	r5, #1
 8006f44:	f8ca 5000 	str.w	r5, [sl]
 8006f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	464d      	mov	r5, r9
 8006f4e:	e7f9      	b.n	8006f44 <_strtol_l.isra.0+0xe6>
 8006f50:	2430      	movs	r4, #48	; 0x30
 8006f52:	2f00      	cmp	r7, #0
 8006f54:	d1b3      	bne.n	8006ebe <_strtol_l.isra.0+0x60>
 8006f56:	2708      	movs	r7, #8
 8006f58:	e7b1      	b.n	8006ebe <_strtol_l.isra.0+0x60>
 8006f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006f60 <strtol>:
 8006f60:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <strtol+0x24>)
 8006f62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f64:	681c      	ldr	r4, [r3, #0]
 8006f66:	4d08      	ldr	r5, [pc, #32]	; (8006f88 <strtol+0x28>)
 8006f68:	6a23      	ldr	r3, [r4, #32]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	bf08      	it	eq
 8006f6e:	462b      	moveq	r3, r5
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4613      	mov	r3, r2
 8006f74:	460a      	mov	r2, r1
 8006f76:	4601      	mov	r1, r0
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7ff ff70 	bl	8006e5e <_strtol_l.isra.0>
 8006f7e:	b003      	add	sp, #12
 8006f80:	bd30      	pop	{r4, r5, pc}
 8006f82:	bf00      	nop
 8006f84:	20000058 	.word	0x20000058
 8006f88:	200000bc 	.word	0x200000bc

08006f8c <__utoa>:
 8006f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8e:	4c1e      	ldr	r4, [pc, #120]	; (8007008 <__utoa+0x7c>)
 8006f90:	b08b      	sub	sp, #44	; 0x2c
 8006f92:	4603      	mov	r3, r0
 8006f94:	460f      	mov	r7, r1
 8006f96:	466d      	mov	r5, sp
 8006f98:	f104 0e20 	add.w	lr, r4, #32
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	6861      	ldr	r1, [r4, #4]
 8006fa0:	462e      	mov	r6, r5
 8006fa2:	c603      	stmia	r6!, {r0, r1}
 8006fa4:	3408      	adds	r4, #8
 8006fa6:	4574      	cmp	r4, lr
 8006fa8:	4635      	mov	r5, r6
 8006faa:	d1f7      	bne.n	8006f9c <__utoa+0x10>
 8006fac:	7921      	ldrb	r1, [r4, #4]
 8006fae:	7131      	strb	r1, [r6, #4]
 8006fb0:	1e91      	subs	r1, r2, #2
 8006fb2:	6820      	ldr	r0, [r4, #0]
 8006fb4:	6030      	str	r0, [r6, #0]
 8006fb6:	2922      	cmp	r1, #34	; 0x22
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	d904      	bls.n	8006fc8 <__utoa+0x3c>
 8006fbe:	7039      	strb	r1, [r7, #0]
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	b00b      	add	sp, #44	; 0x2c
 8006fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc8:	1e78      	subs	r0, r7, #1
 8006fca:	4606      	mov	r6, r0
 8006fcc:	fbb3 f5f2 	udiv	r5, r3, r2
 8006fd0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006fd4:	fb02 3315 	mls	r3, r2, r5, r3
 8006fd8:	4473      	add	r3, lr
 8006fda:	1c4c      	adds	r4, r1, #1
 8006fdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006fe0:	f806 3f01 	strb.w	r3, [r6, #1]!
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	b965      	cbnz	r5, 8007002 <__utoa+0x76>
 8006fe8:	553d      	strb	r5, [r7, r4]
 8006fea:	187a      	adds	r2, r7, r1
 8006fec:	1acc      	subs	r4, r1, r3
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	dae7      	bge.n	8006fc2 <__utoa+0x36>
 8006ff2:	7844      	ldrb	r4, [r0, #1]
 8006ff4:	7815      	ldrb	r5, [r2, #0]
 8006ff6:	f800 5f01 	strb.w	r5, [r0, #1]!
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	f802 4901 	strb.w	r4, [r2], #-1
 8007000:	e7f4      	b.n	8006fec <__utoa+0x60>
 8007002:	4621      	mov	r1, r4
 8007004:	e7e2      	b.n	8006fcc <__utoa+0x40>
 8007006:	bf00      	nop
 8007008:	0800797c 	.word	0x0800797c

0800700c <__locale_ctype_ptr_l>:
 800700c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007010:	4770      	bx	lr

08007012 <__ascii_mbtowc>:
 8007012:	b082      	sub	sp, #8
 8007014:	b901      	cbnz	r1, 8007018 <__ascii_mbtowc+0x6>
 8007016:	a901      	add	r1, sp, #4
 8007018:	b142      	cbz	r2, 800702c <__ascii_mbtowc+0x1a>
 800701a:	b14b      	cbz	r3, 8007030 <__ascii_mbtowc+0x1e>
 800701c:	7813      	ldrb	r3, [r2, #0]
 800701e:	600b      	str	r3, [r1, #0]
 8007020:	7812      	ldrb	r2, [r2, #0]
 8007022:	1c10      	adds	r0, r2, #0
 8007024:	bf18      	it	ne
 8007026:	2001      	movne	r0, #1
 8007028:	b002      	add	sp, #8
 800702a:	4770      	bx	lr
 800702c:	4610      	mov	r0, r2
 800702e:	e7fb      	b.n	8007028 <__ascii_mbtowc+0x16>
 8007030:	f06f 0001 	mvn.w	r0, #1
 8007034:	e7f8      	b.n	8007028 <__ascii_mbtowc+0x16>

08007036 <__malloc_lock>:
 8007036:	4770      	bx	lr

08007038 <__malloc_unlock>:
 8007038:	4770      	bx	lr

0800703a <__ssputs_r>:
 800703a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800703e:	688e      	ldr	r6, [r1, #8]
 8007040:	429e      	cmp	r6, r3
 8007042:	4682      	mov	sl, r0
 8007044:	460c      	mov	r4, r1
 8007046:	4691      	mov	r9, r2
 8007048:	4698      	mov	r8, r3
 800704a:	d835      	bhi.n	80070b8 <__ssputs_r+0x7e>
 800704c:	898a      	ldrh	r2, [r1, #12]
 800704e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007052:	d031      	beq.n	80070b8 <__ssputs_r+0x7e>
 8007054:	6825      	ldr	r5, [r4, #0]
 8007056:	6909      	ldr	r1, [r1, #16]
 8007058:	1a6f      	subs	r7, r5, r1
 800705a:	6965      	ldr	r5, [r4, #20]
 800705c:	2302      	movs	r3, #2
 800705e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007062:	fb95 f5f3 	sdiv	r5, r5, r3
 8007066:	f108 0301 	add.w	r3, r8, #1
 800706a:	443b      	add	r3, r7
 800706c:	429d      	cmp	r5, r3
 800706e:	bf38      	it	cc
 8007070:	461d      	movcc	r5, r3
 8007072:	0553      	lsls	r3, r2, #21
 8007074:	d531      	bpl.n	80070da <__ssputs_r+0xa0>
 8007076:	4629      	mov	r1, r5
 8007078:	f7ff fe0c 	bl	8006c94 <_malloc_r>
 800707c:	4606      	mov	r6, r0
 800707e:	b950      	cbnz	r0, 8007096 <__ssputs_r+0x5c>
 8007080:	230c      	movs	r3, #12
 8007082:	f8ca 3000 	str.w	r3, [sl]
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	f04f 30ff 	mov.w	r0, #4294967295
 8007092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007096:	463a      	mov	r2, r7
 8007098:	6921      	ldr	r1, [r4, #16]
 800709a:	f7ff fd99 	bl	8006bd0 <memcpy>
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	6126      	str	r6, [r4, #16]
 80070ac:	6165      	str	r5, [r4, #20]
 80070ae:	443e      	add	r6, r7
 80070b0:	1bed      	subs	r5, r5, r7
 80070b2:	6026      	str	r6, [r4, #0]
 80070b4:	60a5      	str	r5, [r4, #8]
 80070b6:	4646      	mov	r6, r8
 80070b8:	4546      	cmp	r6, r8
 80070ba:	bf28      	it	cs
 80070bc:	4646      	movcs	r6, r8
 80070be:	4632      	mov	r2, r6
 80070c0:	4649      	mov	r1, r9
 80070c2:	6820      	ldr	r0, [r4, #0]
 80070c4:	f000 faab 	bl	800761e <memmove>
 80070c8:	68a3      	ldr	r3, [r4, #8]
 80070ca:	1b9b      	subs	r3, r3, r6
 80070cc:	60a3      	str	r3, [r4, #8]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	441e      	add	r6, r3
 80070d2:	6026      	str	r6, [r4, #0]
 80070d4:	2000      	movs	r0, #0
 80070d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070da:	462a      	mov	r2, r5
 80070dc:	f000 fab9 	bl	8007652 <_realloc_r>
 80070e0:	4606      	mov	r6, r0
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d1e1      	bne.n	80070aa <__ssputs_r+0x70>
 80070e6:	6921      	ldr	r1, [r4, #16]
 80070e8:	4650      	mov	r0, sl
 80070ea:	f7ff fd85 	bl	8006bf8 <_free_r>
 80070ee:	e7c7      	b.n	8007080 <__ssputs_r+0x46>

080070f0 <_svfiprintf_r>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	b09d      	sub	sp, #116	; 0x74
 80070f6:	4680      	mov	r8, r0
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	898b      	ldrh	r3, [r1, #12]
 80070fc:	061c      	lsls	r4, r3, #24
 80070fe:	460d      	mov	r5, r1
 8007100:	4616      	mov	r6, r2
 8007102:	d50f      	bpl.n	8007124 <_svfiprintf_r+0x34>
 8007104:	690b      	ldr	r3, [r1, #16]
 8007106:	b96b      	cbnz	r3, 8007124 <_svfiprintf_r+0x34>
 8007108:	2140      	movs	r1, #64	; 0x40
 800710a:	f7ff fdc3 	bl	8006c94 <_malloc_r>
 800710e:	6028      	str	r0, [r5, #0]
 8007110:	6128      	str	r0, [r5, #16]
 8007112:	b928      	cbnz	r0, 8007120 <_svfiprintf_r+0x30>
 8007114:	230c      	movs	r3, #12
 8007116:	f8c8 3000 	str.w	r3, [r8]
 800711a:	f04f 30ff 	mov.w	r0, #4294967295
 800711e:	e0c5      	b.n	80072ac <_svfiprintf_r+0x1bc>
 8007120:	2340      	movs	r3, #64	; 0x40
 8007122:	616b      	str	r3, [r5, #20]
 8007124:	2300      	movs	r3, #0
 8007126:	9309      	str	r3, [sp, #36]	; 0x24
 8007128:	2320      	movs	r3, #32
 800712a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800712e:	2330      	movs	r3, #48	; 0x30
 8007130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007134:	f04f 0b01 	mov.w	fp, #1
 8007138:	4637      	mov	r7, r6
 800713a:	463c      	mov	r4, r7
 800713c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d13c      	bne.n	80071be <_svfiprintf_r+0xce>
 8007144:	ebb7 0a06 	subs.w	sl, r7, r6
 8007148:	d00b      	beq.n	8007162 <_svfiprintf_r+0x72>
 800714a:	4653      	mov	r3, sl
 800714c:	4632      	mov	r2, r6
 800714e:	4629      	mov	r1, r5
 8007150:	4640      	mov	r0, r8
 8007152:	f7ff ff72 	bl	800703a <__ssputs_r>
 8007156:	3001      	adds	r0, #1
 8007158:	f000 80a3 	beq.w	80072a2 <_svfiprintf_r+0x1b2>
 800715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715e:	4453      	add	r3, sl
 8007160:	9309      	str	r3, [sp, #36]	; 0x24
 8007162:	783b      	ldrb	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 809c 	beq.w	80072a2 <_svfiprintf_r+0x1b2>
 800716a:	2300      	movs	r3, #0
 800716c:	f04f 32ff 	mov.w	r2, #4294967295
 8007170:	9304      	str	r3, [sp, #16]
 8007172:	9307      	str	r3, [sp, #28]
 8007174:	9205      	str	r2, [sp, #20]
 8007176:	9306      	str	r3, [sp, #24]
 8007178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800717c:	931a      	str	r3, [sp, #104]	; 0x68
 800717e:	2205      	movs	r2, #5
 8007180:	7821      	ldrb	r1, [r4, #0]
 8007182:	4850      	ldr	r0, [pc, #320]	; (80072c4 <_svfiprintf_r+0x1d4>)
 8007184:	f7f9 f82c 	bl	80001e0 <memchr>
 8007188:	1c67      	adds	r7, r4, #1
 800718a:	9b04      	ldr	r3, [sp, #16]
 800718c:	b9d8      	cbnz	r0, 80071c6 <_svfiprintf_r+0xd6>
 800718e:	06d9      	lsls	r1, r3, #27
 8007190:	bf44      	itt	mi
 8007192:	2220      	movmi	r2, #32
 8007194:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007198:	071a      	lsls	r2, r3, #28
 800719a:	bf44      	itt	mi
 800719c:	222b      	movmi	r2, #43	; 0x2b
 800719e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071a2:	7822      	ldrb	r2, [r4, #0]
 80071a4:	2a2a      	cmp	r2, #42	; 0x2a
 80071a6:	d016      	beq.n	80071d6 <_svfiprintf_r+0xe6>
 80071a8:	9a07      	ldr	r2, [sp, #28]
 80071aa:	2100      	movs	r1, #0
 80071ac:	200a      	movs	r0, #10
 80071ae:	4627      	mov	r7, r4
 80071b0:	3401      	adds	r4, #1
 80071b2:	783b      	ldrb	r3, [r7, #0]
 80071b4:	3b30      	subs	r3, #48	; 0x30
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	d951      	bls.n	800725e <_svfiprintf_r+0x16e>
 80071ba:	b1c9      	cbz	r1, 80071f0 <_svfiprintf_r+0x100>
 80071bc:	e011      	b.n	80071e2 <_svfiprintf_r+0xf2>
 80071be:	2b25      	cmp	r3, #37	; 0x25
 80071c0:	d0c0      	beq.n	8007144 <_svfiprintf_r+0x54>
 80071c2:	4627      	mov	r7, r4
 80071c4:	e7b9      	b.n	800713a <_svfiprintf_r+0x4a>
 80071c6:	4a3f      	ldr	r2, [pc, #252]	; (80072c4 <_svfiprintf_r+0x1d4>)
 80071c8:	1a80      	subs	r0, r0, r2
 80071ca:	fa0b f000 	lsl.w	r0, fp, r0
 80071ce:	4318      	orrs	r0, r3
 80071d0:	9004      	str	r0, [sp, #16]
 80071d2:	463c      	mov	r4, r7
 80071d4:	e7d3      	b.n	800717e <_svfiprintf_r+0x8e>
 80071d6:	9a03      	ldr	r2, [sp, #12]
 80071d8:	1d11      	adds	r1, r2, #4
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	9103      	str	r1, [sp, #12]
 80071de:	2a00      	cmp	r2, #0
 80071e0:	db01      	blt.n	80071e6 <_svfiprintf_r+0xf6>
 80071e2:	9207      	str	r2, [sp, #28]
 80071e4:	e004      	b.n	80071f0 <_svfiprintf_r+0x100>
 80071e6:	4252      	negs	r2, r2
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	9207      	str	r2, [sp, #28]
 80071ee:	9304      	str	r3, [sp, #16]
 80071f0:	783b      	ldrb	r3, [r7, #0]
 80071f2:	2b2e      	cmp	r3, #46	; 0x2e
 80071f4:	d10e      	bne.n	8007214 <_svfiprintf_r+0x124>
 80071f6:	787b      	ldrb	r3, [r7, #1]
 80071f8:	2b2a      	cmp	r3, #42	; 0x2a
 80071fa:	f107 0101 	add.w	r1, r7, #1
 80071fe:	d132      	bne.n	8007266 <_svfiprintf_r+0x176>
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	1d1a      	adds	r2, r3, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	9203      	str	r2, [sp, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	bfb8      	it	lt
 800720c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007210:	3702      	adds	r7, #2
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	4c2c      	ldr	r4, [pc, #176]	; (80072c8 <_svfiprintf_r+0x1d8>)
 8007216:	7839      	ldrb	r1, [r7, #0]
 8007218:	2203      	movs	r2, #3
 800721a:	4620      	mov	r0, r4
 800721c:	f7f8 ffe0 	bl	80001e0 <memchr>
 8007220:	b138      	cbz	r0, 8007232 <_svfiprintf_r+0x142>
 8007222:	2340      	movs	r3, #64	; 0x40
 8007224:	1b00      	subs	r0, r0, r4
 8007226:	fa03 f000 	lsl.w	r0, r3, r0
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	4303      	orrs	r3, r0
 800722e:	9304      	str	r3, [sp, #16]
 8007230:	3701      	adds	r7, #1
 8007232:	7839      	ldrb	r1, [r7, #0]
 8007234:	4825      	ldr	r0, [pc, #148]	; (80072cc <_svfiprintf_r+0x1dc>)
 8007236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800723a:	2206      	movs	r2, #6
 800723c:	1c7e      	adds	r6, r7, #1
 800723e:	f7f8 ffcf 	bl	80001e0 <memchr>
 8007242:	2800      	cmp	r0, #0
 8007244:	d035      	beq.n	80072b2 <_svfiprintf_r+0x1c2>
 8007246:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <_svfiprintf_r+0x1e0>)
 8007248:	b9fb      	cbnz	r3, 800728a <_svfiprintf_r+0x19a>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	3307      	adds	r3, #7
 800724e:	f023 0307 	bic.w	r3, r3, #7
 8007252:	3308      	adds	r3, #8
 8007254:	9303      	str	r3, [sp, #12]
 8007256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007258:	444b      	add	r3, r9
 800725a:	9309      	str	r3, [sp, #36]	; 0x24
 800725c:	e76c      	b.n	8007138 <_svfiprintf_r+0x48>
 800725e:	fb00 3202 	mla	r2, r0, r2, r3
 8007262:	2101      	movs	r1, #1
 8007264:	e7a3      	b.n	80071ae <_svfiprintf_r+0xbe>
 8007266:	2300      	movs	r3, #0
 8007268:	9305      	str	r3, [sp, #20]
 800726a:	4618      	mov	r0, r3
 800726c:	240a      	movs	r4, #10
 800726e:	460f      	mov	r7, r1
 8007270:	3101      	adds	r1, #1
 8007272:	783a      	ldrb	r2, [r7, #0]
 8007274:	3a30      	subs	r2, #48	; 0x30
 8007276:	2a09      	cmp	r2, #9
 8007278:	d903      	bls.n	8007282 <_svfiprintf_r+0x192>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0ca      	beq.n	8007214 <_svfiprintf_r+0x124>
 800727e:	9005      	str	r0, [sp, #20]
 8007280:	e7c8      	b.n	8007214 <_svfiprintf_r+0x124>
 8007282:	fb04 2000 	mla	r0, r4, r0, r2
 8007286:	2301      	movs	r3, #1
 8007288:	e7f1      	b.n	800726e <_svfiprintf_r+0x17e>
 800728a:	ab03      	add	r3, sp, #12
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462a      	mov	r2, r5
 8007290:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <_svfiprintf_r+0x1e4>)
 8007292:	a904      	add	r1, sp, #16
 8007294:	4640      	mov	r0, r8
 8007296:	f3af 8000 	nop.w
 800729a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800729e:	4681      	mov	r9, r0
 80072a0:	d1d9      	bne.n	8007256 <_svfiprintf_r+0x166>
 80072a2:	89ab      	ldrh	r3, [r5, #12]
 80072a4:	065b      	lsls	r3, r3, #25
 80072a6:	f53f af38 	bmi.w	800711a <_svfiprintf_r+0x2a>
 80072aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ac:	b01d      	add	sp, #116	; 0x74
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	ab03      	add	r3, sp, #12
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	462a      	mov	r2, r5
 80072b8:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <_svfiprintf_r+0x1e4>)
 80072ba:	a904      	add	r1, sp, #16
 80072bc:	4640      	mov	r0, r8
 80072be:	f000 f881 	bl	80073c4 <_printf_i>
 80072c2:	e7ea      	b.n	800729a <_svfiprintf_r+0x1aa>
 80072c4:	080079ab 	.word	0x080079ab
 80072c8:	080079b1 	.word	0x080079b1
 80072cc:	080079b5 	.word	0x080079b5
 80072d0:	00000000 	.word	0x00000000
 80072d4:	0800703b 	.word	0x0800703b

080072d8 <_printf_common>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	4691      	mov	r9, r2
 80072de:	461f      	mov	r7, r3
 80072e0:	688a      	ldr	r2, [r1, #8]
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bfb8      	it	lt
 80072ec:	4613      	movlt	r3, r2
 80072ee:	f8c9 3000 	str.w	r3, [r9]
 80072f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f6:	4606      	mov	r6, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	b112      	cbz	r2, 8007302 <_printf_common+0x2a>
 80072fc:	3301      	adds	r3, #1
 80072fe:	f8c9 3000 	str.w	r3, [r9]
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	0699      	lsls	r1, r3, #26
 8007306:	bf42      	ittt	mi
 8007308:	f8d9 3000 	ldrmi.w	r3, [r9]
 800730c:	3302      	addmi	r3, #2
 800730e:	f8c9 3000 	strmi.w	r3, [r9]
 8007312:	6825      	ldr	r5, [r4, #0]
 8007314:	f015 0506 	ands.w	r5, r5, #6
 8007318:	d107      	bne.n	800732a <_printf_common+0x52>
 800731a:	f104 0a19 	add.w	sl, r4, #25
 800731e:	68e3      	ldr	r3, [r4, #12]
 8007320:	f8d9 2000 	ldr.w	r2, [r9]
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	429d      	cmp	r5, r3
 8007328:	db29      	blt.n	800737e <_printf_common+0xa6>
 800732a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	3300      	adds	r3, #0
 8007332:	bf18      	it	ne
 8007334:	2301      	movne	r3, #1
 8007336:	0692      	lsls	r2, r2, #26
 8007338:	d42e      	bmi.n	8007398 <_printf_common+0xc0>
 800733a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800733e:	4639      	mov	r1, r7
 8007340:	4630      	mov	r0, r6
 8007342:	47c0      	blx	r8
 8007344:	3001      	adds	r0, #1
 8007346:	d021      	beq.n	800738c <_printf_common+0xb4>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	68e5      	ldr	r5, [r4, #12]
 800734c:	f8d9 2000 	ldr.w	r2, [r9]
 8007350:	f003 0306 	and.w	r3, r3, #6
 8007354:	2b04      	cmp	r3, #4
 8007356:	bf08      	it	eq
 8007358:	1aad      	subeq	r5, r5, r2
 800735a:	68a3      	ldr	r3, [r4, #8]
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	bf0c      	ite	eq
 8007360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007364:	2500      	movne	r5, #0
 8007366:	4293      	cmp	r3, r2
 8007368:	bfc4      	itt	gt
 800736a:	1a9b      	subgt	r3, r3, r2
 800736c:	18ed      	addgt	r5, r5, r3
 800736e:	f04f 0900 	mov.w	r9, #0
 8007372:	341a      	adds	r4, #26
 8007374:	454d      	cmp	r5, r9
 8007376:	d11b      	bne.n	80073b0 <_printf_common+0xd8>
 8007378:	2000      	movs	r0, #0
 800737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737e:	2301      	movs	r3, #1
 8007380:	4652      	mov	r2, sl
 8007382:	4639      	mov	r1, r7
 8007384:	4630      	mov	r0, r6
 8007386:	47c0      	blx	r8
 8007388:	3001      	adds	r0, #1
 800738a:	d103      	bne.n	8007394 <_printf_common+0xbc>
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	3501      	adds	r5, #1
 8007396:	e7c2      	b.n	800731e <_printf_common+0x46>
 8007398:	18e1      	adds	r1, r4, r3
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	2030      	movs	r0, #48	; 0x30
 800739e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073a2:	4422      	add	r2, r4
 80073a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073ac:	3302      	adds	r3, #2
 80073ae:	e7c4      	b.n	800733a <_printf_common+0x62>
 80073b0:	2301      	movs	r3, #1
 80073b2:	4622      	mov	r2, r4
 80073b4:	4639      	mov	r1, r7
 80073b6:	4630      	mov	r0, r6
 80073b8:	47c0      	blx	r8
 80073ba:	3001      	adds	r0, #1
 80073bc:	d0e6      	beq.n	800738c <_printf_common+0xb4>
 80073be:	f109 0901 	add.w	r9, r9, #1
 80073c2:	e7d7      	b.n	8007374 <_printf_common+0x9c>

080073c4 <_printf_i>:
 80073c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073c8:	4617      	mov	r7, r2
 80073ca:	7e0a      	ldrb	r2, [r1, #24]
 80073cc:	b085      	sub	sp, #20
 80073ce:	2a6e      	cmp	r2, #110	; 0x6e
 80073d0:	4698      	mov	r8, r3
 80073d2:	4606      	mov	r6, r0
 80073d4:	460c      	mov	r4, r1
 80073d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073d8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80073dc:	f000 80bc 	beq.w	8007558 <_printf_i+0x194>
 80073e0:	d81a      	bhi.n	8007418 <_printf_i+0x54>
 80073e2:	2a63      	cmp	r2, #99	; 0x63
 80073e4:	d02e      	beq.n	8007444 <_printf_i+0x80>
 80073e6:	d80a      	bhi.n	80073fe <_printf_i+0x3a>
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	f000 80c8 	beq.w	800757e <_printf_i+0x1ba>
 80073ee:	2a58      	cmp	r2, #88	; 0x58
 80073f0:	f000 808a 	beq.w	8007508 <_printf_i+0x144>
 80073f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80073fc:	e02a      	b.n	8007454 <_printf_i+0x90>
 80073fe:	2a64      	cmp	r2, #100	; 0x64
 8007400:	d001      	beq.n	8007406 <_printf_i+0x42>
 8007402:	2a69      	cmp	r2, #105	; 0x69
 8007404:	d1f6      	bne.n	80073f4 <_printf_i+0x30>
 8007406:	6821      	ldr	r1, [r4, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800740e:	d023      	beq.n	8007458 <_printf_i+0x94>
 8007410:	1d11      	adds	r1, r2, #4
 8007412:	6019      	str	r1, [r3, #0]
 8007414:	6813      	ldr	r3, [r2, #0]
 8007416:	e027      	b.n	8007468 <_printf_i+0xa4>
 8007418:	2a73      	cmp	r2, #115	; 0x73
 800741a:	f000 80b4 	beq.w	8007586 <_printf_i+0x1c2>
 800741e:	d808      	bhi.n	8007432 <_printf_i+0x6e>
 8007420:	2a6f      	cmp	r2, #111	; 0x6f
 8007422:	d02a      	beq.n	800747a <_printf_i+0xb6>
 8007424:	2a70      	cmp	r2, #112	; 0x70
 8007426:	d1e5      	bne.n	80073f4 <_printf_i+0x30>
 8007428:	680a      	ldr	r2, [r1, #0]
 800742a:	f042 0220 	orr.w	r2, r2, #32
 800742e:	600a      	str	r2, [r1, #0]
 8007430:	e003      	b.n	800743a <_printf_i+0x76>
 8007432:	2a75      	cmp	r2, #117	; 0x75
 8007434:	d021      	beq.n	800747a <_printf_i+0xb6>
 8007436:	2a78      	cmp	r2, #120	; 0x78
 8007438:	d1dc      	bne.n	80073f4 <_printf_i+0x30>
 800743a:	2278      	movs	r2, #120	; 0x78
 800743c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007440:	496e      	ldr	r1, [pc, #440]	; (80075fc <_printf_i+0x238>)
 8007442:	e064      	b.n	800750e <_printf_i+0x14a>
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800744a:	1d11      	adds	r1, r2, #4
 800744c:	6019      	str	r1, [r3, #0]
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007454:	2301      	movs	r3, #1
 8007456:	e0a3      	b.n	80075a0 <_printf_i+0x1dc>
 8007458:	f011 0f40 	tst.w	r1, #64	; 0x40
 800745c:	f102 0104 	add.w	r1, r2, #4
 8007460:	6019      	str	r1, [r3, #0]
 8007462:	d0d7      	beq.n	8007414 <_printf_i+0x50>
 8007464:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007468:	2b00      	cmp	r3, #0
 800746a:	da03      	bge.n	8007474 <_printf_i+0xb0>
 800746c:	222d      	movs	r2, #45	; 0x2d
 800746e:	425b      	negs	r3, r3
 8007470:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007474:	4962      	ldr	r1, [pc, #392]	; (8007600 <_printf_i+0x23c>)
 8007476:	220a      	movs	r2, #10
 8007478:	e017      	b.n	80074aa <_printf_i+0xe6>
 800747a:	6820      	ldr	r0, [r4, #0]
 800747c:	6819      	ldr	r1, [r3, #0]
 800747e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007482:	d003      	beq.n	800748c <_printf_i+0xc8>
 8007484:	1d08      	adds	r0, r1, #4
 8007486:	6018      	str	r0, [r3, #0]
 8007488:	680b      	ldr	r3, [r1, #0]
 800748a:	e006      	b.n	800749a <_printf_i+0xd6>
 800748c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007490:	f101 0004 	add.w	r0, r1, #4
 8007494:	6018      	str	r0, [r3, #0]
 8007496:	d0f7      	beq.n	8007488 <_printf_i+0xc4>
 8007498:	880b      	ldrh	r3, [r1, #0]
 800749a:	4959      	ldr	r1, [pc, #356]	; (8007600 <_printf_i+0x23c>)
 800749c:	2a6f      	cmp	r2, #111	; 0x6f
 800749e:	bf14      	ite	ne
 80074a0:	220a      	movne	r2, #10
 80074a2:	2208      	moveq	r2, #8
 80074a4:	2000      	movs	r0, #0
 80074a6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80074aa:	6865      	ldr	r5, [r4, #4]
 80074ac:	60a5      	str	r5, [r4, #8]
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	f2c0 809c 	blt.w	80075ec <_printf_i+0x228>
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	f020 0004 	bic.w	r0, r0, #4
 80074ba:	6020      	str	r0, [r4, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d13f      	bne.n	8007540 <_printf_i+0x17c>
 80074c0:	2d00      	cmp	r5, #0
 80074c2:	f040 8095 	bne.w	80075f0 <_printf_i+0x22c>
 80074c6:	4675      	mov	r5, lr
 80074c8:	2a08      	cmp	r2, #8
 80074ca:	d10b      	bne.n	80074e4 <_printf_i+0x120>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	07da      	lsls	r2, r3, #31
 80074d0:	d508      	bpl.n	80074e4 <_printf_i+0x120>
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	6862      	ldr	r2, [r4, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	bfde      	ittt	le
 80074da:	2330      	movle	r3, #48	; 0x30
 80074dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074e4:	ebae 0305 	sub.w	r3, lr, r5
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	f8cd 8000 	str.w	r8, [sp]
 80074ee:	463b      	mov	r3, r7
 80074f0:	aa03      	add	r2, sp, #12
 80074f2:	4621      	mov	r1, r4
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7ff feef 	bl	80072d8 <_printf_common>
 80074fa:	3001      	adds	r0, #1
 80074fc:	d155      	bne.n	80075aa <_printf_i+0x1e6>
 80074fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007502:	b005      	add	sp, #20
 8007504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007508:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800750c:	493c      	ldr	r1, [pc, #240]	; (8007600 <_printf_i+0x23c>)
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007516:	f100 0504 	add.w	r5, r0, #4
 800751a:	601d      	str	r5, [r3, #0]
 800751c:	d001      	beq.n	8007522 <_printf_i+0x15e>
 800751e:	6803      	ldr	r3, [r0, #0]
 8007520:	e002      	b.n	8007528 <_printf_i+0x164>
 8007522:	0655      	lsls	r5, r2, #25
 8007524:	d5fb      	bpl.n	800751e <_printf_i+0x15a>
 8007526:	8803      	ldrh	r3, [r0, #0]
 8007528:	07d0      	lsls	r0, r2, #31
 800752a:	bf44      	itt	mi
 800752c:	f042 0220 	orrmi.w	r2, r2, #32
 8007530:	6022      	strmi	r2, [r4, #0]
 8007532:	b91b      	cbnz	r3, 800753c <_printf_i+0x178>
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	f022 0220 	bic.w	r2, r2, #32
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	2210      	movs	r2, #16
 800753e:	e7b1      	b.n	80074a4 <_printf_i+0xe0>
 8007540:	4675      	mov	r5, lr
 8007542:	fbb3 f0f2 	udiv	r0, r3, r2
 8007546:	fb02 3310 	mls	r3, r2, r0, r3
 800754a:	5ccb      	ldrb	r3, [r1, r3]
 800754c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007550:	4603      	mov	r3, r0
 8007552:	2800      	cmp	r0, #0
 8007554:	d1f5      	bne.n	8007542 <_printf_i+0x17e>
 8007556:	e7b7      	b.n	80074c8 <_printf_i+0x104>
 8007558:	6808      	ldr	r0, [r1, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	6949      	ldr	r1, [r1, #20]
 800755e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007562:	d004      	beq.n	800756e <_printf_i+0x1aa>
 8007564:	1d10      	adds	r0, r2, #4
 8007566:	6018      	str	r0, [r3, #0]
 8007568:	6813      	ldr	r3, [r2, #0]
 800756a:	6019      	str	r1, [r3, #0]
 800756c:	e007      	b.n	800757e <_printf_i+0x1ba>
 800756e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007572:	f102 0004 	add.w	r0, r2, #4
 8007576:	6018      	str	r0, [r3, #0]
 8007578:	6813      	ldr	r3, [r2, #0]
 800757a:	d0f6      	beq.n	800756a <_printf_i+0x1a6>
 800757c:	8019      	strh	r1, [r3, #0]
 800757e:	2300      	movs	r3, #0
 8007580:	6123      	str	r3, [r4, #16]
 8007582:	4675      	mov	r5, lr
 8007584:	e7b1      	b.n	80074ea <_printf_i+0x126>
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	1d11      	adds	r1, r2, #4
 800758a:	6019      	str	r1, [r3, #0]
 800758c:	6815      	ldr	r5, [r2, #0]
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	2100      	movs	r1, #0
 8007592:	4628      	mov	r0, r5
 8007594:	f7f8 fe24 	bl	80001e0 <memchr>
 8007598:	b108      	cbz	r0, 800759e <_printf_i+0x1da>
 800759a:	1b40      	subs	r0, r0, r5
 800759c:	6060      	str	r0, [r4, #4]
 800759e:	6863      	ldr	r3, [r4, #4]
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	2300      	movs	r3, #0
 80075a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a8:	e79f      	b.n	80074ea <_printf_i+0x126>
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	462a      	mov	r2, r5
 80075ae:	4639      	mov	r1, r7
 80075b0:	4630      	mov	r0, r6
 80075b2:	47c0      	blx	r8
 80075b4:	3001      	adds	r0, #1
 80075b6:	d0a2      	beq.n	80074fe <_printf_i+0x13a>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	079b      	lsls	r3, r3, #30
 80075bc:	d507      	bpl.n	80075ce <_printf_i+0x20a>
 80075be:	2500      	movs	r5, #0
 80075c0:	f104 0919 	add.w	r9, r4, #25
 80075c4:	68e3      	ldr	r3, [r4, #12]
 80075c6:	9a03      	ldr	r2, [sp, #12]
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	429d      	cmp	r5, r3
 80075cc:	db05      	blt.n	80075da <_printf_i+0x216>
 80075ce:	68e0      	ldr	r0, [r4, #12]
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	4298      	cmp	r0, r3
 80075d4:	bfb8      	it	lt
 80075d6:	4618      	movlt	r0, r3
 80075d8:	e793      	b.n	8007502 <_printf_i+0x13e>
 80075da:	2301      	movs	r3, #1
 80075dc:	464a      	mov	r2, r9
 80075de:	4639      	mov	r1, r7
 80075e0:	4630      	mov	r0, r6
 80075e2:	47c0      	blx	r8
 80075e4:	3001      	adds	r0, #1
 80075e6:	d08a      	beq.n	80074fe <_printf_i+0x13a>
 80075e8:	3501      	adds	r5, #1
 80075ea:	e7eb      	b.n	80075c4 <_printf_i+0x200>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1a7      	bne.n	8007540 <_printf_i+0x17c>
 80075f0:	780b      	ldrb	r3, [r1, #0]
 80075f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075fa:	e765      	b.n	80074c8 <_printf_i+0x104>
 80075fc:	080079cd 	.word	0x080079cd
 8007600:	080079bc 	.word	0x080079bc

08007604 <__ascii_wctomb>:
 8007604:	b149      	cbz	r1, 800761a <__ascii_wctomb+0x16>
 8007606:	2aff      	cmp	r2, #255	; 0xff
 8007608:	bf85      	ittet	hi
 800760a:	238a      	movhi	r3, #138	; 0x8a
 800760c:	6003      	strhi	r3, [r0, #0]
 800760e:	700a      	strbls	r2, [r1, #0]
 8007610:	f04f 30ff 	movhi.w	r0, #4294967295
 8007614:	bf98      	it	ls
 8007616:	2001      	movls	r0, #1
 8007618:	4770      	bx	lr
 800761a:	4608      	mov	r0, r1
 800761c:	4770      	bx	lr

0800761e <memmove>:
 800761e:	4288      	cmp	r0, r1
 8007620:	b510      	push	{r4, lr}
 8007622:	eb01 0302 	add.w	r3, r1, r2
 8007626:	d803      	bhi.n	8007630 <memmove+0x12>
 8007628:	1e42      	subs	r2, r0, #1
 800762a:	4299      	cmp	r1, r3
 800762c:	d10c      	bne.n	8007648 <memmove+0x2a>
 800762e:	bd10      	pop	{r4, pc}
 8007630:	4298      	cmp	r0, r3
 8007632:	d2f9      	bcs.n	8007628 <memmove+0xa>
 8007634:	1881      	adds	r1, r0, r2
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	42d3      	cmn	r3, r2
 800763a:	d100      	bne.n	800763e <memmove+0x20>
 800763c:	bd10      	pop	{r4, pc}
 800763e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007642:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007646:	e7f7      	b.n	8007638 <memmove+0x1a>
 8007648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007650:	e7eb      	b.n	800762a <memmove+0xc>

08007652 <_realloc_r>:
 8007652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007654:	4607      	mov	r7, r0
 8007656:	4614      	mov	r4, r2
 8007658:	460e      	mov	r6, r1
 800765a:	b921      	cbnz	r1, 8007666 <_realloc_r+0x14>
 800765c:	4611      	mov	r1, r2
 800765e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007662:	f7ff bb17 	b.w	8006c94 <_malloc_r>
 8007666:	b922      	cbnz	r2, 8007672 <_realloc_r+0x20>
 8007668:	f7ff fac6 	bl	8006bf8 <_free_r>
 800766c:	4625      	mov	r5, r4
 800766e:	4628      	mov	r0, r5
 8007670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007672:	f000 f814 	bl	800769e <_malloc_usable_size_r>
 8007676:	4284      	cmp	r4, r0
 8007678:	d90f      	bls.n	800769a <_realloc_r+0x48>
 800767a:	4621      	mov	r1, r4
 800767c:	4638      	mov	r0, r7
 800767e:	f7ff fb09 	bl	8006c94 <_malloc_r>
 8007682:	4605      	mov	r5, r0
 8007684:	2800      	cmp	r0, #0
 8007686:	d0f2      	beq.n	800766e <_realloc_r+0x1c>
 8007688:	4631      	mov	r1, r6
 800768a:	4622      	mov	r2, r4
 800768c:	f7ff faa0 	bl	8006bd0 <memcpy>
 8007690:	4631      	mov	r1, r6
 8007692:	4638      	mov	r0, r7
 8007694:	f7ff fab0 	bl	8006bf8 <_free_r>
 8007698:	e7e9      	b.n	800766e <_realloc_r+0x1c>
 800769a:	4635      	mov	r5, r6
 800769c:	e7e7      	b.n	800766e <_realloc_r+0x1c>

0800769e <_malloc_usable_size_r>:
 800769e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80076a2:	2800      	cmp	r0, #0
 80076a4:	f1a0 0004 	sub.w	r0, r0, #4
 80076a8:	bfbc      	itt	lt
 80076aa:	580b      	ldrlt	r3, [r1, r0]
 80076ac:	18c0      	addlt	r0, r0, r3
 80076ae:	4770      	bx	lr

080076b0 <sqrt>:
 80076b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076b4:	ed2d 8b02 	vpush	{d8}
 80076b8:	b08b      	sub	sp, #44	; 0x2c
 80076ba:	ec55 4b10 	vmov	r4, r5, d0
 80076be:	f000 f851 	bl	8007764 <__ieee754_sqrt>
 80076c2:	4b26      	ldr	r3, [pc, #152]	; (800775c <sqrt+0xac>)
 80076c4:	eeb0 8a40 	vmov.f32	s16, s0
 80076c8:	eef0 8a60 	vmov.f32	s17, s1
 80076cc:	f993 6000 	ldrsb.w	r6, [r3]
 80076d0:	1c73      	adds	r3, r6, #1
 80076d2:	d02a      	beq.n	800772a <sqrt+0x7a>
 80076d4:	4622      	mov	r2, r4
 80076d6:	462b      	mov	r3, r5
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	f7f9 fa22 	bl	8000b24 <__aeabi_dcmpun>
 80076e0:	4607      	mov	r7, r0
 80076e2:	bb10      	cbnz	r0, 800772a <sqrt+0x7a>
 80076e4:	f04f 0800 	mov.w	r8, #0
 80076e8:	f04f 0900 	mov.w	r9, #0
 80076ec:	4642      	mov	r2, r8
 80076ee:	464b      	mov	r3, r9
 80076f0:	4620      	mov	r0, r4
 80076f2:	4629      	mov	r1, r5
 80076f4:	f7f9 f9ee 	bl	8000ad4 <__aeabi_dcmplt>
 80076f8:	b1b8      	cbz	r0, 800772a <sqrt+0x7a>
 80076fa:	2301      	movs	r3, #1
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	4b18      	ldr	r3, [pc, #96]	; (8007760 <sqrt+0xb0>)
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	9708      	str	r7, [sp, #32]
 8007704:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007708:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800770c:	b9b6      	cbnz	r6, 800773c <sqrt+0x8c>
 800770e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007712:	4668      	mov	r0, sp
 8007714:	f000 f8d6 	bl	80078c4 <matherr>
 8007718:	b1d0      	cbz	r0, 8007750 <sqrt+0xa0>
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	b11b      	cbz	r3, 8007726 <sqrt+0x76>
 800771e:	f000 f8d3 	bl	80078c8 <__errno>
 8007722:	9b08      	ldr	r3, [sp, #32]
 8007724:	6003      	str	r3, [r0, #0]
 8007726:	ed9d 8b06 	vldr	d8, [sp, #24]
 800772a:	eeb0 0a48 	vmov.f32	s0, s16
 800772e:	eef0 0a68 	vmov.f32	s1, s17
 8007732:	b00b      	add	sp, #44	; 0x2c
 8007734:	ecbd 8b02 	vpop	{d8}
 8007738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800773c:	4642      	mov	r2, r8
 800773e:	464b      	mov	r3, r9
 8007740:	4640      	mov	r0, r8
 8007742:	4649      	mov	r1, r9
 8007744:	f7f9 f87e 	bl	8000844 <__aeabi_ddiv>
 8007748:	2e02      	cmp	r6, #2
 800774a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800774e:	d1e0      	bne.n	8007712 <sqrt+0x62>
 8007750:	f000 f8ba 	bl	80078c8 <__errno>
 8007754:	2321      	movs	r3, #33	; 0x21
 8007756:	6003      	str	r3, [r0, #0]
 8007758:	e7df      	b.n	800771a <sqrt+0x6a>
 800775a:	bf00      	nop
 800775c:	20000228 	.word	0x20000228
 8007760:	08007adf 	.word	0x08007adf

08007764 <__ieee754_sqrt>:
 8007764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007768:	ec55 4b10 	vmov	r4, r5, d0
 800776c:	4e54      	ldr	r6, [pc, #336]	; (80078c0 <__ieee754_sqrt+0x15c>)
 800776e:	43ae      	bics	r6, r5
 8007770:	ee10 0a10 	vmov	r0, s0
 8007774:	462b      	mov	r3, r5
 8007776:	462a      	mov	r2, r5
 8007778:	4621      	mov	r1, r4
 800777a:	d113      	bne.n	80077a4 <__ieee754_sqrt+0x40>
 800777c:	ee10 2a10 	vmov	r2, s0
 8007780:	462b      	mov	r3, r5
 8007782:	ee10 0a10 	vmov	r0, s0
 8007786:	4629      	mov	r1, r5
 8007788:	f7f8 ff32 	bl	80005f0 <__aeabi_dmul>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4620      	mov	r0, r4
 8007792:	4629      	mov	r1, r5
 8007794:	f7f8 fd7a 	bl	800028c <__adddf3>
 8007798:	4604      	mov	r4, r0
 800779a:	460d      	mov	r5, r1
 800779c:	ec45 4b10 	vmov	d0, r4, r5
 80077a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	dc10      	bgt.n	80077ca <__ieee754_sqrt+0x66>
 80077a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80077ac:	4330      	orrs	r0, r6
 80077ae:	d0f5      	beq.n	800779c <__ieee754_sqrt+0x38>
 80077b0:	b15d      	cbz	r5, 80077ca <__ieee754_sqrt+0x66>
 80077b2:	ee10 2a10 	vmov	r2, s0
 80077b6:	462b      	mov	r3, r5
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f8 fd64 	bl	8000288 <__aeabi_dsub>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	f7f9 f83e 	bl	8000844 <__aeabi_ddiv>
 80077c8:	e7e6      	b.n	8007798 <__ieee754_sqrt+0x34>
 80077ca:	151b      	asrs	r3, r3, #20
 80077cc:	d10c      	bne.n	80077e8 <__ieee754_sqrt+0x84>
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d06d      	beq.n	80078ae <__ieee754_sqrt+0x14a>
 80077d2:	2000      	movs	r0, #0
 80077d4:	02d6      	lsls	r6, r2, #11
 80077d6:	d56e      	bpl.n	80078b6 <__ieee754_sqrt+0x152>
 80077d8:	1e44      	subs	r4, r0, #1
 80077da:	1b1b      	subs	r3, r3, r4
 80077dc:	f1c0 0420 	rsb	r4, r0, #32
 80077e0:	fa21 f404 	lsr.w	r4, r1, r4
 80077e4:	4322      	orrs	r2, r4
 80077e6:	4081      	lsls	r1, r0
 80077e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80077ec:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80077f0:	07dd      	lsls	r5, r3, #31
 80077f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077f6:	bf42      	ittt	mi
 80077f8:	0052      	lslmi	r2, r2, #1
 80077fa:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80077fe:	0049      	lslmi	r1, r1, #1
 8007800:	1058      	asrs	r0, r3, #1
 8007802:	2500      	movs	r5, #0
 8007804:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8007808:	441a      	add	r2, r3
 800780a:	0049      	lsls	r1, r1, #1
 800780c:	2316      	movs	r3, #22
 800780e:	462c      	mov	r4, r5
 8007810:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007814:	19a7      	adds	r7, r4, r6
 8007816:	4297      	cmp	r7, r2
 8007818:	bfde      	ittt	le
 800781a:	1bd2      	suble	r2, r2, r7
 800781c:	19bc      	addle	r4, r7, r6
 800781e:	19ad      	addle	r5, r5, r6
 8007820:	0052      	lsls	r2, r2, #1
 8007822:	3b01      	subs	r3, #1
 8007824:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007828:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800782c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007830:	d1f0      	bne.n	8007814 <__ieee754_sqrt+0xb0>
 8007832:	f04f 0e20 	mov.w	lr, #32
 8007836:	469c      	mov	ip, r3
 8007838:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800783c:	42a2      	cmp	r2, r4
 800783e:	eb06 070c 	add.w	r7, r6, ip
 8007842:	dc02      	bgt.n	800784a <__ieee754_sqrt+0xe6>
 8007844:	d112      	bne.n	800786c <__ieee754_sqrt+0x108>
 8007846:	428f      	cmp	r7, r1
 8007848:	d810      	bhi.n	800786c <__ieee754_sqrt+0x108>
 800784a:	2f00      	cmp	r7, #0
 800784c:	eb07 0c06 	add.w	ip, r7, r6
 8007850:	da34      	bge.n	80078bc <__ieee754_sqrt+0x158>
 8007852:	f1bc 0f00 	cmp.w	ip, #0
 8007856:	db31      	blt.n	80078bc <__ieee754_sqrt+0x158>
 8007858:	f104 0801 	add.w	r8, r4, #1
 800785c:	1b12      	subs	r2, r2, r4
 800785e:	428f      	cmp	r7, r1
 8007860:	bf88      	it	hi
 8007862:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007866:	1bc9      	subs	r1, r1, r7
 8007868:	4433      	add	r3, r6
 800786a:	4644      	mov	r4, r8
 800786c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007870:	f1be 0e01 	subs.w	lr, lr, #1
 8007874:	443a      	add	r2, r7
 8007876:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800787a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800787e:	d1dd      	bne.n	800783c <__ieee754_sqrt+0xd8>
 8007880:	430a      	orrs	r2, r1
 8007882:	d006      	beq.n	8007892 <__ieee754_sqrt+0x12e>
 8007884:	1c5c      	adds	r4, r3, #1
 8007886:	bf13      	iteet	ne
 8007888:	3301      	addne	r3, #1
 800788a:	3501      	addeq	r5, #1
 800788c:	4673      	moveq	r3, lr
 800788e:	f023 0301 	bicne.w	r3, r3, #1
 8007892:	106a      	asrs	r2, r5, #1
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	07e9      	lsls	r1, r5, #31
 8007898:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800789c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80078a0:	bf48      	it	mi
 80078a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80078a6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80078aa:	461c      	mov	r4, r3
 80078ac:	e776      	b.n	800779c <__ieee754_sqrt+0x38>
 80078ae:	0aca      	lsrs	r2, r1, #11
 80078b0:	3b15      	subs	r3, #21
 80078b2:	0549      	lsls	r1, r1, #21
 80078b4:	e78b      	b.n	80077ce <__ieee754_sqrt+0x6a>
 80078b6:	0052      	lsls	r2, r2, #1
 80078b8:	3001      	adds	r0, #1
 80078ba:	e78b      	b.n	80077d4 <__ieee754_sqrt+0x70>
 80078bc:	46a0      	mov	r8, r4
 80078be:	e7cd      	b.n	800785c <__ieee754_sqrt+0xf8>
 80078c0:	7ff00000 	.word	0x7ff00000

080078c4 <matherr>:
 80078c4:	2000      	movs	r0, #0
 80078c6:	4770      	bx	lr

080078c8 <__errno>:
 80078c8:	4b01      	ldr	r3, [pc, #4]	; (80078d0 <__errno+0x8>)
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000058 	.word	0x20000058

080078d4 <_sbrk>:
 80078d4:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <_sbrk+0x14>)
 80078d6:	6819      	ldr	r1, [r3, #0]
 80078d8:	4602      	mov	r2, r0
 80078da:	b909      	cbnz	r1, 80078e0 <_sbrk+0xc>
 80078dc:	4903      	ldr	r1, [pc, #12]	; (80078ec <_sbrk+0x18>)
 80078de:	6019      	str	r1, [r3, #0]
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	4402      	add	r2, r0
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	4770      	bx	lr
 80078e8:	20000324 	.word	0x20000324
 80078ec:	200005ec 	.word	0x200005ec

080078f0 <_init>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	bf00      	nop
 80078f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f6:	bc08      	pop	{r3}
 80078f8:	469e      	mov	lr, r3
 80078fa:	4770      	bx	lr

080078fc <_fini>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr
