
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000022c  20000000  080081dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002022c  2**0
                  CONTENTS
  7 .bss          000003fc  20000230  20000230  00020230  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000062c  2000062c  00020230  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ba89  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000578b  00000000  00000000  0005bce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00013058  00000000  00000000  00061470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000011e8  00000000  00000000  000744c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002368  00000000  00000000  000756b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00023b71  00000000  00000000  00077a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00016ef8  00000000  00000000  0009b589  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b3613  00000000  00000000  000b2481  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00165a94  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000437c  00000000  00000000  00165b10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fd0 	.word	0x08007fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08007fd0 	.word	0x08007fd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	d1ed      	bne.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_f2ulz>:
 8000dac:	b5d0      	push	{r4, r6, r7, lr}
 8000dae:	f7ff fbcb 	bl	8000548 <__aeabi_f2d>
 8000db2:	2200      	movs	r2, #0
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <__aeabi_f2ulz+0x44>)
 8000db6:	4606      	mov	r6, r0
 8000db8:	460f      	mov	r7, r1
 8000dba:	f7ff fc19 	bl	80005f0 <__aeabi_dmul>
 8000dbe:	f7ff fec7 	bl	8000b50 <__aeabi_d2uiz>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	f7ff fb9e 	bl	8000504 <__aeabi_ui2d>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <__aeabi_f2ulz+0x48>)
 8000dcc:	f7ff fc10 	bl	80005f0 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	4639      	mov	r1, r7
 8000dd8:	f7ff fa56 	bl	8000288 <__aeabi_dsub>
 8000ddc:	f7ff feb8 	bl	8000b50 <__aeabi_d2uiz>
 8000de0:	4623      	mov	r3, r4
 8000de2:	2200      	movs	r2, #0
 8000de4:	ea42 0200 	orr.w	r2, r2, r0
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	bdd0      	pop	{r4, r6, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	3df00000 	.word	0x3df00000
 8000df4:	41f00000 	.word	0x41f00000

08000df8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_InitTick+0x24>)
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <HAL_InitTick+0x28>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
{
 8000dfe:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
{
 8000e04:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000e06:	0998      	lsrs	r0, r3, #6
 8000e08:	f000 fca8 	bl	800175c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 fc60 	bl	80016d8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000e18:	2000      	movs	r0, #0
 8000e1a:	bd10      	pop	{r4, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	10624dd3 	.word	0x10624dd3

08000e24 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x20>)
{
 8000e26:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 fc3f 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_InitTick>
  HAL_MspInit();
 8000e3c:	f005 faee 	bl	800641c <HAL_MspInit>
}
 8000e40:	2000      	movs	r0, #0
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e48:	4a02      	ldr	r2, [pc, #8]	; (8000e54 <HAL_IncTick+0xc>)
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000328 	.word	0x20000328

08000e58 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <HAL_GetTick+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000328 	.word	0x20000328

08000e64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6a:	f7ff fff5 	bl	8000e58 <HAL_GetTick>
  uint32_t wait = Delay;
 8000e6e:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e70:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e72:	4605      	mov	r5, r0
  {
     wait++;
 8000e74:	bf18      	it	ne
 8000e76:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	1b40      	subs	r0, r0, r5
 8000e7e:	42a0      	cmp	r0, r4
 8000e80:	d3fa      	bcc.n	8000e78 <HAL_Delay+0x14>
  {
  }
}
 8000e82:	b003      	add	sp, #12
 8000e84:	bd30      	pop	{r4, r5, pc}
 8000e86:	bf00      	nop

08000e88 <HAL_ADC_ConvHalfCpltCallback>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e90:	6802      	ldr	r2, [r0, #0]
{
 8000e92:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e94:	6893      	ldr	r3, [r2, #8]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d002      	beq.n	8000ea4 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000ea4:	6811      	ldr	r1, [r2, #0]
 8000ea6:	07c9      	lsls	r1, r1, #31
 8000ea8:	d5f9      	bpl.n	8000e9e <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000eaa:	6891      	ldr	r1, [r2, #8]
 8000eac:	f001 010d 	and.w	r1, r1, #13
 8000eb0:	2901      	cmp	r1, #1
 8000eb2:	d009      	beq.n	8000ec8 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000eb6:	f042 0210 	orr.w	r2, r2, #16
 8000eba:	6442      	str	r2, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ebc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	6482      	str	r2, [r0, #72]	; 0x48
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8000ec8:	6893      	ldr	r3, [r2, #8]
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6093      	str	r3, [r2, #8]
 8000ed2:	6011      	str	r1, [r2, #0]
 8000ed4:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000ed6:	f7ff ffbf 	bl	8000e58 <HAL_GetTick>
 8000eda:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	07db      	lsls	r3, r3, #31
 8000ee2:	d5dc      	bpl.n	8000e9e <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ee4:	f7ff ffb8 	bl	8000e58 <HAL_GetTick>
 8000ee8:	1b40      	subs	r0, r0, r5
 8000eea:	2802      	cmp	r0, #2
 8000eec:	d9f6      	bls.n	8000edc <ADC_Disable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e7ce      	b.n	8000ea0 <ADC_Disable+0x10>
 8000f02:	bf00      	nop

08000f04 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f04:	6802      	ldr	r2, [r0, #0]
{
 8000f06:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f08:	6893      	ldr	r3, [r2, #8]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d00d      	beq.n	8000f2e <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000f12:	6891      	ldr	r1, [r2, #8]
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <ADC_Enable+0x70>)
 8000f16:	4219      	tst	r1, r3
 8000f18:	d00e      	beq.n	8000f38 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f1c:	f043 0310 	orr.w	r3, r3, #16
 8000f20:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f22:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	07d9      	lsls	r1, r3, #31
 8000f32:	d5ee      	bpl.n	8000f12 <ADC_Enable+0xe>
  return HAL_OK;
 8000f34:	2000      	movs	r0, #0
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000f38:	6893      	ldr	r3, [r2, #8]
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6093      	str	r3, [r2, #8]
 8000f40:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();  
 8000f42:	f7ff ff89 	bl	8000e58 <HAL_GetTick>
 8000f46:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f48:	e004      	b.n	8000f54 <ADC_Enable+0x50>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f4a:	f7ff ff85 	bl	8000e58 <HAL_GetTick>
 8000f4e:	1b40      	subs	r0, r0, r5
 8000f50:	2802      	cmp	r0, #2
 8000f52:	d804      	bhi.n	8000f5e <ADC_Enable+0x5a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	07db      	lsls	r3, r3, #31
 8000f5a:	d5f6      	bpl.n	8000f4a <ADC_Enable+0x46>
 8000f5c:	e7ea      	b.n	8000f34 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
 8000f70:	bd38      	pop	{r3, r4, r5, pc}
 8000f72:	bf00      	nop
 8000f74:	8000003f 	.word	0x8000003f

08000f78 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f78:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f80:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f82:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8000f8a:	f7ff bf7f 	b.w	8000e8c <HAL_ADC_ErrorCallback>
 8000f8e:	bf00      	nop

08000f90 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000f90:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f92:	f7ff bf79 	b.w	8000e88 <HAL_ADC_ConvHalfCpltCallback>
 8000f96:	bf00      	nop

08000f98 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f98:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f9c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000fa0:	d118      	bne.n	8000fd4 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fa4:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000faa:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fac:	68ca      	ldr	r2, [r1, #12]
 8000fae:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000fb2:	d10c      	bne.n	8000fce <ADC_DMAConvCplt+0x36>
 8000fb4:	69da      	ldr	r2, [r3, #28]
 8000fb6:	b952      	cbnz	r2, 8000fce <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fbe:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fc2:	04d2      	lsls	r2, r2, #19
 8000fc4:	d403      	bmi.n	8000fce <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fc8:	f042 0201 	orr.w	r2, r2, #1
 8000fcc:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 bfb0 	b.w	8004f34 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	4718      	bx	r3
 8000fda:	bf00      	nop

08000fdc <HAL_ADC_Init>:
{
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fde:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	f000 809d 	beq.w	8001124 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fec:	f013 0310 	ands.w	r3, r3, #16
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	d117      	bne.n	8001024 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000ff6:	2d00      	cmp	r5, #0
 8000ff8:	f000 8087 	beq.w	800110a <HAL_ADC_Init+0x12e>
 8000ffc:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ffe:	6891      	ldr	r1, [r2, #8]
 8001000:	00c9      	lsls	r1, r1, #3
 8001002:	d576      	bpl.n	80010f2 <HAL_ADC_Init+0x116>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001004:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001006:	008f      	lsls	r7, r1, #2
 8001008:	d473      	bmi.n	80010f2 <HAL_ADC_Init+0x116>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800100a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800100c:	06ce      	lsls	r6, r1, #27
 800100e:	d400      	bmi.n	8001012 <HAL_ADC_Init+0x36>
 8001010:	b163      	cbz	r3, 800102c <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001014:	f023 0312 	bic.w	r3, r3, #18
 8001018:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 800101c:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 800101e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001020:	b017      	add	sp, #92	; 0x5c
 8001022:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001024:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001026:	06db      	lsls	r3, r3, #27
 8001028:	d4f3      	bmi.n	8001012 <HAL_ADC_Init+0x36>
 800102a:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800102c:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800102e:	f010 0004 	ands.w	r0, r0, #4
 8001032:	d1ee      	bne.n	8001012 <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8001034:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001036:	f421 7181 	bic.w	r1, r1, #258	; 0x102
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800103a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	f041 0102 	orr.w	r1, r1, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001042:	bf08      	it	eq
 8001044:	4b65      	ldreq	r3, [pc, #404]	; (80011dc <HAL_ADC_Init+0x200>)
    ADC_STATE_CLR_SET(hadc->State,
 8001046:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001048:	bf18      	it	ne
 800104a:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 800104e:	9301      	str	r3, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001050:	6893      	ldr	r3, [r2, #8]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	f000 809c 	beq.w	8001194 <HAL_ADC_Init+0x1b8>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800105c:	9901      	ldr	r1, [sp, #4]
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800105e:	688b      	ldr	r3, [r1, #8]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d060      	beq.n	800112a <HAL_ADC_Init+0x14e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001068:	495d      	ldr	r1, [pc, #372]	; (80011e0 <HAL_ADC_Init+0x204>)
 800106a:	6865      	ldr	r5, [r4, #4]
 800106c:	688b      	ldr	r3, [r1, #8]
 800106e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001072:	432b      	orrs	r3, r5
 8001074:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001076:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8001078:	68e1      	ldr	r1, [r4, #12]
 800107a:	68a3      	ldr	r3, [r4, #8]
 800107c:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800107e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001080:	2f01      	cmp	r7, #1
 8001082:	ea43 0301 	orr.w	r3, r3, r1
 8001086:	bf18      	it	ne
 8001088:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800108c:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001090:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001092:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001096:	f000 8086 	beq.w	80011a6 <HAL_ADC_Init+0x1ca>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800109a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800109c:	2b01      	cmp	r3, #1
 800109e:	d002      	beq.n	80010a6 <HAL_ADC_Init+0xca>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80010a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80010a2:	430b      	orrs	r3, r1
 80010a4:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010a6:	6893      	ldr	r3, [r2, #8]
 80010a8:	f013 0f0c 	tst.w	r3, #12
 80010ac:	d10b      	bne.n	80010c6 <HAL_ADC_Init+0xea>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010ae:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80010b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010b2:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010b4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80010b8:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010ba:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80010be:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010c2:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80010c4:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 80010c6:	68d5      	ldr	r5, [r2, #12]
 80010c8:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <HAL_ADC_Init+0x208>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010ca:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80010cc:	402b      	ands	r3, r5
 80010ce:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010d0:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 80010d2:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010d4:	d06f      	beq.n	80011b6 <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010d8:	f023 030f 	bic.w	r3, r3, #15
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80010de:	2000      	movs	r0, #0
 80010e0:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010e4:	f023 0303 	bic.w	r3, r3, #3
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6463      	str	r3, [r4, #68]	; 0x44
}
 80010ee:	b017      	add	sp, #92	; 0x5c
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80010f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010f4:	f023 0312 	bic.w	r3, r3, #18
 80010f8:	f043 0310 	orr.w	r3, r3, #16
 80010fc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001106:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001108:	e783      	b.n	8001012 <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 800110a:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800110c:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800110e:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8001110:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8001114:	f005 f9c0 	bl	8006498 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001118:	6822      	ldr	r2, [r4, #0]
 800111a:	6893      	ldr	r3, [r2, #8]
 800111c:	00de      	lsls	r6, r3, #3
 800111e:	d508      	bpl.n	8001132 <HAL_ADC_Init+0x156>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001120:	462b      	mov	r3, r5
 8001122:	e76c      	b.n	8000ffe <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8001124:	2001      	movs	r0, #1
}
 8001126:	b017      	add	sp, #92	; 0x5c
 8001128:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800112a:	680b      	ldr	r3, [r1, #0]
 800112c:	07d9      	lsls	r1, r3, #31
 800112e:	d4a2      	bmi.n	8001076 <HAL_ADC_Init+0x9a>
 8001130:	e79a      	b.n	8001068 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 8001132:	4620      	mov	r0, r4
 8001134:	f7ff feac 	bl	8000e90 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001138:	6c62      	ldr	r2, [r4, #68]	; 0x44
        tmp_hal_status = ADC_Disable(hadc);
 800113a:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800113c:	06d0      	lsls	r0, r2, #27
 800113e:	f53f af5d 	bmi.w	8000ffc <HAL_ADC_Init+0x20>
 8001142:	2b00      	cmp	r3, #0
 8001144:	f47f af5a 	bne.w	8000ffc <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8001148:	6c60      	ldr	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800114a:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114c:	4926      	ldr	r1, [pc, #152]	; (80011e8 <HAL_ADC_Init+0x20c>)
 800114e:	4d27      	ldr	r5, [pc, #156]	; (80011ec <HAL_ADC_Init+0x210>)
 8001150:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8001152:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8001156:	f020 0002 	bic.w	r0, r0, #2
 800115a:	f040 0002 	orr.w	r0, r0, #2
 800115e:	6460      	str	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001160:	6890      	ldr	r0, [r2, #8]
 8001162:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8001166:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001168:	fba5 0101 	umull	r0, r1, r5, r1
 800116c:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800116e:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001170:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001174:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001176:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800117a:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800117c:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 800117e:	9900      	ldr	r1, [sp, #0]
 8001180:	2900      	cmp	r1, #0
 8001182:	f43f af3c 	beq.w	8000ffe <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8001186:	9900      	ldr	r1, [sp, #0]
 8001188:	3901      	subs	r1, #1
 800118a:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 800118c:	9900      	ldr	r1, [sp, #0]
 800118e:	2900      	cmp	r1, #0
 8001190:	d1f9      	bne.n	8001186 <HAL_ADC_Init+0x1aa>
 8001192:	e734      	b.n	8000ffe <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001194:	6813      	ldr	r3, [r2, #0]
 8001196:	07dd      	lsls	r5, r3, #31
 8001198:	f53f af6d 	bmi.w	8001076 <HAL_ADC_Init+0x9a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800119c:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800119e:	2900      	cmp	r1, #0
 80011a0:	f43f af62 	beq.w	8001068 <HAL_ADC_Init+0x8c>
 80011a4:	e75b      	b.n	800105e <HAL_ADC_Init+0x82>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011a6:	b976      	cbnz	r6, 80011c6 <HAL_ADC_Init+0x1ea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011aa:	3b01      	subs	r3, #1
 80011ac:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 80011b0:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 80011b4:	e771      	b.n	800109a <HAL_ADC_Init+0xbe>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011b8:	6a23      	ldr	r3, [r4, #32]
 80011ba:	f021 010f 	bic.w	r1, r1, #15
 80011be:	3b01      	subs	r3, #1
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
 80011c4:	e78b      	b.n	80010de <HAL_ADC_Init+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 80011c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80011da:	e75e      	b.n	800109a <HAL_ADC_Init+0xbe>
 80011dc:	50000100 	.word	0x50000100
 80011e0:	50000300 	.word	0x50000300
 80011e4:	fff0c007 	.word	0xfff0c007
 80011e8:	20000000 	.word	0x20000000
 80011ec:	431bde83 	.word	0x431bde83

080011f0 <HAL_ADC_Start_DMA>:
{
 80011f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011f4:	6803      	ldr	r3, [r0, #0]
 80011f6:	689c      	ldr	r4, [r3, #8]
 80011f8:	f014 0404 	ands.w	r4, r4, #4
 80011fc:	d003      	beq.n	8001206 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 80011fe:	2402      	movs	r4, #2
}
 8001200:	4620      	mov	r0, r4
 8001202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hadc);
 8001206:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800120a:	2b01      	cmp	r3, #1
 800120c:	4605      	mov	r5, r0
 800120e:	d0f6      	beq.n	80011fe <HAL_ADC_Start_DMA+0xe>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001210:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80012f8 <HAL_ADC_Start_DMA+0x108>
 8001214:	f8d9 6008 	ldr.w	r6, [r9, #8]
    __HAL_LOCK(hadc);
 8001218:	2701      	movs	r7, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800121a:	f016 061f 	ands.w	r6, r6, #31
    __HAL_LOCK(hadc);
 800121e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001222:	d005      	beq.n	8001230 <HAL_ADC_Start_DMA+0x40>
      __HAL_UNLOCK(hadc);
 8001224:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8001228:	463c      	mov	r4, r7
}
 800122a:	4620      	mov	r0, r4
 800122c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001230:	4690      	mov	r8, r2
 8001232:	460f      	mov	r7, r1
      tmp_hal_status = ADC_Enable(hadc);
 8001234:	f7ff fe66 	bl	8000f04 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001238:	4604      	mov	r4, r0
 800123a:	2800      	cmp	r0, #0
 800123c:	d13d      	bne.n	80012ba <HAL_ADC_Start_DMA+0xca>
        ADC_STATE_CLR_SET(hadc->State,
 800123e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001240:	6829      	ldr	r1, [r5, #0]
 8001242:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	646b      	str	r3, [r5, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001250:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001254:	06d8      	lsls	r0, r3, #27
 8001256:	d033      	beq.n	80012c0 <HAL_ADC_Start_DMA+0xd0>
 8001258:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800125c:	d030      	beq.n	80012c0 <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800125e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <HAL_ADC_Start_DMA+0xf8>)
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001266:	4291      	cmp	r1, r2
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001268:	646b      	str	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800126a:	d037      	beq.n	80012dc <HAL_ADC_Start_DMA+0xec>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800126c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800126e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8001270:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_ADC_Start_DMA+0xfc>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001272:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001276:	bf1c      	itt	ne
 8001278:	6cab      	ldrne	r3, [r5, #72]	; 0x48
 800127a:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800127e:	64ab      	str	r3, [r5, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 8001280:	2600      	movs	r6, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_ADC_Start_DMA+0x100>)
        __HAL_UNLOCK(hadc);
 8001284:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001288:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800128a:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_ADC_Start_DMA+0x104>)
 800128e:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001290:	231c      	movs	r3, #28
 8001292:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001294:	684b      	ldr	r3, [r1, #4]
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800129c:	68ce      	ldr	r6, [r1, #12]
 800129e:	f046 0601 	orr.w	r6, r6, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012a2:	4643      	mov	r3, r8
 80012a4:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012a6:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012a8:	3140      	adds	r1, #64	; 0x40
 80012aa:	f000 fabb 	bl	8001824 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80012ae:	682a      	ldr	r2, [r5, #0]
 80012b0:	6893      	ldr	r3, [r2, #8]
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6093      	str	r3, [r2, #8]
 80012b8:	e7a2      	b.n	8001200 <HAL_ADC_Start_DMA+0x10>
        __HAL_UNLOCK(hadc);
 80012ba:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
 80012be:	e79f      	b.n	8001200 <HAL_ADC_Start_DMA+0x10>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80012c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012c6:	646b      	str	r3, [r5, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012c8:	68cb      	ldr	r3, [r1, #12]
 80012ca:	019a      	lsls	r2, r3, #6
 80012cc:	d5ce      	bpl.n	800126c <HAL_ADC_Start_DMA+0x7c>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80012d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d8:	646b      	str	r3, [r5, #68]	; 0x44
 80012da:	e7c7      	b.n	800126c <HAL_ADC_Start_DMA+0x7c>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	019b      	lsls	r3, r3, #6
 80012e4:	d5c2      	bpl.n	800126c <HAL_ADC_Start_DMA+0x7c>
 80012e6:	e7f2      	b.n	80012ce <HAL_ADC_Start_DMA+0xde>
 80012e8:	50000100 	.word	0x50000100
 80012ec:	08000f99 	.word	0x08000f99
 80012f0:	08000f91 	.word	0x08000f91
 80012f4:	08000f79 	.word	0x08000f79
 80012f8:	50000300 	.word	0x50000300

080012fc <HAL_ADCEx_Calibration_Start>:
{
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80012fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <HAL_ADCEx_Calibration_Start+0x10>
 8001306:	2502      	movs	r5, #2
}
 8001308:	4628      	mov	r0, r5
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 800130c:	2701      	movs	r7, #1
 800130e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
 8001312:	4604      	mov	r4, r0
 8001314:	460e      	mov	r6, r1
  tmp_hal_status = ADC_Disable(hadc);
 8001316:	f7ff fdbb 	bl	8000e90 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 800131a:	4605      	mov	r5, r0
 800131c:	b9f0      	cbnz	r0, 800135c <HAL_ADCEx_Calibration_Start+0x60>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800131e:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8001320:	6467      	str	r7, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001322:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001324:	42be      	cmp	r6, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001326:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800132a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800132c:	d026      	beq.n	800137c <HAL_ADCEx_Calibration_Start+0x80>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001334:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001336:	f7ff fd8f 	bl	8000e58 <HAL_GetTick>
 800133a:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800133c:	e004      	b.n	8001348 <HAL_ADCEx_Calibration_Start+0x4c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800133e:	f7ff fd8b 	bl	8000e58 <HAL_GetTick>
 8001342:	1b80      	subs	r0, r0, r6
 8001344:	280a      	cmp	r0, #10
 8001346:	d80e      	bhi.n	8001366 <HAL_ADCEx_Calibration_Start+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dbf6      	blt.n	800133e <HAL_ADCEx_Calibration_Start+0x42>
    ADC_STATE_CLR_SET(hadc->State,
 8001350:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800135c:	2300      	movs	r3, #0
 800135e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001362:	4628      	mov	r0, r5
 8001364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8001366:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001368:	f023 0312 	bic.w	r3, r3, #18
 800136c:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8001370:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8001372:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001374:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001378:	2501      	movs	r5, #1
 800137a:	e7c5      	b.n	8001308 <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	e7d3      	b.n	800132e <HAL_ADCEx_Calibration_Start+0x32>
 8001386:	bf00      	nop

08001388 <HAL_ADC_ConfigChannel>:
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4603      	mov	r3, r0
 800138c:	b097      	sub	sp, #92	; 0x5c
  __HAL_LOCK(hadc);
 800138e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 8001392:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001394:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8001396:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hadc);
 8001398:	d047      	beq.n	800142a <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800139a:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800139c:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800139e:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 80013a0:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a2:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 80013a4:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a8:	d508      	bpl.n	80013bc <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80013b8:	b017      	add	sp, #92	; 0x5c
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 80013bc:	6848      	ldr	r0, [r1, #4]
 80013be:	2804      	cmp	r0, #4
 80013c0:	d936      	bls.n	8001430 <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 80013c2:	2809      	cmp	r0, #9
 80013c4:	d871      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->SQR2,
 80013c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80013ca:	0040      	lsls	r0, r0, #1
 80013cc:	381e      	subs	r0, #30
 80013ce:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80013d0:	680d      	ldr	r5, [r1, #0]
 80013d2:	271f      	movs	r7, #31
 80013d4:	4087      	lsls	r7, r0
 80013d6:	ea26 0607 	bic.w	r6, r6, r7
 80013da:	fa05 f000 	lsl.w	r0, r5, r0
 80013de:	4330      	orrs	r0, r6
 80013e0:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013e2:	6890      	ldr	r0, [r2, #8]
 80013e4:	f010 0f0c 	tst.w	r0, #12
 80013e8:	d133      	bne.n	8001452 <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013ea:	2d09      	cmp	r5, #9
 80013ec:	d94f      	bls.n	800148e <HAL_ADC_ConfigChannel+0x106>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ee:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80013f2:	3f1e      	subs	r7, #30
 80013f4:	6990      	ldr	r0, [r2, #24]
 80013f6:	688e      	ldr	r6, [r1, #8]
 80013f8:	f04f 0e07 	mov.w	lr, #7
 80013fc:	fa0e fe07 	lsl.w	lr, lr, r7
 8001400:	ea20 000e 	bic.w	r0, r0, lr
 8001404:	40be      	lsls	r6, r7
 8001406:	4330      	orrs	r0, r6
 8001408:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800140a:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 800140c:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800140e:	694f      	ldr	r7, [r1, #20]
 8001410:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001414:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8001416:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001418:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 800141c:	2e03      	cmp	r6, #3
 800141e:	f200 80cf 	bhi.w	80015c0 <HAL_ADC_ConfigChannel+0x238>
 8001422:	e8df f006 	tbb	[pc, r6]
 8001426:	747e      	.short	0x747e
 8001428:	606a      	.short	0x606a
  __HAL_LOCK(hadc);
 800142a:	2002      	movs	r0, #2
}
 800142c:	b017      	add	sp, #92	; 0x5c
 800142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 8001430:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001434:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001436:	680d      	ldr	r5, [r1, #0]
 8001438:	0040      	lsls	r0, r0, #1
 800143a:	271f      	movs	r7, #31
 800143c:	4087      	lsls	r7, r0
 800143e:	ea26 0607 	bic.w	r6, r6, r7
 8001442:	fa05 f000 	lsl.w	r0, r5, r0
 8001446:	4330      	orrs	r0, r6
 8001448:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800144a:	6890      	ldr	r0, [r2, #8]
 800144c:	f010 0f0c 	tst.w	r0, #12
 8001450:	d0cb      	beq.n	80013ea <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001452:	6890      	ldr	r0, [r2, #8]
 8001454:	f000 0003 	and.w	r0, r0, #3
 8001458:	2801      	cmp	r0, #1
 800145a:	d014      	beq.n	8001486 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800145c:	2c01      	cmp	r4, #1
 800145e:	f000 8093 	beq.w	8001588 <HAL_ADC_ConfigChannel+0x200>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001462:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001466:	2001      	movs	r0, #1
 8001468:	40a8      	lsls	r0, r5
 800146a:	ea21 0100 	bic.w	r1, r1, r0
 800146e:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001472:	2d10      	cmp	r5, #16
 8001474:	f000 8083 	beq.w	800157e <HAL_ADC_ConfigChannel+0x1f6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001478:	2d11      	cmp	r5, #17
 800147a:	f000 809c 	beq.w	80015b6 <HAL_ADC_ConfigChannel+0x22e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800147e:	2d12      	cmp	r5, #18
 8001480:	d059      	beq.n	8001536 <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001482:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001484:	e795      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001486:	6810      	ldr	r0, [r2, #0]
 8001488:	07c0      	lsls	r0, r0, #31
 800148a:	d5e7      	bpl.n	800145c <HAL_ADC_ConfigChannel+0xd4>
 800148c:	e7f9      	b.n	8001482 <HAL_ADC_ConfigChannel+0xfa>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800148e:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8001492:	6950      	ldr	r0, [r2, #20]
 8001494:	688e      	ldr	r6, [r1, #8]
 8001496:	2707      	movs	r7, #7
 8001498:	fa07 f70e 	lsl.w	r7, r7, lr
 800149c:	ea20 0007 	bic.w	r0, r0, r7
 80014a0:	fa06 f60e 	lsl.w	r6, r6, lr
 80014a4:	4330      	orrs	r0, r6
 80014a6:	6150      	str	r0, [r2, #20]
 80014a8:	e7af      	b.n	800140a <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 80014aa:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80014b0:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 80014b4:	d80b      	bhi.n	80014ce <HAL_ADC_ConfigChannel+0x146>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014b6:	383c      	subs	r0, #60	; 0x3c
 80014b8:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80014ba:	680d      	ldr	r5, [r1, #0]
 80014bc:	271f      	movs	r7, #31
 80014be:	4087      	lsls	r7, r0
 80014c0:	ea26 0607 	bic.w	r6, r6, r7
 80014c4:	fa05 f000 	lsl.w	r0, r5, r0
 80014c8:	4330      	orrs	r0, r6
 80014ca:	6390      	str	r0, [r2, #56]	; 0x38
 80014cc:	e789      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014ce:	385a      	subs	r0, #90	; 0x5a
 80014d0:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80014d2:	680d      	ldr	r5, [r1, #0]
 80014d4:	271f      	movs	r7, #31
 80014d6:	4087      	lsls	r7, r0
 80014d8:	ea26 0607 	bic.w	r6, r6, r7
 80014dc:	fa05 f000 	lsl.w	r0, r5, r0
 80014e0:	4330      	orrs	r0, r6
 80014e2:	63d0      	str	r0, [r2, #60]	; 0x3c
 80014e4:	e77d      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014e6:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 80014e8:	4e6d      	ldr	r6, [pc, #436]	; (80016a0 <HAL_ADC_ConfigChannel+0x318>)
 80014ea:	403e      	ands	r6, r7
 80014ec:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80014f0:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80014f4:	4338      	orrs	r0, r7
 80014f6:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 80014f8:	e7ab      	b.n	8001452 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014fa:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80014fc:	4e68      	ldr	r6, [pc, #416]	; (80016a0 <HAL_ADC_ConfigChannel+0x318>)
 80014fe:	403e      	ands	r6, r7
 8001500:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001504:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8001508:	4338      	orrs	r0, r7
 800150a:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 800150c:	e7a1      	b.n	8001452 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 800150e:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8001510:	4e63      	ldr	r6, [pc, #396]	; (80016a0 <HAL_ADC_ConfigChannel+0x318>)
 8001512:	403e      	ands	r6, r7
 8001514:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001518:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 800151c:	4338      	orrs	r0, r7
 800151e:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8001520:	e797      	b.n	8001452 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001522:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8001524:	4e5e      	ldr	r6, [pc, #376]	; (80016a0 <HAL_ADC_ConfigChannel+0x318>)
 8001526:	403e      	ands	r6, r7
 8001528:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800152c:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8001530:	4338      	orrs	r0, r7
 8001532:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 8001534:	e78d      	b.n	8001452 <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001536:	495b      	ldr	r1, [pc, #364]	; (80016a4 <HAL_ADC_ConfigChannel+0x31c>)
 8001538:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800153a:	024c      	lsls	r4, r1, #9
 800153c:	d4a1      	bmi.n	8001482 <HAL_ADC_ConfigChannel+0xfa>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800153e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001542:	bf0c      	ite	eq
 8001544:	4958      	ldreq	r1, [pc, #352]	; (80016a8 <HAL_ADC_ConfigChannel+0x320>)
 8001546:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
 800154a:	9101      	str	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800154c:	6891      	ldr	r1, [r2, #8]
 800154e:	f001 0103 	and.w	r1, r1, #3
 8001552:	2901      	cmp	r1, #1
 8001554:	d05d      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x28a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001556:	9801      	ldr	r0, [sp, #4]
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001558:	6881      	ldr	r1, [r0, #8]
 800155a:	f001 0103 	and.w	r1, r1, #3
 800155e:	2901      	cmp	r1, #1
 8001560:	d05e      	beq.n	8001620 <HAL_ADC_ConfigChannel+0x298>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001562:	2d10      	cmp	r5, #16
 8001564:	d074      	beq.n	8001650 <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001566:	2d11      	cmp	r5, #17
 8001568:	f000 808f 	beq.w	800168a <HAL_ADC_ConfigChannel+0x302>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800156c:	2d12      	cmp	r5, #18
 800156e:	d188      	bne.n	8001482 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001570:	494c      	ldr	r1, [pc, #304]	; (80016a4 <HAL_ADC_ConfigChannel+0x31c>)
 8001572:	688a      	ldr	r2, [r1, #8]
 8001574:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001578:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800157a:	2000      	movs	r0, #0
 800157c:	e719      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800157e:	4949      	ldr	r1, [pc, #292]	; (80016a4 <HAL_ADC_ConfigChannel+0x31c>)
 8001580:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001582:	020f      	lsls	r7, r1, #8
 8001584:	d5db      	bpl.n	800153e <HAL_ADC_ConfigChannel+0x1b6>
 8001586:	e77c      	b.n	8001482 <HAL_ADC_ConfigChannel+0xfa>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001588:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 800158c:	40ac      	lsls	r4, r5
 800158e:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001590:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001592:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001596:	d92e      	bls.n	80015f6 <HAL_ADC_ConfigChannel+0x26e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001598:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800159c:	688e      	ldr	r6, [r1, #8]
 800159e:	6994      	ldr	r4, [r2, #24]
 80015a0:	f1a0 011b 	sub.w	r1, r0, #27
 80015a4:	2707      	movs	r7, #7
 80015a6:	408f      	lsls	r7, r1
 80015a8:	fa06 f001 	lsl.w	r0, r6, r1
 80015ac:	ea24 0107 	bic.w	r1, r4, r7
 80015b0:	4301      	orrs	r1, r0
 80015b2:	6191      	str	r1, [r2, #24]
 80015b4:	e75d      	b.n	8001472 <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015b6:	493b      	ldr	r1, [pc, #236]	; (80016a4 <HAL_ADC_ConfigChannel+0x31c>)
 80015b8:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015ba:	01ce      	lsls	r6, r1, #7
 80015bc:	d5bf      	bpl.n	800153e <HAL_ADC_ConfigChannel+0x1b6>
 80015be:	e760      	b.n	8001482 <HAL_ADC_ConfigChannel+0xfa>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015c0:	6e16      	ldr	r6, [r2, #96]	; 0x60
 80015c2:	06a8      	lsls	r0, r5, #26
 80015c4:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80015c8:	4286      	cmp	r6, r0
 80015ca:	d037      	beq.n	800163c <HAL_ADC_ConfigChannel+0x2b4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015cc:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80015ce:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80015d2:	42b0      	cmp	r0, r6
 80015d4:	d02d      	beq.n	8001632 <HAL_ADC_ConfigChannel+0x2aa>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015d6:	6e96      	ldr	r6, [r2, #104]	; 0x68
 80015d8:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80015dc:	42b0      	cmp	r0, r6
 80015de:	d032      	beq.n	8001646 <HAL_ADC_ConfigChannel+0x2be>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015e0:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 80015e2:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80015e6:	42b0      	cmp	r0, r6
 80015e8:	f47f af33 	bne.w	8001452 <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015ec:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80015ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80015f2:	66d0      	str	r0, [r2, #108]	; 0x6c
 80015f4:	e72d      	b.n	8001452 <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 80015f6:	1c68      	adds	r0, r5, #1
 80015f8:	688e      	ldr	r6, [r1, #8]
 80015fa:	6954      	ldr	r4, [r2, #20]
 80015fc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001600:	2707      	movs	r7, #7
 8001602:	408f      	lsls	r7, r1
 8001604:	fa06 f001 	lsl.w	r0, r6, r1
 8001608:	ea24 0107 	bic.w	r1, r4, r7
 800160c:	4301      	orrs	r1, r0
 800160e:	6151      	str	r1, [r2, #20]
 8001610:	e732      	b.n	8001478 <HAL_ADC_ConfigChannel+0xf0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001612:	6811      	ldr	r1, [r2, #0]
 8001614:	07c8      	lsls	r0, r1, #31
 8001616:	d406      	bmi.n	8001626 <HAL_ADC_ConfigChannel+0x29e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001618:	9801      	ldr	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800161a:	2800      	cmp	r0, #0
 800161c:	d0a1      	beq.n	8001562 <HAL_ADC_ConfigChannel+0x1da>
 800161e:	e79b      	b.n	8001558 <HAL_ADC_ConfigChannel+0x1d0>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001620:	6801      	ldr	r1, [r0, #0]
 8001622:	07c9      	lsls	r1, r1, #31
 8001624:	d59d      	bpl.n	8001562 <HAL_ADC_ConfigChannel+0x1da>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800162e:	2001      	movs	r0, #1
 8001630:	e6bf      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001632:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001634:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001638:	6656      	str	r6, [r2, #100]	; 0x64
 800163a:	e7cc      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x24e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800163c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800163e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001642:	6616      	str	r6, [r2, #96]	; 0x60
 8001644:	e7c2      	b.n	80015cc <HAL_ADC_ConfigChannel+0x244>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001646:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8001648:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800164c:	6696      	str	r6, [r2, #104]	; 0x68
 800164e:	e7c7      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x258>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001650:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001654:	f47f af15 	bne.w	8001482 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001658:	4912      	ldr	r1, [pc, #72]	; (80016a4 <HAL_ADC_ConfigChannel+0x31c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165a:	4c14      	ldr	r4, [pc, #80]	; (80016ac <HAL_ADC_ConfigChannel+0x324>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800165c:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165e:	4814      	ldr	r0, [pc, #80]	; (80016b0 <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001660:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001664:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001666:	220a      	movs	r2, #10
 8001668:	6821      	ldr	r1, [r4, #0]
 800166a:	fbb1 f1f0 	udiv	r1, r1, r0
 800166e:	fb02 f201 	mul.w	r2, r2, r1
 8001672:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001674:	9a00      	ldr	r2, [sp, #0]
 8001676:	2a00      	cmp	r2, #0
 8001678:	f43f af03 	beq.w	8001482 <HAL_ADC_ConfigChannel+0xfa>
            wait_loop_index--;
 800167c:	9a00      	ldr	r2, [sp, #0]
 800167e:	3a01      	subs	r2, #1
 8001680:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001682:	9a00      	ldr	r2, [sp, #0]
 8001684:	2a00      	cmp	r2, #0
 8001686:	d1f9      	bne.n	800167c <HAL_ADC_ConfigChannel+0x2f4>
 8001688:	e6fb      	b.n	8001482 <HAL_ADC_ConfigChannel+0xfa>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800168a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800168e:	f47f aef8 	bne.w	8001482 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001692:	4904      	ldr	r1, [pc, #16]	; (80016a4 <HAL_ADC_ConfigChannel+0x31c>)
 8001694:	688a      	ldr	r2, [r1, #8]
 8001696:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800169a:	608a      	str	r2, [r1, #8]
 800169c:	e6f1      	b.n	8001482 <HAL_ADC_ConfigChannel+0xfa>
 800169e:	bf00      	nop
 80016a0:	83fff000 	.word	0x83fff000
 80016a4:	50000300 	.word	0x50000300
 80016a8:	50000100 	.word	0x50000100
 80016ac:	20000000 	.word	0x20000000
 80016b0:	000f4240 	.word	0x000f4240

080016b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80016bc:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016be:	0200      	lsls	r0, r0, #8
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80016cc:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016ce:	60d3      	str	r3, [r2, #12]
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b470      	push	{r4, r5, r6}
 80016dc:	68dc      	ldr	r4, [r3, #12]
 80016de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e2:	f1c4 0607 	rsb	r6, r4, #7
 80016e6:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	bf28      	it	cs
 80016ee:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d917      	bls.n	8001724 <HAL_NVIC_SetPriority+0x4c>
 80016f4:	3c03      	subs	r4, #3
 80016f6:	2501      	movs	r5, #1
 80016f8:	40a5      	lsls	r5, r4
 80016fa:	3d01      	subs	r5, #1
 80016fc:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fe:	2301      	movs	r3, #1
 8001700:	40b3      	lsls	r3, r6
 8001702:	3b01      	subs	r3, #1
 8001704:	4019      	ands	r1, r3
 8001706:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001708:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800170e:	db0c      	blt.n	800172a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001714:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001718:	0109      	lsls	r1, r1, #4
 800171a:	b2c9      	uxtb	r1, r1
 800171c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001720:	bc70      	pop	{r4, r5, r6}
 8001722:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001724:	2200      	movs	r2, #0
 8001726:	4614      	mov	r4, r2
 8001728:	e7e9      	b.n	80016fe <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_NVIC_SetPriority+0x68>)
 800172c:	f000 000f 	and.w	r0, r0, #15
 8001730:	0109      	lsls	r1, r1, #4
 8001732:	4403      	add	r3, r0
 8001734:	b2c9      	uxtb	r1, r1
 8001736:	7619      	strb	r1, [r3, #24]
 8001738:	bc70      	pop	{r4, r5, r6}
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	e000ecfc 	.word	0xe000ecfc

08001744 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001744:	f000 011f 	and.w	r1, r0, #31
 8001748:	2301      	movs	r3, #1
 800174a:	0940      	lsrs	r0, r0, #5
 800174c:	4a02      	ldr	r2, [pc, #8]	; (8001758 <HAL_NVIC_EnableIRQ+0x14>)
 800174e:	408b      	lsls	r3, r1
 8001750:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100

0800175c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	3801      	subs	r0, #1
 800175e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001762:	d20e      	bcs.n	8001782 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	4c08      	ldr	r4, [pc, #32]	; (800178c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	20f0      	movs	r0, #240	; 0xf0
 800176e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001772:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001774:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001776:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800177c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001780:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001792:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001794:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001796:	bf0c      	ite	eq
 8001798:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800179c:	f023 0304 	bicne.w	r3, r3, #4
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4770      	bx	lr
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <HAL_SYSTICK_IRQHandler>:
{
 80017ac:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80017ae:	f7ff fffb 	bl	80017a8 <HAL_SYSTICK_Callback>
 80017b2:	bd08      	pop	{r3, pc}

080017b4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d02d      	beq.n	8001814 <HAL_DMA_Init+0x60>
{ 
 80017b8:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017ba:	6842      	ldr	r2, [r0, #4]
 80017bc:	6887      	ldr	r7, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	68c6      	ldr	r6, [r0, #12]
 80017c0:	6904      	ldr	r4, [r0, #16]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017c2:	4915      	ldr	r1, [pc, #84]	; (8001818 <HAL_DMA_Init+0x64>)
 80017c4:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 80017c6:	433a      	orrs	r2, r7
  tmp = hdma->Instance->CCR;
 80017c8:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	695d      	ldr	r5, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017cc:	4f13      	ldr	r7, [pc, #76]	; (800181c <HAL_DMA_Init+0x68>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	4332      	orrs	r2, r6
 80017d0:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	699e      	ldr	r6, [r3, #24]
  tmp = hdma->Instance->CCR;
 80017d4:	6804      	ldr	r4, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d8:	69dd      	ldr	r5, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017dc:	4401      	add	r1, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017de:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017e2:	fba7 6101 	umull	r6, r1, r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e6:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017e8:	f024 0430 	bic.w	r4, r4, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80017ec:	4322      	orrs	r2, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017ee:	0909      	lsrs	r1, r1, #4
  hdma->Instance->CCR = tmp;  
 80017f0:	6002      	str	r2, [r0, #0]
  hdma->DmaBaseAddress = DMA1;
 80017f2:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <HAL_DMA_Init+0x6c>)
 80017f4:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80017f6:	2000      	movs	r0, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017f8:	0089      	lsls	r1, r1, #2
  hdma->State = HAL_DMA_STATE_READY;
 80017fa:	2201      	movs	r2, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017fc:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->XferCpltCallback = NULL;
 80017fe:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001800:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001802:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001804:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001806:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8001808:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800180c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}  
 8001810:	bcf0      	pop	{r4, r5, r6, r7}
 8001812:	4770      	bx	lr
    return HAL_ERROR;
 8001814:	2001      	movs	r0, #1
 8001816:	4770      	bx	lr
 8001818:	bffdfff8 	.word	0xbffdfff8
 800181c:	cccccccd 	.word	0xcccccccd
 8001820:	40020000 	.word	0x40020000

08001824 <HAL_DMA_Start_IT>:
{
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001826:	f890 4020 	ldrb.w	r4, [r0, #32]
 800182a:	2c01      	cmp	r4, #1
 800182c:	d00b      	beq.n	8001846 <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 800182e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001832:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001834:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001836:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800183a:	d006      	beq.n	800184a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 800183c:	2300      	movs	r3, #0
 800183e:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001842:	2002      	movs	r0, #2
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8001846:	2002      	movs	r0, #2
} 
 8001848:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800184a:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800184c:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800184e:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001852:	2600      	movs	r6, #0
 8001854:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001856:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001858:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800185a:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800185e:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001860:	f04f 0c02 	mov.w	ip, #2
 8001864:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001868:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800186a:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 800186e:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001870:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001872:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8001874:	bf0b      	itete	eq
 8001876:	60aa      	streq	r2, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001878:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 800187a:	60e9      	streq	r1, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 800187c:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800187e:	b14b      	cbz	r3, 8001894 <HAL_DMA_Start_IT+0x70>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	f043 030e 	orr.w	r3, r3, #14
 8001886:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001890:	2000      	movs	r0, #0
 8001892:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	f043 030a 	orr.w	r3, r3, #10
 800189a:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800189c:	682b      	ldr	r3, [r5, #0]
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	602b      	str	r3, [r5, #0]
 80018a4:	e7f0      	b.n	8001888 <HAL_DMA_Start_IT+0x64>
 80018a6:	bf00      	nop

080018a8 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018a8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80018ac:	2a02      	cmp	r2, #2
{  
 80018ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b0:	d003      	beq.n	80018ba <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b2:	2204      	movs	r2, #4
 80018b4:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
 80018b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ba:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018be:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018c0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 80018c2:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018c4:	f024 040e 	bic.w	r4, r4, #14
 80018c8:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018ca:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018cc:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018ce:	f024 0401 	bic.w	r4, r4, #1
 80018d2:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018d4:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 80018d8:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018da:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018dc:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80018e0:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80018e4:	b116      	cbz	r6, 80018ec <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80018e6:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 80018e8:	4620      	mov	r0, r4
 80018ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ec:	4630      	mov	r0, r6
}
 80018ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018f0 <HAL_DMA_IRQHandler>:
{
 80018f0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f2:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f6:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018f8:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018fa:	2304      	movs	r3, #4
 80018fc:	4093      	lsls	r3, r2
 80018fe:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 8001900:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001902:	d00d      	beq.n	8001920 <HAL_DMA_IRQHandler+0x30>
 8001904:	0777      	lsls	r7, r6, #29
 8001906:	d50b      	bpl.n	8001920 <HAL_DMA_IRQHandler+0x30>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001908:	6822      	ldr	r2, [r4, #0]
 800190a:	0692      	lsls	r2, r2, #26
 800190c:	d403      	bmi.n	8001916 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	f022 0204 	bic.w	r2, r2, #4
 8001914:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001916:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001918:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800191a:	b1c2      	cbz	r2, 800194e <HAL_DMA_IRQHandler+0x5e>
}  
 800191c:	bcf0      	pop	{r4, r5, r6, r7}
  		hdma->XferCpltCallback(hdma);
 800191e:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001920:	2302      	movs	r3, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	4219      	tst	r1, r3
 8001926:	d014      	beq.n	8001952 <HAL_DMA_IRQHandler+0x62>
 8001928:	07b7      	lsls	r7, r6, #30
 800192a:	d512      	bpl.n	8001952 <HAL_DMA_IRQHandler+0x62>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	0692      	lsls	r2, r2, #26
 8001930:	d406      	bmi.n	8001940 <HAL_DMA_IRQHandler+0x50>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001932:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001934:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001936:	f022 020a 	bic.w	r2, r2, #10
 800193a:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800193c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001940:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001942:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8001944:	2300      	movs	r3, #0
 8001946:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800194a:	2a00      	cmp	r2, #0
 800194c:	d1e6      	bne.n	800191c <HAL_DMA_IRQHandler+0x2c>
}  
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001952:	2308      	movs	r3, #8
 8001954:	4093      	lsls	r3, r2
 8001956:	420b      	tst	r3, r1
 8001958:	d0f9      	beq.n	800194e <HAL_DMA_IRQHandler+0x5e>
 800195a:	0733      	lsls	r3, r6, #28
 800195c:	d5f7      	bpl.n	800194e <HAL_DMA_IRQHandler+0x5e>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800195e:	6821      	ldr	r1, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001960:	6b06      	ldr	r6, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001962:	2301      	movs	r3, #1
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001964:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001968:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 800196c:	2700      	movs	r7, #0
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800196e:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001970:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001972:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001974:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001978:	f880 7020 	strb.w	r7, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800197c:	2e00      	cmp	r6, #0
 800197e:	d0e6      	beq.n	800194e <HAL_DMA_IRQHandler+0x5e>
    	hdma->XferErrorCallback(hdma);
 8001980:	4633      	mov	r3, r6
}  
 8001982:	bcf0      	pop	{r4, r5, r6, r7}
    	hdma->XferErrorCallback(hdma);
 8001984:	4718      	bx	r3
 8001986:	bf00      	nop

08001988 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <FLASH_SetErrorCode+0x34>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f013 0310 	ands.w	r3, r3, #16
 8001990:	d005      	beq.n	800199e <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <FLASH_SetErrorCode+0x38>)
 8001994:	69d3      	ldr	r3, [r2, #28]
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800199c:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <FLASH_SetErrorCode+0x34>)
 80019a0:	68d2      	ldr	r2, [r2, #12]
 80019a2:	0752      	lsls	r2, r2, #29
 80019a4:	d506      	bpl.n	80019b4 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80019a6:	4906      	ldr	r1, [pc, #24]	; (80019c0 <FLASH_SetErrorCode+0x38>)
 80019a8:	69ca      	ldr	r2, [r1, #28]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 80019ae:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80019b2:	61ca      	str	r2, [r1, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80019b4:	4a01      	ldr	r2, [pc, #4]	; (80019bc <FLASH_SetErrorCode+0x34>)
 80019b6:	60d3      	str	r3, [r2, #12]
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000
 80019c0:	20000330 	.word	0x20000330

080019c4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_FLASH_Unlock+0x18>)
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	0612      	lsls	r2, r2, #24
 80019ca:	d505      	bpl.n	80019d8 <HAL_FLASH_Unlock+0x14>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019cc:	4904      	ldr	r1, [pc, #16]	; (80019e0 <HAL_FLASH_Unlock+0x1c>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019d0:	6059      	str	r1, [r3, #4]
  return HAL_OK; 
 80019d2:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019d4:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80019d6:	4770      	bx	lr
    return HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
}
 80019da:	4770      	bx	lr
 80019dc:	40022000 	.word	0x40022000
 80019e0:	45670123 	.word	0x45670123
 80019e4:	cdef89ab 	.word	0xcdef89ab

080019e8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80019e8:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <HAL_FLASH_Lock+0x10>)
 80019ea:	6913      	ldr	r3, [r2, #16]
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6113      	str	r3, [r2, #16]
}
 80019f2:	2000      	movs	r0, #0
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000

080019fc <FLASH_WaitForLastOperation>:
{
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff fa2a 	bl	8000e58 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a04:	4c10      	ldr	r4, [pc, #64]	; (8001a48 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8001a06:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a08:	e001      	b.n	8001a0e <FLASH_WaitForLastOperation+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8001a0a:	1c6b      	adds	r3, r5, #1
 8001a0c:	d113      	bne.n	8001a36 <FLASH_WaitForLastOperation+0x3a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a0e:	68e3      	ldr	r3, [r4, #12]
 8001a10:	07d8      	lsls	r0, r3, #31
 8001a12:	d4fa      	bmi.n	8001a0a <FLASH_WaitForLastOperation+0xe>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a14:	68e3      	ldr	r3, [r4, #12]
 8001a16:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a18:	bf44      	itt	mi
 8001a1a:	2320      	movmi	r3, #32
 8001a1c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <FLASH_WaitForLastOperation+0x4c>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	06d2      	lsls	r2, r2, #27
 8001a24:	d403      	bmi.n	8001a2e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a26:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a28:	f010 0004 	ands.w	r0, r0, #4
 8001a2c:	d002      	beq.n	8001a34 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8001a2e:	f7ff ffab 	bl	8001988 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
}
 8001a34:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a36:	b125      	cbz	r5, 8001a42 <FLASH_WaitForLastOperation+0x46>
 8001a38:	f7ff fa0e 	bl	8000e58 <HAL_GetTick>
 8001a3c:	1b80      	subs	r0, r0, r6
 8001a3e:	4285      	cmp	r5, r0
 8001a40:	d2e5      	bcs.n	8001a0e <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8001a42:	2003      	movs	r0, #3
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	40022000 	.word	0x40022000

08001a4c <HAL_FLASH_Program>:
{
 8001a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001a50:	4f26      	ldr	r7, [pc, #152]	; (8001aec <HAL_FLASH_Program+0xa0>)
 8001a52:	7e3c      	ldrb	r4, [r7, #24]
 8001a54:	2c01      	cmp	r4, #1
 8001a56:	d102      	bne.n	8001a5e <HAL_FLASH_Program+0x12>
 8001a58:	2002      	movs	r0, #2
}
 8001a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a5e:	461e      	mov	r6, r3
 8001a60:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001a62:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a68:	4690      	mov	r8, r2
 8001a6a:	468b      	mov	fp, r1
  __HAL_LOCK(&pFlash);
 8001a6c:	763b      	strb	r3, [r7, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a6e:	f7ff ffc5 	bl	80019fc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001a72:	bba8      	cbnz	r0, 8001ae0 <HAL_FLASH_Program+0x94>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a74:	2c01      	cmp	r4, #1
 8001a76:	d037      	beq.n	8001ae8 <HAL_FLASH_Program+0x9c>
      nbiterations = 4U;
 8001a78:	2c02      	cmp	r4, #2
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2002      	moveq	r0, #2
 8001a7e:	2004      	movne	r0, #4
 8001a80:	3801      	subs	r0, #1
 8001a82:	b2c0      	uxtb	r0, r0
 8001a84:	f10b 0902 	add.w	r9, fp, #2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a88:	f8df a064 	ldr.w	sl, [pc, #100]	; 8001af0 <HAL_FLASH_Program+0xa4>
      nbiterations = 4U;
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	eb09 0940 	add.w	r9, r9, r0, lsl #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001a92:	f1c5 0220 	rsb	r2, r5, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001a9a:	fa06 f202 	lsl.w	r2, r6, r2
 8001a9e:	fa28 f005 	lsr.w	r0, r8, r5
 8001aa2:	f1a5 0120 	sub.w	r1, r5, #32
 8001aa6:	4310      	orrs	r0, r2
 8001aa8:	fa26 f101 	lsr.w	r1, r6, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001aac:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001ab0:	4308      	orrs	r0, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001ab6:	b284      	uxth	r4, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001ab8:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001abc:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8001ac0:	f8ab 4000 	strh.w	r4, [fp]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ac4:	f7ff ff9a 	bl	80019fc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001ac8:	f8da 2010 	ldr.w	r2, [sl, #16]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	f10b 0b02 	add.w	fp, fp, #2
 8001ad4:	3510      	adds	r5, #16
 8001ad6:	f8ca 2010 	str.w	r2, [sl, #16]
      if (status != HAL_OK)
 8001ada:	b908      	cbnz	r0, 8001ae0 <HAL_FLASH_Program+0x94>
    for (index = 0U; index < nbiterations; index++)
 8001adc:	45cb      	cmp	fp, r9
 8001ade:	d1d8      	bne.n	8001a92 <HAL_FLASH_Program+0x46>
  __HAL_UNLOCK(&pFlash);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	763b      	strb	r3, [r7, #24]
  return status;
 8001ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nbiterations = 1U;
 8001ae8:	4620      	mov	r0, r4
 8001aea:	e7c9      	b.n	8001a80 <HAL_FLASH_Program+0x34>
 8001aec:	20000330 	.word	0x20000330
 8001af0:	40022000 	.word	0x40022000

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001af6:	6809      	ldr	r1, [r1, #0]
 8001af8:	2900      	cmp	r1, #0
 8001afa:	f000 80d9 	beq.w	8001cb0 <HAL_GPIO_Init+0x1bc>
{
 8001afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b02:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8001cc4 <HAL_GPIO_Init+0x1d0>
{
 8001b06:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b08:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b0a:	f04f 0801 	mov.w	r8, #1
 8001b0e:	e079      	b.n	8001c04 <HAL_GPIO_Init+0x110>
 8001b10:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b14:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001b16:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1a:	fa03 f309 	lsl.w	r3, r3, r9
 8001b1e:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b20:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b24:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b28:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b2c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b30:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b34:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001b38:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3a:	f240 8098 	bls.w	8001c6e <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8001b3e:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b40:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b44:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b46:	fa02 f209 	lsl.w	r2, r2, r9
 8001b4a:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4c:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8001b4e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b50:	d554      	bpl.n	8001bfc <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_GPIO_Init+0x1c0>)
 8001b54:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_GPIO_Init+0x1c0>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6193      	str	r3, [r2, #24]
 8001b5e:	6993      	ldr	r3, [r2, #24]
 8001b60:	f025 0603 	bic.w	r6, r5, #3
 8001b64:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001b70:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b72:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001b78:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f04f 090f 	mov.w	r9, #15
 8001b80:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b84:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b88:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b8c:	f000 8086 	beq.w	8001c9c <HAL_GPIO_Init+0x1a8>
 8001b90:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_GPIO_Init+0x1c4>)
 8001b92:	4290      	cmp	r0, r2
 8001b94:	f000 8084 	beq.w	8001ca0 <HAL_GPIO_Init+0x1ac>
 8001b98:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_GPIO_Init+0x1c8>)
 8001b9a:	4290      	cmp	r0, r2
 8001b9c:	f000 8083 	beq.w	8001ca6 <HAL_GPIO_Init+0x1b2>
 8001ba0:	4a47      	ldr	r2, [pc, #284]	; (8001cc0 <HAL_GPIO_Init+0x1cc>)
 8001ba2:	4290      	cmp	r0, r2
 8001ba4:	bf0b      	itete	eq
 8001ba6:	f04f 0903 	moveq.w	r9, #3
 8001baa:	2205      	movne	r2, #5
 8001bac:	fa09 f303 	lsleq.w	r3, r9, r3
 8001bb0:	fa02 f303 	lslne.w	r3, r2, r3
 8001bb4:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bb8:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8001bba:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc0:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	bf54      	ite	pl
 8001bc4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001bc6:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8001bc8:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001bcc:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd0:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	bf54      	ite	pl
 8001bd4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001bd6:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8001bd8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bdc:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be0:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001be2:	bf54      	ite	pl
 8001be4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001be6:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8001be8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001bec:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	bf54      	ite	pl
 8001bf4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001bf6:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8001bf8:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001bfc:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001bfe:	fa31 f305 	lsrs.w	r3, r1, r5
 8001c02:	d048      	beq.n	8001c96 <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c04:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8001c08:	ea12 0701 	ands.w	r7, r2, r1
 8001c0c:	d0f6      	beq.n	8001bfc <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8001c12:	f024 0a10 	bic.w	sl, r4, #16
 8001c16:	f1ba 0f02 	cmp.w	sl, #2
 8001c1a:	f47f af79 	bne.w	8001b10 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8001c1e:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001c22:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c26:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8001c2a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	f04f 0a0f 	mov.w	sl, #15
 8001c34:	fa0a fb03 	lsl.w	fp, sl, r3
 8001c38:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c3c:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8001c40:	fa06 f303 	lsl.w	r3, r6, r3
 8001c44:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8001c48:	f8c9 3020 	str.w	r3, [r9, #32]
 8001c4c:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c50:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001c52:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c56:	fa03 f309 	lsl.w	r3, r3, r9
 8001c5a:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5c:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c60:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	fa06 f609 	lsl.w	r6, r6, r9
 8001c68:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8001c6c:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8001c6e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c70:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c74:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001c78:	fa06 f609 	lsl.w	r6, r6, r9
 8001c7c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001c80:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c82:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c86:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8a:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c8e:	40ae      	lsls	r6, r5
 8001c90:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001c92:	6046      	str	r6, [r0, #4]
 8001c94:	e753      	b.n	8001b3e <HAL_GPIO_Init+0x4a>
  }
}
 8001c96:	b003      	add	sp, #12
 8001c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e789      	b.n	8001bb4 <HAL_GPIO_Init+0xc0>
 8001ca0:	fa08 f303 	lsl.w	r3, r8, r3
 8001ca4:	e786      	b.n	8001bb4 <HAL_GPIO_Init+0xc0>
 8001ca6:	f04f 0902 	mov.w	r9, #2
 8001caa:	fa09 f303 	lsl.w	r3, r9, r3
 8001cae:	e781      	b.n	8001bb4 <HAL_GPIO_Init+0xc0>
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	48000800 	.word	0x48000800
 8001cc0:	48000c00 	.word	0x48000c00
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc8:	6903      	ldr	r3, [r0, #16]
 8001cca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001ccc:	bf14      	ite	ne
 8001cce:	2001      	movne	r0, #1
 8001cd0:	2000      	moveq	r0, #0
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	b90a      	cbnz	r2, 8001cda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd6:	6281      	str	r1, [r0, #40]	; 0x28
 8001cd8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cda:	6181      	str	r1, [r0, #24]
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop

08001ce4 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001ce6:	6951      	ldr	r1, [r2, #20]
 8001ce8:	4201      	tst	r1, r0
 8001cea:	d100      	bne.n	8001cee <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001cec:	4770      	bx	lr
{
 8001cee:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cf2:	f7ff fff5 	bl	8001ce0 <HAL_GPIO_EXTI_Callback>
 8001cf6:	bd08      	pop	{r3, pc}
 8001cf8:	40010400 	.word	0x40010400

08001cfc <I2C_Disable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001cfc:	f011 0301 	ands.w	r3, r1, #1
 8001d00:	d007      	beq.n	8001d12 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001d02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d06:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d0a:	2b28      	cmp	r3, #40	; 0x28
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2342      	moveq	r3, #66	; 0x42
 8001d10:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001d12:	078a      	lsls	r2, r1, #30
 8001d14:	d509      	bpl.n	8001d2a <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001d16:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001d1a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001d1e:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001d20:	bf0c      	ite	eq
 8001d22:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d26:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001d2a:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001d2c:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d30:	bf48      	it	mi
 8001d32:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001d36:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001d3a:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001d3c:	bf08      	it	eq
 8001d3e:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001d42:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001d44:	6801      	ldr	r1, [r0, #0]
 8001d46:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 8001d48:	bf08      	it	eq
 8001d4a:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001d4e:	ea22 0303 	bic.w	r3, r2, r3
 8001d52:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 8001d54:	2000      	movs	r0, #0
 8001d56:	4770      	bx	lr

08001d58 <I2C_WaitOnFlagUntilTimeout>:
{
 8001d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d5c:	4680      	mov	r8, r0
 8001d5e:	460f      	mov	r7, r1
 8001d60:	4616      	mov	r6, r2
 8001d62:	461d      	mov	r5, r3
 8001d64:	f8d8 4000 	ldr.w	r4, [r8]
 8001d68:	e001      	b.n	8001d6e <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8001d6a:	1c6b      	adds	r3, r5, #1
 8001d6c:	d10a      	bne.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d6e:	69a0      	ldr	r0, [r4, #24]
 8001d70:	ea37 0300 	bics.w	r3, r7, r0
 8001d74:	bf0c      	ite	eq
 8001d76:	2001      	moveq	r0, #1
 8001d78:	2000      	movne	r0, #0
 8001d7a:	42b0      	cmp	r0, r6
 8001d7c:	d0f5      	beq.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8001d7e:	2000      	movs	r0, #0
}
 8001d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d84:	b12d      	cbz	r5, 8001d92 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001d86:	f7ff f867 	bl	8000e58 <HAL_GetTick>
 8001d8a:	9b06      	ldr	r3, [sp, #24]
 8001d8c:	1ac0      	subs	r0, r0, r3
 8001d8e:	4285      	cmp	r5, r0
 8001d90:	d2e8      	bcs.n	8001d64 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d92:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	2220      	movs	r2, #32
 8001d96:	f888 2041 	strb.w	r2, [r8, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8001d9a:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9e:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        return HAL_TIMEOUT;
 8001da2:	2003      	movs	r0, #3
 8001da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001da8 <I2C_IsAcknowledgeFailed.part.0>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	4605      	mov	r5, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4616      	mov	r6, r2
 8001db0:	6828      	ldr	r0, [r5, #0]
 8001db2:	e001      	b.n	8001db8 <I2C_IsAcknowledgeFailed.part.0+0x10>
      if (Timeout != HAL_MAX_DELAY)
 8001db4:	1c63      	adds	r3, r4, #1
 8001db6:	d122      	bne.n	8001dfe <I2C_IsAcknowledgeFailed.part.0+0x56>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db8:	6983      	ldr	r3, [r0, #24]
 8001dba:	0699      	lsls	r1, r3, #26
 8001dbc:	d5fa      	bpl.n	8001db4 <I2C_IsAcknowledgeFailed.part.0+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dbe:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc0:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc2:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc4:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dc6:	6983      	ldr	r3, [r0, #24]
 8001dc8:	079a      	lsls	r2, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8001dca:	bf44      	itt	mi
 8001dcc:	2300      	movmi	r3, #0
 8001dce:	6283      	strmi	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dd0:	6983      	ldr	r3, [r0, #24]
 8001dd2:	07db      	lsls	r3, r3, #31
 8001dd4:	d403      	bmi.n	8001dde <I2C_IsAcknowledgeFailed.part.0+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dd6:	6983      	ldr	r3, [r0, #24]
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8001dde:	6843      	ldr	r3, [r0, #4]
 8001de0:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <I2C_IsAcknowledgeFailed.part.0+0x78>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001de2:	2404      	movs	r4, #4
    I2C_RESET_CR2(hi2c);
 8001de4:	4013      	ands	r3, r2
    hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8001dea:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dec:	646c      	str	r4, [r5, #68]	; 0x44
    return HAL_ERROR;
 8001dee:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001df4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dfe:	b124      	cbz	r4, 8001e0a <I2C_IsAcknowledgeFailed.part.0+0x62>
 8001e00:	f7ff f82a 	bl	8000e58 <HAL_GetTick>
 8001e04:	1b80      	subs	r0, r0, r6
 8001e06:	4284      	cmp	r4, r0
 8001e08:	d2d2      	bcs.n	8001db0 <I2C_IsAcknowledgeFailed.part.0+0x8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0a:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8001e12:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          return HAL_TIMEOUT;
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
 8001e1e:	bf00      	nop
 8001e20:	fe00e800 	.word	0xfe00e800

08001e24 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	4605      	mov	r5, r0
 8001e28:	460c      	mov	r4, r1
 8001e2a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e2c:	e001      	b.n	8001e32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001e2e:	1c61      	adds	r1, r4, #1
 8001e30:	d111      	bne.n	8001e56 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e32:	682b      	ldr	r3, [r5, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	0792      	lsls	r2, r2, #30
 8001e38:	d40b      	bmi.n	8001e52 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	06d8      	lsls	r0, r3, #27
 8001e3e:	d5f6      	bpl.n	8001e2e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8001e40:	4632      	mov	r2, r6
 8001e42:	4621      	mov	r1, r4
 8001e44:	4628      	mov	r0, r5
 8001e46:	f7ff ffaf 	bl	8001da8 <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d0ef      	beq.n	8001e2e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8001e4e:	2001      	movs	r0, #1
}
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001e52:	2000      	movs	r0, #0
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e56:	b124      	cbz	r4, 8001e62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e58:	f7fe fffe 	bl	8000e58 <HAL_GetTick>
 8001e5c:	1b80      	subs	r0, r0, r6
 8001e5e:	4284      	cmp	r4, r0
 8001e60:	d2e7      	bcs.n	8001e32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e62:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e64:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e66:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001e6c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001e74:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e76:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8001e7a:	bd70      	pop	{r4, r5, r6, pc}

08001e7c <I2C_RequestMemoryWrite>:
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpreg = hi2c->Instance->CR2;
 8001e7e:	6806      	ldr	r6, [r0, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001e80:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001ef8 <I2C_RequestMemoryWrite+0x7c>
  tmpreg = hi2c->Instance->CR2;
 8001e84:	6874      	ldr	r4, [r6, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001e86:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001e8a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001e8e:	ea04 040e 	and.w	r4, r4, lr
 8001e92:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
{
 8001e96:	b083      	sub	sp, #12
 8001e98:	4321      	orrs	r1, r4
 8001e9a:	461f      	mov	r7, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 8001ea2:	4614      	mov	r4, r2
  hi2c->Instance->CR2 = tmpreg;
 8001ea4:	6071      	str	r1, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ea8:	9908      	ldr	r1, [sp, #32]
{
 8001eaa:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eac:	f7ff ffba 	bl	8001e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eb0:	b950      	cbnz	r0, 8001ec8 <I2C_RequestMemoryWrite+0x4c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eb2:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb4:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eb6:	d00e      	beq.n	8001ed6 <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb8:	0a22      	lsrs	r2, r4, #8
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebc:	9908      	ldr	r1, [sp, #32]
 8001ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	f7ff ffaf 	bl	8001e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec6:	b128      	cbz	r0, 8001ed4 <I2C_RequestMemoryWrite+0x58>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d011      	beq.n	8001ef2 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001ece:	2003      	movs	r0, #3
}
 8001ed0:	b003      	add	sp, #12
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed4:	682b      	ldr	r3, [r5, #0]
 8001ed6:	b2e4      	uxtb	r4, r4
 8001ed8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4628      	mov	r0, r5
 8001ee0:	9b08      	ldr	r3, [sp, #32]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	f7ff ff37 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d1ef      	bne.n	8001ece <I2C_RequestMemoryWrite+0x52>
}
 8001eee:	b003      	add	sp, #12
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
}
 8001ef4:	b003      	add	sp, #12
 8001ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef8:	fc009800 	.word	0xfc009800

08001efc <I2C_RequestMemoryRead>:
{
 8001efc:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpreg = hi2c->Instance->CR2;
 8001efe:	6806      	ldr	r6, [r0, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001f00:	f8df e070 	ldr.w	lr, [pc, #112]	; 8001f74 <I2C_RequestMemoryRead+0x78>
  tmpreg = hi2c->Instance->CR2;
 8001f04:	6874      	ldr	r4, [r6, #4]
 8001f06:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001f0a:	ea04 040e 	and.w	r4, r4, lr
 8001f0e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
{
 8001f12:	b083      	sub	sp, #12
 8001f14:	4321      	orrs	r1, r4
 8001f16:	461f      	mov	r7, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 8001f1e:	4614      	mov	r4, r2
  hi2c->Instance->CR2 = tmpreg;
 8001f20:	6071      	str	r1, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f24:	9908      	ldr	r1, [sp, #32]
{
 8001f26:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f28:	f7ff ff7c 	bl	8001e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f2c:	b950      	cbnz	r0, 8001f44 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f2e:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f30:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f32:	d00e      	beq.n	8001f52 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f34:	0a22      	lsrs	r2, r4, #8
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f38:	9908      	ldr	r1, [sp, #32]
 8001f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f7ff ff71 	bl	8001e24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f42:	b128      	cbz	r0, 8001f50 <I2C_RequestMemoryRead+0x54>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f44:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d011      	beq.n	8001f6e <I2C_RequestMemoryRead+0x72>
      return HAL_TIMEOUT;
 8001f4a:	2003      	movs	r0, #3
}
 8001f4c:	b003      	add	sp, #12
 8001f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	b2e4      	uxtb	r4, r4
 8001f54:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	9b08      	ldr	r3, [sp, #32]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	; 0x40
 8001f62:	f7ff fef9 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d1ef      	bne.n	8001f4a <I2C_RequestMemoryRead+0x4e>
}
 8001f6a:	b003      	add	sp, #12
 8001f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001f6e:	2001      	movs	r0, #1
}
 8001f70:	b003      	add	sp, #12
 8001f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f74:	fc009800 	.word	0xfc009800

08001f78 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	4605      	mov	r5, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	0692      	lsls	r2, r2, #26
 8001f86:	d41e      	bmi.n	8001fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	06d9      	lsls	r1, r3, #27
 8001f8c:	d412      	bmi.n	8001fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f8e:	b124      	cbz	r4, 8001f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8001f90:	f7fe ff62 	bl	8000e58 <HAL_GetTick>
 8001f94:	1b80      	subs	r0, r0, r6
 8001f96:	4284      	cmp	r4, r0
 8001f98:	d2f2      	bcs.n	8001f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f9a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001fa4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001fac:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fae:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
 8001fb4:	4632      	mov	r2, r6
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f7ff fef5 	bl	8001da8 <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d0e5      	beq.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
      return HAL_ERROR;
 8001fc2:	2001      	movs	r0, #1
}
 8001fc4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
 8001fca:	bf00      	nop

08001fcc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d051      	beq.n	8002074 <HAL_I2C_Init+0xa8>
{
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d040      	beq.n	8002062 <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 8001fe0:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe2:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	2224      	movs	r2, #36	; 0x24
 8001fe6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001fea:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fec:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8001fee:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ff2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8001ff6:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ff8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffa:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ffc:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002002:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002004:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002006:	d031      	beq.n	800206c <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002008:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800200c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800200e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002010:	bf04      	itt	eq
 8002012:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002016:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002018:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800201a:	6922      	ldr	r2, [r4, #16]
 800201c:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8002020:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002022:	69e0      	ldr	r0, [r4, #28]
 8002024:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002026:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800202a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800202e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002030:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002032:	ea42 020e 	orr.w	r2, r2, lr
 8002036:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800203a:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800203c:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 8002040:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002042:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002044:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002046:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002048:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 800204a:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800204e:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8002050:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8002052:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002056:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800205a:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8002060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002062:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002066:	f004 fa69 	bl	800653c <HAL_I2C_MspInit>
 800206a:	e7b9      	b.n	8001fe0 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800206c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	e7d1      	b.n	8002018 <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
 8002076:	4770      	bx	lr

08002078 <HAL_I2C_Mem_Write>:
{
 8002078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800207c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002080:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002082:	2c20      	cmp	r4, #32
{
 8002084:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002088:	d003      	beq.n	8002092 <HAL_I2C_Mem_Write+0x1a>
    return HAL_BUSY;
 800208a:	2002      	movs	r0, #2
}
 800208c:	b002      	add	sp, #8
 800208e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002092:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002094:	2c00      	cmp	r4, #0
 8002096:	d03b      	beq.n	8002110 <HAL_I2C_Mem_Write+0x98>
 8002098:	2d00      	cmp	r5, #0
 800209a:	d039      	beq.n	8002110 <HAL_I2C_Mem_Write+0x98>
    __HAL_LOCK(hi2c);
 800209c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80020a0:	2c01      	cmp	r4, #1
 80020a2:	d0f2      	beq.n	800208a <HAL_I2C_Mem_Write+0x12>
 80020a4:	461f      	mov	r7, r3
 80020a6:	2301      	movs	r3, #1
 80020a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80020ac:	4690      	mov	r8, r2
 80020ae:	4689      	mov	r9, r1
 80020b0:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80020b2:	f7fe fed1 	bl	8000e58 <HAL_GetTick>
 80020b6:	4682      	mov	sl, r0
 80020b8:	e005      	b.n	80020c6 <HAL_I2C_Mem_Write+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020ba:	f7fe fecd 	bl	8000e58 <HAL_GetTick>
 80020be:	eba0 000a 	sub.w	r0, r0, sl
 80020c2:	2819      	cmp	r0, #25
 80020c4:	d826      	bhi.n	8002114 <HAL_I2C_Mem_Write+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	699e      	ldr	r6, [r3, #24]
 80020ca:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 80020ce:	d1f4      	bne.n	80020ba <HAL_I2C_Mem_Write+0x42>
    hi2c->pBuffPtr  = pData;
 80020d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020d2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d4:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020d6:	2140      	movs	r1, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->XferISR   = NULL;
 80020da:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020dc:	4642      	mov	r2, r8
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f8cd a004 	str.w	sl, [sp, #4]
 80020e4:	463b      	mov	r3, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020ea:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ee:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f0:	6466      	str	r6, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020f2:	4649      	mov	r1, r9
    hi2c->XferCount = Size;
 80020f4:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020f6:	f7ff fec1 	bl	8001e7c <I2C_RequestMemoryWrite>
 80020fa:	b1a8      	cbz	r0, 8002128 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80020fe:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002102:	2b04      	cmp	r3, #4
 8002104:	d004      	beq.n	8002110 <HAL_I2C_Mem_Write+0x98>
          return HAL_TIMEOUT;
 8002106:	2003      	movs	r0, #3
 8002108:	e7c0      	b.n	800208c <HAL_I2C_Mem_Write+0x14>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800210c:	2b04      	cmp	r3, #4
 800210e:	d1fa      	bne.n	8002106 <HAL_I2C_Mem_Write+0x8e>
        return HAL_ERROR;
 8002110:	2001      	movs	r0, #1
 8002112:	e7bb      	b.n	800208c <HAL_I2C_Mem_Write+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002114:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002116:	2220      	movs	r2, #32
 8002118:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800211c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 8002124:	2003      	movs	r0, #3
 8002126:	e7b1      	b.n	800208c <HAL_I2C_Mem_Write+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002128:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	2bff      	cmp	r3, #255	; 0xff
 800212e:	d959      	bls.n	80021e4 <HAL_I2C_Mem_Write+0x16c>
  tmpreg = hi2c->Instance->CR2;
 8002130:	6820      	ldr	r0, [r4, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002132:	4d40      	ldr	r5, [pc, #256]	; (8002234 <HAL_I2C_Mem_Write+0x1bc>)
  tmpreg = hi2c->Instance->CR2;
 8002134:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002136:	f3c9 0109 	ubfx	r1, r9, #0, #10
 800213a:	f041 73ff 	orr.w	r3, r1, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800213e:	402a      	ands	r2, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002146:	22ff      	movs	r2, #255	; 0xff
 8002148:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 800214a:	6043      	str	r3, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800214c:	b28d      	uxth	r5, r1
 800214e:	f045 76ff 	orr.w	r6, r5, #33423360	; 0x1fe0000
 8002152:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8002156:	e003      	b.n	8002160 <HAL_I2C_Mem_Write+0xe8>
    while (hi2c->XferCount > 0U);
 8002158:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d052      	beq.n	8002206 <HAL_I2C_Mem_Write+0x18e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002160:	4652      	mov	r2, sl
 8002162:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002164:	4620      	mov	r0, r4
 8002166:	f7ff fe5d 	bl	8001e24 <I2C_WaitOnTXISFlagUntilTimeout>
 800216a:	2800      	cmp	r0, #0
 800216c:	d1cd      	bne.n	800210a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800216e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002170:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 8002172:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002174:	1c58      	adds	r0, r3, #1
 8002176:	6260      	str	r0, [r4, #36]	; 0x24
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800217c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800217e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002180:	3b01      	subs	r3, #1
 8002182:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002184:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002186:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002188:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800218a:	2a00      	cmp	r2, #0
 800218c:	d1e4      	bne.n	8002158 <HAL_I2C_Mem_Write+0xe0>
 800218e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0e0      	beq.n	8002158 <HAL_I2C_Mem_Write+0xe0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	f8cd a000 	str.w	sl, [sp]
 800219c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff fdda 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021a4:	4923      	ldr	r1, [pc, #140]	; (8002234 <HAL_I2C_Mem_Write+0x1bc>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a6:	f04f 0eff 	mov.w	lr, #255	; 0xff
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021aa:	460f      	mov	r7, r1
 80021ac:	f045 7200 	orr.w	r2, r5, #33554432	; 0x2000000
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d1a8      	bne.n	8002106 <HAL_I2C_Mem_Write+0x8e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4573      	cmp	r3, lr
 80021ba:	d907      	bls.n	80021cc <HAL_I2C_Mem_Write+0x154>
  tmpreg = hi2c->Instance->CR2;
 80021bc:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021be:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  tmpreg = hi2c->Instance->CR2;
 80021c2:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021c4:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80021c6:	4333      	orrs	r3, r6
  hi2c->Instance->CR2 = tmpreg;
 80021c8:	6053      	str	r3, [r2, #4]
 80021ca:	e7c5      	b.n	8002158 <HAL_I2C_Mem_Write+0xe0>
  tmpreg = hi2c->Instance->CR2;
 80021cc:	6820      	ldr	r0, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 80021ce:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 80021d0:	6843      	ldr	r3, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 80021d2:	b289      	uxth	r1, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021d4:	403b      	ands	r3, r7
 80021d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80021d8:	b2cf      	uxtb	r7, r1
 80021da:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
          hi2c->XferSize = hi2c->XferCount;
 80021de:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 80021e0:	6043      	str	r3, [r0, #4]
 80021e2:	e7b9      	b.n	8002158 <HAL_I2C_Mem_Write+0xe0>
  tmpreg = hi2c->Instance->CR2;
 80021e4:	6825      	ldr	r5, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 80021e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021e8:	4812      	ldr	r0, [pc, #72]	; (8002234 <HAL_I2C_Mem_Write+0x1bc>)
  tmpreg = hi2c->Instance->CR2;
 80021ea:	686b      	ldr	r3, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80021ec:	f3c9 0109 	ubfx	r1, r9, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80021f0:	4018      	ands	r0, r3
      hi2c->XferSize = hi2c->XferCount;
 80021f2:	b292      	uxth	r2, r2
 80021f4:	f041 7300 	orr.w	r3, r1, #33554432	; 0x2000000
 80021f8:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80021fa:	b2d0      	uxtb	r0, r2
 80021fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 8002200:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8002202:	606b      	str	r3, [r5, #4]
 8002204:	e7a2      	b.n	800214c <HAL_I2C_Mem_Write+0xd4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002206:	4652      	mov	r2, sl
 8002208:	990c      	ldr	r1, [sp, #48]	; 0x30
 800220a:	4620      	mov	r0, r4
 800220c:	f7ff feb4 	bl	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002210:	2800      	cmp	r0, #0
 8002212:	f47f af7a 	bne.w	800210a <HAL_I2C_Mem_Write+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002216:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002218:	4d07      	ldr	r5, [pc, #28]	; (8002238 <HAL_I2C_Mem_Write+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800221a:	2120      	movs	r1, #32
 800221c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	402a      	ands	r2, r5
 8002222:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002228:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800222c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002230:	e72c      	b.n	800208c <HAL_I2C_Mem_Write+0x14>
 8002232:	bf00      	nop
 8002234:	fc009800 	.word	0xfc009800
 8002238:	fe00e800 	.word	0xfe00e800

0800223c <HAL_I2C_Mem_Read>:
{
 800223c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002240:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8002244:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	2c20      	cmp	r4, #32
{
 8002248:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800224c:	d003      	beq.n	8002256 <HAL_I2C_Mem_Read+0x1a>
    return HAL_BUSY;
 800224e:	2002      	movs	r0, #2
}
 8002250:	b002      	add	sp, #8
 8002252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8002256:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002258:	2c00      	cmp	r4, #0
 800225a:	d043      	beq.n	80022e4 <HAL_I2C_Mem_Read+0xa8>
 800225c:	2d00      	cmp	r5, #0
 800225e:	d041      	beq.n	80022e4 <HAL_I2C_Mem_Read+0xa8>
    __HAL_LOCK(hi2c);
 8002260:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002264:	2c01      	cmp	r4, #1
 8002266:	d0f2      	beq.n	800224e <HAL_I2C_Mem_Read+0x12>
 8002268:	461f      	mov	r7, r3
 800226a:	2301      	movs	r3, #1
 800226c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002270:	4690      	mov	r8, r2
 8002272:	4689      	mov	r9, r1
 8002274:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002276:	f7fe fdef 	bl	8000e58 <HAL_GetTick>
 800227a:	4682      	mov	sl, r0
 800227c:	e005      	b.n	800228a <HAL_I2C_Mem_Read+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800227e:	f7fe fdeb 	bl	8000e58 <HAL_GetTick>
 8002282:	eba0 000a 	sub.w	r0, r0, sl
 8002286:	2819      	cmp	r0, #25
 8002288:	d82e      	bhi.n	80022e8 <HAL_I2C_Mem_Read+0xac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	699e      	ldr	r6, [r3, #24]
 800228e:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8002292:	d1f4      	bne.n	800227e <HAL_I2C_Mem_Read+0x42>
    hi2c->pBuffPtr  = pData;
 8002294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002296:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002298:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800229a:	2140      	movs	r1, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800229c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->XferISR   = NULL;
 800229e:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a0:	4642      	mov	r2, r8
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f8cd a004 	str.w	sl, [sp, #4]
 80022a8:	463b      	mov	r3, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022aa:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022ae:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b2:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	6466      	str	r6, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b6:	4649      	mov	r1, r9
    hi2c->XferCount = Size;
 80022b8:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ba:	f7ff fe1f 	bl	8001efc <I2C_RequestMemoryRead>
 80022be:	b1e8      	cbz	r0, 80022fc <HAL_I2C_Mem_Read+0xc0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80022c2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d00c      	beq.n	80022e4 <HAL_I2C_Mem_Read+0xa8>
        return HAL_TIMEOUT;
 80022ca:	2003      	movs	r0, #3
 80022cc:	e7c0      	b.n	8002250 <HAL_I2C_Mem_Read+0x14>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	4652      	mov	r2, sl
 80022d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff fe50 	bl	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022d8:	2800      	cmp	r0, #0
 80022da:	f000 8083 	beq.w	80023e4 <HAL_I2C_Mem_Read+0x1a8>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d1f2      	bne.n	80022ca <HAL_I2C_Mem_Read+0x8e>
        return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
 80022e6:	e7b3      	b.n	8002250 <HAL_I2C_Mem_Read+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	2220      	movs	r2, #32
 80022ec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80022f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 80022f8:	2003      	movs	r0, #3
 80022fa:	e7a9      	b.n	8002250 <HAL_I2C_Mem_Read+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2bff      	cmp	r3, #255	; 0xff
 8002302:	d95c      	bls.n	80023be <HAL_I2C_Mem_Read+0x182>
  tmpreg = hi2c->Instance->CR2;
 8002304:	6820      	ldr	r0, [r4, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002306:	4d3e      	ldr	r5, [pc, #248]	; (8002400 <HAL_I2C_Mem_Read+0x1c4>)
  tmpreg = hi2c->Instance->CR2;
 8002308:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800230a:	f3c9 0109 	ubfx	r1, r9, #0, #10
 800230e:	f041 73ff 	orr.w	r3, r1, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002312:	402a      	ands	r2, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002314:	f443 3392 	orr.w	r3, r3, #74752	; 0x12400
 8002318:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800231a:	22ff      	movs	r2, #255	; 0xff
 800231c:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 800231e:	6043      	str	r3, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002320:	b28d      	uxth	r5, r1
 8002322:	f045 76ff 	orr.w	r6, r5, #33423360	; 0x1fe0000
 8002326:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 800232a:	e003      	b.n	8002334 <HAL_I2C_Mem_Read+0xf8>
    while (hi2c->XferCount > 0U);
 800232c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0cc      	beq.n	80022ce <HAL_I2C_Mem_Read+0x92>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002334:	f8cd a000 	str.w	sl, [sp]
 8002338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800233a:	2200      	movs	r2, #0
 800233c:	2104      	movs	r1, #4
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff fd0a 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8002344:	2800      	cmp	r0, #0
 8002346:	d1c0      	bne.n	80022ca <HAL_I2C_Mem_Read+0x8e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	1c59      	adds	r1, r3, #1
 800234e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002350:	6261      	str	r1, [r4, #36]	; 0x24
 8002352:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002354:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002356:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002358:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800235a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800235c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800235e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002360:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002362:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002364:	2a00      	cmp	r2, #0
 8002366:	d1e1      	bne.n	800232c <HAL_I2C_Mem_Read+0xf0>
 8002368:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0dd      	beq.n	800232c <HAL_I2C_Mem_Read+0xf0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	f8cd a000 	str.w	sl, [sp]
 8002376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002378:	4620      	mov	r0, r4
 800237a:	f7ff fced 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800237e:	4920      	ldr	r1, [pc, #128]	; (8002400 <HAL_I2C_Mem_Read+0x1c4>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002380:	f04f 0eff 	mov.w	lr, #255	; 0xff
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002384:	460f      	mov	r7, r1
 8002386:	f045 7200 	orr.w	r2, r5, #33554432	; 0x2000000
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800238a:	2800      	cmp	r0, #0
 800238c:	d19d      	bne.n	80022ca <HAL_I2C_Mem_Read+0x8e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800238e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	4573      	cmp	r3, lr
 8002394:	d907      	bls.n	80023a6 <HAL_I2C_Mem_Read+0x16a>
  tmpreg = hi2c->Instance->CR2;
 8002396:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002398:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  tmpreg = hi2c->Instance->CR2;
 800239c:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800239e:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80023a0:	4333      	orrs	r3, r6
  hi2c->Instance->CR2 = tmpreg;
 80023a2:	6053      	str	r3, [r2, #4]
 80023a4:	e7c2      	b.n	800232c <HAL_I2C_Mem_Read+0xf0>
  tmpreg = hi2c->Instance->CR2;
 80023a6:	6820      	ldr	r0, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 80023a8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 80023aa:	6843      	ldr	r3, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 80023ac:	b289      	uxth	r1, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80023ae:	403b      	ands	r3, r7
 80023b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80023b2:	b2cf      	uxtb	r7, r1
 80023b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
          hi2c->XferSize = hi2c->XferCount;
 80023b8:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 80023ba:	6043      	str	r3, [r0, #4]
 80023bc:	e7b6      	b.n	800232c <HAL_I2C_Mem_Read+0xf0>
  tmpreg = hi2c->Instance->CR2;
 80023be:	6825      	ldr	r5, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 80023c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80023c2:	4e0f      	ldr	r6, [pc, #60]	; (8002400 <HAL_I2C_Mem_Read+0x1c4>)
  tmpreg = hi2c->Instance->CR2;
 80023c4:	6868      	ldr	r0, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80023c6:	f3c9 0109 	ubfx	r1, r9, #0, #10
 80023ca:	f041 7300 	orr.w	r3, r1, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80023ce:	b292      	uxth	r2, r2
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80023d0:	4030      	ands	r0, r6
 80023d2:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80023d6:	b2d6      	uxtb	r6, r2
 80023d8:	4303      	orrs	r3, r0
 80023da:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 80023de:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 80023e0:	606b      	str	r3, [r5, #4]
 80023e2:	e79d      	b.n	8002320 <HAL_I2C_Mem_Read+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80023e6:	4d07      	ldr	r5, [pc, #28]	; (8002404 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e8:	2120      	movs	r1, #32
 80023ea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	402a      	ands	r2, r5
 80023f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80023f6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023fa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80023fe:	e727      	b.n	8002250 <HAL_I2C_Mem_Read+0x14>
 8002400:	fc009800 	.word	0xfc009800
 8002404:	fe00e800 	.word	0xfe00e800

08002408 <HAL_I2C_Master_Sequential_Transmit_IT>:
{
 8002408:	b4f0      	push	{r4, r5, r6, r7}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800240a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800240e:	2c20      	cmp	r4, #32
 8002410:	d002      	beq.n	8002418 <HAL_I2C_Master_Sequential_Transmit_IT+0x10>
    return HAL_BUSY;
 8002412:	2002      	movs	r0, #2
}
 8002414:	bcf0      	pop	{r4, r5, r6, r7}
 8002416:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002418:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800241c:	2c01      	cmp	r4, #1
 800241e:	d0f8      	beq.n	8002412 <HAL_I2C_Master_Sequential_Transmit_IT+0xa>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002420:	2400      	movs	r4, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002422:	2621      	movs	r6, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002424:	2510      	movs	r5, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002426:	f880 6041 	strb.w	r6, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800242a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242e:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->XferCount   = Size;
 8002430:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8002432:	9b04      	ldr	r3, [sp, #16]
 8002434:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002436:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002438:	4c18      	ldr	r4, [pc, #96]	; (800249c <HAL_I2C_Master_Sequential_Transmit_IT+0x94>)
    hi2c->pBuffPtr    = pData;
 800243a:	6242      	str	r2, [r0, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800243c:	b29b      	uxth	r3, r3
    __HAL_LOCK(hi2c);
 800243e:	2201      	movs	r2, #1
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002440:	2bff      	cmp	r3, #255	; 0xff
    __HAL_LOCK(hi2c);
 8002442:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002446:	6344      	str	r4, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002448:	d820      	bhi.n	800248c <HAL_I2C_Master_Sequential_Transmit_IT+0x84>
      hi2c->XferSize = hi2c->XferCount;
 800244a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
      xfermode = hi2c->XferOptions;
 800244c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      hi2c->XferSize = hi2c->XferCount;
 800244e:	b29b      	uxth	r3, r3
 8002450:	b2dc      	uxtb	r4, r3
 8002452:	8503      	strh	r3, [r0, #40]	; 0x28
 8002454:	0424      	lsls	r4, r4, #16
  tmpreg = hi2c->Instance->CR2;
 8002456:	6802      	ldr	r2, [r0, #0]
    if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002458:	6b05      	ldr	r5, [r0, #48]	; 0x30
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800245a:	4e11      	ldr	r6, [pc, #68]	; (80024a0 <HAL_I2C_Master_Sequential_Transmit_IT+0x98>)
  tmpreg = hi2c->Instance->CR2;
 800245c:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800245e:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002462:	4033      	ands	r3, r6
 8002464:	4319      	orrs	r1, r3
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8002466:	2d11      	cmp	r5, #17
 8002468:	ea41 0107 	orr.w	r1, r1, r7
 800246c:	bf0c      	ite	eq
 800246e:	2300      	moveq	r3, #0
 8002470:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8002474:	4321      	orrs	r1, r4
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002476:	4319      	orrs	r1, r3
  hi2c->Instance->CR2 = tmpreg;
 8002478:	6051      	str	r1, [r2, #4]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800247a:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800247c:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800247e:	f041 01f2 	orr.w	r1, r1, #242	; 0xf2
    __HAL_UNLOCK(hi2c);
 8002482:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8002486:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002488:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 800248a:	e7c3      	b.n	8002414 <HAL_I2C_Master_Sequential_Transmit_IT+0xc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800248c:	23ff      	movs	r3, #255	; 0xff
 800248e:	8503      	strh	r3, [r0, #40]	; 0x28
 8002490:	f44f 047f 	mov.w	r4, #16711680	; 0xff0000
      xfermode = I2C_RELOAD_MODE;
 8002494:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8002498:	e7dd      	b.n	8002456 <HAL_I2C_Master_Sequential_Transmit_IT+0x4e>
 800249a:	bf00      	nop
 800249c:	08002b21 	.word	0x08002b21
 80024a0:	fc009800 	.word	0xfc009800

080024a4 <HAL_I2C_Master_Sequential_Receive_IT>:
{
 80024a4:	b4f0      	push	{r4, r5, r6, r7}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80024aa:	2c20      	cmp	r4, #32
 80024ac:	d002      	beq.n	80024b4 <HAL_I2C_Master_Sequential_Receive_IT+0x10>
    return HAL_BUSY;
 80024ae:	2002      	movs	r0, #2
}
 80024b0:	bcf0      	pop	{r4, r5, r6, r7}
 80024b2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80024b4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80024b8:	2c01      	cmp	r4, #1
 80024ba:	d0f8      	beq.n	80024ae <HAL_I2C_Master_Sequential_Receive_IT+0xa>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	2400      	movs	r4, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024be:	2622      	movs	r6, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024c0:	2510      	movs	r5, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024c2:	f880 6041 	strb.w	r6, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024c6:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ca:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->XferCount   = Size;
 80024cc:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80024ce:	9b04      	ldr	r3, [sp, #16]
 80024d0:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80024d4:	4c18      	ldr	r4, [pc, #96]	; (8002538 <HAL_I2C_Master_Sequential_Receive_IT+0x94>)
    hi2c->pBuffPtr    = pData;
 80024d6:	6242      	str	r2, [r0, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d8:	b29b      	uxth	r3, r3
    __HAL_LOCK(hi2c);
 80024da:	2201      	movs	r2, #1
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024dc:	2bff      	cmp	r3, #255	; 0xff
    __HAL_LOCK(hi2c);
 80024de:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80024e2:	6344      	str	r4, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e4:	d820      	bhi.n	8002528 <HAL_I2C_Master_Sequential_Receive_IT+0x84>
      hi2c->XferSize = hi2c->XferCount;
 80024e6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
      xfermode = hi2c->XferOptions;
 80024e8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      hi2c->XferSize = hi2c->XferCount;
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	b2dc      	uxtb	r4, r3
 80024ee:	8503      	strh	r3, [r0, #40]	; 0x28
 80024f0:	0424      	lsls	r4, r4, #16
  tmpreg = hi2c->Instance->CR2;
 80024f2:	6802      	ldr	r2, [r0, #0]
    if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024f4:	6b05      	ldr	r5, [r0, #48]	; 0x30
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80024f6:	4e11      	ldr	r6, [pc, #68]	; (800253c <HAL_I2C_Master_Sequential_Receive_IT+0x98>)
  tmpreg = hi2c->Instance->CR2;
 80024f8:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80024fa:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80024fe:	4033      	ands	r3, r6
 8002500:	4319      	orrs	r1, r3
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8002502:	2d12      	cmp	r5, #18
 8002504:	ea41 0107 	orr.w	r1, r1, r7
 8002508:	bf0c      	ite	eq
 800250a:	2300      	moveq	r3, #0
 800250c:	f44f 5310 	movne.w	r3, #9216	; 0x2400
 8002510:	4321      	orrs	r1, r4
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002512:	4319      	orrs	r1, r3
  hi2c->Instance->CR2 = tmpreg;
 8002514:	6051      	str	r1, [r2, #4]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002516:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002518:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800251a:	f041 01f4 	orr.w	r1, r1, #244	; 0xf4
    __HAL_UNLOCK(hi2c);
 800251e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8002522:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002524:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002526:	e7c3      	b.n	80024b0 <HAL_I2C_Master_Sequential_Receive_IT+0xc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002528:	23ff      	movs	r3, #255	; 0xff
 800252a:	8503      	strh	r3, [r0, #40]	; 0x28
 800252c:	f44f 047f 	mov.w	r4, #16711680	; 0xff0000
      xfermode = I2C_RELOAD_MODE;
 8002530:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8002534:	e7dd      	b.n	80024f2 <HAL_I2C_Master_Sequential_Receive_IT+0x4e>
 8002536:	bf00      	nop
 8002538:	08002b21 	.word	0x08002b21
 800253c:	fc009800 	.word	0xfc009800

08002540 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002540:	6803      	ldr	r3, [r0, #0]
{
 8002542:	b410      	push	{r4}
  if (hi2c->XferISR != NULL)
 8002544:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002546:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002548:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800254a:	b11c      	cbz	r4, 8002554 <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 800254c:	4623      	mov	r3, r4
}
 800254e:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8002552:	4718      	bx	r3
}
 8002554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop

0800255c <HAL_I2C_MasterTxCpltCallback>:
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop

08002560 <I2C_ITMasterSequentialCplt>:
{
 8002560:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002562:	2500      	movs	r5, #0
 8002564:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002568:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800256c:	2b21      	cmp	r3, #33	; 0x21
{
 800256e:	4604      	mov	r4, r0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002570:	f04f 0220 	mov.w	r2, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002574:	d00d      	beq.n	8002592 <I2C_ITMasterSequentialCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002576:	2312      	movs	r3, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8002578:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->XferISR       = NULL;
 800257c:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800257e:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002580:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002582:	f7ff fbbb 	bl	8001cfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002586:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800258a:	4620      	mov	r0, r4
 800258c:	f002 fcec 	bl	8004f68 <HAL_I2C_MasterRxCpltCallback>
 8002590:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002592:	2311      	movs	r3, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8002594:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8002598:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800259a:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800259c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800259e:	f7ff fbad 	bl	8001cfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025a2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80025a6:	4620      	mov	r0, r4
 80025a8:	f7ff ffd8 	bl	800255c <HAL_I2C_MasterTxCpltCallback>
 80025ac:	bd38      	pop	{r3, r4, r5, pc}
 80025ae:	bf00      	nop

080025b0 <HAL_I2C_SlaveTxCpltCallback>:
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop

080025b4 <HAL_I2C_SlaveRxCpltCallback>:
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <I2C_ITSlaveSequentialCplt>:
{
 80025b8:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	2500      	movs	r5, #0
 80025bc:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80025c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025c4:	2b29      	cmp	r3, #41	; 0x29
{
 80025c6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80025c8:	d012      	beq.n	80025f0 <I2C_ITSlaveSequentialCplt+0x38>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025ce:	2b2a      	cmp	r3, #42	; 0x2a
 80025d0:	d000      	beq.n	80025d4 <I2C_ITSlaveSequentialCplt+0x1c>
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025d4:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025d6:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025d8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025dc:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025de:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025e0:	f7ff fb8c 	bl	8001cfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025e4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025e8:	4620      	mov	r0, r4
 80025ea:	f7ff ffe3 	bl	80025b4 <HAL_I2C_SlaveRxCpltCallback>
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025f0:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025f2:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025f4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025f8:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025fa:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025fc:	f7ff fb7e 	bl	8001cfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002600:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002604:	4620      	mov	r0, r4
 8002606:	f7ff ffd3 	bl	80025b0 <HAL_I2C_SlaveTxCpltCallback>
 800260a:	bd38      	pop	{r3, r4, r5, pc}

0800260c <HAL_I2C_AddrCallback>:
{
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <HAL_I2C_ListenCpltCallback>:
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop

08002614 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <I2C_ITListenCplt+0x5c>)
{
 8002616:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002618:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800261a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800261c:	2300      	movs	r3, #0
 800261e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002620:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002622:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 800262a:	074b      	lsls	r3, r1, #29
{
 800262c:	4604      	mov	r4, r0
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 800262e:	d511      	bpl.n	8002654 <I2C_ITListenCplt+0x40>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002632:	6802      	ldr	r2, [r0, #0]
 8002634:	1c59      	adds	r1, r3, #1
 8002636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002638:	6241      	str	r1, [r0, #36]	; 0x24
 800263a:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 800263c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800263e:	b14b      	cbz	r3, 8002654 <I2C_ITListenCplt+0x40>
      hi2c->XferCount--;
 8002640:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002642:	3a01      	subs	r2, #1
 8002644:	b292      	uxth	r2, r2
 8002646:	8542      	strh	r2, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002648:	6c42      	ldr	r2, [r0, #68]	; 0x44
      hi2c->XferSize--;
 800264a:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800264c:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 8002650:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002652:	6442      	str	r2, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002654:	2107      	movs	r1, #7
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff fb50 	bl	8001cfc <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	2110      	movs	r1, #16
  __HAL_UNLOCK(hi2c);
 8002660:	2300      	movs	r3, #0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002662:	61d1      	str	r1, [r2, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002664:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8002666:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800266a:	f7ff ffd1 	bl	8002610 <HAL_I2C_ListenCpltCallback>
 800266e:	bd10      	pop	{r4, pc}
 8002670:	ffff0000 	.word	0xffff0000

08002674 <HAL_I2C_ErrorCallback>:
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop

08002678 <HAL_I2C_AbortCpltCallback>:
{
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800267c:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <I2C_ITError+0xec>)
{
 8002680:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002682:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002686:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002688:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800268a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800268c:	4319      	orrs	r1, r3
 800268e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002690:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002694:	2b28      	cmp	r3, #40	; 0x28
{
 8002696:	4604      	mov	r4, r0
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002698:	d02c      	beq.n	80026f4 <I2C_ITError+0x78>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800269a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800269e:	2b29      	cmp	r3, #41	; 0x29
 80026a0:	d028      	beq.n	80026f4 <I2C_ITError+0x78>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80026a6:	2b2a      	cmp	r3, #42	; 0x2a
 80026a8:	d024      	beq.n	80026f4 <I2C_ITError+0x78>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026aa:	2107      	movs	r1, #7
 80026ac:	f7ff fb26 	bl	8001cfc <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80026b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026b4:	6822      	ldr	r2, [r4, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80026b6:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 80026b8:	bf1c      	itt	ne
 80026ba:	2320      	movne	r3, #32
 80026bc:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80026c4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 80026cc:	d022      	beq.n	8002714 <I2C_ITError+0x98>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026ce:	6813      	ldr	r3, [r2, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026d2:	4e26      	ldr	r6, [pc, #152]	; (800276c <I2C_ITError+0xf0>)
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_UNLOCK(hi2c);
 80026d8:	2500      	movs	r5, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026da:	6013      	str	r3, [r2, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026dc:	4608      	mov	r0, r1
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026de:	634e      	str	r6, [r1, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80026e0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026e4:	f7ff f8e0 	bl	80018a8 <HAL_DMA_Abort_IT>
 80026e8:	b308      	cbz	r0, 800272e <I2C_ITError+0xb2>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80026ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026f2:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026f4:	2103      	movs	r1, #3
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff fb00 	bl	8001cfc <I2C_Disable_IRQ>
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80026fc:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <I2C_ITError+0xf4>)
 80026fe:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_NONE;
 8002700:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002702:	2128      	movs	r1, #40	; 0x28
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002704:	6822      	ldr	r2, [r4, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002706:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	6323      	str	r3, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8002712:	d1dc      	bne.n	80026ce <I2C_ITError+0x52>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002714:	6811      	ldr	r1, [r2, #0]
 8002716:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800271a:	d109      	bne.n	8002730 <I2C_ITError+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800271c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d018      	beq.n	8002756 <I2C_ITError+0xda>
    __HAL_UNLOCK(hi2c);
 8002724:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff ffa3 	bl	8002674 <HAL_I2C_ErrorCallback>
 800272e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002730:	6811      	ldr	r1, [r2, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002732:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002734:	4e0d      	ldr	r6, [pc, #52]	; (800276c <I2C_ITError+0xf0>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002736:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800273a:	6011      	str	r1, [r2, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800273c:	4628      	mov	r0, r5
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800273e:	636e      	str	r6, [r5, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8002740:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002744:	f7ff f8b0 	bl	80018a8 <HAL_DMA_Abort_IT>
 8002748:	2800      	cmp	r0, #0
 800274a:	d0f0      	beq.n	800272e <I2C_ITError+0xb2>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800274c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800274e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002752:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002754:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002756:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002758:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff ff89 	bl	8002678 <HAL_I2C_AbortCpltCallback>
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	ffff0000 	.word	0xffff0000
 800276c:	08002d05 	.word	0x08002d05
 8002770:	08002881 	.word	0x08002881

08002774 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002774:	6803      	ldr	r3, [r0, #0]
{
 8002776:	b570      	push	{r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002778:	2208      	movs	r2, #8
{
 800277a:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277c:	2620      	movs	r6, #32
 800277e:	61de      	str	r6, [r3, #28]
{
 8002780:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002782:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002784:	2107      	movs	r1, #7
 8002786:	f7ff fab9 	bl	8001cfc <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800278a:	6823      	ldr	r3, [r4, #0]
  I2C_RESET_CR2(hi2c);
 800278c:	483a      	ldr	r0, [pc, #232]	; (8002878 <I2C_ITSlaveCplt+0x104>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002794:	6059      	str	r1, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4002      	ands	r2, r0
 800279a:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80027a0:	bf44      	itt	mi
 80027a2:	2200      	movmi	r2, #0
 80027a4:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	07d6      	lsls	r6, r2, #31
 80027aa:	d403      	bmi.n	80027b4 <I2C_ITSlaveCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	619a      	str	r2, [r3, #24]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	0450      	lsls	r0, r2, #17
 80027b8:	d42c      	bmi.n	8002814 <I2C_ITSlaveCplt+0xa0>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 80027ba:	681a      	ldr	r2, [r3, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 80027bc:	0411      	lsls	r1, r2, #16
 80027be:	d429      	bmi.n	8002814 <I2C_ITSlaveCplt+0xa0>
  if (hi2c->XferCount != 0U)
 80027c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027c2:	b292      	uxth	r2, r2
 80027c4:	b11a      	cbz	r2, 80027ce <I2C_ITSlaveCplt+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80027c8:	f042 0204 	orr.w	r2, r2, #4
 80027cc:	6462      	str	r2, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80027ce:	076a      	lsls	r2, r5, #29
 80027d0:	d506      	bpl.n	80027e0 <I2C_ITSlaveCplt+0x6c>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80027d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	1c51      	adds	r1, r2, #1
 80027d8:	6261      	str	r1, [r4, #36]	; 0x24
 80027da:	7013      	strb	r3, [r2, #0]
    if ((hi2c->XferSize > 0U))
 80027dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027de:	bb73      	cbnz	r3, 800283e <I2C_ITSlaveCplt+0xca>
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80027ea:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d131      	bne.n	8002854 <I2C_ITSlaveCplt+0xe0>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <I2C_ITSlaveCplt+0x108>)
 80027f4:	428b      	cmp	r3, r1
 80027f6:	d118      	bne.n	800282a <I2C_ITSlaveCplt+0xb6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80027fc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002800:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8002802:	f04f 0320 	mov.w	r3, #32
 8002806:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800280a:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800280c:	d030      	beq.n	8002870 <I2C_ITSlaveCplt+0xfc>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800280e:	f7ff fecf 	bl	80025b0 <HAL_I2C_SlaveTxCpltCallback>
 8002812:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8002814:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002818:	2a21      	cmp	r2, #33	; 0x21
 800281a:	bf0c      	ite	eq
 800281c:	6ba2      	ldreq	r2, [r4, #56]	; 0x38
 800281e:	6be2      	ldrne	r2, [r4, #60]	; 0x3c
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	6852      	ldr	r2, [r2, #4]
 8002824:	b292      	uxth	r2, r2
 8002826:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002828:	e7ca      	b.n	80027c0 <I2C_ITSlaveCplt+0x4c>
    hi2c->State = HAL_I2C_STATE_READY;
 800282a:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800282c:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 800282e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002832:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff feea 	bl	8002610 <HAL_I2C_ListenCpltCallback>
 800283c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 800283e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002840:	3a01      	subs	r2, #1
 8002842:	b292      	uxth	r2, r2
 8002844:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002846:	6c62      	ldr	r2, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8002848:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800284a:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 800284e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002850:	6462      	str	r2, [r4, #68]	; 0x44
 8002852:	e7c5      	b.n	80027e0 <I2C_ITSlaveCplt+0x6c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002854:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002856:	4620      	mov	r0, r4
 8002858:	f7ff ff10 	bl	800267c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800285c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002860:	2b28      	cmp	r3, #40	; 0x28
 8002862:	d1d6      	bne.n	8002812 <I2C_ITSlaveCplt+0x9e>
      I2C_ITListenCplt(hi2c, ITFlags);
 8002864:	4629      	mov	r1, r5
 8002866:	4620      	mov	r0, r4
}
 8002868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 800286c:	f7ff bed2 	b.w	8002614 <I2C_ITListenCplt>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002870:	f7ff fea0 	bl	80025b4 <HAL_I2C_SlaveRxCpltCallback>
 8002874:	bd70      	pop	{r4, r5, r6, pc}
 8002876:	bf00      	nop
 8002878:	fe00e800 	.word	0xfe00e800
 800287c:	ffff0000 	.word	0xffff0000

08002880 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8002880:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002884:	2b01      	cmp	r3, #1
 8002886:	d06b      	beq.n	8002960 <I2C_Slave_ISR_IT+0xe0>
{
 8002888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hi2c);
 800288c:	2301      	movs	r3, #1
 800288e:	4616      	mov	r6, r2
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002890:	06ca      	lsls	r2, r1, #27
{
 8002892:	b082      	sub	sp, #8
 8002894:	460d      	mov	r5, r1
 8002896:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8002898:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 800289c:	d427      	bmi.n	80028ee <I2C_Slave_ISR_IT+0x6e>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 800289e:	0769      	lsls	r1, r5, #29
 80028a0:	d54b      	bpl.n	800293a <I2C_Slave_ISR_IT+0xba>
 80028a2:	0772      	lsls	r2, r6, #29
 80028a4:	d549      	bpl.n	800293a <I2C_Slave_ISR_IT+0xba>
    if (hi2c->XferCount > 0U)
 80028a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b163      	cbz	r3, 80028c6 <I2C_Slave_ISR_IT+0x46>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80028ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ae:	6822      	ldr	r2, [r4, #0]
 80028b0:	1c59      	adds	r1, r3, #1
 80028b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028b4:	6261      	str	r1, [r4, #36]	; 0x24
 80028b6:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80028b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80028c0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80028c2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028c4:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 80028c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b933      	cbnz	r3, 80028da <I2C_Slave_ISR_IT+0x5a>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 80028cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 80028ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028d2:	d002      	beq.n	80028da <I2C_Slave_ISR_IT+0x5a>
        I2C_ITSlaveSequentialCplt(hi2c);
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff fe6f 	bl	80025b8 <I2C_ITSlaveSequentialCplt>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80028da:	06aa      	lsls	r2, r5, #26
 80028dc:	d501      	bpl.n	80028e2 <I2C_Slave_ISR_IT+0x62>
 80028de:	06b3      	lsls	r3, r6, #26
 80028e0:	d440      	bmi.n	8002964 <I2C_Slave_ISR_IT+0xe4>
  __HAL_UNLOCK(hi2c);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80028e8:	b002      	add	sp, #8
 80028ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 80028ee:	06f3      	lsls	r3, r6, #27
 80028f0:	d5d5      	bpl.n	800289e <I2C_Slave_ISR_IT+0x1e>
    if (hi2c->XferCount == 0U)
 80028f2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d13d      	bne.n	8002976 <I2C_Slave_ISR_IT+0xf6>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 80028fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002900:	d05c      	beq.n	80029bc <I2C_Slave_ISR_IT+0x13c>
 8002902:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002908:	d058      	beq.n	80029bc <I2C_Slave_ISR_IT+0x13c>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800290a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800290c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002910:	d02d      	beq.n	800296e <I2C_Slave_ISR_IT+0xee>
 8002912:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002916:	2b29      	cmp	r3, #41	; 0x29
 8002918:	d129      	bne.n	800296e <I2C_Slave_ISR_IT+0xee>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	2210      	movs	r2, #16
 800291e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002924:	bf44      	itt	mi
 8002926:	2200      	movmi	r2, #0
 8002928:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	07d0      	lsls	r0, r2, #31
 800292e:	d4d1      	bmi.n	80028d4 <I2C_Slave_ISR_IT+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	619a      	str	r2, [r3, #24]
 8002938:	e7cc      	b.n	80028d4 <I2C_Slave_ISR_IT+0x54>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 800293a:	072b      	lsls	r3, r5, #28
 800293c:	d501      	bpl.n	8002942 <I2C_Slave_ISR_IT+0xc2>
 800293e:	0737      	lsls	r7, r6, #28
 8002940:	d421      	bmi.n	8002986 <I2C_Slave_ISR_IT+0x106>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8002942:	07a8      	lsls	r0, r5, #30
 8002944:	d5c9      	bpl.n	80028da <I2C_Slave_ISR_IT+0x5a>
 8002946:	07b1      	lsls	r1, r6, #30
 8002948:	d5c7      	bpl.n	80028da <I2C_Slave_ISR_IT+0x5a>
    if (hi2c->XferCount > 0U)
 800294a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	bb3b      	cbnz	r3, 80029a0 <I2C_Slave_ISR_IT+0x120>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8002950:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002956:	d0bd      	beq.n	80028d4 <I2C_Slave_ISR_IT+0x54>
 8002958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0ba      	beq.n	80028d4 <I2C_Slave_ISR_IT+0x54>
 800295e:	e7bc      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>
  __HAL_LOCK(hi2c);
 8002960:	2002      	movs	r0, #2
 8002962:	4770      	bx	lr
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002964:	4629      	mov	r1, r5
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff ff04 	bl	8002774 <I2C_ITSlaveCplt>
 800296c:	e7b9      	b.n	80028e2 <I2C_Slave_ISR_IT+0x62>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	2210      	movs	r2, #16
 8002972:	61da      	str	r2, [r3, #28]
 8002974:	e7b1      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002976:	6803      	ldr	r3, [r0, #0]
 8002978:	2210      	movs	r2, #16
 800297a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800297c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	6443      	str	r3, [r0, #68]	; 0x44
 8002984:	e7a9      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8002986:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800298a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800298e:	2b28      	cmp	r3, #40	; 0x28
 8002990:	d01d      	beq.n	80029ce <I2C_Slave_ISR_IT+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	2108      	movs	r1, #8
    __HAL_UNLOCK(hi2c);
 8002996:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002998:	61d1      	str	r1, [r2, #28]
    __HAL_UNLOCK(hi2c);
 800299a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800299e:	e79c      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80029a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029a2:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 80029a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80029a6:	1c58      	adds	r0, r3, #1
 80029a8:	6260      	str	r0, [r4, #36]	; 0x24
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 80029ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80029b4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80029b6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80029b8:	8522      	strh	r2, [r4, #40]	; 0x28
 80029ba:	e78e      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 80029bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 80029c0:	2b28      	cmp	r3, #40	; 0x28
 80029c2:	d1a2      	bne.n	800290a <I2C_Slave_ISR_IT+0x8a>
        I2C_ITListenCplt(hi2c, ITFlags);
 80029c4:	4629      	mov	r1, r5
 80029c6:	4620      	mov	r0, r4
 80029c8:	f7ff fe24 	bl	8002614 <I2C_ITListenCplt>
 80029cc:	e785      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>
    transferdirection = I2C_GET_DIR(hi2c);
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80029d2:	699f      	ldr	r7, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80029d4:	6898      	ldr	r0, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80029d6:	68da      	ldr	r2, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80029d8:	f3c1 4800 	ubfx	r8, r1, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029dc:	68e1      	ldr	r1, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80029de:	0c3f      	lsrs	r7, r7, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029e0:	2902      	cmp	r1, #2
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80029e2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029e6:	d11a      	bne.n	8002a1e <I2C_Slave_ISR_IT+0x19e>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80029e8:	f3c0 0009 	ubfx	r0, r0, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80029ec:	ea87 17d0 	eor.w	r7, r7, r0, lsr #7
 80029f0:	f017 0706 	ands.w	r7, r7, #6
 80029f4:	d120      	bne.n	8002a38 <I2C_Slave_ISR_IT+0x1b8>
        hi2c->AddrEventCount++;
 80029f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80029f8:	3201      	adds	r2, #1
 80029fa:	64a2      	str	r2, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80029fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80029fe:	2a02      	cmp	r2, #2
 8002a00:	f47f af6b 	bne.w	80028da <I2C_Slave_ISR_IT+0x5a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a04:	f04f 0e08 	mov.w	lr, #8
          hi2c->AddrEventCount = 0U;
 8002a08:	64a7      	str	r7, [r4, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a0a:	4602      	mov	r2, r0
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a0c:	f8c3 e01c 	str.w	lr, [r3, #28]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a10:	4641      	mov	r1, r8
 8002a12:	4620      	mov	r0, r4
          __HAL_UNLOCK(hi2c);
 8002a14:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a18:	f7ff fdf8 	bl	800260c <HAL_I2C_AddrCallback>
 8002a1c:	e75d      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a1e:	2104      	movs	r1, #4
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff f96b 	bl	8001cfc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002a26:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a28:	463a      	mov	r2, r7
 8002a2a:	4641      	mov	r1, r8
      __HAL_UNLOCK(hi2c);
 8002a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7ff fdeb 	bl	800260c <HAL_I2C_AddrCallback>
 8002a36:	e750      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a38:	2104      	movs	r1, #4
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	9201      	str	r2, [sp, #4]
 8002a3e:	f7ff f95d 	bl	8001cfc <I2C_Disable_IRQ>
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a42:	9a01      	ldr	r2, [sp, #4]
        __HAL_UNLOCK(hi2c);
 8002a44:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a4a:	4641      	mov	r1, r8
        __HAL_UNLOCK(hi2c);
 8002a4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7ff fddb 	bl	800260c <HAL_I2C_AddrCallback>
 8002a56:	e740      	b.n	80028da <I2C_Slave_ISR_IT+0x5a>

08002a58 <I2C_ITMasterCplt>:
{
 8002a58:	b538      	push	{r3, r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a5a:	6803      	ldr	r3, [r0, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a5c:	4d2e      	ldr	r5, [pc, #184]	; (8002b18 <I2C_ITMasterCplt+0xc0>)
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a5e:	2220      	movs	r2, #32
 8002a60:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8002a62:	685a      	ldr	r2, [r3, #4]
{
 8002a64:	4604      	mov	r4, r0
  I2C_RESET_CR2(hi2c);
 8002a66:	482d      	ldr	r0, [pc, #180]	; (8002b1c <I2C_ITMasterCplt+0xc4>)
 8002a68:	4002      	ands	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	2000      	movs	r0, #0
  I2C_RESET_CR2(hi2c);
 8002a6c:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8002a70:	6360      	str	r0, [r4, #52]	; 0x34
  if ((ITFlags & I2C_FLAG_AF) != RESET)
 8002a72:	06c8      	lsls	r0, r1, #27
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a74:	62e5      	str	r5, [r4, #44]	; 0x2c
  if ((ITFlags & I2C_FLAG_AF) != RESET)
 8002a76:	d505      	bpl.n	8002a84 <I2C_ITMasterCplt+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a78:	2210      	movs	r2, #16
 8002a7a:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002a7e:	f042 0204 	orr.w	r2, r2, #4
 8002a82:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002a88:	bf44      	itt	mi
 8002a8a:	2200      	movmi	r2, #0
 8002a8c:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	07d2      	lsls	r2, r2, #31
 8002a92:	d403      	bmi.n	8002a9c <I2C_ITMasterCplt+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	619a      	str	r2, [r3, #24]
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002a9c:	2103      	movs	r1, #3
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff f92c 	bl	8001cfc <I2C_Disable_IRQ>
  if ((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
 8002aa4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002aa6:	b963      	cbnz	r3, 8002ac2 <I2C_ITMasterCplt+0x6a>
 8002aa8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002aac:	2a60      	cmp	r2, #96	; 0x60
 8002aae:	d008      	beq.n	8002ac2 <I2C_ITMasterCplt+0x6a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ab0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002ab4:	2a21      	cmp	r2, #33	; 0x21
 8002ab6:	d00a      	beq.n	8002ace <I2C_ITMasterCplt+0x76>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ab8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002abc:	2a22      	cmp	r2, #34	; 0x22
 8002abe:	d015      	beq.n	8002aec <I2C_ITMasterCplt+0x94>
 8002ac0:	bd38      	pop	{r3, r4, r5, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ac2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002ac4:	4620      	mov	r0, r4
}
 8002ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002aca:	f7ff bdd7 	b.w	800267c <I2C_ITError>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ad4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002ad8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002adc:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ae2:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ae4:	d011      	beq.n	8002b0a <I2C_ITMasterCplt+0xb2>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ae6:	f7ff fd39 	bl	800255c <HAL_I2C_MasterTxCpltCallback>
 8002aea:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	2220      	movs	r2, #32
 8002aee:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002af2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002af6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002afa:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b00:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b02:	d005      	beq.n	8002b10 <I2C_ITMasterCplt+0xb8>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b04:	f002 fa30 	bl	8004f68 <HAL_I2C_MasterRxCpltCallback>
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b0a:	f002 fa21 	bl	8004f50 <HAL_I2C_MemTxCpltCallback>
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b10:	f002 fa24 	bl	8004f5c <HAL_I2C_MemRxCpltCallback>
 8002b14:	bd38      	pop	{r3, r4, r5, pc}
 8002b16:	bf00      	nop
 8002b18:	ffff0000 	.word	0xffff0000
 8002b1c:	fe00e800 	.word	0xfe00e800

08002b20 <I2C_Master_ISR_IT>:
{
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8002b22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d062      	beq.n	8002bf0 <I2C_Master_ISR_IT+0xd0>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002b30:	06cb      	lsls	r3, r1, #27
 8002b32:	4616      	mov	r6, r2
 8002b34:	460d      	mov	r5, r1
 8002b36:	4604      	mov	r4, r0
 8002b38:	d40c      	bmi.n	8002b54 <I2C_Master_ISR_IT+0x34>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8002b3a:	076a      	lsls	r2, r5, #29
 8002b3c:	d520      	bpl.n	8002b80 <I2C_Master_ISR_IT+0x60>
 8002b3e:	0773      	lsls	r3, r6, #29
 8002b40:	d51e      	bpl.n	8002b80 <I2C_Master_ISR_IT+0x60>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b44:	6822      	ldr	r2, [r4, #0]
 8002b46:	1c59      	adds	r1, r3, #1
 8002b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b4a:	6261      	str	r1, [r4, #36]	; 0x24
 8002b4c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 8002b50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002b52:	e021      	b.n	8002b98 <I2C_Master_ISR_IT+0x78>
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002b54:	06d7      	lsls	r7, r2, #27
 8002b56:	d5f0      	bpl.n	8002b3a <I2C_Master_ISR_IT+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b58:	6803      	ldr	r3, [r0, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b60:	f042 0204 	orr.w	r2, r2, #4
 8002b64:	6442      	str	r2, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002b6a:	bf44      	itt	mi
 8002b6c:	2200      	movmi	r2, #0
 8002b6e:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	07d1      	lsls	r1, r2, #31
 8002b74:	d415      	bmi.n	8002ba2 <I2C_Master_ISR_IT+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	619a      	str	r2, [r3, #24]
 8002b7e:	e010      	b.n	8002ba2 <I2C_Master_ISR_IT+0x82>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8002b80:	07af      	lsls	r7, r5, #30
 8002b82:	d516      	bpl.n	8002bb2 <I2C_Master_ISR_IT+0x92>
 8002b84:	07b0      	lsls	r0, r6, #30
 8002b86:	d514      	bpl.n	8002bb2 <I2C_Master_ISR_IT+0x92>
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b8a:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize--;
 8002b8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002b8e:	1c58      	adds	r0, r3, #1
 8002b90:	6260      	str	r0, [r4, #36]	; 0x24
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	628b      	str	r3, [r1, #40]	; 0x28
    hi2c->XferCount--;
 8002b96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29b      	uxth	r3, r3
    hi2c->XferSize--;
 8002b9c:	3a01      	subs	r2, #1
    hi2c->XferCount--;
 8002b9e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 8002ba0:	8522      	strh	r2, [r4, #40]	; 0x28
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8002ba2:	06aa      	lsls	r2, r5, #26
 8002ba4:	d501      	bpl.n	8002baa <I2C_Master_ISR_IT+0x8a>
 8002ba6:	06b3      	lsls	r3, r6, #26
 8002ba8:	d438      	bmi.n	8002c1c <I2C_Master_ISR_IT+0xfc>
  __HAL_UNLOCK(hi2c);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8002bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8002bb2:	0629      	lsls	r1, r5, #24
 8002bb4:	d51e      	bpl.n	8002bf4 <I2C_Master_ISR_IT+0xd4>
 8002bb6:	0672      	lsls	r2, r6, #25
 8002bb8:	d5f3      	bpl.n	8002ba2 <I2C_Master_ISR_IT+0x82>
    if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002bba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d132      	bne.n	8002c26 <I2C_Master_ISR_IT+0x106>
 8002bc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02e      	beq.n	8002c26 <I2C_Master_ISR_IT+0x106>
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002bc8:	6822      	ldr	r2, [r4, #0]
 8002bca:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bcc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002bce:	b280      	uxth	r0, r0
 8002bd0:	28ff      	cmp	r0, #255	; 0xff
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002bd2:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd6:	d933      	bls.n	8002c40 <I2C_Master_ISR_IT+0x120>
  tmpreg = hi2c->Instance->CR2;
 8002bd8:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002bda:	4829      	ldr	r0, [pc, #164]	; (8002c80 <I2C_Master_ISR_IT+0x160>)
 8002bdc:	4003      	ands	r3, r0
 8002bde:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002be6:	430b      	orrs	r3, r1
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be8:	21ff      	movs	r1, #255	; 0xff
 8002bea:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8002bec:	6053      	str	r3, [r2, #4]
 8002bee:	e7d8      	b.n	8002ba2 <I2C_Master_ISR_IT+0x82>
  __HAL_LOCK(hi2c);
 8002bf0:	2002      	movs	r0, #2
}
 8002bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8002bf4:	066f      	lsls	r7, r5, #25
 8002bf6:	d5d4      	bpl.n	8002ba2 <I2C_Master_ISR_IT+0x82>
 8002bf8:	0670      	lsls	r0, r6, #25
 8002bfa:	d5d2      	bpl.n	8002ba2 <I2C_Master_ISR_IT+0x82>
    if (hi2c->XferCount == 0U)
 8002bfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b9cb      	cbnz	r3, 8002c36 <I2C_Master_ISR_IT+0x116>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	0191      	lsls	r1, r2, #6
 8002c08:	d4cb      	bmi.n	8002ba2 <I2C_Master_ISR_IT+0x82>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c0c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002c10:	d10d      	bne.n	8002c2e <I2C_Master_ISR_IT+0x10e>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	e7c2      	b.n	8002ba2 <I2C_Master_ISR_IT+0x82>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff ff1a 	bl	8002a58 <I2C_ITMasterCplt>
 8002c24:	e7c1      	b.n	8002baa <I2C_Master_ISR_IT+0x8a>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	019b      	lsls	r3, r3, #6
 8002c2c:	d403      	bmi.n	8002c36 <I2C_Master_ISR_IT+0x116>
        I2C_ITMasterSequentialCplt(hi2c);
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff fc96 	bl	8002560 <I2C_ITMasterSequentialCplt>
 8002c34:	e7b5      	b.n	8002ba2 <I2C_Master_ISR_IT+0x82>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c36:	2140      	movs	r1, #64	; 0x40
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7ff fd1f 	bl	800267c <I2C_ITError>
 8002c3e:	e7b0      	b.n	8002ba2 <I2C_Master_ISR_IT+0x82>
        hi2c->XferSize = hi2c->XferCount;
 8002c40:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8002c44:	b280      	uxth	r0, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8002c4a:	8520      	strh	r0, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c4c:	d00c      	beq.n	8002c68 <I2C_Master_ISR_IT+0x148>
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002c4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002c50:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8002c80 <I2C_Master_ISR_IT+0x160>
  tmpreg = hi2c->Instance->CR2;
 8002c54:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002c56:	ea03 030e 	and.w	r3, r3, lr
 8002c5a:	433b      	orrs	r3, r7
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002c5c:	b2c0      	uxtb	r0, r0
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hi2c->Instance->CR2 = tmpreg;
 8002c64:	6053      	str	r3, [r2, #4]
 8002c66:	e79c      	b.n	8002ba2 <I2C_Master_ISR_IT+0x82>
  tmpreg = hi2c->Instance->CR2;
 8002c68:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002c6a:	4f05      	ldr	r7, [pc, #20]	; (8002c80 <I2C_Master_ISR_IT+0x160>)
 8002c6c:	403b      	ands	r3, r7
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002c72:	b2c0      	uxtb	r0, r0
 8002c74:	430b      	orrs	r3, r1
 8002c76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  hi2c->Instance->CR2 = tmpreg;
 8002c7a:	6050      	str	r0, [r2, #4]
 8002c7c:	e791      	b.n	8002ba2 <I2C_Master_ISR_IT+0x82>
 8002c7e:	bf00      	nop
 8002c80:	fc009800 	.word	0xfc009800

08002c84 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c84:	6802      	ldr	r2, [r0, #0]
 8002c86:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c88:	6811      	ldr	r1, [r2, #0]
{
 8002c8a:	b410      	push	{r4}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002c8c:	05dc      	lsls	r4, r3, #23
 8002c8e:	d51a      	bpl.n	8002cc6 <HAL_I2C_ER_IRQHandler+0x42>
 8002c90:	060c      	lsls	r4, r1, #24
 8002c92:	d525      	bpl.n	8002ce0 <HAL_I2C_ER_IRQHandler+0x5c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c94:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002c96:	f041 0101 	orr.w	r1, r1, #1
 8002c9a:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c9c:	f44f 7480 	mov.w	r4, #256	; 0x100
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002ca0:	0559      	lsls	r1, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ca2:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002ca4:	d52a      	bpl.n	8002cfc <HAL_I2C_ER_IRQHandler+0x78>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ca6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ca8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002cac:	f041 0108 	orr.w	r1, r1, #8
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002cb0:	059b      	lsls	r3, r3, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002cb2:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cb4:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002cb6:	d419      	bmi.n	8002cec <HAL_I2C_ER_IRQHandler+0x68>
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002cb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cba:	f013 0f0b 	tst.w	r3, #11
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_I2C_ER_IRQHandler+0x52>
}
 8002cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cc4:	4770      	bx	lr
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002cc6:	055c      	lsls	r4, r3, #21
 8002cc8:	d50c      	bpl.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x60>
 8002cca:	0609      	lsls	r1, r1, #24
 8002ccc:	d4eb      	bmi.n	8002ca6 <HAL_I2C_ER_IRQHandler+0x22>
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002cce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cd0:	f013 0f0b 	tst.w	r3, #11
 8002cd4:	d0f4      	beq.n	8002cc0 <HAL_I2C_ER_IRQHandler+0x3c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cd6:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8002cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cdc:	f7ff bcce 	b.w	800267c <I2C_ITError>
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002ce0:	055c      	lsls	r4, r3, #21
 8002ce2:	d4e9      	bmi.n	8002cb8 <HAL_I2C_ER_IRQHandler+0x34>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002ce4:	059c      	lsls	r4, r3, #22
 8002ce6:	d5e7      	bpl.n	8002cb8 <HAL_I2C_ER_IRQHandler+0x34>
 8002ce8:	060b      	lsls	r3, r1, #24
 8002cea:	d5e5      	bpl.n	8002cb8 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002cec:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cee:	f44f 7100 	mov.w	r1, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cf8:	61d1      	str	r1, [r2, #28]
 8002cfa:	e7dd      	b.n	8002cb8 <HAL_I2C_ER_IRQHandler+0x34>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002cfc:	059b      	lsls	r3, r3, #22
 8002cfe:	d4f5      	bmi.n	8002cec <HAL_I2C_ER_IRQHandler+0x68>
 8002d00:	e7da      	b.n	8002cb8 <HAL_I2C_ER_IRQHandler+0x34>
 8002d02:	bf00      	nop

08002d04 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d04:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d06:	6802      	ldr	r2, [r0, #0]
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002d08:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d0a:	6853      	ldr	r3, [r2, #4]
 8002d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
{
 8002d10:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002d12:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d14:	6053      	str	r3, [r2, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d16:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002d1a:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d1c:	2a60      	cmp	r2, #96	; 0x60
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002d1e:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002d20:	634b      	str	r3, [r1, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d22:	d002      	beq.n	8002d2a <I2C_DMAAbort+0x26>
    HAL_I2C_ErrorCallback(hi2c);
 8002d24:	f7ff fca6 	bl	8002674 <HAL_I2C_ErrorCallback>
 8002d28:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d30:	f7ff fca2 	bl	8002678 <HAL_I2C_AbortCpltCallback>
 8002d34:	bd10      	pop	{r4, pc}
 8002d36:	bf00      	nop

08002d38 <HAL_I2C_GetState>:
  return hi2c->State;
 8002d38:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d001      	beq.n	8002d4e <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	4770      	bx	lr
 8002d4e:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8002d50:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002d54:	2801      	cmp	r0, #1
 8002d56:	d0f8      	beq.n	8002d4a <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8002d58:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8002d5a:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	2424      	movs	r4, #36	; 0x24
 8002d5e:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002d62:	6804      	ldr	r4, [r0, #0]
 8002d64:	f024 0401 	bic.w	r4, r4, #1
 8002d68:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d6a:	6804      	ldr	r4, [r0, #0]
 8002d6c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002d70:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d72:	6804      	ldr	r4, [r0, #0]
 8002d74:	4321      	orrs	r1, r4
 8002d76:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002d78:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8002d7a:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8002d7c:	f041 0101 	orr.w	r1, r1, #1
 8002d80:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8002d82:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002d84:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8002d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop

08002d94 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002d9e:	2002      	movs	r0, #2
 8002da0:	4770      	bx	lr
 8002da2:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8002da4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002da8:	2801      	cmp	r0, #1
 8002daa:	d0f8      	beq.n	8002d9e <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8002dac:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8002dae:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	2424      	movs	r4, #36	; 0x24
 8002db2:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002db6:	6804      	ldr	r4, [r0, #0]
 8002db8:	f024 0401 	bic.w	r4, r4, #1
 8002dbc:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8002dbe:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002dc0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002dc4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002dc8:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002dca:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8002dcc:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8002dce:	f041 0101 	orr.w	r1, r1, #1
 8002dd2:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8002dd4:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002dd6:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8002dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002de4:	4a02      	ldr	r2, [pc, #8]	; (8002df0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4770      	bx	lr
 8002df0:	40007000 	.word	0x40007000

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df8:	6803      	ldr	r3, [r0, #0]
 8002dfa:	07d9      	lsls	r1, r3, #31
{
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e00:	d543      	bpl.n	8002e8a <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e02:	49c0      	ldr	r1, [pc, #768]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8002e04:	684a      	ldr	r2, [r1, #4]
 8002e06:	f002 020c 	and.w	r2, r2, #12
 8002e0a:	2a04      	cmp	r2, #4
 8002e0c:	f000 8184 	beq.w	8003118 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e10:	684a      	ldr	r2, [r1, #4]
 8002e12:	f002 020c 	and.w	r2, r2, #12
 8002e16:	2a08      	cmp	r2, #8
 8002e18:	f000 817a 	beq.w	8003110 <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1c:	6863      	ldr	r3, [r4, #4]
 8002e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e22:	f000 823d 	beq.w	80032a0 <HAL_RCC_OscConfig+0x4ac>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 81a1 	beq.w	800316e <HAL_RCC_OscConfig+0x37a>
 8002e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e30:	f000 8297 	beq.w	8003362 <HAL_RCC_OscConfig+0x56e>
 8002e34:	4bb3      	ldr	r3, [pc, #716]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e44:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e46:	4daf      	ldr	r5, [pc, #700]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8002e48:	68a2      	ldr	r2, [r4, #8]
 8002e4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e4c:	f023 030f 	bic.w	r3, r3, #15
 8002e50:	4313      	orrs	r3, r2
 8002e52:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe f800 	bl	8000e58 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002e5c:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	2601      	movs	r6, #1
 8002e60:	e005      	b.n	8002e6e <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e62:	f7fd fff9 	bl	8000e58 <HAL_GetTick>
 8002e66:	1bc0      	subs	r0, r0, r7
 8002e68:	2864      	cmp	r0, #100	; 0x64
 8002e6a:	f200 81b9 	bhi.w	80031e0 <HAL_RCC_OscConfig+0x3ec>
 8002e6e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	682a      	ldr	r2, [r5, #0]
 8002e74:	fa98 f3a8 	rbit	r3, r8
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	fa06 f303 	lsl.w	r3, r6, r3
 8002e84:	4213      	tst	r3, r2
 8002e86:	d0ec      	beq.n	8002e62 <HAL_RCC_OscConfig+0x6e>
 8002e88:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	079f      	lsls	r7, r3, #30
 8002e8c:	d542      	bpl.n	8002f14 <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e8e:	4a9d      	ldr	r2, [pc, #628]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8002e90:	6851      	ldr	r1, [r2, #4]
 8002e92:	f011 0f0c 	tst.w	r1, #12
 8002e96:	f000 80f7 	beq.w	8003088 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e9a:	6851      	ldr	r1, [r2, #4]
 8002e9c:	f001 010c 	and.w	r1, r1, #12
 8002ea0:	2908      	cmp	r1, #8
 8002ea2:	f000 80ed 	beq.w	8003080 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea6:	6922      	ldr	r2, [r4, #16]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	f000 81d3 	beq.w	8003254 <HAL_RCC_OscConfig+0x460>
 8002eae:	2201      	movs	r2, #1
 8002eb0:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ebc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ec0:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec2:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8002ec4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ec6:	f7fd ffc7 	bl	8000e58 <HAL_GetTick>
 8002eca:	f04f 0802 	mov.w	r8, #2
 8002ece:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	4d8c      	ldr	r5, [pc, #560]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fd ffc0 	bl	8000e58 <HAL_GetTick>
 8002ed8:	1bc0      	subs	r0, r0, r7
 8002eda:	2802      	cmp	r0, #2
 8002edc:	f200 8180 	bhi.w	80031e0 <HAL_RCC_OscConfig+0x3ec>
 8002ee0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	682a      	ldr	r2, [r5, #0]
 8002ee6:	fa98 f3a8 	rbit	r3, r8
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	fa06 f303 	lsl.w	r3, r6, r3
 8002ef6:	4213      	tst	r3, r2
 8002ef8:	d0ec      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	6829      	ldr	r1, [r5, #0]
 8002efc:	22f8      	movs	r2, #248	; 0xf8
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	6963      	ldr	r3, [r4, #20]
 8002f04:	fab2 f282 	clz	r2, r2
 8002f08:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8002f0c:	4093      	lsls	r3, r2
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	602b      	str	r3, [r5, #0]
 8002f12:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f14:	071d      	lsls	r5, r3, #28
 8002f16:	d44f      	bmi.n	8002fb8 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	0758      	lsls	r0, r3, #29
 8002f1a:	d57b      	bpl.n	8003014 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1c:	4b79      	ldr	r3, [pc, #484]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	00d1      	lsls	r1, r2, #3
 8002f22:	f100 8110 	bmi.w	8003146 <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f2c:	61da      	str	r2, [r3, #28]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f38:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	4d72      	ldr	r5, [pc, #456]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f3e:	682b      	ldr	r3, [r5, #0]
 8002f40:	05da      	lsls	r2, r3, #23
 8002f42:	f140 813d 	bpl.w	80031c0 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f46:	68e3      	ldr	r3, [r4, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	f000 81af 	beq.w	80032ac <HAL_RCC_OscConfig+0x4b8>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8154 	beq.w	80031fc <HAL_RCC_OscConfig+0x408>
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	4b6b      	ldr	r3, [pc, #428]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	f000 820f 	beq.w	800337c <HAL_RCC_OscConfig+0x588>
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	621a      	str	r2, [r3, #32]
 8002f64:	6a1a      	ldr	r2, [r3, #32]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7fd ff74 	bl	8000e58 <HAL_GetTick>
 8002f70:	f04f 0902 	mov.w	r9, #2
 8002f74:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	4e63      	ldr	r6, [pc, #396]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8002f78:	2501      	movs	r5, #1
 8002f7a:	e015      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1b4>
 8002f7c:	fa99 f3a9 	rbit	r3, r9
 8002f80:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002f82:	fa99 f3a9 	rbit	r3, r9
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	fa05 f303 	lsl.w	r3, r5, r3
 8002f92:	4213      	tst	r3, r2
 8002f94:	f040 8128 	bne.w	80031e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fd ff5e 	bl	8000e58 <HAL_GetTick>
 8002f9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fa0:	1bc0      	subs	r0, r0, r7
 8002fa2:	4298      	cmp	r0, r3
 8002fa4:	f200 811c 	bhi.w	80031e0 <HAL_RCC_OscConfig+0x3ec>
 8002fa8:	fa99 f3a9 	rbit	r3, r9
 8002fac:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0e3      	beq.n	8002f7c <HAL_RCC_OscConfig+0x188>
 8002fb4:	6a32      	ldr	r2, [r6, #32]
 8002fb6:	e7e4      	b.n	8002f82 <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb8:	69a2      	ldr	r2, [r4, #24]
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	d07b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x2c2>
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8002fc4:	4b51      	ldr	r3, [pc, #324]	; (800310c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc6:	4e4f      	ldr	r6, [pc, #316]	; (8003104 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 8002fc8:	fab1 f181 	clz	r1, r1
 8002fcc:	440b      	add	r3, r1
 8002fce:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd0:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8002fd2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002fd4:	f7fd ff40 	bl	8000e58 <HAL_GetTick>
 8002fd8:	f04f 0802 	mov.w	r8, #2
 8002fdc:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	e005      	b.n	8002fec <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fd ff3a 	bl	8000e58 <HAL_GetTick>
 8002fe4:	1bc0      	subs	r0, r0, r7
 8002fe6:	2802      	cmp	r0, #2
 8002fe8:	f200 80fa 	bhi.w	80031e0 <HAL_RCC_OscConfig+0x3ec>
 8002fec:	fa98 f3a8 	rbit	r3, r8
 8002ff0:	fa98 f3a8 	rbit	r3, r8
 8002ff4:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002ffa:	fa98 f3a8 	rbit	r3, r8
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	fa05 f303 	lsl.w	r3, r5, r3
 800300a:	4213      	tst	r3, r2
 800300c:	d0e8      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1ec>
 800300e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	0758      	lsls	r0, r3, #29
 8003012:	d483      	bmi.n	8002f1c <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	69e3      	ldr	r3, [r4, #28]
 8003016:	b37b      	cbz	r3, 8003078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003018:	4d3a      	ldr	r5, [pc, #232]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 800301a:	686a      	ldr	r2, [r5, #4]
 800301c:	f002 020c 	and.w	r2, r2, #12
 8003020:	2a08      	cmp	r2, #8
 8003022:	d044      	beq.n	80030ae <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003024:	2b02      	cmp	r3, #2
 8003026:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800302a:	f000 8145 	beq.w	80032b8 <HAL_RCC_OscConfig+0x4c4>
 800302e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800303a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fd ff08 	bl	8000e58 <HAL_GetTick>
 8003048:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800304c:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	2601      	movs	r6, #1
 8003050:	e005      	b.n	800305e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fd ff01 	bl	8000e58 <HAL_GetTick>
 8003056:	1bc0      	subs	r0, r0, r7
 8003058:	2802      	cmp	r0, #2
 800305a:	f200 80c1 	bhi.w	80031e0 <HAL_RCC_OscConfig+0x3ec>
 800305e:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	682a      	ldr	r2, [r5, #0]
 8003064:	fa94 f3a4 	rbit	r3, r4
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	fa06 f303 	lsl.w	r3, r6, r3
 8003074:	4213      	tst	r3, r2
 8003076:	d1ec      	bne.n	8003052 <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003078:	2000      	movs	r0, #0
}
 800307a:	b003      	add	sp, #12
 800307c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003080:	6852      	ldr	r2, [r2, #4]
 8003082:	03d6      	lsls	r6, r2, #15
 8003084:	f53f af0f 	bmi.w	8002ea6 <HAL_RCC_OscConfig+0xb2>
 8003088:	2202      	movs	r2, #2
 800308a:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	491d      	ldr	r1, [pc, #116]	; (8003104 <HAL_RCC_OscConfig+0x310>)
 8003090:	6808      	ldr	r0, [r1, #0]
 8003092:	fa92 f2a2 	rbit	r2, r2
 8003096:	fab2 f282 	clz	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4202      	tst	r2, r0
 80030a6:	d051      	beq.n	800314c <HAL_RCC_OscConfig+0x358>
 80030a8:	6922      	ldr	r2, [r4, #16]
 80030aa:	428a      	cmp	r2, r1
 80030ac:	d04e      	beq.n	800314c <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
}
 80030b0:	b003      	add	sp, #12
 80030b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030b6:	2501      	movs	r5, #1
 80030b8:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030be:	4e11      	ldr	r6, [pc, #68]	; (8003104 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 80030c0:	fab1 f181 	clz	r1, r1
 80030c4:	440b      	add	r3, r1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	f04f 0802 	mov.w	r8, #2
 80030cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80030ce:	f7fd fec3 	bl	8000e58 <HAL_GetTick>
 80030d2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	e004      	b.n	80030e0 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fd febf 	bl	8000e58 <HAL_GetTick>
 80030da:	1bc0      	subs	r0, r0, r7
 80030dc:	2802      	cmp	r0, #2
 80030de:	d87f      	bhi.n	80031e0 <HAL_RCC_OscConfig+0x3ec>
 80030e0:	fa98 f3a8 	rbit	r3, r8
 80030e4:	fa98 f3a8 	rbit	r3, r8
 80030e8:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80030ee:	fa98 f3a8 	rbit	r3, r8
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	fa05 f303 	lsl.w	r3, r5, r3
 80030fe:	4213      	tst	r3, r2
 8003100:	d1e9      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2e2>
 8003102:	e784      	b.n	800300e <HAL_RCC_OscConfig+0x21a>
 8003104:	40021000 	.word	0x40021000
 8003108:	40007000 	.word	0x40007000
 800310c:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003110:	684a      	ldr	r2, [r1, #4]
 8003112:	03d2      	lsls	r2, r2, #15
 8003114:	f57f ae82 	bpl.w	8002e1c <HAL_RCC_OscConfig+0x28>
 8003118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800311c:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	499a      	ldr	r1, [pc, #616]	; (800338c <HAL_RCC_OscConfig+0x598>)
 8003122:	6808      	ldr	r0, [r1, #0]
 8003124:	fa92 f2a2 	rbit	r2, r2
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	f002 021f 	and.w	r2, r2, #31
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f202 	lsl.w	r2, r1, r2
 8003136:	4202      	tst	r2, r0
 8003138:	f43f aea7 	beq.w	8002e8a <HAL_RCC_OscConfig+0x96>
 800313c:	6862      	ldr	r2, [r4, #4]
 800313e:	2a00      	cmp	r2, #0
 8003140:	f47f aea3 	bne.w	8002e8a <HAL_RCC_OscConfig+0x96>
 8003144:	e7b3      	b.n	80030ae <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8003146:	f04f 0800 	mov.w	r8, #0
 800314a:	e6f7      	b.n	8002f3c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4d8f      	ldr	r5, [pc, #572]	; (800338c <HAL_RCC_OscConfig+0x598>)
 800314e:	21f8      	movs	r1, #248	; 0xf8
 8003150:	6828      	ldr	r0, [r5, #0]
 8003152:	fa91 f1a1 	rbit	r1, r1
 8003156:	6962      	ldr	r2, [r4, #20]
 8003158:	fab1 f181 	clz	r1, r1
 800315c:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8003160:	408a      	lsls	r2, r1
 8003162:	4302      	orrs	r2, r0
 8003164:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	071d      	lsls	r5, r3, #28
 8003168:	f57f aed6 	bpl.w	8002f18 <HAL_RCC_OscConfig+0x124>
 800316c:	e724      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	4d87      	ldr	r5, [pc, #540]	; (800338c <HAL_RCC_OscConfig+0x598>)
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	602b      	str	r3, [r5, #0]
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003180:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003182:	68a2      	ldr	r2, [r4, #8]
 8003184:	f023 030f 	bic.w	r3, r3, #15
 8003188:	4313      	orrs	r3, r2
 800318a:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 800318c:	f7fd fe64 	bl	8000e58 <HAL_GetTick>
 8003190:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8003194:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	2601      	movs	r6, #1
 8003198:	e004      	b.n	80031a4 <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319a:	f7fd fe5d 	bl	8000e58 <HAL_GetTick>
 800319e:	1bc0      	subs	r0, r0, r7
 80031a0:	2864      	cmp	r0, #100	; 0x64
 80031a2:	d81d      	bhi.n	80031e0 <HAL_RCC_OscConfig+0x3ec>
 80031a4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a8:	682a      	ldr	r2, [r5, #0]
 80031aa:	fa98 f3a8 	rbit	r3, r8
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	fa06 f303 	lsl.w	r3, r6, r3
 80031ba:	4213      	tst	r3, r2
 80031bc:	d1ed      	bne.n	800319a <HAL_RCC_OscConfig+0x3a6>
 80031be:	e663      	b.n	8002e88 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80031c8:	f7fd fe46 	bl	8000e58 <HAL_GetTick>
 80031cc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	05db      	lsls	r3, r3, #23
 80031d2:	f53f aeb8 	bmi.w	8002f46 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fd fe3f 	bl	8000e58 <HAL_GetTick>
 80031da:	1b80      	subs	r0, r0, r6
 80031dc:	2864      	cmp	r0, #100	; 0x64
 80031de:	d9f6      	bls.n	80031ce <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 80031e0:	2003      	movs	r0, #3
}
 80031e2:	b003      	add	sp, #12
 80031e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 80031e8:	f1b8 0f00 	cmp.w	r8, #0
 80031ec:	f43f af12 	beq.w	8003014 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f0:	4a66      	ldr	r2, [pc, #408]	; (800338c <HAL_RCC_OscConfig+0x598>)
 80031f2:	69d3      	ldr	r3, [r2, #28]
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f8:	61d3      	str	r3, [r2, #28]
 80031fa:	e70b      	b.n	8003014 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	4d63      	ldr	r5, [pc, #396]	; (800338c <HAL_RCC_OscConfig+0x598>)
 80031fe:	6a2b      	ldr	r3, [r5, #32]
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	622b      	str	r3, [r5, #32]
 8003206:	6a2b      	ldr	r3, [r5, #32]
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800320e:	f7fd fe23 	bl	8000e58 <HAL_GetTick>
 8003212:	f04f 0902 	mov.w	r9, #2
 8003216:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	2601      	movs	r6, #1
 800321a:	e013      	b.n	8003244 <HAL_RCC_OscConfig+0x450>
 800321c:	fa99 f3a9 	rbit	r3, r9
 8003220:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003222:	fa99 f3a9 	rbit	r3, r9
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	fa06 f303 	lsl.w	r3, r6, r3
 8003232:	4213      	tst	r3, r2
 8003234:	d0d8      	beq.n	80031e8 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fd fe0f 	bl	8000e58 <HAL_GetTick>
 800323a:	f241 3388 	movw	r3, #5000	; 0x1388
 800323e:	1bc0      	subs	r0, r0, r7
 8003240:	4298      	cmp	r0, r3
 8003242:	d8cd      	bhi.n	80031e0 <HAL_RCC_OscConfig+0x3ec>
 8003244:	fa99 f3a9 	rbit	r3, r9
 8003248:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0e5      	beq.n	800321c <HAL_RCC_OscConfig+0x428>
 8003250:	6a2a      	ldr	r2, [r5, #32]
 8003252:	e7e6      	b.n	8003222 <HAL_RCC_OscConfig+0x42e>
 8003254:	2501      	movs	r5, #1
 8003256:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003262:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f04f 0802 	mov.w	r8, #2
 800326c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800326e:	f7fd fdf3 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4e46      	ldr	r6, [pc, #280]	; (800338c <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8003274:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	e004      	b.n	8003282 <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003278:	f7fd fdee 	bl	8000e58 <HAL_GetTick>
 800327c:	1bc0      	subs	r0, r0, r7
 800327e:	2802      	cmp	r0, #2
 8003280:	d8ae      	bhi.n	80031e0 <HAL_RCC_OscConfig+0x3ec>
 8003282:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	6832      	ldr	r2, [r6, #0]
 8003288:	fa98 f3a8 	rbit	r3, r8
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa05 f303 	lsl.w	r3, r5, r3
 8003298:	4213      	tst	r3, r2
 800329a:	d1ed      	bne.n	8003278 <HAL_RCC_OscConfig+0x484>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	e639      	b.n	8002f14 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a0:	4a3a      	ldr	r2, [pc, #232]	; (800338c <HAL_RCC_OscConfig+0x598>)
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e5cc      	b.n	8002e46 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ac:	4a37      	ldr	r2, [pc, #220]	; (800338c <HAL_RCC_OscConfig+0x598>)
 80032ae:	6a13      	ldr	r3, [r2, #32]
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6213      	str	r3, [r2, #32]
 80032b6:	e659      	b.n	8002f6c <HAL_RCC_OscConfig+0x178>
 80032b8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032ce:	f7fd fdc3 	bl	8000e58 <HAL_GetTick>
 80032d2:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80032d6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d8:	2601      	movs	r6, #1
 80032da:	e005      	b.n	80032e8 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fd fdbc 	bl	8000e58 <HAL_GetTick>
 80032e0:	1bc0      	subs	r0, r0, r7
 80032e2:	2802      	cmp	r0, #2
 80032e4:	f63f af7c 	bhi.w	80031e0 <HAL_RCC_OscConfig+0x3ec>
 80032e8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ec:	682a      	ldr	r2, [r5, #0]
 80032ee:	fa98 f3a8 	rbit	r3, r8
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	fa06 f303 	lsl.w	r3, r6, r3
 80032fe:	4213      	tst	r3, r2
 8003300:	d1ec      	bne.n	80032dc <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003302:	686a      	ldr	r2, [r5, #4]
 8003304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003306:	6a21      	ldr	r1, [r4, #32]
 8003308:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800330c:	430b      	orrs	r3, r1
 800330e:	4313      	orrs	r3, r2
 8003310:	606b      	str	r3, [r5, #4]
 8003312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003316:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003322:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800332c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800332e:	f7fd fd93 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003332:	4e16      	ldr	r6, [pc, #88]	; (800338c <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8003334:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003336:	2501      	movs	r5, #1
 8003338:	e005      	b.n	8003346 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333a:	f7fd fd8d 	bl	8000e58 <HAL_GetTick>
 800333e:	1bc0      	subs	r0, r0, r7
 8003340:	2802      	cmp	r0, #2
 8003342:	f63f af4d 	bhi.w	80031e0 <HAL_RCC_OscConfig+0x3ec>
 8003346:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334a:	6832      	ldr	r2, [r6, #0]
 800334c:	fa94 f3a4 	rbit	r3, r4
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	fa05 f303 	lsl.w	r3, r5, r3
 800335c:	4213      	tst	r3, r2
 800335e:	d0ec      	beq.n	800333a <HAL_RCC_OscConfig+0x546>
 8003360:	e68a      	b.n	8003078 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003366:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e564      	b.n	8002e46 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	f042 0204 	orr.w	r2, r2, #4
 8003380:	621a      	str	r2, [r3, #32]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	621a      	str	r2, [r3, #32]
 800338a:	e5ef      	b.n	8002f6c <HAL_RCC_OscConfig+0x178>
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003390:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x54>)
 8003392:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003394:	f003 010c 	and.w	r1, r3, #12
 8003398:	2908      	cmp	r1, #8
 800339a:	d121      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x50>
 800339c:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80033a0:	fa91 f1a1 	rbit	r1, r1
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033a4:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80033a8:	fab1 f181 	clz	r1, r1
 80033ac:	fa20 f101 	lsr.w	r1, r0, r1
 80033b0:	480d      	ldr	r0, [pc, #52]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033b4:	5c40      	ldrb	r0, [r0, r1]
 80033b6:	210f      	movs	r1, #15
 80033b8:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033bc:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033be:	fab1 f181 	clz	r1, r1
 80033c2:	f002 020f 	and.w	r2, r2, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80033c6:	bf4c      	ite	mi
 80033c8:	4b08      	ldrmi	r3, [pc, #32]	; (80033ec <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80033ca:	4b09      	ldrpl	r3, [pc, #36]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033cc:	fa22 f201 	lsr.w	r2, r2, r1
 80033d0:	4908      	ldr	r1, [pc, #32]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80033d2:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80033d4:	bf48      	it	mi
 80033d6:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80033da:	fb03 f000 	mul.w	r0, r3, r0
 80033de:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80033e2:	4770      	bx	lr
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08007fe8 	.word	0x08007fe8
 80033ec:	007a1200 	.word	0x007a1200
 80033f0:	003d0900 	.word	0x003d0900
 80033f4:	08007ff8 	.word	0x08007ff8

080033f8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80033f8:	4a5f      	ldr	r2, [pc, #380]	; (8003578 <HAL_RCC_ClockConfig+0x180>)
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	428b      	cmp	r3, r1
 8003402:	d20b      	bcs.n	800341c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	430b      	orrs	r3, r1
 800340c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4299      	cmp	r1, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
}
 800341a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	6803      	ldr	r3, [r0, #0]
{
 800341e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003422:	079c      	lsls	r4, r3, #30
 8003424:	d506      	bpl.n	8003434 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003426:	4c55      	ldr	r4, [pc, #340]	; (800357c <HAL_RCC_ClockConfig+0x184>)
 8003428:	6885      	ldr	r5, [r0, #8]
 800342a:	6862      	ldr	r2, [r4, #4]
 800342c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003430:	432a      	orrs	r2, r5
 8003432:	6062      	str	r2, [r4, #4]
 8003434:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	07d9      	lsls	r1, r3, #31
 8003438:	4606      	mov	r6, r0
 800343a:	d531      	bpl.n	80034a0 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343c:	6842      	ldr	r2, [r0, #4]
 800343e:	2a01      	cmp	r2, #1
 8003440:	f000 8087 	beq.w	8003552 <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003444:	2a02      	cmp	r2, #2
 8003446:	bf0c      	ite	eq
 8003448:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800344c:	2302      	movne	r3, #2
 800344e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	494a      	ldr	r1, [pc, #296]	; (800357c <HAL_RCC_ClockConfig+0x184>)
 8003454:	6808      	ldr	r0, [r1, #0]
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	4203      	tst	r3, r0
 800346a:	d029      	beq.n	80034c0 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346c:	4d43      	ldr	r5, [pc, #268]	; (800357c <HAL_RCC_ClockConfig+0x184>)
 800346e:	686b      	ldr	r3, [r5, #4]
 8003470:	f023 0303 	bic.w	r3, r3, #3
 8003474:	4313      	orrs	r3, r2
 8003476:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003478:	f7fd fcee 	bl	8000e58 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347c:	6873      	ldr	r3, [r6, #4]
 800347e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8003480:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003482:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	d023      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003488:	2b02      	cmp	r3, #2
 800348a:	d105      	bne.n	8003498 <HAL_RCC_ClockConfig+0xa0>
 800348c:	e058      	b.n	8003540 <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348e:	f7fd fce3 	bl	8000e58 <HAL_GetTick>
 8003492:	1bc0      	subs	r0, r0, r7
 8003494:	4540      	cmp	r0, r8
 8003496:	d859      	bhi.n	800354c <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003498:	686b      	ldr	r3, [r5, #4]
 800349a:	f013 0f0c 	tst.w	r3, #12
 800349e:	d1f6      	bne.n	800348e <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80034a0:	4a35      	ldr	r2, [pc, #212]	; (8003578 <HAL_RCC_ClockConfig+0x180>)
 80034a2:	6813      	ldr	r3, [r2, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	429c      	cmp	r4, r3
 80034aa:	d217      	bcs.n	80034dc <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	f023 0307 	bic.w	r3, r3, #7
 80034b2:	4323      	orrs	r3, r4
 80034b4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	429c      	cmp	r4, r3
 80034be:	d00d      	beq.n	80034dc <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 80034c0:	2001      	movs	r0, #1
 80034c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f7fd fcc7 	bl	8000e58 <HAL_GetTick>
 80034ca:	1bc0      	subs	r0, r0, r7
 80034cc:	4540      	cmp	r0, r8
 80034ce:	d83d      	bhi.n	800354c <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d0:	686b      	ldr	r3, [r5, #4]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d1f5      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xce>
 80034da:	e7e1      	b.n	80034a0 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	6833      	ldr	r3, [r6, #0]
 80034de:	075a      	lsls	r2, r3, #29
 80034e0:	d506      	bpl.n	80034f0 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e2:	4926      	ldr	r1, [pc, #152]	; (800357c <HAL_RCC_ClockConfig+0x184>)
 80034e4:	68f0      	ldr	r0, [r6, #12]
 80034e6:	684a      	ldr	r2, [r1, #4]
 80034e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034ec:	4302      	orrs	r2, r0
 80034ee:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	071b      	lsls	r3, r3, #28
 80034f2:	d507      	bpl.n	8003504 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f4:	4a21      	ldr	r2, [pc, #132]	; (800357c <HAL_RCC_ClockConfig+0x184>)
 80034f6:	6931      	ldr	r1, [r6, #16]
 80034f8:	6853      	ldr	r3, [r2, #4]
 80034fa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80034fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003502:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003504:	f7ff ff44 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8003508:	4b1c      	ldr	r3, [pc, #112]	; (800357c <HAL_RCC_ClockConfig+0x184>)
 800350a:	4601      	mov	r1, r0
 800350c:	22f0      	movs	r2, #240	; 0xf0
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	fa92 f2a2 	rbit	r2, r2
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351c:	40d3      	lsrs	r3, r2
 800351e:	4818      	ldr	r0, [pc, #96]	; (8003580 <HAL_RCC_ClockConfig+0x188>)
 8003520:	4a18      	ldr	r2, [pc, #96]	; (8003584 <HAL_RCC_ClockConfig+0x18c>)
 8003522:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003524:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003526:	fa21 f303 	lsr.w	r3, r1, r3
 800352a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800352c:	f7fd fc64 	bl	8000df8 <HAL_InitTick>
  return HAL_OK;
 8003530:	2000      	movs	r0, #0
}
 8003532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003536:	f7fd fc8f 	bl	8000e58 <HAL_GetTick>
 800353a:	1bc0      	subs	r0, r0, r7
 800353c:	4540      	cmp	r0, r8
 800353e:	d805      	bhi.n	800354c <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003540:	686b      	ldr	r3, [r5, #4]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b08      	cmp	r3, #8
 8003548:	d1f5      	bne.n	8003536 <HAL_RCC_ClockConfig+0x13e>
 800354a:	e7a9      	b.n	80034a0 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 800354c:	2003      	movs	r0, #3
 800354e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003556:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4908      	ldr	r1, [pc, #32]	; (800357c <HAL_RCC_ClockConfig+0x184>)
 800355c:	6809      	ldr	r1, [r1, #0]
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	420b      	tst	r3, r1
 8003570:	f47f af7c 	bne.w	800346c <HAL_RCC_ClockConfig+0x74>
 8003574:	e7a4      	b.n	80034c0 <HAL_RCC_ClockConfig+0xc8>
 8003576:	bf00      	nop
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	08008044 	.word	0x08008044
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000000 	.word	0x20000000

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	fa92 f2a2 	rbit	r2, r2
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035a8:	40d3      	lsrs	r3, r2
 80035aa:	4904      	ldr	r1, [pc, #16]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	6810      	ldr	r0, [r2, #0]
}    
 80035b2:	40d8      	lsrs	r0, r3
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	08008054 	.word	0x08008054
 80035c0:	20000000 	.word	0x20000000

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	fa92 f2a2 	rbit	r2, r2
 80035d0:	fab2 f282 	clz	r2, r2
 80035d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80035d8:	40d3      	lsrs	r3, r2
 80035da:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	6810      	ldr	r0, [r2, #0]
} 
 80035e2:	40d8      	lsrs	r0, r3
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08008054 	.word	0x08008054
 80035f0:	20000000 	.word	0x20000000

080035f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035f8:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035fa:	6800      	ldr	r0, [r0, #0]
 80035fc:	03c5      	lsls	r5, r0, #15
{
 80035fe:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003600:	d538      	bpl.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003602:	4b5a      	ldr	r3, [pc, #360]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	00d1      	lsls	r1, r2, #3
 8003608:	d567      	bpl.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4d59      	ldr	r5, [pc, #356]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 8003610:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	d570      	bpl.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003616:	4d55      	ldr	r5, [pc, #340]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003618:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800361e:	d01f      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003620:	6861      	ldr	r1, [r4, #4]
 8003622:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003626:	4293      	cmp	r3, r2
 8003628:	d01b      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362a:	6a29      	ldr	r1, [r5, #32]
 800362c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003630:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8003634:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003638:	4f4e      	ldr	r7, [pc, #312]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800363a:	fab2 f282 	clz	r2, r2
 800363e:	443a      	add	r2, r7
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	f04f 0e01 	mov.w	lr, #1
 8003646:	f8c2 e000 	str.w	lr, [r2]
 800364a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	443b      	add	r3, r7
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003658:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 800365a:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800365c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800365e:	d461      	bmi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003660:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003662:	4a42      	ldr	r2, [pc, #264]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003664:	6a13      	ldr	r3, [r2, #32]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	430b      	orrs	r3, r1
 800366c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800366e:	2e00      	cmp	r6, #0
 8003670:	d153      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x126>
 8003672:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003674:	07c5      	lsls	r5, r0, #31
 8003676:	d506      	bpl.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003678:	4a3c      	ldr	r2, [pc, #240]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800367a:	68a1      	ldr	r1, [r4, #8]
 800367c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	430b      	orrs	r3, r1
 8003684:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003686:	0681      	lsls	r1, r0, #26
 8003688:	d506      	bpl.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800368a:	4a38      	ldr	r2, [pc, #224]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800368c:	68e1      	ldr	r1, [r4, #12]
 800368e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003690:	f023 0310 	bic.w	r3, r3, #16
 8003694:	430b      	orrs	r3, r1
 8003696:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003698:	0602      	lsls	r2, r0, #24
 800369a:	d506      	bpl.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800369c:	4a33      	ldr	r2, [pc, #204]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800369e:	6921      	ldr	r1, [r4, #16]
 80036a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80036a2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80036a6:	430b      	orrs	r3, r1
 80036a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036aa:	04c3      	lsls	r3, r0, #19
 80036ac:	d40d      	bmi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036ae:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80036b2:	d007      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036b4:	4a2d      	ldr	r2, [pc, #180]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80036b6:	69a1      	ldr	r1, [r4, #24]
 80036b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036be:	430b      	orrs	r3, r1
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036c2:	2000      	movs	r0, #0
}
 80036c4:	b003      	add	sp, #12
 80036c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036ca:	4a28      	ldr	r2, [pc, #160]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80036cc:	6961      	ldr	r1, [r4, #20]
 80036ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6313      	str	r3, [r2, #48]	; 0x30
 80036d8:	e7e9      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	4d24      	ldr	r5, [pc, #144]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036e2:	61da      	str	r2, [r3, #28]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 80036f2:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	d48e      	bmi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003700:	f7fd fbaa 	bl	8000e58 <HAL_GetTick>
 8003704:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	682b      	ldr	r3, [r5, #0]
 8003708:	05db      	lsls	r3, r3, #23
 800370a:	d484      	bmi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7fd fba4 	bl	8000e58 <HAL_GetTick>
 8003710:	1bc0      	subs	r0, r0, r7
 8003712:	2864      	cmp	r0, #100	; 0x64
 8003714:	d9f7      	bls.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8003716:	2003      	movs	r0, #3
 8003718:	e7d4      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	69d3      	ldr	r3, [r2, #28]
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]
 8003722:	e7a6      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003724:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8003726:	f7fd fb97 	bl	8000e58 <HAL_GetTick>
 800372a:	f04f 0902 	mov.w	r9, #2
 800372e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	e014      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003732:	fa99 f3a9 	rbit	r3, r9
 8003736:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003738:	fa99 f3a9 	rbit	r3, r9
 800373c:	fab3 f383 	clz	r3, r3
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	fa07 f303 	lsl.w	r3, r7, r3
 8003748:	4213      	tst	r3, r2
 800374a:	d189      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fd fb84 	bl	8000e58 <HAL_GetTick>
 8003750:	f241 3388 	movw	r3, #5000	; 0x1388
 8003754:	eba0 0008 	sub.w	r0, r0, r8
 8003758:	4298      	cmp	r0, r3
 800375a:	d8dc      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800375c:	fa99 f3a9 	rbit	r3, r9
 8003760:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0e4      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8003768:	6a2a      	ldr	r2, [r5, #32]
 800376a:	e7e5      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800376c:	40021000 	.word	0x40021000
 8003770:	40007000 	.word	0x40007000
 8003774:	10908100 	.word	0x10908100

08003778 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003778:	6803      	ldr	r3, [r0, #0]
{
 800377a:	b5f0      	push	{r4, r5, r6, r7, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800377c:	6a9d      	ldr	r5, [r3, #40]	; 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800377e:	691c      	ldr	r4, [r3, #16]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8003780:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003782:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8003784:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003788:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800378c:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800378e:	f3c3 2706 	ubfx	r7, r3, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003792:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003796:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8003798:	f000 0e40 	and.w	lr, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800379c:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80037a0:	608c      	str	r4, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80037a2:	f881 e003 	strb.w	lr, [r1, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80037a6:	700e      	strb	r6, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80037a8:	704f      	strb	r7, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80037aa:	708b      	strb	r3, [r1, #2]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80037ac:	b9ba      	cbnz	r2, 80037de <HAL_RTC_GetTime+0x66>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80037ae:	093d      	lsrs	r5, r7, #4
 80037b0:	091c      	lsrs	r4, r3, #4
 80037b2:	0936      	lsrs	r6, r6, #4
 80037b4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80037b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80037bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 80037c0:	f000 000f 	and.w	r0, r0, #15
 80037c4:	f007 070f 	and.w	r7, r7, #15
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80037d0:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 80037d4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80037d8:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80037da:	704d      	strb	r5, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80037dc:	708c      	strb	r4, [r1, #2]
}
 80037de:	2000      	movs	r0, #0
 80037e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e2:	bf00      	nop

080037e4 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80037e4:	6803      	ldr	r3, [r0, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
{
 80037f0:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80037f2:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80037f6:	b2dd      	uxtb	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80037f8:	f3c3 3742 	ubfx	r7, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80037fc:	f004 061f 	and.w	r6, r4, #31
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003800:	0c1b      	lsrs	r3, r3, #16
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003802:	700f      	strb	r7, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003804:	704e      	strb	r6, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003806:	70cb      	strb	r3, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003808:	708d      	strb	r5, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 800380a:	b9ba      	cbnz	r2, 800383c <HAL_RTC_GetDate+0x58>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800380c:	0936      	lsrs	r6, r6, #4
 800380e:	0928      	lsrs	r0, r5, #4
 8003810:	091a      	lsrs	r2, r3, #4
 8003812:	00b7      	lsls	r7, r6, #2
 8003814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8003818:	f004 040f 	and.w	r4, r4, #15
 800381c:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003820:	443e      	add	r6, r7
 8003822:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800382e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8003832:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8003836:	7088      	strb	r0, [r1, #2]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003838:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800383a:	70cb      	strb	r3, [r1, #3]
}
 800383c:	2000      	movs	r0, #0
 800383e:	bcf0      	pop	{r4, r5, r6, r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop

08003844 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003844:	6802      	ldr	r2, [r0, #0]
{
 8003846:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003848:	68d3      	ldr	r3, [r2, #12]
 800384a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800384e:	60d3      	str	r3, [r2, #12]
{
 8003850:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003852:	f7fd fb01 	bl	8000e58 <HAL_GetTick>
 8003856:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003858:	e005      	b.n	8003866 <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800385a:	f7fd fafd 	bl	8000e58 <HAL_GetTick>
 800385e:	1b40      	subs	r0, r0, r5
 8003860:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003864:	d805      	bhi.n	8003872 <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	d5f5      	bpl.n	800385a <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 800386e:	2000      	movs	r0, #0
 8003870:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8003872:	2003      	movs	r0, #3
}
 8003874:	bd38      	pop	{r3, r4, r5, pc}
 8003876:	bf00      	nop

08003878 <RTC_EnterInitMode>:
{
 8003878:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800387a:	6803      	ldr	r3, [r0, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	0652      	lsls	r2, r2, #25
 8003880:	d501      	bpl.n	8003886 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8003882:	2000      	movs	r0, #0
 8003884:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003886:	f04f 32ff 	mov.w	r2, #4294967295
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800388e:	f7fd fae3 	bl	8000e58 <HAL_GetTick>
 8003892:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	065b      	lsls	r3, r3, #25
 800389a:	d4f2      	bmi.n	8003882 <RTC_EnterInitMode+0xa>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800389c:	f7fd fadc 	bl	8000e58 <HAL_GetTick>
 80038a0:	1b40      	subs	r0, r0, r5
 80038a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80038a6:	d9f5      	bls.n	8003894 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80038a8:	2003      	movs	r0, #3
}
 80038aa:	bd38      	pop	{r3, r4, r5, pc}

080038ac <HAL_RTC_Init>:
{
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hrtc == NULL)
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d050      	beq.n	8003954 <HAL_RTC_Init+0xa8>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80038b2:	7f43      	ldrb	r3, [r0, #29]
 80038b4:	4604      	mov	r4, r0
 80038b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d03f      	beq.n	800393e <HAL_RTC_Init+0x92>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038be:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80038c0:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038c2:	21ca      	movs	r1, #202	; 0xca
 80038c4:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80038c6:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038c8:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038ca:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038ce:	f7ff ffd3 	bl	8003878 <RTC_EnterInitMode>
 80038d2:	4605      	mov	r5, r0
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d12a      	bne.n	800392e <HAL_RTC_Init+0x82>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038d8:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038da:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038dc:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038de:	6927      	ldr	r7, [r4, #16]
 80038e0:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038e2:	68e0      	ldr	r0, [r4, #12]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038e4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80038e8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80038ec:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038ee:	6899      	ldr	r1, [r3, #8]
 80038f0:	433a      	orrs	r2, r7
 80038f2:	4332      	orrs	r2, r6
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038f8:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68a1      	ldr	r1, [r4, #8]
 80038fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003902:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800390a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	0692      	lsls	r2, r2, #26
 8003910:	d519      	bpl.n	8003946 <HAL_RTC_Init+0x9a>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003912:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003914:	69a6      	ldr	r6, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003916:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800391a:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800391e:	20ff      	movs	r0, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003920:	4332      	orrs	r2, r6
    hrtc->State = HAL_RTC_STATE_READY;
 8003922:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003926:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003928:	7761      	strb	r1, [r4, #29]
}
 800392a:	4628      	mov	r0, r5
 800392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003932:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003934:	2501      	movs	r5, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003936:	6251      	str	r1, [r2, #36]	; 0x24
}
 8003938:	4628      	mov	r0, r5
        hrtc->State = HAL_RTC_STATE_ERROR;
 800393a:	7763      	strb	r3, [r4, #29]
}
 800393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800393e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003940:	f002 fe36 	bl	80065b0 <HAL_RTC_MspInit>
 8003944:	e7bb      	b.n	80038be <HAL_RTC_Init+0x12>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff ff7c 	bl	8003844 <HAL_RTC_WaitForSynchro>
 800394c:	2800      	cmp	r0, #0
 800394e:	d1ee      	bne.n	800392e <HAL_RTC_Init+0x82>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	e7de      	b.n	8003912 <HAL_RTC_Init+0x66>
     return HAL_ERROR;
 8003954:	2501      	movs	r5, #1
}
 8003956:	4628      	mov	r0, r5
 8003958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800395a:	bf00      	nop

0800395c <HAL_RTC_SetTime>:
{
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800395e:	7f03      	ldrb	r3, [r0, #28]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d07b      	beq.n	8003a5c <HAL_RTC_SetTime+0x100>
 8003964:	460e      	mov	r6, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003966:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8003968:	2101      	movs	r1, #1
 800396a:	7701      	strb	r1, [r0, #28]
 800396c:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 800396e:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003970:	6801      	ldr	r1, [r0, #0]
  if(Format == RTC_FORMAT_BIN)
 8003972:	2a00      	cmp	r2, #0
 8003974:	d039      	beq.n	80039ea <HAL_RTC_SetTime+0x8e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003976:	688c      	ldr	r4, [r1, #8]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003978:	7870      	ldrb	r0, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800397a:	7832      	ldrb	r2, [r6, #0]
              ((uint32_t)sTime->Seconds) | \
 800397c:	78b3      	ldrb	r3, [r6, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800397e:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8003982:	bf14      	ite	ne
 8003984:	78f4      	ldrbne	r4, [r6, #3]
      sTime->TimeFormat = 0x00U;
 8003986:	70f4      	strbeq	r4, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003988:	ea4f 2000 	mov.w	r0, r0, lsl #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800398c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003990:	bf18      	it	ne
 8003992:	0424      	lslne	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003994:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003996:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003998:	22ca      	movs	r2, #202	; 0xca
 800399a:	2353      	movs	r3, #83	; 0x53
 800399c:	624a      	str	r2, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800399e:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039a0:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80039a2:	f7ff ff69 	bl	8003878 <RTC_EnterInitMode>
 80039a6:	4607      	mov	r7, r0
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d15a      	bne.n	8003a62 <HAL_RTC_SetTime+0x106>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80039ac:	682b      	ldr	r3, [r5, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039ae:	68f2      	ldr	r2, [r6, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80039b0:	f004 307f 	and.w	r0, r4, #2139062143	; 0x7f7f7f7f
 80039b4:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039b8:	6934      	ldr	r4, [r6, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80039ba:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80039bc:	6899      	ldr	r1, [r3, #8]
 80039be:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80039c2:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039c4:	6899      	ldr	r1, [r3, #8]
 80039c6:	4322      	orrs	r2, r4
 80039c8:	430a      	orrs	r2, r1
 80039ca:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d2:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	0692      	lsls	r2, r2, #26
 80039d8:	d54d      	bpl.n	8003a76 <HAL_RTC_SetTime+0x11a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039da:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 80039dc:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc); 
 80039de:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e0:	6258      	str	r0, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80039e2:	7769      	strb	r1, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 80039e4:	772a      	strb	r2, [r5, #28]
}
 80039e6:	4638      	mov	r0, r7
 80039e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80039ea:	688f      	ldr	r7, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80039ec:	7830      	ldrb	r0, [r6, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80039ee:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80039f2:	bf16      	itet	ne
 80039f4:	78f7      	ldrbne	r7, [r6, #3]
      sTime->TimeFormat = 0x00U;
 80039f6:	70f7      	strbeq	r7, [r6, #3]
 80039f8:	043f      	lslne	r7, r7, #16
  while(Value >= 10U)
 80039fa:	2809      	cmp	r0, #9
 80039fc:	f04f 0400 	mov.w	r4, #0
 8003a00:	d907      	bls.n	8003a12 <HAL_RTC_SetTime+0xb6>
    Value -= 10U;
 8003a02:	380a      	subs	r0, #10
 8003a04:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8003a06:	2809      	cmp	r0, #9
    bcdhigh++;
 8003a08:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 8003a0c:	d8f9      	bhi.n	8003a02 <HAL_RTC_SetTime+0xa6>
 8003a0e:	0124      	lsls	r4, r4, #4
 8003a10:	b2e4      	uxtb	r4, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a12:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a14:	4320      	orrs	r0, r4
  while(Value >= 10U)
 8003a16:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a18:	ea4f 4400 	mov.w	r4, r0, lsl #16
  while(Value >= 10U)
 8003a1c:	d939      	bls.n	8003a92 <HAL_RTC_SetTime+0x136>
 8003a1e:	2000      	movs	r0, #0
    Value -= 10U;
 8003a20:	3b0a      	subs	r3, #10
 8003a22:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003a24:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003a26:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8003a2a:	d8f9      	bhi.n	8003a20 <HAL_RTC_SetTime+0xc4>
 8003a2c:	0100      	lsls	r0, r0, #4
 8003a2e:	fa5f fe80 	uxtb.w	lr, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003a32:	78b0      	ldrb	r0, [r6, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a34:	ea43 030e 	orr.w	r3, r3, lr
  while(Value >= 10U)
 8003a38:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a3a:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 8003a3e:	d92b      	bls.n	8003a98 <HAL_RTC_SetTime+0x13c>
    Value -= 10U;
 8003a40:	380a      	subs	r0, #10
 8003a42:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8003a44:	2809      	cmp	r0, #9
    bcdhigh++;
 8003a46:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8003a4a:	d8f9      	bhi.n	8003a40 <HAL_RTC_SetTime+0xe4>
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a50:	433c      	orrs	r4, r7
 8003a52:	4323      	orrs	r3, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003a54:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a56:	ea43 0400 	orr.w	r4, r3, r0
 8003a5a:	e79d      	b.n	8003998 <HAL_RTC_SetTime+0x3c>
  __HAL_LOCK(hrtc);
 8003a5c:	2702      	movs	r7, #2
}
 8003a5e:	4638      	mov	r0, r7
 8003a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003a62:	6829      	ldr	r1, [r5, #0]
 8003a64:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a66:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8003a68:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003a6a:	2701      	movs	r7, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003a6c:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a6e:	776a      	strb	r2, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8003a70:	772b      	strb	r3, [r5, #28]
}
 8003a72:	4638      	mov	r0, r7
 8003a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a76:	4628      	mov	r0, r5
 8003a78:	f7ff fee4 	bl	8003844 <HAL_RTC_WaitForSynchro>
 8003a7c:	b908      	cbnz	r0, 8003a82 <HAL_RTC_SetTime+0x126>
 8003a7e:	682b      	ldr	r3, [r5, #0]
 8003a80:	e7ab      	b.n	80039da <HAL_RTC_SetTime+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003a82:	682a      	ldr	r2, [r5, #0]
 8003a84:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a86:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003a88:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8003a8a:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a8c:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8003a8e:	2701      	movs	r7, #1
 8003a90:	e7a9      	b.n	80039e6 <HAL_RTC_SetTime+0x8a>
  while(Value >= 10U)
 8003a92:	f04f 0e00 	mov.w	lr, #0
 8003a96:	e7cc      	b.n	8003a32 <HAL_RTC_SetTime+0xd6>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	e7d9      	b.n	8003a50 <HAL_RTC_SetTime+0xf4>

08003a9c <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 8003a9c:	7f03      	ldrb	r3, [r0, #28]
 8003a9e:	2b01      	cmp	r3, #1
{
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8003aa2:	d063      	beq.n	8003b6c <HAL_RTC_SetDate+0xd0>
 8003aa4:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8003aa6:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8003aac:	7763      	strb	r3, [r4, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003aae:	b34a      	cbz	r2, 8003b04 <HAL_RTC_SetDate+0x68>
                  (((uint32_t)sDate->Month) << 8U) | \
 8003ab0:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ab2:	78ca      	ldrb	r2, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 8003ab4:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8003ab6:	780d      	ldrb	r5, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003ab8:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003aba:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003abe:	4318      	orrs	r0, r3
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ac0:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	21ca      	movs	r1, #202	; 0xca
 8003ac8:	2253      	movs	r2, #83	; 0x53
 8003aca:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003acc:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ad0:	f7ff fed2 	bl	8003878 <RTC_EnterInitMode>
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d14b      	bne.n	8003b72 <HAL_RTC_SetDate+0xd6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8003ae0:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8003ae4:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aec:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	0692      	lsls	r2, r2, #26
 8003af2:	d54e      	bpl.n	8003b92 <HAL_RTC_SetDate+0xf6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003af4:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8003af6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 8003af8:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003afa:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003afc:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003afe:	7722      	strb	r2, [r4, #28]
}
 8003b00:	4630      	mov	r0, r6
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b04:	784e      	ldrb	r6, [r1, #1]
 8003b06:	06f0      	lsls	r0, r6, #27
 8003b08:	d43d      	bmi.n	8003b86 <HAL_RTC_SetDate+0xea>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003b0a:	78cb      	ldrb	r3, [r1, #3]
  while(Value >= 10U)
 8003b0c:	2b09      	cmp	r3, #9
 8003b0e:	f04f 0000 	mov.w	r0, #0
 8003b12:	d907      	bls.n	8003b24 <HAL_RTC_SetDate+0x88>
    Value -= 10U;
 8003b14:	3b0a      	subs	r3, #10
 8003b16:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003b18:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003b1a:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8003b1e:	d8f9      	bhi.n	8003b14 <HAL_RTC_SetDate+0x78>
 8003b20:	0100      	lsls	r0, r0, #4
 8003b22:	b2c0      	uxtb	r0, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003b24:	4303      	orrs	r3, r0
  while(Value >= 10U)
 8003b26:	2e09      	cmp	r6, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003b28:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 8003b2c:	d93f      	bls.n	8003bae <HAL_RTC_SetDate+0x112>
 8003b2e:	2000      	movs	r0, #0
    Value -= 10U;
 8003b30:	f1a6 050a 	sub.w	r5, r6, #10
 8003b34:	b2ee      	uxtb	r6, r5
  while(Value >= 10U)
 8003b36:	2e09      	cmp	r6, #9
    bcdhigh++;
 8003b38:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8003b3c:	d8f8      	bhi.n	8003b30 <HAL_RTC_SetDate+0x94>
 8003b3e:	0105      	lsls	r5, r0, #4
 8003b40:	b2ed      	uxtb	r5, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003b42:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003b44:	4335      	orrs	r5, r6
  while(Value >= 10U)
 8003b46:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003b48:	ea4f 2505 	mov.w	r5, r5, lsl #8
  while(Value >= 10U)
 8003b4c:	d931      	bls.n	8003bb2 <HAL_RTC_SetDate+0x116>
    Value -= 10U;
 8003b4e:	380a      	subs	r0, #10
 8003b50:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8003b52:	2809      	cmp	r0, #9
    bcdhigh++;
 8003b54:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8003b58:	d8f9      	bhi.n	8003b4e <HAL_RTC_SetDate+0xb2>
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13U));   
 8003b5e:	7809      	ldrb	r1, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003b60:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8003b64:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003b66:	4310      	orrs	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003b68:	4305      	orrs	r5, r0
 8003b6a:	e7ab      	b.n	8003ac4 <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 8003b6c:	2602      	movs	r6, #2
}
 8003b6e:	4630      	mov	r0, r6
 8003b70:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003b72:	6821      	ldr	r1, [r4, #0]
 8003b74:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b76:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8003b78:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003b7a:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003b7c:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b7e:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003b80:	7723      	strb	r3, [r4, #28]
}
 8003b82:	4630      	mov	r0, r6
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b86:	f026 0510 	bic.w	r5, r6, #16
 8003b8a:	350a      	adds	r5, #10
 8003b8c:	b2ee      	uxtb	r6, r5
 8003b8e:	704e      	strb	r6, [r1, #1]
 8003b90:	e7bb      	b.n	8003b0a <HAL_RTC_SetDate+0x6e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7ff fe56 	bl	8003844 <HAL_RTC_WaitForSynchro>
 8003b98:	b908      	cbnz	r0, 8003b9e <HAL_RTC_SetDate+0x102>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	e7aa      	b.n	8003af4 <HAL_RTC_SetDate+0x58>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ba2:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003ba4:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8003ba6:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ba8:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003baa:	2601      	movs	r6, #1
 8003bac:	e7a8      	b.n	8003b00 <HAL_RTC_SetDate+0x64>
  while(Value >= 10U)
 8003bae:	2500      	movs	r5, #0
 8003bb0:	e7c7      	b.n	8003b42 <HAL_RTC_SetDate+0xa6>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	e7d3      	b.n	8003b5e <HAL_RTC_SetDate+0xc2>
 8003bb6:	bf00      	nop

08003bb8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bbc:	7f03      	ldrb	r3, [r0, #28]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d058      	beq.n	8003c74 <HAL_RTCEx_SetWakeUpTimer_IT+0xbc>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bc2:	6803      	ldr	r3, [r0, #0]
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	4617      	mov	r7, r2
 8003bc8:	4688      	mov	r8, r1
 8003bca:	2253      	movs	r2, #83	; 0x53
 8003bcc:	21ca      	movs	r1, #202	; 0xca
  __HAL_LOCK(hrtc);
 8003bce:	2401      	movs	r4, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bd0:	2002      	movs	r0, #2
 8003bd2:	7768      	strb	r0, [r5, #29]
  __HAL_LOCK(hrtc);
 8003bd4:	772c      	strb	r4, [r5, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bd6:	6259      	str	r1, [r3, #36]	; 0x24
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	0551      	lsls	r1, r2, #21
 8003bde:	d50d      	bpl.n	8003bfc <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
    tickstart = HAL_GetTick();
 8003be0:	f7fd f93a 	bl	8000e58 <HAL_GetTick>
 8003be4:	4604      	mov	r4, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003be6:	e005      	b.n	8003bf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x3c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003be8:	f7fd f936 	bl	8000e58 <HAL_GetTick>
 8003bec:	1b00      	subs	r0, r0, r4
 8003bee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bf2:	d84b      	bhi.n	8003c8c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	0752      	lsls	r2, r2, #29
 8003bfa:	d4f5      	bmi.n	8003be8 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c02:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003c0c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003c0e:	f7fd f923 	bl	8000e58 <HAL_GetTick>
 8003c12:	4681      	mov	r9, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003c14:	e006      	b.n	8003c24 <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003c16:	f7fd f91f 	bl	8000e58 <HAL_GetTick>
 8003c1a:	eba0 0009 	sub.w	r0, r0, r9
 8003c1e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c22:	d82a      	bhi.n	8003c7a <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003c24:	682e      	ldr	r6, [r5, #0]
 8003c26:	68f4      	ldr	r4, [r6, #12]
 8003c28:	f014 0404 	ands.w	r4, r4, #4
 8003c2c:	d0f3      	beq.n	8003c16 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003c2e:	f8c6 8014 	str.w	r8, [r6, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003c32:	68b2      	ldr	r2, [r6, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003c36:	f022 0207 	bic.w	r2, r2, #7
 8003c3a:	60b2      	str	r2, [r6, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003c3c:	68b2      	ldr	r2, [r6, #8]
 8003c3e:	4317      	orrs	r7, r2
 8003c40:	60b7      	str	r7, [r6, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c48:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c50:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003c52:	68b3      	ldr	r3, [r6, #8]
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c58:	60b3      	str	r3, [r6, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c5a:	68b3      	ldr	r3, [r6, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c5c:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c5e:	24ff      	movs	r4, #255	; 0xff
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  hrtc->State = HAL_RTC_STATE_READY;
 8003c64:	2101      	movs	r1, #1
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c66:	60b3      	str	r3, [r6, #8]

  return HAL_OK;
 8003c68:	4610      	mov	r0, r2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c6a:	6274      	str	r4, [r6, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003c6c:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8003c6e:	772a      	strb	r2, [r5, #28]
  return HAL_OK;
 8003c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8003c74:	2002      	movs	r0, #2
}
 8003c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c7a:	682a      	ldr	r2, [r5, #0]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c7e:	21ff      	movs	r1, #255	; 0xff
 8003c80:	6251      	str	r1, [r2, #36]	; 0x24
      return HAL_TIMEOUT;
 8003c82:	4618      	mov	r0, r3
      __HAL_UNLOCK(hrtc);
 8003c84:	772c      	strb	r4, [r5, #28]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c86:	776b      	strb	r3, [r5, #29]
      return HAL_TIMEOUT;
 8003c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c8c:	6829      	ldr	r1, [r5, #0]
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c90:	20ff      	movs	r0, #255	; 0xff
       __HAL_UNLOCK(hrtc);
 8003c92:	2200      	movs	r2, #0
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c94:	6248      	str	r0, [r1, #36]	; 0x24
       return HAL_TIMEOUT;
 8003c96:	4618      	mov	r0, r3
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c98:	776b      	strb	r3, [r5, #29]
       __HAL_UNLOCK(hrtc);
 8003c9a:	772a      	strb	r2, [r5, #28]
       return HAL_TIMEOUT;
 8003c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003ca4:	6803      	ldr	r3, [r0, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	055b      	lsls	r3, r3, #21
{
 8003caa:	b510      	push	{r4, lr}
 8003cac:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003cae:	d507      	bpl.n	8003cc0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003cb0:	f001 f948 	bl	8004f44 <HAL_RTCEx_WakeUpTimerEventCallback>
    
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	68d3      	ldr	r3, [r2, #12]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8003cbe:	60d3      	str	r3, [r2, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003cc0:	4a03      	ldr	r2, [pc, #12]	; (8003cd0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8003cc2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cc6:	2301      	movs	r3, #1
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003cc8:	6151      	str	r1, [r2, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8003cca:	7763      	strb	r3, [r4, #29]
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003cd4:	6803      	ldr	r3, [r0, #0]
 8003cd6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003cd8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003ce0:	6803      	ldr	r3, [r0, #0]
 8003ce2:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003ce4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop

08003cec <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cec:	6803      	ldr	r3, [r0, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003cfe:	2000      	movs	r0, #0
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop

08003d04 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8003d04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d040      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x8a>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	2202      	movs	r2, #2
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d0e:	6803      	ldr	r3, [r0, #0]
{
 8003d10:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003d12:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003d16:	689d      	ldr	r5, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8003d18:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_TIM_ConfigClockSource+0x18c>)
  switch (sClockSourceConfig->ClockSource)
 8003d1c:	2c40      	cmp	r4, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d1e:	ea02 0205 	and.w	r2, r2, r5
  __HAL_LOCK(htim);
 8003d22:	f04f 0501 	mov.w	r5, #1
 8003d26:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8003d2a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d2c:	d079      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x11e>
 8003d2e:	d918      	bls.n	8003d62 <HAL_TIM_ConfigClockSource+0x5e>
 8003d30:	2c70      	cmp	r4, #112	; 0x70
 8003d32:	d062      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0xf6>
 8003d34:	d92d      	bls.n	8003d92 <HAL_TIM_ConfigClockSource+0x8e>
 8003d36:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003d3a:	d057      	beq.n	8003dec <HAL_TIM_ConfigClockSource+0xe8>
 8003d3c:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8003d40:	d11c      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d42:	688a      	ldr	r2, [r1, #8]
 8003d44:	684d      	ldr	r5, [r1, #4]
 8003d46:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003d48:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4a:	432a      	orrs	r2, r5
 8003d4c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d50:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d54:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d56:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5e:	609a      	str	r2, [r3, #8]
    break;
 8003d60:	e00c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8003d62:	2c10      	cmp	r4, #16
 8003d64:	d032      	beq.n	8003dcc <HAL_TIM_ConfigClockSource+0xc8>
 8003d66:	d938      	bls.n	8003dda <HAL_TIM_ConfigClockSource+0xd6>
 8003d68:	2c20      	cmp	r4, #32
 8003d6a:	d072      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x14e>
 8003d6c:	2c30      	cmp	r4, #48	; 0x30
 8003d6e:	d105      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8003d70:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003d72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003d76:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8003d7a:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8003d7c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003d88:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003d8a:	4618      	mov	r0, r3
}
 8003d8c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003d8e:	2002      	movs	r0, #2
 8003d90:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003d92:	2c50      	cmp	r4, #80	; 0x50
 8003d94:	d064      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0x15c>
 8003d96:	2c60      	cmp	r4, #96	; 0x60
 8003d98:	d1f0      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003d9c:	684d      	ldr	r5, [r1, #4]
 8003d9e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da0:	f024 0410 	bic.w	r4, r4, #16
 8003da4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003da8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003daa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003dba:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003dbe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003dc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003dc4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	e7d7      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8003dcc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003dce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003dd2:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	e7d0      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8003dda:	2c00      	cmp	r4, #0
 8003ddc:	d1ce      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8003dde:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003de0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003de4:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	e7c7      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003df2:	f022 0207 	bic.w	r2, r2, #7
 8003df6:	609a      	str	r2, [r3, #8]
    break;
 8003df8:	e7c0      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dfa:	688a      	ldr	r2, [r1, #8]
 8003dfc:	684d      	ldr	r5, [r1, #4]
 8003dfe:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003e00:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e02:	432a      	orrs	r2, r5
 8003e04:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e0c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003e0e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003e10:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e16:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003e1e:	609a      	str	r2, [r3, #8]
    break;
 8003e20:	e7ac      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 8003e22:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e24:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003e26:	684c      	ldr	r4, [r1, #4]
 8003e28:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2a:	f026 0601 	bic.w	r6, r6, #1
 8003e2e:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003e30:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e32:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003e3e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e42:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003e44:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003e46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003e4a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	e794      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8003e52:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003e54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003e58:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	e78d      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 8003e60:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e62:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003e64:	684c      	ldr	r4, [r1, #4]
 8003e66:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e68:	f026 0601 	bic.w	r6, r6, #1
 8003e6c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003e6e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e70:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e78:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003e7c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e80:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003e82:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003e84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003e88:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	e775      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x78>
 8003e90:	fffe0088 	.word	0xfffe0088

08003e94 <HAL_TIM_OC_DelayElapsedCallback>:
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop

08003e98 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop

08003e9c <HAL_TIM_TriggerCallback>:
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ea0:	6803      	ldr	r3, [r0, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	0791      	lsls	r1, r2, #30
{
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eaa:	d502      	bpl.n	8003eb2 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	0792      	lsls	r2, r2, #30
 8003eb0:	d465      	bmi.n	8003f7e <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	0752      	lsls	r2, r2, #29
 8003eb6:	d502      	bpl.n	8003ebe <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	0750      	lsls	r0, r2, #29
 8003ebc:	d44c      	bmi.n	8003f58 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	0711      	lsls	r1, r2, #28
 8003ec2:	d502      	bpl.n	8003eca <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	0712      	lsls	r2, r2, #28
 8003ec8:	d434      	bmi.n	8003f34 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	06d0      	lsls	r0, r2, #27
 8003ece:	d502      	bpl.n	8003ed6 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	06d1      	lsls	r1, r2, #27
 8003ed4:	d41e      	bmi.n	8003f14 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	07d2      	lsls	r2, r2, #31
 8003eda:	d502      	bpl.n	8003ee2 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	07d0      	lsls	r0, r2, #31
 8003ee0:	d46b      	bmi.n	8003fba <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	0611      	lsls	r1, r2, #24
 8003ee6:	d502      	bpl.n	8003eee <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	0612      	lsls	r2, r2, #24
 8003eec:	d46d      	bmi.n	8003fca <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	05d0      	lsls	r0, r2, #23
 8003ef2:	d502      	bpl.n	8003efa <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	0611      	lsls	r1, r2, #24
 8003ef8:	d46f      	bmi.n	8003fda <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	0652      	lsls	r2, r2, #25
 8003efe:	d502      	bpl.n	8003f06 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	0650      	lsls	r0, r2, #25
 8003f04:	d451      	bmi.n	8003faa <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	0691      	lsls	r1, r2, #26
 8003f0a:	d502      	bpl.n	8003f12 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	0692      	lsls	r2, r2, #26
 8003f10:	d443      	bmi.n	8003f9a <HAL_TIM_IRQHandler+0xfa>
 8003f12:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f14:	f06f 0210 	mvn.w	r2, #16
 8003f18:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f1c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f22:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003f24:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f26:	d06c      	beq.n	8004002 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f28:	f001 f806 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	7722      	strb	r2, [r4, #28]
 8003f32:	e7d0      	b.n	8003ed6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f34:	f06f 0208 	mvn.w	r2, #8
 8003f38:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f3a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f3c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f3e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f40:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f44:	d15a      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	f7ff ffa5 	bl	8003e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f7ff ffa4 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f50:	2200      	movs	r2, #0
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	7722      	strb	r2, [r4, #28]
 8003f56:	e7b8      	b.n	8003eca <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f58:	f06f 0204 	mvn.w	r2, #4
 8003f5c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f5e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f60:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f62:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f66:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003f68:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f6a:	d144      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6c:	f7ff ff92 	bl	8003e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	4620      	mov	r0, r4
 8003f72:	f7ff ff91 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	2200      	movs	r2, #0
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	7722      	strb	r2, [r4, #28]
 8003f7c:	e79f      	b.n	8003ebe <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f7e:	f06f 0202 	mvn.w	r2, #2
 8003f82:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f84:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f88:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8c:	d02d      	beq.n	8003fea <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	f000 ffd3 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	2200      	movs	r2, #0
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	7722      	strb	r2, [r4, #28]
 8003f98:	e78b      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f9a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003f9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fa0:	611a      	str	r2, [r3, #16]
}
 8003fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003fa6:	f000 b8d5 	b.w	8004154 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003faa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f7ff ff73 	bl	8003e9c <HAL_TIM_TriggerCallback>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	e7a5      	b.n	8003f06 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fba:	f06f 0201 	mvn.w	r2, #1
 8003fbe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f001 fdbd 	bl	8005b40 <HAL_TIM_PeriodElapsedCallback>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	e78b      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f000 f8c1 	bl	8004158 <HAL_TIMEx_BreakCallback>
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	e789      	b.n	8003eee <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f000 f8bb 	bl	800415c <HAL_TIMEx_Break2Callback>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	e787      	b.n	8003efa <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	f7ff ff53 	bl	8003e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff ff52 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ff4:	e7cd      	b.n	8003f92 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	f000 ff9f 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8003ffa:	e7bc      	b.n	8003f76 <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffc:	f000 ff9c 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004000:	e7a6      	b.n	8003f50 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	f7ff ff47 	bl	8003e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff ff46 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
 800400c:	e78e      	b.n	8003f2c <HAL_TIM_IRQHandler+0x8c>
 800400e:	bf00      	nop

08004010 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004010:	4a2d      	ldr	r2, [pc, #180]	; (80040c8 <TIM_Base_SetConfig+0xb8>)
  tmpcr1 = TIMx->CR1;
 8004012:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004014:	4290      	cmp	r0, r2
{
 8004016:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004018:	d04e      	beq.n	80040b8 <TIM_Base_SetConfig+0xa8>
 800401a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800401e:	d02f      	beq.n	8004080 <TIM_Base_SetConfig+0x70>
 8004020:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004024:	4290      	cmp	r0, r2
 8004026:	d02b      	beq.n	8004080 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004028:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800402c:	4290      	cmp	r0, r2
 800402e:	d014      	beq.n	800405a <TIM_Base_SetConfig+0x4a>
 8004030:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004034:	4290      	cmp	r0, r2
 8004036:	d010      	beq.n	800405a <TIM_Base_SetConfig+0x4a>
 8004038:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800403c:	4290      	cmp	r0, r2
 800403e:	d00c      	beq.n	800405a <TIM_Base_SetConfig+0x4a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004040:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004042:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004044:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800404a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800404c:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800404e:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004050:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004052:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004054:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8004056:	6143      	str	r3, [r0, #20]
}
 8004058:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800405c:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004062:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004068:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800406a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	688b      	ldr	r3, [r1, #8]
 800406e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004070:	680b      	ldr	r3, [r1, #0]
 8004072:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004074:	690b      	ldr	r3, [r1, #16]
 8004076:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004078:	2301      	movs	r3, #1
 800407a:	6143      	str	r3, [r0, #20]
}
 800407c:	bcf0      	pop	{r4, r5, r6, r7}
 800407e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004080:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	694a      	ldr	r2, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004086:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004088:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800408e:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004094:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800409c:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <TIM_Base_SetConfig+0xbc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a0:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80040a2:	4298      	cmp	r0, r3
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80040a4:	6285      	str	r5, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80040a6:	d0e5      	beq.n	8004074 <TIM_Base_SetConfig+0x64>
 80040a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ac:	4298      	cmp	r0, r3
 80040ae:	d0e1      	beq.n	8004074 <TIM_Base_SetConfig+0x64>
  TIMx->EGR = TIM_EGR_UG;
 80040b0:	2301      	movs	r3, #1
 80040b2:	6143      	str	r3, [r0, #20]
}
 80040b4:	bcf0      	pop	{r4, r5, r6, r7}
 80040b6:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80040b8:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ba:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040bc:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040c2:	432b      	orrs	r3, r5
 80040c4:	e7cb      	b.n	800405e <TIM_Base_SetConfig+0x4e>
 80040c6:	bf00      	nop
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40014400 	.word	0x40014400

080040d0 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80040d0:	b1b8      	cbz	r0, 8004102 <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 80040d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 80040d6:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80040d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040dc:	4604      	mov	r4, r0
 80040de:	b15b      	cbz	r3, 80040f8 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 80040e0:	2302      	movs	r3, #2
 80040e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80040e6:	6820      	ldr	r0, [r4, #0]
 80040e8:	1d21      	adds	r1, r4, #4
 80040ea:	f7ff ff91 	bl	8004010 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80040f4:	2000      	movs	r0, #0
 80040f6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80040f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80040fc:	f002 fa78 	bl	80065f0 <HAL_TIM_Base_MspInit>
 8004100:	e7ee      	b.n	80040e0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004102:	2001      	movs	r0, #1
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop

08004108 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004108:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d016      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0x36>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004110:	6802      	ldr	r2, [r0, #0]
{
 8004112:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004114:	4d0e      	ldr	r5, [pc, #56]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8004116:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004118:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800411a:	42aa      	cmp	r2, r5
 800411c:	d012      	beq.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800411e:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004120:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004126:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800412a:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800412c:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412e:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8004130:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004132:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8004134:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  
  return HAL_OK;
} 
 8004138:	4620      	mov	r0, r4
 800413a:	bc70      	pop	{r4, r5, r6}
 800413c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800413e:	2302      	movs	r3, #2
} 
 8004140:	4618      	mov	r0, r3
 8004142:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004144:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800414a:	432b      	orrs	r3, r5
 800414c:	e7e7      	b.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x16>
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00

08004154 <HAL_TIMEx_CommutationCallback>:
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop

08004158 <HAL_TIMEx_BreakCallback>:
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop

0800415c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004160:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004164:	2b20      	cmp	r3, #32
 8004166:	d001      	beq.n	800416c <HAL_UART_Transmit_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004168:	2002      	movs	r0, #2
 800416a:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 800416c:	b1c9      	cbz	r1, 80041a2 <HAL_UART_Transmit_IT+0x42>
 800416e:	b1c2      	cbz	r2, 80041a2 <HAL_UART_Transmit_IT+0x42>
    __HAL_LOCK(huart);
 8004170:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004174:	2b01      	cmp	r3, #1
 8004176:	d0f7      	beq.n	8004168 <HAL_UART_Transmit_IT+0x8>
{
 8004178:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800417c:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 800417e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004182:	2421      	movs	r4, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004184:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004186:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800418a:	682c      	ldr	r4, [r5, #0]
    huart->pTxBuffPtr = pData;
 800418c:	64c1      	str	r1, [r0, #76]	; 0x4c
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800418e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 8004192:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    __HAL_UNLOCK(huart);
 8004196:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 800419a:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800419c:	602c      	str	r4, [r5, #0]
  }
}
 800419e:	bc30      	pop	{r4, r5}
 80041a0:	4770      	bx	lr
      return HAL_ERROR;
 80041a2:	2001      	movs	r0, #1
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop

080041a8 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80041a8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d001      	beq.n	80041b4 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2002      	movs	r0, #2
  }
}
 80041b2:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80041b4:	b349      	cbz	r1, 800420a <HAL_UART_Receive_IT+0x62>
 80041b6:	b342      	cbz	r2, 800420a <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 80041b8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d0f7      	beq.n	80041b0 <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 80041c0:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 80041c2:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 80041c8:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 80041cc:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80041d0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 80041d4:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 80041d8:	d027      	beq.n	800422a <HAL_UART_Receive_IT+0x82>
 80041da:	b9c3      	cbnz	r3, 800420e <HAL_UART_Receive_IT+0x66>
 80041dc:	6903      	ldr	r3, [r0, #16]
 80041de:	b303      	cbz	r3, 8004222 <HAL_UART_Receive_IT+0x7a>
 80041e0:	237f      	movs	r3, #127	; 0x7f
 80041e2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ea:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ee:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 80041f4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f8:	f041 0101 	orr.w	r1, r1, #1
 80041fc:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041fe:	6811      	ldr	r1, [r2, #0]
 8004200:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 8004204:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004206:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8004208:	4770      	bx	lr
      return HAL_ERROR;
 800420a:	2001      	movs	r0, #1
 800420c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800420e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004212:	d1e8      	bne.n	80041e6 <HAL_UART_Receive_IT+0x3e>
 8004214:	6903      	ldr	r3, [r0, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0e2      	beq.n	80041e0 <HAL_UART_Receive_IT+0x38>
 800421a:	233f      	movs	r3, #63	; 0x3f
 800421c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004220:	e7e1      	b.n	80041e6 <HAL_UART_Receive_IT+0x3e>
 8004222:	23ff      	movs	r3, #255	; 0xff
 8004224:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004228:	e7dd      	b.n	80041e6 <HAL_UART_Receive_IT+0x3e>
 800422a:	6903      	ldr	r3, [r0, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f8      	bne.n	8004222 <HAL_UART_Receive_IT+0x7a>
 8004230:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004234:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004238:	e7d5      	b.n	80041e6 <HAL_UART_Receive_IT+0x3e>
 800423a:	bf00      	nop

0800423c <HAL_UART_TxCpltCallback>:
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop

08004240 <HAL_UART_ErrorCallback>:
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop

08004244 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004244:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004246:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8004248:	2200      	movs	r2, #0
 800424a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 800424e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8004250:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8004254:	f7ff fff4 	bl	8004240 <HAL_UART_ErrorCallback>
 8004258:	bd08      	pop	{r3, pc}
 800425a:	bf00      	nop

0800425c <UART_SetConfig>:
{
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800425e:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004260:	6907      	ldr	r7, [r0, #16]
 8004262:	6883      	ldr	r3, [r0, #8]
 8004264:	6946      	ldr	r6, [r0, #20]
 8004266:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004268:	4a62      	ldr	r2, [pc, #392]	; (80043f4 <UART_SetConfig+0x198>)
{
 800426a:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800426c:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800426e:	6820      	ldr	r0, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004270:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004272:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004274:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004276:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004278:	4313      	orrs	r3, r2
 800427a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800427c:	6862      	ldr	r2, [r4, #4]
 800427e:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004280:	69ab      	ldr	r3, [r5, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004282:	485d      	ldr	r0, [pc, #372]	; (80043f8 <UART_SetConfig+0x19c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004284:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004288:	4332      	orrs	r2, r6
 800428a:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800428c:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800428e:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004290:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004294:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004296:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004298:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800429a:	d01b      	beq.n	80042d4 <UART_SetConfig+0x78>
 800429c:	4b57      	ldr	r3, [pc, #348]	; (80043fc <UART_SetConfig+0x1a0>)
 800429e:	429c      	cmp	r4, r3
 80042a0:	d00a      	beq.n	80042b8 <UART_SetConfig+0x5c>
 80042a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042a6:	429c      	cmp	r4, r3
 80042a8:	d006      	beq.n	80042b8 <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042aa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80042ae:	d158      	bne.n	8004362 <UART_SetConfig+0x106>
 80042b0:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80042b2:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80042b4:	60e3      	str	r3, [r4, #12]
 80042b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80042bc:	d053      	beq.n	8004366 <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80042be:	f7ff f969 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 80042c2:	686b      	ldr	r3, [r5, #4]
 80042c4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80042c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80042cc:	b280      	uxth	r0, r0
 80042ce:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80042d0:	2000      	movs	r0, #0
        break;
 80042d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d4:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <UART_SetConfig+0x1a4>)
 80042d6:	4a4b      	ldr	r2, [pc, #300]	; (8004404 <UART_SetConfig+0x1a8>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042de:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80042e2:	5cd3      	ldrb	r3, [r2, r3]
 80042e4:	d051      	beq.n	800438a <UART_SetConfig+0x12e>
    switch (clocksource)
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d83b      	bhi.n	8004362 <UART_SetConfig+0x106>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0x94>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	080042bf 	.word	0x080042bf
 80042f4:	0800435d 	.word	0x0800435d
 80042f8:	08004343 	.word	0x08004343
 80042fc:	08004363 	.word	0x08004363
 8004300:	0800432b 	.word	0x0800432b
 8004304:	08004363 	.word	0x08004363
 8004308:	08004363 	.word	0x08004363
 800430c:	08004363 	.word	0x08004363
 8004310:	08004315 	.word	0x08004315
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004314:	686a      	ldr	r2, [r5, #4]
 8004316:	4938      	ldr	r1, [pc, #224]	; (80043f8 <UART_SetConfig+0x19c>)
 8004318:	0853      	lsrs	r3, r2, #1
 800431a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800431e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004326:	2000      	movs	r0, #0
        break;
 8004328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800432a:	f7ff f831 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800432e:	686b      	ldr	r3, [r5, #4]
 8004330:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <UART_SetConfig+0x19c>)
 8004332:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004336:	fbb0 f0f3 	udiv	r0, r0, r3
 800433a:	b280      	uxth	r0, r0
 800433c:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800433e:	2000      	movs	r0, #0
        break;
 8004340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004342:	686a      	ldr	r2, [r5, #4]
 8004344:	492c      	ldr	r1, [pc, #176]	; (80043f8 <UART_SetConfig+0x19c>)
 8004346:	0853      	lsrs	r3, r2, #1
 8004348:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800434c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004350:	fbb3 f3f2 	udiv	r3, r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004358:	2000      	movs	r0, #0
        break;
 800435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800435c:	f7ff f932 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004360:	e7e5      	b.n	800432e <UART_SetConfig+0xd2>
        ret = HAL_ERROR;
 8004362:	2001      	movs	r0, #1
  return ret;
 8004364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004366:	f7ff f915 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800436a:	686a      	ldr	r2, [r5, #4]
 800436c:	682c      	ldr	r4, [r5, #0]
 800436e:	0853      	lsrs	r3, r2, #1
 8004370:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004374:	fbb0 f0f2 	udiv	r0, r0, r2
 8004378:	f3c0 0342 	ubfx	r3, r0, #1, #3
 800437c:	f020 000f 	bic.w	r0, r0, #15
 8004380:	4303      	orrs	r3, r0
 8004382:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004384:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8004386:	60e3      	str	r3, [r4, #12]
 8004388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 800438a:	2b08      	cmp	r3, #8
 800438c:	d890      	bhi.n	80042b0 <UART_SetConfig+0x54>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <UART_SetConfig+0x138>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	08004367 	.word	0x08004367
 8004398:	080043b9 	.word	0x080043b9
 800439c:	080043e1 	.word	0x080043e1
 80043a0:	080042b1 	.word	0x080042b1
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080042b1 	.word	0x080042b1
 80043ac:	080042b1 	.word	0x080042b1
 80043b0:	080042b1 	.word	0x080042b1
 80043b4:	080043bf 	.word	0x080043bf
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80043b8:	f7ff f904 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 80043bc:	e7d5      	b.n	800436a <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80043be:	686b      	ldr	r3, [r5, #4]
 80043c0:	085a      	lsrs	r2, r3, #1
 80043c2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80043c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ca:	f3c2 0342 	ubfx	r3, r2, #1, #3
 80043ce:	f022 020f 	bic.w	r2, r2, #15
 80043d2:	4313      	orrs	r3, r2
 80043d4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d6:	2000      	movs	r0, #0
        break;
 80043d8:	e76c      	b.n	80042b4 <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043da:	f7fe ffd9 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 80043de:	e7c4      	b.n	800436a <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80043e0:	686a      	ldr	r2, [r5, #4]
 80043e2:	0853      	lsrs	r3, r2, #1
 80043e4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80043e8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80043ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80043f0:	e7eb      	b.n	80043ca <UART_SetConfig+0x16e>
 80043f2:	bf00      	nop
 80043f4:	efff69f3 	.word	0xefff69f3
 80043f8:	40013800 	.word	0x40013800
 80043fc:	40004400 	.word	0x40004400
 8004400:	40021000 	.word	0x40021000
 8004404:	08008008 	.word	0x08008008

08004408 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004408:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800440a:	07da      	lsls	r2, r3, #31
{
 800440c:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800440e:	d506      	bpl.n	800441e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004410:	6801      	ldr	r1, [r0, #0]
 8004412:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004414:	684a      	ldr	r2, [r1, #4]
 8004416:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800441a:	4322      	orrs	r2, r4
 800441c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800441e:	079c      	lsls	r4, r3, #30
 8004420:	d506      	bpl.n	8004430 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004422:	6801      	ldr	r1, [r0, #0]
 8004424:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004426:	684a      	ldr	r2, [r1, #4]
 8004428:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800442c:	4322      	orrs	r2, r4
 800442e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004430:	0759      	lsls	r1, r3, #29
 8004432:	d506      	bpl.n	8004442 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004434:	6801      	ldr	r1, [r0, #0]
 8004436:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004438:	684a      	ldr	r2, [r1, #4]
 800443a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800443e:	4322      	orrs	r2, r4
 8004440:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004442:	071a      	lsls	r2, r3, #28
 8004444:	d506      	bpl.n	8004454 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004446:	6801      	ldr	r1, [r0, #0]
 8004448:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800444a:	684a      	ldr	r2, [r1, #4]
 800444c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004450:	4322      	orrs	r2, r4
 8004452:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004454:	06dc      	lsls	r4, r3, #27
 8004456:	d506      	bpl.n	8004466 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004458:	6801      	ldr	r1, [r0, #0]
 800445a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800445c:	688a      	ldr	r2, [r1, #8]
 800445e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004462:	4322      	orrs	r2, r4
 8004464:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004466:	0699      	lsls	r1, r3, #26
 8004468:	d506      	bpl.n	8004478 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800446a:	6801      	ldr	r1, [r0, #0]
 800446c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800446e:	688a      	ldr	r2, [r1, #8]
 8004470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004474:	4322      	orrs	r2, r4
 8004476:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004478:	065a      	lsls	r2, r3, #25
 800447a:	d509      	bpl.n	8004490 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800447c:	6801      	ldr	r1, [r0, #0]
 800447e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004480:	684a      	ldr	r2, [r1, #4]
 8004482:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004486:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004488:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800448c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800448e:	d00b      	beq.n	80044a8 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	d506      	bpl.n	80044a2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004494:	6802      	ldr	r2, [r0, #0]
 8004496:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004498:	6853      	ldr	r3, [r2, #4]
 800449a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800449e:	430b      	orrs	r3, r1
 80044a0:	6053      	str	r3, [r2, #4]
}
 80044a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044a6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044a8:	684a      	ldr	r2, [r1, #4]
 80044aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80044ac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80044b0:	4322      	orrs	r2, r4
 80044b2:	604a      	str	r2, [r1, #4]
 80044b4:	e7ec      	b.n	8004490 <UART_AdvFeatureConfig+0x88>
 80044b6:	bf00      	nop

080044b8 <UART_WaitOnFlagUntilTimeout>:
{
 80044b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044bc:	9d08      	ldr	r5, [sp, #32]
 80044be:	4680      	mov	r8, r0
 80044c0:	460f      	mov	r7, r1
 80044c2:	4616      	mov	r6, r2
 80044c4:	4699      	mov	r9, r3
 80044c6:	f8d8 4000 	ldr.w	r4, [r8]
 80044ca:	e001      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 80044cc:	1c6b      	adds	r3, r5, #1
 80044ce:	d10a      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d0:	69e0      	ldr	r0, [r4, #28]
 80044d2:	ea37 0300 	bics.w	r3, r7, r0
 80044d6:	bf0c      	ite	eq
 80044d8:	2001      	moveq	r0, #1
 80044da:	2000      	movne	r0, #0
 80044dc:	42b0      	cmp	r0, r6
 80044de:	d0f5      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 80044e0:	2000      	movs	r0, #0
}
 80044e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80044e6:	b13d      	cbz	r5, 80044f8 <UART_WaitOnFlagUntilTimeout+0x40>
 80044e8:	f7fc fcb6 	bl	8000e58 <HAL_GetTick>
 80044ec:	eba0 0009 	sub.w	r0, r0, r9
 80044f0:	4285      	cmp	r5, r0
 80044f2:	d2e8      	bcs.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xe>
 80044f4:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044fe:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8004502:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8004508:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 800450c:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800450e:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8004512:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004516:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 800451a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800451e:	bf00      	nop

08004520 <UART_CheckIdleState>:
{
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	2500      	movs	r5, #0
{
 8004526:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800452a:	f7fc fc95 	bl	8000e58 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8004534:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004536:	d40c      	bmi.n	8004552 <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	075b      	lsls	r3, r3, #29
 800453c:	d417      	bmi.n	800456e <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 800453e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004540:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8004542:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8004546:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800454a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800454e:	b002      	add	sp, #8
 8004550:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	462a      	mov	r2, r5
 800455a:	4603      	mov	r3, r0
 800455c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff ffa9 	bl	80044b8 <UART_WaitOnFlagUntilTimeout>
 8004566:	b180      	cbz	r0, 800458a <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 8004568:	2003      	movs	r0, #3
}
 800456a:	b002      	add	sp, #8
 800456c:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800456e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004572:	9200      	str	r2, [sp, #0]
 8004574:	4633      	mov	r3, r6
 8004576:	2200      	movs	r2, #0
 8004578:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800457c:	4620      	mov	r0, r4
 800457e:	f7ff ff9b 	bl	80044b8 <UART_WaitOnFlagUntilTimeout>
 8004582:	2800      	cmp	r0, #0
 8004584:	d0db      	beq.n	800453e <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 8004586:	2003      	movs	r0, #3
 8004588:	e7ef      	b.n	800456a <UART_CheckIdleState+0x4a>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	e7d4      	b.n	8004538 <UART_CheckIdleState+0x18>
 800458e:	bf00      	nop

08004590 <HAL_UART_Init>:
  if(huart == NULL)
 8004590:	b390      	cbz	r0, 80045f8 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004592:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8004596:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8004598:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800459c:	4604      	mov	r4, r0
 800459e:	b303      	cbz	r3, 80045e2 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80045a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80045a2:	2324      	movs	r3, #36	; 0x24
 80045a4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80045a8:	6813      	ldr	r3, [r2, #0]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7ff fe53 	bl	800425c <UART_SetConfig>
 80045b6:	2801      	cmp	r0, #1
 80045b8:	d018      	beq.n	80045ec <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045bc:	b9c3      	cbnz	r3, 80045f0 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80045d6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80045de:	f7ff bf9f 	b.w	8004520 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 80045e2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80045e6:	f002 f821 	bl	800662c <HAL_UART_MspInit>
 80045ea:	e7d9      	b.n	80045a0 <HAL_UART_Init+0x10>
}
 80045ec:	2001      	movs	r0, #1
 80045ee:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80045f0:	4620      	mov	r0, r4
 80045f2:	f7ff ff09 	bl	8004408 <UART_AdvFeatureConfig>
 80045f6:	e7e2      	b.n	80045be <HAL_UART_Init+0x2e>
}
 80045f8:	2001      	movs	r0, #1
 80045fa:	4770      	bx	lr

080045fc <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045fc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004600:	2b21      	cmp	r3, #33	; 0x21
 8004602:	d001      	beq.n	8004608 <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8004604:	2002      	movs	r0, #2
  }
}
 8004606:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8004608:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800460c:	b29b      	uxth	r3, r3
 800460e:	b18b      	cbz	r3, 8004634 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004610:	6883      	ldr	r3, [r0, #8]
 8004612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004616:	d018      	beq.n	800464a <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8004618:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800461a:	6802      	ldr	r2, [r0, #0]
 800461c:	1c59      	adds	r1, r3, #1
 800461e:	64c1      	str	r1, [r0, #76]	; 0x4c
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004624:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004628:	3b01      	subs	r3, #1
 800462a:	b29b      	uxth	r3, r3
 800462c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8004630:	2000      	movs	r0, #0
 8004632:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004634:	6802      	ldr	r2, [r0, #0]
 8004636:	6811      	ldr	r1, [r2, #0]
 8004638:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800463c:	6011      	str	r1, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800463e:	6811      	ldr	r1, [r2, #0]
 8004640:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004644:	4618      	mov	r0, r3
 8004646:	6011      	str	r1, [r2, #0]
 8004648:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464a:	6903      	ldr	r3, [r0, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e3      	bne.n	8004618 <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004650:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004652:	6801      	ldr	r1, [r0, #0]
 8004654:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800465c:	850a      	strh	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800465e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004660:	e7e0      	b.n	8004624 <UART_Transmit_IT+0x28>
 8004662:	bf00      	nop

08004664 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004664:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004666:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800466a:	2b22      	cmp	r3, #34	; 0x22
 800466c:	d006      	beq.n	800467c <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800466e:	6802      	ldr	r2, [r0, #0]
 8004670:	6993      	ldr	r3, [r2, #24]
 8004672:	f043 0308 	orr.w	r3, r3, #8
 8004676:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8004678:	2002      	movs	r0, #2
 800467a:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800467c:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467e:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004680:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 8004682:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004686:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800468a:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	d01d      	beq.n	80046ca <UART_Receive_IT+0x66>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800468e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004690:	400b      	ands	r3, r1
 8004692:	1c51      	adds	r1, r2, #1
 8004694:	6541      	str	r1, [r0, #84]	; 0x54
 8004696:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8004698:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 800469c:	3c01      	subs	r4, #1
 800469e:	b2a4      	uxth	r4, r4
 80046a0:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80046a4:	b10c      	cbz	r4, 80046aa <UART_Receive_IT+0x46>
    return HAL_OK;
 80046a6:	2000      	movs	r0, #0
  }
}
 80046a8:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046aa:	6803      	ldr	r3, [r0, #0]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80046b2:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	6899      	ldr	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80046b6:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b8:	f021 0101 	bic.w	r1, r1, #1
 80046bc:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80046be:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80046c2:	f000 fc27 	bl	8004f14 <HAL_UART_RxCpltCallback>
 80046c6:	4620      	mov	r0, r4
 80046c8:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ca:	6902      	ldr	r2, [r0, #16]
 80046cc:	2a00      	cmp	r2, #0
 80046ce:	d1de      	bne.n	800468e <UART_Receive_IT+0x2a>
      *tmp = (uint16_t)(uhdata & uhMask);
 80046d0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80046d2:	400b      	ands	r3, r1
 80046d4:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 80046d8:	6542      	str	r2, [r0, #84]	; 0x54
 80046da:	e7dd      	b.n	8004698 <UART_Receive_IT+0x34>

080046dc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046dc:	6803      	ldr	r3, [r0, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046e0:	6819      	ldr	r1, [r3, #0]
{
 80046e2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80046e4:	0715      	lsls	r5, r2, #28
{
 80046e6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80046e8:	d110      	bne.n	800470c <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ea:	0696      	lsls	r6, r2, #26
 80046ec:	d45b      	bmi.n	80047a6 <HAL_UART_IRQHandler+0xca>
  cr3its = READ_REG(huart->Instance->CR3);
 80046ee:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80046f0:	02d5      	lsls	r5, r2, #11
 80046f2:	d501      	bpl.n	80046f8 <HAL_UART_IRQHandler+0x1c>
 80046f4:	0240      	lsls	r0, r0, #9
 80046f6:	d47f      	bmi.n	80047f8 <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046f8:	0616      	lsls	r6, r2, #24
 80046fa:	d502      	bpl.n	8004702 <HAL_UART_IRQHandler+0x26>
 80046fc:	060d      	lsls	r5, r1, #24
 80046fe:	f100 808c 	bmi.w	800481a <HAL_UART_IRQHandler+0x13e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004702:	0650      	lsls	r0, r2, #25
 8004704:	d501      	bpl.n	800470a <HAL_UART_IRQHandler+0x2e>
 8004706:	064a      	lsls	r2, r1, #25
 8004708:	d464      	bmi.n	80047d4 <HAL_UART_IRQHandler+0xf8>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 800470c:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800470e:	f010 0501 	ands.w	r5, r0, #1
 8004712:	d04e      	beq.n	80047b2 <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004714:	07d6      	lsls	r6, r2, #31
 8004716:	d507      	bpl.n	8004728 <HAL_UART_IRQHandler+0x4c>
 8004718:	05c8      	lsls	r0, r1, #23
 800471a:	d505      	bpl.n	8004728 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800471c:	2001      	movs	r0, #1
 800471e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004720:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004722:	f040 0001 	orr.w	r0, r0, #1
 8004726:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004728:	0796      	lsls	r6, r2, #30
 800472a:	d548      	bpl.n	80047be <HAL_UART_IRQHandler+0xe2>
 800472c:	b13d      	cbz	r5, 800473e <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800472e:	2002      	movs	r0, #2
 8004730:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004732:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004734:	f040 0004 	orr.w	r0, r0, #4
 8004738:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800473a:	0750      	lsls	r0, r2, #29
 800473c:	d443      	bmi.n	80047c6 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800473e:	0710      	lsls	r0, r2, #28
 8004740:	d503      	bpl.n	800474a <HAL_UART_IRQHandler+0x6e>
 8004742:	068e      	lsls	r6, r1, #26
 8004744:	d451      	bmi.n	80047ea <HAL_UART_IRQHandler+0x10e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004746:	2d00      	cmp	r5, #0
 8004748:	d14f      	bne.n	80047ea <HAL_UART_IRQHandler+0x10e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800474a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800474c:	2800      	cmp	r0, #0
 800474e:	d0dc      	beq.n	800470a <HAL_UART_IRQHandler+0x2e>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004750:	0690      	lsls	r0, r2, #26
 8004752:	d501      	bpl.n	8004758 <HAL_UART_IRQHandler+0x7c>
 8004754:	0689      	lsls	r1, r1, #26
 8004756:	d465      	bmi.n	8004824 <HAL_UART_IRQHandler+0x148>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004758:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800475a:	0712      	lsls	r2, r2, #28
 800475c:	d403      	bmi.n	8004766 <HAL_UART_IRQHandler+0x8a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800475e:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004760:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8004764:	d063      	beq.n	800482e <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800476c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476e:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004778:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	0656      	lsls	r6, r2, #25
 8004780:	d547      	bpl.n	8004812 <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004782:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8004784:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478a:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800478c:	2800      	cmp	r0, #0
 800478e:	d040      	beq.n	8004812 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004790:	4b29      	ldr	r3, [pc, #164]	; (8004838 <HAL_UART_IRQHandler+0x15c>)
 8004792:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004794:	f7fd f888 	bl	80018a8 <HAL_DMA_Abort_IT>
 8004798:	2800      	cmp	r0, #0
 800479a:	d0b6      	beq.n	800470a <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479c:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 800479e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047a4:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a6:	068d      	lsls	r5, r1, #26
 80047a8:	d5a1      	bpl.n	80046ee <HAL_UART_IRQHandler+0x12>
}
 80047aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80047ae:	f7ff bf59 	b.w	8004664 <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80047b2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80047b6:	d09b      	beq.n	80046f0 <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047b8:	07d6      	lsls	r6, r2, #31
 80047ba:	d5b5      	bpl.n	8004728 <HAL_UART_IRQHandler+0x4c>
 80047bc:	e7ac      	b.n	8004718 <HAL_UART_IRQHandler+0x3c>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047be:	0756      	lsls	r6, r2, #29
 80047c0:	d5bd      	bpl.n	800473e <HAL_UART_IRQHandler+0x62>
 80047c2:	2d00      	cmp	r5, #0
 80047c4:	d0bb      	beq.n	800473e <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80047c6:	2004      	movs	r0, #4
 80047c8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80047cc:	f040 0002 	orr.w	r0, r0, #2
 80047d0:	66e0      	str	r0, [r4, #108]	; 0x6c
 80047d2:	e7b4      	b.n	800473e <HAL_UART_IRQHandler+0x62>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047d4:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80047d6:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047dc:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80047de:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80047e0:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80047e4:	f7ff fd2a 	bl	800423c <HAL_UART_TxCpltCallback>
 80047e8:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80047ea:	2008      	movs	r0, #8
 80047ec:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80047f0:	f040 0008 	orr.w	r0, r0, #8
 80047f4:	66e0      	str	r0, [r4, #108]	; 0x6c
 80047f6:	e7a8      	b.n	800474a <HAL_UART_IRQHandler+0x6e>
    huart->gState  = HAL_UART_STATE_READY;
 80047f8:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80047fa:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80047fe:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004800:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 8004802:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8004806:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 800480a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800480e:	f000 b815 	b.w	800483c <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8004812:	4620      	mov	r0, r4
 8004814:	f7ff fd14 	bl	8004240 <HAL_UART_ErrorCallback>
 8004818:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 800481a:	4620      	mov	r0, r4
}
 800481c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8004820:	f7ff beec 	b.w	80045fc <UART_Transmit_IT>
        UART_Receive_IT(huart);
 8004824:	4620      	mov	r0, r4
 8004826:	f7ff ff1d 	bl	8004664 <UART_Receive_IT>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	e794      	b.n	8004758 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 800482e:	4620      	mov	r0, r4
 8004830:	f7ff fd06 	bl	8004240 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	66e5      	str	r5, [r4, #108]	; 0x6c
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	08004245 	.word	0x08004245

0800483c <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop

08004840 <adc_comms>:
extern ADC_HandleTypeDef hadc2;


void adc_comms(){

	adc_raw_voltage =  ADC1_buffer[0];
 8004840:	4b77      	ldr	r3, [pc, #476]	; (8004a20 <adc_comms+0x1e0>)
	raw_ambient_temp = ADC1_buffer[2];
	raw_geyser_temp = ADC1_buffer[3];


	//Converting Voltage
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 8004842:	eddf 7a78 	vldr	s15, [pc, #480]	; 8004a24 <adc_comms+0x1e4>
	adc_raw_voltage =  ADC1_buffer[0];
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4877      	ldr	r0, [pc, #476]	; (8004a28 <adc_comms+0x1e8>)
 800484a:	6813      	ldr	r3, [r2, #0]
	adc_raw_current =	ADC1_buffer[1];
 800484c:	4977      	ldr	r1, [pc, #476]	; (8004a2c <adc_comms+0x1ec>)
void adc_comms(){
 800484e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 8004852:	ee07 3a10 	vmov	s14, r3
void adc_comms(){
 8004856:	ed2d 8b02 	vpush	{d8}
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 800485a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800485e:	ed9f 8a74 	vldr	s16, [pc, #464]	; 8004a30 <adc_comms+0x1f0>
 8004862:	4f74      	ldr	r7, [pc, #464]	; (8004a34 <adc_comms+0x1f4>)
	raw_ambient_temp = ADC1_buffer[2];
 8004864:	f8df a210 	ldr.w	sl, [pc, #528]	; 8004a78 <adc_comms+0x238>
	raw_geyser_temp = ADC1_buffer[3];
 8004868:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8004a7c <adc_comms+0x23c>
	adc_raw_current =	ADC1_buffer[1];
 800486c:	6856      	ldr	r6, [r2, #4]
	raw_ambient_temp = ADC1_buffer[2];
 800486e:	6895      	ldr	r5, [r2, #8]
	raw_geyser_temp = ADC1_buffer[3];
 8004870:	68d4      	ldr	r4, [r2, #12]
	adc_raw_voltage =  ADC1_buffer[0];
 8004872:	6003      	str	r3, [r0, #0]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 8004874:	ee37 7a48 	vsub.f32	s14, s14, s16
	adc_raw_current =	ADC1_buffer[1];
 8004878:	600e      	str	r6, [r1, #0]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 800487a:	eec7 8a27 	vdiv.f32	s17, s14, s15
 800487e:	e9d7 0100 	ldrd	r0, r1, [r7]
	raw_ambient_temp = ADC1_buffer[2];
 8004882:	f8ca 5000 	str.w	r5, [sl]
	raw_geyser_temp = ADC1_buffer[3];
 8004886:	f8c9 4000 	str.w	r4, [r9]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 800488a:	f7fc fa49 	bl	8000d20 <__aeabi_ul2f>

	//Converting Current
	adc_buffer_current = ((adc_raw_current-2072.202f)/0.14603f)*((adc_raw_current-2072.202f)/0.14603f)+adc_buffer_current;
 800488e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8004a80 <adc_comms+0x240>
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 8004892:	ee07 0a90 	vmov	s15, r0
 8004896:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800489a:	ee17 0a90 	vmov	r0, s15
 800489e:	f7fc fa85 	bl	8000dac <__aeabi_f2ulz>
	adc_buffer_current = ((adc_raw_current-2072.202f)/0.14603f)*((adc_raw_current-2072.202f)/0.14603f)+adc_buffer_current;
 80048a2:	ee07 6a90 	vmov	s15, r6
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004a38 <adc_comms+0x1f8>
 80048ae:	ee77 7ac8 	vsub.f32	s15, s15, s16
	adc_buffer_voltage = ((float)(adc_raw_voltage-2072.202f)/0.008629f)*((float)(adc_raw_voltage-2072.202f)/0.008629f)+adc_buffer_voltage;
 80048b2:	e9c7 0100 	strd	r0, r1, [r7]
	adc_buffer_current = ((adc_raw_current-2072.202f)/0.14603f)*((adc_raw_current-2072.202f)/0.14603f)+adc_buffer_current;
 80048b6:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80048ba:	e9d8 0100 	ldrd	r0, r1, [r8]
 80048be:	f7fc fa2f 	bl	8000d20 <__aeabi_ul2f>
 80048c2:	ee07 0a90 	vmov	s15, r0
 80048c6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80048ca:	ee17 0a90 	vmov	r0, s15
 80048ce:	f7fc fa6d 	bl	8000dac <__aeabi_f2ulz>

	//Converting Ambient temperature
	if( (raw_ambient_temp-615.f)/12.3f < 100){
 80048d2:	ee07 5a90 	vmov	s15, r5
 80048d6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004a3c <adc_comms+0x1fc>
 80048da:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8004a40 <adc_comms+0x200>
 80048de:	eddf 6a59 	vldr	s13, [pc, #356]	; 8004a44 <adc_comms+0x204>
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	adc_buffer_current = ((adc_raw_current-2072.202f)/0.14603f)*((adc_raw_current-2072.202f)/0.14603f)+adc_buffer_current;
 80048e6:	e9c8 0100 	strd	r0, r1, [r8]
	if( (raw_ambient_temp-615.f)/12.3f < 100){
 80048ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048ee:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80048f2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	d41d      	bmi.n	8004938 <adc_comms+0xf8>
		raw_ambient_temp = (raw_ambient_temp-615.0f)/12.3f;
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-615.f)/12.3f < 100){
 80048fc:	ee07 4a90 	vmov	s15, r4
 8004900:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004a3c <adc_comms+0x1fc>
 8004904:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8004a40 <adc_comms+0x200>
 8004908:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004a44 <adc_comms+0x204>
 800490c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004914:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8004918:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004920:	d418      	bmi.n	8004954 <adc_comms+0x114>
		geyser_temp_int = raw_geyser_temp;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
		sprintf(segment_val, "%lu", raw_geyser_temp);
	}

	adc_counter += 1;
 8004922:	4c49      	ldr	r4, [pc, #292]	; (8004a48 <adc_comms+0x208>)
 8004924:	8823      	ldrh	r3, [r4, #0]
 8004926:	3301      	adds	r3, #1
 8004928:	b29b      	uxth	r3, r3
	if(adc_counter == 50){
 800492a:	2b32      	cmp	r3, #50	; 0x32
	adc_counter += 1;
 800492c:	8023      	strh	r3, [r4, #0]
	if(adc_counter == 50){
 800492e:	d028      	beq.n	8004982 <adc_comms+0x142>

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}

}
 8004930:	ecbd 8b02 	vpop	{d8}
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		raw_ambient_temp = (raw_ambient_temp-615.0f)/12.3f;
 8004938:	eefc 7ac7 	vcvt.u32.f32	s15, s14
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 800493c:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <adc_comms+0x20c>)
 800493e:	4944      	ldr	r1, [pc, #272]	; (8004a50 <adc_comms+0x210>)
 8004940:	6818      	ldr	r0, [r3, #0]
		raw_ambient_temp = (raw_ambient_temp-615.0f)/12.3f;
 8004942:	edca 7a00 	vstr	s15, [sl]
 8004946:	ee17 2a90 	vmov	r2, s15
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 800494a:	f002 fd81 	bl	8007450 <siprintf>
 800494e:	f8d9 4000 	ldr.w	r4, [r9]
 8004952:	e7d3      	b.n	80048fc <adc_comms+0xbc>
		raw_geyser_temp = (raw_geyser_temp-615.f)/12.3f;
 8004954:	eefc 7ac7 	vcvt.u32.f32	s15, s14
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004958:	4a3e      	ldr	r2, [pc, #248]	; (8004a54 <adc_comms+0x214>)
		geyser_temp_int = raw_geyser_temp;
 800495a:	4c3f      	ldr	r4, [pc, #252]	; (8004a58 <adc_comms+0x218>)
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 800495c:	6810      	ldr	r0, [r2, #0]
 800495e:	493f      	ldr	r1, [pc, #252]	; (8004a5c <adc_comms+0x21c>)
		raw_geyser_temp = (raw_geyser_temp-615.f)/12.3f;
 8004960:	edc9 7a00 	vstr	s15, [r9]
 8004964:	ee17 3a90 	vmov	r3, s15
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004968:	ee17 2a90 	vmov	r2, s15
		geyser_temp_int = raw_geyser_temp;
 800496c:	7023      	strb	r3, [r4, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 800496e:	f002 fd6f 	bl	8007450 <siprintf>
		sprintf(segment_val, "%lu", raw_geyser_temp);
 8004972:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <adc_comms+0x220>)
 8004974:	f8d9 2000 	ldr.w	r2, [r9]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	4938      	ldr	r1, [pc, #224]	; (8004a5c <adc_comms+0x21c>)
 800497c:	f002 fd68 	bl	8007450 <siprintf>
 8004980:	e7cf      	b.n	8004922 <adc_comms+0xe2>
		*voltage_int_rms = sqrt(adc_buffer_voltage/50.f);
 8004982:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004986:	f7fc f9cb 	bl	8000d20 <__aeabi_ul2f>
 800498a:	ed9f 8a36 	vldr	s16, [pc, #216]	; 8004a64 <adc_comms+0x224>
 800498e:	4e36      	ldr	r6, [pc, #216]	; (8004a68 <adc_comms+0x228>)
		*current_int_rms = sqrt(adc_buffer_current/50.f);
 8004990:	4d36      	ldr	r5, [pc, #216]	; (8004a6c <adc_comms+0x22c>)
		*voltage_int_rms = sqrt(adc_buffer_voltage/50.f);
 8004992:	f8d6 9000 	ldr.w	r9, [r6]
 8004996:	ee07 0a10 	vmov	s14, r0
 800499a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800499e:	ee17 0a90 	vmov	r0, s15
 80049a2:	f7fb fdd1 	bl	8000548 <__aeabi_f2d>
 80049a6:	ec41 0b10 	vmov	d0, r0, r1
 80049aa:	f003 f9f1 	bl	8007d90 <sqrt>
 80049ae:	ec51 0b10 	vmov	r0, r1, d0
 80049b2:	f7fc f8cd 	bl	8000b50 <__aeabi_d2uiz>
 80049b6:	f8c9 0000 	str.w	r0, [r9]
		*current_int_rms = sqrt(adc_buffer_current/50.f);
 80049ba:	e9d8 0100 	ldrd	r0, r1, [r8]
 80049be:	f7fc f9af 	bl	8000d20 <__aeabi_ul2f>
 80049c2:	ee07 0a10 	vmov	s14, r0
 80049c6:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80049ca:	ee17 0a90 	vmov	r0, s15
 80049ce:	f7fb fdbb 	bl	8000548 <__aeabi_f2d>
 80049d2:	ec41 0b10 	vmov	d0, r0, r1
 80049d6:	f8d5 9000 	ldr.w	r9, [r5]
 80049da:	f003 f9d9 	bl	8007d90 <sqrt>
 80049de:	ec51 0b10 	vmov	r0, r1, d0
 80049e2:	f7fc f8b5 	bl	8000b50 <__aeabi_d2uiz>
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 80049e6:	6832      	ldr	r2, [r6, #0]
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <adc_comms+0x230>)
		*current_int_rms = sqrt(adc_buffer_current/50.f);
 80049ea:	f8c9 0000 	str.w	r0, [r9]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	491a      	ldr	r1, [pc, #104]	; (8004a5c <adc_comms+0x21c>)
 80049f4:	f002 fd2c 	bl	8007450 <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 80049f8:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <adc_comms+0x234>)
 80049fa:	682a      	ldr	r2, [r5, #0]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	4916      	ldr	r1, [pc, #88]	; (8004a5c <adc_comms+0x21c>)
 8004a02:	f002 fd25 	bl	8007450 <siprintf>
}
 8004a06:	ecbd 8b02 	vpop	{d8}
		adc_buffer_voltage = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	e9c7 2300 	strd	r2, r3, [r7]
		adc_buffer_current = 0;
 8004a12:	e9c8 2300 	strd	r2, r3, [r8]
		adc_counter = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	8023      	strh	r3, [r4, #0]
}
 8004a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1e:	bf00      	nop
 8004a20:	2000024c 	.word	0x2000024c
 8004a24:	3c0d60a6 	.word	0x3c0d60a6
 8004a28:	20000270 	.word	0x20000270
 8004a2c:	2000026c 	.word	0x2000026c
 8004a30:	4501833b 	.word	0x4501833b
 8004a34:	20000260 	.word	0x20000260
 8004a38:	3e1588e3 	.word	0x3e1588e3
 8004a3c:	4419c000 	.word	0x4419c000
 8004a40:	4144cccd 	.word	0x4144cccd
 8004a44:	42c80000 	.word	0x42c80000
 8004a48:	20000268 	.word	0x20000268
 8004a4c:	20000274 	.word	0x20000274
 8004a50:	0800800c 	.word	0x0800800c
 8004a54:	2000029c 	.word	0x2000029c
 8004a58:	200002a0 	.word	0x200002a0
 8004a5c:	08008010 	.word	0x08008010
 8004a60:	200002dc 	.word	0x200002dc
 8004a64:	42480000 	.word	0x42480000
 8004a68:	20000310 	.word	0x20000310
 8004a6c:	2000027c 	.word	0x2000027c
 8004a70:	20000314 	.word	0x20000314
 8004a74:	20000280 	.word	0x20000280
 8004a78:	200002cc 	.word	0x200002cc
 8004a7c:	200002d0 	.word	0x200002d0
 8004a80:	20000258 	.word	0x20000258

08004a84 <write2Flash>:
extern RTC_HandleTypeDef hrtc;




void write2Flash(){
 8004a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if(log_counter <= 100){
 8004a88:	4d07      	ldr	r5, [pc, #28]	; (8004aa8 <write2Flash+0x24>)
 8004a8a:	782b      	ldrb	r3, [r5, #0]
 8004a8c:	2b64      	cmp	r3, #100	; 0x64
 8004a8e:	d90f      	bls.n	8004ab0 <write2Flash+0x2c>
 8004a90:	4c06      	ldr	r4, [pc, #24]	; (8004aac <write2Flash+0x28>)
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 8004a92:	6820      	ldr	r0, [r4, #0]
 8004a94:	2232      	movs	r2, #50	; 0x32
 8004a96:	2100      	movs	r1, #0
 8004a98:	f002 fc15 	bl	80072c6 <memset>


			log_counter += 1;
 8004a9c:	782b      	ldrb	r3, [r5, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	702b      	strb	r3, [r5, #0]
 8004aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200002bc 	.word	0x200002bc
 8004aac:	20000298 	.word	0x20000298
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004ab0:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8004e24 <write2Flash+0x3a0>
		log_empty = 0;
 8004ab4:	4bc4      	ldr	r3, [pc, #784]	; (8004dc8 <write2Flash+0x344>)
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004ab6:	f8d8 1000 	ldr.w	r1, [r8]
 8004aba:	48c4      	ldr	r0, [pc, #784]	; (8004dcc <write2Flash+0x348>)
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 8004abc:	4cc4      	ldr	r4, [pc, #784]	; (8004dd0 <write2Flash+0x34c>)
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004abe:	4ec5      	ldr	r6, [pc, #788]	; (8004dd4 <write2Flash+0x350>)
		itoa((time->Hours),temp_time_var,10  );
 8004ac0:	4fc5      	ldr	r7, [pc, #788]	; (8004dd8 <write2Flash+0x354>)
		log_empty = 0;
 8004ac2:	f04f 0900 	mov.w	r9, #0
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004ac6:	464a      	mov	r2, r9
		log_empty = 0;
 8004ac8:	f883 9000 	strb.w	r9, [r3]
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004acc:	f7fe fe54 	bl	8003778 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8004ad0:	4bc2      	ldr	r3, [pc, #776]	; (8004ddc <write2Flash+0x358>)
 8004ad2:	48be      	ldr	r0, [pc, #760]	; (8004dcc <write2Flash+0x348>)
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	464a      	mov	r2, r9
 8004ad8:	f7fe fe84 	bl	80037e4 <HAL_RTC_GetDate>
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 8004adc:	f8d4 9000 	ldr.w	r9, [r4]
 8004ae0:	4648      	mov	r0, r9
 8004ae2:	f7fb fb75 	bl	80001d0 <strlen>
 8004ae6:	4682      	mov	sl, r0
 8004ae8:	48bd      	ldr	r0, [pc, #756]	; (8004de0 <write2Flash+0x35c>)
 8004aea:	f7fb fb71 	bl	80001d0 <strlen>
 8004aee:	49bc      	ldr	r1, [pc, #752]	; (8004de0 <write2Flash+0x35c>)
 8004af0:	4602      	mov	r2, r0
 8004af2:	eb09 000a 	add.w	r0, r9, sl
 8004af6:	f002 fbdb 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004afa:	f8d4 9000 	ldr.w	r9, [r4]
 8004afe:	4648      	mov	r0, r9
 8004b00:	f7fb fb66 	bl	80001d0 <strlen>
 8004b04:	7833      	ldrb	r3, [r6, #0]
 8004b06:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Hours),temp_time_var,10  );
 8004b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	7818      	ldrb	r0, [r3, #0]
 8004b12:	220a      	movs	r2, #10
 8004b14:	f002 fbc2 	bl	800729c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8004b18:	f8d4 9000 	ldr.w	r9, [r4]
 8004b1c:	4648      	mov	r0, r9
 8004b1e:	f7fb fb57 	bl	80001d0 <strlen>
 8004b22:	f8d7 a000 	ldr.w	sl, [r7]
 8004b26:	4683      	mov	fp, r0
 8004b28:	4650      	mov	r0, sl
 8004b2a:	f7fb fb51 	bl	80001d0 <strlen>
 8004b2e:	4651      	mov	r1, sl
 8004b30:	4602      	mov	r2, r0
 8004b32:	eb09 000b 	add.w	r0, r9, fp
 8004b36:	f002 fbbb 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004b3a:	f8d4 9000 	ldr.w	r9, [r4]
 8004b3e:	4648      	mov	r0, r9
 8004b40:	f7fb fb46 	bl	80001d0 <strlen>
 8004b44:	7833      	ldrb	r3, [r6, #0]
 8004b46:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Minutes),temp_time_var,10  );
 8004b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b4e:	6839      	ldr	r1, [r7, #0]
 8004b50:	7858      	ldrb	r0, [r3, #1]
 8004b52:	220a      	movs	r2, #10
 8004b54:	f002 fba2 	bl	800729c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8004b58:	f8d4 9000 	ldr.w	r9, [r4]
 8004b5c:	4648      	mov	r0, r9
 8004b5e:	f7fb fb37 	bl	80001d0 <strlen>
 8004b62:	f8d7 a000 	ldr.w	sl, [r7]
 8004b66:	4683      	mov	fp, r0
 8004b68:	4650      	mov	r0, sl
 8004b6a:	f7fb fb31 	bl	80001d0 <strlen>
 8004b6e:	4651      	mov	r1, sl
 8004b70:	4602      	mov	r2, r0
 8004b72:	eb09 000b 	add.w	r0, r9, fp
 8004b76:	f002 fb9b 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004b7a:	f8d4 9000 	ldr.w	r9, [r4]
 8004b7e:	4648      	mov	r0, r9
 8004b80:	f7fb fb26 	bl	80001d0 <strlen>
 8004b84:	7833      	ldrb	r3, [r6, #0]
 8004b86:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Seconds),temp_time_var,10  );
 8004b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8e:	6839      	ldr	r1, [r7, #0]
 8004b90:	7898      	ldrb	r0, [r3, #2]
 8004b92:	220a      	movs	r2, #10
 8004b94:	f002 fb82 	bl	800729c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8004b98:	f8d4 8000 	ldr.w	r8, [r4]
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	f7fb fb17 	bl	80001d0 <strlen>
 8004ba2:	683f      	ldr	r7, [r7, #0]
 8004ba4:	4681      	mov	r9, r0
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f7fb fb12 	bl	80001d0 <strlen>
 8004bac:	4639      	mov	r1, r7
 8004bae:	4602      	mov	r2, r0
 8004bb0:	eb08 0009 	add.w	r0, r8, r9
 8004bb4:	f002 fb7c 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004bb8:	6827      	ldr	r7, [r4, #0]
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f7fb fb08 	bl	80001d0 <strlen>
 8004bc0:	7833      	ldrb	r3, [r6, #0]
 8004bc2:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 8004bc4:	6827      	ldr	r7, [r4, #0]
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f7fb fb02 	bl	80001d0 <strlen>
 8004bcc:	4b85      	ldr	r3, [pc, #532]	; (8004de4 <write2Flash+0x360>)
 8004bce:	f8d3 8000 	ldr.w	r8, [r3]
 8004bd2:	4681      	mov	r9, r0
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	f7fb fafb 	bl	80001d0 <strlen>
 8004bda:	4641      	mov	r1, r8
 8004bdc:	4602      	mov	r2, r0
 8004bde:	eb07 0009 	add.w	r0, r7, r9
 8004be2:	f002 fb65 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004be6:	6827      	ldr	r7, [r4, #0]
 8004be8:	4638      	mov	r0, r7
 8004bea:	f7fb faf1 	bl	80001d0 <strlen>
 8004bee:	7833      	ldrb	r3, [r6, #0]
 8004bf0:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 8004bf2:	6827      	ldr	r7, [r4, #0]
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f7fb faeb 	bl	80001d0 <strlen>
 8004bfa:	4b7b      	ldr	r3, [pc, #492]	; (8004de8 <write2Flash+0x364>)
 8004bfc:	f8d3 8000 	ldr.w	r8, [r3]
 8004c00:	4681      	mov	r9, r0
 8004c02:	4640      	mov	r0, r8
 8004c04:	f7fb fae4 	bl	80001d0 <strlen>
 8004c08:	4641      	mov	r1, r8
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	eb07 0009 	add.w	r0, r7, r9
 8004c10:	f002 fb4e 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004c14:	6827      	ldr	r7, [r4, #0]
 8004c16:	4638      	mov	r0, r7
 8004c18:	f7fb fada 	bl	80001d0 <strlen>
 8004c1c:	7833      	ldrb	r3, [r6, #0]
 8004c1e:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 8004c20:	6827      	ldr	r7, [r4, #0]
 8004c22:	4638      	mov	r0, r7
 8004c24:	f7fb fad4 	bl	80001d0 <strlen>
 8004c28:	4b70      	ldr	r3, [pc, #448]	; (8004dec <write2Flash+0x368>)
 8004c2a:	f8d3 8000 	ldr.w	r8, [r3]
 8004c2e:	4681      	mov	r9, r0
 8004c30:	4640      	mov	r0, r8
 8004c32:	f7fb facd 	bl	80001d0 <strlen>
 8004c36:	4641      	mov	r1, r8
 8004c38:	4602      	mov	r2, r0
 8004c3a:	eb07 0009 	add.w	r0, r7, r9
 8004c3e:	f002 fb37 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004c42:	6827      	ldr	r7, [r4, #0]
 8004c44:	4638      	mov	r0, r7
 8004c46:	f7fb fac3 	bl	80001d0 <strlen>
 8004c4a:	7833      	ldrb	r3, [r6, #0]
 8004c4c:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8004c4e:	6827      	ldr	r7, [r4, #0]
 8004c50:	4638      	mov	r0, r7
 8004c52:	f7fb fabd 	bl	80001d0 <strlen>
 8004c56:	4b66      	ldr	r3, [pc, #408]	; (8004df0 <write2Flash+0x36c>)
 8004c58:	f8d3 8000 	ldr.w	r8, [r3]
 8004c5c:	4681      	mov	r9, r0
 8004c5e:	4640      	mov	r0, r8
 8004c60:	f7fb fab6 	bl	80001d0 <strlen>
 8004c64:	4641      	mov	r1, r8
 8004c66:	4602      	mov	r2, r0
 8004c68:	eb07 0009 	add.w	r0, r7, r9
 8004c6c:	f002 fb20 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004c70:	6827      	ldr	r7, [r4, #0]
 8004c72:	4638      	mov	r0, r7
 8004c74:	f7fb faac 	bl	80001d0 <strlen>
 8004c78:	7833      	ldrb	r3, [r6, #0]
 8004c7a:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8004c7c:	6827      	ldr	r7, [r4, #0]
 8004c7e:	4638      	mov	r0, r7
 8004c80:	f7fb faa6 	bl	80001d0 <strlen>
 8004c84:	4b5b      	ldr	r3, [pc, #364]	; (8004df4 <write2Flash+0x370>)
 8004c86:	f8d3 8000 	ldr.w	r8, [r3]
 8004c8a:	4681      	mov	r9, r0
 8004c8c:	4640      	mov	r0, r8
 8004c8e:	f7fb fa9f 	bl	80001d0 <strlen>
 8004c92:	4641      	mov	r1, r8
 8004c94:	4602      	mov	r2, r0
 8004c96:	eb07 0009 	add.w	r0, r7, r9
 8004c9a:	f002 fb09 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004c9e:	6827      	ldr	r7, [r4, #0]
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f7fb fa95 	bl	80001d0 <strlen>
 8004ca6:	7833      	ldrb	r3, [r6, #0]
 8004ca8:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 8004caa:	6827      	ldr	r7, [r4, #0]
 8004cac:	4638      	mov	r0, r7
 8004cae:	f7fb fa8f 	bl	80001d0 <strlen>
 8004cb2:	4b51      	ldr	r3, [pc, #324]	; (8004df8 <write2Flash+0x374>)
 8004cb4:	f8d3 8000 	ldr.w	r8, [r3]
 8004cb8:	4681      	mov	r9, r0
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f7fb fa88 	bl	80001d0 <strlen>
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	eb07 0009 	add.w	r0, r7, r9
 8004cc8:	f002 faf2 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004ccc:	6827      	ldr	r7, [r4, #0]
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f7fb fa7e 	bl	80001d0 <strlen>
 8004cd4:	7833      	ldrb	r3, [r6, #0]
 8004cd6:	543b      	strb	r3, [r7, r0]
		if(valve_state == valve_OPEN){
 8004cd8:	4a48      	ldr	r2, [pc, #288]	; (8004dfc <write2Flash+0x378>)
 8004cda:	4b49      	ldr	r3, [pc, #292]	; (8004e00 <write2Flash+0x37c>)
 8004cdc:	6816      	ldr	r6, [r2, #0]
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 8004cde:	6827      	ldr	r7, [r4, #0]
		if(valve_state == valve_OPEN){
 8004ce0:	429e      	cmp	r6, r3
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 8004ce2:	4638      	mov	r0, r7
		if(valve_state == valve_OPEN){
 8004ce4:	f000 80dd 	beq.w	8004ea2 <write2Flash+0x41e>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 8004ce8:	f7fb fa72 	bl	80001d0 <strlen>
 8004cec:	4680      	mov	r8, r0
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f7fb fa6e 	bl	80001d0 <strlen>
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	eb07 0008 	add.w	r0, r7, r8
 8004cfc:	f002 fad8 	bl	80072b0 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 8004d00:	6826      	ldr	r6, [r4, #0]
 8004d02:	4630      	mov	r0, r6
 8004d04:	f7fb fa64 	bl	80001d0 <strlen>
 8004d08:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <write2Flash+0x380>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	5233      	strh	r3, [r6, r0]
		if(log_counter == 0){
 8004d0e:	782b      	ldrb	r3, [r5, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8089 	beq.w	8004e28 <write2Flash+0x3a4>
			HAL_FLASH_Unlock();
 8004d16:	f7fc fe55 	bl	80019c4 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008800+64*log_counter, *((uint64_t*)(flash_stored)) );
 8004d1a:	7829      	ldrb	r1, [r5, #0]
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	f101 1120 	add.w	r1, r1, #2097184	; 0x200020
 8004d22:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	0189      	lsls	r1, r1, #6
 8004d2c:	2003      	movs	r0, #3
 8004d2e:	f7fc fe8d 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008808+64*log_counter, *((uint64_t*)(flash_stored)+1) );
 8004d32:	7828      	ldrb	r0, [r5, #0]
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	4934      	ldr	r1, [pc, #208]	; (8004e08 <write2Flash+0x384>)
 8004d38:	2640      	movs	r6, #64	; 0x40
 8004d3a:	fb06 1100 	mla	r1, r6, r0, r1
 8004d3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d42:	2003      	movs	r0, #3
 8004d44:	f7fc fe82 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008810+64*log_counter, *((uint64_t*)(flash_stored)+2) );
 8004d48:	7829      	ldrb	r1, [r5, #0]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	4a2f      	ldr	r2, [pc, #188]	; (8004e0c <write2Flash+0x388>)
 8004d4e:	2003      	movs	r0, #3
 8004d50:	fb06 2101 	mla	r1, r6, r1, r2
 8004d54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d58:	f7fc fe78 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008818+64*log_counter, *((uint64_t*)(flash_stored)+3) );
 8004d5c:	7829      	ldrb	r1, [r5, #0]
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	4a2b      	ldr	r2, [pc, #172]	; (8004e10 <write2Flash+0x38c>)
 8004d62:	2003      	movs	r0, #3
 8004d64:	fb06 2101 	mla	r1, r6, r1, r2
 8004d68:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004d6c:	f7fc fe6e 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008820+64*log_counter, *((uint64_t*)(flash_stored)+4) );
 8004d70:	7829      	ldrb	r1, [r5, #0]
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <write2Flash+0x390>)
 8004d76:	2003      	movs	r0, #3
 8004d78:	fb06 2101 	mla	r1, r6, r1, r2
 8004d7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d80:	f7fc fe64 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008828+64*log_counter, *((uint64_t*)(flash_stored)+5) );
 8004d84:	7829      	ldrb	r1, [r5, #0]
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <write2Flash+0x394>)
 8004d8a:	2003      	movs	r0, #3
 8004d8c:	fb06 2101 	mla	r1, r6, r1, r2
 8004d90:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004d94:	f7fc fe5a 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008830+64*log_counter, *((uint64_t*)(flash_stored)+6) );
 8004d98:	7829      	ldrb	r1, [r5, #0]
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <write2Flash+0x398>)
 8004d9e:	2003      	movs	r0, #3
 8004da0:	fb06 2101 	mla	r1, r6, r1, r2
 8004da4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004da8:	f7fc fe50 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008838+64*log_counter, *((uint64_t*)(flash_stored)+7) );
 8004dac:	7829      	ldrb	r1, [r5, #0]
 8004dae:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <write2Flash+0x39c>)
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	fb06 2101 	mla	r1, r6, r1, r2
 8004db6:	2003      	movs	r0, #3
 8004db8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004dbc:	f7fc fe46 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8004dc0:	f7fc fe12 	bl	80019e8 <HAL_FLASH_Lock>
 8004dc4:	e665      	b.n	8004a92 <write2Flash+0xe>
 8004dc6:	bf00      	nop
 8004dc8:	2000001a 	.word	0x2000001a
 8004dcc:	200004a8 	.word	0x200004a8
 8004dd0:	20000298 	.word	0x20000298
 8004dd4:	20000004 	.word	0x20000004
 8004dd8:	200002e8 	.word	0x200002e8
 8004ddc:	20000284 	.word	0x20000284
 8004de0:	2000001c 	.word	0x2000001c
 8004de4:	20000280 	.word	0x20000280
 8004de8:	20000314 	.word	0x20000314
 8004dec:	20000274 	.word	0x20000274
 8004df0:	2000029c 	.word	0x2000029c
 8004df4:	200002f8 	.word	0x200002f8
 8004df8:	200002b0 	.word	0x200002b0
 8004dfc:	2000030c 	.word	0x2000030c
 8004e00:	20000054 	.word	0x20000054
 8004e04:	20000008 	.word	0x20000008
 8004e08:	08008808 	.word	0x08008808
 8004e0c:	08008810 	.word	0x08008810
 8004e10:	08008818 	.word	0x08008818
 8004e14:	08008820 	.word	0x08008820
 8004e18:	08008828 	.word	0x08008828
 8004e1c:	08008830 	.word	0x08008830
 8004e20:	08008838 	.word	0x08008838
 8004e24:	200002f4 	.word	0x200002f4
			HAL_FLASH_Unlock();
 8004e28:	f7fc fdcc 	bl	80019c4 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008800, *((uint64_t*)(flash_stored)) );
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	4923      	ldr	r1, [pc, #140]	; (8004ebc <write2Flash+0x438>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	2003      	movs	r0, #3
 8004e36:	f7fc fe09 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008808, *((uint64_t*)(flash_stored)+1) );
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	4920      	ldr	r1, [pc, #128]	; (8004ec0 <write2Flash+0x43c>)
 8004e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e42:	2003      	movs	r0, #3
 8004e44:	f7fc fe02 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008810, *((uint64_t*)(flash_stored)+2) );
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	491e      	ldr	r1, [pc, #120]	; (8004ec4 <write2Flash+0x440>)
 8004e4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e50:	2003      	movs	r0, #3
 8004e52:	f7fc fdfb 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008818, *((uint64_t*)(flash_stored)+3) );
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	491b      	ldr	r1, [pc, #108]	; (8004ec8 <write2Flash+0x444>)
 8004e5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004e5e:	2003      	movs	r0, #3
 8004e60:	f7fc fdf4 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008820, *((uint64_t*)(flash_stored)+4) );
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	4919      	ldr	r1, [pc, #100]	; (8004ecc <write2Flash+0x448>)
 8004e68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e6c:	2003      	movs	r0, #3
 8004e6e:	f7fc fded 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008828, *((uint64_t*)(flash_stored)+5) );
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	4916      	ldr	r1, [pc, #88]	; (8004ed0 <write2Flash+0x44c>)
 8004e76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004e7a:	2003      	movs	r0, #3
 8004e7c:	f7fc fde6 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008830, *((uint64_t*)(flash_stored)+6) );
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	4914      	ldr	r1, [pc, #80]	; (8004ed4 <write2Flash+0x450>)
 8004e84:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004e88:	2003      	movs	r0, #3
 8004e8a:	f7fc fddf 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008838, *((uint64_t*)(flash_stored)+7) );
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	4911      	ldr	r1, [pc, #68]	; (8004ed8 <write2Flash+0x454>)
 8004e92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004e96:	2003      	movs	r0, #3
 8004e98:	f7fc fdd8 	bl	8001a4c <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8004e9c:	f7fc fda4 	bl	80019e8 <HAL_FLASH_Lock>
 8004ea0:	e5f7      	b.n	8004a92 <write2Flash+0xe>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 8004ea2:	f7fb f995 	bl	80001d0 <strlen>
 8004ea6:	4680      	mov	r8, r0
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7fb f991 	bl	80001d0 <strlen>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	1e42      	subs	r2, r0, #1
 8004eb2:	eb07 0008 	add.w	r0, r7, r8
 8004eb6:	f002 f9fb 	bl	80072b0 <memcpy>
 8004eba:	e721      	b.n	8004d00 <write2Flash+0x27c>
 8004ebc:	08008800 	.word	0x08008800
 8004ec0:	08008808 	.word	0x08008808
 8004ec4:	08008810 	.word	0x08008810
 8004ec8:	08008818 	.word	0x08008818
 8004ecc:	08008820 	.word	0x08008820
 8004ed0:	08008828 	.word	0x08008828
 8004ed4:	08008830 	.word	0x08008830
 8004ed8:	08008838 	.word	0x08008838

08004edc <logPosition>:
}


void logPosition(){
	uint32_t* mem = (uint32_t*)(0x08008800);
	while(*mem != 0xFFFFFFFF){
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <logPosition+0x2c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	d00f      	beq.n	8004f04 <logPosition+0x28>
 8004ee4:	4909      	ldr	r1, [pc, #36]	; (8004f0c <logPosition+0x30>)
 8004ee6:	780a      	ldrb	r2, [r1, #0]
		log_counter += 1;
 8004ee8:	3201      	adds	r2, #1
 8004eea:	b2d2      	uxtb	r2, r2
		mem = (uint32_t*)(0x08008800 + 64*log_counter);
 8004eec:	f102 1320 	add.w	r3, r2, #2097184	; 0x200020
 8004ef0:	f503 7300 	add.w	r3, r3, #512	; 0x200
	while(*mem != 0xFFFFFFFF){
 8004ef4:	019b      	lsls	r3, r3, #6
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	d1f5      	bne.n	8004ee8 <logPosition+0xc>
 8004efc:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <logPosition+0x34>)
 8004efe:	700a      	strb	r2, [r1, #0]
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	08008800 	.word	0x08008800
 8004f0c:	200002bc 	.word	0x200002bc
 8004f10:	2000001a 	.word	0x2000001a

08004f14 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004f14:	b508      	push	{r3, lr}
	rx_flag = 1;
 8004f16:	2201      	movs	r2, #1
 8004f18:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <HAL_UART_RxCpltCallback+0x14>)
 8004f1a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004f1c:	4903      	ldr	r1, [pc, #12]	; (8004f2c <HAL_UART_RxCpltCallback+0x18>)
 8004f1e:	4804      	ldr	r0, [pc, #16]	; (8004f30 <HAL_UART_RxCpltCallback+0x1c>)
 8004f20:	f7ff f942 	bl	80041a8 <HAL_UART_Receive_IT>
 8004f24:	bd08      	pop	{r3, pc}
 8004f26:	bf00      	nop
 8004f28:	200002d9 	.word	0x200002d9
 8004f2c:	200005e4 	.word	0x200005e4
 8004f30:	20000438 	.word	0x20000438

08004f34 <HAL_ADC_ConvCpltCallback>:

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004f34:	4770      	bx	lr
	...

08004f38 <HAL_TIM_IC_CaptureCallback>:
//	adc_flag = 1;
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4b01      	ldr	r3, [pc, #4]	; (8004f40 <HAL_TIM_IC_CaptureCallback+0x8>)
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	4770      	bx	lr
 8004f40:	200002f1 	.word	0x200002f1

08004f44 <HAL_RTCEx_WakeUpTimerEventCallback>:
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 8004f44:	2201      	movs	r2, #1
 8004f46:	4b01      	ldr	r3, [pc, #4]	; (8004f4c <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	4770      	bx	lr
 8004f4c:	200002d8 	.word	0x200002d8

08004f50 <HAL_I2C_MemTxCpltCallback>:
}

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
	rtcSecFlag = 1; // Flag to indicate 1 second period
 8004f50:	2201      	movs	r2, #1
 8004f52:	4b01      	ldr	r3, [pc, #4]	; (8004f58 <HAL_I2C_MemTxCpltCallback+0x8>)
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	4770      	bx	lr
 8004f58:	200002d8 	.word	0x200002d8

08004f5c <HAL_I2C_MemRxCpltCallback>:
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
	rtcSecFlag = 1; // Flag to indicate 1 second period
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	4b01      	ldr	r3, [pc, #4]	; (8004f64 <HAL_I2C_MemRxCpltCallback+0x8>)
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	4770      	bx	lr
 8004f64:	200002d8 	.word	0x200002d8

08004f68 <HAL_I2C_MasterRxCpltCallback>:

}

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
	rtcSecFlag = 1; // Flag to indicate 1 second period
 8004f68:	2201      	movs	r2, #1
 8004f6a:	4b01      	ldr	r3, [pc, #4]	; (8004f70 <HAL_I2C_MasterRxCpltCallback+0x8>)
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	4770      	bx	lr
 8004f70:	200002d8 	.word	0x200002d8

08004f74 <heating_control>:
		}
	}
}


void heating_control(){
 8004f74:	b430      	push	{r4, r5}

	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 5) ) && !(geyser_temp_int > (*set_temp+5 ))){
 8004f76:	4c1c      	ldr	r4, [pc, #112]	; (8004fe8 <heating_control+0x74>)
 8004f78:	4d1c      	ldr	r5, [pc, #112]	; (8004fec <heating_control+0x78>)
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	42ab      	cmp	r3, r5
 8004f7e:	d004      	beq.n	8004f8a <heating_control+0x16>
	}
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
 8004f80:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <heating_control+0x7c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d011      	beq.n	8004faa <heating_control+0x36>
	}
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 5)) && !(geyser_temp_int > (*set_temp+5 ))){
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
}
 8004f86:	bc30      	pop	{r4, r5}
 8004f88:	4770      	bx	lr
	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 5) ) && !(geyser_temp_int > (*set_temp+5 ))){
 8004f8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ff4 <heating_control+0x80>)
 8004f8c:	491a      	ldr	r1, [pc, #104]	; (8004ff8 <heating_control+0x84>)
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	7808      	ldrb	r0, [r1, #0]
 8004f92:	7811      	ldrb	r1, [r2, #0]
 8004f94:	1f4a      	subs	r2, r1, #5
 8004f96:	4290      	cmp	r0, r2
 8004f98:	db1a      	blt.n	8004fd0 <heating_control+0x5c>
		heater_state = heater_OFF;
 8004f9a:	6025      	str	r5, [r4, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fa2:	4816      	ldr	r0, [pc, #88]	; (8004ffc <heating_control+0x88>)
}
 8004fa4:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004fa6:	f7fc be95 	b.w	8001cd4 <HAL_GPIO_WritePin>
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <heating_control+0x80>)
 8004fac:	4912      	ldr	r1, [pc, #72]	; (8004ff8 <heating_control+0x84>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	7808      	ldrb	r0, [r1, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	1f59      	subs	r1, r3, #5
 8004fb6:	4288      	cmp	r0, r1
 8004fb8:	db11      	blt.n	8004fde <heating_control+0x6a>
 8004fba:	3305      	adds	r3, #5
 8004fbc:	4298      	cmp	r0, r3
 8004fbe:	dcec      	bgt.n	8004f9a <heating_control+0x26>
		heater_state = heater_ON;
 8004fc0:	6022      	str	r2, [r4, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004fc2:	480e      	ldr	r0, [pc, #56]	; (8004ffc <heating_control+0x88>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 8004fca:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004fcc:	f7fc be82 	b.w	8001cd4 <HAL_GPIO_WritePin>
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
 8004fd0:	1d4a      	adds	r2, r1, #5
 8004fd2:	4290      	cmp	r0, r2
 8004fd4:	4a06      	ldr	r2, [pc, #24]	; (8004ff0 <heating_control+0x7c>)
 8004fd6:	ddf3      	ble.n	8004fc0 <heating_control+0x4c>
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d1d4      	bne.n	8004f86 <heating_control+0x12>
 8004fdc:	460b      	mov	r3, r1
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 5)) && !(geyser_temp_int > (*set_temp+5 ))){
 8004fde:	3305      	adds	r3, #5
 8004fe0:	4298      	cmp	r0, r3
 8004fe2:	dcd0      	bgt.n	8004f86 <heating_control+0x12>
 8004fe4:	e7ec      	b.n	8004fc0 <heating_control+0x4c>
 8004fe6:	bf00      	nop
 8004fe8:	200002b0 	.word	0x200002b0
 8004fec:	20000014 	.word	0x20000014
 8004ff0:	20000018 	.word	0x20000018
 8004ff4:	200002e0 	.word	0x200002e0
 8004ff8:	200002a0 	.word	0x200002a0
 8004ffc:	48000400 	.word	0x48000400

08005000 <heating_scheduling>:
void heating_scheduling(){
 8005000:	b538      	push	{r3, r4, r5, lr}
	if(auto_heating == 1){
 8005002:	4b62      	ldr	r3, [pc, #392]	; (800518c <heating_scheduling+0x18c>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d000      	beq.n	800500c <heating_scheduling+0xc>
 800500a:	bd38      	pop	{r3, r4, r5, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 800500c:	4c60      	ldr	r4, [pc, #384]	; (8005190 <heating_scheduling+0x190>)
 800500e:	4861      	ldr	r0, [pc, #388]	; (8005194 <heating_scheduling+0x194>)
 8005010:	6821      	ldr	r1, [r4, #0]
 8005012:	2200      	movs	r2, #0
 8005014:	f7fe fbb0 	bl	8003778 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005018:	4b5f      	ldr	r3, [pc, #380]	; (8005198 <heating_scheduling+0x198>)
 800501a:	485e      	ldr	r0, [pc, #376]	; (8005194 <heating_scheduling+0x194>)
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	f7fe fbe0 	bl	80037e4 <HAL_RTC_GetDate>
		if( (time->Hours - heating_schedule[0].Hours) > 0 && (time->Hours - heating_schedule[1].Hours) < 0){
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	4b5d      	ldr	r3, [pc, #372]	; (800519c <heating_scheduling+0x19c>)
 8005028:	7802      	ldrb	r2, [r0, #0]
 800502a:	7819      	ldrb	r1, [r3, #0]
 800502c:	1a54      	subs	r4, r2, r1
 800502e:	2c00      	cmp	r4, #0
 8005030:	dd03      	ble.n	800503a <heating_scheduling+0x3a>
 8005032:	7d1c      	ldrb	r4, [r3, #20]
 8005034:	1b14      	subs	r4, r2, r4
 8005036:	2c00      	cmp	r4, #0
 8005038:	db4e      	blt.n	80050d8 <heating_scheduling+0xd8>
		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 800503a:	428a      	cmp	r2, r1
 800503c:	d050      	beq.n	80050e0 <heating_scheduling+0xe0>
 800503e:	7d19      	ldrb	r1, [r3, #20]
 8005040:	4291      	cmp	r1, r2
 8005042:	f000 8082 	beq.w	800514a <heating_scheduling+0x14a>
		else if( (time->Hours - heating_schedule[2].Hours) > 0 && (time->Hours - heating_schedule[3].Hours) < 0){
 8005046:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800504a:	1a54      	subs	r4, r2, r1
 800504c:	2c00      	cmp	r4, #0
 800504e:	dd04      	ble.n	800505a <heating_scheduling+0x5a>
 8005050:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8005054:	1b14      	subs	r4, r2, r4
 8005056:	2c00      	cmp	r4, #0
 8005058:	db3e      	blt.n	80050d8 <heating_scheduling+0xd8>
		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 800505a:	428a      	cmp	r2, r1
 800505c:	d01e      	beq.n	800509c <heating_scheduling+0x9c>
 800505e:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8005062:	4291      	cmp	r1, r2
 8005064:	d07c      	beq.n	8005160 <heating_scheduling+0x160>
		else if( (time->Hours - heating_schedule[4].Hours) > 0 && (time->Hours - heating_schedule[5].Hours) < 0){
 8005066:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800506a:	1a54      	subs	r4, r2, r1
 800506c:	2c00      	cmp	r4, #0
 800506e:	dd04      	ble.n	800507a <heating_scheduling+0x7a>
 8005070:	f893 4064 	ldrb.w	r4, [r3, #100]	; 0x64
 8005074:	1b14      	subs	r4, r2, r4
 8005076:	2c00      	cmp	r4, #0
 8005078:	db2e      	blt.n	80050d8 <heating_scheduling+0xd8>
		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 800507a:	428a      	cmp	r2, r1
 800507c:	d048      	beq.n	8005110 <heating_scheduling+0x110>
 800507e:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8005082:	4291      	cmp	r1, r2
 8005084:	d073      	beq.n	800516e <heating_scheduling+0x16e>
			heater_state = heater_OFF;
 8005086:	4b46      	ldr	r3, [pc, #280]	; (80051a0 <heating_scheduling+0x1a0>)
 8005088:	4a46      	ldr	r2, [pc, #280]	; (80051a4 <heating_scheduling+0x1a4>)
 800508a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 800508c:	4846      	ldr	r0, [pc, #280]	; (80051a8 <heating_scheduling+0x1a8>)
 800508e:	2201      	movs	r2, #1
 8005090:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 8005094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8005098:	f7fc be1c 	b.w	8001cd4 <HAL_GPIO_WritePin>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 800509c:	7841      	ldrb	r1, [r0, #1]
 800509e:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 80050a2:	1b0c      	subs	r4, r1, r4
 80050a4:	2c00      	cmp	r4, #0
 80050a6:	dd04      	ble.n	80050b2 <heating_scheduling+0xb2>
 80050a8:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 80050ac:	1b0c      	subs	r4, r1, r4
 80050ae:	2c00      	cmp	r4, #0
 80050b0:	db12      	blt.n	80050d8 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[2].Minutes == 0) || (time->Minutes - heating_schedule[3].Minutes == 0) )
 80050b2:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 80050b6:	428c      	cmp	r4, r1
 80050b8:	d003      	beq.n	80050c2 <heating_scheduling+0xc2>
 80050ba:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 80050be:	428c      	cmp	r4, r1
 80050c0:	d1d1      	bne.n	8005066 <heating_scheduling+0x66>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
 80050c2:	7881      	ldrb	r1, [r0, #2]
 80050c4:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 80050c8:	1b0c      	subs	r4, r1, r4
 80050ca:	2c00      	cmp	r4, #0
 80050cc:	ddcb      	ble.n	8005066 <heating_scheduling+0x66>
 80050ce:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
 80050d2:	1b09      	subs	r1, r1, r4
 80050d4:	2900      	cmp	r1, #0
 80050d6:	dac6      	bge.n	8005066 <heating_scheduling+0x66>
}
 80050d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			heating_control();
 80050dc:	f7ff bf4a 	b.w	8004f74 <heating_control>
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 80050e0:	7841      	ldrb	r1, [r0, #1]
 80050e2:	785c      	ldrb	r4, [r3, #1]
 80050e4:	1b0d      	subs	r5, r1, r4
 80050e6:	2d00      	cmp	r5, #0
 80050e8:	dd03      	ble.n	80050f2 <heating_scheduling+0xf2>
 80050ea:	7d5d      	ldrb	r5, [r3, #21]
 80050ec:	1b4d      	subs	r5, r1, r5
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	dbf2      	blt.n	80050d8 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[0].Minutes == 0) || (time->Minutes - heating_schedule[1].Minutes == 0) )
 80050f2:	42a1      	cmp	r1, r4
 80050f4:	d002      	beq.n	80050fc <heating_scheduling+0xfc>
 80050f6:	7d5c      	ldrb	r4, [r3, #21]
 80050f8:	428c      	cmp	r4, r1
 80050fa:	d1a4      	bne.n	8005046 <heating_scheduling+0x46>
				&& ( (time->Seconds - heating_schedule[0].Seconds > 0) && (time->Seconds - heating_schedule[1].Seconds < 0) ) ){
 80050fc:	7881      	ldrb	r1, [r0, #2]
 80050fe:	789c      	ldrb	r4, [r3, #2]
 8005100:	1b0c      	subs	r4, r1, r4
 8005102:	2c00      	cmp	r4, #0
 8005104:	dd9f      	ble.n	8005046 <heating_scheduling+0x46>
 8005106:	7d9c      	ldrb	r4, [r3, #22]
 8005108:	1b09      	subs	r1, r1, r4
 800510a:	2900      	cmp	r1, #0
 800510c:	da9b      	bge.n	8005046 <heating_scheduling+0x46>
 800510e:	e7e3      	b.n	80050d8 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 8005110:	7841      	ldrb	r1, [r0, #1]
 8005112:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8005116:	1a8c      	subs	r4, r1, r2
 8005118:	2c00      	cmp	r4, #0
 800511a:	dd04      	ble.n	8005126 <heating_scheduling+0x126>
 800511c:	f893 4065 	ldrb.w	r4, [r3, #101]	; 0x65
 8005120:	1b0c      	subs	r4, r1, r4
 8005122:	2c00      	cmp	r4, #0
 8005124:	dbd8      	blt.n	80050d8 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[4].Minutes == 0) || (time->Minutes - heating_schedule[5].Minutes == 0) )
 8005126:	4291      	cmp	r1, r2
 8005128:	d003      	beq.n	8005132 <heating_scheduling+0x132>
 800512a:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 800512e:	428a      	cmp	r2, r1
 8005130:	d1a9      	bne.n	8005086 <heating_scheduling+0x86>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
 8005132:	7882      	ldrb	r2, [r0, #2]
 8005134:	f893 1052 	ldrb.w	r1, [r3, #82]	; 0x52
 8005138:	1a51      	subs	r1, r2, r1
 800513a:	2900      	cmp	r1, #0
 800513c:	dda3      	ble.n	8005086 <heating_scheduling+0x86>
 800513e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005142:	1ad2      	subs	r2, r2, r3
 8005144:	2a00      	cmp	r2, #0
 8005146:	da9e      	bge.n	8005086 <heating_scheduling+0x86>
 8005148:	e7c6      	b.n	80050d8 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 800514a:	7841      	ldrb	r1, [r0, #1]
 800514c:	785c      	ldrb	r4, [r3, #1]
 800514e:	1b0c      	subs	r4, r1, r4
 8005150:	2c00      	cmp	r4, #0
 8005152:	dd03      	ble.n	800515c <heating_scheduling+0x15c>
 8005154:	7d5c      	ldrb	r4, [r3, #21]
 8005156:	1b0c      	subs	r4, r1, r4
 8005158:	2c00      	cmp	r4, #0
 800515a:	dbbd      	blt.n	80050d8 <heating_scheduling+0xd8>
 800515c:	785c      	ldrb	r4, [r3, #1]
 800515e:	e7c8      	b.n	80050f2 <heating_scheduling+0xf2>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 8005160:	7841      	ldrb	r1, [r0, #1]
 8005162:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 8005166:	1b0c      	subs	r4, r1, r4
 8005168:	2c00      	cmp	r4, #0
 800516a:	dda2      	ble.n	80050b2 <heating_scheduling+0xb2>
 800516c:	e79c      	b.n	80050a8 <heating_scheduling+0xa8>
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 800516e:	7841      	ldrb	r1, [r0, #1]
 8005170:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8005174:	1a8a      	subs	r2, r1, r2
 8005176:	2a00      	cmp	r2, #0
 8005178:	dd04      	ble.n	8005184 <heating_scheduling+0x184>
 800517a:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 800517e:	1a8a      	subs	r2, r1, r2
 8005180:	2a00      	cmp	r2, #0
 8005182:	dba9      	blt.n	80050d8 <heating_scheduling+0xd8>
 8005184:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8005188:	e7cd      	b.n	8005126 <heating_scheduling+0x126>
 800518a:	bf00      	nop
 800518c:	20000278 	.word	0x20000278
 8005190:	200002f4 	.word	0x200002f4
 8005194:	200004a8 	.word	0x200004a8
 8005198:	20000284 	.word	0x20000284
 800519c:	20000568 	.word	0x20000568
 80051a0:	200002b0 	.word	0x200002b0
 80051a4:	20000014 	.word	0x20000014
 80051a8:	48000400 	.word	0x48000400

080051ac <init_iqs263>:
extern I2C_HandleTypeDef hi2c1;

//unsigned char sliderCoords;                     // variable identified with a Slide event
//unsigned char data_buffer[30];
//unsigned char events = 0;                       // variable identified with all events
int init_iqs263(){
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	b086      	sub	sp, #24
	// READING DEVICE INFORMATION
//	 data_buffer[0] = SYSTEM_FLAGS_VAL;
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 80051b0:	2110      	movs	r1, #16
 80051b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051b6:	f7fc fd87 	bl	8001cc8 <HAL_GPIO_ReadPin>
 80051ba:	2801      	cmp	r0, #1
 80051bc:	d0f8      	beq.n	80051b0 <init_iqs263+0x4>
	 uint8_t sysflag_byte[] = {0};
 80051be:	aa06      	add	r2, sp, #24
 80051c0:	2300      	movs	r3, #0
 80051c2:	f802 3d04 	strb.w	r3, [r2, #-4]!
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, (uint8_t)SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  sysflag_byte, 1,50);
 80051c6:	2132      	movs	r1, #50	; 0x32
 80051c8:	2301      	movs	r3, #1
 80051ca:	48cf      	ldr	r0, [pc, #828]	; (8005508 <init_iqs263+0x35c>)
 80051cc:	9200      	str	r2, [sp, #0]
 80051ce:	9102      	str	r1, [sp, #8]
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80051d6:	4604      	mov	r4, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, (uint8_t)SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  sysflag_byte, 1,50);
 80051d8:	f7fc ff4e 	bl	8002078 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80051dc:	4620      	mov	r0, r4
 80051de:	f7fd fdab 	bl	8002d38 <HAL_I2C_GetState>
 80051e2:	2820      	cmp	r0, #32
 80051e4:	d1fa      	bne.n	80051dc <init_iqs263+0x30>

	 	HAL_Delay(42);
 80051e6:	202a      	movs	r0, #42	; 0x2a
	    // Set active channels
	 data_buffer[0] = ACTIVE_CHS;
 80051e8:	4dc8      	ldr	r5, [pc, #800]	; (800550c <init_iqs263+0x360>)
	 	HAL_Delay(42);
 80051ea:	f7fb fe3b 	bl	8000e64 <HAL_Delay>
	 data_buffer[0] = ACTIVE_CHS;
 80051ee:	230f      	movs	r3, #15
 80051f0:	702b      	strb	r3, [r5, #0]
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 80051f2:	2110      	movs	r1, #16
 80051f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051f8:	f7fc fd66 	bl	8001cc8 <HAL_GPIO_ReadPin>
 80051fc:	2801      	cmp	r0, #1
 80051fe:	d0f8      	beq.n	80051f2 <init_iqs263+0x46>
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, ACTIVE_CHANNELS, I2C_MEMADD_SIZE_8BIT,  data_buffer, 1,50);
 8005200:	2232      	movs	r2, #50	; 0x32
 8005202:	2301      	movs	r3, #1
 8005204:	48c0      	ldr	r0, [pc, #768]	; (8005508 <init_iqs263+0x35c>)
 8005206:	9202      	str	r2, [sp, #8]
 8005208:	9500      	str	r5, [sp, #0]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	220d      	movs	r2, #13
 800520e:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005210:	4606      	mov	r6, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, ACTIVE_CHANNELS, I2C_MEMADD_SIZE_8BIT,  data_buffer, 1,50);
 8005212:	f7fc ff31 	bl	8002078 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005216:	4630      	mov	r0, r6
 8005218:	f7fd fd8e 	bl	8002d38 <HAL_I2C_GetState>
 800521c:	2820      	cmp	r0, #32
 800521e:	4604      	mov	r4, r0
 8005220:	d1f9      	bne.n	8005216 <init_iqs263+0x6a>
	 HAL_Delay(42);
 8005222:	202a      	movs	r0, #42	; 0x2a
 8005224:	f7fb fe1e 	bl	8000e64 <HAL_Delay>
	 // Setup touch and prox thresholds for each channel
	 data_buffer[0] = PROX_THRESHOLD;
 8005228:	2608      	movs	r6, #8
	 data_buffer[1] = TOUCH_THRESHOLD_CH1;
	 data_buffer[2] = TOUCH_THRESHOLD_CH2;
	 data_buffer[3] = TOUCH_THRESHOLD_CH3;
	 data_buffer[4] = MOVEMENT_THRESHOLD;
 800522a:	2003      	movs	r0, #3
	 data_buffer[5] = RESEED_BLOCK;
 800522c:	2100      	movs	r1, #0
	 data_buffer[6] = HALT_TIME;
 800522e:	2214      	movs	r2, #20
	 data_buffer[7] = I2C_TIMEOUT;
 8005230:	2304      	movs	r3, #4
	 data_buffer[1] = TOUCH_THRESHOLD_CH1;
 8005232:	706c      	strb	r4, [r5, #1]
	 data_buffer[2] = TOUCH_THRESHOLD_CH2;
 8005234:	70ac      	strb	r4, [r5, #2]
	 data_buffer[3] = TOUCH_THRESHOLD_CH3;
 8005236:	70ec      	strb	r4, [r5, #3]
	 data_buffer[0] = PROX_THRESHOLD;
 8005238:	702e      	strb	r6, [r5, #0]
	 data_buffer[4] = MOVEMENT_THRESHOLD;
 800523a:	7128      	strb	r0, [r5, #4]
	 data_buffer[5] = RESEED_BLOCK;
 800523c:	7169      	strb	r1, [r5, #5]
	 data_buffer[6] = HALT_TIME;
 800523e:	71aa      	strb	r2, [r5, #6]
	 data_buffer[7] = I2C_TIMEOUT;
 8005240:	71eb      	strb	r3, [r5, #7]

	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8005242:	2110      	movs	r1, #16
 8005244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005248:	f7fc fd3e 	bl	8001cc8 <HAL_GPIO_ReadPin>
 800524c:	2801      	cmp	r0, #1
 800524e:	d0f8      	beq.n	8005242 <init_iqs263+0x96>
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, THRESHOLDS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 8,50);
 8005250:	2232      	movs	r2, #50	; 0x32
 8005252:	2308      	movs	r3, #8
 8005254:	48ac      	ldr	r0, [pc, #688]	; (8005508 <init_iqs263+0x35c>)
 8005256:	9202      	str	r2, [sp, #8]
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	9500      	str	r5, [sp, #0]
 800525c:	2301      	movs	r3, #1
 800525e:	220a      	movs	r2, #10
 8005260:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005262:	4604      	mov	r4, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, THRESHOLDS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 8,50);
 8005264:	f7fc ff08 	bl	8002078 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005268:	4620      	mov	r0, r4
 800526a:	f7fd fd65 	bl	8002d38 <HAL_I2C_GetState>
 800526e:	2820      	cmp	r0, #32
 8005270:	d1fa      	bne.n	8005268 <init_iqs263+0xbc>
	 HAL_Delay(42);
 8005272:	202a      	movs	r0, #42	; 0x2a
 8005274:	f7fb fdf6 	bl	8000e64 <HAL_Delay>

	// Set the ATI Targets (Target Counts)
	data_buffer[0] = ATI_TARGET_TOUCH;
 8005278:	2230      	movs	r2, #48	; 0x30
	data_buffer[1] = ATI_TARGET_PROX;
 800527a:	2340      	movs	r3, #64	; 0x40
	data_buffer[0] = ATI_TARGET_TOUCH;
 800527c:	702a      	strb	r2, [r5, #0]
	data_buffer[1] = ATI_TARGET_PROX;
 800527e:	706b      	strb	r3, [r5, #1]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8005280:	2110      	movs	r1, #16
 8005282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005286:	f7fc fd1f 	bl	8001cc8 <HAL_GPIO_ReadPin>
 800528a:	2801      	cmp	r0, #1
 800528c:	d0f8      	beq.n	8005280 <init_iqs263+0xd4>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 800528e:	2232      	movs	r2, #50	; 0x32
 8005290:	2302      	movs	r3, #2
 8005292:	489d      	ldr	r0, [pc, #628]	; (8005508 <init_iqs263+0x35c>)
 8005294:	9202      	str	r2, [sp, #8]
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	9500      	str	r5, [sp, #0]
 800529a:	2301      	movs	r3, #1
 800529c:	220b      	movs	r2, #11
 800529e:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80052a0:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 80052a2:	f7fc fee9 	bl	8002078 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7fd fd46 	bl	8002d38 <HAL_I2C_GetState>
 80052ac:	2820      	cmp	r0, #32
 80052ae:	d1fa      	bne.n	80052a6 <init_iqs263+0xfa>
	HAL_Delay(42);
 80052b0:	202a      	movs	r0, #42	; 0x2a
 80052b2:	f7fb fdd7 	bl	8000e64 <HAL_Delay>
	// Set the BASE value for each channel
	data_buffer[0] = MULTIPLIERS_CH0;
 80052b6:	2308      	movs	r3, #8
 80052b8:	702b      	strb	r3, [r5, #0]
	data_buffer[1] = MULTIPLIERS_CH1;
 80052ba:	706b      	strb	r3, [r5, #1]
	data_buffer[2] = MULTIPLIERS_CH2;
 80052bc:	70ab      	strb	r3, [r5, #2]
	data_buffer[3] = MULTIPLIERS_CH3;
 80052be:	70eb      	strb	r3, [r5, #3]

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 80052c0:	2110      	movs	r1, #16
 80052c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c6:	f7fc fcff 	bl	8001cc8 <HAL_GPIO_ReadPin>
 80052ca:	2801      	cmp	r0, #1
 80052cc:	d0f8      	beq.n	80052c0 <init_iqs263+0x114>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, MULTIPLIERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 80052ce:	2232      	movs	r2, #50	; 0x32
 80052d0:	2304      	movs	r3, #4
 80052d2:	488d      	ldr	r0, [pc, #564]	; (8005508 <init_iqs263+0x35c>)
 80052d4:	9202      	str	r2, [sp, #8]
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	9500      	str	r5, [sp, #0]
 80052da:	2301      	movs	r3, #1
 80052dc:	2207      	movs	r2, #7
 80052de:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80052e0:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, MULTIPLIERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 80052e2:	f7fc fec9 	bl	8002078 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80052e6:	4620      	mov	r0, r4
 80052e8:	f7fd fd26 	bl	8002d38 <HAL_I2C_GetState>
 80052ec:	2820      	cmp	r0, #32
 80052ee:	d1fa      	bne.n	80052e6 <init_iqs263+0x13a>
	HAL_Delay(42);
 80052f0:	202a      	movs	r0, #42	; 0x2a
 80052f2:	f7fb fdb7 	bl	8000e64 <HAL_Delay>

//	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1()){}; // Waiting for device
//	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
//	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 80052f6:	2110      	movs	r1, #16
 80052f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052fc:	f7fc fce4 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8005300:	2801      	cmp	r0, #1
 8005302:	d0f8      	beq.n	80052f6 <init_iqs263+0x14a>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8005304:	2232      	movs	r2, #50	; 0x32
 8005306:	2305      	movs	r3, #5
 8005308:	487f      	ldr	r0, [pc, #508]	; (8005508 <init_iqs263+0x35c>)
 800530a:	9202      	str	r2, [sp, #8]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	9500      	str	r5, [sp, #0]
 8005310:	2301      	movs	r3, #1
 8005312:	2209      	movs	r2, #9
 8005314:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005316:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8005318:	f7fc ff90 	bl	800223c <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 800531c:	4620      	mov	r0, r4
 800531e:	f7fd fd0b 	bl	8002d38 <HAL_I2C_GetState>
 8005322:	2820      	cmp	r0, #32
 8005324:	d1fa      	bne.n	800531c <init_iqs263+0x170>
	HAL_Delay(42);
 8005326:	202a      	movs	r0, #42	; 0x2a
 8005328:	f7fb fd9c 	bl	8000e64 <HAL_Delay>
	// Setup prox settings
//	data_buffer[0] = 0;
	data_buffer[0] = PROXSETTINGS0_VAL;
 800532c:	2300      	movs	r3, #0
	data_buffer[1] = PROXSETTINGS1_VAL;
 800532e:	211d      	movs	r1, #29
//	data_buffer[2] = 8;
	data_buffer[2] = PROXSETTINGS2_VAL;
 8005330:	2204      	movs	r2, #4
	data_buffer[0] = PROXSETTINGS0_VAL;
 8005332:	702b      	strb	r3, [r5, #0]
	data_buffer[3] = PROXSETTINGS3_VAL;
 8005334:	70eb      	strb	r3, [r5, #3]
	data_buffer[4] = EVENT_MASK_VAL;
 8005336:	712b      	strb	r3, [r5, #4]
	data_buffer[1] = PROXSETTINGS1_VAL;
 8005338:	7069      	strb	r1, [r5, #1]
	data_buffer[2] = PROXSETTINGS2_VAL;
 800533a:	70aa      	strb	r2, [r5, #2]


	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 800533c:	2110      	movs	r1, #16
 800533e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005342:	f7fc fcc1 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8005346:	2801      	cmp	r0, #1
 8005348:	d0f8      	beq.n	800533c <init_iqs263+0x190>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 800534a:	2232      	movs	r2, #50	; 0x32
 800534c:	2305      	movs	r3, #5
 800534e:	486e      	ldr	r0, [pc, #440]	; (8005508 <init_iqs263+0x35c>)
 8005350:	9202      	str	r2, [sp, #8]
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	9500      	str	r5, [sp, #0]
 8005356:	2301      	movs	r3, #1
 8005358:	2209      	movs	r2, #9
 800535a:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 800535c:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 800535e:	f7fc fe8b 	bl	8002078 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005362:	4620      	mov	r0, r4
 8005364:	f7fd fce8 	bl	8002d38 <HAL_I2C_GetState>
 8005368:	2820      	cmp	r0, #32
 800536a:	d1fa      	bne.n	8005362 <init_iqs263+0x1b6>
	HAL_Delay(42);
 800536c:	202a      	movs	r0, #42	; 0x2a
 800536e:	f7fb fd79 	bl	8000e64 <HAL_Delay>
//	data_buffer[1] = 0;
//	data_buffer[2] = 0;
//	data_buffer[3] = 0;
//	data_buffer[4] = 0;

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8005372:	2110      	movs	r1, #16
 8005374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005378:	f7fc fca6 	bl	8001cc8 <HAL_GPIO_ReadPin>
 800537c:	2801      	cmp	r0, #1
 800537e:	d0f8      	beq.n	8005372 <init_iqs263+0x1c6>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8005380:	2232      	movs	r2, #50	; 0x32
 8005382:	2305      	movs	r3, #5
 8005384:	4860      	ldr	r0, [pc, #384]	; (8005508 <init_iqs263+0x35c>)
 8005386:	9202      	str	r2, [sp, #8]
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	9500      	str	r5, [sp, #0]
 800538c:	2301      	movs	r3, #1
 800538e:	2209      	movs	r2, #9
 8005390:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005392:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8005394:	f7fc ff52 	bl	800223c <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005398:	4620      	mov	r0, r4
 800539a:	f7fd fccd 	bl	8002d38 <HAL_I2C_GetState>
 800539e:	2820      	cmp	r0, #32
 80053a0:	d1fa      	bne.n	8005398 <init_iqs263+0x1ec>
	HAL_Delay(42);
 80053a2:	202a      	movs	r0, #42	; 0x2a
 80053a4:	f7fb fd5e 	bl	8000e64 <HAL_Delay>

    // Setup Compensation (PCC)
    data_buffer[0] = COMPENSATION_CH0;
    data_buffer[1] = COMPENSATION_CH1;
 80053a8:	2349      	movs	r3, #73	; 0x49
    data_buffer[0] = COMPENSATION_CH0;
 80053aa:	2151      	movs	r1, #81	; 0x51
    data_buffer[2] = COMPENSATION_CH2;
 80053ac:	224a      	movs	r2, #74	; 0x4a
    data_buffer[0] = COMPENSATION_CH0;
 80053ae:	7029      	strb	r1, [r5, #0]
    data_buffer[1] = COMPENSATION_CH1;
 80053b0:	706b      	strb	r3, [r5, #1]
    data_buffer[3] = COMPENSATION_CH3;
 80053b2:	70eb      	strb	r3, [r5, #3]
    data_buffer[2] = COMPENSATION_CH2;
 80053b4:	70aa      	strb	r2, [r5, #2]

    while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 80053b6:	2110      	movs	r1, #16
 80053b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053bc:	f7fc fc84 	bl	8001cc8 <HAL_GPIO_ReadPin>
 80053c0:	2801      	cmp	r0, #1
 80053c2:	d0f8      	beq.n	80053b6 <init_iqs263+0x20a>
    HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, COMPENSATION, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 80053c4:	2232      	movs	r2, #50	; 0x32
 80053c6:	2304      	movs	r3, #4
 80053c8:	484f      	ldr	r0, [pc, #316]	; (8005508 <init_iqs263+0x35c>)
 80053ca:	9202      	str	r2, [sp, #8]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	9500      	str	r5, [sp, #0]
 80053d0:	2301      	movs	r3, #1
 80053d2:	2208      	movs	r2, #8
 80053d4:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80053d6:	4604      	mov	r4, r0
    HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, COMPENSATION, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 80053d8:	f7fc fe4e 	bl	8002078 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80053dc:	4620      	mov	r0, r4
 80053de:	f7fd fcab 	bl	8002d38 <HAL_I2C_GetState>
 80053e2:	2820      	cmp	r0, #32
 80053e4:	d1fa      	bne.n	80053dc <init_iqs263+0x230>
	HAL_Delay(42);
 80053e6:	202a      	movs	r0, #42	; 0x2a
 80053e8:	f7fb fd3c 	bl	8000e64 <HAL_Delay>

	// Set timings on the IQS263
	data_buffer[0] = LOW_POWER;
 80053ec:	2300      	movs	r3, #0
 80053ee:	702b      	strb	r3, [r5, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 80053f0:	2110      	movs	r1, #16
 80053f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053f6:	f7fc fc67 	bl	8001cc8 <HAL_GPIO_ReadPin>
 80053fa:	2801      	cmp	r0, #1
 80053fc:	d0f8      	beq.n	80053f0 <init_iqs263+0x244>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 80053fe:	2232      	movs	r2, #50	; 0x32
 8005400:	2301      	movs	r3, #1
 8005402:	4841      	ldr	r0, [pc, #260]	; (8005508 <init_iqs263+0x35c>)
 8005404:	9202      	str	r2, [sp, #8]
 8005406:	9500      	str	r5, [sp, #0]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	220b      	movs	r2, #11
 800540c:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 800540e:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8005410:	f7fc fe32 	bl	8002078 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005414:	4620      	mov	r0, r4
 8005416:	f7fd fc8f 	bl	8002d38 <HAL_I2C_GetState>
 800541a:	2820      	cmp	r0, #32
 800541c:	d1fa      	bne.n	8005414 <init_iqs263+0x268>
	HAL_Delay(42);
 800541e:	202a      	movs	r0, #42	; 0x2a
 8005420:	f7fb fd20 	bl	8000e64 <HAL_Delay>
	// Set gesture timers on IQS263
	data_buffer[0] = TAP_TIMER;
 8005424:	2105      	movs	r1, #5
	data_buffer[1] = FLICK_TIMER;
 8005426:	2251      	movs	r2, #81	; 0x51
	data_buffer[2] = FLICK_THRESHOLD;
 8005428:	2333      	movs	r3, #51	; 0x33
	data_buffer[0] = TAP_TIMER;
 800542a:	7029      	strb	r1, [r5, #0]
	data_buffer[1] = FLICK_TIMER;
 800542c:	706a      	strb	r2, [r5, #1]
	data_buffer[2] = FLICK_THRESHOLD;
 800542e:	70ab      	strb	r3, [r5, #2]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8005430:	2110      	movs	r1, #16
 8005432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005436:	f7fc fc47 	bl	8001cc8 <HAL_GPIO_ReadPin>
 800543a:	2801      	cmp	r0, #1
 800543c:	d0f8      	beq.n	8005430 <init_iqs263+0x284>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, GESTURE_TIMERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 3,50);
 800543e:	2232      	movs	r2, #50	; 0x32
 8005440:	2303      	movs	r3, #3
 8005442:	4831      	ldr	r0, [pc, #196]	; (8005508 <init_iqs263+0x35c>)
 8005444:	9202      	str	r2, [sp, #8]
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	9500      	str	r5, [sp, #0]
 800544a:	2301      	movs	r3, #1
 800544c:	220c      	movs	r2, #12
 800544e:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005450:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, GESTURE_TIMERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 3,50);
 8005452:	f7fc fe11 	bl	8002078 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005456:	4620      	mov	r0, r4
 8005458:	f7fd fc6e 	bl	8002d38 <HAL_I2C_GetState>
 800545c:	2820      	cmp	r0, #32
 800545e:	d1fa      	bne.n	8005456 <init_iqs263+0x2aa>
	HAL_Delay(42);
 8005460:	202a      	movs	r0, #42	; 0x2a
 8005462:	f7fb fcff 	bl	8000e64 <HAL_Delay>

	// Redo ati
	data_buffer[0] = 0x10;
 8005466:	2310      	movs	r3, #16
 8005468:	702b      	strb	r3, [r5, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 800546a:	2110      	movs	r1, #16
 800546c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005470:	f7fc fc2a 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8005474:	2801      	cmp	r0, #1
 8005476:	d0f8      	beq.n	800546a <init_iqs263+0x2be>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8005478:	2232      	movs	r2, #50	; 0x32
 800547a:	2301      	movs	r3, #1
 800547c:	4822      	ldr	r0, [pc, #136]	; (8005508 <init_iqs263+0x35c>)
 800547e:	9202      	str	r2, [sp, #8]
 8005480:	9500      	str	r5, [sp, #0]
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	2209      	movs	r2, #9
 8005486:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005488:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 800548a:	f7fc fdf5 	bl	8002078 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 800548e:	4620      	mov	r0, r4
 8005490:	f7fd fc52 	bl	8002d38 <HAL_I2C_GetState>
 8005494:	2820      	cmp	r0, #32
 8005496:	d1fa      	bne.n	800548e <init_iqs263+0x2e2>
	HAL_Delay(42);
 8005498:	202a      	movs	r0, #42	; 0x2a
 800549a:	f7fb fce3 	bl	8000e64 <HAL_Delay>
	do
	    {
			HAL_Delay(10);
	        while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
	        HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 800549e:	4c1a      	ldr	r4, [pc, #104]	; (8005508 <init_iqs263+0x35c>)
			HAL_Delay(10);
 80054a0:	200a      	movs	r0, #10
 80054a2:	f7fb fcdf 	bl	8000e64 <HAL_Delay>
	        while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 80054a6:	2110      	movs	r1, #16
 80054a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ac:	f7fc fc0c 	bl	8001cc8 <HAL_GPIO_ReadPin>
 80054b0:	2801      	cmp	r0, #1
 80054b2:	d0f8      	beq.n	80054a6 <init_iqs263+0x2fa>
	        HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 80054b4:	2232      	movs	r2, #50	; 0x32
 80054b6:	2301      	movs	r3, #1
 80054b8:	9202      	str	r2, [sp, #8]
 80054ba:	9500      	str	r5, [sp, #0]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	461a      	mov	r2, r3
 80054c0:	2188      	movs	r1, #136	; 0x88
 80054c2:	4620      	mov	r0, r4
 80054c4:	f7fc feba 	bl	800223c <HAL_I2C_Mem_Read>
	        while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80054c8:	4620      	mov	r0, r4
 80054ca:	f7fd fc35 	bl	8002d38 <HAL_I2C_GetState>
 80054ce:	2820      	cmp	r0, #32
 80054d0:	d1fa      	bne.n	80054c8 <init_iqs263+0x31c>
	        HAL_Delay(42);
 80054d2:	202a      	movs	r0, #42	; 0x2a
 80054d4:	f7fb fcc6 	bl	8000e64 <HAL_Delay>
	    }
	    while ((data_buffer[0] & 0b00000100) == 0b00000100);
 80054d8:	782b      	ldrb	r3, [r5, #0]
 80054da:	075b      	lsls	r3, r3, #29
 80054dc:	d4e0      	bmi.n	80054a0 <init_iqs263+0x2f4>

	// read the error bit to determine if ATI error occured
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 80054de:	2110      	movs	r1, #16
 80054e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054e4:	f7fc fbf0 	bl	8001cc8 <HAL_GPIO_ReadPin>
 80054e8:	2801      	cmp	r0, #1
 80054ea:	d0f8      	beq.n	80054de <init_iqs263+0x332>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 80054ec:	2232      	movs	r2, #50	; 0x32
 80054ee:	2302      	movs	r3, #2
 80054f0:	4805      	ldr	r0, [pc, #20]	; (8005508 <init_iqs263+0x35c>)
 80054f2:	9202      	str	r2, [sp, #8]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	9500      	str	r5, [sp, #0]
 80054f8:	2301      	movs	r3, #1
 80054fa:	2209      	movs	r2, #9
 80054fc:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80054fe:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8005500:	f7fc fe9c 	bl	800223c <HAL_I2C_Mem_Read>
 8005504:	e004      	b.n	8005510 <init_iqs263+0x364>
 8005506:	bf00      	nop
 8005508:	200003a4 	.word	0x200003a4
 800550c:	200005fc 	.word	0x200005fc
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8005510:	4620      	mov	r0, r4
 8005512:	f7fd fc11 	bl	8002d38 <HAL_I2C_GetState>
 8005516:	2820      	cmp	r0, #32
 8005518:	d1fa      	bne.n	8005510 <init_iqs263+0x364>
	HAL_Delay(42);
 800551a:	202a      	movs	r0, #42	; 0x2a
 800551c:	f7fb fca2 	bl	8000e64 <HAL_Delay>
	if ( (data_buffer[1] & 0x02) == 0x02){
 8005520:	786b      	ldrb	r3, [r5, #1]
		return -1;
	}
	return 1;
 8005522:	f013 0f02 	tst.w	r3, #2
}
 8005526:	bf14      	ite	ne
 8005528:	f04f 30ff 	movne.w	r0, #4294967295
 800552c:	2001      	moveq	r0, #1
 800552e:	b006      	add	sp, #24
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	bf00      	nop

08005534 <handleEvents>:

void handleEvents(void){
 8005534:	b570      	push	{r4, r5, r6, lr}

//	uint8_t recv_buffer[16];
//	uint8_t touch_bytes_buffer[2] = {0x03, 0x0};
	display_set_temp = 0;
 8005536:	4d4a      	ldr	r5, [pc, #296]	; (8005660 <handleEvents+0x12c>)
 8005538:	2300      	movs	r3, #0
void handleEvents(void){
 800553a:	b084      	sub	sp, #16
	display_set_temp = 0;
 800553c:	702b      	strb	r3, [r5, #0]

//	 uint16_t detected_channel = 0;
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1);
 800553e:	2110      	movs	r1, #16
 8005540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005544:	f7fc fbc0 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8005548:	2801      	cmp	r0, #1
 800554a:	d0f8      	beq.n	800553e <handleEvents+0xa>
		//select sysflags
		uint8_t sysflag_buffer[] = {SYS_FLAGS, 0, 0, 0};
 800554c:	2400      	movs	r4, #0
 800554e:	2601      	movs	r6, #1
	    HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, IQS263_ADD, sysflag_buffer, 1, I2C_FIRST_FRAME);
 8005550:	9400      	str	r4, [sp, #0]
 8005552:	4633      	mov	r3, r6
 8005554:	aa03      	add	r2, sp, #12
 8005556:	2188      	movs	r1, #136	; 0x88
 8005558:	4842      	ldr	r0, [pc, #264]	; (8005664 <handleEvents+0x130>)
		uint8_t sysflag_buffer[] = {SYS_FLAGS, 0, 0, 0};
 800555a:	f88d 400d 	strb.w	r4, [sp, #13]
 800555e:	f88d 400e 	strb.w	r4, [sp, #14]
 8005562:	f88d 400f 	strb.w	r4, [sp, #15]
 8005566:	f88d 600c 	strb.w	r6, [sp, #12]
	    HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, IQS263_ADD, sysflag_buffer, 1, I2C_FIRST_FRAME);
 800556a:	f7fc ff4d 	bl	8002408 <HAL_I2C_Master_Sequential_Transmit_IT>
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800556e:	4c3d      	ldr	r4, [pc, #244]	; (8005664 <handleEvents+0x130>)
 8005570:	4620      	mov	r0, r4
 8005572:	f7fd fbe1 	bl	8002d38 <HAL_I2C_GetState>
 8005576:	2820      	cmp	r0, #32
 8005578:	d1fa      	bne.n	8005570 <handleEvents+0x3c>

		// Get sysflags byte
	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, (uint16_t)IQS263_ADD, &recv_buffer[1], 1, I2C_NEXT_FRAME);
 800557a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800557e:	4839      	ldr	r0, [pc, #228]	; (8005664 <handleEvents+0x130>)
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	4a39      	ldr	r2, [pc, #228]	; (8005668 <handleEvents+0x134>)
 8005584:	2301      	movs	r3, #1
 8005586:	2188      	movs	r1, #136	; 0x88
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8005588:	4604      	mov	r4, r0
	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, (uint16_t)IQS263_ADD, &recv_buffer[1], 1, I2C_NEXT_FRAME);
 800558a:	f7fc ff8b 	bl	80024a4 <HAL_I2C_Master_Sequential_Receive_IT>
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800558e:	4620      	mov	r0, r4
 8005590:	f7fd fbd2 	bl	8002d38 <HAL_I2C_GetState>
 8005594:	2820      	cmp	r0, #32
 8005596:	d1fa      	bne.n	800558e <handleEvents+0x5a>

		//select touch event
	    HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, IQS263_ADD, touch_bytes_buffer, 1, I2C_FIRST_FRAME);
 8005598:	2300      	movs	r3, #0
 800559a:	4832      	ldr	r0, [pc, #200]	; (8005664 <handleEvents+0x130>)
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	4a33      	ldr	r2, [pc, #204]	; (800566c <handleEvents+0x138>)
 80055a0:	2301      	movs	r3, #1
 80055a2:	2188      	movs	r1, #136	; 0x88
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80055a4:	4604      	mov	r4, r0
	    HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, IQS263_ADD, touch_bytes_buffer, 1, I2C_FIRST_FRAME);
 80055a6:	f7fc ff2f 	bl	8002408 <HAL_I2C_Master_Sequential_Transmit_IT>
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7fd fbc4 	bl	8002d38 <HAL_I2C_GetState>
 80055b0:	2820      	cmp	r0, #32
 80055b2:	d1fa      	bne.n	80055aa <handleEvents+0x76>

		// Get touch event byte
	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, (uint16_t)IQS263_ADD, &recv_buffer[2], 1, I2C_NEXT_FRAME);
 80055b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055b8:	482a      	ldr	r0, [pc, #168]	; (8005664 <handleEvents+0x130>)
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	4a2c      	ldr	r2, [pc, #176]	; (8005670 <handleEvents+0x13c>)
 80055be:	2301      	movs	r3, #1
 80055c0:	2188      	movs	r1, #136	; 0x88
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80055c2:	4604      	mov	r4, r0
	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, (uint16_t)IQS263_ADD, &recv_buffer[2], 1, I2C_NEXT_FRAME);
 80055c4:	f7fc ff6e 	bl	80024a4 <HAL_I2C_Master_Sequential_Receive_IT>
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7fd fbb5 	bl	8002d38 <HAL_I2C_GetState>
 80055ce:	2820      	cmp	r0, #32
 80055d0:	d1fa      	bne.n	80055c8 <handleEvents+0x94>



		//Part 2 coords
		// Select coord register
		uint8_t coordinates_buffer[2] = {0x02};
 80055d2:	aa04      	add	r2, sp, #16
 80055d4:	2300      	movs	r3, #0
 80055d6:	2102      	movs	r1, #2
		HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, IQS263_ADD, coordinates_buffer, 1, I2C_FIRST_FRAME);
 80055d8:	4822      	ldr	r0, [pc, #136]	; (8005664 <handleEvents+0x130>)
		uint8_t coordinates_buffer[2] = {0x02};
 80055da:	f8ad 3008 	strh.w	r3, [sp, #8]
 80055de:	f802 1d08 	strb.w	r1, [r2, #-8]!
		HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, IQS263_ADD, coordinates_buffer, 1, I2C_FIRST_FRAME);
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	2188      	movs	r1, #136	; 0x88
 80055e6:	2301      	movs	r3, #1
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80055e8:	4604      	mov	r4, r0
		HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, IQS263_ADD, coordinates_buffer, 1, I2C_FIRST_FRAME);
 80055ea:	f7fc ff0d 	bl	8002408 <HAL_I2C_Master_Sequential_Transmit_IT>
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80055ee:	4620      	mov	r0, r4
 80055f0:	f7fd fba2 	bl	8002d38 <HAL_I2C_GetState>
 80055f4:	2820      	cmp	r0, #32
 80055f6:	d1fa      	bne.n	80055ee <handleEvents+0xba>

		// Read coord register of 3 bytes
//

	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, (uint16_t)IQS263_ADD, &recv_buffer[4], 3, I2C_LAST_FRAME);
 80055f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055fc:	4819      	ldr	r0, [pc, #100]	; (8005664 <handleEvents+0x130>)
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	4a1c      	ldr	r2, [pc, #112]	; (8005674 <handleEvents+0x140>)
 8005602:	2303      	movs	r3, #3
 8005604:	2188      	movs	r1, #136	; 0x88
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8005606:	4604      	mov	r4, r0
	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, (uint16_t)IQS263_ADD, &recv_buffer[4], 3, I2C_LAST_FRAME);
 8005608:	f7fc ff4c 	bl	80024a4 <HAL_I2C_Master_Sequential_Receive_IT>
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800560c:	4620      	mov	r0, r4
 800560e:	f7fd fb93 	bl	8002d38 <HAL_I2C_GetState>
 8005612:	2820      	cmp	r0, #32
 8005614:	d1fa      	bne.n	800560c <handleEvents+0xd8>


		if ((recv_buffer[2]&0x40)== 0x40)	// flick right
 8005616:	4a18      	ldr	r2, [pc, #96]	; (8005678 <handleEvents+0x144>)
 8005618:	7893      	ldrb	r3, [r2, #2]
 800561a:	065c      	lsls	r4, r3, #25
 800561c:	d412      	bmi.n	8005644 <handleEvents+0x110>
			if(*set_temp + 1 <= 100){
			*set_temp += 1;
			display_set_temp = 1;
			}
		}
		else if((recv_buffer[2]&0x80)== 0x80) //flick left
 800561e:	0618      	lsls	r0, r3, #24
 8005620:	d402      	bmi.n	8005628 <handleEvents+0xf4>
				*set_temp -= 1;
				display_set_temp = 1;
			}
		}

		else if((recv_buffer[3]&0x02) == 0x02) // most left position on slider
 8005622:	78d3      	ldrb	r3, [r2, #3]
 8005624:	0799      	lsls	r1, r3, #30
 8005626:	d509      	bpl.n	800563c <handleEvents+0x108>
		{
			if(*set_temp - 1 >= 0 ){
 8005628:	4b14      	ldr	r3, [pc, #80]	; (800567c <handleEvents+0x148>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	7813      	ldrb	r3, [r2, #0]
 800562e:	b11b      	cbz	r3, 8005638 <handleEvents+0x104>
				*set_temp -= 1;
 8005630:	3b01      	subs	r3, #1
				display_set_temp = 1;
 8005632:	2101      	movs	r1, #1
				*set_temp -= 1;
 8005634:	7013      	strb	r3, [r2, #0]
				display_set_temp = 1;
 8005636:	7029      	strb	r1, [r5, #0]
			if(*set_temp +1 <= 100){
				*set_temp += 1;
				display_set_temp = 1;
			}
		}
}
 8005638:	b004      	add	sp, #16
 800563a:	bd70      	pop	{r4, r5, r6, pc}
		else if((recv_buffer[3]&0x04) == 0x04)	// middle position on slider
 800563c:	075a      	lsls	r2, r3, #29
 800563e:	d40c      	bmi.n	800565a <handleEvents+0x126>
		else if ((recv_buffer[3]&0x08) == 0x08)	// right most position on slider
 8005640:	071b      	lsls	r3, r3, #28
 8005642:	d5f9      	bpl.n	8005638 <handleEvents+0x104>
			if(*set_temp +1 <= 100){
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <handleEvents+0x148>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	7813      	ldrb	r3, [r2, #0]
 800564a:	2b63      	cmp	r3, #99	; 0x63
 800564c:	dcf4      	bgt.n	8005638 <handleEvents+0x104>
				*set_temp += 1;
 800564e:	3301      	adds	r3, #1
				display_set_temp = 1;
 8005650:	2101      	movs	r1, #1
				*set_temp += 1;
 8005652:	7013      	strb	r3, [r2, #0]
				display_set_temp = 1;
 8005654:	7029      	strb	r1, [r5, #0]
}
 8005656:	b004      	add	sp, #16
 8005658:	bd70      	pop	{r4, r5, r6, pc}
			display_set_temp = 1;
 800565a:	2301      	movs	r3, #1
 800565c:	702b      	strb	r3, [r5, #0]
 800565e:	e7eb      	b.n	8005638 <handleEvents+0x104>
 8005660:	20000288 	.word	0x20000288
 8005664:	200003a4 	.word	0x200003a4
 8005668:	200005e9 	.word	0x200005e9
 800566c:	20000048 	.word	0x20000048
 8005670:	200005ea 	.word	0x200005ea
 8005674:	200005ec 	.word	0x200005ec
 8005678:	200005e8 	.word	0x200005e8
 800567c:	200002e0 	.word	0x200002e0

08005680 <init_peripherals>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 8005680:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 8005682:	2201      	movs	r2, #1
 8005684:	2120      	movs	r1, #32
 8005686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800568a:	f7fc fb23 	bl	8001cd4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 800568e:	2201      	movs	r2, #1
 8005690:	2180      	movs	r1, #128	; 0x80
 8005692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005696:	f7fc fb1d 	bl	8001cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 800569a:	2201      	movs	r2, #1
 800569c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056a4:	f7fc fb16 	bl	8001cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80056a8:	2201      	movs	r2, #1
 80056aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056b2:	f7fc fb0f 	bl	8001cd4 <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80056b6:	4c90      	ldr	r4, [pc, #576]	; (80058f8 <init_peripherals+0x278>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	2108      	movs	r1, #8
 80056bc:	4620      	mov	r0, r4
 80056be:	f7fc fb09 	bl	8001cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80056c2:	2201      	movs	r2, #1
 80056c4:	2110      	movs	r1, #16
 80056c6:	4620      	mov	r0, r4
 80056c8:	f7fc fb04 	bl	8001cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80056cc:	2201      	movs	r2, #1
 80056ce:	2120      	movs	r1, #32
 80056d0:	4620      	mov	r0, r4
 80056d2:	f7fc faff 	bl	8001cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 80056d6:	2201      	movs	r2, #1
 80056d8:	2140      	movs	r1, #64	; 0x40
 80056da:	4620      	mov	r0, r4
 80056dc:	f7fc fafa 	bl	8001cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80056e0:	2201      	movs	r2, #1
 80056e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7fc faf4 	bl	8001cd4 <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 80056ec:	2201      	movs	r2, #1
 80056ee:	2180      	movs	r1, #128	; 0x80
 80056f0:	4882      	ldr	r0, [pc, #520]	; (80058fc <init_peripherals+0x27c>)
 80056f2:	f7fc faef 	bl	8001cd4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 80056f6:	2200      	movs	r2, #0
 80056f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056fc:	4620      	mov	r0, r4
 80056fe:	f7fc fae9 	bl	8001cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8005702:	2201      	movs	r2, #1
 8005704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005708:	4620      	mov	r0, r4
 800570a:	f7fc fae3 	bl	8001cd4 <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 800570e:	200f      	movs	r0, #15
 8005710:	f001 fdc6 	bl	80072a0 <malloc>
 8005714:	4b7a      	ldr	r3, [pc, #488]	; (8005900 <init_peripherals+0x280>)
 8005716:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 8005718:	2400      	movs	r4, #0
 800571a:	6004      	str	r4, [r0, #0]
 800571c:	6044      	str	r4, [r0, #4]
 800571e:	6084      	str	r4, [r0, #8]
 8005720:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8005724:	2032      	movs	r0, #50	; 0x32
 8005726:	f001 fdbb 	bl	80072a0 <malloc>
 800572a:	4b76      	ldr	r3, [pc, #472]	; (8005904 <init_peripherals+0x284>)
 800572c:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 800572e:	2232      	movs	r2, #50	; 0x32
 8005730:	4621      	mov	r1, r4
 8005732:	f001 fdc8 	bl	80072c6 <memset>

	uart_command = (uint8_t*)malloc(60);
 8005736:	203c      	movs	r0, #60	; 0x3c
 8005738:	f001 fdb2 	bl	80072a0 <malloc>
 800573c:	4e72      	ldr	r6, [pc, #456]	; (8005908 <init_peripherals+0x288>)
 800573e:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 8005740:	253c      	movs	r5, #60	; 0x3c
 8005742:	462a      	mov	r2, r5
 8005744:	4621      	mov	r1, r4
 8005746:	f001 fdbe 	bl	80072c6 <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 800574a:	4628      	mov	r0, r5
 800574c:	f001 fda8 	bl	80072a0 <malloc>
 8005750:	4b6e      	ldr	r3, [pc, #440]	; (800590c <init_peripherals+0x28c>)
 8005752:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 8005754:	462a      	mov	r2, r5
 8005756:	4621      	mov	r1, r4
 8005758:	6830      	ldr	r0, [r6, #0]
 800575a:	f001 fdb4 	bl	80072c6 <memset>



	set_temp = (uint8_t*)malloc(4);
 800575e:	2004      	movs	r0, #4
 8005760:	f001 fd9e 	bl	80072a0 <malloc>
 8005764:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <init_peripherals+0x290>)
 8005766:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 8005768:	6004      	str	r4, [r0, #0]
	*set_temp = 0;
 800576a:	7004      	strb	r4, [r0, #0]
//	segment_val =set_temp;
	//	  memset(segment_val, 0x00, 4);
	segment_val = (char*)malloc(4);
 800576c:	2004      	movs	r0, #4
 800576e:	f001 fd97 	bl	80072a0 <malloc>
 8005772:	4b68      	ldr	r3, [pc, #416]	; (8005914 <init_peripherals+0x294>)
 8005774:	6018      	str	r0, [r3, #0]
	memset(segment_val, 0x00, 4);
 8005776:	6004      	str	r4, [r0, #0]
//
	temp_val = (char*)malloc(4);
 8005778:	2004      	movs	r0, #4
 800577a:	f001 fd91 	bl	80072a0 <malloc>
 800577e:	4b66      	ldr	r3, [pc, #408]	; (8005918 <init_peripherals+0x298>)
 8005780:	6018      	str	r0, [r3, #0]
	memset(temp_val, 0x00, 4);
 8005782:	6004      	str	r4, [r0, #0]

	ADC1_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8005784:	2014      	movs	r0, #20
 8005786:	f001 fd8b 	bl	80072a0 <malloc>
 800578a:	4b64      	ldr	r3, [pc, #400]	; (800591c <init_peripherals+0x29c>)
 800578c:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 5);
 800578e:	6004      	str	r4, [r0, #0]
 8005790:	7104      	strb	r4, [r0, #4]

	ADC2_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8005792:	2014      	movs	r0, #20
 8005794:	f001 fd84 	bl	80072a0 <malloc>
 8005798:	4b61      	ldr	r3, [pc, #388]	; (8005920 <init_peripherals+0x2a0>)
 800579a:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 5);
 800579c:	6004      	str	r4, [r0, #0]
 800579e:	7104      	strb	r4, [r0, #4]

	voltage_rms =(char*)malloc(3*sizeof(char));
 80057a0:	2003      	movs	r0, #3
 80057a2:	f001 fd7d 	bl	80072a0 <malloc>
 80057a6:	4b5f      	ldr	r3, [pc, #380]	; (8005924 <init_peripherals+0x2a4>)
 80057a8:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 80057aa:	8004      	strh	r4, [r0, #0]
 80057ac:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 80057ae:	2004      	movs	r0, #4
 80057b0:	f001 fd76 	bl	80072a0 <malloc>
 80057b4:	4b5c      	ldr	r3, [pc, #368]	; (8005928 <init_peripherals+0x2a8>)
 80057b6:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 80057b8:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 80057ba:	2014      	movs	r0, #20
 80057bc:	f001 fd70 	bl	80072a0 <malloc>
 80057c0:	4a5a      	ldr	r2, [pc, #360]	; (800592c <init_peripherals+0x2ac>)
 80057c2:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 80057c4:	6004      	str	r4, [r0, #0]
 80057c6:	6044      	str	r4, [r0, #4]
 80057c8:	6084      	str	r4, [r0, #8]
 80057ca:	60c4      	str	r4, [r0, #12]
 80057cc:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 80057ce:	4b58      	ldr	r3, [pc, #352]	; (8005930 <init_peripherals+0x2b0>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4958      	ldr	r1, [pc, #352]	; (8005934 <init_peripherals+0x2b4>)
 80057d4:	f001 fe3c 	bl	8007450 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80057d8:	2010      	movs	r0, #16
 80057da:	f001 fd61 	bl	80072a0 <malloc>
 80057de:	4b56      	ldr	r3, [pc, #344]	; (8005938 <init_peripherals+0x2b8>)
 80057e0:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80057e2:	2010      	movs	r0, #16
 80057e4:	f001 fd5c 	bl	80072a0 <malloc>
 80057e8:	4b54      	ldr	r3, [pc, #336]	; (800593c <init_peripherals+0x2bc>)
 80057ea:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 80057ec:	2004      	movs	r0, #4
 80057ee:	f001 fd57 	bl	80072a0 <malloc>
 80057f2:	4b53      	ldr	r3, [pc, #332]	; (8005940 <init_peripherals+0x2c0>)
 80057f4:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 80057f6:	2004      	movs	r0, #4
 80057f8:	f001 fd52 	bl	80072a0 <malloc>
 80057fc:	4b51      	ldr	r3, [pc, #324]	; (8005944 <init_peripherals+0x2c4>)
 80057fe:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 8005800:	4a51      	ldr	r2, [pc, #324]	; (8005948 <init_peripherals+0x2c8>)
 8005802:	4b52      	ldr	r3, [pc, #328]	; (800594c <init_peripherals+0x2cc>)
 8005804:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 8005806:	4a52      	ldr	r2, [pc, #328]	; (8005950 <init_peripherals+0x2d0>)
 8005808:	4b52      	ldr	r3, [pc, #328]	; (8005954 <init_peripherals+0x2d4>)
 800580a:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 800580c:	200f      	movs	r0, #15
 800580e:	f001 fd47 	bl	80072a0 <malloc>
 8005812:	4e51      	ldr	r6, [pc, #324]	; (8005958 <init_peripherals+0x2d8>)
 8005814:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 8005816:	6004      	str	r4, [r0, #0]
 8005818:	6044      	str	r4, [r0, #4]
 800581a:	6084      	str	r4, [r0, #8]
 800581c:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 8005820:	200f      	movs	r0, #15
 8005822:	f001 fd3d 	bl	80072a0 <malloc>
 8005826:	4d4d      	ldr	r5, [pc, #308]	; (800595c <init_peripherals+0x2dc>)
 8005828:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 800582a:	6004      	str	r4, [r0, #0]
 800582c:	6044      	str	r4, [r0, #4]
 800582e:	6084      	str	r4, [r0, #8]
 8005830:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8005834:	200f      	movs	r0, #15
 8005836:	f001 fd33 	bl	80072a0 <malloc>
 800583a:	4b49      	ldr	r3, [pc, #292]	; (8005960 <init_peripherals+0x2e0>)
 800583c:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 800583e:	6004      	str	r4, [r0, #0]
 8005840:	6044      	str	r4, [r0, #4]
 8005842:	6084      	str	r4, [r0, #8]
 8005844:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 8005848:	4b46      	ldr	r3, [pc, #280]	; (8005964 <init_peripherals+0x2e4>)
 800584a:	6832      	ldr	r2, [r6, #0]
 800584c:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 800584e:	682a      	ldr	r2, [r5, #0]
 8005850:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 8005852:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 8005854:	2014      	movs	r0, #20
 8005856:	f001 fd23 	bl	80072a0 <malloc>
 800585a:	4b43      	ldr	r3, [pc, #268]	; (8005968 <init_peripherals+0x2e8>)
 800585c:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 800585e:	6004      	str	r4, [r0, #0]
 8005860:	6044      	str	r4, [r0, #4]
 8005862:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 8005864:	4b41      	ldr	r3, [pc, #260]	; (800596c <init_peripherals+0x2ec>)
 8005866:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 8005868:	2018      	movs	r0, #24
 800586a:	f001 fd19 	bl	80072a0 <malloc>
 800586e:	4e40      	ldr	r6, [pc, #256]	; (8005970 <init_peripherals+0x2f0>)
 8005870:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 8005872:	6004      	str	r4, [r0, #0]
 8005874:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 8005876:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 8005878:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 800587a:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800587c:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800587e:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 8005880:	2004      	movs	r0, #4
 8005882:	f001 fd0d 	bl	80072a0 <malloc>
 8005886:	4b3b      	ldr	r3, [pc, #236]	; (8005974 <init_peripherals+0x2f4>)
 8005888:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 800588a:	2501      	movs	r5, #1
 800588c:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 800588e:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 8005890:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 8005892:	70c4      	strb	r4, [r0, #3]


//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);

	log_receiced_num = (uint8_t*)malloc(3*sizeof(uint8_t));
 8005894:	2003      	movs	r0, #3
 8005896:	f001 fd03 	bl	80072a0 <malloc>
 800589a:	4b37      	ldr	r3, [pc, #220]	; (8005978 <init_peripherals+0x2f8>)
 800589c:	6018      	str	r0, [r3, #0]
	memset(log_receiced_num, 0x00, 3);
 800589e:	8004      	strh	r4, [r0, #0]
 80058a0:	7084      	strb	r4, [r0, #2]
	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 80058a2:	2046      	movs	r0, #70	; 0x46
 80058a4:	f001 fcfc 	bl	80072a0 <malloc>
 80058a8:	4b34      	ldr	r3, [pc, #208]	; (800597c <init_peripherals+0x2fc>)
 80058aa:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 80058ac:	2246      	movs	r2, #70	; 0x46
 80058ae:	4621      	mov	r1, r4
 80058b0:	f001 fd09 	bl	80072c6 <memset>


	new_time = malloc(6*sizeof(uint32_t));
 80058b4:	2018      	movs	r0, #24
 80058b6:	f001 fcf3 	bl	80072a0 <malloc>
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <init_peripherals+0x300>)
 80058bc:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 80058be:	6004      	str	r4, [r0, #0]
 80058c0:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 80058c2:	2003      	movs	r0, #3
 80058c4:	f001 fcec 	bl	80072a0 <malloc>
 80058c8:	4b2e      	ldr	r3, [pc, #184]	; (8005984 <init_peripherals+0x304>)
 80058ca:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 80058cc:	8004      	strh	r4, [r0, #0]
 80058ce:	7084      	strb	r4, [r0, #2]

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 80058d0:	2004      	movs	r0, #4
 80058d2:	f001 fce5 	bl	80072a0 <malloc>
 80058d6:	4b2c      	ldr	r3, [pc, #176]	; (8005988 <init_peripherals+0x308>)
 80058d8:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 80058da:	2010      	movs	r0, #16
 80058dc:	f001 fce0 	bl	80072a0 <malloc>
 80058e0:	4b2a      	ldr	r3, [pc, #168]	; (800598c <init_peripherals+0x30c>)
 80058e2:	6018      	str	r0, [r3, #0]

	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 80058e4:	462a      	mov	r2, r5
 80058e6:	6831      	ldr	r1, [r6, #0]
 80058e8:	4829      	ldr	r0, [pc, #164]	; (8005990 <init_peripherals+0x310>)
 80058ea:	f7fd ff45 	bl	8003778 <HAL_RTC_GetTime>

	HAL_TIM_Base_Start_IT(&htim2);
 80058ee:	4829      	ldr	r0, [pc, #164]	; (8005994 <init_peripherals+0x314>)
 80058f0:	f7fe f9fc 	bl	8003cec <HAL_TIM_Base_Start_IT>
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
 80058f6:	bf00      	nop
 80058f8:	48000400 	.word	0x48000400
 80058fc:	48000800 	.word	0x48000800
 8005900:	200005e0 	.word	0x200005e0
 8005904:	200002d4 	.word	0x200002d4
 8005908:	20000300 	.word	0x20000300
 800590c:	20000304 	.word	0x20000304
 8005910:	200002e0 	.word	0x200002e0
 8005914:	200002dc 	.word	0x200002dc
 8005918:	200002ec 	.word	0x200002ec
 800591c:	2000024c 	.word	0x2000024c
 8005920:	20000250 	.word	0x20000250
 8005924:	20000314 	.word	0x20000314
 8005928:	20000280 	.word	0x20000280
 800592c:	200002f8 	.word	0x200002f8
 8005930:	20000318 	.word	0x20000318
 8005934:	08008010 	.word	0x08008010
 8005938:	20000310 	.word	0x20000310
 800593c:	2000027c 	.word	0x2000027c
 8005940:	20000274 	.word	0x20000274
 8005944:	2000029c 	.word	0x2000029c
 8005948:	20000014 	.word	0x20000014
 800594c:	200002b0 	.word	0x200002b0
 8005950:	2000004c 	.word	0x2000004c
 8005954:	2000030c 	.word	0x2000030c
 8005958:	200002a4 	.word	0x200002a4
 800595c:	200002a8 	.word	0x200002a8
 8005960:	200002ac 	.word	0x200002ac
 8005964:	2000061c 	.word	0x2000061c
 8005968:	200002b4 	.word	0x200002b4
 800596c:	200005f8 	.word	0x200005f8
 8005970:	200002f4 	.word	0x200002f4
 8005974:	20000284 	.word	0x20000284
 8005978:	200002c0 	.word	0x200002c0
 800597c:	20000298 	.word	0x20000298
 8005980:	200002c4 	.word	0x200002c4
 8005984:	200002e8 	.word	0x200002e8
 8005988:	20000290 	.word	0x20000290
 800598c:	200002c8 	.word	0x200002c8
 8005990:	200004a8 	.word	0x200004a8
 8005994:	200004e0 	.word	0x200004e0

08005998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8005998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800599e:	4b55      	ldr	r3, [pc, #340]	; (8005af4 <MX_GPIO_Init+0x15c>)
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80059a6:	615a      	str	r2, [r3, #20]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80059ae:	9201      	str	r2, [sp, #4]
 80059b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80059b8:	615a      	str	r2, [r3, #20]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80059c0:	9202      	str	r2, [sp, #8]
 80059c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80059ca:	615a      	str	r2, [r3, #20]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80059d2:	9203      	str	r2, [sp, #12]
 80059d4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80059dc:	615a      	str	r2, [r3, #20]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 80059e8:	2201      	movs	r2, #1
 80059ea:	2112      	movs	r1, #18
 80059ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059f0:	f7fc f970 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80059f4:	2200      	movs	r2, #0
 80059f6:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80059fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059fe:	f7fc f969 	bl	8001cd4 <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8005a02:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005b08 <MX_GPIO_Init+0x170>
 8005a06:	2200      	movs	r2, #0
 8005a08:	f246 4178 	movw	r1, #25720	; 0x6478
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	f7fc f961 	bl	8001cd4 <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8005a12:	4e39      	ldr	r6, [pc, #228]	; (8005af8 <MX_GPIO_Init+0x160>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f7fc f95b 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a22:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a24:	4b35      	ldr	r3, [pc, #212]	; (8005afc <MX_GPIO_Init+0x164>)
 8005a26:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a28:	2400      	movs	r4, #0
 8005a2a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a2c:	a905      	add	r1, sp, #20
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f7fc f860 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8005a34:	2303      	movs	r3, #3
 8005a36:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a38:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a3c:	a905      	add	r1, sp, #20
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f7fc f858 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8005a44:	2501      	movs	r5, #1
 8005a46:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a48:	4b2d      	ldr	r3, [pc, #180]	; (8005b00 <MX_GPIO_Init+0x168>)
 8005a4a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005a4c:	2702      	movs	r7, #2
 8005a4e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8005a50:	a905      	add	r1, sp, #20
 8005a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a56:	f7fc f84d 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 8005a5a:	2312      	movs	r3, #18
 8005a5c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005a5e:	2311      	movs	r3, #17
 8005a60:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a62:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a64:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a66:	a905      	add	r1, sp, #20
 8005a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a6c:	f7fc f842 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8005a70:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8005a74:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a76:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a78:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a7c:	a905      	add	r1, sp, #20
 8005a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a82:	f7fc f837 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005a86:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a88:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a8c:	a905      	add	r1, sp, #20
 8005a8e:	4640      	mov	r0, r8
 8005a90:	f7fc f830 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8005a94:	f246 4378 	movw	r3, #25720	; 0x6478
 8005a98:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a9a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a9e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aa0:	a905      	add	r1, sp, #20
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	f7fc f826 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005aac:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <MX_GPIO_Init+0x16c>)
 8005aae:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ab0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 8005ab2:	a905      	add	r1, sp, #20
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7fc f81d 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005abe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 8005ac4:	a905      	add	r1, sp, #20
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7fc f814 	bl	8001af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005acc:	4622      	mov	r2, r4
 8005ace:	4621      	mov	r1, r4
 8005ad0:	2006      	movs	r0, #6
 8005ad2:	f7fb fe01 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005ad6:	2006      	movs	r0, #6
 8005ad8:	f7fb fe34 	bl	8001744 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8005adc:	462a      	mov	r2, r5
 8005ade:	4621      	mov	r1, r4
 8005ae0:	2017      	movs	r0, #23
 8005ae2:	f7fb fdf9 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005ae6:	2017      	movs	r0, #23
 8005ae8:	f7fb fe2c 	bl	8001744 <HAL_NVIC_EnableIRQ>

}
 8005aec:	b00a      	add	sp, #40	; 0x28
 8005aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	48000800 	.word	0x48000800
 8005afc:	10110000 	.word	0x10110000
 8005b00:	10210000 	.word	0x10210000
 8005b04:	10310000 	.word	0x10310000
 8005b08:	48000400 	.word	0x48000400

08005b0c <MX_DMA_Init>:
{
 8005b0c:	b500      	push	{lr}
 8005b0e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <MX_DMA_Init+0x30>)
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	615a      	str	r2, [r3, #20]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8005b24:	2201      	movs	r2, #1
 8005b26:	2100      	movs	r1, #0
 8005b28:	200c      	movs	r0, #12
 8005b2a:	f7fb fdd5 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005b2e:	200c      	movs	r0, #12
 8005b30:	f7fb fe08 	bl	8001744 <HAL_NVIC_EnableIRQ>
}
 8005b34:	b003      	add	sp, #12
 8005b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000

08005b40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8005b40:	4770      	bx	lr

08005b42 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005b42:	e7fe      	b.n	8005b42 <_Error_Handler>

08005b44 <MX_TIM2_Init>:
{
 8005b44:	b500      	push	{lr}
 8005b46:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8005b48:	4818      	ldr	r0, [pc, #96]	; (8005bac <MX_TIM2_Init+0x68>)
 8005b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b4e:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 8005b50:	2301      	movs	r3, #1
 8005b52:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b54:	2300      	movs	r3, #0
 8005b56:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 326400;
 8005b58:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <MX_TIM2_Init+0x6c>)
 8005b5a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b5c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b5e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005b60:	f7fe fab6 	bl	80040d0 <HAL_TIM_Base_Init>
 8005b64:	b998      	cbnz	r0, 8005b8e <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b66:	a908      	add	r1, sp, #32
 8005b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b6c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005b70:	480e      	ldr	r0, [pc, #56]	; (8005bac <MX_TIM2_Init+0x68>)
 8005b72:	f7fe f8c7 	bl	8003d04 <HAL_TIM_ConfigClockSource>
 8005b76:	b978      	cbnz	r0, 8005b98 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b7c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b7e:	a901      	add	r1, sp, #4
 8005b80:	480a      	ldr	r0, [pc, #40]	; (8005bac <MX_TIM2_Init+0x68>)
 8005b82:	f7fe fac1 	bl	8004108 <HAL_TIMEx_MasterConfigSynchronization>
 8005b86:	b960      	cbnz	r0, 8005ba2 <MX_TIM2_Init+0x5e>
}
 8005b88:	b009      	add	sp, #36	; 0x24
 8005b8a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8005b8e:	f240 119f 	movw	r1, #415	; 0x19f
 8005b92:	4808      	ldr	r0, [pc, #32]	; (8005bb4 <MX_TIM2_Init+0x70>)
 8005b94:	f7ff ffd5 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005b98:	f240 11a5 	movw	r1, #421	; 0x1a5
 8005b9c:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <MX_TIM2_Init+0x70>)
 8005b9e:	f7ff ffd0 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005ba2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8005ba6:	4803      	ldr	r0, [pc, #12]	; (8005bb4 <MX_TIM2_Init+0x70>)
 8005ba8:	f7ff ffcb 	bl	8005b42 <_Error_Handler>
 8005bac:	200004e0 	.word	0x200004e0
 8005bb0:	0004fb00 	.word	0x0004fb00
 8005bb4:	08008014 	.word	0x08008014

08005bb8 <MX_USART1_UART_Init>:
{
 8005bb8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8005bba:	480c      	ldr	r0, [pc, #48]	; (8005bec <MX_USART1_UART_Init+0x34>)
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <MX_USART1_UART_Init+0x38>)
 8005bbe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8005bc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005bc4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005bca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005bcc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005bce:	220c      	movs	r2, #12
 8005bd0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bd2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bd4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bd6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bd8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005bda:	f7fe fcd9 	bl	8004590 <HAL_UART_Init>
 8005bde:	b900      	cbnz	r0, 8005be2 <MX_USART1_UART_Init+0x2a>
 8005be0:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8005be2:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005be6:	4803      	ldr	r0, [pc, #12]	; (8005bf4 <MX_USART1_UART_Init+0x3c>)
 8005be8:	f7ff ffab 	bl	8005b42 <_Error_Handler>
 8005bec:	20000438 	.word	0x20000438
 8005bf0:	40013800 	.word	0x40013800
 8005bf4:	08008014 	.word	0x08008014

08005bf8 <MX_ADC2_Init>:
{
 8005bf8:	b500      	push	{lr}
 8005bfa:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 8005bfc:	482d      	ldr	r0, [pc, #180]	; (8005cb4 <MX_ADC2_Init+0xbc>)
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <MX_ADC2_Init+0xc0>)
 8005c00:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005c02:	2300      	movs	r3, #0
 8005c04:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005c06:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005c08:	2201      	movs	r2, #1
 8005c0a:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005c0c:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005c0e:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c10:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c12:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c14:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8005c16:	2104      	movs	r1, #4
 8005c18:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005c1a:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c1c:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005c1e:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005c20:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005c22:	f7fb f9db 	bl	8000fdc <HAL_ADC_Init>
 8005c26:	bb60      	cbnz	r0, 8005c82 <MX_ADC2_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_8;
 8005c28:	2308      	movs	r3, #8
 8005c2a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005c30:	2300      	movs	r3, #0
 8005c32:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8005c34:	2207      	movs	r2, #7
 8005c36:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005c38:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8005c3a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c3c:	4669      	mov	r1, sp
 8005c3e:	481d      	ldr	r0, [pc, #116]	; (8005cb4 <MX_ADC2_Init+0xbc>)
 8005c40:	f7fb fba2 	bl	8001388 <HAL_ADC_ConfigChannel>
 8005c44:	bb10      	cbnz	r0, 8005c8c <MX_ADC2_Init+0x94>
  sConfig.Channel = ADC_CHANNEL_9;
 8005c46:	2309      	movs	r3, #9
 8005c48:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c4e:	4669      	mov	r1, sp
 8005c50:	4818      	ldr	r0, [pc, #96]	; (8005cb4 <MX_ADC2_Init+0xbc>)
 8005c52:	f7fb fb99 	bl	8001388 <HAL_ADC_ConfigChannel>
 8005c56:	b9f0      	cbnz	r0, 8005c96 <MX_ADC2_Init+0x9e>
  sConfig.Channel = ADC_CHANNEL_12;
 8005c58:	230c      	movs	r3, #12
 8005c5a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c60:	4669      	mov	r1, sp
 8005c62:	4814      	ldr	r0, [pc, #80]	; (8005cb4 <MX_ADC2_Init+0xbc>)
 8005c64:	f7fb fb90 	bl	8001388 <HAL_ADC_ConfigChannel>
 8005c68:	b9d0      	cbnz	r0, 8005ca0 <MX_ADC2_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_15;
 8005c6a:	230f      	movs	r3, #15
 8005c6c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005c6e:	2304      	movs	r3, #4
 8005c70:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c72:	4669      	mov	r1, sp
 8005c74:	480f      	ldr	r0, [pc, #60]	; (8005cb4 <MX_ADC2_Init+0xbc>)
 8005c76:	f7fb fb87 	bl	8001388 <HAL_ADC_ConfigChannel>
 8005c7a:	b9b0      	cbnz	r0, 8005caa <MX_ADC2_Init+0xb2>
}
 8005c7c:	b007      	add	sp, #28
 8005c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8005c82:	f240 1109 	movw	r1, #265	; 0x109
 8005c86:	480d      	ldr	r0, [pc, #52]	; (8005cbc <MX_ADC2_Init+0xc4>)
 8005c88:	f7ff ff5b 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005c8c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005c90:	480a      	ldr	r0, [pc, #40]	; (8005cbc <MX_ADC2_Init+0xc4>)
 8005c92:	f7ff ff56 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005c96:	f240 111f 	movw	r1, #287	; 0x11f
 8005c9a:	4808      	ldr	r0, [pc, #32]	; (8005cbc <MX_ADC2_Init+0xc4>)
 8005c9c:	f7ff ff51 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005ca0:	f44f 7194 	mov.w	r1, #296	; 0x128
 8005ca4:	4805      	ldr	r0, [pc, #20]	; (8005cbc <MX_ADC2_Init+0xc4>)
 8005ca6:	f7ff ff4c 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005caa:	f240 1131 	movw	r1, #305	; 0x131
 8005cae:	4803      	ldr	r0, [pc, #12]	; (8005cbc <MX_ADC2_Init+0xc4>)
 8005cb0:	f7ff ff47 	bl	8005b42 <_Error_Handler>
 8005cb4:	20000350 	.word	0x20000350
 8005cb8:	50000100 	.word	0x50000100
 8005cbc:	08008014 	.word	0x08008014

08005cc0 <MX_RTC_Init>:
{
 8005cc0:	b500      	push	{lr}
 8005cc2:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 8005cc4:	482c      	ldr	r0, [pc, #176]	; (8005d78 <MX_RTC_Init+0xb8>)
 8005cc6:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <MX_RTC_Init+0xbc>)
 8005cc8:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8005cca:	2100      	movs	r1, #0
 8005ccc:	f7fe f808 	bl	8003ce0 <HAL_RTCEx_BKUPRead>
 8005cd0:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8005cd4:	4298      	cmp	r0, r3
 8005cd6:	d037      	beq.n	8005d48 <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005cd8:	4827      	ldr	r0, [pc, #156]	; (8005d78 <MX_RTC_Init+0xb8>)
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005cde:	227f      	movs	r2, #127	; 0x7f
 8005ce0:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8005ce2:	22ff      	movs	r2, #255	; 0xff
 8005ce4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005ce6:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005ce8:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005cea:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005cec:	f7fd fdde 	bl	80038ac <HAL_RTC_Init>
 8005cf0:	bb68      	cbnz	r0, 8005d4e <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8005cf8:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8005cfc:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005d00:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005d02:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005d04:	2201      	movs	r2, #1
 8005d06:	a901      	add	r1, sp, #4
 8005d08:	481b      	ldr	r0, [pc, #108]	; (8005d78 <MX_RTC_Init+0xb8>)
 8005d0a:	f7fd fe27 	bl	800395c <HAL_RTC_SetTime>
 8005d0e:	bb18      	cbnz	r0, 8005d58 <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005d10:	2201      	movs	r2, #1
 8005d12:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8005d16:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8005d1a:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005d24:	4669      	mov	r1, sp
 8005d26:	4814      	ldr	r0, [pc, #80]	; (8005d78 <MX_RTC_Init+0xb8>)
 8005d28:	f7fd feb8 	bl	8003a9c <HAL_RTC_SetDate>
 8005d2c:	b9c8      	cbnz	r0, 8005d62 <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d34:	4810      	ldr	r0, [pc, #64]	; (8005d78 <MX_RTC_Init+0xb8>)
 8005d36:	f7fd ff3f 	bl	8003bb8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005d3a:	b9b8      	cbnz	r0, 8005d6c <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8005d3c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005d40:	2100      	movs	r1, #0
 8005d42:	480d      	ldr	r0, [pc, #52]	; (8005d78 <MX_RTC_Init+0xb8>)
 8005d44:	f7fd ffc6 	bl	8003cd4 <HAL_RTCEx_BKUPWrite>
}
 8005d48:	b007      	add	sp, #28
 8005d4a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8005d4e:	f240 116b 	movw	r1, #363	; 0x16b
 8005d52:	480b      	ldr	r0, [pc, #44]	; (8005d80 <MX_RTC_Init+0xc0>)
 8005d54:	f7ff fef5 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005d58:	f240 1177 	movw	r1, #375	; 0x177
 8005d5c:	4808      	ldr	r0, [pc, #32]	; (8005d80 <MX_RTC_Init+0xc0>)
 8005d5e:	f7ff fef0 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005d62:	f240 1181 	movw	r1, #385	; 0x181
 8005d66:	4806      	ldr	r0, [pc, #24]	; (8005d80 <MX_RTC_Init+0xc0>)
 8005d68:	f7ff feeb 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005d6c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8005d70:	4803      	ldr	r0, [pc, #12]	; (8005d80 <MX_RTC_Init+0xc0>)
 8005d72:	f7ff fee6 	bl	8005b42 <_Error_Handler>
 8005d76:	bf00      	nop
 8005d78:	200004a8 	.word	0x200004a8
 8005d7c:	40002800 	.word	0x40002800
 8005d80:	08008014 	.word	0x08008014

08005d84 <MX_I2C1_Init>:
{
 8005d84:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8005d86:	4816      	ldr	r0, [pc, #88]	; (8005de0 <MX_I2C1_Init+0x5c>)
 8005d88:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <MX_I2C1_Init+0x60>)
 8005d8a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8005d8c:	f240 230b 	movw	r3, #523	; 0x20b
 8005d90:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d96:	2201      	movs	r2, #1
 8005d98:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d9a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005d9c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d9e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005da0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005da2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005da4:	f7fc f912 	bl	8001fcc <HAL_I2C_Init>
 8005da8:	b950      	cbnz	r0, 8005dc0 <MX_I2C1_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005daa:	2100      	movs	r1, #0
 8005dac:	480c      	ldr	r0, [pc, #48]	; (8005de0 <MX_I2C1_Init+0x5c>)
 8005dae:	f7fc ffc7 	bl	8002d40 <HAL_I2CEx_ConfigAnalogFilter>
 8005db2:	b950      	cbnz	r0, 8005dca <MX_I2C1_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005db4:	2100      	movs	r1, #0
 8005db6:	480a      	ldr	r0, [pc, #40]	; (8005de0 <MX_I2C1_Init+0x5c>)
 8005db8:	f7fc ffec 	bl	8002d94 <HAL_I2CEx_ConfigDigitalFilter>
 8005dbc:	b950      	cbnz	r0, 8005dd4 <MX_I2C1_Init+0x50>
 8005dbe:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8005dc0:	f240 1145 	movw	r1, #325	; 0x145
 8005dc4:	4808      	ldr	r0, [pc, #32]	; (8005de8 <MX_I2C1_Init+0x64>)
 8005dc6:	f7ff febc 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005dca:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005dce:	4806      	ldr	r0, [pc, #24]	; (8005de8 <MX_I2C1_Init+0x64>)
 8005dd0:	f7ff feb7 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005dd4:	f240 1153 	movw	r1, #339	; 0x153
 8005dd8:	4803      	ldr	r0, [pc, #12]	; (8005de8 <MX_I2C1_Init+0x64>)
 8005dda:	f7ff feb2 	bl	8005b42 <_Error_Handler>
 8005dde:	bf00      	nop
 8005de0:	200003a4 	.word	0x200003a4
 8005de4:	40005400 	.word	0x40005400
 8005de8:	08008014 	.word	0x08008014

08005dec <SystemClock_Config>:
{
 8005dec:	b500      	push	{lr}
 8005dee:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 8005df0:	f7fc fff8 	bl	8002de4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005df4:	4a29      	ldr	r2, [pc, #164]	; (8005e9c <SystemClock_Config+0xb0>)
 8005df6:	6a13      	ldr	r3, [r2, #32]
 8005df8:	f023 0318 	bic.w	r3, r3, #24
 8005dfc:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8005dfe:	2306      	movs	r3, #6
 8005e00:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005e02:	2301      	movs	r3, #1
 8005e04:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e06:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8005e08:	2310      	movs	r3, #16
 8005e0a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005e10:	2300      	movs	r3, #0
 8005e12:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005e14:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8005e18:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e1a:	a80c      	add	r0, sp, #48	; 0x30
 8005e1c:	f7fc ffea 	bl	8002df4 <HAL_RCC_OscConfig>
 8005e20:	bb80      	cbnz	r0, 8005e84 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e22:	230f      	movs	r3, #15
 8005e24:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e26:	2102      	movs	r1, #2
 8005e28:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e32:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e34:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e36:	a807      	add	r0, sp, #28
 8005e38:	f7fd fade 	bl	80033f8 <HAL_RCC_ClockConfig>
 8005e3c:	bb30      	cbnz	r0, 8005e8c <SystemClock_Config+0xa0>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005e3e:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <SystemClock_Config+0xb4>)
 8005e40:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005e42:	2300      	movs	r3, #0
 8005e44:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV128;
 8005e46:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8005e4a:	9204      	str	r2, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005e4c:	9303      	str	r3, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e52:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e54:	4668      	mov	r0, sp
 8005e56:	f7fd fbcd 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 8005e5a:	b9d8      	cbnz	r0, 8005e94 <SystemClock_Config+0xa8>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005e5c:	f7fd fb94 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <SystemClock_Config+0xb8>)
 8005e62:	fba3 3000 	umull	r3, r0, r3, r0
 8005e66:	0980      	lsrs	r0, r0, #6
 8005e68:	f7fb fc78 	bl	800175c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005e6c:	2004      	movs	r0, #4
 8005e6e:	f7fb fc8f 	bl	8001790 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8005e72:	2202      	movs	r2, #2
 8005e74:	2100      	movs	r1, #0
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	f7fb fc2d 	bl	80016d8 <HAL_NVIC_SetPriority>
}
 8005e7e:	b017      	add	sp, #92	; 0x5c
 8005e80:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8005e84:	21c9      	movs	r1, #201	; 0xc9
 8005e86:	4808      	ldr	r0, [pc, #32]	; (8005ea8 <SystemClock_Config+0xbc>)
 8005e88:	f7ff fe5b 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005e8c:	21d7      	movs	r1, #215	; 0xd7
 8005e8e:	4806      	ldr	r0, [pc, #24]	; (8005ea8 <SystemClock_Config+0xbc>)
 8005e90:	f7ff fe57 	bl	8005b42 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005e94:	21e2      	movs	r1, #226	; 0xe2
 8005e96:	4804      	ldr	r0, [pc, #16]	; (8005ea8 <SystemClock_Config+0xbc>)
 8005e98:	f7ff fe53 	bl	8005b42 <_Error_Handler>
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	000100a1 	.word	0x000100a1
 8005ea4:	10624dd3 	.word	0x10624dd3
 8005ea8:	08008014 	.word	0x08008014

08005eac <main>:
{
 8005eac:	b510      	push	{r4, lr}
  HAL_Init();
 8005eae:	f7fa ffb9 	bl	8000e24 <HAL_Init>
  SystemClock_Config();
 8005eb2:	f7ff ff9b 	bl	8005dec <SystemClock_Config>
  MX_GPIO_Init();
 8005eb6:	f7ff fd6f 	bl	8005998 <MX_GPIO_Init>
  MX_DMA_Init();
 8005eba:	f7ff fe27 	bl	8005b0c <MX_DMA_Init>
  MX_TIM2_Init();
 8005ebe:	f7ff fe41 	bl	8005b44 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8005ec2:	f7ff fe79 	bl	8005bb8 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8005ec6:	f7ff fe97 	bl	8005bf8 <MX_ADC2_Init>
  MX_RTC_Init();
 8005eca:	f7ff fef9 	bl	8005cc0 <MX_RTC_Init>
  MX_I2C1_Init();
 8005ece:	f7ff ff59 	bl	8005d84 <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8005ed2:	4c15      	ldr	r4, [pc, #84]	; (8005f28 <main+0x7c>)
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f7fb fa10 	bl	80012fc <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8005edc:	f7ff fbd0 	bl	8005680 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4912      	ldr	r1, [pc, #72]	; (8005f2c <main+0x80>)
 8005ee4:	4812      	ldr	r0, [pc, #72]	; (8005f30 <main+0x84>)
 8005ee6:	f7fe f95f 	bl	80041a8 <HAL_UART_Receive_IT>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 5);
 8005eea:	2205      	movs	r2, #5
 8005eec:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <main+0x88>)
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f7fb f97d 	bl	80011f0 <HAL_ADC_Start_DMA>
 	 HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005ef6:	4c10      	ldr	r4, [pc, #64]	; (8005f38 <main+0x8c>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <main+0x90>)
 8005efc:	6819      	ldr	r1, [r3, #0]
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fd fc3a 	bl	8003778 <HAL_RTC_GetTime>
 	 HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005f04:	2200      	movs	r2, #0
 8005f06:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <main+0x94>)
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f7fd fc6a 	bl	80037e4 <HAL_RTC_GetDate>
  int i2c_state = init_iqs263();
 8005f10:	f7ff f94c 	bl	80051ac <init_iqs263>
 8005f14:	4604      	mov	r4, r0
  logPosition();
 8005f16:	f7fe ffe1 	bl	8004edc <logPosition>
  while (i2c_state)
 8005f1a:	e001      	b.n	8005f20 <main+0x74>
	  mainLoop();
 8005f1c:	f001 f8e4 	bl	80070e8 <mainLoop>
  while (i2c_state)
 8005f20:	2c00      	cmp	r4, #0
 8005f22:	d1fb      	bne.n	8005f1c <main+0x70>
}
 8005f24:	2000      	movs	r0, #0
 8005f26:	bd10      	pop	{r4, pc}
 8005f28:	20000350 	.word	0x20000350
 8005f2c:	200005e4 	.word	0x200005e4
 8005f30:	20000438 	.word	0x20000438
 8005f34:	2000024c 	.word	0x2000024c
 8005f38:	200004a8 	.word	0x200004a8
 8005f3c:	200002f4 	.word	0x200002f4
 8005f40:	20000284 	.word	0x20000284

08005f44 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8005f44:	b538      	push	{r3, r4, r5, lr}
	if(display_set_temp){
 8005f46:	4b37      	ldr	r3, [pc, #220]	; (8006024 <seven_segment+0xe0>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	b94b      	cbnz	r3, 8005f60 <seven_segment+0x1c>
		sprintf(segment_val, "%d", *set_temp);
	}

	if(segment_counter == 0){	// Left Most Digit
 8005f4c:	4d36      	ldr	r5, [pc, #216]	; (8006028 <seven_segment+0xe4>)
 8005f4e:	782c      	ldrb	r4, [r5, #0]
 8005f50:	b194      	cbz	r4, 8005f78 <seven_segment+0x34>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8005f52:	2c01      	cmp	r4, #1
 8005f54:	d051      	beq.n	8005ffa <seven_segment+0xb6>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8005f56:	2c02      	cmp	r4, #2
 8005f58:	d057      	beq.n	800600a <seven_segment+0xc6>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 8005f5a:	2c03      	cmp	r4, #3
 8005f5c:	d02d      	beq.n	8005fba <seven_segment+0x76>
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
		sprintf(segment_val, "%d", *set_temp);
 8005f60:	4b32      	ldr	r3, [pc, #200]	; (800602c <seven_segment+0xe8>)
 8005f62:	4a33      	ldr	r2, [pc, #204]	; (8006030 <seven_segment+0xec>)
 8005f64:	681b      	ldr	r3, [r3, #0]
	if(segment_counter == 0){	// Left Most Digit
 8005f66:	4d30      	ldr	r5, [pc, #192]	; (8006028 <seven_segment+0xe4>)
		sprintf(segment_val, "%d", *set_temp);
 8005f68:	6810      	ldr	r0, [r2, #0]
 8005f6a:	4932      	ldr	r1, [pc, #200]	; (8006034 <seven_segment+0xf0>)
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	f001 fa6f 	bl	8007450 <siprintf>
	if(segment_counter == 0){	// Left Most Digit
 8005f72:	782c      	ldrb	r4, [r5, #0]
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	d1ec      	bne.n	8005f52 <seven_segment+0xe>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8005f78:	4622      	mov	r2, r4
 8005f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f7e:	482e      	ldr	r0, [pc, #184]	; (8006038 <seven_segment+0xf4>)
 8005f80:	f7fb fea8 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8005f84:	2201      	movs	r2, #1
 8005f86:	2110      	movs	r1, #16
 8005f88:	482b      	ldr	r0, [pc, #172]	; (8006038 <seven_segment+0xf4>)
 8005f8a:	f7fb fea3 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8005f8e:	2201      	movs	r2, #1
 8005f90:	2120      	movs	r1, #32
 8005f92:	4829      	ldr	r0, [pc, #164]	; (8006038 <seven_segment+0xf4>)
 8005f94:	f7fb fe9e 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8005f98:	2201      	movs	r2, #1
 8005f9a:	2108      	movs	r1, #8
 8005f9c:	4826      	ldr	r0, [pc, #152]	; (8006038 <seven_segment+0xf4>)
 8005f9e:	f7fb fe99 	bl	8001cd4 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 8005fa2:	4a23      	ldr	r2, [pc, #140]	; (8006030 <seven_segment+0xec>)
 8005fa4:	782b      	ldrb	r3, [r5, #0]
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	5cd0      	ldrb	r0, [r2, r3]
 8005faa:	3830      	subs	r0, #48	; 0x30
 8005fac:	b2c0      	uxtb	r0, r0
 8005fae:	f000 f845 	bl	800603c <seven_segment_display>
		segment_counter += 1;
 8005fb2:	782b      	ldrb	r3, [r5, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	702b      	strb	r3, [r5, #0]
 8005fb8:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fc0:	481d      	ldr	r0, [pc, #116]	; (8006038 <seven_segment+0xf4>)
 8005fc2:	f7fb fe87 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	2110      	movs	r1, #16
 8005fca:	481b      	ldr	r0, [pc, #108]	; (8006038 <seven_segment+0xf4>)
 8005fcc:	f7fb fe82 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	2120      	movs	r1, #32
 8005fd4:	4818      	ldr	r0, [pc, #96]	; (8006038 <seven_segment+0xf4>)
 8005fd6:	f7fb fe7d 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2108      	movs	r1, #8
 8005fde:	4816      	ldr	r0, [pc, #88]	; (8006038 <seven_segment+0xf4>)
 8005fe0:	f7fb fe78 	bl	8001cd4 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8005fe4:	4a12      	ldr	r2, [pc, #72]	; (8006030 <seven_segment+0xec>)
 8005fe6:	782b      	ldrb	r3, [r5, #0]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	5cd0      	ldrb	r0, [r2, r3]
 8005fec:	3830      	subs	r0, #48	; 0x30
 8005fee:	b2c0      	uxtb	r0, r0
 8005ff0:	f000 f824 	bl	800603c <seven_segment_display>
		segment_counter = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	702b      	strb	r3, [r5, #0]
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006000:	480d      	ldr	r0, [pc, #52]	; (8006038 <seven_segment+0xf4>)
 8006002:	f7fb fe67 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8006006:	2200      	movs	r2, #0
 8006008:	e7bd      	b.n	8005f86 <seven_segment+0x42>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 800600a:	2201      	movs	r2, #1
 800600c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006010:	4809      	ldr	r0, [pc, #36]	; (8006038 <seven_segment+0xf4>)
 8006012:	f7fb fe5f 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8006016:	2201      	movs	r2, #1
 8006018:	2110      	movs	r1, #16
 800601a:	4807      	ldr	r0, [pc, #28]	; (8006038 <seven_segment+0xf4>)
 800601c:	f7fb fe5a 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8006020:	2200      	movs	r2, #0
 8006022:	e7b5      	b.n	8005f90 <seven_segment+0x4c>
 8006024:	20000288 	.word	0x20000288
 8006028:	200002da 	.word	0x200002da
 800602c:	200002e0 	.word	0x200002e0
 8006030:	200002dc 	.word	0x200002dc
 8006034:	08008024 	.word	0x08008024
 8006038:	48000400 	.word	0x48000400

0800603c <seven_segment_display>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 800603c:	b508      	push	{r3, lr}
	switch(num){
 800603e:	2809      	cmp	r0, #9
 8006040:	f200 81bf 	bhi.w	80063c2 <seven_segment_display+0x386>
 8006044:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006048:	006c003b 	.word	0x006c003b
 800604c:	00c40098 	.word	0x00c40098
 8006050:	011200e8 	.word	0x011200e8
 8006054:	016a013e 	.word	0x016a013e
 8006058:	000a018c 	.word	0x000a018c
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
		break;
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800605c:	2200      	movs	r2, #0
 800605e:	2120      	movs	r1, #32
 8006060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006064:	f7fb fe36 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8006068:	2200      	movs	r2, #0
 800606a:	2140      	movs	r1, #64	; 0x40
 800606c:	48e9      	ldr	r0, [pc, #932]	; (8006414 <seven_segment_display+0x3d8>)
 800606e:	f7fb fe31 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8006072:	2200      	movs	r2, #0
 8006074:	2180      	movs	r1, #128	; 0x80
 8006076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800607a:	f7fb fe2b 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800607e:	2200      	movs	r2, #0
 8006080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006088:	f7fb fe24 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800608c:	2200      	movs	r2, #0
 800608e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006096:	f7fb fe1d 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800609a:	2200      	movs	r2, #0
 800609c:	2140      	movs	r1, #64	; 0x40
 800609e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060a2:	f7fb fe17 	bl	8001cd4 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80060a6:	48dc      	ldr	r0, [pc, #880]	; (8006418 <seven_segment_display+0x3dc>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80060ac:	f7fb fe12 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80060b0:	2201      	movs	r2, #1
 80060b2:	2140      	movs	r1, #64	; 0x40
 80060b4:	48d7      	ldr	r0, [pc, #860]	; (8006414 <seven_segment_display+0x3d8>)

	}



}
 80060b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80060ba:	f7fb be0b 	b.w	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80060be:	2200      	movs	r2, #0
 80060c0:	2140      	movs	r1, #64	; 0x40
 80060c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060c6:	f7fb fe05 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80060ca:	2200      	movs	r2, #0
 80060cc:	2120      	movs	r1, #32
 80060ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060d2:	f7fb fdff 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80060d6:	2200      	movs	r2, #0
 80060d8:	2140      	movs	r1, #64	; 0x40
 80060da:	48ce      	ldr	r0, [pc, #824]	; (8006414 <seven_segment_display+0x3d8>)
 80060dc:	f7fb fdfa 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80060e0:	2200      	movs	r2, #0
 80060e2:	2180      	movs	r1, #128	; 0x80
 80060e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060e8:	f7fb fdf4 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80060ec:	2200      	movs	r2, #0
 80060ee:	2140      	movs	r1, #64	; 0x40
 80060f0:	48c8      	ldr	r0, [pc, #800]	; (8006414 <seven_segment_display+0x3d8>)
 80060f2:	f7fb fdef 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80060f6:	2200      	movs	r2, #0
 80060f8:	2180      	movs	r1, #128	; 0x80
 80060fa:	48c7      	ldr	r0, [pc, #796]	; (8006418 <seven_segment_display+0x3dc>)
 80060fc:	f7fb fdea 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8006100:	2200      	movs	r2, #0
 8006102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800610a:	f7fb fde3 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800610e:	2201      	movs	r2, #1
 8006110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8006118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800611c:	f7fb bdda 	b.w	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8006120:	2200      	movs	r2, #0
 8006122:	2140      	movs	r1, #64	; 0x40
 8006124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006128:	f7fb fdd4 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 800612c:	2200      	movs	r2, #0
 800612e:	2180      	movs	r1, #128	; 0x80
 8006130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006134:	f7fb fdce 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8006138:	2201      	movs	r2, #1
 800613a:	2120      	movs	r1, #32
 800613c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006140:	f7fb fdc8 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8006144:	2201      	movs	r2, #1
 8006146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800614a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800614e:	f7fb fdc1 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8006152:	2201      	movs	r2, #1
 8006154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800615c:	f7fb fdba 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8006160:	48ac      	ldr	r0, [pc, #688]	; (8006414 <seven_segment_display+0x3d8>)
 8006162:	2201      	movs	r2, #1
 8006164:	2140      	movs	r1, #64	; 0x40
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8006166:	f7fb fdb5 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800616a:	2201      	movs	r2, #1
 800616c:	2180      	movs	r1, #128	; 0x80
 800616e:	48aa      	ldr	r0, [pc, #680]	; (8006418 <seven_segment_display+0x3dc>)
}
 8006170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8006174:	f7fb bdae 	b.w	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8006178:	2200      	movs	r2, #0
 800617a:	2120      	movs	r1, #32
 800617c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006180:	f7fb fda8 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8006184:	2200      	movs	r2, #0
 8006186:	2140      	movs	r1, #64	; 0x40
 8006188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800618c:	f7fb fda2 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8006190:	2200      	movs	r2, #0
 8006192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800619a:	f7fb fd9b 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 800619e:	2200      	movs	r2, #0
 80061a0:	2180      	movs	r1, #128	; 0x80
 80061a2:	489d      	ldr	r0, [pc, #628]	; (8006418 <seven_segment_display+0x3dc>)
 80061a4:	f7fb fd96 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80061a8:	2200      	movs	r2, #0
 80061aa:	2140      	movs	r1, #64	; 0x40
 80061ac:	4899      	ldr	r0, [pc, #612]	; (8006414 <seven_segment_display+0x3d8>)
 80061ae:	f7fb fd91 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80061b2:	2201      	movs	r2, #1
 80061b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061bc:	f7fb fd8a 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80061c0:	2201      	movs	r2, #1
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 80061c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80061cc:	f7fb bd82 	b.w	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80061d0:	2200      	movs	r2, #0
 80061d2:	2120      	movs	r1, #32
 80061d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061d8:	f7fb fd7c 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 80061dc:	2200      	movs	r2, #0
 80061de:	2140      	movs	r1, #64	; 0x40
 80061e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061e4:	f7fb fd76 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80061e8:	2200      	movs	r2, #0
 80061ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061f2:	f7fb fd6f 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80061f6:	2200      	movs	r2, #0
 80061f8:	2180      	movs	r1, #128	; 0x80
 80061fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061fe:	f7fb fd69 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8006202:	2200      	movs	r2, #0
 8006204:	2140      	movs	r1, #64	; 0x40
 8006206:	4883      	ldr	r0, [pc, #524]	; (8006414 <seven_segment_display+0x3d8>)
 8006208:	f7fb fd64 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800620c:	2201      	movs	r2, #1
 800620e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006216:	e7a6      	b.n	8006166 <seven_segment_display+0x12a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8006218:	2200      	movs	r2, #0
 800621a:	2140      	movs	r1, #64	; 0x40
 800621c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006220:	f7fb fd58 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8006224:	2200      	movs	r2, #0
 8006226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800622a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800622e:	f7fb fd51 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8006232:	2200      	movs	r2, #0
 8006234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800623c:	f7fb fd4a 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8006240:	2200      	movs	r2, #0
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006248:	f7fb fd44 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 800624c:	2201      	movs	r2, #1
 800624e:	2120      	movs	r1, #32
 8006250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006254:	f7fb fd3e 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8006258:	2201      	movs	r2, #1
 800625a:	2180      	movs	r1, #128	; 0x80
 800625c:	486e      	ldr	r0, [pc, #440]	; (8006418 <seven_segment_display+0x3dc>)
 800625e:	f7fb fd39 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8006262:	2201      	movs	r2, #1
 8006264:	2120      	movs	r1, #32
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8006266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800626a:	e71f      	b.n	80060ac <seven_segment_display+0x70>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800626c:	2200      	movs	r2, #0
 800626e:	2120      	movs	r1, #32
 8006270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006274:	f7fb fd2e 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8006278:	2200      	movs	r2, #0
 800627a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800627e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006282:	f7fb fd27 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8006286:	2200      	movs	r2, #0
 8006288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800628c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006290:	f7fb fd20 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8006294:	2200      	movs	r2, #0
 8006296:	2180      	movs	r1, #128	; 0x80
 8006298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800629c:	f7fb fd1a 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 80062a0:	2201      	movs	r2, #1
 80062a2:	2140      	movs	r1, #64	; 0x40
 80062a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062a8:	f7fb fd14 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80062ac:	2201      	movs	r2, #1
 80062ae:	2180      	movs	r1, #128	; 0x80
 80062b0:	4859      	ldr	r0, [pc, #356]	; (8006418 <seven_segment_display+0x3dc>)
 80062b2:	f7fb fd0f 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 80062b6:	2200      	movs	r2, #0
 80062b8:	2140      	movs	r1, #64	; 0x40
 80062ba:	4856      	ldr	r0, [pc, #344]	; (8006414 <seven_segment_display+0x3d8>)
}
 80062bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 80062c0:	f7fb bd08 	b.w	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80062c4:	2200      	movs	r2, #0
 80062c6:	2120      	movs	r1, #32
 80062c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062cc:	f7fb fd02 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80062d0:	2200      	movs	r2, #0
 80062d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062da:	f7fb fcfb 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80062de:	2200      	movs	r2, #0
 80062e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062e8:	f7fb fcf4 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80062ec:	2200      	movs	r2, #0
 80062ee:	2180      	movs	r1, #128	; 0x80
 80062f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062f4:	f7fb fcee 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80062f8:	2200      	movs	r2, #0
 80062fa:	2140      	movs	r1, #64	; 0x40
 80062fc:	4845      	ldr	r0, [pc, #276]	; (8006414 <seven_segment_display+0x3d8>)
 80062fe:	f7fb fce9 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8006302:	4845      	ldr	r0, [pc, #276]	; (8006418 <seven_segment_display+0x3dc>)
 8006304:	2200      	movs	r2, #0
 8006306:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8006308:	f7fb fce4 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800630c:	2201      	movs	r2, #1
 800630e:	2140      	movs	r1, #64	; 0x40
 8006310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8006314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8006318:	f7fb bcdc 	b.w	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800631c:	2200      	movs	r2, #0
 800631e:	2120      	movs	r1, #32
 8006320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006324:	f7fb fcd6 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8006328:	2200      	movs	r2, #0
 800632a:	2140      	movs	r1, #64	; 0x40
 800632c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006330:	f7fb fcd0 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8006334:	2200      	movs	r2, #0
 8006336:	2180      	movs	r1, #128	; 0x80
 8006338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800633c:	f7fb fcca 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8006340:	2201      	movs	r2, #1
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	4834      	ldr	r0, [pc, #208]	; (8006418 <seven_segment_display+0x3dc>)
 8006346:	f7fb fcc5 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800634a:	2201      	movs	r2, #1
 800634c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006354:	f7fb fcbe 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8006358:	2201      	movs	r2, #1
 800635a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800635e:	e782      	b.n	8006266 <seven_segment_display+0x22a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8006360:	2200      	movs	r2, #0
 8006362:	2140      	movs	r1, #64	; 0x40
 8006364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006368:	f7fb fcb4 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800636c:	2200      	movs	r2, #0
 800636e:	2120      	movs	r1, #32
 8006370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006374:	f7fb fcae 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8006378:	2200      	movs	r2, #0
 800637a:	2140      	movs	r1, #64	; 0x40
 800637c:	4825      	ldr	r0, [pc, #148]	; (8006414 <seven_segment_display+0x3d8>)
 800637e:	f7fb fca9 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8006382:	2200      	movs	r2, #0
 8006384:	2180      	movs	r1, #128	; 0x80
 8006386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800638a:	f7fb fca3 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800638e:	2200      	movs	r2, #0
 8006390:	2140      	movs	r1, #64	; 0x40
 8006392:	4820      	ldr	r0, [pc, #128]	; (8006414 <seven_segment_display+0x3d8>)
 8006394:	f7fb fc9e 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8006398:	2200      	movs	r2, #0
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	481e      	ldr	r0, [pc, #120]	; (8006418 <seven_segment_display+0x3dc>)
 800639e:	f7fb fc99 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80063a2:	2200      	movs	r2, #0
 80063a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063ac:	f7fb fc92 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 80063ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80063be:	f7fb bc89 	b.w	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 80063c2:	2201      	movs	r2, #1
 80063c4:	2120      	movs	r1, #32
 80063c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063ca:	f7fb fc83 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 80063ce:	2201      	movs	r2, #1
 80063d0:	2140      	movs	r1, #64	; 0x40
 80063d2:	4810      	ldr	r0, [pc, #64]	; (8006414 <seven_segment_display+0x3d8>)
 80063d4:	f7fb fc7e 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80063d8:	2201      	movs	r2, #1
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063e0:	f7fb fc78 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80063e4:	2201      	movs	r2, #1
 80063e6:	2140      	movs	r1, #64	; 0x40
 80063e8:	480a      	ldr	r0, [pc, #40]	; (8006414 <seven_segment_display+0x3d8>)
 80063ea:	f7fb fc73 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80063ee:	2201      	movs	r2, #1
 80063f0:	2180      	movs	r1, #128	; 0x80
 80063f2:	4809      	ldr	r0, [pc, #36]	; (8006418 <seven_segment_display+0x3dc>)
 80063f4:	f7fb fc6e 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80063f8:	2201      	movs	r2, #1
 80063fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006402:	f7fb fc67 	bl	8001cd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8006406:	2201      	movs	r2, #1
 8006408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800640c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006410:	e77a      	b.n	8006308 <seven_segment_display+0x2cc>
 8006412:	bf00      	nop
 8006414:	48000400 	.word	0x48000400
 8006418:	48000800 	.word	0x48000800

0800641c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800641c:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <HAL_MspInit+0x78>)
{
 800641e:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	619a      	str	r2, [r3, #24]
 8006428:	699b      	ldr	r3, [r3, #24]
{
 800642a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006432:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006434:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006436:	f7fb f93d 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 800643a:	2202      	movs	r2, #2
 800643c:	2100      	movs	r1, #0
 800643e:	f06f 000b 	mvn.w	r0, #11
 8006442:	f7fb f949 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 8006446:	2202      	movs	r2, #2
 8006448:	2100      	movs	r1, #0
 800644a:	f06f 000a 	mvn.w	r0, #10
 800644e:	f7fb f943 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 8006452:	2202      	movs	r2, #2
 8006454:	2100      	movs	r1, #0
 8006456:	f06f 0009 	mvn.w	r0, #9
 800645a:	f7fb f93d 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 800645e:	2202      	movs	r2, #2
 8006460:	2100      	movs	r1, #0
 8006462:	f06f 0004 	mvn.w	r0, #4
 8006466:	f7fb f937 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 800646a:	2202      	movs	r2, #2
 800646c:	2100      	movs	r1, #0
 800646e:	f06f 0003 	mvn.w	r0, #3
 8006472:	f7fb f931 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 8006476:	2202      	movs	r2, #2
 8006478:	2100      	movs	r1, #0
 800647a:	f06f 0001 	mvn.w	r0, #1
 800647e:	f7fb f92b 	bl	80016d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8006482:	2202      	movs	r2, #2
 8006484:	2100      	movs	r1, #0
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	f7fb f925 	bl	80016d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800648e:	b003      	add	sp, #12
 8006490:	f85d fb04 	ldr.w	pc, [sp], #4
 8006494:	40021000 	.word	0x40021000

08006498 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <HAL_ADC_MspInit+0x88>)
 800649a:	6802      	ldr	r2, [r0, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d000      	beq.n	80064a2 <HAL_ADC_MspInit+0xa>
 80064a0:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80064a2:	4b20      	ldr	r3, [pc, #128]	; (8006524 <HAL_ADC_MspInit+0x8c>)
{
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 80064a6:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80064a8:	4d1f      	ldr	r5, [pc, #124]	; (8006528 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80064aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064ae:	615a      	str	r2, [r3, #20]
 80064b0:	695b      	ldr	r3, [r3, #20]
{
 80064b2:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 80064b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b8:	2600      	movs	r6, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 80064ba:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064bc:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 80064be:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064c0:	a901      	add	r1, sp, #4
 80064c2:	4604      	mov	r4, r0
 80064c4:	4819      	ldr	r0, [pc, #100]	; (800652c <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80064c6:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 80064c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064ca:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064cc:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ce:	f7fb fb11 	bl	8001af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 80064d2:	f248 0304 	movw	r3, #32772	; 0x8004
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064d6:	a901      	add	r1, sp, #4
 80064d8:	4815      	ldr	r0, [pc, #84]	; (8006530 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064da:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 80064dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064de:	9603      	str	r6, [sp, #12]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80064e0:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064e2:	f7fb fb07 	bl	8001af4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80064e6:	f8df e050 	ldr.w	lr, [pc, #80]	; 8006538 <HAL_ADC_MspInit+0xa0>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064ea:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064ec:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80064f4:	2320      	movs	r3, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80064f6:	4628      	mov	r0, r5
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80064f8:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80064fa:	61ee      	str	r6, [r5, #28]
    hdma_adc2.Instance = DMA1_Channel2;
 80064fc:	f8c5 e000 	str.w	lr, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006500:	60ef      	str	r7, [r5, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006502:	6129      	str	r1, [r5, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006504:	616a      	str	r2, [r5, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006506:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006508:	f7fb f954 	bl	80017b4 <HAL_DMA_Init>
 800650c:	b918      	cbnz	r0, 8006516 <HAL_ADC_MspInit+0x7e>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800650e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8006510:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006512:	b007      	add	sp, #28
 8006514:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 8006516:	217a      	movs	r1, #122	; 0x7a
 8006518:	4806      	ldr	r0, [pc, #24]	; (8006534 <HAL_ADC_MspInit+0x9c>)
 800651a:	f7ff fb12 	bl	8005b42 <_Error_Handler>
 800651e:	e7f6      	b.n	800650e <HAL_ADC_MspInit+0x76>
 8006520:	50000100 	.word	0x50000100
 8006524:	40021000 	.word	0x40021000
 8006528:	20000520 	.word	0x20000520
 800652c:	48000800 	.word	0x48000800
 8006530:	48000400 	.word	0x48000400
 8006534:	08008028 	.word	0x08008028
 8006538:	4002001c 	.word	0x4002001c

0800653c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800653c:	6802      	ldr	r2, [r0, #0]
 800653e:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_I2C_MspInit+0x68>)
 8006540:	429a      	cmp	r2, r3
 8006542:	d000      	beq.n	8006546 <HAL_I2C_MspInit+0xa>
 8006544:	4770      	bx	lr
{
 8006546:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006548:	2304      	movs	r3, #4
{
 800654a:	b086      	sub	sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654c:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800654e:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006552:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8006554:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006558:	2512      	movs	r5, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800655a:	4813      	ldr	r0, [pc, #76]	; (80065a8 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800655c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800655e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8006560:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006562:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006564:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006566:	f7fb fac5 	bl	8001af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800656a:	4b10      	ldr	r3, [pc, #64]	; (80065ac <HAL_I2C_MspInit+0x70>)
 800656c:	69da      	ldr	r2, [r3, #28]
 800656e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006572:	61da      	str	r2, [r3, #28]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800657a:	4622      	mov	r2, r4
 800657c:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 800657e:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006580:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006582:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006584:	f7fb f8a8 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006588:	201f      	movs	r0, #31
 800658a:	f7fb f8db 	bl	8001744 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800658e:	4622      	mov	r2, r4
 8006590:	4621      	mov	r1, r4
 8006592:	2020      	movs	r0, #32
 8006594:	f7fb f8a0 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006598:	2020      	movs	r0, #32
 800659a:	f7fb f8d3 	bl	8001744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800659e:	b006      	add	sp, #24
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	bf00      	nop
 80065a4:	40005400 	.word	0x40005400
 80065a8:	48000400 	.word	0x48000400
 80065ac:	40021000 	.word	0x40021000

080065b0 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80065b0:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 80065b2:	6802      	ldr	r2, [r0, #0]
 80065b4:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <HAL_RTC_MspInit+0x38>)
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d000      	beq.n	80065bc <HAL_RTC_MspInit+0xc>
 80065ba:	bd08      	pop	{r3, pc}
 80065bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065c0:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80065c4:	4b09      	ldr	r3, [pc, #36]	; (80065ec <HAL_RTC_MspInit+0x3c>)
 80065c6:	fab2 f282 	clz	r2, r2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	2101      	movs	r1, #1
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80065d0:	2200      	movs	r2, #0
    __HAL_RCC_RTC_ENABLE();
 80065d2:	6019      	str	r1, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80065d4:	2003      	movs	r0, #3
 80065d6:	4611      	mov	r1, r2
 80065d8:	f7fb f87e 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80065dc:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80065de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80065e2:	f7fb b8af 	b.w	8001744 <HAL_NVIC_EnableIRQ>
 80065e6:	bf00      	nop
 80065e8:	40002800 	.word	0x40002800
 80065ec:	10908100 	.word	0x10908100

080065f0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80065f0:	6803      	ldr	r3, [r0, #0]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f6:	d000      	beq.n	80065fa <HAL_TIM_Base_MspInit+0xa>
 80065f8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80065fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 80065fe:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	61da      	str	r2, [r3, #28]
 8006608:	69db      	ldr	r3, [r3, #28]
{
 800660a:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8006612:	2202      	movs	r2, #2
 8006614:	2100      	movs	r1, #0
 8006616:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006618:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800661a:	f7fb f85d 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800661e:	201c      	movs	r0, #28
 8006620:	f7fb f890 	bl	8001744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006624:	b003      	add	sp, #12
 8006626:	f85d fb04 	ldr.w	pc, [sp], #4
 800662a:	bf00      	nop

0800662c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800662c:	6802      	ldr	r2, [r0, #0]
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <HAL_UART_MspInit+0x54>)
 8006630:	429a      	cmp	r2, r3
 8006632:	d000      	beq.n	8006636 <HAL_UART_MspInit+0xa>
 8006634:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006636:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 800663a:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 800663c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800663e:	4811      	ldr	r0, [pc, #68]	; (8006684 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006644:	619a      	str	r2, [r3, #24]
 8006646:	699b      	ldr	r3, [r3, #24]
{
 8006648:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 800664a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006650:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006652:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006654:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006656:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006658:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800665c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800665e:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8006660:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006662:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006664:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006666:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006668:	f7fb fa44 	bl	8001af4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800666c:	4622      	mov	r2, r4
 800666e:	4621      	mov	r1, r4
 8006670:	2025      	movs	r0, #37	; 0x25
 8006672:	f7fb f831 	bl	80016d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006676:	2025      	movs	r0, #37	; 0x25
 8006678:	f7fb f864 	bl	8001744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800667c:	b007      	add	sp, #28
 800667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006680:	40013800 	.word	0x40013800
 8006684:	48000800 	.word	0x48000800

08006688 <SVC_Handler>:
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop

0800668c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006690:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006692:	f7fa fbd9 	bl	8000e48 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
 8006696:	4c06      	ldr	r4, [pc, #24]	; (80066b0 <SysTick_Handler+0x20>)
  HAL_SYSTICK_IRQHandler();
 8006698:	f7fb f888 	bl	80017ac <HAL_SYSTICK_IRQHandler>
  RTC_timer_flag = 1;
 800669c:	4805      	ldr	r0, [pc, #20]	; (80066b4 <SysTick_Handler+0x24>)
  flash_flag = 1;
 800669e:	4906      	ldr	r1, [pc, #24]	; (80066b8 <SysTick_Handler+0x28>)
  adc_flag = 1;
 80066a0:	4a06      	ldr	r2, [pc, #24]	; (80066bc <SysTick_Handler+0x2c>)
  systick_flag = 1;
 80066a2:	2301      	movs	r3, #1
 80066a4:	7023      	strb	r3, [r4, #0]
  RTC_timer_flag = 1;
 80066a6:	7003      	strb	r3, [r0, #0]
  flash_flag = 1;
 80066a8:	700b      	strb	r3, [r1, #0]
  adc_flag = 1;
 80066aa:	7013      	strb	r3, [r2, #0]
 80066ac:	bd10      	pop	{r4, pc}
 80066ae:	bf00      	nop
 80066b0:	200002e5 	.word	0x200002e5
 80066b4:	20000254 	.word	0x20000254
 80066b8:	20000294 	.word	0x20000294
 80066bc:	2000026a 	.word	0x2000026a

080066c0 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <RTC_WKUP_IRQHandler+0x8>)
 80066c2:	f7fd baef 	b.w	8003ca4 <HAL_RTCEx_WakeUpTimerIRQHandler>
 80066c6:	bf00      	nop
 80066c8:	200004a8 	.word	0x200004a8

080066cc <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80066cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80066ce:	2001      	movs	r0, #1
 80066d0:	f7fb fb08 	bl	8001ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  touch_flag = 1;
 80066d4:	4b01      	ldr	r3, [pc, #4]	; (80066dc <EXTI0_IRQHandler+0x10>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	bd08      	pop	{r3, pc}
 80066dc:	200002fc 	.word	0x200002fc

080066e0 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <DMA1_Channel2_IRQHandler+0x8>)
 80066e2:	f7fb b905 	b.w	80018f0 <HAL_DMA_IRQHandler>
 80066e6:	bf00      	nop
 80066e8:	20000520 	.word	0x20000520

080066ec <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80066ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80066ee:	2040      	movs	r0, #64	; 0x40
 80066f0:	f7fb faf8 	bl	8001ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 80066f4:	4b01      	ldr	r3, [pc, #4]	; (80066fc <EXTI9_5_IRQHandler+0x10>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	bd08      	pop	{r3, pc}
 80066fc:	200002f1 	.word	0x200002f1

08006700 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8006700:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006702:	4803      	ldr	r0, [pc, #12]	; (8006710 <TIM2_IRQHandler+0x10>)
 8006704:	f7fd fbcc 	bl	8003ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag = 0;
 8006708:	4b02      	ldr	r3, [pc, #8]	; (8006714 <TIM2_IRQHandler+0x14>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	bd08      	pop	{r3, pc}
 8006710:	200004e0 	.word	0x200004e0
 8006714:	200002f0 	.word	0x200002f0

08006718 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006718:	4801      	ldr	r0, [pc, #4]	; (8006720 <I2C1_EV_IRQHandler+0x8>)
 800671a:	f7fb bf11 	b.w	8002540 <HAL_I2C_EV_IRQHandler>
 800671e:	bf00      	nop
 8006720:	200003a4 	.word	0x200003a4

08006724 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <I2C1_ER_IRQHandler+0x8>)
 8006726:	f7fc baad 	b.w	8002c84 <HAL_I2C_ER_IRQHandler>
 800672a:	bf00      	nop
 800672c:	200003a4 	.word	0x200003a4

08006730 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006730:	4801      	ldr	r0, [pc, #4]	; (8006738 <USART1_IRQHandler+0x8>)
 8006732:	f7fd bfd3 	b.w	80046dc <HAL_UART_IRQHandler>
 8006736:	bf00      	nop
 8006738:	20000438 	.word	0x20000438

0800673c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800673c:	4917      	ldr	r1, [pc, #92]	; (800679c <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800673e:	4b18      	ldr	r3, [pc, #96]	; (80067a0 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8006740:	4a18      	ldr	r2, [pc, #96]	; (80067a4 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006742:	4819      	ldr	r0, [pc, #100]	; (80067a8 <SystemInit+0x6c>)
{
 8006744:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006746:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800674a:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800674e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8006752:	681c      	ldr	r4, [r3, #0]
 8006754:	f044 0401 	orr.w	r4, r4, #1
 8006758:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 800675a:	685c      	ldr	r4, [r3, #4]
 800675c:	4022      	ands	r2, r4
 800675e:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006766:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800676a:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006772:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800677a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	f022 020f 	bic.w	r2, r2, #15
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006784:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006786:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006788:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800678a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 800678e:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8006790:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006792:	608a      	str	r2, [r1, #8]
#endif
}
 8006794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	e000ed00 	.word	0xe000ed00
 80067a0:	40021000 	.word	0x40021000
 80067a4:	f87fc00c 	.word	0xf87fc00c
 80067a8:	ff00fccc 	.word	0xff00fccc

080067ac <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 80067ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
	uart_command[uart_counter] = rx_buffer;
 80067b0:	4ca4      	ldr	r4, [pc, #656]	; (8006a44 <uart_comms+0x298>)
 80067b2:	4da5      	ldr	r5, [pc, #660]	; (8006a48 <uart_comms+0x29c>)
 80067b4:	49a5      	ldr	r1, [pc, #660]	; (8006a4c <uart_comms+0x2a0>)
 80067b6:	7823      	ldrb	r3, [r4, #0]
 80067b8:	682a      	ldr	r2, [r5, #0]
	rx_flag = 0;
 80067ba:	4ea5      	ldr	r6, [pc, #660]	; (8006a50 <uart_comms+0x2a4>)
	uart_command[uart_counter] = rx_buffer;
 80067bc:	7808      	ldrb	r0, [r1, #0]
	rx_flag = 0;
 80067be:	2100      	movs	r1, #0
 80067c0:	7031      	strb	r1, [r6, #0]
	uart_command[uart_counter] = rx_buffer;
 80067c2:	54d0      	strb	r0, [r2, r3]
	if(uart_command[0] == '$'){
 80067c4:	682a      	ldr	r2, [r5, #0]
 80067c6:	7813      	ldrb	r3, [r2, #0]
 80067c8:	2b24      	cmp	r3, #36	; 0x24
void uart_comms(){
 80067ca:	b083      	sub	sp, #12

		uart_counter += 1;
 80067cc:	7823      	ldrb	r3, [r4, #0]
	if(uart_command[0] == '$'){
 80067ce:	d006      	beq.n	80067de <uart_comms+0x32>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 80067d0:	2b3b      	cmp	r3, #59	; 0x3b
		uart_counter = 0;
 80067d2:	bf84      	itt	hi
 80067d4:	2300      	movhi	r3, #0
 80067d6:	7023      	strbhi	r3, [r4, #0]
	}
}
 80067d8:	b003      	add	sp, #12
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uart_counter += 1;
 80067de:	3301      	adds	r3, #1
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	7023      	strb	r3, [r4, #0]
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80067e4:	7810      	ldrb	r0, [r2, #0]
 80067e6:	2824      	cmp	r0, #36	; 0x24
 80067e8:	d1f2      	bne.n	80067d0 <uart_comms+0x24>
 80067ea:	441a      	add	r2, r3
 80067ec:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80067f0:	280a      	cmp	r0, #10
 80067f2:	d1ed      	bne.n	80067d0 <uart_comms+0x24>
 80067f4:	f812 2c02 	ldrb.w	r2, [r2, #-2]
 80067f8:	2a0d      	cmp	r2, #13
 80067fa:	d1e9      	bne.n	80067d0 <uart_comms+0x24>
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d9eb      	bls.n	80067d8 <uart_comms+0x2c>
		memset(return_value,0x00, 50);
 8006800:	4e94      	ldr	r6, [pc, #592]	; (8006a54 <uart_comms+0x2a8>)
		uart_command_copy = uart_command;
 8006802:	4f95      	ldr	r7, [pc, #596]	; (8006a58 <uart_comms+0x2ac>)
		memset(return_value,0x00, 50);
 8006804:	6830      	ldr	r0, [r6, #0]
 8006806:	2232      	movs	r2, #50	; 0x32
 8006808:	f000 fd5d 	bl	80072c6 <memset>
		uart_command_copy = uart_command;
 800680c:	682a      	ldr	r2, [r5, #0]
 800680e:	603a      	str	r2, [r7, #0]
		switch(uart_command[1]){
 8006810:	7853      	ldrb	r3, [r2, #1]
 8006812:	3b41      	subs	r3, #65	; 0x41
 8006814:	2b0b      	cmp	r3, #11
 8006816:	f200 810d 	bhi.w	8006a34 <uart_comms+0x288>
 800681a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800681e:	02f5      	.short	0x02f5
 8006820:	02b50354 	.word	0x02b50354
 8006824:	0312032d 	.word	0x0312032d
 8006828:	0276028e 	.word	0x0276028e
 800682c:	013d01a9 	.word	0x013d01a9
 8006830:	0048020c 	.word	0x0048020c
 8006834:	000c      	.short	0x000c
			memset(log_receiced_num,0x00,2);
 8006836:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8006a90 <uart_comms+0x2e4>
 800683a:	f8d8 3000 	ldr.w	r3, [r8]
 800683e:	2700      	movs	r7, #0
 8006840:	801f      	strh	r7, [r3, #0]
			memcpy(log_receiced_num,(uart_command+3), strlen((char*)uart_command)-5);
 8006842:	682e      	ldr	r6, [r5, #0]
 8006844:	4630      	mov	r0, r6
 8006846:	f7f9 fcc3 	bl	80001d0 <strlen>
 800684a:	1cf1      	adds	r1, r6, #3
 800684c:	1f42      	subs	r2, r0, #5
 800684e:	f8d8 0000 	ldr.w	r0, [r8]
 8006852:	f000 fd2d 	bl	80072b0 <memcpy>
			*log_receiced_num = strtol((char*)log_receiced_num,NULL,10);
 8006856:	f8d8 6000 	ldr.w	r6, [r8]
 800685a:	220a      	movs	r2, #10
 800685c:	4639      	mov	r1, r7
 800685e:	4630      	mov	r0, r6
 8006860:	f000 feee 	bl	8007640 <strtol>
 8006864:	7030      	strb	r0, [r6, #0]
			if(*log_receiced_num >= log_counter || log_empty){
 8006866:	f8d8 3000 	ldr.w	r3, [r8]
 800686a:	4a7c      	ldr	r2, [pc, #496]	; (8006a5c <uart_comms+0x2b0>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	7812      	ldrb	r2, [r2, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	f240 834a 	bls.w	8006f0a <uart_comms+0x75e>
 8006876:	4a7a      	ldr	r2, [pc, #488]	; (8006a60 <uart_comms+0x2b4>)
 8006878:	7816      	ldrb	r6, [r2, #0]
 800687a:	2e00      	cmp	r6, #0
 800687c:	f040 8345 	bne.w	8006f0a <uart_comms+0x75e>
 8006880:	f8df a210 	ldr.w	sl, [pc, #528]	; 8006a94 <uart_comms+0x2e8>
					HAL_UART_Transmit_IT(&huart1,(uint8_t*)(flash_mem_start+64*(*log_receiced_num)), strlen((char*)(flash_mem_start+64*(*log_receiced_num))));
 8006884:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8006a8c <uart_comms+0x2e0>
 8006888:	f8da 7000 	ldr.w	r7, [sl]
 800688c:	eb07 1783 	add.w	r7, r7, r3, lsl #6
 8006890:	4638      	mov	r0, r7
 8006892:	f7f9 fc9d 	bl	80001d0 <strlen>
 8006896:	4639      	mov	r1, r7
 8006898:	b282      	uxth	r2, r0
 800689a:	4648      	mov	r0, r9
 800689c:	f7fd fc60 	bl	8004160 <HAL_UART_Transmit_IT>
				for(int i = 0; i<=*log_receiced_num;i++){
 80068a0:	f8d8 3000 	ldr.w	r3, [r8]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	3601      	adds	r6, #1
 80068a8:	42b3      	cmp	r3, r6
 80068aa:	daed      	bge.n	8006888 <uart_comms+0xdc>
 80068ac:	e0c2      	b.n	8006a34 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 80068ae:	6833      	ldr	r3, [r6, #0]
 80068b0:	8812      	ldrh	r2, [r2, #0]
			memcpy(return_value+2,comma,1 );
 80068b2:	4f6c      	ldr	r7, [pc, #432]	; (8006a64 <uart_comms+0x2b8>)
			memcpy(return_value, uart_command, 2);
 80068b4:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 80068b6:	6832      	ldr	r2, [r6, #0]
 80068b8:	f897 9000 	ldrb.w	r9, [r7]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 80068bc:	4b6a      	ldr	r3, [pc, #424]	; (8006a68 <uart_comms+0x2bc>)
			memcpy(return_value+2,comma,1 );
 80068be:	f882 9002 	strb.w	r9, [r2, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 80068c2:	f8d3 8000 	ldr.w	r8, [r3]
 80068c6:	4640      	mov	r0, r8
 80068c8:	f7f9 fc82 	bl	80001d0 <strlen>
 80068cc:	6833      	ldr	r3, [r6, #0]
 80068ce:	4602      	mov	r2, r0
 80068d0:	4641      	mov	r1, r8
 80068d2:	1cd8      	adds	r0, r3, #3
 80068d4:	f000 fcec 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80068d8:	f8d6 8000 	ldr.w	r8, [r6]
 80068dc:	4640      	mov	r0, r8
 80068de:	f7f9 fc77 	bl	80001d0 <strlen>
 80068e2:	f808 9000 	strb.w	r9, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 80068e6:	f8d6 8000 	ldr.w	r8, [r6]
 80068ea:	4640      	mov	r0, r8
 80068ec:	f7f9 fc70 	bl	80001d0 <strlen>
 80068f0:	4b5e      	ldr	r3, [pc, #376]	; (8006a6c <uart_comms+0x2c0>)
 80068f2:	f8d3 9000 	ldr.w	r9, [r3]
 80068f6:	4682      	mov	sl, r0
 80068f8:	4648      	mov	r0, r9
 80068fa:	f7f9 fc69 	bl	80001d0 <strlen>
 80068fe:	4649      	mov	r1, r9
 8006900:	4602      	mov	r2, r0
 8006902:	eb08 000a 	add.w	r0, r8, sl
 8006906:	f000 fcd3 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800690a:	f8d6 8000 	ldr.w	r8, [r6]
 800690e:	4640      	mov	r0, r8
 8006910:	f7f9 fc5e 	bl	80001d0 <strlen>
 8006914:	783b      	ldrb	r3, [r7, #0]
 8006916:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 800691a:	f8d6 8000 	ldr.w	r8, [r6]
 800691e:	4640      	mov	r0, r8
 8006920:	f7f9 fc56 	bl	80001d0 <strlen>
 8006924:	4b52      	ldr	r3, [pc, #328]	; (8006a70 <uart_comms+0x2c4>)
 8006926:	f8d3 9000 	ldr.w	r9, [r3]
 800692a:	4682      	mov	sl, r0
 800692c:	4648      	mov	r0, r9
 800692e:	f7f9 fc4f 	bl	80001d0 <strlen>
 8006932:	4649      	mov	r1, r9
 8006934:	4602      	mov	r2, r0
 8006936:	eb08 000a 	add.w	r0, r8, sl
 800693a:	f000 fcb9 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800693e:	f8d6 8000 	ldr.w	r8, [r6]
 8006942:	4640      	mov	r0, r8
 8006944:	f7f9 fc44 	bl	80001d0 <strlen>
 8006948:	783b      	ldrb	r3, [r7, #0]
 800694a:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 800694e:	f8d6 8000 	ldr.w	r8, [r6]
 8006952:	4640      	mov	r0, r8
 8006954:	f7f9 fc3c 	bl	80001d0 <strlen>
 8006958:	4b46      	ldr	r3, [pc, #280]	; (8006a74 <uart_comms+0x2c8>)
 800695a:	f8d3 9000 	ldr.w	r9, [r3]
 800695e:	4682      	mov	sl, r0
 8006960:	4648      	mov	r0, r9
 8006962:	f7f9 fc35 	bl	80001d0 <strlen>
 8006966:	4649      	mov	r1, r9
 8006968:	4602      	mov	r2, r0
 800696a:	eb08 000a 	add.w	r0, r8, sl
 800696e:	f000 fc9f 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006972:	f8d6 8000 	ldr.w	r8, [r6]
 8006976:	4640      	mov	r0, r8
 8006978:	f7f9 fc2a 	bl	80001d0 <strlen>
 800697c:	783b      	ldrb	r3, [r7, #0]
 800697e:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8006982:	f8d6 8000 	ldr.w	r8, [r6]
 8006986:	4640      	mov	r0, r8
 8006988:	f7f9 fc22 	bl	80001d0 <strlen>
 800698c:	4b3a      	ldr	r3, [pc, #232]	; (8006a78 <uart_comms+0x2cc>)
 800698e:	f8d3 9000 	ldr.w	r9, [r3]
 8006992:	4682      	mov	sl, r0
 8006994:	4648      	mov	r0, r9
 8006996:	f7f9 fc1b 	bl	80001d0 <strlen>
 800699a:	4649      	mov	r1, r9
 800699c:	4602      	mov	r2, r0
 800699e:	eb08 000a 	add.w	r0, r8, sl
 80069a2:	f000 fc85 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80069a6:	f8d6 8000 	ldr.w	r8, [r6]
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7f9 fc10 	bl	80001d0 <strlen>
 80069b0:	783b      	ldrb	r3, [r7, #0]
 80069b2:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 80069b6:	f8d6 8000 	ldr.w	r8, [r6]
 80069ba:	4640      	mov	r0, r8
 80069bc:	f7f9 fc08 	bl	80001d0 <strlen>
 80069c0:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <uart_comms+0x2d0>)
 80069c2:	f8d3 9000 	ldr.w	r9, [r3]
 80069c6:	4682      	mov	sl, r0
 80069c8:	4648      	mov	r0, r9
 80069ca:	f7f9 fc01 	bl	80001d0 <strlen>
 80069ce:	4649      	mov	r1, r9
 80069d0:	4602      	mov	r2, r0
 80069d2:	eb08 000a 	add.w	r0, r8, sl
 80069d6:	f000 fc6b 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80069da:	f8d6 8000 	ldr.w	r8, [r6]
 80069de:	4640      	mov	r0, r8
 80069e0:	f7f9 fbf6 	bl	80001d0 <strlen>
 80069e4:	783b      	ldrb	r3, [r7, #0]
 80069e6:	f808 3000 	strb.w	r3, [r8, r0]
			if(valve_state == valve_OPEN){
 80069ea:	4a25      	ldr	r2, [pc, #148]	; (8006a80 <uart_comms+0x2d4>)
 80069ec:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <uart_comms+0x2d8>)
 80069ee:	6817      	ldr	r7, [r2, #0]
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 80069f0:	f8d6 8000 	ldr.w	r8, [r6]
			if(valve_state == valve_OPEN){
 80069f4:	429f      	cmp	r7, r3
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 80069f6:	4640      	mov	r0, r8
			if(valve_state == valve_OPEN){
 80069f8:	f000 8330 	beq.w	800705c <uart_comms+0x8b0>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 80069fc:	f7f9 fbe8 	bl	80001d0 <strlen>
 8006a00:	4681      	mov	r9, r0
 8006a02:	4638      	mov	r0, r7
 8006a04:	f7f9 fbe4 	bl	80001d0 <strlen>
 8006a08:	4639      	mov	r1, r7
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	eb08 0009 	add.w	r0, r8, r9
 8006a10:	f000 fc4e 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8006a14:	6837      	ldr	r7, [r6, #0]
 8006a16:	4638      	mov	r0, r7
 8006a18:	f7f9 fbda 	bl	80001d0 <strlen>
 8006a1c:	4b1a      	ldr	r3, [pc, #104]	; (8006a88 <uart_comms+0x2dc>)
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	523b      	strh	r3, [r7, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006a22:	6836      	ldr	r6, [r6, #0]
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7f9 fbd3 	bl	80001d0 <strlen>
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	b282      	uxth	r2, r0
 8006a2e:	4817      	ldr	r0, [pc, #92]	; (8006a8c <uart_comms+0x2e0>)
 8006a30:	f7fd fb96 	bl	8004160 <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 8006a34:	6828      	ldr	r0, [r5, #0]
 8006a36:	223c      	movs	r2, #60	; 0x3c
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f000 fc44 	bl	80072c6 <memset>
		uart_counter = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	7023      	strb	r3, [r4, #0]
 8006a42:	e6c9      	b.n	80067d8 <uart_comms+0x2c>
 8006a44:	20000308 	.word	0x20000308
 8006a48:	20000300 	.word	0x20000300
 8006a4c:	200005e4 	.word	0x200005e4
 8006a50:	200002d9 	.word	0x200002d9
 8006a54:	200002d4 	.word	0x200002d4
 8006a58:	20000304 	.word	0x20000304
 8006a5c:	200002bc 	.word	0x200002bc
 8006a60:	2000001a 	.word	0x2000001a
 8006a64:	20000004 	.word	0x20000004
 8006a68:	20000280 	.word	0x20000280
 8006a6c:	20000314 	.word	0x20000314
 8006a70:	20000274 	.word	0x20000274
 8006a74:	2000029c 	.word	0x2000029c
 8006a78:	200002f8 	.word	0x200002f8
 8006a7c:	200002b0 	.word	0x200002b0
 8006a80:	2000030c 	.word	0x2000030c
 8006a84:	20000054 	.word	0x20000054
 8006a88:	20000008 	.word	0x20000008
 8006a8c:	20000438 	.word	0x20000438
 8006a90:	200002c0 	.word	0x200002c0
 8006a94:	20000010 	.word	0x20000010
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8006a98:	f8df 8368 	ldr.w	r8, [pc, #872]	; 8006e04 <uart_comms+0x658>
 8006a9c:	48c8      	ldr	r0, [pc, #800]	; (8006dc0 <uart_comms+0x614>)
 8006a9e:	f8d8 1000 	ldr.w	r1, [r8]
			memcpy(return_value+2,comma,1);
 8006aa2:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8006dec <uart_comms+0x640>
			itoa((time->Hours),temp_time_var,10  );
 8006aa6:	4fc7      	ldr	r7, [pc, #796]	; (8006dc4 <uart_comms+0x618>)
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f7fc fe65 	bl	8003778 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8006aae:	4bc6      	ldr	r3, [pc, #792]	; (8006dc8 <uart_comms+0x61c>)
 8006ab0:	48c3      	ldr	r0, [pc, #780]	; (8006dc0 <uart_comms+0x614>)
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f7fc fe95 	bl	80037e4 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 8006aba:	682a      	ldr	r2, [r5, #0]
 8006abc:	6833      	ldr	r3, [r6, #0]
 8006abe:	8812      	ldrh	r2, [r2, #0]
 8006ac0:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8006ac2:	6833      	ldr	r3, [r6, #0]
 8006ac4:	f899 2000 	ldrb.w	r2, [r9]
 8006ac8:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 8006aca:	f8d8 3000 	ldr.w	r3, [r8]
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	7818      	ldrb	r0, [r3, #0]
 8006ad2:	220a      	movs	r2, #10
 8006ad4:	f000 fbe2 	bl	800729c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8006ad8:	f8d6 a000 	ldr.w	sl, [r6]
 8006adc:	4650      	mov	r0, sl
 8006ade:	f7f9 fb77 	bl	80001d0 <strlen>
 8006ae2:	f8d7 b000 	ldr.w	fp, [r7]
 8006ae6:	9001      	str	r0, [sp, #4]
 8006ae8:	4658      	mov	r0, fp
 8006aea:	f7f9 fb71 	bl	80001d0 <strlen>
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	4602      	mov	r2, r0
 8006af2:	4659      	mov	r1, fp
 8006af4:	eb0a 0003 	add.w	r0, sl, r3
 8006af8:	f000 fbda 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006afc:	f8d6 a000 	ldr.w	sl, [r6]
 8006b00:	4650      	mov	r0, sl
 8006b02:	f7f9 fb65 	bl	80001d0 <strlen>
 8006b06:	f899 3000 	ldrb.w	r3, [r9]
 8006b0a:	f80a 3000 	strb.w	r3, [sl, r0]
			itoa((time->Minutes),temp_time_var,10  );
 8006b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	7858      	ldrb	r0, [r3, #1]
 8006b16:	220a      	movs	r2, #10
 8006b18:	f000 fbc0 	bl	800729c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8006b1c:	f8d6 a000 	ldr.w	sl, [r6]
 8006b20:	4650      	mov	r0, sl
 8006b22:	f7f9 fb55 	bl	80001d0 <strlen>
 8006b26:	f8d7 b000 	ldr.w	fp, [r7]
 8006b2a:	9001      	str	r0, [sp, #4]
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f7f9 fb4f 	bl	80001d0 <strlen>
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	4602      	mov	r2, r0
 8006b36:	4659      	mov	r1, fp
 8006b38:	eb0a 0003 	add.w	r0, sl, r3
 8006b3c:	f000 fbb8 	bl	80072b0 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006b40:	f8d6 a000 	ldr.w	sl, [r6]
 8006b44:	4650      	mov	r0, sl
 8006b46:	f7f9 fb43 	bl	80001d0 <strlen>
 8006b4a:	f899 3000 	ldrb.w	r3, [r9]
 8006b4e:	f80a 3000 	strb.w	r3, [sl, r0]
			itoa((time->Seconds),temp_time_var,10  );
 8006b52:	f8d8 3000 	ldr.w	r3, [r8]
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	7898      	ldrb	r0, [r3, #2]
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	f000 fb9e 	bl	800729c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8006b60:	f8d6 8000 	ldr.w	r8, [r6]
 8006b64:	4640      	mov	r0, r8
 8006b66:	f7f9 fb33 	bl	80001d0 <strlen>
 8006b6a:	683f      	ldr	r7, [r7, #0]
 8006b6c:	4681      	mov	r9, r0
 8006b6e:	e748      	b.n	8006a02 <uart_comms+0x256>
			memcpy(return_value, uart_command, 2);
 8006b70:	6833      	ldr	r3, [r6, #0]
 8006b72:	8812      	ldrh	r2, [r2, #0]
 8006b74:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,endSimbol, 2);
 8006b76:	4a95      	ldr	r2, [pc, #596]	; (8006dcc <uart_comms+0x620>)
 8006b78:	6833      	ldr	r3, [r6, #0]
 8006b7a:	8812      	ldrh	r2, [r2, #0]
 8006b7c:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8006b7e:	f8d6 b000 	ldr.w	fp, [r6]
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8006b82:	4e8f      	ldr	r6, [pc, #572]	; (8006dc0 <uart_comms+0x614>)
			time->Hours = strtol(heating_info, NULL,10);
 8006b84:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8006e04 <uart_comms+0x658>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8006b88:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8006de0 <uart_comms+0x634>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8006b8c:	f8df a238 	ldr.w	sl, [pc, #568]	; 8006dc8 <uart_comms+0x61c>
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8006b90:	4658      	mov	r0, fp
 8006b92:	f7f9 fb1d 	bl	80001d0 <strlen>
 8006b96:	4659      	mov	r1, fp
 8006b98:	b282      	uxth	r2, r0
 8006b9a:	488d      	ldr	r0, [pc, #564]	; (8006dd0 <uart_comms+0x624>)
 8006b9c:	f7fd fae0 	bl	8004160 <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	2253      	movs	r2, #83	; 0x53
 8006ba4:	21ca      	movs	r1, #202	; 0xca
 8006ba6:	6259      	str	r1, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8006ba8:	4630      	mov	r0, r6
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8006bac:	f7fc fe64 	bl	8003878 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8006bb0:	6838      	ldr	r0, [r7, #0]
 8006bb2:	4988      	ldr	r1, [pc, #544]	; (8006dd4 <uart_comms+0x628>)
 8006bb4:	f000 fc70 	bl	8007498 <strtok>
			time->Hours = strtol(heating_info, NULL,10);
 8006bb8:	220a      	movs	r2, #10
 8006bba:	2100      	movs	r1, #0
 8006bbc:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8006bc0:	f8c9 0000 	str.w	r0, [r9]
			time->Hours = strtol(heating_info, NULL,10);
 8006bc4:	f000 fd3c 	bl	8007640 <strtol>
			heating_info = (strtok(NULL, ","));
 8006bc8:	4983      	ldr	r1, [pc, #524]	; (8006dd8 <uart_comms+0x62c>)
			time->Hours = strtol(heating_info, NULL,10);
 8006bca:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 8006bcc:	2000      	movs	r0, #0
 8006bce:	f000 fc63 	bl	8007498 <strtok>
			time->Minutes = strtol(heating_info, NULL,10);
 8006bd2:	220a      	movs	r2, #10
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = (strtok(NULL, ","));
 8006bda:	f8c9 0000 	str.w	r0, [r9]
			time->Minutes = strtol(heating_info, NULL,10);
 8006bde:	f000 fd2f 	bl	8007640 <strtol>
			heating_info = (strtok(NULL, ",\r\n"));
 8006be2:	497e      	ldr	r1, [pc, #504]	; (8006ddc <uart_comms+0x630>)
			time->Minutes = strtol(heating_info, NULL,10);
 8006be4:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 8006be6:	2000      	movs	r0, #0
 8006be8:	f000 fc56 	bl	8007498 <strtok>
			time->Seconds = strtol(heating_info, NULL,10);
 8006bec:	220a      	movs	r2, #10
 8006bee:	2100      	movs	r1, #0
 8006bf0:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = (strtok(NULL, ",\r\n"));
 8006bf4:	f8c9 0000 	str.w	r0, [r9]
			time->Seconds = strtol(heating_info, NULL,10);
 8006bf8:	f000 fd22 	bl	8007640 <strtol>
 8006bfc:	70b8      	strb	r0, [r7, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8006bfe:	f8d8 1000 	ldr.w	r1, [r8]
 8006c02:	4630      	mov	r0, r6
 8006c04:	2200      	movs	r2, #0
 8006c06:	f7fc fea9 	bl	800395c <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8006c0a:	f8da 1000 	ldr.w	r1, [sl]
 8006c0e:	4630      	mov	r0, r6
 8006c10:	2200      	movs	r2, #0
 8006c12:	f7fc ff43 	bl	8003a9c <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8006c16:	6833      	ldr	r3, [r6, #0]
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8006c18:	f8d8 1000 	ldr.w	r1, [r8]
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8006c1c:	22ff      	movs	r2, #255	; 0xff
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8006c20:	4630      	mov	r0, r6
 8006c22:	2200      	movs	r2, #0
 8006c24:	f7fc fda8 	bl	8003778 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8006c28:	f8da 1000 	ldr.w	r1, [sl]
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f7fc fdd8 	bl	80037e4 <HAL_RTC_GetDate>
			break;
 8006c34:	e6fe      	b.n	8006a34 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8006c36:	6833      	ldr	r3, [r6, #0]
 8006c38:	8812      	ldrh	r2, [r2, #0]
 8006c3a:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8006c3c:	4a63      	ldr	r2, [pc, #396]	; (8006dcc <uart_comms+0x620>)
 8006c3e:	6833      	ldr	r3, [r6, #0]
 8006c40:	8812      	ldrh	r2, [r2, #0]
 8006c42:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8006c44:	6836      	ldr	r6, [r6, #0]
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7f9 fac2 	bl	80001d0 <strlen>
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	b282      	uxth	r2, r0
 8006c50:	485f      	ldr	r0, [pc, #380]	; (8006dd0 <uart_comms+0x624>)
 8006c52:	f7fd fa85 	bl	8004160 <HAL_UART_Transmit_IT>
			if(uart_command[3] == '1'){ // first heating schedule
 8006c56:	682b      	ldr	r3, [r5, #0]
 8006c58:	78db      	ldrb	r3, [r3, #3]
 8006c5a:	2b31      	cmp	r3, #49	; 0x31
 8006c5c:	f000 81b1 	beq.w	8006fc2 <uart_comms+0x816>
			else if(uart_command[3] == '2'){ // second heating schedule
 8006c60:	2b32      	cmp	r3, #50	; 0x32
 8006c62:	f000 815f 	beq.w	8006f24 <uart_comms+0x778>
			else if(uart_command[3] == '3'){ // 3rd heating schedule
 8006c66:	2b33      	cmp	r3, #51	; 0x33
 8006c68:	f47f aee4 	bne.w	8006a34 <uart_comms+0x288>
				heating_info = strtok((char*)uart_command_copy, ",");
 8006c6c:	6838      	ldr	r0, [r7, #0]
 8006c6e:	495a      	ldr	r1, [pc, #360]	; (8006dd8 <uart_comms+0x62c>)
 8006c70:	4e5b      	ldr	r6, [pc, #364]	; (8006de0 <uart_comms+0x634>)
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8006c72:	4f5c      	ldr	r7, [pc, #368]	; (8006de4 <uart_comms+0x638>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8006c74:	f000 fc10 	bl	8007498 <strtok>
				heating_info = (strtok(NULL, ","));
 8006c78:	4957      	ldr	r1, [pc, #348]	; (8006dd8 <uart_comms+0x62c>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8006c7a:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f000 fc0b 	bl	8007498 <strtok>
				heating_info = (strtok(NULL, ","));
 8006c82:	4955      	ldr	r1, [pc, #340]	; (8006dd8 <uart_comms+0x62c>)
				heating_info = (strtok(NULL, ","));
 8006c84:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8006c86:	2000      	movs	r0, #0
 8006c88:	f000 fc06 	bl	8007498 <strtok>
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006c90:	6030      	str	r0, [r6, #0]
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8006c92:	f000 fcd5 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006c96:	4950      	ldr	r1, [pc, #320]	; (8006dd8 <uart_comms+0x62c>)
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8006c98:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
				heating_info = (strtok(NULL, ","));
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f000 fbfb 	bl	8007498 <strtok>
				heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006ca6:	6030      	str	r0, [r6, #0]
				heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8006ca8:	f000 fcca 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006cac:	494a      	ldr	r1, [pc, #296]	; (8006dd8 <uart_comms+0x62c>)
				heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8006cae:	f887 0051 	strb.w	r0, [r7, #81]	; 0x51
				heating_info = (strtok(NULL, ","));
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	f000 fbf0 	bl	8007498 <strtok>
				heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8006cb8:	220a      	movs	r2, #10
 8006cba:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006cbc:	6030      	str	r0, [r6, #0]
				heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8006cbe:	f000 fcbf 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006cc2:	4945      	ldr	r1, [pc, #276]	; (8006dd8 <uart_comms+0x62c>)
				heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8006cc4:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
				heating_info = (strtok(NULL, ","));
 8006cc8:	2000      	movs	r0, #0
 8006cca:	f000 fbe5 	bl	8007498 <strtok>
				heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8006cce:	220a      	movs	r2, #10
 8006cd0:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006cd2:	6030      	str	r0, [r6, #0]
				heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8006cd4:	f000 fcb4 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006cd8:	493f      	ldr	r1, [pc, #252]	; (8006dd8 <uart_comms+0x62c>)
				heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8006cda:	f887 0064 	strb.w	r0, [r7, #100]	; 0x64
				heating_info = (strtok(NULL, ","));
 8006cde:	2000      	movs	r0, #0
 8006ce0:	f000 fbda 	bl	8007498 <strtok>
				heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 8006ce4:	220a      	movs	r2, #10
 8006ce6:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006ce8:	6030      	str	r0, [r6, #0]
				heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 8006cea:	f000 fca9 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, "\r\n"));
 8006cee:	493e      	ldr	r1, [pc, #248]	; (8006de8 <uart_comms+0x63c>)
				heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 8006cf0:	f887 0065 	strb.w	r0, [r7, #101]	; 0x65
				heating_info = (strtok(NULL, "\r\n"));
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f000 fbcf 	bl	8007498 <strtok>
				heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 8006cfa:	220a      	movs	r2, #10
 8006cfc:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, "\r\n"));
 8006cfe:	6030      	str	r0, [r6, #0]
				heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 8006d00:	f000 fc9e 	bl	8007640 <strtol>
 8006d04:	f887 0066 	strb.w	r0, [r7, #102]	; 0x66
 8006d08:	e694      	b.n	8006a34 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8006d0a:	6833      	ldr	r3, [r6, #0]
 8006d0c:	8812      	ldrh	r2, [r2, #0]
 8006d0e:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8006d10:	4b36      	ldr	r3, [pc, #216]	; (8006dec <uart_comms+0x640>)
 8006d12:	6832      	ldr	r2, [r6, #0]
 8006d14:	7819      	ldrb	r1, [r3, #0]
			sprintf(temp_val,"%d", *set_temp);
 8006d16:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <uart_comms+0x644>)
			memcpy(return_value+2, comma, 1);
 8006d18:	7091      	strb	r1, [r2, #2]
			sprintf(temp_val,"%d", *set_temp);
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4f35      	ldr	r7, [pc, #212]	; (8006df4 <uart_comms+0x648>)
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	4935      	ldr	r1, [pc, #212]	; (8006df8 <uart_comms+0x64c>)
 8006d22:	6838      	ldr	r0, [r7, #0]
 8006d24:	f000 fb94 	bl	8007450 <siprintf>
			memcpy(return_value+3, temp_val, strlen(temp_val));
 8006d28:	683f      	ldr	r7, [r7, #0]
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	f7f9 fa50 	bl	80001d0 <strlen>
 8006d30:	6833      	ldr	r3, [r6, #0]
 8006d32:	4602      	mov	r2, r0
 8006d34:	4639      	mov	r1, r7
 8006d36:	1cd8      	adds	r0, r3, #3
 8006d38:	e66a      	b.n	8006a10 <uart_comms+0x264>
			memcpy(return_value, uart_command,2);
 8006d3a:	6833      	ldr	r3, [r6, #0]
 8006d3c:	8812      	ldrh	r2, [r2, #0]
 8006d3e:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,endSimbol, 2);
 8006d40:	4a22      	ldr	r2, [pc, #136]	; (8006dcc <uart_comms+0x620>)
 8006d42:	6833      	ldr	r3, [r6, #0]
 8006d44:	8812      	ldrh	r2, [r2, #0]
 8006d46:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006d48:	6837      	ldr	r7, [r6, #0]
			memset(temp_val, 0x00, 4);
 8006d4a:	4e2a      	ldr	r6, [pc, #168]	; (8006df4 <uart_comms+0x648>)
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f7f9 fa3f 	bl	80001d0 <strlen>
 8006d52:	4639      	mov	r1, r7
 8006d54:	b282      	uxth	r2, r0
 8006d56:	481e      	ldr	r0, [pc, #120]	; (8006dd0 <uart_comms+0x624>)
 8006d58:	f7fd fa02 	bl	8004160 <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 8006d5c:	7823      	ldrb	r3, [r4, #0]
			memset(temp_val, 0x00, 4);
 8006d5e:	6831      	ldr	r1, [r6, #0]
			sizeOfTemp = uart_counter - 5;
 8006d60:	4a26      	ldr	r2, [pc, #152]	; (8006dfc <uart_comms+0x650>)
 8006d62:	3b05      	subs	r3, #5
			memset(temp_val, 0x00, 4);
 8006d64:	2700      	movs	r7, #0
			sizeOfTemp = uart_counter - 5;
 8006d66:	7013      	strb	r3, [r2, #0]
			memset(temp_val, 0x00, 4);
 8006d68:	600f      	str	r7, [r1, #0]
			memcpy(temp_val, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 8006d6a:	6829      	ldr	r1, [r5, #0]
 8006d6c:	7812      	ldrb	r2, [r2, #0]
 8006d6e:	6830      	ldr	r0, [r6, #0]
 8006d70:	3103      	adds	r1, #3
 8006d72:	f000 fa9d 	bl	80072b0 <memcpy>
			*set_temp = strtol(temp_val, NULL,10);
 8006d76:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <uart_comms+0x644>)
 8006d78:	6830      	ldr	r0, [r6, #0]
 8006d7a:	681e      	ldr	r6, [r3, #0]
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	220a      	movs	r2, #10
 8006d80:	f000 fc5e 	bl	8007640 <strtol>
 8006d84:	7030      	strb	r0, [r6, #0]
			break;
 8006d86:	e655      	b.n	8006a34 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8006d88:	6833      	ldr	r3, [r6, #0]
 8006d8a:	8812      	ldrh	r2, [r2, #0]
 8006d8c:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8006d8e:	4a0f      	ldr	r2, [pc, #60]	; (8006dcc <uart_comms+0x620>)
 8006d90:	6833      	ldr	r3, [r6, #0]
 8006d92:	8812      	ldrh	r2, [r2, #0]
 8006d94:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8006d96:	6836      	ldr	r6, [r6, #0]
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7f9 fa19 	bl	80001d0 <strlen>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	b282      	uxth	r2, r0
 8006da2:	480b      	ldr	r0, [pc, #44]	; (8006dd0 <uart_comms+0x624>)
 8006da4:	f7fd f9dc 	bl	8004160 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	78db      	ldrb	r3, [r3, #3]
 8006dac:	2b30      	cmp	r3, #48	; 0x30
 8006dae:	f000 8151 	beq.w	8007054 <uart_comms+0x8a8>
			else if(uart_command[3] == '1'){
 8006db2:	2b31      	cmp	r3, #49	; 0x31
 8006db4:	f47f ae3e 	bne.w	8006a34 <uart_comms+0x288>
				auto_heating = 1;
 8006db8:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <uart_comms+0x654>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	e639      	b.n	8006a34 <uart_comms+0x288>
 8006dc0:	200004a8 	.word	0x200004a8
 8006dc4:	200002e8 	.word	0x200002e8
 8006dc8:	20000284 	.word	0x20000284
 8006dcc:	20000008 	.word	0x20000008
 8006dd0:	20000438 	.word	0x20000438
 8006dd4:	0800805c 	.word	0x0800805c
 8006dd8:	08008060 	.word	0x08008060
 8006ddc:	08008064 	.word	0x08008064
 8006de0:	200002b4 	.word	0x200002b4
 8006de4:	20000568 	.word	0x20000568
 8006de8:	08008068 	.word	0x08008068
 8006dec:	20000004 	.word	0x20000004
 8006df0:	200002e0 	.word	0x200002e0
 8006df4:	200002ec 	.word	0x200002ec
 8006df8:	08008024 	.word	0x08008024
 8006dfc:	200002e4 	.word	0x200002e4
 8006e00:	20000278 	.word	0x20000278
 8006e04:	200002f4 	.word	0x200002f4
			memcpy(studentnumber, uart_command, 2 );
 8006e08:	4ba4      	ldr	r3, [pc, #656]	; (800709c <uart_comms+0x8f0>)
 8006e0a:	8810      	ldrh	r0, [r2, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
			memcpy(studentnumber+2,comma,1);
 8006e0e:	49a4      	ldr	r1, [pc, #656]	; (80070a0 <uart_comms+0x8f4>)
			memcpy(studentnumber, uart_command, 2 );
 8006e10:	8010      	strh	r0, [r2, #0]
			memcpy(studentnumber+2,comma,1);
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	7809      	ldrb	r1, [r1, #0]
 8006e16:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8006e18:	4aa2      	ldr	r2, [pc, #648]	; (80070a4 <uart_comms+0x8f8>)
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	6811      	ldr	r1, [r2, #0]
 8006e1e:	6856      	ldr	r6, [r2, #4]
 8006e20:	f8c0 1003 	str.w	r1, [r0, #3]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8006e24:	4aa0      	ldr	r2, [pc, #640]	; (80070a8 <uart_comms+0x8fc>)
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8006e26:	f8c0 6007 	str.w	r6, [r0, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	6813      	ldr	r3, [r2, #0]
 8006e2e:	6852      	ldr	r2, [r2, #4]
 8006e30:	f8c1 200f 	str.w	r2, [r1, #15]
 8006e34:	f8c1 300b 	str.w	r3, [r1, #11]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 8006e38:	220d      	movs	r2, #13
 8006e3a:	489c      	ldr	r0, [pc, #624]	; (80070ac <uart_comms+0x900>)
 8006e3c:	f7fd f990 	bl	8004160 <HAL_UART_Transmit_IT>
			break;
 8006e40:	e5f8      	b.n	8006a34 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8006e42:	6833      	ldr	r3, [r6, #0]
 8006e44:	8812      	ldrh	r2, [r2, #0]
 8006e46:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8006e48:	4a97      	ldr	r2, [pc, #604]	; (80070a8 <uart_comms+0x8fc>)
 8006e4a:	6833      	ldr	r3, [r6, #0]
 8006e4c:	8812      	ldrh	r2, [r2, #0]
 8006e4e:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8006e50:	6836      	ldr	r6, [r6, #0]
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7f9 f9bc 	bl	80001d0 <strlen>
 8006e58:	4631      	mov	r1, r6
 8006e5a:	b282      	uxth	r2, r0
 8006e5c:	4893      	ldr	r0, [pc, #588]	; (80070ac <uart_comms+0x900>)
 8006e5e:	f7fd f97f 	bl	8004160 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){ // logging disable
 8006e62:	682b      	ldr	r3, [r5, #0]
 8006e64:	78db      	ldrb	r3, [r3, #3]
 8006e66:	2b30      	cmp	r3, #48	; 0x30
 8006e68:	d058      	beq.n	8006f1c <uart_comms+0x770>
			else if(uart_command[3] == '1'){ // logging enable
 8006e6a:	2b31      	cmp	r3, #49	; 0x31
 8006e6c:	f47f ade2 	bne.w	8006a34 <uart_comms+0x288>
				enableFlashLogging = 1;
 8006e70:	4b8f      	ldr	r3, [pc, #572]	; (80070b0 <uart_comms+0x904>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e5dd      	b.n	8006a34 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	8812      	ldrh	r2, [r2, #0]
 8006e7c:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8006e7e:	4a8a      	ldr	r2, [pc, #552]	; (80070a8 <uart_comms+0x8fc>)
 8006e80:	6833      	ldr	r3, [r6, #0]
 8006e82:	8812      	ldrh	r2, [r2, #0]
 8006e84:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8006e86:	6836      	ldr	r6, [r6, #0]
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7f9 f9a1 	bl	80001d0 <strlen>
 8006e8e:	4631      	mov	r1, r6
 8006e90:	b282      	uxth	r2, r0
 8006e92:	4886      	ldr	r0, [pc, #536]	; (80070ac <uart_comms+0x900>)
 8006e94:	f7fd f964 	bl	8004160 <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 8006e98:	4b86      	ldr	r3, [pc, #536]	; (80070b4 <uart_comms+0x908>)
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	f47f adc9 	bne.w	8006a34 <uart_comms+0x288>
				if(uart_command[3]=='0'){
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	78db      	ldrb	r3, [r3, #3]
 8006ea6:	2b30      	cmp	r3, #48	; 0x30
 8006ea8:	f000 80ef 	beq.w	800708a <uart_comms+0x8de>
				else if(uart_command[3] == '1'){
 8006eac:	2b31      	cmp	r3, #49	; 0x31
 8006eae:	f47f adc1 	bne.w	8006a34 <uart_comms+0x288>
					heater_state = heater_ON;
 8006eb2:	4b81      	ldr	r3, [pc, #516]	; (80070b8 <uart_comms+0x90c>)
 8006eb4:	4a81      	ldr	r2, [pc, #516]	; (80070bc <uart_comms+0x910>)
 8006eb6:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 8006eb8:	4881      	ldr	r0, [pc, #516]	; (80070c0 <uart_comms+0x914>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ec0:	f7fa ff08 	bl	8001cd4 <HAL_GPIO_WritePin>
 8006ec4:	e5b6      	b.n	8006a34 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8006ec6:	6833      	ldr	r3, [r6, #0]
 8006ec8:	8812      	ldrh	r2, [r2, #0]
 8006eca:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8006ecc:	4a76      	ldr	r2, [pc, #472]	; (80070a8 <uart_comms+0x8fc>)
 8006ece:	6833      	ldr	r3, [r6, #0]
 8006ed0:	8812      	ldrh	r2, [r2, #0]
 8006ed2:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8006ed4:	6836      	ldr	r6, [r6, #0]
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7f9 f97a 	bl	80001d0 <strlen>
 8006edc:	4631      	mov	r1, r6
 8006ede:	b282      	uxth	r2, r0
 8006ee0:	4872      	ldr	r0, [pc, #456]	; (80070ac <uart_comms+0x900>)
 8006ee2:	f7fd f93d 	bl	8004160 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 8006ee6:	682b      	ldr	r3, [r5, #0]
 8006ee8:	78db      	ldrb	r3, [r3, #3]
 8006eea:	2b31      	cmp	r3, #49	; 0x31
 8006eec:	f000 80c3 	beq.w	8007076 <uart_comms+0x8ca>
			else if(uart_command[3] == '0'){
 8006ef0:	2b30      	cmp	r3, #48	; 0x30
 8006ef2:	f47f ad9f 	bne.w	8006a34 <uart_comms+0x288>
				valve_state=valve_CLOSE;
 8006ef6:	4b73      	ldr	r3, [pc, #460]	; (80070c4 <uart_comms+0x918>)
 8006ef8:	4a73      	ldr	r2, [pc, #460]	; (80070c8 <uart_comms+0x91c>)
 8006efa:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 8006efc:	4870      	ldr	r0, [pc, #448]	; (80070c0 <uart_comms+0x914>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f04:	f7fa fee6 	bl	8001cd4 <HAL_GPIO_WritePin>
 8006f08:	e594      	b.n	8006a34 <uart_comms+0x288>
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)noLoggingData, strlen((char*)noLoggingData));
 8006f0a:	4870      	ldr	r0, [pc, #448]	; (80070cc <uart_comms+0x920>)
 8006f0c:	f7f9 f960 	bl	80001d0 <strlen>
 8006f10:	496e      	ldr	r1, [pc, #440]	; (80070cc <uart_comms+0x920>)
 8006f12:	b282      	uxth	r2, r0
 8006f14:	4865      	ldr	r0, [pc, #404]	; (80070ac <uart_comms+0x900>)
 8006f16:	f7fd f923 	bl	8004160 <HAL_UART_Transmit_IT>
 8006f1a:	e58b      	b.n	8006a34 <uart_comms+0x288>
				enableFlashLogging = 0;
 8006f1c:	4b64      	ldr	r3, [pc, #400]	; (80070b0 <uart_comms+0x904>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	e587      	b.n	8006a34 <uart_comms+0x288>
				heating_info = strtok((char*)uart_command_copy, ",");
 8006f24:	6838      	ldr	r0, [r7, #0]
 8006f26:	496a      	ldr	r1, [pc, #424]	; (80070d0 <uart_comms+0x924>)
 8006f28:	4e6a      	ldr	r6, [pc, #424]	; (80070d4 <uart_comms+0x928>)
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8006f2a:	4f6b      	ldr	r7, [pc, #428]	; (80070d8 <uart_comms+0x92c>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8006f2c:	f000 fab4 	bl	8007498 <strtok>
				heating_info = (strtok(NULL, ","));
 8006f30:	4967      	ldr	r1, [pc, #412]	; (80070d0 <uart_comms+0x924>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8006f32:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8006f34:	2000      	movs	r0, #0
 8006f36:	f000 faaf 	bl	8007498 <strtok>
				heating_info = (strtok(NULL, ","));
 8006f3a:	4965      	ldr	r1, [pc, #404]	; (80070d0 <uart_comms+0x924>)
				heating_info = (strtok(NULL, ","));
 8006f3c:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8006f3e:	2000      	movs	r0, #0
 8006f40:	f000 faaa 	bl	8007498 <strtok>
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8006f44:	220a      	movs	r2, #10
 8006f46:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006f48:	6030      	str	r0, [r6, #0]
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8006f4a:	f000 fb79 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006f4e:	4960      	ldr	r1, [pc, #384]	; (80070d0 <uart_comms+0x924>)
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8006f50:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
				heating_info = (strtok(NULL, ","));
 8006f54:	2000      	movs	r0, #0
 8006f56:	f000 fa9f 	bl	8007498 <strtok>
				heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006f5e:	6030      	str	r0, [r6, #0]
				heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8006f60:	f000 fb6e 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006f64:	495a      	ldr	r1, [pc, #360]	; (80070d0 <uart_comms+0x924>)
				heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8006f66:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
				heating_info = (strtok(NULL, ","));
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f000 fa94 	bl	8007498 <strtok>
				heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8006f70:	220a      	movs	r2, #10
 8006f72:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006f74:	6030      	str	r0, [r6, #0]
				heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8006f76:	f000 fb63 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006f7a:	4955      	ldr	r1, [pc, #340]	; (80070d0 <uart_comms+0x924>)
				heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8006f7c:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
				heating_info = (strtok(NULL, ","));
 8006f80:	2000      	movs	r0, #0
 8006f82:	f000 fa89 	bl	8007498 <strtok>
				heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8006f86:	220a      	movs	r2, #10
 8006f88:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006f8a:	6030      	str	r0, [r6, #0]
				heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8006f8c:	f000 fb58 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006f90:	494f      	ldr	r1, [pc, #316]	; (80070d0 <uart_comms+0x924>)
				heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8006f92:	f887 003c 	strb.w	r0, [r7, #60]	; 0x3c
				heating_info = (strtok(NULL, ","));
 8006f96:	2000      	movs	r0, #0
 8006f98:	f000 fa7e 	bl	8007498 <strtok>
				heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8006f9c:	220a      	movs	r2, #10
 8006f9e:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006fa0:	6030      	str	r0, [r6, #0]
				heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8006fa2:	f000 fb4d 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, "\r\n"));
 8006fa6:	494d      	ldr	r1, [pc, #308]	; (80070dc <uart_comms+0x930>)
				heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8006fa8:	f887 003d 	strb.w	r0, [r7, #61]	; 0x3d
				heating_info = (strtok(NULL, "\r\n"));
 8006fac:	2000      	movs	r0, #0
 8006fae:	f000 fa73 	bl	8007498 <strtok>
				heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8006fb2:	220a      	movs	r2, #10
 8006fb4:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, "\r\n"));
 8006fb6:	6030      	str	r0, [r6, #0]
				heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8006fb8:	f000 fb42 	bl	8007640 <strtol>
 8006fbc:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
 8006fc0:	e538      	b.n	8006a34 <uart_comms+0x288>
				heating_info = strtok((char*)uart_command_copy, ",");
 8006fc2:	6838      	ldr	r0, [r7, #0]
 8006fc4:	4942      	ldr	r1, [pc, #264]	; (80070d0 <uart_comms+0x924>)
 8006fc6:	4e43      	ldr	r6, [pc, #268]	; (80070d4 <uart_comms+0x928>)
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8006fc8:	4f43      	ldr	r7, [pc, #268]	; (80070d8 <uart_comms+0x92c>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8006fca:	f000 fa65 	bl	8007498 <strtok>
				heating_info = (strtok(NULL, ","));
 8006fce:	4940      	ldr	r1, [pc, #256]	; (80070d0 <uart_comms+0x924>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8006fd0:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f000 fa60 	bl	8007498 <strtok>
				heating_info = (strtok(NULL, ","));
 8006fd8:	493d      	ldr	r1, [pc, #244]	; (80070d0 <uart_comms+0x924>)
				heating_info = (strtok(NULL, ","));
 8006fda:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f000 fa5b 	bl	8007498 <strtok>
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8006fe2:	220a      	movs	r2, #10
 8006fe4:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006fe6:	6030      	str	r0, [r6, #0]
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8006fe8:	f000 fb2a 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8006fec:	4938      	ldr	r1, [pc, #224]	; (80070d0 <uart_comms+0x924>)
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8006fee:	7038      	strb	r0, [r7, #0]
				heating_info = (strtok(NULL, ","));
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	f000 fa51 	bl	8007498 <strtok>
				heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8006ff6:	220a      	movs	r2, #10
 8006ff8:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8006ffa:	6030      	str	r0, [r6, #0]
				heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8006ffc:	f000 fb20 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8007000:	4933      	ldr	r1, [pc, #204]	; (80070d0 <uart_comms+0x924>)
				heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8007002:	7078      	strb	r0, [r7, #1]
				heating_info = (strtok(NULL, ","));
 8007004:	2000      	movs	r0, #0
 8007006:	f000 fa47 	bl	8007498 <strtok>
				heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 800700a:	220a      	movs	r2, #10
 800700c:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 800700e:	6030      	str	r0, [r6, #0]
				heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8007010:	f000 fb16 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8007014:	492e      	ldr	r1, [pc, #184]	; (80070d0 <uart_comms+0x924>)
				heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8007016:	70b8      	strb	r0, [r7, #2]
				heating_info = (strtok(NULL, ","));
 8007018:	2000      	movs	r0, #0
 800701a:	f000 fa3d 	bl	8007498 <strtok>
				heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 800701e:	220a      	movs	r2, #10
 8007020:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8007022:	6030      	str	r0, [r6, #0]
				heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8007024:	f000 fb0c 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, ","));
 8007028:	4929      	ldr	r1, [pc, #164]	; (80070d0 <uart_comms+0x924>)
				heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 800702a:	7538      	strb	r0, [r7, #20]
				heating_info = (strtok(NULL, ","));
 800702c:	2000      	movs	r0, #0
 800702e:	f000 fa33 	bl	8007498 <strtok>
				heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8007032:	220a      	movs	r2, #10
 8007034:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8007036:	6030      	str	r0, [r6, #0]
				heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8007038:	f000 fb02 	bl	8007640 <strtol>
				heating_info = (strtok(NULL, "\r\n"));
 800703c:	4927      	ldr	r1, [pc, #156]	; (80070dc <uart_comms+0x930>)
				heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 800703e:	7578      	strb	r0, [r7, #21]
				heating_info = (strtok(NULL, "\r\n"));
 8007040:	2000      	movs	r0, #0
 8007042:	f000 fa29 	bl	8007498 <strtok>
				heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8007046:	220a      	movs	r2, #10
 8007048:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, "\r\n"));
 800704a:	6030      	str	r0, [r6, #0]
				heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 800704c:	f000 faf8 	bl	8007640 <strtol>
 8007050:	75b8      	strb	r0, [r7, #22]
 8007052:	e4ef      	b.n	8006a34 <uart_comms+0x288>
				auto_heating = 0;
 8007054:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <uart_comms+0x908>)
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	e4eb      	b.n	8006a34 <uart_comms+0x288>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 800705c:	f7f9 f8b8 	bl	80001d0 <strlen>
 8007060:	4681      	mov	r9, r0
 8007062:	4638      	mov	r0, r7
 8007064:	f7f9 f8b4 	bl	80001d0 <strlen>
 8007068:	4639      	mov	r1, r7
 800706a:	1e42      	subs	r2, r0, #1
 800706c:	eb08 0009 	add.w	r0, r8, r9
 8007070:	f000 f91e 	bl	80072b0 <memcpy>
 8007074:	e4ce      	b.n	8006a14 <uart_comms+0x268>
				valve_state = valve_OPEN;
 8007076:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <uart_comms+0x918>)
 8007078:	4a19      	ldr	r2, [pc, #100]	; (80070e0 <uart_comms+0x934>)
 800707a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 800707c:	4810      	ldr	r0, [pc, #64]	; (80070c0 <uart_comms+0x914>)
 800707e:	2201      	movs	r2, #1
 8007080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007084:	f7fa fe26 	bl	8001cd4 <HAL_GPIO_WritePin>
 8007088:	e4d4      	b.n	8006a34 <uart_comms+0x288>
					heater_state = heater_OFF;
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <uart_comms+0x90c>)
 800708c:	4915      	ldr	r1, [pc, #84]	; (80070e4 <uart_comms+0x938>)
 800708e:	6019      	str	r1, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 8007090:	480b      	ldr	r0, [pc, #44]	; (80070c0 <uart_comms+0x914>)
 8007092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007096:	f7fa fe1d 	bl	8001cd4 <HAL_GPIO_WritePin>
 800709a:	e4cb      	b.n	8006a34 <uart_comms+0x288>
 800709c:	200005e0 	.word	0x200005e0
 80070a0:	20000004 	.word	0x20000004
 80070a4:	20000040 	.word	0x20000040
 80070a8:	20000008 	.word	0x20000008
 80070ac:	20000438 	.word	0x20000438
 80070b0:	20000289 	.word	0x20000289
 80070b4:	20000278 	.word	0x20000278
 80070b8:	200002b0 	.word	0x200002b0
 80070bc:	20000018 	.word	0x20000018
 80070c0:	48000400 	.word	0x48000400
 80070c4:	2000030c 	.word	0x2000030c
 80070c8:	2000004c 	.word	0x2000004c
 80070cc:	20000020 	.word	0x20000020
 80070d0:	08008060 	.word	0x08008060
 80070d4:	200002b4 	.word	0x200002b4
 80070d8:	20000568 	.word	0x20000568
 80070dc:	08008068 	.word	0x08008068
 80070e0:	20000054 	.word	0x20000054
 80070e4:	20000014 	.word	0x20000014

080070e8 <mainLoop>:
ADC_ChannelConfTypeDef Channel_4;
extern uint32_t uwTick;



void mainLoop(){
 80070e8:	b510      	push	{r4, lr}
	  if(rx_flag == 1 ){ 	// UART Comms
 80070ea:	4b2f      	ldr	r3, [pc, #188]	; (80071a8 <mainLoop+0xc0>)
 80070ec:	781a      	ldrb	r2, [r3, #0]
 80070ee:	2a01      	cmp	r2, #1
 80070f0:	d03a      	beq.n	8007168 <mainLoop+0x80>
		  rx_flag = 0;
		  uart_comms();
	  }

	  // Seven Segment
	  if(systick_flag == 1){
 80070f2:	4b2e      	ldr	r3, [pc, #184]	; (80071ac <mainLoop+0xc4>)
		  systick_flag = 0;
		  i2c_counter += 1;
 80070f4:	4c2e      	ldr	r4, [pc, #184]	; (80071b0 <mainLoop+0xc8>)
	  if(systick_flag == 1){
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	2a01      	cmp	r2, #1
 80070fa:	d03e      	beq.n	800717a <mainLoop+0x92>
		  seven_segment();
//		  HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
	  }

	  if(i2c_counter == 150){
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	2b96      	cmp	r3, #150	; 0x96
 8007100:	d045      	beq.n	800718e <mainLoop+0xa6>
		  i2c_counter = 0;
		  handleEvents();
	  }

	  // ADC conversion
	  if(adc_flag == 1){
 8007102:	4b2c      	ldr	r3, [pc, #176]	; (80071b4 <mainLoop+0xcc>)
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	2a01      	cmp	r2, #1
 8007108:	d049      	beq.n	800719e <mainLoop+0xb6>
		  adc_flag = 0;
		  adc_comms();
	  }
	  // Nothing at the moment
	  if(touch_flag == 1 ){
 800710a:	4b2b      	ldr	r3, [pc, #172]	; (80071b8 <mainLoop+0xd0>)
 800710c:	781a      	ldrb	r2, [r3, #0]
 800710e:	2a01      	cmp	r2, #1
		  touch_flag = 0;
 8007110:	bf04      	itt	eq
 8007112:	2200      	moveq	r2, #0
 8007114:	701a      	strbeq	r2, [r3, #0]
		  // do something
	  }
	  // scheduling of heating and RTC
	  if(RTC_timer_flag == 1){
 8007116:	4b29      	ldr	r3, [pc, #164]	; (80071bc <mainLoop+0xd4>)
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	2a01      	cmp	r2, #1
 800711c:	d012      	beq.n	8007144 <mainLoop+0x5c>
			  heating_scheduling();
		  }
	  }

	  // Writing to FLASH
	  if(flash_flag){
 800711e:	4a28      	ldr	r2, [pc, #160]	; (80071c0 <mainLoop+0xd8>)
 8007120:	7813      	ldrb	r3, [r2, #0]
 8007122:	b173      	cbz	r3, 8007142 <mainLoop+0x5a>
		  flash_flag = 0;
		  flash_counter += 1;
 8007124:	4927      	ldr	r1, [pc, #156]	; (80071c4 <mainLoop+0xdc>)
 8007126:	680b      	ldr	r3, [r1, #0]
		  if(flash_counter == 10000){
 8007128:	f242 7410 	movw	r4, #10000	; 0x2710
		  flash_counter += 1;
 800712c:	3301      	adds	r3, #1
		  flash_flag = 0;
 800712e:	2000      	movs	r0, #0
		  if(flash_counter == 10000){
 8007130:	42a3      	cmp	r3, r4
		  flash_flag = 0;
 8007132:	7010      	strb	r0, [r2, #0]
		  if(flash_counter == 10000){
 8007134:	d001      	beq.n	800713a <mainLoop+0x52>
		  flash_counter += 1;
 8007136:	600b      	str	r3, [r1, #0]
 8007138:	bd10      	pop	{r4, pc}
			  flash_counter = 0;
			  if(enableFlashLogging){
 800713a:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <mainLoop+0xe0>)
			  flash_counter = 0;
 800713c:	6008      	str	r0, [r1, #0]
			  if(enableFlashLogging){
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b973      	cbnz	r3, 8007160 <mainLoop+0x78>
 8007142:	bd10      	pop	{r4, pc}
		  fake_RTC_timer += 1;
 8007144:	4921      	ldr	r1, [pc, #132]	; (80071cc <mainLoop+0xe4>)
 8007146:	880a      	ldrh	r2, [r1, #0]
 8007148:	3201      	adds	r2, #1
 800714a:	b292      	uxth	r2, r2
		  RTC_timer_flag = 0;
 800714c:	2000      	movs	r0, #0
		  if(fake_RTC_timer == 1000){
 800714e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
		  fake_RTC_timer += 1;
 8007152:	800a      	strh	r2, [r1, #0]
		  RTC_timer_flag = 0;
 8007154:	7018      	strb	r0, [r3, #0]
		  if(fake_RTC_timer == 1000){
 8007156:	d1e2      	bne.n	800711e <mainLoop+0x36>
			  fake_RTC_timer = 0;
 8007158:	8008      	strh	r0, [r1, #0]
			  heating_scheduling();
 800715a:	f7fd ff51 	bl	8005000 <heating_scheduling>
 800715e:	e7de      	b.n	800711e <mainLoop+0x36>
		  }
	  }



}
 8007160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			  write2Flash();
 8007164:	f7fd bc8e 	b.w	8004a84 <write2Flash>
		  rx_flag = 0;
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 800716c:	f7ff fb1e 	bl	80067ac <uart_comms>
	  if(systick_flag == 1){
 8007170:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <mainLoop+0xc4>)
		  i2c_counter += 1;
 8007172:	4c0f      	ldr	r4, [pc, #60]	; (80071b0 <mainLoop+0xc8>)
	  if(systick_flag == 1){
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	2a01      	cmp	r2, #1
 8007178:	d1c0      	bne.n	80070fc <mainLoop+0x14>
		  i2c_counter += 1;
 800717a:	6822      	ldr	r2, [r4, #0]
		  systick_flag = 0;
 800717c:	2100      	movs	r1, #0
		  i2c_counter += 1;
 800717e:	3201      	adds	r2, #1
		  systick_flag = 0;
 8007180:	7019      	strb	r1, [r3, #0]
		  i2c_counter += 1;
 8007182:	6022      	str	r2, [r4, #0]
		  seven_segment();
 8007184:	f7fe fede 	bl	8005f44 <seven_segment>
	  if(i2c_counter == 150){
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	2b96      	cmp	r3, #150	; 0x96
 800718c:	d1b9      	bne.n	8007102 <mainLoop+0x1a>
		  i2c_counter = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	6023      	str	r3, [r4, #0]
		  handleEvents();
 8007192:	f7fe f9cf 	bl	8005534 <handleEvents>
	  if(adc_flag == 1){
 8007196:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <mainLoop+0xcc>)
 8007198:	781a      	ldrb	r2, [r3, #0]
 800719a:	2a01      	cmp	r2, #1
 800719c:	d1b5      	bne.n	800710a <mainLoop+0x22>
		  adc_flag = 0;
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 80071a2:	f7fd fb4d 	bl	8004840 <adc_comms>
 80071a6:	e7b0      	b.n	800710a <mainLoop+0x22>
 80071a8:	200002d9 	.word	0x200002d9
 80071ac:	200002e5 	.word	0x200002e5
 80071b0:	200002b8 	.word	0x200002b8
 80071b4:	2000026a 	.word	0x2000026a
 80071b8:	200002fc 	.word	0x200002fc
 80071bc:	20000254 	.word	0x20000254
 80071c0:	20000294 	.word	0x20000294
 80071c4:	2000028c 	.word	0x2000028c
 80071c8:	20000289 	.word	0x20000289
 80071cc:	2000028a 	.word	0x2000028a

080071d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80071d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007208 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80071d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80071d6:	e003      	b.n	80071e0 <LoopCopyDataInit>

080071d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80071d8:	4b0c      	ldr	r3, [pc, #48]	; (800720c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80071da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80071dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80071de:	3104      	adds	r1, #4

080071e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80071e0:	480b      	ldr	r0, [pc, #44]	; (8007210 <LoopForever+0xa>)
	ldr	r3, =_edata
 80071e2:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <LoopForever+0xe>)
	adds	r2, r0, r1
 80071e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80071e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80071e8:	d3f6      	bcc.n	80071d8 <CopyDataInit>
	ldr	r2, =_sbss
 80071ea:	4a0b      	ldr	r2, [pc, #44]	; (8007218 <LoopForever+0x12>)
	b	LoopFillZerobss
 80071ec:	e002      	b.n	80071f4 <LoopFillZerobss>

080071ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80071ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80071f0:	f842 3b04 	str.w	r3, [r2], #4

080071f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80071f4:	4b09      	ldr	r3, [pc, #36]	; (800721c <LoopForever+0x16>)
	cmp	r2, r3
 80071f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80071f8:	d3f9      	bcc.n	80071ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80071fa:	f7ff fa9f 	bl	800673c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071fe:	f000 f811 	bl	8007224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007202:	f7fe fe53 	bl	8005eac <main>

08007206 <LoopForever>:

LoopForever:
    b LoopForever
 8007206:	e7fe      	b.n	8007206 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007208:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800720c:	080081dc 	.word	0x080081dc
	ldr	r0, =_sdata
 8007210:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007214:	2000022c 	.word	0x2000022c
	ldr	r2, =_sbss
 8007218:	20000230 	.word	0x20000230
	ldr	r3, = _ebss
 800721c:	2000062c 	.word	0x2000062c

08007220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007220:	e7fe      	b.n	8007220 <ADC1_2_IRQHandler>
	...

08007224 <__libc_init_array>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	4e0d      	ldr	r6, [pc, #52]	; (800725c <__libc_init_array+0x38>)
 8007228:	4c0d      	ldr	r4, [pc, #52]	; (8007260 <__libc_init_array+0x3c>)
 800722a:	1ba4      	subs	r4, r4, r6
 800722c:	10a4      	asrs	r4, r4, #2
 800722e:	2500      	movs	r5, #0
 8007230:	42a5      	cmp	r5, r4
 8007232:	d109      	bne.n	8007248 <__libc_init_array+0x24>
 8007234:	4e0b      	ldr	r6, [pc, #44]	; (8007264 <__libc_init_array+0x40>)
 8007236:	4c0c      	ldr	r4, [pc, #48]	; (8007268 <__libc_init_array+0x44>)
 8007238:	f000 feca 	bl	8007fd0 <_init>
 800723c:	1ba4      	subs	r4, r4, r6
 800723e:	10a4      	asrs	r4, r4, #2
 8007240:	2500      	movs	r5, #0
 8007242:	42a5      	cmp	r5, r4
 8007244:	d105      	bne.n	8007252 <__libc_init_array+0x2e>
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800724c:	4798      	blx	r3
 800724e:	3501      	adds	r5, #1
 8007250:	e7ee      	b.n	8007230 <__libc_init_array+0xc>
 8007252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007256:	4798      	blx	r3
 8007258:	3501      	adds	r5, #1
 800725a:	e7f2      	b.n	8007242 <__libc_init_array+0x1e>
 800725c:	080081d4 	.word	0x080081d4
 8007260:	080081d4 	.word	0x080081d4
 8007264:	080081d4 	.word	0x080081d4
 8007268:	080081d8 	.word	0x080081d8

0800726c <__itoa>:
 800726c:	1e93      	subs	r3, r2, #2
 800726e:	2b22      	cmp	r3, #34	; 0x22
 8007270:	b510      	push	{r4, lr}
 8007272:	460c      	mov	r4, r1
 8007274:	d904      	bls.n	8007280 <__itoa+0x14>
 8007276:	2300      	movs	r3, #0
 8007278:	700b      	strb	r3, [r1, #0]
 800727a:	461c      	mov	r4, r3
 800727c:	4620      	mov	r0, r4
 800727e:	bd10      	pop	{r4, pc}
 8007280:	2a0a      	cmp	r2, #10
 8007282:	d109      	bne.n	8007298 <__itoa+0x2c>
 8007284:	2800      	cmp	r0, #0
 8007286:	da07      	bge.n	8007298 <__itoa+0x2c>
 8007288:	232d      	movs	r3, #45	; 0x2d
 800728a:	700b      	strb	r3, [r1, #0]
 800728c:	4240      	negs	r0, r0
 800728e:	2101      	movs	r1, #1
 8007290:	4421      	add	r1, r4
 8007292:	f000 f9eb 	bl	800766c <__utoa>
 8007296:	e7f1      	b.n	800727c <__itoa+0x10>
 8007298:	2100      	movs	r1, #0
 800729a:	e7f9      	b.n	8007290 <__itoa+0x24>

0800729c <itoa>:
 800729c:	f7ff bfe6 	b.w	800726c <__itoa>

080072a0 <malloc>:
 80072a0:	4b02      	ldr	r3, [pc, #8]	; (80072ac <malloc+0xc>)
 80072a2:	4601      	mov	r1, r0
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	f000 b865 	b.w	8007374 <_malloc_r>
 80072aa:	bf00      	nop
 80072ac:	20000058 	.word	0x20000058

080072b0 <memcpy>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	1e43      	subs	r3, r0, #1
 80072b4:	440a      	add	r2, r1
 80072b6:	4291      	cmp	r1, r2
 80072b8:	d100      	bne.n	80072bc <memcpy+0xc>
 80072ba:	bd10      	pop	{r4, pc}
 80072bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c4:	e7f7      	b.n	80072b6 <memcpy+0x6>

080072c6 <memset>:
 80072c6:	4402      	add	r2, r0
 80072c8:	4603      	mov	r3, r0
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d100      	bne.n	80072d0 <memset+0xa>
 80072ce:	4770      	bx	lr
 80072d0:	f803 1b01 	strb.w	r1, [r3], #1
 80072d4:	e7f9      	b.n	80072ca <memset+0x4>
	...

080072d8 <_free_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4605      	mov	r5, r0
 80072dc:	2900      	cmp	r1, #0
 80072de:	d045      	beq.n	800736c <_free_r+0x94>
 80072e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e4:	1f0c      	subs	r4, r1, #4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bfb8      	it	lt
 80072ea:	18e4      	addlt	r4, r4, r3
 80072ec:	f000 fa13 	bl	8007716 <__malloc_lock>
 80072f0:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <_free_r+0x98>)
 80072f2:	6813      	ldr	r3, [r2, #0]
 80072f4:	4610      	mov	r0, r2
 80072f6:	b933      	cbnz	r3, 8007306 <_free_r+0x2e>
 80072f8:	6063      	str	r3, [r4, #4]
 80072fa:	6014      	str	r4, [r2, #0]
 80072fc:	4628      	mov	r0, r5
 80072fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007302:	f000 ba09 	b.w	8007718 <__malloc_unlock>
 8007306:	42a3      	cmp	r3, r4
 8007308:	d90c      	bls.n	8007324 <_free_r+0x4c>
 800730a:	6821      	ldr	r1, [r4, #0]
 800730c:	1862      	adds	r2, r4, r1
 800730e:	4293      	cmp	r3, r2
 8007310:	bf04      	itt	eq
 8007312:	681a      	ldreq	r2, [r3, #0]
 8007314:	685b      	ldreq	r3, [r3, #4]
 8007316:	6063      	str	r3, [r4, #4]
 8007318:	bf04      	itt	eq
 800731a:	1852      	addeq	r2, r2, r1
 800731c:	6022      	streq	r2, [r4, #0]
 800731e:	6004      	str	r4, [r0, #0]
 8007320:	e7ec      	b.n	80072fc <_free_r+0x24>
 8007322:	4613      	mov	r3, r2
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	b10a      	cbz	r2, 800732c <_free_r+0x54>
 8007328:	42a2      	cmp	r2, r4
 800732a:	d9fa      	bls.n	8007322 <_free_r+0x4a>
 800732c:	6819      	ldr	r1, [r3, #0]
 800732e:	1858      	adds	r0, r3, r1
 8007330:	42a0      	cmp	r0, r4
 8007332:	d10b      	bne.n	800734c <_free_r+0x74>
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	4401      	add	r1, r0
 8007338:	1858      	adds	r0, r3, r1
 800733a:	4282      	cmp	r2, r0
 800733c:	6019      	str	r1, [r3, #0]
 800733e:	d1dd      	bne.n	80072fc <_free_r+0x24>
 8007340:	6810      	ldr	r0, [r2, #0]
 8007342:	6852      	ldr	r2, [r2, #4]
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	4401      	add	r1, r0
 8007348:	6019      	str	r1, [r3, #0]
 800734a:	e7d7      	b.n	80072fc <_free_r+0x24>
 800734c:	d902      	bls.n	8007354 <_free_r+0x7c>
 800734e:	230c      	movs	r3, #12
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	e7d3      	b.n	80072fc <_free_r+0x24>
 8007354:	6820      	ldr	r0, [r4, #0]
 8007356:	1821      	adds	r1, r4, r0
 8007358:	428a      	cmp	r2, r1
 800735a:	bf04      	itt	eq
 800735c:	6811      	ldreq	r1, [r2, #0]
 800735e:	6852      	ldreq	r2, [r2, #4]
 8007360:	6062      	str	r2, [r4, #4]
 8007362:	bf04      	itt	eq
 8007364:	1809      	addeq	r1, r1, r0
 8007366:	6021      	streq	r1, [r4, #0]
 8007368:	605c      	str	r4, [r3, #4]
 800736a:	e7c7      	b.n	80072fc <_free_r+0x24>
 800736c:	bd38      	pop	{r3, r4, r5, pc}
 800736e:	bf00      	nop
 8007370:	2000031c 	.word	0x2000031c

08007374 <_malloc_r>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	1ccd      	adds	r5, r1, #3
 8007378:	f025 0503 	bic.w	r5, r5, #3
 800737c:	3508      	adds	r5, #8
 800737e:	2d0c      	cmp	r5, #12
 8007380:	bf38      	it	cc
 8007382:	250c      	movcc	r5, #12
 8007384:	2d00      	cmp	r5, #0
 8007386:	4606      	mov	r6, r0
 8007388:	db01      	blt.n	800738e <_malloc_r+0x1a>
 800738a:	42a9      	cmp	r1, r5
 800738c:	d903      	bls.n	8007396 <_malloc_r+0x22>
 800738e:	230c      	movs	r3, #12
 8007390:	6033      	str	r3, [r6, #0]
 8007392:	2000      	movs	r0, #0
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	f000 f9be 	bl	8007716 <__malloc_lock>
 800739a:	4a23      	ldr	r2, [pc, #140]	; (8007428 <_malloc_r+0xb4>)
 800739c:	6814      	ldr	r4, [r2, #0]
 800739e:	4621      	mov	r1, r4
 80073a0:	b991      	cbnz	r1, 80073c8 <_malloc_r+0x54>
 80073a2:	4c22      	ldr	r4, [pc, #136]	; (800742c <_malloc_r+0xb8>)
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	b91b      	cbnz	r3, 80073b0 <_malloc_r+0x3c>
 80073a8:	4630      	mov	r0, r6
 80073aa:	f000 f841 	bl	8007430 <_sbrk_r>
 80073ae:	6020      	str	r0, [r4, #0]
 80073b0:	4629      	mov	r1, r5
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 f83c 	bl	8007430 <_sbrk_r>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d126      	bne.n	800740a <_malloc_r+0x96>
 80073bc:	230c      	movs	r3, #12
 80073be:	6033      	str	r3, [r6, #0]
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 f9a9 	bl	8007718 <__malloc_unlock>
 80073c6:	e7e4      	b.n	8007392 <_malloc_r+0x1e>
 80073c8:	680b      	ldr	r3, [r1, #0]
 80073ca:	1b5b      	subs	r3, r3, r5
 80073cc:	d41a      	bmi.n	8007404 <_malloc_r+0x90>
 80073ce:	2b0b      	cmp	r3, #11
 80073d0:	d90f      	bls.n	80073f2 <_malloc_r+0x7e>
 80073d2:	600b      	str	r3, [r1, #0]
 80073d4:	50cd      	str	r5, [r1, r3]
 80073d6:	18cc      	adds	r4, r1, r3
 80073d8:	4630      	mov	r0, r6
 80073da:	f000 f99d 	bl	8007718 <__malloc_unlock>
 80073de:	f104 000b 	add.w	r0, r4, #11
 80073e2:	1d23      	adds	r3, r4, #4
 80073e4:	f020 0007 	bic.w	r0, r0, #7
 80073e8:	1ac3      	subs	r3, r0, r3
 80073ea:	d01b      	beq.n	8007424 <_malloc_r+0xb0>
 80073ec:	425a      	negs	r2, r3
 80073ee:	50e2      	str	r2, [r4, r3]
 80073f0:	bd70      	pop	{r4, r5, r6, pc}
 80073f2:	428c      	cmp	r4, r1
 80073f4:	bf0d      	iteet	eq
 80073f6:	6863      	ldreq	r3, [r4, #4]
 80073f8:	684b      	ldrne	r3, [r1, #4]
 80073fa:	6063      	strne	r3, [r4, #4]
 80073fc:	6013      	streq	r3, [r2, #0]
 80073fe:	bf18      	it	ne
 8007400:	460c      	movne	r4, r1
 8007402:	e7e9      	b.n	80073d8 <_malloc_r+0x64>
 8007404:	460c      	mov	r4, r1
 8007406:	6849      	ldr	r1, [r1, #4]
 8007408:	e7ca      	b.n	80073a0 <_malloc_r+0x2c>
 800740a:	1cc4      	adds	r4, r0, #3
 800740c:	f024 0403 	bic.w	r4, r4, #3
 8007410:	42a0      	cmp	r0, r4
 8007412:	d005      	beq.n	8007420 <_malloc_r+0xac>
 8007414:	1a21      	subs	r1, r4, r0
 8007416:	4630      	mov	r0, r6
 8007418:	f000 f80a 	bl	8007430 <_sbrk_r>
 800741c:	3001      	adds	r0, #1
 800741e:	d0cd      	beq.n	80073bc <_malloc_r+0x48>
 8007420:	6025      	str	r5, [r4, #0]
 8007422:	e7d9      	b.n	80073d8 <_malloc_r+0x64>
 8007424:	bd70      	pop	{r4, r5, r6, pc}
 8007426:	bf00      	nop
 8007428:	2000031c 	.word	0x2000031c
 800742c:	20000320 	.word	0x20000320

08007430 <_sbrk_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4c06      	ldr	r4, [pc, #24]	; (800744c <_sbrk_r+0x1c>)
 8007434:	2300      	movs	r3, #0
 8007436:	4605      	mov	r5, r0
 8007438:	4608      	mov	r0, r1
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	f000 fdba 	bl	8007fb4 <_sbrk>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_sbrk_r+0x1a>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	b103      	cbz	r3, 800744a <_sbrk_r+0x1a>
 8007448:	602b      	str	r3, [r5, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	20000628 	.word	0x20000628

08007450 <siprintf>:
 8007450:	b40e      	push	{r1, r2, r3}
 8007452:	b500      	push	{lr}
 8007454:	b09c      	sub	sp, #112	; 0x70
 8007456:	f44f 7102 	mov.w	r1, #520	; 0x208
 800745a:	ab1d      	add	r3, sp, #116	; 0x74
 800745c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007460:	9002      	str	r0, [sp, #8]
 8007462:	9006      	str	r0, [sp, #24]
 8007464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007468:	480a      	ldr	r0, [pc, #40]	; (8007494 <siprintf+0x44>)
 800746a:	9104      	str	r1, [sp, #16]
 800746c:	9107      	str	r1, [sp, #28]
 800746e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007472:	f853 2b04 	ldr.w	r2, [r3], #4
 8007476:	f8ad 1016 	strh.w	r1, [sp, #22]
 800747a:	6800      	ldr	r0, [r0, #0]
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	a902      	add	r1, sp, #8
 8007480:	f000 f9a6 	bl	80077d0 <_svfiprintf_r>
 8007484:	9b02      	ldr	r3, [sp, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	b01c      	add	sp, #112	; 0x70
 800748c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007490:	b003      	add	sp, #12
 8007492:	4770      	bx	lr
 8007494:	20000058 	.word	0x20000058

08007498 <strtok>:
 8007498:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <strtok+0x50>)
 800749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	681d      	ldr	r5, [r3, #0]
 80074a0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80074a2:	4606      	mov	r6, r0
 80074a4:	460f      	mov	r7, r1
 80074a6:	b9b4      	cbnz	r4, 80074d6 <strtok+0x3e>
 80074a8:	2050      	movs	r0, #80	; 0x50
 80074aa:	f7ff fef9 	bl	80072a0 <malloc>
 80074ae:	65a8      	str	r0, [r5, #88]	; 0x58
 80074b0:	6004      	str	r4, [r0, #0]
 80074b2:	6044      	str	r4, [r0, #4]
 80074b4:	6084      	str	r4, [r0, #8]
 80074b6:	60c4      	str	r4, [r0, #12]
 80074b8:	6104      	str	r4, [r0, #16]
 80074ba:	6144      	str	r4, [r0, #20]
 80074bc:	6184      	str	r4, [r0, #24]
 80074be:	6284      	str	r4, [r0, #40]	; 0x28
 80074c0:	62c4      	str	r4, [r0, #44]	; 0x2c
 80074c2:	6304      	str	r4, [r0, #48]	; 0x30
 80074c4:	6344      	str	r4, [r0, #52]	; 0x34
 80074c6:	6384      	str	r4, [r0, #56]	; 0x38
 80074c8:	63c4      	str	r4, [r0, #60]	; 0x3c
 80074ca:	6404      	str	r4, [r0, #64]	; 0x40
 80074cc:	6444      	str	r4, [r0, #68]	; 0x44
 80074ce:	6484      	str	r4, [r0, #72]	; 0x48
 80074d0:	64c4      	str	r4, [r0, #76]	; 0x4c
 80074d2:	7704      	strb	r4, [r0, #28]
 80074d4:	6244      	str	r4, [r0, #36]	; 0x24
 80074d6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80074d8:	4639      	mov	r1, r7
 80074da:	4630      	mov	r0, r6
 80074dc:	2301      	movs	r3, #1
 80074de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	f000 b803 	b.w	80074ec <__strtok_r>
 80074e6:	bf00      	nop
 80074e8:	20000058 	.word	0x20000058

080074ec <__strtok_r>:
 80074ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ee:	b918      	cbnz	r0, 80074f8 <__strtok_r+0xc>
 80074f0:	6810      	ldr	r0, [r2, #0]
 80074f2:	b908      	cbnz	r0, 80074f8 <__strtok_r+0xc>
 80074f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f6:	4620      	mov	r0, r4
 80074f8:	4604      	mov	r4, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007500:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007504:	b91e      	cbnz	r6, 800750e <__strtok_r+0x22>
 8007506:	b965      	cbnz	r5, 8007522 <__strtok_r+0x36>
 8007508:	6015      	str	r5, [r2, #0]
 800750a:	4628      	mov	r0, r5
 800750c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800750e:	42b5      	cmp	r5, r6
 8007510:	d1f6      	bne.n	8007500 <__strtok_r+0x14>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1ef      	bne.n	80074f6 <__strtok_r+0xa>
 8007516:	6014      	str	r4, [r2, #0]
 8007518:	7003      	strb	r3, [r0, #0]
 800751a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751c:	461c      	mov	r4, r3
 800751e:	e00c      	b.n	800753a <__strtok_r+0x4e>
 8007520:	b915      	cbnz	r5, 8007528 <__strtok_r+0x3c>
 8007522:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007526:	460e      	mov	r6, r1
 8007528:	f816 5b01 	ldrb.w	r5, [r6], #1
 800752c:	42ab      	cmp	r3, r5
 800752e:	d1f7      	bne.n	8007520 <__strtok_r+0x34>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0f3      	beq.n	800751c <__strtok_r+0x30>
 8007534:	2300      	movs	r3, #0
 8007536:	f804 3c01 	strb.w	r3, [r4, #-1]
 800753a:	6014      	str	r4, [r2, #0]
 800753c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800753e <_strtol_l.isra.0>:
 800753e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007542:	4680      	mov	r8, r0
 8007544:	4689      	mov	r9, r1
 8007546:	4692      	mov	sl, r2
 8007548:	461f      	mov	r7, r3
 800754a:	468b      	mov	fp, r1
 800754c:	465d      	mov	r5, fp
 800754e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007550:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007554:	f000 f8ca 	bl	80076ec <__locale_ctype_ptr_l>
 8007558:	4420      	add	r0, r4
 800755a:	7846      	ldrb	r6, [r0, #1]
 800755c:	f016 0608 	ands.w	r6, r6, #8
 8007560:	d10b      	bne.n	800757a <_strtol_l.isra.0+0x3c>
 8007562:	2c2d      	cmp	r4, #45	; 0x2d
 8007564:	d10b      	bne.n	800757e <_strtol_l.isra.0+0x40>
 8007566:	782c      	ldrb	r4, [r5, #0]
 8007568:	2601      	movs	r6, #1
 800756a:	f10b 0502 	add.w	r5, fp, #2
 800756e:	b167      	cbz	r7, 800758a <_strtol_l.isra.0+0x4c>
 8007570:	2f10      	cmp	r7, #16
 8007572:	d114      	bne.n	800759e <_strtol_l.isra.0+0x60>
 8007574:	2c30      	cmp	r4, #48	; 0x30
 8007576:	d00a      	beq.n	800758e <_strtol_l.isra.0+0x50>
 8007578:	e011      	b.n	800759e <_strtol_l.isra.0+0x60>
 800757a:	46ab      	mov	fp, r5
 800757c:	e7e6      	b.n	800754c <_strtol_l.isra.0+0xe>
 800757e:	2c2b      	cmp	r4, #43	; 0x2b
 8007580:	bf04      	itt	eq
 8007582:	782c      	ldrbeq	r4, [r5, #0]
 8007584:	f10b 0502 	addeq.w	r5, fp, #2
 8007588:	e7f1      	b.n	800756e <_strtol_l.isra.0+0x30>
 800758a:	2c30      	cmp	r4, #48	; 0x30
 800758c:	d127      	bne.n	80075de <_strtol_l.isra.0+0xa0>
 800758e:	782b      	ldrb	r3, [r5, #0]
 8007590:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007594:	2b58      	cmp	r3, #88	; 0x58
 8007596:	d14b      	bne.n	8007630 <_strtol_l.isra.0+0xf2>
 8007598:	786c      	ldrb	r4, [r5, #1]
 800759a:	2710      	movs	r7, #16
 800759c:	3502      	adds	r5, #2
 800759e:	2e00      	cmp	r6, #0
 80075a0:	bf0c      	ite	eq
 80075a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80075a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80075aa:	2200      	movs	r2, #0
 80075ac:	fbb1 fef7 	udiv	lr, r1, r7
 80075b0:	4610      	mov	r0, r2
 80075b2:	fb07 1c1e 	mls	ip, r7, lr, r1
 80075b6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80075ba:	2b09      	cmp	r3, #9
 80075bc:	d811      	bhi.n	80075e2 <_strtol_l.isra.0+0xa4>
 80075be:	461c      	mov	r4, r3
 80075c0:	42a7      	cmp	r7, r4
 80075c2:	dd1d      	ble.n	8007600 <_strtol_l.isra.0+0xc2>
 80075c4:	1c53      	adds	r3, r2, #1
 80075c6:	d007      	beq.n	80075d8 <_strtol_l.isra.0+0x9a>
 80075c8:	4586      	cmp	lr, r0
 80075ca:	d316      	bcc.n	80075fa <_strtol_l.isra.0+0xbc>
 80075cc:	d101      	bne.n	80075d2 <_strtol_l.isra.0+0x94>
 80075ce:	45a4      	cmp	ip, r4
 80075d0:	db13      	blt.n	80075fa <_strtol_l.isra.0+0xbc>
 80075d2:	fb00 4007 	mla	r0, r0, r7, r4
 80075d6:	2201      	movs	r2, #1
 80075d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075dc:	e7eb      	b.n	80075b6 <_strtol_l.isra.0+0x78>
 80075de:	270a      	movs	r7, #10
 80075e0:	e7dd      	b.n	800759e <_strtol_l.isra.0+0x60>
 80075e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80075e6:	2b19      	cmp	r3, #25
 80075e8:	d801      	bhi.n	80075ee <_strtol_l.isra.0+0xb0>
 80075ea:	3c37      	subs	r4, #55	; 0x37
 80075ec:	e7e8      	b.n	80075c0 <_strtol_l.isra.0+0x82>
 80075ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80075f2:	2b19      	cmp	r3, #25
 80075f4:	d804      	bhi.n	8007600 <_strtol_l.isra.0+0xc2>
 80075f6:	3c57      	subs	r4, #87	; 0x57
 80075f8:	e7e2      	b.n	80075c0 <_strtol_l.isra.0+0x82>
 80075fa:	f04f 32ff 	mov.w	r2, #4294967295
 80075fe:	e7eb      	b.n	80075d8 <_strtol_l.isra.0+0x9a>
 8007600:	1c53      	adds	r3, r2, #1
 8007602:	d108      	bne.n	8007616 <_strtol_l.isra.0+0xd8>
 8007604:	2322      	movs	r3, #34	; 0x22
 8007606:	f8c8 3000 	str.w	r3, [r8]
 800760a:	4608      	mov	r0, r1
 800760c:	f1ba 0f00 	cmp.w	sl, #0
 8007610:	d107      	bne.n	8007622 <_strtol_l.isra.0+0xe4>
 8007612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	b106      	cbz	r6, 800761a <_strtol_l.isra.0+0xdc>
 8007618:	4240      	negs	r0, r0
 800761a:	f1ba 0f00 	cmp.w	sl, #0
 800761e:	d00c      	beq.n	800763a <_strtol_l.isra.0+0xfc>
 8007620:	b122      	cbz	r2, 800762c <_strtol_l.isra.0+0xee>
 8007622:	3d01      	subs	r5, #1
 8007624:	f8ca 5000 	str.w	r5, [sl]
 8007628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762c:	464d      	mov	r5, r9
 800762e:	e7f9      	b.n	8007624 <_strtol_l.isra.0+0xe6>
 8007630:	2430      	movs	r4, #48	; 0x30
 8007632:	2f00      	cmp	r7, #0
 8007634:	d1b3      	bne.n	800759e <_strtol_l.isra.0+0x60>
 8007636:	2708      	movs	r7, #8
 8007638:	e7b1      	b.n	800759e <_strtol_l.isra.0+0x60>
 800763a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007640 <strtol>:
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <strtol+0x24>)
 8007642:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007644:	681c      	ldr	r4, [r3, #0]
 8007646:	4d08      	ldr	r5, [pc, #32]	; (8007668 <strtol+0x28>)
 8007648:	6a23      	ldr	r3, [r4, #32]
 800764a:	2b00      	cmp	r3, #0
 800764c:	bf08      	it	eq
 800764e:	462b      	moveq	r3, r5
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4613      	mov	r3, r2
 8007654:	460a      	mov	r2, r1
 8007656:	4601      	mov	r1, r0
 8007658:	4620      	mov	r0, r4
 800765a:	f7ff ff70 	bl	800753e <_strtol_l.isra.0>
 800765e:	b003      	add	sp, #12
 8007660:	bd30      	pop	{r4, r5, pc}
 8007662:	bf00      	nop
 8007664:	20000058 	.word	0x20000058
 8007668:	200000bc 	.word	0x200000bc

0800766c <__utoa>:
 800766c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766e:	4c1e      	ldr	r4, [pc, #120]	; (80076e8 <__utoa+0x7c>)
 8007670:	b08b      	sub	sp, #44	; 0x2c
 8007672:	4603      	mov	r3, r0
 8007674:	460f      	mov	r7, r1
 8007676:	466d      	mov	r5, sp
 8007678:	f104 0e20 	add.w	lr, r4, #32
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	6861      	ldr	r1, [r4, #4]
 8007680:	462e      	mov	r6, r5
 8007682:	c603      	stmia	r6!, {r0, r1}
 8007684:	3408      	adds	r4, #8
 8007686:	4574      	cmp	r4, lr
 8007688:	4635      	mov	r5, r6
 800768a:	d1f7      	bne.n	800767c <__utoa+0x10>
 800768c:	7921      	ldrb	r1, [r4, #4]
 800768e:	7131      	strb	r1, [r6, #4]
 8007690:	1e91      	subs	r1, r2, #2
 8007692:	6820      	ldr	r0, [r4, #0]
 8007694:	6030      	str	r0, [r6, #0]
 8007696:	2922      	cmp	r1, #34	; 0x22
 8007698:	f04f 0100 	mov.w	r1, #0
 800769c:	d904      	bls.n	80076a8 <__utoa+0x3c>
 800769e:	7039      	strb	r1, [r7, #0]
 80076a0:	460f      	mov	r7, r1
 80076a2:	4638      	mov	r0, r7
 80076a4:	b00b      	add	sp, #44	; 0x2c
 80076a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a8:	1e78      	subs	r0, r7, #1
 80076aa:	4606      	mov	r6, r0
 80076ac:	fbb3 f5f2 	udiv	r5, r3, r2
 80076b0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80076b4:	fb02 3315 	mls	r3, r2, r5, r3
 80076b8:	4473      	add	r3, lr
 80076ba:	1c4c      	adds	r4, r1, #1
 80076bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80076c0:	f806 3f01 	strb.w	r3, [r6, #1]!
 80076c4:	462b      	mov	r3, r5
 80076c6:	b965      	cbnz	r5, 80076e2 <__utoa+0x76>
 80076c8:	553d      	strb	r5, [r7, r4]
 80076ca:	187a      	adds	r2, r7, r1
 80076cc:	1acc      	subs	r4, r1, r3
 80076ce:	42a3      	cmp	r3, r4
 80076d0:	dae7      	bge.n	80076a2 <__utoa+0x36>
 80076d2:	7844      	ldrb	r4, [r0, #1]
 80076d4:	7815      	ldrb	r5, [r2, #0]
 80076d6:	f800 5f01 	strb.w	r5, [r0, #1]!
 80076da:	3301      	adds	r3, #1
 80076dc:	f802 4901 	strb.w	r4, [r2], #-1
 80076e0:	e7f4      	b.n	80076cc <__utoa+0x60>
 80076e2:	4621      	mov	r1, r4
 80076e4:	e7e2      	b.n	80076ac <__utoa+0x40>
 80076e6:	bf00      	nop
 80076e8:	0800806c 	.word	0x0800806c

080076ec <__locale_ctype_ptr_l>:
 80076ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80076f0:	4770      	bx	lr

080076f2 <__ascii_mbtowc>:
 80076f2:	b082      	sub	sp, #8
 80076f4:	b901      	cbnz	r1, 80076f8 <__ascii_mbtowc+0x6>
 80076f6:	a901      	add	r1, sp, #4
 80076f8:	b142      	cbz	r2, 800770c <__ascii_mbtowc+0x1a>
 80076fa:	b14b      	cbz	r3, 8007710 <__ascii_mbtowc+0x1e>
 80076fc:	7813      	ldrb	r3, [r2, #0]
 80076fe:	600b      	str	r3, [r1, #0]
 8007700:	7812      	ldrb	r2, [r2, #0]
 8007702:	1c10      	adds	r0, r2, #0
 8007704:	bf18      	it	ne
 8007706:	2001      	movne	r0, #1
 8007708:	b002      	add	sp, #8
 800770a:	4770      	bx	lr
 800770c:	4610      	mov	r0, r2
 800770e:	e7fb      	b.n	8007708 <__ascii_mbtowc+0x16>
 8007710:	f06f 0001 	mvn.w	r0, #1
 8007714:	e7f8      	b.n	8007708 <__ascii_mbtowc+0x16>

08007716 <__malloc_lock>:
 8007716:	4770      	bx	lr

08007718 <__malloc_unlock>:
 8007718:	4770      	bx	lr

0800771a <__ssputs_r>:
 800771a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771e:	688e      	ldr	r6, [r1, #8]
 8007720:	429e      	cmp	r6, r3
 8007722:	4682      	mov	sl, r0
 8007724:	460c      	mov	r4, r1
 8007726:	4691      	mov	r9, r2
 8007728:	4698      	mov	r8, r3
 800772a:	d835      	bhi.n	8007798 <__ssputs_r+0x7e>
 800772c:	898a      	ldrh	r2, [r1, #12]
 800772e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007732:	d031      	beq.n	8007798 <__ssputs_r+0x7e>
 8007734:	6825      	ldr	r5, [r4, #0]
 8007736:	6909      	ldr	r1, [r1, #16]
 8007738:	1a6f      	subs	r7, r5, r1
 800773a:	6965      	ldr	r5, [r4, #20]
 800773c:	2302      	movs	r3, #2
 800773e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007742:	fb95 f5f3 	sdiv	r5, r5, r3
 8007746:	f108 0301 	add.w	r3, r8, #1
 800774a:	443b      	add	r3, r7
 800774c:	429d      	cmp	r5, r3
 800774e:	bf38      	it	cc
 8007750:	461d      	movcc	r5, r3
 8007752:	0553      	lsls	r3, r2, #21
 8007754:	d531      	bpl.n	80077ba <__ssputs_r+0xa0>
 8007756:	4629      	mov	r1, r5
 8007758:	f7ff fe0c 	bl	8007374 <_malloc_r>
 800775c:	4606      	mov	r6, r0
 800775e:	b950      	cbnz	r0, 8007776 <__ssputs_r+0x5c>
 8007760:	230c      	movs	r3, #12
 8007762:	f8ca 3000 	str.w	r3, [sl]
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800776c:	81a3      	strh	r3, [r4, #12]
 800776e:	f04f 30ff 	mov.w	r0, #4294967295
 8007772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007776:	463a      	mov	r2, r7
 8007778:	6921      	ldr	r1, [r4, #16]
 800777a:	f7ff fd99 	bl	80072b0 <memcpy>
 800777e:	89a3      	ldrh	r3, [r4, #12]
 8007780:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	6126      	str	r6, [r4, #16]
 800778c:	6165      	str	r5, [r4, #20]
 800778e:	443e      	add	r6, r7
 8007790:	1bed      	subs	r5, r5, r7
 8007792:	6026      	str	r6, [r4, #0]
 8007794:	60a5      	str	r5, [r4, #8]
 8007796:	4646      	mov	r6, r8
 8007798:	4546      	cmp	r6, r8
 800779a:	bf28      	it	cs
 800779c:	4646      	movcs	r6, r8
 800779e:	4632      	mov	r2, r6
 80077a0:	4649      	mov	r1, r9
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	f000 faab 	bl	8007cfe <memmove>
 80077a8:	68a3      	ldr	r3, [r4, #8]
 80077aa:	1b9b      	subs	r3, r3, r6
 80077ac:	60a3      	str	r3, [r4, #8]
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	441e      	add	r6, r3
 80077b2:	6026      	str	r6, [r4, #0]
 80077b4:	2000      	movs	r0, #0
 80077b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ba:	462a      	mov	r2, r5
 80077bc:	f000 fab9 	bl	8007d32 <_realloc_r>
 80077c0:	4606      	mov	r6, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d1e1      	bne.n	800778a <__ssputs_r+0x70>
 80077c6:	6921      	ldr	r1, [r4, #16]
 80077c8:	4650      	mov	r0, sl
 80077ca:	f7ff fd85 	bl	80072d8 <_free_r>
 80077ce:	e7c7      	b.n	8007760 <__ssputs_r+0x46>

080077d0 <_svfiprintf_r>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	b09d      	sub	sp, #116	; 0x74
 80077d6:	4680      	mov	r8, r0
 80077d8:	9303      	str	r3, [sp, #12]
 80077da:	898b      	ldrh	r3, [r1, #12]
 80077dc:	061c      	lsls	r4, r3, #24
 80077de:	460d      	mov	r5, r1
 80077e0:	4616      	mov	r6, r2
 80077e2:	d50f      	bpl.n	8007804 <_svfiprintf_r+0x34>
 80077e4:	690b      	ldr	r3, [r1, #16]
 80077e6:	b96b      	cbnz	r3, 8007804 <_svfiprintf_r+0x34>
 80077e8:	2140      	movs	r1, #64	; 0x40
 80077ea:	f7ff fdc3 	bl	8007374 <_malloc_r>
 80077ee:	6028      	str	r0, [r5, #0]
 80077f0:	6128      	str	r0, [r5, #16]
 80077f2:	b928      	cbnz	r0, 8007800 <_svfiprintf_r+0x30>
 80077f4:	230c      	movs	r3, #12
 80077f6:	f8c8 3000 	str.w	r3, [r8]
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	e0c5      	b.n	800798c <_svfiprintf_r+0x1bc>
 8007800:	2340      	movs	r3, #64	; 0x40
 8007802:	616b      	str	r3, [r5, #20]
 8007804:	2300      	movs	r3, #0
 8007806:	9309      	str	r3, [sp, #36]	; 0x24
 8007808:	2320      	movs	r3, #32
 800780a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800780e:	2330      	movs	r3, #48	; 0x30
 8007810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007814:	f04f 0b01 	mov.w	fp, #1
 8007818:	4637      	mov	r7, r6
 800781a:	463c      	mov	r4, r7
 800781c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d13c      	bne.n	800789e <_svfiprintf_r+0xce>
 8007824:	ebb7 0a06 	subs.w	sl, r7, r6
 8007828:	d00b      	beq.n	8007842 <_svfiprintf_r+0x72>
 800782a:	4653      	mov	r3, sl
 800782c:	4632      	mov	r2, r6
 800782e:	4629      	mov	r1, r5
 8007830:	4640      	mov	r0, r8
 8007832:	f7ff ff72 	bl	800771a <__ssputs_r>
 8007836:	3001      	adds	r0, #1
 8007838:	f000 80a3 	beq.w	8007982 <_svfiprintf_r+0x1b2>
 800783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783e:	4453      	add	r3, sl
 8007840:	9309      	str	r3, [sp, #36]	; 0x24
 8007842:	783b      	ldrb	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 809c 	beq.w	8007982 <_svfiprintf_r+0x1b2>
 800784a:	2300      	movs	r3, #0
 800784c:	f04f 32ff 	mov.w	r2, #4294967295
 8007850:	9304      	str	r3, [sp, #16]
 8007852:	9307      	str	r3, [sp, #28]
 8007854:	9205      	str	r2, [sp, #20]
 8007856:	9306      	str	r3, [sp, #24]
 8007858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800785c:	931a      	str	r3, [sp, #104]	; 0x68
 800785e:	2205      	movs	r2, #5
 8007860:	7821      	ldrb	r1, [r4, #0]
 8007862:	4850      	ldr	r0, [pc, #320]	; (80079a4 <_svfiprintf_r+0x1d4>)
 8007864:	f7f8 fcbc 	bl	80001e0 <memchr>
 8007868:	1c67      	adds	r7, r4, #1
 800786a:	9b04      	ldr	r3, [sp, #16]
 800786c:	b9d8      	cbnz	r0, 80078a6 <_svfiprintf_r+0xd6>
 800786e:	06d9      	lsls	r1, r3, #27
 8007870:	bf44      	itt	mi
 8007872:	2220      	movmi	r2, #32
 8007874:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007878:	071a      	lsls	r2, r3, #28
 800787a:	bf44      	itt	mi
 800787c:	222b      	movmi	r2, #43	; 0x2b
 800787e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007882:	7822      	ldrb	r2, [r4, #0]
 8007884:	2a2a      	cmp	r2, #42	; 0x2a
 8007886:	d016      	beq.n	80078b6 <_svfiprintf_r+0xe6>
 8007888:	9a07      	ldr	r2, [sp, #28]
 800788a:	2100      	movs	r1, #0
 800788c:	200a      	movs	r0, #10
 800788e:	4627      	mov	r7, r4
 8007890:	3401      	adds	r4, #1
 8007892:	783b      	ldrb	r3, [r7, #0]
 8007894:	3b30      	subs	r3, #48	; 0x30
 8007896:	2b09      	cmp	r3, #9
 8007898:	d951      	bls.n	800793e <_svfiprintf_r+0x16e>
 800789a:	b1c9      	cbz	r1, 80078d0 <_svfiprintf_r+0x100>
 800789c:	e011      	b.n	80078c2 <_svfiprintf_r+0xf2>
 800789e:	2b25      	cmp	r3, #37	; 0x25
 80078a0:	d0c0      	beq.n	8007824 <_svfiprintf_r+0x54>
 80078a2:	4627      	mov	r7, r4
 80078a4:	e7b9      	b.n	800781a <_svfiprintf_r+0x4a>
 80078a6:	4a3f      	ldr	r2, [pc, #252]	; (80079a4 <_svfiprintf_r+0x1d4>)
 80078a8:	1a80      	subs	r0, r0, r2
 80078aa:	fa0b f000 	lsl.w	r0, fp, r0
 80078ae:	4318      	orrs	r0, r3
 80078b0:	9004      	str	r0, [sp, #16]
 80078b2:	463c      	mov	r4, r7
 80078b4:	e7d3      	b.n	800785e <_svfiprintf_r+0x8e>
 80078b6:	9a03      	ldr	r2, [sp, #12]
 80078b8:	1d11      	adds	r1, r2, #4
 80078ba:	6812      	ldr	r2, [r2, #0]
 80078bc:	9103      	str	r1, [sp, #12]
 80078be:	2a00      	cmp	r2, #0
 80078c0:	db01      	blt.n	80078c6 <_svfiprintf_r+0xf6>
 80078c2:	9207      	str	r2, [sp, #28]
 80078c4:	e004      	b.n	80078d0 <_svfiprintf_r+0x100>
 80078c6:	4252      	negs	r2, r2
 80078c8:	f043 0302 	orr.w	r3, r3, #2
 80078cc:	9207      	str	r2, [sp, #28]
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	783b      	ldrb	r3, [r7, #0]
 80078d2:	2b2e      	cmp	r3, #46	; 0x2e
 80078d4:	d10e      	bne.n	80078f4 <_svfiprintf_r+0x124>
 80078d6:	787b      	ldrb	r3, [r7, #1]
 80078d8:	2b2a      	cmp	r3, #42	; 0x2a
 80078da:	f107 0101 	add.w	r1, r7, #1
 80078de:	d132      	bne.n	8007946 <_svfiprintf_r+0x176>
 80078e0:	9b03      	ldr	r3, [sp, #12]
 80078e2:	1d1a      	adds	r2, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	9203      	str	r2, [sp, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfb8      	it	lt
 80078ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80078f0:	3702      	adds	r7, #2
 80078f2:	9305      	str	r3, [sp, #20]
 80078f4:	4c2c      	ldr	r4, [pc, #176]	; (80079a8 <_svfiprintf_r+0x1d8>)
 80078f6:	7839      	ldrb	r1, [r7, #0]
 80078f8:	2203      	movs	r2, #3
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7f8 fc70 	bl	80001e0 <memchr>
 8007900:	b138      	cbz	r0, 8007912 <_svfiprintf_r+0x142>
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	1b00      	subs	r0, r0, r4
 8007906:	fa03 f000 	lsl.w	r0, r3, r0
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	4303      	orrs	r3, r0
 800790e:	9304      	str	r3, [sp, #16]
 8007910:	3701      	adds	r7, #1
 8007912:	7839      	ldrb	r1, [r7, #0]
 8007914:	4825      	ldr	r0, [pc, #148]	; (80079ac <_svfiprintf_r+0x1dc>)
 8007916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800791a:	2206      	movs	r2, #6
 800791c:	1c7e      	adds	r6, r7, #1
 800791e:	f7f8 fc5f 	bl	80001e0 <memchr>
 8007922:	2800      	cmp	r0, #0
 8007924:	d035      	beq.n	8007992 <_svfiprintf_r+0x1c2>
 8007926:	4b22      	ldr	r3, [pc, #136]	; (80079b0 <_svfiprintf_r+0x1e0>)
 8007928:	b9fb      	cbnz	r3, 800796a <_svfiprintf_r+0x19a>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	3307      	adds	r3, #7
 800792e:	f023 0307 	bic.w	r3, r3, #7
 8007932:	3308      	adds	r3, #8
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	444b      	add	r3, r9
 800793a:	9309      	str	r3, [sp, #36]	; 0x24
 800793c:	e76c      	b.n	8007818 <_svfiprintf_r+0x48>
 800793e:	fb00 3202 	mla	r2, r0, r2, r3
 8007942:	2101      	movs	r1, #1
 8007944:	e7a3      	b.n	800788e <_svfiprintf_r+0xbe>
 8007946:	2300      	movs	r3, #0
 8007948:	9305      	str	r3, [sp, #20]
 800794a:	4618      	mov	r0, r3
 800794c:	240a      	movs	r4, #10
 800794e:	460f      	mov	r7, r1
 8007950:	3101      	adds	r1, #1
 8007952:	783a      	ldrb	r2, [r7, #0]
 8007954:	3a30      	subs	r2, #48	; 0x30
 8007956:	2a09      	cmp	r2, #9
 8007958:	d903      	bls.n	8007962 <_svfiprintf_r+0x192>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0ca      	beq.n	80078f4 <_svfiprintf_r+0x124>
 800795e:	9005      	str	r0, [sp, #20]
 8007960:	e7c8      	b.n	80078f4 <_svfiprintf_r+0x124>
 8007962:	fb04 2000 	mla	r0, r4, r0, r2
 8007966:	2301      	movs	r3, #1
 8007968:	e7f1      	b.n	800794e <_svfiprintf_r+0x17e>
 800796a:	ab03      	add	r3, sp, #12
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	462a      	mov	r2, r5
 8007970:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <_svfiprintf_r+0x1e4>)
 8007972:	a904      	add	r1, sp, #16
 8007974:	4640      	mov	r0, r8
 8007976:	f3af 8000 	nop.w
 800797a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800797e:	4681      	mov	r9, r0
 8007980:	d1d9      	bne.n	8007936 <_svfiprintf_r+0x166>
 8007982:	89ab      	ldrh	r3, [r5, #12]
 8007984:	065b      	lsls	r3, r3, #25
 8007986:	f53f af38 	bmi.w	80077fa <_svfiprintf_r+0x2a>
 800798a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800798c:	b01d      	add	sp, #116	; 0x74
 800798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007992:	ab03      	add	r3, sp, #12
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	462a      	mov	r2, r5
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <_svfiprintf_r+0x1e4>)
 800799a:	a904      	add	r1, sp, #16
 800799c:	4640      	mov	r0, r8
 800799e:	f000 f881 	bl	8007aa4 <_printf_i>
 80079a2:	e7ea      	b.n	800797a <_svfiprintf_r+0x1aa>
 80079a4:	0800809b 	.word	0x0800809b
 80079a8:	080080a1 	.word	0x080080a1
 80079ac:	080080a5 	.word	0x080080a5
 80079b0:	00000000 	.word	0x00000000
 80079b4:	0800771b 	.word	0x0800771b

080079b8 <_printf_common>:
 80079b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	4691      	mov	r9, r2
 80079be:	461f      	mov	r7, r3
 80079c0:	688a      	ldr	r2, [r1, #8]
 80079c2:	690b      	ldr	r3, [r1, #16]
 80079c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bfb8      	it	lt
 80079cc:	4613      	movlt	r3, r2
 80079ce:	f8c9 3000 	str.w	r3, [r9]
 80079d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079d6:	4606      	mov	r6, r0
 80079d8:	460c      	mov	r4, r1
 80079da:	b112      	cbz	r2, 80079e2 <_printf_common+0x2a>
 80079dc:	3301      	adds	r3, #1
 80079de:	f8c9 3000 	str.w	r3, [r9]
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	0699      	lsls	r1, r3, #26
 80079e6:	bf42      	ittt	mi
 80079e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079ec:	3302      	addmi	r3, #2
 80079ee:	f8c9 3000 	strmi.w	r3, [r9]
 80079f2:	6825      	ldr	r5, [r4, #0]
 80079f4:	f015 0506 	ands.w	r5, r5, #6
 80079f8:	d107      	bne.n	8007a0a <_printf_common+0x52>
 80079fa:	f104 0a19 	add.w	sl, r4, #25
 80079fe:	68e3      	ldr	r3, [r4, #12]
 8007a00:	f8d9 2000 	ldr.w	r2, [r9]
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	429d      	cmp	r5, r3
 8007a08:	db29      	blt.n	8007a5e <_printf_common+0xa6>
 8007a0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	3300      	adds	r3, #0
 8007a12:	bf18      	it	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	0692      	lsls	r2, r2, #26
 8007a18:	d42e      	bmi.n	8007a78 <_printf_common+0xc0>
 8007a1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a1e:	4639      	mov	r1, r7
 8007a20:	4630      	mov	r0, r6
 8007a22:	47c0      	blx	r8
 8007a24:	3001      	adds	r0, #1
 8007a26:	d021      	beq.n	8007a6c <_printf_common+0xb4>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	68e5      	ldr	r5, [r4, #12]
 8007a2c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a30:	f003 0306 	and.w	r3, r3, #6
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	bf08      	it	eq
 8007a38:	1aad      	subeq	r5, r5, r2
 8007a3a:	68a3      	ldr	r3, [r4, #8]
 8007a3c:	6922      	ldr	r2, [r4, #16]
 8007a3e:	bf0c      	ite	eq
 8007a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a44:	2500      	movne	r5, #0
 8007a46:	4293      	cmp	r3, r2
 8007a48:	bfc4      	itt	gt
 8007a4a:	1a9b      	subgt	r3, r3, r2
 8007a4c:	18ed      	addgt	r5, r5, r3
 8007a4e:	f04f 0900 	mov.w	r9, #0
 8007a52:	341a      	adds	r4, #26
 8007a54:	454d      	cmp	r5, r9
 8007a56:	d11b      	bne.n	8007a90 <_printf_common+0xd8>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4652      	mov	r2, sl
 8007a62:	4639      	mov	r1, r7
 8007a64:	4630      	mov	r0, r6
 8007a66:	47c0      	blx	r8
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d103      	bne.n	8007a74 <_printf_common+0xbc>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a74:	3501      	adds	r5, #1
 8007a76:	e7c2      	b.n	80079fe <_printf_common+0x46>
 8007a78:	18e1      	adds	r1, r4, r3
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	2030      	movs	r0, #48	; 0x30
 8007a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a82:	4422      	add	r2, r4
 8007a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	e7c4      	b.n	8007a1a <_printf_common+0x62>
 8007a90:	2301      	movs	r3, #1
 8007a92:	4622      	mov	r2, r4
 8007a94:	4639      	mov	r1, r7
 8007a96:	4630      	mov	r0, r6
 8007a98:	47c0      	blx	r8
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d0e6      	beq.n	8007a6c <_printf_common+0xb4>
 8007a9e:	f109 0901 	add.w	r9, r9, #1
 8007aa2:	e7d7      	b.n	8007a54 <_printf_common+0x9c>

08007aa4 <_printf_i>:
 8007aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aa8:	4617      	mov	r7, r2
 8007aaa:	7e0a      	ldrb	r2, [r1, #24]
 8007aac:	b085      	sub	sp, #20
 8007aae:	2a6e      	cmp	r2, #110	; 0x6e
 8007ab0:	4698      	mov	r8, r3
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ab8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007abc:	f000 80bc 	beq.w	8007c38 <_printf_i+0x194>
 8007ac0:	d81a      	bhi.n	8007af8 <_printf_i+0x54>
 8007ac2:	2a63      	cmp	r2, #99	; 0x63
 8007ac4:	d02e      	beq.n	8007b24 <_printf_i+0x80>
 8007ac6:	d80a      	bhi.n	8007ade <_printf_i+0x3a>
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	f000 80c8 	beq.w	8007c5e <_printf_i+0x1ba>
 8007ace:	2a58      	cmp	r2, #88	; 0x58
 8007ad0:	f000 808a 	beq.w	8007be8 <_printf_i+0x144>
 8007ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007adc:	e02a      	b.n	8007b34 <_printf_i+0x90>
 8007ade:	2a64      	cmp	r2, #100	; 0x64
 8007ae0:	d001      	beq.n	8007ae6 <_printf_i+0x42>
 8007ae2:	2a69      	cmp	r2, #105	; 0x69
 8007ae4:	d1f6      	bne.n	8007ad4 <_printf_i+0x30>
 8007ae6:	6821      	ldr	r1, [r4, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007aee:	d023      	beq.n	8007b38 <_printf_i+0x94>
 8007af0:	1d11      	adds	r1, r2, #4
 8007af2:	6019      	str	r1, [r3, #0]
 8007af4:	6813      	ldr	r3, [r2, #0]
 8007af6:	e027      	b.n	8007b48 <_printf_i+0xa4>
 8007af8:	2a73      	cmp	r2, #115	; 0x73
 8007afa:	f000 80b4 	beq.w	8007c66 <_printf_i+0x1c2>
 8007afe:	d808      	bhi.n	8007b12 <_printf_i+0x6e>
 8007b00:	2a6f      	cmp	r2, #111	; 0x6f
 8007b02:	d02a      	beq.n	8007b5a <_printf_i+0xb6>
 8007b04:	2a70      	cmp	r2, #112	; 0x70
 8007b06:	d1e5      	bne.n	8007ad4 <_printf_i+0x30>
 8007b08:	680a      	ldr	r2, [r1, #0]
 8007b0a:	f042 0220 	orr.w	r2, r2, #32
 8007b0e:	600a      	str	r2, [r1, #0]
 8007b10:	e003      	b.n	8007b1a <_printf_i+0x76>
 8007b12:	2a75      	cmp	r2, #117	; 0x75
 8007b14:	d021      	beq.n	8007b5a <_printf_i+0xb6>
 8007b16:	2a78      	cmp	r2, #120	; 0x78
 8007b18:	d1dc      	bne.n	8007ad4 <_printf_i+0x30>
 8007b1a:	2278      	movs	r2, #120	; 0x78
 8007b1c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007b20:	496e      	ldr	r1, [pc, #440]	; (8007cdc <_printf_i+0x238>)
 8007b22:	e064      	b.n	8007bee <_printf_i+0x14a>
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007b2a:	1d11      	adds	r1, r2, #4
 8007b2c:	6019      	str	r1, [r3, #0]
 8007b2e:	6813      	ldr	r3, [r2, #0]
 8007b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b34:	2301      	movs	r3, #1
 8007b36:	e0a3      	b.n	8007c80 <_printf_i+0x1dc>
 8007b38:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007b3c:	f102 0104 	add.w	r1, r2, #4
 8007b40:	6019      	str	r1, [r3, #0]
 8007b42:	d0d7      	beq.n	8007af4 <_printf_i+0x50>
 8007b44:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	da03      	bge.n	8007b54 <_printf_i+0xb0>
 8007b4c:	222d      	movs	r2, #45	; 0x2d
 8007b4e:	425b      	negs	r3, r3
 8007b50:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b54:	4962      	ldr	r1, [pc, #392]	; (8007ce0 <_printf_i+0x23c>)
 8007b56:	220a      	movs	r2, #10
 8007b58:	e017      	b.n	8007b8a <_printf_i+0xe6>
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	6819      	ldr	r1, [r3, #0]
 8007b5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007b62:	d003      	beq.n	8007b6c <_printf_i+0xc8>
 8007b64:	1d08      	adds	r0, r1, #4
 8007b66:	6018      	str	r0, [r3, #0]
 8007b68:	680b      	ldr	r3, [r1, #0]
 8007b6a:	e006      	b.n	8007b7a <_printf_i+0xd6>
 8007b6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b70:	f101 0004 	add.w	r0, r1, #4
 8007b74:	6018      	str	r0, [r3, #0]
 8007b76:	d0f7      	beq.n	8007b68 <_printf_i+0xc4>
 8007b78:	880b      	ldrh	r3, [r1, #0]
 8007b7a:	4959      	ldr	r1, [pc, #356]	; (8007ce0 <_printf_i+0x23c>)
 8007b7c:	2a6f      	cmp	r2, #111	; 0x6f
 8007b7e:	bf14      	ite	ne
 8007b80:	220a      	movne	r2, #10
 8007b82:	2208      	moveq	r2, #8
 8007b84:	2000      	movs	r0, #0
 8007b86:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007b8a:	6865      	ldr	r5, [r4, #4]
 8007b8c:	60a5      	str	r5, [r4, #8]
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	f2c0 809c 	blt.w	8007ccc <_printf_i+0x228>
 8007b94:	6820      	ldr	r0, [r4, #0]
 8007b96:	f020 0004 	bic.w	r0, r0, #4
 8007b9a:	6020      	str	r0, [r4, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d13f      	bne.n	8007c20 <_printf_i+0x17c>
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	f040 8095 	bne.w	8007cd0 <_printf_i+0x22c>
 8007ba6:	4675      	mov	r5, lr
 8007ba8:	2a08      	cmp	r2, #8
 8007baa:	d10b      	bne.n	8007bc4 <_printf_i+0x120>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	07da      	lsls	r2, r3, #31
 8007bb0:	d508      	bpl.n	8007bc4 <_printf_i+0x120>
 8007bb2:	6923      	ldr	r3, [r4, #16]
 8007bb4:	6862      	ldr	r2, [r4, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	bfde      	ittt	le
 8007bba:	2330      	movle	r3, #48	; 0x30
 8007bbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bc4:	ebae 0305 	sub.w	r3, lr, r5
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	f8cd 8000 	str.w	r8, [sp]
 8007bce:	463b      	mov	r3, r7
 8007bd0:	aa03      	add	r2, sp, #12
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7ff feef 	bl	80079b8 <_printf_common>
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d155      	bne.n	8007c8a <_printf_i+0x1e6>
 8007bde:	f04f 30ff 	mov.w	r0, #4294967295
 8007be2:	b005      	add	sp, #20
 8007be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007bec:	493c      	ldr	r1, [pc, #240]	; (8007ce0 <_printf_i+0x23c>)
 8007bee:	6822      	ldr	r2, [r4, #0]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007bf6:	f100 0504 	add.w	r5, r0, #4
 8007bfa:	601d      	str	r5, [r3, #0]
 8007bfc:	d001      	beq.n	8007c02 <_printf_i+0x15e>
 8007bfe:	6803      	ldr	r3, [r0, #0]
 8007c00:	e002      	b.n	8007c08 <_printf_i+0x164>
 8007c02:	0655      	lsls	r5, r2, #25
 8007c04:	d5fb      	bpl.n	8007bfe <_printf_i+0x15a>
 8007c06:	8803      	ldrh	r3, [r0, #0]
 8007c08:	07d0      	lsls	r0, r2, #31
 8007c0a:	bf44      	itt	mi
 8007c0c:	f042 0220 	orrmi.w	r2, r2, #32
 8007c10:	6022      	strmi	r2, [r4, #0]
 8007c12:	b91b      	cbnz	r3, 8007c1c <_printf_i+0x178>
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	f022 0220 	bic.w	r2, r2, #32
 8007c1a:	6022      	str	r2, [r4, #0]
 8007c1c:	2210      	movs	r2, #16
 8007c1e:	e7b1      	b.n	8007b84 <_printf_i+0xe0>
 8007c20:	4675      	mov	r5, lr
 8007c22:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c26:	fb02 3310 	mls	r3, r2, r0, r3
 8007c2a:	5ccb      	ldrb	r3, [r1, r3]
 8007c2c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c30:	4603      	mov	r3, r0
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d1f5      	bne.n	8007c22 <_printf_i+0x17e>
 8007c36:	e7b7      	b.n	8007ba8 <_printf_i+0x104>
 8007c38:	6808      	ldr	r0, [r1, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	6949      	ldr	r1, [r1, #20]
 8007c3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007c42:	d004      	beq.n	8007c4e <_printf_i+0x1aa>
 8007c44:	1d10      	adds	r0, r2, #4
 8007c46:	6018      	str	r0, [r3, #0]
 8007c48:	6813      	ldr	r3, [r2, #0]
 8007c4a:	6019      	str	r1, [r3, #0]
 8007c4c:	e007      	b.n	8007c5e <_printf_i+0x1ba>
 8007c4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c52:	f102 0004 	add.w	r0, r2, #4
 8007c56:	6018      	str	r0, [r3, #0]
 8007c58:	6813      	ldr	r3, [r2, #0]
 8007c5a:	d0f6      	beq.n	8007c4a <_printf_i+0x1a6>
 8007c5c:	8019      	strh	r1, [r3, #0]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6123      	str	r3, [r4, #16]
 8007c62:	4675      	mov	r5, lr
 8007c64:	e7b1      	b.n	8007bca <_printf_i+0x126>
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	1d11      	adds	r1, r2, #4
 8007c6a:	6019      	str	r1, [r3, #0]
 8007c6c:	6815      	ldr	r5, [r2, #0]
 8007c6e:	6862      	ldr	r2, [r4, #4]
 8007c70:	2100      	movs	r1, #0
 8007c72:	4628      	mov	r0, r5
 8007c74:	f7f8 fab4 	bl	80001e0 <memchr>
 8007c78:	b108      	cbz	r0, 8007c7e <_printf_i+0x1da>
 8007c7a:	1b40      	subs	r0, r0, r5
 8007c7c:	6060      	str	r0, [r4, #4]
 8007c7e:	6863      	ldr	r3, [r4, #4]
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	2300      	movs	r3, #0
 8007c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c88:	e79f      	b.n	8007bca <_printf_i+0x126>
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4639      	mov	r1, r7
 8007c90:	4630      	mov	r0, r6
 8007c92:	47c0      	blx	r8
 8007c94:	3001      	adds	r0, #1
 8007c96:	d0a2      	beq.n	8007bde <_printf_i+0x13a>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	079b      	lsls	r3, r3, #30
 8007c9c:	d507      	bpl.n	8007cae <_printf_i+0x20a>
 8007c9e:	2500      	movs	r5, #0
 8007ca0:	f104 0919 	add.w	r9, r4, #25
 8007ca4:	68e3      	ldr	r3, [r4, #12]
 8007ca6:	9a03      	ldr	r2, [sp, #12]
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	429d      	cmp	r5, r3
 8007cac:	db05      	blt.n	8007cba <_printf_i+0x216>
 8007cae:	68e0      	ldr	r0, [r4, #12]
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	4298      	cmp	r0, r3
 8007cb4:	bfb8      	it	lt
 8007cb6:	4618      	movlt	r0, r3
 8007cb8:	e793      	b.n	8007be2 <_printf_i+0x13e>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	464a      	mov	r2, r9
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	47c0      	blx	r8
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d08a      	beq.n	8007bde <_printf_i+0x13a>
 8007cc8:	3501      	adds	r5, #1
 8007cca:	e7eb      	b.n	8007ca4 <_printf_i+0x200>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1a7      	bne.n	8007c20 <_printf_i+0x17c>
 8007cd0:	780b      	ldrb	r3, [r1, #0]
 8007cd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cda:	e765      	b.n	8007ba8 <_printf_i+0x104>
 8007cdc:	080080bd 	.word	0x080080bd
 8007ce0:	080080ac 	.word	0x080080ac

08007ce4 <__ascii_wctomb>:
 8007ce4:	b149      	cbz	r1, 8007cfa <__ascii_wctomb+0x16>
 8007ce6:	2aff      	cmp	r2, #255	; 0xff
 8007ce8:	bf85      	ittet	hi
 8007cea:	238a      	movhi	r3, #138	; 0x8a
 8007cec:	6003      	strhi	r3, [r0, #0]
 8007cee:	700a      	strbls	r2, [r1, #0]
 8007cf0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007cf4:	bf98      	it	ls
 8007cf6:	2001      	movls	r0, #1
 8007cf8:	4770      	bx	lr
 8007cfa:	4608      	mov	r0, r1
 8007cfc:	4770      	bx	lr

08007cfe <memmove>:
 8007cfe:	4288      	cmp	r0, r1
 8007d00:	b510      	push	{r4, lr}
 8007d02:	eb01 0302 	add.w	r3, r1, r2
 8007d06:	d803      	bhi.n	8007d10 <memmove+0x12>
 8007d08:	1e42      	subs	r2, r0, #1
 8007d0a:	4299      	cmp	r1, r3
 8007d0c:	d10c      	bne.n	8007d28 <memmove+0x2a>
 8007d0e:	bd10      	pop	{r4, pc}
 8007d10:	4298      	cmp	r0, r3
 8007d12:	d2f9      	bcs.n	8007d08 <memmove+0xa>
 8007d14:	1881      	adds	r1, r0, r2
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	42d3      	cmn	r3, r2
 8007d1a:	d100      	bne.n	8007d1e <memmove+0x20>
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d22:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d26:	e7f7      	b.n	8007d18 <memmove+0x1a>
 8007d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d30:	e7eb      	b.n	8007d0a <memmove+0xc>

08007d32 <_realloc_r>:
 8007d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d34:	4607      	mov	r7, r0
 8007d36:	4614      	mov	r4, r2
 8007d38:	460e      	mov	r6, r1
 8007d3a:	b921      	cbnz	r1, 8007d46 <_realloc_r+0x14>
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d42:	f7ff bb17 	b.w	8007374 <_malloc_r>
 8007d46:	b922      	cbnz	r2, 8007d52 <_realloc_r+0x20>
 8007d48:	f7ff fac6 	bl	80072d8 <_free_r>
 8007d4c:	4625      	mov	r5, r4
 8007d4e:	4628      	mov	r0, r5
 8007d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d52:	f000 f814 	bl	8007d7e <_malloc_usable_size_r>
 8007d56:	4284      	cmp	r4, r0
 8007d58:	d90f      	bls.n	8007d7a <_realloc_r+0x48>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff fb09 	bl	8007374 <_malloc_r>
 8007d62:	4605      	mov	r5, r0
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d0f2      	beq.n	8007d4e <_realloc_r+0x1c>
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	f7ff faa0 	bl	80072b0 <memcpy>
 8007d70:	4631      	mov	r1, r6
 8007d72:	4638      	mov	r0, r7
 8007d74:	f7ff fab0 	bl	80072d8 <_free_r>
 8007d78:	e7e9      	b.n	8007d4e <_realloc_r+0x1c>
 8007d7a:	4635      	mov	r5, r6
 8007d7c:	e7e7      	b.n	8007d4e <_realloc_r+0x1c>

08007d7e <_malloc_usable_size_r>:
 8007d7e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f1a0 0004 	sub.w	r0, r0, #4
 8007d88:	bfbc      	itt	lt
 8007d8a:	580b      	ldrlt	r3, [r1, r0]
 8007d8c:	18c0      	addlt	r0, r0, r3
 8007d8e:	4770      	bx	lr

08007d90 <sqrt>:
 8007d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d94:	ed2d 8b02 	vpush	{d8}
 8007d98:	b08b      	sub	sp, #44	; 0x2c
 8007d9a:	ec55 4b10 	vmov	r4, r5, d0
 8007d9e:	f000 f851 	bl	8007e44 <__ieee754_sqrt>
 8007da2:	4b26      	ldr	r3, [pc, #152]	; (8007e3c <sqrt+0xac>)
 8007da4:	eeb0 8a40 	vmov.f32	s16, s0
 8007da8:	eef0 8a60 	vmov.f32	s17, s1
 8007dac:	f993 6000 	ldrsb.w	r6, [r3]
 8007db0:	1c73      	adds	r3, r6, #1
 8007db2:	d02a      	beq.n	8007e0a <sqrt+0x7a>
 8007db4:	4622      	mov	r2, r4
 8007db6:	462b      	mov	r3, r5
 8007db8:	4620      	mov	r0, r4
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f7f8 feb2 	bl	8000b24 <__aeabi_dcmpun>
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	bb10      	cbnz	r0, 8007e0a <sqrt+0x7a>
 8007dc4:	f04f 0800 	mov.w	r8, #0
 8007dc8:	f04f 0900 	mov.w	r9, #0
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	f7f8 fe7e 	bl	8000ad4 <__aeabi_dcmplt>
 8007dd8:	b1b8      	cbz	r0, 8007e0a <sqrt+0x7a>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <sqrt+0xb0>)
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	9708      	str	r7, [sp, #32]
 8007de4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007de8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007dec:	b9b6      	cbnz	r6, 8007e1c <sqrt+0x8c>
 8007dee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007df2:	4668      	mov	r0, sp
 8007df4:	f000 f8d6 	bl	8007fa4 <matherr>
 8007df8:	b1d0      	cbz	r0, 8007e30 <sqrt+0xa0>
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	b11b      	cbz	r3, 8007e06 <sqrt+0x76>
 8007dfe:	f000 f8d3 	bl	8007fa8 <__errno>
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	6003      	str	r3, [r0, #0]
 8007e06:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e0e:	eef0 0a68 	vmov.f32	s1, s17
 8007e12:	b00b      	add	sp, #44	; 0x2c
 8007e14:	ecbd 8b02 	vpop	{d8}
 8007e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	464b      	mov	r3, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f7f8 fd0e 	bl	8000844 <__aeabi_ddiv>
 8007e28:	2e02      	cmp	r6, #2
 8007e2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e2e:	d1e0      	bne.n	8007df2 <sqrt+0x62>
 8007e30:	f000 f8ba 	bl	8007fa8 <__errno>
 8007e34:	2321      	movs	r3, #33	; 0x21
 8007e36:	6003      	str	r3, [r0, #0]
 8007e38:	e7df      	b.n	8007dfa <sqrt+0x6a>
 8007e3a:	bf00      	nop
 8007e3c:	20000228 	.word	0x20000228
 8007e40:	080081cf 	.word	0x080081cf

08007e44 <__ieee754_sqrt>:
 8007e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e48:	ec55 4b10 	vmov	r4, r5, d0
 8007e4c:	4e54      	ldr	r6, [pc, #336]	; (8007fa0 <__ieee754_sqrt+0x15c>)
 8007e4e:	43ae      	bics	r6, r5
 8007e50:	ee10 0a10 	vmov	r0, s0
 8007e54:	462b      	mov	r3, r5
 8007e56:	462a      	mov	r2, r5
 8007e58:	4621      	mov	r1, r4
 8007e5a:	d113      	bne.n	8007e84 <__ieee754_sqrt+0x40>
 8007e5c:	ee10 2a10 	vmov	r2, s0
 8007e60:	462b      	mov	r3, r5
 8007e62:	ee10 0a10 	vmov	r0, s0
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fbc2 	bl	80005f0 <__aeabi_dmul>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4620      	mov	r0, r4
 8007e72:	4629      	mov	r1, r5
 8007e74:	f7f8 fa0a 	bl	800028c <__adddf3>
 8007e78:	4604      	mov	r4, r0
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	ec45 4b10 	vmov	d0, r4, r5
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	dc10      	bgt.n	8007eaa <__ieee754_sqrt+0x66>
 8007e88:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e8c:	4330      	orrs	r0, r6
 8007e8e:	d0f5      	beq.n	8007e7c <__ieee754_sqrt+0x38>
 8007e90:	b15d      	cbz	r5, 8007eaa <__ieee754_sqrt+0x66>
 8007e92:	ee10 2a10 	vmov	r2, s0
 8007e96:	462b      	mov	r3, r5
 8007e98:	4620      	mov	r0, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7f8 f9f4 	bl	8000288 <__aeabi_dsub>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	f7f8 fcce 	bl	8000844 <__aeabi_ddiv>
 8007ea8:	e7e6      	b.n	8007e78 <__ieee754_sqrt+0x34>
 8007eaa:	151b      	asrs	r3, r3, #20
 8007eac:	d10c      	bne.n	8007ec8 <__ieee754_sqrt+0x84>
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	d06d      	beq.n	8007f8e <__ieee754_sqrt+0x14a>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	02d6      	lsls	r6, r2, #11
 8007eb6:	d56e      	bpl.n	8007f96 <__ieee754_sqrt+0x152>
 8007eb8:	1e44      	subs	r4, r0, #1
 8007eba:	1b1b      	subs	r3, r3, r4
 8007ebc:	f1c0 0420 	rsb	r4, r0, #32
 8007ec0:	fa21 f404 	lsr.w	r4, r1, r4
 8007ec4:	4322      	orrs	r2, r4
 8007ec6:	4081      	lsls	r1, r0
 8007ec8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ecc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007ed0:	07dd      	lsls	r5, r3, #31
 8007ed2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ed6:	bf42      	ittt	mi
 8007ed8:	0052      	lslmi	r2, r2, #1
 8007eda:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8007ede:	0049      	lslmi	r1, r1, #1
 8007ee0:	1058      	asrs	r0, r3, #1
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8007ee8:	441a      	add	r2, r3
 8007eea:	0049      	lsls	r1, r1, #1
 8007eec:	2316      	movs	r3, #22
 8007eee:	462c      	mov	r4, r5
 8007ef0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007ef4:	19a7      	adds	r7, r4, r6
 8007ef6:	4297      	cmp	r7, r2
 8007ef8:	bfde      	ittt	le
 8007efa:	1bd2      	suble	r2, r2, r7
 8007efc:	19bc      	addle	r4, r7, r6
 8007efe:	19ad      	addle	r5, r5, r6
 8007f00:	0052      	lsls	r2, r2, #1
 8007f02:	3b01      	subs	r3, #1
 8007f04:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007f08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007f0c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f10:	d1f0      	bne.n	8007ef4 <__ieee754_sqrt+0xb0>
 8007f12:	f04f 0e20 	mov.w	lr, #32
 8007f16:	469c      	mov	ip, r3
 8007f18:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007f1c:	42a2      	cmp	r2, r4
 8007f1e:	eb06 070c 	add.w	r7, r6, ip
 8007f22:	dc02      	bgt.n	8007f2a <__ieee754_sqrt+0xe6>
 8007f24:	d112      	bne.n	8007f4c <__ieee754_sqrt+0x108>
 8007f26:	428f      	cmp	r7, r1
 8007f28:	d810      	bhi.n	8007f4c <__ieee754_sqrt+0x108>
 8007f2a:	2f00      	cmp	r7, #0
 8007f2c:	eb07 0c06 	add.w	ip, r7, r6
 8007f30:	da34      	bge.n	8007f9c <__ieee754_sqrt+0x158>
 8007f32:	f1bc 0f00 	cmp.w	ip, #0
 8007f36:	db31      	blt.n	8007f9c <__ieee754_sqrt+0x158>
 8007f38:	f104 0801 	add.w	r8, r4, #1
 8007f3c:	1b12      	subs	r2, r2, r4
 8007f3e:	428f      	cmp	r7, r1
 8007f40:	bf88      	it	hi
 8007f42:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007f46:	1bc9      	subs	r1, r1, r7
 8007f48:	4433      	add	r3, r6
 8007f4a:	4644      	mov	r4, r8
 8007f4c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007f50:	f1be 0e01 	subs.w	lr, lr, #1
 8007f54:	443a      	add	r2, r7
 8007f56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f5a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007f5e:	d1dd      	bne.n	8007f1c <__ieee754_sqrt+0xd8>
 8007f60:	430a      	orrs	r2, r1
 8007f62:	d006      	beq.n	8007f72 <__ieee754_sqrt+0x12e>
 8007f64:	1c5c      	adds	r4, r3, #1
 8007f66:	bf13      	iteet	ne
 8007f68:	3301      	addne	r3, #1
 8007f6a:	3501      	addeq	r5, #1
 8007f6c:	4673      	moveq	r3, lr
 8007f6e:	f023 0301 	bicne.w	r3, r3, #1
 8007f72:	106a      	asrs	r2, r5, #1
 8007f74:	085b      	lsrs	r3, r3, #1
 8007f76:	07e9      	lsls	r1, r5, #31
 8007f78:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007f7c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007f80:	bf48      	it	mi
 8007f82:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007f86:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007f8a:	461c      	mov	r4, r3
 8007f8c:	e776      	b.n	8007e7c <__ieee754_sqrt+0x38>
 8007f8e:	0aca      	lsrs	r2, r1, #11
 8007f90:	3b15      	subs	r3, #21
 8007f92:	0549      	lsls	r1, r1, #21
 8007f94:	e78b      	b.n	8007eae <__ieee754_sqrt+0x6a>
 8007f96:	0052      	lsls	r2, r2, #1
 8007f98:	3001      	adds	r0, #1
 8007f9a:	e78b      	b.n	8007eb4 <__ieee754_sqrt+0x70>
 8007f9c:	46a0      	mov	r8, r4
 8007f9e:	e7cd      	b.n	8007f3c <__ieee754_sqrt+0xf8>
 8007fa0:	7ff00000 	.word	0x7ff00000

08007fa4 <matherr>:
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	4770      	bx	lr

08007fa8 <__errno>:
 8007fa8:	4b01      	ldr	r3, [pc, #4]	; (8007fb0 <__errno+0x8>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20000058 	.word	0x20000058

08007fb4 <_sbrk>:
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <_sbrk+0x14>)
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	4602      	mov	r2, r0
 8007fba:	b909      	cbnz	r1, 8007fc0 <_sbrk+0xc>
 8007fbc:	4903      	ldr	r1, [pc, #12]	; (8007fcc <_sbrk+0x18>)
 8007fbe:	6019      	str	r1, [r3, #0]
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	4402      	add	r2, r0
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	4770      	bx	lr
 8007fc8:	20000324 	.word	0x20000324
 8007fcc:	2000062c 	.word	0x2000062c

08007fd0 <_init>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr

08007fdc <_fini>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	bf00      	nop
 8007fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe2:	bc08      	pop	{r3}
 8007fe4:	469e      	mov	lr, r3
 8007fe6:	4770      	bx	lr
