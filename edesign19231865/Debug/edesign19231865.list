
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  20000000  08005afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
  7 .bss          00000384  20000200  20000200  00020200  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000584  20000584  00020200  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f211  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004256  00000000  00000000  0004f441  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f9eb  00000000  00000000  00053697  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001310  00000000  00000000  00063088  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000011e8  00000000  00000000  00064398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000215fc  00000000  00000000  00065580  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001260c  00000000  00000000  00086b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b2fb4  00000000  00000000  00099188  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0014c13c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000039a4  00000000  00000000  0014c1b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005900 	.word	0x08005900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08005900 	.word	0x08005900

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b510      	push	{r4, lr}
 8000282:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <HAL_InitTick+0x24>)
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <HAL_InitTick+0x28>)
 800028a:	fba3 3000 	umull	r3, r0, r3, r0
 800028e:	0980      	lsrs	r0, r0, #6
 8000290:	f000 fbea 	bl	8000a68 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000294:	2200      	movs	r2, #0
 8000296:	4621      	mov	r1, r4
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 fba6 	bl	80009ec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002a0:	2000      	movs	r0, #0
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	20000000 	.word	0x20000000
 80002a8:	10624dd3 	.word	0x10624dd3

080002ac <HAL_Init>:
{
 80002ac:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ae:	4a07      	ldr	r2, [pc, #28]	; (80002cc <HAL_Init+0x20>)
 80002b0:	6813      	ldr	r3, [r2, #0]
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b8:	2003      	movs	r0, #3
 80002ba:	f000 fb85 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002be:	2000      	movs	r0, #0
 80002c0:	f7ff ffde 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002c4:	f003 fee0 	bl	8004088 <HAL_MspInit>
}
 80002c8:	2000      	movs	r0, #0
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	40022000 	.word	0x40022000

080002d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <HAL_IncTick+0xc>)
 80002d2:	6813      	ldr	r3, [r2, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	200002b4 	.word	0x200002b4

080002e0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002e0:	4b01      	ldr	r3, [pc, #4]	; (80002e8 <HAL_GetTick+0x8>)
 80002e2:	6818      	ldr	r0, [r3, #0]
}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	200002b4 	.word	0x200002b4

080002ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	b083      	sub	sp, #12
 80002f0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f2:	f7ff fff5 	bl	80002e0 <HAL_GetTick>
 80002f6:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80002f8:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80002fe:	d000      	beq.n	8000302 <HAL_Delay+0x16>
  {
     wait++;
 8000300:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000302:	f7ff ffed 	bl	80002e0 <HAL_GetTick>
 8000306:	1b40      	subs	r0, r0, r5
 8000308:	42a0      	cmp	r0, r4
 800030a:	d3fa      	bcc.n	8000302 <HAL_Delay+0x16>
  {
  }
}
 800030c:	b003      	add	sp, #12
 800030e:	bd30      	pop	{r4, r5, pc}

08000310 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000310:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000312:	6802      	ldr	r2, [r0, #0]
 8000314:	6893      	ldr	r3, [r2, #8]
 8000316:	f003 0303 	and.w	r3, r3, #3
 800031a:	2b01      	cmp	r3, #1
 800031c:	d011      	beq.n	8000342 <ADC_Disable+0x32>
 800031e:	2300      	movs	r3, #0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d037      	beq.n	8000394 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000324:	6893      	ldr	r3, [r2, #8]
 8000326:	f003 030d 	and.w	r3, r3, #13
 800032a:	2b01      	cmp	r3, #1
 800032c:	d011      	beq.n	8000352 <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800032e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000336:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 800033e:	2001      	movs	r0, #1
 8000340:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000342:	6813      	ldr	r3, [r2, #0]
 8000344:	f013 0f01 	tst.w	r3, #1
 8000348:	d101      	bne.n	800034e <ADC_Disable+0x3e>
 800034a:	2300      	movs	r3, #0
 800034c:	e7e8      	b.n	8000320 <ADC_Disable+0x10>
 800034e:	2301      	movs	r3, #1
 8000350:	e7e6      	b.n	8000320 <ADC_Disable+0x10>
 8000352:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000354:	6893      	ldr	r3, [r2, #8]
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	6093      	str	r3, [r2, #8]
 800035c:	6803      	ldr	r3, [r0, #0]
 800035e:	2203      	movs	r2, #3
 8000360:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000362:	f7ff ffbd 	bl	80002e0 <HAL_GetTick>
 8000366:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000368:	6823      	ldr	r3, [r4, #0]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f013 0f01 	tst.w	r3, #1
 8000370:	d00e      	beq.n	8000390 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000372:	f7ff ffb5 	bl	80002e0 <HAL_GetTick>
 8000376:	1b40      	subs	r0, r0, r5
 8000378:	2802      	cmp	r0, #2
 800037a:	d9f5      	bls.n	8000368 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800037c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000384:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800038c:	2001      	movs	r0, #1
 800038e:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000390:	2000      	movs	r0, #0
 8000392:	bd38      	pop	{r3, r4, r5, pc}
 8000394:	2000      	movs	r0, #0
}
 8000396:	bd38      	pop	{r3, r4, r5, pc}

08000398 <HAL_ADC_Init>:
{
 8000398:	b530      	push	{r4, r5, lr}
 800039a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 800039c:	2300      	movs	r3, #0
 800039e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80003a0:	2800      	cmp	r0, #0
 80003a2:	f000 80fb 	beq.w	800059c <HAL_ADC_Init+0x204>
 80003a6:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003aa:	f013 0f10 	tst.w	r3, #16
 80003ae:	d151      	bne.n	8000454 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80003b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003b2:	b1ab      	cbz	r3, 80003e0 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003b4:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003b6:	6823      	ldr	r3, [r4, #0]
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80003be:	d003      	beq.n	80003c8 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80003c0:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003c2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80003c6:	d046      	beq.n	8000456 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 80003c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003ca:	f023 0312 	bic.w	r3, r3, #18
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80003dc:	2001      	movs	r0, #1
 80003de:	e03a      	b.n	8000456 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 80003e0:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80003e2:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80003e4:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80003e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80003ea:	f003 fe8b 	bl	8004104 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80003ee:	6823      	ldr	r3, [r4, #0]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80003f6:	d001      	beq.n	80003fc <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003f8:	2000      	movs	r0, #0
 80003fa:	e7dc      	b.n	80003b6 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 80003fc:	4620      	mov	r0, r4
 80003fe:	f7ff ff87 	bl	8000310 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000402:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000404:	f013 0f10 	tst.w	r3, #16
 8000408:	d1d5      	bne.n	80003b6 <HAL_ADC_Init+0x1e>
 800040a:	2800      	cmp	r0, #0
 800040c:	d1d3      	bne.n	80003b6 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800040e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000410:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000414:	f023 0302 	bic.w	r3, r3, #2
 8000418:	f043 0302 	orr.w	r3, r3, #2
 800041c:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800041e:	6822      	ldr	r2, [r4, #0]
 8000420:	6893      	ldr	r3, [r2, #8]
 8000422:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000426:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000428:	6822      	ldr	r2, [r4, #0]
 800042a:	6893      	ldr	r3, [r2, #8]
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000430:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000432:	4b5b      	ldr	r3, [pc, #364]	; (80005a0 <HAL_ADC_Init+0x208>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a5b      	ldr	r2, [pc, #364]	; (80005a4 <HAL_ADC_Init+0x20c>)
 8000438:	fba2 2303 	umull	r2, r3, r2, r3
 800043c:	0c9b      	lsrs	r3, r3, #18
 800043e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000442:	005a      	lsls	r2, r3, #1
 8000444:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000446:	9b00      	ldr	r3, [sp, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0b4      	beq.n	80003b6 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 800044c:	9b00      	ldr	r3, [sp, #0]
 800044e:	3b01      	subs	r3, #1
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	e7f8      	b.n	8000446 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000454:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000456:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000458:	f013 0f10 	tst.w	r3, #16
 800045c:	f040 8095 	bne.w	800058a <HAL_ADC_Init+0x1f2>
 8000460:	2800      	cmp	r0, #0
 8000462:	f040 8092 	bne.w	800058a <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000466:	6822      	ldr	r2, [r4, #0]
 8000468:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800046a:	f013 0304 	ands.w	r3, r3, #4
 800046e:	f040 808c 	bne.w	800058a <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 8000472:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000474:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000478:	f041 0102 	orr.w	r1, r1, #2
 800047c:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800047e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000482:	d055      	beq.n	8000530 <HAL_ADC_Init+0x198>
 8000484:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000488:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800048a:	6891      	ldr	r1, [r2, #8]
 800048c:	f001 0103 	and.w	r1, r1, #3
 8000490:	2901      	cmp	r1, #1
 8000492:	d050      	beq.n	8000536 <HAL_ADC_Init+0x19e>
 8000494:	2200      	movs	r2, #0
 8000496:	b972      	cbnz	r2, 80004b6 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000498:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800049a:	b12d      	cbz	r5, 80004a8 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800049c:	68a9      	ldr	r1, [r5, #8]
 800049e:	f001 0103 	and.w	r1, r1, #3
 80004a2:	2901      	cmp	r1, #1
 80004a4:	d04f      	beq.n	8000546 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004a6:	b932      	cbnz	r2, 80004b6 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80004a8:	493f      	ldr	r1, [pc, #252]	; (80005a8 <HAL_ADC_Init+0x210>)
 80004aa:	688a      	ldr	r2, [r1, #8]
 80004ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80004b0:	6865      	ldr	r5, [r4, #4]
 80004b2:	432a      	orrs	r2, r5
 80004b4:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80004b6:	69e2      	ldr	r2, [r4, #28]
 80004b8:	0351      	lsls	r1, r2, #13
 80004ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80004bc:	2d01      	cmp	r5, #1
 80004be:	d001      	beq.n	80004c4 <HAL_ADC_Init+0x12c>
 80004c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c4:	430b      	orrs	r3, r1
 80004c6:	68e1      	ldr	r1, [r4, #12]
 80004c8:	430b      	orrs	r3, r1
 80004ca:	68a1      	ldr	r1, [r4, #8]
 80004cc:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80004d0:	2901      	cmp	r1, #1
 80004d2:	d03e      	beq.n	8000552 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80004d6:	2a01      	cmp	r2, #1
 80004d8:	d002      	beq.n	80004e0 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80004dc:	430a      	orrs	r2, r1
 80004de:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80004e0:	6822      	ldr	r2, [r4, #0]
 80004e2:	6891      	ldr	r1, [r2, #8]
 80004e4:	f011 0f0c 	tst.w	r1, #12
 80004e8:	d10b      	bne.n	8000502 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80004ea:	68d1      	ldr	r1, [r2, #12]
 80004ec:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80004f0:	f021 0102 	bic.w	r1, r1, #2
 80004f4:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80004f6:	69a1      	ldr	r1, [r4, #24]
 80004f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000500:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000502:	6821      	ldr	r1, [r4, #0]
 8000504:	68cd      	ldr	r5, [r1, #12]
 8000506:	4a29      	ldr	r2, [pc, #164]	; (80005ac <HAL_ADC_Init+0x214>)
 8000508:	402a      	ands	r2, r5
 800050a:	4313      	orrs	r3, r2
 800050c:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800050e:	6923      	ldr	r3, [r4, #16]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d031      	beq.n	8000578 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000514:	6822      	ldr	r2, [r4, #0]
 8000516:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000518:	f023 030f 	bic.w	r3, r3, #15
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800051e:	2300      	movs	r3, #0
 8000520:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000522:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000524:	f023 0303 	bic.w	r3, r3, #3
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6463      	str	r3, [r4, #68]	; 0x44
 800052e:	e033      	b.n	8000598 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000530:	491f      	ldr	r1, [pc, #124]	; (80005b0 <HAL_ADC_Init+0x218>)
 8000532:	9101      	str	r1, [sp, #4]
 8000534:	e7a9      	b.n	800048a <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	f012 0f01 	tst.w	r2, #1
 800053c:	d101      	bne.n	8000542 <HAL_ADC_Init+0x1aa>
 800053e:	2200      	movs	r2, #0
 8000540:	e7a9      	b.n	8000496 <HAL_ADC_Init+0xfe>
 8000542:	2201      	movs	r2, #1
 8000544:	e7a7      	b.n	8000496 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000546:	6829      	ldr	r1, [r5, #0]
 8000548:	f011 0f01 	tst.w	r1, #1
 800054c:	d0ab      	beq.n	80004a6 <HAL_ADC_Init+0x10e>
 800054e:	2201      	movs	r2, #1
 8000550:	e7a9      	b.n	80004a6 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000552:	b932      	cbnz	r2, 8000562 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000554:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000556:	3a01      	subs	r2, #1
 8000558:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800055c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000560:	e7b8      	b.n	80004d4 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 8000562:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000564:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000568:	f042 0220 	orr.w	r2, r2, #32
 800056c:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800056e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000570:	f042 0201 	orr.w	r2, r2, #1
 8000574:	64a2      	str	r2, [r4, #72]	; 0x48
 8000576:	e7ad      	b.n	80004d4 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000578:	6821      	ldr	r1, [r4, #0]
 800057a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	6a22      	ldr	r2, [r4, #32]
 8000582:	3a01      	subs	r2, #1
 8000584:	4313      	orrs	r3, r2
 8000586:	630b      	str	r3, [r1, #48]	; 0x30
 8000588:	e7c9      	b.n	800051e <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 800058a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800058c:	f023 0312 	bic.w	r3, r3, #18
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8000596:	2001      	movs	r0, #1
}
 8000598:	b017      	add	sp, #92	; 0x5c
 800059a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800059c:	2001      	movs	r0, #1
 800059e:	e7fb      	b.n	8000598 <HAL_ADC_Init+0x200>
 80005a0:	20000000 	.word	0x20000000
 80005a4:	431bde83 	.word	0x431bde83
 80005a8:	50000300 	.word	0x50000300
 80005ac:	fff0c007 	.word	0xfff0c007
 80005b0:	50000100 	.word	0x50000100

080005b4 <HAL_ADCEx_Calibration_Start>:
{
 80005b4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80005b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d102      	bne.n	80005c4 <HAL_ADCEx_Calibration_Start+0x10>
 80005be:	2502      	movs	r5, #2
}
 80005c0:	4628      	mov	r0, r5
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	460e      	mov	r6, r1
 80005c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80005c8:	2301      	movs	r3, #1
 80005ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_Disable(hadc);
 80005ce:	f7ff fe9f 	bl	8000310 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80005d2:	4605      	mov	r5, r0
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d130      	bne.n	800063a <HAL_ADCEx_Calibration_Start+0x86>
    hadc->State = HAL_ADC_STATE_READY;
 80005d8:	2301      	movs	r3, #1
 80005da:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80005dc:	6822      	ldr	r2, [r4, #0]
 80005de:	6893      	ldr	r3, [r2, #8]
 80005e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80005e4:	6093      	str	r3, [r2, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80005e6:	2e01      	cmp	r6, #1
 80005e8:	d01b      	beq.n	8000622 <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80005ea:	6822      	ldr	r2, [r4, #0]
 80005ec:	6893      	ldr	r3, [r2, #8]
 80005ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005f2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80005f4:	f7ff fe74 	bl	80002e0 <HAL_GetTick>
 80005f8:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	da15      	bge.n	800062e <HAL_ADCEx_Calibration_Start+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000602:	f7ff fe6d 	bl	80002e0 <HAL_GetTick>
 8000606:	1b80      	subs	r0, r0, r6
 8000608:	280a      	cmp	r0, #10
 800060a:	d9f6      	bls.n	80005fa <HAL_ADCEx_Calibration_Start+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 800060c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800060e:	f023 0312 	bic.w	r3, r3, #18
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8000618:	2300      	movs	r3, #0
 800061a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800061e:	2501      	movs	r5, #1
 8000620:	e7ce      	b.n	80005c0 <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000622:	6822      	ldr	r2, [r4, #0]
 8000624:	6893      	ldr	r3, [r2, #8]
 8000626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800062a:	6093      	str	r3, [r2, #8]
 800062c:	e7dd      	b.n	80005ea <HAL_ADCEx_Calibration_Start+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000630:	f023 0303 	bic.w	r3, r3, #3
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800063a:	2300      	movs	r3, #0
 800063c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8000640:	e7be      	b.n	80005c0 <HAL_ADCEx_Calibration_Start+0xc>
	...

08000644 <HAL_ADC_ConfigChannel>:
{
 8000644:	b470      	push	{r4, r5, r6}
 8000646:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000648:	2200      	movs	r2, #0
 800064a:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 800064c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000650:	2a01      	cmp	r2, #1
 8000652:	f000 81ad 	beq.w	80009b0 <HAL_ADC_ConfigChannel+0x36c>
 8000656:	4603      	mov	r3, r0
 8000658:	2201      	movs	r2, #1
 800065a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800065e:	6800      	ldr	r0, [r0, #0]
 8000660:	6882      	ldr	r2, [r0, #8]
 8000662:	f012 0f04 	tst.w	r2, #4
 8000666:	f040 8196 	bne.w	8000996 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 800066a:	684a      	ldr	r2, [r1, #4]
 800066c:	2a04      	cmp	r2, #4
 800066e:	d831      	bhi.n	80006d4 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8000670:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000672:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000676:	0055      	lsls	r5, r2, #1
 8000678:	221f      	movs	r2, #31
 800067a:	40aa      	lsls	r2, r5
 800067c:	ea24 0202 	bic.w	r2, r4, r2
 8000680:	680c      	ldr	r4, [r1, #0]
 8000682:	40ac      	lsls	r4, r5
 8000684:	4322      	orrs	r2, r4
 8000686:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	6882      	ldr	r2, [r0, #8]
 800068c:	f012 0f0c 	tst.w	r2, #12
 8000690:	d168      	bne.n	8000764 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000692:	680a      	ldr	r2, [r1, #0]
 8000694:	2a09      	cmp	r2, #9
 8000696:	d94e      	bls.n	8000736 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000698:	6984      	ldr	r4, [r0, #24]
 800069a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800069e:	3a1e      	subs	r2, #30
 80006a0:	2507      	movs	r5, #7
 80006a2:	4095      	lsls	r5, r2
 80006a4:	ea24 0405 	bic.w	r4, r4, r5
 80006a8:	688d      	ldr	r5, [r1, #8]
 80006aa:	fa05 f202 	lsl.w	r2, r5, r2
 80006ae:	4322      	orrs	r2, r4
 80006b0:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80006b2:	6948      	ldr	r0, [r1, #20]
 80006b4:	681c      	ldr	r4, [r3, #0]
 80006b6:	68e2      	ldr	r2, [r4, #12]
 80006b8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80006bc:	0052      	lsls	r2, r2, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80006c2:	6908      	ldr	r0, [r1, #16]
 80006c4:	3801      	subs	r0, #1
 80006c6:	2803      	cmp	r0, #3
 80006c8:	f200 808f 	bhi.w	80007ea <HAL_ADC_ConfigChannel+0x1a6>
 80006cc:	e8df f000 	tbb	[pc, r0]
 80006d0:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 80006d4:	2a09      	cmp	r2, #9
 80006d6:	d80e      	bhi.n	80006f6 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80006d8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80006da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80006de:	0055      	lsls	r5, r2, #1
 80006e0:	3d1e      	subs	r5, #30
 80006e2:	221f      	movs	r2, #31
 80006e4:	40aa      	lsls	r2, r5
 80006e6:	ea24 0202 	bic.w	r2, r4, r2
 80006ea:	680c      	ldr	r4, [r1, #0]
 80006ec:	fa04 f505 	lsl.w	r5, r4, r5
 80006f0:	432a      	orrs	r2, r5
 80006f2:	6342      	str	r2, [r0, #52]	; 0x34
 80006f4:	e7c8      	b.n	8000688 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80006f6:	2a0e      	cmp	r2, #14
 80006f8:	d80e      	bhi.n	8000718 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80006fa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80006fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000700:	0055      	lsls	r5, r2, #1
 8000702:	3d3c      	subs	r5, #60	; 0x3c
 8000704:	221f      	movs	r2, #31
 8000706:	40aa      	lsls	r2, r5
 8000708:	ea24 0202 	bic.w	r2, r4, r2
 800070c:	680c      	ldr	r4, [r1, #0]
 800070e:	fa04 f505 	lsl.w	r5, r4, r5
 8000712:	432a      	orrs	r2, r5
 8000714:	6382      	str	r2, [r0, #56]	; 0x38
 8000716:	e7b7      	b.n	8000688 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000718:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800071a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800071e:	0055      	lsls	r5, r2, #1
 8000720:	3d5a      	subs	r5, #90	; 0x5a
 8000722:	221f      	movs	r2, #31
 8000724:	40aa      	lsls	r2, r5
 8000726:	ea24 0202 	bic.w	r2, r4, r2
 800072a:	680c      	ldr	r4, [r1, #0]
 800072c:	fa04 f505 	lsl.w	r5, r4, r5
 8000730:	432a      	orrs	r2, r5
 8000732:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000734:	e7a8      	b.n	8000688 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000736:	6944      	ldr	r4, [r0, #20]
 8000738:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800073c:	2507      	movs	r5, #7
 800073e:	4095      	lsls	r5, r2
 8000740:	ea24 0405 	bic.w	r4, r4, r5
 8000744:	688d      	ldr	r5, [r1, #8]
 8000746:	fa05 f202 	lsl.w	r2, r5, r2
 800074a:	4322      	orrs	r2, r4
 800074c:	6142      	str	r2, [r0, #20]
 800074e:	e7b0      	b.n	80006b2 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000750:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000752:	4d98      	ldr	r5, [pc, #608]	; (80009b4 <HAL_ADC_ConfigChannel+0x370>)
 8000754:	4005      	ands	r5, r0
 8000756:	6808      	ldr	r0, [r1, #0]
 8000758:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 800075c:	4315      	orrs	r5, r2
 800075e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000762:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	6882      	ldr	r2, [r0, #8]
 8000768:	f002 0203 	and.w	r2, r2, #3
 800076c:	2a01      	cmp	r2, #1
 800076e:	d06f      	beq.n	8000850 <HAL_ADC_ConfigChannel+0x20c>
 8000770:	2200      	movs	r2, #0
 8000772:	2a00      	cmp	r2, #0
 8000774:	f040 811a 	bne.w	80009ac <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000778:	68cc      	ldr	r4, [r1, #12]
 800077a:	2c01      	cmp	r4, #1
 800077c:	d070      	beq.n	8000860 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800077e:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000782:	680e      	ldr	r6, [r1, #0]
 8000784:	2501      	movs	r5, #1
 8000786:	40b5      	lsls	r5, r6
 8000788:	ea24 0405 	bic.w	r4, r4, r5
 800078c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000790:	6809      	ldr	r1, [r1, #0]
 8000792:	2910      	cmp	r1, #16
 8000794:	f000 808d 	beq.w	80008b2 <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000798:	2911      	cmp	r1, #17
 800079a:	f000 80af 	beq.w	80008fc <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800079e:	2912      	cmp	r1, #18
 80007a0:	f000 80b2 	beq.w	8000908 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a4:	2000      	movs	r0, #0
 80007a6:	e0fb      	b.n	80009a0 <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80007a8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80007aa:	4d82      	ldr	r5, [pc, #520]	; (80009b4 <HAL_ADC_ConfigChannel+0x370>)
 80007ac:	4005      	ands	r5, r0
 80007ae:	6808      	ldr	r0, [r1, #0]
 80007b0:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80007b4:	4315      	orrs	r5, r2
 80007b6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80007ba:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80007bc:	e7d2      	b.n	8000764 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80007be:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80007c0:	4d7c      	ldr	r5, [pc, #496]	; (80009b4 <HAL_ADC_ConfigChannel+0x370>)
 80007c2:	4005      	ands	r5, r0
 80007c4:	6808      	ldr	r0, [r1, #0]
 80007c6:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80007ca:	4315      	orrs	r5, r2
 80007cc:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80007d0:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 80007d2:	e7c7      	b.n	8000764 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80007d4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80007d6:	4877      	ldr	r0, [pc, #476]	; (80009b4 <HAL_ADC_ConfigChannel+0x370>)
 80007d8:	4028      	ands	r0, r5
 80007da:	680d      	ldr	r5, [r1, #0]
 80007dc:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80007e0:	4302      	orrs	r2, r0
 80007e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007e6:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 80007e8:	e7bc      	b.n	8000764 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80007ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80007ec:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80007f0:	6808      	ldr	r0, [r1, #0]
 80007f2:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 80007f6:	d01c      	beq.n	8000832 <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80007fc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000800:	680c      	ldr	r4, [r1, #0]
 8000802:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000806:	d019      	beq.n	800083c <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800080c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000810:	680c      	ldr	r4, [r1, #0]
 8000812:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000816:	d016      	beq.n	8000846 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800081c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000820:	680c      	ldr	r4, [r1, #0]
 8000822:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000826:	d19d      	bne.n	8000764 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000828:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800082a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800082e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8000830:	e798      	b.n	8000764 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000832:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000834:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000838:	6622      	str	r2, [r4, #96]	; 0x60
 800083a:	e7dd      	b.n	80007f8 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800083c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800083e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000842:	6642      	str	r2, [r0, #100]	; 0x64
 8000844:	e7e0      	b.n	8000808 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000846:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000848:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800084c:	6682      	str	r2, [r0, #104]	; 0x68
 800084e:	e7e3      	b.n	8000818 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000850:	6802      	ldr	r2, [r0, #0]
 8000852:	f012 0f01 	tst.w	r2, #1
 8000856:	d101      	bne.n	800085c <HAL_ADC_ConfigChannel+0x218>
 8000858:	2200      	movs	r2, #0
 800085a:	e78a      	b.n	8000772 <HAL_ADC_ConfigChannel+0x12e>
 800085c:	2201      	movs	r2, #1
 800085e:	e788      	b.n	8000772 <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000860:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000864:	680e      	ldr	r6, [r1, #0]
 8000866:	2501      	movs	r5, #1
 8000868:	40b5      	lsls	r5, r6
 800086a:	432c      	orrs	r4, r5
 800086c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000870:	6808      	ldr	r0, [r1, #0]
 8000872:	2809      	cmp	r0, #9
 8000874:	d90e      	bls.n	8000894 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000876:	681e      	ldr	r6, [r3, #0]
 8000878:	69b4      	ldr	r4, [r6, #24]
 800087a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800087e:	381b      	subs	r0, #27
 8000880:	2507      	movs	r5, #7
 8000882:	4085      	lsls	r5, r0
 8000884:	ea24 0405 	bic.w	r4, r4, r5
 8000888:	688d      	ldr	r5, [r1, #8]
 800088a:	fa05 f000 	lsl.w	r0, r5, r0
 800088e:	4320      	orrs	r0, r4
 8000890:	61b0      	str	r0, [r6, #24]
 8000892:	e77d      	b.n	8000790 <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000894:	681e      	ldr	r6, [r3, #0]
 8000896:	6974      	ldr	r4, [r6, #20]
 8000898:	3001      	adds	r0, #1
 800089a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800089e:	2507      	movs	r5, #7
 80008a0:	4085      	lsls	r5, r0
 80008a2:	ea24 0405 	bic.w	r4, r4, r5
 80008a6:	688d      	ldr	r5, [r1, #8]
 80008a8:	fa05 f000 	lsl.w	r0, r5, r0
 80008ac:	4320      	orrs	r0, r4
 80008ae:	6170      	str	r0, [r6, #20]
 80008b0:	e76e      	b.n	8000790 <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80008b2:	4841      	ldr	r0, [pc, #260]	; (80009b8 <HAL_ADC_ConfigChannel+0x374>)
 80008b4:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80008b6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80008ba:	f47f af6d 	bne.w	8000798 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80008c4:	d027      	beq.n	8000916 <HAL_ADC_ConfigChannel+0x2d2>
 80008c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008ca:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80008cc:	68a0      	ldr	r0, [r4, #8]
 80008ce:	f000 0003 	and.w	r0, r0, #3
 80008d2:	2801      	cmp	r0, #1
 80008d4:	d022      	beq.n	800091c <HAL_ADC_ConfigChannel+0x2d8>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d157      	bne.n	800098a <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008da:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80008dc:	b135      	cbz	r5, 80008ec <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80008de:	68a8      	ldr	r0, [r5, #8]
 80008e0:	f000 0003 	and.w	r0, r0, #3
 80008e4:	2801      	cmp	r0, #1
 80008e6:	d01f      	beq.n	8000928 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d14e      	bne.n	800098a <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80008ec:	2910      	cmp	r1, #16
 80008ee:	d021      	beq.n	8000934 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80008f0:	2911      	cmp	r1, #17
 80008f2:	d039      	beq.n	8000968 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80008f4:	2912      	cmp	r1, #18
 80008f6:	d041      	beq.n	800097c <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f8:	2000      	movs	r0, #0
 80008fa:	e051      	b.n	80009a0 <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80008fc:	482e      	ldr	r0, [pc, #184]	; (80009b8 <HAL_ADC_ConfigChannel+0x374>)
 80008fe:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000900:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8000904:	d0db      	beq.n	80008be <HAL_ADC_ConfigChannel+0x27a>
 8000906:	e74a      	b.n	800079e <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000908:	482b      	ldr	r0, [pc, #172]	; (80009b8 <HAL_ADC_ConfigChannel+0x374>)
 800090a:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800090c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8000910:	d0d5      	beq.n	80008be <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000912:	2000      	movs	r0, #0
 8000914:	e044      	b.n	80009a0 <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000916:	4829      	ldr	r0, [pc, #164]	; (80009bc <HAL_ADC_ConfigChannel+0x378>)
 8000918:	9001      	str	r0, [sp, #4]
 800091a:	e7d7      	b.n	80008cc <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800091c:	6820      	ldr	r0, [r4, #0]
 800091e:	f010 0f01 	tst.w	r0, #1
 8000922:	d0d8      	beq.n	80008d6 <HAL_ADC_ConfigChannel+0x292>
 8000924:	2201      	movs	r2, #1
 8000926:	e7d6      	b.n	80008d6 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000928:	6828      	ldr	r0, [r5, #0]
 800092a:	f010 0f01 	tst.w	r0, #1
 800092e:	d0db      	beq.n	80008e8 <HAL_ADC_ConfigChannel+0x2a4>
 8000930:	2201      	movs	r2, #1
 8000932:	e7d9      	b.n	80008e8 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000934:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000938:	d1da      	bne.n	80008f0 <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800093a:	491f      	ldr	r1, [pc, #124]	; (80009b8 <HAL_ADC_ConfigChannel+0x374>)
 800093c:	688a      	ldr	r2, [r1, #8]
 800093e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000942:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000944:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <HAL_ADC_ConfigChannel+0x37c>)
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	491e      	ldr	r1, [pc, #120]	; (80009c4 <HAL_ADC_ConfigChannel+0x380>)
 800094a:	fbb2 f1f1 	udiv	r1, r2, r1
 800094e:	220a      	movs	r2, #10
 8000950:	fb02 f201 	mul.w	r2, r2, r1
 8000954:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000956:	e002      	b.n	800095e <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 8000958:	9a00      	ldr	r2, [sp, #0]
 800095a:	3a01      	subs	r2, #1
 800095c:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800095e:	9a00      	ldr	r2, [sp, #0]
 8000960:	2a00      	cmp	r2, #0
 8000962:	d1f9      	bne.n	8000958 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000964:	2000      	movs	r0, #0
 8000966:	e01b      	b.n	80009a0 <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000968:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800096c:	d1c2      	bne.n	80008f4 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800096e:	4912      	ldr	r1, [pc, #72]	; (80009b8 <HAL_ADC_ConfigChannel+0x374>)
 8000970:	688a      	ldr	r2, [r1, #8]
 8000972:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000976:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000978:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800097a:	e011      	b.n	80009a0 <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800097c:	490e      	ldr	r1, [pc, #56]	; (80009b8 <HAL_ADC_ConfigChannel+0x374>)
 800097e:	688a      	ldr	r2, [r1, #8]
 8000980:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000984:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000986:	2000      	movs	r0, #0
 8000988:	e00a      	b.n	80009a0 <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800098a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800098c:	f042 0220 	orr.w	r2, r2, #32
 8000990:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000992:	2001      	movs	r0, #1
 8000994:	e004      	b.n	80009a0 <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000998:	f042 0220 	orr.w	r2, r2, #32
 800099c:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800099e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80009a6:	b017      	add	sp, #92	; 0x5c
 80009a8:	bc70      	pop	{r4, r5, r6}
 80009aa:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ac:	2000      	movs	r0, #0
 80009ae:	e7f7      	b.n	80009a0 <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 80009b0:	2002      	movs	r0, #2
 80009b2:	e7f8      	b.n	80009a6 <HAL_ADC_ConfigChannel+0x362>
 80009b4:	83fff000 	.word	0x83fff000
 80009b8:	50000300 	.word	0x50000300
 80009bc:	50000100 	.word	0x50000100
 80009c0:	20000000 	.word	0x20000000
 80009c4:	000f4240 	.word	0x000f4240

080009c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009d0:	041b      	lsls	r3, r3, #16
 80009d2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009d4:	0200      	lsls	r0, r0, #8
 80009d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009da:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80009dc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80009e0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80009e4:	60d0      	str	r0, [r2, #12]
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <HAL_NVIC_SetPriority+0x5c>)
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f6:	f1c3 0407 	rsb	r4, r3, #7
 80009fa:	2c04      	cmp	r4, #4
 80009fc:	bf28      	it	cs
 80009fe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a00:	1d1d      	adds	r5, r3, #4
 8000a02:	2d06      	cmp	r5, #6
 8000a04:	d917      	bls.n	8000a36 <HAL_NVIC_SetPriority+0x4a>
 8000a06:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	2501      	movs	r5, #1
 8000a0a:	fa05 f404 	lsl.w	r4, r5, r4
 8000a0e:	3c01      	subs	r4, #1
 8000a10:	4021      	ands	r1, r4
 8000a12:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	fa05 f303 	lsl.w	r3, r5, r3
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	db0b      	blt.n	8000a3a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	0109      	lsls	r1, r1, #4
 8000a24:	b2c9      	uxtb	r1, r1
 8000a26:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a2a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a2e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a32:	bc30      	pop	{r4, r5}
 8000a34:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	2300      	movs	r3, #0
 8000a38:	e7e6      	b.n	8000a08 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	f000 000f 	and.w	r0, r0, #15
 8000a3e:	0109      	lsls	r1, r1, #4
 8000a40:	b2c9      	uxtb	r1, r1
 8000a42:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <HAL_NVIC_SetPriority+0x60>)
 8000a44:	5419      	strb	r1, [r3, r0]
 8000a46:	e7f4      	b.n	8000a32 <HAL_NVIC_SetPriority+0x46>
 8000a48:	e000ed00 	.word	0xe000ed00
 8000a4c:	e000ed14 	.word	0xe000ed14

08000a50 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a50:	0942      	lsrs	r2, r0, #5
 8000a52:	f000 001f 	and.w	r0, r0, #31
 8000a56:	2301      	movs	r3, #1
 8000a58:	fa03 f000 	lsl.w	r0, r3, r0
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <HAL_NVIC_EnableIRQ+0x14>)
 8000a5e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	3801      	subs	r0, #1
 8000a6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6e:	d20a      	bcs.n	8000a86 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_SYSTICK_Config+0x24>)
 8000a72:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	21f0      	movs	r1, #240	; 0xf0
 8000a76:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_SYSTICK_Config+0x28>)
 8000a78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a94:	2804      	cmp	r0, #4
 8000a96:	d005      	beq.n	8000aa4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a98:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f023 0304 	bic.w	r3, r3, #4
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000aa4:	4a02      	ldr	r2, [pc, #8]	; (8000ab0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4770      	bx	lr
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ab4:	4770      	bx	lr

08000ab6 <HAL_SYSTICK_IRQHandler>:
{
 8000ab6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ab8:	f7ff fffc 	bl	8000ab4 <HAL_SYSTICK_Callback>
 8000abc:	bd08      	pop	{r3, pc}
	...

08000ac0 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ac0:	6802      	ldr	r2, [r0, #0]
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <DMA_CalcBaseAndBitshift+0x18>)
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <DMA_CalcBaseAndBitshift+0x1c>)
 8000ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ad2:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <DMA_CalcBaseAndBitshift+0x20>)
 8000ad4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000ad6:	4770      	bx	lr
 8000ad8:	bffdfff8 	.word	0xbffdfff8
 8000adc:	cccccccd 	.word	0xcccccccd
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <HAL_DMA_Init>:
  if(NULL == hdma)
 8000ae4:	b340      	cbz	r0, 8000b38 <HAL_DMA_Init+0x54>
{ 
 8000ae6:	b510      	push	{r4, lr}
 8000ae8:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000af0:	6801      	ldr	r1, [r0, #0]
 8000af2:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000af4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000af8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000afc:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000afe:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8000b00:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b02:	68e0      	ldr	r0, [r4, #12]
 8000b04:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b06:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b08:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0a:	6960      	ldr	r0, [r4, #20]
 8000b0c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b0e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b10:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b12:	69e0      	ldr	r0, [r4, #28]
 8000b14:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000b16:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000b18:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f7ff ffd0 	bl	8000ac0 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8000b20:	2000      	movs	r0, #0
 8000b22:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b24:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000b26:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000b28:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b2a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000b32:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8000b36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <HAL_DMA_Abort_IT>:
{  
 8000b3c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b3e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d003      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b46:	2304      	movs	r3, #4
 8000b48:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b4e:	6802      	ldr	r2, [r0, #0]
 8000b50:	6813      	ldr	r3, [r2, #0]
 8000b52:	f023 030e 	bic.w	r3, r3, #14
 8000b56:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b58:	6802      	ldr	r2, [r0, #0]
 8000b5a:	6813      	ldr	r3, [r2, #0]
 8000b5c:	f023 0301 	bic.w	r3, r3, #1
 8000b60:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b62:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000b64:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b66:	2201      	movs	r2, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b6e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000b72:	2300      	movs	r3, #0
 8000b74:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000b78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000b7a:	b113      	cbz	r3, 8000b82 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8000b7c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000b7e:	2000      	movs	r0, #0
 8000b80:	bd08      	pop	{r3, pc}
 8000b82:	2000      	movs	r0, #0
}
 8000b84:	bd08      	pop	{r3, pc}

08000b86 <HAL_DMA_IRQHandler>:
{
 8000b86:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000b8a:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b8c:	6804      	ldr	r4, [r0, #0]
 8000b8e:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b90:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000b92:	2304      	movs	r3, #4
 8000b94:	408b      	lsls	r3, r1
 8000b96:	421a      	tst	r2, r3
 8000b98:	d014      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x3e>
 8000b9a:	f015 0f04 	tst.w	r5, #4
 8000b9e:	d011      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x3e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ba0:	6823      	ldr	r3, [r4, #0]
 8000ba2:	f013 0f20 	tst.w	r3, #32
 8000ba6:	d103      	bne.n	8000bb0 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	f023 0304 	bic.w	r3, r3, #4
 8000bae:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000bb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000bb2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	408b      	lsls	r3, r1
 8000bb8:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d03a      	beq.n	8000c36 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferHalfCpltCallback(hdma);
 8000bc0:	4798      	blx	r3
 8000bc2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	408b      	lsls	r3, r1
 8000bc8:	421a      	tst	r2, r3
 8000bca:	d019      	beq.n	8000c00 <HAL_DMA_IRQHandler+0x7a>
 8000bcc:	f015 0f02 	tst.w	r5, #2
 8000bd0:	d016      	beq.n	8000c00 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	f013 0f20 	tst.w	r3, #32
 8000bd8:	d106      	bne.n	8000be8 <HAL_DMA_IRQHandler+0x62>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	f023 030a 	bic.w	r3, r3, #10
 8000be0:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000be2:	2301      	movs	r3, #1
 8000be4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000be8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000bea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000bec:	2302      	movs	r3, #2
 8000bee:	408b      	lsls	r3, r1
 8000bf0:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000bf8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000bfa:	b1e3      	cbz	r3, 8000c36 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferCpltCallback(hdma);
 8000bfc:	4798      	blx	r3
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c00:	2308      	movs	r3, #8
 8000c02:	fa03 f101 	lsl.w	r1, r3, r1
 8000c06:	420a      	tst	r2, r1
 8000c08:	d015      	beq.n	8000c36 <HAL_DMA_IRQHandler+0xb0>
 8000c0a:	f015 0f08 	tst.w	r5, #8
 8000c0e:	d012      	beq.n	8000c36 <HAL_DMA_IRQHandler+0xb0>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	f023 030e 	bic.w	r3, r3, #14
 8000c16:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c18:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000c1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	fa03 f202 	lsl.w	r2, r3, r2
 8000c22:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c24:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000c26:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000c30:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c32:	b103      	cbz	r3, 8000c36 <HAL_DMA_IRQHandler+0xb0>
    	hdma->XferErrorCallback(hdma);
 8000c34:	4798      	blx	r3
 8000c36:	bd38      	pop	{r3, r4, r5, pc}

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000c3c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c3e:	e088      	b.n	8000d52 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c40:	08de      	lsrs	r6, r3, #3
 8000c42:	3608      	adds	r6, #8
 8000c44:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c48:	f003 0e07 	and.w	lr, r3, #7
 8000c4c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c50:	270f      	movs	r7, #15
 8000c52:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c56:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c5a:	690f      	ldr	r7, [r1, #16]
 8000c5c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c60:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8000c62:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8000c66:	e083      	b.n	8000d70 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c68:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6c:	68cf      	ldr	r7, [r1, #12]
 8000c6e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c72:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000c74:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c76:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c78:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c7c:	684e      	ldr	r6, [r1, #4]
 8000c7e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000c82:	409e      	lsls	r6, r3
 8000c84:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000c86:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c88:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c8a:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8c:	688d      	ldr	r5, [r1, #8]
 8000c8e:	fa05 f50e 	lsl.w	r5, r5, lr
 8000c92:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000c94:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c96:	684c      	ldr	r4, [r1, #4]
 8000c98:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000c9c:	d058      	beq.n	8000d50 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4c47      	ldr	r4, [pc, #284]	; (8000dbc <HAL_GPIO_Init+0x184>)
 8000ca0:	69a5      	ldr	r5, [r4, #24]
 8000ca2:	f045 0501 	orr.w	r5, r5, #1
 8000ca6:	61a5      	str	r5, [r4, #24]
 8000ca8:	69a4      	ldr	r4, [r4, #24]
 8000caa:	f004 0401 	and.w	r4, r4, #1
 8000cae:	9401      	str	r4, [sp, #4]
 8000cb0:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cb2:	089d      	lsrs	r5, r3, #2
 8000cb4:	1cae      	adds	r6, r5, #2
 8000cb6:	4c42      	ldr	r4, [pc, #264]	; (8000dc0 <HAL_GPIO_Init+0x188>)
 8000cb8:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cbc:	f003 0603 	and.w	r6, r3, #3
 8000cc0:	00b6      	lsls	r6, r6, #2
 8000cc2:	270f      	movs	r7, #15
 8000cc4:	40b7      	lsls	r7, r6
 8000cc6:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cca:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000cce:	d06c      	beq.n	8000daa <HAL_GPIO_Init+0x172>
 8000cd0:	4f3c      	ldr	r7, [pc, #240]	; (8000dc4 <HAL_GPIO_Init+0x18c>)
 8000cd2:	42b8      	cmp	r0, r7
 8000cd4:	d06b      	beq.n	8000dae <HAL_GPIO_Init+0x176>
 8000cd6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000cda:	42b8      	cmp	r0, r7
 8000cdc:	d069      	beq.n	8000db2 <HAL_GPIO_Init+0x17a>
 8000cde:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ce2:	42b8      	cmp	r0, r7
 8000ce4:	d05f      	beq.n	8000da6 <HAL_GPIO_Init+0x16e>
 8000ce6:	2705      	movs	r7, #5
 8000ce8:	fa07 f606 	lsl.w	r6, r7, r6
 8000cec:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cee:	3502      	adds	r5, #2
 8000cf0:	4e33      	ldr	r6, [pc, #204]	; (8000dc0 <HAL_GPIO_Init+0x188>)
 8000cf2:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cf6:	4c34      	ldr	r4, [pc, #208]	; (8000dc8 <HAL_GPIO_Init+0x190>)
 8000cf8:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000cfa:	43d4      	mvns	r4, r2
 8000cfc:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d00:	684f      	ldr	r7, [r1, #4]
 8000d02:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000d06:	d001      	beq.n	8000d0c <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8000d08:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000d0c:	4d2e      	ldr	r5, [pc, #184]	; (8000dc8 <HAL_GPIO_Init+0x190>)
 8000d0e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000d10:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d12:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d16:	684f      	ldr	r7, [r1, #4]
 8000d18:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000d1c:	d001      	beq.n	8000d22 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8000d1e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000d22:	4d29      	ldr	r5, [pc, #164]	; (8000dc8 <HAL_GPIO_Init+0x190>)
 8000d24:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d26:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d2c:	684f      	ldr	r7, [r1, #4]
 8000d2e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000d32:	d001      	beq.n	8000d38 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8000d34:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000d38:	4d23      	ldr	r5, [pc, #140]	; (8000dc8 <HAL_GPIO_Init+0x190>)
 8000d3a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000d3c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d40:	684e      	ldr	r6, [r1, #4]
 8000d42:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000d46:	d001      	beq.n	8000d4c <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8000d48:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <HAL_GPIO_Init+0x190>)
 8000d4e:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000d50:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d52:	680a      	ldr	r2, [r1, #0]
 8000d54:	fa32 f403 	lsrs.w	r4, r2, r3
 8000d58:	d02d      	beq.n	8000db6 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d5a:	2501      	movs	r5, #1
 8000d5c:	409d      	lsls	r5, r3
    if(iocurrent)
 8000d5e:	402a      	ands	r2, r5
 8000d60:	d0f6      	beq.n	8000d50 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d62:	684c      	ldr	r4, [r1, #4]
 8000d64:	2c02      	cmp	r4, #2
 8000d66:	f43f af6b 	beq.w	8000c40 <HAL_GPIO_Init+0x8>
 8000d6a:	2c12      	cmp	r4, #18
 8000d6c:	f43f af68 	beq.w	8000c40 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000d70:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d76:	2403      	movs	r4, #3
 8000d78:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d7c:	43e4      	mvns	r4, r4
 8000d7e:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d80:	684f      	ldr	r7, [r1, #4]
 8000d82:	f007 0703 	and.w	r7, r7, #3
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000d8c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8e:	684e      	ldr	r6, [r1, #4]
 8000d90:	1e77      	subs	r7, r6, #1
 8000d92:	2f01      	cmp	r7, #1
 8000d94:	f67f af68 	bls.w	8000c68 <HAL_GPIO_Init+0x30>
 8000d98:	2e11      	cmp	r6, #17
 8000d9a:	f43f af65 	beq.w	8000c68 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9e:	2e12      	cmp	r6, #18
 8000da0:	f47f af72 	bne.w	8000c88 <HAL_GPIO_Init+0x50>
 8000da4:	e760      	b.n	8000c68 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000da6:	2703      	movs	r7, #3
 8000da8:	e79e      	b.n	8000ce8 <HAL_GPIO_Init+0xb0>
 8000daa:	2700      	movs	r7, #0
 8000dac:	e79c      	b.n	8000ce8 <HAL_GPIO_Init+0xb0>
 8000dae:	2701      	movs	r7, #1
 8000db0:	e79a      	b.n	8000ce8 <HAL_GPIO_Init+0xb0>
 8000db2:	2702      	movs	r7, #2
 8000db4:	e798      	b.n	8000ce8 <HAL_GPIO_Init+0xb0>
  }
}
 8000db6:	b003      	add	sp, #12
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	40010400 	.word	0x40010400

08000dcc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dcc:	6903      	ldr	r3, [r0, #16]
 8000dce:	4219      	tst	r1, r3
 8000dd0:	d101      	bne.n	8000dd6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dd2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000dd4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4770      	bx	lr

08000dda <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dda:	b90a      	cbnz	r2, 8000de0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ddc:	6281      	str	r1, [r0, #40]	; 0x28
 8000dde:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de0:	6181      	str	r1, [r0, #24]
 8000de2:	4770      	bx	lr

08000de4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000de8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4203      	tst	r3, r0
 8000df0:	d100      	bne.n	8000df4 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000df2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000df6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000df8:	f7ff fff4 	bl	8000de4 <HAL_GPIO_EXTI_Callback>
}
 8000dfc:	e7f9      	b.n	8000df2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000dfe:	bf00      	nop
 8000e00:	40010400 	.word	0x40010400

08000e04 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e04:	6803      	ldr	r3, [r0, #0]
 8000e06:	699a      	ldr	r2, [r3, #24]
 8000e08:	f012 0f02 	tst.w	r2, #2
 8000e0c:	d001      	beq.n	8000e12 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e0e:	2200      	movs	r2, #0
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e12:	6803      	ldr	r3, [r0, #0]
 8000e14:	699a      	ldr	r2, [r3, #24]
 8000e16:	f012 0f01 	tst.w	r2, #1
 8000e1a:	d103      	bne.n	8000e24 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	f042 0201 	orr.w	r2, r2, #1
 8000e22:	619a      	str	r2, [r3, #24]
 8000e24:	4770      	bx	lr

08000e26 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000e26:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000e28:	6804      	ldr	r4, [r0, #0]
 8000e2a:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000e2c:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8000e30:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8000e34:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8000e38:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000e3c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000e40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e44:	4319      	orrs	r1, r3
 8000e46:	9b01      	ldr	r3, [sp, #4]
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	4301      	orrs	r1, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000e4c:	6061      	str	r1, [r4, #4]
}
 8000e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <I2C_IsAcknowledgeFailed>:
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	4604      	mov	r4, r0
 8000e58:	460d      	mov	r5, r1
 8000e5a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e5c:	6803      	ldr	r3, [r0, #0]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f013 0f10 	tst.w	r3, #16
 8000e64:	d017      	beq.n	8000e96 <I2C_IsAcknowledgeFailed+0x42>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	f012 0f20 	tst.w	r2, #32
 8000e6e:	d114      	bne.n	8000e9a <I2C_IsAcknowledgeFailed+0x46>
      if (Timeout != HAL_MAX_DELAY)
 8000e70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000e74:	d0f7      	beq.n	8000e66 <I2C_IsAcknowledgeFailed+0x12>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e76:	b125      	cbz	r5, 8000e82 <I2C_IsAcknowledgeFailed+0x2e>
 8000e78:	f7ff fa32 	bl	80002e0 <HAL_GetTick>
 8000e7c:	1b80      	subs	r0, r0, r6
 8000e7e:	4285      	cmp	r5, r0
 8000e80:	d2f1      	bcs.n	8000e66 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->State = HAL_I2C_STATE_READY;
 8000e82:	2320      	movs	r3, #32
 8000e84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000e8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000e92:	2003      	movs	r0, #3
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000e96:	2000      	movs	r0, #0
 8000e98:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e9a:	2210      	movs	r2, #16
 8000e9c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	2520      	movs	r5, #32
 8000ea2:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff ffad 	bl	8000e04 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000eaa:	6822      	ldr	r2, [r4, #0]
 8000eac:	6853      	ldr	r3, [r2, #4]
 8000eae:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000eb2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000eb6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000ec4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000ece:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000ed2:	2001      	movs	r0, #1
}
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}

08000ed6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000ed6:	b570      	push	{r4, r5, r6, lr}
 8000ed8:	4604      	mov	r4, r0
 8000eda:	460d      	mov	r5, r1
 8000edc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f013 0f02 	tst.w	r3, #2
 8000ee6:	d11c      	bne.n	8000f22 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ee8:	4632      	mov	r2, r6
 8000eea:	4629      	mov	r1, r5
 8000eec:	4620      	mov	r0, r4
 8000eee:	f7ff ffb1 	bl	8000e54 <I2C_IsAcknowledgeFailed>
 8000ef2:	b9c0      	cbnz	r0, 8000f26 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000ef4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000ef8:	d0f1      	beq.n	8000ede <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000efa:	b125      	cbz	r5, 8000f06 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8000efc:	f7ff f9f0 	bl	80002e0 <HAL_GetTick>
 8000f00:	1b80      	subs	r0, r0, r6
 8000f02:	4285      	cmp	r5, r0
 8000f04:	d2eb      	bcs.n	8000ede <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f0e:	2320      	movs	r3, #32
 8000f10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000f1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000f1e:	2003      	movs	r0, #3
 8000f20:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000f22:	2000      	movs	r0, #0
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000f26:	2001      	movs	r0, #1
}
 8000f28:	bd70      	pop	{r4, r5, r6, pc}

08000f2a <I2C_WaitOnFlagUntilTimeout>:
{
 8000f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2c:	4605      	mov	r5, r0
 8000f2e:	460f      	mov	r7, r1
 8000f30:	4616      	mov	r6, r2
 8000f32:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	ea37 0303 	bics.w	r3, r7, r3
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2301      	moveq	r3, #1
 8000f40:	2300      	movne	r3, #0
 8000f42:	42b3      	cmp	r3, r6
 8000f44:	d113      	bne.n	8000f6e <I2C_WaitOnFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8000f46:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f4a:	d0f3      	beq.n	8000f34 <I2C_WaitOnFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f4c:	b12c      	cbz	r4, 8000f5a <I2C_WaitOnFlagUntilTimeout+0x30>
 8000f4e:	f7ff f9c7 	bl	80002e0 <HAL_GetTick>
 8000f52:	9b06      	ldr	r3, [sp, #24]
 8000f54:	1ac0      	subs	r0, r0, r3
 8000f56:	4284      	cmp	r4, r0
 8000f58:	d2ec      	bcs.n	8000f34 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->State = HAL_I2C_STATE_READY;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000f66:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8000f6e:	2000      	movs	r0, #0
}
 8000f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f72 <I2C_RequestMemoryRead>:
{
 8000f72:	b570      	push	{r4, r5, r6, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	4604      	mov	r4, r0
 8000f78:	4616      	mov	r6, r2
 8000f7a:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	b2ea      	uxtb	r2, r5
 8000f86:	f7ff ff4e 	bl	8000e26 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f8a:	9a07      	ldr	r2, [sp, #28]
 8000f8c:	9906      	ldr	r1, [sp, #24]
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f7ff ffa1 	bl	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f94:	b140      	cbz	r0, 8000fa8 <I2C_RequestMemoryRead+0x36>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d003      	beq.n	8000fa4 <I2C_RequestMemoryRead+0x32>
      return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e7fa      	b.n	8000f9e <I2C_RequestMemoryRead+0x2c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fa8:	2d01      	cmp	r5, #1
 8000faa:	d00d      	beq.n	8000fc8 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	0a32      	lsrs	r2, r6, #8
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fb2:	9a07      	ldr	r2, [sp, #28]
 8000fb4:	9906      	ldr	r1, [sp, #24]
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff ff8d 	bl	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fbc:	b1b0      	cbz	r0, 8000fec <I2C_RequestMemoryRead+0x7a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d011      	beq.n	8000fe8 <I2C_RequestMemoryRead+0x76>
        return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e7ea      	b.n	8000f9e <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	b2f6      	uxtb	r6, r6
 8000fcc:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000fce:	9b07      	ldr	r3, [sp, #28]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	9b06      	ldr	r3, [sp, #24]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff ffa6 	bl	8000f2a <I2C_WaitOnFlagUntilTimeout>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d0dc      	beq.n	8000f9e <I2C_RequestMemoryRead+0x2c>
    return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e7da      	b.n	8000f9e <I2C_RequestMemoryRead+0x2c>
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e7d8      	b.n	8000f9e <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	b2f6      	uxtb	r6, r6
 8000ff0:	629e      	str	r6, [r3, #40]	; 0x28
 8000ff2:	e7ec      	b.n	8000fce <I2C_RequestMemoryRead+0x5c>

08000ff4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	4605      	mov	r5, r0
 8000ff8:	460c      	mov	r4, r1
 8000ffa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f013 0f20 	tst.w	r3, #32
 8001004:	d119      	bne.n	800103a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001006:	4632      	mov	r2, r6
 8001008:	4621      	mov	r1, r4
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff ff22 	bl	8000e54 <I2C_IsAcknowledgeFailed>
 8001010:	b9a8      	cbnz	r0, 800103e <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001012:	b124      	cbz	r4, 800101e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8001014:	f7ff f964 	bl	80002e0 <HAL_GetTick>
 8001018:	1b80      	subs	r0, r0, r6
 800101a:	4284      	cmp	r4, r0
 800101c:	d2ee      	bcs.n	8000ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800101e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001026:	2320      	movs	r3, #32
 8001028:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001032:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8001036:	2003      	movs	r0, #3
 8001038:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800103a:	2000      	movs	r0, #0
 800103c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
}
 8001040:	bd70      	pop	{r4, r5, r6, pc}

08001042 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001042:	2800      	cmp	r0, #0
 8001044:	d059      	beq.n	80010fa <HAL_I2C_Init+0xb8>
{
 8001046:	b510      	push	{r4, lr}
 8001048:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800104a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800104e:	2b00      	cmp	r3, #0
 8001050:	d043      	beq.n	80010da <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001052:	2324      	movs	r3, #36	; 0x24
 8001054:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	f023 0301 	bic.w	r3, r3, #1
 8001060:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	6863      	ldr	r3, [r4, #4]
 8001066:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800106a:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	6893      	ldr	r3, [r2, #8]
 8001070:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001074:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001076:	68e3      	ldr	r3, [r4, #12]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d033      	beq.n	80010e4 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800107c:	6822      	ldr	r2, [r4, #0]
 800107e:	68a3      	ldr	r3, [r4, #8]
 8001080:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001084:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001086:	68e3      	ldr	r3, [r4, #12]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d031      	beq.n	80010f0 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800108c:	6822      	ldr	r2, [r4, #0]
 800108e:	6853      	ldr	r3, [r2, #4]
 8001090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001098:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	68d3      	ldr	r3, [r2, #12]
 800109e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010a2:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010a4:	6822      	ldr	r2, [r4, #0]
 80010a6:	6923      	ldr	r3, [r4, #16]
 80010a8:	6961      	ldr	r1, [r4, #20]
 80010aa:	430b      	orrs	r3, r1
 80010ac:	69a1      	ldr	r1, [r4, #24]
 80010ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80010b2:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	69e3      	ldr	r3, [r4, #28]
 80010b8:	6a21      	ldr	r1, [r4, #32]
 80010ba:	430b      	orrs	r3, r1
 80010bc:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80010be:	6822      	ldr	r2, [r4, #0]
 80010c0:	6813      	ldr	r3, [r2, #0]
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010c8:	2000      	movs	r0, #0
 80010ca:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010cc:	2320      	movs	r3, #32
 80010ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010d2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80010d8:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80010da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80010de:	f003 f861 	bl	80041a4 <HAL_I2C_MspInit>
 80010e2:	e7b6      	b.n	8001052 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	68a3      	ldr	r3, [r4, #8]
 80010e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ec:	6093      	str	r3, [r2, #8]
 80010ee:	e7ca      	b.n	8001086 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	e7c8      	b.n	800108c <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
 80010fc:	4770      	bx	lr

080010fe <HAL_I2C_Mem_Read>:
{
 80010fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001108:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800110c:	b2e4      	uxtb	r4, r4
 800110e:	2c20      	cmp	r4, #32
 8001110:	d004      	beq.n	800111c <HAL_I2C_Mem_Read+0x1e>
    return HAL_BUSY;
 8001112:	2302      	movs	r3, #2
}
 8001114:	4618      	mov	r0, r3
 8001116:	b002      	add	sp, #8
 8001118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 800111c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800111e:	2c00      	cmp	r4, #0
 8001120:	f000 80c9 	beq.w	80012b6 <HAL_I2C_Mem_Read+0x1b8>
 8001124:	2d00      	cmp	r5, #0
 8001126:	f000 80c8 	beq.w	80012ba <HAL_I2C_Mem_Read+0x1bc>
    __HAL_LOCK(hi2c);
 800112a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800112e:	2c01      	cmp	r4, #1
 8001130:	d101      	bne.n	8001136 <HAL_I2C_Mem_Read+0x38>
 8001132:	2302      	movs	r3, #2
 8001134:	e7ee      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
 8001136:	4698      	mov	r8, r3
 8001138:	4691      	mov	r9, r2
 800113a:	460e      	mov	r6, r1
 800113c:	4604      	mov	r4, r0
 800113e:	f04f 0a01 	mov.w	sl, #1
 8001142:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001146:	f7ff f8cb 	bl	80002e0 <HAL_GetTick>
 800114a:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800114c:	9000      	str	r0, [sp, #0]
 800114e:	2319      	movs	r3, #25
 8001150:	4652      	mov	r2, sl
 8001152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff fee7 	bl	8000f2a <I2C_WaitOnFlagUntilTimeout>
 800115c:	b108      	cbz	r0, 8001162 <HAL_I2C_Mem_Read+0x64>
      return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e7d8      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001162:	2322      	movs	r3, #34	; 0x22
 8001164:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001168:	2340      	movs	r3, #64	; 0x40
 800116a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800116e:	2300      	movs	r3, #0
 8001170:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001174:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001176:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001178:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800117a:	9701      	str	r7, [sp, #4]
 800117c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	4643      	mov	r3, r8
 8001182:	464a      	mov	r2, r9
 8001184:	4631      	mov	r1, r6
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff fef3 	bl	8000f72 <I2C_RequestMemoryRead>
 800118c:	b160      	cbz	r0, 80011a8 <HAL_I2C_Mem_Read+0xaa>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800118e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001190:	2b04      	cmp	r3, #4
 8001192:	d004      	beq.n	800119e <HAL_I2C_Mem_Read+0xa0>
        __HAL_UNLOCK(hi2c);
 8001194:	2300      	movs	r3, #0
 8001196:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e7ba      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
        __HAL_UNLOCK(hi2c);
 800119e:	2300      	movs	r3, #0
 80011a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80011a4:	4653      	mov	r3, sl
 80011a6:	e7b5      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2bff      	cmp	r3, #255	; 0xff
 80011ae:	d90b      	bls.n	80011c8 <HAL_I2C_Mem_Read+0xca>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80011b4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011be:	4631      	mov	r1, r6
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fe30 	bl	8000e26 <I2C_TransferConfig>
 80011c6:	e01d      	b.n	8001204 <HAL_I2C_Mem_Read+0x106>
      hi2c->XferSize = hi2c->XferCount;
 80011c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80011ca:	b292      	uxth	r2, r2
 80011cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80011ce:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	4631      	mov	r1, r6
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff fe22 	bl	8000e26 <I2C_TransferConfig>
 80011e2:	e00f      	b.n	8001204 <HAL_I2C_Mem_Read+0x106>
          hi2c->XferSize = hi2c->XferCount;
 80011e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80011e6:	b292      	uxth	r2, r2
 80011e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	4631      	mov	r1, r6
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff fe15 	bl	8000e26 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80011fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d034      	beq.n	800126e <HAL_I2C_Mem_Read+0x170>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001204:	9700      	str	r7, [sp, #0]
 8001206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001208:	2200      	movs	r2, #0
 800120a:	2104      	movs	r1, #4
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fe8c 	bl	8000f2a <I2C_WaitOnFlagUntilTimeout>
 8001212:	2800      	cmp	r0, #0
 8001214:	d153      	bne.n	80012be <HAL_I2C_Mem_Read+0x1c0>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	6262      	str	r2, [r4, #36]	; 0x24
 800121c:	6822      	ldr	r2, [r4, #0]
 800121e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001220:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001222:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001224:	3a01      	subs	r2, #1
 8001226:	b292      	uxth	r2, r2
 8001228:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800122a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001234:	2a00      	cmp	r2, #0
 8001236:	d1e1      	bne.n	80011fc <HAL_I2C_Mem_Read+0xfe>
 8001238:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800123a:	b29b      	uxth	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0dd      	beq.n	80011fc <HAL_I2C_Mem_Read+0xfe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001240:	9700      	str	r7, [sp, #0]
 8001242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fe6f 	bl	8000f2a <I2C_WaitOnFlagUntilTimeout>
 800124c:	2800      	cmp	r0, #0
 800124e:	d138      	bne.n	80012c2 <HAL_I2C_Mem_Read+0x1c4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001250:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001252:	b29b      	uxth	r3, r3
 8001254:	2bff      	cmp	r3, #255	; 0xff
 8001256:	d9c5      	bls.n	80011e4 <HAL_I2C_Mem_Read+0xe6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001258:	22ff      	movs	r2, #255	; 0xff
 800125a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800125c:	2300      	movs	r3, #0
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001264:	4631      	mov	r1, r6
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fddd 	bl	8000e26 <I2C_TransferConfig>
 800126c:	e7c6      	b.n	80011fc <HAL_I2C_Mem_Read+0xfe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126e:	463a      	mov	r2, r7
 8001270:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff febe 	bl	8000ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001278:	4603      	mov	r3, r0
 800127a:	b130      	cbz	r0, 800128a <HAL_I2C_Mem_Read+0x18c>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800127c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800127e:	2b04      	cmp	r3, #4
 8001280:	d001      	beq.n	8001286 <HAL_I2C_Mem_Read+0x188>
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e746      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e744      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	2120      	movs	r1, #32
 800128e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001290:	6820      	ldr	r0, [r4, #0]
 8001292:	6842      	ldr	r2, [r0, #4]
 8001294:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001298:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800129c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80012a0:	f022 0201 	bic.w	r2, r2, #1
 80012a4:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80012a6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012aa:	2200      	movs	r2, #0
 80012ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80012b0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80012b4:	e72e      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
      return  HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e72c      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e72a      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
        return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e728      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e726      	b.n	8001114 <HAL_I2C_Mem_Read+0x16>

080012c6 <HAL_I2C_EV_IRQHandler>:
{
 80012c6:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80012c8:	6803      	ldr	r3, [r0, #0]
 80012ca:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80012cc:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80012ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012d0:	b103      	cbz	r3, 80012d4 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80012d2:	4798      	blx	r3
 80012d4:	bd08      	pop	{r3, pc}

080012d6 <HAL_I2C_GetState>:
  return hi2c->State;
 80012d6:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80012da:	4770      	bx	lr

080012dc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d001      	beq.n	80012ea <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80012e6:	2002      	movs	r0, #2
 80012e8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80012ea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d020      	beq.n	8001334 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80012f2:	2301      	movs	r3, #1
 80012f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80012f8:	2324      	movs	r3, #36	; 0x24
 80012fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80012fe:	6802      	ldr	r2, [r0, #0]
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001308:	6802      	ldr	r2, [r0, #0]
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001310:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001312:	6802      	ldr	r2, [r0, #0]
 8001314:	6813      	ldr	r3, [r2, #0]
 8001316:	4319      	orrs	r1, r3
 8001318:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800131a:	6802      	ldr	r2, [r0, #0]
 800131c:	6813      	ldr	r3, [r2, #0]
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001324:	2320      	movs	r3, #32
 8001326:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800132a:	2300      	movs	r3, #0
 800132c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001330:	4618      	mov	r0, r3
 8001332:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001334:	2002      	movs	r0, #2
  }
}
 8001336:	4770      	bx	lr

08001338 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001338:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b20      	cmp	r3, #32
 8001340:	d001      	beq.n	8001346 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001342:	2002      	movs	r0, #2
 8001344:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001346:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800134a:	2b01      	cmp	r3, #1
 800134c:	d01e      	beq.n	800138c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800134e:	2301      	movs	r3, #1
 8001350:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001354:	2324      	movs	r3, #36	; 0x24
 8001356:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800135a:	6802      	ldr	r2, [r0, #0]
 800135c:	6813      	ldr	r3, [r2, #0]
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001364:	6802      	ldr	r2, [r0, #0]
 8001366:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800136c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001370:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001372:	6802      	ldr	r2, [r0, #0]
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800137c:	2320      	movs	r3, #32
 800137e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001382:	2300      	movs	r3, #0
 8001384:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001388:	4618      	mov	r0, r3
 800138a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800138c:	2002      	movs	r0, #2
  }
}
 800138e:	4770      	bx	lr

08001390 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001390:	4a02      	ldr	r2, [pc, #8]	; (800139c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001392:	6813      	ldr	r3, [r2, #0]
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4770      	bx	lr
 800139c:	40007000 	.word	0x40007000

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a6:	6803      	ldr	r3, [r0, #0]
 80013a8:	f013 0f01 	tst.w	r3, #1
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013ae:	4bb5      	ldr	r3, [pc, #724]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d046      	beq.n	8001448 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ba:	4bb2      	ldr	r3, [pc, #712]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d03b      	beq.n	800143e <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	f000 808e 	beq.w	80014ec <HAL_RCC_OscConfig+0x14c>
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 8091 	bne.w	80014f8 <HAL_RCC_OscConfig+0x158>
 80013d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013ec:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ee:	4aa5      	ldr	r2, [pc, #660]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 80013f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013f2:	f023 030f 	bic.w	r3, r3, #15
 80013f6:	68a1      	ldr	r1, [r4, #8]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fc:	6863      	ldr	r3, [r4, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8094 	beq.w	800152c <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7fe ff6c 	bl	80002e0 <HAL_GetTick>
 8001408:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b9c      	ldr	r3, [pc, #624]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 8001414:	6819      	ldr	r1, [r3, #0]
 8001416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	2201      	movs	r2, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	4219      	tst	r1, r3
 800142e:	d122      	bne.n	8001476 <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7fe ff56 	bl	80002e0 <HAL_GetTick>
 8001434:	1b40      	subs	r0, r0, r5
 8001436:	2864      	cmp	r0, #100	; 0x64
 8001438:	d9e7      	bls.n	800140a <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
 800143c:	e2ab      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800143e:	4b91      	ldr	r3, [pc, #580]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001446:	d0be      	beq.n	80013c6 <HAL_RCC_OscConfig+0x26>
 8001448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144c:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	4b8c      	ldr	r3, [pc, #560]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2201      	movs	r2, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	4219      	tst	r1, r3
 800146c:	d003      	beq.n	8001476 <HAL_RCC_OscConfig+0xd6>
 800146e:	6863      	ldr	r3, [r4, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8289 	beq.w	8001988 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	f013 0f02 	tst.w	r3, #2
 800147c:	f000 809c 	beq.w	80015b8 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001480:	4b80      	ldr	r3, [pc, #512]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f013 0f0c 	tst.w	r3, #12
 8001488:	d072      	beq.n	8001570 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800148a:	4b7e      	ldr	r3, [pc, #504]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d067      	beq.n	8001566 <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001496:	6923      	ldr	r3, [r4, #16]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80cb 	beq.w	8001634 <HAL_RCC_OscConfig+0x294>
 800149e:	2201      	movs	r2, #1
 80014a0:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7fe ff14 	bl	80002e0 <HAL_GetTick>
 80014b8:	4605      	mov	r5, r0
 80014ba:	2302      	movs	r3, #2
 80014bc:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b70      	ldr	r3, [pc, #448]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	2302      	movs	r3, #2
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2201      	movs	r2, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	4219      	tst	r1, r3
 80014da:	f040 809c 	bne.w	8001616 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014de:	f7fe feff 	bl	80002e0 <HAL_GetTick>
 80014e2:	1b40      	subs	r0, r0, r5
 80014e4:	2802      	cmp	r0, #2
 80014e6:	d9e8      	bls.n	80014ba <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
 80014ea:	e254      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	4a65      	ldr	r2, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e77a      	b.n	80013ee <HAL_RCC_OscConfig+0x4e>
 80014f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014fc:	d009      	beq.n	8001512 <HAL_RCC_OscConfig+0x172>
 80014fe:	4b61      	ldr	r3, [pc, #388]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e76d      	b.n	80013ee <HAL_RCC_OscConfig+0x4e>
 8001512:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001516:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e760      	b.n	80013ee <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800152c:	f7fe fed8 	bl	80002e0 <HAL_GetTick>
 8001530:	4605      	mov	r5, r0
 8001532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001536:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b52      	ldr	r3, [pc, #328]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 800153c:	6819      	ldr	r1, [r3, #0]
 800153e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2201      	movs	r2, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	4219      	tst	r1, r3
 8001556:	d08e      	beq.n	8001476 <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7fe fec2 	bl	80002e0 <HAL_GetTick>
 800155c:	1b40      	subs	r0, r0, r5
 800155e:	2864      	cmp	r0, #100	; 0x64
 8001560:	d9e7      	bls.n	8001532 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001562:	2003      	movs	r0, #3
 8001564:	e217      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800156e:	d192      	bne.n	8001496 <HAL_RCC_OscConfig+0xf6>
 8001570:	2302      	movs	r3, #2
 8001572:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	2302      	movs	r3, #2
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	2201      	movs	r2, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	4219      	tst	r1, r3
 8001590:	d004      	beq.n	800159c <HAL_RCC_OscConfig+0x1fc>
 8001592:	6923      	ldr	r3, [r4, #16]
 8001594:	4293      	cmp	r3, r2
 8001596:	d001      	beq.n	800159c <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8001598:	2001      	movs	r0, #1
 800159a:	e1fc      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159c:	4839      	ldr	r0, [pc, #228]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 800159e:	6803      	ldr	r3, [r0, #0]
 80015a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015a4:	6961      	ldr	r1, [r4, #20]
 80015a6:	22f8      	movs	r2, #248	; 0xf8
 80015a8:	fa92 f2a2 	rbit	r2, r2
 80015ac:	fab2 f282 	clz	r2, r2
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4313      	orrs	r3, r2
 80015b6:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	f013 0f08 	tst.w	r3, #8
 80015be:	f000 808d 	beq.w	80016dc <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c2:	69a3      	ldr	r3, [r4, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d061      	beq.n	800168c <HAL_RCC_OscConfig+0x2ec>
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ce:	fab2 f282 	clz	r2, r2
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x2e8>)
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7fe fe81 	bl	80002e0 <HAL_GetTick>
 80015de:	4605      	mov	r5, r0
 80015e0:	2302      	movs	r3, #2
 80015e2:	fa93 f2a3 	rbit	r2, r3
 80015e6:	fa93 f2a3 	rbit	r2, r3
 80015ea:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 80015f0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	2201      	movs	r2, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	4219      	tst	r1, r3
 8001606:	d169      	bne.n	80016dc <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001608:	f7fe fe6a 	bl	80002e0 <HAL_GetTick>
 800160c:	1b40      	subs	r0, r0, r5
 800160e:	2802      	cmp	r0, #2
 8001610:	d9e6      	bls.n	80015e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001612:	2003      	movs	r0, #3
 8001614:	e1bf      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	481b      	ldr	r0, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 8001618:	6803      	ldr	r3, [r0, #0]
 800161a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800161e:	6961      	ldr	r1, [r4, #20]
 8001620:	22f8      	movs	r2, #248	; 0xf8
 8001622:	fa92 f2a2 	rbit	r2, r2
 8001626:	fab2 f282 	clz	r2, r2
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	4313      	orrs	r3, r2
 8001630:	6003      	str	r3, [r0, #0]
 8001632:	e7c1      	b.n	80015b8 <HAL_RCC_OscConfig+0x218>
 8001634:	2301      	movs	r3, #1
 8001636:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001642:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800164c:	f7fe fe48 	bl	80002e0 <HAL_GetTick>
 8001650:	4605      	mov	r5, r0
 8001652:	2302      	movs	r3, #2
 8001654:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RCC_OscConfig+0x2e4>)
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	2302      	movs	r3, #2
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	2201      	movs	r2, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	4219      	tst	r1, r3
 8001672:	d0a1      	beq.n	80015b8 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7fe fe34 	bl	80002e0 <HAL_GetTick>
 8001678:	1b40      	subs	r0, r0, r5
 800167a:	2802      	cmp	r0, #2
 800167c:	d9e9      	bls.n	8001652 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 800167e:	2003      	movs	r0, #3
 8001680:	e189      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	10908120 	.word	0x10908120
 800168c:	2201      	movs	r2, #1
 800168e:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001692:	fab2 f282 	clz	r2, r2
 8001696:	4bc1      	ldr	r3, [pc, #772]	; (800199c <HAL_RCC_OscConfig+0x5fc>)
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a0:	f7fe fe1e 	bl	80002e0 <HAL_GetTick>
 80016a4:	4605      	mov	r5, r0
 80016a6:	2302      	movs	r3, #2
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4aba      	ldr	r2, [pc, #744]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 80016b6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2201      	movs	r2, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	4219      	tst	r1, r3
 80016cc:	d006      	beq.n	80016dc <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7fe fe07 	bl	80002e0 <HAL_GetTick>
 80016d2:	1b40      	subs	r0, r0, r5
 80016d4:	2802      	cmp	r0, #2
 80016d6:	d9e6      	bls.n	80016a6 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80016d8:	2003      	movs	r0, #3
 80016da:	e15c      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	f013 0f04 	tst.w	r3, #4
 80016e2:	f000 80b3 	beq.w	800184c <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4bae      	ldr	r3, [pc, #696]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80016ee:	d126      	bne.n	800173e <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	4bab      	ldr	r3, [pc, #684]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 80016f2:	69da      	ldr	r2, [r3, #28]
 80016f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016f8:	61da      	str	r2, [r3, #28]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001704:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4ba7      	ldr	r3, [pc, #668]	; (80019a4 <HAL_RCC_OscConfig+0x604>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800170e:	d018      	beq.n	8001742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	68e3      	ldr	r3, [r4, #12]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d029      	beq.n	800176a <HAL_RCC_OscConfig+0x3ca>
 8001716:	bb73      	cbnz	r3, 8001776 <HAL_RCC_OscConfig+0x3d6>
 8001718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800171c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001720:	6a1a      	ldr	r2, [r3, #32]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	621a      	str	r2, [r3, #32]
 8001728:	6a1a      	ldr	r2, [r3, #32]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001730:	68e3      	ldr	r3, [r4, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d05d      	beq.n	80017f2 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7fe fdd3 	bl	80002e0 <HAL_GetTick>
 800173a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e047      	b.n	80017ce <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2500      	movs	r5, #0
 8001740:	e7e1      	b.n	8001706 <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4a98      	ldr	r2, [pc, #608]	; (80019a4 <HAL_RCC_OscConfig+0x604>)
 8001744:	6813      	ldr	r3, [r2, #0]
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800174c:	f7fe fdc8 	bl	80002e0 <HAL_GetTick>
 8001750:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b94      	ldr	r3, [pc, #592]	; (80019a4 <HAL_RCC_OscConfig+0x604>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f413 7f80 	tst.w	r3, #256	; 0x100
 800175a:	d1d9      	bne.n	8001710 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175c:	f7fe fdc0 	bl	80002e0 <HAL_GetTick>
 8001760:	1b80      	subs	r0, r0, r6
 8001762:	2864      	cmp	r0, #100	; 0x64
 8001764:	d9f5      	bls.n	8001752 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8001766:	2003      	movs	r0, #3
 8001768:	e115      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176a:	4a8d      	ldr	r2, [pc, #564]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 800176c:	6a13      	ldr	r3, [r2, #32]
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	e7dc      	b.n	8001730 <HAL_RCC_OscConfig+0x390>
 8001776:	2b05      	cmp	r3, #5
 8001778:	d009      	beq.n	800178e <HAL_RCC_OscConfig+0x3ee>
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 800177c:	6a1a      	ldr	r2, [r3, #32]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	621a      	str	r2, [r3, #32]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	e7d0      	b.n	8001730 <HAL_RCC_OscConfig+0x390>
 800178e:	4b84      	ldr	r3, [pc, #528]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	f042 0204 	orr.w	r2, r2, #4
 8001796:	621a      	str	r2, [r3, #32]
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	621a      	str	r2, [r3, #32]
 80017a0:	e7c6      	b.n	8001730 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 80017a4:	6a19      	ldr	r1, [r3, #32]
 80017a6:	2302      	movs	r3, #2
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2201      	movs	r2, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	4219      	tst	r1, r3
 80017bc:	d145      	bne.n	800184a <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7fe fd8f 	bl	80002e0 <HAL_GetTick>
 80017c2:	1b80      	subs	r0, r0, r6
 80017c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80017c8:	4298      	cmp	r0, r3
 80017ca:	f200 80df 	bhi.w	800198c <HAL_RCC_OscConfig+0x5ec>
 80017ce:	2302      	movs	r3, #2
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	095b      	lsrs	r3, r3, #5
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d0dd      	beq.n	80017a2 <HAL_RCC_OscConfig+0x402>
 80017e6:	2302      	movs	r3, #2
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	4b6c      	ldr	r3, [pc, #432]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 80017ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017f0:	e7d9      	b.n	80017a6 <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7fe fd75 	bl	80002e0 <HAL_GetTick>
 80017f6:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x486>
 80017fa:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 80017fc:	6a19      	ldr	r1, [r3, #32]
 80017fe:	2302      	movs	r3, #2
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	2201      	movs	r2, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	4219      	tst	r1, r3
 8001814:	d019      	beq.n	800184a <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7fe fd63 	bl	80002e0 <HAL_GetTick>
 800181a:	1b80      	subs	r0, r0, r6
 800181c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001820:	4298      	cmp	r0, r3
 8001822:	f200 80b5 	bhi.w	8001990 <HAL_RCC_OscConfig+0x5f0>
 8001826:	2302      	movs	r3, #2
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	2b02      	cmp	r3, #2
 800183c:	d0dd      	beq.n	80017fa <HAL_RCC_OscConfig+0x45a>
 800183e:	2302      	movs	r3, #2
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 8001846:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001848:	e7d9      	b.n	80017fe <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800184a:	bbb5      	cbnz	r5, 80018ba <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184c:	69e3      	ldr	r3, [r4, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80a0 	beq.w	8001994 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 8001856:	6852      	ldr	r2, [r2, #4]
 8001858:	f002 020c 	and.w	r2, r2, #12
 800185c:	2a08      	cmp	r2, #8
 800185e:	f000 80a3 	beq.w	80019a8 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001862:	2b02      	cmp	r3, #2
 8001864:	d02f      	beq.n	80018c6 <HAL_RCC_OscConfig+0x526>
 8001866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800186a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001876:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7fe fd2e 	bl	80002e0 <HAL_GetTick>
 8001884:	4604      	mov	r4, r0
 8001886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2201      	movs	r2, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	4219      	tst	r1, r3
 80018aa:	d06b      	beq.n	8001984 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ac:	f7fe fd18 	bl	80002e0 <HAL_GetTick>
 80018b0:	1b00      	subs	r0, r0, r4
 80018b2:	2802      	cmp	r0, #2
 80018b4:	d9e7      	bls.n	8001886 <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 80018b6:	2003      	movs	r0, #3
 80018b8:	e06d      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ba:	4a39      	ldr	r2, [pc, #228]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 80018bc:	69d3      	ldr	r3, [r2, #28]
 80018be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c2:	61d3      	str	r3, [r2, #28]
 80018c4:	e7c2      	b.n	800184c <HAL_RCC_OscConfig+0x4ac>
 80018c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018e0:	f7fe fcfe 	bl	80002e0 <HAL_GetTick>
 80018e4:	4605      	mov	r5, r0
 80018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ea:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	2201      	movs	r2, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	4219      	tst	r1, r3
 800190a:	d006      	beq.n	800191a <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7fe fce8 	bl	80002e0 <HAL_GetTick>
 8001910:	1b40      	subs	r0, r0, r5
 8001912:	2802      	cmp	r0, #2
 8001914:	d9e7      	bls.n	80018e6 <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8001916:	2003      	movs	r0, #3
 8001918:	e03d      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191a:	4921      	ldr	r1, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 800191c:	684b      	ldr	r3, [r1, #4]
 800191e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001922:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001924:	6a20      	ldr	r0, [r4, #32]
 8001926:	4302      	orrs	r2, r0
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001930:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800193c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001946:	f7fe fccb 	bl	80002e0 <HAL_GetTick>
 800194a:	4604      	mov	r4, r0
 800194c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001950:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_OscConfig+0x600>)
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2201      	movs	r2, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	4219      	tst	r1, r3
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001972:	f7fe fcb5 	bl	80002e0 <HAL_GetTick>
 8001976:	1b00      	subs	r0, r0, r4
 8001978:	2802      	cmp	r0, #2
 800197a:	d9e7      	bls.n	800194c <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 800197c:	2003      	movs	r0, #3
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001980:	2000      	movs	r0, #0
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
 8001984:	2000      	movs	r0, #0
 8001986:	e006      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8001988:	2001      	movs	r0, #1
 800198a:	e004      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 800198c:	2003      	movs	r0, #3
 800198e:	e002      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001990:	2003      	movs	r0, #3
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8001994:	2000      	movs	r0, #0
}
 8001996:	b002      	add	sp, #8
 8001998:	bd70      	pop	{r4, r5, r6, pc}
 800199a:	bf00      	nop
 800199c:	10908120 	.word	0x10908120
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40007000 	.word	0x40007000
      return HAL_ERROR;
 80019a8:	2001      	movs	r0, #1
 80019aa:	e7f4      	b.n	8001996 <HAL_RCC_OscConfig+0x5f6>

080019ac <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x5c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019b0:	f003 020c 	and.w	r2, r3, #12
 80019b4:	2a08      	cmp	r2, #8
 80019b6:	d124      	bne.n	8001a02 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019b8:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80019bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80019c0:	fa92 f2a2 	rbit	r2, r2
 80019c4:	fab2 f282 	clz	r2, r2
 80019c8:	fa21 f202 	lsr.w	r2, r1, r2
 80019cc:	490f      	ldr	r1, [pc, #60]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x60>)
 80019ce:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x5c>)
 80019d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019d4:	f002 020f 	and.w	r2, r2, #15
 80019d8:	210f      	movs	r1, #15
 80019da:	fa91 f1a1 	rbit	r1, r1
 80019de:	fab1 f181 	clz	r1, r1
 80019e2:	40ca      	lsrs	r2, r1
 80019e4:	490a      	ldr	r1, [pc, #40]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x64>)
 80019e6:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80019ec:	d103      	bne.n	80019f6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x68>)
 80019f0:	fb03 f000 	mul.w	r0, r3, r0
 80019f4:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x6c>)
 80019f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019fc:	fb03 f000 	mul.w	r0, r3, r0
 8001a00:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08005918 	.word	0x08005918
 8001a10:	08005928 	.word	0x08005928
 8001a14:	003d0900 	.word	0x003d0900
 8001a18:	007a1200 	.word	0x007a1200

08001a1c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a1c:	4b70      	ldr	r3, [pc, #448]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	428b      	cmp	r3, r1
 8001a26:	d20c      	bcs.n	8001a42 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a28:	4a6d      	ldr	r2, [pc, #436]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	f023 0307 	bic.w	r3, r3, #7
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a34:	6813      	ldr	r3, [r2, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	4299      	cmp	r1, r3
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
 8001a40:	4770      	bx	lr
{
 8001a42:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	6803      	ldr	r3, [r0, #0]
 8001a46:	f013 0f02 	tst.w	r3, #2
 8001a4a:	d006      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	6853      	ldr	r3, [r2, #4]
 8001a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a54:	6884      	ldr	r4, [r0, #8]
 8001a56:	4323      	orrs	r3, r4
 8001a58:	6053      	str	r3, [r2, #4]
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	6803      	ldr	r3, [r0, #0]
 8001a60:	f013 0f01 	tst.w	r3, #1
 8001a64:	d07a      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	6843      	ldr	r3, [r0, #4]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d02f      	beq.n	8001acc <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d042      	beq.n	8001af6 <HAL_RCC_ClockConfig+0xda>
 8001a70:	2202      	movs	r2, #2
 8001a72:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4a5b      	ldr	r2, [pc, #364]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	6810      	ldr	r0, [r2, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	fa92 f2a2 	rbit	r2, r2
 8001a80:	fab2 f282 	clz	r2, r2
 8001a84:	f002 021f 	and.w	r2, r2, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	4210      	tst	r0, r2
 8001a90:	f000 80a4 	beq.w	8001bdc <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a94:	4953      	ldr	r1, [pc, #332]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	684a      	ldr	r2, [r1, #4]
 8001a98:	f022 0203 	bic.w	r2, r2, #3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001aa0:	f7fe fc1e 	bl	80002e0 <HAL_GetTick>
 8001aa4:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	6863      	ldr	r3, [r4, #4]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d039      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d046      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab0:	4b4c      	ldr	r3, [pc, #304]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f013 0f0c 	tst.w	r3, #12
 8001ab8:	d050      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7fe fc11 	bl	80002e0 <HAL_GetTick>
 8001abe:	1b80      	subs	r0, r0, r6
 8001ac0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ac4:	4298      	cmp	r0, r3
 8001ac6:	d9f3      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001ac8:	2003      	movs	r0, #3
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
 8001acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad4:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	6810      	ldr	r0, [r2, #0]
 8001ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001adc:	fa92 f2a2 	rbit	r2, r2
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	f002 021f 	and.w	r2, r2, #31
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	4210      	tst	r0, r2
 8001af0:	d1d0      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001af2:	2001      	movs	r0, #1
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
 8001af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afa:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4a39      	ldr	r2, [pc, #228]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	6810      	ldr	r0, [r2, #0]
 8001b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b06:	fa92 f2a2 	rbit	r2, r2
 8001b0a:	fab2 f282 	clz	r2, r2
 8001b0e:	f002 021f 	and.w	r2, r2, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f202 	lsl.w	r2, r1, r2
 8001b18:	4210      	tst	r0, r2
 8001b1a:	d1bb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d017      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7fe fbd8 	bl	80002e0 <HAL_GetTick>
 8001b30:	1b80      	subs	r0, r0, r6
 8001b32:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b36:	4298      	cmp	r0, r3
 8001b38:	d9f2      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d008      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4a:	f7fe fbc9 	bl	80002e0 <HAL_GetTick>
 8001b4e:	1b80      	subs	r0, r0, r6
 8001b50:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b54:	4298      	cmp	r0, r3
 8001b56:	d9f2      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8001b58:	2003      	movs	r0, #3
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	429d      	cmp	r5, r3
 8001b66:	d20c      	bcs.n	8001b82 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	6813      	ldr	r3, [r2, #0]
 8001b6c:	f023 0307 	bic.w	r3, r3, #7
 8001b70:	432b      	orrs	r3, r5
 8001b72:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b74:	6813      	ldr	r3, [r2, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	429d      	cmp	r5, r3
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
}
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	f013 0f04 	tst.w	r3, #4
 8001b88:	d006      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8a:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	6853      	ldr	r3, [r2, #4]
 8001b8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b92:	68e1      	ldr	r1, [r4, #12]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f013 0f08 	tst.w	r3, #8
 8001b9e:	d007      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba0:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	6853      	ldr	r3, [r2, #4]
 8001ba4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ba8:	6921      	ldr	r1, [r4, #16]
 8001baa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bae:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bb0:	f7ff fefc 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bbc:	22f0      	movs	r2, #240	; 0xf0
 8001bbe:	fa92 f2a2 	rbit	r2, r2
 8001bc2:	fab2 f282 	clz	r2, r2
 8001bc6:	40d3      	lsrs	r3, r2
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	40d8      	lsrs	r0, r3
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <HAL_RCC_ClockConfig+0x1d0>)
 8001bd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7fe fb54 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 8001bd8:	2000      	movs	r0, #0
 8001bda:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	08005968 	.word	0x08005968
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001bf0:	4b01      	ldr	r3, [pc, #4]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001bfe:	f7ff fff7 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c0e:	fa92 f2a2 	rbit	r2, r2
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	40d3      	lsrs	r3, r2
 8001c18:	4a02      	ldr	r2, [pc, #8]	; (8001c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001c1c:	40d8      	lsrs	r0, r3
 8001c1e:	bd08      	pop	{r3, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08005978 	.word	0x08005978

08001c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c28:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001c2a:	f7ff ffe1 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001c36:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c3a:	fa92 f2a2 	rbit	r2, r2
 8001c3e:	fab2 f282 	clz	r2, r2
 8001c42:	40d3      	lsrs	r3, r2
 8001c44:	4a02      	ldr	r2, [pc, #8]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001c48:	40d8      	lsrs	r0, r3
 8001c4a:	bd08      	pop	{r3, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08005978 	.word	0x08005978

08001c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	b083      	sub	sp, #12
 8001c58:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c5a:	6803      	ldr	r3, [r0, #0]
 8001c5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c60:	d044      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c6a:	d179      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c74:	61da      	str	r2, [r3, #28]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c80:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c8a:	d06b      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c90:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c94:	d021      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001c96:	6862      	ldr	r2, [r4, #4]
 8001c98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d01c      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ca0:	4854      	ldr	r0, [pc, #336]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001ca2:	6a01      	ldr	r1, [r0, #32]
 8001ca4:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cac:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	4f51      	ldr	r7, [pc, #324]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001cb6:	443a      	add	r2, r7
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	f04f 0e01 	mov.w	lr, #1
 8001cbe:	f8c2 e000 	str.w	lr, [r2]
 8001cc2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	443b      	add	r3, r7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cd2:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cd4:	f011 0f01 	tst.w	r1, #1
 8001cd8:	d158      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001cda:	4a46      	ldr	r2, [pc, #280]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001cdc:	6a13      	ldr	r3, [r2, #32]
 8001cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce2:	6861      	ldr	r1, [r4, #4]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d17a      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	f013 0f01 	tst.w	r3, #1
 8001cf2:	d006      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cf4:	4a3f      	ldr	r2, [pc, #252]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001cf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001cf8:	f023 0303 	bic.w	r3, r3, #3
 8001cfc:	68a1      	ldr	r1, [r4, #8]
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	f013 0f20 	tst.w	r3, #32
 8001d08:	d006      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d0a:	4a3a      	ldr	r2, [pc, #232]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001d0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d0e:	f023 0310 	bic.w	r3, r3, #16
 8001d12:	68e1      	ldr	r1, [r4, #12]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d1e:	d006      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d20:	4a34      	ldr	r2, [pc, #208]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001d22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d24:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001d28:	6921      	ldr	r1, [r4, #16]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001d34:	d006      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001d38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d3e:	6961      	ldr	r1, [r4, #20]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001d4a:	d051      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001d4c:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001d4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d54:	69a1      	ldr	r1, [r4, #24]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001d5a:	2000      	movs	r0, #0
}
 8001d5c:	b003      	add	sp, #12
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001d60:	2500      	movs	r5, #0
 8001d62:	e78e      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d64:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fab7 	bl	80002e0 <HAL_GetTick>
 8001d72:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d7c:	d186      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7e:	f7fe faaf 	bl	80002e0 <HAL_GetTick>
 8001d82:	1b80      	subs	r0, r0, r6
 8001d84:	2864      	cmp	r0, #100	; 0x64
 8001d86:	d9f5      	bls.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8001d88:	2003      	movs	r0, #3
 8001d8a:	e7e7      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8001d8c:	f7fe faa8 	bl	80002e0 <HAL_GetTick>
 8001d90:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d92:	e014      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001d96:	6a19      	ldr	r1, [r3, #32]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2201      	movs	r2, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	4219      	tst	r1, r3
 8001dae:	d194      	bne.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe fa96 	bl	80002e0 <HAL_GetTick>
 8001db4:	1b80      	subs	r0, r0, r6
 8001db6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	d816      	bhi.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d0de      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001dde:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001de0:	e7da      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de2:	69d3      	ldr	r3, [r2, #28]
 8001de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	e77f      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e7b5      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8001df0:	2000      	movs	r0, #0
 8001df2:	e7b3      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	10908100 	.word	0x10908100

08001e00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001e04:	6802      	ldr	r2, [r0, #0]
 8001e06:	68d3      	ldr	r3, [r2, #12]
 8001e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e0c:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 8001e0e:	f7fe fa67 	bl	80002e0 <HAL_GetTick>
 8001e12:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f013 0f20 	tst.w	r3, #32
 8001e1c:	d107      	bne.n	8001e2e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001e1e:	f7fe fa5f 	bl	80002e0 <HAL_GetTick>
 8001e22:	1b40      	subs	r0, r0, r5
 8001e24:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e28:	d9f4      	bls.n	8001e14 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8001e2a:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8001e2c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001e2e:	2000      	movs	r0, #0
 8001e30:	bd38      	pop	{r3, r4, r5, pc}

08001e32 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001e32:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e34:	6803      	ldr	r3, [r0, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e3c:	d001      	beq.n	8001e42 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001e3e:	2000      	movs	r0, #0
 8001e40:	bd38      	pop	{r3, r4, r5, pc}
 8001e42:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001e4a:	f7fe fa49 	bl	80002e0 <HAL_GetTick>
 8001e4e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001e58:	d107      	bne.n	8001e6a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001e5a:	f7fe fa41 	bl	80002e0 <HAL_GetTick>
 8001e5e:	1b40      	subs	r0, r0, r5
 8001e60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e64:	d9f4      	bls.n	8001e50 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
}
 8001e68:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	bd38      	pop	{r3, r4, r5, pc}

08001e6e <HAL_RTC_Init>:
{
 8001e6e:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d05c      	beq.n	8001f2e <HAL_RTC_Init+0xc0>
 8001e74:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e76:	7f43      	ldrb	r3, [r0, #29]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d041      	beq.n	8001f00 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	22ca      	movs	r2, #202	; 0xca
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	2253      	movs	r2, #83	; 0x53
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff ffd0 	bl	8001e32 <RTC_EnterInitMode>
 8001e92:	4605      	mov	r5, r0
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d137      	bne.n	8001f08 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e98:	6822      	ldr	r2, [r4, #0]
 8001e9a:	6893      	ldr	r3, [r2, #8]
 8001e9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ea6:	6821      	ldr	r1, [r4, #0]
 8001ea8:	688a      	ldr	r2, [r1, #8]
 8001eaa:	6863      	ldr	r3, [r4, #4]
 8001eac:	6920      	ldr	r0, [r4, #16]
 8001eae:	4303      	orrs	r3, r0
 8001eb0:	6960      	ldr	r0, [r4, #20]
 8001eb2:	4303      	orrs	r3, r0
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	68e2      	ldr	r2, [r4, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	6913      	ldr	r3, [r2, #16]
 8001ec2:	68a1      	ldr	r1, [r4, #8]
 8001ec4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001ec8:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	68d3      	ldr	r3, [r2, #12]
 8001ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ed2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f013 0f20 	tst.w	r3, #32
 8001edc:	d01b      	beq.n	8001f16 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001ede:	6822      	ldr	r2, [r4, #0]
 8001ee0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001ee8:	6822      	ldr	r2, [r4, #0]
 8001eea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001eec:	69a1      	ldr	r1, [r4, #24]
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	22ff      	movs	r2, #255	; 0xff
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	7763      	strb	r3, [r4, #29]
}
 8001efc:	4628      	mov	r0, r5
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001f00:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001f02:	f002 f981 	bl	8004208 <HAL_RTC_MspInit>
 8001f06:	e7b9      	b.n	8001e7c <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8001f12:	2501      	movs	r5, #1
 8001f14:	e7f2      	b.n	8001efc <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f16:	4620      	mov	r0, r4
 8001f18:	f7ff ff72 	bl	8001e00 <HAL_RTC_WaitForSynchro>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d0de      	beq.n	8001ede <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	22ff      	movs	r2, #255	; 0xff
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f26:	2304      	movs	r3, #4
 8001f28:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8001f2a:	2501      	movs	r5, #1
 8001f2c:	e7e6      	b.n	8001efc <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8001f2e:	2501      	movs	r5, #1
 8001f30:	e7e4      	b.n	8001efc <HAL_RTC_Init+0x8e>

08001f32 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001f32:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001f34:	e002      	b.n	8001f3c <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8001f36:	3301      	adds	r3, #1
    Value -= 10U;
 8001f38:	380a      	subs	r0, #10
 8001f3a:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8001f3c:	2809      	cmp	r0, #9
 8001f3e:	d8fa      	bhi.n	8001f36 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	b2db      	uxtb	r3, r3
}
 8001f44:	4318      	orrs	r0, r3
 8001f46:	4770      	bx	lr

08001f48 <HAL_RTC_SetTime>:
{
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001f4a:	7f03      	ldrb	r3, [r0, #28]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d077      	beq.n	8002040 <HAL_RTC_SetTime+0xf8>
 8001f50:	460e      	mov	r6, r1
 8001f52:	4604      	mov	r4, r0
 8001f54:	2301      	movs	r3, #1
 8001f56:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8001f5c:	2a00      	cmp	r2, #0
 8001f5e:	d146      	bne.n	8001fee <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f60:	6803      	ldr	r3, [r0, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f68:	d101      	bne.n	8001f6e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f6e:	7830      	ldrb	r0, [r6, #0]
 8001f70:	f7ff ffdf 	bl	8001f32 <RTC_ByteToBcd2>
 8001f74:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f76:	7870      	ldrb	r0, [r6, #1]
 8001f78:	f7ff ffdb 	bl	8001f32 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f7c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001f80:	78b0      	ldrb	r0, [r6, #2]
 8001f82:	f7ff ffd6 	bl	8001f32 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f86:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001f88:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f8a:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	22ca      	movs	r2, #202	; 0xca
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	2253      	movs	r2, #83	; 0x53
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff ff49 	bl	8001e32 <RTC_EnterInitMode>
 8001fa0:	4607      	mov	r7, r0
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d135      	bne.n	8002012 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8001fac:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8001fb0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8001fb2:	6822      	ldr	r2, [r4, #0]
 8001fb4:	6893      	ldr	r3, [r2, #8]
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fbc:	6821      	ldr	r1, [r4, #0]
 8001fbe:	688b      	ldr	r3, [r1, #8]
 8001fc0:	68f2      	ldr	r2, [r6, #12]
 8001fc2:	6930      	ldr	r0, [r6, #16]
 8001fc4:	4302      	orrs	r2, r0
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	68d3      	ldr	r3, [r2, #12]
 8001fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f013 0f20 	tst.w	r3, #32
 8001fdc:	d022      	beq.n	8002024 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	22ff      	movs	r2, #255	; 0xff
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8001fe8:	2300      	movs	r3, #0
 8001fea:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8001fec:	e029      	b.n	8002042 <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fee:	6803      	ldr	r3, [r0, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ff6:	d101      	bne.n	8001ffc <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ffc:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001ffe:	7870      	ldrb	r0, [r6, #1]
 8002000:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002002:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002006:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002008:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 800200a:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800200c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002010:	e7bd      	b.n	8001f8e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002018:	2304      	movs	r3, #4
 800201a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800201c:	2300      	movs	r3, #0
 800201e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002020:	2701      	movs	r7, #1
 8002022:	e00e      	b.n	8002042 <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff feeb 	bl	8001e00 <HAL_RTC_WaitForSynchro>
 800202a:	2800      	cmp	r0, #0
 800202c:	d0d7      	beq.n	8001fde <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	22ff      	movs	r2, #255	; 0xff
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002034:	2304      	movs	r3, #4
 8002036:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002038:	2300      	movs	r3, #0
 800203a:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800203c:	2701      	movs	r7, #1
 800203e:	e000      	b.n	8002042 <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002040:	2702      	movs	r7, #2
}
 8002042:	4638      	mov	r0, r7
 8002044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002046 <HAL_RTC_SetDate>:
{
 8002046:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002048:	7f03      	ldrb	r3, [r0, #28]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d065      	beq.n	800211a <HAL_RTC_SetDate+0xd4>
 800204e:	2301      	movs	r3, #1
 8002050:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002052:	2302      	movs	r3, #2
 8002054:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002056:	b93a      	cbnz	r2, 8002068 <HAL_RTC_SetDate+0x22>
 8002058:	784b      	ldrb	r3, [r1, #1]
 800205a:	f013 0f10 	tst.w	r3, #16
 800205e:	d003      	beq.n	8002068 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002060:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002064:	330a      	adds	r3, #10
 8002066:	704b      	strb	r3, [r1, #1]
 8002068:	460e      	mov	r6, r1
 800206a:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 800206c:	2a00      	cmp	r2, #0
 800206e:	d132      	bne.n	80020d6 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002070:	78c8      	ldrb	r0, [r1, #3]
 8002072:	f7ff ff5e 	bl	8001f32 <RTC_ByteToBcd2>
 8002076:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002078:	7870      	ldrb	r0, [r6, #1]
 800207a:	f7ff ff5a 	bl	8001f32 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800207e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002082:	78b0      	ldrb	r0, [r6, #2]
 8002084:	f7ff ff55 	bl	8001f32 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002088:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 800208a:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800208c:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	22ca      	movs	r2, #202	; 0xca
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	2253      	movs	r2, #83	; 0x53
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800209c:	4620      	mov	r0, r4
 800209e:	f7ff fec8 	bl	8001e32 <RTC_EnterInitMode>
 80020a2:	4606      	mov	r6, r0
 80020a4:	bb10      	cbnz	r0, 80020ec <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80020ac:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80020b0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80020b2:	6822      	ldr	r2, [r4, #0]
 80020b4:	68d3      	ldr	r3, [r2, #12]
 80020b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ba:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f013 0f20 	tst.w	r3, #32
 80020c4:	d01b      	beq.n	80020fe <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	22ff      	movs	r2, #255	; 0xff
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80020cc:	2301      	movs	r3, #1
 80020ce:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80020d0:	2300      	movs	r3, #0
 80020d2:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80020d4:	e022      	b.n	800211c <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80020d6:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80020d8:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80020da:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80020dc:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80020de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80020e2:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80020e4:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80020e6:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80020ea:	e7d1      	b.n	8002090 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020f2:	2304      	movs	r3, #4
 80020f4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80020f6:	2300      	movs	r3, #0
 80020f8:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80020fa:	2601      	movs	r6, #1
 80020fc:	e00e      	b.n	800211c <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020fe:	4620      	mov	r0, r4
 8002100:	f7ff fe7e 	bl	8001e00 <HAL_RTC_WaitForSynchro>
 8002104:	2800      	cmp	r0, #0
 8002106:	d0de      	beq.n	80020c6 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	22ff      	movs	r2, #255	; 0xff
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800210e:	2304      	movs	r3, #4
 8002110:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002112:	2300      	movs	r3, #0
 8002114:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002116:	2601      	movs	r6, #1
 8002118:	e000      	b.n	800211c <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 800211a:	2602      	movs	r6, #2
}
 800211c:	4630      	mov	r0, r6
 800211e:	bd70      	pop	{r4, r5, r6, pc}

08002120 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002120:	0903      	lsrs	r3, r0, #4
 8002122:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002126:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002128:	f000 000f 	and.w	r0, r0, #15
 800212c:	4410      	add	r0, r2
}
 800212e:	b2c0      	uxtb	r0, r0
 8002130:	4770      	bx	lr

08002132 <HAL_RTC_GetTime>:
{
 8002132:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002134:	6803      	ldr	r3, [r0, #0]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800213a:	6803      	ldr	r3, [r0, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002142:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002144:	6803      	ldr	r3, [r0, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800214c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002150:	0c1d      	lsrs	r5, r3, #16
 8002152:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002156:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002158:	f3c3 2606 	ubfx	r6, r3, #8, #7
 800215c:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800215e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002162:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002164:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002168:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800216a:	b95a      	cbnz	r2, 8002184 <HAL_RTC_GetTime+0x52>
 800216c:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800216e:	f7ff ffd7 	bl	8002120 <RTC_Bcd2ToByte>
 8002172:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002174:	4630      	mov	r0, r6
 8002176:	f7ff ffd3 	bl	8002120 <RTC_Bcd2ToByte>
 800217a:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff ffcf 	bl	8002120 <RTC_Bcd2ToByte>
 8002182:	70a8      	strb	r0, [r5, #2]
}
 8002184:	2000      	movs	r0, #0
 8002186:	bd70      	pop	{r4, r5, r6, pc}

08002188 <HAL_RTC_GetDate>:
{
 8002188:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 800218a:	6803      	ldr	r3, [r0, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002192:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002196:	0c18      	lsrs	r0, r3, #16
 8002198:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800219a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800219e:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80021a0:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80021a4:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80021a6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80021aa:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80021ac:	b95a      	cbnz	r2, 80021c6 <HAL_RTC_GetDate+0x3e>
 80021ae:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80021b0:	f7ff ffb6 	bl	8002120 <RTC_Bcd2ToByte>
 80021b4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80021b6:	4630      	mov	r0, r6
 80021b8:	f7ff ffb2 	bl	8002120 <RTC_Bcd2ToByte>
 80021bc:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80021be:	4628      	mov	r0, r5
 80021c0:	f7ff ffae 	bl	8002120 <RTC_Bcd2ToByte>
 80021c4:	70a0      	strb	r0, [r4, #2]
}
 80021c6:	2000      	movs	r0, #0
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080021cc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021ce:	7f03      	ldrb	r3, [r0, #28]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d06d      	beq.n	80022b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 80021d4:	4615      	mov	r5, r2
 80021d6:	460e      	mov	r6, r1
 80021d8:	4604      	mov	r4, r0
 80021da:	2301      	movs	r3, #1
 80021dc:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021e2:	6803      	ldr	r3, [r0, #0]
 80021e4:	22ca      	movs	r2, #202	; 0xca
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
 80021e8:	6803      	ldr	r3, [r0, #0]
 80021ea:	2253      	movs	r2, #83	; 0x53
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80021f6:	d015      	beq.n	8002224 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 80021f8:	f7fe f872 	bl	80002e0 <HAL_GetTick>
 80021fc:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f013 0f04 	tst.w	r3, #4
 8002206:	d00d      	beq.n	8002224 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002208:	f7fe f86a 	bl	80002e0 <HAL_GetTick>
 800220c:	1bc0      	subs	r0, r0, r7
 800220e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002212:	d9f4      	bls.n	80021fe <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	22ff      	movs	r2, #255	; 0xff
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800221a:	2003      	movs	r0, #3
 800221c:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 800221e:	2300      	movs	r3, #0
 8002220:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 8002222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	6893      	ldr	r3, [r2, #8]
 8002228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800222c:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800222e:	6822      	ldr	r2, [r4, #0]
 8002230:	68d3      	ldr	r3, [r2, #12]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002238:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800223a:	f7fe f851 	bl	80002e0 <HAL_GetTick>
 800223e:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	68d8      	ldr	r0, [r3, #12]
 8002244:	f010 0f04 	tst.w	r0, #4
 8002248:	d10d      	bne.n	8002266 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800224a:	f7fe f849 	bl	80002e0 <HAL_GetTick>
 800224e:	1bc0      	subs	r0, r0, r7
 8002250:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002254:	d9f4      	bls.n	8002240 <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800225c:	2003      	movs	r0, #3
 800225e:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002260:	2300      	movs	r3, #0
 8002262:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 8002264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002266:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002268:	6822      	ldr	r2, [r4, #0]
 800226a:	6893      	ldr	r3, [r2, #8]
 800226c:	f023 0307 	bic.w	r3, r3, #7
 8002270:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	6893      	ldr	r3, [r2, #8]
 8002276:	431d      	orrs	r5, r3
 8002278:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002282:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800228a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	6893      	ldr	r3, [r2, #8]
 8002290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002294:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002296:	6822      	ldr	r2, [r4, #0]
 8002298:	6893      	ldr	r3, [r2, #8]
 800229a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80022a6:	2301      	movs	r3, #1
 80022a8:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022aa:	2000      	movs	r0, #0
 80022ac:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 80022ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 80022b0:	2002      	movs	r0, #2
}
 80022b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 80022bc:	6803      	ldr	r3, [r0, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022c4:	d106      	bne.n	80022d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80022c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80022cc:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80022ce:	2301      	movs	r3, #1
 80022d0:	7763      	strb	r3, [r4, #29]
 80022d2:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80022d4:	f000 fe06 	bl	8002ee4 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80022d8:	6822      	ldr	r2, [r4, #0]
 80022da:	68d3      	ldr	r3, [r2, #12]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80022e2:	60d3      	str	r3, [r2, #12]
 80022e4:	e7ef      	b.n	80022c6 <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 80022e6:	bf00      	nop
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80022ec:	6803      	ldr	r3, [r0, #0]
 80022ee:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80022f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80022f4:	4770      	bx	lr

080022f6 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80022f6:	6803      	ldr	r3, [r0, #0]
 80022f8:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80022fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80022fe:	4770      	bx	lr

08002300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002300:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002302:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002304:	6a04      	ldr	r4, [r0, #32]
 8002306:	f024 0401 	bic.w	r4, r4, #1
 800230a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800230c:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800230e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002312:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002316:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800231a:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800231c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800231e:	6203      	str	r3, [r0, #32]
}
 8002320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002324:	4770      	bx	lr

08002326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002326:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002328:	6a03      	ldr	r3, [r0, #32]
 800232a:	f023 0310 	bic.w	r3, r3, #16
 800232e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002330:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002332:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002334:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002338:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800233c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002340:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002344:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002346:	6203      	str	r3, [r0, #32]
}
 8002348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800234c:	4770      	bx	lr

0800234e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800234e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002354:	f041 0107 	orr.w	r1, r1, #7
 8002358:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800235a:	6083      	str	r3, [r0, #8]
 800235c:	4770      	bx	lr

0800235e <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800235e:	6802      	ldr	r2, [r0, #0]
 8002360:	68d3      	ldr	r3, [r2, #12]
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002368:	6802      	ldr	r2, [r0, #0]
 800236a:	6813      	ldr	r3, [r2, #0]
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6013      	str	r3, [r2, #0]
}
 8002372:	2000      	movs	r0, #0
 8002374:	4770      	bx	lr

08002376 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8002376:	4770      	bx	lr

08002378 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002378:	4770      	bx	lr

0800237a <HAL_TIM_TriggerCallback>:
{
 800237a:	4770      	bx	lr

0800237c <HAL_TIM_IRQHandler>:
{
 800237c:	b510      	push	{r4, lr}
 800237e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002380:	6803      	ldr	r3, [r0, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	f012 0f02 	tst.w	r2, #2
 8002388:	d011      	beq.n	80023ae <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	f012 0f02 	tst.w	r2, #2
 8002390:	d00d      	beq.n	80023ae <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002392:	f06f 0202 	mvn.w	r2, #2
 8002396:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002398:	2301      	movs	r3, #1
 800239a:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800239c:	6803      	ldr	r3, [r0, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f013 0f03 	tst.w	r3, #3
 80023a4:	d079      	beq.n	800249a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	f000 fd97 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	2300      	movs	r3, #0
 80023ac:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	f012 0f04 	tst.w	r2, #4
 80023b6:	d012      	beq.n	80023de <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	f012 0f04 	tst.w	r2, #4
 80023be:	d00e      	beq.n	80023de <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023c0:	f06f 0204 	mvn.w	r2, #4
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c6:	2302      	movs	r3, #2
 80023c8:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f413 7f40 	tst.w	r3, #768	; 0x300
 80023d2:	d068      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80023d4:	4620      	mov	r0, r4
 80023d6:	f000 fd7f 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	2300      	movs	r3, #0
 80023dc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	f012 0f08 	tst.w	r2, #8
 80023e6:	d012      	beq.n	800240e <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	f012 0f08 	tst.w	r2, #8
 80023ee:	d00e      	beq.n	800240e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023f0:	f06f 0208 	mvn.w	r2, #8
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f6:	2304      	movs	r3, #4
 80023f8:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f013 0f03 	tst.w	r3, #3
 8002402:	d057      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002404:	4620      	mov	r0, r4
 8002406:	f000 fd67 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	2300      	movs	r3, #0
 800240c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	f012 0f10 	tst.w	r2, #16
 8002416:	d012      	beq.n	800243e <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	f012 0f10 	tst.w	r2, #16
 800241e:	d00e      	beq.n	800243e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002420:	f06f 0210 	mvn.w	r2, #16
 8002424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002426:	2308      	movs	r3, #8
 8002428:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002432:	d046      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002434:	4620      	mov	r0, r4
 8002436:	f000 fd4f 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	2300      	movs	r3, #0
 800243c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	f012 0f01 	tst.w	r2, #1
 8002446:	d003      	beq.n	8002450 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	f012 0f01 	tst.w	r2, #1
 800244e:	d13f      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002460:	d13d      	bne.n	80024de <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	f412 7f80 	tst.w	r2, #256	; 0x100
 800246a:	d003      	beq.n	8002474 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002472:	d13b      	bne.n	80024ec <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	f012 0f40 	tst.w	r2, #64	; 0x40
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002484:	d139      	bne.n	80024fa <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	f012 0f20 	tst.w	r2, #32
 800248e:	d003      	beq.n	8002498 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	f012 0f20 	tst.w	r2, #32
 8002496:	d137      	bne.n	8002508 <HAL_TIM_IRQHandler+0x18c>
 8002498:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	f7ff ff6c 	bl	8002376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff ff6a 	bl	8002378 <HAL_TIM_PWM_PulseFinishedCallback>
 80024a4:	e781      	b.n	80023aa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff ff65 	bl	8002376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff ff63 	bl	8002378 <HAL_TIM_PWM_PulseFinishedCallback>
 80024b2:	e792      	b.n	80023da <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff ff5e 	bl	8002376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff ff5c 	bl	8002378 <HAL_TIM_PWM_PulseFinishedCallback>
 80024c0:	e7a3      	b.n	800240a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7ff ff57 	bl	8002376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7ff ff55 	bl	8002378 <HAL_TIM_PWM_PulseFinishedCallback>
 80024ce:	e7b4      	b.n	800243a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024d0:	f06f 0201 	mvn.w	r2, #1
 80024d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80024d6:	4620      	mov	r0, r4
 80024d8:	f001 f90e 	bl	80036f8 <HAL_TIM_PeriodElapsedCallback>
 80024dc:	e7b8      	b.n	8002450 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80024e4:	4620      	mov	r0, r4
 80024e6:	f000 f93c 	bl	8002762 <HAL_TIMEx_BreakCallback>
 80024ea:	e7ba      	b.n	8002462 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80024f2:	4620      	mov	r0, r4
 80024f4:	f000 f936 	bl	8002764 <HAL_TIMEx_Break2Callback>
 80024f8:	e7bc      	b.n	8002474 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff ff3a 	bl	800237a <HAL_TIM_TriggerCallback>
 8002506:	e7be      	b.n	8002486 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002508:	f06f 0220 	mvn.w	r2, #32
 800250c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800250e:	4620      	mov	r0, r4
 8002510:	f000 f926 	bl	8002760 <HAL_TIMEx_CommutationCallback>
}
 8002514:	e7c0      	b.n	8002498 <HAL_TIM_IRQHandler+0x11c>
	...

08002518 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002518:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251a:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <TIM_Base_SetConfig+0x90>)
 800251c:	4290      	cmp	r0, r2
 800251e:	d03d      	beq.n	800259c <TIM_Base_SetConfig+0x84>
 8002520:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002524:	d03a      	beq.n	800259c <TIM_Base_SetConfig+0x84>
 8002526:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800252a:	4290      	cmp	r0, r2
 800252c:	d036      	beq.n	800259c <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <TIM_Base_SetConfig+0x90>)
 8002530:	4290      	cmp	r0, r2
 8002532:	d012      	beq.n	800255a <TIM_Base_SetConfig+0x42>
 8002534:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002538:	d00f      	beq.n	800255a <TIM_Base_SetConfig+0x42>
 800253a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800253e:	4290      	cmp	r0, r2
 8002540:	d00b      	beq.n	800255a <TIM_Base_SetConfig+0x42>
 8002542:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8002546:	4290      	cmp	r0, r2
 8002548:	d007      	beq.n	800255a <TIM_Base_SetConfig+0x42>
 800254a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800254e:	4290      	cmp	r0, r2
 8002550:	d003      	beq.n	800255a <TIM_Base_SetConfig+0x42>
 8002552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002556:	4290      	cmp	r0, r2
 8002558:	d103      	bne.n	8002562 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800255a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	68ca      	ldr	r2, [r1, #12]
 8002560:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002566:	694a      	ldr	r2, [r1, #20]
 8002568:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800256a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002570:	680b      	ldr	r3, [r1, #0]
 8002572:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <TIM_Base_SetConfig+0x90>)
 8002576:	4298      	cmp	r0, r3
 8002578:	d00b      	beq.n	8002592 <TIM_Base_SetConfig+0x7a>
 800257a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800257e:	4298      	cmp	r0, r3
 8002580:	d007      	beq.n	8002592 <TIM_Base_SetConfig+0x7a>
 8002582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002586:	4298      	cmp	r0, r3
 8002588:	d003      	beq.n	8002592 <TIM_Base_SetConfig+0x7a>
 800258a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800258e:	4298      	cmp	r0, r3
 8002590:	d101      	bne.n	8002596 <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002592:	690b      	ldr	r3, [r1, #16]
 8002594:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002596:	2301      	movs	r3, #1
 8002598:	6143      	str	r3, [r0, #20]
 800259a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025a0:	684a      	ldr	r2, [r1, #4]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	e7c3      	b.n	800252e <TIM_Base_SetConfig+0x16>
 80025a6:	bf00      	nop
 80025a8:	40012c00 	.word	0x40012c00

080025ac <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80025ac:	b1a8      	cbz	r0, 80025da <HAL_TIM_Base_Init+0x2e>
{ 
 80025ae:	b510      	push	{r4, lr}
 80025b0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80025b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025b6:	b15b      	cbz	r3, 80025d0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80025b8:	2302      	movs	r3, #2
 80025ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80025be:	1d21      	adds	r1, r4, #4
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	f7ff ffa9 	bl	8002518 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80025cc:	2000      	movs	r0, #0
 80025ce:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80025d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80025d4:	f001 fe36 	bl	8004244 <HAL_TIM_Base_MspInit>
 80025d8:	e7ee      	b.n	80025b8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80025da:	2001      	movs	r0, #1
 80025dc:	4770      	bx	lr

080025de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025de:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80025e0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80025ea:	4319      	orrs	r1, r3
 80025ec:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ee:	6084      	str	r4, [r0, #8]
} 
 80025f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80025f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	f000 8082 	beq.w	8002706 <HAL_TIM_ConfigClockSource+0x10e>
{
 8002602:	b510      	push	{r4, lr}
 8002604:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002606:	2301      	movs	r3, #1
 8002608:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	2302      	movs	r3, #2
 800260e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002612:	6802      	ldr	r2, [r0, #0]
 8002614:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_TIM_ConfigClockSource+0x114>)
 8002618:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800261a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800261c:	680b      	ldr	r3, [r1, #0]
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d05d      	beq.n	80026de <HAL_TIM_ConfigClockSource+0xe6>
 8002622:	d910      	bls.n	8002646 <HAL_TIM_ConfigClockSource+0x4e>
 8002624:	2b70      	cmp	r3, #112	; 0x70
 8002626:	d040      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0xb2>
 8002628:	d81f      	bhi.n	800266a <HAL_TIM_ConfigClockSource+0x72>
 800262a:	2b50      	cmp	r3, #80	; 0x50
 800262c:	d04d      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0xd2>
 800262e:	2b60      	cmp	r3, #96	; 0x60
 8002630:	d134      	bne.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002632:	68ca      	ldr	r2, [r1, #12]
 8002634:	6849      	ldr	r1, [r1, #4]
 8002636:	6820      	ldr	r0, [r4, #0]
 8002638:	f7ff fe75 	bl	8002326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800263c:	2160      	movs	r1, #96	; 0x60
 800263e:	6820      	ldr	r0, [r4, #0]
 8002640:	f7ff fe85 	bl	800234e <TIM_ITRx_SetConfig>
    break;
 8002644:	e02a      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002646:	2b10      	cmp	r3, #16
 8002648:	d053      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0xfa>
 800264a:	d908      	bls.n	800265e <HAL_TIM_ConfigClockSource+0x66>
 800264c:	2b20      	cmp	r3, #32
 800264e:	d055      	beq.n	80026fc <HAL_TIM_ConfigClockSource+0x104>
 8002650:	2b30      	cmp	r3, #48	; 0x30
 8002652:	d123      	bne.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002654:	2130      	movs	r1, #48	; 0x30
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	f7ff fe79 	bl	800234e <TIM_ITRx_SetConfig>
    break;
 800265c:	e01e      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800265e:	b9eb      	cbnz	r3, 800269c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002660:	2100      	movs	r1, #0
 8002662:	6820      	ldr	r0, [r4, #0]
 8002664:	f7ff fe73 	bl	800234e <TIM_ITRx_SetConfig>
    break;
 8002668:	e018      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266e:	d00e      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x96>
 8002670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002674:	d112      	bne.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 8002676:	68cb      	ldr	r3, [r1, #12]
 8002678:	684a      	ldr	r2, [r1, #4]
 800267a:	6889      	ldr	r1, [r1, #8]
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	f7ff ffae 	bl	80025de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002682:	6822      	ldr	r2, [r4, #0]
 8002684:	6893      	ldr	r3, [r2, #8]
 8002686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268a:	6093      	str	r3, [r2, #8]
    break;
 800268c:	e006      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	6893      	ldr	r3, [r2, #8]
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	f023 0307 	bic.w	r3, r3, #7
 800269a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800269c:	2301      	movs	r3, #1
 800269e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80026a8:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 80026aa:	68cb      	ldr	r3, [r1, #12]
 80026ac:	684a      	ldr	r2, [r1, #4]
 80026ae:	6889      	ldr	r1, [r1, #8]
 80026b0:	6820      	ldr	r0, [r4, #0]
 80026b2:	f7ff ff94 	bl	80025de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80026c6:	6093      	str	r3, [r2, #8]
    break;
 80026c8:	e7e8      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80026ca:	68ca      	ldr	r2, [r1, #12]
 80026cc:	6849      	ldr	r1, [r1, #4]
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	f7ff fe16 	bl	8002300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d4:	2150      	movs	r1, #80	; 0x50
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	f7ff fe39 	bl	800234e <TIM_ITRx_SetConfig>
    break;
 80026dc:	e7de      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80026de:	68ca      	ldr	r2, [r1, #12]
 80026e0:	6849      	ldr	r1, [r1, #4]
 80026e2:	6820      	ldr	r0, [r4, #0]
 80026e4:	f7ff fe0c 	bl	8002300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e8:	2140      	movs	r1, #64	; 0x40
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	f7ff fe2f 	bl	800234e <TIM_ITRx_SetConfig>
    break;
 80026f0:	e7d4      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80026f2:	2110      	movs	r1, #16
 80026f4:	6820      	ldr	r0, [r4, #0]
 80026f6:	f7ff fe2a 	bl	800234e <TIM_ITRx_SetConfig>
    break;
 80026fa:	e7cf      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80026fc:	2120      	movs	r1, #32
 80026fe:	6820      	ldr	r0, [r4, #0]
 8002700:	f7ff fe25 	bl	800234e <TIM_ITRx_SetConfig>
    break;
 8002704:	e7ca      	b.n	800269c <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 8002706:	2002      	movs	r0, #2
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	fffe0088 	.word	0xfffe0088

08002710 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002710:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d01f      	beq.n	8002758 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 8002718:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800271a:	2301      	movs	r3, #1
 800271c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002720:	6804      	ldr	r4, [r0, #0]
 8002722:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002724:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002726:	4d0d      	ldr	r5, [pc, #52]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8002728:	42ac      	cmp	r4, r5
 800272a:	d010      	beq.n	800274e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800272c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002730:	680d      	ldr	r5, [r1, #0]
 8002732:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002738:	6889      	ldr	r1, [r1, #8]
 800273a:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273c:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800273e:	6803      	ldr	r3, [r0, #0]
 8002740:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002742:	2300      	movs	r3, #0
 8002744:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002748:	4618      	mov	r0, r3
} 
 800274a:	bc30      	pop	{r4, r5}
 800274c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800274e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002752:	684d      	ldr	r5, [r1, #4]
 8002754:	432b      	orrs	r3, r5
 8002756:	e7e9      	b.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8002758:	2002      	movs	r0, #2
 800275a:	4770      	bx	lr
 800275c:	40012c00 	.word	0x40012c00

08002760 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002760:	4770      	bx	lr

08002762 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002762:	4770      	bx	lr

08002764 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002764:	4770      	bx	lr

08002766 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002766:	6802      	ldr	r2, [r0, #0]
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800276e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002770:	6802      	ldr	r2, [r0, #0]
 8002772:	6893      	ldr	r3, [r2, #8]
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800277a:	2320      	movs	r3, #32
 800277c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002780:	4770      	bx	lr

08002782 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8002782:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b20      	cmp	r3, #32
 800278a:	d001      	beq.n	8002790 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 800278c:	2002      	movs	r0, #2
 800278e:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002790:	b1b9      	cbz	r1, 80027c2 <HAL_UART_Transmit_IT+0x40>
 8002792:	b1c2      	cbz	r2, 80027c6 <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 8002794:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002798:	2b01      	cmp	r3, #1
 800279a:	d016      	beq.n	80027ca <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 800279c:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 800279e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80027a2:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027aa:	2221      	movs	r2, #33	; 0x21
 80027ac:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80027b0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80027b4:	6801      	ldr	r1, [r0, #0]
 80027b6:	680a      	ldr	r2, [r1, #0]
 80027b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027bc:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80027be:	4618      	mov	r0, r3
 80027c0:	4770      	bx	lr
      return HAL_ERROR;
 80027c2:	2001      	movs	r0, #1
 80027c4:	4770      	bx	lr
 80027c6:	2001      	movs	r0, #1
 80027c8:	4770      	bx	lr
    __HAL_LOCK(huart);
 80027ca:	2002      	movs	r0, #2
}
 80027cc:	4770      	bx	lr

080027ce <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80027ce:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d001      	beq.n	80027dc <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 80027d8:	2002      	movs	r0, #2
 80027da:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80027dc:	2900      	cmp	r1, #0
 80027de:	d047      	beq.n	8002870 <HAL_UART_Receive_IT+0xa2>
 80027e0:	2a00      	cmp	r2, #0
 80027e2:	d047      	beq.n	8002874 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 80027e4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d045      	beq.n	8002878 <HAL_UART_Receive_IT+0xaa>
 80027ec:	2301      	movs	r3, #1
 80027ee:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 80027f2:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80027f4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80027f8:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80027fc:	6883      	ldr	r3, [r0, #8]
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d006      	beq.n	8002812 <HAL_UART_Receive_IT+0x44>
 8002804:	b9a3      	cbnz	r3, 8002830 <HAL_UART_Receive_IT+0x62>
 8002806:	6903      	ldr	r3, [r0, #16]
 8002808:	b973      	cbnz	r3, 8002828 <HAL_UART_Receive_IT+0x5a>
 800280a:	23ff      	movs	r3, #255	; 0xff
 800280c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002810:	e011      	b.n	8002836 <HAL_UART_Receive_IT+0x68>
 8002812:	6903      	ldr	r3, [r0, #16]
 8002814:	b923      	cbnz	r3, 8002820 <HAL_UART_Receive_IT+0x52>
 8002816:	f240 13ff 	movw	r3, #511	; 0x1ff
 800281a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800281e:	e00a      	b.n	8002836 <HAL_UART_Receive_IT+0x68>
 8002820:	23ff      	movs	r3, #255	; 0xff
 8002822:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002826:	e006      	b.n	8002836 <HAL_UART_Receive_IT+0x68>
 8002828:	237f      	movs	r3, #127	; 0x7f
 800282a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800282e:	e002      	b.n	8002836 <HAL_UART_Receive_IT+0x68>
 8002830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002834:	d012      	beq.n	800285c <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	2300      	movs	r3, #0
 8002838:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800283a:	2222      	movs	r2, #34	; 0x22
 800283c:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8002840:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002844:	6801      	ldr	r1, [r0, #0]
 8002846:	688a      	ldr	r2, [r1, #8]
 8002848:	f042 0201 	orr.w	r2, r2, #1
 800284c:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800284e:	6801      	ldr	r1, [r0, #0]
 8002850:	680a      	ldr	r2, [r1, #0]
 8002852:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002856:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002858:	4618      	mov	r0, r3
 800285a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800285c:	6903      	ldr	r3, [r0, #16]
 800285e:	b91b      	cbnz	r3, 8002868 <HAL_UART_Receive_IT+0x9a>
 8002860:	237f      	movs	r3, #127	; 0x7f
 8002862:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002866:	e7e6      	b.n	8002836 <HAL_UART_Receive_IT+0x68>
 8002868:	233f      	movs	r3, #63	; 0x3f
 800286a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800286e:	e7e2      	b.n	8002836 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8002870:	2001      	movs	r0, #1
 8002872:	4770      	bx	lr
 8002874:	2001      	movs	r0, #1
 8002876:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002878:	2002      	movs	r0, #2
}
 800287a:	4770      	bx	lr

0800287c <HAL_UART_TxCpltCallback>:
{
 800287c:	4770      	bx	lr

0800287e <HAL_UART_ErrorCallback>:
{
 800287e:	4770      	bx	lr

08002880 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002880:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002882:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800288a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800288e:	f7ff fff6 	bl	800287e <HAL_UART_ErrorCallback>
 8002892:	bd08      	pop	{r3, pc}

08002894 <UART_SetConfig>:
{
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002898:	6883      	ldr	r3, [r0, #8]
 800289a:	6902      	ldr	r2, [r0, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	6942      	ldr	r2, [r0, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	69c2      	ldr	r2, [r0, #28]
 80028a4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80028a6:	6801      	ldr	r1, [r0, #0]
 80028a8:	6808      	ldr	r0, [r1, #0]
 80028aa:	4a64      	ldr	r2, [pc, #400]	; (8002a3c <UART_SetConfig+0x1a8>)
 80028ac:	4002      	ands	r2, r0
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b2:	6822      	ldr	r2, [r4, #0]
 80028b4:	6853      	ldr	r3, [r2, #4]
 80028b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028ba:	68e1      	ldr	r1, [r4, #12]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80028c0:	69a3      	ldr	r3, [r4, #24]
 80028c2:	6a22      	ldr	r2, [r4, #32]
 80028c4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028c6:	6821      	ldr	r1, [r4, #0]
 80028c8:	688a      	ldr	r2, [r1, #8]
 80028ca:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028d2:	6825      	ldr	r5, [r4, #0]
 80028d4:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <UART_SetConfig+0x1ac>)
 80028d6:	429d      	cmp	r5, r3
 80028d8:	d015      	beq.n	8002906 <UART_SetConfig+0x72>
 80028da:	4b5a      	ldr	r3, [pc, #360]	; (8002a44 <UART_SetConfig+0x1b0>)
 80028dc:	429d      	cmp	r5, r3
 80028de:	d029      	beq.n	8002934 <UART_SetConfig+0xa0>
 80028e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e4:	429d      	cmp	r5, r3
 80028e6:	d021      	beq.n	800292c <UART_SetConfig+0x98>
 80028e8:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ea:	69e2      	ldr	r2, [r4, #28]
 80028ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80028f0:	d022      	beq.n	8002938 <UART_SetConfig+0xa4>
    switch (clocksource)
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	f200 809f 	bhi.w	8002a36 <UART_SetConfig+0x1a2>
 80028f8:	e8df f003 	tbb	[pc, r3]
 80028fc:	9d7c7166 	.word	0x9d7c7166
 8002900:	9d9d9d88 	.word	0x9d9d9d88
 8002904:	93          	.byte	0x93
 8002905:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002906:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b03      	cmp	r3, #3
 8002912:	d809      	bhi.n	8002928 <UART_SetConfig+0x94>
 8002914:	e8df f003 	tbb	[pc, r3]
 8002918:	0c060402 	.word	0x0c060402
 800291c:	2300      	movs	r3, #0
 800291e:	e7e4      	b.n	80028ea <UART_SetConfig+0x56>
 8002920:	2304      	movs	r3, #4
 8002922:	e7e2      	b.n	80028ea <UART_SetConfig+0x56>
 8002924:	2308      	movs	r3, #8
 8002926:	e7e0      	b.n	80028ea <UART_SetConfig+0x56>
 8002928:	2310      	movs	r3, #16
 800292a:	e7de      	b.n	80028ea <UART_SetConfig+0x56>
 800292c:	2300      	movs	r3, #0
 800292e:	e7dc      	b.n	80028ea <UART_SetConfig+0x56>
 8002930:	2302      	movs	r3, #2
 8002932:	e7da      	b.n	80028ea <UART_SetConfig+0x56>
 8002934:	2300      	movs	r3, #0
 8002936:	e7d8      	b.n	80028ea <UART_SetConfig+0x56>
    switch (clocksource)
 8002938:	2b08      	cmp	r3, #8
 800293a:	d842      	bhi.n	80029c2 <UART_SetConfig+0x12e>
 800293c:	e8df f003 	tbb	[pc, r3]
 8002940:	41221705 	.word	0x41221705
 8002944:	4141412d 	.word	0x4141412d
 8002948:	38          	.byte	0x38
 8002949:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800294a:	f7ff f957 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 800294e:	6862      	ldr	r2, [r4, #4]
 8002950:	0853      	lsrs	r3, r2, #1
 8002952:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002956:	fbb3 f3f2 	udiv	r3, r3, r2
 800295a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800295c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800295e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002962:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002966:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8002968:	6822      	ldr	r2, [r4, #0]
 800296a:	60d3      	str	r3, [r2, #12]
 800296c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800296e:	f7ff f95b 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
 8002972:	6862      	ldr	r2, [r4, #4]
 8002974:	0853      	lsrs	r3, r2, #1
 8002976:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800297a:	fbb3 f3f2 	udiv	r3, r3, r2
 800297e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002980:	2000      	movs	r0, #0
        break;
 8002982:	e7ec      	b.n	800295e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002984:	6862      	ldr	r2, [r4, #4]
 8002986:	0853      	lsrs	r3, r2, #1
 8002988:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800298c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002990:	fbb3 f3f2 	udiv	r3, r3, r2
 8002994:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002996:	2000      	movs	r0, #0
        break;
 8002998:	e7e1      	b.n	800295e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800299a:	f7ff f807 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 800299e:	6862      	ldr	r2, [r4, #4]
 80029a0:	0853      	lsrs	r3, r2, #1
 80029a2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80029a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80029aa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80029ac:	2000      	movs	r0, #0
        break;
 80029ae:	e7d6      	b.n	800295e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029b0:	6862      	ldr	r2, [r4, #4]
 80029b2:	0853      	lsrs	r3, r2, #1
 80029b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80029b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80029bc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80029be:	2000      	movs	r0, #0
        break;
 80029c0:	e7cd      	b.n	800295e <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80029c2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e7ca      	b.n	800295e <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029c8:	f7ff f918 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 80029cc:	6863      	ldr	r3, [r4, #4]
 80029ce:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029d6:	b280      	uxth	r0, r0
 80029d8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029da:	2000      	movs	r0, #0
        break;
 80029dc:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029de:	f7ff f923 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
 80029e2:	6863      	ldr	r3, [r4, #4]
 80029e4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80029ec:	b280      	uxth	r0, r0
 80029ee:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029f0:	2000      	movs	r0, #0
        break;
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029f4:	6862      	ldr	r2, [r4, #4]
 80029f6:	0853      	lsrs	r3, r2, #1
 80029f8:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80029fc:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a08:	2000      	movs	r0, #0
        break;
 8002a0a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a0c:	f7fe ffce 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8002a10:	6863      	ldr	r3, [r4, #4]
 8002a12:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a16:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a1a:	b280      	uxth	r0, r0
 8002a1c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a1e:	2000      	movs	r0, #0
        break;
 8002a20:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a22:	6862      	ldr	r2, [r4, #4]
 8002a24:	0853      	lsrs	r3, r2, #1
 8002a26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a32:	2000      	movs	r0, #0
        break;
 8002a34:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 8002a36:	2001      	movs	r0, #1
}
 8002a38:	bd38      	pop	{r3, r4, r5, pc}
 8002a3a:	bf00      	nop
 8002a3c:	efff69f3 	.word	0xefff69f3
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40004400 	.word	0x40004400

08002a48 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a4a:	f013 0f01 	tst.w	r3, #1
 8002a4e:	d006      	beq.n	8002a5e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a50:	6802      	ldr	r2, [r0, #0]
 8002a52:	6853      	ldr	r3, [r2, #4]
 8002a54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a58:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a60:	f013 0f02 	tst.w	r3, #2
 8002a64:	d006      	beq.n	8002a74 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a66:	6802      	ldr	r2, [r0, #0]
 8002a68:	6853      	ldr	r3, [r2, #4]
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a76:	f013 0f04 	tst.w	r3, #4
 8002a7a:	d006      	beq.n	8002a8a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a7c:	6802      	ldr	r2, [r0, #0]
 8002a7e:	6853      	ldr	r3, [r2, #4]
 8002a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a84:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002a86:	430b      	orrs	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a8c:	f013 0f08 	tst.w	r3, #8
 8002a90:	d006      	beq.n	8002aa0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a92:	6802      	ldr	r2, [r0, #0]
 8002a94:	6853      	ldr	r3, [r2, #4]
 8002a96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a9a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002aa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002aa2:	f013 0f10 	tst.w	r3, #16
 8002aa6:	d006      	beq.n	8002ab6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002aa8:	6802      	ldr	r2, [r0, #0]
 8002aaa:	6893      	ldr	r3, [r2, #8]
 8002aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ab0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ab6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ab8:	f013 0f20 	tst.w	r3, #32
 8002abc:	d006      	beq.n	8002acc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002abe:	6802      	ldr	r2, [r0, #0]
 8002ac0:	6893      	ldr	r3, [r2, #8]
 8002ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ac6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002acc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ace:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ad2:	d00a      	beq.n	8002aea <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ad4:	6802      	ldr	r2, [r0, #0]
 8002ad6:	6853      	ldr	r3, [r2, #4]
 8002ad8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002adc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ae2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae8:	d00b      	beq.n	8002b02 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002aec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002af0:	d006      	beq.n	8002b00 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002af2:	6802      	ldr	r2, [r0, #0]
 8002af4:	6853      	ldr	r3, [r2, #4]
 8002af6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002afa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6053      	str	r3, [r2, #4]
 8002b00:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b02:	6802      	ldr	r2, [r0, #0]
 8002b04:	6853      	ldr	r3, [r2, #4]
 8002b06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b0a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6053      	str	r3, [r2, #4]
 8002b10:	e7eb      	b.n	8002aea <UART_AdvFeatureConfig+0xa2>

08002b12 <UART_WaitOnFlagUntilTimeout>:
{
 8002b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b16:	4605      	mov	r5, r0
 8002b18:	460f      	mov	r7, r1
 8002b1a:	4616      	mov	r6, r2
 8002b1c:	4698      	mov	r8, r3
 8002b1e:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	ea37 0303 	bics.w	r3, r7, r3
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	42b3      	cmp	r3, r6
 8002b30:	d11e      	bne.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002b32:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002b36:	d0f3      	beq.n	8002b20 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b38:	b12c      	cbz	r4, 8002b46 <UART_WaitOnFlagUntilTimeout+0x34>
 8002b3a:	f7fd fbd1 	bl	80002e0 <HAL_GetTick>
 8002b3e:	eba0 0008 	sub.w	r0, r0, r8
 8002b42:	4284      	cmp	r4, r0
 8002b44:	d2ec      	bcs.n	8002b20 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b46:	682a      	ldr	r2, [r5, #0]
 8002b48:	6813      	ldr	r3, [r2, #0]
 8002b4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b4e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b50:	682a      	ldr	r2, [r5, #0]
 8002b52:	6893      	ldr	r3, [r2, #8]
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002b60:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002b64:	2300      	movs	r3, #0
 8002b66:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8002b6a:	2003      	movs	r0, #3
 8002b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002b70:	2000      	movs	r0, #0
}
 8002b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b76 <UART_CheckIdleState>:
{
 8002b76:	b530      	push	{r4, r5, lr}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002b80:	f7fd fbae 	bl	80002e0 <HAL_GetTick>
 8002b84:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f013 0f08 	tst.w	r3, #8
 8002b8e:	d10e      	bne.n	8002bae <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f013 0f04 	tst.w	r3, #4
 8002b98:	d117      	bne.n	8002bca <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8002baa:	b003      	add	sp, #12
 8002bac:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f7ff ffa8 	bl	8002b12 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d0e4      	beq.n	8002b90 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002bc6:	2003      	movs	r0, #3
 8002bc8:	e7ef      	b.n	8002baa <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7ff ff9a 	bl	8002b12 <UART_WaitOnFlagUntilTimeout>
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d0db      	beq.n	8002b9a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8002be2:	2003      	movs	r0, #3
 8002be4:	e7e1      	b.n	8002baa <UART_CheckIdleState+0x34>

08002be6 <HAL_UART_Init>:
  if(huart == NULL)
 8002be6:	b378      	cbz	r0, 8002c48 <HAL_UART_Init+0x62>
{
 8002be8:	b510      	push	{r4, lr}
 8002bea:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002bec:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002bf0:	b30b      	cbz	r3, 8002c36 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002bf2:	2324      	movs	r3, #36	; 0x24
 8002bf4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002bf8:	6822      	ldr	r2, [r4, #0]
 8002bfa:	6813      	ldr	r3, [r2, #0]
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff fe46 	bl	8002894 <UART_SetConfig>
 8002c08:	2801      	cmp	r0, #1
 8002c0a:	d01f      	beq.n	8002c4c <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c0e:	b9bb      	cbnz	r3, 8002c40 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	6853      	ldr	r3, [r2, #4]
 8002c14:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c18:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	6893      	ldr	r3, [r2, #8]
 8002c1e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002c22:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff ffa1 	bl	8002b76 <UART_CheckIdleState>
 8002c34:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c36:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002c3a:	f001 fb21 	bl	8004280 <HAL_UART_MspInit>
 8002c3e:	e7d8      	b.n	8002bf2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff ff01 	bl	8002a48 <UART_AdvFeatureConfig>
 8002c46:	e7e3      	b.n	8002c10 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002c48:	2001      	movs	r0, #1
 8002c4a:	4770      	bx	lr
}
 8002c4c:	bd10      	pop	{r4, pc}

08002c4e <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c4e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b21      	cmp	r3, #33	; 0x21
 8002c56:	d001      	beq.n	8002c5c <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2002      	movs	r0, #2
  }
}
 8002c5a:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002c5c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b193      	cbz	r3, 8002c8a <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c64:	6883      	ldr	r3, [r0, #8]
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6a:	d01a      	beq.n	8002ca2 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002c6c:	6802      	ldr	r2, [r0, #0]
 8002c6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002c70:	1c59      	adds	r1, r3, #1
 8002c72:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002c78:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002c86:	2000      	movs	r0, #0
 8002c88:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002c8a:	6802      	ldr	r2, [r0, #0]
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c92:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c94:	6802      	ldr	r2, [r0, #0]
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca2:	6903      	ldr	r3, [r0, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e1      	bne.n	8002c6c <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002ca8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002caa:	6802      	ldr	r2, [r0, #0]
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002cb4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002cba:	e7dd      	b.n	8002c78 <UART_Transmit_IT+0x2a>

08002cbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cbc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cbe:	6801      	ldr	r1, [r0, #0]
 8002cc0:	680b      	ldr	r3, [r1, #0]
 8002cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc6:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002cce:	f7ff fdd5 	bl	800287c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	bd08      	pop	{r3, pc}

08002cd6 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002cd6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cda:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b22      	cmp	r3, #34	; 0x22
 8002ce2:	d006      	beq.n	8002cf2 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ce4:	6802      	ldr	r2, [r0, #0]
 8002ce6:	6993      	ldr	r3, [r2, #24]
 8002ce8:	f043 0308 	orr.w	r3, r3, #8
 8002cec:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002cee:	2002      	movs	r0, #2
 8002cf0:	4770      	bx	lr
{
 8002cf2:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cf4:	6803      	ldr	r3, [r0, #0]
 8002cf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002cf8:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfa:	6881      	ldr	r1, [r0, #8]
 8002cfc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002d00:	d00f      	beq.n	8002d22 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d02:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002d04:	1c4c      	adds	r4, r1, #1
 8002d06:	6544      	str	r4, [r0, #84]	; 0x54
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8002d0e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002d1c:	b15b      	cbz	r3, 8002d36 <UART_Receive_IT+0x60>
    return HAL_OK;
 8002d1e:	2000      	movs	r0, #0
  }
}
 8002d20:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d22:	6901      	ldr	r1, [r0, #16]
 8002d24:	2900      	cmp	r1, #0
 8002d26:	d1ec      	bne.n	8002d02 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002d28:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 8002d2e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d30:	3302      	adds	r3, #2
 8002d32:	6543      	str	r3, [r0, #84]	; 0x54
 8002d34:	e7eb      	b.n	8002d0e <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d36:	6802      	ldr	r2, [r0, #0]
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d3e:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d40:	6802      	ldr	r2, [r0, #0]
 8002d42:	6893      	ldr	r3, [r2, #8]
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002d50:	f000 f8b2 	bl	8002eb8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002d54:	2000      	movs	r0, #0
 8002d56:	bd10      	pop	{r4, pc}

08002d58 <HAL_UART_IRQHandler>:
{
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d5c:	6802      	ldr	r2, [r0, #0]
 8002d5e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d60:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8002d62:	f013 050f 	ands.w	r5, r3, #15
 8002d66:	d105      	bne.n	8002d74 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d68:	f013 0f20 	tst.w	r3, #32
 8002d6c:	d002      	beq.n	8002d74 <HAL_UART_IRQHandler+0x1c>
 8002d6e:	f011 0f20 	tst.w	r1, #32
 8002d72:	d160      	bne.n	8002e36 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8002d74:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	d072      	beq.n	8002e60 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002d7a:	f010 0501 	ands.w	r5, r0, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002d80:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002d84:	d06c      	beq.n	8002e60 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d86:	f013 0f01 	tst.w	r3, #1
 8002d8a:	d007      	beq.n	8002d9c <HAL_UART_IRQHandler+0x44>
 8002d8c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002d90:	d004      	beq.n	8002d9c <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002d92:	2001      	movs	r0, #1
 8002d94:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d96:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002d98:	4302      	orrs	r2, r0
 8002d9a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d9c:	f013 0f02 	tst.w	r3, #2
 8002da0:	d007      	beq.n	8002db2 <HAL_UART_IRQHandler+0x5a>
 8002da2:	b135      	cbz	r5, 8002db2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002da4:	6822      	ldr	r2, [r4, #0]
 8002da6:	2002      	movs	r0, #2
 8002da8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002daa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002dac:	f042 0204 	orr.w	r2, r2, #4
 8002db0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002db2:	f013 0f04 	tst.w	r3, #4
 8002db6:	d007      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x70>
 8002db8:	b135      	cbz	r5, 8002dc8 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	2004      	movs	r0, #4
 8002dbe:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dc0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002dc2:	f042 0202 	orr.w	r2, r2, #2
 8002dc6:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002dc8:	f013 0f08 	tst.w	r3, #8
 8002dcc:	d009      	beq.n	8002de2 <HAL_UART_IRQHandler+0x8a>
 8002dce:	f011 0f20 	tst.w	r1, #32
 8002dd2:	d100      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dd4:	b12d      	cbz	r5, 8002de2 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002dd6:	6822      	ldr	r2, [r4, #0]
 8002dd8:	2008      	movs	r0, #8
 8002dda:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ddc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002dde:	4302      	orrs	r2, r0
 8002de0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002de2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d04d      	beq.n	8002e84 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002de8:	f013 0f20 	tst.w	r3, #32
 8002dec:	d002      	beq.n	8002df4 <HAL_UART_IRQHandler+0x9c>
 8002dee:	f011 0f20 	tst.w	r1, #32
 8002df2:	d123      	bne.n	8002e3c <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002df4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002df6:	f013 0f08 	tst.w	r3, #8
 8002dfa:	d104      	bne.n	8002e06 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002e00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e04:	d026      	beq.n	8002e54 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff fcad 	bl	8002766 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e14:	d01a      	beq.n	8002e4c <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1c:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e20:	b183      	cbz	r3, 8002e44 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e22:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <HAL_UART_IRQHandler+0x158>)
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e26:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002e28:	f7fd fe88 	bl	8000b3c <HAL_DMA_Abort_IT>
 8002e2c:	b350      	cbz	r0, 8002e84 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e2e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e32:	4798      	blx	r3
 8002e34:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002e36:	f7ff ff4e 	bl	8002cd6 <UART_Receive_IT>
      return;
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7ff ff4a 	bl	8002cd6 <UART_Receive_IT>
 8002e42:	e7d7      	b.n	8002df4 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff fd1a 	bl	800287e <HAL_UART_ErrorCallback>
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff fd16 	bl	800287e <HAL_UART_ErrorCallback>
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7ff fd12 	bl	800287e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002e60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002e64:	d002      	beq.n	8002e6c <HAL_UART_IRQHandler+0x114>
 8002e66:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002e6a:	d10c      	bne.n	8002e86 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e70:	d002      	beq.n	8002e78 <HAL_UART_IRQHandler+0x120>
 8002e72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e76:	d112      	bne.n	8002e9e <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_IRQHandler+0x12c>
 8002e7e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e82:	d110      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x14e>
 8002e84:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002e86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e8a:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002e92:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8002e96:	4620      	mov	r0, r4
 8002e98:	f000 f80c 	bl	8002eb4 <HAL_UARTEx_WakeupCallback>
    return;
 8002e9c:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff fed5 	bl	8002c4e <UART_Transmit_IT>
    return;
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7ff ff08 	bl	8002cbc <UART_EndTransmit_IT>
    return;
 8002eac:	e7ea      	b.n	8002e84 <HAL_UART_IRQHandler+0x12c>
 8002eae:	bf00      	nop
 8002eb0:	08002881 	.word	0x08002881

08002eb4 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002eb8:	b508      	push	{r3, lr}
	rx_flag = 1;
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_UART_RxCpltCallback+0x14>)
 8002ebe:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8002ec0:	4903      	ldr	r1, [pc, #12]	; (8002ed0 <HAL_UART_RxCpltCallback+0x18>)
 8002ec2:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1c>)
 8002ec4:	f7ff fc83 	bl	80027ce <HAL_UART_Receive_IT>
 8002ec8:	bd08      	pop	{r3, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000269 	.word	0x20000269
 8002ed0:	2000054c 	.word	0x2000054c
 8002ed4:	200003a0 	.word	0x200003a0

08002ed8 <HAL_TIM_IC_CaptureCallback>:
	adc_flag = 1;
	HAL_ADC_Stop_DMA(&hadc2);
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4b01      	ldr	r3, [pc, #4]	; (8002ee0 <HAL_TIM_IC_CaptureCallback+0x8>)
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	4770      	bx	lr
 8002ee0:	2000027d 	.word	0x2000027d

08002ee4 <HAL_RTCEx_WakeUpTimerEventCallback>:
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4b01      	ldr	r3, [pc, #4]	; (8002eec <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	4770      	bx	lr
 8002eec:	20000268 	.word	0x20000268

08002ef0 <init_iqs263>:
extern I2C_HandleTypeDef hi2c1;

//unsigned char sliderCoords;                     // variable identified with a Slide event
//unsigned char data_buffer[30];
//unsigned char events = 0;                       // variable identified with all events
int init_iqs263(){
 8002ef0:	b500      	push	{lr}
 8002ef2:	b085      	sub	sp, #20

	// READING DEVICE INFORMATION
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efa:	f7fd ff67 	bl	8000dcc <HAL_GPIO_ReadPin>
 8002efe:	2801      	cmp	r0, #1
 8002f00:	d0f8      	beq.n	8002ef4 <init_iqs263+0x4>
	 HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, DEVICE_INFO, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8002f02:	2332      	movs	r3, #50	; 0x32
 8002f04:	9302      	str	r3, [sp, #8]
 8002f06:	2302      	movs	r3, #2
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	4bbd      	ldr	r3, [pc, #756]	; (8003200 <init_iqs263+0x310>)
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2301      	movs	r3, #1
 8002f10:	2200      	movs	r2, #0
 8002f12:	2144      	movs	r1, #68	; 0x44
 8002f14:	48bb      	ldr	r0, [pc, #748]	; (8003204 <init_iqs263+0x314>)
 8002f16:	f7fe f8f2 	bl	80010fe <HAL_I2C_Mem_Read>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8002f1a:	48ba      	ldr	r0, [pc, #744]	; (8003204 <init_iqs263+0x314>)
 8002f1c:	f7fe f9db 	bl	80012d6 <HAL_I2C_GetState>
 8002f20:	2820      	cmp	r0, #32
 8002f22:	d1fa      	bne.n	8002f1a <init_iqs263+0x2a>


	// READING DEVICE INFORMATION
	 data_buffer[0] = SYSTEM_FLAGS_VAL;
 8002f24:	2200      	movs	r2, #0
 8002f26:	4bb6      	ldr	r3, [pc, #728]	; (8003200 <init_iqs263+0x310>)
 8002f28:	701a      	strb	r2, [r3, #0]
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f30:	f7fd ff4c 	bl	8000dcc <HAL_GPIO_ReadPin>
 8002f34:	2801      	cmp	r0, #1
 8002f36:	d0f8      	beq.n	8002f2a <init_iqs263+0x3a>
	 HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8002f38:	2332      	movs	r3, #50	; 0x32
 8002f3a:	9302      	str	r3, [sp, #8]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	9201      	str	r2, [sp, #4]
 8002f40:	4baf      	ldr	r3, [pc, #700]	; (8003200 <init_iqs263+0x310>)
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	2144      	movs	r1, #68	; 0x44
 8002f48:	48ae      	ldr	r0, [pc, #696]	; (8003204 <init_iqs263+0x314>)
 8002f4a:	f7fe f8d8 	bl	80010fe <HAL_I2C_Mem_Read>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8002f4e:	48ad      	ldr	r0, [pc, #692]	; (8003204 <init_iqs263+0x314>)
 8002f50:	f7fe f9c1 	bl	80012d6 <HAL_I2C_GetState>
 8002f54:	2820      	cmp	r0, #32
 8002f56:	d1fa      	bne.n	8002f4e <init_iqs263+0x5e>


	    // Set active channels
	 data_buffer[0] = ACTIVE_CHS;
 8002f58:	220f      	movs	r2, #15
 8002f5a:	4ba9      	ldr	r3, [pc, #676]	; (8003200 <init_iqs263+0x310>)
 8002f5c:	701a      	strb	r2, [r3, #0]
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 8002f5e:	2102      	movs	r1, #2
 8002f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f64:	f7fd ff32 	bl	8000dcc <HAL_GPIO_ReadPin>
 8002f68:	2801      	cmp	r0, #1
 8002f6a:	d0f8      	beq.n	8002f5e <init_iqs263+0x6e>
	 HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, ACTIVE_CHANNELS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8002f6c:	2332      	movs	r3, #50	; 0x32
 8002f6e:	9302      	str	r3, [sp, #8]
 8002f70:	2301      	movs	r3, #1
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	4aa2      	ldr	r2, [pc, #648]	; (8003200 <init_iqs263+0x310>)
 8002f76:	9200      	str	r2, [sp, #0]
 8002f78:	220d      	movs	r2, #13
 8002f7a:	2144      	movs	r1, #68	; 0x44
 8002f7c:	48a1      	ldr	r0, [pc, #644]	; (8003204 <init_iqs263+0x314>)
 8002f7e:	f7fe f8be 	bl	80010fe <HAL_I2C_Mem_Read>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8002f82:	48a0      	ldr	r0, [pc, #640]	; (8003204 <init_iqs263+0x314>)
 8002f84:	f7fe f9a7 	bl	80012d6 <HAL_I2C_GetState>
 8002f88:	2820      	cmp	r0, #32
 8002f8a:	d1fa      	bne.n	8002f82 <init_iqs263+0x92>

	 // Setup touch and prox thresholds for each channel
	 data_buffer[0] = PROX_THRESHOLD;
 8002f8c:	4b9c      	ldr	r3, [pc, #624]	; (8003200 <init_iqs263+0x310>)
 8002f8e:	2208      	movs	r2, #8
 8002f90:	701a      	strb	r2, [r3, #0]
	 data_buffer[1] = TOUCH_THRESHOLD_CH1;
 8002f92:	2220      	movs	r2, #32
 8002f94:	705a      	strb	r2, [r3, #1]
	 data_buffer[2] = TOUCH_THRESHOLD_CH2;
 8002f96:	709a      	strb	r2, [r3, #2]
	 data_buffer[3] = TOUCH_THRESHOLD_CH3;
 8002f98:	70da      	strb	r2, [r3, #3]
	 data_buffer[4] = MOVEMENT_THRESHOLD;
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	711a      	strb	r2, [r3, #4]
	 data_buffer[5] = RESEED_BLOCK;
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	715a      	strb	r2, [r3, #5]
	 data_buffer[6] = HALT_TIME;
 8002fa2:	2214      	movs	r2, #20
 8002fa4:	719a      	strb	r2, [r3, #6]
	 data_buffer[7] = I2C_TIMEOUT;
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	71da      	strb	r2, [r3, #7]

	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 8002faa:	2102      	movs	r1, #2
 8002fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb0:	f7fd ff0c 	bl	8000dcc <HAL_GPIO_ReadPin>
 8002fb4:	2801      	cmp	r0, #1
 8002fb6:	d0f8      	beq.n	8002faa <init_iqs263+0xba>
	 HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, THRESHOLDS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 8,50);
 8002fb8:	2332      	movs	r3, #50	; 0x32
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	4b8f      	ldr	r3, [pc, #572]	; (8003200 <init_iqs263+0x310>)
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	220a      	movs	r2, #10
 8002fc8:	2144      	movs	r1, #68	; 0x44
 8002fca:	488e      	ldr	r0, [pc, #568]	; (8003204 <init_iqs263+0x314>)
 8002fcc:	f7fe f897 	bl	80010fe <HAL_I2C_Mem_Read>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8002fd0:	488c      	ldr	r0, [pc, #560]	; (8003204 <init_iqs263+0x314>)
 8002fd2:	f7fe f980 	bl	80012d6 <HAL_I2C_GetState>
 8002fd6:	2820      	cmp	r0, #32
 8002fd8:	d1fa      	bne.n	8002fd0 <init_iqs263+0xe0>


	// Set the ATI Targets (Target Counts)
	data_buffer[0] = ATI_TARGET_TOUCH;
 8002fda:	4b89      	ldr	r3, [pc, #548]	; (8003200 <init_iqs263+0x310>)
 8002fdc:	2230      	movs	r2, #48	; 0x30
 8002fde:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = ATI_TARGET_PROX;
 8002fe0:	2240      	movs	r2, #64	; 0x40
 8002fe2:	705a      	strb	r2, [r3, #1]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fea:	f7fd feef 	bl	8000dcc <HAL_GPIO_ReadPin>
 8002fee:	2801      	cmp	r0, #1
 8002ff0:	d0f8      	beq.n	8002fe4 <init_iqs263+0xf4>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8002ff2:	2332      	movs	r3, #50	; 0x32
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	4b81      	ldr	r3, [pc, #516]	; (8003200 <init_iqs263+0x310>)
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2301      	movs	r3, #1
 8003000:	220b      	movs	r2, #11
 8003002:	2144      	movs	r1, #68	; 0x44
 8003004:	487f      	ldr	r0, [pc, #508]	; (8003204 <init_iqs263+0x314>)
 8003006:	f7fe f87a 	bl	80010fe <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 800300a:	487e      	ldr	r0, [pc, #504]	; (8003204 <init_iqs263+0x314>)
 800300c:	f7fe f963 	bl	80012d6 <HAL_I2C_GetState>
 8003010:	2820      	cmp	r0, #32
 8003012:	d1fa      	bne.n	800300a <init_iqs263+0x11a>

	// Set the BASE value for each channel
	data_buffer[0] = MULTIPLIERS_CH0;
 8003014:	4b7a      	ldr	r3, [pc, #488]	; (8003200 <init_iqs263+0x310>)
 8003016:	2208      	movs	r2, #8
 8003018:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = MULTIPLIERS_CH1;
 800301a:	705a      	strb	r2, [r3, #1]
	data_buffer[2] = MULTIPLIERS_CH2;
 800301c:	709a      	strb	r2, [r3, #2]
	data_buffer[3] = MULTIPLIERS_CH3;
 800301e:	70da      	strb	r2, [r3, #3]

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 8003020:	2102      	movs	r1, #2
 8003022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003026:	f7fd fed1 	bl	8000dcc <HAL_GPIO_ReadPin>
 800302a:	2801      	cmp	r0, #1
 800302c:	d0f8      	beq.n	8003020 <init_iqs263+0x130>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, MULTIPLIERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 800302e:	2332      	movs	r3, #50	; 0x32
 8003030:	9302      	str	r3, [sp, #8]
 8003032:	2304      	movs	r3, #4
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	4b72      	ldr	r3, [pc, #456]	; (8003200 <init_iqs263+0x310>)
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2301      	movs	r3, #1
 800303c:	2207      	movs	r2, #7
 800303e:	2144      	movs	r1, #68	; 0x44
 8003040:	4870      	ldr	r0, [pc, #448]	; (8003204 <init_iqs263+0x314>)
 8003042:	f7fe f85c 	bl	80010fe <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003046:	486f      	ldr	r0, [pc, #444]	; (8003204 <init_iqs263+0x314>)
 8003048:	f7fe f945 	bl	80012d6 <HAL_I2C_GetState>
 800304c:	2820      	cmp	r0, #32
 800304e:	d1fa      	bne.n	8003046 <init_iqs263+0x156>


	// Setup prox settings
	data_buffer[0] = PROXSETTINGS0_VAL;
 8003050:	4b6b      	ldr	r3, [pc, #428]	; (8003200 <init_iqs263+0x310>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = PROXSETTINGS1_VAL;
 8003056:	211d      	movs	r1, #29
 8003058:	7059      	strb	r1, [r3, #1]
	data_buffer[2] = PROXSETTINGS2_VAL;
 800305a:	2104      	movs	r1, #4
 800305c:	7099      	strb	r1, [r3, #2]
	data_buffer[3] = PROXSETTINGS3_VAL;
 800305e:	70da      	strb	r2, [r3, #3]
	data_buffer[4] = EVENT_MASK_VAL;
 8003060:	711a      	strb	r2, [r3, #4]


	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 8003062:	2102      	movs	r1, #2
 8003064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003068:	f7fd feb0 	bl	8000dcc <HAL_GPIO_ReadPin>
 800306c:	2801      	cmp	r0, #1
 800306e:	d0f8      	beq.n	8003062 <init_iqs263+0x172>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8003070:	2332      	movs	r3, #50	; 0x32
 8003072:	9302      	str	r3, [sp, #8]
 8003074:	2305      	movs	r3, #5
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <init_iqs263+0x310>)
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2301      	movs	r3, #1
 800307e:	2209      	movs	r2, #9
 8003080:	2144      	movs	r1, #68	; 0x44
 8003082:	4860      	ldr	r0, [pc, #384]	; (8003204 <init_iqs263+0x314>)
 8003084:	f7fe f83b 	bl	80010fe <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003088:	485e      	ldr	r0, [pc, #376]	; (8003204 <init_iqs263+0x314>)
 800308a:	f7fe f924 	bl	80012d6 <HAL_I2C_GetState>
 800308e:	2820      	cmp	r0, #32
 8003090:	d1fa      	bne.n	8003088 <init_iqs263+0x198>


    // Setup Compensation (PCC)
    data_buffer[0] = COMPENSATION_CH0;
 8003092:	4b5b      	ldr	r3, [pc, #364]	; (8003200 <init_iqs263+0x310>)
 8003094:	2251      	movs	r2, #81	; 0x51
 8003096:	701a      	strb	r2, [r3, #0]
    data_buffer[1] = COMPENSATION_CH1;
 8003098:	2249      	movs	r2, #73	; 0x49
 800309a:	705a      	strb	r2, [r3, #1]
    data_buffer[2] = COMPENSATION_CH2;
 800309c:	214a      	movs	r1, #74	; 0x4a
 800309e:	7099      	strb	r1, [r3, #2]
    data_buffer[3] = COMPENSATION_CH3;
 80030a0:	70da      	strb	r2, [r3, #3]

    while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 80030a2:	2102      	movs	r1, #2
 80030a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a8:	f7fd fe90 	bl	8000dcc <HAL_GPIO_ReadPin>
 80030ac:	2801      	cmp	r0, #1
 80030ae:	d0f8      	beq.n	80030a2 <init_iqs263+0x1b2>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, COMPENSATION, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 80030b0:	2332      	movs	r3, #50	; 0x32
 80030b2:	9302      	str	r3, [sp, #8]
 80030b4:	2304      	movs	r3, #4
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	4b51      	ldr	r3, [pc, #324]	; (8003200 <init_iqs263+0x310>)
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2301      	movs	r3, #1
 80030be:	2208      	movs	r2, #8
 80030c0:	2144      	movs	r1, #68	; 0x44
 80030c2:	4850      	ldr	r0, [pc, #320]	; (8003204 <init_iqs263+0x314>)
 80030c4:	f7fe f81b 	bl	80010fe <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80030c8:	484e      	ldr	r0, [pc, #312]	; (8003204 <init_iqs263+0x314>)
 80030ca:	f7fe f904 	bl	80012d6 <HAL_I2C_GetState>
 80030ce:	2820      	cmp	r0, #32
 80030d0:	d1fa      	bne.n	80030c8 <init_iqs263+0x1d8>


	// Set timings on the IQS263
	data_buffer[0] = LOW_POWER;
 80030d2:	2200      	movs	r2, #0
 80030d4:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <init_iqs263+0x310>)
 80030d6:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 80030d8:	2102      	movs	r1, #2
 80030da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030de:	f7fd fe75 	bl	8000dcc <HAL_GPIO_ReadPin>
 80030e2:	2801      	cmp	r0, #1
 80030e4:	d0f8      	beq.n	80030d8 <init_iqs263+0x1e8>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 80030e6:	2332      	movs	r3, #50	; 0x32
 80030e8:	9302      	str	r3, [sp, #8]
 80030ea:	2301      	movs	r3, #1
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	4a44      	ldr	r2, [pc, #272]	; (8003200 <init_iqs263+0x310>)
 80030f0:	9200      	str	r2, [sp, #0]
 80030f2:	220b      	movs	r2, #11
 80030f4:	2144      	movs	r1, #68	; 0x44
 80030f6:	4843      	ldr	r0, [pc, #268]	; (8003204 <init_iqs263+0x314>)
 80030f8:	f7fe f801 	bl	80010fe <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80030fc:	4841      	ldr	r0, [pc, #260]	; (8003204 <init_iqs263+0x314>)
 80030fe:	f7fe f8ea 	bl	80012d6 <HAL_I2C_GetState>
 8003102:	2820      	cmp	r0, #32
 8003104:	d1fa      	bne.n	80030fc <init_iqs263+0x20c>

	// Set gesture timers on IQS263
	data_buffer[0] = TAP_TIMER;
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <init_iqs263+0x310>)
 8003108:	2205      	movs	r2, #5
 800310a:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = FLICK_TIMER;
 800310c:	2251      	movs	r2, #81	; 0x51
 800310e:	705a      	strb	r2, [r3, #1]
	data_buffer[2] = FLICK_THRESHOLD;
 8003110:	2233      	movs	r2, #51	; 0x33
 8003112:	709a      	strb	r2, [r3, #2]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 8003114:	2102      	movs	r1, #2
 8003116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311a:	f7fd fe57 	bl	8000dcc <HAL_GPIO_ReadPin>
 800311e:	2801      	cmp	r0, #1
 8003120:	d0f8      	beq.n	8003114 <init_iqs263+0x224>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, GESTURE_TIMERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 3,50);
 8003122:	2332      	movs	r3, #50	; 0x32
 8003124:	9302      	str	r3, [sp, #8]
 8003126:	2303      	movs	r3, #3
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	4b35      	ldr	r3, [pc, #212]	; (8003200 <init_iqs263+0x310>)
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2301      	movs	r3, #1
 8003130:	220c      	movs	r2, #12
 8003132:	2144      	movs	r1, #68	; 0x44
 8003134:	4833      	ldr	r0, [pc, #204]	; (8003204 <init_iqs263+0x314>)
 8003136:	f7fd ffe2 	bl	80010fe <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 800313a:	4832      	ldr	r0, [pc, #200]	; (8003204 <init_iqs263+0x314>)
 800313c:	f7fe f8cb 	bl	80012d6 <HAL_I2C_GetState>
 8003140:	2820      	cmp	r0, #32
 8003142:	d1fa      	bne.n	800313a <init_iqs263+0x24a>

	// Redo ati
	data_buffer[0] = 0x10;
 8003144:	2210      	movs	r2, #16
 8003146:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <init_iqs263+0x310>)
 8003148:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 800314a:	2102      	movs	r1, #2
 800314c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003150:	f7fd fe3c 	bl	8000dcc <HAL_GPIO_ReadPin>
 8003154:	2801      	cmp	r0, #1
 8003156:	d0f8      	beq.n	800314a <init_iqs263+0x25a>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8003158:	2332      	movs	r3, #50	; 0x32
 800315a:	9302      	str	r3, [sp, #8]
 800315c:	2301      	movs	r3, #1
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	4a27      	ldr	r2, [pc, #156]	; (8003200 <init_iqs263+0x310>)
 8003162:	9200      	str	r2, [sp, #0]
 8003164:	2209      	movs	r2, #9
 8003166:	2144      	movs	r1, #68	; 0x44
 8003168:	4826      	ldr	r0, [pc, #152]	; (8003204 <init_iqs263+0x314>)
 800316a:	f7fd ffc8 	bl	80010fe <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 800316e:	4825      	ldr	r0, [pc, #148]	; (8003204 <init_iqs263+0x314>)
 8003170:	f7fe f8b1 	bl	80012d6 <HAL_I2C_GetState>
 8003174:	2820      	cmp	r0, #32
 8003176:	d1fa      	bne.n	800316e <init_iqs263+0x27e>

	do
	    {
			HAL_Delay(10);
 8003178:	200a      	movs	r0, #10
 800317a:	f7fd f8b7 	bl	80002ec <HAL_Delay>
	        while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 800317e:	2102      	movs	r1, #2
 8003180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003184:	f7fd fe22 	bl	8000dcc <HAL_GPIO_ReadPin>
 8003188:	2801      	cmp	r0, #1
 800318a:	d0f8      	beq.n	800317e <init_iqs263+0x28e>
	        HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 800318c:	2332      	movs	r3, #50	; 0x32
 800318e:	9302      	str	r3, [sp, #8]
 8003190:	2201      	movs	r2, #1
 8003192:	9201      	str	r2, [sp, #4]
 8003194:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <init_iqs263+0x310>)
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	2144      	movs	r1, #68	; 0x44
 800319c:	4819      	ldr	r0, [pc, #100]	; (8003204 <init_iqs263+0x314>)
 800319e:	f7fd ffae 	bl	80010fe <HAL_I2C_Mem_Read>
	        while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80031a2:	4818      	ldr	r0, [pc, #96]	; (8003204 <init_iqs263+0x314>)
 80031a4:	f7fe f897 	bl	80012d6 <HAL_I2C_GetState>
 80031a8:	2820      	cmp	r0, #32
 80031aa:	d1fa      	bne.n	80031a2 <init_iqs263+0x2b2>
	    }
	    while ((data_buffer[0] & 0b00000100) == 0b00000100);
 80031ac:	4b14      	ldr	r3, [pc, #80]	; (8003200 <init_iqs263+0x310>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f013 0f04 	tst.w	r3, #4
 80031b4:	d1e0      	bne.n	8003178 <init_iqs263+0x288>

	// read the error bit to determine if ATI error occured
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 80031b6:	2102      	movs	r1, #2
 80031b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031bc:	f7fd fe06 	bl	8000dcc <HAL_GPIO_ReadPin>
 80031c0:	2801      	cmp	r0, #1
 80031c2:	d0f8      	beq.n	80031b6 <init_iqs263+0x2c6>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 80031c4:	2332      	movs	r3, #50	; 0x32
 80031c6:	9302      	str	r3, [sp, #8]
 80031c8:	2302      	movs	r3, #2
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <init_iqs263+0x310>)
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2301      	movs	r3, #1
 80031d2:	2209      	movs	r2, #9
 80031d4:	2144      	movs	r1, #68	; 0x44
 80031d6:	480b      	ldr	r0, [pc, #44]	; (8003204 <init_iqs263+0x314>)
 80031d8:	f7fd ff91 	bl	80010fe <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 80031dc:	4809      	ldr	r0, [pc, #36]	; (8003204 <init_iqs263+0x314>)
 80031de:	f7fe f87a 	bl	80012d6 <HAL_I2C_GetState>
 80031e2:	2820      	cmp	r0, #32
 80031e4:	d1fa      	bne.n	80031dc <init_iqs263+0x2ec>

	if ( (data_buffer[1] & 0x02) == 0x02){
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <init_iqs263+0x310>)
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	f013 0f02 	tst.w	r3, #2
 80031ee:	d103      	bne.n	80031f8 <init_iqs263+0x308>
		return -1;
	}
	return 1;
 80031f0:	2001      	movs	r0, #1
}
 80031f2:	b005      	add	sp, #20
 80031f4:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	e7f9      	b.n	80031f2 <init_iqs263+0x302>
 80031fe:	bf00      	nop
 8003200:	20000554 	.word	0x20000554
 8003204:	2000030c 	.word	0x2000030c

08003208 <handleEvents>:

void handleEvents(void){
 8003208:	b510      	push	{r4, lr}
 800320a:	b084      	sub	sp, #16

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
 800320c:	2102      	movs	r1, #2
 800320e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003212:	f7fd fddb 	bl	8000dcc <HAL_GPIO_ReadPin>
 8003216:	2801      	cmp	r0, #1
 8003218:	d0f8      	beq.n	800320c <handleEvents+0x4>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, TOUCH_BYTES, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 800321a:	2332      	movs	r3, #50	; 0x32
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	2301      	movs	r3, #1
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	4a11      	ldr	r2, [pc, #68]	; (8003268 <handleEvents+0x60>)
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	2203      	movs	r2, #3
 8003228:	2144      	movs	r1, #68	; 0x44
 800322a:	4810      	ldr	r0, [pc, #64]	; (800326c <handleEvents+0x64>)
 800322c:	f7fd ff67 	bl	80010fe <HAL_I2C_Mem_Read>



//	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){}; // Waiting for device
	//HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, COORDINATES, I2C_MEMADD_SIZE_8BIT,  &data_buffer[3], 3,50);// Create another start condition
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003230:	480e      	ldr	r0, [pc, #56]	; (800326c <handleEvents+0x64>)
 8003232:	f7fe f850 	bl	80012d6 <HAL_I2C_GetState>
 8003236:	2820      	cmp	r0, #32
 8003238:	d1fa      	bne.n	8003230 <handleEvents+0x28>
	HAL_UART_Transmit_IT(&huart1, data_buffer, 1);
 800323a:	4c0b      	ldr	r4, [pc, #44]	; (8003268 <handleEvents+0x60>)
 800323c:	2201      	movs	r2, #1
 800323e:	4621      	mov	r1, r4
 8003240:	480b      	ldr	r0, [pc, #44]	; (8003270 <handleEvents+0x68>)
 8003242:	f7ff fa9e 	bl	8002782 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8003246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800324a:	f7fd f84f 	bl	80002ec <HAL_Delay>
	events = data_buffer[1];
 800324e:	7863      	ldrb	r3, [r4, #1]
 8003250:	4a08      	ldr	r2, [pc, #32]	; (8003274 <handleEvents+0x6c>)
 8003252:	7013      	strb	r3, [r2, #0]
	if (((events & 0x04) == 0x04) && (events != 0)){
 8003254:	f013 0f04 	tst.w	r3, #4
 8003258:	d003      	beq.n	8003262 <handleEvents+0x5a>
 800325a:	b113      	cbz	r3, 8003262 <handleEvents+0x5a>
		sliderCoords = data_buffer[3];
 800325c:	78e2      	ldrb	r2, [r4, #3]
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <handleEvents+0x70>)
 8003260:	701a      	strb	r2, [r3, #0]
	}


}
 8003262:	b004      	add	sp, #16
 8003264:	bd10      	pop	{r4, pc}
 8003266:	bf00      	nop
 8003268:	20000554 	.word	0x20000554
 800326c:	2000030c 	.word	0x2000030c
 8003270:	200003a0 	.word	0x200003a0
 8003274:	20000239 	.word	0x20000239
 8003278:	200004cc 	.word	0x200004cc

0800327c <init_peripherals>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 800327c:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 800327e:	2201      	movs	r2, #1
 8003280:	2120      	movs	r1, #32
 8003282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003286:	f7fd fda8 	bl	8000dda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 800328a:	2201      	movs	r2, #1
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003292:	f7fd fda2 	bl	8000dda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 8003296:	2201      	movs	r2, #1
 8003298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800329c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a0:	f7fd fd9b 	bl	8000dda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80032a4:	2201      	movs	r2, #1
 80032a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ae:	f7fd fd94 	bl	8000dda <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80032b2:	4c83      	ldr	r4, [pc, #524]	; (80034c0 <init_peripherals+0x244>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	2108      	movs	r1, #8
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7fd fd8e 	bl	8000dda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80032be:	2201      	movs	r2, #1
 80032c0:	2110      	movs	r1, #16
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7fd fd89 	bl	8000dda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80032c8:	2201      	movs	r2, #1
 80032ca:	2120      	movs	r1, #32
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7fd fd84 	bl	8000dda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 80032d2:	2201      	movs	r2, #1
 80032d4:	2140      	movs	r1, #64	; 0x40
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7fd fd7f 	bl	8000dda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7fd fd79 	bl	8000dda <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 80032e8:	2201      	movs	r2, #1
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	4875      	ldr	r0, [pc, #468]	; (80034c4 <init_peripherals+0x248>)
 80032ee:	f7fd fd74 	bl	8000dda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 80032f2:	2200      	movs	r2, #0
 80032f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7fd fd6e 	bl	8000dda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 80032fe:	2201      	movs	r2, #1
 8003300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003304:	4620      	mov	r0, r4
 8003306:	f7fd fd68 	bl	8000dda <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 800330a:	200f      	movs	r0, #15
 800330c:	f001 fd72 	bl	8004df4 <malloc>
 8003310:	4b6d      	ldr	r3, [pc, #436]	; (80034c8 <init_peripherals+0x24c>)
 8003312:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 8003314:	2400      	movs	r4, #0
 8003316:	6004      	str	r4, [r0, #0]
 8003318:	6044      	str	r4, [r0, #4]
 800331a:	6084      	str	r4, [r0, #8]
 800331c:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8003320:	2032      	movs	r0, #50	; 0x32
 8003322:	f001 fd67 	bl	8004df4 <malloc>
 8003326:	4b69      	ldr	r3, [pc, #420]	; (80034cc <init_peripherals+0x250>)
 8003328:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 800332a:	2232      	movs	r2, #50	; 0x32
 800332c:	4621      	mov	r1, r4
 800332e:	f001 fd74 	bl	8004e1a <memset>

	uart_command = (uint8_t*)malloc(60);
 8003332:	203c      	movs	r0, #60	; 0x3c
 8003334:	f001 fd5e 	bl	8004df4 <malloc>
 8003338:	4e65      	ldr	r6, [pc, #404]	; (80034d0 <init_peripherals+0x254>)
 800333a:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 800333c:	253c      	movs	r5, #60	; 0x3c
 800333e:	462a      	mov	r2, r5
 8003340:	4621      	mov	r1, r4
 8003342:	f001 fd6a 	bl	8004e1a <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 8003346:	4628      	mov	r0, r5
 8003348:	f001 fd54 	bl	8004df4 <malloc>
 800334c:	4b61      	ldr	r3, [pc, #388]	; (80034d4 <init_peripherals+0x258>)
 800334e:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 8003350:	462a      	mov	r2, r5
 8003352:	4621      	mov	r1, r4
 8003354:	6830      	ldr	r0, [r6, #0]
 8003356:	f001 fd60 	bl	8004e1a <memset>


	set_temp = (uint8_t*)malloc(3);
 800335a:	2003      	movs	r0, #3
 800335c:	f001 fd4a 	bl	8004df4 <malloc>
 8003360:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <init_peripherals+0x25c>)
 8003362:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 8003364:	6004      	str	r4, [r0, #0]

	segment_val =set_temp;
 8003366:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <init_peripherals+0x260>)
 8003368:	6018      	str	r0, [r3, #0]
	//	  memset(segment_val, 0x00, 4);

	ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 800336a:	201c      	movs	r0, #28
 800336c:	f001 fd42 	bl	8004df4 <malloc>
 8003370:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <init_peripherals+0x264>)
 8003372:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 7);
 8003374:	6004      	str	r4, [r0, #0]
 8003376:	f8c0 4003 	str.w	r4, [r0, #3]

	ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 800337a:	201c      	movs	r0, #28
 800337c:	f001 fd3a 	bl	8004df4 <malloc>
 8003380:	4b58      	ldr	r3, [pc, #352]	; (80034e4 <init_peripherals+0x268>)
 8003382:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 7);
 8003384:	6004      	str	r4, [r0, #0]
 8003386:	f8c0 4003 	str.w	r4, [r0, #3]

	voltage_rms =(char*)malloc(3*sizeof(char));
 800338a:	2003      	movs	r0, #3
 800338c:	f001 fd32 	bl	8004df4 <malloc>
 8003390:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <init_peripherals+0x26c>)
 8003392:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 8003394:	8004      	strh	r4, [r0, #0]
 8003396:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 8003398:	2004      	movs	r0, #4
 800339a:	f001 fd2b 	bl	8004df4 <malloc>
 800339e:	4b53      	ldr	r3, [pc, #332]	; (80034ec <init_peripherals+0x270>)
 80033a0:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 80033a2:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 80033a4:	2014      	movs	r0, #20
 80033a6:	f001 fd25 	bl	8004df4 <malloc>
 80033aa:	4a51      	ldr	r2, [pc, #324]	; (80034f0 <init_peripherals+0x274>)
 80033ac:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 80033ae:	6004      	str	r4, [r0, #0]
 80033b0:	6044      	str	r4, [r0, #4]
 80033b2:	6084      	str	r4, [r0, #8]
 80033b4:	60c4      	str	r4, [r0, #12]
 80033b6:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 80033b8:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <init_peripherals+0x278>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	494e      	ldr	r1, [pc, #312]	; (80034f8 <init_peripherals+0x27c>)
 80033be:	f001 fdf1 	bl	8004fa4 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80033c2:	2010      	movs	r0, #16
 80033c4:	f001 fd16 	bl	8004df4 <malloc>
 80033c8:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <init_peripherals+0x280>)
 80033ca:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80033cc:	2010      	movs	r0, #16
 80033ce:	f001 fd11 	bl	8004df4 <malloc>
 80033d2:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <init_peripherals+0x284>)
 80033d4:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 80033d6:	2004      	movs	r0, #4
 80033d8:	f001 fd0c 	bl	8004df4 <malloc>
 80033dc:	4b49      	ldr	r3, [pc, #292]	; (8003504 <init_peripherals+0x288>)
 80033de:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 80033e0:	2004      	movs	r0, #4
 80033e2:	f001 fd07 	bl	8004df4 <malloc>
 80033e6:	4b48      	ldr	r3, [pc, #288]	; (8003508 <init_peripherals+0x28c>)
 80033e8:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 80033ea:	4a48      	ldr	r2, [pc, #288]	; (800350c <init_peripherals+0x290>)
 80033ec:	4b48      	ldr	r3, [pc, #288]	; (8003510 <init_peripherals+0x294>)
 80033ee:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 80033f0:	4a48      	ldr	r2, [pc, #288]	; (8003514 <init_peripherals+0x298>)
 80033f2:	4b49      	ldr	r3, [pc, #292]	; (8003518 <init_peripherals+0x29c>)
 80033f4:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 80033f6:	200f      	movs	r0, #15
 80033f8:	f001 fcfc 	bl	8004df4 <malloc>
 80033fc:	4e47      	ldr	r6, [pc, #284]	; (800351c <init_peripherals+0x2a0>)
 80033fe:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 8003400:	6004      	str	r4, [r0, #0]
 8003402:	6044      	str	r4, [r0, #4]
 8003404:	6084      	str	r4, [r0, #8]
 8003406:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 800340a:	200f      	movs	r0, #15
 800340c:	f001 fcf2 	bl	8004df4 <malloc>
 8003410:	4d43      	ldr	r5, [pc, #268]	; (8003520 <init_peripherals+0x2a4>)
 8003412:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 8003414:	6004      	str	r4, [r0, #0]
 8003416:	6044      	str	r4, [r0, #4]
 8003418:	6084      	str	r4, [r0, #8]
 800341a:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 800341e:	200f      	movs	r0, #15
 8003420:	f001 fce8 	bl	8004df4 <malloc>
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <init_peripherals+0x2a8>)
 8003426:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 8003428:	6004      	str	r4, [r0, #0]
 800342a:	6044      	str	r4, [r0, #4]
 800342c:	6084      	str	r4, [r0, #8]
 800342e:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <init_peripherals+0x2ac>)
 8003434:	6832      	ldr	r2, [r6, #0]
 8003436:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 8003438:	682a      	ldr	r2, [r5, #0]
 800343a:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 800343c:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 800343e:	2014      	movs	r0, #20
 8003440:	f001 fcd8 	bl	8004df4 <malloc>
 8003444:	4b39      	ldr	r3, [pc, #228]	; (800352c <init_peripherals+0x2b0>)
 8003446:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 8003448:	6004      	str	r4, [r0, #0]
 800344a:	6044      	str	r4, [r0, #4]
 800344c:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 800344e:	4b38      	ldr	r3, [pc, #224]	; (8003530 <init_peripherals+0x2b4>)
 8003450:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 8003452:	2018      	movs	r0, #24
 8003454:	f001 fcce 	bl	8004df4 <malloc>
 8003458:	4e36      	ldr	r6, [pc, #216]	; (8003534 <init_peripherals+0x2b8>)
 800345a:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 800345c:	6004      	str	r4, [r0, #0]
 800345e:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 8003460:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 8003462:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 8003464:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003466:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8003468:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 800346a:	2004      	movs	r0, #4
 800346c:	f001 fcc2 	bl	8004df4 <malloc>
 8003470:	4b31      	ldr	r3, [pc, #196]	; (8003538 <init_peripherals+0x2bc>)
 8003472:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 8003474:	2501      	movs	r5, #1
 8003476:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 8003478:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 800347a:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 800347c:	70c4      	strb	r4, [r0, #3]
//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);


	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 800347e:	2046      	movs	r0, #70	; 0x46
 8003480:	f001 fcb8 	bl	8004df4 <malloc>
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <init_peripherals+0x2c0>)
 8003486:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 8003488:	2246      	movs	r2, #70	; 0x46
 800348a:	4621      	mov	r1, r4
 800348c:	f001 fcc5 	bl	8004e1a <memset>


	new_time = malloc(6*sizeof(uint32_t));
 8003490:	2018      	movs	r0, #24
 8003492:	f001 fcaf 	bl	8004df4 <malloc>
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <init_peripherals+0x2c4>)
 8003498:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 800349a:	6004      	str	r4, [r0, #0]
 800349c:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 800349e:	2003      	movs	r0, #3
 80034a0:	f001 fca8 	bl	8004df4 <malloc>
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <init_peripherals+0x2c8>)
 80034a6:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 80034a8:	8004      	strh	r4, [r0, #0]
 80034aa:	7084      	strb	r4, [r0, #2]


	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 80034ac:	462a      	mov	r2, r5
 80034ae:	6831      	ldr	r1, [r6, #0]
 80034b0:	4825      	ldr	r0, [pc, #148]	; (8003548 <init_peripherals+0x2cc>)
 80034b2:	f7fe fe3e 	bl	8002132 <HAL_RTC_GetTime>

	HAL_TIM_Base_Start_IT(&htim2);
 80034b6:	4825      	ldr	r0, [pc, #148]	; (800354c <init_peripherals+0x2d0>)
 80034b8:	f7fe ff51 	bl	800235e <HAL_TIM_Base_Start_IT>
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
 80034be:	bf00      	nop
 80034c0:	48000400 	.word	0x48000400
 80034c4:	48000800 	.word	0x48000800
 80034c8:	20000548 	.word	0x20000548
 80034cc:	20000264 	.word	0x20000264
 80034d0:	2000028c 	.word	0x2000028c
 80034d4:	20000290 	.word	0x20000290
 80034d8:	20000270 	.word	0x20000270
 80034dc:	2000026c 	.word	0x2000026c
 80034e0:	2000021c 	.word	0x2000021c
 80034e4:	20000220 	.word	0x20000220
 80034e8:	200002a0 	.word	0x200002a0
 80034ec:	20000230 	.word	0x20000230
 80034f0:	20000284 	.word	0x20000284
 80034f4:	200002a4 	.word	0x200002a4
 80034f8:	08005938 	.word	0x08005938
 80034fc:	2000029c 	.word	0x2000029c
 8003500:	2000022c 	.word	0x2000022c
 8003504:	20000224 	.word	0x20000224
 8003508:	20000244 	.word	0x20000244
 800350c:	20000014 	.word	0x20000014
 8003510:	20000254 	.word	0x20000254
 8003514:	20000024 	.word	0x20000024
 8003518:	20000298 	.word	0x20000298
 800351c:	20000248 	.word	0x20000248
 8003520:	2000024c 	.word	0x2000024c
 8003524:	20000250 	.word	0x20000250
 8003528:	20000574 	.word	0x20000574
 800352c:	20000258 	.word	0x20000258
 8003530:	20000550 	.word	0x20000550
 8003534:	20000280 	.word	0x20000280
 8003538:	20000234 	.word	0x20000234
 800353c:	20000240 	.word	0x20000240
 8003540:	20000260 	.word	0x20000260
 8003544:	20000278 	.word	0x20000278
 8003548:	20000410 	.word	0x20000410
 800354c:	20000448 	.word	0x20000448

08003550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8003550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003554:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003556:	4b55      	ldr	r3, [pc, #340]	; (80036ac <MX_GPIO_Init+0x15c>)
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800355e:	615a      	str	r2, [r3, #20]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003566:	9201      	str	r2, [sp, #4]
 8003568:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003570:	615a      	str	r2, [r3, #20]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003578:	9202      	str	r2, [sp, #8]
 800357a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800358a:	9203      	str	r2, [sp, #12]
 800358c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003594:	615a      	str	r2, [r3, #20]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 80035a0:	2201      	movs	r2, #1
 80035a2:	2112      	movs	r1, #18
 80035a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a8:	f7fd fc17 	bl	8000dda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80035b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b6:	f7fd fc10 	bl	8000dda <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80035ba:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80036c0 <MX_GPIO_Init+0x170>
 80035be:	2200      	movs	r2, #0
 80035c0:	f246 4178 	movw	r1, #25720	; 0x6478
 80035c4:	4640      	mov	r0, r8
 80035c6:	f7fd fc08 	bl	8000dda <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80035ca:	4e39      	ldr	r6, [pc, #228]	; (80036b0 <MX_GPIO_Init+0x160>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	4630      	mov	r0, r6
 80035d2:	f7fd fc02 	bl	8000dda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80035d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <MX_GPIO_Init+0x164>)
 80035de:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2400      	movs	r4, #0
 80035e2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e4:	a905      	add	r1, sp, #20
 80035e6:	4630      	mov	r0, r6
 80035e8:	f7fd fb26 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80035ec:	2303      	movs	r3, #3
 80035ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f4:	a905      	add	r1, sp, #20
 80035f6:	4630      	mov	r0, r6
 80035f8:	f7fd fb1e 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 80035fc:	2501      	movs	r5, #1
 80035fe:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003600:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <MX_GPIO_Init+0x168>)
 8003602:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003604:	2702      	movs	r7, #2
 8003606:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8003608:	a905      	add	r1, sp, #20
 800360a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800360e:	f7fd fb13 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 8003612:	2312      	movs	r3, #18
 8003614:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003616:	2311      	movs	r3, #17
 8003618:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800361a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361e:	a905      	add	r1, sp, #20
 8003620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003624:	f7fd fb08 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8003628:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800362c:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	a905      	add	r1, sp, #20
 8003636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800363a:	f7fd fafd 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800363e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003640:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003644:	a905      	add	r1, sp, #20
 8003646:	4640      	mov	r0, r8
 8003648:	f7fd faf6 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 800364c:	f246 4378 	movw	r3, #25720	; 0x6478
 8003650:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003652:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003658:	a905      	add	r1, sp, #20
 800365a:	4640      	mov	r0, r8
 800365c:	f7fd faec 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 8003660:	2340      	movs	r3, #64	; 0x40
 8003662:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <MX_GPIO_Init+0x16c>)
 8003666:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003668:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 800366a:	a905      	add	r1, sp, #20
 800366c:	4630      	mov	r0, r6
 800366e:	f7fd fae3 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003676:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 800367c:	a905      	add	r1, sp, #20
 800367e:	4630      	mov	r0, r6
 8003680:	f7fd fada 	bl	8000c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003684:	4622      	mov	r2, r4
 8003686:	4621      	mov	r1, r4
 8003688:	2006      	movs	r0, #6
 800368a:	f7fd f9af 	bl	80009ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800368e:	2006      	movs	r0, #6
 8003690:	f7fd f9de 	bl	8000a50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8003694:	462a      	mov	r2, r5
 8003696:	4621      	mov	r1, r4
 8003698:	2017      	movs	r0, #23
 800369a:	f7fd f9a7 	bl	80009ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800369e:	2017      	movs	r0, #23
 80036a0:	f7fd f9d6 	bl	8000a50 <HAL_NVIC_EnableIRQ>

}
 80036a4:	b00a      	add	sp, #40	; 0x28
 80036a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	48000800 	.word	0x48000800
 80036b4:	10110000 	.word	0x10110000
 80036b8:	10210000 	.word	0x10210000
 80036bc:	10310000 	.word	0x10310000
 80036c0:	48000400 	.word	0x48000400

080036c4 <MX_DMA_Init>:
{
 80036c4:	b500      	push	{lr}
 80036c6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <MX_DMA_Init+0x30>)
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	615a      	str	r2, [r3, #20]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 80036dc:	2201      	movs	r2, #1
 80036de:	2100      	movs	r1, #0
 80036e0:	200c      	movs	r0, #12
 80036e2:	f7fd f983 	bl	80009ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80036e6:	200c      	movs	r0, #12
 80036e8:	f7fd f9b2 	bl	8000a50 <HAL_NVIC_EnableIRQ>
}
 80036ec:	b003      	add	sp, #12
 80036ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000

080036f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80036f8:	4770      	bx	lr

080036fa <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80036fa:	e7fe      	b.n	80036fa <_Error_Handler>

080036fc <MX_TIM2_Init>:
{
 80036fc:	b500      	push	{lr}
 80036fe:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8003700:	4818      	ldr	r0, [pc, #96]	; (8003764 <MX_TIM2_Init+0x68>)
 8003702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003706:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 8003708:	2301      	movs	r3, #1
 800370a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800370c:	2300      	movs	r3, #0
 800370e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 326400;
 8003710:	4a15      	ldr	r2, [pc, #84]	; (8003768 <MX_TIM2_Init+0x6c>)
 8003712:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003714:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003716:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003718:	f7fe ff48 	bl	80025ac <HAL_TIM_Base_Init>
 800371c:	b998      	cbnz	r0, 8003746 <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800371e:	a908      	add	r1, sp, #32
 8003720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003724:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003728:	480e      	ldr	r0, [pc, #56]	; (8003764 <MX_TIM2_Init+0x68>)
 800372a:	f7fe ff65 	bl	80025f8 <HAL_TIM_ConfigClockSource>
 800372e:	b978      	cbnz	r0, 8003750 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003734:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003736:	a901      	add	r1, sp, #4
 8003738:	480a      	ldr	r0, [pc, #40]	; (8003764 <MX_TIM2_Init+0x68>)
 800373a:	f7fe ffe9 	bl	8002710 <HAL_TIMEx_MasterConfigSynchronization>
 800373e:	b960      	cbnz	r0, 800375a <MX_TIM2_Init+0x5e>
}
 8003740:	b009      	add	sp, #36	; 0x24
 8003742:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003746:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800374a:	4808      	ldr	r0, [pc, #32]	; (800376c <MX_TIM2_Init+0x70>)
 800374c:	f7ff ffd5 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003750:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003754:	4805      	ldr	r0, [pc, #20]	; (800376c <MX_TIM2_Init+0x70>)
 8003756:	f7ff ffd0 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800375a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800375e:	4803      	ldr	r0, [pc, #12]	; (800376c <MX_TIM2_Init+0x70>)
 8003760:	f7ff ffcb 	bl	80036fa <_Error_Handler>
 8003764:	20000448 	.word	0x20000448
 8003768:	0004fb00 	.word	0x0004fb00
 800376c:	0800593c 	.word	0x0800593c

08003770 <MX_USART1_UART_Init>:
{
 8003770:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003772:	480c      	ldr	r0, [pc, #48]	; (80037a4 <MX_USART1_UART_Init+0x34>)
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <MX_USART1_UART_Init+0x38>)
 8003776:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003778:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800377c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800377e:	2300      	movs	r3, #0
 8003780:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003782:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003784:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003786:	220c      	movs	r2, #12
 8003788:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800378a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800378c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800378e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003790:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003792:	f7ff fa28 	bl	8002be6 <HAL_UART_Init>
 8003796:	b900      	cbnz	r0, 800379a <MX_USART1_UART_Init+0x2a>
 8003798:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800379a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800379e:	4803      	ldr	r0, [pc, #12]	; (80037ac <MX_USART1_UART_Init+0x3c>)
 80037a0:	f7ff ffab 	bl	80036fa <_Error_Handler>
 80037a4:	200003a0 	.word	0x200003a0
 80037a8:	40013800 	.word	0x40013800
 80037ac:	0800593c 	.word	0x0800593c

080037b0 <MX_ADC2_Init>:
{
 80037b0:	b500      	push	{lr}
 80037b2:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 80037b4:	482d      	ldr	r0, [pc, #180]	; (800386c <MX_ADC2_Init+0xbc>)
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <MX_ADC2_Init+0xc0>)
 80037b8:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037ba:	2300      	movs	r3, #0
 80037bc:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80037be:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80037c0:	2201      	movs	r2, #1
 80037c2:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80037c4:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80037c6:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037c8:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037ca:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037cc:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 80037ce:	2104      	movs	r1, #4
 80037d0:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80037d2:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037d4:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80037d6:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037d8:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80037da:	f7fc fddd 	bl	8000398 <HAL_ADC_Init>
 80037de:	bb58      	cbnz	r0, 8003838 <MX_ADC2_Init+0x88>
  sConfig.Channel = ADC_CHANNEL_12;
 80037e0:	230c      	movs	r3, #12
 80037e2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037e8:	2300      	movs	r3, #0
 80037ea:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80037ec:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80037ee:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80037f0:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80037f2:	4669      	mov	r1, sp
 80037f4:	481d      	ldr	r0, [pc, #116]	; (800386c <MX_ADC2_Init+0xbc>)
 80037f6:	f7fc ff25 	bl	8000644 <HAL_ADC_ConfigChannel>
 80037fa:	bb10      	cbnz	r0, 8003842 <MX_ADC2_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_15;
 80037fc:	230f      	movs	r3, #15
 80037fe:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003800:	2302      	movs	r3, #2
 8003802:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003804:	4669      	mov	r1, sp
 8003806:	4819      	ldr	r0, [pc, #100]	; (800386c <MX_ADC2_Init+0xbc>)
 8003808:	f7fc ff1c 	bl	8000644 <HAL_ADC_ConfigChannel>
 800380c:	b9f0      	cbnz	r0, 800384c <MX_ADC2_Init+0x9c>
  sConfig.Channel = ADC_CHANNEL_12;
 800380e:	230c      	movs	r3, #12
 8003810:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003812:	2303      	movs	r3, #3
 8003814:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003816:	4669      	mov	r1, sp
 8003818:	4814      	ldr	r0, [pc, #80]	; (800386c <MX_ADC2_Init+0xbc>)
 800381a:	f7fc ff13 	bl	8000644 <HAL_ADC_ConfigChannel>
 800381e:	b9d0      	cbnz	r0, 8003856 <MX_ADC2_Init+0xa6>
  sConfig.Channel = ADC_CHANNEL_15;
 8003820:	230f      	movs	r3, #15
 8003822:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003824:	2304      	movs	r3, #4
 8003826:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003828:	4669      	mov	r1, sp
 800382a:	4810      	ldr	r0, [pc, #64]	; (800386c <MX_ADC2_Init+0xbc>)
 800382c:	f7fc ff0a 	bl	8000644 <HAL_ADC_ConfigChannel>
 8003830:	b9b0      	cbnz	r0, 8003860 <MX_ADC2_Init+0xb0>
}
 8003832:	b007      	add	sp, #28
 8003834:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003838:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800383c:	480d      	ldr	r0, [pc, #52]	; (8003874 <MX_ADC2_Init+0xc4>)
 800383e:	f7ff ff5c 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003842:	f240 1137 	movw	r1, #311	; 0x137
 8003846:	480b      	ldr	r0, [pc, #44]	; (8003874 <MX_ADC2_Init+0xc4>)
 8003848:	f7ff ff57 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800384c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003850:	4808      	ldr	r0, [pc, #32]	; (8003874 <MX_ADC2_Init+0xc4>)
 8003852:	f7ff ff52 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003856:	f240 1149 	movw	r1, #329	; 0x149
 800385a:	4806      	ldr	r0, [pc, #24]	; (8003874 <MX_ADC2_Init+0xc4>)
 800385c:	f7ff ff4d 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003860:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8003864:	4803      	ldr	r0, [pc, #12]	; (8003874 <MX_ADC2_Init+0xc4>)
 8003866:	f7ff ff48 	bl	80036fa <_Error_Handler>
 800386a:	bf00      	nop
 800386c:	200002b8 	.word	0x200002b8
 8003870:	50000100 	.word	0x50000100
 8003874:	0800593c 	.word	0x0800593c

08003878 <MX_RTC_Init>:
{
 8003878:	b500      	push	{lr}
 800387a:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 800387c:	482c      	ldr	r0, [pc, #176]	; (8003930 <MX_RTC_Init+0xb8>)
 800387e:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <MX_RTC_Init+0xbc>)
 8003880:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8003882:	2100      	movs	r1, #0
 8003884:	f7fe fd37 	bl	80022f6 <HAL_RTCEx_BKUPRead>
 8003888:	f243 23f2 	movw	r3, #13042	; 0x32f2
 800388c:	4298      	cmp	r0, r3
 800388e:	d037      	beq.n	8003900 <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003890:	4827      	ldr	r0, [pc, #156]	; (8003930 <MX_RTC_Init+0xb8>)
 8003892:	2300      	movs	r3, #0
 8003894:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003896:	227f      	movs	r2, #127	; 0x7f
 8003898:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800389a:	22ff      	movs	r2, #255	; 0xff
 800389c:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800389e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80038a0:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80038a2:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80038a4:	f7fe fae3 	bl	8001e6e <HAL_RTC_Init>
 80038a8:	bb68      	cbnz	r0, 8003906 <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 80038b0:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 80038b4:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038b8:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038ba:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80038bc:	2201      	movs	r2, #1
 80038be:	a901      	add	r1, sp, #4
 80038c0:	481b      	ldr	r0, [pc, #108]	; (8003930 <MX_RTC_Init+0xb8>)
 80038c2:	f7fe fb41 	bl	8001f48 <HAL_RTC_SetTime>
 80038c6:	bb18      	cbnz	r0, 8003910 <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80038c8:	2201      	movs	r2, #1
 80038ca:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 80038ce:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 80038d2:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80038dc:	4669      	mov	r1, sp
 80038de:	4814      	ldr	r0, [pc, #80]	; (8003930 <MX_RTC_Init+0xb8>)
 80038e0:	f7fe fbb1 	bl	8002046 <HAL_RTC_SetDate>
 80038e4:	b9c8      	cbnz	r0, 800391a <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80038e6:	2200      	movs	r2, #0
 80038e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038ec:	4810      	ldr	r0, [pc, #64]	; (8003930 <MX_RTC_Init+0xb8>)
 80038ee:	f7fe fc6d 	bl	80021cc <HAL_RTCEx_SetWakeUpTimer_IT>
 80038f2:	b9b8      	cbnz	r0, 8003924 <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 80038f4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80038f8:	2100      	movs	r1, #0
 80038fa:	480d      	ldr	r0, [pc, #52]	; (8003930 <MX_RTC_Init+0xb8>)
 80038fc:	f7fe fcf6 	bl	80022ec <HAL_RTCEx_BKUPWrite>
}
 8003900:	b007      	add	sp, #28
 8003902:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003906:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800390a:	480b      	ldr	r0, [pc, #44]	; (8003938 <MX_RTC_Init+0xc0>)
 800390c:	f7ff fef5 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003910:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003914:	4808      	ldr	r0, [pc, #32]	; (8003938 <MX_RTC_Init+0xc0>)
 8003916:	f7ff fef0 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800391a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800391e:	4806      	ldr	r0, [pc, #24]	; (8003938 <MX_RTC_Init+0xc0>)
 8003920:	f7ff feeb 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003924:	f240 11a9 	movw	r1, #425	; 0x1a9
 8003928:	4803      	ldr	r0, [pc, #12]	; (8003938 <MX_RTC_Init+0xc0>)
 800392a:	f7ff fee6 	bl	80036fa <_Error_Handler>
 800392e:	bf00      	nop
 8003930:	20000410 	.word	0x20000410
 8003934:	40002800 	.word	0x40002800
 8003938:	0800593c 	.word	0x0800593c

0800393c <MX_I2C1_Init>:
{
 800393c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800393e:	4815      	ldr	r0, [pc, #84]	; (8003994 <MX_I2C1_Init+0x58>)
 8003940:	4b15      	ldr	r3, [pc, #84]	; (8003998 <MX_I2C1_Init+0x5c>)
 8003942:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <MX_I2C1_Init+0x60>)
 8003946:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800394c:	2201      	movs	r2, #1
 800394e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003950:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003952:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003954:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003956:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003958:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800395a:	f7fd fb72 	bl	8001042 <HAL_I2C_Init>
 800395e:	b950      	cbnz	r0, 8003976 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003960:	2100      	movs	r1, #0
 8003962:	480c      	ldr	r0, [pc, #48]	; (8003994 <MX_I2C1_Init+0x58>)
 8003964:	f7fd fcba 	bl	80012dc <HAL_I2CEx_ConfigAnalogFilter>
 8003968:	b950      	cbnz	r0, 8003980 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800396a:	2100      	movs	r1, #0
 800396c:	4809      	ldr	r0, [pc, #36]	; (8003994 <MX_I2C1_Init+0x58>)
 800396e:	f7fd fce3 	bl	8001338 <HAL_I2CEx_ConfigDigitalFilter>
 8003972:	b950      	cbnz	r0, 800398a <MX_I2C1_Init+0x4e>
 8003974:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003976:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800397a:	4809      	ldr	r0, [pc, #36]	; (80039a0 <MX_I2C1_Init+0x64>)
 800397c:	f7ff febd 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003980:	f240 116d 	movw	r1, #365	; 0x16d
 8003984:	4806      	ldr	r0, [pc, #24]	; (80039a0 <MX_I2C1_Init+0x64>)
 8003986:	f7ff feb8 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800398a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800398e:	4804      	ldr	r0, [pc, #16]	; (80039a0 <MX_I2C1_Init+0x64>)
 8003990:	f7ff feb3 	bl	80036fa <_Error_Handler>
 8003994:	2000030c 	.word	0x2000030c
 8003998:	40005400 	.word	0x40005400
 800399c:	2000090e 	.word	0x2000090e
 80039a0:	0800593c 	.word	0x0800593c

080039a4 <SystemClock_Config>:
{
 80039a4:	b500      	push	{lr}
 80039a6:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 80039a8:	f7fd fcf2 	bl	8001390 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80039ac:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <SystemClock_Config+0xb4>)
 80039ae:	6a13      	ldr	r3, [r2, #32]
 80039b0:	f023 0318 	bic.w	r3, r3, #24
 80039b4:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80039b6:	2306      	movs	r3, #6
 80039b8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80039ba:	2301      	movs	r3, #1
 80039bc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039be:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80039c0:	2310      	movs	r3, #16
 80039c2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039c4:	2302      	movs	r3, #2
 80039c6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039c8:	2300      	movs	r3, #0
 80039ca:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80039cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80039d0:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039d2:	a80c      	add	r0, sp, #48	; 0x30
 80039d4:	f7fd fce4 	bl	80013a0 <HAL_RCC_OscConfig>
 80039d8:	bb80      	cbnz	r0, 8003a3c <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039da:	230f      	movs	r3, #15
 80039dc:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039de:	2102      	movs	r1, #2
 80039e0:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ea:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039ec:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039ee:	a807      	add	r0, sp, #28
 80039f0:	f7fe f814 	bl	8001a1c <HAL_RCC_ClockConfig>
 80039f4:	bb30      	cbnz	r0, 8003a44 <SystemClock_Config+0xa0>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80039f6:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <SystemClock_Config+0xb8>)
 80039f8:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80039fa:	2300      	movs	r3, #0
 80039fc:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 80039fe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003a02:	9204      	str	r2, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003a04:	9303      	str	r3, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a0a:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a0c:	4668      	mov	r0, sp
 8003a0e:	f7fe f921 	bl	8001c54 <HAL_RCCEx_PeriphCLKConfig>
 8003a12:	b9d8      	cbnz	r0, 8003a4c <SystemClock_Config+0xa8>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003a14:	f7fe f8ec 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <SystemClock_Config+0xbc>)
 8003a1a:	fba3 3000 	umull	r3, r0, r3, r0
 8003a1e:	0980      	lsrs	r0, r0, #6
 8003a20:	f7fd f822 	bl	8000a68 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003a24:	2004      	movs	r0, #4
 8003a26:	f7fd f835 	bl	8000a94 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a32:	f7fc ffdb 	bl	80009ec <HAL_NVIC_SetPriority>
}
 8003a36:	b017      	add	sp, #92	; 0x5c
 8003a38:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003a3c:	21ea      	movs	r1, #234	; 0xea
 8003a3e:	4809      	ldr	r0, [pc, #36]	; (8003a64 <SystemClock_Config+0xc0>)
 8003a40:	f7ff fe5b 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003a44:	21f8      	movs	r1, #248	; 0xf8
 8003a46:	4807      	ldr	r0, [pc, #28]	; (8003a64 <SystemClock_Config+0xc0>)
 8003a48:	f7ff fe57 	bl	80036fa <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003a4c:	f240 1103 	movw	r1, #259	; 0x103
 8003a50:	4804      	ldr	r0, [pc, #16]	; (8003a64 <SystemClock_Config+0xc0>)
 8003a52:	f7ff fe52 	bl	80036fa <_Error_Handler>
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	000100a1 	.word	0x000100a1
 8003a60:	10624dd3 	.word	0x10624dd3
 8003a64:	0800593c 	.word	0x0800593c

08003a68 <main>:
{
 8003a68:	b510      	push	{r4, lr}
  HAL_Init();
 8003a6a:	f7fc fc1f 	bl	80002ac <HAL_Init>
  SystemClock_Config();
 8003a6e:	f7ff ff99 	bl	80039a4 <SystemClock_Config>
  MX_GPIO_Init();
 8003a72:	f7ff fd6d 	bl	8003550 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a76:	f7ff fe25 	bl	80036c4 <MX_DMA_Init>
  MX_TIM2_Init();
 8003a7a:	f7ff fe3f 	bl	80036fc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003a7e:	f7ff fe77 	bl	8003770 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8003a82:	f7ff fe95 	bl	80037b0 <MX_ADC2_Init>
  MX_RTC_Init();
 8003a86:	f7ff fef7 	bl	8003878 <MX_RTC_Init>
  MX_I2C1_Init();
 8003a8a:	f7ff ff57 	bl	800393c <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4821      	ldr	r0, [pc, #132]	; (8003b18 <main+0xb0>)
 8003a92:	f7fc fd8f 	bl	80005b4 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8003a96:	f7ff fbf1 	bl	800327c <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	491f      	ldr	r1, [pc, #124]	; (8003b1c <main+0xb4>)
 8003a9e:	4820      	ldr	r0, [pc, #128]	; (8003b20 <main+0xb8>)
 8003aa0:	f7fe fe95 	bl	80027ce <HAL_UART_Receive_IT>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,2048,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aaa:	481e      	ldr	r0, [pc, #120]	; (8003b24 <main+0xbc>)
 8003aac:	f7fe fb8e 	bl	80021cc <HAL_RTCEx_SetWakeUpTimer_IT>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	2025      	movs	r0, #37	; 0x25
 8003ab6:	f7fc ff99 	bl	80009ec <HAL_NVIC_SetPriority>
  int i2c_state = init_iqs263();
 8003aba:	f7ff fa19 	bl	8002ef0 <init_iqs263>
 8003abe:	4604      	mov	r4, r0
  while (i2c_state)
 8003ac0:	e011      	b.n	8003ae6 <main+0x7e>
		  rx_flag = 0;
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <main+0xc0>)
 8003ac6:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8003ac8:	f000 fc96 	bl	80043f8 <uart_comms>
 8003acc:	e012      	b.n	8003af4 <main+0x8c>
		  systick_flag = 0;
 8003ace:	2200      	movs	r2, #0
 8003ad0:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <main+0xc4>)
 8003ad2:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 8003ad4:	f000 f830 	bl	8003b38 <seven_segment>
 8003ad8:	e010      	b.n	8003afc <main+0x94>
	  if(flash_counter == 10000){
 8003ada:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <main+0xc8>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	f242 7310 	movw	r3, #10000	; 0x2710
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d012      	beq.n	8003b0c <main+0xa4>
  while (i2c_state)
 8003ae6:	b1ac      	cbz	r4, 8003b14 <main+0xac>
	  handleEvents();
 8003ae8:	f7ff fb8e 	bl	8003208 <handleEvents>
	  if(rx_flag == 1 ){ 	// UART Comms
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <main+0xc0>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d0e6      	beq.n	8003ac2 <main+0x5a>
	  if(systick_flag == 1){	// Seven Segment
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <main+0xc4>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d0e8      	beq.n	8003ace <main+0x66>
	  if(touch_flag == 1 ){
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <main+0xcc>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d1ea      	bne.n	8003ada <main+0x72>
		  touch_flag = 0;
 8003b04:	2200      	movs	r2, #0
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <main+0xcc>)
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e7e6      	b.n	8003ada <main+0x72>
		  flash_counter = 0;
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <main+0xc8>)
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e7e8      	b.n	8003ae6 <main+0x7e>
}
 8003b14:	2000      	movs	r0, #0
 8003b16:	bd10      	pop	{r4, pc}
 8003b18:	200002b8 	.word	0x200002b8
 8003b1c:	2000054c 	.word	0x2000054c
 8003b20:	200003a0 	.word	0x200003a0
 8003b24:	20000410 	.word	0x20000410
 8003b28:	20000269 	.word	0x20000269
 8003b2c:	20000275 	.word	0x20000275
 8003b30:	2000023c 	.word	0x2000023c
 8003b34:	20000288 	.word	0x20000288

08003b38 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8003b38:	b510      	push	{r4, lr}

	if(segment_counter == 0){	// Left Most Digit
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <seven_segment+0x12c>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b133      	cbz	r3, 8003b4e <seven_segment+0x16>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d027      	beq.n	8003b94 <seven_segment+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d048      	beq.n	8003bda <seven_segment+0xa2>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d069      	beq.n	8003c20 <seven_segment+0xe8>
 8003b4c:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8003b4e:	4c46      	ldr	r4, [pc, #280]	; (8003c68 <seven_segment+0x130>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fd f93f 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	2110      	movs	r1, #16
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7fd f93a 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003b66:	2201      	movs	r2, #1
 8003b68:	2120      	movs	r1, #32
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f7fd f935 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003b70:	2201      	movs	r2, #1
 8003b72:	2108      	movs	r1, #8
 8003b74:	4620      	mov	r0, r4
 8003b76:	f7fd f930 	bl	8000dda <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 8003b7a:	4c3a      	ldr	r4, [pc, #232]	; (8003c64 <seven_segment+0x12c>)
 8003b7c:	7823      	ldrb	r3, [r4, #0]
 8003b7e:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <seven_segment+0x134>)
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	5cd0      	ldrb	r0, [r2, r3]
 8003b84:	3830      	subs	r0, #48	; 0x30
 8003b86:	b2c0      	uxtb	r0, r0
 8003b88:	f000 f872 	bl	8003c70 <seven_segment_display>
		segment_counter += 1;
 8003b8c:	7823      	ldrb	r3, [r4, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	7023      	strb	r3, [r4, #0]
 8003b92:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003b94:	4c34      	ldr	r4, [pc, #208]	; (8003c68 <seven_segment+0x130>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f7fd f91c 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2110      	movs	r1, #16
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7fd f917 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003bac:	2201      	movs	r2, #1
 8003bae:	2120      	movs	r1, #32
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7fd f912 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	2108      	movs	r1, #8
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7fd f90d 	bl	8000dda <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003bc0:	4c28      	ldr	r4, [pc, #160]	; (8003c64 <seven_segment+0x12c>)
 8003bc2:	7823      	ldrb	r3, [r4, #0]
 8003bc4:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <seven_segment+0x134>)
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	5cd0      	ldrb	r0, [r2, r3]
 8003bca:	3830      	subs	r0, #48	; 0x30
 8003bcc:	b2c0      	uxtb	r0, r0
 8003bce:	f000 f84f 	bl	8003c70 <seven_segment_display>
		segment_counter += 1;
 8003bd2:	7823      	ldrb	r3, [r4, #0]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	7023      	strb	r3, [r4, #0]
 8003bd8:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003bda:	4c23      	ldr	r4, [pc, #140]	; (8003c68 <seven_segment+0x130>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7fd f8f9 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003be8:	2201      	movs	r2, #1
 8003bea:	2110      	movs	r1, #16
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7fd f8f4 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2120      	movs	r1, #32
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f7fd f8ef 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2108      	movs	r1, #8
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7fd f8ea 	bl	8000dda <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003c06:	4c17      	ldr	r4, [pc, #92]	; (8003c64 <seven_segment+0x12c>)
 8003c08:	7823      	ldrb	r3, [r4, #0]
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <seven_segment+0x134>)
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	5cd0      	ldrb	r0, [r2, r3]
 8003c10:	3830      	subs	r0, #48	; 0x30
 8003c12:	b2c0      	uxtb	r0, r0
 8003c14:	f000 f82c 	bl	8003c70 <seven_segment_display>
		segment_counter += 1;
 8003c18:	7823      	ldrb	r3, [r4, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	7023      	strb	r3, [r4, #0]
 8003c1e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003c20:	4c11      	ldr	r4, [pc, #68]	; (8003c68 <seven_segment+0x130>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7fd f8d6 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003c2e:	2201      	movs	r2, #1
 8003c30:	2110      	movs	r1, #16
 8003c32:	4620      	mov	r0, r4
 8003c34:	f7fd f8d1 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2120      	movs	r1, #32
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f8cc 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8003c42:	2200      	movs	r2, #0
 8003c44:	2108      	movs	r1, #8
 8003c46:	4620      	mov	r0, r4
 8003c48:	f7fd f8c7 	bl	8000dda <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8003c4c:	4c05      	ldr	r4, [pc, #20]	; (8003c64 <seven_segment+0x12c>)
 8003c4e:	7823      	ldrb	r3, [r4, #0]
 8003c50:	4a06      	ldr	r2, [pc, #24]	; (8003c6c <seven_segment+0x134>)
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	5cd0      	ldrb	r0, [r2, r3]
 8003c56:	3830      	subs	r0, #48	; 0x30
 8003c58:	b2c0      	uxtb	r0, r0
 8003c5a:	f000 f809 	bl	8003c70 <seven_segment_display>
		segment_counter = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	7023      	strb	r3, [r4, #0]
	}
}
 8003c62:	e773      	b.n	8003b4c <seven_segment+0x14>
 8003c64:	2000026a 	.word	0x2000026a
 8003c68:	48000400 	.word	0x48000400
 8003c6c:	2000026c 	.word	0x2000026c

08003c70 <seven_segment_display>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8003c70:	b510      	push	{r4, lr}
	switch(num){
 8003c72:	2809      	cmp	r0, #9
 8003c74:	f200 81d2 	bhi.w	800401c <seven_segment_display+0x3ac>
 8003c78:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003c7c:	000a019f 	.word	0x000a019f
 8003c80:	00600035 	.word	0x00600035
 8003c84:	00bc008b 	.word	0x00bc008b
 8003c88:	011200e7 	.word	0x011200e7
 8003c8c:	016e013d 	.word	0x016e013d
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2140      	movs	r1, #64	; 0x40
 8003c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c98:	f7fd f89f 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca4:	f7fd f899 	bl	8000dda <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8003ca8:	2201      	movs	r2, #1
 8003caa:	2120      	movs	r1, #32
 8003cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cb0:	f7fd f893 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cbe:	f7fd f88c 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ccc:	f7fd f885 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2140      	movs	r1, #64	; 0x40
 8003cd4:	48ea      	ldr	r0, [pc, #936]	; (8004080 <seven_segment_display+0x410>)
 8003cd6:	f7fd f880 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8003cda:	2201      	movs	r2, #1
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	48e9      	ldr	r0, [pc, #932]	; (8004084 <seven_segment_display+0x414>)
 8003ce0:	f7fd f87b 	bl	8000dda <HAL_GPIO_WritePin>
		break;
 8003ce4:	bd10      	pop	{r4, pc}
	case 2:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2120      	movs	r1, #32
 8003cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cee:	f7fd f874 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cfa:	f7fd f86e 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d08:	f7fd f867 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	48dc      	ldr	r0, [pc, #880]	; (8004084 <seven_segment_display+0x414>)
 8003d12:	f7fd f862 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003d16:	2200      	movs	r2, #0
 8003d18:	2140      	movs	r1, #64	; 0x40
 8003d1a:	48d9      	ldr	r0, [pc, #868]	; (8004080 <seven_segment_display+0x410>)
 8003d1c:	f7fd f85d 	bl	8000dda <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003d20:	2201      	movs	r2, #1
 8003d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d2a:	f7fd f856 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8003d2e:	2201      	movs	r2, #1
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d36:	f7fd f850 	bl	8000dda <HAL_GPIO_WritePin>
		break;
 8003d3a:	bd10      	pop	{r4, pc}

	case 3:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2120      	movs	r1, #32
 8003d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d44:	f7fd f849 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d50:	f7fd f843 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003d54:	2200      	movs	r2, #0
 8003d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5e:	f7fd f83c 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003d62:	2200      	movs	r2, #0
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d6a:	f7fd f836 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2140      	movs	r1, #64	; 0x40
 8003d72:	48c3      	ldr	r0, [pc, #780]	; (8004080 <seven_segment_display+0x410>)
 8003d74:	f7fd f831 	bl	8000dda <HAL_GPIO_WritePin>

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d82:	f7fd f82a 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003d86:	2201      	movs	r2, #1
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	48be      	ldr	r0, [pc, #760]	; (8004084 <seven_segment_display+0x414>)
 8003d8c:	f7fd f825 	bl	8000dda <HAL_GPIO_WritePin>

		break;
 8003d90:	bd10      	pop	{r4, pc}
	case 4:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2140      	movs	r1, #64	; 0x40
 8003d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d9a:	f7fd f81e 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da8:	f7fd f817 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003dac:	2200      	movs	r2, #0
 8003dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003db6:	f7fd f810 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc2:	f7fd f80a 	bl	8000dda <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	2120      	movs	r1, #32
 8003dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dce:	f7fd f804 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	48ab      	ldr	r0, [pc, #684]	; (8004084 <seven_segment_display+0x414>)
 8003dd8:	f7fc ffff 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8003ddc:	2201      	movs	r2, #1
 8003dde:	2120      	movs	r1, #32
 8003de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de4:	f7fc fff9 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003de8:	2201      	movs	r2, #1
 8003dea:	2140      	movs	r1, #64	; 0x40
 8003dec:	48a4      	ldr	r0, [pc, #656]	; (8004080 <seven_segment_display+0x410>)
 8003dee:	f7fc fff4 	bl	8000dda <HAL_GPIO_WritePin>

		break;
 8003df2:	bd10      	pop	{r4, pc}
	case 5:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003df4:	2200      	movs	r2, #0
 8003df6:	2120      	movs	r1, #32
 8003df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dfc:	f7fc ffed 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e0a:	f7fc ffe6 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e18:	f7fc ffdf 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e24:	f7fc ffd9 	bl	8000dda <HAL_GPIO_WritePin>

		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2140      	movs	r1, #64	; 0x40
 8003e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e30:	f7fc ffd3 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003e34:	2201      	movs	r2, #1
 8003e36:	2180      	movs	r1, #128	; 0x80
 8003e38:	4892      	ldr	r0, [pc, #584]	; (8004084 <seven_segment_display+0x414>)
 8003e3a:	f7fc ffce 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	488f      	ldr	r0, [pc, #572]	; (8004080 <seven_segment_display+0x410>)
 8003e44:	f7fc ffc9 	bl	8000dda <HAL_GPIO_WritePin>
		break;
 8003e48:	bd10      	pop	{r4, pc}

	case 6:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e52:	f7fc ffc2 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003e56:	2200      	movs	r2, #0
 8003e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e60:	f7fc ffbb 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003e64:	2200      	movs	r2, #0
 8003e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e6e:	f7fc ffb4 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e7a:	f7fc ffae 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	487f      	ldr	r0, [pc, #508]	; (8004080 <seven_segment_display+0x410>)
 8003e84:	f7fc ffa9 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	487d      	ldr	r0, [pc, #500]	; (8004084 <seven_segment_display+0x414>)
 8003e8e:	f7fc ffa4 	bl	8000dda <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8003e92:	2201      	movs	r2, #1
 8003e94:	2140      	movs	r1, #64	; 0x40
 8003e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9a:	f7fc ff9e 	bl	8000dda <HAL_GPIO_WritePin>
		break;
 8003e9e:	bd10      	pop	{r4, pc}
	case 7:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2120      	movs	r1, #32
 8003ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea8:	f7fc ff97 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003eac:	2200      	movs	r2, #0
 8003eae:	2140      	movs	r1, #64	; 0x40
 8003eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb4:	f7fc ff91 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	; 0x80
 8003ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec0:	f7fc ff8b 	bl	8000dda <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	486e      	ldr	r0, [pc, #440]	; (8004084 <seven_segment_display+0x414>)
 8003eca:	f7fc ff86 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed8:	f7fc ff7f 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8003edc:	2201      	movs	r2, #1
 8003ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee6:	f7fc ff78 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003eea:	2201      	movs	r2, #1
 8003eec:	2140      	movs	r1, #64	; 0x40
 8003eee:	4864      	ldr	r0, [pc, #400]	; (8004080 <seven_segment_display+0x410>)
 8003ef0:	f7fc ff73 	bl	8000dda <HAL_GPIO_WritePin>

		break;
 8003ef4:	bd10      	pop	{r4, pc}
	case 8:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2140      	movs	r1, #64	; 0x40
 8003efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003efe:	f7fc ff6c 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003f02:	2200      	movs	r2, #0
 8003f04:	2120      	movs	r1, #32
 8003f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f0a:	f7fc ff66 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003f0e:	4c5c      	ldr	r4, [pc, #368]	; (8004080 <seven_segment_display+0x410>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	2140      	movs	r1, #64	; 0x40
 8003f14:	4620      	mov	r0, r4
 8003f16:	f7fc ff60 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2180      	movs	r1, #128	; 0x80
 8003f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f22:	f7fc ff5a 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003f26:	2200      	movs	r2, #0
 8003f28:	2140      	movs	r1, #64	; 0x40
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7fc ff55 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003f30:	2200      	movs	r2, #0
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	4853      	ldr	r0, [pc, #332]	; (8004084 <seven_segment_display+0x414>)
 8003f36:	f7fc ff50 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f44:	f7fc ff49 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f52:	f7fc ff42 	bl	8000dda <HAL_GPIO_WritePin>
		break;
 8003f56:	bd10      	pop	{r4, pc}
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2120      	movs	r1, #32
 8003f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f60:	f7fc ff3b 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003f64:	4c46      	ldr	r4, [pc, #280]	; (8004080 <seven_segment_display+0x410>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	2140      	movs	r1, #64	; 0x40
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7fc ff35 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f78:	f7fc ff2f 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f86:	f7fc ff28 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f94:	f7fc ff21 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2140      	movs	r1, #64	; 0x40
 8003f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa0:	f7fc ff1b 	bl	8000dda <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	2180      	movs	r1, #128	; 0x80
 8003fa8:	4836      	ldr	r0, [pc, #216]	; (8004084 <seven_segment_display+0x414>)
 8003faa:	f7fc ff16 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2140      	movs	r1, #64	; 0x40
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7fc ff11 	bl	8000dda <HAL_GPIO_WritePin>
		break;
 8003fb8:	bd10      	pop	{r4, pc}
	case 0:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fc2:	f7fc ff0a 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2120      	movs	r1, #32
 8003fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fce:	f7fc ff04 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8003fd2:	4c2b      	ldr	r4, [pc, #172]	; (8004080 <seven_segment_display+0x410>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2140      	movs	r1, #64	; 0x40
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7fc fefe 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fe6:	f7fc fef8 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8003fea:	2200      	movs	r2, #0
 8003fec:	2140      	movs	r1, #64	; 0x40
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7fc fef3 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	4822      	ldr	r0, [pc, #136]	; (8004084 <seven_segment_display+0x414>)
 8003ffa:	f7fc feee 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8003ffe:	2200      	movs	r2, #0
 8004000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004008:	f7fc fee7 	bl	8000dda <HAL_GPIO_WritePin>
		//OFF

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800400c:	2201      	movs	r2, #1
 800400e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004016:	f7fc fee0 	bl	8000dda <HAL_GPIO_WritePin>
		break;
 800401a:	bd10      	pop	{r4, pc}
	default:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 800401c:	2201      	movs	r2, #1
 800401e:	2120      	movs	r1, #32
 8004020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004024:	f7fc fed9 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 8004028:	4c15      	ldr	r4, [pc, #84]	; (8004080 <seven_segment_display+0x410>)
 800402a:	2201      	movs	r2, #1
 800402c:	2140      	movs	r1, #64	; 0x40
 800402e:	4620      	mov	r0, r4
 8004030:	f7fc fed3 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8004034:	2201      	movs	r2, #1
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800403c:	f7fc fecd 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8004040:	2201      	movs	r2, #1
 8004042:	2140      	movs	r1, #64	; 0x40
 8004044:	4620      	mov	r0, r4
 8004046:	f7fc fec8 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800404a:	2201      	movs	r2, #1
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	480d      	ldr	r0, [pc, #52]	; (8004084 <seven_segment_display+0x414>)
 8004050:	f7fc fec3 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004054:	2201      	movs	r2, #1
 8004056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800405a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800405e:	f7fc febc 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8004062:	2201      	movs	r2, #1
 8004064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800406c:	f7fc feb5 	bl	8000dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8004070:	2201      	movs	r2, #1
 8004072:	2140      	movs	r1, #64	; 0x40
 8004074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004078:	f7fc feaf 	bl	8000dda <HAL_GPIO_WritePin>
 800407c:	bd10      	pop	{r4, pc}
 800407e:	bf00      	nop
 8004080:	48000400 	.word	0x48000400
 8004084:	48000800 	.word	0x48000800

08004088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004088:	b500      	push	{lr}
 800408a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_MspInit+0x78>)
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	619a      	str	r2, [r3, #24]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80040a0:	2007      	movs	r0, #7
 80040a2:	f7fc fc91 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 80040a6:	2202      	movs	r2, #2
 80040a8:	2100      	movs	r1, #0
 80040aa:	f06f 000b 	mvn.w	r0, #11
 80040ae:	f7fc fc9d 	bl	80009ec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 80040b2:	2202      	movs	r2, #2
 80040b4:	2100      	movs	r1, #0
 80040b6:	f06f 000a 	mvn.w	r0, #10
 80040ba:	f7fc fc97 	bl	80009ec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 80040be:	2202      	movs	r2, #2
 80040c0:	2100      	movs	r1, #0
 80040c2:	f06f 0009 	mvn.w	r0, #9
 80040c6:	f7fc fc91 	bl	80009ec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 80040ca:	2202      	movs	r2, #2
 80040cc:	2100      	movs	r1, #0
 80040ce:	f06f 0004 	mvn.w	r0, #4
 80040d2:	f7fc fc8b 	bl	80009ec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 80040d6:	2202      	movs	r2, #2
 80040d8:	2100      	movs	r1, #0
 80040da:	f06f 0003 	mvn.w	r0, #3
 80040de:	f7fc fc85 	bl	80009ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 80040e2:	2202      	movs	r2, #2
 80040e4:	2100      	movs	r1, #0
 80040e6:	f06f 0001 	mvn.w	r0, #1
 80040ea:	f7fc fc7f 	bl	80009ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 80040ee:	2202      	movs	r2, #2
 80040f0:	2100      	movs	r1, #0
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	f7fc fc79 	bl	80009ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040fa:	b003      	add	sp, #12
 80040fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004100:	40021000 	.word	0x40021000

08004104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8004104:	6802      	ldr	r2, [r0, #0]
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_ADC_MspInit+0x84>)
 8004108:	429a      	cmp	r2, r3
 800410a:	d000      	beq.n	800410e <HAL_ADC_MspInit+0xa>
 800410c:	4770      	bx	lr
{
 800410e:	b570      	push	{r4, r5, r6, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004114:	4b1d      	ldr	r3, [pc, #116]	; (800418c <HAL_ADC_MspInit+0x88>)
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800411c:	615a      	str	r2, [r3, #20]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC2_IN8
    PC3     ------> ADC2_IN9
    PB2     ------> ADC2_IN12
    PB15     ------> ADC2_IN15 
    */
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 8004128:	230c      	movs	r3, #12
 800412a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800412c:	2603      	movs	r6, #3
 800412e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2500      	movs	r5, #0
 8004132:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004134:	a901      	add	r1, sp, #4
 8004136:	4816      	ldr	r0, [pc, #88]	; (8004190 <HAL_ADC_MspInit+0x8c>)
 8004138:	f7fc fd7e 	bl	8000c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 800413c:	f248 0304 	movw	r3, #32772	; 0x8004
 8004140:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004142:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004146:	a901      	add	r1, sp, #4
 8004148:	4812      	ldr	r0, [pc, #72]	; (8004194 <HAL_ADC_MspInit+0x90>)
 800414a:	f7fc fd75 	bl	8000c38 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 800414e:	4812      	ldr	r0, [pc, #72]	; (8004198 <HAL_ADC_MspInit+0x94>)
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_ADC_MspInit+0x98>)
 8004152:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004154:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004156:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800415c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004160:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004166:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004168:	2320      	movs	r3, #32
 800416a:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800416c:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800416e:	f7fc fcb9 	bl	8000ae4 <HAL_DMA_Init>
 8004172:	b920      	cbnz	r0, 800417e <HAL_ADC_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004174:	4b08      	ldr	r3, [pc, #32]	; (8004198 <HAL_ADC_MspInit+0x94>)
 8004176:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004178:	625c      	str	r4, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800417a:	b006      	add	sp, #24
 800417c:	bd70      	pop	{r4, r5, r6, pc}
      _Error_Handler(__FILE__, __LINE__);
 800417e:	217a      	movs	r1, #122	; 0x7a
 8004180:	4807      	ldr	r0, [pc, #28]	; (80041a0 <HAL_ADC_MspInit+0x9c>)
 8004182:	f7ff faba 	bl	80036fa <_Error_Handler>
 8004186:	e7f5      	b.n	8004174 <HAL_ADC_MspInit+0x70>
 8004188:	50000100 	.word	0x50000100
 800418c:	40021000 	.word	0x40021000
 8004190:	48000800 	.word	0x48000800
 8004194:	48000400 	.word	0x48000400
 8004198:	20000488 	.word	0x20000488
 800419c:	4002001c 	.word	0x4002001c
 80041a0:	0800594c 	.word	0x0800594c

080041a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80041a4:	6802      	ldr	r2, [r0, #0]
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <HAL_I2C_MspInit+0x58>)
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d000      	beq.n	80041ae <HAL_I2C_MspInit+0xa>
 80041ac:	4770      	bx	lr
{
 80041ae:	b500      	push	{lr}
 80041b0:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 80041b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041b8:	2312      	movs	r3, #18
 80041ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041bc:	2301      	movs	r3, #1
 80041be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041c0:	2303      	movs	r3, #3
 80041c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041c4:	2304      	movs	r3, #4
 80041c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c8:	eb0d 0103 	add.w	r1, sp, r3
 80041cc:	480c      	ldr	r0, [pc, #48]	; (8004200 <HAL_I2C_MspInit+0x5c>)
 80041ce:	f7fc fd33 	bl	8000c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_I2C_MspInit+0x60>)
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80041da:	61da      	str	r2, [r3, #28]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	4611      	mov	r1, r2
 80041ea:	201f      	movs	r0, #31
 80041ec:	f7fc fbfe 	bl	80009ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80041f0:	201f      	movs	r0, #31
 80041f2:	f7fc fc2d 	bl	8000a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80041f6:	b007      	add	sp, #28
 80041f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80041fc:	40005400 	.word	0x40005400
 8004200:	48000400 	.word	0x48000400
 8004204:	40021000 	.word	0x40021000

08004208 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004208:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 800420a:	6802      	ldr	r2, [r0, #0]
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RTC_MspInit+0x34>)
 800420e:	429a      	cmp	r2, r3
 8004210:	d000      	beq.n	8004214 <HAL_RTC_MspInit+0xc>
 8004212:	bd08      	pop	{r3, pc}
 8004214:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004218:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800421c:	fab2 f282 	clz	r2, r2
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <HAL_RTC_MspInit+0x38>)
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800422a:	2200      	movs	r2, #0
 800422c:	4611      	mov	r1, r2
 800422e:	2003      	movs	r0, #3
 8004230:	f7fc fbdc 	bl	80009ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004234:	2003      	movs	r0, #3
 8004236:	f7fc fc0b 	bl	8000a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800423a:	e7ea      	b.n	8004212 <HAL_RTC_MspInit+0xa>
 800423c:	40002800 	.word	0x40002800
 8004240:	10908100 	.word	0x10908100

08004244 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8004244:	6803      	ldr	r3, [r0, #0]
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424a:	d000      	beq.n	800424e <HAL_TIM_Base_MspInit+0xa>
 800424c:	4770      	bx	lr
{
 800424e:	b500      	push	{lr}
 8004250:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004252:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	61da      	str	r2, [r3, #28]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8004268:	2202      	movs	r2, #2
 800426a:	2100      	movs	r1, #0
 800426c:	201c      	movs	r0, #28
 800426e:	f7fc fbbd 	bl	80009ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004272:	201c      	movs	r0, #28
 8004274:	f7fc fbec 	bl	8000a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004278:	b003      	add	sp, #12
 800427a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8004280:	6802      	ldr	r2, [r0, #0]
 8004282:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_UART_MspInit+0x54>)
 8004284:	429a      	cmp	r2, r3
 8004286:	d000      	beq.n	800428a <HAL_UART_MspInit+0xa>
 8004288:	4770      	bx	lr
{
 800428a:	b510      	push	{r4, lr}
 800428c:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800428e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004298:	619a      	str	r2, [r3, #24]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80042a4:	2330      	movs	r3, #48	; 0x30
 80042a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a8:	2302      	movs	r3, #2
 80042aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2400      	movs	r4, #0
 80042ae:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042b0:	2303      	movs	r3, #3
 80042b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042b4:	2307      	movs	r3, #7
 80042b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042b8:	a901      	add	r1, sp, #4
 80042ba:	4807      	ldr	r0, [pc, #28]	; (80042d8 <HAL_UART_MspInit+0x58>)
 80042bc:	f7fc fcbc 	bl	8000c38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042c0:	4622      	mov	r2, r4
 80042c2:	4621      	mov	r1, r4
 80042c4:	2025      	movs	r0, #37	; 0x25
 80042c6:	f7fc fb91 	bl	80009ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042ca:	2025      	movs	r0, #37	; 0x25
 80042cc:	f7fc fbc0 	bl	8000a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042d0:	b006      	add	sp, #24
 80042d2:	bd10      	pop	{r4, pc}
 80042d4:	40013800 	.word	0x40013800
 80042d8:	48000800 	.word	0x48000800

080042dc <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80042dc:	4770      	bx	lr

080042de <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80042de:	4770      	bx	lr

080042e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80042e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042e2:	f7fb fff5 	bl	80002d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80042e6:	f7fc fbe6 	bl	8000ab6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
 80042ea:	2201      	movs	r2, #1
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <SysTick_Handler+0x24>)
 80042ee:	701a      	strb	r2, [r3, #0]
  fake_RTC_timer += 1;
 80042f0:	4a05      	ldr	r2, [pc, #20]	; (8004308 <SysTick_Handler+0x28>)
 80042f2:	8813      	ldrh	r3, [r2, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	8013      	strh	r3, [r2, #0]
  flash_counter += 1;
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <SysTick_Handler+0x2c>)
 80042fa:	6813      	ldr	r3, [r2, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	bd08      	pop	{r3, pc}
 8004302:	bf00      	nop
 8004304:	20000275 	.word	0x20000275
 8004308:	2000023a 	.word	0x2000023a
 800430c:	2000023c 	.word	0x2000023c

08004310 <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 8004310:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004312:	4802      	ldr	r0, [pc, #8]	; (800431c <RTC_WKUP_IRQHandler+0xc>)
 8004314:	f7fd ffd0 	bl	80022b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8004318:	bd08      	pop	{r3, pc}
 800431a:	bf00      	nop
 800431c:	20000410 	.word	0x20000410

08004320 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8004320:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004322:	2001      	movs	r0, #1
 8004324:	f7fc fd60 	bl	8000de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  touch_flag = 1;
 8004328:	2201      	movs	r2, #1
 800432a:	4b01      	ldr	r3, [pc, #4]	; (8004330 <EXTI0_IRQHandler+0x10>)
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	bd08      	pop	{r3, pc}
 8004330:	20000288 	.word	0x20000288

08004334 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 8004334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004336:	4802      	ldr	r0, [pc, #8]	; (8004340 <DMA1_Channel2_IRQHandler+0xc>)
 8004338:	f7fc fc25 	bl	8000b86 <HAL_DMA_IRQHandler>
 800433c:	bd08      	pop	{r3, pc}
 800433e:	bf00      	nop
 8004340:	20000488 	.word	0x20000488

08004344 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8004344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004346:	2040      	movs	r0, #64	; 0x40
 8004348:	f7fc fd4e 	bl	8000de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 800434c:	2201      	movs	r2, #1
 800434e:	4b01      	ldr	r3, [pc, #4]	; (8004354 <EXTI9_5_IRQHandler+0x10>)
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	bd08      	pop	{r3, pc}
 8004354:	2000027d 	.word	0x2000027d

08004358 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8004358:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800435a:	4803      	ldr	r0, [pc, #12]	; (8004368 <TIM2_IRQHandler+0x10>)
 800435c:	f7fe f80e 	bl	800237c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag = 0;
 8004360:	2200      	movs	r2, #0
 8004362:	4b02      	ldr	r3, [pc, #8]	; (800436c <TIM2_IRQHandler+0x14>)
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	bd08      	pop	{r3, pc}
 8004368:	20000448 	.word	0x20000448
 800436c:	2000027c 	.word	0x2000027c

08004370 <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 8004370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004372:	4802      	ldr	r0, [pc, #8]	; (800437c <I2C1_EV_IRQHandler+0xc>)
 8004374:	f7fc ffa7 	bl	80012c6 <HAL_I2C_EV_IRQHandler>
 8004378:	bd08      	pop	{r3, pc}
 800437a:	bf00      	nop
 800437c:	2000030c 	.word	0x2000030c

08004380 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8004380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004382:	4802      	ldr	r0, [pc, #8]	; (800438c <USART1_IRQHandler+0xc>)
 8004384:	f7fe fce8 	bl	8002d58 <HAL_UART_IRQHandler>
 8004388:	bd08      	pop	{r3, pc}
 800438a:	bf00      	nop
 800438c:	200003a0 	.word	0x200003a0

08004390 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004390:	4915      	ldr	r1, [pc, #84]	; (80043e8 <SystemInit+0x58>)
 8004392:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <SystemInit+0x5c>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80043a8:	6858      	ldr	r0, [r3, #4]
 80043aa:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <SystemInit+0x60>)
 80043ac:	4002      	ands	r2, r0
 80043ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80043b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043ba:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043c2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80043ca:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	f022 020f 	bic.w	r2, r2, #15
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80043d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043d6:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <SystemInit+0x64>)
 80043d8:	4002      	ands	r2, r0
 80043da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043e4:	608b      	str	r3, [r1, #8]
 80043e6:	4770      	bx	lr
 80043e8:	e000ed00 	.word	0xe000ed00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	f87fc00c 	.word	0xf87fc00c
 80043f4:	ff00fccc 	.word	0xff00fccc

080043f8 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 80043f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
 80043fc:	2200      	movs	r2, #0
 80043fe:	4b98      	ldr	r3, [pc, #608]	; (8004660 <uart_comms+0x268>)
 8004400:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 8004402:	4b98      	ldr	r3, [pc, #608]	; (8004664 <uart_comms+0x26c>)
 8004404:	4a98      	ldr	r2, [pc, #608]	; (8004668 <uart_comms+0x270>)
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	4898      	ldr	r0, [pc, #608]	; (800466c <uart_comms+0x274>)
 800440c:	7800      	ldrb	r0, [r0, #0]
 800440e:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	2a24      	cmp	r2, #36	; 0x24
 8004416:	d00b      	beq.n	8004430 <uart_comms+0x38>

		uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	2a24      	cmp	r2, #36	; 0x24
 800441c:	d00d      	beq.n	800443a <uart_comms+0x42>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 800441e:	4b92      	ldr	r3, [pc, #584]	; (8004668 <uart_comms+0x270>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b3b      	cmp	r3, #59	; 0x3b
 8004424:	d902      	bls.n	800442c <uart_comms+0x34>
		uart_counter = 0;
 8004426:	2200      	movs	r2, #0
 8004428:	4b8f      	ldr	r3, [pc, #572]	; (8004668 <uart_comms+0x270>)
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_counter += 1;
 8004430:	498d      	ldr	r1, [pc, #564]	; (8004668 <uart_comms+0x270>)
 8004432:	780a      	ldrb	r2, [r1, #0]
 8004434:	3201      	adds	r2, #1
 8004436:	700a      	strb	r2, [r1, #0]
 8004438:	e7ee      	b.n	8004418 <uart_comms+0x20>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 800443a:	4a8b      	ldr	r2, [pc, #556]	; (8004668 <uart_comms+0x270>)
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	1899      	adds	r1, r3, r2
 8004440:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8004444:	290a      	cmp	r1, #10
 8004446:	d1ea      	bne.n	800441e <uart_comms+0x26>
 8004448:	4413      	add	r3, r2
 800444a:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 800444e:	2b0d      	cmp	r3, #13
 8004450:	d1e5      	bne.n	800441e <uart_comms+0x26>
 8004452:	2a02      	cmp	r2, #2
 8004454:	d9e3      	bls.n	800441e <uart_comms+0x26>
		memset(return_value,0x00, 50);
 8004456:	2232      	movs	r2, #50	; 0x32
 8004458:	2100      	movs	r1, #0
 800445a:	4b85      	ldr	r3, [pc, #532]	; (8004670 <uart_comms+0x278>)
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	f000 fcdc 	bl	8004e1a <memset>
		uart_command_copy = uart_command;
 8004462:	4b80      	ldr	r3, [pc, #512]	; (8004664 <uart_comms+0x26c>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b83      	ldr	r3, [pc, #524]	; (8004674 <uart_comms+0x27c>)
 8004468:	601a      	str	r2, [r3, #0]
		switch(uart_command[1]){
 800446a:	7853      	ldrb	r3, [r2, #1]
 800446c:	3b41      	subs	r3, #65	; 0x41
 800446e:	2b0b      	cmp	r3, #11
 8004470:	d829      	bhi.n	80044c6 <uart_comms+0xce>
 8004472:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004476:	000c      	.short	0x000c
 8004478:	005f0033 	.word	0x005f0033
 800447c:	00af007f 	.word	0x00af007f
 8004480:	012300d0 	.word	0x012300d0
 8004484:	019a0143 	.word	0x019a0143
 8004488:	03450211 	.word	0x03450211
 800448c:	03fc      	.short	0x03fc
			memcpy(studentnumber, uart_command, 2 );
 800448e:	4b7a      	ldr	r3, [pc, #488]	; (8004678 <uart_comms+0x280>)
 8004490:	6819      	ldr	r1, [r3, #0]
 8004492:	8812      	ldrh	r2, [r2, #0]
 8004494:	800a      	strh	r2, [r1, #0]
			memcpy(studentnumber+2,comma,1);
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4978      	ldr	r1, [pc, #480]	; (800467c <uart_comms+0x284>)
 800449a:	7809      	ldrb	r1, [r1, #0]
 800449c:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4977      	ldr	r1, [pc, #476]	; (8004680 <uart_comms+0x288>)
 80044a2:	6808      	ldr	r0, [r1, #0]
 80044a4:	6849      	ldr	r1, [r1, #4]
 80044a6:	f8c2 0003 	str.w	r0, [r2, #3]
 80044aa:	f8c2 1007 	str.w	r1, [r2, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	4b74      	ldr	r3, [pc, #464]	; (8004684 <uart_comms+0x28c>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f8c1 200b 	str.w	r2, [r1, #11]
 80044ba:	f8c1 300f 	str.w	r3, [r1, #15]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 80044be:	220d      	movs	r2, #13
 80044c0:	4871      	ldr	r0, [pc, #452]	; (8004688 <uart_comms+0x290>)
 80044c2:	f7fe f95e 	bl	8002782 <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 80044c6:	223c      	movs	r2, #60	; 0x3c
 80044c8:	2100      	movs	r1, #0
 80044ca:	4b66      	ldr	r3, [pc, #408]	; (8004664 <uart_comms+0x26c>)
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	f000 fca4 	bl	8004e1a <memset>
		uart_counter = 0;
 80044d2:	2200      	movs	r2, #0
 80044d4:	4b64      	ldr	r3, [pc, #400]	; (8004668 <uart_comms+0x270>)
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memcpy(return_value, uart_command, 2);
 80044dc:	4b64      	ldr	r3, [pc, #400]	; (8004670 <uart_comms+0x278>)
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	8812      	ldrh	r2, [r2, #0]
 80044e2:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4967      	ldr	r1, [pc, #412]	; (8004684 <uart_comms+0x28c>)
 80044e8:	8809      	ldrh	r1, [r1, #0]
 80044ea:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 80044ec:	681c      	ldr	r4, [r3, #0]
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7fb fe6e 	bl	80001d0 <strlen>
 80044f4:	b282      	uxth	r2, r0
 80044f6:	4621      	mov	r1, r4
 80044f8:	4863      	ldr	r0, [pc, #396]	; (8004688 <uart_comms+0x290>)
 80044fa:	f7fe f942 	bl	8002782 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 80044fe:	4b59      	ldr	r3, [pc, #356]	; (8004664 <uart_comms+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	78db      	ldrb	r3, [r3, #3]
 8004504:	2b31      	cmp	r3, #49	; 0x31
 8004506:	d00b      	beq.n	8004520 <uart_comms+0x128>
			else if(uart_command[3] == '0'){
 8004508:	2b30      	cmp	r3, #48	; 0x30
 800450a:	d1dc      	bne.n	80044c6 <uart_comms+0xce>
				valve_state=valve_CLOSE;
 800450c:	4a5f      	ldr	r2, [pc, #380]	; (800468c <uart_comms+0x294>)
 800450e:	4b60      	ldr	r3, [pc, #384]	; (8004690 <uart_comms+0x298>)
 8004510:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 8004512:	2200      	movs	r2, #0
 8004514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004518:	485e      	ldr	r0, [pc, #376]	; (8004694 <uart_comms+0x29c>)
 800451a:	f7fc fc5e 	bl	8000dda <HAL_GPIO_WritePin>
 800451e:	e7d2      	b.n	80044c6 <uart_comms+0xce>
				valve_state = valve_OPEN;
 8004520:	4a5d      	ldr	r2, [pc, #372]	; (8004698 <uart_comms+0x2a0>)
 8004522:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <uart_comms+0x298>)
 8004524:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8004526:	2201      	movs	r2, #1
 8004528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800452c:	4859      	ldr	r0, [pc, #356]	; (8004694 <uart_comms+0x29c>)
 800452e:	f7fc fc54 	bl	8000dda <HAL_GPIO_WritePin>
 8004532:	e7c8      	b.n	80044c6 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8004534:	4b4e      	ldr	r3, [pc, #312]	; (8004670 <uart_comms+0x278>)
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	8812      	ldrh	r2, [r2, #0]
 800453a:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4951      	ldr	r1, [pc, #324]	; (8004684 <uart_comms+0x28c>)
 8004540:	8809      	ldrh	r1, [r1, #0]
 8004542:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8004544:	681c      	ldr	r4, [r3, #0]
 8004546:	4620      	mov	r0, r4
 8004548:	f7fb fe42 	bl	80001d0 <strlen>
 800454c:	b282      	uxth	r2, r0
 800454e:	4621      	mov	r1, r4
 8004550:	484d      	ldr	r0, [pc, #308]	; (8004688 <uart_comms+0x290>)
 8004552:	f7fe f916 	bl	8002782 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 8004556:	4b43      	ldr	r3, [pc, #268]	; (8004664 <uart_comms+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	78db      	ldrb	r3, [r3, #3]
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d005      	beq.n	800456c <uart_comms+0x174>
			else if(uart_command[3] == '1'){
 8004560:	2b31      	cmp	r3, #49	; 0x31
 8004562:	d1b0      	bne.n	80044c6 <uart_comms+0xce>
				auto_heating = 1;
 8004564:	2201      	movs	r2, #1
 8004566:	4b4d      	ldr	r3, [pc, #308]	; (800469c <uart_comms+0x2a4>)
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e7ac      	b.n	80044c6 <uart_comms+0xce>
				auto_heating = 0;
 800456c:	2200      	movs	r2, #0
 800456e:	4b4b      	ldr	r3, [pc, #300]	; (800469c <uart_comms+0x2a4>)
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e7a8      	b.n	80044c6 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8004574:	4b3e      	ldr	r3, [pc, #248]	; (8004670 <uart_comms+0x278>)
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	8812      	ldrh	r2, [r2, #0]
 800457a:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4941      	ldr	r1, [pc, #260]	; (8004684 <uart_comms+0x28c>)
 8004580:	8809      	ldrh	r1, [r1, #0]
 8004582:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8004584:	681c      	ldr	r4, [r3, #0]
 8004586:	4620      	mov	r0, r4
 8004588:	f7fb fe22 	bl	80001d0 <strlen>
 800458c:	b282      	uxth	r2, r0
 800458e:	4621      	mov	r1, r4
 8004590:	483d      	ldr	r0, [pc, #244]	; (8004688 <uart_comms+0x290>)
 8004592:	f7fe f8f6 	bl	8002782 <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <uart_comms+0x2a4>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d193      	bne.n	80044c6 <uart_comms+0xce>
				if(uart_command[3]=='0'){
 800459e:	4b31      	ldr	r3, [pc, #196]	; (8004664 <uart_comms+0x26c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	78db      	ldrb	r3, [r3, #3]
 80045a4:	2b30      	cmp	r3, #48	; 0x30
 80045a6:	d00b      	beq.n	80045c0 <uart_comms+0x1c8>
				else if(uart_command[3] == '1'){
 80045a8:	2b31      	cmp	r3, #49	; 0x31
 80045aa:	d18c      	bne.n	80044c6 <uart_comms+0xce>
					heater_state = heater_ON;
 80045ac:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <uart_comms+0x2a8>)
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <uart_comms+0x2ac>)
 80045b0:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 80045b2:	2201      	movs	r2, #1
 80045b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045b8:	4836      	ldr	r0, [pc, #216]	; (8004694 <uart_comms+0x29c>)
 80045ba:	f7fc fc0e 	bl	8000dda <HAL_GPIO_WritePin>
 80045be:	e782      	b.n	80044c6 <uart_comms+0xce>
					heater_state = heater_OFF;
 80045c0:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <uart_comms+0x2b0>)
 80045c2:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <uart_comms+0x2ac>)
 80045c4:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 80045c6:	2200      	movs	r2, #0
 80045c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045cc:	4831      	ldr	r0, [pc, #196]	; (8004694 <uart_comms+0x29c>)
 80045ce:	f7fc fc04 	bl	8000dda <HAL_GPIO_WritePin>
 80045d2:	e778      	b.n	80044c6 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 80045d4:	4b26      	ldr	r3, [pc, #152]	; (8004670 <uart_comms+0x278>)
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	8812      	ldrh	r2, [r2, #0]
 80045da:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4929      	ldr	r1, [pc, #164]	; (8004684 <uart_comms+0x28c>)
 80045e0:	8809      	ldrh	r1, [r1, #0]
 80045e2:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 80045e4:	681c      	ldr	r4, [r3, #0]
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7fb fdf2 	bl	80001d0 <strlen>
 80045ec:	b282      	uxth	r2, r0
 80045ee:	4621      	mov	r1, r4
 80045f0:	4825      	ldr	r0, [pc, #148]	; (8004688 <uart_comms+0x290>)
 80045f2:	f7fe f8c6 	bl	8002782 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){ // logging disable
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <uart_comms+0x26c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78db      	ldrb	r3, [r3, #3]
 80045fc:	2b30      	cmp	r3, #48	; 0x30
 80045fe:	d006      	beq.n	800460e <uart_comms+0x216>
			else if(uart_command[3] == '1'){ // logging enable
 8004600:	2b31      	cmp	r3, #49	; 0x31
 8004602:	f47f af60 	bne.w	80044c6 <uart_comms+0xce>
				enableFlashLogging = 1;
 8004606:	2201      	movs	r2, #1
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <uart_comms+0x2b4>)
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e75b      	b.n	80044c6 <uart_comms+0xce>
				enableFlashLogging = 0;
 800460e:	2200      	movs	r2, #0
 8004610:	4b26      	ldr	r3, [pc, #152]	; (80046ac <uart_comms+0x2b4>)
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e757      	b.n	80044c6 <uart_comms+0xce>
			memcpy(return_value, uart_command,2);
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <uart_comms+0x278>)
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	8812      	ldrh	r2, [r2, #0]
 800461c:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4918      	ldr	r1, [pc, #96]	; (8004684 <uart_comms+0x28c>)
 8004622:	8809      	ldrh	r1, [r1, #0]
 8004624:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8004626:	681c      	ldr	r4, [r3, #0]
 8004628:	4620      	mov	r0, r4
 800462a:	f7fb fdd1 	bl	80001d0 <strlen>
 800462e:	b282      	uxth	r2, r0
 8004630:	4621      	mov	r1, r4
 8004632:	4815      	ldr	r0, [pc, #84]	; (8004688 <uart_comms+0x290>)
 8004634:	f7fe f8a5 	bl	8002782 <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <uart_comms+0x270>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	3b05      	subs	r3, #5
 800463e:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <uart_comms+0x2b8>)
 8004640:	7013      	strb	r3, [r2, #0]
			memset(set_temp, 0x00, 4);
 8004642:	4c1c      	ldr	r4, [pc, #112]	; (80046b4 <uart_comms+0x2bc>)
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	2100      	movs	r1, #0
 8004648:	6019      	str	r1, [r3, #0]
			memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <uart_comms+0x26c>)
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	3103      	adds	r1, #3
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	f000 fbd6 	bl	8004e04 <memcpy>
			segment_val =set_temp;
 8004658:	6822      	ldr	r2, [r4, #0]
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <uart_comms+0x2c0>)
 800465c:	601a      	str	r2, [r3, #0]
			break;
 800465e:	e732      	b.n	80044c6 <uart_comms+0xce>
 8004660:	20000269 	.word	0x20000269
 8004664:	2000028c 	.word	0x2000028c
 8004668:	20000294 	.word	0x20000294
 800466c:	2000054c 	.word	0x2000054c
 8004670:	20000264 	.word	0x20000264
 8004674:	20000290 	.word	0x20000290
 8004678:	20000548 	.word	0x20000548
 800467c:	20000004 	.word	0x20000004
 8004680:	2000001c 	.word	0x2000001c
 8004684:	20000008 	.word	0x20000008
 8004688:	200003a0 	.word	0x200003a0
 800468c:	20000024 	.word	0x20000024
 8004690:	20000298 	.word	0x20000298
 8004694:	48000400 	.word	0x48000400
 8004698:	2000002c 	.word	0x2000002c
 800469c:	20000228 	.word	0x20000228
 80046a0:	20000018 	.word	0x20000018
 80046a4:	20000254 	.word	0x20000254
 80046a8:	20000014 	.word	0x20000014
 80046ac:	20000238 	.word	0x20000238
 80046b0:	20000274 	.word	0x20000274
 80046b4:	20000270 	.word	0x20000270
 80046b8:	2000026c 	.word	0x2000026c
			memcpy(return_value, uart_command, 2);
 80046bc:	4caf      	ldr	r4, [pc, #700]	; (800497c <uart_comms+0x584>)
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	4aae      	ldr	r2, [pc, #696]	; (8004980 <uart_comms+0x588>)
 80046c8:	7812      	ldrb	r2, [r2, #0]
 80046ca:	709a      	strb	r2, [r3, #2]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	4bad      	ldr	r3, [pc, #692]	; (8004984 <uart_comms+0x58c>)
 80046d0:	781d      	ldrb	r5, [r3, #0]
 80046d2:	462a      	mov	r2, r5
 80046d4:	4bac      	ldr	r3, [pc, #688]	; (8004988 <uart_comms+0x590>)
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	3003      	adds	r0, #3
 80046da:	f000 fb93 	bl	8004e04 <memcpy>
			memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	3503      	adds	r5, #3
 80046e2:	4aaa      	ldr	r2, [pc, #680]	; (800498c <uart_comms+0x594>)
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	535a      	strh	r2, [r3, r5]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80046e8:	6824      	ldr	r4, [r4, #0]
 80046ea:	4620      	mov	r0, r4
 80046ec:	f7fb fd70 	bl	80001d0 <strlen>
 80046f0:	b282      	uxth	r2, r0
 80046f2:	4621      	mov	r1, r4
 80046f4:	48a6      	ldr	r0, [pc, #664]	; (8004990 <uart_comms+0x598>)
 80046f6:	f7fe f844 	bl	8002782 <HAL_UART_Transmit_IT>
			break;
 80046fa:	e6e4      	b.n	80044c6 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 80046fc:	4b9f      	ldr	r3, [pc, #636]	; (800497c <uart_comms+0x584>)
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	8812      	ldrh	r2, [r2, #0]
 8004702:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	49a1      	ldr	r1, [pc, #644]	; (800498c <uart_comms+0x594>)
 8004708:	8809      	ldrh	r1, [r1, #0]
 800470a:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 800470c:	681c      	ldr	r4, [r3, #0]
 800470e:	4620      	mov	r0, r4
 8004710:	f7fb fd5e 	bl	80001d0 <strlen>
 8004714:	b282      	uxth	r2, r0
 8004716:	4621      	mov	r1, r4
 8004718:	489d      	ldr	r0, [pc, #628]	; (8004990 <uart_comms+0x598>)
 800471a:	f7fe f832 	bl	8002782 <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 800471e:	4c9d      	ldr	r4, [pc, #628]	; (8004994 <uart_comms+0x59c>)
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	22ca      	movs	r2, #202	; 0xca
 8004724:	625a      	str	r2, [r3, #36]	; 0x24
 8004726:	2253      	movs	r2, #83	; 0x53
 8004728:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 800472a:	4620      	mov	r0, r4
 800472c:	f7fd fb81 	bl	8001e32 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8004730:	4999      	ldr	r1, [pc, #612]	; (8004998 <uart_comms+0x5a0>)
 8004732:	4b9a      	ldr	r3, [pc, #616]	; (800499c <uart_comms+0x5a4>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f000 fc59 	bl	8004fec <strtok>
 800473a:	4e99      	ldr	r6, [pc, #612]	; (80049a0 <uart_comms+0x5a8>)
 800473c:	6030      	str	r0, [r6, #0]
			time->Hours = strtol(heating_info, NULL,10);
 800473e:	4d99      	ldr	r5, [pc, #612]	; (80049a4 <uart_comms+0x5ac>)
 8004740:	682f      	ldr	r7, [r5, #0]
 8004742:	220a      	movs	r2, #10
 8004744:	2100      	movs	r1, #0
 8004746:	f000 fd25 	bl	8005194 <strtol>
 800474a:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 800474c:	4996      	ldr	r1, [pc, #600]	; (80049a8 <uart_comms+0x5b0>)
 800474e:	2000      	movs	r0, #0
 8004750:	f000 fc4c 	bl	8004fec <strtok>
 8004754:	6030      	str	r0, [r6, #0]
			time->Minutes = strtol(heating_info, NULL,10);
 8004756:	682f      	ldr	r7, [r5, #0]
 8004758:	220a      	movs	r2, #10
 800475a:	2100      	movs	r1, #0
 800475c:	f000 fd1a 	bl	8005194 <strtol>
 8004760:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 8004762:	4992      	ldr	r1, [pc, #584]	; (80049ac <uart_comms+0x5b4>)
 8004764:	2000      	movs	r0, #0
 8004766:	f000 fc41 	bl	8004fec <strtok>
 800476a:	6030      	str	r0, [r6, #0]
			time->Seconds = strtol(heating_info, NULL,10);
 800476c:	682e      	ldr	r6, [r5, #0]
 800476e:	220a      	movs	r2, #10
 8004770:	2100      	movs	r1, #0
 8004772:	f000 fd0f 	bl	8005194 <strtol>
 8004776:	70b0      	strb	r0, [r6, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8004778:	2200      	movs	r2, #0
 800477a:	6829      	ldr	r1, [r5, #0]
 800477c:	4620      	mov	r0, r4
 800477e:	f7fd fbe3 	bl	8001f48 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8004782:	4e8b      	ldr	r6, [pc, #556]	; (80049b0 <uart_comms+0x5b8>)
 8004784:	2200      	movs	r2, #0
 8004786:	6831      	ldr	r1, [r6, #0]
 8004788:	4620      	mov	r0, r4
 800478a:	f7fd fc5c 	bl	8002046 <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004794:	2200      	movs	r2, #0
 8004796:	6829      	ldr	r1, [r5, #0]
 8004798:	4620      	mov	r0, r4
 800479a:	f7fd fcca 	bl	8002132 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 800479e:	2200      	movs	r2, #0
 80047a0:	6831      	ldr	r1, [r6, #0]
 80047a2:	4620      	mov	r0, r4
 80047a4:	f7fd fcf0 	bl	8002188 <HAL_RTC_GetDate>
			break;
 80047a8:	e68d      	b.n	80044c6 <uart_comms+0xce>
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80047aa:	4e7e      	ldr	r6, [pc, #504]	; (80049a4 <uart_comms+0x5ac>)
 80047ac:	4c79      	ldr	r4, [pc, #484]	; (8004994 <uart_comms+0x59c>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	6831      	ldr	r1, [r6, #0]
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7fd fcbd 	bl	8002132 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80047b8:	2200      	movs	r2, #0
 80047ba:	4b7d      	ldr	r3, [pc, #500]	; (80049b0 <uart_comms+0x5b8>)
 80047bc:	6819      	ldr	r1, [r3, #0]
 80047be:	4620      	mov	r0, r4
 80047c0:	f7fd fce2 	bl	8002188 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 80047c4:	4c6d      	ldr	r4, [pc, #436]	; (800497c <uart_comms+0x584>)
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	4a7a      	ldr	r2, [pc, #488]	; (80049b4 <uart_comms+0x5bc>)
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	8812      	ldrh	r2, [r2, #0]
 80047ce:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004980 <uart_comms+0x588>
 80047d6:	f898 2000 	ldrb.w	r2, [r8]
 80047da:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 80047dc:	6833      	ldr	r3, [r6, #0]
 80047de:	4d76      	ldr	r5, [pc, #472]	; (80049b8 <uart_comms+0x5c0>)
 80047e0:	220a      	movs	r2, #10
 80047e2:	6829      	ldr	r1, [r5, #0]
 80047e4:	7818      	ldrb	r0, [r3, #0]
 80047e6:	f000 fb03 	bl	8004df0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 80047ea:	6827      	ldr	r7, [r4, #0]
 80047ec:	4638      	mov	r0, r7
 80047ee:	f7fb fcef 	bl	80001d0 <strlen>
 80047f2:	4407      	add	r7, r0
 80047f4:	f8d5 9000 	ldr.w	r9, [r5]
 80047f8:	4648      	mov	r0, r9
 80047fa:	f7fb fce9 	bl	80001d0 <strlen>
 80047fe:	4602      	mov	r2, r0
 8004800:	4649      	mov	r1, r9
 8004802:	4638      	mov	r0, r7
 8004804:	f000 fafe 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004808:	6827      	ldr	r7, [r4, #0]
 800480a:	4638      	mov	r0, r7
 800480c:	f7fb fce0 	bl	80001d0 <strlen>
 8004810:	f898 3000 	ldrb.w	r3, [r8]
 8004814:	543b      	strb	r3, [r7, r0]
			itoa((time->Minutes),temp_time_var,10  );
 8004816:	6833      	ldr	r3, [r6, #0]
 8004818:	220a      	movs	r2, #10
 800481a:	6829      	ldr	r1, [r5, #0]
 800481c:	7858      	ldrb	r0, [r3, #1]
 800481e:	f000 fae7 	bl	8004df0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8004822:	6827      	ldr	r7, [r4, #0]
 8004824:	4638      	mov	r0, r7
 8004826:	f7fb fcd3 	bl	80001d0 <strlen>
 800482a:	4407      	add	r7, r0
 800482c:	f8d5 9000 	ldr.w	r9, [r5]
 8004830:	4648      	mov	r0, r9
 8004832:	f7fb fccd 	bl	80001d0 <strlen>
 8004836:	4602      	mov	r2, r0
 8004838:	4649      	mov	r1, r9
 800483a:	4638      	mov	r0, r7
 800483c:	f000 fae2 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004840:	6827      	ldr	r7, [r4, #0]
 8004842:	4638      	mov	r0, r7
 8004844:	f7fb fcc4 	bl	80001d0 <strlen>
 8004848:	f898 3000 	ldrb.w	r3, [r8]
 800484c:	543b      	strb	r3, [r7, r0]
			itoa((time->Seconds),temp_time_var,10  );
 800484e:	6833      	ldr	r3, [r6, #0]
 8004850:	220a      	movs	r2, #10
 8004852:	6829      	ldr	r1, [r5, #0]
 8004854:	7898      	ldrb	r0, [r3, #2]
 8004856:	f000 facb 	bl	8004df0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 800485a:	6826      	ldr	r6, [r4, #0]
 800485c:	4630      	mov	r0, r6
 800485e:	f7fb fcb7 	bl	80001d0 <strlen>
 8004862:	4406      	add	r6, r0
 8004864:	682d      	ldr	r5, [r5, #0]
 8004866:	4628      	mov	r0, r5
 8004868:	f7fb fcb2 	bl	80001d0 <strlen>
 800486c:	4602      	mov	r2, r0
 800486e:	4629      	mov	r1, r5
 8004870:	4630      	mov	r0, r6
 8004872:	f000 fac7 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8004876:	6825      	ldr	r5, [r4, #0]
 8004878:	4628      	mov	r0, r5
 800487a:	f7fb fca9 	bl	80001d0 <strlen>
 800487e:	4b43      	ldr	r3, [pc, #268]	; (800498c <uart_comms+0x594>)
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8004884:	6824      	ldr	r4, [r4, #0]
 8004886:	4620      	mov	r0, r4
 8004888:	f7fb fca2 	bl	80001d0 <strlen>
 800488c:	b282      	uxth	r2, r0
 800488e:	4621      	mov	r1, r4
 8004890:	483f      	ldr	r0, [pc, #252]	; (8004990 <uart_comms+0x598>)
 8004892:	f7fd ff76 	bl	8002782 <HAL_UART_Transmit_IT>
			break;
 8004896:	e616      	b.n	80044c6 <uart_comms+0xce>
			if(auto_heating == 1){
 8004898:	4b48      	ldr	r3, [pc, #288]	; (80049bc <uart_comms+0x5c4>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	f47f ae12 	bne.w	80044c6 <uart_comms+0xce>
				memcpy(return_value, uart_command, 2);
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <uart_comms+0x584>)
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	8812      	ldrh	r2, [r2, #0]
 80048a8:	800a      	strh	r2, [r1, #0]
				memcpy(return_value+2, endSimbol,2 );
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4937      	ldr	r1, [pc, #220]	; (800498c <uart_comms+0x594>)
 80048ae:	8809      	ldrh	r1, [r1, #0]
 80048b0:	8051      	strh	r1, [r2, #2]
				HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 80048b2:	681c      	ldr	r4, [r3, #0]
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7fb fc8b 	bl	80001d0 <strlen>
 80048ba:	b282      	uxth	r2, r0
 80048bc:	4621      	mov	r1, r4
 80048be:	4834      	ldr	r0, [pc, #208]	; (8004990 <uart_comms+0x598>)
 80048c0:	f7fd ff5f 	bl	8002782 <HAL_UART_Transmit_IT>
				if(uart_command[3] == '1'){ // first heating schedule
 80048c4:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <uart_comms+0x5bc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	78db      	ldrb	r3, [r3, #3]
 80048ca:	2b31      	cmp	r3, #49	; 0x31
 80048cc:	d07c      	beq.n	80049c8 <uart_comms+0x5d0>
				else if(uart_command[3] == '2'){ // second heating schedule
 80048ce:	2b32      	cmp	r3, #50	; 0x32
 80048d0:	f000 80c5 	beq.w	8004a5e <uart_comms+0x666>
				else if(uart_command[3] == '3'){ // 3rd heating schedule
 80048d4:	2b33      	cmp	r3, #51	; 0x33
 80048d6:	f47f adf6 	bne.w	80044c6 <uart_comms+0xce>
					heating_info = strtok((char*)uart_command_copy, ",");
 80048da:	4d33      	ldr	r5, [pc, #204]	; (80049a8 <uart_comms+0x5b0>)
 80048dc:	4629      	mov	r1, r5
 80048de:	4b2f      	ldr	r3, [pc, #188]	; (800499c <uart_comms+0x5a4>)
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	f000 fb83 	bl	8004fec <strtok>
 80048e6:	4c2e      	ldr	r4, [pc, #184]	; (80049a0 <uart_comms+0x5a8>)
 80048e8:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 80048ea:	4629      	mov	r1, r5
 80048ec:	2000      	movs	r0, #0
 80048ee:	f000 fb7d 	bl	8004fec <strtok>
 80048f2:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 80048f4:	4629      	mov	r1, r5
 80048f6:	2000      	movs	r0, #0
 80048f8:	f000 fb78 	bl	8004fec <strtok>
 80048fc:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 80048fe:	220a      	movs	r2, #10
 8004900:	2100      	movs	r1, #0
 8004902:	f000 fc47 	bl	8005194 <strtol>
 8004906:	4e2e      	ldr	r6, [pc, #184]	; (80049c0 <uart_comms+0x5c8>)
 8004908:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
					heating_info = (strtok(NULL, ","));
 800490c:	4629      	mov	r1, r5
 800490e:	2000      	movs	r0, #0
 8004910:	f000 fb6c 	bl	8004fec <strtok>
 8004914:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8004916:	220a      	movs	r2, #10
 8004918:	2100      	movs	r1, #0
 800491a:	f000 fc3b 	bl	8005194 <strtol>
 800491e:	f886 0051 	strb.w	r0, [r6, #81]	; 0x51
					heating_info = (strtok(NULL, ","));
 8004922:	4629      	mov	r1, r5
 8004924:	2000      	movs	r0, #0
 8004926:	f000 fb61 	bl	8004fec <strtok>
 800492a:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 800492c:	220a      	movs	r2, #10
 800492e:	2100      	movs	r1, #0
 8004930:	f000 fc30 	bl	8005194 <strtol>
 8004934:	f886 0052 	strb.w	r0, [r6, #82]	; 0x52
					heating_info = (strtok(NULL, ","));
 8004938:	4629      	mov	r1, r5
 800493a:	2000      	movs	r0, #0
 800493c:	f000 fb56 	bl	8004fec <strtok>
 8004940:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8004942:	220a      	movs	r2, #10
 8004944:	2100      	movs	r1, #0
 8004946:	f000 fc25 	bl	8005194 <strtol>
 800494a:	f886 0064 	strb.w	r0, [r6, #100]	; 0x64
					heating_info = (strtok(NULL, ","));
 800494e:	4629      	mov	r1, r5
 8004950:	2000      	movs	r0, #0
 8004952:	f000 fb4b 	bl	8004fec <strtok>
 8004956:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 8004958:	220a      	movs	r2, #10
 800495a:	2100      	movs	r1, #0
 800495c:	f000 fc1a 	bl	8005194 <strtol>
 8004960:	f886 0065 	strb.w	r0, [r6, #101]	; 0x65
					heating_info = (strtok(NULL, "\r\n"));
 8004964:	4917      	ldr	r1, [pc, #92]	; (80049c4 <uart_comms+0x5cc>)
 8004966:	2000      	movs	r0, #0
 8004968:	f000 fb40 	bl	8004fec <strtok>
 800496c:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 800496e:	220a      	movs	r2, #10
 8004970:	2100      	movs	r1, #0
 8004972:	f000 fc0f 	bl	8005194 <strtol>
 8004976:	f886 0066 	strb.w	r0, [r6, #102]	; 0x66
 800497a:	e5a4      	b.n	80044c6 <uart_comms+0xce>
 800497c:	20000264 	.word	0x20000264
 8004980:	20000004 	.word	0x20000004
 8004984:	20000274 	.word	0x20000274
 8004988:	20000270 	.word	0x20000270
 800498c:	20000008 	.word	0x20000008
 8004990:	200003a0 	.word	0x200003a0
 8004994:	20000410 	.word	0x20000410
 8004998:	08005980 	.word	0x08005980
 800499c:	20000290 	.word	0x20000290
 80049a0:	20000258 	.word	0x20000258
 80049a4:	20000280 	.word	0x20000280
 80049a8:	08005984 	.word	0x08005984
 80049ac:	08005988 	.word	0x08005988
 80049b0:	20000234 	.word	0x20000234
 80049b4:	2000028c 	.word	0x2000028c
 80049b8:	20000278 	.word	0x20000278
 80049bc:	20000228 	.word	0x20000228
 80049c0:	200004d0 	.word	0x200004d0
 80049c4:	0800598c 	.word	0x0800598c
					heating_info = strtok((char*)uart_command_copy, ",");
 80049c8:	4dc0      	ldr	r5, [pc, #768]	; (8004ccc <uart_comms+0x8d4>)
 80049ca:	4629      	mov	r1, r5
 80049cc:	4bc0      	ldr	r3, [pc, #768]	; (8004cd0 <uart_comms+0x8d8>)
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	f000 fb0c 	bl	8004fec <strtok>
 80049d4:	4cbf      	ldr	r4, [pc, #764]	; (8004cd4 <uart_comms+0x8dc>)
 80049d6:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 80049d8:	4629      	mov	r1, r5
 80049da:	2000      	movs	r0, #0
 80049dc:	f000 fb06 	bl	8004fec <strtok>
 80049e0:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 80049e2:	4629      	mov	r1, r5
 80049e4:	2000      	movs	r0, #0
 80049e6:	f000 fb01 	bl	8004fec <strtok>
 80049ea:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 80049ec:	220a      	movs	r2, #10
 80049ee:	2100      	movs	r1, #0
 80049f0:	f000 fbd0 	bl	8005194 <strtol>
 80049f4:	4eb8      	ldr	r6, [pc, #736]	; (8004cd8 <uart_comms+0x8e0>)
 80049f6:	7030      	strb	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 80049f8:	4629      	mov	r1, r5
 80049fa:	2000      	movs	r0, #0
 80049fc:	f000 faf6 	bl	8004fec <strtok>
 8004a00:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8004a02:	220a      	movs	r2, #10
 8004a04:	2100      	movs	r1, #0
 8004a06:	f000 fbc5 	bl	8005194 <strtol>
 8004a0a:	7070      	strb	r0, [r6, #1]
					heating_info = (strtok(NULL, ","));
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f000 faec 	bl	8004fec <strtok>
 8004a14:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8004a16:	220a      	movs	r2, #10
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f000 fbbb 	bl	8005194 <strtol>
 8004a1e:	70b0      	strb	r0, [r6, #2]
					heating_info = (strtok(NULL, ","));
 8004a20:	4629      	mov	r1, r5
 8004a22:	2000      	movs	r0, #0
 8004a24:	f000 fae2 	bl	8004fec <strtok>
 8004a28:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	f000 fbb1 	bl	8005194 <strtol>
 8004a32:	7530      	strb	r0, [r6, #20]
					heating_info = (strtok(NULL, ","));
 8004a34:	4629      	mov	r1, r5
 8004a36:	2000      	movs	r0, #0
 8004a38:	f000 fad8 	bl	8004fec <strtok>
 8004a3c:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8004a3e:	220a      	movs	r2, #10
 8004a40:	2100      	movs	r1, #0
 8004a42:	f000 fba7 	bl	8005194 <strtol>
 8004a46:	7570      	strb	r0, [r6, #21]
					heating_info = (strtok(NULL, "\r\n"));
 8004a48:	49a4      	ldr	r1, [pc, #656]	; (8004cdc <uart_comms+0x8e4>)
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f000 face 	bl	8004fec <strtok>
 8004a50:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8004a52:	220a      	movs	r2, #10
 8004a54:	2100      	movs	r1, #0
 8004a56:	f000 fb9d 	bl	8005194 <strtol>
 8004a5a:	75b0      	strb	r0, [r6, #22]
 8004a5c:	e533      	b.n	80044c6 <uart_comms+0xce>
					heating_info = strtok((char*)uart_command_copy, ",");
 8004a5e:	4d9b      	ldr	r5, [pc, #620]	; (8004ccc <uart_comms+0x8d4>)
 8004a60:	4629      	mov	r1, r5
 8004a62:	4b9b      	ldr	r3, [pc, #620]	; (8004cd0 <uart_comms+0x8d8>)
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	f000 fac1 	bl	8004fec <strtok>
 8004a6a:	4c9a      	ldr	r4, [pc, #616]	; (8004cd4 <uart_comms+0x8dc>)
 8004a6c:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8004a6e:	4629      	mov	r1, r5
 8004a70:	2000      	movs	r0, #0
 8004a72:	f000 fabb 	bl	8004fec <strtok>
 8004a76:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8004a78:	4629      	mov	r1, r5
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f000 fab6 	bl	8004fec <strtok>
 8004a80:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8004a82:	220a      	movs	r2, #10
 8004a84:	2100      	movs	r1, #0
 8004a86:	f000 fb85 	bl	8005194 <strtol>
 8004a8a:	4e93      	ldr	r6, [pc, #588]	; (8004cd8 <uart_comms+0x8e0>)
 8004a8c:	f886 0028 	strb.w	r0, [r6, #40]	; 0x28
					heating_info = (strtok(NULL, ","));
 8004a90:	4629      	mov	r1, r5
 8004a92:	2000      	movs	r0, #0
 8004a94:	f000 faaa 	bl	8004fec <strtok>
 8004a98:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8004a9a:	220a      	movs	r2, #10
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f000 fb79 	bl	8005194 <strtol>
 8004aa2:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
					heating_info = (strtok(NULL, ","));
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f000 fa9f 	bl	8004fec <strtok>
 8004aae:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8004ab0:	220a      	movs	r2, #10
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	f000 fb6e 	bl	8005194 <strtol>
 8004ab8:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
					heating_info = (strtok(NULL, ","));
 8004abc:	4629      	mov	r1, r5
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f000 fa94 	bl	8004fec <strtok>
 8004ac4:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8004ac6:	220a      	movs	r2, #10
 8004ac8:	2100      	movs	r1, #0
 8004aca:	f000 fb63 	bl	8005194 <strtol>
 8004ace:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
					heating_info = (strtok(NULL, ","));
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f000 fa89 	bl	8004fec <strtok>
 8004ada:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8004adc:	220a      	movs	r2, #10
 8004ade:	2100      	movs	r1, #0
 8004ae0:	f000 fb58 	bl	8005194 <strtol>
 8004ae4:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
					heating_info = (strtok(NULL, "\r\n"));
 8004ae8:	497c      	ldr	r1, [pc, #496]	; (8004cdc <uart_comms+0x8e4>)
 8004aea:	2000      	movs	r0, #0
 8004aec:	f000 fa7e 	bl	8004fec <strtok>
 8004af0:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8004af2:	220a      	movs	r2, #10
 8004af4:	2100      	movs	r1, #0
 8004af6:	f000 fb4d 	bl	8005194 <strtol>
 8004afa:	f886 003e 	strb.w	r0, [r6, #62]	; 0x3e
 8004afe:	e4e2      	b.n	80044c6 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8004b00:	4c77      	ldr	r4, [pc, #476]	; (8004ce0 <uart_comms+0x8e8>)
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	8812      	ldrh	r2, [r2, #0]
 8004b06:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	4d76      	ldr	r5, [pc, #472]	; (8004ce4 <uart_comms+0x8ec>)
 8004b0c:	782f      	ldrb	r7, [r5, #0]
 8004b0e:	709f      	strb	r7, [r3, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8004b10:	6826      	ldr	r6, [r4, #0]
 8004b12:	3603      	adds	r6, #3
 8004b14:	4b74      	ldr	r3, [pc, #464]	; (8004ce8 <uart_comms+0x8f0>)
 8004b16:	f8d3 8000 	ldr.w	r8, [r3]
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f7fb fb58 	bl	80001d0 <strlen>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4641      	mov	r1, r8
 8004b24:	4630      	mov	r0, r6
 8004b26:	f000 f96d 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004b2a:	6826      	ldr	r6, [r4, #0]
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7fb fb4f 	bl	80001d0 <strlen>
 8004b32:	5437      	strb	r7, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8004b34:	6826      	ldr	r6, [r4, #0]
 8004b36:	4630      	mov	r0, r6
 8004b38:	f7fb fb4a 	bl	80001d0 <strlen>
 8004b3c:	4406      	add	r6, r0
 8004b3e:	4b6b      	ldr	r3, [pc, #428]	; (8004cec <uart_comms+0x8f4>)
 8004b40:	681f      	ldr	r7, [r3, #0]
 8004b42:	4638      	mov	r0, r7
 8004b44:	f7fb fb44 	bl	80001d0 <strlen>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 f959 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004b52:	6826      	ldr	r6, [r4, #0]
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7fb fb3b 	bl	80001d0 <strlen>
 8004b5a:	782b      	ldrb	r3, [r5, #0]
 8004b5c:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 8004b5e:	6826      	ldr	r6, [r4, #0]
 8004b60:	4630      	mov	r0, r6
 8004b62:	f7fb fb35 	bl	80001d0 <strlen>
 8004b66:	4406      	add	r6, r0
 8004b68:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <uart_comms+0x8f8>)
 8004b6a:	681f      	ldr	r7, [r3, #0]
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7fb fb2f 	bl	80001d0 <strlen>
 8004b72:	4602      	mov	r2, r0
 8004b74:	4639      	mov	r1, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	f000 f944 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004b7c:	6826      	ldr	r6, [r4, #0]
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f7fb fb26 	bl	80001d0 <strlen>
 8004b84:	782b      	ldrb	r3, [r5, #0]
 8004b86:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 8004b88:	6826      	ldr	r6, [r4, #0]
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7fb fb20 	bl	80001d0 <strlen>
 8004b90:	4406      	add	r6, r0
 8004b92:	4b58      	ldr	r3, [pc, #352]	; (8004cf4 <uart_comms+0x8fc>)
 8004b94:	681f      	ldr	r7, [r3, #0]
 8004b96:	4638      	mov	r0, r7
 8004b98:	f7fb fb1a 	bl	80001d0 <strlen>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f000 f92f 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004ba6:	6826      	ldr	r6, [r4, #0]
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7fb fb11 	bl	80001d0 <strlen>
 8004bae:	782b      	ldrb	r3, [r5, #0]
 8004bb0:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8004bb2:	6826      	ldr	r6, [r4, #0]
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f7fb fb0b 	bl	80001d0 <strlen>
 8004bba:	4406      	add	r6, r0
 8004bbc:	4b4e      	ldr	r3, [pc, #312]	; (8004cf8 <uart_comms+0x900>)
 8004bbe:	681f      	ldr	r7, [r3, #0]
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	f7fb fb05 	bl	80001d0 <strlen>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f000 f91a 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004bd0:	6826      	ldr	r6, [r4, #0]
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f7fb fafc 	bl	80001d0 <strlen>
 8004bd8:	782b      	ldrb	r3, [r5, #0]
 8004bda:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8004bdc:	6826      	ldr	r6, [r4, #0]
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7fb faf6 	bl	80001d0 <strlen>
 8004be4:	4406      	add	r6, r0
 8004be6:	4b45      	ldr	r3, [pc, #276]	; (8004cfc <uart_comms+0x904>)
 8004be8:	681f      	ldr	r7, [r3, #0]
 8004bea:	4638      	mov	r0, r7
 8004bec:	f7fb faf0 	bl	80001d0 <strlen>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 f905 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004bfa:	6824      	ldr	r4, [r4, #0]
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7fb fae7 	bl	80001d0 <strlen>
 8004c02:	782b      	ldrb	r3, [r5, #0]
 8004c04:	5423      	strb	r3, [r4, r0]
			if(valve_state == valve_OPEN){
 8004c06:	4b3e      	ldr	r3, [pc, #248]	; (8004d00 <uart_comms+0x908>)
 8004c08:	681c      	ldr	r4, [r3, #0]
 8004c0a:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <uart_comms+0x90c>)
 8004c0c:	429c      	cmp	r4, r3
 8004c0e:	d01f      	beq.n	8004c50 <uart_comms+0x858>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 8004c10:	4b33      	ldr	r3, [pc, #204]	; (8004ce0 <uart_comms+0x8e8>)
 8004c12:	681d      	ldr	r5, [r3, #0]
 8004c14:	4628      	mov	r0, r5
 8004c16:	f7fb fadb 	bl	80001d0 <strlen>
 8004c1a:	4405      	add	r5, r0
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7fb fad7 	bl	80001d0 <strlen>
 8004c22:	4602      	mov	r2, r0
 8004c24:	4621      	mov	r1, r4
 8004c26:	4628      	mov	r0, r5
 8004c28:	f000 f8ec 	bl	8004e04 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8004c2c:	4c2c      	ldr	r4, [pc, #176]	; (8004ce0 <uart_comms+0x8e8>)
 8004c2e:	6825      	ldr	r5, [r4, #0]
 8004c30:	4628      	mov	r0, r5
 8004c32:	f7fb facd 	bl	80001d0 <strlen>
 8004c36:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <uart_comms+0x910>)
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8004c3c:	6824      	ldr	r4, [r4, #0]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7fb fac6 	bl	80001d0 <strlen>
 8004c44:	b282      	uxth	r2, r0
 8004c46:	4621      	mov	r1, r4
 8004c48:	4830      	ldr	r0, [pc, #192]	; (8004d0c <uart_comms+0x914>)
 8004c4a:	f7fd fd9a 	bl	8002782 <HAL_UART_Transmit_IT>
			break;
 8004c4e:	e43a      	b.n	80044c6 <uart_comms+0xce>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8004c50:	4b23      	ldr	r3, [pc, #140]	; (8004ce0 <uart_comms+0x8e8>)
 8004c52:	681d      	ldr	r5, [r3, #0]
 8004c54:	4628      	mov	r0, r5
 8004c56:	f7fb fabb 	bl	80001d0 <strlen>
 8004c5a:	4405      	add	r5, r0
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f7fb fab7 	bl	80001d0 <strlen>
 8004c62:	1e42      	subs	r2, r0, #1
 8004c64:	4621      	mov	r1, r4
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 f8cc 	bl	8004e04 <memcpy>
 8004c6c:	e7de      	b.n	8004c2c <uart_comms+0x834>
			log_receiced_num = uart_command[3] - 48;
 8004c6e:	78d3      	ldrb	r3, [r2, #3]
 8004c70:	3b30      	subs	r3, #48	; 0x30
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <uart_comms+0x918>)
 8004c76:	7013      	strb	r3, [r2, #0]
			if(log_receiced_num > log_counter && log_full == 0){
 8004c78:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <uart_comms+0x91c>)
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d904      	bls.n	8004c8a <uart_comms+0x892>
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <uart_comms+0x920>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f43f ac1e 	beq.w	80044c6 <uart_comms+0xce>
				memcpy(flash_stored, flash_mem_start, 50 );
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <uart_comms+0x924>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <uart_comms+0x928>)
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c96:	681e      	ldr	r6, [r3, #0]
 8004c98:	685d      	ldr	r5, [r3, #4]
 8004c9a:	689c      	ldr	r4, [r3, #8]
 8004c9c:	68d8      	ldr	r0, [r3, #12]
 8004c9e:	6016      	str	r6, [r2, #0]
 8004ca0:	6055      	str	r5, [r2, #4]
 8004ca2:	6094      	str	r4, [r2, #8]
 8004ca4:	60d0      	str	r0, [r2, #12]
 8004ca6:	3310      	adds	r3, #16
 8004ca8:	3210      	adds	r2, #16
 8004caa:	428b      	cmp	r3, r1
 8004cac:	d1f3      	bne.n	8004c96 <uart_comms+0x89e>
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	8013      	strh	r3, [r2, #0]
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)flash_stored, strlen((char*)flash_stored));
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <uart_comms+0x928>)
 8004cb4:	681c      	ldr	r4, [r3, #0]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7fb fa8a 	bl	80001d0 <strlen>
 8004cbc:	b282      	uxth	r2, r0
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4812      	ldr	r0, [pc, #72]	; (8004d0c <uart_comms+0x914>)
 8004cc2:	f7fd fd5e 	bl	8002782 <HAL_UART_Transmit_IT>
 8004cc6:	f7ff bbfe 	b.w	80044c6 <uart_comms+0xce>
 8004cca:	bf00      	nop
 8004ccc:	08005984 	.word	0x08005984
 8004cd0:	20000290 	.word	0x20000290
 8004cd4:	20000258 	.word	0x20000258
 8004cd8:	200004d0 	.word	0x200004d0
 8004cdc:	0800598c 	.word	0x0800598c
 8004ce0:	20000264 	.word	0x20000264
 8004ce4:	20000004 	.word	0x20000004
 8004ce8:	20000230 	.word	0x20000230
 8004cec:	200002a0 	.word	0x200002a0
 8004cf0:	20000224 	.word	0x20000224
 8004cf4:	20000244 	.word	0x20000244
 8004cf8:	20000284 	.word	0x20000284
 8004cfc:	20000254 	.word	0x20000254
 8004d00:	20000298 	.word	0x20000298
 8004d04:	2000002c 	.word	0x2000002c
 8004d08:	20000008 	.word	0x20000008
 8004d0c:	200003a0 	.word	0x200003a0
 8004d10:	2000025e 	.word	0x2000025e
 8004d14:	2000025c 	.word	0x2000025c
 8004d18:	2000025d 	.word	0x2000025d
 8004d1c:	20000010 	.word	0x20000010
 8004d20:	20000240 	.word	0x20000240

08004d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004d28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004d2a:	e003      	b.n	8004d34 <LoopCopyDataInit>

08004d2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004d2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004d30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004d32:	3104      	adds	r1, #4

08004d34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004d34:	480b      	ldr	r0, [pc, #44]	; (8004d64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004d38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004d3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004d3c:	d3f6      	bcc.n	8004d2c <CopyDataInit>
	ldr	r2, =_sbss
 8004d3e:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004d40:	e002      	b.n	8004d48 <LoopFillZerobss>

08004d42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004d42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004d44:	f842 3b04 	str.w	r3, [r2], #4

08004d48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <LoopForever+0x16>)
	cmp	r2, r3
 8004d4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004d4c:	d3f9      	bcc.n	8004d42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d4e:	f7ff fb1f 	bl	8004390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d52:	f000 f811 	bl	8004d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d56:	f7fe fe87 	bl	8003a68 <main>

08004d5a <LoopForever>:

LoopForever:
    b LoopForever
 8004d5a:	e7fe      	b.n	8004d5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d5c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004d60:	08005afc 	.word	0x08005afc
	ldr	r0, =_sdata
 8004d64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004d68:	20000200 	.word	0x20000200
	ldr	r2, =_sbss
 8004d6c:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 8004d70:	20000584 	.word	0x20000584

08004d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d74:	e7fe      	b.n	8004d74 <ADC1_2_IRQHandler>
	...

08004d78 <__libc_init_array>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	4e0d      	ldr	r6, [pc, #52]	; (8004db0 <__libc_init_array+0x38>)
 8004d7c:	4c0d      	ldr	r4, [pc, #52]	; (8004db4 <__libc_init_array+0x3c>)
 8004d7e:	1ba4      	subs	r4, r4, r6
 8004d80:	10a4      	asrs	r4, r4, #2
 8004d82:	2500      	movs	r5, #0
 8004d84:	42a5      	cmp	r5, r4
 8004d86:	d109      	bne.n	8004d9c <__libc_init_array+0x24>
 8004d88:	4e0b      	ldr	r6, [pc, #44]	; (8004db8 <__libc_init_array+0x40>)
 8004d8a:	4c0c      	ldr	r4, [pc, #48]	; (8004dbc <__libc_init_array+0x44>)
 8004d8c:	f000 fdb8 	bl	8005900 <_init>
 8004d90:	1ba4      	subs	r4, r4, r6
 8004d92:	10a4      	asrs	r4, r4, #2
 8004d94:	2500      	movs	r5, #0
 8004d96:	42a5      	cmp	r5, r4
 8004d98:	d105      	bne.n	8004da6 <__libc_init_array+0x2e>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004da0:	4798      	blx	r3
 8004da2:	3501      	adds	r5, #1
 8004da4:	e7ee      	b.n	8004d84 <__libc_init_array+0xc>
 8004da6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004daa:	4798      	blx	r3
 8004dac:	3501      	adds	r5, #1
 8004dae:	e7f2      	b.n	8004d96 <__libc_init_array+0x1e>
 8004db0:	08005af4 	.word	0x08005af4
 8004db4:	08005af4 	.word	0x08005af4
 8004db8:	08005af4 	.word	0x08005af4
 8004dbc:	08005af8 	.word	0x08005af8

08004dc0 <__itoa>:
 8004dc0:	1e93      	subs	r3, r2, #2
 8004dc2:	2b22      	cmp	r3, #34	; 0x22
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	d904      	bls.n	8004dd4 <__itoa+0x14>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	700b      	strb	r3, [r1, #0]
 8004dce:	461c      	mov	r4, r3
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	bd10      	pop	{r4, pc}
 8004dd4:	2a0a      	cmp	r2, #10
 8004dd6:	d109      	bne.n	8004dec <__itoa+0x2c>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	da07      	bge.n	8004dec <__itoa+0x2c>
 8004ddc:	232d      	movs	r3, #45	; 0x2d
 8004dde:	700b      	strb	r3, [r1, #0]
 8004de0:	4240      	negs	r0, r0
 8004de2:	2101      	movs	r1, #1
 8004de4:	4421      	add	r1, r4
 8004de6:	f000 f9eb 	bl	80051c0 <__utoa>
 8004dea:	e7f1      	b.n	8004dd0 <__itoa+0x10>
 8004dec:	2100      	movs	r1, #0
 8004dee:	e7f9      	b.n	8004de4 <__itoa+0x24>

08004df0 <itoa>:
 8004df0:	f7ff bfe6 	b.w	8004dc0 <__itoa>

08004df4 <malloc>:
 8004df4:	4b02      	ldr	r3, [pc, #8]	; (8004e00 <malloc+0xc>)
 8004df6:	4601      	mov	r1, r0
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	f000 b865 	b.w	8004ec8 <_malloc_r>
 8004dfe:	bf00      	nop
 8004e00:	20000030 	.word	0x20000030

08004e04 <memcpy>:
 8004e04:	b510      	push	{r4, lr}
 8004e06:	1e43      	subs	r3, r0, #1
 8004e08:	440a      	add	r2, r1
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	d100      	bne.n	8004e10 <memcpy+0xc>
 8004e0e:	bd10      	pop	{r4, pc}
 8004e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e18:	e7f7      	b.n	8004e0a <memcpy+0x6>

08004e1a <memset>:
 8004e1a:	4402      	add	r2, r0
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d100      	bne.n	8004e24 <memset+0xa>
 8004e22:	4770      	bx	lr
 8004e24:	f803 1b01 	strb.w	r1, [r3], #1
 8004e28:	e7f9      	b.n	8004e1e <memset+0x4>
	...

08004e2c <_free_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4605      	mov	r5, r0
 8004e30:	2900      	cmp	r1, #0
 8004e32:	d045      	beq.n	8004ec0 <_free_r+0x94>
 8004e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e38:	1f0c      	subs	r4, r1, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfb8      	it	lt
 8004e3e:	18e4      	addlt	r4, r4, r3
 8004e40:	f000 fa13 	bl	800526a <__malloc_lock>
 8004e44:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <_free_r+0x98>)
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	4610      	mov	r0, r2
 8004e4a:	b933      	cbnz	r3, 8004e5a <_free_r+0x2e>
 8004e4c:	6063      	str	r3, [r4, #4]
 8004e4e:	6014      	str	r4, [r2, #0]
 8004e50:	4628      	mov	r0, r5
 8004e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e56:	f000 ba09 	b.w	800526c <__malloc_unlock>
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	d90c      	bls.n	8004e78 <_free_r+0x4c>
 8004e5e:	6821      	ldr	r1, [r4, #0]
 8004e60:	1862      	adds	r2, r4, r1
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bf04      	itt	eq
 8004e66:	681a      	ldreq	r2, [r3, #0]
 8004e68:	685b      	ldreq	r3, [r3, #4]
 8004e6a:	6063      	str	r3, [r4, #4]
 8004e6c:	bf04      	itt	eq
 8004e6e:	1852      	addeq	r2, r2, r1
 8004e70:	6022      	streq	r2, [r4, #0]
 8004e72:	6004      	str	r4, [r0, #0]
 8004e74:	e7ec      	b.n	8004e50 <_free_r+0x24>
 8004e76:	4613      	mov	r3, r2
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	b10a      	cbz	r2, 8004e80 <_free_r+0x54>
 8004e7c:	42a2      	cmp	r2, r4
 8004e7e:	d9fa      	bls.n	8004e76 <_free_r+0x4a>
 8004e80:	6819      	ldr	r1, [r3, #0]
 8004e82:	1858      	adds	r0, r3, r1
 8004e84:	42a0      	cmp	r0, r4
 8004e86:	d10b      	bne.n	8004ea0 <_free_r+0x74>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	4401      	add	r1, r0
 8004e8c:	1858      	adds	r0, r3, r1
 8004e8e:	4282      	cmp	r2, r0
 8004e90:	6019      	str	r1, [r3, #0]
 8004e92:	d1dd      	bne.n	8004e50 <_free_r+0x24>
 8004e94:	6810      	ldr	r0, [r2, #0]
 8004e96:	6852      	ldr	r2, [r2, #4]
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	4401      	add	r1, r0
 8004e9c:	6019      	str	r1, [r3, #0]
 8004e9e:	e7d7      	b.n	8004e50 <_free_r+0x24>
 8004ea0:	d902      	bls.n	8004ea8 <_free_r+0x7c>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	e7d3      	b.n	8004e50 <_free_r+0x24>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	1821      	adds	r1, r4, r0
 8004eac:	428a      	cmp	r2, r1
 8004eae:	bf04      	itt	eq
 8004eb0:	6811      	ldreq	r1, [r2, #0]
 8004eb2:	6852      	ldreq	r2, [r2, #4]
 8004eb4:	6062      	str	r2, [r4, #4]
 8004eb6:	bf04      	itt	eq
 8004eb8:	1809      	addeq	r1, r1, r0
 8004eba:	6021      	streq	r1, [r4, #0]
 8004ebc:	605c      	str	r4, [r3, #4]
 8004ebe:	e7c7      	b.n	8004e50 <_free_r+0x24>
 8004ec0:	bd38      	pop	{r3, r4, r5, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200002a8 	.word	0x200002a8

08004ec8 <_malloc_r>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	1ccd      	adds	r5, r1, #3
 8004ecc:	f025 0503 	bic.w	r5, r5, #3
 8004ed0:	3508      	adds	r5, #8
 8004ed2:	2d0c      	cmp	r5, #12
 8004ed4:	bf38      	it	cc
 8004ed6:	250c      	movcc	r5, #12
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	4606      	mov	r6, r0
 8004edc:	db01      	blt.n	8004ee2 <_malloc_r+0x1a>
 8004ede:	42a9      	cmp	r1, r5
 8004ee0:	d903      	bls.n	8004eea <_malloc_r+0x22>
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	6033      	str	r3, [r6, #0]
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	bd70      	pop	{r4, r5, r6, pc}
 8004eea:	f000 f9be 	bl	800526a <__malloc_lock>
 8004eee:	4a23      	ldr	r2, [pc, #140]	; (8004f7c <_malloc_r+0xb4>)
 8004ef0:	6814      	ldr	r4, [r2, #0]
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	b991      	cbnz	r1, 8004f1c <_malloc_r+0x54>
 8004ef6:	4c22      	ldr	r4, [pc, #136]	; (8004f80 <_malloc_r+0xb8>)
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	b91b      	cbnz	r3, 8004f04 <_malloc_r+0x3c>
 8004efc:	4630      	mov	r0, r6
 8004efe:	f000 f841 	bl	8004f84 <_sbrk_r>
 8004f02:	6020      	str	r0, [r4, #0]
 8004f04:	4629      	mov	r1, r5
 8004f06:	4630      	mov	r0, r6
 8004f08:	f000 f83c 	bl	8004f84 <_sbrk_r>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d126      	bne.n	8004f5e <_malloc_r+0x96>
 8004f10:	230c      	movs	r3, #12
 8004f12:	6033      	str	r3, [r6, #0]
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 f9a9 	bl	800526c <__malloc_unlock>
 8004f1a:	e7e4      	b.n	8004ee6 <_malloc_r+0x1e>
 8004f1c:	680b      	ldr	r3, [r1, #0]
 8004f1e:	1b5b      	subs	r3, r3, r5
 8004f20:	d41a      	bmi.n	8004f58 <_malloc_r+0x90>
 8004f22:	2b0b      	cmp	r3, #11
 8004f24:	d90f      	bls.n	8004f46 <_malloc_r+0x7e>
 8004f26:	600b      	str	r3, [r1, #0]
 8004f28:	50cd      	str	r5, [r1, r3]
 8004f2a:	18cc      	adds	r4, r1, r3
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f000 f99d 	bl	800526c <__malloc_unlock>
 8004f32:	f104 000b 	add.w	r0, r4, #11
 8004f36:	1d23      	adds	r3, r4, #4
 8004f38:	f020 0007 	bic.w	r0, r0, #7
 8004f3c:	1ac3      	subs	r3, r0, r3
 8004f3e:	d01b      	beq.n	8004f78 <_malloc_r+0xb0>
 8004f40:	425a      	negs	r2, r3
 8004f42:	50e2      	str	r2, [r4, r3]
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
 8004f46:	428c      	cmp	r4, r1
 8004f48:	bf0d      	iteet	eq
 8004f4a:	6863      	ldreq	r3, [r4, #4]
 8004f4c:	684b      	ldrne	r3, [r1, #4]
 8004f4e:	6063      	strne	r3, [r4, #4]
 8004f50:	6013      	streq	r3, [r2, #0]
 8004f52:	bf18      	it	ne
 8004f54:	460c      	movne	r4, r1
 8004f56:	e7e9      	b.n	8004f2c <_malloc_r+0x64>
 8004f58:	460c      	mov	r4, r1
 8004f5a:	6849      	ldr	r1, [r1, #4]
 8004f5c:	e7ca      	b.n	8004ef4 <_malloc_r+0x2c>
 8004f5e:	1cc4      	adds	r4, r0, #3
 8004f60:	f024 0403 	bic.w	r4, r4, #3
 8004f64:	42a0      	cmp	r0, r4
 8004f66:	d005      	beq.n	8004f74 <_malloc_r+0xac>
 8004f68:	1a21      	subs	r1, r4, r0
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f000 f80a 	bl	8004f84 <_sbrk_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0cd      	beq.n	8004f10 <_malloc_r+0x48>
 8004f74:	6025      	str	r5, [r4, #0]
 8004f76:	e7d9      	b.n	8004f2c <_malloc_r+0x64>
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200002a8 	.word	0x200002a8
 8004f80:	200002ac 	.word	0x200002ac

08004f84 <_sbrk_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4c06      	ldr	r4, [pc, #24]	; (8004fa0 <_sbrk_r+0x1c>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	f000 fca8 	bl	80058e4 <_sbrk>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_sbrk_r+0x1a>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_sbrk_r+0x1a>
 8004f9c:	602b      	str	r3, [r5, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	20000580 	.word	0x20000580

08004fa4 <siprintf>:
 8004fa4:	b40e      	push	{r1, r2, r3}
 8004fa6:	b500      	push	{lr}
 8004fa8:	b09c      	sub	sp, #112	; 0x70
 8004faa:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004fae:	ab1d      	add	r3, sp, #116	; 0x74
 8004fb0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004fb4:	9002      	str	r0, [sp, #8]
 8004fb6:	9006      	str	r0, [sp, #24]
 8004fb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fbc:	480a      	ldr	r0, [pc, #40]	; (8004fe8 <siprintf+0x44>)
 8004fbe:	9104      	str	r1, [sp, #16]
 8004fc0:	9107      	str	r1, [sp, #28]
 8004fc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fca:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004fce:	6800      	ldr	r0, [r0, #0]
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	a902      	add	r1, sp, #8
 8004fd4:	f000 f9a6 	bl	8005324 <_svfiprintf_r>
 8004fd8:	9b02      	ldr	r3, [sp, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	b01c      	add	sp, #112	; 0x70
 8004fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fe4:	b003      	add	sp, #12
 8004fe6:	4770      	bx	lr
 8004fe8:	20000030 	.word	0x20000030

08004fec <strtok>:
 8004fec:	4b13      	ldr	r3, [pc, #76]	; (800503c <strtok+0x50>)
 8004fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff2:	681d      	ldr	r5, [r3, #0]
 8004ff4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	460f      	mov	r7, r1
 8004ffa:	b9b4      	cbnz	r4, 800502a <strtok+0x3e>
 8004ffc:	2050      	movs	r0, #80	; 0x50
 8004ffe:	f7ff fef9 	bl	8004df4 <malloc>
 8005002:	65a8      	str	r0, [r5, #88]	; 0x58
 8005004:	6004      	str	r4, [r0, #0]
 8005006:	6044      	str	r4, [r0, #4]
 8005008:	6084      	str	r4, [r0, #8]
 800500a:	60c4      	str	r4, [r0, #12]
 800500c:	6104      	str	r4, [r0, #16]
 800500e:	6144      	str	r4, [r0, #20]
 8005010:	6184      	str	r4, [r0, #24]
 8005012:	6284      	str	r4, [r0, #40]	; 0x28
 8005014:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005016:	6304      	str	r4, [r0, #48]	; 0x30
 8005018:	6344      	str	r4, [r0, #52]	; 0x34
 800501a:	6384      	str	r4, [r0, #56]	; 0x38
 800501c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800501e:	6404      	str	r4, [r0, #64]	; 0x40
 8005020:	6444      	str	r4, [r0, #68]	; 0x44
 8005022:	6484      	str	r4, [r0, #72]	; 0x48
 8005024:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005026:	7704      	strb	r4, [r0, #28]
 8005028:	6244      	str	r4, [r0, #36]	; 0x24
 800502a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800502c:	4639      	mov	r1, r7
 800502e:	4630      	mov	r0, r6
 8005030:	2301      	movs	r3, #1
 8005032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005036:	f000 b803 	b.w	8005040 <__strtok_r>
 800503a:	bf00      	nop
 800503c:	20000030 	.word	0x20000030

08005040 <__strtok_r>:
 8005040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005042:	b918      	cbnz	r0, 800504c <__strtok_r+0xc>
 8005044:	6810      	ldr	r0, [r2, #0]
 8005046:	b908      	cbnz	r0, 800504c <__strtok_r+0xc>
 8005048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800504a:	4620      	mov	r0, r4
 800504c:	4604      	mov	r4, r0
 800504e:	460f      	mov	r7, r1
 8005050:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005054:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005058:	b91e      	cbnz	r6, 8005062 <__strtok_r+0x22>
 800505a:	b965      	cbnz	r5, 8005076 <__strtok_r+0x36>
 800505c:	6015      	str	r5, [r2, #0]
 800505e:	4628      	mov	r0, r5
 8005060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005062:	42b5      	cmp	r5, r6
 8005064:	d1f6      	bne.n	8005054 <__strtok_r+0x14>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ef      	bne.n	800504a <__strtok_r+0xa>
 800506a:	6014      	str	r4, [r2, #0]
 800506c:	7003      	strb	r3, [r0, #0]
 800506e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005070:	461c      	mov	r4, r3
 8005072:	e00c      	b.n	800508e <__strtok_r+0x4e>
 8005074:	b915      	cbnz	r5, 800507c <__strtok_r+0x3c>
 8005076:	f814 3b01 	ldrb.w	r3, [r4], #1
 800507a:	460e      	mov	r6, r1
 800507c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005080:	42ab      	cmp	r3, r5
 8005082:	d1f7      	bne.n	8005074 <__strtok_r+0x34>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f3      	beq.n	8005070 <__strtok_r+0x30>
 8005088:	2300      	movs	r3, #0
 800508a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800508e:	6014      	str	r4, [r2, #0]
 8005090:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005092 <_strtol_l.isra.0>:
 8005092:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005096:	4680      	mov	r8, r0
 8005098:	4689      	mov	r9, r1
 800509a:	4692      	mov	sl, r2
 800509c:	461f      	mov	r7, r3
 800509e:	468b      	mov	fp, r1
 80050a0:	465d      	mov	r5, fp
 80050a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050a8:	f000 f8ca 	bl	8005240 <__locale_ctype_ptr_l>
 80050ac:	4420      	add	r0, r4
 80050ae:	7846      	ldrb	r6, [r0, #1]
 80050b0:	f016 0608 	ands.w	r6, r6, #8
 80050b4:	d10b      	bne.n	80050ce <_strtol_l.isra.0+0x3c>
 80050b6:	2c2d      	cmp	r4, #45	; 0x2d
 80050b8:	d10b      	bne.n	80050d2 <_strtol_l.isra.0+0x40>
 80050ba:	782c      	ldrb	r4, [r5, #0]
 80050bc:	2601      	movs	r6, #1
 80050be:	f10b 0502 	add.w	r5, fp, #2
 80050c2:	b167      	cbz	r7, 80050de <_strtol_l.isra.0+0x4c>
 80050c4:	2f10      	cmp	r7, #16
 80050c6:	d114      	bne.n	80050f2 <_strtol_l.isra.0+0x60>
 80050c8:	2c30      	cmp	r4, #48	; 0x30
 80050ca:	d00a      	beq.n	80050e2 <_strtol_l.isra.0+0x50>
 80050cc:	e011      	b.n	80050f2 <_strtol_l.isra.0+0x60>
 80050ce:	46ab      	mov	fp, r5
 80050d0:	e7e6      	b.n	80050a0 <_strtol_l.isra.0+0xe>
 80050d2:	2c2b      	cmp	r4, #43	; 0x2b
 80050d4:	bf04      	itt	eq
 80050d6:	782c      	ldrbeq	r4, [r5, #0]
 80050d8:	f10b 0502 	addeq.w	r5, fp, #2
 80050dc:	e7f1      	b.n	80050c2 <_strtol_l.isra.0+0x30>
 80050de:	2c30      	cmp	r4, #48	; 0x30
 80050e0:	d127      	bne.n	8005132 <_strtol_l.isra.0+0xa0>
 80050e2:	782b      	ldrb	r3, [r5, #0]
 80050e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80050e8:	2b58      	cmp	r3, #88	; 0x58
 80050ea:	d14b      	bne.n	8005184 <_strtol_l.isra.0+0xf2>
 80050ec:	786c      	ldrb	r4, [r5, #1]
 80050ee:	2710      	movs	r7, #16
 80050f0:	3502      	adds	r5, #2
 80050f2:	2e00      	cmp	r6, #0
 80050f4:	bf0c      	ite	eq
 80050f6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80050fa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80050fe:	2200      	movs	r2, #0
 8005100:	fbb1 fef7 	udiv	lr, r1, r7
 8005104:	4610      	mov	r0, r2
 8005106:	fb07 1c1e 	mls	ip, r7, lr, r1
 800510a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800510e:	2b09      	cmp	r3, #9
 8005110:	d811      	bhi.n	8005136 <_strtol_l.isra.0+0xa4>
 8005112:	461c      	mov	r4, r3
 8005114:	42a7      	cmp	r7, r4
 8005116:	dd1d      	ble.n	8005154 <_strtol_l.isra.0+0xc2>
 8005118:	1c53      	adds	r3, r2, #1
 800511a:	d007      	beq.n	800512c <_strtol_l.isra.0+0x9a>
 800511c:	4586      	cmp	lr, r0
 800511e:	d316      	bcc.n	800514e <_strtol_l.isra.0+0xbc>
 8005120:	d101      	bne.n	8005126 <_strtol_l.isra.0+0x94>
 8005122:	45a4      	cmp	ip, r4
 8005124:	db13      	blt.n	800514e <_strtol_l.isra.0+0xbc>
 8005126:	fb00 4007 	mla	r0, r0, r7, r4
 800512a:	2201      	movs	r2, #1
 800512c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005130:	e7eb      	b.n	800510a <_strtol_l.isra.0+0x78>
 8005132:	270a      	movs	r7, #10
 8005134:	e7dd      	b.n	80050f2 <_strtol_l.isra.0+0x60>
 8005136:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800513a:	2b19      	cmp	r3, #25
 800513c:	d801      	bhi.n	8005142 <_strtol_l.isra.0+0xb0>
 800513e:	3c37      	subs	r4, #55	; 0x37
 8005140:	e7e8      	b.n	8005114 <_strtol_l.isra.0+0x82>
 8005142:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005146:	2b19      	cmp	r3, #25
 8005148:	d804      	bhi.n	8005154 <_strtol_l.isra.0+0xc2>
 800514a:	3c57      	subs	r4, #87	; 0x57
 800514c:	e7e2      	b.n	8005114 <_strtol_l.isra.0+0x82>
 800514e:	f04f 32ff 	mov.w	r2, #4294967295
 8005152:	e7eb      	b.n	800512c <_strtol_l.isra.0+0x9a>
 8005154:	1c53      	adds	r3, r2, #1
 8005156:	d108      	bne.n	800516a <_strtol_l.isra.0+0xd8>
 8005158:	2322      	movs	r3, #34	; 0x22
 800515a:	f8c8 3000 	str.w	r3, [r8]
 800515e:	4608      	mov	r0, r1
 8005160:	f1ba 0f00 	cmp.w	sl, #0
 8005164:	d107      	bne.n	8005176 <_strtol_l.isra.0+0xe4>
 8005166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516a:	b106      	cbz	r6, 800516e <_strtol_l.isra.0+0xdc>
 800516c:	4240      	negs	r0, r0
 800516e:	f1ba 0f00 	cmp.w	sl, #0
 8005172:	d00c      	beq.n	800518e <_strtol_l.isra.0+0xfc>
 8005174:	b122      	cbz	r2, 8005180 <_strtol_l.isra.0+0xee>
 8005176:	3d01      	subs	r5, #1
 8005178:	f8ca 5000 	str.w	r5, [sl]
 800517c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005180:	464d      	mov	r5, r9
 8005182:	e7f9      	b.n	8005178 <_strtol_l.isra.0+0xe6>
 8005184:	2430      	movs	r4, #48	; 0x30
 8005186:	2f00      	cmp	r7, #0
 8005188:	d1b3      	bne.n	80050f2 <_strtol_l.isra.0+0x60>
 800518a:	2708      	movs	r7, #8
 800518c:	e7b1      	b.n	80050f2 <_strtol_l.isra.0+0x60>
 800518e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005194 <strtol>:
 8005194:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <strtol+0x24>)
 8005196:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005198:	681c      	ldr	r4, [r3, #0]
 800519a:	4d08      	ldr	r5, [pc, #32]	; (80051bc <strtol+0x28>)
 800519c:	6a23      	ldr	r3, [r4, #32]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bf08      	it	eq
 80051a2:	462b      	moveq	r3, r5
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	460a      	mov	r2, r1
 80051aa:	4601      	mov	r1, r0
 80051ac:	4620      	mov	r0, r4
 80051ae:	f7ff ff70 	bl	8005092 <_strtol_l.isra.0>
 80051b2:	b003      	add	sp, #12
 80051b4:	bd30      	pop	{r4, r5, pc}
 80051b6:	bf00      	nop
 80051b8:	20000030 	.word	0x20000030
 80051bc:	20000094 	.word	0x20000094

080051c0 <__utoa>:
 80051c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051c2:	4c1e      	ldr	r4, [pc, #120]	; (800523c <__utoa+0x7c>)
 80051c4:	b08b      	sub	sp, #44	; 0x2c
 80051c6:	4603      	mov	r3, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	466d      	mov	r5, sp
 80051cc:	f104 0e20 	add.w	lr, r4, #32
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	6861      	ldr	r1, [r4, #4]
 80051d4:	462e      	mov	r6, r5
 80051d6:	c603      	stmia	r6!, {r0, r1}
 80051d8:	3408      	adds	r4, #8
 80051da:	4574      	cmp	r4, lr
 80051dc:	4635      	mov	r5, r6
 80051de:	d1f7      	bne.n	80051d0 <__utoa+0x10>
 80051e0:	7921      	ldrb	r1, [r4, #4]
 80051e2:	7131      	strb	r1, [r6, #4]
 80051e4:	1e91      	subs	r1, r2, #2
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	6030      	str	r0, [r6, #0]
 80051ea:	2922      	cmp	r1, #34	; 0x22
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	d904      	bls.n	80051fc <__utoa+0x3c>
 80051f2:	7039      	strb	r1, [r7, #0]
 80051f4:	460f      	mov	r7, r1
 80051f6:	4638      	mov	r0, r7
 80051f8:	b00b      	add	sp, #44	; 0x2c
 80051fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fc:	1e78      	subs	r0, r7, #1
 80051fe:	4606      	mov	r6, r0
 8005200:	fbb3 f5f2 	udiv	r5, r3, r2
 8005204:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005208:	fb02 3315 	mls	r3, r2, r5, r3
 800520c:	4473      	add	r3, lr
 800520e:	1c4c      	adds	r4, r1, #1
 8005210:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005214:	f806 3f01 	strb.w	r3, [r6, #1]!
 8005218:	462b      	mov	r3, r5
 800521a:	b965      	cbnz	r5, 8005236 <__utoa+0x76>
 800521c:	553d      	strb	r5, [r7, r4]
 800521e:	187a      	adds	r2, r7, r1
 8005220:	1acc      	subs	r4, r1, r3
 8005222:	42a3      	cmp	r3, r4
 8005224:	dae7      	bge.n	80051f6 <__utoa+0x36>
 8005226:	7844      	ldrb	r4, [r0, #1]
 8005228:	7815      	ldrb	r5, [r2, #0]
 800522a:	f800 5f01 	strb.w	r5, [r0, #1]!
 800522e:	3301      	adds	r3, #1
 8005230:	f802 4901 	strb.w	r4, [r2], #-1
 8005234:	e7f4      	b.n	8005220 <__utoa+0x60>
 8005236:	4621      	mov	r1, r4
 8005238:	e7e2      	b.n	8005200 <__utoa+0x40>
 800523a:	bf00      	nop
 800523c:	08005990 	.word	0x08005990

08005240 <__locale_ctype_ptr_l>:
 8005240:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005244:	4770      	bx	lr

08005246 <__ascii_mbtowc>:
 8005246:	b082      	sub	sp, #8
 8005248:	b901      	cbnz	r1, 800524c <__ascii_mbtowc+0x6>
 800524a:	a901      	add	r1, sp, #4
 800524c:	b142      	cbz	r2, 8005260 <__ascii_mbtowc+0x1a>
 800524e:	b14b      	cbz	r3, 8005264 <__ascii_mbtowc+0x1e>
 8005250:	7813      	ldrb	r3, [r2, #0]
 8005252:	600b      	str	r3, [r1, #0]
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	1c10      	adds	r0, r2, #0
 8005258:	bf18      	it	ne
 800525a:	2001      	movne	r0, #1
 800525c:	b002      	add	sp, #8
 800525e:	4770      	bx	lr
 8005260:	4610      	mov	r0, r2
 8005262:	e7fb      	b.n	800525c <__ascii_mbtowc+0x16>
 8005264:	f06f 0001 	mvn.w	r0, #1
 8005268:	e7f8      	b.n	800525c <__ascii_mbtowc+0x16>

0800526a <__malloc_lock>:
 800526a:	4770      	bx	lr

0800526c <__malloc_unlock>:
 800526c:	4770      	bx	lr

0800526e <__ssputs_r>:
 800526e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005272:	688e      	ldr	r6, [r1, #8]
 8005274:	429e      	cmp	r6, r3
 8005276:	4682      	mov	sl, r0
 8005278:	460c      	mov	r4, r1
 800527a:	4691      	mov	r9, r2
 800527c:	4698      	mov	r8, r3
 800527e:	d835      	bhi.n	80052ec <__ssputs_r+0x7e>
 8005280:	898a      	ldrh	r2, [r1, #12]
 8005282:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005286:	d031      	beq.n	80052ec <__ssputs_r+0x7e>
 8005288:	6825      	ldr	r5, [r4, #0]
 800528a:	6909      	ldr	r1, [r1, #16]
 800528c:	1a6f      	subs	r7, r5, r1
 800528e:	6965      	ldr	r5, [r4, #20]
 8005290:	2302      	movs	r3, #2
 8005292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005296:	fb95 f5f3 	sdiv	r5, r5, r3
 800529a:	f108 0301 	add.w	r3, r8, #1
 800529e:	443b      	add	r3, r7
 80052a0:	429d      	cmp	r5, r3
 80052a2:	bf38      	it	cc
 80052a4:	461d      	movcc	r5, r3
 80052a6:	0553      	lsls	r3, r2, #21
 80052a8:	d531      	bpl.n	800530e <__ssputs_r+0xa0>
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7ff fe0c 	bl	8004ec8 <_malloc_r>
 80052b0:	4606      	mov	r6, r0
 80052b2:	b950      	cbnz	r0, 80052ca <__ssputs_r+0x5c>
 80052b4:	230c      	movs	r3, #12
 80052b6:	f8ca 3000 	str.w	r3, [sl]
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c0:	81a3      	strh	r3, [r4, #12]
 80052c2:	f04f 30ff 	mov.w	r0, #4294967295
 80052c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ca:	463a      	mov	r2, r7
 80052cc:	6921      	ldr	r1, [r4, #16]
 80052ce:	f7ff fd99 	bl	8004e04 <memcpy>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	6126      	str	r6, [r4, #16]
 80052e0:	6165      	str	r5, [r4, #20]
 80052e2:	443e      	add	r6, r7
 80052e4:	1bed      	subs	r5, r5, r7
 80052e6:	6026      	str	r6, [r4, #0]
 80052e8:	60a5      	str	r5, [r4, #8]
 80052ea:	4646      	mov	r6, r8
 80052ec:	4546      	cmp	r6, r8
 80052ee:	bf28      	it	cs
 80052f0:	4646      	movcs	r6, r8
 80052f2:	4632      	mov	r2, r6
 80052f4:	4649      	mov	r1, r9
 80052f6:	6820      	ldr	r0, [r4, #0]
 80052f8:	f000 faab 	bl	8005852 <memmove>
 80052fc:	68a3      	ldr	r3, [r4, #8]
 80052fe:	1b9b      	subs	r3, r3, r6
 8005300:	60a3      	str	r3, [r4, #8]
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	441e      	add	r6, r3
 8005306:	6026      	str	r6, [r4, #0]
 8005308:	2000      	movs	r0, #0
 800530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530e:	462a      	mov	r2, r5
 8005310:	f000 fab9 	bl	8005886 <_realloc_r>
 8005314:	4606      	mov	r6, r0
 8005316:	2800      	cmp	r0, #0
 8005318:	d1e1      	bne.n	80052de <__ssputs_r+0x70>
 800531a:	6921      	ldr	r1, [r4, #16]
 800531c:	4650      	mov	r0, sl
 800531e:	f7ff fd85 	bl	8004e2c <_free_r>
 8005322:	e7c7      	b.n	80052b4 <__ssputs_r+0x46>

08005324 <_svfiprintf_r>:
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	b09d      	sub	sp, #116	; 0x74
 800532a:	4680      	mov	r8, r0
 800532c:	9303      	str	r3, [sp, #12]
 800532e:	898b      	ldrh	r3, [r1, #12]
 8005330:	061c      	lsls	r4, r3, #24
 8005332:	460d      	mov	r5, r1
 8005334:	4616      	mov	r6, r2
 8005336:	d50f      	bpl.n	8005358 <_svfiprintf_r+0x34>
 8005338:	690b      	ldr	r3, [r1, #16]
 800533a:	b96b      	cbnz	r3, 8005358 <_svfiprintf_r+0x34>
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	f7ff fdc3 	bl	8004ec8 <_malloc_r>
 8005342:	6028      	str	r0, [r5, #0]
 8005344:	6128      	str	r0, [r5, #16]
 8005346:	b928      	cbnz	r0, 8005354 <_svfiprintf_r+0x30>
 8005348:	230c      	movs	r3, #12
 800534a:	f8c8 3000 	str.w	r3, [r8]
 800534e:	f04f 30ff 	mov.w	r0, #4294967295
 8005352:	e0c5      	b.n	80054e0 <_svfiprintf_r+0x1bc>
 8005354:	2340      	movs	r3, #64	; 0x40
 8005356:	616b      	str	r3, [r5, #20]
 8005358:	2300      	movs	r3, #0
 800535a:	9309      	str	r3, [sp, #36]	; 0x24
 800535c:	2320      	movs	r3, #32
 800535e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005362:	2330      	movs	r3, #48	; 0x30
 8005364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005368:	f04f 0b01 	mov.w	fp, #1
 800536c:	4637      	mov	r7, r6
 800536e:	463c      	mov	r4, r7
 8005370:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d13c      	bne.n	80053f2 <_svfiprintf_r+0xce>
 8005378:	ebb7 0a06 	subs.w	sl, r7, r6
 800537c:	d00b      	beq.n	8005396 <_svfiprintf_r+0x72>
 800537e:	4653      	mov	r3, sl
 8005380:	4632      	mov	r2, r6
 8005382:	4629      	mov	r1, r5
 8005384:	4640      	mov	r0, r8
 8005386:	f7ff ff72 	bl	800526e <__ssputs_r>
 800538a:	3001      	adds	r0, #1
 800538c:	f000 80a3 	beq.w	80054d6 <_svfiprintf_r+0x1b2>
 8005390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005392:	4453      	add	r3, sl
 8005394:	9309      	str	r3, [sp, #36]	; 0x24
 8005396:	783b      	ldrb	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 809c 	beq.w	80054d6 <_svfiprintf_r+0x1b2>
 800539e:	2300      	movs	r3, #0
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	9304      	str	r3, [sp, #16]
 80053a6:	9307      	str	r3, [sp, #28]
 80053a8:	9205      	str	r2, [sp, #20]
 80053aa:	9306      	str	r3, [sp, #24]
 80053ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053b0:	931a      	str	r3, [sp, #104]	; 0x68
 80053b2:	2205      	movs	r2, #5
 80053b4:	7821      	ldrb	r1, [r4, #0]
 80053b6:	4850      	ldr	r0, [pc, #320]	; (80054f8 <_svfiprintf_r+0x1d4>)
 80053b8:	f7fa ff12 	bl	80001e0 <memchr>
 80053bc:	1c67      	adds	r7, r4, #1
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	b9d8      	cbnz	r0, 80053fa <_svfiprintf_r+0xd6>
 80053c2:	06d9      	lsls	r1, r3, #27
 80053c4:	bf44      	itt	mi
 80053c6:	2220      	movmi	r2, #32
 80053c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053cc:	071a      	lsls	r2, r3, #28
 80053ce:	bf44      	itt	mi
 80053d0:	222b      	movmi	r2, #43	; 0x2b
 80053d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053d6:	7822      	ldrb	r2, [r4, #0]
 80053d8:	2a2a      	cmp	r2, #42	; 0x2a
 80053da:	d016      	beq.n	800540a <_svfiprintf_r+0xe6>
 80053dc:	9a07      	ldr	r2, [sp, #28]
 80053de:	2100      	movs	r1, #0
 80053e0:	200a      	movs	r0, #10
 80053e2:	4627      	mov	r7, r4
 80053e4:	3401      	adds	r4, #1
 80053e6:	783b      	ldrb	r3, [r7, #0]
 80053e8:	3b30      	subs	r3, #48	; 0x30
 80053ea:	2b09      	cmp	r3, #9
 80053ec:	d951      	bls.n	8005492 <_svfiprintf_r+0x16e>
 80053ee:	b1c9      	cbz	r1, 8005424 <_svfiprintf_r+0x100>
 80053f0:	e011      	b.n	8005416 <_svfiprintf_r+0xf2>
 80053f2:	2b25      	cmp	r3, #37	; 0x25
 80053f4:	d0c0      	beq.n	8005378 <_svfiprintf_r+0x54>
 80053f6:	4627      	mov	r7, r4
 80053f8:	e7b9      	b.n	800536e <_svfiprintf_r+0x4a>
 80053fa:	4a3f      	ldr	r2, [pc, #252]	; (80054f8 <_svfiprintf_r+0x1d4>)
 80053fc:	1a80      	subs	r0, r0, r2
 80053fe:	fa0b f000 	lsl.w	r0, fp, r0
 8005402:	4318      	orrs	r0, r3
 8005404:	9004      	str	r0, [sp, #16]
 8005406:	463c      	mov	r4, r7
 8005408:	e7d3      	b.n	80053b2 <_svfiprintf_r+0x8e>
 800540a:	9a03      	ldr	r2, [sp, #12]
 800540c:	1d11      	adds	r1, r2, #4
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	9103      	str	r1, [sp, #12]
 8005412:	2a00      	cmp	r2, #0
 8005414:	db01      	blt.n	800541a <_svfiprintf_r+0xf6>
 8005416:	9207      	str	r2, [sp, #28]
 8005418:	e004      	b.n	8005424 <_svfiprintf_r+0x100>
 800541a:	4252      	negs	r2, r2
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	9207      	str	r2, [sp, #28]
 8005422:	9304      	str	r3, [sp, #16]
 8005424:	783b      	ldrb	r3, [r7, #0]
 8005426:	2b2e      	cmp	r3, #46	; 0x2e
 8005428:	d10e      	bne.n	8005448 <_svfiprintf_r+0x124>
 800542a:	787b      	ldrb	r3, [r7, #1]
 800542c:	2b2a      	cmp	r3, #42	; 0x2a
 800542e:	f107 0101 	add.w	r1, r7, #1
 8005432:	d132      	bne.n	800549a <_svfiprintf_r+0x176>
 8005434:	9b03      	ldr	r3, [sp, #12]
 8005436:	1d1a      	adds	r2, r3, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	9203      	str	r2, [sp, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	bfb8      	it	lt
 8005440:	f04f 33ff 	movlt.w	r3, #4294967295
 8005444:	3702      	adds	r7, #2
 8005446:	9305      	str	r3, [sp, #20]
 8005448:	4c2c      	ldr	r4, [pc, #176]	; (80054fc <_svfiprintf_r+0x1d8>)
 800544a:	7839      	ldrb	r1, [r7, #0]
 800544c:	2203      	movs	r2, #3
 800544e:	4620      	mov	r0, r4
 8005450:	f7fa fec6 	bl	80001e0 <memchr>
 8005454:	b138      	cbz	r0, 8005466 <_svfiprintf_r+0x142>
 8005456:	2340      	movs	r3, #64	; 0x40
 8005458:	1b00      	subs	r0, r0, r4
 800545a:	fa03 f000 	lsl.w	r0, r3, r0
 800545e:	9b04      	ldr	r3, [sp, #16]
 8005460:	4303      	orrs	r3, r0
 8005462:	9304      	str	r3, [sp, #16]
 8005464:	3701      	adds	r7, #1
 8005466:	7839      	ldrb	r1, [r7, #0]
 8005468:	4825      	ldr	r0, [pc, #148]	; (8005500 <_svfiprintf_r+0x1dc>)
 800546a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800546e:	2206      	movs	r2, #6
 8005470:	1c7e      	adds	r6, r7, #1
 8005472:	f7fa feb5 	bl	80001e0 <memchr>
 8005476:	2800      	cmp	r0, #0
 8005478:	d035      	beq.n	80054e6 <_svfiprintf_r+0x1c2>
 800547a:	4b22      	ldr	r3, [pc, #136]	; (8005504 <_svfiprintf_r+0x1e0>)
 800547c:	b9fb      	cbnz	r3, 80054be <_svfiprintf_r+0x19a>
 800547e:	9b03      	ldr	r3, [sp, #12]
 8005480:	3307      	adds	r3, #7
 8005482:	f023 0307 	bic.w	r3, r3, #7
 8005486:	3308      	adds	r3, #8
 8005488:	9303      	str	r3, [sp, #12]
 800548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548c:	444b      	add	r3, r9
 800548e:	9309      	str	r3, [sp, #36]	; 0x24
 8005490:	e76c      	b.n	800536c <_svfiprintf_r+0x48>
 8005492:	fb00 3202 	mla	r2, r0, r2, r3
 8005496:	2101      	movs	r1, #1
 8005498:	e7a3      	b.n	80053e2 <_svfiprintf_r+0xbe>
 800549a:	2300      	movs	r3, #0
 800549c:	9305      	str	r3, [sp, #20]
 800549e:	4618      	mov	r0, r3
 80054a0:	240a      	movs	r4, #10
 80054a2:	460f      	mov	r7, r1
 80054a4:	3101      	adds	r1, #1
 80054a6:	783a      	ldrb	r2, [r7, #0]
 80054a8:	3a30      	subs	r2, #48	; 0x30
 80054aa:	2a09      	cmp	r2, #9
 80054ac:	d903      	bls.n	80054b6 <_svfiprintf_r+0x192>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ca      	beq.n	8005448 <_svfiprintf_r+0x124>
 80054b2:	9005      	str	r0, [sp, #20]
 80054b4:	e7c8      	b.n	8005448 <_svfiprintf_r+0x124>
 80054b6:	fb04 2000 	mla	r0, r4, r0, r2
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7f1      	b.n	80054a2 <_svfiprintf_r+0x17e>
 80054be:	ab03      	add	r3, sp, #12
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	462a      	mov	r2, r5
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <_svfiprintf_r+0x1e4>)
 80054c6:	a904      	add	r1, sp, #16
 80054c8:	4640      	mov	r0, r8
 80054ca:	f3af 8000 	nop.w
 80054ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054d2:	4681      	mov	r9, r0
 80054d4:	d1d9      	bne.n	800548a <_svfiprintf_r+0x166>
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	065b      	lsls	r3, r3, #25
 80054da:	f53f af38 	bmi.w	800534e <_svfiprintf_r+0x2a>
 80054de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054e0:	b01d      	add	sp, #116	; 0x74
 80054e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e6:	ab03      	add	r3, sp, #12
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	462a      	mov	r2, r5
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <_svfiprintf_r+0x1e4>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	4640      	mov	r0, r8
 80054f2:	f000 f881 	bl	80055f8 <_printf_i>
 80054f6:	e7ea      	b.n	80054ce <_svfiprintf_r+0x1aa>
 80054f8:	080059bf 	.word	0x080059bf
 80054fc:	080059c5 	.word	0x080059c5
 8005500:	080059c9 	.word	0x080059c9
 8005504:	00000000 	.word	0x00000000
 8005508:	0800526f 	.word	0x0800526f

0800550c <_printf_common>:
 800550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	4691      	mov	r9, r2
 8005512:	461f      	mov	r7, r3
 8005514:	688a      	ldr	r2, [r1, #8]
 8005516:	690b      	ldr	r3, [r1, #16]
 8005518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800551c:	4293      	cmp	r3, r2
 800551e:	bfb8      	it	lt
 8005520:	4613      	movlt	r3, r2
 8005522:	f8c9 3000 	str.w	r3, [r9]
 8005526:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800552a:	4606      	mov	r6, r0
 800552c:	460c      	mov	r4, r1
 800552e:	b112      	cbz	r2, 8005536 <_printf_common+0x2a>
 8005530:	3301      	adds	r3, #1
 8005532:	f8c9 3000 	str.w	r3, [r9]
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	0699      	lsls	r1, r3, #26
 800553a:	bf42      	ittt	mi
 800553c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005540:	3302      	addmi	r3, #2
 8005542:	f8c9 3000 	strmi.w	r3, [r9]
 8005546:	6825      	ldr	r5, [r4, #0]
 8005548:	f015 0506 	ands.w	r5, r5, #6
 800554c:	d107      	bne.n	800555e <_printf_common+0x52>
 800554e:	f104 0a19 	add.w	sl, r4, #25
 8005552:	68e3      	ldr	r3, [r4, #12]
 8005554:	f8d9 2000 	ldr.w	r2, [r9]
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	429d      	cmp	r5, r3
 800555c:	db29      	blt.n	80055b2 <_printf_common+0xa6>
 800555e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	3300      	adds	r3, #0
 8005566:	bf18      	it	ne
 8005568:	2301      	movne	r3, #1
 800556a:	0692      	lsls	r2, r2, #26
 800556c:	d42e      	bmi.n	80055cc <_printf_common+0xc0>
 800556e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005572:	4639      	mov	r1, r7
 8005574:	4630      	mov	r0, r6
 8005576:	47c0      	blx	r8
 8005578:	3001      	adds	r0, #1
 800557a:	d021      	beq.n	80055c0 <_printf_common+0xb4>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	68e5      	ldr	r5, [r4, #12]
 8005580:	f8d9 2000 	ldr.w	r2, [r9]
 8005584:	f003 0306 	and.w	r3, r3, #6
 8005588:	2b04      	cmp	r3, #4
 800558a:	bf08      	it	eq
 800558c:	1aad      	subeq	r5, r5, r2
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	6922      	ldr	r2, [r4, #16]
 8005592:	bf0c      	ite	eq
 8005594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005598:	2500      	movne	r5, #0
 800559a:	4293      	cmp	r3, r2
 800559c:	bfc4      	itt	gt
 800559e:	1a9b      	subgt	r3, r3, r2
 80055a0:	18ed      	addgt	r5, r5, r3
 80055a2:	f04f 0900 	mov.w	r9, #0
 80055a6:	341a      	adds	r4, #26
 80055a8:	454d      	cmp	r5, r9
 80055aa:	d11b      	bne.n	80055e4 <_printf_common+0xd8>
 80055ac:	2000      	movs	r0, #0
 80055ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b2:	2301      	movs	r3, #1
 80055b4:	4652      	mov	r2, sl
 80055b6:	4639      	mov	r1, r7
 80055b8:	4630      	mov	r0, r6
 80055ba:	47c0      	blx	r8
 80055bc:	3001      	adds	r0, #1
 80055be:	d103      	bne.n	80055c8 <_printf_common+0xbc>
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c8:	3501      	adds	r5, #1
 80055ca:	e7c2      	b.n	8005552 <_printf_common+0x46>
 80055cc:	18e1      	adds	r1, r4, r3
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	2030      	movs	r0, #48	; 0x30
 80055d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055d6:	4422      	add	r2, r4
 80055d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e0:	3302      	adds	r3, #2
 80055e2:	e7c4      	b.n	800556e <_printf_common+0x62>
 80055e4:	2301      	movs	r3, #1
 80055e6:	4622      	mov	r2, r4
 80055e8:	4639      	mov	r1, r7
 80055ea:	4630      	mov	r0, r6
 80055ec:	47c0      	blx	r8
 80055ee:	3001      	adds	r0, #1
 80055f0:	d0e6      	beq.n	80055c0 <_printf_common+0xb4>
 80055f2:	f109 0901 	add.w	r9, r9, #1
 80055f6:	e7d7      	b.n	80055a8 <_printf_common+0x9c>

080055f8 <_printf_i>:
 80055f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055fc:	4617      	mov	r7, r2
 80055fe:	7e0a      	ldrb	r2, [r1, #24]
 8005600:	b085      	sub	sp, #20
 8005602:	2a6e      	cmp	r2, #110	; 0x6e
 8005604:	4698      	mov	r8, r3
 8005606:	4606      	mov	r6, r0
 8005608:	460c      	mov	r4, r1
 800560a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800560c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005610:	f000 80bc 	beq.w	800578c <_printf_i+0x194>
 8005614:	d81a      	bhi.n	800564c <_printf_i+0x54>
 8005616:	2a63      	cmp	r2, #99	; 0x63
 8005618:	d02e      	beq.n	8005678 <_printf_i+0x80>
 800561a:	d80a      	bhi.n	8005632 <_printf_i+0x3a>
 800561c:	2a00      	cmp	r2, #0
 800561e:	f000 80c8 	beq.w	80057b2 <_printf_i+0x1ba>
 8005622:	2a58      	cmp	r2, #88	; 0x58
 8005624:	f000 808a 	beq.w	800573c <_printf_i+0x144>
 8005628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800562c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005630:	e02a      	b.n	8005688 <_printf_i+0x90>
 8005632:	2a64      	cmp	r2, #100	; 0x64
 8005634:	d001      	beq.n	800563a <_printf_i+0x42>
 8005636:	2a69      	cmp	r2, #105	; 0x69
 8005638:	d1f6      	bne.n	8005628 <_printf_i+0x30>
 800563a:	6821      	ldr	r1, [r4, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005642:	d023      	beq.n	800568c <_printf_i+0x94>
 8005644:	1d11      	adds	r1, r2, #4
 8005646:	6019      	str	r1, [r3, #0]
 8005648:	6813      	ldr	r3, [r2, #0]
 800564a:	e027      	b.n	800569c <_printf_i+0xa4>
 800564c:	2a73      	cmp	r2, #115	; 0x73
 800564e:	f000 80b4 	beq.w	80057ba <_printf_i+0x1c2>
 8005652:	d808      	bhi.n	8005666 <_printf_i+0x6e>
 8005654:	2a6f      	cmp	r2, #111	; 0x6f
 8005656:	d02a      	beq.n	80056ae <_printf_i+0xb6>
 8005658:	2a70      	cmp	r2, #112	; 0x70
 800565a:	d1e5      	bne.n	8005628 <_printf_i+0x30>
 800565c:	680a      	ldr	r2, [r1, #0]
 800565e:	f042 0220 	orr.w	r2, r2, #32
 8005662:	600a      	str	r2, [r1, #0]
 8005664:	e003      	b.n	800566e <_printf_i+0x76>
 8005666:	2a75      	cmp	r2, #117	; 0x75
 8005668:	d021      	beq.n	80056ae <_printf_i+0xb6>
 800566a:	2a78      	cmp	r2, #120	; 0x78
 800566c:	d1dc      	bne.n	8005628 <_printf_i+0x30>
 800566e:	2278      	movs	r2, #120	; 0x78
 8005670:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005674:	496e      	ldr	r1, [pc, #440]	; (8005830 <_printf_i+0x238>)
 8005676:	e064      	b.n	8005742 <_printf_i+0x14a>
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800567e:	1d11      	adds	r1, r2, #4
 8005680:	6019      	str	r1, [r3, #0]
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005688:	2301      	movs	r3, #1
 800568a:	e0a3      	b.n	80057d4 <_printf_i+0x1dc>
 800568c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005690:	f102 0104 	add.w	r1, r2, #4
 8005694:	6019      	str	r1, [r3, #0]
 8005696:	d0d7      	beq.n	8005648 <_printf_i+0x50>
 8005698:	f9b2 3000 	ldrsh.w	r3, [r2]
 800569c:	2b00      	cmp	r3, #0
 800569e:	da03      	bge.n	80056a8 <_printf_i+0xb0>
 80056a0:	222d      	movs	r2, #45	; 0x2d
 80056a2:	425b      	negs	r3, r3
 80056a4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80056a8:	4962      	ldr	r1, [pc, #392]	; (8005834 <_printf_i+0x23c>)
 80056aa:	220a      	movs	r2, #10
 80056ac:	e017      	b.n	80056de <_printf_i+0xe6>
 80056ae:	6820      	ldr	r0, [r4, #0]
 80056b0:	6819      	ldr	r1, [r3, #0]
 80056b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80056b6:	d003      	beq.n	80056c0 <_printf_i+0xc8>
 80056b8:	1d08      	adds	r0, r1, #4
 80056ba:	6018      	str	r0, [r3, #0]
 80056bc:	680b      	ldr	r3, [r1, #0]
 80056be:	e006      	b.n	80056ce <_printf_i+0xd6>
 80056c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056c4:	f101 0004 	add.w	r0, r1, #4
 80056c8:	6018      	str	r0, [r3, #0]
 80056ca:	d0f7      	beq.n	80056bc <_printf_i+0xc4>
 80056cc:	880b      	ldrh	r3, [r1, #0]
 80056ce:	4959      	ldr	r1, [pc, #356]	; (8005834 <_printf_i+0x23c>)
 80056d0:	2a6f      	cmp	r2, #111	; 0x6f
 80056d2:	bf14      	ite	ne
 80056d4:	220a      	movne	r2, #10
 80056d6:	2208      	moveq	r2, #8
 80056d8:	2000      	movs	r0, #0
 80056da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80056de:	6865      	ldr	r5, [r4, #4]
 80056e0:	60a5      	str	r5, [r4, #8]
 80056e2:	2d00      	cmp	r5, #0
 80056e4:	f2c0 809c 	blt.w	8005820 <_printf_i+0x228>
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	f020 0004 	bic.w	r0, r0, #4
 80056ee:	6020      	str	r0, [r4, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d13f      	bne.n	8005774 <_printf_i+0x17c>
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	f040 8095 	bne.w	8005824 <_printf_i+0x22c>
 80056fa:	4675      	mov	r5, lr
 80056fc:	2a08      	cmp	r2, #8
 80056fe:	d10b      	bne.n	8005718 <_printf_i+0x120>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	07da      	lsls	r2, r3, #31
 8005704:	d508      	bpl.n	8005718 <_printf_i+0x120>
 8005706:	6923      	ldr	r3, [r4, #16]
 8005708:	6862      	ldr	r2, [r4, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	bfde      	ittt	le
 800570e:	2330      	movle	r3, #48	; 0x30
 8005710:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005714:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005718:	ebae 0305 	sub.w	r3, lr, r5
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	f8cd 8000 	str.w	r8, [sp]
 8005722:	463b      	mov	r3, r7
 8005724:	aa03      	add	r2, sp, #12
 8005726:	4621      	mov	r1, r4
 8005728:	4630      	mov	r0, r6
 800572a:	f7ff feef 	bl	800550c <_printf_common>
 800572e:	3001      	adds	r0, #1
 8005730:	d155      	bne.n	80057de <_printf_i+0x1e6>
 8005732:	f04f 30ff 	mov.w	r0, #4294967295
 8005736:	b005      	add	sp, #20
 8005738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800573c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005740:	493c      	ldr	r1, [pc, #240]	; (8005834 <_printf_i+0x23c>)
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	f012 0f80 	tst.w	r2, #128	; 0x80
 800574a:	f100 0504 	add.w	r5, r0, #4
 800574e:	601d      	str	r5, [r3, #0]
 8005750:	d001      	beq.n	8005756 <_printf_i+0x15e>
 8005752:	6803      	ldr	r3, [r0, #0]
 8005754:	e002      	b.n	800575c <_printf_i+0x164>
 8005756:	0655      	lsls	r5, r2, #25
 8005758:	d5fb      	bpl.n	8005752 <_printf_i+0x15a>
 800575a:	8803      	ldrh	r3, [r0, #0]
 800575c:	07d0      	lsls	r0, r2, #31
 800575e:	bf44      	itt	mi
 8005760:	f042 0220 	orrmi.w	r2, r2, #32
 8005764:	6022      	strmi	r2, [r4, #0]
 8005766:	b91b      	cbnz	r3, 8005770 <_printf_i+0x178>
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	f022 0220 	bic.w	r2, r2, #32
 800576e:	6022      	str	r2, [r4, #0]
 8005770:	2210      	movs	r2, #16
 8005772:	e7b1      	b.n	80056d8 <_printf_i+0xe0>
 8005774:	4675      	mov	r5, lr
 8005776:	fbb3 f0f2 	udiv	r0, r3, r2
 800577a:	fb02 3310 	mls	r3, r2, r0, r3
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005784:	4603      	mov	r3, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	d1f5      	bne.n	8005776 <_printf_i+0x17e>
 800578a:	e7b7      	b.n	80056fc <_printf_i+0x104>
 800578c:	6808      	ldr	r0, [r1, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	6949      	ldr	r1, [r1, #20]
 8005792:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005796:	d004      	beq.n	80057a2 <_printf_i+0x1aa>
 8005798:	1d10      	adds	r0, r2, #4
 800579a:	6018      	str	r0, [r3, #0]
 800579c:	6813      	ldr	r3, [r2, #0]
 800579e:	6019      	str	r1, [r3, #0]
 80057a0:	e007      	b.n	80057b2 <_printf_i+0x1ba>
 80057a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057a6:	f102 0004 	add.w	r0, r2, #4
 80057aa:	6018      	str	r0, [r3, #0]
 80057ac:	6813      	ldr	r3, [r2, #0]
 80057ae:	d0f6      	beq.n	800579e <_printf_i+0x1a6>
 80057b0:	8019      	strh	r1, [r3, #0]
 80057b2:	2300      	movs	r3, #0
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	4675      	mov	r5, lr
 80057b8:	e7b1      	b.n	800571e <_printf_i+0x126>
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	1d11      	adds	r1, r2, #4
 80057be:	6019      	str	r1, [r3, #0]
 80057c0:	6815      	ldr	r5, [r2, #0]
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	2100      	movs	r1, #0
 80057c6:	4628      	mov	r0, r5
 80057c8:	f7fa fd0a 	bl	80001e0 <memchr>
 80057cc:	b108      	cbz	r0, 80057d2 <_printf_i+0x1da>
 80057ce:	1b40      	subs	r0, r0, r5
 80057d0:	6060      	str	r0, [r4, #4]
 80057d2:	6863      	ldr	r3, [r4, #4]
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	2300      	movs	r3, #0
 80057d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057dc:	e79f      	b.n	800571e <_printf_i+0x126>
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	462a      	mov	r2, r5
 80057e2:	4639      	mov	r1, r7
 80057e4:	4630      	mov	r0, r6
 80057e6:	47c0      	blx	r8
 80057e8:	3001      	adds	r0, #1
 80057ea:	d0a2      	beq.n	8005732 <_printf_i+0x13a>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	079b      	lsls	r3, r3, #30
 80057f0:	d507      	bpl.n	8005802 <_printf_i+0x20a>
 80057f2:	2500      	movs	r5, #0
 80057f4:	f104 0919 	add.w	r9, r4, #25
 80057f8:	68e3      	ldr	r3, [r4, #12]
 80057fa:	9a03      	ldr	r2, [sp, #12]
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	429d      	cmp	r5, r3
 8005800:	db05      	blt.n	800580e <_printf_i+0x216>
 8005802:	68e0      	ldr	r0, [r4, #12]
 8005804:	9b03      	ldr	r3, [sp, #12]
 8005806:	4298      	cmp	r0, r3
 8005808:	bfb8      	it	lt
 800580a:	4618      	movlt	r0, r3
 800580c:	e793      	b.n	8005736 <_printf_i+0x13e>
 800580e:	2301      	movs	r3, #1
 8005810:	464a      	mov	r2, r9
 8005812:	4639      	mov	r1, r7
 8005814:	4630      	mov	r0, r6
 8005816:	47c0      	blx	r8
 8005818:	3001      	adds	r0, #1
 800581a:	d08a      	beq.n	8005732 <_printf_i+0x13a>
 800581c:	3501      	adds	r5, #1
 800581e:	e7eb      	b.n	80057f8 <_printf_i+0x200>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1a7      	bne.n	8005774 <_printf_i+0x17c>
 8005824:	780b      	ldrb	r3, [r1, #0]
 8005826:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800582a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800582e:	e765      	b.n	80056fc <_printf_i+0x104>
 8005830:	080059e1 	.word	0x080059e1
 8005834:	080059d0 	.word	0x080059d0

08005838 <__ascii_wctomb>:
 8005838:	b149      	cbz	r1, 800584e <__ascii_wctomb+0x16>
 800583a:	2aff      	cmp	r2, #255	; 0xff
 800583c:	bf85      	ittet	hi
 800583e:	238a      	movhi	r3, #138	; 0x8a
 8005840:	6003      	strhi	r3, [r0, #0]
 8005842:	700a      	strbls	r2, [r1, #0]
 8005844:	f04f 30ff 	movhi.w	r0, #4294967295
 8005848:	bf98      	it	ls
 800584a:	2001      	movls	r0, #1
 800584c:	4770      	bx	lr
 800584e:	4608      	mov	r0, r1
 8005850:	4770      	bx	lr

08005852 <memmove>:
 8005852:	4288      	cmp	r0, r1
 8005854:	b510      	push	{r4, lr}
 8005856:	eb01 0302 	add.w	r3, r1, r2
 800585a:	d803      	bhi.n	8005864 <memmove+0x12>
 800585c:	1e42      	subs	r2, r0, #1
 800585e:	4299      	cmp	r1, r3
 8005860:	d10c      	bne.n	800587c <memmove+0x2a>
 8005862:	bd10      	pop	{r4, pc}
 8005864:	4298      	cmp	r0, r3
 8005866:	d2f9      	bcs.n	800585c <memmove+0xa>
 8005868:	1881      	adds	r1, r0, r2
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	42d3      	cmn	r3, r2
 800586e:	d100      	bne.n	8005872 <memmove+0x20>
 8005870:	bd10      	pop	{r4, pc}
 8005872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005876:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800587a:	e7f7      	b.n	800586c <memmove+0x1a>
 800587c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005880:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005884:	e7eb      	b.n	800585e <memmove+0xc>

08005886 <_realloc_r>:
 8005886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005888:	4607      	mov	r7, r0
 800588a:	4614      	mov	r4, r2
 800588c:	460e      	mov	r6, r1
 800588e:	b921      	cbnz	r1, 800589a <_realloc_r+0x14>
 8005890:	4611      	mov	r1, r2
 8005892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005896:	f7ff bb17 	b.w	8004ec8 <_malloc_r>
 800589a:	b922      	cbnz	r2, 80058a6 <_realloc_r+0x20>
 800589c:	f7ff fac6 	bl	8004e2c <_free_r>
 80058a0:	4625      	mov	r5, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a6:	f000 f814 	bl	80058d2 <_malloc_usable_size_r>
 80058aa:	4284      	cmp	r4, r0
 80058ac:	d90f      	bls.n	80058ce <_realloc_r+0x48>
 80058ae:	4621      	mov	r1, r4
 80058b0:	4638      	mov	r0, r7
 80058b2:	f7ff fb09 	bl	8004ec8 <_malloc_r>
 80058b6:	4605      	mov	r5, r0
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d0f2      	beq.n	80058a2 <_realloc_r+0x1c>
 80058bc:	4631      	mov	r1, r6
 80058be:	4622      	mov	r2, r4
 80058c0:	f7ff faa0 	bl	8004e04 <memcpy>
 80058c4:	4631      	mov	r1, r6
 80058c6:	4638      	mov	r0, r7
 80058c8:	f7ff fab0 	bl	8004e2c <_free_r>
 80058cc:	e7e9      	b.n	80058a2 <_realloc_r+0x1c>
 80058ce:	4635      	mov	r5, r6
 80058d0:	e7e7      	b.n	80058a2 <_realloc_r+0x1c>

080058d2 <_malloc_usable_size_r>:
 80058d2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f1a0 0004 	sub.w	r0, r0, #4
 80058dc:	bfbc      	itt	lt
 80058de:	580b      	ldrlt	r3, [r1, r0]
 80058e0:	18c0      	addlt	r0, r0, r3
 80058e2:	4770      	bx	lr

080058e4 <_sbrk>:
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <_sbrk+0x14>)
 80058e6:	6819      	ldr	r1, [r3, #0]
 80058e8:	4602      	mov	r2, r0
 80058ea:	b909      	cbnz	r1, 80058f0 <_sbrk+0xc>
 80058ec:	4903      	ldr	r1, [pc, #12]	; (80058fc <_sbrk+0x18>)
 80058ee:	6019      	str	r1, [r3, #0]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	4402      	add	r2, r0
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	4770      	bx	lr
 80058f8:	200002b0 	.word	0x200002b0
 80058fc:	20000584 	.word	0x20000584

08005900 <_init>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr

0800590c <_fini>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr
