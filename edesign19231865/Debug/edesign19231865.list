
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  20000000  08006fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
  8 .bss          000003dc  20000208  20000208  00020208  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200005e4  200005e4  00020208  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 11 .debug_info   00036056  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004e45  00000000  00000000  0005628a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000105cf  00000000  00000000  0005b0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001540  00000000  00000000  0006b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  0006cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002275f  00000000  00000000  0006dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015041  00000000  00000000  00090707  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3643  00000000  00000000  000a5748  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00158d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004180  00000000  00000000  00158e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006de4 	.word	0x08006de4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08006de4 	.word	0x08006de4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b99e 	b.w	8000ee4 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f82a 	bl	8000c08 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2ulz>:
 8000bc0:	b5d0      	push	{r4, r6, r7, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <__aeabi_d2ulz+0x40>)
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fd11 	bl	80005f0 <__aeabi_dmul>
 8000bce:	f7ff ffbf 	bl	8000b50 <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc96 	bl	8000504 <__aeabi_ui2d>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <__aeabi_d2ulz+0x44>)
 8000bdc:	f7ff fd08 	bl	80005f0 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff fb4e 	bl	8000288 <__aeabi_dsub>
 8000bec:	f7ff ffb0 	bl	8000b50 <__aeabi_d2uiz>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	ea42 0200 	orr.w	r2, r2, r0
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	9e08      	ldr	r6, [sp, #32]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d151      	bne.n	8000cbc <__udivmoddi4+0xb4>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d96d      	bls.n	8000cfa <__udivmoddi4+0xf2>
 8000c1e:	fab2 fe82 	clz	lr, r2
 8000c22:	f1be 0f00 	cmp.w	lr, #0
 8000c26:	d00b      	beq.n	8000c40 <__udivmoddi4+0x38>
 8000c28:	f1ce 0c20 	rsb	ip, lr, #32
 8000c2c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c34:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c38:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c3c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c40:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c44:	0c25      	lsrs	r5, r4, #16
 8000c46:	fbbc f8fa 	udiv	r8, ip, sl
 8000c4a:	fa1f f987 	uxth.w	r9, r7
 8000c4e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c52:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c56:	fb08 f309 	mul.w	r3, r8, r9
 8000c5a:	42ab      	cmp	r3, r5
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x6c>
 8000c5e:	19ed      	adds	r5, r5, r7
 8000c60:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c64:	f080 8123 	bcs.w	8000eae <__udivmoddi4+0x2a6>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f240 8120 	bls.w	8000eae <__udivmoddi4+0x2a6>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	443d      	add	r5, r7
 8000c74:	1aed      	subs	r5, r5, r3
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c7c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb00 f909 	mul.w	r9, r0, r9
 8000c88:	45a1      	cmp	r9, r4
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x98>
 8000c8c:	19e4      	adds	r4, r4, r7
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	f080 810a 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8107 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	443c      	add	r4, r7
 8000ca0:	eba4 0409 	sub.w	r4, r4, r9
 8000ca4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d061      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cae:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	6034      	str	r4, [r6, #0]
 8000cb6:	6073      	str	r3, [r6, #4]
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xc8>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d054      	beq.n	8000d6e <__udivmoddi4+0x166>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	f040 808e 	bne.w	8000df6 <__udivmoddi4+0x1ee>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xdc>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80fa 	bhi.w	8000ed8 <__udivmoddi4+0x2d0>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb65 0503 	sbc.w	r5, r5, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	46ac      	mov	ip, r5
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d03f      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cf2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	b912      	cbnz	r2, 8000d02 <__udivmoddi4+0xfa>
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d02:	fab7 fe87 	clz	lr, r7
 8000d06:	f1be 0f00 	cmp.w	lr, #0
 8000d0a:	d134      	bne.n	8000d76 <__udivmoddi4+0x16e>
 8000d0c:	1beb      	subs	r3, r5, r7
 8000d0e:	0c3a      	lsrs	r2, r7, #16
 8000d10:	fa1f fc87 	uxth.w	ip, r7
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d1a:	0c25      	lsrs	r5, r4, #16
 8000d1c:	fb02 3318 	mls	r3, r2, r8, r3
 8000d20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d24:	fb0c f308 	mul.w	r3, ip, r8
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x134>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x132>
 8000d34:	42ab      	cmp	r3, r5
 8000d36:	f200 80d1 	bhi.w	8000edc <__udivmoddi4+0x2d4>
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d44:	fb02 5510 	mls	r5, r2, r0, r5
 8000d48:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d4c:	fb0c fc00 	mul.w	ip, ip, r0
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x15c>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x15a>
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	f200 80b8 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 040c 	sub.w	r4, r4, ip
 8000d68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6c:	e79d      	b.n	8000caa <__udivmoddi4+0xa2>
 8000d6e:	4631      	mov	r1, r6
 8000d70:	4630      	mov	r0, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1ce 0420 	rsb	r4, lr, #32
 8000d7a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d82:	fa20 f804 	lsr.w	r8, r0, r4
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa25 f404 	lsr.w	r4, r5, r4
 8000d8c:	ea48 0803 	orr.w	r8, r8, r3
 8000d90:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d94:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d98:	fb02 4411 	mls	r4, r2, r1, r4
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000da4:	fb01 f30c 	mul.w	r3, r1, ip
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1bc>
 8000db0:	19ed      	adds	r5, r5, r7
 8000db2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db6:	f080 808a 	bcs.w	8000ece <__udivmoddi4+0x2c6>
 8000dba:	42ab      	cmp	r3, r5
 8000dbc:	f240 8087 	bls.w	8000ece <__udivmoddi4+0x2c6>
 8000dc0:	3902      	subs	r1, #2
 8000dc2:	443d      	add	r5, r7
 8000dc4:	1aeb      	subs	r3, r5, r3
 8000dc6:	fa1f f588 	uxth.w	r5, r8
 8000dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dce:	fb02 3310 	mls	r3, r2, r0, r3
 8000dd2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dd6:	fb00 f30c 	mul.w	r3, r0, ip
 8000dda:	42ab      	cmp	r3, r5
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1e6>
 8000dde:	19ed      	adds	r5, r5, r7
 8000de0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de4:	d26f      	bcs.n	8000ec6 <__udivmoddi4+0x2be>
 8000de6:	42ab      	cmp	r3, r5
 8000de8:	d96d      	bls.n	8000ec6 <__udivmoddi4+0x2be>
 8000dea:	3802      	subs	r0, #2
 8000dec:	443d      	add	r5, r7
 8000dee:	1aeb      	subs	r3, r5, r3
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	e78f      	b.n	8000d16 <__udivmoddi4+0x10e>
 8000df6:	f1c1 0720 	rsb	r7, r1, #32
 8000dfa:	fa22 f807 	lsr.w	r8, r2, r7
 8000dfe:	408b      	lsls	r3, r1
 8000e00:	fa05 f401 	lsl.w	r4, r5, r1
 8000e04:	ea48 0303 	orr.w	r3, r8, r3
 8000e08:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e16:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e1a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e1e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e22:	fa1f f883 	uxth.w	r8, r3
 8000e26:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e2a:	fb09 f408 	mul.w	r4, r9, r8
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	fa02 f201 	lsl.w	r2, r2, r1
 8000e34:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x244>
 8000e3a:	18ed      	adds	r5, r5, r3
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d243      	bcs.n	8000eca <__udivmoddi4+0x2c2>
 8000e42:	42ac      	cmp	r4, r5
 8000e44:	d941      	bls.n	8000eca <__udivmoddi4+0x2c2>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	441d      	add	r5, r3
 8000e4c:	1b2d      	subs	r5, r5, r4
 8000e4e:	fa1f fe8e 	uxth.w	lr, lr
 8000e52:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e56:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e5a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45a0      	cmp	r8, r4
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x26e>
 8000e66:	18e4      	adds	r4, r4, r3
 8000e68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e6c:	d229      	bcs.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e6e:	45a0      	cmp	r8, r4
 8000e70:	d927      	bls.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e72:	3802      	subs	r0, #2
 8000e74:	441c      	add	r4, r3
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba4 0408 	sub.w	r4, r4, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454c      	cmp	r4, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	464d      	mov	r5, r9
 8000e88:	d315      	bcc.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e8a:	d012      	beq.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e8c:	b156      	cbz	r6, 8000ea4 <__udivmoddi4+0x29c>
 8000e8e:	ebba 030e 	subs.w	r3, sl, lr
 8000e92:	eb64 0405 	sbc.w	r4, r4, r5
 8000e96:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9a:	40cb      	lsrs	r3, r1
 8000e9c:	431f      	orrs	r7, r3
 8000e9e:	40cc      	lsrs	r4, r1
 8000ea0:	6037      	str	r7, [r6, #0]
 8000ea2:	6074      	str	r4, [r6, #4]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e6f8      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000eae:	4690      	mov	r8, r2
 8000eb0:	e6e0      	b.n	8000c74 <__udivmoddi4+0x6c>
 8000eb2:	45c2      	cmp	sl, r8
 8000eb4:	d2ea      	bcs.n	8000e8c <__udivmoddi4+0x284>
 8000eb6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eba:	eb69 0503 	sbc.w	r5, r9, r3
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7e4      	b.n	8000e8c <__udivmoddi4+0x284>
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	e7d7      	b.n	8000e76 <__udivmoddi4+0x26e>
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	e791      	b.n	8000dee <__udivmoddi4+0x1e6>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e7be      	b.n	8000e4c <__udivmoddi4+0x244>
 8000ece:	4601      	mov	r1, r0
 8000ed0:	e778      	b.n	8000dc4 <__udivmoddi4+0x1bc>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	e745      	b.n	8000d64 <__udivmoddi4+0x15c>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xe6>
 8000edc:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee0:	443d      	add	r5, r7
 8000ee2:	e72b      	b.n	8000d3c <__udivmoddi4+0x134>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b510      	push	{r4, lr}
 8000eea:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_InitTick+0x24>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_InitTick+0x28>)
 8000ef2:	fba3 3000 	umull	r3, r0, r3, r0
 8000ef6:	0980      	lsrs	r0, r0, #6
 8000ef8:	f000 fcec 	bl	80018d4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	4621      	mov	r1, r4
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fca8 	bl	8001858 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	10624dd3 	.word	0x10624dd3

08000f14 <HAL_Init>:
{
 8000f14:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x20>)
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fc87 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_InitTick>
  HAL_MspInit();
 8000f2c:	f004 fa0c 	bl	8005348 <HAL_MspInit>
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	bd08      	pop	{r3, pc}
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_IncTick+0xc>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200002f0 	.word	0x200002f0

08000f48 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200002f0 	.word	0x200002f0

08000f54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f54:	4770      	bx	lr

08000f56 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f56:	4770      	bx	lr

08000f58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000f58:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f5a:	6802      	ldr	r2, [r0, #0]
 8000f5c:	6893      	ldr	r3, [r2, #8]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d011      	beq.n	8000f8a <ADC_Disable+0x32>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d037      	beq.n	8000fdc <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f6c:	6893      	ldr	r3, [r2, #8]
 8000f6e:	f003 030d 	and.w	r3, r3, #13
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d011      	beq.n	8000f9a <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000f86:	2001      	movs	r0, #1
 8000f88:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f013 0f01 	tst.w	r3, #1
 8000f90:	d101      	bne.n	8000f96 <ADC_Disable+0x3e>
 8000f92:	2300      	movs	r3, #0
 8000f94:	e7e8      	b.n	8000f68 <ADC_Disable+0x10>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e7e6      	b.n	8000f68 <ADC_Disable+0x10>
 8000f9a:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000f9c:	6893      	ldr	r3, [r2, #8]
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	6093      	str	r3, [r2, #8]
 8000fa4:	6803      	ldr	r3, [r0, #0]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000faa:	f7ff ffcd 	bl	8000f48 <HAL_GetTick>
 8000fae:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f013 0f01 	tst.w	r3, #1
 8000fb8:	d00e      	beq.n	8000fd8 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fba:	f7ff ffc5 	bl	8000f48 <HAL_GetTick>
 8000fbe:	1b40      	subs	r0, r0, r5
 8000fc0:	2802      	cmp	r0, #2
 8000fc2:	d9f5      	bls.n	8000fb0 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fd8:	2000      	movs	r0, #0
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	2000      	movs	r0, #0
}
 8000fde:	bd38      	pop	{r3, r4, r5, pc}

08000fe0 <ADC_Enable>:
{
 8000fe0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fe2:	6802      	ldr	r2, [r0, #0]
 8000fe4:	6893      	ldr	r3, [r2, #8]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d010      	beq.n	8001010 <ADC_Enable+0x30>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d133      	bne.n	800105c <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000ff4:	6891      	ldr	r1, [r2, #8]
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <ADC_Enable+0x80>)
 8000ff8:	4219      	tst	r1, r3
 8000ffa:	d011      	beq.n	8001020 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ffc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001004:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 800100c:	2001      	movs	r0, #1
 800100e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f013 0f01 	tst.w	r3, #1
 8001016:	d101      	bne.n	800101c <ADC_Enable+0x3c>
 8001018:	2300      	movs	r3, #0
 800101a:	e7e9      	b.n	8000ff0 <ADC_Enable+0x10>
 800101c:	2301      	movs	r3, #1
 800101e:	e7e7      	b.n	8000ff0 <ADC_Enable+0x10>
 8001020:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8001022:	6893      	ldr	r3, [r2, #8]
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800102a:	f7ff ff8d 	bl	8000f48 <HAL_GetTick>
 800102e:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f013 0f01 	tst.w	r3, #1
 8001038:	d10e      	bne.n	8001058 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800103a:	f7ff ff85 	bl	8000f48 <HAL_GetTick>
 800103e:	1b40      	subs	r0, r0, r5
 8001040:	2802      	cmp	r0, #2
 8001042:	d9f5      	bls.n	8001030 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001044:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
 8001056:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001058:	2000      	movs	r0, #0
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	2000      	movs	r0, #0
}
 800105e:	bd38      	pop	{r3, r4, r5, pc}
 8001060:	8000003f 	.word	0x8000003f

08001064 <ADC_DMAError>:
{
 8001064:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001066:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001068:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800106a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106e:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001070:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8001078:	f7ff ff6d 	bl	8000f56 <HAL_ADC_ErrorCallback>
 800107c:	bd08      	pop	{r3, pc}

0800107e <ADC_DMAHalfConvCplt>:
{
 800107e:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001080:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001082:	f7ff ff67 	bl	8000f54 <HAL_ADC_ConvHalfCpltCallback>
 8001086:	bd08      	pop	{r3, pc}

08001088 <ADC_DMAConvCplt>:
{
 8001088:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800108a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800108c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800108e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001092:	d11a      	bne.n	80010ca <ADC_DMAConvCplt+0x42>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800109a:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68d2      	ldr	r2, [r2, #12]
 80010a0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80010a4:	d10d      	bne.n	80010c2 <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010a6:	69da      	ldr	r2, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a8:	b95a      	cbnz	r2, 80010c2 <ADC_DMAConvCplt+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80010b8:	d103      	bne.n	80010c2 <ADC_DMAConvCplt+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 f8a0 	bl	8004208 <HAL_ADC_ConvCpltCallback>
 80010c8:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4798      	blx	r3
 80010d0:	bd08      	pop	{r3, pc}
	...

080010d4 <HAL_ADC_Init>:
{
 80010d4:	b530      	push	{r4, r5, lr}
 80010d6:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80010dc:	2800      	cmp	r0, #0
 80010de:	f000 80fb 	beq.w	80012d8 <HAL_ADC_Init+0x204>
 80010e2:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010e6:	f013 0f10 	tst.w	r3, #16
 80010ea:	d151      	bne.n	8001190 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010ee:	b1ab      	cbz	r3, 800111c <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80010fa:	d003      	beq.n	8001104 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010fc:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010fe:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001102:	d046      	beq.n	8001192 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8001104:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001106:	f023 0312 	bic.w	r3, r3, #18
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001110:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001118:	2001      	movs	r0, #1
 800111a:	e03a      	b.n	8001192 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800111c:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800111e:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8001120:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8001122:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8001126:	f004 f94d 	bl	80053c4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001132:	d001      	beq.n	8001138 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001134:	2000      	movs	r0, #0
 8001136:	e7dc      	b.n	80010f2 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001138:	4620      	mov	r0, r4
 800113a:	f7ff ff0d 	bl	8000f58 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800113e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001140:	f013 0f10 	tst.w	r3, #16
 8001144:	d1d5      	bne.n	80010f2 <HAL_ADC_Init+0x1e>
 8001146:	2800      	cmp	r0, #0
 8001148:	d1d3      	bne.n	80010f2 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800114a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800114c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001150:	f023 0302 	bic.w	r3, r3, #2
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800115a:	6822      	ldr	r2, [r4, #0]
 800115c:	6893      	ldr	r3, [r2, #8]
 800115e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001162:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001164:	6822      	ldr	r2, [r4, #0]
 8001166:	6893      	ldr	r3, [r2, #8]
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <HAL_ADC_Init+0x208>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a5b      	ldr	r2, [pc, #364]	; (80012e0 <HAL_ADC_Init+0x20c>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	0c9b      	lsrs	r3, r3, #18
 800117a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800117e:	005a      	lsls	r2, r3, #1
 8001180:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001182:	9b00      	ldr	r3, [sp, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0b4      	beq.n	80010f2 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8001188:	9b00      	ldr	r3, [sp, #0]
 800118a:	3b01      	subs	r3, #1
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	e7f8      	b.n	8001182 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001190:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001192:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001194:	f013 0f10 	tst.w	r3, #16
 8001198:	f040 8095 	bne.w	80012c6 <HAL_ADC_Init+0x1f2>
 800119c:	2800      	cmp	r0, #0
 800119e:	f040 8092 	bne.w	80012c6 <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80011a6:	f013 0304 	ands.w	r3, r3, #4
 80011aa:	f040 808c 	bne.w	80012c6 <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80011b0:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80011b4:	f041 0102 	orr.w	r1, r1, #2
 80011b8:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011ba:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80011be:	d055      	beq.n	800126c <HAL_ADC_Init+0x198>
 80011c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80011c4:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011c6:	6891      	ldr	r1, [r2, #8]
 80011c8:	f001 0103 	and.w	r1, r1, #3
 80011cc:	2901      	cmp	r1, #1
 80011ce:	d050      	beq.n	8001272 <HAL_ADC_Init+0x19e>
 80011d0:	2200      	movs	r2, #0
 80011d2:	b972      	cbnz	r2, 80011f2 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011d4:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011d6:	b12d      	cbz	r5, 80011e4 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011d8:	68a9      	ldr	r1, [r5, #8]
 80011da:	f001 0103 	and.w	r1, r1, #3
 80011de:	2901      	cmp	r1, #1
 80011e0:	d04f      	beq.n	8001282 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011e2:	b932      	cbnz	r2, 80011f2 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011e4:	493f      	ldr	r1, [pc, #252]	; (80012e4 <HAL_ADC_Init+0x210>)
 80011e6:	688a      	ldr	r2, [r1, #8]
 80011e8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80011ec:	6865      	ldr	r5, [r4, #4]
 80011ee:	432a      	orrs	r2, r5
 80011f0:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80011f2:	69e2      	ldr	r2, [r4, #28]
 80011f4:	0351      	lsls	r1, r2, #13
 80011f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80011f8:	2d01      	cmp	r5, #1
 80011fa:	d001      	beq.n	8001200 <HAL_ADC_Init+0x12c>
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	430b      	orrs	r3, r1
 8001202:	68e1      	ldr	r1, [r4, #12]
 8001204:	430b      	orrs	r3, r1
 8001206:	68a1      	ldr	r1, [r4, #8]
 8001208:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800120a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800120c:	2901      	cmp	r1, #1
 800120e:	d03e      	beq.n	800128e <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001210:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001212:	2a01      	cmp	r2, #1
 8001214:	d002      	beq.n	800121c <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001216:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001218:	430a      	orrs	r2, r1
 800121a:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800121c:	6822      	ldr	r2, [r4, #0]
 800121e:	6891      	ldr	r1, [r2, #8]
 8001220:	f011 0f0c 	tst.w	r1, #12
 8001224:	d10b      	bne.n	800123e <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001226:	68d1      	ldr	r1, [r2, #12]
 8001228:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800122c:	f021 0102 	bic.w	r1, r1, #2
 8001230:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001232:	69a1      	ldr	r1, [r4, #24]
 8001234:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001236:	0052      	lsls	r2, r2, #1
 8001238:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800123c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 800123e:	6821      	ldr	r1, [r4, #0]
 8001240:	68cd      	ldr	r5, [r1, #12]
 8001242:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <HAL_ADC_Init+0x214>)
 8001244:	402a      	ands	r2, r5
 8001246:	4313      	orrs	r3, r2
 8001248:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d031      	beq.n	80012b4 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001250:	6822      	ldr	r2, [r4, #0]
 8001252:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001254:	f023 030f 	bic.w	r3, r3, #15
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800125a:	2300      	movs	r3, #0
 800125c:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800125e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001260:	f023 0303 	bic.w	r3, r3, #3
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6463      	str	r3, [r4, #68]	; 0x44
 800126a:	e033      	b.n	80012d4 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800126c:	491f      	ldr	r1, [pc, #124]	; (80012ec <HAL_ADC_Init+0x218>)
 800126e:	9101      	str	r1, [sp, #4]
 8001270:	e7a9      	b.n	80011c6 <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	f012 0f01 	tst.w	r2, #1
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x1aa>
 800127a:	2200      	movs	r2, #0
 800127c:	e7a9      	b.n	80011d2 <HAL_ADC_Init+0xfe>
 800127e:	2201      	movs	r2, #1
 8001280:	e7a7      	b.n	80011d2 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001282:	6829      	ldr	r1, [r5, #0]
 8001284:	f011 0f01 	tst.w	r1, #1
 8001288:	d0ab      	beq.n	80011e2 <HAL_ADC_Init+0x10e>
 800128a:	2201      	movs	r2, #1
 800128c:	e7a9      	b.n	80011e2 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800128e:	b932      	cbnz	r2, 800129e <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001290:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001292:	3a01      	subs	r2, #1
 8001294:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	e7b8      	b.n	8001210 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 800129e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80012a0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80012a4:	f042 0220 	orr.w	r2, r2, #32
 80012a8:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	64a2      	str	r2, [r4, #72]	; 0x48
 80012b2:	e7ad      	b.n	8001210 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80012b4:	6821      	ldr	r1, [r4, #0]
 80012b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80012b8:	f023 030f 	bic.w	r3, r3, #15
 80012bc:	6a22      	ldr	r2, [r4, #32]
 80012be:	3a01      	subs	r2, #1
 80012c0:	4313      	orrs	r3, r2
 80012c2:	630b      	str	r3, [r1, #48]	; 0x30
 80012c4:	e7c9      	b.n	800125a <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 80012c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012c8:	f023 0312 	bic.w	r3, r3, #18
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 80012d2:	2001      	movs	r0, #1
}
 80012d4:	b017      	add	sp, #92	; 0x5c
 80012d6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80012d8:	2001      	movs	r0, #1
 80012da:	e7fb      	b.n	80012d4 <HAL_ADC_Init+0x200>
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	50000300 	.word	0x50000300
 80012e8:	fff0c007 	.word	0xfff0c007
 80012ec:	50000100 	.word	0x50000100

080012f0 <HAL_ADC_Start_DMA>:
{
 80012f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f2:	6804      	ldr	r4, [r0, #0]
 80012f4:	68a4      	ldr	r4, [r4, #8]
 80012f6:	f014 0f04 	tst.w	r4, #4
 80012fa:	d002      	beq.n	8001302 <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_BUSY;
 80012fc:	2502      	movs	r5, #2
}
 80012fe:	4628      	mov	r0, r5
 8001300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001302:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001306:	2b01      	cmp	r3, #1
 8001308:	d07e      	beq.n	8001408 <HAL_ADC_Start_DMA+0x118>
 800130a:	2301      	movs	r3, #1
 800130c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_ADC_Start_DMA+0x11c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f013 0f1f 	tst.w	r3, #31
 8001318:	d004      	beq.n	8001324 <HAL_ADC_Start_DMA+0x34>
      __HAL_UNLOCK(hadc);
 800131a:	2300      	movs	r3, #0
 800131c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8001320:	2501      	movs	r5, #1
 8001322:	e7ec      	b.n	80012fe <HAL_ADC_Start_DMA+0xe>
 8001324:	4617      	mov	r7, r2
 8001326:	460e      	mov	r6, r1
 8001328:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 800132a:	f7ff fe59 	bl	8000fe0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800132e:	4605      	mov	r5, r0
 8001330:	2800      	cmp	r0, #0
 8001332:	d165      	bne.n	8001400 <HAL_ADC_Start_DMA+0x110>
        ADC_STATE_CLR_SET(hadc->State,
 8001334:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001336:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001342:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_ADC_Start_DMA+0x11c>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f013 0f1f 	tst.w	r3, #31
 800134c:	d038      	beq.n	80013c0 <HAL_ADC_Start_DMA+0xd0>
 800134e:	6822      	ldr	r2, [r4, #0]
 8001350:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001354:	d034      	beq.n	80013c0 <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001356:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800135c:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_ADC_Start_DMA+0x120>)
 8001360:	429a      	cmp	r2, r3
 8001362:	d03d      	beq.n	80013e0 <HAL_ADC_Start_DMA+0xf0>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001364:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001366:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800136a:	d046      	beq.n	80013fa <HAL_ADC_Start_DMA+0x10a>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800136c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800136e:	f023 0306 	bic.w	r3, r3, #6
 8001372:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 8001374:	2300      	movs	r3, #0
 8001376:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800137a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800137c:	4a25      	ldr	r2, [pc, #148]	; (8001414 <HAL_ADC_Start_DMA+0x124>)
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001382:	4a25      	ldr	r2, [pc, #148]	; (8001418 <HAL_ADC_Start_DMA+0x128>)
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001386:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001388:	4a24      	ldr	r2, [pc, #144]	; (800141c <HAL_ADC_Start_DMA+0x12c>)
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800138c:	6823      	ldr	r3, [r4, #0]
 800138e:	221c      	movs	r2, #28
 8001390:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001392:	6822      	ldr	r2, [r4, #0]
 8001394:	6853      	ldr	r3, [r2, #4]
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800139c:	6822      	ldr	r2, [r4, #0]
 800139e:	68d3      	ldr	r3, [r2, #12]
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a6:	6821      	ldr	r1, [r4, #0]
 80013a8:	463b      	mov	r3, r7
 80013aa:	4632      	mov	r2, r6
 80013ac:	3140      	adds	r1, #64	; 0x40
 80013ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80013b0:	f000 fb10 	bl	80019d4 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013b4:	6822      	ldr	r2, [r4, #0]
 80013b6:	6893      	ldr	r3, [r2, #8]
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6093      	str	r3, [r2, #8]
 80013be:	e79e      	b.n	80012fe <HAL_ADC_Start_DMA+0xe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013c6:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013d0:	d0c8      	beq.n	8001364 <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013dc:	6463      	str	r3, [r4, #68]	; 0x44
 80013de:	e7c1      	b.n	8001364 <HAL_ADC_Start_DMA+0x74>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013ea:	d0bb      	beq.n	8001364 <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f6:	6463      	str	r3, [r4, #68]	; 0x44
 80013f8:	e7b4      	b.n	8001364 <HAL_ADC_Start_DMA+0x74>
          ADC_CLEAR_ERRORCODE(hadc);
 80013fa:	2300      	movs	r3, #0
 80013fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80013fe:	e7b9      	b.n	8001374 <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 8001400:	2300      	movs	r3, #0
 8001402:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001406:	e77a      	b.n	80012fe <HAL_ADC_Start_DMA+0xe>
    __HAL_LOCK(hadc);
 8001408:	2502      	movs	r5, #2
 800140a:	e778      	b.n	80012fe <HAL_ADC_Start_DMA+0xe>
 800140c:	50000300 	.word	0x50000300
 8001410:	50000100 	.word	0x50000100
 8001414:	08001089 	.word	0x08001089
 8001418:	0800107f 	.word	0x0800107f
 800141c:	08001065 	.word	0x08001065

08001420 <HAL_ADCEx_Calibration_Start>:
{
 8001420:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001422:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001426:	2b01      	cmp	r3, #1
 8001428:	d102      	bne.n	8001430 <HAL_ADCEx_Calibration_Start+0x10>
 800142a:	2502      	movs	r5, #2
}
 800142c:	4628      	mov	r0, r5
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	460e      	mov	r6, r1
 8001432:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001434:	2301      	movs	r3, #1
 8001436:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_Disable(hadc);
 800143a:	f7ff fd8d 	bl	8000f58 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 800143e:	4605      	mov	r5, r0
 8001440:	2800      	cmp	r0, #0
 8001442:	d130      	bne.n	80014a6 <HAL_ADCEx_Calibration_Start+0x86>
    hadc->State = HAL_ADC_STATE_READY;
 8001444:	2301      	movs	r3, #1
 8001446:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001448:	6822      	ldr	r2, [r4, #0]
 800144a:	6893      	ldr	r3, [r2, #8]
 800144c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001450:	6093      	str	r3, [r2, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001452:	2e01      	cmp	r6, #1
 8001454:	d01b      	beq.n	800148e <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001456:	6822      	ldr	r2, [r4, #0]
 8001458:	6893      	ldr	r3, [r2, #8]
 800145a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800145e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001460:	f7ff fd72 	bl	8000f48 <HAL_GetTick>
 8001464:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da15      	bge.n	800149a <HAL_ADCEx_Calibration_Start+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800146e:	f7ff fd6b 	bl	8000f48 <HAL_GetTick>
 8001472:	1b80      	subs	r0, r0, r6
 8001474:	280a      	cmp	r0, #10
 8001476:	d9f6      	bls.n	8001466 <HAL_ADCEx_Calibration_Start+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8001478:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800147a:	f023 0312 	bic.w	r3, r3, #18
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001484:	2300      	movs	r3, #0
 8001486:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800148a:	2501      	movs	r5, #1
 800148c:	e7ce      	b.n	800142c <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	6893      	ldr	r3, [r2, #8]
 8001492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001496:	6093      	str	r3, [r2, #8]
 8001498:	e7dd      	b.n	8001456 <HAL_ADCEx_Calibration_Start+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 800149a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800149c:	f023 0303 	bic.w	r3, r3, #3
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80014a6:	2300      	movs	r3, #0
 80014a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 80014ac:	e7be      	b.n	800142c <HAL_ADCEx_Calibration_Start+0xc>
	...

080014b0 <HAL_ADC_ConfigChannel>:
{
 80014b0:	b470      	push	{r4, r5, r6}
 80014b2:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80014b4:	2200      	movs	r2, #0
 80014b6:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 80014b8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80014bc:	2a01      	cmp	r2, #1
 80014be:	f000 81ad 	beq.w	800181c <HAL_ADC_ConfigChannel+0x36c>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2201      	movs	r2, #1
 80014c6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ca:	6800      	ldr	r0, [r0, #0]
 80014cc:	6882      	ldr	r2, [r0, #8]
 80014ce:	f012 0f04 	tst.w	r2, #4
 80014d2:	f040 8196 	bne.w	8001802 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 80014d6:	684a      	ldr	r2, [r1, #4]
 80014d8:	2a04      	cmp	r2, #4
 80014da:	d831      	bhi.n	8001540 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 80014dc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80014de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80014e2:	0055      	lsls	r5, r2, #1
 80014e4:	221f      	movs	r2, #31
 80014e6:	40aa      	lsls	r2, r5
 80014e8:	ea24 0202 	bic.w	r2, r4, r2
 80014ec:	680c      	ldr	r4, [r1, #0]
 80014ee:	40ac      	lsls	r4, r5
 80014f0:	4322      	orrs	r2, r4
 80014f2:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	6882      	ldr	r2, [r0, #8]
 80014f8:	f012 0f0c 	tst.w	r2, #12
 80014fc:	d168      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014fe:	680a      	ldr	r2, [r1, #0]
 8001500:	2a09      	cmp	r2, #9
 8001502:	d94e      	bls.n	80015a2 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001504:	6984      	ldr	r4, [r0, #24]
 8001506:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800150a:	3a1e      	subs	r2, #30
 800150c:	2507      	movs	r5, #7
 800150e:	4095      	lsls	r5, r2
 8001510:	ea24 0405 	bic.w	r4, r4, r5
 8001514:	688d      	ldr	r5, [r1, #8]
 8001516:	fa05 f202 	lsl.w	r2, r5, r2
 800151a:	4322      	orrs	r2, r4
 800151c:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800151e:	6948      	ldr	r0, [r1, #20]
 8001520:	681c      	ldr	r4, [r3, #0]
 8001522:	68e2      	ldr	r2, [r4, #12]
 8001524:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001528:	0052      	lsls	r2, r2, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 800152e:	6908      	ldr	r0, [r1, #16]
 8001530:	3801      	subs	r0, #1
 8001532:	2803      	cmp	r0, #3
 8001534:	f200 808f 	bhi.w	8001656 <HAL_ADC_ConfigChannel+0x1a6>
 8001538:	e8df f000 	tbb	[pc, r0]
 800153c:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8001540:	2a09      	cmp	r2, #9
 8001542:	d80e      	bhi.n	8001562 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001544:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001546:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800154a:	0055      	lsls	r5, r2, #1
 800154c:	3d1e      	subs	r5, #30
 800154e:	221f      	movs	r2, #31
 8001550:	40aa      	lsls	r2, r5
 8001552:	ea24 0202 	bic.w	r2, r4, r2
 8001556:	680c      	ldr	r4, [r1, #0]
 8001558:	fa04 f505 	lsl.w	r5, r4, r5
 800155c:	432a      	orrs	r2, r5
 800155e:	6342      	str	r2, [r0, #52]	; 0x34
 8001560:	e7c8      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001562:	2a0e      	cmp	r2, #14
 8001564:	d80e      	bhi.n	8001584 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001566:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001568:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800156c:	0055      	lsls	r5, r2, #1
 800156e:	3d3c      	subs	r5, #60	; 0x3c
 8001570:	221f      	movs	r2, #31
 8001572:	40aa      	lsls	r2, r5
 8001574:	ea24 0202 	bic.w	r2, r4, r2
 8001578:	680c      	ldr	r4, [r1, #0]
 800157a:	fa04 f505 	lsl.w	r5, r4, r5
 800157e:	432a      	orrs	r2, r5
 8001580:	6382      	str	r2, [r0, #56]	; 0x38
 8001582:	e7b7      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001584:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001586:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800158a:	0055      	lsls	r5, r2, #1
 800158c:	3d5a      	subs	r5, #90	; 0x5a
 800158e:	221f      	movs	r2, #31
 8001590:	40aa      	lsls	r2, r5
 8001592:	ea24 0202 	bic.w	r2, r4, r2
 8001596:	680c      	ldr	r4, [r1, #0]
 8001598:	fa04 f505 	lsl.w	r5, r4, r5
 800159c:	432a      	orrs	r2, r5
 800159e:	63c2      	str	r2, [r0, #60]	; 0x3c
 80015a0:	e7a8      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015a2:	6944      	ldr	r4, [r0, #20]
 80015a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80015a8:	2507      	movs	r5, #7
 80015aa:	4095      	lsls	r5, r2
 80015ac:	ea24 0405 	bic.w	r4, r4, r5
 80015b0:	688d      	ldr	r5, [r1, #8]
 80015b2:	fa05 f202 	lsl.w	r2, r5, r2
 80015b6:	4322      	orrs	r2, r4
 80015b8:	6142      	str	r2, [r0, #20]
 80015ba:	e7b0      	b.n	800151e <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015bc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80015be:	4d98      	ldr	r5, [pc, #608]	; (8001820 <HAL_ADC_ConfigChannel+0x370>)
 80015c0:	4005      	ands	r5, r0
 80015c2:	6808      	ldr	r0, [r1, #0]
 80015c4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80015c8:	4315      	orrs	r5, r2
 80015ca:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80015ce:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	6882      	ldr	r2, [r0, #8]
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	2a01      	cmp	r2, #1
 80015da:	d06f      	beq.n	80016bc <HAL_ADC_ConfigChannel+0x20c>
 80015dc:	2200      	movs	r2, #0
 80015de:	2a00      	cmp	r2, #0
 80015e0:	f040 811a 	bne.w	8001818 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015e4:	68cc      	ldr	r4, [r1, #12]
 80015e6:	2c01      	cmp	r4, #1
 80015e8:	d070      	beq.n	80016cc <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015ea:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80015ee:	680e      	ldr	r6, [r1, #0]
 80015f0:	2501      	movs	r5, #1
 80015f2:	40b5      	lsls	r5, r6
 80015f4:	ea24 0405 	bic.w	r4, r4, r5
 80015f8:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015fc:	6809      	ldr	r1, [r1, #0]
 80015fe:	2910      	cmp	r1, #16
 8001600:	f000 808d 	beq.w	800171e <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001604:	2911      	cmp	r1, #17
 8001606:	f000 80af 	beq.w	8001768 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800160a:	2912      	cmp	r1, #18
 800160c:	f000 80b2 	beq.w	8001774 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001610:	2000      	movs	r0, #0
 8001612:	e0fb      	b.n	800180c <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001614:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001616:	4d82      	ldr	r5, [pc, #520]	; (8001820 <HAL_ADC_ConfigChannel+0x370>)
 8001618:	4005      	ands	r5, r0
 800161a:	6808      	ldr	r0, [r1, #0]
 800161c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001620:	4315      	orrs	r5, r2
 8001622:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001626:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001628:	e7d2      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800162a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800162c:	4d7c      	ldr	r5, [pc, #496]	; (8001820 <HAL_ADC_ConfigChannel+0x370>)
 800162e:	4005      	ands	r5, r0
 8001630:	6808      	ldr	r0, [r1, #0]
 8001632:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001636:	4315      	orrs	r5, r2
 8001638:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800163c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 800163e:	e7c7      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001640:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001642:	4877      	ldr	r0, [pc, #476]	; (8001820 <HAL_ADC_ConfigChannel+0x370>)
 8001644:	4028      	ands	r0, r5
 8001646:	680d      	ldr	r5, [r1, #0]
 8001648:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800164c:	4302      	orrs	r2, r0
 800164e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001652:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001654:	e7bc      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001656:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001658:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800165c:	6808      	ldr	r0, [r1, #0]
 800165e:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001662:	d01c      	beq.n	800169e <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001668:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800166c:	680c      	ldr	r4, [r1, #0]
 800166e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001672:	d019      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001678:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800167c:	680c      	ldr	r4, [r1, #0]
 800167e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001682:	d016      	beq.n	80016b2 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001688:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800168c:	680c      	ldr	r4, [r1, #0]
 800168e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001692:	d19d      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001694:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001696:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800169a:	66c2      	str	r2, [r0, #108]	; 0x6c
 800169c:	e798      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800169e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80016a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016a4:	6622      	str	r2, [r4, #96]	; 0x60
 80016a6:	e7dd      	b.n	8001664 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016a8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80016aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ae:	6642      	str	r2, [r0, #100]	; 0x64
 80016b0:	e7e0      	b.n	8001674 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016b2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80016b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016b8:	6682      	str	r2, [r0, #104]	; 0x68
 80016ba:	e7e3      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016bc:	6802      	ldr	r2, [r0, #0]
 80016be:	f012 0f01 	tst.w	r2, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x218>
 80016c4:	2200      	movs	r2, #0
 80016c6:	e78a      	b.n	80015de <HAL_ADC_ConfigChannel+0x12e>
 80016c8:	2201      	movs	r2, #1
 80016ca:	e788      	b.n	80015de <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016cc:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80016d0:	680e      	ldr	r6, [r1, #0]
 80016d2:	2501      	movs	r5, #1
 80016d4:	40b5      	lsls	r5, r6
 80016d6:	432c      	orrs	r4, r5
 80016d8:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016dc:	6808      	ldr	r0, [r1, #0]
 80016de:	2809      	cmp	r0, #9
 80016e0:	d90e      	bls.n	8001700 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 80016e2:	681e      	ldr	r6, [r3, #0]
 80016e4:	69b4      	ldr	r4, [r6, #24]
 80016e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80016ea:	381b      	subs	r0, #27
 80016ec:	2507      	movs	r5, #7
 80016ee:	4085      	lsls	r5, r0
 80016f0:	ea24 0405 	bic.w	r4, r4, r5
 80016f4:	688d      	ldr	r5, [r1, #8]
 80016f6:	fa05 f000 	lsl.w	r0, r5, r0
 80016fa:	4320      	orrs	r0, r4
 80016fc:	61b0      	str	r0, [r6, #24]
 80016fe:	e77d      	b.n	80015fc <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001700:	681e      	ldr	r6, [r3, #0]
 8001702:	6974      	ldr	r4, [r6, #20]
 8001704:	3001      	adds	r0, #1
 8001706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800170a:	2507      	movs	r5, #7
 800170c:	4085      	lsls	r5, r0
 800170e:	ea24 0405 	bic.w	r4, r4, r5
 8001712:	688d      	ldr	r5, [r1, #8]
 8001714:	fa05 f000 	lsl.w	r0, r5, r0
 8001718:	4320      	orrs	r0, r4
 800171a:	6170      	str	r0, [r6, #20]
 800171c:	e76e      	b.n	80015fc <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800171e:	4841      	ldr	r0, [pc, #260]	; (8001824 <HAL_ADC_ConfigChannel+0x374>)
 8001720:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001722:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001726:	f47f af6d 	bne.w	8001604 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800172a:	681c      	ldr	r4, [r3, #0]
 800172c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001730:	d027      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x2d2>
 8001732:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001736:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001738:	68a0      	ldr	r0, [r4, #8]
 800173a:	f000 0003 	and.w	r0, r0, #3
 800173e:	2801      	cmp	r0, #1
 8001740:	d022      	beq.n	8001788 <HAL_ADC_ConfigChannel+0x2d8>
 8001742:	2a00      	cmp	r2, #0
 8001744:	d157      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001746:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001748:	b135      	cbz	r5, 8001758 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800174a:	68a8      	ldr	r0, [r5, #8]
 800174c:	f000 0003 	and.w	r0, r0, #3
 8001750:	2801      	cmp	r0, #1
 8001752:	d01f      	beq.n	8001794 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001754:	2a00      	cmp	r2, #0
 8001756:	d14e      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001758:	2910      	cmp	r1, #16
 800175a:	d021      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800175c:	2911      	cmp	r1, #17
 800175e:	d039      	beq.n	80017d4 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001760:	2912      	cmp	r1, #18
 8001762:	d041      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001764:	2000      	movs	r0, #0
 8001766:	e051      	b.n	800180c <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001768:	482e      	ldr	r0, [pc, #184]	; (8001824 <HAL_ADC_ConfigChannel+0x374>)
 800176a:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800176c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001770:	d0db      	beq.n	800172a <HAL_ADC_ConfigChannel+0x27a>
 8001772:	e74a      	b.n	800160a <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001774:	482b      	ldr	r0, [pc, #172]	; (8001824 <HAL_ADC_ConfigChannel+0x374>)
 8001776:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001778:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800177c:	d0d5      	beq.n	800172a <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177e:	2000      	movs	r0, #0
 8001780:	e044      	b.n	800180c <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001782:	4829      	ldr	r0, [pc, #164]	; (8001828 <HAL_ADC_ConfigChannel+0x378>)
 8001784:	9001      	str	r0, [sp, #4]
 8001786:	e7d7      	b.n	8001738 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001788:	6820      	ldr	r0, [r4, #0]
 800178a:	f010 0f01 	tst.w	r0, #1
 800178e:	d0d8      	beq.n	8001742 <HAL_ADC_ConfigChannel+0x292>
 8001790:	2201      	movs	r2, #1
 8001792:	e7d6      	b.n	8001742 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001794:	6828      	ldr	r0, [r5, #0]
 8001796:	f010 0f01 	tst.w	r0, #1
 800179a:	d0db      	beq.n	8001754 <HAL_ADC_ConfigChannel+0x2a4>
 800179c:	2201      	movs	r2, #1
 800179e:	e7d9      	b.n	8001754 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017a0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80017a4:	d1da      	bne.n	800175c <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017a6:	491f      	ldr	r1, [pc, #124]	; (8001824 <HAL_ADC_ConfigChannel+0x374>)
 80017a8:	688a      	ldr	r2, [r1, #8]
 80017aa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017ae:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017b0:	4a1e      	ldr	r2, [pc, #120]	; (800182c <HAL_ADC_ConfigChannel+0x37c>)
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	491e      	ldr	r1, [pc, #120]	; (8001830 <HAL_ADC_ConfigChannel+0x380>)
 80017b6:	fbb2 f1f1 	udiv	r1, r2, r1
 80017ba:	220a      	movs	r2, #10
 80017bc:	fb02 f201 	mul.w	r2, r2, r1
 80017c0:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80017c2:	e002      	b.n	80017ca <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 80017c4:	9a00      	ldr	r2, [sp, #0]
 80017c6:	3a01      	subs	r2, #1
 80017c8:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80017ca:	9a00      	ldr	r2, [sp, #0]
 80017cc:	2a00      	cmp	r2, #0
 80017ce:	d1f9      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2000      	movs	r0, #0
 80017d2:	e01b      	b.n	800180c <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017d4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80017d8:	d1c2      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017da:	4912      	ldr	r1, [pc, #72]	; (8001824 <HAL_ADC_ConfigChannel+0x374>)
 80017dc:	688a      	ldr	r2, [r1, #8]
 80017de:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80017e2:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017e6:	e011      	b.n	800180c <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017e8:	490e      	ldr	r1, [pc, #56]	; (8001824 <HAL_ADC_ConfigChannel+0x374>)
 80017ea:	688a      	ldr	r2, [r1, #8]
 80017ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80017f0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f2:	2000      	movs	r0, #0
 80017f4:	e00a      	b.n	800180c <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017f8:	f042 0220 	orr.w	r2, r2, #32
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e004      	b.n	800180c <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001804:	f042 0220 	orr.w	r2, r2, #32
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800180a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001812:	b017      	add	sp, #92	; 0x5c
 8001814:	bc70      	pop	{r4, r5, r6}
 8001816:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2000      	movs	r0, #0
 800181a:	e7f7      	b.n	800180c <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 800181c:	2002      	movs	r0, #2
 800181e:	e7f8      	b.n	8001812 <HAL_ADC_ConfigChannel+0x362>
 8001820:	83fff000 	.word	0x83fff000
 8001824:	50000300 	.word	0x50000300
 8001828:	50000100 	.word	0x50000100
 800182c:	20000000 	.word	0x20000000
 8001830:	000f4240 	.word	0x000f4240

08001834 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001836:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001838:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001840:	0200      	lsls	r0, r0, #8
 8001842:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001846:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001848:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800184c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001850:	60d0      	str	r0, [r2, #12]
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_NVIC_SetPriority+0x5c>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001862:	f1c3 0407 	rsb	r4, r3, #7
 8001866:	2c04      	cmp	r4, #4
 8001868:	bf28      	it	cs
 800186a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186c:	1d1d      	adds	r5, r3, #4
 800186e:	2d06      	cmp	r5, #6
 8001870:	d917      	bls.n	80018a2 <HAL_NVIC_SetPriority+0x4a>
 8001872:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	2501      	movs	r5, #1
 8001876:	fa05 f404 	lsl.w	r4, r5, r4
 800187a:	3c01      	subs	r4, #1
 800187c:	4021      	ands	r1, r4
 800187e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	fa05 f303 	lsl.w	r3, r5, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800188a:	2800      	cmp	r0, #0
 800188c:	db0b      	blt.n	80018a6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	0109      	lsls	r1, r1, #4
 8001890:	b2c9      	uxtb	r1, r1
 8001892:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001896:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800189a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800189e:	bc30      	pop	{r4, r5}
 80018a0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	2300      	movs	r3, #0
 80018a4:	e7e6      	b.n	8001874 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	f000 000f 	and.w	r0, r0, #15
 80018aa:	0109      	lsls	r1, r1, #4
 80018ac:	b2c9      	uxtb	r1, r1
 80018ae:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <HAL_NVIC_SetPriority+0x60>)
 80018b0:	5419      	strb	r1, [r3, r0]
 80018b2:	e7f4      	b.n	800189e <HAL_NVIC_SetPriority+0x46>
 80018b4:	e000ed00 	.word	0xe000ed00
 80018b8:	e000ed14 	.word	0xe000ed14

080018bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018bc:	0942      	lsrs	r2, r0, #5
 80018be:	f000 001f 	and.w	r0, r0, #31
 80018c2:	2301      	movs	r3, #1
 80018c4:	fa03 f000 	lsl.w	r0, r3, r0
 80018c8:	4b01      	ldr	r3, [pc, #4]	; (80018d0 <HAL_NVIC_EnableIRQ+0x14>)
 80018ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	3801      	subs	r0, #1
 80018d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018da:	d20a      	bcs.n	80018f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_SYSTICK_Config+0x24>)
 80018de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	21f0      	movs	r1, #240	; 0xf0
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_SYSTICK_Config+0x28>)
 80018e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	2000      	movs	r0, #0
 80018ea:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001900:	2804      	cmp	r0, #4
 8001902:	d005      	beq.n	8001910 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001906:	6813      	ldr	r3, [r2, #0]
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001910:	4a02      	ldr	r2, [pc, #8]	; (800191c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4770      	bx	lr
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001920:	4770      	bx	lr

08001922 <HAL_SYSTICK_IRQHandler>:
{
 8001922:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001924:	f7ff fffc 	bl	8001920 <HAL_SYSTICK_Callback>
 8001928:	bd08      	pop	{r3, pc}

0800192a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800192a:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800192c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800192e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001930:	2401      	movs	r4, #1
 8001932:	40b4      	lsls	r4, r6
 8001934:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001936:	6804      	ldr	r4, [r0, #0]
 8001938:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800193a:	6843      	ldr	r3, [r0, #4]
 800193c:	2b10      	cmp	r3, #16
 800193e:	d005      	beq.n	800194c <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001940:	6803      	ldr	r3, [r0, #0]
 8001942:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001944:	6803      	ldr	r3, [r0, #0]
 8001946:	60da      	str	r2, [r3, #12]
  }
}
 8001948:	bc70      	pop	{r4, r5, r6}
 800194a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800194c:	6803      	ldr	r3, [r0, #0]
 800194e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001950:	6803      	ldr	r3, [r0, #0]
 8001952:	60d9      	str	r1, [r3, #12]
 8001954:	e7f8      	b.n	8001948 <DMA_SetConfig+0x1e>
	...

08001958 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001958:	6802      	ldr	r2, [r0, #0]
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <DMA_CalcBaseAndBitshift+0x18>)
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <DMA_CalcBaseAndBitshift+0x1c>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800196a:	4b03      	ldr	r3, [pc, #12]	; (8001978 <DMA_CalcBaseAndBitshift+0x20>)
 800196c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800196e:	4770      	bx	lr
 8001970:	bffdfff8 	.word	0xbffdfff8
 8001974:	cccccccd 	.word	0xcccccccd
 8001978:	40020000 	.word	0x40020000

0800197c <HAL_DMA_Init>:
  if(NULL == hdma)
 800197c:	b340      	cbz	r0, 80019d0 <HAL_DMA_Init+0x54>
{ 
 800197e:	b510      	push	{r4, lr}
 8001980:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001982:	2302      	movs	r3, #2
 8001984:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001988:	6801      	ldr	r1, [r0, #0]
 800198a:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800198c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001990:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001994:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8001998:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199a:	68e0      	ldr	r0, [r4, #12]
 800199c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199e:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	6960      	ldr	r0, [r4, #20]
 80019a4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80019aa:	69e0      	ldr	r0, [r4, #28]
 80019ac:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80019ae:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80019b0:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff ffd0 	bl	8001958 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 80019b8:	2000      	movs	r0, #0
 80019ba:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80019bc:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80019be:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80019c0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80019ca:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 80019ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019d0:	2001      	movs	r0, #1
 80019d2:	4770      	bx	lr

080019d4 <HAL_DMA_Start_IT>:
{
 80019d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80019d6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80019da:	2c01      	cmp	r4, #1
 80019dc:	d032      	beq.n	8001a44 <HAL_DMA_Start_IT+0x70>
 80019de:	2401      	movs	r4, #1
 80019e0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80019e4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80019e8:	2c01      	cmp	r4, #1
 80019ea:	d004      	beq.n	80019f6 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80019ec:	2300      	movs	r3, #0
 80019ee:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 80019f2:	2002      	movs	r0, #2
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
 80019f6:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 80019f8:	2002      	movs	r0, #2
 80019fa:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fe:	2000      	movs	r0, #0
 8001a00:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a02:	6825      	ldr	r5, [r4, #0]
 8001a04:	6828      	ldr	r0, [r5, #0]
 8001a06:	f020 0001 	bic.w	r0, r0, #1
 8001a0a:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff ff8c 	bl	800192a <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001a12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a14:	b15b      	cbz	r3, 8001a2e <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a16:	6822      	ldr	r2, [r4, #0]
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	f043 030e 	orr.w	r3, r3, #14
 8001a1e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001a20:	6822      	ldr	r2, [r4, #0]
 8001a22:	6813      	ldr	r3, [r2, #0]
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	bd38      	pop	{r3, r4, r5, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001a2e:	6822      	ldr	r2, [r4, #0]
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	f043 030a 	orr.w	r3, r3, #10
 8001a36:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a38:	6822      	ldr	r2, [r4, #0]
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e7ed      	b.n	8001a20 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001a44:	2002      	movs	r0, #2
} 
 8001a46:	bd38      	pop	{r3, r4, r5, pc}

08001a48 <HAL_DMA_Abort_IT>:
{  
 8001a48:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a4a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d003      	beq.n	8001a5a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a52:	2304      	movs	r3, #4
 8001a54:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
 8001a58:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a5a:	6802      	ldr	r2, [r0, #0]
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f023 030e 	bic.w	r3, r3, #14
 8001a62:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a64:	6802      	ldr	r2, [r0, #0]
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a6e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001a70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a72:	2201      	movs	r2, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001a7a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001a84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a86:	b113      	cbz	r3, 8001a8e <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001a88:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	bd08      	pop	{r3, pc}
 8001a8e:	2000      	movs	r0, #0
}
 8001a90:	bd08      	pop	{r3, pc}

08001a92 <HAL_DMA_IRQHandler>:
{
 8001a92:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001a96:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001a98:	6804      	ldr	r4, [r0, #0]
 8001a9a:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	408b      	lsls	r3, r1
 8001aa2:	421a      	tst	r2, r3
 8001aa4:	d014      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x3e>
 8001aa6:	f015 0f04 	tst.w	r5, #4
 8001aaa:	d011      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x3e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	f013 0f20 	tst.w	r3, #32
 8001ab2:	d103      	bne.n	8001abc <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001abc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001abe:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	408b      	lsls	r3, r1
 8001ac4:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ac6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d03a      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferHalfCpltCallback(hdma);
 8001acc:	4798      	blx	r3
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	408b      	lsls	r3, r1
 8001ad4:	421a      	tst	r2, r3
 8001ad6:	d019      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x7a>
 8001ad8:	f015 0f02 	tst.w	r5, #2
 8001adc:	d016      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	f013 0f20 	tst.w	r3, #32
 8001ae4:	d106      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x62>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	f023 030a 	bic.w	r3, r3, #10
 8001aec:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001af4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001af6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001af8:	2302      	movs	r3, #2
 8001afa:	408b      	lsls	r3, r1
 8001afc:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001afe:	2300      	movs	r3, #0
 8001b00:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001b04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b06:	b1e3      	cbz	r3, 8001b42 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferCpltCallback(hdma);
 8001b08:	4798      	blx	r3
 8001b0a:	bd38      	pop	{r3, r4, r5, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	fa03 f101 	lsl.w	r1, r3, r1
 8001b12:	420a      	tst	r2, r1
 8001b14:	d015      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xb0>
 8001b16:	f015 0f08 	tst.w	r5, #8
 8001b1a:	d012      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xb0>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	f023 030e 	bic.w	r3, r3, #14
 8001b22:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b24:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001b26:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001b28:	2301      	movs	r3, #1
 8001b2a:	fa03 f202 	lsl.w	r2, r3, r2
 8001b2e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b30:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001b32:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001b36:	2300      	movs	r3, #0
 8001b38:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001b3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001b3e:	b103      	cbz	r3, 8001b42 <HAL_DMA_IRQHandler+0xb0>
    	hdma->XferErrorCallback(hdma);
 8001b40:	4798      	blx	r3
 8001b42:	bd38      	pop	{r3, r4, r5, pc}

08001b44 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b44:	2200      	movs	r2, #0
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <FLASH_Program_HalfWord+0x14>)
 8001b48:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <FLASH_Program_HalfWord+0x18>)
 8001b4c:	6913      	ldr	r3, [r2, #16]
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001b54:	8001      	strh	r1, [r0, #0]
 8001b56:	4770      	bx	lr
 8001b58:	200002f8 	.word	0x200002f8
 8001b5c:	40022000 	.word	0x40022000

08001b60 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <FLASH_SetErrorCode+0x38>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f013 0f10 	tst.w	r3, #16
 8001b68:	d014      	beq.n	8001b94 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <FLASH_SetErrorCode+0x3c>)
 8001b6c:	69d3      	ldr	r3, [r2, #28]
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001b74:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <FLASH_SetErrorCode+0x38>)
 8001b78:	68d2      	ldr	r2, [r2, #12]
 8001b7a:	f012 0f04 	tst.w	r2, #4
 8001b7e:	d006      	beq.n	8001b8e <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b80:	4906      	ldr	r1, [pc, #24]	; (8001b9c <FLASH_SetErrorCode+0x3c>)
 8001b82:	69ca      	ldr	r2, [r1, #28]
 8001b84:	f042 0201 	orr.w	r2, r2, #1
 8001b88:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b8e:	4a02      	ldr	r2, [pc, #8]	; (8001b98 <FLASH_SetErrorCode+0x38>)
 8001b90:	60d3      	str	r3, [r2, #12]
 8001b92:	4770      	bx	lr
  uint32_t flags = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e7ee      	b.n	8001b76 <FLASH_SetErrorCode+0x16>
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	200002f8 	.word	0x200002f8

08001ba0 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_FLASH_Unlock+0x20>)
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ba8:	d007      	beq.n	8001bba <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_FLASH_Unlock+0x20>)
 8001bac:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <HAL_FLASH_Unlock+0x24>)
 8001bae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bb0:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001bb4:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	4770      	bx	lr
    return HAL_ERROR;
 8001bba:	2001      	movs	r0, #1
}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	45670123 	.word	0x45670123

08001bc8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001bc8:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_FLASH_Lock+0x10>)
 8001bca:	6913      	ldr	r3, [r2, #16]
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	6113      	str	r3, [r2, #16]
}
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000

08001bdc <FLASH_WaitForLastOperation>:
{
 8001bdc:	b538      	push	{r3, r4, r5, lr}
 8001bde:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff f9b2 	bl	8000f48 <HAL_GetTick>
 8001be4:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <FLASH_WaitForLastOperation+0x60>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f013 0f01 	tst.w	r3, #1
 8001bee:	d00a      	beq.n	8001c06 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001bf0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001bf4:	d0f7      	beq.n	8001be6 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001bf6:	b1e4      	cbz	r4, 8001c32 <FLASH_WaitForLastOperation+0x56>
 8001bf8:	f7ff f9a6 	bl	8000f48 <HAL_GetTick>
 8001bfc:	1b40      	subs	r0, r0, r5
 8001bfe:	4284      	cmp	r4, r0
 8001c00:	d2f1      	bcs.n	8001be6 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001c02:	2003      	movs	r0, #3
 8001c04:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <FLASH_WaitForLastOperation+0x60>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f013 0f20 	tst.w	r3, #32
 8001c0e:	d002      	beq.n	8001c16 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c10:	2220      	movs	r2, #32
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <FLASH_WaitForLastOperation+0x60>)
 8001c14:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <FLASH_WaitForLastOperation+0x60>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f013 0f10 	tst.w	r3, #16
 8001c1e:	d104      	bne.n	8001c2a <FLASH_WaitForLastOperation+0x4e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <FLASH_WaitForLastOperation+0x60>)
 8001c22:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c24:	f013 0f04 	tst.w	r3, #4
 8001c28:	d005      	beq.n	8001c36 <FLASH_WaitForLastOperation+0x5a>
    FLASH_SetErrorCode();
 8001c2a:	f7ff ff99 	bl	8001b60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
 8001c30:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
 8001c34:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
}
 8001c38:	bd38      	pop	{r3, r4, r5, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_FLASH_Program>:
{
 8001c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001c44:	4c23      	ldr	r4, [pc, #140]	; (8001cd4 <HAL_FLASH_Program+0x94>)
 8001c46:	7e24      	ldrb	r4, [r4, #24]
 8001c48:	2c01      	cmp	r4, #1
 8001c4a:	d103      	bne.n	8001c54 <HAL_FLASH_Program+0x14>
 8001c4c:	2302      	movs	r3, #2
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c54:	461e      	mov	r6, r3
 8001c56:	4690      	mov	r8, r2
 8001c58:	460f      	mov	r7, r1
 8001c5a:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_FLASH_Program+0x94>)
 8001c60:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c66:	f7ff ffb9 	bl	8001bdc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	bb70      	cbnz	r0, 8001ccc <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c6e:	2c01      	cmp	r4, #1
 8001c70:	d029      	beq.n	8001cc6 <HAL_FLASH_Program+0x86>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c72:	2c02      	cmp	r4, #2
 8001c74:	d024      	beq.n	8001cc0 <HAL_FLASH_Program+0x80>
      nbiterations = 4U;
 8001c76:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001c7a:	2400      	movs	r4, #0
 8001c7c:	454c      	cmp	r4, r9
 8001c7e:	d225      	bcs.n	8001ccc <HAL_FLASH_Program+0x8c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001c80:	0121      	lsls	r1, r4, #4
 8001c82:	f1c1 0220 	rsb	r2, r1, #32
 8001c86:	f1a1 0320 	sub.w	r3, r1, #32
 8001c8a:	fa28 f101 	lsr.w	r1, r8, r1
 8001c8e:	fa06 f202 	lsl.w	r2, r6, r2
 8001c92:	4311      	orrs	r1, r2
 8001c94:	fa26 f303 	lsr.w	r3, r6, r3
 8001c98:	4319      	orrs	r1, r3
 8001c9a:	b289      	uxth	r1, r1
 8001c9c:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8001ca0:	f7ff ff50 	bl	8001b44 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ca4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ca8:	f7ff ff98 	bl	8001bdc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_FLASH_Program+0x98>)
 8001cae:	691d      	ldr	r5, [r3, #16]
 8001cb0:	f025 0501 	bic.w	r5, r5, #1
 8001cb4:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b940      	cbnz	r0, 8001ccc <HAL_FLASH_Program+0x8c>
    for (index = 0U; index < nbiterations; index++)
 8001cba:	3401      	adds	r4, #1
 8001cbc:	b2e4      	uxtb	r4, r4
 8001cbe:	e7dd      	b.n	8001c7c <HAL_FLASH_Program+0x3c>
      nbiterations = 2U;
 8001cc0:	f04f 0902 	mov.w	r9, #2
 8001cc4:	e7d9      	b.n	8001c7a <HAL_FLASH_Program+0x3a>
      nbiterations = 1U;
 8001cc6:	f04f 0901 	mov.w	r9, #1
 8001cca:	e7d6      	b.n	8001c7a <HAL_FLASH_Program+0x3a>
  __HAL_UNLOCK(&pFlash);
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4a01      	ldr	r2, [pc, #4]	; (8001cd4 <HAL_FLASH_Program+0x94>)
 8001cd0:	7611      	strb	r1, [r2, #24]
  return status;
 8001cd2:	e7bc      	b.n	8001c4e <HAL_FLASH_Program+0xe>
 8001cd4:	200002f8 	.word	0x200002f8
 8001cd8:	40022000 	.word	0x40022000

08001cdc <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <FLASH_MassErase+0x1c>)
 8001ce0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <FLASH_MassErase+0x20>)
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	f042 0204 	orr.w	r2, r2, #4
 8001cea:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200002f8 	.word	0x200002f8
 8001cfc:	40022000 	.word	0x40022000

08001d00 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d00:	2200      	movs	r2, #0
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <FLASH_PageErase+0x1c>)
 8001d04:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <FLASH_PageErase+0x20>)
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	f042 0202 	orr.w	r2, r2, #2
 8001d0e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001d10:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	4770      	bx	lr
 8001d1c:	200002f8 	.word	0x200002f8
 8001d20:	40022000 	.word	0x40022000

08001d24 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_FLASHEx_Erase+0x9c>)
 8001d26:	7e1b      	ldrb	r3, [r3, #24]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d045      	beq.n	8001db8 <HAL_FLASHEx_Erase+0x94>
{
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	460e      	mov	r6, r1
 8001d30:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8001d32:	2201      	movs	r2, #1
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_FLASHEx_Erase+0x9c>)
 8001d36:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d38:	6803      	ldr	r3, [r0, #0]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d020      	beq.n	8001d80 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d42:	f7ff ff4b 	bl	8001bdc <FLASH_WaitForLastOperation>
 8001d46:	bb88      	cbnz	r0, 8001dac <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001d4e:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d50:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001d52:	68aa      	ldr	r2, [r5, #8]
 8001d54:	686b      	ldr	r3, [r5, #4]
 8001d56:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8001d5a:	429c      	cmp	r4, r3
 8001d5c:	d227      	bcs.n	8001dae <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7ff ffce 	bl	8001d00 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d68:	f7ff ff38 	bl	8001bdc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001d6c:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <HAL_FLASHEx_Erase+0xa0>)
 8001d6e:	6913      	ldr	r3, [r2, #16]
 8001d70:	f023 0302 	bic.w	r3, r3, #2
 8001d74:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001d76:	4601      	mov	r1, r0
 8001d78:	b9b0      	cbnz	r0, 8001da8 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8001d7a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8001d7e:	e7e8      	b.n	8001d52 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff ff2a 	bl	8001bdc <FLASH_WaitForLastOperation>
 8001d88:	b108      	cbz	r0, 8001d8e <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	e00f      	b.n	8001dae <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8001d8e:	f7ff ffa5 	bl	8001cdc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d96:	f7ff ff21 	bl	8001bdc <FLASH_WaitForLastOperation>
 8001d9a:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001d9c:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <HAL_FLASHEx_Erase+0xa0>)
 8001d9e:	6913      	ldr	r3, [r2, #16]
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	6113      	str	r3, [r2, #16]
 8001da6:	e002      	b.n	8001dae <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8001da8:	6034      	str	r4, [r6, #0]
            break;
 8001daa:	e000      	b.n	8001dae <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dac:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8001dae:	2200      	movs	r2, #0
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_FLASHEx_Erase+0x9c>)
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	4608      	mov	r0, r1
 8001db6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001db8:	2102      	movs	r1, #2
}
 8001dba:	4608      	mov	r0, r1
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200002f8 	.word	0x200002f8
 8001dc4:	40022000 	.word	0x40022000

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dca:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001dcc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001dce:	e088      	b.n	8001ee2 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dd0:	08de      	lsrs	r6, r3, #3
 8001dd2:	3608      	adds	r6, #8
 8001dd4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd8:	f003 0e07 	and.w	lr, r3, #7
 8001ddc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001de0:	270f      	movs	r7, #15
 8001de2:	fa07 f70e 	lsl.w	r7, r7, lr
 8001de6:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dea:	690f      	ldr	r7, [r1, #16]
 8001dec:	fa07 f70e 	lsl.w	r7, r7, lr
 8001df0:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001df2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8001df6:	e083      	b.n	8001f00 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dfa:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfc:	68cf      	ldr	r7, [r1, #12]
 8001dfe:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e02:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001e04:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e06:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e08:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e0c:	684e      	ldr	r6, [r1, #4]
 8001e0e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001e12:	409e      	lsls	r6, r3
 8001e14:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001e16:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e18:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1a:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	688d      	ldr	r5, [r1, #8]
 8001e1e:	fa05 f50e 	lsl.w	r5, r5, lr
 8001e22:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001e24:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e26:	684c      	ldr	r4, [r1, #4]
 8001e28:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001e2c:	d058      	beq.n	8001ee0 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	4c47      	ldr	r4, [pc, #284]	; (8001f4c <HAL_GPIO_Init+0x184>)
 8001e30:	69a5      	ldr	r5, [r4, #24]
 8001e32:	f045 0501 	orr.w	r5, r5, #1
 8001e36:	61a5      	str	r5, [r4, #24]
 8001e38:	69a4      	ldr	r4, [r4, #24]
 8001e3a:	f004 0401 	and.w	r4, r4, #1
 8001e3e:	9401      	str	r4, [sp, #4]
 8001e40:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e42:	089d      	lsrs	r5, r3, #2
 8001e44:	1cae      	adds	r6, r5, #2
 8001e46:	4c42      	ldr	r4, [pc, #264]	; (8001f50 <HAL_GPIO_Init+0x188>)
 8001e48:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001e4c:	f003 0603 	and.w	r6, r3, #3
 8001e50:	00b6      	lsls	r6, r6, #2
 8001e52:	270f      	movs	r7, #15
 8001e54:	40b7      	lsls	r7, r6
 8001e56:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e5a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001e5e:	d06c      	beq.n	8001f3a <HAL_GPIO_Init+0x172>
 8001e60:	4f3c      	ldr	r7, [pc, #240]	; (8001f54 <HAL_GPIO_Init+0x18c>)
 8001e62:	42b8      	cmp	r0, r7
 8001e64:	d06b      	beq.n	8001f3e <HAL_GPIO_Init+0x176>
 8001e66:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001e6a:	42b8      	cmp	r0, r7
 8001e6c:	d069      	beq.n	8001f42 <HAL_GPIO_Init+0x17a>
 8001e6e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001e72:	42b8      	cmp	r0, r7
 8001e74:	d05f      	beq.n	8001f36 <HAL_GPIO_Init+0x16e>
 8001e76:	2705      	movs	r7, #5
 8001e78:	fa07 f606 	lsl.w	r6, r7, r6
 8001e7c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e7e:	3502      	adds	r5, #2
 8001e80:	4e33      	ldr	r6, [pc, #204]	; (8001f50 <HAL_GPIO_Init+0x188>)
 8001e82:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e86:	4c34      	ldr	r4, [pc, #208]	; (8001f58 <HAL_GPIO_Init+0x190>)
 8001e88:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	43d4      	mvns	r4, r2
 8001e8c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e90:	684f      	ldr	r7, [r1, #4]
 8001e92:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001e96:	d001      	beq.n	8001e9c <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001e98:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001e9c:	4d2e      	ldr	r5, [pc, #184]	; (8001f58 <HAL_GPIO_Init+0x190>)
 8001e9e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001ea0:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea6:	684f      	ldr	r7, [r1, #4]
 8001ea8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001eac:	d001      	beq.n	8001eb2 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001eae:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001eb2:	4d29      	ldr	r5, [pc, #164]	; (8001f58 <HAL_GPIO_Init+0x190>)
 8001eb4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebc:	684f      	ldr	r7, [r1, #4]
 8001ebe:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001ec2:	d001      	beq.n	8001ec8 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8001ec4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001ec8:	4d23      	ldr	r5, [pc, #140]	; (8001f58 <HAL_GPIO_Init+0x190>)
 8001eca:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001ecc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed0:	684e      	ldr	r6, [r1, #4]
 8001ed2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001ed6:	d001      	beq.n	8001edc <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8001ed8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001edc:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_GPIO_Init+0x190>)
 8001ede:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001ee0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ee2:	680a      	ldr	r2, [r1, #0]
 8001ee4:	fa32 f403 	lsrs.w	r4, r2, r3
 8001ee8:	d02d      	beq.n	8001f46 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001eea:	2501      	movs	r5, #1
 8001eec:	409d      	lsls	r5, r3
    if(iocurrent)
 8001eee:	402a      	ands	r2, r5
 8001ef0:	d0f6      	beq.n	8001ee0 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef2:	684c      	ldr	r4, [r1, #4]
 8001ef4:	2c02      	cmp	r4, #2
 8001ef6:	f43f af6b 	beq.w	8001dd0 <HAL_GPIO_Init+0x8>
 8001efa:	2c12      	cmp	r4, #18
 8001efc:	f43f af68 	beq.w	8001dd0 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001f00:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f02:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f06:	2403      	movs	r4, #3
 8001f08:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f0c:	43e4      	mvns	r4, r4
 8001f0e:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f10:	684f      	ldr	r7, [r1, #4]
 8001f12:	f007 0703 	and.w	r7, r7, #3
 8001f16:	fa07 f70e 	lsl.w	r7, r7, lr
 8001f1a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001f1c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1e:	684e      	ldr	r6, [r1, #4]
 8001f20:	1e77      	subs	r7, r6, #1
 8001f22:	2f01      	cmp	r7, #1
 8001f24:	f67f af68 	bls.w	8001df8 <HAL_GPIO_Init+0x30>
 8001f28:	2e11      	cmp	r6, #17
 8001f2a:	f43f af65 	beq.w	8001df8 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2e:	2e12      	cmp	r6, #18
 8001f30:	f47f af72 	bne.w	8001e18 <HAL_GPIO_Init+0x50>
 8001f34:	e760      	b.n	8001df8 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f36:	2703      	movs	r7, #3
 8001f38:	e79e      	b.n	8001e78 <HAL_GPIO_Init+0xb0>
 8001f3a:	2700      	movs	r7, #0
 8001f3c:	e79c      	b.n	8001e78 <HAL_GPIO_Init+0xb0>
 8001f3e:	2701      	movs	r7, #1
 8001f40:	e79a      	b.n	8001e78 <HAL_GPIO_Init+0xb0>
 8001f42:	2702      	movs	r7, #2
 8001f44:	e798      	b.n	8001e78 <HAL_GPIO_Init+0xb0>
  }
}
 8001f46:	b003      	add	sp, #12
 8001f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000
 8001f54:	48000400 	.word	0x48000400
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	b90a      	cbnz	r2, 8001f62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5e:	6281      	str	r1, [r0, #40]	; 0x28
 8001f60:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f62:	6181      	str	r1, [r0, #24]
 8001f64:	4770      	bx	lr

08001f66 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f66:	4770      	bx	lr

08001f68 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001f68:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	4203      	tst	r3, r0
 8001f70:	d100      	bne.n	8001f74 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001f72:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001f76:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f78:	f7ff fff5 	bl	8001f66 <HAL_GPIO_EXTI_Callback>
}
 8001f7c:	e7f9      	b.n	8001f72 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001f7e:	bf00      	nop
 8001f80:	40010400 	.word	0x40010400

08001f84 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d059      	beq.n	800203c <HAL_I2C_Init+0xb8>
{
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d043      	beq.n	800201c <HAL_I2C_Init+0x98>

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f94:	2324      	movs	r3, #36	; 0x24
 8001f96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f9a:	6822      	ldr	r2, [r4, #0]
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fa4:	6822      	ldr	r2, [r4, #0]
 8001fa6:	6863      	ldr	r3, [r4, #4]
 8001fa8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001fac:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	6893      	ldr	r3, [r2, #8]
 8001fb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fb6:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb8:	68e3      	ldr	r3, [r4, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d033      	beq.n	8002026 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	68a3      	ldr	r3, [r4, #8]
 8001fc2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001fc6:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fc8:	68e3      	ldr	r3, [r4, #12]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d031      	beq.n	8002032 <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	6853      	ldr	r3, [r2, #4]
 8001fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fdc:	6822      	ldr	r2, [r4, #0]
 8001fde:	68d3      	ldr	r3, [r2, #12]
 8001fe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fe4:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	6923      	ldr	r3, [r4, #16]
 8001fea:	6961      	ldr	r1, [r4, #20]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	69a1      	ldr	r1, [r4, #24]
 8001ff0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ff4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ff6:	6822      	ldr	r2, [r4, #0]
 8001ff8:	69e3      	ldr	r3, [r4, #28]
 8001ffa:	6a21      	ldr	r1, [r4, #32]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002000:	6822      	ldr	r2, [r4, #0]
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200a:	2000      	movs	r0, #0
 800200c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800200e:	2320      	movs	r3, #32
 8002010:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002014:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 800201a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800201c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002020:	f003 fa20 	bl	8005464 <HAL_I2C_MspInit>
 8002024:	e7b6      	b.n	8001f94 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002026:	6822      	ldr	r2, [r4, #0]
 8002028:	68a3      	ldr	r3, [r4, #8]
 800202a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202e:	6093      	str	r3, [r2, #8]
 8002030:	e7ca      	b.n	8001fc8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	e7c8      	b.n	8001fce <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800203c:	2001      	movs	r0, #1
 800203e:	4770      	bx	lr

08002040 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002040:	b508      	push	{r3, lr}
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002042:	6803      	ldr	r3, [r0, #0]
 8002044:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002046:	681a      	ldr	r2, [r3, #0]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002048:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800204a:	b103      	cbz	r3, 800204e <HAL_I2C_EV_IRQHandler+0xe>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800204c:	4798      	blx	r3
 800204e:	bd08      	pop	{r3, pc}

08002050 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002050:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b20      	cmp	r3, #32
 8002058:	d001      	beq.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800205a:	2002      	movs	r0, #2
 800205c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800205e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002062:	2b01      	cmp	r3, #1
 8002064:	d020      	beq.n	80020a8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002066:	2301      	movs	r3, #1
 8002068:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800206c:	2324      	movs	r3, #36	; 0x24
 800206e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002072:	6802      	ldr	r2, [r0, #0]
 8002074:	6813      	ldr	r3, [r2, #0]
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800207c:	6802      	ldr	r2, [r0, #0]
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002084:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002086:	6802      	ldr	r2, [r0, #0]
 8002088:	6813      	ldr	r3, [r2, #0]
 800208a:	4319      	orrs	r1, r3
 800208c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800208e:	6802      	ldr	r2, [r0, #0]
 8002090:	6813      	ldr	r3, [r2, #0]
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002098:	2320      	movs	r3, #32
 800209a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80020a4:	4618      	mov	r0, r3
 80020a6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80020a8:	2002      	movs	r0, #2
  }
}
 80020aa:	4770      	bx	lr

080020ac <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d001      	beq.n	80020ba <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020b6:	2002      	movs	r0, #2
 80020b8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80020ba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d01e      	beq.n	8002100 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80020c2:	2301      	movs	r3, #1
 80020c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c8:	2324      	movs	r3, #36	; 0x24
 80020ca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80020ce:	6802      	ldr	r2, [r0, #0]
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80020d8:	6802      	ldr	r2, [r0, #0]
 80020da:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80020dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80020e0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80020e4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80020e6:	6802      	ldr	r2, [r0, #0]
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	2320      	movs	r3, #32
 80020f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020f6:	2300      	movs	r3, #0
 80020f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80020fc:	4618      	mov	r0, r3
 80020fe:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002100:	2002      	movs	r0, #2
  }
}
 8002102:	4770      	bx	lr

08002104 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002104:	4a02      	ldr	r2, [pc, #8]	; (8002110 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4770      	bx	lr
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b570      	push	{r4, r5, r6, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	6803      	ldr	r3, [r0, #0]
 800211c:	f013 0f01 	tst.w	r3, #1
 8002120:	d063      	beq.n	80021ea <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002122:	4bb5      	ldr	r3, [pc, #724]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d046      	beq.n	80021bc <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800212e:	4bb2      	ldr	r3, [pc, #712]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d03b      	beq.n	80021b2 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213a:	6863      	ldr	r3, [r4, #4]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	f000 808e 	beq.w	8002260 <HAL_RCC_OscConfig+0x14c>
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 8091 	bne.w	800226c <HAL_RCC_OscConfig+0x158>
 800214a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800214e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002160:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002162:	4aa5      	ldr	r2, [pc, #660]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002164:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002166:	f023 030f 	bic.w	r3, r3, #15
 800216a:	68a1      	ldr	r1, [r4, #8]
 800216c:	430b      	orrs	r3, r1
 800216e:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002170:	6863      	ldr	r3, [r4, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8094 	beq.w	80022a0 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7fe fee6 	bl	8000f48 <HAL_GetTick>
 800217c:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002182:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b9c      	ldr	r3, [pc, #624]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2201      	movs	r2, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	4219      	tst	r1, r3
 80021a2:	d122      	bne.n	80021ea <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe fed0 	bl	8000f48 <HAL_GetTick>
 80021a8:	1b40      	subs	r0, r0, r5
 80021aa:	2864      	cmp	r0, #100	; 0x64
 80021ac:	d9e7      	bls.n	800217e <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 80021ae:	2003      	movs	r0, #3
 80021b0:	e2ab      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b2:	4b91      	ldr	r3, [pc, #580]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80021ba:	d0be      	beq.n	800213a <HAL_RCC_OscConfig+0x26>
 80021bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c0:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2201      	movs	r2, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	4219      	tst	r1, r3
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_OscConfig+0xd6>
 80021e2:	6863      	ldr	r3, [r4, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8289 	beq.w	80026fc <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	f013 0f02 	tst.w	r3, #2
 80021f0:	f000 809c 	beq.w	800232c <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021f4:	4b80      	ldr	r3, [pc, #512]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f013 0f0c 	tst.w	r3, #12
 80021fc:	d072      	beq.n	80022e4 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021fe:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d067      	beq.n	80022da <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220a:	6923      	ldr	r3, [r4, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80cb 	beq.w	80023a8 <HAL_RCC_OscConfig+0x294>
 8002212:	2201      	movs	r2, #1
 8002214:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fe8e 	bl	8000f48 <HAL_GetTick>
 800222c:	4605      	mov	r5, r0
 800222e:	2302      	movs	r3, #2
 8002230:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	2302      	movs	r3, #2
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2201      	movs	r2, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	4219      	tst	r1, r3
 800224e:	f040 809c 	bne.w	800238a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe fe79 	bl	8000f48 <HAL_GetTick>
 8002256:	1b40      	subs	r0, r0, r5
 8002258:	2802      	cmp	r0, #2
 800225a:	d9e8      	bls.n	800222e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800225c:	2003      	movs	r0, #3
 800225e:	e254      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002260:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e77a      	b.n	8002162 <HAL_RCC_OscConfig+0x4e>
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002270:	d009      	beq.n	8002286 <HAL_RCC_OscConfig+0x172>
 8002272:	4b61      	ldr	r3, [pc, #388]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e76d      	b.n	8002162 <HAL_RCC_OscConfig+0x4e>
 8002286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800228a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e760      	b.n	8002162 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80022a0:	f7fe fe52 	bl	8000f48 <HAL_GetTick>
 80022a4:	4605      	mov	r5, r0
 80022a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022aa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	4b52      	ldr	r3, [pc, #328]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2201      	movs	r2, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	4219      	tst	r1, r3
 80022ca:	d08e      	beq.n	80021ea <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fe3c 	bl	8000f48 <HAL_GetTick>
 80022d0:	1b40      	subs	r0, r0, r5
 80022d2:	2864      	cmp	r0, #100	; 0x64
 80022d4:	d9e7      	bls.n	80022a6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80022d6:	2003      	movs	r0, #3
 80022d8:	e217      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80022e2:	d192      	bne.n	800220a <HAL_RCC_OscConfig+0xf6>
 80022e4:	2302      	movs	r3, #2
 80022e6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	2302      	movs	r3, #2
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2201      	movs	r2, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	4219      	tst	r1, r3
 8002304:	d004      	beq.n	8002310 <HAL_RCC_OscConfig+0x1fc>
 8002306:	6923      	ldr	r3, [r4, #16]
 8002308:	4293      	cmp	r3, r2
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 800230c:	2001      	movs	r0, #1
 800230e:	e1fc      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4839      	ldr	r0, [pc, #228]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002312:	6803      	ldr	r3, [r0, #0]
 8002314:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002318:	6961      	ldr	r1, [r4, #20]
 800231a:	22f8      	movs	r2, #248	; 0xf8
 800231c:	fa92 f2a2 	rbit	r2, r2
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	4313      	orrs	r3, r2
 800232a:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	f013 0f08 	tst.w	r3, #8
 8002332:	f000 808d 	beq.w	8002450 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002336:	69a3      	ldr	r3, [r4, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d061      	beq.n	8002400 <HAL_RCC_OscConfig+0x2ec>
 800233c:	2101      	movs	r1, #1
 800233e:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	fab2 f282 	clz	r2, r2
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_RCC_OscConfig+0x2e8>)
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fdfb 	bl	8000f48 <HAL_GetTick>
 8002352:	4605      	mov	r5, r0
 8002354:	2302      	movs	r3, #2
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 8002364:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2201      	movs	r2, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	4219      	tst	r1, r3
 800237a:	d169      	bne.n	8002450 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe fde4 	bl	8000f48 <HAL_GetTick>
 8002380:	1b40      	subs	r0, r0, r5
 8002382:	2802      	cmp	r0, #2
 8002384:	d9e6      	bls.n	8002354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
 8002388:	e1bf      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	481b      	ldr	r0, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 800238c:	6803      	ldr	r3, [r0, #0]
 800238e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002392:	6961      	ldr	r1, [r4, #20]
 8002394:	22f8      	movs	r2, #248	; 0xf8
 8002396:	fa92 f2a2 	rbit	r2, r2
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	4313      	orrs	r3, r2
 80023a4:	6003      	str	r3, [r0, #0]
 80023a6:	e7c1      	b.n	800232c <HAL_RCC_OscConfig+0x218>
 80023a8:	2301      	movs	r3, #1
 80023aa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023c0:	f7fe fdc2 	bl	8000f48 <HAL_GetTick>
 80023c4:	4605      	mov	r5, r0
 80023c6:	2302      	movs	r3, #2
 80023c8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_OscConfig+0x2e4>)
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	2302      	movs	r3, #2
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2201      	movs	r2, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	4219      	tst	r1, r3
 80023e6:	d0a1      	beq.n	800232c <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe fdae 	bl	8000f48 <HAL_GetTick>
 80023ec:	1b40      	subs	r0, r0, r5
 80023ee:	2802      	cmp	r0, #2
 80023f0:	d9e9      	bls.n	80023c6 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 80023f2:	2003      	movs	r0, #3
 80023f4:	e189      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	10908120 	.word	0x10908120
 8002400:	2201      	movs	r2, #1
 8002402:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	fab2 f282 	clz	r2, r2
 800240a:	4bc1      	ldr	r3, [pc, #772]	; (8002710 <HAL_RCC_OscConfig+0x5fc>)
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7fe fd98 	bl	8000f48 <HAL_GetTick>
 8002418:	4605      	mov	r5, r0
 800241a:	2302      	movs	r3, #2
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	4aba      	ldr	r2, [pc, #744]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 800242a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2201      	movs	r2, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	4219      	tst	r1, r3
 8002440:	d006      	beq.n	8002450 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002442:	f7fe fd81 	bl	8000f48 <HAL_GetTick>
 8002446:	1b40      	subs	r0, r0, r5
 8002448:	2802      	cmp	r0, #2
 800244a:	d9e6      	bls.n	800241a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800244c:	2003      	movs	r0, #3
 800244e:	e15c      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	f013 0f04 	tst.w	r3, #4
 8002456:	f000 80b3 	beq.w	80025c0 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4bae      	ldr	r3, [pc, #696]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002462:	d126      	bne.n	80024b2 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	4bab      	ldr	r3, [pc, #684]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800246c:	61da      	str	r2, [r3, #28]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002478:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4ba7      	ldr	r3, [pc, #668]	; (8002718 <HAL_RCC_OscConfig+0x604>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002482:	d018      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002484:	68e3      	ldr	r3, [r4, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d029      	beq.n	80024de <HAL_RCC_OscConfig+0x3ca>
 800248a:	bb73      	cbnz	r3, 80024ea <HAL_RCC_OscConfig+0x3d6>
 800248c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002490:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	621a      	str	r2, [r3, #32]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	f022 0204 	bic.w	r2, r2, #4
 80024a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a4:	68e3      	ldr	r3, [r4, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d05d      	beq.n	8002566 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fd4d 	bl	8000f48 <HAL_GetTick>
 80024ae:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	e047      	b.n	8002542 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 80024b2:	2500      	movs	r5, #0
 80024b4:	e7e1      	b.n	800247a <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b6:	4a98      	ldr	r2, [pc, #608]	; (8002718 <HAL_RCC_OscConfig+0x604>)
 80024b8:	6813      	ldr	r3, [r2, #0]
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024c0:	f7fe fd42 	bl	8000f48 <HAL_GetTick>
 80024c4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b94      	ldr	r3, [pc, #592]	; (8002718 <HAL_RCC_OscConfig+0x604>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024ce:	d1d9      	bne.n	8002484 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d0:	f7fe fd3a 	bl	8000f48 <HAL_GetTick>
 80024d4:	1b80      	subs	r0, r0, r6
 80024d6:	2864      	cmp	r0, #100	; 0x64
 80024d8:	d9f5      	bls.n	80024c6 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80024da:	2003      	movs	r0, #3
 80024dc:	e115      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024de:	4a8d      	ldr	r2, [pc, #564]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 80024e0:	6a13      	ldr	r3, [r2, #32]
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	e7dc      	b.n	80024a4 <HAL_RCC_OscConfig+0x390>
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_OscConfig+0x3ee>
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	621a      	str	r2, [r3, #32]
 80024f8:	6a1a      	ldr	r2, [r3, #32]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	621a      	str	r2, [r3, #32]
 8002500:	e7d0      	b.n	80024a4 <HAL_RCC_OscConfig+0x390>
 8002502:	4b84      	ldr	r3, [pc, #528]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002504:	6a1a      	ldr	r2, [r3, #32]
 8002506:	f042 0204 	orr.w	r2, r2, #4
 800250a:	621a      	str	r2, [r3, #32]
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	621a      	str	r2, [r3, #32]
 8002514:	e7c6      	b.n	80024a4 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	4b7f      	ldr	r3, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002518:	6a19      	ldr	r1, [r3, #32]
 800251a:	2302      	movs	r3, #2
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2201      	movs	r2, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	4219      	tst	r1, r3
 8002530:	d145      	bne.n	80025be <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fd09 	bl	8000f48 <HAL_GetTick>
 8002536:	1b80      	subs	r0, r0, r6
 8002538:	f241 3388 	movw	r3, #5000	; 0x1388
 800253c:	4298      	cmp	r0, r3
 800253e:	f200 80df 	bhi.w	8002700 <HAL_RCC_OscConfig+0x5ec>
 8002542:	2302      	movs	r3, #2
 8002544:	fa93 f2a3 	rbit	r2, r3
 8002548:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d0dd      	beq.n	8002516 <HAL_RCC_OscConfig+0x402>
 800255a:	2302      	movs	r3, #2
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	4b6c      	ldr	r3, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002562:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002564:	e7d9      	b.n	800251a <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002566:	f7fe fcef 	bl	8000f48 <HAL_GetTick>
 800256a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x486>
 800256e:	4b69      	ldr	r3, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002570:	6a19      	ldr	r1, [r3, #32]
 8002572:	2302      	movs	r3, #2
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2201      	movs	r2, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	4219      	tst	r1, r3
 8002588:	d019      	beq.n	80025be <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fcdd 	bl	8000f48 <HAL_GetTick>
 800258e:	1b80      	subs	r0, r0, r6
 8002590:	f241 3388 	movw	r3, #5000	; 0x1388
 8002594:	4298      	cmp	r0, r3
 8002596:	f200 80b5 	bhi.w	8002704 <HAL_RCC_OscConfig+0x5f0>
 800259a:	2302      	movs	r3, #2
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d0dd      	beq.n	800256e <HAL_RCC_OscConfig+0x45a>
 80025b2:	2302      	movs	r3, #2
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 80025ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025bc:	e7d9      	b.n	8002572 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025be:	bbb5      	cbnz	r5, 800262e <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c0:	69e3      	ldr	r3, [r4, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a0 	beq.w	8002708 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 80025ca:	6852      	ldr	r2, [r2, #4]
 80025cc:	f002 020c 	and.w	r2, r2, #12
 80025d0:	2a08      	cmp	r2, #8
 80025d2:	f000 80a3 	beq.w	800271c <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d02f      	beq.n	800263a <HAL_RCC_OscConfig+0x526>
 80025da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025de:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fca8 	bl	8000f48 <HAL_GetTick>
 80025f8:	4604      	mov	r4, r0
 80025fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fe:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002602:	4b44      	ldr	r3, [pc, #272]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2201      	movs	r2, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	4219      	tst	r1, r3
 800261e:	d06b      	beq.n	80026f8 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe fc92 	bl	8000f48 <HAL_GetTick>
 8002624:	1b00      	subs	r0, r0, r4
 8002626:	2802      	cmp	r0, #2
 8002628:	d9e7      	bls.n	80025fa <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 800262a:	2003      	movs	r0, #3
 800262c:	e06d      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4a39      	ldr	r2, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002630:	69d3      	ldr	r3, [r2, #28]
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002636:	61d3      	str	r3, [r2, #28]
 8002638:	e7c2      	b.n	80025c0 <HAL_RCC_OscConfig+0x4ac>
 800263a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800263e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800264a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002654:	f7fe fc78 	bl	8000f48 <HAL_GetTick>
 8002658:	4605      	mov	r5, r0
 800265a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2201      	movs	r2, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	4219      	tst	r1, r3
 800267e:	d006      	beq.n	800268e <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fc62 	bl	8000f48 <HAL_GetTick>
 8002684:	1b40      	subs	r0, r0, r5
 8002686:	2802      	cmp	r0, #2
 8002688:	d9e7      	bls.n	800265a <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 800268a:	2003      	movs	r0, #3
 800268c:	e03d      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268e:	4921      	ldr	r1, [pc, #132]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 8002690:	684b      	ldr	r3, [r1, #4]
 8002692:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002696:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002698:	6a20      	ldr	r0, [r4, #32]
 800269a:	4302      	orrs	r2, r0
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
 80026a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026ba:	f7fe fc45 	bl	8000f48 <HAL_GetTick>
 80026be:	4604      	mov	r4, r0
 80026c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_OscConfig+0x600>)
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2201      	movs	r2, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	4219      	tst	r1, r3
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fc2f 	bl	8000f48 <HAL_GetTick>
 80026ea:	1b00      	subs	r0, r0, r4
 80026ec:	2802      	cmp	r0, #2
 80026ee:	d9e7      	bls.n	80026c0 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 80026f0:	2003      	movs	r0, #3
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80026f4:	2000      	movs	r0, #0
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
 80026f8:	2000      	movs	r0, #0
 80026fa:	e006      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 80026fc:	2001      	movs	r0, #1
 80026fe:	e004      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002700:	2003      	movs	r0, #3
 8002702:	e002      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002704:	2003      	movs	r0, #3
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8002708:	2000      	movs	r0, #0
}
 800270a:	b002      	add	sp, #8
 800270c:	bd70      	pop	{r4, r5, r6, pc}
 800270e:	bf00      	nop
 8002710:	10908120 	.word	0x10908120
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
      return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
 800271e:	e7f4      	b.n	800270a <HAL_RCC_OscConfig+0x5f6>

08002720 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002722:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002724:	f003 020c 	and.w	r2, r3, #12
 8002728:	2a08      	cmp	r2, #8
 800272a:	d124      	bne.n	8002776 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800272c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002730:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002734:	fa92 f2a2 	rbit	r2, r2
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	fa21 f202 	lsr.w	r2, r1, r2
 8002740:	490f      	ldr	r1, [pc, #60]	; (8002780 <HAL_RCC_GetSysClockFreq+0x60>)
 8002742:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002746:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002748:	f002 020f 	and.w	r2, r2, #15
 800274c:	210f      	movs	r1, #15
 800274e:	fa91 f1a1 	rbit	r1, r1
 8002752:	fab1 f181 	clz	r1, r1
 8002756:	40ca      	lsrs	r2, r1
 8002758:	490a      	ldr	r1, [pc, #40]	; (8002784 <HAL_RCC_GetSysClockFreq+0x64>)
 800275a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800275c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002760:	d103      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_GetSysClockFreq+0x68>)
 8002764:	fb03 f000 	mul.w	r0, r3, r0
 8002768:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_RCC_GetSysClockFreq+0x6c>)
 800276c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002770:	fb03 f000 	mul.w	r0, r3, r0
 8002774:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	08006dfc 	.word	0x08006dfc
 8002784:	08006e0c 	.word	0x08006e0c
 8002788:	003d0900 	.word	0x003d0900
 800278c:	007a1200 	.word	0x007a1200

08002790 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002790:	4b70      	ldr	r3, [pc, #448]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	428b      	cmp	r3, r1
 800279a:	d20c      	bcs.n	80027b6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279c:	4a6d      	ldr	r2, [pc, #436]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	f023 0307 	bic.w	r3, r3, #7
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027a8:	6813      	ldr	r3, [r2, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	4299      	cmp	r1, r3
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80027b2:	2001      	movs	r0, #1
 80027b4:	4770      	bx	lr
{
 80027b6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	6803      	ldr	r3, [r0, #0]
 80027ba:	f013 0f02 	tst.w	r3, #2
 80027be:	d006      	beq.n	80027ce <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	6853      	ldr	r3, [r2, #4]
 80027c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c8:	6884      	ldr	r4, [r0, #8]
 80027ca:	4323      	orrs	r3, r4
 80027cc:	6053      	str	r3, [r2, #4]
 80027ce:	460d      	mov	r5, r1
 80027d0:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	6803      	ldr	r3, [r0, #0]
 80027d4:	f013 0f01 	tst.w	r3, #1
 80027d8:	d07a      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	6843      	ldr	r3, [r0, #4]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d02f      	beq.n	8002840 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d042      	beq.n	800286a <HAL_RCC_ClockConfig+0xda>
 80027e4:	2202      	movs	r2, #2
 80027e6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4a5b      	ldr	r2, [pc, #364]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	6810      	ldr	r0, [r2, #0]
 80027ee:	2202      	movs	r2, #2
 80027f0:	fa92 f2a2 	rbit	r2, r2
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	f002 021f 	and.w	r2, r2, #31
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	4210      	tst	r0, r2
 8002804:	f000 80a4 	beq.w	8002950 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002808:	4953      	ldr	r1, [pc, #332]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	684a      	ldr	r2, [r1, #4]
 800280c:	f022 0203 	bic.w	r2, r2, #3
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002814:	f7fe fb98 	bl	8000f48 <HAL_GetTick>
 8002818:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281a:	6863      	ldr	r3, [r4, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d039      	beq.n	8002894 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002820:	2b02      	cmp	r3, #2
 8002822:	d046      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002824:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f013 0f0c 	tst.w	r3, #12
 800282c:	d050      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282e:	f7fe fb8b 	bl	8000f48 <HAL_GetTick>
 8002832:	1b80      	subs	r0, r0, r6
 8002834:	f241 3388 	movw	r3, #5000	; 0x1388
 8002838:	4298      	cmp	r0, r3
 800283a:	d9f3      	bls.n	8002824 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800283c:	2003      	movs	r0, #3
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002844:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002848:	4a43      	ldr	r2, [pc, #268]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800284a:	6810      	ldr	r0, [r2, #0]
 800284c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002850:	fa92 f2a2 	rbit	r2, r2
 8002854:	fab2 f282 	clz	r2, r2
 8002858:	f002 021f 	and.w	r2, r2, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f202 	lsl.w	r2, r1, r2
 8002862:	4210      	tst	r0, r2
 8002864:	d1d0      	bne.n	8002808 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8002866:	2001      	movs	r0, #1
 8002868:	bd70      	pop	{r4, r5, r6, pc}
 800286a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002872:	4a39      	ldr	r2, [pc, #228]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	6810      	ldr	r0, [r2, #0]
 8002876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287a:	fa92 f2a2 	rbit	r2, r2
 800287e:	fab2 f282 	clz	r2, r2
 8002882:	f002 021f 	and.w	r2, r2, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	4210      	tst	r0, r2
 800288e:	d1bb      	bne.n	8002808 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8002890:	2001      	movs	r0, #1
 8002892:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002894:	4b30      	ldr	r3, [pc, #192]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b04      	cmp	r3, #4
 800289e:	d017      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7fe fb52 	bl	8000f48 <HAL_GetTick>
 80028a4:	1b80      	subs	r0, r0, r6
 80028a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80028aa:	4298      	cmp	r0, r3
 80028ac:	d9f2      	bls.n	8002894 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80028ae:	2003      	movs	r0, #3
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b2:	4b29      	ldr	r3, [pc, #164]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d008      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028be:	f7fe fb43 	bl	8000f48 <HAL_GetTick>
 80028c2:	1b80      	subs	r0, r0, r6
 80028c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80028c8:	4298      	cmp	r0, r3
 80028ca:	d9f2      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 80028cc:	2003      	movs	r0, #3
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80028d0:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	429d      	cmp	r5, r3
 80028da:	d20c      	bcs.n	80028f6 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	f023 0307 	bic.w	r3, r3, #7
 80028e4:	432b      	orrs	r3, r5
 80028e6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	429d      	cmp	r5, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 80028f2:	2001      	movs	r0, #1
}
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	f013 0f04 	tst.w	r3, #4
 80028fc:	d006      	beq.n	800290c <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	6853      	ldr	r3, [r2, #4]
 8002902:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002906:	68e1      	ldr	r1, [r4, #12]
 8002908:	430b      	orrs	r3, r1
 800290a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	f013 0f08 	tst.w	r3, #8
 8002912:	d007      	beq.n	8002924 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002914:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002916:	6853      	ldr	r3, [r2, #4]
 8002918:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800291c:	6921      	ldr	r1, [r4, #16]
 800291e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002922:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002924:	f7ff fefc 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002930:	22f0      	movs	r2, #240	; 0xf0
 8002932:	fa92 f2a2 	rbit	r2, r2
 8002936:	fab2 f282 	clz	r2, r2
 800293a:	40d3      	lsrs	r3, r2
 800293c:	4a07      	ldr	r2, [pc, #28]	; (800295c <HAL_RCC_ClockConfig+0x1cc>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	40d8      	lsrs	r0, r3
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_RCC_ClockConfig+0x1d0>)
 8002944:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe face 	bl	8000ee8 <HAL_InitTick>
  return HAL_OK;
 800294c:	2000      	movs	r0, #0
 800294e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002950:	2001      	movs	r0, #1
 8002952:	bd70      	pop	{r4, r5, r6, pc}
 8002954:	40022000 	.word	0x40022000
 8002958:	40021000 	.word	0x40021000
 800295c:	08006e4c 	.word	0x08006e4c
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002964:	4b01      	ldr	r3, [pc, #4]	; (800296c <HAL_RCC_GetHCLKFreq+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000000 	.word	0x20000000

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002972:	f7ff fff7 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800297e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002982:	fa92 f2a2 	rbit	r2, r2
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	40d3      	lsrs	r3, r2
 800298c:	4a02      	ldr	r2, [pc, #8]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x28>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
}    
 8002990:	40d8      	lsrs	r0, r3
 8002992:	bd08      	pop	{r3, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	08006e5c 	.word	0x08006e5c

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800299e:	f7ff ffe1 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029ae:	fa92 f2a2 	rbit	r2, r2
 80029b2:	fab2 f282 	clz	r2, r2
 80029b6:	40d3      	lsrs	r3, r2
 80029b8:	4a02      	ldr	r2, [pc, #8]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
} 
 80029bc:	40d8      	lsrs	r0, r3
 80029be:	bd08      	pop	{r3, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08006e5c 	.word	0x08006e5c

080029c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ca:	b083      	sub	sp, #12
 80029cc:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ce:	6803      	ldr	r3, [r0, #0]
 80029d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80029d4:	d044      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b64      	ldr	r3, [pc, #400]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80029de:	d179      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029e8:	61da      	str	r2, [r3, #28]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029f4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029fe:	d06b      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a00:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a04:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a08:	d021      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002a0a:	6862      	ldr	r2, [r4, #4]
 8002a0c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d01c      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a14:	4854      	ldr	r0, [pc, #336]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a16:	6a01      	ldr	r1, [r0, #32]
 8002a18:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a20:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	4f51      	ldr	r7, [pc, #324]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a2a:	443a      	add	r2, r7
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	f04f 0e01 	mov.w	lr, #1
 8002a32:	f8c2 e000 	str.w	lr, [r2]
 8002a36:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	443b      	add	r3, r7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a46:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a48:	f011 0f01 	tst.w	r1, #1
 8002a4c:	d158      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a4e:	4a46      	ldr	r2, [pc, #280]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a50:	6a13      	ldr	r3, [r2, #32]
 8002a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a56:	6861      	ldr	r1, [r4, #4]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a5c:	2d00      	cmp	r5, #0
 8002a5e:	d17a      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f013 0f01 	tst.w	r3, #1
 8002a66:	d006      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a68:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a6c:	f023 0303 	bic.w	r3, r3, #3
 8002a70:	68a1      	ldr	r1, [r4, #8]
 8002a72:	430b      	orrs	r3, r1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	f013 0f20 	tst.w	r3, #32
 8002a7c:	d006      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a7e:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a82:	f023 0310 	bic.w	r3, r3, #16
 8002a86:	68e1      	ldr	r1, [r4, #12]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a92:	d006      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a94:	4a34      	ldr	r2, [pc, #208]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002a98:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002a9c:	6921      	ldr	r1, [r4, #16]
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002aa8:	d006      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002aaa:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002aac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab2:	6961      	ldr	r1, [r4, #20]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002abe:	d051      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002ac0:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ac2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac8:	69a1      	ldr	r1, [r4, #24]
 8002aca:	430b      	orrs	r3, r1
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ace:	2000      	movs	r0, #0
}
 8002ad0:	b003      	add	sp, #12
 8002ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002ad4:	2500      	movs	r5, #0
 8002ad6:	e78e      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ada:	6813      	ldr	r3, [r2, #0]
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fa31 	bl	8000f48 <HAL_GetTick>
 8002ae6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002af0:	d186      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fe fa29 	bl	8000f48 <HAL_GetTick>
 8002af6:	1b80      	subs	r0, r0, r6
 8002af8:	2864      	cmp	r0, #100	; 0x64
 8002afa:	d9f5      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002afc:	2003      	movs	r0, #3
 8002afe:	e7e7      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002b00:	f7fe fa22 	bl	8000f48 <HAL_GetTick>
 8002b04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	e014      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002b0a:	6a19      	ldr	r1, [r3, #32]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	4219      	tst	r1, r3
 8002b22:	d194      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe fa10 	bl	8000f48 <HAL_GetTick>
 8002b28:	1b80      	subs	r0, r0, r6
 8002b2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b2e:	4298      	cmp	r0, r3
 8002b30:	d816      	bhi.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b32:	2302      	movs	r3, #2
 8002b34:	fa93 f2a3 	rbit	r2, r3
 8002b38:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d0de      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002b52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b54:	e7da      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	69d3      	ldr	r3, [r2, #28]
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	e77f      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8002b60:	2003      	movs	r0, #3
 8002b62:	e7b5      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8002b64:	2000      	movs	r0, #0
 8002b66:	e7b3      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40007000 	.word	0x40007000
 8002b70:	10908100 	.word	0x10908100

08002b74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b78:	6802      	ldr	r2, [r0, #0]
 8002b7a:	68d3      	ldr	r3, [r2, #12]
 8002b7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b80:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 8002b82:	f7fe f9e1 	bl	8000f48 <HAL_GetTick>
 8002b86:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f013 0f20 	tst.w	r3, #32
 8002b90:	d107      	bne.n	8002ba2 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002b92:	f7fe f9d9 	bl	8000f48 <HAL_GetTick>
 8002b96:	1b40      	subs	r0, r0, r5
 8002b98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b9c:	d9f4      	bls.n	8002b88 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8002b9e:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8002ba0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	bd38      	pop	{r3, r4, r5, pc}

08002ba6 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ba6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002ba8:	6803      	ldr	r3, [r0, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002bb0:	d001      	beq.n	8002bb6 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	bd38      	pop	{r3, r4, r5, pc}
 8002bb6:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002bbe:	f7fe f9c3 	bl	8000f48 <HAL_GetTick>
 8002bc2:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002bcc:	d107      	bne.n	8002bde <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002bce:	f7fe f9bb 	bl	8000f48 <HAL_GetTick>
 8002bd2:	1b40      	subs	r0, r0, r5
 8002bd4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002bd8:	d9f4      	bls.n	8002bc4 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002bda:	2003      	movs	r0, #3
}
 8002bdc:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8002bde:	2000      	movs	r0, #0
 8002be0:	bd38      	pop	{r3, r4, r5, pc}

08002be2 <HAL_RTC_Init>:
{
 8002be2:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d05c      	beq.n	8002ca2 <HAL_RTC_Init+0xc0>
 8002be8:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002bea:	7f43      	ldrb	r3, [r0, #29]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d041      	beq.n	8002c74 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	22ca      	movs	r2, #202	; 0xca
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	2253      	movs	r2, #83	; 0x53
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff ffd0 	bl	8002ba6 <RTC_EnterInitMode>
 8002c06:	4605      	mov	r5, r0
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d137      	bne.n	8002c7c <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	6893      	ldr	r3, [r2, #8]
 8002c10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c18:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c1a:	6821      	ldr	r1, [r4, #0]
 8002c1c:	688a      	ldr	r2, [r1, #8]
 8002c1e:	6863      	ldr	r3, [r4, #4]
 8002c20:	6920      	ldr	r0, [r4, #16]
 8002c22:	4303      	orrs	r3, r0
 8002c24:	6960      	ldr	r0, [r4, #20]
 8002c26:	4303      	orrs	r3, r0
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	68e2      	ldr	r2, [r4, #12]
 8002c30:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	6913      	ldr	r3, [r2, #16]
 8002c36:	68a1      	ldr	r1, [r4, #8]
 8002c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002c3c:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c3e:	6822      	ldr	r2, [r4, #0]
 8002c40:	68d3      	ldr	r3, [r2, #12]
 8002c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c46:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f013 0f20 	tst.w	r3, #32
 8002c50:	d01b      	beq.n	8002c8a <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002c5c:	6822      	ldr	r2, [r4, #0]
 8002c5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c60:	69a1      	ldr	r1, [r4, #24]
 8002c62:	430b      	orrs	r3, r1
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	22ff      	movs	r2, #255	; 0xff
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	7763      	strb	r3, [r4, #29]
}
 8002c70:	4628      	mov	r0, r5
 8002c72:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002c74:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002c76:	f002 fc27 	bl	80054c8 <HAL_RTC_MspInit>
 8002c7a:	e7b9      	b.n	8002bf0 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	22ff      	movs	r2, #255	; 0xff
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c82:	2304      	movs	r3, #4
 8002c84:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002c86:	2501      	movs	r5, #1
 8002c88:	e7f2      	b.n	8002c70 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7ff ff72 	bl	8002b74 <HAL_RTC_WaitForSynchro>
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d0de      	beq.n	8002c52 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	22ff      	movs	r2, #255	; 0xff
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002c9e:	2501      	movs	r5, #1
 8002ca0:	e7e6      	b.n	8002c70 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8002ca2:	2501      	movs	r5, #1
 8002ca4:	e7e4      	b.n	8002c70 <HAL_RTC_Init+0x8e>

08002ca6 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002ca6:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002ca8:	e002      	b.n	8002cb0 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002caa:	3301      	adds	r3, #1
    Value -= 10U;
 8002cac:	380a      	subs	r0, #10
 8002cae:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002cb0:	2809      	cmp	r0, #9
 8002cb2:	d8fa      	bhi.n	8002caa <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	b2db      	uxtb	r3, r3
}
 8002cb8:	4318      	orrs	r0, r3
 8002cba:	4770      	bx	lr

08002cbc <HAL_RTC_SetTime>:
{
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002cbe:	7f03      	ldrb	r3, [r0, #28]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d077      	beq.n	8002db4 <HAL_RTC_SetTime+0xf8>
 8002cc4:	460e      	mov	r6, r1
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	2301      	movs	r3, #1
 8002cca:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	d146      	bne.n	8002d62 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ce2:	7830      	ldrb	r0, [r6, #0]
 8002ce4:	f7ff ffdf 	bl	8002ca6 <RTC_ByteToBcd2>
 8002ce8:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002cea:	7870      	ldrb	r0, [r6, #1]
 8002cec:	f7ff ffdb 	bl	8002ca6 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002cf0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002cf4:	78b0      	ldrb	r0, [r6, #2]
 8002cf6:	f7ff ffd6 	bl	8002ca6 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002cfa:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002cfc:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002cfe:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	22ca      	movs	r2, #202	; 0xca
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	2253      	movs	r2, #83	; 0x53
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7ff ff49 	bl	8002ba6 <RTC_EnterInitMode>
 8002d14:	4607      	mov	r7, r0
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d135      	bne.n	8002d86 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002d20:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002d24:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002d26:	6822      	ldr	r2, [r4, #0]
 8002d28:	6893      	ldr	r3, [r2, #8]
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d30:	6821      	ldr	r1, [r4, #0]
 8002d32:	688b      	ldr	r3, [r1, #8]
 8002d34:	68f2      	ldr	r2, [r6, #12]
 8002d36:	6930      	ldr	r0, [r6, #16]
 8002d38:	4302      	orrs	r2, r0
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	68d3      	ldr	r3, [r2, #12]
 8002d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d46:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f013 0f20 	tst.w	r3, #32
 8002d50:	d022      	beq.n	8002d98 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	22ff      	movs	r2, #255	; 0xff
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002d60:	e029      	b.n	8002db6 <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d62:	6803      	ldr	r3, [r0, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d6a:	d101      	bne.n	8002d70 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d70:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002d72:	7870      	ldrb	r0, [r6, #1]
 8002d74:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002d7a:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002d7c:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002d7e:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d80:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002d84:	e7bd      	b.n	8002d02 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	22ff      	movs	r2, #255	; 0xff
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002d90:	2300      	movs	r3, #0
 8002d92:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002d94:	2701      	movs	r7, #1
 8002d96:	e00e      	b.n	8002db6 <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff feeb 	bl	8002b74 <HAL_RTC_WaitForSynchro>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d0d7      	beq.n	8002d52 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	22ff      	movs	r2, #255	; 0xff
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002da8:	2304      	movs	r3, #4
 8002daa:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002dac:	2300      	movs	r3, #0
 8002dae:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002db0:	2701      	movs	r7, #1
 8002db2:	e000      	b.n	8002db6 <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002db4:	2702      	movs	r7, #2
}
 8002db6:	4638      	mov	r0, r7
 8002db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dba <HAL_RTC_SetDate>:
{
 8002dba:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002dbc:	7f03      	ldrb	r3, [r0, #28]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d065      	beq.n	8002e8e <HAL_RTC_SetDate+0xd4>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002dca:	b93a      	cbnz	r2, 8002ddc <HAL_RTC_SetDate+0x22>
 8002dcc:	784b      	ldrb	r3, [r1, #1]
 8002dce:	f013 0f10 	tst.w	r3, #16
 8002dd2:	d003      	beq.n	8002ddc <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002dd4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002dd8:	330a      	adds	r3, #10
 8002dda:	704b      	strb	r3, [r1, #1]
 8002ddc:	460e      	mov	r6, r1
 8002dde:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002de0:	2a00      	cmp	r2, #0
 8002de2:	d132      	bne.n	8002e4a <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002de4:	78c8      	ldrb	r0, [r1, #3]
 8002de6:	f7ff ff5e 	bl	8002ca6 <RTC_ByteToBcd2>
 8002dea:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002dec:	7870      	ldrb	r0, [r6, #1]
 8002dee:	f7ff ff5a 	bl	8002ca6 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002df2:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002df6:	78b0      	ldrb	r0, [r6, #2]
 8002df8:	f7ff ff55 	bl	8002ca6 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002dfc:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002dfe:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e00:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	22ca      	movs	r2, #202	; 0xca
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	2253      	movs	r2, #83	; 0x53
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff fec8 	bl	8002ba6 <RTC_EnterInitMode>
 8002e16:	4606      	mov	r6, r0
 8002e18:	bb10      	cbnz	r0, 8002e60 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002e20:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002e24:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	68d3      	ldr	r3, [r2, #12]
 8002e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e2e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f013 0f20 	tst.w	r3, #32
 8002e38:	d01b      	beq.n	8002e72 <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e40:	2301      	movs	r3, #1
 8002e42:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002e44:	2300      	movs	r3, #0
 8002e46:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8002e48:	e022      	b.n	8002e90 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002e4a:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002e4c:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e4e:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e50:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e56:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002e58:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e5a:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002e5e:	e7d1      	b.n	8002e04 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	22ff      	movs	r2, #255	; 0xff
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e66:	2304      	movs	r3, #4
 8002e68:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002e6e:	2601      	movs	r6, #1
 8002e70:	e00e      	b.n	8002e90 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7ff fe7e 	bl	8002b74 <HAL_RTC_WaitForSynchro>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d0de      	beq.n	8002e3a <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	22ff      	movs	r2, #255	; 0xff
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e82:	2304      	movs	r3, #4
 8002e84:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002e86:	2300      	movs	r3, #0
 8002e88:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002e8a:	2601      	movs	r6, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8002e8e:	2602      	movs	r6, #2
}
 8002e90:	4630      	mov	r0, r6
 8002e92:	bd70      	pop	{r4, r5, r6, pc}

08002e94 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002e94:	0903      	lsrs	r3, r0, #4
 8002e96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e9a:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002e9c:	f000 000f 	and.w	r0, r0, #15
 8002ea0:	4410      	add	r0, r2
}
 8002ea2:	b2c0      	uxtb	r0, r0
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_RTC_GetTime>:
{
 8002ea6:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002ea8:	6803      	ldr	r3, [r0, #0]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002eae:	6803      	ldr	r3, [r0, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002eb6:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002eb8:	6803      	ldr	r3, [r0, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ec0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002ec4:	0c1d      	lsrs	r5, r3, #16
 8002ec6:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002eca:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002ecc:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002ed0:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002ed2:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002ed6:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002ed8:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002edc:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002ede:	b95a      	cbnz	r2, 8002ef8 <HAL_RTC_GetTime+0x52>
 8002ee0:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002ee2:	f7ff ffd7 	bl	8002e94 <RTC_Bcd2ToByte>
 8002ee6:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f7ff ffd3 	bl	8002e94 <RTC_Bcd2ToByte>
 8002eee:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7ff ffcf 	bl	8002e94 <RTC_Bcd2ToByte>
 8002ef6:	70a8      	strb	r0, [r5, #2]
}
 8002ef8:	2000      	movs	r0, #0
 8002efa:	bd70      	pop	{r4, r5, r6, pc}

08002efc <HAL_RTC_GetDate>:
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002efe:	6803      	ldr	r3, [r0, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002f0a:	0c18      	lsrs	r0, r3, #16
 8002f0c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002f0e:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8002f12:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f14:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8002f18:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002f1a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002f1e:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002f20:	b95a      	cbnz	r2, 8002f3a <HAL_RTC_GetDate+0x3e>
 8002f22:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f24:	f7ff ffb6 	bl	8002e94 <RTC_Bcd2ToByte>
 8002f28:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	f7ff ffb2 	bl	8002e94 <RTC_Bcd2ToByte>
 8002f30:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002f32:	4628      	mov	r0, r5
 8002f34:	f7ff ffae 	bl	8002e94 <RTC_Bcd2ToByte>
 8002f38:	70a0      	strb	r0, [r4, #2]
}
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f40 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f42:	7f03      	ldrb	r3, [r0, #28]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d06d      	beq.n	8003024 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8002f48:	4615      	mov	r5, r2
 8002f4a:	460e      	mov	r6, r1
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	2301      	movs	r3, #1
 8002f50:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f56:	6803      	ldr	r3, [r0, #0]
 8002f58:	22ca      	movs	r2, #202	; 0xca
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f5c:	6803      	ldr	r3, [r0, #0]
 8002f5e:	2253      	movs	r2, #83	; 0x53
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002f62:	6803      	ldr	r3, [r0, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002f6a:	d015      	beq.n	8002f98 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 8002f6c:	f7fd ffec 	bl	8000f48 <HAL_GetTick>
 8002f70:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f013 0f04 	tst.w	r3, #4
 8002f7a:	d00d      	beq.n	8002f98 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f7c:	f7fd ffe4 	bl	8000f48 <HAL_GetTick>
 8002f80:	1bc0      	subs	r0, r0, r7
 8002f82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f86:	d9f4      	bls.n	8002f72 <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f8e:	2003      	movs	r0, #3
 8002f90:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8002f92:	2300      	movs	r3, #0
 8002f94:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 8002f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	6893      	ldr	r3, [r2, #8]
 8002f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa0:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	68d3      	ldr	r3, [r2, #12]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002fac:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002fae:	f7fd ffcb 	bl	8000f48 <HAL_GetTick>
 8002fb2:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	68d8      	ldr	r0, [r3, #12]
 8002fb8:	f010 0f04 	tst.w	r0, #4
 8002fbc:	d10d      	bne.n	8002fda <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002fbe:	f7fd ffc3 	bl	8000f48 <HAL_GetTick>
 8002fc2:	1bc0      	subs	r0, r0, r7
 8002fc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002fc8:	d9f4      	bls.n	8002fb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	22ff      	movs	r2, #255	; 0xff
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd0:	2003      	movs	r0, #3
 8002fd2:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 8002fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002fda:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	6893      	ldr	r3, [r2, #8]
 8002fe0:	f023 0307 	bic.w	r3, r3, #7
 8002fe4:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	6893      	ldr	r3, [r2, #8]
 8002fea:	431d      	orrs	r5, r3
 8002fec:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ff6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ffe:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003000:	6822      	ldr	r2, [r4, #0]
 8003002:	6893      	ldr	r3, [r2, #8]
 8003004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003008:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	6893      	ldr	r3, [r2, #8]
 800300e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003012:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800301a:	2301      	movs	r3, #1
 800301c:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800301e:	2000      	movs	r0, #0
 8003020:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 8003022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8003024:	2002      	movs	r0, #2
}
 8003026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800302c:	b510      	push	{r4, lr}
 800302e:	4604      	mov	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003030:	6803      	ldr	r3, [r0, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003038:	d106      	bne.n	8003048 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800303a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8003040:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003042:	2301      	movs	r3, #1
 8003044:	7763      	strb	r3, [r4, #29]
 8003046:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003048:	f001 f8ea 	bl	8004220 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800304c:	6822      	ldr	r2, [r4, #0]
 800304e:	68d3      	ldr	r3, [r2, #12]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8003056:	60d3      	str	r3, [r2, #12]
 8003058:	e7ef      	b.n	800303a <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 800305a:	bf00      	nop
 800305c:	40010400 	.word	0x40010400

08003060 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003060:	6803      	ldr	r3, [r0, #0]
 8003062:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003064:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003068:	4770      	bx	lr

0800306a <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800306a:	6803      	ldr	r3, [r0, #0]
 800306c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800306e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8003072:	4770      	bx	lr

08003074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003074:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003076:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003078:	6a04      	ldr	r4, [r0, #32]
 800307a:	f024 0401 	bic.w	r4, r4, #1
 800307e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003080:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003082:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003086:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800308a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800308e:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003090:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003092:	6203      	str	r3, [r0, #32]
}
 8003094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003098:	4770      	bx	lr

0800309a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309a:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309c:	6a03      	ldr	r3, [r0, #32]
 800309e:	f023 0310 	bic.w	r3, r3, #16
 80030a2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80030a6:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030a8:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ac:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80030b4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80030ba:	6203      	str	r3, [r0, #32]
}
 80030bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80030c2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80030c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80030c8:	f041 0107 	orr.w	r1, r1, #7
 80030cc:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80030ce:	6083      	str	r3, [r0, #8]
 80030d0:	4770      	bx	lr

080030d2 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d2:	6802      	ldr	r2, [r0, #0]
 80030d4:	68d3      	ldr	r3, [r2, #12]
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80030dc:	6802      	ldr	r2, [r0, #0]
 80030de:	6813      	ldr	r3, [r2, #0]
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6013      	str	r3, [r2, #0]
}
 80030e6:	2000      	movs	r0, #0
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_OC_DelayElapsedCallback>:
{
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_PWM_PulseFinishedCallback>:
{
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_TriggerCallback>:
{
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_IRQHandler>:
{
 80030f0:	b510      	push	{r4, lr}
 80030f2:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f4:	6803      	ldr	r3, [r0, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	f012 0f02 	tst.w	r2, #2
 80030fc:	d011      	beq.n	8003122 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	f012 0f02 	tst.w	r2, #2
 8003104:	d00d      	beq.n	8003122 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003106:	f06f 0202 	mvn.w	r2, #2
 800310a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310c:	2301      	movs	r3, #1
 800310e:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003110:	6803      	ldr	r3, [r0, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f013 0f03 	tst.w	r3, #3
 8003118:	d079      	beq.n	800320e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800311a:	f001 f87b 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	2300      	movs	r3, #0
 8003120:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	f012 0f04 	tst.w	r2, #4
 800312a:	d012      	beq.n	8003152 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	f012 0f04 	tst.w	r2, #4
 8003132:	d00e      	beq.n	8003152 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003134:	f06f 0204 	mvn.w	r2, #4
 8003138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313a:	2302      	movs	r3, #2
 800313c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003146:	d068      	beq.n	800321a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003148:	4620      	mov	r0, r4
 800314a:	f001 f863 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	2300      	movs	r3, #0
 8003150:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	f012 0f08 	tst.w	r2, #8
 800315a:	d012      	beq.n	8003182 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	f012 0f08 	tst.w	r2, #8
 8003162:	d00e      	beq.n	8003182 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003164:	f06f 0208 	mvn.w	r2, #8
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800316a:	2304      	movs	r3, #4
 800316c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f013 0f03 	tst.w	r3, #3
 8003176:	d057      	beq.n	8003228 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003178:	4620      	mov	r0, r4
 800317a:	f001 f84b 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	2300      	movs	r3, #0
 8003180:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	f012 0f10 	tst.w	r2, #16
 800318a:	d012      	beq.n	80031b2 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	f012 0f10 	tst.w	r2, #16
 8003192:	d00e      	beq.n	80031b2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003194:	f06f 0210 	mvn.w	r2, #16
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800319a:	2308      	movs	r3, #8
 800319c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031a6:	d046      	beq.n	8003236 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80031a8:	4620      	mov	r0, r4
 80031aa:	f001 f833 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	2300      	movs	r3, #0
 80031b0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	f012 0f01 	tst.w	r2, #1
 80031ba:	d003      	beq.n	80031c4 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	f012 0f01 	tst.w	r2, #1
 80031c2:	d13f      	bne.n	8003244 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031d4:	d13d      	bne.n	8003252 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	f412 7f80 	tst.w	r2, #256	; 0x100
 80031de:	d003      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031e6:	d13b      	bne.n	8003260 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80031f8:	d139      	bne.n	800326e <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	f012 0f20 	tst.w	r2, #32
 8003202:	d003      	beq.n	800320c <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	f012 0f20 	tst.w	r2, #32
 800320a:	d137      	bne.n	800327c <HAL_TIM_IRQHandler+0x18c>
 800320c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	f7ff ff6c 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003212:	4620      	mov	r0, r4
 8003214:	f7ff ff6a 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
 8003218:	e781      	b.n	800311e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff ff65 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff ff63 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
 8003226:	e792      	b.n	800314e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff ff5e 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff ff5c 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
 8003234:	e7a3      	b.n	800317e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff ff57 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	4620      	mov	r0, r4
 800323e:	f7ff ff55 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
 8003242:	e7b4      	b.n	80031ae <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003244:	f06f 0201 	mvn.w	r2, #1
 8003248:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800324a:	4620      	mov	r0, r4
 800324c:	f001 fb8a 	bl	8004964 <HAL_TIM_PeriodElapsedCallback>
 8003250:	e7b8      	b.n	80031c4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003252:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003256:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003258:	4620      	mov	r0, r4
 800325a:	f000 f93c 	bl	80034d6 <HAL_TIMEx_BreakCallback>
 800325e:	e7ba      	b.n	80031d6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003260:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003264:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003266:	4620      	mov	r0, r4
 8003268:	f000 f936 	bl	80034d8 <HAL_TIMEx_Break2Callback>
 800326c:	e7bc      	b.n	80031e8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800326e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003272:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003274:	4620      	mov	r0, r4
 8003276:	f7ff ff3a 	bl	80030ee <HAL_TIM_TriggerCallback>
 800327a:	e7be      	b.n	80031fa <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800327c:	f06f 0220 	mvn.w	r2, #32
 8003280:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003282:	4620      	mov	r0, r4
 8003284:	f000 f926 	bl	80034d4 <HAL_TIMEx_CommutationCallback>
}
 8003288:	e7c0      	b.n	800320c <HAL_TIM_IRQHandler+0x11c>
	...

0800328c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800328c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800328e:	4a23      	ldr	r2, [pc, #140]	; (800331c <TIM_Base_SetConfig+0x90>)
 8003290:	4290      	cmp	r0, r2
 8003292:	d03d      	beq.n	8003310 <TIM_Base_SetConfig+0x84>
 8003294:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003298:	d03a      	beq.n	8003310 <TIM_Base_SetConfig+0x84>
 800329a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800329e:	4290      	cmp	r0, r2
 80032a0:	d036      	beq.n	8003310 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <TIM_Base_SetConfig+0x90>)
 80032a4:	4290      	cmp	r0, r2
 80032a6:	d012      	beq.n	80032ce <TIM_Base_SetConfig+0x42>
 80032a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032ac:	d00f      	beq.n	80032ce <TIM_Base_SetConfig+0x42>
 80032ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80032b2:	4290      	cmp	r0, r2
 80032b4:	d00b      	beq.n	80032ce <TIM_Base_SetConfig+0x42>
 80032b6:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80032ba:	4290      	cmp	r0, r2
 80032bc:	d007      	beq.n	80032ce <TIM_Base_SetConfig+0x42>
 80032be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032c2:	4290      	cmp	r0, r2
 80032c4:	d003      	beq.n	80032ce <TIM_Base_SetConfig+0x42>
 80032c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032ca:	4290      	cmp	r0, r2
 80032cc:	d103      	bne.n	80032d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	68ca      	ldr	r2, [r1, #12]
 80032d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032da:	694a      	ldr	r2, [r1, #20]
 80032dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80032de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e0:	688b      	ldr	r3, [r1, #8]
 80032e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80032e4:	680b      	ldr	r3, [r1, #0]
 80032e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <TIM_Base_SetConfig+0x90>)
 80032ea:	4298      	cmp	r0, r3
 80032ec:	d00b      	beq.n	8003306 <TIM_Base_SetConfig+0x7a>
 80032ee:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80032f2:	4298      	cmp	r0, r3
 80032f4:	d007      	beq.n	8003306 <TIM_Base_SetConfig+0x7a>
 80032f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032fa:	4298      	cmp	r0, r3
 80032fc:	d003      	beq.n	8003306 <TIM_Base_SetConfig+0x7a>
 80032fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003302:	4298      	cmp	r0, r3
 8003304:	d101      	bne.n	800330a <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8003306:	690b      	ldr	r3, [r1, #16]
 8003308:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800330a:	2301      	movs	r3, #1
 800330c:	6143      	str	r3, [r0, #20]
 800330e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003314:	684a      	ldr	r2, [r1, #4]
 8003316:	4313      	orrs	r3, r2
 8003318:	e7c3      	b.n	80032a2 <TIM_Base_SetConfig+0x16>
 800331a:	bf00      	nop
 800331c:	40012c00 	.word	0x40012c00

08003320 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8003320:	b1a8      	cbz	r0, 800334e <HAL_TIM_Base_Init+0x2e>
{ 
 8003322:	b510      	push	{r4, lr}
 8003324:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8003326:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800332a:	b15b      	cbz	r3, 8003344 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003332:	1d21      	adds	r1, r4, #4
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	f7ff ffa9 	bl	800328c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800333a:	2301      	movs	r3, #1
 800333c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003340:	2000      	movs	r0, #0
 8003342:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003344:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003348:	f002 f8dc 	bl	8005504 <HAL_TIM_Base_MspInit>
 800334c:	e7ee      	b.n	800332c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800334e:	2001      	movs	r0, #1
 8003350:	4770      	bx	lr

08003352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003352:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8003354:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003356:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800335a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800335e:	4319      	orrs	r1, r3
 8003360:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003362:	6084      	str	r4, [r0, #8]
} 
 8003364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800336c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	f000 8082 	beq.w	800347a <HAL_TIM_ConfigClockSource+0x10e>
{
 8003376:	b510      	push	{r4, lr}
 8003378:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800337a:	2301      	movs	r3, #1
 800337c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	2302      	movs	r3, #2
 8003382:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003386:	6802      	ldr	r2, [r0, #0]
 8003388:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_TIM_ConfigClockSource+0x114>)
 800338c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800338e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003390:	680b      	ldr	r3, [r1, #0]
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d05d      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xe6>
 8003396:	d910      	bls.n	80033ba <HAL_TIM_ConfigClockSource+0x4e>
 8003398:	2b70      	cmp	r3, #112	; 0x70
 800339a:	d040      	beq.n	800341e <HAL_TIM_ConfigClockSource+0xb2>
 800339c:	d81f      	bhi.n	80033de <HAL_TIM_ConfigClockSource+0x72>
 800339e:	2b50      	cmp	r3, #80	; 0x50
 80033a0:	d04d      	beq.n	800343e <HAL_TIM_ConfigClockSource+0xd2>
 80033a2:	2b60      	cmp	r3, #96	; 0x60
 80033a4:	d134      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80033a6:	68ca      	ldr	r2, [r1, #12]
 80033a8:	6849      	ldr	r1, [r1, #4]
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	f7ff fe75 	bl	800309a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b0:	2160      	movs	r1, #96	; 0x60
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	f7ff fe85 	bl	80030c2 <TIM_ITRx_SetConfig>
    break;
 80033b8:	e02a      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d053      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0xfa>
 80033be:	d908      	bls.n	80033d2 <HAL_TIM_ConfigClockSource+0x66>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d055      	beq.n	8003470 <HAL_TIM_ConfigClockSource+0x104>
 80033c4:	2b30      	cmp	r3, #48	; 0x30
 80033c6:	d123      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80033c8:	2130      	movs	r1, #48	; 0x30
 80033ca:	6820      	ldr	r0, [r4, #0]
 80033cc:	f7ff fe79 	bl	80030c2 <TIM_ITRx_SetConfig>
    break;
 80033d0:	e01e      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80033d2:	b9eb      	cbnz	r3, 8003410 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80033d4:	2100      	movs	r1, #0
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	f7ff fe73 	bl	80030c2 <TIM_ITRx_SetConfig>
    break;
 80033dc:	e018      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d00e      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x96>
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e8:	d112      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 80033ea:	68cb      	ldr	r3, [r1, #12]
 80033ec:	684a      	ldr	r2, [r1, #4]
 80033ee:	6889      	ldr	r1, [r1, #8]
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	f7ff ffae 	bl	8003352 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	6893      	ldr	r3, [r2, #8]
 80033fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fe:	6093      	str	r3, [r2, #8]
    break;
 8003400:	e006      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003402:	6822      	ldr	r2, [r4, #0]
 8003404:	6893      	ldr	r3, [r2, #8]
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	f023 0307 	bic.w	r3, r3, #7
 800340e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003410:	2301      	movs	r3, #1
 8003412:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003416:	2000      	movs	r0, #0
 8003418:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800341c:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 800341e:	68cb      	ldr	r3, [r1, #12]
 8003420:	684a      	ldr	r2, [r1, #4]
 8003422:	6889      	ldr	r1, [r1, #8]
 8003424:	6820      	ldr	r0, [r4, #0]
 8003426:	f7ff ff94 	bl	8003352 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800342e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003436:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800343a:	6093      	str	r3, [r2, #8]
    break;
 800343c:	e7e8      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800343e:	68ca      	ldr	r2, [r1, #12]
 8003440:	6849      	ldr	r1, [r1, #4]
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	f7ff fe16 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003448:	2150      	movs	r1, #80	; 0x50
 800344a:	6820      	ldr	r0, [r4, #0]
 800344c:	f7ff fe39 	bl	80030c2 <TIM_ITRx_SetConfig>
    break;
 8003450:	e7de      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003452:	68ca      	ldr	r2, [r1, #12]
 8003454:	6849      	ldr	r1, [r1, #4]
 8003456:	6820      	ldr	r0, [r4, #0]
 8003458:	f7ff fe0c 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800345c:	2140      	movs	r1, #64	; 0x40
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	f7ff fe2f 	bl	80030c2 <TIM_ITRx_SetConfig>
    break;
 8003464:	e7d4      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003466:	2110      	movs	r1, #16
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	f7ff fe2a 	bl	80030c2 <TIM_ITRx_SetConfig>
    break;
 800346e:	e7cf      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003470:	2120      	movs	r1, #32
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	f7ff fe25 	bl	80030c2 <TIM_ITRx_SetConfig>
    break;
 8003478:	e7ca      	b.n	8003410 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 800347a:	2002      	movs	r0, #2
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	fffe0088 	.word	0xfffe0088

08003484 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003484:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d01f      	beq.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 800348c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800348e:	2301      	movs	r3, #1
 8003490:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003494:	6804      	ldr	r4, [r0, #0]
 8003496:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800349a:	4d0d      	ldr	r5, [pc, #52]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 800349c:	42ac      	cmp	r4, r5
 800349e:	d010      	beq.n	80034c2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a4:	680d      	ldr	r5, [r1, #0]
 80034a6:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80034a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ac:	6889      	ldr	r1, [r1, #8]
 80034ae:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b0:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034b2:	6803      	ldr	r3, [r0, #0]
 80034b4:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80034b6:	2300      	movs	r3, #0
 80034b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80034bc:	4618      	mov	r0, r3
} 
 80034be:	bc30      	pop	{r4, r5}
 80034c0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034c6:	684d      	ldr	r5, [r1, #4]
 80034c8:	432b      	orrs	r3, r5
 80034ca:	e7e9      	b.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 80034cc:	2002      	movs	r0, #2
 80034ce:	4770      	bx	lr
 80034d0:	40012c00 	.word	0x40012c00

080034d4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034d8:	4770      	bx	lr

080034da <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034da:	6802      	ldr	r2, [r0, #0]
 80034dc:	6813      	ldr	r3, [r2, #0]
 80034de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034e2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	6802      	ldr	r2, [r0, #0]
 80034e6:	6893      	ldr	r3, [r2, #8]
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ee:	2320      	movs	r3, #32
 80034f0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80034f4:	4770      	bx	lr

080034f6 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 80034f6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d001      	beq.n	8003504 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8003500:	2002      	movs	r0, #2
 8003502:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003504:	b1b9      	cbz	r1, 8003536 <HAL_UART_Transmit_IT+0x40>
 8003506:	b1c2      	cbz	r2, 800353a <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 8003508:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800350c:	2b01      	cmp	r3, #1
 800350e:	d016      	beq.n	800353e <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 8003510:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8003512:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8003516:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351a:	2300      	movs	r3, #0
 800351c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800351e:	2221      	movs	r2, #33	; 0x21
 8003520:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8003524:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003528:	6801      	ldr	r1, [r0, #0]
 800352a:	680a      	ldr	r2, [r1, #0]
 800352c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003530:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003532:	4618      	mov	r0, r3
 8003534:	4770      	bx	lr
      return HAL_ERROR;
 8003536:	2001      	movs	r0, #1
 8003538:	4770      	bx	lr
 800353a:	2001      	movs	r0, #1
 800353c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800353e:	2002      	movs	r0, #2
}
 8003540:	4770      	bx	lr

08003542 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8003542:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	d001      	beq.n	8003550 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 800354c:	2002      	movs	r0, #2
 800354e:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003550:	2900      	cmp	r1, #0
 8003552:	d047      	beq.n	80035e4 <HAL_UART_Receive_IT+0xa2>
 8003554:	2a00      	cmp	r2, #0
 8003556:	d047      	beq.n	80035e8 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8003558:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800355c:	2b01      	cmp	r3, #1
 800355e:	d045      	beq.n	80035ec <HAL_UART_Receive_IT+0xaa>
 8003560:	2301      	movs	r3, #1
 8003562:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8003566:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8003568:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800356c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003570:	6883      	ldr	r3, [r0, #8]
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003576:	d006      	beq.n	8003586 <HAL_UART_Receive_IT+0x44>
 8003578:	b9a3      	cbnz	r3, 80035a4 <HAL_UART_Receive_IT+0x62>
 800357a:	6903      	ldr	r3, [r0, #16]
 800357c:	b973      	cbnz	r3, 800359c <HAL_UART_Receive_IT+0x5a>
 800357e:	23ff      	movs	r3, #255	; 0xff
 8003580:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003584:	e011      	b.n	80035aa <HAL_UART_Receive_IT+0x68>
 8003586:	6903      	ldr	r3, [r0, #16]
 8003588:	b923      	cbnz	r3, 8003594 <HAL_UART_Receive_IT+0x52>
 800358a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800358e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003592:	e00a      	b.n	80035aa <HAL_UART_Receive_IT+0x68>
 8003594:	23ff      	movs	r3, #255	; 0xff
 8003596:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800359a:	e006      	b.n	80035aa <HAL_UART_Receive_IT+0x68>
 800359c:	237f      	movs	r3, #127	; 0x7f
 800359e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80035a2:	e002      	b.n	80035aa <HAL_UART_Receive_IT+0x68>
 80035a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035a8:	d012      	beq.n	80035d0 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ae:	2222      	movs	r2, #34	; 0x22
 80035b0:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80035b4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b8:	6801      	ldr	r1, [r0, #0]
 80035ba:	688a      	ldr	r2, [r1, #8]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80035c2:	6801      	ldr	r1, [r0, #0]
 80035c4:	680a      	ldr	r2, [r1, #0]
 80035c6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80035ca:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80035cc:	4618      	mov	r0, r3
 80035ce:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80035d0:	6903      	ldr	r3, [r0, #16]
 80035d2:	b91b      	cbnz	r3, 80035dc <HAL_UART_Receive_IT+0x9a>
 80035d4:	237f      	movs	r3, #127	; 0x7f
 80035d6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80035da:	e7e6      	b.n	80035aa <HAL_UART_Receive_IT+0x68>
 80035dc:	233f      	movs	r3, #63	; 0x3f
 80035de:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80035e2:	e7e2      	b.n	80035aa <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 80035e4:	2001      	movs	r0, #1
 80035e6:	4770      	bx	lr
 80035e8:	2001      	movs	r0, #1
 80035ea:	4770      	bx	lr
    __HAL_LOCK(huart);
 80035ec:	2002      	movs	r0, #2
}
 80035ee:	4770      	bx	lr

080035f0 <HAL_UART_TxCpltCallback>:
{
 80035f0:	4770      	bx	lr

080035f2 <HAL_UART_ErrorCallback>:
{
 80035f2:	4770      	bx	lr

080035f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035f4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80035f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80035fe:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8003602:	f7ff fff6 	bl	80035f2 <HAL_UART_ErrorCallback>
 8003606:	bd08      	pop	{r3, pc}

08003608 <UART_SetConfig>:
{
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800360c:	6883      	ldr	r3, [r0, #8]
 800360e:	6902      	ldr	r2, [r0, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	6942      	ldr	r2, [r0, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	69c2      	ldr	r2, [r0, #28]
 8003618:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800361a:	6801      	ldr	r1, [r0, #0]
 800361c:	6808      	ldr	r0, [r1, #0]
 800361e:	4a64      	ldr	r2, [pc, #400]	; (80037b0 <UART_SetConfig+0x1a8>)
 8003620:	4002      	ands	r2, r0
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	6853      	ldr	r3, [r2, #4]
 800362a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800362e:	68e1      	ldr	r1, [r4, #12]
 8003630:	430b      	orrs	r3, r1
 8003632:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003634:	69a3      	ldr	r3, [r4, #24]
 8003636:	6a22      	ldr	r2, [r4, #32]
 8003638:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800363a:	6821      	ldr	r1, [r4, #0]
 800363c:	688a      	ldr	r2, [r1, #8]
 800363e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003646:	6825      	ldr	r5, [r4, #0]
 8003648:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <UART_SetConfig+0x1ac>)
 800364a:	429d      	cmp	r5, r3
 800364c:	d015      	beq.n	800367a <UART_SetConfig+0x72>
 800364e:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <UART_SetConfig+0x1b0>)
 8003650:	429d      	cmp	r5, r3
 8003652:	d029      	beq.n	80036a8 <UART_SetConfig+0xa0>
 8003654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003658:	429d      	cmp	r5, r3
 800365a:	d021      	beq.n	80036a0 <UART_SetConfig+0x98>
 800365c:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365e:	69e2      	ldr	r2, [r4, #28]
 8003660:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003664:	d022      	beq.n	80036ac <UART_SetConfig+0xa4>
    switch (clocksource)
 8003666:	2b08      	cmp	r3, #8
 8003668:	f200 809f 	bhi.w	80037aa <UART_SetConfig+0x1a2>
 800366c:	e8df f003 	tbb	[pc, r3]
 8003670:	9d7c7166 	.word	0x9d7c7166
 8003674:	9d9d9d88 	.word	0x9d9d9d88
 8003678:	93          	.byte	0x93
 8003679:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800367a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b03      	cmp	r3, #3
 8003686:	d809      	bhi.n	800369c <UART_SetConfig+0x94>
 8003688:	e8df f003 	tbb	[pc, r3]
 800368c:	0c060402 	.word	0x0c060402
 8003690:	2300      	movs	r3, #0
 8003692:	e7e4      	b.n	800365e <UART_SetConfig+0x56>
 8003694:	2304      	movs	r3, #4
 8003696:	e7e2      	b.n	800365e <UART_SetConfig+0x56>
 8003698:	2308      	movs	r3, #8
 800369a:	e7e0      	b.n	800365e <UART_SetConfig+0x56>
 800369c:	2310      	movs	r3, #16
 800369e:	e7de      	b.n	800365e <UART_SetConfig+0x56>
 80036a0:	2300      	movs	r3, #0
 80036a2:	e7dc      	b.n	800365e <UART_SetConfig+0x56>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e7da      	b.n	800365e <UART_SetConfig+0x56>
 80036a8:	2300      	movs	r3, #0
 80036aa:	e7d8      	b.n	800365e <UART_SetConfig+0x56>
    switch (clocksource)
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d842      	bhi.n	8003736 <UART_SetConfig+0x12e>
 80036b0:	e8df f003 	tbb	[pc, r3]
 80036b4:	41221705 	.word	0x41221705
 80036b8:	4141412d 	.word	0x4141412d
 80036bc:	38          	.byte	0x38
 80036bd:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036be:	f7ff f957 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 80036c2:	6862      	ldr	r2, [r4, #4]
 80036c4:	0853      	lsrs	r3, r2, #1
 80036c6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80036ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ce:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d0:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80036d2:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80036da:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80036dc:	6822      	ldr	r2, [r4, #0]
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80036e2:	f7ff f95b 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	0853      	lsrs	r3, r2, #1
 80036ea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80036ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80036f2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f4:	2000      	movs	r0, #0
        break;
 80036f6:	e7ec      	b.n	80036d2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80036f8:	6862      	ldr	r2, [r4, #4]
 80036fa:	0853      	lsrs	r3, r2, #1
 80036fc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003700:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003704:	fbb3 f3f2 	udiv	r3, r3, r2
 8003708:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800370a:	2000      	movs	r0, #0
        break;
 800370c:	e7e1      	b.n	80036d2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800370e:	f7ff f807 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8003712:	6862      	ldr	r2, [r4, #4]
 8003714:	0853      	lsrs	r3, r2, #1
 8003716:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800371a:	fbb3 f3f2 	udiv	r3, r3, r2
 800371e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003720:	2000      	movs	r0, #0
        break;
 8003722:	e7d6      	b.n	80036d2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003724:	6862      	ldr	r2, [r4, #4]
 8003726:	0853      	lsrs	r3, r2, #1
 8003728:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800372c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003730:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003732:	2000      	movs	r0, #0
        break;
 8003734:	e7cd      	b.n	80036d2 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8003736:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003738:	2300      	movs	r3, #0
 800373a:	e7ca      	b.n	80036d2 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800373c:	f7ff f918 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003746:	fbb0 f0f3 	udiv	r0, r0, r3
 800374a:	b280      	uxth	r0, r0
 800374c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800374e:	2000      	movs	r0, #0
        break;
 8003750:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003752:	f7ff f923 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003756:	6863      	ldr	r3, [r4, #4]
 8003758:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800375c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003760:	b280      	uxth	r0, r0
 8003762:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003764:	2000      	movs	r0, #0
        break;
 8003766:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003768:	6862      	ldr	r2, [r4, #4]
 800376a:	0853      	lsrs	r3, r2, #1
 800376c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003770:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003774:	fbb3 f3f2 	udiv	r3, r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800377c:	2000      	movs	r0, #0
        break;
 800377e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003780:	f7fe ffce 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800378a:	fbb0 f0f3 	udiv	r0, r0, r3
 800378e:	b280      	uxth	r0, r0
 8003790:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003792:	2000      	movs	r0, #0
        break;
 8003794:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003796:	6862      	ldr	r2, [r4, #4]
 8003798:	0853      	lsrs	r3, r2, #1
 800379a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800379e:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80037a6:	2000      	movs	r0, #0
        break;
 80037a8:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 80037aa:	2001      	movs	r0, #1
}
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
 80037ae:	bf00      	nop
 80037b0:	efff69f3 	.word	0xefff69f3
 80037b4:	40013800 	.word	0x40013800
 80037b8:	40004400 	.word	0x40004400

080037bc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037be:	f013 0f01 	tst.w	r3, #1
 80037c2:	d006      	beq.n	80037d2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c4:	6802      	ldr	r2, [r0, #0]
 80037c6:	6853      	ldr	r3, [r2, #4]
 80037c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80037ce:	430b      	orrs	r3, r1
 80037d0:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037d4:	f013 0f02 	tst.w	r3, #2
 80037d8:	d006      	beq.n	80037e8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037da:	6802      	ldr	r2, [r0, #0]
 80037dc:	6853      	ldr	r3, [r2, #4]
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037ea:	f013 0f04 	tst.w	r3, #4
 80037ee:	d006      	beq.n	80037fe <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037f0:	6802      	ldr	r2, [r0, #0]
 80037f2:	6853      	ldr	r3, [r2, #4]
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80037fa:	430b      	orrs	r3, r1
 80037fc:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003800:	f013 0f08 	tst.w	r3, #8
 8003804:	d006      	beq.n	8003814 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003806:	6802      	ldr	r2, [r0, #0]
 8003808:	6853      	ldr	r3, [r2, #4]
 800380a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800380e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003810:	430b      	orrs	r3, r1
 8003812:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003814:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003816:	f013 0f10 	tst.w	r3, #16
 800381a:	d006      	beq.n	800382a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800381c:	6802      	ldr	r2, [r0, #0]
 800381e:	6893      	ldr	r3, [r2, #8]
 8003820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003824:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003826:	430b      	orrs	r3, r1
 8003828:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800382a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800382c:	f013 0f20 	tst.w	r3, #32
 8003830:	d006      	beq.n	8003840 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003832:	6802      	ldr	r2, [r0, #0]
 8003834:	6893      	ldr	r3, [r2, #8]
 8003836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800383a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800383c:	430b      	orrs	r3, r1
 800383e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003840:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003842:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003848:	6802      	ldr	r2, [r0, #0]
 800384a:	6853      	ldr	r3, [r2, #4]
 800384c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003850:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003852:	430b      	orrs	r3, r1
 8003854:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003856:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385c:	d00b      	beq.n	8003876 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800385e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003860:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003864:	d006      	beq.n	8003874 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003866:	6802      	ldr	r2, [r0, #0]
 8003868:	6853      	ldr	r3, [r2, #4]
 800386a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800386e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003870:	430b      	orrs	r3, r1
 8003872:	6053      	str	r3, [r2, #4]
 8003874:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003876:	6802      	ldr	r2, [r0, #0]
 8003878:	6853      	ldr	r3, [r2, #4]
 800387a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800387e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003880:	430b      	orrs	r3, r1
 8003882:	6053      	str	r3, [r2, #4]
 8003884:	e7eb      	b.n	800385e <UART_AdvFeatureConfig+0xa2>

08003886 <UART_WaitOnFlagUntilTimeout>:
{
 8003886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388a:	4605      	mov	r5, r0
 800388c:	460f      	mov	r7, r1
 800388e:	4616      	mov	r6, r2
 8003890:	4698      	mov	r8, r3
 8003892:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	ea37 0303 	bics.w	r3, r7, r3
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	42b3      	cmp	r3, r6
 80038a4:	d11e      	bne.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80038a6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80038aa:	d0f3      	beq.n	8003894 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80038ac:	b12c      	cbz	r4, 80038ba <UART_WaitOnFlagUntilTimeout+0x34>
 80038ae:	f7fd fb4b 	bl	8000f48 <HAL_GetTick>
 80038b2:	eba0 0008 	sub.w	r0, r0, r8
 80038b6:	4284      	cmp	r4, r0
 80038b8:	d2ec      	bcs.n	8003894 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ba:	682a      	ldr	r2, [r5, #0]
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	682a      	ldr	r2, [r5, #0]
 80038c6:	6893      	ldr	r3, [r2, #8]
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80038ce:	2320      	movs	r3, #32
 80038d0:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80038d4:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80038d8:	2300      	movs	r3, #0
 80038da:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80038de:	2003      	movs	r0, #3
 80038e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80038e4:	2000      	movs	r0, #0
}
 80038e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038ea <UART_CheckIdleState>:
{
 80038ea:	b530      	push	{r4, r5, lr}
 80038ec:	b083      	sub	sp, #12
 80038ee:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80038f4:	f7fd fb28 	bl	8000f48 <HAL_GetTick>
 80038f8:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f013 0f08 	tst.w	r3, #8
 8003902:	d10e      	bne.n	8003922 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f013 0f04 	tst.w	r3, #4
 800390c:	d117      	bne.n	800393e <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800390e:	2320      	movs	r3, #32
 8003910:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8003918:	2000      	movs	r0, #0
 800391a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 800391e:	b003      	add	sp, #12
 8003920:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003922:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	4603      	mov	r3, r0
 800392a:	2200      	movs	r2, #0
 800392c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff ffa8 	bl	8003886 <UART_WaitOnFlagUntilTimeout>
 8003936:	2800      	cmp	r0, #0
 8003938:	d0e4      	beq.n	8003904 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800393a:	2003      	movs	r0, #3
 800393c:	e7ef      	b.n	800391e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	462b      	mov	r3, r5
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff ff9a 	bl	8003886 <UART_WaitOnFlagUntilTimeout>
 8003952:	2800      	cmp	r0, #0
 8003954:	d0db      	beq.n	800390e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003956:	2003      	movs	r0, #3
 8003958:	e7e1      	b.n	800391e <UART_CheckIdleState+0x34>

0800395a <HAL_UART_Init>:
  if(huart == NULL)
 800395a:	b378      	cbz	r0, 80039bc <HAL_UART_Init+0x62>
{
 800395c:	b510      	push	{r4, lr}
 800395e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003960:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003964:	b30b      	cbz	r3, 80039aa <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003966:	2324      	movs	r3, #36	; 0x24
 8003968:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003976:	4620      	mov	r0, r4
 8003978:	f7ff fe46 	bl	8003608 <UART_SetConfig>
 800397c:	2801      	cmp	r0, #1
 800397e:	d01f      	beq.n	80039c0 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003982:	b9bb      	cbnz	r3, 80039b4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003984:	6822      	ldr	r2, [r4, #0]
 8003986:	6853      	ldr	r3, [r2, #4]
 8003988:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800398c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	6893      	ldr	r3, [r2, #8]
 8003992:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003996:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7ff ffa1 	bl	80038ea <UART_CheckIdleState>
 80039a8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80039aa:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80039ae:	f001 fdc7 	bl	8005540 <HAL_UART_MspInit>
 80039b2:	e7d8      	b.n	8003966 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80039b4:	4620      	mov	r0, r4
 80039b6:	f7ff ff01 	bl	80037bc <UART_AdvFeatureConfig>
 80039ba:	e7e3      	b.n	8003984 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80039bc:	2001      	movs	r0, #1
 80039be:	4770      	bx	lr
}
 80039c0:	bd10      	pop	{r4, pc}

080039c2 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039c2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b21      	cmp	r3, #33	; 0x21
 80039ca:	d001      	beq.n	80039d0 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2002      	movs	r0, #2
  }
}
 80039ce:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80039d0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b193      	cbz	r3, 80039fe <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	6883      	ldr	r3, [r0, #8]
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d01a      	beq.n	8003a16 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80039e0:	6802      	ldr	r2, [r0, #0]
 80039e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80039e4:	1c59      	adds	r1, r3, #1
 80039e6:	64c1      	str	r1, [r0, #76]	; 0x4c
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80039ec:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 80039fa:	2000      	movs	r0, #0
 80039fc:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039fe:	6802      	ldr	r2, [r0, #0]
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a06:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a08:	6802      	ldr	r2, [r0, #0]
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a10:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8003a12:	2000      	movs	r0, #0
 8003a14:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a16:	6903      	ldr	r3, [r0, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e1      	bne.n	80039e0 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003a1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003a1e:	6802      	ldr	r2, [r0, #0]
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a26:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003a28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003a2e:	e7dd      	b.n	80039ec <UART_Transmit_IT+0x2a>

08003a30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a30:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a32:	6801      	ldr	r1, [r0, #0]
 8003a34:	680b      	ldr	r3, [r1, #0]
 8003a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a3a:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003a42:	f7ff fdd5 	bl	80035f0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8003a46:	2000      	movs	r0, #0
 8003a48:	bd08      	pop	{r3, pc}

08003a4a <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003a4a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a4e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b22      	cmp	r3, #34	; 0x22
 8003a56:	d006      	beq.n	8003a66 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a58:	6802      	ldr	r2, [r0, #0]
 8003a5a:	6993      	ldr	r3, [r2, #24]
 8003a5c:	f043 0308 	orr.w	r3, r3, #8
 8003a60:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8003a62:	2002      	movs	r0, #2
 8003a64:	4770      	bx	lr
{
 8003a66:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a68:	6803      	ldr	r3, [r0, #0]
 8003a6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a6c:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6e:	6881      	ldr	r1, [r0, #8]
 8003a70:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003a74:	d00f      	beq.n	8003a96 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a76:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8003a78:	1c4c      	adds	r4, r1, #1
 8003a7a:	6544      	str	r4, [r0, #84]	; 0x54
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	401a      	ands	r2, r3
 8003a80:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8003a82:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8003a90:	b15b      	cbz	r3, 8003aaa <UART_Receive_IT+0x60>
    return HAL_OK;
 8003a92:	2000      	movs	r0, #0
  }
}
 8003a94:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a96:	6901      	ldr	r1, [r0, #16]
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	d1ec      	bne.n	8003a76 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003a9c:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 8003aa2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	6543      	str	r3, [r0, #84]	; 0x54
 8003aa8:	e7eb      	b.n	8003a82 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aaa:	6802      	ldr	r2, [r0, #0]
 8003aac:	6813      	ldr	r3, [r2, #0]
 8003aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab2:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab4:	6802      	ldr	r2, [r0, #0]
 8003ab6:	6893      	ldr	r3, [r2, #8]
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003abe:	2320      	movs	r3, #32
 8003ac0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003ac4:	f000 fb90 	bl	80041e8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003ac8:	2000      	movs	r0, #0
 8003aca:	bd10      	pop	{r4, pc}

08003acc <HAL_UART_IRQHandler>:
{
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ad0:	6802      	ldr	r2, [r0, #0]
 8003ad2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ad4:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8003ad6:	f013 050f 	ands.w	r5, r3, #15
 8003ada:	d105      	bne.n	8003ae8 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003adc:	f013 0f20 	tst.w	r3, #32
 8003ae0:	d002      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x1c>
 8003ae2:	f011 0f20 	tst.w	r1, #32
 8003ae6:	d160      	bne.n	8003baa <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8003ae8:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8003aea:	2d00      	cmp	r5, #0
 8003aec:	d072      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003aee:	f010 0501 	ands.w	r5, r0, #1
 8003af2:	d102      	bne.n	8003afa <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003af4:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003af8:	d06c      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003afa:	f013 0f01 	tst.w	r3, #1
 8003afe:	d007      	beq.n	8003b10 <HAL_UART_IRQHandler+0x44>
 8003b00:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003b04:	d004      	beq.n	8003b10 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003b06:	2001      	movs	r0, #1
 8003b08:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b0a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003b0c:	4302      	orrs	r2, r0
 8003b0e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b10:	f013 0f02 	tst.w	r3, #2
 8003b14:	d007      	beq.n	8003b26 <HAL_UART_IRQHandler+0x5a>
 8003b16:	b135      	cbz	r5, 8003b26 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003b18:	6822      	ldr	r2, [r4, #0]
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b1e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003b20:	f042 0204 	orr.w	r2, r2, #4
 8003b24:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b26:	f013 0f04 	tst.w	r3, #4
 8003b2a:	d007      	beq.n	8003b3c <HAL_UART_IRQHandler+0x70>
 8003b2c:	b135      	cbz	r5, 8003b3c <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	2004      	movs	r0, #4
 8003b32:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b34:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003b36:	f042 0202 	orr.w	r2, r2, #2
 8003b3a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003b3c:	f013 0f08 	tst.w	r3, #8
 8003b40:	d009      	beq.n	8003b56 <HAL_UART_IRQHandler+0x8a>
 8003b42:	f011 0f20 	tst.w	r1, #32
 8003b46:	d100      	bne.n	8003b4a <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b48:	b12d      	cbz	r5, 8003b56 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	2008      	movs	r0, #8
 8003b4e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b50:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003b52:	4302      	orrs	r2, r0
 8003b54:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b56:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003b58:	2a00      	cmp	r2, #0
 8003b5a:	d04d      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b5c:	f013 0f20 	tst.w	r3, #32
 8003b60:	d002      	beq.n	8003b68 <HAL_UART_IRQHandler+0x9c>
 8003b62:	f011 0f20 	tst.w	r1, #32
 8003b66:	d123      	bne.n	8003bb0 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b6a:	f013 0f08 	tst.w	r3, #8
 8003b6e:	d104      	bne.n	8003b7a <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b74:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b78:	d026      	beq.n	8003bc8 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff fcad 	bl	80034da <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b88:	d01a      	beq.n	8003bc0 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b90:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b94:	b183      	cbz	r3, 8003bb8 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b96:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <HAL_UART_IRQHandler+0x158>)
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003b9c:	f7fd ff54 	bl	8001a48 <HAL_DMA_Abort_IT>
 8003ba0:	b350      	cbz	r0, 8003bf8 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ba2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003ba4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ba6:	4798      	blx	r3
 8003ba8:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8003baa:	f7ff ff4e 	bl	8003a4a <UART_Receive_IT>
      return;
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7ff ff4a 	bl	8003a4a <UART_Receive_IT>
 8003bb6:	e7d7      	b.n	8003b68 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f7ff fd1a 	bl	80035f2 <HAL_UART_ErrorCallback>
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7ff fd16 	bl	80035f2 <HAL_UART_ErrorCallback>
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff fd12 	bl	80035f2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003bd4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003bd8:	d002      	beq.n	8003be0 <HAL_UART_IRQHandler+0x114>
 8003bda:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003bde:	d10c      	bne.n	8003bfa <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003be0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003be4:	d002      	beq.n	8003bec <HAL_UART_IRQHandler+0x120>
 8003be6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003bea:	d112      	bne.n	8003c12 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bf0:	d002      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x12c>
 8003bf2:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003bf6:	d110      	bne.n	8003c1a <HAL_UART_IRQHandler+0x14e>
 8003bf8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003bfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bfe:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003c00:	2320      	movs	r3, #32
 8003c02:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003c06:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 f80c 	bl	8003c28 <HAL_UARTEx_WakeupCallback>
    return;
 8003c10:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff fed5 	bl	80039c2 <UART_Transmit_IT>
    return;
 8003c18:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff08 	bl	8003a30 <UART_EndTransmit_IT>
    return;
 8003c20:	e7ea      	b.n	8003bf8 <HAL_UART_IRQHandler+0x12c>
 8003c22:	bf00      	nop
 8003c24:	080035f5 	.word	0x080035f5

08003c28 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c28:	4770      	bx	lr
 8003c2a:	0000      	movs	r0, r0
 8003c2c:	0000      	movs	r0, r0
	...

08003c30 <adc_comms>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void adc_comms(){
 8003c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	adc_raw_voltage =  0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	4a5e      	ldr	r2, [pc, #376]	; (8003db0 <adc_comms+0x180>)
 8003c38:	6013      	str	r3, [r2, #0]
	adc_raw_current =	0;
 8003c3a:	4a5e      	ldr	r2, [pc, #376]	; (8003db4 <adc_comms+0x184>)
 8003c3c:	6013      	str	r3, [r2, #0]
	raw_ambient_temp = ADC1_buffer[0];
 8003c3e:	4b5e      	ldr	r3, [pc, #376]	; (8003db8 <adc_comms+0x188>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681c      	ldr	r4, [r3, #0]
 8003c44:	4a5d      	ldr	r2, [pc, #372]	; (8003dbc <adc_comms+0x18c>)
 8003c46:	6014      	str	r4, [r2, #0]
	raw_geyser_temp = ADC1_buffer[1];
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4b5d      	ldr	r3, [pc, #372]	; (8003dc0 <adc_comms+0x190>)
 8003c4c:	601a      	str	r2, [r3, #0]


	//Converting Voltage
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003c4e:	4d5d      	ldr	r5, [pc, #372]	; (8003dc4 <adc_comms+0x194>)
 8003c50:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003c54:	f7fc fc96 	bl	8000584 <__aeabi_ul2d>
 8003c58:	a351      	add	r3, pc, #324	; (adr r3, 8003da0 <adc_comms+0x170>)
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f7fc fb15 	bl	800028c <__adddf3>
 8003c62:	f7fc ffad 	bl	8000bc0 <__aeabi_d2ulz>
 8003c66:	e9c5 0100 	strd	r0, r1, [r5]

	//Converting Current
	adc_buffer_current = (pow((adc_raw_current-2072.202f)/0.14603f,2))+adc_buffer_current;
 8003c6a:	4d57      	ldr	r5, [pc, #348]	; (8003dc8 <adc_comms+0x198>)
 8003c6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003c70:	f7fc fc88 	bl	8000584 <__aeabi_ul2d>
 8003c74:	a34c      	add	r3, pc, #304	; (adr r3, 8003da8 <adc_comms+0x178>)
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f7fc fb07 	bl	800028c <__adddf3>
 8003c7e:	f7fc ff9f 	bl	8000bc0 <__aeabi_d2ulz>
 8003c82:	e9c5 0100 	strd	r0, r1, [r5]

	//Converting Ambient temperature
	if( (raw_ambient_temp-615)/12.3f < 100){
 8003c86:	f2a4 2467 	subw	r4, r4, #615	; 0x267
 8003c8a:	ee07 4a90 	vmov	s15, r4
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003dcc <adc_comms+0x19c>
 8003c96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c9a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003dd0 <adc_comms+0x1a0>
 8003c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca6:	d41b      	bmi.n	8003ce0 <adc_comms+0xb0>
		raw_ambient_temp = (raw_ambient_temp-615)/12.3f;
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-615)/12.3f < 100){
 8003ca8:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <adc_comms+0x190>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f2a3 2367 	subw	r3, r3, #615	; 0x267
 8003cb0:	ee07 3a90 	vmov	s15, r3
 8003cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb8:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003dcc <adc_comms+0x19c>
 8003cbc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003cc0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003dd0 <adc_comms+0x1a0>
 8003cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	d415      	bmi.n	8003cfa <adc_comms+0xca>
		raw_geyser_temp = (raw_geyser_temp-615)/12.3f;
		geyser_temp_int = raw_geyser_temp;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
	}

	adc_counter += 1;
 8003cce:	4a41      	ldr	r2, [pc, #260]	; (8003dd4 <adc_comms+0x1a4>)
 8003cd0:	8813      	ldrh	r3, [r2, #0]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	8013      	strh	r3, [r2, #0]
	if(adc_counter == 10){
 8003cd8:	2b0a      	cmp	r3, #10
 8003cda:	d01d      	beq.n	8003d18 <adc_comms+0xe8>
 8003cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		raw_ambient_temp = (raw_ambient_temp-615)/12.3f;
 8003ce0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003ce4:	ee17 2a90 	vmov	r2, s15
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <adc_comms+0x18c>)
 8003cea:	edc3 7a00 	vstr	s15, [r3]
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003cee:	493a      	ldr	r1, [pc, #232]	; (8003dd8 <adc_comms+0x1a8>)
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <adc_comms+0x1ac>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	f002 fab6 	bl	8006264 <siprintf>
 8003cf8:	e7d6      	b.n	8003ca8 <adc_comms+0x78>
		raw_geyser_temp = (raw_geyser_temp-615)/12.3f;
 8003cfa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003cfe:	ee17 2a90 	vmov	r2, s15
 8003d02:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <adc_comms+0x190>)
 8003d04:	edc3 7a00 	vstr	s15, [r3]
		geyser_temp_int = raw_geyser_temp;
 8003d08:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <adc_comms+0x1b0>)
 8003d0a:	701a      	strb	r2, [r3, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003d0c:	4932      	ldr	r1, [pc, #200]	; (8003dd8 <adc_comms+0x1a8>)
 8003d0e:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <adc_comms+0x1b4>)
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f002 faa7 	bl	8006264 <siprintf>
 8003d16:	e7da      	b.n	8003cce <adc_comms+0x9e>
		*voltage_int_rms = sqrt(adc_buffer_voltage/10);
 8003d18:	4e33      	ldr	r6, [pc, #204]	; (8003de8 <adc_comms+0x1b8>)
 8003d1a:	6834      	ldr	r4, [r6, #0]
 8003d1c:	4d29      	ldr	r5, [pc, #164]	; (8003dc4 <adc_comms+0x194>)
 8003d1e:	220a      	movs	r2, #10
 8003d20:	2300      	movs	r3, #0
 8003d22:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003d26:	f7fc ff33 	bl	8000b90 <__aeabi_uldivmod>
 8003d2a:	f7fc fc2b 	bl	8000584 <__aeabi_ul2d>
 8003d2e:	ec41 0b10 	vmov	d0, r0, r1
 8003d32:	f002 ff37 	bl	8006ba4 <sqrt>
 8003d36:	ec51 0b10 	vmov	r0, r1, d0
 8003d3a:	f7fc ff09 	bl	8000b50 <__aeabi_d2uiz>
 8003d3e:	6020      	str	r0, [r4, #0]
		*current_int_rms = sqrt(adc_buffer_current/10);
 8003d40:	4f2a      	ldr	r7, [pc, #168]	; (8003dec <adc_comms+0x1bc>)
 8003d42:	f8d7 8000 	ldr.w	r8, [r7]
 8003d46:	4c20      	ldr	r4, [pc, #128]	; (8003dc8 <adc_comms+0x198>)
 8003d48:	220a      	movs	r2, #10
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003d50:	f7fc ff1e 	bl	8000b90 <__aeabi_uldivmod>
 8003d54:	f7fc fc16 	bl	8000584 <__aeabi_ul2d>
 8003d58:	ec41 0b10 	vmov	d0, r0, r1
 8003d5c:	f002 ff22 	bl	8006ba4 <sqrt>
 8003d60:	ec51 0b10 	vmov	r0, r1, d0
 8003d64:	f7fc fef4 	bl	8000b50 <__aeabi_d2uiz>
 8003d68:	f8c8 0000 	str.w	r0, [r8]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8003d6c:	6833      	ldr	r3, [r6, #0]
 8003d6e:	4e1a      	ldr	r6, [pc, #104]	; (8003dd8 <adc_comms+0x1a8>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4631      	mov	r1, r6
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <adc_comms+0x1c0>)
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	f002 fa74 	bl	8006264 <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4631      	mov	r1, r6
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <adc_comms+0x1c4>)
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	f002 fa6d 	bl	8006264 <siprintf>
		adc_counter = 0;
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <adc_comms+0x1a4>)
 8003d8e:	801a      	strh	r2, [r3, #0]

		adc_buffer_voltage = 0;
 8003d90:	2200      	movs	r2, #0
 8003d92:	2300      	movs	r3, #0
 8003d94:	e9c5 2300 	strd	r2, r3, [r5]
		adc_buffer_current = 0;
 8003d98:	e9c4 2300 	strd	r2, r3, [r4]
	}
//	HAL_ADC_Stop_DMA(&hadc2);
}
 8003d9c:	e79e      	b.n	8003cdc <adc_comms+0xac>
 8003d9e:	bf00      	nop
 8003da0:	5cdb0320 	.word	0x5cdb0320
 8003da4:	422adab1 	.word	0x422adab1
 8003da8:	87438080 	.word	0x87438080
 8003dac:	41a8011d 	.word	0x41a8011d
 8003db0:	20000248 	.word	0x20000248
 8003db4:	20000244 	.word	0x20000244
 8003db8:	20000224 	.word	0x20000224
 8003dbc:	20000298 	.word	0x20000298
 8003dc0:	2000029c 	.word	0x2000029c
 8003dc4:	20000238 	.word	0x20000238
 8003dc8:	20000230 	.word	0x20000230
 8003dcc:	4144cccd 	.word	0x4144cccd
 8003dd0:	42c80000 	.word	0x42c80000
 8003dd4:	20000240 	.word	0x20000240
 8003dd8:	08006e1c 	.word	0x08006e1c
 8003ddc:	2000024c 	.word	0x2000024c
 8003de0:	20000274 	.word	0x20000274
 8003de4:	20000270 	.word	0x20000270
 8003de8:	200002d8 	.word	0x200002d8
 8003dec:	20000254 	.word	0x20000254
 8003df0:	200002dc 	.word	0x200002dc
 8003df4:	20000258 	.word	0x20000258

08003df8 <write2Flash>:
//#define memoryStartLoc (uint32_t*)0x0800 0000
//#define memoryStopLoc 0x0800 FFFF;


//static uint32_t *PageError = (uint32_t*)malloc(sizeof(uint32_t));
void write2Flash(){
 8003df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(log_counter < 100){
 8003dfc:	4baf      	ldr	r3, [pc, #700]	; (80040bc <write2Flash+0x2c4>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b63      	cmp	r3, #99	; 0x63
 8003e02:	d90b      	bls.n	8003e1c <write2Flash+0x24>
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 8003e04:	2232      	movs	r2, #50	; 0x32
 8003e06:	2100      	movs	r1, #0
 8003e08:	4bad      	ldr	r3, [pc, #692]	; (80040c0 <write2Flash+0x2c8>)
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	f002 f965 	bl	80060da <memset>


			log_counter += 1;
 8003e10:	4aaa      	ldr	r2, [pc, #680]	; (80040bc <write2Flash+0x2c4>)
 8003e12:	7813      	ldrb	r3, [r2, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	7013      	strb	r3, [r2, #0]
 8003e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8003e1c:	4fa9      	ldr	r7, [pc, #676]	; (80040c4 <write2Flash+0x2cc>)
 8003e1e:	4caa      	ldr	r4, [pc, #680]	; (80040c8 <write2Flash+0x2d0>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	6839      	ldr	r1, [r7, #0]
 8003e24:	4620      	mov	r0, r4
 8003e26:	f7ff f83e 	bl	8002ea6 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4ba7      	ldr	r3, [pc, #668]	; (80040cc <write2Flash+0x2d4>)
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7ff f863 	bl	8002efc <HAL_RTC_GetDate>
		itoa((time->Hours),temp_time_var,10  );
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	4ea5      	ldr	r6, [pc, #660]	; (80040d0 <write2Flash+0x2d8>)
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	6831      	ldr	r1, [r6, #0]
 8003e3e:	7818      	ldrb	r0, [r3, #0]
 8003e40:	f002 f936 	bl	80060b0 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003e44:	4c9e      	ldr	r4, [pc, #632]	; (80040c0 <write2Flash+0x2c8>)
 8003e46:	6825      	ldr	r5, [r4, #0]
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f7fc f9c1 	bl	80001d0 <strlen>
 8003e4e:	4405      	add	r5, r0
 8003e50:	f8d6 8000 	ldr.w	r8, [r6]
 8003e54:	4640      	mov	r0, r8
 8003e56:	f7fc f9bb 	bl	80001d0 <strlen>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f002 f930 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e64:	f8d4 8000 	ldr.w	r8, [r4]
 8003e68:	4640      	mov	r0, r8
 8003e6a:	f7fc f9b1 	bl	80001d0 <strlen>
 8003e6e:	4d99      	ldr	r5, [pc, #612]	; (80040d4 <write2Flash+0x2dc>)
 8003e70:	782b      	ldrb	r3, [r5, #0]
 8003e72:	f808 3000 	strb.w	r3, [r8, r0]
		itoa((time->Minutes),temp_time_var,10  );
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	220a      	movs	r2, #10
 8003e7a:	6831      	ldr	r1, [r6, #0]
 8003e7c:	7858      	ldrb	r0, [r3, #1]
 8003e7e:	f002 f917 	bl	80060b0 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003e82:	f8d4 8000 	ldr.w	r8, [r4]
 8003e86:	4640      	mov	r0, r8
 8003e88:	f7fc f9a2 	bl	80001d0 <strlen>
 8003e8c:	4480      	add	r8, r0
 8003e8e:	f8d6 9000 	ldr.w	r9, [r6]
 8003e92:	4648      	mov	r0, r9
 8003e94:	f7fc f99c 	bl	80001d0 <strlen>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	f002 f911 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003ea2:	f8d4 8000 	ldr.w	r8, [r4]
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	f7fc f992 	bl	80001d0 <strlen>
 8003eac:	782b      	ldrb	r3, [r5, #0]
 8003eae:	f808 3000 	strb.w	r3, [r8, r0]
		itoa((time->Seconds),temp_time_var,10  );
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	220a      	movs	r2, #10
 8003eb6:	6831      	ldr	r1, [r6, #0]
 8003eb8:	7898      	ldrb	r0, [r3, #2]
 8003eba:	f002 f8f9 	bl	80060b0 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003ebe:	6827      	ldr	r7, [r4, #0]
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	f7fc f985 	bl	80001d0 <strlen>
 8003ec6:	4407      	add	r7, r0
 8003ec8:	6836      	ldr	r6, [r6, #0]
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f7fc f980 	bl	80001d0 <strlen>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	f002 f8f5 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003eda:	6826      	ldr	r6, [r4, #0]
 8003edc:	4630      	mov	r0, r6
 8003ede:	f7fc f977 	bl	80001d0 <strlen>
 8003ee2:	782b      	ldrb	r3, [r5, #0]
 8003ee4:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 8003ee6:	6826      	ldr	r6, [r4, #0]
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f7fc f971 	bl	80001d0 <strlen>
 8003eee:	4406      	add	r6, r0
 8003ef0:	4b79      	ldr	r3, [pc, #484]	; (80040d8 <write2Flash+0x2e0>)
 8003ef2:	681f      	ldr	r7, [r3, #0]
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f7fc f96b 	bl	80001d0 <strlen>
 8003efa:	4602      	mov	r2, r0
 8003efc:	4639      	mov	r1, r7
 8003efe:	4630      	mov	r0, r6
 8003f00:	f002 f8e0 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003f04:	6826      	ldr	r6, [r4, #0]
 8003f06:	4630      	mov	r0, r6
 8003f08:	f7fc f962 	bl	80001d0 <strlen>
 8003f0c:	782b      	ldrb	r3, [r5, #0]
 8003f0e:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 8003f10:	6826      	ldr	r6, [r4, #0]
 8003f12:	4630      	mov	r0, r6
 8003f14:	f7fc f95c 	bl	80001d0 <strlen>
 8003f18:	4406      	add	r6, r0
 8003f1a:	4b70      	ldr	r3, [pc, #448]	; (80040dc <write2Flash+0x2e4>)
 8003f1c:	681f      	ldr	r7, [r3, #0]
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f7fc f956 	bl	80001d0 <strlen>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4639      	mov	r1, r7
 8003f28:	4630      	mov	r0, r6
 8003f2a:	f002 f8cb 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003f2e:	6826      	ldr	r6, [r4, #0]
 8003f30:	4630      	mov	r0, r6
 8003f32:	f7fc f94d 	bl	80001d0 <strlen>
 8003f36:	782b      	ldrb	r3, [r5, #0]
 8003f38:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 8003f3a:	6826      	ldr	r6, [r4, #0]
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f7fc f947 	bl	80001d0 <strlen>
 8003f42:	4406      	add	r6, r0
 8003f44:	4b66      	ldr	r3, [pc, #408]	; (80040e0 <write2Flash+0x2e8>)
 8003f46:	681f      	ldr	r7, [r3, #0]
 8003f48:	4638      	mov	r0, r7
 8003f4a:	f7fc f941 	bl	80001d0 <strlen>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4639      	mov	r1, r7
 8003f52:	4630      	mov	r0, r6
 8003f54:	f002 f8b6 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003f58:	6826      	ldr	r6, [r4, #0]
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f7fc f938 	bl	80001d0 <strlen>
 8003f60:	782b      	ldrb	r3, [r5, #0]
 8003f62:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8003f64:	6826      	ldr	r6, [r4, #0]
 8003f66:	4630      	mov	r0, r6
 8003f68:	f7fc f932 	bl	80001d0 <strlen>
 8003f6c:	4406      	add	r6, r0
 8003f6e:	4b5d      	ldr	r3, [pc, #372]	; (80040e4 <write2Flash+0x2ec>)
 8003f70:	681f      	ldr	r7, [r3, #0]
 8003f72:	4638      	mov	r0, r7
 8003f74:	f7fc f92c 	bl	80001d0 <strlen>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4639      	mov	r1, r7
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f002 f8a1 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003f82:	6826      	ldr	r6, [r4, #0]
 8003f84:	4630      	mov	r0, r6
 8003f86:	f7fc f923 	bl	80001d0 <strlen>
 8003f8a:	782b      	ldrb	r3, [r5, #0]
 8003f8c:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8003f8e:	6826      	ldr	r6, [r4, #0]
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7fc f91d 	bl	80001d0 <strlen>
 8003f96:	4406      	add	r6, r0
 8003f98:	4b53      	ldr	r3, [pc, #332]	; (80040e8 <write2Flash+0x2f0>)
 8003f9a:	681f      	ldr	r7, [r3, #0]
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f7fc f917 	bl	80001d0 <strlen>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4639      	mov	r1, r7
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f002 f88c 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003fac:	6826      	ldr	r6, [r4, #0]
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f7fc f90e 	bl	80001d0 <strlen>
 8003fb4:	782b      	ldrb	r3, [r5, #0]
 8003fb6:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 8003fb8:	6826      	ldr	r6, [r4, #0]
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f7fc f908 	bl	80001d0 <strlen>
 8003fc0:	4406      	add	r6, r0
 8003fc2:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <write2Flash+0x2f4>)
 8003fc4:	681f      	ldr	r7, [r3, #0]
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f7fc f902 	bl	80001d0 <strlen>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4639      	mov	r1, r7
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f002 f877 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003fd6:	6824      	ldr	r4, [r4, #0]
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7fc f8f9 	bl	80001d0 <strlen>
 8003fde:	782b      	ldrb	r3, [r5, #0]
 8003fe0:	5423      	strb	r3, [r4, r0]
		if(valve_state == valve_OPEN){
 8003fe2:	4b43      	ldr	r3, [pc, #268]	; (80040f0 <write2Flash+0x2f8>)
 8003fe4:	681d      	ldr	r5, [r3, #0]
 8003fe6:	4b43      	ldr	r3, [pc, #268]	; (80040f4 <write2Flash+0x2fc>)
 8003fe8:	429d      	cmp	r5, r3
 8003fea:	d057      	beq.n	800409c <write2Flash+0x2a4>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 8003fec:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <write2Flash+0x2c8>)
 8003fee:	681c      	ldr	r4, [r3, #0]
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7fc f8ed 	bl	80001d0 <strlen>
 8003ff6:	4404      	add	r4, r0
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f7fc f8e9 	bl	80001d0 <strlen>
 8003ffe:	4602      	mov	r2, r0
 8004000:	4629      	mov	r1, r5
 8004002:	4620      	mov	r0, r4
 8004004:	f002 f85e 	bl	80060c4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 8004008:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <write2Flash+0x2c8>)
 800400a:	681c      	ldr	r4, [r3, #0]
 800400c:	4620      	mov	r0, r4
 800400e:	f7fc f8df 	bl	80001d0 <strlen>
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <write2Flash+0x300>)
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	5223      	strh	r3, [r4, r0]
		if(log_counter == 0){
 8004018:	4b28      	ldr	r3, [pc, #160]	; (80040bc <write2Flash+0x2c4>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d07d      	beq.n	800411c <write2Flash+0x324>
			HAL_FLASH_Unlock();
 8004020:	f7fd fdbe 	bl	8001ba0 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008000, *((uint64_t*)(flash_stored)) );
 8004024:	4c26      	ldr	r4, [pc, #152]	; (80040c0 <write2Flash+0x2c8>)
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	4933      	ldr	r1, [pc, #204]	; (80040fc <write2Flash+0x304>)
 800402e:	2003      	movs	r0, #3
 8004030:	f7fd fe06 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008008, *((uint64_t*)(flash_stored+4)) );
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
 800403a:	4931      	ldr	r1, [pc, #196]	; (8004100 <write2Flash+0x308>)
 800403c:	2003      	movs	r0, #3
 800403e:	f7fd fdff 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008010, *((uint64_t*)(flash_stored+8)) );
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004048:	492e      	ldr	r1, [pc, #184]	; (8004104 <write2Flash+0x30c>)
 800404a:	2003      	movs	r0, #3
 800404c:	f7fd fdf8 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008018, *((uint64_t*)(flash_stored+32)) );
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004056:	492c      	ldr	r1, [pc, #176]	; (8004108 <write2Flash+0x310>)
 8004058:	2003      	movs	r0, #3
 800405a:	f7fd fdf1 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008020, *((uint64_t*)(flash_stored+40)) );
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004064:	4929      	ldr	r1, [pc, #164]	; (800410c <write2Flash+0x314>)
 8004066:	2003      	movs	r0, #3
 8004068:	f7fd fdea 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008028, *((uint64_t*)(flash_stored+48)) );
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004072:	4927      	ldr	r1, [pc, #156]	; (8004110 <write2Flash+0x318>)
 8004074:	2003      	movs	r0, #3
 8004076:	f7fd fde3 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008030, *((uint64_t*)(flash_stored+56)) );
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004080:	4924      	ldr	r1, [pc, #144]	; (8004114 <write2Flash+0x31c>)
 8004082:	2003      	movs	r0, #3
 8004084:	f7fd fddc 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008038, *((uint64_t*)(flash_stored+64)) );
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800408e:	4922      	ldr	r1, [pc, #136]	; (8004118 <write2Flash+0x320>)
 8004090:	2003      	movs	r0, #3
 8004092:	f7fd fdd5 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8004096:	f7fd fd97 	bl	8001bc8 <HAL_FLASH_Lock>
 800409a:	e6b3      	b.n	8003e04 <write2Flash+0xc>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <write2Flash+0x2c8>)
 800409e:	681c      	ldr	r4, [r3, #0]
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7fc f895 	bl	80001d0 <strlen>
 80040a6:	4404      	add	r4, r0
 80040a8:	4628      	mov	r0, r5
 80040aa:	f7fc f891 	bl	80001d0 <strlen>
 80040ae:	1e42      	subs	r2, r0, #1
 80040b0:	4629      	mov	r1, r5
 80040b2:	4620      	mov	r0, r4
 80040b4:	f002 f806 	bl	80060c4 <memcpy>
 80040b8:	e7a6      	b.n	8004008 <write2Flash+0x210>
 80040ba:	bf00      	nop
 80040bc:	2000028c 	.word	0x2000028c
 80040c0:	2000026c 	.word	0x2000026c
 80040c4:	200002bc 	.word	0x200002bc
 80040c8:	20000470 	.word	0x20000470
 80040cc:	2000025c 	.word	0x2000025c
 80040d0:	200002b4 	.word	0x200002b4
 80040d4:	20000004 	.word	0x20000004
 80040d8:	20000258 	.word	0x20000258
 80040dc:	200002dc 	.word	0x200002dc
 80040e0:	2000024c 	.word	0x2000024c
 80040e4:	20000270 	.word	0x20000270
 80040e8:	200002c0 	.word	0x200002c0
 80040ec:	20000284 	.word	0x20000284
 80040f0:	200002d4 	.word	0x200002d4
 80040f4:	2000002c 	.word	0x2000002c
 80040f8:	20000008 	.word	0x20000008
 80040fc:	08008000 	.word	0x08008000
 8004100:	08008008 	.word	0x08008008
 8004104:	08008010 	.word	0x08008010
 8004108:	08008018 	.word	0x08008018
 800410c:	08008020 	.word	0x08008020
 8004110:	08008028 	.word	0x08008028
 8004114:	08008030 	.word	0x08008030
 8004118:	08008038 	.word	0x08008038
			HAL_FLASH_Unlock();
 800411c:	f7fd fd40 	bl	8001ba0 <HAL_FLASH_Unlock>
			pEraseInit->NbPages = 1;
 8004120:	4a26      	ldr	r2, [pc, #152]	; (80041bc <write2Flash+0x3c4>)
 8004122:	6813      	ldr	r3, [r2, #0]
 8004124:	2101      	movs	r1, #1
 8004126:	6099      	str	r1, [r3, #8]
			pEraseInit->PageAddress = (uint32_t)(0x08008000);
 8004128:	4d25      	ldr	r5, [pc, #148]	; (80041c0 <write2Flash+0x3c8>)
 800412a:	605d      	str	r5, [r3, #4]
			pEraseInit->TypeErase = (uint32_t)FLASH_TYPEERASE_PAGES;
 800412c:	2100      	movs	r1, #0
 800412e:	6019      	str	r1, [r3, #0]
			HAL_FLASHEx_Erase(pEraseInit,flash_error);
 8004130:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <write2Flash+0x3cc>)
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	6810      	ldr	r0, [r2, #0]
 8004136:	f7fd fdf5 	bl	8001d24 <HAL_FLASHEx_Erase>
			HAL_FLASH_Lock();
 800413a:	f7fd fd45 	bl	8001bc8 <HAL_FLASH_Lock>
			HAL_FLASH_Unlock();
 800413e:	f7fd fd2f 	bl	8001ba0 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008000, *((uint64_t*)(flash_stored)) );
 8004142:	4c21      	ldr	r4, [pc, #132]	; (80041c8 <write2Flash+0x3d0>)
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	4629      	mov	r1, r5
 800414c:	2003      	movs	r0, #3
 800414e:	f7fd fd77 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008008, *((uint64_t*)(flash_stored)+1) );
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004158:	491c      	ldr	r1, [pc, #112]	; (80041cc <write2Flash+0x3d4>)
 800415a:	2003      	movs	r0, #3
 800415c:	f7fd fd70 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008010, *((uint64_t*)(flash_stored)+2) );
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004166:	491a      	ldr	r1, [pc, #104]	; (80041d0 <write2Flash+0x3d8>)
 8004168:	2003      	movs	r0, #3
 800416a:	f7fd fd69 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008018, *((uint64_t*)(flash_stored)+3) );
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004174:	4917      	ldr	r1, [pc, #92]	; (80041d4 <write2Flash+0x3dc>)
 8004176:	2003      	movs	r0, #3
 8004178:	f7fd fd62 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008020, *((uint64_t*)(flash_stored)+4) );
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004182:	4915      	ldr	r1, [pc, #84]	; (80041d8 <write2Flash+0x3e0>)
 8004184:	2003      	movs	r0, #3
 8004186:	f7fd fd5b 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008028, *((uint64_t*)(flash_stored)+5) );
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004190:	4912      	ldr	r1, [pc, #72]	; (80041dc <write2Flash+0x3e4>)
 8004192:	2003      	movs	r0, #3
 8004194:	f7fd fd54 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008030, *((uint64_t*)(flash_stored)+6) );
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800419e:	4910      	ldr	r1, [pc, #64]	; (80041e0 <write2Flash+0x3e8>)
 80041a0:	2003      	movs	r0, #3
 80041a2:	f7fd fd4d 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008038, *((uint64_t*)(flash_stored)+7) );
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80041ac:	490d      	ldr	r1, [pc, #52]	; (80041e4 <write2Flash+0x3ec>)
 80041ae:	2003      	movs	r0, #3
 80041b0:	f7fd fd46 	bl	8001c40 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80041b4:	f7fd fd08 	bl	8001bc8 <HAL_FLASH_Lock>
 80041b8:	e624      	b.n	8003e04 <write2Flash+0xc>
 80041ba:	bf00      	nop
 80041bc:	20000294 	.word	0x20000294
 80041c0:	08008000 	.word	0x08008000
 80041c4:	20000268 	.word	0x20000268
 80041c8:	2000026c 	.word	0x2000026c
 80041cc:	08008008 	.word	0x08008008
 80041d0:	08008010 	.word	0x08008010
 80041d4:	08008018 	.word	0x08008018
 80041d8:	08008020 	.word	0x08008020
 80041dc:	08008028 	.word	0x08008028
 80041e0:	08008030 	.word	0x08008030
 80041e4:	08008038 	.word	0x08008038

080041e8 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80041e8:	b508      	push	{r3, lr}
	rx_flag = 1;
 80041ea:	2201      	movs	r2, #1
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_UART_RxCpltCallback+0x14>)
 80041ee:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80041f0:	4903      	ldr	r1, [pc, #12]	; (8004200 <HAL_UART_RxCpltCallback+0x18>)
 80041f2:	4804      	ldr	r0, [pc, #16]	; (8004204 <HAL_UART_RxCpltCallback+0x1c>)
 80041f4:	f7ff f9a5 	bl	8003542 <HAL_UART_Receive_IT>
 80041f8:	bd08      	pop	{r3, pc}
 80041fa:	bf00      	nop
 80041fc:	200002a5 	.word	0x200002a5
 8004200:	200005ac 	.word	0x200005ac
 8004204:	20000400 	.word	0x20000400

08004208 <HAL_ADC_ConvCpltCallback>:

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 8004208:	2201      	movs	r2, #1
 800420a:	4b01      	ldr	r3, [pc, #4]	; (8004210 <HAL_ADC_ConvCpltCallback+0x8>)
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	4770      	bx	lr
 8004210:	20000242 	.word	0x20000242

08004214 <HAL_TIM_IC_CaptureCallback>:
	(&hadc2);
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8004214:	2201      	movs	r2, #1
 8004216:	4b01      	ldr	r3, [pc, #4]	; (800421c <HAL_TIM_IC_CaptureCallback+0x8>)
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	4770      	bx	lr
 800421c:	200002b9 	.word	0x200002b9

08004220 <HAL_RTCEx_WakeUpTimerEventCallback>:
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 8004220:	2201      	movs	r2, #1
 8004222:	4b01      	ldr	r3, [pc, #4]	; (8004228 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	4770      	bx	lr
 8004228:	200002a4 	.word	0x200002a4

0800422c <heating_scheduling>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;


void heating_scheduling(){
 800422c:	b538      	push	{r3, r4, r5, lr}


	if(auto_heating == 1){
 800422e:	4b9e      	ldr	r3, [pc, #632]	; (80044a8 <heating_scheduling+0x27c>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d000      	beq.n	8004238 <heating_scheduling+0xc>
 8004236:	bd38      	pop	{r3, r4, r5, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004238:	4c9c      	ldr	r4, [pc, #624]	; (80044ac <heating_scheduling+0x280>)
 800423a:	4d9d      	ldr	r5, [pc, #628]	; (80044b0 <heating_scheduling+0x284>)
 800423c:	2200      	movs	r2, #0
 800423e:	6821      	ldr	r1, [r4, #0]
 8004240:	4628      	mov	r0, r5
 8004242:	f7fe fe30 	bl	8002ea6 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8004246:	2200      	movs	r2, #0
 8004248:	4b9a      	ldr	r3, [pc, #616]	; (80044b4 <heating_scheduling+0x288>)
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	4628      	mov	r0, r5
 800424e:	f7fe fe55 	bl	8002efc <HAL_RTC_GetDate>


		// checking heating schedule 1
		if( (time->Hours - heating_schedule[0].Hours) > 0 && (time->Hours - heating_schedule[1].Hours) < 0){
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	7813      	ldrb	r3, [r2, #0]
 8004256:	4998      	ldr	r1, [pc, #608]	; (80044b8 <heating_scheduling+0x28c>)
 8004258:	7809      	ldrb	r1, [r1, #0]
 800425a:	1a58      	subs	r0, r3, r1
 800425c:	2800      	cmp	r0, #0
 800425e:	dd04      	ble.n	800426a <heating_scheduling+0x3e>
 8004260:	4895      	ldr	r0, [pc, #596]	; (80044b8 <heating_scheduling+0x28c>)
 8004262:	7d00      	ldrb	r0, [r0, #20]
 8004264:	1a18      	subs	r0, r3, r0
 8004266:	2800      	cmp	r0, #0
 8004268:	db50      	blt.n	800430c <heating_scheduling+0xe0>
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}

		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 800426a:	428b      	cmp	r3, r1
 800426c:	d058      	beq.n	8004320 <heating_scheduling+0xf4>
 800426e:	4892      	ldr	r0, [pc, #584]	; (80044b8 <heating_scheduling+0x28c>)
 8004270:	7d00      	ldrb	r0, [r0, #20]
 8004272:	4283      	cmp	r3, r0
 8004274:	d054      	beq.n	8004320 <heating_scheduling+0xf4>
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}
		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 8004276:	428b      	cmp	r3, r1
 8004278:	d067      	beq.n	800434a <heating_scheduling+0x11e>
 800427a:	498f      	ldr	r1, [pc, #572]	; (80044b8 <heating_scheduling+0x28c>)
 800427c:	7d09      	ldrb	r1, [r1, #20]
 800427e:	428b      	cmp	r3, r1
 8004280:	d063      	beq.n	800434a <heating_scheduling+0x11e>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}

		// checking schedule 2

		else if( (time->Hours - heating_schedule[2].Hours) > 0 && (time->Hours - heating_schedule[3].Hours) < 0){
 8004282:	498d      	ldr	r1, [pc, #564]	; (80044b8 <heating_scheduling+0x28c>)
 8004284:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004288:	1a58      	subs	r0, r3, r1
 800428a:	2800      	cmp	r0, #0
 800428c:	dd05      	ble.n	800429a <heating_scheduling+0x6e>
 800428e:	488a      	ldr	r0, [pc, #552]	; (80044b8 <heating_scheduling+0x28c>)
 8004290:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8004294:	1a18      	subs	r0, r3, r0
 8004296:	2800      	cmp	r0, #0
 8004298:	db75      	blt.n	8004386 <heating_scheduling+0x15a>
					heater_state = heater_ON;
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}

		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 800429a:	428b      	cmp	r3, r1
 800429c:	d07d      	beq.n	800439a <heating_scheduling+0x16e>
 800429e:	4886      	ldr	r0, [pc, #536]	; (80044b8 <heating_scheduling+0x28c>)
 80042a0:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80042a4:	4283      	cmp	r3, r0
 80042a6:	d078      	beq.n	800439a <heating_scheduling+0x16e>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}
		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 80042a8:	428b      	cmp	r3, r1
 80042aa:	f000 808f 	beq.w	80043cc <heating_scheduling+0x1a0>
 80042ae:	4982      	ldr	r1, [pc, #520]	; (80044b8 <heating_scheduling+0x28c>)
 80042b0:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 80042b4:	428b      	cmp	r3, r1
 80042b6:	f000 8089 	beq.w	80043cc <heating_scheduling+0x1a0>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}
		// checking schedule 3
		else if( (time->Hours - heating_schedule[4].Hours) > 0 && (time->Hours - heating_schedule[5].Hours) < 0){
 80042ba:	497f      	ldr	r1, [pc, #508]	; (80044b8 <heating_scheduling+0x28c>)
 80042bc:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 80042c0:	1a58      	subs	r0, r3, r1
 80042c2:	2800      	cmp	r0, #0
 80042c4:	dd06      	ble.n	80042d4 <heating_scheduling+0xa8>
 80042c6:	487c      	ldr	r0, [pc, #496]	; (80044b8 <heating_scheduling+0x28c>)
 80042c8:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 80042cc:	1a18      	subs	r0, r3, r0
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f2c0 80a1 	blt.w	8004416 <heating_scheduling+0x1ea>
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}

		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 80042d4:	428b      	cmp	r3, r1
 80042d6:	f000 80a8 	beq.w	800442a <heating_scheduling+0x1fe>
 80042da:	4877      	ldr	r0, [pc, #476]	; (80044b8 <heating_scheduling+0x28c>)
 80042dc:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 80042e0:	4283      	cmp	r3, r0
 80042e2:	f000 80a2 	beq.w	800442a <heating_scheduling+0x1fe>
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}
		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 80042e6:	428b      	cmp	r3, r1
 80042e8:	f000 80b8 	beq.w	800445c <heating_scheduling+0x230>
 80042ec:	4972      	ldr	r1, [pc, #456]	; (80044b8 <heating_scheduling+0x28c>)
 80042ee:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
 80042f2:	428b      	cmp	r3, r1
 80042f4:	f000 80b2 	beq.w	800445c <heating_scheduling+0x230>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}
		else{
			heater_state = heater_OFF;
 80042f8:	4a70      	ldr	r2, [pc, #448]	; (80044bc <heating_scheduling+0x290>)
 80042fa:	4b71      	ldr	r3, [pc, #452]	; (80044c0 <heating_scheduling+0x294>)
 80042fc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80042fe:	2201      	movs	r2, #1
 8004300:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004304:	486f      	ldr	r0, [pc, #444]	; (80044c4 <heating_scheduling+0x298>)
 8004306:	f7fd fe29 	bl	8001f5c <HAL_GPIO_WritePin>
		}
	}
}
 800430a:	e794      	b.n	8004236 <heating_scheduling+0xa>
			heater_state = heater_ON;
 800430c:	4a6e      	ldr	r2, [pc, #440]	; (80044c8 <heating_scheduling+0x29c>)
 800430e:	4b6c      	ldr	r3, [pc, #432]	; (80044c0 <heating_scheduling+0x294>)
 8004310:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004312:	2200      	movs	r2, #0
 8004314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004318:	486a      	ldr	r0, [pc, #424]	; (80044c4 <heating_scheduling+0x298>)
 800431a:	f7fd fe1f 	bl	8001f5c <HAL_GPIO_WritePin>
 800431e:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 8004320:	7850      	ldrb	r0, [r2, #1]
 8004322:	4c65      	ldr	r4, [pc, #404]	; (80044b8 <heating_scheduling+0x28c>)
 8004324:	7864      	ldrb	r4, [r4, #1]
 8004326:	1b04      	subs	r4, r0, r4
 8004328:	2c00      	cmp	r4, #0
 800432a:	dda4      	ble.n	8004276 <heating_scheduling+0x4a>
 800432c:	4c62      	ldr	r4, [pc, #392]	; (80044b8 <heating_scheduling+0x28c>)
 800432e:	7d64      	ldrb	r4, [r4, #21]
 8004330:	1b00      	subs	r0, r0, r4
 8004332:	2800      	cmp	r0, #0
 8004334:	da9f      	bge.n	8004276 <heating_scheduling+0x4a>
			heater_state = heater_ON;
 8004336:	4a64      	ldr	r2, [pc, #400]	; (80044c8 <heating_scheduling+0x29c>)
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <heating_scheduling+0x294>)
 800433a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800433c:	2200      	movs	r2, #0
 800433e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004342:	4860      	ldr	r0, [pc, #384]	; (80044c4 <heating_scheduling+0x298>)
 8004344:	f7fd fe0a 	bl	8001f5c <HAL_GPIO_WritePin>
 8004348:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[0].Minutes == 0) || (time->Minutes - heating_schedule[1].Minutes == 0) )
 800434a:	7851      	ldrb	r1, [r2, #1]
 800434c:	485a      	ldr	r0, [pc, #360]	; (80044b8 <heating_scheduling+0x28c>)
 800434e:	7840      	ldrb	r0, [r0, #1]
 8004350:	4281      	cmp	r1, r0
 8004352:	d003      	beq.n	800435c <heating_scheduling+0x130>
 8004354:	4858      	ldr	r0, [pc, #352]	; (80044b8 <heating_scheduling+0x28c>)
 8004356:	7d40      	ldrb	r0, [r0, #21]
 8004358:	4281      	cmp	r1, r0
 800435a:	d192      	bne.n	8004282 <heating_scheduling+0x56>
				&& ( (time->Seconds - heating_schedule[0].Seconds > 0) && (time->Seconds - heating_schedule[1].Seconds < 0) ) ){
 800435c:	7891      	ldrb	r1, [r2, #2]
 800435e:	4856      	ldr	r0, [pc, #344]	; (80044b8 <heating_scheduling+0x28c>)
 8004360:	7880      	ldrb	r0, [r0, #2]
 8004362:	1a08      	subs	r0, r1, r0
 8004364:	2800      	cmp	r0, #0
 8004366:	dd8c      	ble.n	8004282 <heating_scheduling+0x56>
 8004368:	4853      	ldr	r0, [pc, #332]	; (80044b8 <heating_scheduling+0x28c>)
 800436a:	7d80      	ldrb	r0, [r0, #22]
 800436c:	1a09      	subs	r1, r1, r0
 800436e:	2900      	cmp	r1, #0
 8004370:	da87      	bge.n	8004282 <heating_scheduling+0x56>
			heater_state = heater_ON;
 8004372:	4a55      	ldr	r2, [pc, #340]	; (80044c8 <heating_scheduling+0x29c>)
 8004374:	4b52      	ldr	r3, [pc, #328]	; (80044c0 <heating_scheduling+0x294>)
 8004376:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004378:	2200      	movs	r2, #0
 800437a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800437e:	4851      	ldr	r0, [pc, #324]	; (80044c4 <heating_scheduling+0x298>)
 8004380:	f7fd fdec 	bl	8001f5c <HAL_GPIO_WritePin>
 8004384:	bd38      	pop	{r3, r4, r5, pc}
					heater_state = heater_ON;
 8004386:	4a50      	ldr	r2, [pc, #320]	; (80044c8 <heating_scheduling+0x29c>)
 8004388:	4b4d      	ldr	r3, [pc, #308]	; (80044c0 <heating_scheduling+0x294>)
 800438a:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800438c:	2200      	movs	r2, #0
 800438e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004392:	484c      	ldr	r0, [pc, #304]	; (80044c4 <heating_scheduling+0x298>)
 8004394:	f7fd fde2 	bl	8001f5c <HAL_GPIO_WritePin>
 8004398:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 800439a:	7850      	ldrb	r0, [r2, #1]
 800439c:	4c46      	ldr	r4, [pc, #280]	; (80044b8 <heating_scheduling+0x28c>)
 800439e:	f894 4029 	ldrb.w	r4, [r4, #41]	; 0x29
 80043a2:	1b04      	subs	r4, r0, r4
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	f77f af7f 	ble.w	80042a8 <heating_scheduling+0x7c>
 80043aa:	4c43      	ldr	r4, [pc, #268]	; (80044b8 <heating_scheduling+0x28c>)
 80043ac:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
 80043b0:	1b00      	subs	r0, r0, r4
 80043b2:	2800      	cmp	r0, #0
 80043b4:	f6bf af78 	bge.w	80042a8 <heating_scheduling+0x7c>
			heater_state = heater_ON;
 80043b8:	4a43      	ldr	r2, [pc, #268]	; (80044c8 <heating_scheduling+0x29c>)
 80043ba:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <heating_scheduling+0x294>)
 80043bc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80043be:	2200      	movs	r2, #0
 80043c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043c4:	483f      	ldr	r0, [pc, #252]	; (80044c4 <heating_scheduling+0x298>)
 80043c6:	f7fd fdc9 	bl	8001f5c <HAL_GPIO_WritePin>
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[2].Minutes == 0) || (time->Minutes - heating_schedule[3].Minutes == 0) )
 80043cc:	7851      	ldrb	r1, [r2, #1]
 80043ce:	483a      	ldr	r0, [pc, #232]	; (80044b8 <heating_scheduling+0x28c>)
 80043d0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80043d4:	4281      	cmp	r1, r0
 80043d6:	d005      	beq.n	80043e4 <heating_scheduling+0x1b8>
 80043d8:	4837      	ldr	r0, [pc, #220]	; (80044b8 <heating_scheduling+0x28c>)
 80043da:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80043de:	4281      	cmp	r1, r0
 80043e0:	f47f af6b 	bne.w	80042ba <heating_scheduling+0x8e>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
 80043e4:	7891      	ldrb	r1, [r2, #2]
 80043e6:	4834      	ldr	r0, [pc, #208]	; (80044b8 <heating_scheduling+0x28c>)
 80043e8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 80043ec:	1a08      	subs	r0, r1, r0
 80043ee:	2800      	cmp	r0, #0
 80043f0:	f77f af63 	ble.w	80042ba <heating_scheduling+0x8e>
 80043f4:	4830      	ldr	r0, [pc, #192]	; (80044b8 <heating_scheduling+0x28c>)
 80043f6:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80043fa:	1a09      	subs	r1, r1, r0
 80043fc:	2900      	cmp	r1, #0
 80043fe:	f6bf af5c 	bge.w	80042ba <heating_scheduling+0x8e>
			heater_state = heater_ON;
 8004402:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <heating_scheduling+0x29c>)
 8004404:	4b2e      	ldr	r3, [pc, #184]	; (80044c0 <heating_scheduling+0x294>)
 8004406:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004408:	2200      	movs	r2, #0
 800440a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800440e:	482d      	ldr	r0, [pc, #180]	; (80044c4 <heating_scheduling+0x298>)
 8004410:	f7fd fda4 	bl	8001f5c <HAL_GPIO_WritePin>
 8004414:	bd38      	pop	{r3, r4, r5, pc}
			heater_state = heater_ON;
 8004416:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <heating_scheduling+0x29c>)
 8004418:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <heating_scheduling+0x294>)
 800441a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800441c:	2200      	movs	r2, #0
 800441e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004422:	4828      	ldr	r0, [pc, #160]	; (80044c4 <heating_scheduling+0x298>)
 8004424:	f7fd fd9a 	bl	8001f5c <HAL_GPIO_WritePin>
 8004428:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 800442a:	7850      	ldrb	r0, [r2, #1]
 800442c:	4c22      	ldr	r4, [pc, #136]	; (80044b8 <heating_scheduling+0x28c>)
 800442e:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
 8004432:	1b04      	subs	r4, r0, r4
 8004434:	2c00      	cmp	r4, #0
 8004436:	f77f af56 	ble.w	80042e6 <heating_scheduling+0xba>
 800443a:	4c1f      	ldr	r4, [pc, #124]	; (80044b8 <heating_scheduling+0x28c>)
 800443c:	f894 4065 	ldrb.w	r4, [r4, #101]	; 0x65
 8004440:	1b00      	subs	r0, r0, r4
 8004442:	2800      	cmp	r0, #0
 8004444:	f6bf af4f 	bge.w	80042e6 <heating_scheduling+0xba>
			heater_state = heater_ON;
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <heating_scheduling+0x29c>)
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <heating_scheduling+0x294>)
 800444c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800444e:	2200      	movs	r2, #0
 8004450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004454:	481b      	ldr	r0, [pc, #108]	; (80044c4 <heating_scheduling+0x298>)
 8004456:	f7fd fd81 	bl	8001f5c <HAL_GPIO_WritePin>
 800445a:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[4].Minutes == 0) || (time->Minutes - heating_schedule[5].Minutes == 0) )
 800445c:	7853      	ldrb	r3, [r2, #1]
 800445e:	4916      	ldr	r1, [pc, #88]	; (80044b8 <heating_scheduling+0x28c>)
 8004460:	f891 1051 	ldrb.w	r1, [r1, #81]	; 0x51
 8004464:	428b      	cmp	r3, r1
 8004466:	d005      	beq.n	8004474 <heating_scheduling+0x248>
 8004468:	4913      	ldr	r1, [pc, #76]	; (80044b8 <heating_scheduling+0x28c>)
 800446a:	f891 1065 	ldrb.w	r1, [r1, #101]	; 0x65
 800446e:	428b      	cmp	r3, r1
 8004470:	f47f af42 	bne.w	80042f8 <heating_scheduling+0xcc>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
 8004474:	7893      	ldrb	r3, [r2, #2]
 8004476:	4a10      	ldr	r2, [pc, #64]	; (80044b8 <heating_scheduling+0x28c>)
 8004478:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800447c:	1a9a      	subs	r2, r3, r2
 800447e:	2a00      	cmp	r2, #0
 8004480:	f77f af3a 	ble.w	80042f8 <heating_scheduling+0xcc>
 8004484:	4a0c      	ldr	r2, [pc, #48]	; (80044b8 <heating_scheduling+0x28c>)
 8004486:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f6bf af33 	bge.w	80042f8 <heating_scheduling+0xcc>
			heater_state = heater_ON;
 8004492:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <heating_scheduling+0x29c>)
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <heating_scheduling+0x294>)
 8004496:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004498:	2200      	movs	r2, #0
 800449a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800449e:	4809      	ldr	r0, [pc, #36]	; (80044c4 <heating_scheduling+0x298>)
 80044a0:	f7fd fd5c 	bl	8001f5c <HAL_GPIO_WritePin>
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
 80044a6:	bf00      	nop
 80044a8:	20000250 	.word	0x20000250
 80044ac:	200002bc 	.word	0x200002bc
 80044b0:	20000470 	.word	0x20000470
 80044b4:	2000025c 	.word	0x2000025c
 80044b8:	20000530 	.word	0x20000530
 80044bc:	20000014 	.word	0x20000014
 80044c0:	20000284 	.word	0x20000284
 80044c4:	48000400 	.word	0x48000400
 80044c8:	20000018 	.word	0x20000018

080044cc <init_peripherals>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 80044cc:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 80044ce:	2201      	movs	r2, #1
 80044d0:	2120      	movs	r1, #32
 80044d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044d6:	f7fd fd41 	bl	8001f5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 80044da:	2201      	movs	r2, #1
 80044dc:	2180      	movs	r1, #128	; 0x80
 80044de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044e2:	f7fd fd3b 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 80044e6:	2201      	movs	r2, #1
 80044e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044f0:	f7fd fd34 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80044f4:	2201      	movs	r2, #1
 80044f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044fe:	f7fd fd2d 	bl	8001f5c <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004502:	4c88      	ldr	r4, [pc, #544]	; (8004724 <init_peripherals+0x258>)
 8004504:	2201      	movs	r2, #1
 8004506:	2108      	movs	r1, #8
 8004508:	4620      	mov	r0, r4
 800450a:	f7fd fd27 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 800450e:	2201      	movs	r2, #1
 8004510:	2110      	movs	r1, #16
 8004512:	4620      	mov	r0, r4
 8004514:	f7fd fd22 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004518:	2201      	movs	r2, #1
 800451a:	2120      	movs	r1, #32
 800451c:	4620      	mov	r0, r4
 800451e:	f7fd fd1d 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 8004522:	2201      	movs	r2, #1
 8004524:	2140      	movs	r1, #64	; 0x40
 8004526:	4620      	mov	r0, r4
 8004528:	f7fd fd18 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 800452c:	2201      	movs	r2, #1
 800452e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004532:	4620      	mov	r0, r4
 8004534:	f7fd fd12 	bl	8001f5c <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 8004538:	2201      	movs	r2, #1
 800453a:	2180      	movs	r1, #128	; 0x80
 800453c:	487a      	ldr	r0, [pc, #488]	; (8004728 <init_peripherals+0x25c>)
 800453e:	f7fd fd0d 	bl	8001f5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 8004542:	2200      	movs	r2, #0
 8004544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004548:	4620      	mov	r0, r4
 800454a:	f7fd fd07 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 800454e:	2201      	movs	r2, #1
 8004550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004554:	4620      	mov	r0, r4
 8004556:	f7fd fd01 	bl	8001f5c <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 800455a:	200f      	movs	r0, #15
 800455c:	f001 fdaa 	bl	80060b4 <malloc>
 8004560:	4b72      	ldr	r3, [pc, #456]	; (800472c <init_peripherals+0x260>)
 8004562:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 8004564:	2400      	movs	r4, #0
 8004566:	6004      	str	r4, [r0, #0]
 8004568:	6044      	str	r4, [r0, #4]
 800456a:	6084      	str	r4, [r0, #8]
 800456c:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8004570:	2032      	movs	r0, #50	; 0x32
 8004572:	f001 fd9f 	bl	80060b4 <malloc>
 8004576:	4b6e      	ldr	r3, [pc, #440]	; (8004730 <init_peripherals+0x264>)
 8004578:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 800457a:	2232      	movs	r2, #50	; 0x32
 800457c:	4621      	mov	r1, r4
 800457e:	f001 fdac 	bl	80060da <memset>

	uart_command = (uint8_t*)malloc(60);
 8004582:	203c      	movs	r0, #60	; 0x3c
 8004584:	f001 fd96 	bl	80060b4 <malloc>
 8004588:	4e6a      	ldr	r6, [pc, #424]	; (8004734 <init_peripherals+0x268>)
 800458a:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 800458c:	253c      	movs	r5, #60	; 0x3c
 800458e:	462a      	mov	r2, r5
 8004590:	4621      	mov	r1, r4
 8004592:	f001 fda2 	bl	80060da <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 8004596:	4628      	mov	r0, r5
 8004598:	f001 fd8c 	bl	80060b4 <malloc>
 800459c:	4b66      	ldr	r3, [pc, #408]	; (8004738 <init_peripherals+0x26c>)
 800459e:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 80045a0:	462a      	mov	r2, r5
 80045a2:	4621      	mov	r1, r4
 80045a4:	6830      	ldr	r0, [r6, #0]
 80045a6:	f001 fd98 	bl	80060da <memset>


	set_temp = (uint8_t*)malloc(3);
 80045aa:	2003      	movs	r0, #3
 80045ac:	f001 fd82 	bl	80060b4 <malloc>
 80045b0:	4b62      	ldr	r3, [pc, #392]	; (800473c <init_peripherals+0x270>)
 80045b2:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 80045b4:	6004      	str	r4, [r0, #0]

	segment_val =set_temp;
 80045b6:	4b62      	ldr	r3, [pc, #392]	; (8004740 <init_peripherals+0x274>)
 80045b8:	6018      	str	r0, [r3, #0]
	//	  memset(segment_val, 0x00, 4);

	ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 80045ba:	201c      	movs	r0, #28
 80045bc:	f001 fd7a 	bl	80060b4 <malloc>
 80045c0:	4b60      	ldr	r3, [pc, #384]	; (8004744 <init_peripherals+0x278>)
 80045c2:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 7);
 80045c4:	6004      	str	r4, [r0, #0]
 80045c6:	f8c0 4003 	str.w	r4, [r0, #3]

	ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 80045ca:	201c      	movs	r0, #28
 80045cc:	f001 fd72 	bl	80060b4 <malloc>
 80045d0:	4b5d      	ldr	r3, [pc, #372]	; (8004748 <init_peripherals+0x27c>)
 80045d2:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 7);
 80045d4:	6004      	str	r4, [r0, #0]
 80045d6:	f8c0 4003 	str.w	r4, [r0, #3]

	voltage_rms =(char*)malloc(3*sizeof(char));
 80045da:	2003      	movs	r0, #3
 80045dc:	f001 fd6a 	bl	80060b4 <malloc>
 80045e0:	4b5a      	ldr	r3, [pc, #360]	; (800474c <init_peripherals+0x280>)
 80045e2:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 80045e4:	8004      	strh	r4, [r0, #0]
 80045e6:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 80045e8:	2004      	movs	r0, #4
 80045ea:	f001 fd63 	bl	80060b4 <malloc>
 80045ee:	4b58      	ldr	r3, [pc, #352]	; (8004750 <init_peripherals+0x284>)
 80045f0:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 80045f2:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 80045f4:	2014      	movs	r0, #20
 80045f6:	f001 fd5d 	bl	80060b4 <malloc>
 80045fa:	4a56      	ldr	r2, [pc, #344]	; (8004754 <init_peripherals+0x288>)
 80045fc:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 80045fe:	6004      	str	r4, [r0, #0]
 8004600:	6044      	str	r4, [r0, #4]
 8004602:	6084      	str	r4, [r0, #8]
 8004604:	60c4      	str	r4, [r0, #12]
 8004606:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <init_peripherals+0x28c>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4953      	ldr	r1, [pc, #332]	; (800475c <init_peripherals+0x290>)
 800460e:	f001 fe29 	bl	8006264 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8004612:	2010      	movs	r0, #16
 8004614:	f001 fd4e 	bl	80060b4 <malloc>
 8004618:	4b51      	ldr	r3, [pc, #324]	; (8004760 <init_peripherals+0x294>)
 800461a:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 800461c:	2010      	movs	r0, #16
 800461e:	f001 fd49 	bl	80060b4 <malloc>
 8004622:	4b50      	ldr	r3, [pc, #320]	; (8004764 <init_peripherals+0x298>)
 8004624:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 8004626:	2004      	movs	r0, #4
 8004628:	f001 fd44 	bl	80060b4 <malloc>
 800462c:	4b4e      	ldr	r3, [pc, #312]	; (8004768 <init_peripherals+0x29c>)
 800462e:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 8004630:	2004      	movs	r0, #4
 8004632:	f001 fd3f 	bl	80060b4 <malloc>
 8004636:	4b4d      	ldr	r3, [pc, #308]	; (800476c <init_peripherals+0x2a0>)
 8004638:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 800463a:	4a4d      	ldr	r2, [pc, #308]	; (8004770 <init_peripherals+0x2a4>)
 800463c:	4b4d      	ldr	r3, [pc, #308]	; (8004774 <init_peripherals+0x2a8>)
 800463e:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 8004640:	4a4d      	ldr	r2, [pc, #308]	; (8004778 <init_peripherals+0x2ac>)
 8004642:	4b4e      	ldr	r3, [pc, #312]	; (800477c <init_peripherals+0x2b0>)
 8004644:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 8004646:	200f      	movs	r0, #15
 8004648:	f001 fd34 	bl	80060b4 <malloc>
 800464c:	4e4c      	ldr	r6, [pc, #304]	; (8004780 <init_peripherals+0x2b4>)
 800464e:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 8004650:	6004      	str	r4, [r0, #0]
 8004652:	6044      	str	r4, [r0, #4]
 8004654:	6084      	str	r4, [r0, #8]
 8004656:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 800465a:	200f      	movs	r0, #15
 800465c:	f001 fd2a 	bl	80060b4 <malloc>
 8004660:	4d48      	ldr	r5, [pc, #288]	; (8004784 <init_peripherals+0x2b8>)
 8004662:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 8004664:	6004      	str	r4, [r0, #0]
 8004666:	6044      	str	r4, [r0, #4]
 8004668:	6084      	str	r4, [r0, #8]
 800466a:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 800466e:	200f      	movs	r0, #15
 8004670:	f001 fd20 	bl	80060b4 <malloc>
 8004674:	4b44      	ldr	r3, [pc, #272]	; (8004788 <init_peripherals+0x2bc>)
 8004676:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 8004678:	6004      	str	r4, [r0, #0]
 800467a:	6044      	str	r4, [r0, #4]
 800467c:	6084      	str	r4, [r0, #8]
 800467e:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 8004682:	4b42      	ldr	r3, [pc, #264]	; (800478c <init_peripherals+0x2c0>)
 8004684:	6832      	ldr	r2, [r6, #0]
 8004686:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 8004688:	682a      	ldr	r2, [r5, #0]
 800468a:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 800468c:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 800468e:	2014      	movs	r0, #20
 8004690:	f001 fd10 	bl	80060b4 <malloc>
 8004694:	4b3e      	ldr	r3, [pc, #248]	; (8004790 <init_peripherals+0x2c4>)
 8004696:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 8004698:	6004      	str	r4, [r0, #0]
 800469a:	6044      	str	r4, [r0, #4]
 800469c:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 800469e:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <init_peripherals+0x2c8>)
 80046a0:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 80046a2:	2018      	movs	r0, #24
 80046a4:	f001 fd06 	bl	80060b4 <malloc>
 80046a8:	4e3b      	ldr	r6, [pc, #236]	; (8004798 <init_peripherals+0x2cc>)
 80046aa:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 80046ac:	6004      	str	r4, [r0, #0]
 80046ae:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 80046b0:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 80046b2:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 80046b4:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80046b6:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 80046b8:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 80046ba:	2004      	movs	r0, #4
 80046bc:	f001 fcfa 	bl	80060b4 <malloc>
 80046c0:	4b36      	ldr	r3, [pc, #216]	; (800479c <init_peripherals+0x2d0>)
 80046c2:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 80046c4:	2501      	movs	r5, #1
 80046c6:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 80046c8:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 80046ca:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 80046cc:	70c4      	strb	r4, [r0, #3]
//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);


	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 80046ce:	2046      	movs	r0, #70	; 0x46
 80046d0:	f001 fcf0 	bl	80060b4 <malloc>
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <init_peripherals+0x2d4>)
 80046d6:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 80046d8:	2246      	movs	r2, #70	; 0x46
 80046da:	4621      	mov	r1, r4
 80046dc:	f001 fcfd 	bl	80060da <memset>


	new_time = malloc(6*sizeof(uint32_t));
 80046e0:	2018      	movs	r0, #24
 80046e2:	f001 fce7 	bl	80060b4 <malloc>
 80046e6:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <init_peripherals+0x2d8>)
 80046e8:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 80046ea:	6004      	str	r4, [r0, #0]
 80046ec:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 80046ee:	2003      	movs	r0, #3
 80046f0:	f001 fce0 	bl	80060b4 <malloc>
 80046f4:	4b2c      	ldr	r3, [pc, #176]	; (80047a8 <init_peripherals+0x2dc>)
 80046f6:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 80046f8:	8004      	strh	r4, [r0, #0]
 80046fa:	7084      	strb	r4, [r0, #2]

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 80046fc:	2004      	movs	r0, #4
 80046fe:	f001 fcd9 	bl	80060b4 <malloc>
 8004702:	4b2a      	ldr	r3, [pc, #168]	; (80047ac <init_peripherals+0x2e0>)
 8004704:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 8004706:	2010      	movs	r0, #16
 8004708:	f001 fcd4 	bl	80060b4 <malloc>
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <init_peripherals+0x2e4>)
 800470e:	6018      	str	r0, [r3, #0]

	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 8004710:	462a      	mov	r2, r5
 8004712:	6831      	ldr	r1, [r6, #0]
 8004714:	4827      	ldr	r0, [pc, #156]	; (80047b4 <init_peripherals+0x2e8>)
 8004716:	f7fe fbc6 	bl	8002ea6 <HAL_RTC_GetTime>

	HAL_TIM_Base_Start_IT(&htim2);
 800471a:	4827      	ldr	r0, [pc, #156]	; (80047b8 <init_peripherals+0x2ec>)
 800471c:	f7fe fcd9 	bl	80030d2 <HAL_TIM_Base_Start_IT>
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	bf00      	nop
 8004724:	48000400 	.word	0x48000400
 8004728:	48000800 	.word	0x48000800
 800472c:	200005a8 	.word	0x200005a8
 8004730:	200002a0 	.word	0x200002a0
 8004734:	200002c8 	.word	0x200002c8
 8004738:	200002cc 	.word	0x200002cc
 800473c:	200002ac 	.word	0x200002ac
 8004740:	200002a8 	.word	0x200002a8
 8004744:	20000224 	.word	0x20000224
 8004748:	20000228 	.word	0x20000228
 800474c:	200002dc 	.word	0x200002dc
 8004750:	20000258 	.word	0x20000258
 8004754:	200002c0 	.word	0x200002c0
 8004758:	200002e0 	.word	0x200002e0
 800475c:	08006e1c 	.word	0x08006e1c
 8004760:	200002d8 	.word	0x200002d8
 8004764:	20000254 	.word	0x20000254
 8004768:	2000024c 	.word	0x2000024c
 800476c:	20000270 	.word	0x20000270
 8004770:	20000014 	.word	0x20000014
 8004774:	20000284 	.word	0x20000284
 8004778:	20000024 	.word	0x20000024
 800477c:	200002d4 	.word	0x200002d4
 8004780:	20000278 	.word	0x20000278
 8004784:	2000027c 	.word	0x2000027c
 8004788:	20000280 	.word	0x20000280
 800478c:	200005d4 	.word	0x200005d4
 8004790:	20000288 	.word	0x20000288
 8004794:	200005b0 	.word	0x200005b0
 8004798:	200002bc 	.word	0x200002bc
 800479c:	2000025c 	.word	0x2000025c
 80047a0:	2000026c 	.word	0x2000026c
 80047a4:	20000290 	.word	0x20000290
 80047a8:	200002b4 	.word	0x200002b4
 80047ac:	20000268 	.word	0x20000268
 80047b0:	20000294 	.word	0x20000294
 80047b4:	20000470 	.word	0x20000470
 80047b8:	200004a8 	.word	0x200004a8

080047bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80047bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c0:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c2:	4b55      	ldr	r3, [pc, #340]	; (8004918 <MX_GPIO_Init+0x15c>)
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80047ca:	615a      	str	r2, [r3, #20]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80047d2:	9201      	str	r2, [sp, #4]
 80047d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80047dc:	615a      	str	r2, [r3, #20]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80047e4:	9202      	str	r2, [sp, #8]
 80047e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80047ee:	615a      	str	r2, [r3, #20]
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80047f6:	9203      	str	r2, [sp, #12]
 80047f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004800:	615a      	str	r2, [r3, #20]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004808:	9304      	str	r3, [sp, #16]
 800480a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 800480c:	2201      	movs	r2, #1
 800480e:	2112      	movs	r1, #18
 8004810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004814:	f7fd fba2 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8004818:	2200      	movs	r2, #0
 800481a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800481e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004822:	f7fd fb9b 	bl	8001f5c <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8004826:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800492c <MX_GPIO_Init+0x170>
 800482a:	2200      	movs	r2, #0
 800482c:	f246 4178 	movw	r1, #25720	; 0x6478
 8004830:	4640      	mov	r0, r8
 8004832:	f7fd fb93 	bl	8001f5c <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8004836:	4e39      	ldr	r6, [pc, #228]	; (800491c <MX_GPIO_Init+0x160>)
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	4630      	mov	r0, r6
 800483e:	f7fd fb8d 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004846:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004848:	4b35      	ldr	r3, [pc, #212]	; (8004920 <MX_GPIO_Init+0x164>)
 800484a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	2400      	movs	r4, #0
 800484e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004850:	a905      	add	r1, sp, #20
 8004852:	4630      	mov	r0, r6
 8004854:	f7fd fab8 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004858:	2303      	movs	r3, #3
 800485a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800485c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004860:	a905      	add	r1, sp, #20
 8004862:	4630      	mov	r0, r6
 8004864:	f7fd fab0 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8004868:	2501      	movs	r5, #1
 800486a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800486c:	4b2d      	ldr	r3, [pc, #180]	; (8004924 <MX_GPIO_Init+0x168>)
 800486e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004870:	2702      	movs	r7, #2
 8004872:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8004874:	a905      	add	r1, sp, #20
 8004876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800487a:	f7fd faa5 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 800487e:	2312      	movs	r3, #18
 8004880:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004882:	2311      	movs	r3, #17
 8004884:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004886:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004888:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488a:	a905      	add	r1, sp, #20
 800488c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004890:	f7fd fa9a 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8004894:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004898:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800489a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a0:	a905      	add	r1, sp, #20
 80048a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048a6:	f7fd fa8f 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80048aa:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b0:	a905      	add	r1, sp, #20
 80048b2:	4640      	mov	r0, r8
 80048b4:	f7fd fa88 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80048b8:	f246 4378 	movw	r3, #25720	; 0x6478
 80048bc:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048be:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c4:	a905      	add	r1, sp, #20
 80048c6:	4640      	mov	r0, r8
 80048c8:	f7fd fa7e 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 80048cc:	2340      	movs	r3, #64	; 0x40
 80048ce:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80048d0:	4b15      	ldr	r3, [pc, #84]	; (8004928 <MX_GPIO_Init+0x16c>)
 80048d2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048d4:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 80048d6:	a905      	add	r1, sp, #20
 80048d8:	4630      	mov	r0, r6
 80048da:	f7fd fa75 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048e2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 80048e8:	a905      	add	r1, sp, #20
 80048ea:	4630      	mov	r0, r6
 80048ec:	f7fd fa6c 	bl	8001dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80048f0:	4622      	mov	r2, r4
 80048f2:	4621      	mov	r1, r4
 80048f4:	2006      	movs	r0, #6
 80048f6:	f7fc ffaf 	bl	8001858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048fa:	2006      	movs	r0, #6
 80048fc:	f7fc ffde 	bl	80018bc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8004900:	462a      	mov	r2, r5
 8004902:	4621      	mov	r1, r4
 8004904:	2017      	movs	r0, #23
 8004906:	f7fc ffa7 	bl	8001858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800490a:	2017      	movs	r0, #23
 800490c:	f7fc ffd6 	bl	80018bc <HAL_NVIC_EnableIRQ>

}
 8004910:	b00a      	add	sp, #40	; 0x28
 8004912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000
 800491c:	48000800 	.word	0x48000800
 8004920:	10110000 	.word	0x10110000
 8004924:	10210000 	.word	0x10210000
 8004928:	10310000 	.word	0x10310000
 800492c:	48000400 	.word	0x48000400

08004930 <MX_DMA_Init>:
{
 8004930:	b500      	push	{lr}
 8004932:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <MX_DMA_Init+0x30>)
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	615a      	str	r2, [r3, #20]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8004948:	2201      	movs	r2, #1
 800494a:	2100      	movs	r1, #0
 800494c:	200c      	movs	r0, #12
 800494e:	f7fc ff83 	bl	8001858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004952:	200c      	movs	r0, #12
 8004954:	f7fc ffb2 	bl	80018bc <HAL_NVIC_EnableIRQ>
}
 8004958:	b003      	add	sp, #12
 800495a:	f85d fb04 	ldr.w	pc, [sp], #4
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000

08004964 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8004964:	4770      	bx	lr

08004966 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004966:	e7fe      	b.n	8004966 <_Error_Handler>

08004968 <MX_TIM2_Init>:
{
 8004968:	b500      	push	{lr}
 800496a:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 800496c:	4818      	ldr	r0, [pc, #96]	; (80049d0 <MX_TIM2_Init+0x68>)
 800496e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004972:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004978:	2300      	movs	r3, #0
 800497a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 326400;
 800497c:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <MX_TIM2_Init+0x6c>)
 800497e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004980:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004982:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004984:	f7fe fccc 	bl	8003320 <HAL_TIM_Base_Init>
 8004988:	b998      	cbnz	r0, 80049b2 <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800498a:	a908      	add	r1, sp, #32
 800498c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004990:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004994:	480e      	ldr	r0, [pc, #56]	; (80049d0 <MX_TIM2_Init+0x68>)
 8004996:	f7fe fce9 	bl	800336c <HAL_TIM_ConfigClockSource>
 800499a:	b978      	cbnz	r0, 80049bc <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800499c:	2300      	movs	r3, #0
 800499e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049a0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049a2:	a901      	add	r1, sp, #4
 80049a4:	480a      	ldr	r0, [pc, #40]	; (80049d0 <MX_TIM2_Init+0x68>)
 80049a6:	f7fe fd6d 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 80049aa:	b960      	cbnz	r0, 80049c6 <MX_TIM2_Init+0x5e>
}
 80049ac:	b009      	add	sp, #36	; 0x24
 80049ae:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80049b2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80049b6:	4808      	ldr	r0, [pc, #32]	; (80049d8 <MX_TIM2_Init+0x70>)
 80049b8:	f7ff ffd5 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80049bc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80049c0:	4805      	ldr	r0, [pc, #20]	; (80049d8 <MX_TIM2_Init+0x70>)
 80049c2:	f7ff ffd0 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80049c6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80049ca:	4803      	ldr	r0, [pc, #12]	; (80049d8 <MX_TIM2_Init+0x70>)
 80049cc:	f7ff ffcb 	bl	8004966 <_Error_Handler>
 80049d0:	200004a8 	.word	0x200004a8
 80049d4:	0004fb00 	.word	0x0004fb00
 80049d8:	08006e20 	.word	0x08006e20

080049dc <MX_USART1_UART_Init>:
{
 80049dc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80049de:	480c      	ldr	r0, [pc, #48]	; (8004a10 <MX_USART1_UART_Init+0x34>)
 80049e0:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <MX_USART1_UART_Init+0x38>)
 80049e2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80049e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80049e8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049ea:	2300      	movs	r3, #0
 80049ec:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049ee:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049f0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049f2:	220c      	movs	r2, #12
 80049f4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049f6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049f8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049fa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049fc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049fe:	f7fe ffac 	bl	800395a <HAL_UART_Init>
 8004a02:	b900      	cbnz	r0, 8004a06 <MX_USART1_UART_Init+0x2a>
 8004a04:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004a06:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004a0a:	4803      	ldr	r0, [pc, #12]	; (8004a18 <MX_USART1_UART_Init+0x3c>)
 8004a0c:	f7ff ffab 	bl	8004966 <_Error_Handler>
 8004a10:	20000400 	.word	0x20000400
 8004a14:	40013800 	.word	0x40013800
 8004a18:	08006e20 	.word	0x08006e20

08004a1c <MX_ADC2_Init>:
{
 8004a1c:	b500      	push	{lr}
 8004a1e:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 8004a20:	482d      	ldr	r0, [pc, #180]	; (8004ad8 <MX_ADC2_Init+0xbc>)
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <MX_ADC2_Init+0xc0>)
 8004a24:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004a26:	2300      	movs	r3, #0
 8004a28:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004a2a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004a30:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004a32:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a34:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a36:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a38:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004a3e:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a40:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004a42:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004a44:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004a46:	f7fc fb45 	bl	80010d4 <HAL_ADC_Init>
 8004a4a:	bb60      	cbnz	r0, 8004aa6 <MX_ADC2_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_12;
 8004a4c:	230c      	movs	r3, #12
 8004a4e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a50:	2301      	movs	r3, #1
 8004a52:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004a54:	2300      	movs	r3, #0
 8004a56:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8004a58:	2207      	movs	r2, #7
 8004a5a:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004a5c:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8004a5e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a60:	4669      	mov	r1, sp
 8004a62:	481d      	ldr	r0, [pc, #116]	; (8004ad8 <MX_ADC2_Init+0xbc>)
 8004a64:	f7fc fd24 	bl	80014b0 <HAL_ADC_ConfigChannel>
 8004a68:	bb10      	cbnz	r0, 8004ab0 <MX_ADC2_Init+0x94>
  sConfig.Channel = ADC_CHANNEL_15;
 8004a6a:	230f      	movs	r3, #15
 8004a6c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a72:	4669      	mov	r1, sp
 8004a74:	4818      	ldr	r0, [pc, #96]	; (8004ad8 <MX_ADC2_Init+0xbc>)
 8004a76:	f7fc fd1b 	bl	80014b0 <HAL_ADC_ConfigChannel>
 8004a7a:	b9f0      	cbnz	r0, 8004aba <MX_ADC2_Init+0x9e>
  sConfig.Channel = ADC_CHANNEL_12;
 8004a7c:	230c      	movs	r3, #12
 8004a7e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004a80:	2303      	movs	r3, #3
 8004a82:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a84:	4669      	mov	r1, sp
 8004a86:	4814      	ldr	r0, [pc, #80]	; (8004ad8 <MX_ADC2_Init+0xbc>)
 8004a88:	f7fc fd12 	bl	80014b0 <HAL_ADC_ConfigChannel>
 8004a8c:	b9d0      	cbnz	r0, 8004ac4 <MX_ADC2_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_15;
 8004a8e:	230f      	movs	r3, #15
 8004a90:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004a92:	2304      	movs	r3, #4
 8004a94:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a96:	4669      	mov	r1, sp
 8004a98:	480f      	ldr	r0, [pc, #60]	; (8004ad8 <MX_ADC2_Init+0xbc>)
 8004a9a:	f7fc fd09 	bl	80014b0 <HAL_ADC_ConfigChannel>
 8004a9e:	b9b0      	cbnz	r0, 8004ace <MX_ADC2_Init+0xb2>
}
 8004aa0:	b007      	add	sp, #28
 8004aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004aa6:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8004aaa:	480d      	ldr	r0, [pc, #52]	; (8004ae0 <MX_ADC2_Init+0xc4>)
 8004aac:	f7ff ff5b 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004ab0:	f240 1137 	movw	r1, #311	; 0x137
 8004ab4:	480a      	ldr	r0, [pc, #40]	; (8004ae0 <MX_ADC2_Init+0xc4>)
 8004ab6:	f7ff ff56 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004aba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004abe:	4808      	ldr	r0, [pc, #32]	; (8004ae0 <MX_ADC2_Init+0xc4>)
 8004ac0:	f7ff ff51 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004ac4:	f240 1149 	movw	r1, #329	; 0x149
 8004ac8:	4805      	ldr	r0, [pc, #20]	; (8004ae0 <MX_ADC2_Init+0xc4>)
 8004aca:	f7ff ff4c 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004ace:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004ad2:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <MX_ADC2_Init+0xc4>)
 8004ad4:	f7ff ff47 	bl	8004966 <_Error_Handler>
 8004ad8:	20000318 	.word	0x20000318
 8004adc:	50000100 	.word	0x50000100
 8004ae0:	08006e20 	.word	0x08006e20

08004ae4 <MX_RTC_Init>:
{
 8004ae4:	b500      	push	{lr}
 8004ae6:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 8004ae8:	482c      	ldr	r0, [pc, #176]	; (8004b9c <MX_RTC_Init+0xb8>)
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <MX_RTC_Init+0xbc>)
 8004aec:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8004aee:	2100      	movs	r1, #0
 8004af0:	f7fe fabb 	bl	800306a <HAL_RTCEx_BKUPRead>
 8004af4:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8004af8:	4298      	cmp	r0, r3
 8004afa:	d037      	beq.n	8004b6c <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004afc:	4827      	ldr	r0, [pc, #156]	; (8004b9c <MX_RTC_Init+0xb8>)
 8004afe:	2300      	movs	r3, #0
 8004b00:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004b02:	227f      	movs	r2, #127	; 0x7f
 8004b04:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004b06:	22ff      	movs	r2, #255	; 0xff
 8004b08:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004b0a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004b0c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004b0e:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004b10:	f7fe f867 	bl	8002be2 <HAL_RTC_Init>
 8004b14:	bb68      	cbnz	r0, 8004b72 <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8004b1c:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8004b20:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004b24:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004b26:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	a901      	add	r1, sp, #4
 8004b2c:	481b      	ldr	r0, [pc, #108]	; (8004b9c <MX_RTC_Init+0xb8>)
 8004b2e:	f7fe f8c5 	bl	8002cbc <HAL_RTC_SetTime>
 8004b32:	bb18      	cbnz	r0, 8004b7c <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004b34:	2201      	movs	r2, #1
 8004b36:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8004b3a:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8004b3e:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004b48:	4669      	mov	r1, sp
 8004b4a:	4814      	ldr	r0, [pc, #80]	; (8004b9c <MX_RTC_Init+0xb8>)
 8004b4c:	f7fe f935 	bl	8002dba <HAL_RTC_SetDate>
 8004b50:	b9c8      	cbnz	r0, 8004b86 <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004b52:	2200      	movs	r2, #0
 8004b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b58:	4810      	ldr	r0, [pc, #64]	; (8004b9c <MX_RTC_Init+0xb8>)
 8004b5a:	f7fe f9f1 	bl	8002f40 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004b5e:	b9b8      	cbnz	r0, 8004b90 <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8004b60:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004b64:	2100      	movs	r1, #0
 8004b66:	480d      	ldr	r0, [pc, #52]	; (8004b9c <MX_RTC_Init+0xb8>)
 8004b68:	f7fe fa7a 	bl	8003060 <HAL_RTCEx_BKUPWrite>
}
 8004b6c:	b007      	add	sp, #28
 8004b6e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004b72:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004b76:	480b      	ldr	r0, [pc, #44]	; (8004ba4 <MX_RTC_Init+0xc0>)
 8004b78:	f7ff fef5 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004b7c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004b80:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <MX_RTC_Init+0xc0>)
 8004b82:	f7ff fef0 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004b86:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004b8a:	4806      	ldr	r0, [pc, #24]	; (8004ba4 <MX_RTC_Init+0xc0>)
 8004b8c:	f7ff feeb 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004b90:	f240 11a9 	movw	r1, #425	; 0x1a9
 8004b94:	4803      	ldr	r0, [pc, #12]	; (8004ba4 <MX_RTC_Init+0xc0>)
 8004b96:	f7ff fee6 	bl	8004966 <_Error_Handler>
 8004b9a:	bf00      	nop
 8004b9c:	20000470 	.word	0x20000470
 8004ba0:	40002800 	.word	0x40002800
 8004ba4:	08006e20 	.word	0x08006e20

08004ba8 <MX_I2C1_Init>:
{
 8004ba8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8004baa:	4815      	ldr	r0, [pc, #84]	; (8004c00 <MX_I2C1_Init+0x58>)
 8004bac:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <MX_I2C1_Init+0x5c>)
 8004bae:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004bb0:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <MX_I2C1_Init+0x60>)
 8004bb2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bb8:	2201      	movs	r2, #1
 8004bba:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bbc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004bbe:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004bc0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bc2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bc4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004bc6:	f7fd f9dd 	bl	8001f84 <HAL_I2C_Init>
 8004bca:	b950      	cbnz	r0, 8004be2 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004bcc:	2100      	movs	r1, #0
 8004bce:	480c      	ldr	r0, [pc, #48]	; (8004c00 <MX_I2C1_Init+0x58>)
 8004bd0:	f7fd fa3e 	bl	8002050 <HAL_I2CEx_ConfigAnalogFilter>
 8004bd4:	b950      	cbnz	r0, 8004bec <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4809      	ldr	r0, [pc, #36]	; (8004c00 <MX_I2C1_Init+0x58>)
 8004bda:	f7fd fa67 	bl	80020ac <HAL_I2CEx_ConfigDigitalFilter>
 8004bde:	b950      	cbnz	r0, 8004bf6 <MX_I2C1_Init+0x4e>
 8004be0:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004be2:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8004be6:	4809      	ldr	r0, [pc, #36]	; (8004c0c <MX_I2C1_Init+0x64>)
 8004be8:	f7ff febd 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004bec:	f240 116d 	movw	r1, #365	; 0x16d
 8004bf0:	4806      	ldr	r0, [pc, #24]	; (8004c0c <MX_I2C1_Init+0x64>)
 8004bf2:	f7ff feb8 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004bf6:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8004bfa:	4804      	ldr	r0, [pc, #16]	; (8004c0c <MX_I2C1_Init+0x64>)
 8004bfc:	f7ff feb3 	bl	8004966 <_Error_Handler>
 8004c00:	2000036c 	.word	0x2000036c
 8004c04:	40005400 	.word	0x40005400
 8004c08:	2000090e 	.word	0x2000090e
 8004c0c:	08006e20 	.word	0x08006e20

08004c10 <SystemClock_Config>:
{
 8004c10:	b500      	push	{lr}
 8004c12:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 8004c14:	f7fd fa76 	bl	8002104 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004c18:	4a29      	ldr	r2, [pc, #164]	; (8004cc0 <SystemClock_Config+0xb0>)
 8004c1a:	6a13      	ldr	r3, [r2, #32]
 8004c1c:	f023 0318 	bic.w	r3, r3, #24
 8004c20:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004c22:	2306      	movs	r3, #6
 8004c24:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004c26:	2301      	movs	r3, #1
 8004c28:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c2a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c30:	2302      	movs	r3, #2
 8004c32:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c34:	2300      	movs	r3, #0
 8004c36:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004c38:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004c3c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c3e:	a80c      	add	r0, sp, #48	; 0x30
 8004c40:	f7fd fa68 	bl	8002114 <HAL_RCC_OscConfig>
 8004c44:	bb70      	cbnz	r0, 8004ca4 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c46:	230f      	movs	r3, #15
 8004c48:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c56:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c58:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c5a:	a807      	add	r0, sp, #28
 8004c5c:	f7fd fd98 	bl	8002790 <HAL_RCC_ClockConfig>
 8004c60:	bb20      	cbnz	r0, 8004cac <SystemClock_Config+0x9c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004c62:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <SystemClock_Config+0xb4>)
 8004c64:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004c66:	2200      	movs	r2, #0
 8004c68:	9202      	str	r2, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c6e:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004c70:	9203      	str	r2, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004c72:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c74:	4668      	mov	r0, sp
 8004c76:	f7fd fea7 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8004c7a:	b9d8      	cbnz	r0, 8004cb4 <SystemClock_Config+0xa4>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004c7c:	f7fd fe72 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8004c80:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <SystemClock_Config+0xb8>)
 8004c82:	fba3 3000 	umull	r3, r0, r3, r0
 8004c86:	0980      	lsrs	r0, r0, #6
 8004c88:	f7fc fe24 	bl	80018d4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004c8c:	2004      	movs	r0, #4
 8004c8e:	f7fc fe37 	bl	8001900 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8004c92:	2202      	movs	r2, #2
 8004c94:	2100      	movs	r1, #0
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9a:	f7fc fddd 	bl	8001858 <HAL_NVIC_SetPriority>
}
 8004c9e:	b017      	add	sp, #92	; 0x5c
 8004ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004ca4:	21ea      	movs	r1, #234	; 0xea
 8004ca6:	4809      	ldr	r0, [pc, #36]	; (8004ccc <SystemClock_Config+0xbc>)
 8004ca8:	f7ff fe5d 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004cac:	21f8      	movs	r1, #248	; 0xf8
 8004cae:	4807      	ldr	r0, [pc, #28]	; (8004ccc <SystemClock_Config+0xbc>)
 8004cb0:	f7ff fe59 	bl	8004966 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004cb4:	f240 1103 	movw	r1, #259	; 0x103
 8004cb8:	4804      	ldr	r0, [pc, #16]	; (8004ccc <SystemClock_Config+0xbc>)
 8004cba:	f7ff fe54 	bl	8004966 <_Error_Handler>
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	000100a1 	.word	0x000100a1
 8004cc8:	10624dd3 	.word	0x10624dd3
 8004ccc:	08006e20 	.word	0x08006e20

08004cd0 <main>:
{
 8004cd0:	b508      	push	{r3, lr}
  HAL_Init();
 8004cd2:	f7fc f91f 	bl	8000f14 <HAL_Init>
  SystemClock_Config();
 8004cd6:	f7ff ff9b 	bl	8004c10 <SystemClock_Config>
  MX_GPIO_Init();
 8004cda:	f7ff fd6f 	bl	80047bc <MX_GPIO_Init>
  MX_DMA_Init();
 8004cde:	f7ff fe27 	bl	8004930 <MX_DMA_Init>
  MX_TIM2_Init();
 8004ce2:	f7ff fe41 	bl	8004968 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004ce6:	f7ff fe79 	bl	80049dc <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8004cea:	f7ff fe97 	bl	8004a1c <MX_ADC2_Init>
  MX_RTC_Init();
 8004cee:	f7ff fef9 	bl	8004ae4 <MX_RTC_Init>
  MX_I2C1_Init();
 8004cf2:	f7ff ff59 	bl	8004ba8 <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8004cf6:	4c34      	ldr	r4, [pc, #208]	; (8004dc8 <main+0xf8>)
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f7fc fb90 	bl	8001420 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8004d00:	f7ff fbe4 	bl	80044cc <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004d04:	2201      	movs	r2, #1
 8004d06:	4931      	ldr	r1, [pc, #196]	; (8004dcc <main+0xfc>)
 8004d08:	4831      	ldr	r0, [pc, #196]	; (8004dd0 <main+0x100>)
 8004d0a:	f7fe fc1a 	bl	8003542 <HAL_UART_Receive_IT>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,2048,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d14:	482f      	ldr	r0, [pc, #188]	; (8004dd4 <main+0x104>)
 8004d16:	f7fe f913 	bl	8002f40 <HAL_RTCEx_SetWakeUpTimer_IT>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	2025      	movs	r0, #37	; 0x25
 8004d20:	f7fc fd9a 	bl	8001858 <HAL_NVIC_SetPriority>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 8004d24:	2207      	movs	r2, #7
 8004d26:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <main+0x108>)
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7fc fae0 	bl	80012f0 <HAL_ADC_Start_DMA>
 flash_counter = 10000-2000;
 8004d30:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004d34:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <main+0x10c>)
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	e022      	b.n	8004d80 <main+0xb0>
		  rx_flag = 0;
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <main+0x110>)
 8004d3e:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8004d40:	f000 fcba 	bl	80056b8 <uart_comms>
 8004d44:	e020      	b.n	8004d88 <main+0xb8>
		  systick_flag = 0;
 8004d46:	2200      	movs	r2, #0
 8004d48:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <main+0x114>)
 8004d4a:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 8004d4c:	f000 f854 	bl	8004df8 <seven_segment>
		 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 8004d50:	2207      	movs	r2, #7
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <main+0x108>)
 8004d54:	6819      	ldr	r1, [r3, #0]
 8004d56:	481c      	ldr	r0, [pc, #112]	; (8004dc8 <main+0xf8>)
 8004d58:	f7fc faca 	bl	80012f0 <HAL_ADC_Start_DMA>
 8004d5c:	e018      	b.n	8004d90 <main+0xc0>
		  adc_flag = 0;
 8004d5e:	2200      	movs	r2, #0
 8004d60:	4b21      	ldr	r3, [pc, #132]	; (8004de8 <main+0x118>)
 8004d62:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8004d64:	f7fe ff64 	bl	8003c30 <adc_comms>
 8004d68:	e016      	b.n	8004d98 <main+0xc8>
	  if(fake_RTC_timer == 1000){
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <main+0x11c>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d72:	d019      	beq.n	8004da8 <main+0xd8>
	  if(flash_counter == 10000){
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <main+0x10c>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	f242 7310 	movw	r3, #10000	; 0x2710
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d019      	beq.n	8004db4 <main+0xe4>
	  if(rx_flag == 1 ){ 	// UART Comms
 8004d80:	4b17      	ldr	r3, [pc, #92]	; (8004de0 <main+0x110>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d0d8      	beq.n	8004d3a <main+0x6a>
	  if(systick_flag == 1){	// Seven Segment
 8004d88:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <main+0x114>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d0da      	beq.n	8004d46 <main+0x76>
	  if(adc_flag == 1){	// ADC conversion
 8004d90:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <main+0x118>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d0e2      	beq.n	8004d5e <main+0x8e>
	  if(touch_flag == 1 ){
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <main+0x120>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d1e4      	bne.n	8004d6a <main+0x9a>
		  touch_flag = 0;
 8004da0:	2200      	movs	r2, #0
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <main+0x120>)
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e7e0      	b.n	8004d6a <main+0x9a>
		  fake_RTC_timer = 0;
 8004da8:	2200      	movs	r2, #0
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <main+0x11c>)
 8004dac:	801a      	strh	r2, [r3, #0]
		  heating_scheduling();
 8004dae:	f7ff fa3d 	bl	800422c <heating_scheduling>
 8004db2:	e7df      	b.n	8004d74 <main+0xa4>
		  flash_counter = 0;
 8004db4:	2200      	movs	r2, #0
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <main+0x10c>)
 8004db8:	601a      	str	r2, [r3, #0]
		  if(enableFlashLogging){
 8004dba:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <main+0x124>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0de      	beq.n	8004d80 <main+0xb0>
		  write2Flash();
 8004dc2:	f7ff f819 	bl	8003df8 <write2Flash>
 8004dc6:	e7db      	b.n	8004d80 <main+0xb0>
 8004dc8:	20000318 	.word	0x20000318
 8004dcc:	200005ac 	.word	0x200005ac
 8004dd0:	20000400 	.word	0x20000400
 8004dd4:	20000470 	.word	0x20000470
 8004dd8:	20000224 	.word	0x20000224
 8004ddc:	20000264 	.word	0x20000264
 8004de0:	200002a5 	.word	0x200002a5
 8004de4:	200002b1 	.word	0x200002b1
 8004de8:	20000242 	.word	0x20000242
 8004dec:	20000260 	.word	0x20000260
 8004df0:	200002c4 	.word	0x200002c4
 8004df4:	20000006 	.word	0x20000006

08004df8 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8004df8:	b510      	push	{r4, lr}

	if(segment_counter == 0){	// Left Most Digit
 8004dfa:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <seven_segment+0x12c>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b133      	cbz	r3, 8004e0e <seven_segment+0x16>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d027      	beq.n	8004e54 <seven_segment+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d048      	beq.n	8004e9a <seven_segment+0xa2>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d069      	beq.n	8004ee0 <seven_segment+0xe8>
 8004e0c:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8004e0e:	4c46      	ldr	r4, [pc, #280]	; (8004f28 <seven_segment+0x130>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7fd f8a0 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2110      	movs	r1, #16
 8004e20:	4620      	mov	r0, r4
 8004e22:	f7fd f89b 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004e26:	2201      	movs	r2, #1
 8004e28:	2120      	movs	r1, #32
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f7fd f896 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004e30:	2201      	movs	r2, #1
 8004e32:	2108      	movs	r1, #8
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7fd f891 	bl	8001f5c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 8004e3a:	4c3a      	ldr	r4, [pc, #232]	; (8004f24 <seven_segment+0x12c>)
 8004e3c:	7823      	ldrb	r3, [r4, #0]
 8004e3e:	4a3b      	ldr	r2, [pc, #236]	; (8004f2c <seven_segment+0x134>)
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	5cd0      	ldrb	r0, [r2, r3]
 8004e44:	3830      	subs	r0, #48	; 0x30
 8004e46:	b2c0      	uxtb	r0, r0
 8004e48:	f000 f872 	bl	8004f30 <seven_segment_display>
		segment_counter += 1;
 8004e4c:	7823      	ldrb	r3, [r4, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	7023      	strb	r3, [r4, #0]
 8004e52:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004e54:	4c34      	ldr	r4, [pc, #208]	; (8004f28 <seven_segment+0x130>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f7fd f87d 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8004e62:	2200      	movs	r2, #0
 8004e64:	2110      	movs	r1, #16
 8004e66:	4620      	mov	r0, r4
 8004e68:	f7fd f878 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	2120      	movs	r1, #32
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7fd f873 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004e76:	2201      	movs	r2, #1
 8004e78:	2108      	movs	r1, #8
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f7fd f86e 	bl	8001f5c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004e80:	4c28      	ldr	r4, [pc, #160]	; (8004f24 <seven_segment+0x12c>)
 8004e82:	7823      	ldrb	r3, [r4, #0]
 8004e84:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <seven_segment+0x134>)
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	5cd0      	ldrb	r0, [r2, r3]
 8004e8a:	3830      	subs	r0, #48	; 0x30
 8004e8c:	b2c0      	uxtb	r0, r0
 8004e8e:	f000 f84f 	bl	8004f30 <seven_segment_display>
		segment_counter += 1;
 8004e92:	7823      	ldrb	r3, [r4, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	7023      	strb	r3, [r4, #0]
 8004e98:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004e9a:	4c23      	ldr	r4, [pc, #140]	; (8004f28 <seven_segment+0x130>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f7fd f85a 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	2110      	movs	r1, #16
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7fd f855 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2120      	movs	r1, #32
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f7fd f850 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	2108      	movs	r1, #8
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f7fd f84b 	bl	8001f5c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004ec6:	4c17      	ldr	r4, [pc, #92]	; (8004f24 <seven_segment+0x12c>)
 8004ec8:	7823      	ldrb	r3, [r4, #0]
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <seven_segment+0x134>)
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	5cd0      	ldrb	r0, [r2, r3]
 8004ed0:	3830      	subs	r0, #48	; 0x30
 8004ed2:	b2c0      	uxtb	r0, r0
 8004ed4:	f000 f82c 	bl	8004f30 <seven_segment_display>
		segment_counter += 1;
 8004ed8:	7823      	ldrb	r3, [r4, #0]
 8004eda:	3301      	adds	r3, #1
 8004edc:	7023      	strb	r3, [r4, #0]
 8004ede:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004ee0:	4c11      	ldr	r4, [pc, #68]	; (8004f28 <seven_segment+0x130>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f7fd f837 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004eee:	2201      	movs	r2, #1
 8004ef0:	2110      	movs	r1, #16
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7fd f832 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2120      	movs	r1, #32
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7fd f82d 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8004f02:	2200      	movs	r2, #0
 8004f04:	2108      	movs	r1, #8
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7fd f828 	bl	8001f5c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004f0c:	4c05      	ldr	r4, [pc, #20]	; (8004f24 <seven_segment+0x12c>)
 8004f0e:	7823      	ldrb	r3, [r4, #0]
 8004f10:	4a06      	ldr	r2, [pc, #24]	; (8004f2c <seven_segment+0x134>)
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	5cd0      	ldrb	r0, [r2, r3]
 8004f16:	3830      	subs	r0, #48	; 0x30
 8004f18:	b2c0      	uxtb	r0, r0
 8004f1a:	f000 f809 	bl	8004f30 <seven_segment_display>
		segment_counter = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	7023      	strb	r3, [r4, #0]
	}
}
 8004f22:	e773      	b.n	8004e0c <seven_segment+0x14>
 8004f24:	200002a6 	.word	0x200002a6
 8004f28:	48000400 	.word	0x48000400
 8004f2c:	200002a8 	.word	0x200002a8

08004f30 <seven_segment_display>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8004f30:	b510      	push	{r4, lr}
	switch(num){
 8004f32:	2809      	cmp	r0, #9
 8004f34:	f200 81d2 	bhi.w	80052dc <seven_segment_display+0x3ac>
 8004f38:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004f3c:	000a019f 	.word	0x000a019f
 8004f40:	00600035 	.word	0x00600035
 8004f44:	00bc008b 	.word	0x00bc008b
 8004f48:	011200e7 	.word	0x011200e7
 8004f4c:	016e013d 	.word	0x016e013d
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004f50:	2200      	movs	r2, #0
 8004f52:	2140      	movs	r1, #64	; 0x40
 8004f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f58:	f7fd f800 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2180      	movs	r1, #128	; 0x80
 8004f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f64:	f7fc fffa 	bl	8001f5c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8004f68:	2201      	movs	r2, #1
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f70:	f7fc fff4 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8004f74:	2201      	movs	r2, #1
 8004f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f7e:	f7fc ffed 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8004f82:	2201      	movs	r2, #1
 8004f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f8c:	f7fc ffe6 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8004f90:	2201      	movs	r2, #1
 8004f92:	2140      	movs	r1, #64	; 0x40
 8004f94:	48ea      	ldr	r0, [pc, #936]	; (8005340 <seven_segment_display+0x410>)
 8004f96:	f7fc ffe1 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	48e9      	ldr	r0, [pc, #932]	; (8005344 <seven_segment_display+0x414>)
 8004fa0:	f7fc ffdc 	bl	8001f5c <HAL_GPIO_WritePin>
		break;
 8004fa4:	bd10      	pop	{r4, pc}
	case 2:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2120      	movs	r1, #32
 8004faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fae:	f7fc ffd5 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2140      	movs	r1, #64	; 0x40
 8004fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fba:	f7fc ffcf 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fc8:	f7fc ffc8 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	48dc      	ldr	r0, [pc, #880]	; (8005344 <seven_segment_display+0x414>)
 8004fd2:	f7fc ffc3 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2140      	movs	r1, #64	; 0x40
 8004fda:	48d9      	ldr	r0, [pc, #868]	; (8005340 <seven_segment_display+0x410>)
 8004fdc:	f7fc ffbe 	bl	8001f5c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fea:	f7fc ffb7 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8004fee:	2201      	movs	r2, #1
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff6:	f7fc ffb1 	bl	8001f5c <HAL_GPIO_WritePin>
		break;
 8004ffa:	bd10      	pop	{r4, pc}

	case 3:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2120      	movs	r1, #32
 8005000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005004:	f7fc ffaa 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8005008:	2200      	movs	r2, #0
 800500a:	2140      	movs	r1, #64	; 0x40
 800500c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005010:	f7fc ffa4 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800501a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800501e:	f7fc ff9d 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005022:	2200      	movs	r2, #0
 8005024:	2180      	movs	r1, #128	; 0x80
 8005026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800502a:	f7fc ff97 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800502e:	2200      	movs	r2, #0
 8005030:	2140      	movs	r1, #64	; 0x40
 8005032:	48c3      	ldr	r0, [pc, #780]	; (8005340 <seven_segment_display+0x410>)
 8005034:	f7fc ff92 	bl	8001f5c <HAL_GPIO_WritePin>

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005038:	2201      	movs	r2, #1
 800503a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800503e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005042:	f7fc ff8b 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005046:	2201      	movs	r2, #1
 8005048:	2180      	movs	r1, #128	; 0x80
 800504a:	48be      	ldr	r0, [pc, #760]	; (8005344 <seven_segment_display+0x414>)
 800504c:	f7fc ff86 	bl	8001f5c <HAL_GPIO_WritePin>

		break;
 8005050:	bd10      	pop	{r4, pc}
	case 4:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005052:	2200      	movs	r2, #0
 8005054:	2140      	movs	r1, #64	; 0x40
 8005056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800505a:	f7fc ff7f 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800505e:	2200      	movs	r2, #0
 8005060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005068:	f7fc ff78 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800506c:	2200      	movs	r2, #0
 800506e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005076:	f7fc ff71 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800507a:	2200      	movs	r2, #0
 800507c:	2180      	movs	r1, #128	; 0x80
 800507e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005082:	f7fc ff6b 	bl	8001f5c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005086:	2201      	movs	r2, #1
 8005088:	2120      	movs	r1, #32
 800508a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800508e:	f7fc ff65 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005092:	2201      	movs	r2, #1
 8005094:	2180      	movs	r1, #128	; 0x80
 8005096:	48ab      	ldr	r0, [pc, #684]	; (8005344 <seven_segment_display+0x414>)
 8005098:	f7fc ff60 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 800509c:	2201      	movs	r2, #1
 800509e:	2120      	movs	r1, #32
 80050a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050a4:	f7fc ff5a 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80050a8:	2201      	movs	r2, #1
 80050aa:	2140      	movs	r1, #64	; 0x40
 80050ac:	48a4      	ldr	r0, [pc, #656]	; (8005340 <seven_segment_display+0x410>)
 80050ae:	f7fc ff55 	bl	8001f5c <HAL_GPIO_WritePin>

		break;
 80050b2:	bd10      	pop	{r4, pc}
	case 5:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80050b4:	2200      	movs	r2, #0
 80050b6:	2120      	movs	r1, #32
 80050b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050bc:	f7fc ff4e 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050ca:	f7fc ff47 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80050ce:	2200      	movs	r2, #0
 80050d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d8:	f7fc ff40 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80050dc:	2200      	movs	r2, #0
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050e4:	f7fc ff3a 	bl	8001f5c <HAL_GPIO_WritePin>

		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 80050e8:	2201      	movs	r2, #1
 80050ea:	2140      	movs	r1, #64	; 0x40
 80050ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050f0:	f7fc ff34 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80050f4:	2201      	movs	r2, #1
 80050f6:	2180      	movs	r1, #128	; 0x80
 80050f8:	4892      	ldr	r0, [pc, #584]	; (8005344 <seven_segment_display+0x414>)
 80050fa:	f7fc ff2f 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 80050fe:	2200      	movs	r2, #0
 8005100:	2140      	movs	r1, #64	; 0x40
 8005102:	488f      	ldr	r0, [pc, #572]	; (8005340 <seven_segment_display+0x410>)
 8005104:	f7fc ff2a 	bl	8001f5c <HAL_GPIO_WritePin>
		break;
 8005108:	bd10      	pop	{r4, pc}

	case 6:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800510a:	2200      	movs	r2, #0
 800510c:	2120      	movs	r1, #32
 800510e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005112:	f7fc ff23 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005116:	2200      	movs	r2, #0
 8005118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800511c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005120:	f7fc ff1c 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005124:	2200      	movs	r2, #0
 8005126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800512a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800512e:	f7fc ff15 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005132:	2200      	movs	r2, #0
 8005134:	2180      	movs	r1, #128	; 0x80
 8005136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800513a:	f7fc ff0f 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800513e:	2200      	movs	r2, #0
 8005140:	2140      	movs	r1, #64	; 0x40
 8005142:	487f      	ldr	r0, [pc, #508]	; (8005340 <seven_segment_display+0x410>)
 8005144:	f7fc ff0a 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005148:	2200      	movs	r2, #0
 800514a:	2180      	movs	r1, #128	; 0x80
 800514c:	487d      	ldr	r0, [pc, #500]	; (8005344 <seven_segment_display+0x414>)
 800514e:	f7fc ff05 	bl	8001f5c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8005152:	2201      	movs	r2, #1
 8005154:	2140      	movs	r1, #64	; 0x40
 8005156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800515a:	f7fc feff 	bl	8001f5c <HAL_GPIO_WritePin>
		break;
 800515e:	bd10      	pop	{r4, pc}
	case 7:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005160:	2200      	movs	r2, #0
 8005162:	2120      	movs	r1, #32
 8005164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005168:	f7fc fef8 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800516c:	2200      	movs	r2, #0
 800516e:	2140      	movs	r1, #64	; 0x40
 8005170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005174:	f7fc fef2 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005178:	2200      	movs	r2, #0
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005180:	f7fc feec 	bl	8001f5c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005184:	2201      	movs	r2, #1
 8005186:	2180      	movs	r1, #128	; 0x80
 8005188:	486e      	ldr	r0, [pc, #440]	; (8005344 <seven_segment_display+0x414>)
 800518a:	f7fc fee7 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800518e:	2201      	movs	r2, #1
 8005190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005198:	f7fc fee0 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800519c:	2201      	movs	r2, #1
 800519e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051a6:	f7fc fed9 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80051aa:	2201      	movs	r2, #1
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	4864      	ldr	r0, [pc, #400]	; (8005340 <seven_segment_display+0x410>)
 80051b0:	f7fc fed4 	bl	8001f5c <HAL_GPIO_WritePin>

		break;
 80051b4:	bd10      	pop	{r4, pc}
	case 8:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80051b6:	2200      	movs	r2, #0
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051be:	f7fc fecd 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80051c2:	2200      	movs	r2, #0
 80051c4:	2120      	movs	r1, #32
 80051c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051ca:	f7fc fec7 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80051ce:	4c5c      	ldr	r4, [pc, #368]	; (8005340 <seven_segment_display+0x410>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	2140      	movs	r1, #64	; 0x40
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7fc fec1 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80051da:	2200      	movs	r2, #0
 80051dc:	2180      	movs	r1, #128	; 0x80
 80051de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051e2:	f7fc febb 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80051e6:	2200      	movs	r2, #0
 80051e8:	2140      	movs	r1, #64	; 0x40
 80051ea:	4620      	mov	r0, r4
 80051ec:	f7fc feb6 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80051f0:	2200      	movs	r2, #0
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	4853      	ldr	r0, [pc, #332]	; (8005344 <seven_segment_display+0x414>)
 80051f6:	f7fc feb1 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80051fa:	2200      	movs	r2, #0
 80051fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005204:	f7fc feaa 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005208:	2200      	movs	r2, #0
 800520a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800520e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005212:	f7fc fea3 	bl	8001f5c <HAL_GPIO_WritePin>
		break;
 8005216:	bd10      	pop	{r4, pc}
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005218:	2200      	movs	r2, #0
 800521a:	2120      	movs	r1, #32
 800521c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005220:	f7fc fe9c 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005224:	4c46      	ldr	r4, [pc, #280]	; (8005340 <seven_segment_display+0x410>)
 8005226:	2200      	movs	r2, #0
 8005228:	2140      	movs	r1, #64	; 0x40
 800522a:	4620      	mov	r0, r4
 800522c:	f7fc fe96 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005230:	2200      	movs	r2, #0
 8005232:	2180      	movs	r1, #128	; 0x80
 8005234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005238:	f7fc fe90 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005246:	f7fc fe89 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800524a:	2200      	movs	r2, #0
 800524c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005254:	f7fc fe82 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005258:	2200      	movs	r2, #0
 800525a:	2140      	movs	r1, #64	; 0x40
 800525c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005260:	f7fc fe7c 	bl	8001f5c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005264:	2201      	movs	r2, #1
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	4836      	ldr	r0, [pc, #216]	; (8005344 <seven_segment_display+0x414>)
 800526a:	f7fc fe77 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 800526e:	2201      	movs	r2, #1
 8005270:	2140      	movs	r1, #64	; 0x40
 8005272:	4620      	mov	r0, r4
 8005274:	f7fc fe72 	bl	8001f5c <HAL_GPIO_WritePin>
		break;
 8005278:	bd10      	pop	{r4, pc}
	case 0:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800527a:	2200      	movs	r2, #0
 800527c:	2140      	movs	r1, #64	; 0x40
 800527e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005282:	f7fc fe6b 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005286:	2200      	movs	r2, #0
 8005288:	2120      	movs	r1, #32
 800528a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800528e:	f7fc fe65 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005292:	4c2b      	ldr	r4, [pc, #172]	; (8005340 <seven_segment_display+0x410>)
 8005294:	2200      	movs	r2, #0
 8005296:	2140      	movs	r1, #64	; 0x40
 8005298:	4620      	mov	r0, r4
 800529a:	f7fc fe5f 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052a6:	f7fc fe59 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80052aa:	2200      	movs	r2, #0
 80052ac:	2140      	movs	r1, #64	; 0x40
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7fc fe54 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	4822      	ldr	r0, [pc, #136]	; (8005344 <seven_segment_display+0x414>)
 80052ba:	f7fc fe4f 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80052be:	2200      	movs	r2, #0
 80052c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c8:	f7fc fe48 	bl	8001f5c <HAL_GPIO_WritePin>
		//OFF

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80052cc:	2201      	movs	r2, #1
 80052ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052d6:	f7fc fe41 	bl	8001f5c <HAL_GPIO_WritePin>
		break;
 80052da:	bd10      	pop	{r4, pc}
	default:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 80052dc:	2201      	movs	r2, #1
 80052de:	2120      	movs	r1, #32
 80052e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052e4:	f7fc fe3a 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 80052e8:	4c15      	ldr	r4, [pc, #84]	; (8005340 <seven_segment_display+0x410>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	2140      	movs	r1, #64	; 0x40
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7fc fe34 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80052f4:	2201      	movs	r2, #1
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052fc:	f7fc fe2e 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005300:	2201      	movs	r2, #1
 8005302:	2140      	movs	r1, #64	; 0x40
 8005304:	4620      	mov	r0, r4
 8005306:	f7fc fe29 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800530a:	2201      	movs	r2, #1
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	480d      	ldr	r0, [pc, #52]	; (8005344 <seven_segment_display+0x414>)
 8005310:	f7fc fe24 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005314:	2201      	movs	r2, #1
 8005316:	f44f 7180 	mov.w	r1, #256	; 0x100
 800531a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800531e:	f7fc fe1d 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8005322:	2201      	movs	r2, #1
 8005324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800532c:	f7fc fe16 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8005330:	2201      	movs	r2, #1
 8005332:	2140      	movs	r1, #64	; 0x40
 8005334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005338:	f7fc fe10 	bl	8001f5c <HAL_GPIO_WritePin>
 800533c:	bd10      	pop	{r4, pc}
 800533e:	bf00      	nop
 8005340:	48000400 	.word	0x48000400
 8005344:	48000800 	.word	0x48000800

08005348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005348:	b500      	push	{lr}
 800534a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800534c:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_MspInit+0x78>)
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	619a      	str	r2, [r3, #24]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005360:	2007      	movs	r0, #7
 8005362:	f7fc fa67 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 8005366:	2202      	movs	r2, #2
 8005368:	2100      	movs	r1, #0
 800536a:	f06f 000b 	mvn.w	r0, #11
 800536e:	f7fc fa73 	bl	8001858 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 8005372:	2202      	movs	r2, #2
 8005374:	2100      	movs	r1, #0
 8005376:	f06f 000a 	mvn.w	r0, #10
 800537a:	f7fc fa6d 	bl	8001858 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 800537e:	2202      	movs	r2, #2
 8005380:	2100      	movs	r1, #0
 8005382:	f06f 0009 	mvn.w	r0, #9
 8005386:	f7fc fa67 	bl	8001858 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 800538a:	2202      	movs	r2, #2
 800538c:	2100      	movs	r1, #0
 800538e:	f06f 0004 	mvn.w	r0, #4
 8005392:	f7fc fa61 	bl	8001858 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 8005396:	2202      	movs	r2, #2
 8005398:	2100      	movs	r1, #0
 800539a:	f06f 0003 	mvn.w	r0, #3
 800539e:	f7fc fa5b 	bl	8001858 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 80053a2:	2202      	movs	r2, #2
 80053a4:	2100      	movs	r1, #0
 80053a6:	f06f 0001 	mvn.w	r0, #1
 80053aa:	f7fc fa55 	bl	8001858 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 80053ae:	2202      	movs	r2, #2
 80053b0:	2100      	movs	r1, #0
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	f7fc fa4f 	bl	8001858 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053ba:	b003      	add	sp, #12
 80053bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80053c0:	40021000 	.word	0x40021000

080053c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 80053c4:	6802      	ldr	r2, [r0, #0]
 80053c6:	4b20      	ldr	r3, [pc, #128]	; (8005448 <HAL_ADC_MspInit+0x84>)
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d000      	beq.n	80053ce <HAL_ADC_MspInit+0xa>
 80053cc:	4770      	bx	lr
{
 80053ce:	b570      	push	{r4, r5, r6, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <HAL_ADC_MspInit+0x88>)
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053dc:	615a      	str	r2, [r3, #20]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC2_IN8
    PC3     ------> ADC2_IN9
    PB2     ------> ADC2_IN12
    PB15     ------> ADC2_IN15 
    */
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 80053e8:	230c      	movs	r3, #12
 80053ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053ec:	2603      	movs	r6, #3
 80053ee:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f0:	2500      	movs	r5, #0
 80053f2:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053f4:	a901      	add	r1, sp, #4
 80053f6:	4816      	ldr	r0, [pc, #88]	; (8005450 <HAL_ADC_MspInit+0x8c>)
 80053f8:	f7fc fce6 	bl	8001dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 80053fc:	f248 0304 	movw	r3, #32772	; 0x8004
 8005400:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005402:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005404:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005406:	a901      	add	r1, sp, #4
 8005408:	4812      	ldr	r0, [pc, #72]	; (8005454 <HAL_ADC_MspInit+0x90>)
 800540a:	f7fc fcdd 	bl	8001dc8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 800540e:	4812      	ldr	r0, [pc, #72]	; (8005458 <HAL_ADC_MspInit+0x94>)
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_ADC_MspInit+0x98>)
 8005412:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005414:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005416:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800541c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005420:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005426:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005428:	2320      	movs	r3, #32
 800542a:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800542c:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800542e:	f7fc faa5 	bl	800197c <HAL_DMA_Init>
 8005432:	b920      	cbnz	r0, 800543e <HAL_ADC_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <HAL_ADC_MspInit+0x94>)
 8005436:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005438:	625c      	str	r4, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800543a:	b006      	add	sp, #24
 800543c:	bd70      	pop	{r4, r5, r6, pc}
      _Error_Handler(__FILE__, __LINE__);
 800543e:	217a      	movs	r1, #122	; 0x7a
 8005440:	4807      	ldr	r0, [pc, #28]	; (8005460 <HAL_ADC_MspInit+0x9c>)
 8005442:	f7ff fa90 	bl	8004966 <_Error_Handler>
 8005446:	e7f5      	b.n	8005434 <HAL_ADC_MspInit+0x70>
 8005448:	50000100 	.word	0x50000100
 800544c:	40021000 	.word	0x40021000
 8005450:	48000800 	.word	0x48000800
 8005454:	48000400 	.word	0x48000400
 8005458:	200004e8 	.word	0x200004e8
 800545c:	4002001c 	.word	0x4002001c
 8005460:	08006e30 	.word	0x08006e30

08005464 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005464:	6802      	ldr	r2, [r0, #0]
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <HAL_I2C_MspInit+0x58>)
 8005468:	429a      	cmp	r2, r3
 800546a:	d000      	beq.n	800546e <HAL_I2C_MspInit+0xa>
 800546c:	4770      	bx	lr
{
 800546e:	b500      	push	{lr}
 8005470:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8005472:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005476:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005478:	2312      	movs	r3, #18
 800547a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800547c:	2301      	movs	r3, #1
 800547e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005480:	2303      	movs	r3, #3
 8005482:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005484:	2304      	movs	r3, #4
 8005486:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005488:	eb0d 0103 	add.w	r1, sp, r3
 800548c:	480c      	ldr	r0, [pc, #48]	; (80054c0 <HAL_I2C_MspInit+0x5c>)
 800548e:	f7fc fc9b 	bl	8001dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_I2C_MspInit+0x60>)
 8005494:	69da      	ldr	r2, [r3, #28]
 8005496:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800549a:	61da      	str	r2, [r3, #28]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80054a6:	2200      	movs	r2, #0
 80054a8:	4611      	mov	r1, r2
 80054aa:	201f      	movs	r0, #31
 80054ac:	f7fc f9d4 	bl	8001858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80054b0:	201f      	movs	r0, #31
 80054b2:	f7fc fa03 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80054b6:	b007      	add	sp, #28
 80054b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80054bc:	40005400 	.word	0x40005400
 80054c0:	48000400 	.word	0x48000400
 80054c4:	40021000 	.word	0x40021000

080054c8 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80054c8:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 80054ca:	6802      	ldr	r2, [r0, #0]
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RTC_MspInit+0x34>)
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d000      	beq.n	80054d4 <HAL_RTC_MspInit+0xc>
 80054d2:	bd08      	pop	{r3, pc}
 80054d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80054d8:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80054dc:	fab2 f282 	clz	r2, r2
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <HAL_RTC_MspInit+0x38>)
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80054ea:	2200      	movs	r2, #0
 80054ec:	4611      	mov	r1, r2
 80054ee:	2003      	movs	r0, #3
 80054f0:	f7fc f9b2 	bl	8001858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80054f4:	2003      	movs	r0, #3
 80054f6:	f7fc f9e1 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80054fa:	e7ea      	b.n	80054d2 <HAL_RTC_MspInit+0xa>
 80054fc:	40002800 	.word	0x40002800
 8005500:	10908100 	.word	0x10908100

08005504 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8005504:	6803      	ldr	r3, [r0, #0]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d000      	beq.n	800550e <HAL_TIM_Base_MspInit+0xa>
 800550c:	4770      	bx	lr
{
 800550e:	b500      	push	{lr}
 8005510:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005512:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	61da      	str	r2, [r3, #28]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8005528:	2202      	movs	r2, #2
 800552a:	2100      	movs	r1, #0
 800552c:	201c      	movs	r0, #28
 800552e:	f7fc f993 	bl	8001858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005532:	201c      	movs	r0, #28
 8005534:	f7fc f9c2 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005538:	b003      	add	sp, #12
 800553a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8005540:	6802      	ldr	r2, [r0, #0]
 8005542:	4b14      	ldr	r3, [pc, #80]	; (8005594 <HAL_UART_MspInit+0x54>)
 8005544:	429a      	cmp	r2, r3
 8005546:	d000      	beq.n	800554a <HAL_UART_MspInit+0xa>
 8005548:	4770      	bx	lr
{
 800554a:	b510      	push	{r4, lr}
 800554c:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800554e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005558:	619a      	str	r2, [r3, #24]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005564:	2330      	movs	r3, #48	; 0x30
 8005566:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005568:	2302      	movs	r3, #2
 800556a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556c:	2400      	movs	r4, #0
 800556e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005570:	2303      	movs	r3, #3
 8005572:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005574:	2307      	movs	r3, #7
 8005576:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005578:	a901      	add	r1, sp, #4
 800557a:	4807      	ldr	r0, [pc, #28]	; (8005598 <HAL_UART_MspInit+0x58>)
 800557c:	f7fc fc24 	bl	8001dc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005580:	4622      	mov	r2, r4
 8005582:	4621      	mov	r1, r4
 8005584:	2025      	movs	r0, #37	; 0x25
 8005586:	f7fc f967 	bl	8001858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800558a:	2025      	movs	r0, #37	; 0x25
 800558c:	f7fc f996 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005590:	b006      	add	sp, #24
 8005592:	bd10      	pop	{r4, pc}
 8005594:	40013800 	.word	0x40013800
 8005598:	48000800 	.word	0x48000800

0800559c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800559c:	4770      	bx	lr

0800559e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800559e:	4770      	bx	lr

080055a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80055a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055a2:	f7fb fcc9 	bl	8000f38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80055a6:	f7fc f9bc 	bl	8001922 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
 80055aa:	2201      	movs	r2, #1
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <SysTick_Handler+0x24>)
 80055ae:	701a      	strb	r2, [r3, #0]
  fake_RTC_timer += 1;
 80055b0:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <SysTick_Handler+0x28>)
 80055b2:	8813      	ldrh	r3, [r2, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	8013      	strh	r3, [r2, #0]
  flash_counter += 1;
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <SysTick_Handler+0x2c>)
 80055ba:	6813      	ldr	r3, [r2, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	bd08      	pop	{r3, pc}
 80055c2:	bf00      	nop
 80055c4:	200002b1 	.word	0x200002b1
 80055c8:	20000260 	.word	0x20000260
 80055cc:	20000264 	.word	0x20000264

080055d0 <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 80055d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80055d2:	4802      	ldr	r0, [pc, #8]	; (80055dc <RTC_WKUP_IRQHandler+0xc>)
 80055d4:	f7fd fd2a 	bl	800302c <HAL_RTCEx_WakeUpTimerIRQHandler>
 80055d8:	bd08      	pop	{r3, pc}
 80055da:	bf00      	nop
 80055dc:	20000470 	.word	0x20000470

080055e0 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80055e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80055e2:	2001      	movs	r0, #1
 80055e4:	f7fc fcc0 	bl	8001f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  touch_flag = 1;
 80055e8:	2201      	movs	r2, #1
 80055ea:	4b01      	ldr	r3, [pc, #4]	; (80055f0 <EXTI0_IRQHandler+0x10>)
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	bd08      	pop	{r3, pc}
 80055f0:	200002c4 	.word	0x200002c4

080055f4 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80055f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80055f6:	4802      	ldr	r0, [pc, #8]	; (8005600 <DMA1_Channel2_IRQHandler+0xc>)
 80055f8:	f7fc fa4b 	bl	8001a92 <HAL_DMA_IRQHandler>
 80055fc:	bd08      	pop	{r3, pc}
 80055fe:	bf00      	nop
 8005600:	200004e8 	.word	0x200004e8

08005604 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8005604:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005606:	2040      	movs	r0, #64	; 0x40
 8005608:	f7fc fcae 	bl	8001f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 800560c:	2201      	movs	r2, #1
 800560e:	4b01      	ldr	r3, [pc, #4]	; (8005614 <EXTI9_5_IRQHandler+0x10>)
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	bd08      	pop	{r3, pc}
 8005614:	200002b9 	.word	0x200002b9

08005618 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8005618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800561a:	4803      	ldr	r0, [pc, #12]	; (8005628 <TIM2_IRQHandler+0x10>)
 800561c:	f7fd fd68 	bl	80030f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag = 0;
 8005620:	2200      	movs	r2, #0
 8005622:	4b02      	ldr	r3, [pc, #8]	; (800562c <TIM2_IRQHandler+0x14>)
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	bd08      	pop	{r3, pc}
 8005628:	200004a8 	.word	0x200004a8
 800562c:	200002b8 	.word	0x200002b8

08005630 <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 8005630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005632:	4802      	ldr	r0, [pc, #8]	; (800563c <I2C1_EV_IRQHandler+0xc>)
 8005634:	f7fc fd04 	bl	8002040 <HAL_I2C_EV_IRQHandler>
 8005638:	bd08      	pop	{r3, pc}
 800563a:	bf00      	nop
 800563c:	2000036c 	.word	0x2000036c

08005640 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8005640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005642:	4802      	ldr	r0, [pc, #8]	; (800564c <USART1_IRQHandler+0xc>)
 8005644:	f7fe fa42 	bl	8003acc <HAL_UART_IRQHandler>
 8005648:	bd08      	pop	{r3, pc}
 800564a:	bf00      	nop
 800564c:	20000400 	.word	0x20000400

08005650 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005650:	4915      	ldr	r1, [pc, #84]	; (80056a8 <SystemInit+0x58>)
 8005652:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005656:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <SystemInit+0x5c>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005668:	6858      	ldr	r0, [r3, #4]
 800566a:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <SystemInit+0x60>)
 800566c:	4002      	ands	r2, r0
 800566e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005676:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800567a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005682:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800568a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	f022 020f 	bic.w	r2, r2, #15
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005694:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005696:	4a07      	ldr	r2, [pc, #28]	; (80056b4 <SystemInit+0x64>)
 8005698:	4002      	ands	r2, r0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056a4:	608b      	str	r3, [r1, #8]
 80056a6:	4770      	bx	lr
 80056a8:	e000ed00 	.word	0xe000ed00
 80056ac:	40021000 	.word	0x40021000
 80056b0:	f87fc00c 	.word	0xf87fc00c
 80056b4:	ff00fccc 	.word	0xff00fccc

080056b8 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 80056b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
 80056bc:	2200      	movs	r2, #0
 80056be:	4b98      	ldr	r3, [pc, #608]	; (8005920 <uart_comms+0x268>)
 80056c0:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 80056c2:	4b98      	ldr	r3, [pc, #608]	; (8005924 <uart_comms+0x26c>)
 80056c4:	4a98      	ldr	r2, [pc, #608]	; (8005928 <uart_comms+0x270>)
 80056c6:	7812      	ldrb	r2, [r2, #0]
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	4898      	ldr	r0, [pc, #608]	; (800592c <uart_comms+0x274>)
 80056cc:	7800      	ldrb	r0, [r0, #0]
 80056ce:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	2a24      	cmp	r2, #36	; 0x24
 80056d6:	d00b      	beq.n	80056f0 <uart_comms+0x38>

		uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	2a24      	cmp	r2, #36	; 0x24
 80056dc:	d00d      	beq.n	80056fa <uart_comms+0x42>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 80056de:	4b92      	ldr	r3, [pc, #584]	; (8005928 <uart_comms+0x270>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b3b      	cmp	r3, #59	; 0x3b
 80056e4:	d902      	bls.n	80056ec <uart_comms+0x34>
		uart_counter = 0;
 80056e6:	2200      	movs	r2, #0
 80056e8:	4b8f      	ldr	r3, [pc, #572]	; (8005928 <uart_comms+0x270>)
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_counter += 1;
 80056f0:	498d      	ldr	r1, [pc, #564]	; (8005928 <uart_comms+0x270>)
 80056f2:	780a      	ldrb	r2, [r1, #0]
 80056f4:	3201      	adds	r2, #1
 80056f6:	700a      	strb	r2, [r1, #0]
 80056f8:	e7ee      	b.n	80056d8 <uart_comms+0x20>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80056fa:	4a8b      	ldr	r2, [pc, #556]	; (8005928 <uart_comms+0x270>)
 80056fc:	7812      	ldrb	r2, [r2, #0]
 80056fe:	1899      	adds	r1, r3, r2
 8005700:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8005704:	290a      	cmp	r1, #10
 8005706:	d1ea      	bne.n	80056de <uart_comms+0x26>
 8005708:	4413      	add	r3, r2
 800570a:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 800570e:	2b0d      	cmp	r3, #13
 8005710:	d1e5      	bne.n	80056de <uart_comms+0x26>
 8005712:	2a02      	cmp	r2, #2
 8005714:	d9e3      	bls.n	80056de <uart_comms+0x26>
		memset(return_value,0x00, 50);
 8005716:	2232      	movs	r2, #50	; 0x32
 8005718:	2100      	movs	r1, #0
 800571a:	4b85      	ldr	r3, [pc, #532]	; (8005930 <uart_comms+0x278>)
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	f000 fcdc 	bl	80060da <memset>
		uart_command_copy = uart_command;
 8005722:	4b80      	ldr	r3, [pc, #512]	; (8005924 <uart_comms+0x26c>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b83      	ldr	r3, [pc, #524]	; (8005934 <uart_comms+0x27c>)
 8005728:	601a      	str	r2, [r3, #0]
		switch(uart_command[1]){
 800572a:	7853      	ldrb	r3, [r2, #1]
 800572c:	3b41      	subs	r3, #65	; 0x41
 800572e:	2b0b      	cmp	r3, #11
 8005730:	d829      	bhi.n	8005786 <uart_comms+0xce>
 8005732:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005736:	000c      	.short	0x000c
 8005738:	005f0033 	.word	0x005f0033
 800573c:	00af007f 	.word	0x00af007f
 8005740:	012300d0 	.word	0x012300d0
 8005744:	019a0143 	.word	0x019a0143
 8005748:	03450211 	.word	0x03450211
 800574c:	03fc      	.short	0x03fc
			memcpy(studentnumber, uart_command, 2 );
 800574e:	4b7a      	ldr	r3, [pc, #488]	; (8005938 <uart_comms+0x280>)
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	8812      	ldrh	r2, [r2, #0]
 8005754:	800a      	strh	r2, [r1, #0]
			memcpy(studentnumber+2,comma,1);
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4978      	ldr	r1, [pc, #480]	; (800593c <uart_comms+0x284>)
 800575a:	7809      	ldrb	r1, [r1, #0]
 800575c:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	4977      	ldr	r1, [pc, #476]	; (8005940 <uart_comms+0x288>)
 8005762:	6808      	ldr	r0, [r1, #0]
 8005764:	6849      	ldr	r1, [r1, #4]
 8005766:	f8c2 0003 	str.w	r0, [r2, #3]
 800576a:	f8c2 1007 	str.w	r1, [r2, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	4b74      	ldr	r3, [pc, #464]	; (8005944 <uart_comms+0x28c>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f8c1 200b 	str.w	r2, [r1, #11]
 800577a:	f8c1 300f 	str.w	r3, [r1, #15]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 800577e:	220d      	movs	r2, #13
 8005780:	4871      	ldr	r0, [pc, #452]	; (8005948 <uart_comms+0x290>)
 8005782:	f7fd feb8 	bl	80034f6 <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 8005786:	223c      	movs	r2, #60	; 0x3c
 8005788:	2100      	movs	r1, #0
 800578a:	4b66      	ldr	r3, [pc, #408]	; (8005924 <uart_comms+0x26c>)
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	f000 fca4 	bl	80060da <memset>
		uart_counter = 0;
 8005792:	2200      	movs	r2, #0
 8005794:	4b64      	ldr	r3, [pc, #400]	; (8005928 <uart_comms+0x270>)
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memcpy(return_value, uart_command, 2);
 800579c:	4b64      	ldr	r3, [pc, #400]	; (8005930 <uart_comms+0x278>)
 800579e:	6819      	ldr	r1, [r3, #0]
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4967      	ldr	r1, [pc, #412]	; (8005944 <uart_comms+0x28c>)
 80057a8:	8809      	ldrh	r1, [r1, #0]
 80057aa:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 80057ac:	681c      	ldr	r4, [r3, #0]
 80057ae:	4620      	mov	r0, r4
 80057b0:	f7fa fd0e 	bl	80001d0 <strlen>
 80057b4:	b282      	uxth	r2, r0
 80057b6:	4621      	mov	r1, r4
 80057b8:	4863      	ldr	r0, [pc, #396]	; (8005948 <uart_comms+0x290>)
 80057ba:	f7fd fe9c 	bl	80034f6 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 80057be:	4b59      	ldr	r3, [pc, #356]	; (8005924 <uart_comms+0x26c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	78db      	ldrb	r3, [r3, #3]
 80057c4:	2b31      	cmp	r3, #49	; 0x31
 80057c6:	d00b      	beq.n	80057e0 <uart_comms+0x128>
			else if(uart_command[3] == '0'){
 80057c8:	2b30      	cmp	r3, #48	; 0x30
 80057ca:	d1dc      	bne.n	8005786 <uart_comms+0xce>
				valve_state=valve_CLOSE;
 80057cc:	4a5f      	ldr	r2, [pc, #380]	; (800594c <uart_comms+0x294>)
 80057ce:	4b60      	ldr	r3, [pc, #384]	; (8005950 <uart_comms+0x298>)
 80057d0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 80057d2:	2200      	movs	r2, #0
 80057d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057d8:	485e      	ldr	r0, [pc, #376]	; (8005954 <uart_comms+0x29c>)
 80057da:	f7fc fbbf 	bl	8001f5c <HAL_GPIO_WritePin>
 80057de:	e7d2      	b.n	8005786 <uart_comms+0xce>
				valve_state = valve_OPEN;
 80057e0:	4a5d      	ldr	r2, [pc, #372]	; (8005958 <uart_comms+0x2a0>)
 80057e2:	4b5b      	ldr	r3, [pc, #364]	; (8005950 <uart_comms+0x298>)
 80057e4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 80057e6:	2201      	movs	r2, #1
 80057e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057ec:	4859      	ldr	r0, [pc, #356]	; (8005954 <uart_comms+0x29c>)
 80057ee:	f7fc fbb5 	bl	8001f5c <HAL_GPIO_WritePin>
 80057f2:	e7c8      	b.n	8005786 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 80057f4:	4b4e      	ldr	r3, [pc, #312]	; (8005930 <uart_comms+0x278>)
 80057f6:	6819      	ldr	r1, [r3, #0]
 80057f8:	8812      	ldrh	r2, [r2, #0]
 80057fa:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4951      	ldr	r1, [pc, #324]	; (8005944 <uart_comms+0x28c>)
 8005800:	8809      	ldrh	r1, [r1, #0]
 8005802:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	4620      	mov	r0, r4
 8005808:	f7fa fce2 	bl	80001d0 <strlen>
 800580c:	b282      	uxth	r2, r0
 800580e:	4621      	mov	r1, r4
 8005810:	484d      	ldr	r0, [pc, #308]	; (8005948 <uart_comms+0x290>)
 8005812:	f7fd fe70 	bl	80034f6 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 8005816:	4b43      	ldr	r3, [pc, #268]	; (8005924 <uart_comms+0x26c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	78db      	ldrb	r3, [r3, #3]
 800581c:	2b30      	cmp	r3, #48	; 0x30
 800581e:	d005      	beq.n	800582c <uart_comms+0x174>
			else if(uart_command[3] == '1'){
 8005820:	2b31      	cmp	r3, #49	; 0x31
 8005822:	d1b0      	bne.n	8005786 <uart_comms+0xce>
				auto_heating = 1;
 8005824:	2201      	movs	r2, #1
 8005826:	4b4d      	ldr	r3, [pc, #308]	; (800595c <uart_comms+0x2a4>)
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	e7ac      	b.n	8005786 <uart_comms+0xce>
				auto_heating = 0;
 800582c:	2200      	movs	r2, #0
 800582e:	4b4b      	ldr	r3, [pc, #300]	; (800595c <uart_comms+0x2a4>)
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e7a8      	b.n	8005786 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8005834:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <uart_comms+0x278>)
 8005836:	6819      	ldr	r1, [r3, #0]
 8005838:	8812      	ldrh	r2, [r2, #0]
 800583a:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4941      	ldr	r1, [pc, #260]	; (8005944 <uart_comms+0x28c>)
 8005840:	8809      	ldrh	r1, [r1, #0]
 8005842:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005844:	681c      	ldr	r4, [r3, #0]
 8005846:	4620      	mov	r0, r4
 8005848:	f7fa fcc2 	bl	80001d0 <strlen>
 800584c:	b282      	uxth	r2, r0
 800584e:	4621      	mov	r1, r4
 8005850:	483d      	ldr	r0, [pc, #244]	; (8005948 <uart_comms+0x290>)
 8005852:	f7fd fe50 	bl	80034f6 <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 8005856:	4b41      	ldr	r3, [pc, #260]	; (800595c <uart_comms+0x2a4>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d193      	bne.n	8005786 <uart_comms+0xce>
				if(uart_command[3]=='0'){
 800585e:	4b31      	ldr	r3, [pc, #196]	; (8005924 <uart_comms+0x26c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	78db      	ldrb	r3, [r3, #3]
 8005864:	2b30      	cmp	r3, #48	; 0x30
 8005866:	d00b      	beq.n	8005880 <uart_comms+0x1c8>
				else if(uart_command[3] == '1'){
 8005868:	2b31      	cmp	r3, #49	; 0x31
 800586a:	d18c      	bne.n	8005786 <uart_comms+0xce>
					heater_state = heater_ON;
 800586c:	4a3c      	ldr	r2, [pc, #240]	; (8005960 <uart_comms+0x2a8>)
 800586e:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <uart_comms+0x2ac>)
 8005870:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 8005872:	2201      	movs	r2, #1
 8005874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005878:	4836      	ldr	r0, [pc, #216]	; (8005954 <uart_comms+0x29c>)
 800587a:	f7fc fb6f 	bl	8001f5c <HAL_GPIO_WritePin>
 800587e:	e782      	b.n	8005786 <uart_comms+0xce>
					heater_state = heater_OFF;
 8005880:	4a39      	ldr	r2, [pc, #228]	; (8005968 <uart_comms+0x2b0>)
 8005882:	4b38      	ldr	r3, [pc, #224]	; (8005964 <uart_comms+0x2ac>)
 8005884:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 8005886:	2200      	movs	r2, #0
 8005888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800588c:	4831      	ldr	r0, [pc, #196]	; (8005954 <uart_comms+0x29c>)
 800588e:	f7fc fb65 	bl	8001f5c <HAL_GPIO_WritePin>
 8005892:	e778      	b.n	8005786 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8005894:	4b26      	ldr	r3, [pc, #152]	; (8005930 <uart_comms+0x278>)
 8005896:	6819      	ldr	r1, [r3, #0]
 8005898:	8812      	ldrh	r2, [r2, #0]
 800589a:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4929      	ldr	r1, [pc, #164]	; (8005944 <uart_comms+0x28c>)
 80058a0:	8809      	ldrh	r1, [r1, #0]
 80058a2:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 80058a4:	681c      	ldr	r4, [r3, #0]
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7fa fc92 	bl	80001d0 <strlen>
 80058ac:	b282      	uxth	r2, r0
 80058ae:	4621      	mov	r1, r4
 80058b0:	4825      	ldr	r0, [pc, #148]	; (8005948 <uart_comms+0x290>)
 80058b2:	f7fd fe20 	bl	80034f6 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){ // logging disable
 80058b6:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <uart_comms+0x26c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	78db      	ldrb	r3, [r3, #3]
 80058bc:	2b30      	cmp	r3, #48	; 0x30
 80058be:	d006      	beq.n	80058ce <uart_comms+0x216>
			else if(uart_command[3] == '1'){ // logging enable
 80058c0:	2b31      	cmp	r3, #49	; 0x31
 80058c2:	f47f af60 	bne.w	8005786 <uart_comms+0xce>
				enableFlashLogging = 1;
 80058c6:	2201      	movs	r2, #1
 80058c8:	4b28      	ldr	r3, [pc, #160]	; (800596c <uart_comms+0x2b4>)
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e75b      	b.n	8005786 <uart_comms+0xce>
				enableFlashLogging = 0;
 80058ce:	2200      	movs	r2, #0
 80058d0:	4b26      	ldr	r3, [pc, #152]	; (800596c <uart_comms+0x2b4>)
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e757      	b.n	8005786 <uart_comms+0xce>
			memcpy(return_value, uart_command,2);
 80058d6:	4b16      	ldr	r3, [pc, #88]	; (8005930 <uart_comms+0x278>)
 80058d8:	6819      	ldr	r1, [r3, #0]
 80058da:	8812      	ldrh	r2, [r2, #0]
 80058dc:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4918      	ldr	r1, [pc, #96]	; (8005944 <uart_comms+0x28c>)
 80058e2:	8809      	ldrh	r1, [r1, #0]
 80058e4:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80058e6:	681c      	ldr	r4, [r3, #0]
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7fa fc71 	bl	80001d0 <strlen>
 80058ee:	b282      	uxth	r2, r0
 80058f0:	4621      	mov	r1, r4
 80058f2:	4815      	ldr	r0, [pc, #84]	; (8005948 <uart_comms+0x290>)
 80058f4:	f7fd fdff 	bl	80034f6 <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <uart_comms+0x270>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	3b05      	subs	r3, #5
 80058fe:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <uart_comms+0x2b8>)
 8005900:	7013      	strb	r3, [r2, #0]
			memset(set_temp, 0x00, 4);
 8005902:	4c1c      	ldr	r4, [pc, #112]	; (8005974 <uart_comms+0x2bc>)
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	2100      	movs	r1, #0
 8005908:	6019      	str	r1, [r3, #0]
			memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <uart_comms+0x26c>)
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	7812      	ldrb	r2, [r2, #0]
 8005910:	3103      	adds	r1, #3
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	f000 fbd6 	bl	80060c4 <memcpy>
			segment_val =set_temp;
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <uart_comms+0x2c0>)
 800591c:	601a      	str	r2, [r3, #0]
			break;
 800591e:	e732      	b.n	8005786 <uart_comms+0xce>
 8005920:	200002a5 	.word	0x200002a5
 8005924:	200002c8 	.word	0x200002c8
 8005928:	200002d0 	.word	0x200002d0
 800592c:	200005ac 	.word	0x200005ac
 8005930:	200002a0 	.word	0x200002a0
 8005934:	200002cc 	.word	0x200002cc
 8005938:	200005a8 	.word	0x200005a8
 800593c:	20000004 	.word	0x20000004
 8005940:	2000001c 	.word	0x2000001c
 8005944:	20000008 	.word	0x20000008
 8005948:	20000400 	.word	0x20000400
 800594c:	20000024 	.word	0x20000024
 8005950:	200002d4 	.word	0x200002d4
 8005954:	48000400 	.word	0x48000400
 8005958:	2000002c 	.word	0x2000002c
 800595c:	20000250 	.word	0x20000250
 8005960:	20000018 	.word	0x20000018
 8005964:	20000284 	.word	0x20000284
 8005968:	20000014 	.word	0x20000014
 800596c:	20000006 	.word	0x20000006
 8005970:	200002b0 	.word	0x200002b0
 8005974:	200002ac 	.word	0x200002ac
 8005978:	200002a8 	.word	0x200002a8
			memcpy(return_value, uart_command, 2);
 800597c:	4caf      	ldr	r4, [pc, #700]	; (8005c3c <uart_comms+0x584>)
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	8812      	ldrh	r2, [r2, #0]
 8005982:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	4aae      	ldr	r2, [pc, #696]	; (8005c40 <uart_comms+0x588>)
 8005988:	7812      	ldrb	r2, [r2, #0]
 800598a:	709a      	strb	r2, [r3, #2]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	4bad      	ldr	r3, [pc, #692]	; (8005c44 <uart_comms+0x58c>)
 8005990:	781d      	ldrb	r5, [r3, #0]
 8005992:	462a      	mov	r2, r5
 8005994:	4bac      	ldr	r3, [pc, #688]	; (8005c48 <uart_comms+0x590>)
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	3003      	adds	r0, #3
 800599a:	f000 fb93 	bl	80060c4 <memcpy>
			memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	3503      	adds	r5, #3
 80059a2:	4aaa      	ldr	r2, [pc, #680]	; (8005c4c <uart_comms+0x594>)
 80059a4:	8812      	ldrh	r2, [r2, #0]
 80059a6:	535a      	strh	r2, [r3, r5]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80059a8:	6824      	ldr	r4, [r4, #0]
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7fa fc10 	bl	80001d0 <strlen>
 80059b0:	b282      	uxth	r2, r0
 80059b2:	4621      	mov	r1, r4
 80059b4:	48a6      	ldr	r0, [pc, #664]	; (8005c50 <uart_comms+0x598>)
 80059b6:	f7fd fd9e 	bl	80034f6 <HAL_UART_Transmit_IT>
			break;
 80059ba:	e6e4      	b.n	8005786 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 80059bc:	4b9f      	ldr	r3, [pc, #636]	; (8005c3c <uart_comms+0x584>)
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	8812      	ldrh	r2, [r2, #0]
 80059c2:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	49a1      	ldr	r1, [pc, #644]	; (8005c4c <uart_comms+0x594>)
 80059c8:	8809      	ldrh	r1, [r1, #0]
 80059ca:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 80059cc:	681c      	ldr	r4, [r3, #0]
 80059ce:	4620      	mov	r0, r4
 80059d0:	f7fa fbfe 	bl	80001d0 <strlen>
 80059d4:	b282      	uxth	r2, r0
 80059d6:	4621      	mov	r1, r4
 80059d8:	489d      	ldr	r0, [pc, #628]	; (8005c50 <uart_comms+0x598>)
 80059da:	f7fd fd8c 	bl	80034f6 <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 80059de:	4c9d      	ldr	r4, [pc, #628]	; (8005c54 <uart_comms+0x59c>)
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	22ca      	movs	r2, #202	; 0xca
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24
 80059e6:	2253      	movs	r2, #83	; 0x53
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7fd f8db 	bl	8002ba6 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 80059f0:	4999      	ldr	r1, [pc, #612]	; (8005c58 <uart_comms+0x5a0>)
 80059f2:	4b9a      	ldr	r3, [pc, #616]	; (8005c5c <uart_comms+0x5a4>)
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	f000 fc59 	bl	80062ac <strtok>
 80059fa:	4e99      	ldr	r6, [pc, #612]	; (8005c60 <uart_comms+0x5a8>)
 80059fc:	6030      	str	r0, [r6, #0]
			time->Hours = strtol(heating_info, NULL,10);
 80059fe:	4d99      	ldr	r5, [pc, #612]	; (8005c64 <uart_comms+0x5ac>)
 8005a00:	682f      	ldr	r7, [r5, #0]
 8005a02:	220a      	movs	r2, #10
 8005a04:	2100      	movs	r1, #0
 8005a06:	f000 fd25 	bl	8006454 <strtol>
 8005a0a:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 8005a0c:	4996      	ldr	r1, [pc, #600]	; (8005c68 <uart_comms+0x5b0>)
 8005a0e:	2000      	movs	r0, #0
 8005a10:	f000 fc4c 	bl	80062ac <strtok>
 8005a14:	6030      	str	r0, [r6, #0]
			time->Minutes = strtol(heating_info, NULL,10);
 8005a16:	682f      	ldr	r7, [r5, #0]
 8005a18:	220a      	movs	r2, #10
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	f000 fd1a 	bl	8006454 <strtol>
 8005a20:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 8005a22:	4992      	ldr	r1, [pc, #584]	; (8005c6c <uart_comms+0x5b4>)
 8005a24:	2000      	movs	r0, #0
 8005a26:	f000 fc41 	bl	80062ac <strtok>
 8005a2a:	6030      	str	r0, [r6, #0]
			time->Seconds = strtol(heating_info, NULL,10);
 8005a2c:	682e      	ldr	r6, [r5, #0]
 8005a2e:	220a      	movs	r2, #10
 8005a30:	2100      	movs	r1, #0
 8005a32:	f000 fd0f 	bl	8006454 <strtol>
 8005a36:	70b0      	strb	r0, [r6, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	6829      	ldr	r1, [r5, #0]
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7fd f93d 	bl	8002cbc <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8005a42:	4e8b      	ldr	r6, [pc, #556]	; (8005c70 <uart_comms+0x5b8>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	6831      	ldr	r1, [r6, #0]
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7fd f9b6 	bl	8002dba <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005a54:	2200      	movs	r2, #0
 8005a56:	6829      	ldr	r1, [r5, #0]
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f7fd fa24 	bl	8002ea6 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005a5e:	2200      	movs	r2, #0
 8005a60:	6831      	ldr	r1, [r6, #0]
 8005a62:	4620      	mov	r0, r4
 8005a64:	f7fd fa4a 	bl	8002efc <HAL_RTC_GetDate>
			break;
 8005a68:	e68d      	b.n	8005786 <uart_comms+0xce>
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005a6a:	4e7e      	ldr	r6, [pc, #504]	; (8005c64 <uart_comms+0x5ac>)
 8005a6c:	4c79      	ldr	r4, [pc, #484]	; (8005c54 <uart_comms+0x59c>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	6831      	ldr	r1, [r6, #0]
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7fd fa17 	bl	8002ea6 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4b7d      	ldr	r3, [pc, #500]	; (8005c70 <uart_comms+0x5b8>)
 8005a7c:	6819      	ldr	r1, [r3, #0]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7fd fa3c 	bl	8002efc <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 8005a84:	4c6d      	ldr	r4, [pc, #436]	; (8005c3c <uart_comms+0x584>)
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	4a7a      	ldr	r2, [pc, #488]	; (8005c74 <uart_comms+0x5bc>)
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	8812      	ldrh	r2, [r2, #0]
 8005a8e:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005c40 <uart_comms+0x588>
 8005a96:	f898 2000 	ldrb.w	r2, [r8]
 8005a9a:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 8005a9c:	6833      	ldr	r3, [r6, #0]
 8005a9e:	4d76      	ldr	r5, [pc, #472]	; (8005c78 <uart_comms+0x5c0>)
 8005aa0:	220a      	movs	r2, #10
 8005aa2:	6829      	ldr	r1, [r5, #0]
 8005aa4:	7818      	ldrb	r0, [r3, #0]
 8005aa6:	f000 fb03 	bl	80060b0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005aaa:	6827      	ldr	r7, [r4, #0]
 8005aac:	4638      	mov	r0, r7
 8005aae:	f7fa fb8f 	bl	80001d0 <strlen>
 8005ab2:	4407      	add	r7, r0
 8005ab4:	f8d5 9000 	ldr.w	r9, [r5]
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f7fa fb89 	bl	80001d0 <strlen>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	f000 fafe 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005ac8:	6827      	ldr	r7, [r4, #0]
 8005aca:	4638      	mov	r0, r7
 8005acc:	f7fa fb80 	bl	80001d0 <strlen>
 8005ad0:	f898 3000 	ldrb.w	r3, [r8]
 8005ad4:	543b      	strb	r3, [r7, r0]
			itoa((time->Minutes),temp_time_var,10  );
 8005ad6:	6833      	ldr	r3, [r6, #0]
 8005ad8:	220a      	movs	r2, #10
 8005ada:	6829      	ldr	r1, [r5, #0]
 8005adc:	7858      	ldrb	r0, [r3, #1]
 8005ade:	f000 fae7 	bl	80060b0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005ae2:	6827      	ldr	r7, [r4, #0]
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f7fa fb73 	bl	80001d0 <strlen>
 8005aea:	4407      	add	r7, r0
 8005aec:	f8d5 9000 	ldr.w	r9, [r5]
 8005af0:	4648      	mov	r0, r9
 8005af2:	f7fa fb6d 	bl	80001d0 <strlen>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	f000 fae2 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005b00:	6827      	ldr	r7, [r4, #0]
 8005b02:	4638      	mov	r0, r7
 8005b04:	f7fa fb64 	bl	80001d0 <strlen>
 8005b08:	f898 3000 	ldrb.w	r3, [r8]
 8005b0c:	543b      	strb	r3, [r7, r0]
			itoa((time->Seconds),temp_time_var,10  );
 8005b0e:	6833      	ldr	r3, [r6, #0]
 8005b10:	220a      	movs	r2, #10
 8005b12:	6829      	ldr	r1, [r5, #0]
 8005b14:	7898      	ldrb	r0, [r3, #2]
 8005b16:	f000 facb 	bl	80060b0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005b1a:	6826      	ldr	r6, [r4, #0]
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7fa fb57 	bl	80001d0 <strlen>
 8005b22:	4406      	add	r6, r0
 8005b24:	682d      	ldr	r5, [r5, #0]
 8005b26:	4628      	mov	r0, r5
 8005b28:	f7fa fb52 	bl	80001d0 <strlen>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4630      	mov	r0, r6
 8005b32:	f000 fac7 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8005b36:	6825      	ldr	r5, [r4, #0]
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f7fa fb49 	bl	80001d0 <strlen>
 8005b3e:	4b43      	ldr	r3, [pc, #268]	; (8005c4c <uart_comms+0x594>)
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005b44:	6824      	ldr	r4, [r4, #0]
 8005b46:	4620      	mov	r0, r4
 8005b48:	f7fa fb42 	bl	80001d0 <strlen>
 8005b4c:	b282      	uxth	r2, r0
 8005b4e:	4621      	mov	r1, r4
 8005b50:	483f      	ldr	r0, [pc, #252]	; (8005c50 <uart_comms+0x598>)
 8005b52:	f7fd fcd0 	bl	80034f6 <HAL_UART_Transmit_IT>
			break;
 8005b56:	e616      	b.n	8005786 <uart_comms+0xce>
			if(auto_heating == 1){
 8005b58:	4b48      	ldr	r3, [pc, #288]	; (8005c7c <uart_comms+0x5c4>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	f47f ae12 	bne.w	8005786 <uart_comms+0xce>
				memcpy(return_value, uart_command, 2);
 8005b62:	4b36      	ldr	r3, [pc, #216]	; (8005c3c <uart_comms+0x584>)
 8005b64:	6819      	ldr	r1, [r3, #0]
 8005b66:	8812      	ldrh	r2, [r2, #0]
 8005b68:	800a      	strh	r2, [r1, #0]
				memcpy(return_value+2, endSimbol,2 );
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4937      	ldr	r1, [pc, #220]	; (8005c4c <uart_comms+0x594>)
 8005b6e:	8809      	ldrh	r1, [r1, #0]
 8005b70:	8051      	strh	r1, [r2, #2]
				HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8005b72:	681c      	ldr	r4, [r3, #0]
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7fa fb2b 	bl	80001d0 <strlen>
 8005b7a:	b282      	uxth	r2, r0
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4834      	ldr	r0, [pc, #208]	; (8005c50 <uart_comms+0x598>)
 8005b80:	f7fd fcb9 	bl	80034f6 <HAL_UART_Transmit_IT>
				if(uart_command[3] == '1'){ // first heating schedule
 8005b84:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <uart_comms+0x5bc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	2b31      	cmp	r3, #49	; 0x31
 8005b8c:	d07c      	beq.n	8005c88 <uart_comms+0x5d0>
				else if(uart_command[3] == '2'){ // second heating schedule
 8005b8e:	2b32      	cmp	r3, #50	; 0x32
 8005b90:	f000 80c5 	beq.w	8005d1e <uart_comms+0x666>
				else if(uart_command[3] == '3'){ // 3rd heating schedule
 8005b94:	2b33      	cmp	r3, #51	; 0x33
 8005b96:	f47f adf6 	bne.w	8005786 <uart_comms+0xce>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005b9a:	4d33      	ldr	r5, [pc, #204]	; (8005c68 <uart_comms+0x5b0>)
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4b2f      	ldr	r3, [pc, #188]	; (8005c5c <uart_comms+0x5a4>)
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	f000 fb83 	bl	80062ac <strtok>
 8005ba6:	4c2e      	ldr	r4, [pc, #184]	; (8005c60 <uart_comms+0x5a8>)
 8005ba8:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005baa:	4629      	mov	r1, r5
 8005bac:	2000      	movs	r0, #0
 8005bae:	f000 fb7d 	bl	80062ac <strtok>
 8005bb2:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f000 fb78 	bl	80062ac <strtok>
 8005bbc:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8005bbe:	220a      	movs	r2, #10
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f000 fc47 	bl	8006454 <strtol>
 8005bc6:	4e2e      	ldr	r6, [pc, #184]	; (8005c80 <uart_comms+0x5c8>)
 8005bc8:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
					heating_info = (strtok(NULL, ","));
 8005bcc:	4629      	mov	r1, r5
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f000 fb6c 	bl	80062ac <strtok>
 8005bd4:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8005bd6:	220a      	movs	r2, #10
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f000 fc3b 	bl	8006454 <strtol>
 8005bde:	f886 0051 	strb.w	r0, [r6, #81]	; 0x51
					heating_info = (strtok(NULL, ","));
 8005be2:	4629      	mov	r1, r5
 8005be4:	2000      	movs	r0, #0
 8005be6:	f000 fb61 	bl	80062ac <strtok>
 8005bea:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8005bec:	220a      	movs	r2, #10
 8005bee:	2100      	movs	r1, #0
 8005bf0:	f000 fc30 	bl	8006454 <strtol>
 8005bf4:	f886 0052 	strb.w	r0, [r6, #82]	; 0x52
					heating_info = (strtok(NULL, ","));
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f000 fb56 	bl	80062ac <strtok>
 8005c00:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8005c02:	220a      	movs	r2, #10
 8005c04:	2100      	movs	r1, #0
 8005c06:	f000 fc25 	bl	8006454 <strtol>
 8005c0a:	f886 0064 	strb.w	r0, [r6, #100]	; 0x64
					heating_info = (strtok(NULL, ","));
 8005c0e:	4629      	mov	r1, r5
 8005c10:	2000      	movs	r0, #0
 8005c12:	f000 fb4b 	bl	80062ac <strtok>
 8005c16:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 8005c18:	220a      	movs	r2, #10
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	f000 fc1a 	bl	8006454 <strtol>
 8005c20:	f886 0065 	strb.w	r0, [r6, #101]	; 0x65
					heating_info = (strtok(NULL, "\r\n"));
 8005c24:	4917      	ldr	r1, [pc, #92]	; (8005c84 <uart_comms+0x5cc>)
 8005c26:	2000      	movs	r0, #0
 8005c28:	f000 fb40 	bl	80062ac <strtok>
 8005c2c:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 8005c2e:	220a      	movs	r2, #10
 8005c30:	2100      	movs	r1, #0
 8005c32:	f000 fc0f 	bl	8006454 <strtol>
 8005c36:	f886 0066 	strb.w	r0, [r6, #102]	; 0x66
 8005c3a:	e5a4      	b.n	8005786 <uart_comms+0xce>
 8005c3c:	200002a0 	.word	0x200002a0
 8005c40:	20000004 	.word	0x20000004
 8005c44:	200002b0 	.word	0x200002b0
 8005c48:	200002ac 	.word	0x200002ac
 8005c4c:	20000008 	.word	0x20000008
 8005c50:	20000400 	.word	0x20000400
 8005c54:	20000470 	.word	0x20000470
 8005c58:	08006e64 	.word	0x08006e64
 8005c5c:	200002cc 	.word	0x200002cc
 8005c60:	20000288 	.word	0x20000288
 8005c64:	200002bc 	.word	0x200002bc
 8005c68:	08006e68 	.word	0x08006e68
 8005c6c:	08006e6c 	.word	0x08006e6c
 8005c70:	2000025c 	.word	0x2000025c
 8005c74:	200002c8 	.word	0x200002c8
 8005c78:	200002b4 	.word	0x200002b4
 8005c7c:	20000250 	.word	0x20000250
 8005c80:	20000530 	.word	0x20000530
 8005c84:	08006e70 	.word	0x08006e70
					heating_info = strtok((char*)uart_command_copy, ",");
 8005c88:	4dc0      	ldr	r5, [pc, #768]	; (8005f8c <uart_comms+0x8d4>)
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4bc0      	ldr	r3, [pc, #768]	; (8005f90 <uart_comms+0x8d8>)
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	f000 fb0c 	bl	80062ac <strtok>
 8005c94:	4cbf      	ldr	r4, [pc, #764]	; (8005f94 <uart_comms+0x8dc>)
 8005c96:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005c98:	4629      	mov	r1, r5
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f000 fb06 	bl	80062ac <strtok>
 8005ca0:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f000 fb01 	bl	80062ac <strtok>
 8005caa:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005cac:	220a      	movs	r2, #10
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f000 fbd0 	bl	8006454 <strtol>
 8005cb4:	4eb8      	ldr	r6, [pc, #736]	; (8005f98 <uart_comms+0x8e0>)
 8005cb6:	7030      	strb	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005cb8:	4629      	mov	r1, r5
 8005cba:	2000      	movs	r0, #0
 8005cbc:	f000 faf6 	bl	80062ac <strtok>
 8005cc0:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005cc2:	220a      	movs	r2, #10
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	f000 fbc5 	bl	8006454 <strtol>
 8005cca:	7070      	strb	r0, [r6, #1]
					heating_info = (strtok(NULL, ","));
 8005ccc:	4629      	mov	r1, r5
 8005cce:	2000      	movs	r0, #0
 8005cd0:	f000 faec 	bl	80062ac <strtok>
 8005cd4:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005cd6:	220a      	movs	r2, #10
 8005cd8:	2100      	movs	r1, #0
 8005cda:	f000 fbbb 	bl	8006454 <strtol>
 8005cde:	70b0      	strb	r0, [r6, #2]
					heating_info = (strtok(NULL, ","));
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f000 fae2 	bl	80062ac <strtok>
 8005ce8:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005cea:	220a      	movs	r2, #10
 8005cec:	2100      	movs	r1, #0
 8005cee:	f000 fbb1 	bl	8006454 <strtol>
 8005cf2:	7530      	strb	r0, [r6, #20]
					heating_info = (strtok(NULL, ","));
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f000 fad8 	bl	80062ac <strtok>
 8005cfc:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005cfe:	220a      	movs	r2, #10
 8005d00:	2100      	movs	r1, #0
 8005d02:	f000 fba7 	bl	8006454 <strtol>
 8005d06:	7570      	strb	r0, [r6, #21]
					heating_info = (strtok(NULL, "\r\n"));
 8005d08:	49a4      	ldr	r1, [pc, #656]	; (8005f9c <uart_comms+0x8e4>)
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f000 face 	bl	80062ac <strtok>
 8005d10:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8005d12:	220a      	movs	r2, #10
 8005d14:	2100      	movs	r1, #0
 8005d16:	f000 fb9d 	bl	8006454 <strtol>
 8005d1a:	75b0      	strb	r0, [r6, #22]
 8005d1c:	e533      	b.n	8005786 <uart_comms+0xce>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005d1e:	4d9b      	ldr	r5, [pc, #620]	; (8005f8c <uart_comms+0x8d4>)
 8005d20:	4629      	mov	r1, r5
 8005d22:	4b9b      	ldr	r3, [pc, #620]	; (8005f90 <uart_comms+0x8d8>)
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	f000 fac1 	bl	80062ac <strtok>
 8005d2a:	4c9a      	ldr	r4, [pc, #616]	; (8005f94 <uart_comms+0x8dc>)
 8005d2c:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005d2e:	4629      	mov	r1, r5
 8005d30:	2000      	movs	r0, #0
 8005d32:	f000 fabb 	bl	80062ac <strtok>
 8005d36:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005d38:	4629      	mov	r1, r5
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f000 fab6 	bl	80062ac <strtok>
 8005d40:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005d42:	220a      	movs	r2, #10
 8005d44:	2100      	movs	r1, #0
 8005d46:	f000 fb85 	bl	8006454 <strtol>
 8005d4a:	4e93      	ldr	r6, [pc, #588]	; (8005f98 <uart_comms+0x8e0>)
 8005d4c:	f886 0028 	strb.w	r0, [r6, #40]	; 0x28
					heating_info = (strtok(NULL, ","));
 8005d50:	4629      	mov	r1, r5
 8005d52:	2000      	movs	r0, #0
 8005d54:	f000 faaa 	bl	80062ac <strtok>
 8005d58:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8005d5a:	220a      	movs	r2, #10
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	f000 fb79 	bl	8006454 <strtol>
 8005d62:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
					heating_info = (strtok(NULL, ","));
 8005d66:	4629      	mov	r1, r5
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f000 fa9f 	bl	80062ac <strtok>
 8005d6e:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8005d70:	220a      	movs	r2, #10
 8005d72:	2100      	movs	r1, #0
 8005d74:	f000 fb6e 	bl	8006454 <strtol>
 8005d78:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
					heating_info = (strtok(NULL, ","));
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f000 fa94 	bl	80062ac <strtok>
 8005d84:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8005d86:	220a      	movs	r2, #10
 8005d88:	2100      	movs	r1, #0
 8005d8a:	f000 fb63 	bl	8006454 <strtol>
 8005d8e:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
					heating_info = (strtok(NULL, ","));
 8005d92:	4629      	mov	r1, r5
 8005d94:	2000      	movs	r0, #0
 8005d96:	f000 fa89 	bl	80062ac <strtok>
 8005d9a:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8005d9c:	220a      	movs	r2, #10
 8005d9e:	2100      	movs	r1, #0
 8005da0:	f000 fb58 	bl	8006454 <strtol>
 8005da4:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
					heating_info = (strtok(NULL, "\r\n"));
 8005da8:	497c      	ldr	r1, [pc, #496]	; (8005f9c <uart_comms+0x8e4>)
 8005daa:	2000      	movs	r0, #0
 8005dac:	f000 fa7e 	bl	80062ac <strtok>
 8005db0:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8005db2:	220a      	movs	r2, #10
 8005db4:	2100      	movs	r1, #0
 8005db6:	f000 fb4d 	bl	8006454 <strtol>
 8005dba:	f886 003e 	strb.w	r0, [r6, #62]	; 0x3e
 8005dbe:	e4e2      	b.n	8005786 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8005dc0:	4c77      	ldr	r4, [pc, #476]	; (8005fa0 <uart_comms+0x8e8>)
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	8812      	ldrh	r2, [r2, #0]
 8005dc6:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	4d76      	ldr	r5, [pc, #472]	; (8005fa4 <uart_comms+0x8ec>)
 8005dcc:	782f      	ldrb	r7, [r5, #0]
 8005dce:	709f      	strb	r7, [r3, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8005dd0:	6826      	ldr	r6, [r4, #0]
 8005dd2:	3603      	adds	r6, #3
 8005dd4:	4b74      	ldr	r3, [pc, #464]	; (8005fa8 <uart_comms+0x8f0>)
 8005dd6:	f8d3 8000 	ldr.w	r8, [r3]
 8005dda:	4640      	mov	r0, r8
 8005ddc:	f7fa f9f8 	bl	80001d0 <strlen>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4641      	mov	r1, r8
 8005de4:	4630      	mov	r0, r6
 8005de6:	f000 f96d 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005dea:	6826      	ldr	r6, [r4, #0]
 8005dec:	4630      	mov	r0, r6
 8005dee:	f7fa f9ef 	bl	80001d0 <strlen>
 8005df2:	5437      	strb	r7, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8005df4:	6826      	ldr	r6, [r4, #0]
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7fa f9ea 	bl	80001d0 <strlen>
 8005dfc:	4406      	add	r6, r0
 8005dfe:	4b6b      	ldr	r3, [pc, #428]	; (8005fac <uart_comms+0x8f4>)
 8005e00:	681f      	ldr	r7, [r3, #0]
 8005e02:	4638      	mov	r0, r7
 8005e04:	f7fa f9e4 	bl	80001d0 <strlen>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f000 f959 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005e12:	6826      	ldr	r6, [r4, #0]
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7fa f9db 	bl	80001d0 <strlen>
 8005e1a:	782b      	ldrb	r3, [r5, #0]
 8005e1c:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 8005e1e:	6826      	ldr	r6, [r4, #0]
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7fa f9d5 	bl	80001d0 <strlen>
 8005e26:	4406      	add	r6, r0
 8005e28:	4b61      	ldr	r3, [pc, #388]	; (8005fb0 <uart_comms+0x8f8>)
 8005e2a:	681f      	ldr	r7, [r3, #0]
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7fa f9cf 	bl	80001d0 <strlen>
 8005e32:	4602      	mov	r2, r0
 8005e34:	4639      	mov	r1, r7
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 f944 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005e3c:	6826      	ldr	r6, [r4, #0]
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7fa f9c6 	bl	80001d0 <strlen>
 8005e44:	782b      	ldrb	r3, [r5, #0]
 8005e46:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 8005e48:	6826      	ldr	r6, [r4, #0]
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7fa f9c0 	bl	80001d0 <strlen>
 8005e50:	4406      	add	r6, r0
 8005e52:	4b58      	ldr	r3, [pc, #352]	; (8005fb4 <uart_comms+0x8fc>)
 8005e54:	681f      	ldr	r7, [r3, #0]
 8005e56:	4638      	mov	r0, r7
 8005e58:	f7fa f9ba 	bl	80001d0 <strlen>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 f92f 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005e66:	6826      	ldr	r6, [r4, #0]
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7fa f9b1 	bl	80001d0 <strlen>
 8005e6e:	782b      	ldrb	r3, [r5, #0]
 8005e70:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8005e72:	6826      	ldr	r6, [r4, #0]
 8005e74:	4630      	mov	r0, r6
 8005e76:	f7fa f9ab 	bl	80001d0 <strlen>
 8005e7a:	4406      	add	r6, r0
 8005e7c:	4b4e      	ldr	r3, [pc, #312]	; (8005fb8 <uart_comms+0x900>)
 8005e7e:	681f      	ldr	r7, [r3, #0]
 8005e80:	4638      	mov	r0, r7
 8005e82:	f7fa f9a5 	bl	80001d0 <strlen>
 8005e86:	4602      	mov	r2, r0
 8005e88:	4639      	mov	r1, r7
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f000 f91a 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005e90:	6826      	ldr	r6, [r4, #0]
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7fa f99c 	bl	80001d0 <strlen>
 8005e98:	782b      	ldrb	r3, [r5, #0]
 8005e9a:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8005e9c:	6826      	ldr	r6, [r4, #0]
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f7fa f996 	bl	80001d0 <strlen>
 8005ea4:	4406      	add	r6, r0
 8005ea6:	4b45      	ldr	r3, [pc, #276]	; (8005fbc <uart_comms+0x904>)
 8005ea8:	681f      	ldr	r7, [r3, #0]
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f7fa f990 	bl	80001d0 <strlen>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f905 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005eba:	6824      	ldr	r4, [r4, #0]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7fa f987 	bl	80001d0 <strlen>
 8005ec2:	782b      	ldrb	r3, [r5, #0]
 8005ec4:	5423      	strb	r3, [r4, r0]
			if(valve_state == valve_OPEN){
 8005ec6:	4b3e      	ldr	r3, [pc, #248]	; (8005fc0 <uart_comms+0x908>)
 8005ec8:	681c      	ldr	r4, [r3, #0]
 8005eca:	4b3e      	ldr	r3, [pc, #248]	; (8005fc4 <uart_comms+0x90c>)
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d01f      	beq.n	8005f10 <uart_comms+0x858>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 8005ed0:	4b33      	ldr	r3, [pc, #204]	; (8005fa0 <uart_comms+0x8e8>)
 8005ed2:	681d      	ldr	r5, [r3, #0]
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f7fa f97b 	bl	80001d0 <strlen>
 8005eda:	4405      	add	r5, r0
 8005edc:	4620      	mov	r0, r4
 8005ede:	f7fa f977 	bl	80001d0 <strlen>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f8ec 	bl	80060c4 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8005eec:	4c2c      	ldr	r4, [pc, #176]	; (8005fa0 <uart_comms+0x8e8>)
 8005eee:	6825      	ldr	r5, [r4, #0]
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f7fa f96d 	bl	80001d0 <strlen>
 8005ef6:	4b34      	ldr	r3, [pc, #208]	; (8005fc8 <uart_comms+0x910>)
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005efc:	6824      	ldr	r4, [r4, #0]
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fa f966 	bl	80001d0 <strlen>
 8005f04:	b282      	uxth	r2, r0
 8005f06:	4621      	mov	r1, r4
 8005f08:	4830      	ldr	r0, [pc, #192]	; (8005fcc <uart_comms+0x914>)
 8005f0a:	f7fd faf4 	bl	80034f6 <HAL_UART_Transmit_IT>
			break;
 8005f0e:	e43a      	b.n	8005786 <uart_comms+0xce>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8005f10:	4b23      	ldr	r3, [pc, #140]	; (8005fa0 <uart_comms+0x8e8>)
 8005f12:	681d      	ldr	r5, [r3, #0]
 8005f14:	4628      	mov	r0, r5
 8005f16:	f7fa f95b 	bl	80001d0 <strlen>
 8005f1a:	4405      	add	r5, r0
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f7fa f957 	bl	80001d0 <strlen>
 8005f22:	1e42      	subs	r2, r0, #1
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f8cc 	bl	80060c4 <memcpy>
 8005f2c:	e7de      	b.n	8005eec <uart_comms+0x834>
			log_receiced_num = uart_command[3] - 48;
 8005f2e:	78d3      	ldrb	r3, [r2, #3]
 8005f30:	3b30      	subs	r3, #48	; 0x30
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	4a26      	ldr	r2, [pc, #152]	; (8005fd0 <uart_comms+0x918>)
 8005f36:	7013      	strb	r3, [r2, #0]
			if(log_receiced_num > log_counter && log_full == 0){
 8005f38:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <uart_comms+0x91c>)
 8005f3a:	7812      	ldrb	r2, [r2, #0]
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d904      	bls.n	8005f4a <uart_comms+0x892>
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <uart_comms+0x920>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f43f ac1e 	beq.w	8005786 <uart_comms+0xce>
				memcpy(flash_stored, flash_mem_start, 50 );
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <uart_comms+0x924>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a24      	ldr	r2, [pc, #144]	; (8005fe0 <uart_comms+0x928>)
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f56:	681e      	ldr	r6, [r3, #0]
 8005f58:	685d      	ldr	r5, [r3, #4]
 8005f5a:	689c      	ldr	r4, [r3, #8]
 8005f5c:	68d8      	ldr	r0, [r3, #12]
 8005f5e:	6016      	str	r6, [r2, #0]
 8005f60:	6055      	str	r5, [r2, #4]
 8005f62:	6094      	str	r4, [r2, #8]
 8005f64:	60d0      	str	r0, [r2, #12]
 8005f66:	3310      	adds	r3, #16
 8005f68:	3210      	adds	r2, #16
 8005f6a:	428b      	cmp	r3, r1
 8005f6c:	d1f3      	bne.n	8005f56 <uart_comms+0x89e>
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	8013      	strh	r3, [r2, #0]
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)flash_stored, strlen((char*)flash_stored));
 8005f72:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <uart_comms+0x928>)
 8005f74:	681c      	ldr	r4, [r3, #0]
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7fa f92a 	bl	80001d0 <strlen>
 8005f7c:	b282      	uxth	r2, r0
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4812      	ldr	r0, [pc, #72]	; (8005fcc <uart_comms+0x914>)
 8005f82:	f7fd fab8 	bl	80034f6 <HAL_UART_Transmit_IT>
 8005f86:	f7ff bbfe 	b.w	8005786 <uart_comms+0xce>
 8005f8a:	bf00      	nop
 8005f8c:	08006e68 	.word	0x08006e68
 8005f90:	200002cc 	.word	0x200002cc
 8005f94:	20000288 	.word	0x20000288
 8005f98:	20000530 	.word	0x20000530
 8005f9c:	08006e70 	.word	0x08006e70
 8005fa0:	200002a0 	.word	0x200002a0
 8005fa4:	20000004 	.word	0x20000004
 8005fa8:	20000258 	.word	0x20000258
 8005fac:	200002dc 	.word	0x200002dc
 8005fb0:	2000024c 	.word	0x2000024c
 8005fb4:	20000270 	.word	0x20000270
 8005fb8:	200002c0 	.word	0x200002c0
 8005fbc:	20000284 	.word	0x20000284
 8005fc0:	200002d4 	.word	0x200002d4
 8005fc4:	2000002c 	.word	0x2000002c
 8005fc8:	20000008 	.word	0x20000008
 8005fcc:	20000400 	.word	0x20000400
 8005fd0:	2000028e 	.word	0x2000028e
 8005fd4:	2000028c 	.word	0x2000028c
 8005fd8:	2000028d 	.word	0x2000028d
 8005fdc:	20000010 	.word	0x20000010
 8005fe0:	2000026c 	.word	0x2000026c

08005fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800601c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005fe8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005fea:	e003      	b.n	8005ff4 <LoopCopyDataInit>

08005fec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005fec:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005fee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005ff0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005ff2:	3104      	adds	r1, #4

08005ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005ff4:	480b      	ldr	r0, [pc, #44]	; (8006024 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005ff8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005ffa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005ffc:	d3f6      	bcc.n	8005fec <CopyDataInit>
	ldr	r2, =_sbss
 8005ffe:	4a0b      	ldr	r2, [pc, #44]	; (800602c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006000:	e002      	b.n	8006008 <LoopFillZerobss>

08006002 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006002:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006004:	f842 3b04 	str.w	r3, [r2], #4

08006008 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <LoopForever+0x16>)
	cmp	r2, r3
 800600a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800600c:	d3f9      	bcc.n	8006002 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800600e:	f7ff fb1f 	bl	8005650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006012:	f000 f811 	bl	8006038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006016:	f7fe fe5b 	bl	8004cd0 <main>

0800601a <LoopForever>:

LoopForever:
    b LoopForever
 800601a:	e7fe      	b.n	800601a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800601c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006020:	08006fec 	.word	0x08006fec
	ldr	r0, =_sdata
 8006024:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006028:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 800602c:	20000208 	.word	0x20000208
	ldr	r3, = _ebss
 8006030:	200005e4 	.word	0x200005e4

08006034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006034:	e7fe      	b.n	8006034 <ADC1_2_IRQHandler>
	...

08006038 <__libc_init_array>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	4e0d      	ldr	r6, [pc, #52]	; (8006070 <__libc_init_array+0x38>)
 800603c:	4c0d      	ldr	r4, [pc, #52]	; (8006074 <__libc_init_array+0x3c>)
 800603e:	1ba4      	subs	r4, r4, r6
 8006040:	10a4      	asrs	r4, r4, #2
 8006042:	2500      	movs	r5, #0
 8006044:	42a5      	cmp	r5, r4
 8006046:	d109      	bne.n	800605c <__libc_init_array+0x24>
 8006048:	4e0b      	ldr	r6, [pc, #44]	; (8006078 <__libc_init_array+0x40>)
 800604a:	4c0c      	ldr	r4, [pc, #48]	; (800607c <__libc_init_array+0x44>)
 800604c:	f000 feca 	bl	8006de4 <_init>
 8006050:	1ba4      	subs	r4, r4, r6
 8006052:	10a4      	asrs	r4, r4, #2
 8006054:	2500      	movs	r5, #0
 8006056:	42a5      	cmp	r5, r4
 8006058:	d105      	bne.n	8006066 <__libc_init_array+0x2e>
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006060:	4798      	blx	r3
 8006062:	3501      	adds	r5, #1
 8006064:	e7ee      	b.n	8006044 <__libc_init_array+0xc>
 8006066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800606a:	4798      	blx	r3
 800606c:	3501      	adds	r5, #1
 800606e:	e7f2      	b.n	8006056 <__libc_init_array+0x1e>
 8006070:	08006fe4 	.word	0x08006fe4
 8006074:	08006fe4 	.word	0x08006fe4
 8006078:	08006fe4 	.word	0x08006fe4
 800607c:	08006fe8 	.word	0x08006fe8

08006080 <__itoa>:
 8006080:	1e93      	subs	r3, r2, #2
 8006082:	2b22      	cmp	r3, #34	; 0x22
 8006084:	b510      	push	{r4, lr}
 8006086:	460c      	mov	r4, r1
 8006088:	d904      	bls.n	8006094 <__itoa+0x14>
 800608a:	2300      	movs	r3, #0
 800608c:	700b      	strb	r3, [r1, #0]
 800608e:	461c      	mov	r4, r3
 8006090:	4620      	mov	r0, r4
 8006092:	bd10      	pop	{r4, pc}
 8006094:	2a0a      	cmp	r2, #10
 8006096:	d109      	bne.n	80060ac <__itoa+0x2c>
 8006098:	2800      	cmp	r0, #0
 800609a:	da07      	bge.n	80060ac <__itoa+0x2c>
 800609c:	232d      	movs	r3, #45	; 0x2d
 800609e:	700b      	strb	r3, [r1, #0]
 80060a0:	4240      	negs	r0, r0
 80060a2:	2101      	movs	r1, #1
 80060a4:	4421      	add	r1, r4
 80060a6:	f000 f9eb 	bl	8006480 <__utoa>
 80060aa:	e7f1      	b.n	8006090 <__itoa+0x10>
 80060ac:	2100      	movs	r1, #0
 80060ae:	e7f9      	b.n	80060a4 <__itoa+0x24>

080060b0 <itoa>:
 80060b0:	f7ff bfe6 	b.w	8006080 <__itoa>

080060b4 <malloc>:
 80060b4:	4b02      	ldr	r3, [pc, #8]	; (80060c0 <malloc+0xc>)
 80060b6:	4601      	mov	r1, r0
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	f000 b865 	b.w	8006188 <_malloc_r>
 80060be:	bf00      	nop
 80060c0:	20000030 	.word	0x20000030

080060c4 <memcpy>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	1e43      	subs	r3, r0, #1
 80060c8:	440a      	add	r2, r1
 80060ca:	4291      	cmp	r1, r2
 80060cc:	d100      	bne.n	80060d0 <memcpy+0xc>
 80060ce:	bd10      	pop	{r4, pc}
 80060d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d8:	e7f7      	b.n	80060ca <memcpy+0x6>

080060da <memset>:
 80060da:	4402      	add	r2, r0
 80060dc:	4603      	mov	r3, r0
 80060de:	4293      	cmp	r3, r2
 80060e0:	d100      	bne.n	80060e4 <memset+0xa>
 80060e2:	4770      	bx	lr
 80060e4:	f803 1b01 	strb.w	r1, [r3], #1
 80060e8:	e7f9      	b.n	80060de <memset+0x4>
	...

080060ec <_free_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4605      	mov	r5, r0
 80060f0:	2900      	cmp	r1, #0
 80060f2:	d045      	beq.n	8006180 <_free_r+0x94>
 80060f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f8:	1f0c      	subs	r4, r1, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bfb8      	it	lt
 80060fe:	18e4      	addlt	r4, r4, r3
 8006100:	f000 fa13 	bl	800652a <__malloc_lock>
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <_free_r+0x98>)
 8006106:	6813      	ldr	r3, [r2, #0]
 8006108:	4610      	mov	r0, r2
 800610a:	b933      	cbnz	r3, 800611a <_free_r+0x2e>
 800610c:	6063      	str	r3, [r4, #4]
 800610e:	6014      	str	r4, [r2, #0]
 8006110:	4628      	mov	r0, r5
 8006112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006116:	f000 ba09 	b.w	800652c <__malloc_unlock>
 800611a:	42a3      	cmp	r3, r4
 800611c:	d90c      	bls.n	8006138 <_free_r+0x4c>
 800611e:	6821      	ldr	r1, [r4, #0]
 8006120:	1862      	adds	r2, r4, r1
 8006122:	4293      	cmp	r3, r2
 8006124:	bf04      	itt	eq
 8006126:	681a      	ldreq	r2, [r3, #0]
 8006128:	685b      	ldreq	r3, [r3, #4]
 800612a:	6063      	str	r3, [r4, #4]
 800612c:	bf04      	itt	eq
 800612e:	1852      	addeq	r2, r2, r1
 8006130:	6022      	streq	r2, [r4, #0]
 8006132:	6004      	str	r4, [r0, #0]
 8006134:	e7ec      	b.n	8006110 <_free_r+0x24>
 8006136:	4613      	mov	r3, r2
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	b10a      	cbz	r2, 8006140 <_free_r+0x54>
 800613c:	42a2      	cmp	r2, r4
 800613e:	d9fa      	bls.n	8006136 <_free_r+0x4a>
 8006140:	6819      	ldr	r1, [r3, #0]
 8006142:	1858      	adds	r0, r3, r1
 8006144:	42a0      	cmp	r0, r4
 8006146:	d10b      	bne.n	8006160 <_free_r+0x74>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	4401      	add	r1, r0
 800614c:	1858      	adds	r0, r3, r1
 800614e:	4282      	cmp	r2, r0
 8006150:	6019      	str	r1, [r3, #0]
 8006152:	d1dd      	bne.n	8006110 <_free_r+0x24>
 8006154:	6810      	ldr	r0, [r2, #0]
 8006156:	6852      	ldr	r2, [r2, #4]
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	4401      	add	r1, r0
 800615c:	6019      	str	r1, [r3, #0]
 800615e:	e7d7      	b.n	8006110 <_free_r+0x24>
 8006160:	d902      	bls.n	8006168 <_free_r+0x7c>
 8006162:	230c      	movs	r3, #12
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	e7d3      	b.n	8006110 <_free_r+0x24>
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	1821      	adds	r1, r4, r0
 800616c:	428a      	cmp	r2, r1
 800616e:	bf04      	itt	eq
 8006170:	6811      	ldreq	r1, [r2, #0]
 8006172:	6852      	ldreq	r2, [r2, #4]
 8006174:	6062      	str	r2, [r4, #4]
 8006176:	bf04      	itt	eq
 8006178:	1809      	addeq	r1, r1, r0
 800617a:	6021      	streq	r1, [r4, #0]
 800617c:	605c      	str	r4, [r3, #4]
 800617e:	e7c7      	b.n	8006110 <_free_r+0x24>
 8006180:	bd38      	pop	{r3, r4, r5, pc}
 8006182:	bf00      	nop
 8006184:	200002e4 	.word	0x200002e4

08006188 <_malloc_r>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	1ccd      	adds	r5, r1, #3
 800618c:	f025 0503 	bic.w	r5, r5, #3
 8006190:	3508      	adds	r5, #8
 8006192:	2d0c      	cmp	r5, #12
 8006194:	bf38      	it	cc
 8006196:	250c      	movcc	r5, #12
 8006198:	2d00      	cmp	r5, #0
 800619a:	4606      	mov	r6, r0
 800619c:	db01      	blt.n	80061a2 <_malloc_r+0x1a>
 800619e:	42a9      	cmp	r1, r5
 80061a0:	d903      	bls.n	80061aa <_malloc_r+0x22>
 80061a2:	230c      	movs	r3, #12
 80061a4:	6033      	str	r3, [r6, #0]
 80061a6:	2000      	movs	r0, #0
 80061a8:	bd70      	pop	{r4, r5, r6, pc}
 80061aa:	f000 f9be 	bl	800652a <__malloc_lock>
 80061ae:	4a23      	ldr	r2, [pc, #140]	; (800623c <_malloc_r+0xb4>)
 80061b0:	6814      	ldr	r4, [r2, #0]
 80061b2:	4621      	mov	r1, r4
 80061b4:	b991      	cbnz	r1, 80061dc <_malloc_r+0x54>
 80061b6:	4c22      	ldr	r4, [pc, #136]	; (8006240 <_malloc_r+0xb8>)
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	b91b      	cbnz	r3, 80061c4 <_malloc_r+0x3c>
 80061bc:	4630      	mov	r0, r6
 80061be:	f000 f841 	bl	8006244 <_sbrk_r>
 80061c2:	6020      	str	r0, [r4, #0]
 80061c4:	4629      	mov	r1, r5
 80061c6:	4630      	mov	r0, r6
 80061c8:	f000 f83c 	bl	8006244 <_sbrk_r>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d126      	bne.n	800621e <_malloc_r+0x96>
 80061d0:	230c      	movs	r3, #12
 80061d2:	6033      	str	r3, [r6, #0]
 80061d4:	4630      	mov	r0, r6
 80061d6:	f000 f9a9 	bl	800652c <__malloc_unlock>
 80061da:	e7e4      	b.n	80061a6 <_malloc_r+0x1e>
 80061dc:	680b      	ldr	r3, [r1, #0]
 80061de:	1b5b      	subs	r3, r3, r5
 80061e0:	d41a      	bmi.n	8006218 <_malloc_r+0x90>
 80061e2:	2b0b      	cmp	r3, #11
 80061e4:	d90f      	bls.n	8006206 <_malloc_r+0x7e>
 80061e6:	600b      	str	r3, [r1, #0]
 80061e8:	50cd      	str	r5, [r1, r3]
 80061ea:	18cc      	adds	r4, r1, r3
 80061ec:	4630      	mov	r0, r6
 80061ee:	f000 f99d 	bl	800652c <__malloc_unlock>
 80061f2:	f104 000b 	add.w	r0, r4, #11
 80061f6:	1d23      	adds	r3, r4, #4
 80061f8:	f020 0007 	bic.w	r0, r0, #7
 80061fc:	1ac3      	subs	r3, r0, r3
 80061fe:	d01b      	beq.n	8006238 <_malloc_r+0xb0>
 8006200:	425a      	negs	r2, r3
 8006202:	50e2      	str	r2, [r4, r3]
 8006204:	bd70      	pop	{r4, r5, r6, pc}
 8006206:	428c      	cmp	r4, r1
 8006208:	bf0d      	iteet	eq
 800620a:	6863      	ldreq	r3, [r4, #4]
 800620c:	684b      	ldrne	r3, [r1, #4]
 800620e:	6063      	strne	r3, [r4, #4]
 8006210:	6013      	streq	r3, [r2, #0]
 8006212:	bf18      	it	ne
 8006214:	460c      	movne	r4, r1
 8006216:	e7e9      	b.n	80061ec <_malloc_r+0x64>
 8006218:	460c      	mov	r4, r1
 800621a:	6849      	ldr	r1, [r1, #4]
 800621c:	e7ca      	b.n	80061b4 <_malloc_r+0x2c>
 800621e:	1cc4      	adds	r4, r0, #3
 8006220:	f024 0403 	bic.w	r4, r4, #3
 8006224:	42a0      	cmp	r0, r4
 8006226:	d005      	beq.n	8006234 <_malloc_r+0xac>
 8006228:	1a21      	subs	r1, r4, r0
 800622a:	4630      	mov	r0, r6
 800622c:	f000 f80a 	bl	8006244 <_sbrk_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d0cd      	beq.n	80061d0 <_malloc_r+0x48>
 8006234:	6025      	str	r5, [r4, #0]
 8006236:	e7d9      	b.n	80061ec <_malloc_r+0x64>
 8006238:	bd70      	pop	{r4, r5, r6, pc}
 800623a:	bf00      	nop
 800623c:	200002e4 	.word	0x200002e4
 8006240:	200002e8 	.word	0x200002e8

08006244 <_sbrk_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4c06      	ldr	r4, [pc, #24]	; (8006260 <_sbrk_r+0x1c>)
 8006248:	2300      	movs	r3, #0
 800624a:	4605      	mov	r5, r0
 800624c:	4608      	mov	r0, r1
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	f000 fdba 	bl	8006dc8 <_sbrk>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_sbrk_r+0x1a>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	b103      	cbz	r3, 800625e <_sbrk_r+0x1a>
 800625c:	602b      	str	r3, [r5, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	200005e0 	.word	0x200005e0

08006264 <siprintf>:
 8006264:	b40e      	push	{r1, r2, r3}
 8006266:	b500      	push	{lr}
 8006268:	b09c      	sub	sp, #112	; 0x70
 800626a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800626e:	ab1d      	add	r3, sp, #116	; 0x74
 8006270:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006274:	9002      	str	r0, [sp, #8]
 8006276:	9006      	str	r0, [sp, #24]
 8006278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800627c:	480a      	ldr	r0, [pc, #40]	; (80062a8 <siprintf+0x44>)
 800627e:	9104      	str	r1, [sp, #16]
 8006280:	9107      	str	r1, [sp, #28]
 8006282:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006286:	f853 2b04 	ldr.w	r2, [r3], #4
 800628a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800628e:	6800      	ldr	r0, [r0, #0]
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	a902      	add	r1, sp, #8
 8006294:	f000 f9a6 	bl	80065e4 <_svfiprintf_r>
 8006298:	9b02      	ldr	r3, [sp, #8]
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	b01c      	add	sp, #112	; 0x70
 80062a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a4:	b003      	add	sp, #12
 80062a6:	4770      	bx	lr
 80062a8:	20000030 	.word	0x20000030

080062ac <strtok>:
 80062ac:	4b13      	ldr	r3, [pc, #76]	; (80062fc <strtok+0x50>)
 80062ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b2:	681d      	ldr	r5, [r3, #0]
 80062b4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	b9b4      	cbnz	r4, 80062ea <strtok+0x3e>
 80062bc:	2050      	movs	r0, #80	; 0x50
 80062be:	f7ff fef9 	bl	80060b4 <malloc>
 80062c2:	65a8      	str	r0, [r5, #88]	; 0x58
 80062c4:	6004      	str	r4, [r0, #0]
 80062c6:	6044      	str	r4, [r0, #4]
 80062c8:	6084      	str	r4, [r0, #8]
 80062ca:	60c4      	str	r4, [r0, #12]
 80062cc:	6104      	str	r4, [r0, #16]
 80062ce:	6144      	str	r4, [r0, #20]
 80062d0:	6184      	str	r4, [r0, #24]
 80062d2:	6284      	str	r4, [r0, #40]	; 0x28
 80062d4:	62c4      	str	r4, [r0, #44]	; 0x2c
 80062d6:	6304      	str	r4, [r0, #48]	; 0x30
 80062d8:	6344      	str	r4, [r0, #52]	; 0x34
 80062da:	6384      	str	r4, [r0, #56]	; 0x38
 80062dc:	63c4      	str	r4, [r0, #60]	; 0x3c
 80062de:	6404      	str	r4, [r0, #64]	; 0x40
 80062e0:	6444      	str	r4, [r0, #68]	; 0x44
 80062e2:	6484      	str	r4, [r0, #72]	; 0x48
 80062e4:	64c4      	str	r4, [r0, #76]	; 0x4c
 80062e6:	7704      	strb	r4, [r0, #28]
 80062e8:	6244      	str	r4, [r0, #36]	; 0x24
 80062ea:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80062ec:	4639      	mov	r1, r7
 80062ee:	4630      	mov	r0, r6
 80062f0:	2301      	movs	r3, #1
 80062f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	f000 b803 	b.w	8006300 <__strtok_r>
 80062fa:	bf00      	nop
 80062fc:	20000030 	.word	0x20000030

08006300 <__strtok_r>:
 8006300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006302:	b918      	cbnz	r0, 800630c <__strtok_r+0xc>
 8006304:	6810      	ldr	r0, [r2, #0]
 8006306:	b908      	cbnz	r0, 800630c <__strtok_r+0xc>
 8006308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630a:	4620      	mov	r0, r4
 800630c:	4604      	mov	r4, r0
 800630e:	460f      	mov	r7, r1
 8006310:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006314:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006318:	b91e      	cbnz	r6, 8006322 <__strtok_r+0x22>
 800631a:	b965      	cbnz	r5, 8006336 <__strtok_r+0x36>
 800631c:	6015      	str	r5, [r2, #0]
 800631e:	4628      	mov	r0, r5
 8006320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006322:	42b5      	cmp	r5, r6
 8006324:	d1f6      	bne.n	8006314 <__strtok_r+0x14>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1ef      	bne.n	800630a <__strtok_r+0xa>
 800632a:	6014      	str	r4, [r2, #0]
 800632c:	7003      	strb	r3, [r0, #0]
 800632e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006330:	461c      	mov	r4, r3
 8006332:	e00c      	b.n	800634e <__strtok_r+0x4e>
 8006334:	b915      	cbnz	r5, 800633c <__strtok_r+0x3c>
 8006336:	f814 3b01 	ldrb.w	r3, [r4], #1
 800633a:	460e      	mov	r6, r1
 800633c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006340:	42ab      	cmp	r3, r5
 8006342:	d1f7      	bne.n	8006334 <__strtok_r+0x34>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f3      	beq.n	8006330 <__strtok_r+0x30>
 8006348:	2300      	movs	r3, #0
 800634a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800634e:	6014      	str	r4, [r2, #0]
 8006350:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006352 <_strtol_l.isra.0>:
 8006352:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006356:	4680      	mov	r8, r0
 8006358:	4689      	mov	r9, r1
 800635a:	4692      	mov	sl, r2
 800635c:	461f      	mov	r7, r3
 800635e:	468b      	mov	fp, r1
 8006360:	465d      	mov	r5, fp
 8006362:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006364:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006368:	f000 f8ca 	bl	8006500 <__locale_ctype_ptr_l>
 800636c:	4420      	add	r0, r4
 800636e:	7846      	ldrb	r6, [r0, #1]
 8006370:	f016 0608 	ands.w	r6, r6, #8
 8006374:	d10b      	bne.n	800638e <_strtol_l.isra.0+0x3c>
 8006376:	2c2d      	cmp	r4, #45	; 0x2d
 8006378:	d10b      	bne.n	8006392 <_strtol_l.isra.0+0x40>
 800637a:	782c      	ldrb	r4, [r5, #0]
 800637c:	2601      	movs	r6, #1
 800637e:	f10b 0502 	add.w	r5, fp, #2
 8006382:	b167      	cbz	r7, 800639e <_strtol_l.isra.0+0x4c>
 8006384:	2f10      	cmp	r7, #16
 8006386:	d114      	bne.n	80063b2 <_strtol_l.isra.0+0x60>
 8006388:	2c30      	cmp	r4, #48	; 0x30
 800638a:	d00a      	beq.n	80063a2 <_strtol_l.isra.0+0x50>
 800638c:	e011      	b.n	80063b2 <_strtol_l.isra.0+0x60>
 800638e:	46ab      	mov	fp, r5
 8006390:	e7e6      	b.n	8006360 <_strtol_l.isra.0+0xe>
 8006392:	2c2b      	cmp	r4, #43	; 0x2b
 8006394:	bf04      	itt	eq
 8006396:	782c      	ldrbeq	r4, [r5, #0]
 8006398:	f10b 0502 	addeq.w	r5, fp, #2
 800639c:	e7f1      	b.n	8006382 <_strtol_l.isra.0+0x30>
 800639e:	2c30      	cmp	r4, #48	; 0x30
 80063a0:	d127      	bne.n	80063f2 <_strtol_l.isra.0+0xa0>
 80063a2:	782b      	ldrb	r3, [r5, #0]
 80063a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063a8:	2b58      	cmp	r3, #88	; 0x58
 80063aa:	d14b      	bne.n	8006444 <_strtol_l.isra.0+0xf2>
 80063ac:	786c      	ldrb	r4, [r5, #1]
 80063ae:	2710      	movs	r7, #16
 80063b0:	3502      	adds	r5, #2
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	bf0c      	ite	eq
 80063b6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80063ba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80063be:	2200      	movs	r2, #0
 80063c0:	fbb1 fef7 	udiv	lr, r1, r7
 80063c4:	4610      	mov	r0, r2
 80063c6:	fb07 1c1e 	mls	ip, r7, lr, r1
 80063ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80063ce:	2b09      	cmp	r3, #9
 80063d0:	d811      	bhi.n	80063f6 <_strtol_l.isra.0+0xa4>
 80063d2:	461c      	mov	r4, r3
 80063d4:	42a7      	cmp	r7, r4
 80063d6:	dd1d      	ble.n	8006414 <_strtol_l.isra.0+0xc2>
 80063d8:	1c53      	adds	r3, r2, #1
 80063da:	d007      	beq.n	80063ec <_strtol_l.isra.0+0x9a>
 80063dc:	4586      	cmp	lr, r0
 80063de:	d316      	bcc.n	800640e <_strtol_l.isra.0+0xbc>
 80063e0:	d101      	bne.n	80063e6 <_strtol_l.isra.0+0x94>
 80063e2:	45a4      	cmp	ip, r4
 80063e4:	db13      	blt.n	800640e <_strtol_l.isra.0+0xbc>
 80063e6:	fb00 4007 	mla	r0, r0, r7, r4
 80063ea:	2201      	movs	r2, #1
 80063ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063f0:	e7eb      	b.n	80063ca <_strtol_l.isra.0+0x78>
 80063f2:	270a      	movs	r7, #10
 80063f4:	e7dd      	b.n	80063b2 <_strtol_l.isra.0+0x60>
 80063f6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80063fa:	2b19      	cmp	r3, #25
 80063fc:	d801      	bhi.n	8006402 <_strtol_l.isra.0+0xb0>
 80063fe:	3c37      	subs	r4, #55	; 0x37
 8006400:	e7e8      	b.n	80063d4 <_strtol_l.isra.0+0x82>
 8006402:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006406:	2b19      	cmp	r3, #25
 8006408:	d804      	bhi.n	8006414 <_strtol_l.isra.0+0xc2>
 800640a:	3c57      	subs	r4, #87	; 0x57
 800640c:	e7e2      	b.n	80063d4 <_strtol_l.isra.0+0x82>
 800640e:	f04f 32ff 	mov.w	r2, #4294967295
 8006412:	e7eb      	b.n	80063ec <_strtol_l.isra.0+0x9a>
 8006414:	1c53      	adds	r3, r2, #1
 8006416:	d108      	bne.n	800642a <_strtol_l.isra.0+0xd8>
 8006418:	2322      	movs	r3, #34	; 0x22
 800641a:	f8c8 3000 	str.w	r3, [r8]
 800641e:	4608      	mov	r0, r1
 8006420:	f1ba 0f00 	cmp.w	sl, #0
 8006424:	d107      	bne.n	8006436 <_strtol_l.isra.0+0xe4>
 8006426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	b106      	cbz	r6, 800642e <_strtol_l.isra.0+0xdc>
 800642c:	4240      	negs	r0, r0
 800642e:	f1ba 0f00 	cmp.w	sl, #0
 8006432:	d00c      	beq.n	800644e <_strtol_l.isra.0+0xfc>
 8006434:	b122      	cbz	r2, 8006440 <_strtol_l.isra.0+0xee>
 8006436:	3d01      	subs	r5, #1
 8006438:	f8ca 5000 	str.w	r5, [sl]
 800643c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006440:	464d      	mov	r5, r9
 8006442:	e7f9      	b.n	8006438 <_strtol_l.isra.0+0xe6>
 8006444:	2430      	movs	r4, #48	; 0x30
 8006446:	2f00      	cmp	r7, #0
 8006448:	d1b3      	bne.n	80063b2 <_strtol_l.isra.0+0x60>
 800644a:	2708      	movs	r7, #8
 800644c:	e7b1      	b.n	80063b2 <_strtol_l.isra.0+0x60>
 800644e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006454 <strtol>:
 8006454:	4b08      	ldr	r3, [pc, #32]	; (8006478 <strtol+0x24>)
 8006456:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006458:	681c      	ldr	r4, [r3, #0]
 800645a:	4d08      	ldr	r5, [pc, #32]	; (800647c <strtol+0x28>)
 800645c:	6a23      	ldr	r3, [r4, #32]
 800645e:	2b00      	cmp	r3, #0
 8006460:	bf08      	it	eq
 8006462:	462b      	moveq	r3, r5
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	4613      	mov	r3, r2
 8006468:	460a      	mov	r2, r1
 800646a:	4601      	mov	r1, r0
 800646c:	4620      	mov	r0, r4
 800646e:	f7ff ff70 	bl	8006352 <_strtol_l.isra.0>
 8006472:	b003      	add	sp, #12
 8006474:	bd30      	pop	{r4, r5, pc}
 8006476:	bf00      	nop
 8006478:	20000030 	.word	0x20000030
 800647c:	20000094 	.word	0x20000094

08006480 <__utoa>:
 8006480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006482:	4c1e      	ldr	r4, [pc, #120]	; (80064fc <__utoa+0x7c>)
 8006484:	b08b      	sub	sp, #44	; 0x2c
 8006486:	4603      	mov	r3, r0
 8006488:	460f      	mov	r7, r1
 800648a:	466d      	mov	r5, sp
 800648c:	f104 0e20 	add.w	lr, r4, #32
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	6861      	ldr	r1, [r4, #4]
 8006494:	462e      	mov	r6, r5
 8006496:	c603      	stmia	r6!, {r0, r1}
 8006498:	3408      	adds	r4, #8
 800649a:	4574      	cmp	r4, lr
 800649c:	4635      	mov	r5, r6
 800649e:	d1f7      	bne.n	8006490 <__utoa+0x10>
 80064a0:	7921      	ldrb	r1, [r4, #4]
 80064a2:	7131      	strb	r1, [r6, #4]
 80064a4:	1e91      	subs	r1, r2, #2
 80064a6:	6820      	ldr	r0, [r4, #0]
 80064a8:	6030      	str	r0, [r6, #0]
 80064aa:	2922      	cmp	r1, #34	; 0x22
 80064ac:	f04f 0100 	mov.w	r1, #0
 80064b0:	d904      	bls.n	80064bc <__utoa+0x3c>
 80064b2:	7039      	strb	r1, [r7, #0]
 80064b4:	460f      	mov	r7, r1
 80064b6:	4638      	mov	r0, r7
 80064b8:	b00b      	add	sp, #44	; 0x2c
 80064ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064bc:	1e78      	subs	r0, r7, #1
 80064be:	4606      	mov	r6, r0
 80064c0:	fbb3 f5f2 	udiv	r5, r3, r2
 80064c4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80064c8:	fb02 3315 	mls	r3, r2, r5, r3
 80064cc:	4473      	add	r3, lr
 80064ce:	1c4c      	adds	r4, r1, #1
 80064d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064d4:	f806 3f01 	strb.w	r3, [r6, #1]!
 80064d8:	462b      	mov	r3, r5
 80064da:	b965      	cbnz	r5, 80064f6 <__utoa+0x76>
 80064dc:	553d      	strb	r5, [r7, r4]
 80064de:	187a      	adds	r2, r7, r1
 80064e0:	1acc      	subs	r4, r1, r3
 80064e2:	42a3      	cmp	r3, r4
 80064e4:	dae7      	bge.n	80064b6 <__utoa+0x36>
 80064e6:	7844      	ldrb	r4, [r0, #1]
 80064e8:	7815      	ldrb	r5, [r2, #0]
 80064ea:	f800 5f01 	strb.w	r5, [r0, #1]!
 80064ee:	3301      	adds	r3, #1
 80064f0:	f802 4901 	strb.w	r4, [r2], #-1
 80064f4:	e7f4      	b.n	80064e0 <__utoa+0x60>
 80064f6:	4621      	mov	r1, r4
 80064f8:	e7e2      	b.n	80064c0 <__utoa+0x40>
 80064fa:	bf00      	nop
 80064fc:	08006e74 	.word	0x08006e74

08006500 <__locale_ctype_ptr_l>:
 8006500:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006504:	4770      	bx	lr

08006506 <__ascii_mbtowc>:
 8006506:	b082      	sub	sp, #8
 8006508:	b901      	cbnz	r1, 800650c <__ascii_mbtowc+0x6>
 800650a:	a901      	add	r1, sp, #4
 800650c:	b142      	cbz	r2, 8006520 <__ascii_mbtowc+0x1a>
 800650e:	b14b      	cbz	r3, 8006524 <__ascii_mbtowc+0x1e>
 8006510:	7813      	ldrb	r3, [r2, #0]
 8006512:	600b      	str	r3, [r1, #0]
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	1c10      	adds	r0, r2, #0
 8006518:	bf18      	it	ne
 800651a:	2001      	movne	r0, #1
 800651c:	b002      	add	sp, #8
 800651e:	4770      	bx	lr
 8006520:	4610      	mov	r0, r2
 8006522:	e7fb      	b.n	800651c <__ascii_mbtowc+0x16>
 8006524:	f06f 0001 	mvn.w	r0, #1
 8006528:	e7f8      	b.n	800651c <__ascii_mbtowc+0x16>

0800652a <__malloc_lock>:
 800652a:	4770      	bx	lr

0800652c <__malloc_unlock>:
 800652c:	4770      	bx	lr

0800652e <__ssputs_r>:
 800652e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006532:	688e      	ldr	r6, [r1, #8]
 8006534:	429e      	cmp	r6, r3
 8006536:	4682      	mov	sl, r0
 8006538:	460c      	mov	r4, r1
 800653a:	4691      	mov	r9, r2
 800653c:	4698      	mov	r8, r3
 800653e:	d835      	bhi.n	80065ac <__ssputs_r+0x7e>
 8006540:	898a      	ldrh	r2, [r1, #12]
 8006542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006546:	d031      	beq.n	80065ac <__ssputs_r+0x7e>
 8006548:	6825      	ldr	r5, [r4, #0]
 800654a:	6909      	ldr	r1, [r1, #16]
 800654c:	1a6f      	subs	r7, r5, r1
 800654e:	6965      	ldr	r5, [r4, #20]
 8006550:	2302      	movs	r3, #2
 8006552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006556:	fb95 f5f3 	sdiv	r5, r5, r3
 800655a:	f108 0301 	add.w	r3, r8, #1
 800655e:	443b      	add	r3, r7
 8006560:	429d      	cmp	r5, r3
 8006562:	bf38      	it	cc
 8006564:	461d      	movcc	r5, r3
 8006566:	0553      	lsls	r3, r2, #21
 8006568:	d531      	bpl.n	80065ce <__ssputs_r+0xa0>
 800656a:	4629      	mov	r1, r5
 800656c:	f7ff fe0c 	bl	8006188 <_malloc_r>
 8006570:	4606      	mov	r6, r0
 8006572:	b950      	cbnz	r0, 800658a <__ssputs_r+0x5c>
 8006574:	230c      	movs	r3, #12
 8006576:	f8ca 3000 	str.w	r3, [sl]
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	463a      	mov	r2, r7
 800658c:	6921      	ldr	r1, [r4, #16]
 800658e:	f7ff fd99 	bl	80060c4 <memcpy>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	6126      	str	r6, [r4, #16]
 80065a0:	6165      	str	r5, [r4, #20]
 80065a2:	443e      	add	r6, r7
 80065a4:	1bed      	subs	r5, r5, r7
 80065a6:	6026      	str	r6, [r4, #0]
 80065a8:	60a5      	str	r5, [r4, #8]
 80065aa:	4646      	mov	r6, r8
 80065ac:	4546      	cmp	r6, r8
 80065ae:	bf28      	it	cs
 80065b0:	4646      	movcs	r6, r8
 80065b2:	4632      	mov	r2, r6
 80065b4:	4649      	mov	r1, r9
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	f000 faab 	bl	8006b12 <memmove>
 80065bc:	68a3      	ldr	r3, [r4, #8]
 80065be:	1b9b      	subs	r3, r3, r6
 80065c0:	60a3      	str	r3, [r4, #8]
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	441e      	add	r6, r3
 80065c6:	6026      	str	r6, [r4, #0]
 80065c8:	2000      	movs	r0, #0
 80065ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ce:	462a      	mov	r2, r5
 80065d0:	f000 fab9 	bl	8006b46 <_realloc_r>
 80065d4:	4606      	mov	r6, r0
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d1e1      	bne.n	800659e <__ssputs_r+0x70>
 80065da:	6921      	ldr	r1, [r4, #16]
 80065dc:	4650      	mov	r0, sl
 80065de:	f7ff fd85 	bl	80060ec <_free_r>
 80065e2:	e7c7      	b.n	8006574 <__ssputs_r+0x46>

080065e4 <_svfiprintf_r>:
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	b09d      	sub	sp, #116	; 0x74
 80065ea:	4680      	mov	r8, r0
 80065ec:	9303      	str	r3, [sp, #12]
 80065ee:	898b      	ldrh	r3, [r1, #12]
 80065f0:	061c      	lsls	r4, r3, #24
 80065f2:	460d      	mov	r5, r1
 80065f4:	4616      	mov	r6, r2
 80065f6:	d50f      	bpl.n	8006618 <_svfiprintf_r+0x34>
 80065f8:	690b      	ldr	r3, [r1, #16]
 80065fa:	b96b      	cbnz	r3, 8006618 <_svfiprintf_r+0x34>
 80065fc:	2140      	movs	r1, #64	; 0x40
 80065fe:	f7ff fdc3 	bl	8006188 <_malloc_r>
 8006602:	6028      	str	r0, [r5, #0]
 8006604:	6128      	str	r0, [r5, #16]
 8006606:	b928      	cbnz	r0, 8006614 <_svfiprintf_r+0x30>
 8006608:	230c      	movs	r3, #12
 800660a:	f8c8 3000 	str.w	r3, [r8]
 800660e:	f04f 30ff 	mov.w	r0, #4294967295
 8006612:	e0c5      	b.n	80067a0 <_svfiprintf_r+0x1bc>
 8006614:	2340      	movs	r3, #64	; 0x40
 8006616:	616b      	str	r3, [r5, #20]
 8006618:	2300      	movs	r3, #0
 800661a:	9309      	str	r3, [sp, #36]	; 0x24
 800661c:	2320      	movs	r3, #32
 800661e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006622:	2330      	movs	r3, #48	; 0x30
 8006624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006628:	f04f 0b01 	mov.w	fp, #1
 800662c:	4637      	mov	r7, r6
 800662e:	463c      	mov	r4, r7
 8006630:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d13c      	bne.n	80066b2 <_svfiprintf_r+0xce>
 8006638:	ebb7 0a06 	subs.w	sl, r7, r6
 800663c:	d00b      	beq.n	8006656 <_svfiprintf_r+0x72>
 800663e:	4653      	mov	r3, sl
 8006640:	4632      	mov	r2, r6
 8006642:	4629      	mov	r1, r5
 8006644:	4640      	mov	r0, r8
 8006646:	f7ff ff72 	bl	800652e <__ssputs_r>
 800664a:	3001      	adds	r0, #1
 800664c:	f000 80a3 	beq.w	8006796 <_svfiprintf_r+0x1b2>
 8006650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006652:	4453      	add	r3, sl
 8006654:	9309      	str	r3, [sp, #36]	; 0x24
 8006656:	783b      	ldrb	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 809c 	beq.w	8006796 <_svfiprintf_r+0x1b2>
 800665e:	2300      	movs	r3, #0
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	9307      	str	r3, [sp, #28]
 8006668:	9205      	str	r2, [sp, #20]
 800666a:	9306      	str	r3, [sp, #24]
 800666c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006670:	931a      	str	r3, [sp, #104]	; 0x68
 8006672:	2205      	movs	r2, #5
 8006674:	7821      	ldrb	r1, [r4, #0]
 8006676:	4850      	ldr	r0, [pc, #320]	; (80067b8 <_svfiprintf_r+0x1d4>)
 8006678:	f7f9 fdb2 	bl	80001e0 <memchr>
 800667c:	1c67      	adds	r7, r4, #1
 800667e:	9b04      	ldr	r3, [sp, #16]
 8006680:	b9d8      	cbnz	r0, 80066ba <_svfiprintf_r+0xd6>
 8006682:	06d9      	lsls	r1, r3, #27
 8006684:	bf44      	itt	mi
 8006686:	2220      	movmi	r2, #32
 8006688:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800668c:	071a      	lsls	r2, r3, #28
 800668e:	bf44      	itt	mi
 8006690:	222b      	movmi	r2, #43	; 0x2b
 8006692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006696:	7822      	ldrb	r2, [r4, #0]
 8006698:	2a2a      	cmp	r2, #42	; 0x2a
 800669a:	d016      	beq.n	80066ca <_svfiprintf_r+0xe6>
 800669c:	9a07      	ldr	r2, [sp, #28]
 800669e:	2100      	movs	r1, #0
 80066a0:	200a      	movs	r0, #10
 80066a2:	4627      	mov	r7, r4
 80066a4:	3401      	adds	r4, #1
 80066a6:	783b      	ldrb	r3, [r7, #0]
 80066a8:	3b30      	subs	r3, #48	; 0x30
 80066aa:	2b09      	cmp	r3, #9
 80066ac:	d951      	bls.n	8006752 <_svfiprintf_r+0x16e>
 80066ae:	b1c9      	cbz	r1, 80066e4 <_svfiprintf_r+0x100>
 80066b0:	e011      	b.n	80066d6 <_svfiprintf_r+0xf2>
 80066b2:	2b25      	cmp	r3, #37	; 0x25
 80066b4:	d0c0      	beq.n	8006638 <_svfiprintf_r+0x54>
 80066b6:	4627      	mov	r7, r4
 80066b8:	e7b9      	b.n	800662e <_svfiprintf_r+0x4a>
 80066ba:	4a3f      	ldr	r2, [pc, #252]	; (80067b8 <_svfiprintf_r+0x1d4>)
 80066bc:	1a80      	subs	r0, r0, r2
 80066be:	fa0b f000 	lsl.w	r0, fp, r0
 80066c2:	4318      	orrs	r0, r3
 80066c4:	9004      	str	r0, [sp, #16]
 80066c6:	463c      	mov	r4, r7
 80066c8:	e7d3      	b.n	8006672 <_svfiprintf_r+0x8e>
 80066ca:	9a03      	ldr	r2, [sp, #12]
 80066cc:	1d11      	adds	r1, r2, #4
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	9103      	str	r1, [sp, #12]
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	db01      	blt.n	80066da <_svfiprintf_r+0xf6>
 80066d6:	9207      	str	r2, [sp, #28]
 80066d8:	e004      	b.n	80066e4 <_svfiprintf_r+0x100>
 80066da:	4252      	negs	r2, r2
 80066dc:	f043 0302 	orr.w	r3, r3, #2
 80066e0:	9207      	str	r2, [sp, #28]
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	783b      	ldrb	r3, [r7, #0]
 80066e6:	2b2e      	cmp	r3, #46	; 0x2e
 80066e8:	d10e      	bne.n	8006708 <_svfiprintf_r+0x124>
 80066ea:	787b      	ldrb	r3, [r7, #1]
 80066ec:	2b2a      	cmp	r3, #42	; 0x2a
 80066ee:	f107 0101 	add.w	r1, r7, #1
 80066f2:	d132      	bne.n	800675a <_svfiprintf_r+0x176>
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	1d1a      	adds	r2, r3, #4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	9203      	str	r2, [sp, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfb8      	it	lt
 8006700:	f04f 33ff 	movlt.w	r3, #4294967295
 8006704:	3702      	adds	r7, #2
 8006706:	9305      	str	r3, [sp, #20]
 8006708:	4c2c      	ldr	r4, [pc, #176]	; (80067bc <_svfiprintf_r+0x1d8>)
 800670a:	7839      	ldrb	r1, [r7, #0]
 800670c:	2203      	movs	r2, #3
 800670e:	4620      	mov	r0, r4
 8006710:	f7f9 fd66 	bl	80001e0 <memchr>
 8006714:	b138      	cbz	r0, 8006726 <_svfiprintf_r+0x142>
 8006716:	2340      	movs	r3, #64	; 0x40
 8006718:	1b00      	subs	r0, r0, r4
 800671a:	fa03 f000 	lsl.w	r0, r3, r0
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	4303      	orrs	r3, r0
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	3701      	adds	r7, #1
 8006726:	7839      	ldrb	r1, [r7, #0]
 8006728:	4825      	ldr	r0, [pc, #148]	; (80067c0 <_svfiprintf_r+0x1dc>)
 800672a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800672e:	2206      	movs	r2, #6
 8006730:	1c7e      	adds	r6, r7, #1
 8006732:	f7f9 fd55 	bl	80001e0 <memchr>
 8006736:	2800      	cmp	r0, #0
 8006738:	d035      	beq.n	80067a6 <_svfiprintf_r+0x1c2>
 800673a:	4b22      	ldr	r3, [pc, #136]	; (80067c4 <_svfiprintf_r+0x1e0>)
 800673c:	b9fb      	cbnz	r3, 800677e <_svfiprintf_r+0x19a>
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	3307      	adds	r3, #7
 8006742:	f023 0307 	bic.w	r3, r3, #7
 8006746:	3308      	adds	r3, #8
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674c:	444b      	add	r3, r9
 800674e:	9309      	str	r3, [sp, #36]	; 0x24
 8006750:	e76c      	b.n	800662c <_svfiprintf_r+0x48>
 8006752:	fb00 3202 	mla	r2, r0, r2, r3
 8006756:	2101      	movs	r1, #1
 8006758:	e7a3      	b.n	80066a2 <_svfiprintf_r+0xbe>
 800675a:	2300      	movs	r3, #0
 800675c:	9305      	str	r3, [sp, #20]
 800675e:	4618      	mov	r0, r3
 8006760:	240a      	movs	r4, #10
 8006762:	460f      	mov	r7, r1
 8006764:	3101      	adds	r1, #1
 8006766:	783a      	ldrb	r2, [r7, #0]
 8006768:	3a30      	subs	r2, #48	; 0x30
 800676a:	2a09      	cmp	r2, #9
 800676c:	d903      	bls.n	8006776 <_svfiprintf_r+0x192>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0ca      	beq.n	8006708 <_svfiprintf_r+0x124>
 8006772:	9005      	str	r0, [sp, #20]
 8006774:	e7c8      	b.n	8006708 <_svfiprintf_r+0x124>
 8006776:	fb04 2000 	mla	r0, r4, r0, r2
 800677a:	2301      	movs	r3, #1
 800677c:	e7f1      	b.n	8006762 <_svfiprintf_r+0x17e>
 800677e:	ab03      	add	r3, sp, #12
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	462a      	mov	r2, r5
 8006784:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <_svfiprintf_r+0x1e4>)
 8006786:	a904      	add	r1, sp, #16
 8006788:	4640      	mov	r0, r8
 800678a:	f3af 8000 	nop.w
 800678e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006792:	4681      	mov	r9, r0
 8006794:	d1d9      	bne.n	800674a <_svfiprintf_r+0x166>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	065b      	lsls	r3, r3, #25
 800679a:	f53f af38 	bmi.w	800660e <_svfiprintf_r+0x2a>
 800679e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a0:	b01d      	add	sp, #116	; 0x74
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a6:	ab03      	add	r3, sp, #12
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	462a      	mov	r2, r5
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <_svfiprintf_r+0x1e4>)
 80067ae:	a904      	add	r1, sp, #16
 80067b0:	4640      	mov	r0, r8
 80067b2:	f000 f881 	bl	80068b8 <_printf_i>
 80067b6:	e7ea      	b.n	800678e <_svfiprintf_r+0x1aa>
 80067b8:	08006ea3 	.word	0x08006ea3
 80067bc:	08006ea9 	.word	0x08006ea9
 80067c0:	08006ead 	.word	0x08006ead
 80067c4:	00000000 	.word	0x00000000
 80067c8:	0800652f 	.word	0x0800652f

080067cc <_printf_common>:
 80067cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	4691      	mov	r9, r2
 80067d2:	461f      	mov	r7, r3
 80067d4:	688a      	ldr	r2, [r1, #8]
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067dc:	4293      	cmp	r3, r2
 80067de:	bfb8      	it	lt
 80067e0:	4613      	movlt	r3, r2
 80067e2:	f8c9 3000 	str.w	r3, [r9]
 80067e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067ea:	4606      	mov	r6, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	b112      	cbz	r2, 80067f6 <_printf_common+0x2a>
 80067f0:	3301      	adds	r3, #1
 80067f2:	f8c9 3000 	str.w	r3, [r9]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	0699      	lsls	r1, r3, #26
 80067fa:	bf42      	ittt	mi
 80067fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006800:	3302      	addmi	r3, #2
 8006802:	f8c9 3000 	strmi.w	r3, [r9]
 8006806:	6825      	ldr	r5, [r4, #0]
 8006808:	f015 0506 	ands.w	r5, r5, #6
 800680c:	d107      	bne.n	800681e <_printf_common+0x52>
 800680e:	f104 0a19 	add.w	sl, r4, #25
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	f8d9 2000 	ldr.w	r2, [r9]
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	429d      	cmp	r5, r3
 800681c:	db29      	blt.n	8006872 <_printf_common+0xa6>
 800681e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	3300      	adds	r3, #0
 8006826:	bf18      	it	ne
 8006828:	2301      	movne	r3, #1
 800682a:	0692      	lsls	r2, r2, #26
 800682c:	d42e      	bmi.n	800688c <_printf_common+0xc0>
 800682e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006832:	4639      	mov	r1, r7
 8006834:	4630      	mov	r0, r6
 8006836:	47c0      	blx	r8
 8006838:	3001      	adds	r0, #1
 800683a:	d021      	beq.n	8006880 <_printf_common+0xb4>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	68e5      	ldr	r5, [r4, #12]
 8006840:	f8d9 2000 	ldr.w	r2, [r9]
 8006844:	f003 0306 	and.w	r3, r3, #6
 8006848:	2b04      	cmp	r3, #4
 800684a:	bf08      	it	eq
 800684c:	1aad      	subeq	r5, r5, r2
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	6922      	ldr	r2, [r4, #16]
 8006852:	bf0c      	ite	eq
 8006854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006858:	2500      	movne	r5, #0
 800685a:	4293      	cmp	r3, r2
 800685c:	bfc4      	itt	gt
 800685e:	1a9b      	subgt	r3, r3, r2
 8006860:	18ed      	addgt	r5, r5, r3
 8006862:	f04f 0900 	mov.w	r9, #0
 8006866:	341a      	adds	r4, #26
 8006868:	454d      	cmp	r5, r9
 800686a:	d11b      	bne.n	80068a4 <_printf_common+0xd8>
 800686c:	2000      	movs	r0, #0
 800686e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006872:	2301      	movs	r3, #1
 8006874:	4652      	mov	r2, sl
 8006876:	4639      	mov	r1, r7
 8006878:	4630      	mov	r0, r6
 800687a:	47c0      	blx	r8
 800687c:	3001      	adds	r0, #1
 800687e:	d103      	bne.n	8006888 <_printf_common+0xbc>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006888:	3501      	adds	r5, #1
 800688a:	e7c2      	b.n	8006812 <_printf_common+0x46>
 800688c:	18e1      	adds	r1, r4, r3
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	2030      	movs	r0, #48	; 0x30
 8006892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006896:	4422      	add	r2, r4
 8006898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800689c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068a0:	3302      	adds	r3, #2
 80068a2:	e7c4      	b.n	800682e <_printf_common+0x62>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4622      	mov	r2, r4
 80068a8:	4639      	mov	r1, r7
 80068aa:	4630      	mov	r0, r6
 80068ac:	47c0      	blx	r8
 80068ae:	3001      	adds	r0, #1
 80068b0:	d0e6      	beq.n	8006880 <_printf_common+0xb4>
 80068b2:	f109 0901 	add.w	r9, r9, #1
 80068b6:	e7d7      	b.n	8006868 <_printf_common+0x9c>

080068b8 <_printf_i>:
 80068b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068bc:	4617      	mov	r7, r2
 80068be:	7e0a      	ldrb	r2, [r1, #24]
 80068c0:	b085      	sub	sp, #20
 80068c2:	2a6e      	cmp	r2, #110	; 0x6e
 80068c4:	4698      	mov	r8, r3
 80068c6:	4606      	mov	r6, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068cc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80068d0:	f000 80bc 	beq.w	8006a4c <_printf_i+0x194>
 80068d4:	d81a      	bhi.n	800690c <_printf_i+0x54>
 80068d6:	2a63      	cmp	r2, #99	; 0x63
 80068d8:	d02e      	beq.n	8006938 <_printf_i+0x80>
 80068da:	d80a      	bhi.n	80068f2 <_printf_i+0x3a>
 80068dc:	2a00      	cmp	r2, #0
 80068de:	f000 80c8 	beq.w	8006a72 <_printf_i+0x1ba>
 80068e2:	2a58      	cmp	r2, #88	; 0x58
 80068e4:	f000 808a 	beq.w	80069fc <_printf_i+0x144>
 80068e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80068f0:	e02a      	b.n	8006948 <_printf_i+0x90>
 80068f2:	2a64      	cmp	r2, #100	; 0x64
 80068f4:	d001      	beq.n	80068fa <_printf_i+0x42>
 80068f6:	2a69      	cmp	r2, #105	; 0x69
 80068f8:	d1f6      	bne.n	80068e8 <_printf_i+0x30>
 80068fa:	6821      	ldr	r1, [r4, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006902:	d023      	beq.n	800694c <_printf_i+0x94>
 8006904:	1d11      	adds	r1, r2, #4
 8006906:	6019      	str	r1, [r3, #0]
 8006908:	6813      	ldr	r3, [r2, #0]
 800690a:	e027      	b.n	800695c <_printf_i+0xa4>
 800690c:	2a73      	cmp	r2, #115	; 0x73
 800690e:	f000 80b4 	beq.w	8006a7a <_printf_i+0x1c2>
 8006912:	d808      	bhi.n	8006926 <_printf_i+0x6e>
 8006914:	2a6f      	cmp	r2, #111	; 0x6f
 8006916:	d02a      	beq.n	800696e <_printf_i+0xb6>
 8006918:	2a70      	cmp	r2, #112	; 0x70
 800691a:	d1e5      	bne.n	80068e8 <_printf_i+0x30>
 800691c:	680a      	ldr	r2, [r1, #0]
 800691e:	f042 0220 	orr.w	r2, r2, #32
 8006922:	600a      	str	r2, [r1, #0]
 8006924:	e003      	b.n	800692e <_printf_i+0x76>
 8006926:	2a75      	cmp	r2, #117	; 0x75
 8006928:	d021      	beq.n	800696e <_printf_i+0xb6>
 800692a:	2a78      	cmp	r2, #120	; 0x78
 800692c:	d1dc      	bne.n	80068e8 <_printf_i+0x30>
 800692e:	2278      	movs	r2, #120	; 0x78
 8006930:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006934:	496e      	ldr	r1, [pc, #440]	; (8006af0 <_printf_i+0x238>)
 8006936:	e064      	b.n	8006a02 <_printf_i+0x14a>
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800693e:	1d11      	adds	r1, r2, #4
 8006940:	6019      	str	r1, [r3, #0]
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006948:	2301      	movs	r3, #1
 800694a:	e0a3      	b.n	8006a94 <_printf_i+0x1dc>
 800694c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006950:	f102 0104 	add.w	r1, r2, #4
 8006954:	6019      	str	r1, [r3, #0]
 8006956:	d0d7      	beq.n	8006908 <_printf_i+0x50>
 8006958:	f9b2 3000 	ldrsh.w	r3, [r2]
 800695c:	2b00      	cmp	r3, #0
 800695e:	da03      	bge.n	8006968 <_printf_i+0xb0>
 8006960:	222d      	movs	r2, #45	; 0x2d
 8006962:	425b      	negs	r3, r3
 8006964:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006968:	4962      	ldr	r1, [pc, #392]	; (8006af4 <_printf_i+0x23c>)
 800696a:	220a      	movs	r2, #10
 800696c:	e017      	b.n	800699e <_printf_i+0xe6>
 800696e:	6820      	ldr	r0, [r4, #0]
 8006970:	6819      	ldr	r1, [r3, #0]
 8006972:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006976:	d003      	beq.n	8006980 <_printf_i+0xc8>
 8006978:	1d08      	adds	r0, r1, #4
 800697a:	6018      	str	r0, [r3, #0]
 800697c:	680b      	ldr	r3, [r1, #0]
 800697e:	e006      	b.n	800698e <_printf_i+0xd6>
 8006980:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006984:	f101 0004 	add.w	r0, r1, #4
 8006988:	6018      	str	r0, [r3, #0]
 800698a:	d0f7      	beq.n	800697c <_printf_i+0xc4>
 800698c:	880b      	ldrh	r3, [r1, #0]
 800698e:	4959      	ldr	r1, [pc, #356]	; (8006af4 <_printf_i+0x23c>)
 8006990:	2a6f      	cmp	r2, #111	; 0x6f
 8006992:	bf14      	ite	ne
 8006994:	220a      	movne	r2, #10
 8006996:	2208      	moveq	r2, #8
 8006998:	2000      	movs	r0, #0
 800699a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800699e:	6865      	ldr	r5, [r4, #4]
 80069a0:	60a5      	str	r5, [r4, #8]
 80069a2:	2d00      	cmp	r5, #0
 80069a4:	f2c0 809c 	blt.w	8006ae0 <_printf_i+0x228>
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	f020 0004 	bic.w	r0, r0, #4
 80069ae:	6020      	str	r0, [r4, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d13f      	bne.n	8006a34 <_printf_i+0x17c>
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	f040 8095 	bne.w	8006ae4 <_printf_i+0x22c>
 80069ba:	4675      	mov	r5, lr
 80069bc:	2a08      	cmp	r2, #8
 80069be:	d10b      	bne.n	80069d8 <_printf_i+0x120>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	07da      	lsls	r2, r3, #31
 80069c4:	d508      	bpl.n	80069d8 <_printf_i+0x120>
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	6862      	ldr	r2, [r4, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	bfde      	ittt	le
 80069ce:	2330      	movle	r3, #48	; 0x30
 80069d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069d8:	ebae 0305 	sub.w	r3, lr, r5
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	f8cd 8000 	str.w	r8, [sp]
 80069e2:	463b      	mov	r3, r7
 80069e4:	aa03      	add	r2, sp, #12
 80069e6:	4621      	mov	r1, r4
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7ff feef 	bl	80067cc <_printf_common>
 80069ee:	3001      	adds	r0, #1
 80069f0:	d155      	bne.n	8006a9e <_printf_i+0x1e6>
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295
 80069f6:	b005      	add	sp, #20
 80069f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069fc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006a00:	493c      	ldr	r1, [pc, #240]	; (8006af4 <_printf_i+0x23c>)
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a0a:	f100 0504 	add.w	r5, r0, #4
 8006a0e:	601d      	str	r5, [r3, #0]
 8006a10:	d001      	beq.n	8006a16 <_printf_i+0x15e>
 8006a12:	6803      	ldr	r3, [r0, #0]
 8006a14:	e002      	b.n	8006a1c <_printf_i+0x164>
 8006a16:	0655      	lsls	r5, r2, #25
 8006a18:	d5fb      	bpl.n	8006a12 <_printf_i+0x15a>
 8006a1a:	8803      	ldrh	r3, [r0, #0]
 8006a1c:	07d0      	lsls	r0, r2, #31
 8006a1e:	bf44      	itt	mi
 8006a20:	f042 0220 	orrmi.w	r2, r2, #32
 8006a24:	6022      	strmi	r2, [r4, #0]
 8006a26:	b91b      	cbnz	r3, 8006a30 <_printf_i+0x178>
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	f022 0220 	bic.w	r2, r2, #32
 8006a2e:	6022      	str	r2, [r4, #0]
 8006a30:	2210      	movs	r2, #16
 8006a32:	e7b1      	b.n	8006998 <_printf_i+0xe0>
 8006a34:	4675      	mov	r5, lr
 8006a36:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a3a:	fb02 3310 	mls	r3, r2, r0, r3
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a44:	4603      	mov	r3, r0
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d1f5      	bne.n	8006a36 <_printf_i+0x17e>
 8006a4a:	e7b7      	b.n	80069bc <_printf_i+0x104>
 8006a4c:	6808      	ldr	r0, [r1, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	6949      	ldr	r1, [r1, #20]
 8006a52:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006a56:	d004      	beq.n	8006a62 <_printf_i+0x1aa>
 8006a58:	1d10      	adds	r0, r2, #4
 8006a5a:	6018      	str	r0, [r3, #0]
 8006a5c:	6813      	ldr	r3, [r2, #0]
 8006a5e:	6019      	str	r1, [r3, #0]
 8006a60:	e007      	b.n	8006a72 <_printf_i+0x1ba>
 8006a62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a66:	f102 0004 	add.w	r0, r2, #4
 8006a6a:	6018      	str	r0, [r3, #0]
 8006a6c:	6813      	ldr	r3, [r2, #0]
 8006a6e:	d0f6      	beq.n	8006a5e <_printf_i+0x1a6>
 8006a70:	8019      	strh	r1, [r3, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	6123      	str	r3, [r4, #16]
 8006a76:	4675      	mov	r5, lr
 8006a78:	e7b1      	b.n	80069de <_printf_i+0x126>
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	1d11      	adds	r1, r2, #4
 8006a7e:	6019      	str	r1, [r3, #0]
 8006a80:	6815      	ldr	r5, [r2, #0]
 8006a82:	6862      	ldr	r2, [r4, #4]
 8006a84:	2100      	movs	r1, #0
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7f9 fbaa 	bl	80001e0 <memchr>
 8006a8c:	b108      	cbz	r0, 8006a92 <_printf_i+0x1da>
 8006a8e:	1b40      	subs	r0, r0, r5
 8006a90:	6060      	str	r0, [r4, #4]
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	6123      	str	r3, [r4, #16]
 8006a96:	2300      	movs	r3, #0
 8006a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a9c:	e79f      	b.n	80069de <_printf_i+0x126>
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	462a      	mov	r2, r5
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	47c0      	blx	r8
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d0a2      	beq.n	80069f2 <_printf_i+0x13a>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	079b      	lsls	r3, r3, #30
 8006ab0:	d507      	bpl.n	8006ac2 <_printf_i+0x20a>
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	f104 0919 	add.w	r9, r4, #25
 8006ab8:	68e3      	ldr	r3, [r4, #12]
 8006aba:	9a03      	ldr	r2, [sp, #12]
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	db05      	blt.n	8006ace <_printf_i+0x216>
 8006ac2:	68e0      	ldr	r0, [r4, #12]
 8006ac4:	9b03      	ldr	r3, [sp, #12]
 8006ac6:	4298      	cmp	r0, r3
 8006ac8:	bfb8      	it	lt
 8006aca:	4618      	movlt	r0, r3
 8006acc:	e793      	b.n	80069f6 <_printf_i+0x13e>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	464a      	mov	r2, r9
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	47c0      	blx	r8
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d08a      	beq.n	80069f2 <_printf_i+0x13a>
 8006adc:	3501      	adds	r5, #1
 8006ade:	e7eb      	b.n	8006ab8 <_printf_i+0x200>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1a7      	bne.n	8006a34 <_printf_i+0x17c>
 8006ae4:	780b      	ldrb	r3, [r1, #0]
 8006ae6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aee:	e765      	b.n	80069bc <_printf_i+0x104>
 8006af0:	08006ec5 	.word	0x08006ec5
 8006af4:	08006eb4 	.word	0x08006eb4

08006af8 <__ascii_wctomb>:
 8006af8:	b149      	cbz	r1, 8006b0e <__ascii_wctomb+0x16>
 8006afa:	2aff      	cmp	r2, #255	; 0xff
 8006afc:	bf85      	ittet	hi
 8006afe:	238a      	movhi	r3, #138	; 0x8a
 8006b00:	6003      	strhi	r3, [r0, #0]
 8006b02:	700a      	strbls	r2, [r1, #0]
 8006b04:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b08:	bf98      	it	ls
 8006b0a:	2001      	movls	r0, #1
 8006b0c:	4770      	bx	lr
 8006b0e:	4608      	mov	r0, r1
 8006b10:	4770      	bx	lr

08006b12 <memmove>:
 8006b12:	4288      	cmp	r0, r1
 8006b14:	b510      	push	{r4, lr}
 8006b16:	eb01 0302 	add.w	r3, r1, r2
 8006b1a:	d803      	bhi.n	8006b24 <memmove+0x12>
 8006b1c:	1e42      	subs	r2, r0, #1
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	d10c      	bne.n	8006b3c <memmove+0x2a>
 8006b22:	bd10      	pop	{r4, pc}
 8006b24:	4298      	cmp	r0, r3
 8006b26:	d2f9      	bcs.n	8006b1c <memmove+0xa>
 8006b28:	1881      	adds	r1, r0, r2
 8006b2a:	1ad2      	subs	r2, r2, r3
 8006b2c:	42d3      	cmn	r3, r2
 8006b2e:	d100      	bne.n	8006b32 <memmove+0x20>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b3a:	e7f7      	b.n	8006b2c <memmove+0x1a>
 8006b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b44:	e7eb      	b.n	8006b1e <memmove+0xc>

08006b46 <_realloc_r>:
 8006b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b48:	4607      	mov	r7, r0
 8006b4a:	4614      	mov	r4, r2
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	b921      	cbnz	r1, 8006b5a <_realloc_r+0x14>
 8006b50:	4611      	mov	r1, r2
 8006b52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b56:	f7ff bb17 	b.w	8006188 <_malloc_r>
 8006b5a:	b922      	cbnz	r2, 8006b66 <_realloc_r+0x20>
 8006b5c:	f7ff fac6 	bl	80060ec <_free_r>
 8006b60:	4625      	mov	r5, r4
 8006b62:	4628      	mov	r0, r5
 8006b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b66:	f000 f814 	bl	8006b92 <_malloc_usable_size_r>
 8006b6a:	4284      	cmp	r4, r0
 8006b6c:	d90f      	bls.n	8006b8e <_realloc_r+0x48>
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4638      	mov	r0, r7
 8006b72:	f7ff fb09 	bl	8006188 <_malloc_r>
 8006b76:	4605      	mov	r5, r0
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d0f2      	beq.n	8006b62 <_realloc_r+0x1c>
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4622      	mov	r2, r4
 8006b80:	f7ff faa0 	bl	80060c4 <memcpy>
 8006b84:	4631      	mov	r1, r6
 8006b86:	4638      	mov	r0, r7
 8006b88:	f7ff fab0 	bl	80060ec <_free_r>
 8006b8c:	e7e9      	b.n	8006b62 <_realloc_r+0x1c>
 8006b8e:	4635      	mov	r5, r6
 8006b90:	e7e7      	b.n	8006b62 <_realloc_r+0x1c>

08006b92 <_malloc_usable_size_r>:
 8006b92:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f1a0 0004 	sub.w	r0, r0, #4
 8006b9c:	bfbc      	itt	lt
 8006b9e:	580b      	ldrlt	r3, [r1, r0]
 8006ba0:	18c0      	addlt	r0, r0, r3
 8006ba2:	4770      	bx	lr

08006ba4 <sqrt>:
 8006ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ba8:	ed2d 8b02 	vpush	{d8}
 8006bac:	b08b      	sub	sp, #44	; 0x2c
 8006bae:	ec55 4b10 	vmov	r4, r5, d0
 8006bb2:	f000 f851 	bl	8006c58 <__ieee754_sqrt>
 8006bb6:	4b26      	ldr	r3, [pc, #152]	; (8006c50 <sqrt+0xac>)
 8006bb8:	eeb0 8a40 	vmov.f32	s16, s0
 8006bbc:	eef0 8a60 	vmov.f32	s17, s1
 8006bc0:	f993 6000 	ldrsb.w	r6, [r3]
 8006bc4:	1c73      	adds	r3, r6, #1
 8006bc6:	d02a      	beq.n	8006c1e <sqrt+0x7a>
 8006bc8:	4622      	mov	r2, r4
 8006bca:	462b      	mov	r3, r5
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 ffa8 	bl	8000b24 <__aeabi_dcmpun>
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	bb10      	cbnz	r0, 8006c1e <sqrt+0x7a>
 8006bd8:	f04f 0800 	mov.w	r8, #0
 8006bdc:	f04f 0900 	mov.w	r9, #0
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 ff74 	bl	8000ad4 <__aeabi_dcmplt>
 8006bec:	b1b8      	cbz	r0, 8006c1e <sqrt+0x7a>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	4b18      	ldr	r3, [pc, #96]	; (8006c54 <sqrt+0xb0>)
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	9708      	str	r7, [sp, #32]
 8006bf8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006bfc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c00:	b9b6      	cbnz	r6, 8006c30 <sqrt+0x8c>
 8006c02:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006c06:	4668      	mov	r0, sp
 8006c08:	f000 f8d6 	bl	8006db8 <matherr>
 8006c0c:	b1d0      	cbz	r0, 8006c44 <sqrt+0xa0>
 8006c0e:	9b08      	ldr	r3, [sp, #32]
 8006c10:	b11b      	cbz	r3, 8006c1a <sqrt+0x76>
 8006c12:	f000 f8d3 	bl	8006dbc <__errno>
 8006c16:	9b08      	ldr	r3, [sp, #32]
 8006c18:	6003      	str	r3, [r0, #0]
 8006c1a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006c1e:	eeb0 0a48 	vmov.f32	s0, s16
 8006c22:	eef0 0a68 	vmov.f32	s1, s17
 8006c26:	b00b      	add	sp, #44	; 0x2c
 8006c28:	ecbd 8b02 	vpop	{d8}
 8006c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c30:	4642      	mov	r2, r8
 8006c32:	464b      	mov	r3, r9
 8006c34:	4640      	mov	r0, r8
 8006c36:	4649      	mov	r1, r9
 8006c38:	f7f9 fe04 	bl	8000844 <__aeabi_ddiv>
 8006c3c:	2e02      	cmp	r6, #2
 8006c3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c42:	d1e0      	bne.n	8006c06 <sqrt+0x62>
 8006c44:	f000 f8ba 	bl	8006dbc <__errno>
 8006c48:	2321      	movs	r3, #33	; 0x21
 8006c4a:	6003      	str	r3, [r0, #0]
 8006c4c:	e7df      	b.n	8006c0e <sqrt+0x6a>
 8006c4e:	bf00      	nop
 8006c50:	20000200 	.word	0x20000200
 8006c54:	08006fd7 	.word	0x08006fd7

08006c58 <__ieee754_sqrt>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	ec55 4b10 	vmov	r4, r5, d0
 8006c60:	4e54      	ldr	r6, [pc, #336]	; (8006db4 <__ieee754_sqrt+0x15c>)
 8006c62:	43ae      	bics	r6, r5
 8006c64:	ee10 0a10 	vmov	r0, s0
 8006c68:	462b      	mov	r3, r5
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	d113      	bne.n	8006c98 <__ieee754_sqrt+0x40>
 8006c70:	ee10 2a10 	vmov	r2, s0
 8006c74:	462b      	mov	r3, r5
 8006c76:	ee10 0a10 	vmov	r0, s0
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	f7f9 fcb8 	bl	80005f0 <__aeabi_dmul>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4620      	mov	r0, r4
 8006c86:	4629      	mov	r1, r5
 8006c88:	f7f9 fb00 	bl	800028c <__adddf3>
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	460d      	mov	r5, r1
 8006c90:	ec45 4b10 	vmov	d0, r4, r5
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	dc10      	bgt.n	8006cbe <__ieee754_sqrt+0x66>
 8006c9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ca0:	4330      	orrs	r0, r6
 8006ca2:	d0f5      	beq.n	8006c90 <__ieee754_sqrt+0x38>
 8006ca4:	b15d      	cbz	r5, 8006cbe <__ieee754_sqrt+0x66>
 8006ca6:	ee10 2a10 	vmov	r2, s0
 8006caa:	462b      	mov	r3, r5
 8006cac:	4620      	mov	r0, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	f7f9 faea 	bl	8000288 <__aeabi_dsub>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	f7f9 fdc4 	bl	8000844 <__aeabi_ddiv>
 8006cbc:	e7e6      	b.n	8006c8c <__ieee754_sqrt+0x34>
 8006cbe:	151b      	asrs	r3, r3, #20
 8006cc0:	d10c      	bne.n	8006cdc <__ieee754_sqrt+0x84>
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	d06d      	beq.n	8006da2 <__ieee754_sqrt+0x14a>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	02d6      	lsls	r6, r2, #11
 8006cca:	d56e      	bpl.n	8006daa <__ieee754_sqrt+0x152>
 8006ccc:	1e44      	subs	r4, r0, #1
 8006cce:	1b1b      	subs	r3, r3, r4
 8006cd0:	f1c0 0420 	rsb	r4, r0, #32
 8006cd4:	fa21 f404 	lsr.w	r4, r1, r4
 8006cd8:	4322      	orrs	r2, r4
 8006cda:	4081      	lsls	r1, r0
 8006cdc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ce0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006ce4:	07dd      	lsls	r5, r3, #31
 8006ce6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006cea:	bf42      	ittt	mi
 8006cec:	0052      	lslmi	r2, r2, #1
 8006cee:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8006cf2:	0049      	lslmi	r1, r1, #1
 8006cf4:	1058      	asrs	r0, r3, #1
 8006cf6:	2500      	movs	r5, #0
 8006cf8:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8006cfc:	441a      	add	r2, r3
 8006cfe:	0049      	lsls	r1, r1, #1
 8006d00:	2316      	movs	r3, #22
 8006d02:	462c      	mov	r4, r5
 8006d04:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006d08:	19a7      	adds	r7, r4, r6
 8006d0a:	4297      	cmp	r7, r2
 8006d0c:	bfde      	ittt	le
 8006d0e:	1bd2      	suble	r2, r2, r7
 8006d10:	19bc      	addle	r4, r7, r6
 8006d12:	19ad      	addle	r5, r5, r6
 8006d14:	0052      	lsls	r2, r2, #1
 8006d16:	3b01      	subs	r3, #1
 8006d18:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006d1c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d24:	d1f0      	bne.n	8006d08 <__ieee754_sqrt+0xb0>
 8006d26:	f04f 0e20 	mov.w	lr, #32
 8006d2a:	469c      	mov	ip, r3
 8006d2c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d30:	42a2      	cmp	r2, r4
 8006d32:	eb06 070c 	add.w	r7, r6, ip
 8006d36:	dc02      	bgt.n	8006d3e <__ieee754_sqrt+0xe6>
 8006d38:	d112      	bne.n	8006d60 <__ieee754_sqrt+0x108>
 8006d3a:	428f      	cmp	r7, r1
 8006d3c:	d810      	bhi.n	8006d60 <__ieee754_sqrt+0x108>
 8006d3e:	2f00      	cmp	r7, #0
 8006d40:	eb07 0c06 	add.w	ip, r7, r6
 8006d44:	da34      	bge.n	8006db0 <__ieee754_sqrt+0x158>
 8006d46:	f1bc 0f00 	cmp.w	ip, #0
 8006d4a:	db31      	blt.n	8006db0 <__ieee754_sqrt+0x158>
 8006d4c:	f104 0801 	add.w	r8, r4, #1
 8006d50:	1b12      	subs	r2, r2, r4
 8006d52:	428f      	cmp	r7, r1
 8006d54:	bf88      	it	hi
 8006d56:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006d5a:	1bc9      	subs	r1, r1, r7
 8006d5c:	4433      	add	r3, r6
 8006d5e:	4644      	mov	r4, r8
 8006d60:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006d64:	f1be 0e01 	subs.w	lr, lr, #1
 8006d68:	443a      	add	r2, r7
 8006d6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d6e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d72:	d1dd      	bne.n	8006d30 <__ieee754_sqrt+0xd8>
 8006d74:	430a      	orrs	r2, r1
 8006d76:	d006      	beq.n	8006d86 <__ieee754_sqrt+0x12e>
 8006d78:	1c5c      	adds	r4, r3, #1
 8006d7a:	bf13      	iteet	ne
 8006d7c:	3301      	addne	r3, #1
 8006d7e:	3501      	addeq	r5, #1
 8006d80:	4673      	moveq	r3, lr
 8006d82:	f023 0301 	bicne.w	r3, r3, #1
 8006d86:	106a      	asrs	r2, r5, #1
 8006d88:	085b      	lsrs	r3, r3, #1
 8006d8a:	07e9      	lsls	r1, r5, #31
 8006d8c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006d90:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006d94:	bf48      	it	mi
 8006d96:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006d9a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006d9e:	461c      	mov	r4, r3
 8006da0:	e776      	b.n	8006c90 <__ieee754_sqrt+0x38>
 8006da2:	0aca      	lsrs	r2, r1, #11
 8006da4:	3b15      	subs	r3, #21
 8006da6:	0549      	lsls	r1, r1, #21
 8006da8:	e78b      	b.n	8006cc2 <__ieee754_sqrt+0x6a>
 8006daa:	0052      	lsls	r2, r2, #1
 8006dac:	3001      	adds	r0, #1
 8006dae:	e78b      	b.n	8006cc8 <__ieee754_sqrt+0x70>
 8006db0:	46a0      	mov	r8, r4
 8006db2:	e7cd      	b.n	8006d50 <__ieee754_sqrt+0xf8>
 8006db4:	7ff00000 	.word	0x7ff00000

08006db8 <matherr>:
 8006db8:	2000      	movs	r0, #0
 8006dba:	4770      	bx	lr

08006dbc <__errno>:
 8006dbc:	4b01      	ldr	r3, [pc, #4]	; (8006dc4 <__errno+0x8>)
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000030 	.word	0x20000030

08006dc8 <_sbrk>:
 8006dc8:	4b04      	ldr	r3, [pc, #16]	; (8006ddc <_sbrk+0x14>)
 8006dca:	6819      	ldr	r1, [r3, #0]
 8006dcc:	4602      	mov	r2, r0
 8006dce:	b909      	cbnz	r1, 8006dd4 <_sbrk+0xc>
 8006dd0:	4903      	ldr	r1, [pc, #12]	; (8006de0 <_sbrk+0x18>)
 8006dd2:	6019      	str	r1, [r3, #0]
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	4402      	add	r2, r0
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	4770      	bx	lr
 8006ddc:	200002ec 	.word	0x200002ec
 8006de0:	200005e4 	.word	0x200005e4

08006de4 <_init>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr

08006df0 <_fini>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	bf00      	nop
 8006df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df6:	bc08      	pop	{r3}
 8006df8:	469e      	mov	lr, r3
 8006dfa:	4770      	bx	lr
