
C:\Users\Henry\Desktop\E-Design\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08003058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          00000158  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001d8  200001d8  00020080  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bc9c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003065  00000000  00000000  0003bd4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008ed6  00000000  00000000  0003edb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b98  00000000  00000000  00047c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ec0  00000000  00000000  00048820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007804  00000000  00000000  000496e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000aa959  00000000  00000000  00050ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000fb83d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000023f8  00000000  00000000  000fb8bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0001b3ec  00000000  00000000  000fdcb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fe0 	.word	0x08002fe0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08002fe0 	.word	0x08002fe0

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 fd1e 	bl	8000c18 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 fcd8 	bl	8000b98 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 fcb9 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f002 fcfc 	bl	8002c04 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	200000c4 	.word	0x200000c4

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200000c4 	.word	0x200000c4

08000230 <HAL_ADC_LevelOutOfWindowCallback>:
 8000230:	4770      	bx	lr

08000232 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000232:	4770      	bx	lr

08000234 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000234:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000236:	6803      	ldr	r3, [r0, #0]
{
 8000238:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800023a:	6898      	ldr	r0, [r3, #8]
 800023c:	f000 0003 	and.w	r0, r0, #3
 8000240:	2801      	cmp	r0, #1
 8000242:	d001      	beq.n	8000248 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000244:	2000      	movs	r0, #0
 8000246:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	07d2      	lsls	r2, r2, #31
 800024c:	d5fa      	bpl.n	8000244 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800024e:	689a      	ldr	r2, [r3, #8]
 8000250:	f002 020d 	and.w	r2, r2, #13
 8000254:	2a01      	cmp	r2, #1
 8000256:	d11b      	bne.n	8000290 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000258:	689a      	ldr	r2, [r3, #8]
 800025a:	f042 0202 	orr.w	r2, r2, #2
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	2203      	movs	r2, #3
 8000262:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000264:	f7ff ffde 	bl	8000224 <HAL_GetTick>
 8000268:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800026a:	6823      	ldr	r3, [r4, #0]
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	07db      	lsls	r3, r3, #31
 8000270:	d5e8      	bpl.n	8000244 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000272:	f7ff ffd7 	bl	8000224 <HAL_GetTick>
 8000276:	1b40      	subs	r0, r0, r5
 8000278:	2802      	cmp	r0, #2
 800027a:	d9f6      	bls.n	800026a <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800027c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800027e:	f043 0310 	orr.w	r3, r3, #16
 8000282:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000284:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800028c:	2001      	movs	r0, #1
 800028e:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000290:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000292:	f043 0310 	orr.w	r3, r3, #16
 8000296:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000298:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80002a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080002a4 <ADC_Enable>:
{
 80002a4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002a6:	6803      	ldr	r3, [r0, #0]
 80002a8:	689a      	ldr	r2, [r3, #8]
 80002aa:	f002 0203 	and.w	r2, r2, #3
 80002ae:	2a01      	cmp	r2, #1
{
 80002b0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002b2:	d104      	bne.n	80002be <ADC_Enable+0x1a>
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	07d2      	lsls	r2, r2, #31
 80002b8:	d501      	bpl.n	80002be <ADC_Enable+0x1a>
  return HAL_OK;
 80002ba:	2000      	movs	r0, #0
 80002bc:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002be:	6899      	ldr	r1, [r3, #8]
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <ADC_Enable+0x58>)
 80002c2:	4211      	tst	r1, r2
 80002c4:	d10f      	bne.n	80002e6 <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	f042 0201 	orr.w	r2, r2, #1
 80002cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80002ce:	f7ff ffa9 	bl	8000224 <HAL_GetTick>
 80002d2:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002d4:	6823      	ldr	r3, [r4, #0]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	d4ee      	bmi.n	80002ba <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80002dc:	f7ff ffa2 	bl	8000224 <HAL_GetTick>
 80002e0:	1b40      	subs	r0, r0, r5
 80002e2:	2802      	cmp	r0, #2
 80002e4:	d9f6      	bls.n	80002d4 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002e8:	f043 0310 	orr.w	r3, r3, #16
 80002ec:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd38      	pop	{r3, r4, r5, pc}
 80002fa:	bf00      	nop
 80002fc:	8000003f 	.word	0x8000003f

08000300 <HAL_ADC_Init>:
{
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000304:	2300      	movs	r3, #0
 8000306:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000308:	4604      	mov	r4, r0
 800030a:	2800      	cmp	r0, #0
 800030c:	f000 80e3 	beq.w	80004d6 <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000310:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000312:	06d5      	lsls	r5, r2, #27
 8000314:	f100 80cc 	bmi.w	80004b0 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000318:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800031a:	2b00      	cmp	r3, #0
 800031c:	f000 8092 	beq.w	8000444 <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000320:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000322:	6823      	ldr	r3, [r4, #0]
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	00d2      	lsls	r2, r2, #3
 8000328:	d502      	bpl.n	8000330 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800032a:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	d50a      	bpl.n	8000346 <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000330:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000332:	f023 0312 	bic.w	r3, r3, #18
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800033c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000344:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000346:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000348:	06de      	lsls	r6, r3, #27
 800034a:	f100 80be 	bmi.w	80004ca <HAL_ADC_Init+0x1ca>
 800034e:	2800      	cmp	r0, #0
 8000350:	f040 80bb 	bne.w	80004ca <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000354:	6823      	ldr	r3, [r4, #0]
 8000356:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000358:	f011 0104 	ands.w	r1, r1, #4
 800035c:	f040 80b5 	bne.w	80004ca <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8000360:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000362:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000366:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800036a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800036e:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000370:	bf0c      	ite	eq
 8000372:	4a5a      	ldreq	r2, [pc, #360]	; (80004dc <HAL_ADC_Init+0x1dc>)
 8000374:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000378:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	f002 0203 	and.w	r2, r2, #3
 8000380:	2a01      	cmp	r2, #1
 8000382:	d102      	bne.n	800038a <HAL_ADC_Init+0x8a>
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	07d5      	lsls	r5, r2, #31
 8000388:	d410      	bmi.n	80003ac <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800038a:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800038c:	b13a      	cbz	r2, 800039e <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800038e:	6895      	ldr	r5, [r2, #8]
 8000390:	f005 0503 	and.w	r5, r5, #3
 8000394:	2d01      	cmp	r5, #1
 8000396:	d102      	bne.n	800039e <HAL_ADC_Init+0x9e>
 8000398:	6812      	ldr	r2, [r2, #0]
 800039a:	07d2      	lsls	r2, r2, #31
 800039c:	d406      	bmi.n	80003ac <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800039e:	4d50      	ldr	r5, [pc, #320]	; (80004e0 <HAL_ADC_Init+0x1e0>)
 80003a0:	6866      	ldr	r6, [r4, #4]
 80003a2:	68aa      	ldr	r2, [r5, #8]
 80003a4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80003a8:	4332      	orrs	r2, r6
 80003aa:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80003ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003ae:	68a6      	ldr	r6, [r4, #8]
 80003b0:	69e5      	ldr	r5, [r4, #28]
 80003b2:	2a01      	cmp	r2, #1
 80003b4:	68e2      	ldr	r2, [r4, #12]
 80003b6:	ea42 0206 	orr.w	r2, r2, r6
 80003ba:	bf18      	it	ne
 80003bc:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 80003c0:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80003c4:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80003c8:	2901      	cmp	r1, #1
 80003ca:	d107      	bne.n	80003dc <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d171      	bne.n	80004b4 <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80003d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003d2:	3901      	subs	r1, #1
 80003d4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80003d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80003de:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80003e0:	bf1e      	ittt	ne
 80003e2:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 80003e4:	4329      	orrne	r1, r5
 80003e6:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80003e8:	6899      	ldr	r1, [r3, #8]
 80003ea:	f011 0f0c 	tst.w	r1, #12
 80003ee:	d10b      	bne.n	8000408 <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80003f0:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80003f2:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80003f4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80003f8:	f021 0102 	bic.w	r1, r1, #2
 80003fc:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80003fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000400:	0049      	lsls	r1, r1, #1
 8000402:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8000406:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8000408:	68dd      	ldr	r5, [r3, #12]
 800040a:	4936      	ldr	r1, [pc, #216]	; (80004e4 <HAL_ADC_Init+0x1e4>)
 800040c:	4029      	ands	r1, r5
 800040e:	430a      	orrs	r2, r1
 8000410:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000412:	6922      	ldr	r2, [r4, #16]
 8000414:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000416:	bf05      	ittet	eq
 8000418:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800041a:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800041c:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800041e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000422:	bf06      	itte	eq
 8000424:	f021 010f 	biceq.w	r1, r1, #15
 8000428:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800042a:	f022 020f 	bicne.w	r2, r2, #15
 800042e:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000430:	2300      	movs	r3, #0
 8000432:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000434:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000436:	f023 0303 	bic.w	r3, r3, #3
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000440:	b016      	add	sp, #88	; 0x58
 8000442:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8000444:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000446:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000448:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800044a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800044e:	f002 fc17 	bl	8002c80 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000452:	6823      	ldr	r3, [r4, #0]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	00d8      	lsls	r0, r3, #3
 8000458:	f53f af62 	bmi.w	8000320 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 800045c:	4620      	mov	r0, r4
 800045e:	f7ff fee9 	bl	8000234 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000462:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000464:	06d1      	lsls	r1, r2, #27
 8000466:	f53f af5c 	bmi.w	8000322 <HAL_ADC_Init+0x22>
 800046a:	2800      	cmp	r0, #0
 800046c:	f47f af59 	bne.w	8000322 <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 8000470:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000476:	f023 0302 	bic.w	r3, r3, #2
 800047a:	f043 0302 	orr.w	r3, r3, #2
 800047e:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000480:	6823      	ldr	r3, [r4, #0]
 8000482:	689a      	ldr	r2, [r3, #8]
 8000484:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000488:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800048a:	689a      	ldr	r2, [r3, #8]
 800048c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000490:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_ADC_Init+0x1e8>)
 8000494:	4a15      	ldr	r2, [pc, #84]	; (80004ec <HAL_ADC_Init+0x1ec>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	fbb3 f2f2 	udiv	r2, r3, r2
 800049c:	230a      	movs	r3, #10
 800049e:	4353      	muls	r3, r2
            wait_loop_index--;
 80004a0:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80004a2:	9b00      	ldr	r3, [sp, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	f43f af3b 	beq.w	8000320 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 80004aa:	9b00      	ldr	r3, [sp, #0]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7f7      	b.n	80004a0 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004b0:	4618      	mov	r0, r3
 80004b2:	e748      	b.n	8000346 <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 80004b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80004b6:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80004ba:	f041 0120 	orr.w	r1, r1, #32
 80004be:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80004c2:	f041 0101 	orr.w	r1, r1, #1
 80004c6:	64a1      	str	r1, [r4, #72]	; 0x48
 80004c8:	e788      	b.n	80003dc <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 80004ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004cc:	f023 0312 	bic.w	r3, r3, #18
 80004d0:	f043 0310 	orr.w	r3, r3, #16
 80004d4:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80004d6:	2001      	movs	r0, #1
 80004d8:	e7b2      	b.n	8000440 <HAL_ADC_Init+0x140>
 80004da:	bf00      	nop
 80004dc:	50000100 	.word	0x50000100
 80004e0:	50000300 	.word	0x50000300
 80004e4:	fff0c007 	.word	0xfff0c007
 80004e8:	20000000 	.word	0x20000000
 80004ec:	000f4240 	.word	0x000f4240

080004f0 <HAL_ADC_Start_IT>:
{
 80004f0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004f2:	6803      	ldr	r3, [r0, #0]
 80004f4:	689d      	ldr	r5, [r3, #8]
 80004f6:	f015 0504 	ands.w	r5, r5, #4
{
 80004fa:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004fc:	d16d      	bne.n	80005da <HAL_ADC_Start_IT+0xea>
    __HAL_LOCK(hadc);
 80004fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000502:	2b01      	cmp	r3, #1
 8000504:	d069      	beq.n	80005da <HAL_ADC_Start_IT+0xea>
 8000506:	2301      	movs	r3, #1
 8000508:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 800050c:	f7ff feca 	bl	80002a4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000510:	2800      	cmp	r0, #0
 8000512:	d15f      	bne.n	80005d4 <HAL_ADC_Start_IT+0xe4>
      ADC_STATE_CLR_SET(hadc->State,
 8000514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000516:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800051a:	f023 0301 	bic.w	r3, r3, #1
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <HAL_ADC_Start_IT+0xf0>)
 8000526:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000528:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800052a:	f013 0f1f 	tst.w	r3, #31
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	d002      	beq.n	8000538 <HAL_ADC_Start_IT+0x48>
 8000532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000536:	d143      	bne.n	80005c0 <HAL_ADC_Start_IT+0xd0>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000538:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800053c:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800053e:	68da      	ldr	r2, [r3, #12]
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000540:	0195      	lsls	r5, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000542:	bf41      	itttt	mi
 8000544:	6c62      	ldrmi	r2, [r4, #68]	; 0x44
 8000546:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800054a:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800054e:	6462      	strmi	r2, [r4, #68]	; 0x44
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000550:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000556:	bf1c      	itt	ne
 8000558:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 800055a:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800055e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000560:	2200      	movs	r2, #0
 8000562:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000566:	221c      	movs	r2, #28
 8000568:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 800056a:	6962      	ldr	r2, [r4, #20]
 800056c:	2a08      	cmp	r2, #8
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800056e:	685a      	ldr	r2, [r3, #4]
 8000570:	bf03      	ittte	eq
 8000572:	f022 0204 	biceq.w	r2, r2, #4
 8000576:	605a      	streq	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000578:	685a      	ldreq	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800057a:	f042 020c 	orrne.w	r2, r2, #12
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800057e:	bf08      	it	eq
 8000580:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000584:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000588:	2a01      	cmp	r2, #1
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800058a:	bf02      	ittt	eq
 800058c:	685a      	ldreq	r2, [r3, #4]
 800058e:	f022 0210 	biceq.w	r2, r2, #16
 8000592:	605a      	streq	r2, [r3, #4]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000594:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <HAL_ADC_Start_IT+0xf0>)
 8000596:	6891      	ldr	r1, [r2, #8]
 8000598:	06c9      	lsls	r1, r1, #27
 800059a:	d00c      	beq.n	80005b6 <HAL_ADC_Start_IT+0xc6>
 800059c:	6891      	ldr	r1, [r2, #8]
 800059e:	f001 011f 	and.w	r1, r1, #31
 80005a2:	2905      	cmp	r1, #5
 80005a4:	d007      	beq.n	80005b6 <HAL_ADC_Start_IT+0xc6>
 80005a6:	6892      	ldr	r2, [r2, #8]
 80005a8:	f002 021f 	and.w	r2, r2, #31
 80005ac:	2a09      	cmp	r2, #9
 80005ae:	d002      	beq.n	80005b6 <HAL_ADC_Start_IT+0xc6>
 80005b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005b4:	d112      	bne.n	80005dc <HAL_ADC_Start_IT+0xec>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	f042 0204 	orr.w	r2, r2, #4
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005c4:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_ADC_Start_IT+0xf4>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d1c1      	bne.n	8000550 <HAL_ADC_Start_IT+0x60>
 80005cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005d0:	68d2      	ldr	r2, [r2, #12]
 80005d2:	e7b5      	b.n	8000540 <HAL_ADC_Start_IT+0x50>
      __HAL_UNLOCK(hadc);
 80005d4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 80005d8:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80005da:	2002      	movs	r0, #2
}
 80005dc:	bd38      	pop	{r3, r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	50000300 	.word	0x50000300
 80005e4:	50000100 	.word	0x50000100

080005e8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80005e8:	6803      	ldr	r3, [r0, #0]
 80005ea:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80005ec:	4770      	bx	lr

080005ee <HAL_ADCEx_InjectedConvCpltCallback>:
 80005ee:	4770      	bx	lr

080005f0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80005f0:	4770      	bx	lr

080005f2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80005f2:	4770      	bx	lr

080005f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 80005f4:	4770      	bx	lr
	...

080005f8 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005f8:	6803      	ldr	r3, [r0, #0]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	0751      	lsls	r1, r2, #29
{
 80005fe:	b510      	push	{r4, lr}
 8000600:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000602:	d502      	bpl.n	800060a <HAL_ADC_IRQHandler+0x12>
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	0752      	lsls	r2, r2, #29
 8000608:	d405      	bmi.n	8000616 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800060a:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800060c:	0710      	lsls	r0, r2, #28
 800060e:	d53e      	bpl.n	800068e <HAL_ADC_IRQHandler+0x96>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	0711      	lsls	r1, r2, #28
 8000614:	d53b      	bpl.n	800068e <HAL_ADC_IRQHandler+0x96>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000616:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000618:	06d2      	lsls	r2, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800061a:	bf5e      	ittt	pl
 800061c:	6c62      	ldrpl	r2, [r4, #68]	; 0x44
 800061e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000622:	6462      	strpl	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000624:	4a92      	ldr	r2, [pc, #584]	; (8000870 <HAL_ADC_IRQHandler+0x278>)
 8000626:	6891      	ldr	r1, [r2, #8]
 8000628:	06c8      	lsls	r0, r1, #27
 800062a:	d00d      	beq.n	8000648 <HAL_ADC_IRQHandler+0x50>
 800062c:	6891      	ldr	r1, [r2, #8]
 800062e:	f001 011f 	and.w	r1, r1, #31
 8000632:	2905      	cmp	r1, #5
 8000634:	d008      	beq.n	8000648 <HAL_ADC_IRQHandler+0x50>
 8000636:	6892      	ldr	r2, [r2, #8]
 8000638:	f002 021f 	and.w	r2, r2, #31
 800063c:	2a09      	cmp	r2, #9
 800063e:	d003      	beq.n	8000648 <HAL_ADC_IRQHandler+0x50>
 8000640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000644:	f040 80e4 	bne.w	8000810 <HAL_ADC_IRQHandler+0x218>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000648:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800064a:	68d9      	ldr	r1, [r3, #12]
 800064c:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8000650:	d117      	bne.n	8000682 <HAL_ADC_IRQHandler+0x8a>
 8000652:	0491      	lsls	r1, r2, #18
 8000654:	d415      	bmi.n	8000682 <HAL_ADC_IRQHandler+0x8a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	0712      	lsls	r2, r2, #28
 800065a:	d512      	bpl.n	8000682 <HAL_ADC_IRQHandler+0x8a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	0750      	lsls	r0, r2, #29
 8000660:	f100 80da 	bmi.w	8000818 <HAL_ADC_IRQHandler+0x220>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	f022 020c 	bic.w	r2, r2, #12
 800066a:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800066c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800066e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000672:	6463      	str	r3, [r4, #68]	; 0x44
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000674:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000676:	04d9      	lsls	r1, r3, #19
 8000678:	d403      	bmi.n	8000682 <HAL_ADC_IRQHandler+0x8a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800067a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000682:	4620      	mov	r0, r4
 8000684:	f001 feec 	bl	8002460 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000688:	6823      	ldr	r3, [r4, #0]
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800068e:	6823      	ldr	r3, [r4, #0]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	0692      	lsls	r2, r2, #26
 8000694:	d502      	bpl.n	800069c <HAL_ADC_IRQHandler+0xa4>
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	0690      	lsls	r0, r2, #26
 800069a:	d405      	bmi.n	80006a8 <HAL_ADC_IRQHandler+0xb0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800069c:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800069e:	0651      	lsls	r1, r2, #25
 80006a0:	d556      	bpl.n	8000750 <HAL_ADC_IRQHandler+0x158>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	0652      	lsls	r2, r2, #25
 80006a6:	d553      	bpl.n	8000750 <HAL_ADC_IRQHandler+0x158>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80006a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80006ae:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80006b0:	4a6f      	ldr	r2, [pc, #444]	; (8000870 <HAL_ADC_IRQHandler+0x278>)
 80006b2:	6891      	ldr	r1, [r2, #8]
 80006b4:	06c8      	lsls	r0, r1, #27
 80006b6:	d00d      	beq.n	80006d4 <HAL_ADC_IRQHandler+0xdc>
 80006b8:	6891      	ldr	r1, [r2, #8]
 80006ba:	f001 011f 	and.w	r1, r1, #31
 80006be:	2905      	cmp	r1, #5
 80006c0:	d008      	beq.n	80006d4 <HAL_ADC_IRQHandler+0xdc>
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	f002 021f 	and.w	r2, r2, #31
 80006c8:	2a09      	cmp	r2, #9
 80006ca:	d003      	beq.n	80006d4 <HAL_ADC_IRQHandler+0xdc>
 80006cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006d0:	f040 80ab 	bne.w	800082a <HAL_ADC_IRQHandler+0x232>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80006d4:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80006d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80006d8:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 80006dc:	d007      	beq.n	80006ee <HAL_ADC_IRQHandler+0xf6>
 80006de:	0191      	lsls	r1, r2, #6
 80006e0:	d430      	bmi.n	8000744 <HAL_ADC_IRQHandler+0x14c>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80006e2:	68d9      	ldr	r1, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80006e4:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80006e8:	d12c      	bne.n	8000744 <HAL_ADC_IRQHandler+0x14c>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80006ea:	0492      	lsls	r2, r2, #18
 80006ec:	d42a      	bmi.n	8000744 <HAL_ADC_IRQHandler+0x14c>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	0650      	lsls	r0, r2, #25
 80006f2:	d527      	bpl.n	8000744 <HAL_ADC_IRQHandler+0x14c>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80006f4:	4a5e      	ldr	r2, [pc, #376]	; (8000870 <HAL_ADC_IRQHandler+0x278>)
 80006f6:	6891      	ldr	r1, [r2, #8]
 80006f8:	06c9      	lsls	r1, r1, #27
 80006fa:	d00d      	beq.n	8000718 <HAL_ADC_IRQHandler+0x120>
 80006fc:	6891      	ldr	r1, [r2, #8]
 80006fe:	f001 011f 	and.w	r1, r1, #31
 8000702:	2906      	cmp	r1, #6
 8000704:	d008      	beq.n	8000718 <HAL_ADC_IRQHandler+0x120>
 8000706:	6892      	ldr	r2, [r2, #8]
 8000708:	f002 021f 	and.w	r2, r2, #31
 800070c:	2a07      	cmp	r2, #7
 800070e:	d003      	beq.n	8000718 <HAL_ADC_IRQHandler+0x120>
 8000710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000714:	f040 808d 	bne.w	8000832 <HAL_ADC_IRQHandler+0x23a>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000718:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800071a:	0292      	lsls	r2, r2, #10
 800071c:	d412      	bmi.n	8000744 <HAL_ADC_IRQHandler+0x14c>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	0710      	lsls	r0, r2, #28
 8000722:	f100 808a 	bmi.w	800083a <HAL_ADC_IRQHandler+0x242>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800072c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800072e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000734:	6463      	str	r3, [r4, #68]	; 0x44
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000736:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000738:	05d9      	lsls	r1, r3, #23
 800073a:	d403      	bmi.n	8000744 <HAL_ADC_IRQHandler+0x14c>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800073c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000744:	4620      	mov	r0, r4
 8000746:	f7ff ff52 	bl	80005ee <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	2260      	movs	r2, #96	; 0x60
 800074e:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	0612      	lsls	r2, r2, #24
 8000756:	d50c      	bpl.n	8000772 <HAL_ADC_IRQHandler+0x17a>
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	061b      	lsls	r3, r3, #24
 800075c:	d509      	bpl.n	8000772 <HAL_ADC_IRQHandler+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800075e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000764:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff fd62 	bl	8000230 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	05d0      	lsls	r0, r2, #23
 8000778:	d50d      	bpl.n	8000796 <HAL_ADC_IRQHandler+0x19e>
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	05d9      	lsls	r1, r3, #23
 800077e:	d50a      	bpl.n	8000796 <HAL_ADC_IRQHandler+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000780:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000786:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000788:	4620      	mov	r0, r4
 800078a:	f7ff ff32 	bl	80005f2 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800078e:	6823      	ldr	r3, [r4, #0]
 8000790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000794:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	0592      	lsls	r2, r2, #22
 800079c:	d50d      	bpl.n	80007ba <HAL_ADC_IRQHandler+0x1c2>
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	0598      	lsls	r0, r3, #22
 80007a2:	d50a      	bpl.n	80007ba <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80007a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007aa:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80007ac:	4620      	mov	r0, r4
 80007ae:	f7ff ff21 	bl	80005f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	06d1      	lsls	r1, r2, #27
 80007c0:	d510      	bpl.n	80007e4 <HAL_ADC_IRQHandler+0x1ec>
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	06d2      	lsls	r2, r2, #27
 80007c6:	d50d      	bpl.n	80007e4 <HAL_ADC_IRQHandler+0x1ec>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80007c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007ca:	2a01      	cmp	r2, #1
 80007cc:	d042      	beq.n	8000854 <HAL_ADC_IRQHandler+0x25c>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80007ce:	4a28      	ldr	r2, [pc, #160]	; (8000870 <HAL_ADC_IRQHandler+0x278>)
 80007d0:	6891      	ldr	r1, [r2, #8]
 80007d2:	06c8      	lsls	r0, r1, #27
 80007d4:	d13a      	bne.n	800084c <HAL_ADC_IRQHandler+0x254>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80007dc:	d13a      	bne.n	8000854 <HAL_ADC_IRQHandler+0x25c>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	2210      	movs	r2, #16
 80007e2:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	0551      	lsls	r1, r2, #21
 80007ea:	d53f      	bpl.n	800086c <HAL_ADC_IRQHandler+0x274>
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	0552      	lsls	r2, r2, #21
 80007f0:	d53c      	bpl.n	800086c <HAL_ADC_IRQHandler+0x274>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80007f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007f8:	6462      	str	r2, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80007fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80007fc:	f042 0208 	orr.w	r2, r2, #8
 8000800:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000806:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff fef1 	bl	80005f0 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 800080e:	bd10      	pop	{r4, pc}
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000810:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000814:	68d2      	ldr	r2, [r2, #12]
 8000816:	e718      	b.n	800064a <HAL_ADC_IRQHandler+0x52>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000818:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000820:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	64a3      	str	r3, [r4, #72]	; 0x48
 8000828:	e72b      	b.n	8000682 <HAL_ADC_IRQHandler+0x8a>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800082a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082e:	68d2      	ldr	r2, [r2, #12]
 8000830:	e751      	b.n	80006d6 <HAL_ADC_IRQHandler+0xde>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000836:	68d2      	ldr	r2, [r2, #12]
 8000838:	e76f      	b.n	800071a <HAL_ADC_IRQHandler+0x122>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800083a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6463      	str	r3, [r4, #68]	; 0x44
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000842:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64a3      	str	r3, [r4, #72]	; 0x48
 800084a:	e77b      	b.n	8000744 <HAL_ADC_IRQHandler+0x14c>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800084c:	6893      	ldr	r3, [r2, #8]
 800084e:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8000852:	e7c3      	b.n	80007dc <HAL_ADC_IRQHandler+0x1e4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000854:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800085c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8000864:	4620      	mov	r0, r4
 8000866:	f7ff fce4 	bl	8000232 <HAL_ADC_ErrorCallback>
 800086a:	e7b8      	b.n	80007de <HAL_ADC_IRQHandler+0x1e6>
 800086c:	bd10      	pop	{r4, pc}
 800086e:	bf00      	nop
 8000870:	50000300 	.word	0x50000300

08000874 <HAL_ADC_ConfigChannel>:
{
 8000874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000876:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 800087c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000880:	2b01      	cmp	r3, #1
{
 8000882:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000884:	f000 8151 	beq.w	8000b2a <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000888:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800088a:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800088c:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800088e:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000890:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 8000892:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000896:	f100 8143 	bmi.w	8000b20 <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 800089a:	6848      	ldr	r0, [r1, #4]
 800089c:	680c      	ldr	r4, [r1, #0]
 800089e:	2804      	cmp	r0, #4
 80008a0:	f04f 0206 	mov.w	r2, #6
 80008a4:	d831      	bhi.n	800090a <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 80008a6:	4342      	muls	r2, r0
 80008a8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80008aa:	201f      	movs	r0, #31
 80008ac:	4090      	lsls	r0, r2
 80008ae:	ea27 0000 	bic.w	r0, r7, r0
 80008b2:	fa04 f202 	lsl.w	r2, r4, r2
 80008b6:	4302      	orrs	r2, r0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	f012 0f0c 	tst.w	r2, #12
 80008c0:	d162      	bne.n	8000988 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80008c2:	2c09      	cmp	r4, #9
 80008c4:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80008c8:	688f      	ldr	r7, [r1, #8]
 80008ca:	d946      	bls.n	800095a <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008cc:	4422      	add	r2, r4
 80008ce:	6998      	ldr	r0, [r3, #24]
 80008d0:	3a1e      	subs	r2, #30
 80008d2:	f04f 0e07 	mov.w	lr, #7
 80008d6:	fa0e fe02 	lsl.w	lr, lr, r2
 80008da:	ea20 000e 	bic.w	r0, r0, lr
 80008de:	fa07 f202 	lsl.w	r2, r7, r2
 80008e2:	4302      	orrs	r2, r0
 80008e4:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 80008ec:	694a      	ldr	r2, [r1, #20]
 80008ee:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80008f2:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 80008f6:	690a      	ldr	r2, [r1, #16]
 80008f8:	3a01      	subs	r2, #1
 80008fa:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 80008fe:	2a03      	cmp	r2, #3
 8000900:	d873      	bhi.n	80009ea <HAL_ADC_ConfigChannel+0x176>
 8000902:	e8df f002 	tbb	[pc, r2]
 8000906:	5137      	.short	0x5137
 8000908:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 800090a:	2809      	cmp	r0, #9
 800090c:	d80b      	bhi.n	8000926 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800090e:	4342      	muls	r2, r0
 8000910:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000912:	3a1e      	subs	r2, #30
 8000914:	201f      	movs	r0, #31
 8000916:	4090      	lsls	r0, r2
 8000918:	ea27 0000 	bic.w	r0, r7, r0
 800091c:	fa04 f202 	lsl.w	r2, r4, r2
 8000920:	4302      	orrs	r2, r0
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
 8000924:	e7c9      	b.n	80008ba <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000926:	280e      	cmp	r0, #14
 8000928:	d80b      	bhi.n	8000942 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800092a:	4342      	muls	r2, r0
 800092c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800092e:	3a3c      	subs	r2, #60	; 0x3c
 8000930:	201f      	movs	r0, #31
 8000932:	4090      	lsls	r0, r2
 8000934:	ea27 0000 	bic.w	r0, r7, r0
 8000938:	fa04 f202 	lsl.w	r2, r4, r2
 800093c:	4302      	orrs	r2, r0
 800093e:	639a      	str	r2, [r3, #56]	; 0x38
 8000940:	e7bb      	b.n	80008ba <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000942:	4342      	muls	r2, r0
 8000944:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000946:	3a5a      	subs	r2, #90	; 0x5a
 8000948:	201f      	movs	r0, #31
 800094a:	4090      	lsls	r0, r2
 800094c:	ea27 0000 	bic.w	r0, r7, r0
 8000950:	fa04 f202 	lsl.w	r2, r4, r2
 8000954:	4302      	orrs	r2, r0
 8000956:	63da      	str	r2, [r3, #60]	; 0x3c
 8000958:	e7af      	b.n	80008ba <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800095a:	6958      	ldr	r0, [r3, #20]
 800095c:	4422      	add	r2, r4
 800095e:	f04f 0e07 	mov.w	lr, #7
 8000962:	fa0e fe02 	lsl.w	lr, lr, r2
 8000966:	ea20 000e 	bic.w	r0, r0, lr
 800096a:	fa07 f202 	lsl.w	r2, r7, r2
 800096e:	4302      	orrs	r2, r0
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	e7b8      	b.n	80008e6 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000976:	4f7a      	ldr	r7, [pc, #488]	; (8000b60 <HAL_ADC_ConfigChannel+0x2ec>)
 8000978:	4017      	ands	r7, r2
 800097a:	ea47 020c 	orr.w	r2, r7, ip
 800097e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000982:	ea42 020e 	orr.w	r2, r2, lr
 8000986:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	f002 0203 	and.w	r2, r2, #3
 800098e:	2a01      	cmp	r2, #1
 8000990:	f040 80cd 	bne.w	8000b2e <HAL_ADC_ConfigChannel+0x2ba>
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	07d0      	lsls	r0, r2, #31
 8000998:	f140 80c9 	bpl.w	8000b2e <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800099e:	2300      	movs	r3, #0
 80009a0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 80009a4:	b017      	add	sp, #92	; 0x5c
 80009a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80009a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80009aa:	4f6d      	ldr	r7, [pc, #436]	; (8000b60 <HAL_ADC_ConfigChannel+0x2ec>)
 80009ac:	4017      	ands	r7, r2
 80009ae:	ea47 020c 	orr.w	r2, r7, ip
 80009b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009b6:	ea42 020e 	orr.w	r2, r2, lr
 80009ba:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80009bc:	e7e4      	b.n	8000988 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80009be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80009c0:	4867      	ldr	r0, [pc, #412]	; (8000b60 <HAL_ADC_ConfigChannel+0x2ec>)
 80009c2:	4010      	ands	r0, r2
 80009c4:	ea40 020c 	orr.w	r2, r0, ip
 80009c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009cc:	ea42 020e 	orr.w	r2, r2, lr
 80009d0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80009d2:	e7d9      	b.n	8000988 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80009d4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80009d6:	4a62      	ldr	r2, [pc, #392]	; (8000b60 <HAL_ADC_ConfigChannel+0x2ec>)
 80009d8:	4002      	ands	r2, r0
 80009da:	ea42 020c 	orr.w	r2, r2, ip
 80009de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009e2:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80009e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80009e8:	e7ce      	b.n	8000988 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80009ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009ec:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80009f0:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80009f2:	bf02      	ittt	eq
 80009f4:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80009f6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80009fa:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80009fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80009fe:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a02:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000a04:	bf02      	ittt	eq
 8000a06:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000a08:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a0c:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000a10:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a14:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000a16:	bf02      	ittt	eq
 8000a18:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000a1a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a1e:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000a22:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a26:	4594      	cmp	ip, r2
 8000a28:	d1ae      	bne.n	8000988 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000a2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000a2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000a30:	e7d9      	b.n	80009e6 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000a32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a36:	2101      	movs	r1, #1
 8000a38:	40a1      	lsls	r1, r4
 8000a3a:	ea22 0201 	bic.w	r2, r2, r1
 8000a3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a42:	2c10      	cmp	r4, #16
 8000a44:	d143      	bne.n	8000ace <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <HAL_ADC_ConfigChannel+0x2f0>)
 8000a48:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a4a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a4e:	d1a5      	bne.n	800099c <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a54:	bf0c      	ite	eq
 8000a56:	4a44      	ldreq	r2, [pc, #272]	; (8000b68 <HAL_ADC_ConfigChannel+0x2f4>)
 8000a58:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000a5c:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	f002 0203 	and.w	r2, r2, #3
 8000a64:	2a01      	cmp	r2, #1
 8000a66:	d102      	bne.n	8000a6e <HAL_ADC_ConfigChannel+0x1fa>
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	07d1      	lsls	r1, r2, #31
 8000a6c:	d452      	bmi.n	8000b14 <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a6e:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a70:	b13a      	cbz	r2, 8000a82 <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a72:	6891      	ldr	r1, [r2, #8]
 8000a74:	f001 0103 	and.w	r1, r1, #3
 8000a78:	2901      	cmp	r1, #1
 8000a7a:	d102      	bne.n	8000a82 <HAL_ADC_ConfigChannel+0x20e>
 8000a7c:	6812      	ldr	r2, [r2, #0]
 8000a7e:	07d2      	lsls	r2, r2, #31
 8000a80:	d448      	bmi.n	8000b14 <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000a82:	2c10      	cmp	r4, #16
 8000a84:	d132      	bne.n	8000aec <HAL_ADC_ConfigChannel+0x278>
 8000a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a8a:	d187      	bne.n	800099c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000a8c:	4a35      	ldr	r2, [pc, #212]	; (8000b64 <HAL_ADC_ConfigChannel+0x2f0>)
 8000a8e:	6893      	ldr	r3, [r2, #8]
 8000a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a94:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a96:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <HAL_ADC_ConfigChannel+0x2f8>)
 8000a98:	4a35      	ldr	r2, [pc, #212]	; (8000b70 <HAL_ADC_ConfigChannel+0x2fc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	4353      	muls	r3, r2
            wait_loop_index--;
 8000aa4:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000aa6:	9b00      	ldr	r3, [sp, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f43f af77 	beq.w	800099c <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8000aae:	9b00      	ldr	r3, [sp, #0]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	e7f7      	b.n	8000aa4 <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000ab4:	1c60      	adds	r0, r4, #1
 8000ab6:	6959      	ldr	r1, [r3, #20]
 8000ab8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000abc:	2207      	movs	r2, #7
 8000abe:	4082      	lsls	r2, r0
 8000ac0:	ea21 0102 	bic.w	r1, r1, r2
 8000ac4:	fa06 f200 	lsl.w	r2, r6, r0
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	e7b9      	b.n	8000a42 <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000ace:	2c11      	cmp	r4, #17
 8000ad0:	d104      	bne.n	8000adc <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000ad2:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <HAL_ADC_ConfigChannel+0x2f0>)
 8000ad4:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000ad6:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000ada:	e7b8      	b.n	8000a4e <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000adc:	2c12      	cmp	r4, #18
 8000ade:	f47f af5d 	bne.w	800099c <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000ae2:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <HAL_ADC_ConfigChannel+0x2f0>)
 8000ae4:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000ae6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000aea:	e7b0      	b.n	8000a4e <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000aec:	2c11      	cmp	r4, #17
 8000aee:	d109      	bne.n	8000b04 <HAL_ADC_ConfigChannel+0x290>
 8000af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000af4:	f47f af52 	bne.w	800099c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000af8:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <HAL_ADC_ConfigChannel+0x2f0>)
 8000afa:	6893      	ldr	r3, [r2, #8]
 8000afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000b00:	6093      	str	r3, [r2, #8]
 8000b02:	e74b      	b.n	800099c <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000b04:	2c12      	cmp	r4, #18
 8000b06:	f47f af49 	bne.w	800099c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000b0a:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <HAL_ADC_ConfigChannel+0x2f0>)
 8000b0c:	6893      	ldr	r3, [r2, #8]
 8000b0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b12:	e7f5      	b.n	8000b00 <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b14:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	e73e      	b.n	800099e <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b20:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000b22:	f043 0320 	orr.w	r3, r3, #32
 8000b26:	646b      	str	r3, [r5, #68]	; 0x44
 8000b28:	e739      	b.n	800099e <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	e73a      	b.n	80009a4 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b2e:	2e01      	cmp	r6, #1
 8000b30:	f47f af7f 	bne.w	8000a32 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b38:	40a6      	lsls	r6, r4
 8000b3a:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b3c:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b3e:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8000b42:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b44:	d9b6      	bls.n	8000ab4 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000b46:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000b4a:	6999      	ldr	r1, [r3, #24]
 8000b4c:	3a1b      	subs	r2, #27
 8000b4e:	2007      	movs	r0, #7
 8000b50:	4090      	lsls	r0, r2
 8000b52:	ea21 0100 	bic.w	r1, r1, r0
 8000b56:	fa06 f202 	lsl.w	r2, r6, r2
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	619a      	str	r2, [r3, #24]
 8000b5e:	e770      	b.n	8000a42 <HAL_ADC_ConfigChannel+0x1ce>
 8000b60:	83fff000 	.word	0x83fff000
 8000b64:	50000300 	.word	0x50000300
 8000b68:	50000100 	.word	0x50000100
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	000f4240 	.word	0x000f4240

08000b74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b76:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b7c:	041b      	lsls	r3, r3, #16
 8000b7e:	0c1b      	lsrs	r3, r3, #16
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b84:	0200      	lsls	r0, r0, #8
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b8e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b90:	60d3      	str	r3, [r2, #12]
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9a:	b530      	push	{r4, r5, lr}
 8000b9c:	68dc      	ldr	r4, [r3, #12]
 8000b9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	bf28      	it	cs
 8000bac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 0501 	mov.w	r5, #1
 8000bb4:	fa05 f303 	lsl.w	r3, r5, r3
 8000bb8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbc:	bf8c      	ite	hi
 8000bbe:	3c03      	subhi	r4, #3
 8000bc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc2:	4019      	ands	r1, r3
 8000bc4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc6:	fa05 f404 	lsl.w	r4, r5, r4
 8000bca:	3c01      	subs	r4, #1
 8000bcc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000bce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	ea42 0201 	orr.w	r2, r2, r1
 8000bd4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	bfaf      	iteee	ge
 8000bda:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	f000 000f 	andlt.w	r0, r0, #15
 8000be2:	4b06      	ldrlt	r3, [pc, #24]	; (8000bfc <HAL_NVIC_SetPriority+0x64>)
 8000be4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	bfa5      	ittet	ge
 8000be8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000bec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bf4:	bd30      	pop	{r4, r5, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	e000ed14 	.word	0xe000ed14

08000c00 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c00:	0942      	lsrs	r2, r0, #5
 8000c02:	2301      	movs	r3, #1
 8000c04:	f000 001f 	and.w	r0, r0, #31
 8000c08:	fa03 f000 	lsl.w	r0, r3, r0
 8000c0c:	4b01      	ldr	r3, [pc, #4]	; (8000c14 <HAL_NVIC_EnableIRQ+0x14>)
 8000c0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	3801      	subs	r0, #1
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d20a      	bcs.n	8000c36 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c24:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	21f0      	movs	r1, #240	; 0xf0
 8000c28:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c46:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c48:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c4a:	bf0c      	ite	eq
 8000c4c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c50:	f022 0204 	bicne.w	r2, r2, #4
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	4770      	bx	lr
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c5c:	4770      	bx	lr

08000c5e <HAL_SYSTICK_IRQHandler>:
{
 8000c5e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c60:	f7ff fffc 	bl	8000c5c <HAL_SYSTICK_Callback>
 8000c64:	bd08      	pop	{r3, pc}

08000c66 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c66:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000c6a:	2a02      	cmp	r2, #2
{  
 8000c6c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c6e:	d003      	beq.n	8000c78 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c70:	2204      	movs	r2, #4
 8000c72:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c74:	2001      	movs	r0, #1
 8000c76:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c78:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c7a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c7c:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c80:	f021 010e 	bic.w	r1, r1, #14
 8000c84:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c86:	6811      	ldr	r1, [r2, #0]
 8000c88:	f021 0101 	bic.w	r1, r1, #1
 8000c8c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c8e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c90:	2101      	movs	r1, #1
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000c98:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000c9a:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000c9e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000ca2:	b113      	cbz	r3, 8000caa <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000ca4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000cac:	bd10      	pop	{r4, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cb6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000e20 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cbc:	4a56      	ldr	r2, [pc, #344]	; (8000e18 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cbe:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cc0:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000cc4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cc6:	9c01      	ldr	r4, [sp, #4]
 8000cc8:	40dc      	lsrs	r4, r3
 8000cca:	d102      	bne.n	8000cd2 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000ccc:	b005      	add	sp, #20
 8000cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cd2:	2401      	movs	r4, #1
 8000cd4:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000cd8:	9c01      	ldr	r4, [sp, #4]
 8000cda:	ea14 050a 	ands.w	r5, r4, sl
 8000cde:	f000 8093 	beq.w	8000e08 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce2:	684c      	ldr	r4, [r1, #4]
 8000ce4:	f024 0b10 	bic.w	fp, r4, #16
 8000ce8:	f1bb 0f02 	cmp.w	fp, #2
 8000cec:	d111      	bne.n	8000d12 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000cee:	08df      	lsrs	r7, r3, #3
 8000cf0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf4:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000cf8:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cfe:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000d02:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d06:	690e      	ldr	r6, [r1, #16]
 8000d08:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d0c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000d10:	623e      	str	r6, [r7, #32]
 8000d12:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d16:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000d18:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1a:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d1e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d20:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d24:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d26:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2a:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2e:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d32:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000d36:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d38:	d811      	bhi.n	8000d5e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000d3a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d3c:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d40:	68ce      	ldr	r6, [r1, #12]
 8000d42:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000d46:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000d4a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d4c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4e:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d52:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000d56:	409e      	lsls	r6, r3
 8000d58:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000d5c:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d5e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d60:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d62:	688e      	ldr	r6, [r1, #8]
 8000d64:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d68:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000d6c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6e:	d54b      	bpl.n	8000e08 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d70:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000d74:	f046 0601 	orr.w	r6, r6, #1
 8000d78:	f8c8 6018 	str.w	r6, [r8, #24]
 8000d7c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000d80:	f023 0703 	bic.w	r7, r3, #3
 8000d84:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d88:	f006 0601 	and.w	r6, r6, #1
 8000d8c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d90:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d92:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d98:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d9e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000da2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000da6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000daa:	d02f      	beq.n	8000e0c <HAL_GPIO_Init+0x15c>
 8000dac:	4e1b      	ldr	r6, [pc, #108]	; (8000e1c <HAL_GPIO_Init+0x16c>)
 8000dae:	42b0      	cmp	r0, r6
 8000db0:	d02e      	beq.n	8000e10 <HAL_GPIO_Init+0x160>
 8000db2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000db6:	42b0      	cmp	r0, r6
 8000db8:	d02c      	beq.n	8000e14 <HAL_GPIO_Init+0x164>
 8000dba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dbe:	42b0      	cmp	r0, r6
 8000dc0:	bf14      	ite	ne
 8000dc2:	2605      	movne	r6, #5
 8000dc4:	2603      	moveq	r6, #3
 8000dc6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000dca:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000dce:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000dd0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000dd8:	bf0c      	ite	eq
 8000dda:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ddc:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000dde:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000de0:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000de6:	bf0c      	ite	eq
 8000de8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000dea:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000dec:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000dee:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000df4:	bf0c      	ite	eq
 8000df6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000df8:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000dfa:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000dfc:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfe:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e00:	bf54      	ite	pl
 8000e02:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000e04:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000e06:	60d6      	str	r6, [r2, #12]
    position++;
 8000e08:	3301      	adds	r3, #1
 8000e0a:	e75c      	b.n	8000cc6 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e7da      	b.n	8000dc6 <HAL_GPIO_Init+0x116>
 8000e10:	2601      	movs	r6, #1
 8000e12:	e7d8      	b.n	8000dc6 <HAL_GPIO_Init+0x116>
 8000e14:	2602      	movs	r6, #2
 8000e16:	e7d6      	b.n	8000dc6 <HAL_GPIO_Init+0x116>
 8000e18:	40010400 	.word	0x40010400
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e24:	b10a      	cbz	r2, 8000e2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e26:	6181      	str	r1, [r0, #24]
 8000e28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	6281      	str	r1, [r0, #40]	; 0x28
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e30:	6803      	ldr	r3, [r0, #0]
 8000e32:	07da      	lsls	r2, r3, #31
{
 8000e34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e38:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3a:	d411      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	079b      	lsls	r3, r3, #30
 8000e40:	f100 8088 	bmi.w	8000f54 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	071c      	lsls	r4, r3, #28
 8000e48:	f100 80f8 	bmi.w	800103c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	0758      	lsls	r0, r3, #29
 8000e50:	f100 8141 	bmi.w	80010d6 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e54:	69ea      	ldr	r2, [r5, #28]
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 81d7 	bne.w	800120a <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	e021      	b.n	8000ea4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e60:	4cba      	ldr	r4, [pc, #744]	; (800114c <HAL_RCC_OscConfig+0x31c>)
 8000e62:	6863      	ldr	r3, [r4, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d007      	beq.n	8000e7c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e6c:	6863      	ldr	r3, [r4, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d119      	bne.n	8000eaa <HAL_RCC_OscConfig+0x7a>
 8000e76:	6863      	ldr	r3, [r4, #4]
 8000e78:	03df      	lsls	r7, r3, #15
 8000e7a:	d516      	bpl.n	8000eaa <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e80:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	6821      	ldr	r1, [r4, #0]
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2201      	movs	r2, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	420b      	tst	r3, r1
 8000e9a:	d0cf      	beq.n	8000e3c <HAL_RCC_OscConfig+0xc>
 8000e9c:	686b      	ldr	r3, [r5, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1cc      	bne.n	8000e3c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ea2:	2001      	movs	r0, #1
}
 8000ea4:	b002      	add	sp, #8
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eaa:	686a      	ldr	r2, [r5, #4]
 8000eac:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000eb0:	d125      	bne.n	8000efe <HAL_RCC_OscConfig+0xce>
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb8:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ebc:	68a9      	ldr	r1, [r5, #8]
 8000ebe:	f023 030f 	bic.w	r3, r3, #15
 8000ec2:	430b      	orrs	r3, r1
 8000ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec6:	b352      	cbz	r2, 8000f1e <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000ec8:	f7ff f9ac 	bl	8000224 <HAL_GetTick>
 8000ecc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ed0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	2701      	movs	r7, #1
 8000ed4:	fa96 f3a6 	rbit	r3, r6
 8000ed8:	6822      	ldr	r2, [r4, #0]
 8000eda:	fa96 f3a6 	rbit	r3, r6
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	fa07 f303 	lsl.w	r3, r7, r3
 8000eea:	4213      	tst	r3, r2
 8000eec:	d1a6      	bne.n	8000e3c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eee:	f7ff f999 	bl	8000224 <HAL_GetTick>
 8000ef2:	eba0 0008 	sub.w	r0, r0, r8
 8000ef6:	2864      	cmp	r0, #100	; 0x64
 8000ef8:	d9ec      	bls.n	8000ed4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000efa:	2003      	movs	r0, #3
 8000efc:	e7d2      	b.n	8000ea4 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	b932      	cbnz	r2, 8000f10 <HAL_RCC_OscConfig+0xe0>
 8000f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f06:	6023      	str	r3, [r4, #0]
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	e7d3      	b.n	8000eb8 <HAL_RCC_OscConfig+0x88>
 8000f10:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f14:	d1f5      	bne.n	8000f02 <HAL_RCC_OscConfig+0xd2>
 8000f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1a:	6023      	str	r3, [r4, #0]
 8000f1c:	e7c9      	b.n	8000eb2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000f1e:	f7ff f981 	bl	8000224 <HAL_GetTick>
 8000f22:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f28:	2701      	movs	r7, #1
 8000f2a:	fa96 f3a6 	rbit	r3, r6
 8000f2e:	6822      	ldr	r2, [r4, #0]
 8000f30:	fa96 f3a6 	rbit	r3, r6
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	fa07 f303 	lsl.w	r3, r7, r3
 8000f40:	4213      	tst	r3, r2
 8000f42:	f43f af7b 	beq.w	8000e3c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f46:	f7ff f96d 	bl	8000224 <HAL_GetTick>
 8000f4a:	eba0 0008 	sub.w	r0, r0, r8
 8000f4e:	2864      	cmp	r0, #100	; 0x64
 8000f50:	d9eb      	bls.n	8000f2a <HAL_RCC_OscConfig+0xfa>
 8000f52:	e7d2      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f54:	4c7d      	ldr	r4, [pc, #500]	; (800114c <HAL_RCC_OscConfig+0x31c>)
 8000f56:	6863      	ldr	r3, [r4, #4]
 8000f58:	f013 0f0c 	tst.w	r3, #12
 8000f5c:	d007      	beq.n	8000f6e <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f5e:	6863      	ldr	r3, [r4, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d121      	bne.n	8000fac <HAL_RCC_OscConfig+0x17c>
 8000f68:	6863      	ldr	r3, [r4, #4]
 8000f6a:	03de      	lsls	r6, r3, #15
 8000f6c:	d41e      	bmi.n	8000fac <HAL_RCC_OscConfig+0x17c>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f74:	6821      	ldr	r1, [r4, #0]
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	f003 031f 	and.w	r3, r3, #31
 8000f82:	2201      	movs	r2, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	420b      	tst	r3, r1
 8000f8a:	d002      	beq.n	8000f92 <HAL_RCC_OscConfig+0x162>
 8000f8c:	692b      	ldr	r3, [r5, #16]
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d187      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f92:	6821      	ldr	r1, [r4, #0]
 8000f94:	23f8      	movs	r3, #248	; 0xf8
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	fab3 f283 	clz	r2, r3
 8000f9e:	696b      	ldr	r3, [r5, #20]
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	6023      	str	r3, [r4, #0]
 8000faa:	e74b      	b.n	8000e44 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fac:	692a      	ldr	r2, [r5, #16]
 8000fae:	2601      	movs	r6, #1
 8000fb0:	b30a      	cbz	r2, 8000ff6 <HAL_RCC_OscConfig+0x1c6>
 8000fb2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	2702      	movs	r7, #2
 8000fc6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000fc8:	f7ff f92c 	bl	8000224 <HAL_GetTick>
 8000fcc:	4680      	mov	r8, r0
 8000fce:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	6822      	ldr	r2, [r4, #0]
 8000fd4:	fa97 f3a7 	rbit	r3, r7
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	f003 031f 	and.w	r3, r3, #31
 8000fe0:	fa06 f303 	lsl.w	r3, r6, r3
 8000fe4:	4213      	tst	r3, r2
 8000fe6:	d1d4      	bne.n	8000f92 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe8:	f7ff f91c 	bl	8000224 <HAL_GetTick>
 8000fec:	eba0 0008 	sub.w	r0, r0, r8
 8000ff0:	2802      	cmp	r0, #2
 8000ff2:	d9ec      	bls.n	8000fce <HAL_RCC_OscConfig+0x19e>
 8000ff4:	e781      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
 8000ff6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001002:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	2702      	movs	r7, #2
 800100a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800100c:	f7ff f90a 	bl	8000224 <HAL_GetTick>
 8001010:	4680      	mov	r8, r0
 8001012:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	6822      	ldr	r2, [r4, #0]
 8001018:	fa97 f3a7 	rbit	r3, r7
 800101c:	fab3 f383 	clz	r3, r3
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	fa06 f303 	lsl.w	r3, r6, r3
 8001028:	4213      	tst	r3, r2
 800102a:	f43f af0b 	beq.w	8000e44 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff f8f9 	bl	8000224 <HAL_GetTick>
 8001032:	eba0 0008 	sub.w	r0, r0, r8
 8001036:	2802      	cmp	r0, #2
 8001038:	d9eb      	bls.n	8001012 <HAL_RCC_OscConfig+0x1e2>
 800103a:	e75e      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800103c:	69aa      	ldr	r2, [r5, #24]
 800103e:	4e43      	ldr	r6, [pc, #268]	; (800114c <HAL_RCC_OscConfig+0x31c>)
 8001040:	4943      	ldr	r1, [pc, #268]	; (8001150 <HAL_RCC_OscConfig+0x320>)
 8001042:	2401      	movs	r4, #1
 8001044:	b31a      	cbz	r2, 800108e <HAL_RCC_OscConfig+0x25e>
 8001046:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800104a:	fab3 f383 	clz	r3, r3
 800104e:	440b      	add	r3, r1
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	2702      	movs	r7, #2
 8001054:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001056:	f7ff f8e5 	bl	8000224 <HAL_GetTick>
 800105a:	4680      	mov	r8, r0
 800105c:	fa97 f3a7 	rbit	r3, r7
 8001060:	fa97 f3a7 	rbit	r3, r7
 8001064:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001068:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800106a:	fa97 f3a7 	rbit	r3, r7
 800106e:	fab3 f383 	clz	r3, r3
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	fa04 f303 	lsl.w	r3, r4, r3
 800107a:	4213      	tst	r3, r2
 800107c:	f47f aee6 	bne.w	8000e4c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff f8d0 	bl	8000224 <HAL_GetTick>
 8001084:	eba0 0008 	sub.w	r0, r0, r8
 8001088:	2802      	cmp	r0, #2
 800108a:	d9e7      	bls.n	800105c <HAL_RCC_OscConfig+0x22c>
 800108c:	e735      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
 800108e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	440b      	add	r3, r1
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	2702      	movs	r7, #2
 800109c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800109e:	f7ff f8c1 	bl	8000224 <HAL_GetTick>
 80010a2:	4680      	mov	r8, r0
 80010a4:	fa97 f3a7 	rbit	r3, r7
 80010a8:	fa97 f3a7 	rbit	r3, r7
 80010ac:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80010b2:	fa97 f3a7 	rbit	r3, r7
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	fa04 f303 	lsl.w	r3, r4, r3
 80010c2:	4213      	tst	r3, r2
 80010c4:	f43f aec2 	beq.w	8000e4c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff f8ac 	bl	8000224 <HAL_GetTick>
 80010cc:	eba0 0008 	sub.w	r0, r0, r8
 80010d0:	2802      	cmp	r0, #2
 80010d2:	d9e7      	bls.n	80010a4 <HAL_RCC_OscConfig+0x274>
 80010d4:	e711      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d6:	4c1d      	ldr	r4, [pc, #116]	; (800114c <HAL_RCC_OscConfig+0x31c>)
 80010d8:	69e3      	ldr	r3, [r4, #28]
 80010da:	00d9      	lsls	r1, r3, #3
 80010dc:	d434      	bmi.n	8001148 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	69e3      	ldr	r3, [r4, #28]
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	61e3      	str	r3, [r4, #28]
 80010e6:	69e3      	ldr	r3, [r4, #28]
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010f0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	4f18      	ldr	r7, [pc, #96]	; (8001154 <HAL_RCC_OscConfig+0x324>)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	05da      	lsls	r2, r3, #23
 80010f8:	d52e      	bpl.n	8001158 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fa:	68eb      	ldr	r3, [r5, #12]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d13c      	bne.n	800117a <HAL_RCC_OscConfig+0x34a>
 8001100:	6a23      	ldr	r3, [r4, #32]
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001108:	f7ff f88c 	bl	8000224 <HAL_GetTick>
 800110c:	2702      	movs	r7, #2
 800110e:	4682      	mov	sl, r0
 8001110:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001112:	f04f 0801 	mov.w	r8, #1
 8001116:	fa97 f3a7 	rbit	r3, r7
 800111a:	fa97 f3a7 	rbit	r3, r7
 800111e:	2b00      	cmp	r3, #0
 8001120:	d06b      	beq.n	80011fa <HAL_RCC_OscConfig+0x3ca>
 8001122:	6a22      	ldr	r2, [r4, #32]
 8001124:	fa99 f3a9 	rbit	r3, r9
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	fa08 f303 	lsl.w	r3, r8, r3
 8001134:	4213      	tst	r3, r2
 8001136:	d057      	beq.n	80011e8 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8001138:	2e00      	cmp	r6, #0
 800113a:	f43f ae8b 	beq.w	8000e54 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800113e:	69e3      	ldr	r3, [r4, #28]
 8001140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001144:	61e3      	str	r3, [r4, #28]
 8001146:	e685      	b.n	8000e54 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001148:	2600      	movs	r6, #0
 800114a:	e7d2      	b.n	80010f2 <HAL_RCC_OscConfig+0x2c2>
 800114c:	40021000 	.word	0x40021000
 8001150:	10908120 	.word	0x10908120
 8001154:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001160:	f7ff f860 	bl	8000224 <HAL_GetTick>
 8001164:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	d4c6      	bmi.n	80010fa <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116c:	f7ff f85a 	bl	8000224 <HAL_GetTick>
 8001170:	eba0 0008 	sub.w	r0, r0, r8
 8001174:	2864      	cmp	r0, #100	; 0x64
 8001176:	d9f6      	bls.n	8001166 <HAL_RCC_OscConfig+0x336>
 8001178:	e6bf      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117a:	bb3b      	cbnz	r3, 80011cc <HAL_RCC_OscConfig+0x39c>
 800117c:	6a23      	ldr	r3, [r4, #32]
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	6223      	str	r3, [r4, #32]
 8001184:	6a23      	ldr	r3, [r4, #32]
 8001186:	f023 0304 	bic.w	r3, r3, #4
 800118a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800118c:	f7ff f84a 	bl	8000224 <HAL_GetTick>
 8001190:	2702      	movs	r7, #2
 8001192:	4682      	mov	sl, r0
 8001194:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001196:	f04f 0801 	mov.w	r8, #1
 800119a:	fa97 f3a7 	rbit	r3, r7
 800119e:	fa97 f3a7 	rbit	r3, r7
 80011a2:	b373      	cbz	r3, 8001202 <HAL_RCC_OscConfig+0x3d2>
 80011a4:	6a22      	ldr	r2, [r4, #32]
 80011a6:	fa99 f3a9 	rbit	r3, r9
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	fa08 f303 	lsl.w	r3, r8, r3
 80011b6:	4213      	tst	r3, r2
 80011b8:	d0be      	beq.n	8001138 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff f833 	bl	8000224 <HAL_GetTick>
 80011be:	f241 3388 	movw	r3, #5000	; 0x1388
 80011c2:	eba0 000a 	sub.w	r0, r0, sl
 80011c6:	4298      	cmp	r0, r3
 80011c8:	d9e7      	bls.n	800119a <HAL_RCC_OscConfig+0x36a>
 80011ca:	e696      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	6a23      	ldr	r3, [r4, #32]
 80011d0:	d103      	bne.n	80011da <HAL_RCC_OscConfig+0x3aa>
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6223      	str	r3, [r4, #32]
 80011d8:	e792      	b.n	8001100 <HAL_RCC_OscConfig+0x2d0>
 80011da:	f023 0301 	bic.w	r3, r3, #1
 80011de:	6223      	str	r3, [r4, #32]
 80011e0:	6a23      	ldr	r3, [r4, #32]
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	e78e      	b.n	8001106 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7ff f81c 	bl	8000224 <HAL_GetTick>
 80011ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80011f0:	eba0 000a 	sub.w	r0, r0, sl
 80011f4:	4298      	cmp	r0, r3
 80011f6:	d98e      	bls.n	8001116 <HAL_RCC_OscConfig+0x2e6>
 80011f8:	e67f      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
 80011fa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001200:	e790      	b.n	8001124 <HAL_RCC_OscConfig+0x2f4>
 8001202:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001206:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001208:	e7cd      	b.n	80011a6 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800120a:	4c41      	ldr	r4, [pc, #260]	; (8001310 <HAL_RCC_OscConfig+0x4e0>)
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b08      	cmp	r3, #8
 8001214:	f43f ae45 	beq.w	8000ea2 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001218:	2a02      	cmp	r2, #2
 800121a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800121e:	d152      	bne.n	80012c6 <HAL_RCC_OscConfig+0x496>
 8001220:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800122c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001236:	f7fe fff5 	bl	8000224 <HAL_GetTick>
 800123a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800123e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001240:	2601      	movs	r6, #1
 8001242:	fa97 f3a7 	rbit	r3, r7
 8001246:	6822      	ldr	r2, [r4, #0]
 8001248:	fa97 f3a7 	rbit	r3, r7
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	fa06 f303 	lsl.w	r3, r6, r3
 8001258:	4213      	tst	r3, r2
 800125a:	d12d      	bne.n	80012b8 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800125c:	6862      	ldr	r2, [r4, #4]
 800125e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001260:	6a29      	ldr	r1, [r5, #32]
 8001262:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001266:	430b      	orrs	r3, r1
 8001268:	4313      	orrs	r3, r2
 800126a:	6063      	str	r3, [r4, #4]
 800126c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001270:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800127c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001286:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001288:	f7fe ffcc 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800128c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800128e:	4607      	mov	r7, r0
 8001290:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	fa95 f3a5 	rbit	r3, r5
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	fa06 f303 	lsl.w	r3, r6, r3
 80012a6:	4213      	tst	r3, r2
 80012a8:	f47f add8 	bne.w	8000e5c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ac:	f7fe ffba 	bl	8000224 <HAL_GetTick>
 80012b0:	1bc0      	subs	r0, r0, r7
 80012b2:	2802      	cmp	r0, #2
 80012b4:	d9ec      	bls.n	8001290 <HAL_RCC_OscConfig+0x460>
 80012b6:	e620      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7fe ffb4 	bl	8000224 <HAL_GetTick>
 80012bc:	eba0 0008 	sub.w	r0, r0, r8
 80012c0:	2802      	cmp	r0, #2
 80012c2:	d9be      	bls.n	8001242 <HAL_RCC_OscConfig+0x412>
 80012c4:	e619      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
 80012c6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012dc:	f7fe ffa2 	bl	8000224 <HAL_GetTick>
 80012e0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80012e4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e6:	2601      	movs	r6, #1
 80012e8:	fa95 f3a5 	rbit	r3, r5
 80012ec:	6822      	ldr	r2, [r4, #0]
 80012ee:	fa95 f3a5 	rbit	r3, r5
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	fa06 f303 	lsl.w	r3, r6, r3
 80012fe:	4213      	tst	r3, r2
 8001300:	f43f adac 	beq.w	8000e5c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001304:	f7fe ff8e 	bl	8000224 <HAL_GetTick>
 8001308:	1bc0      	subs	r0, r0, r7
 800130a:	2802      	cmp	r0, #2
 800130c:	d9ec      	bls.n	80012e8 <HAL_RCC_OscConfig+0x4b8>
 800130e:	e5f4      	b.n	8000efa <HAL_RCC_OscConfig+0xca>
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001314:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001316:	4c13      	ldr	r4, [pc, #76]	; (8001364 <HAL_RCC_GetSysClockFreq+0x50>)
 8001318:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800131a:	f001 030c 	and.w	r3, r1, #12
 800131e:	2b08      	cmp	r3, #8
 8001320:	d11e      	bne.n	8001360 <HAL_RCC_GetSysClockFreq+0x4c>
 8001322:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001326:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800132a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <HAL_RCC_GetSysClockFreq+0x54>)
 8001338:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800133a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800133c:	220f      	movs	r2, #15
 800133e:	fa92 f2a2 	rbit	r2, r2
 8001342:	fab2 f282 	clz	r2, r2
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	40d3      	lsrs	r3, r2
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_RCC_GetSysClockFreq+0x58>)
 800134e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001350:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001352:	bf4a      	itet	mi
 8001354:	4b06      	ldrmi	r3, [pc, #24]	; (8001370 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001356:	4b07      	ldrpl	r3, [pc, #28]	; (8001374 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001358:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800135c:	4358      	muls	r0, r3
 800135e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001362:	bd10      	pop	{r4, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	08002ff8 	.word	0x08002ff8
 800136c:	08003008 	.word	0x08003008
 8001370:	007a1200 	.word	0x007a1200
 8001374:	003d0900 	.word	0x003d0900

08001378 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001378:	4a5c      	ldr	r2, [pc, #368]	; (80014ec <HAL_RCC_ClockConfig+0x174>)
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	428b      	cmp	r3, r1
{
 8001382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001386:	4606      	mov	r6, r0
 8001388:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800138a:	d330      	bcc.n	80013ee <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800138c:	6832      	ldr	r2, [r6, #0]
 800138e:	0791      	lsls	r1, r2, #30
 8001390:	d43a      	bmi.n	8001408 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001392:	07d2      	lsls	r2, r2, #31
 8001394:	d440      	bmi.n	8001418 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001396:	4a55      	ldr	r2, [pc, #340]	; (80014ec <HAL_RCC_ClockConfig+0x174>)
 8001398:	6813      	ldr	r3, [r2, #0]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	429d      	cmp	r5, r3
 80013a0:	f0c0 8092 	bcc.w	80014c8 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	6832      	ldr	r2, [r6, #0]
 80013a6:	4c52      	ldr	r4, [pc, #328]	; (80014f0 <HAL_RCC_ClockConfig+0x178>)
 80013a8:	f012 0f04 	tst.w	r2, #4
 80013ac:	f040 8097 	bne.w	80014de <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b0:	0713      	lsls	r3, r2, #28
 80013b2:	d506      	bpl.n	80013c2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013b4:	6863      	ldr	r3, [r4, #4]
 80013b6:	6932      	ldr	r2, [r6, #16]
 80013b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013c0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013c2:	f7ff ffa7 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	22f0      	movs	r2, #240	; 0xf0
 80013ca:	fa92 f2a2 	rbit	r2, r2
 80013ce:	fab2 f282 	clz	r2, r2
 80013d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013d6:	40d3      	lsrs	r3, r2
 80013d8:	4a46      	ldr	r2, [pc, #280]	; (80014f4 <HAL_RCC_ClockConfig+0x17c>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	40d8      	lsrs	r0, r3
 80013de:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <HAL_RCC_ClockConfig+0x180>)
 80013e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7fe fef0 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80013e8:	2000      	movs	r0, #0
}
 80013ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	6813      	ldr	r3, [r2, #0]
 80013f0:	f023 0307 	bic.w	r3, r3, #7
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013f8:	6813      	ldr	r3, [r2, #0]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	4299      	cmp	r1, r3
 8001400:	d0c4      	beq.n	800138c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001402:	2001      	movs	r0, #1
 8001404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001408:	4939      	ldr	r1, [pc, #228]	; (80014f0 <HAL_RCC_ClockConfig+0x178>)
 800140a:	68b0      	ldr	r0, [r6, #8]
 800140c:	684b      	ldr	r3, [r1, #4]
 800140e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001412:	4303      	orrs	r3, r0
 8001414:	604b      	str	r3, [r1, #4]
 8001416:	e7bc      	b.n	8001392 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001418:	6872      	ldr	r2, [r6, #4]
 800141a:	4c35      	ldr	r4, [pc, #212]	; (80014f0 <HAL_RCC_ClockConfig+0x178>)
 800141c:	2a01      	cmp	r2, #1
 800141e:	d128      	bne.n	8001472 <HAL_RCC_ClockConfig+0xfa>
 8001420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001424:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001428:	6821      	ldr	r1, [r4, #0]
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	d0e1      	beq.n	8001402 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143e:	6863      	ldr	r3, [r4, #4]
 8001440:	f023 0303 	bic.w	r3, r3, #3
 8001444:	431a      	orrs	r2, r3
 8001446:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001448:	f7fe feec 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144c:	6873      	ldr	r3, [r6, #4]
 800144e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001450:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001452:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001456:	d11f      	bne.n	8001498 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001458:	6863      	ldr	r3, [r4, #4]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d099      	beq.n	8001396 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001462:	f7fe fedf 	bl	8000224 <HAL_GetTick>
 8001466:	1bc0      	subs	r0, r0, r7
 8001468:	4540      	cmp	r0, r8
 800146a:	d9f5      	bls.n	8001458 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 800146c:	2003      	movs	r0, #3
 800146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001472:	2a02      	cmp	r2, #2
 8001474:	bf0c      	ite	eq
 8001476:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800147a:	2302      	movne	r3, #2
 800147c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	6820      	ldr	r0, [r4, #0]
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	4203      	tst	r3, r0
 8001496:	e7d1      	b.n	800143c <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001498:	2b02      	cmp	r3, #2
 800149a:	d110      	bne.n	80014be <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800149c:	6863      	ldr	r3, [r4, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	f43f af77 	beq.w	8001396 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a8:	f7fe febc 	bl	8000224 <HAL_GetTick>
 80014ac:	1bc0      	subs	r0, r0, r7
 80014ae:	4540      	cmp	r0, r8
 80014b0:	d9f4      	bls.n	800149c <HAL_RCC_ClockConfig+0x124>
 80014b2:	e7db      	b.n	800146c <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b4:	f7fe feb6 	bl	8000224 <HAL_GetTick>
 80014b8:	1bc0      	subs	r0, r0, r7
 80014ba:	4540      	cmp	r0, r8
 80014bc:	d8d6      	bhi.n	800146c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014be:	6863      	ldr	r3, [r4, #4]
 80014c0:	f013 0f0c 	tst.w	r3, #12
 80014c4:	d1f6      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x13c>
 80014c6:	e766      	b.n	8001396 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	f023 0307 	bic.w	r3, r3, #7
 80014ce:	432b      	orrs	r3, r5
 80014d0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	429d      	cmp	r5, r3
 80014da:	d192      	bne.n	8001402 <HAL_RCC_ClockConfig+0x8a>
 80014dc:	e762      	b.n	80013a4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014de:	6863      	ldr	r3, [r4, #4]
 80014e0:	68f1      	ldr	r1, [r6, #12]
 80014e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014e6:	430b      	orrs	r3, r1
 80014e8:	6063      	str	r3, [r4, #4]
 80014ea:	e761      	b.n	80013b0 <HAL_RCC_ClockConfig+0x38>
 80014ec:	40022000 	.word	0x40022000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	0800302c 	.word	0x0800302c
 80014f8:	20000000 	.word	0x20000000

080014fc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014fc:	4b01      	ldr	r3, [pc, #4]	; (8001504 <HAL_RCC_GetHCLKFreq+0x8>)
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000000 	.word	0x20000000

08001508 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	fa92 f2a2 	rbit	r2, r2
 8001514:	fab2 f282 	clz	r2, r2
 8001518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800151c:	40d3      	lsrs	r3, r2
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001524:	6810      	ldr	r0, [r2, #0]
}    
 8001526:	40d8      	lsrs	r0, r3
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	0800303c 	.word	0x0800303c
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_RCC_GetPCLK2Freq+0x24>)
 800153a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	fa92 f2a2 	rbit	r2, r2
 8001544:	fab2 f282 	clz	r2, r2
 8001548:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800154c:	40d3      	lsrs	r3, r2
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001554:	6810      	ldr	r0, [r2, #0]
} 
 8001556:	40d8      	lsrs	r0, r3
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	0800303c 	.word	0x0800303c
 8001564:	20000000 	.word	0x20000000

08001568 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001568:	6803      	ldr	r3, [r0, #0]
{
 800156a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800156e:	03dc      	lsls	r4, r3, #15
{
 8001570:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001572:	d520      	bpl.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001574:	4c55      	ldr	r4, [pc, #340]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001576:	69e3      	ldr	r3, [r4, #28]
 8001578:	00d8      	lsls	r0, r3, #3
 800157a:	d44d      	bmi.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	69e3      	ldr	r3, [r4, #28]
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	61e3      	str	r3, [r4, #28]
 8001584:	69e3      	ldr	r3, [r4, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800158e:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4f4f      	ldr	r7, [pc, #316]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	05d9      	lsls	r1, r3, #23
 8001596:	d541      	bpl.n	800161c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001598:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800159a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800159e:	d151      	bne.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80015a0:	6a23      	ldr	r3, [r4, #32]
 80015a2:	686a      	ldr	r2, [r5, #4]
 80015a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015a8:	4313      	orrs	r3, r2
 80015aa:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ac:	b11e      	cbz	r6, 80015b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ae:	69e3      	ldr	r3, [r4, #28]
 80015b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015b6:	6828      	ldr	r0, [r5, #0]
 80015b8:	07c4      	lsls	r4, r0, #31
 80015ba:	d506      	bpl.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015bc:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015be:	68a9      	ldr	r1, [r5, #8]
 80015c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015c2:	f023 0303 	bic.w	r3, r3, #3
 80015c6:	430b      	orrs	r3, r1
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015ca:	0681      	lsls	r1, r0, #26
 80015cc:	d506      	bpl.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015ce:	4a3f      	ldr	r2, [pc, #252]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015d0:	68e9      	ldr	r1, [r5, #12]
 80015d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015d4:	f023 0310 	bic.w	r3, r3, #16
 80015d8:	430b      	orrs	r3, r1
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80015dc:	0602      	lsls	r2, r0, #24
 80015de:	d506      	bpl.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80015e0:	4a3a      	ldr	r2, [pc, #232]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015e2:	6929      	ldr	r1, [r5, #16]
 80015e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015e6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80015ea:	430b      	orrs	r3, r1
 80015ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80015ee:	04c3      	lsls	r3, r0, #19
 80015f0:	d506      	bpl.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80015f2:	4a36      	ldr	r2, [pc, #216]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015f4:	6969      	ldr	r1, [r5, #20]
 80015f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001600:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8001604:	d01b      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001606:	4a31      	ldr	r2, [pc, #196]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001608:	69a9      	ldr	r1, [r5, #24]
 800160a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800160c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001610:	430b      	orrs	r3, r1
 8001612:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001614:	2000      	movs	r0, #0
 8001616:	e012      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8001618:	2600      	movs	r6, #0
 800161a:	e7b9      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001624:	f7fe fdfe 	bl	8000224 <HAL_GetTick>
 8001628:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	05da      	lsls	r2, r3, #23
 800162e:	d4b3      	bmi.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001630:	f7fe fdf8 	bl	8000224 <HAL_GetTick>
 8001634:	eba0 0008 	sub.w	r0, r0, r8
 8001638:	2864      	cmp	r0, #100	; 0x64
 800163a:	d9f6      	bls.n	800162a <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 800163c:	2003      	movs	r0, #3
}
 800163e:	b002      	add	sp, #8
 8001640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001644:	686a      	ldr	r2, [r5, #4]
 8001646:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800164a:	4293      	cmp	r3, r2
 800164c:	d0a8      	beq.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800164e:	6a21      	ldr	r1, [r4, #32]
 8001650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001654:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001658:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800165c:	f8df e074 	ldr.w	lr, [pc, #116]	; 80016d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001660:	fab2 f282 	clz	r2, r2
 8001664:	4472      	add	r2, lr
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	2701      	movs	r7, #1
 800166a:	6017      	str	r7, [r2, #0]
 800166c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	4473      	add	r3, lr
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800167c:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 800167e:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001680:	d58e      	bpl.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001682:	f7fe fdcf 	bl	8000224 <HAL_GetTick>
 8001686:	f04f 0802 	mov.w	r8, #2
 800168a:	4682      	mov	sl, r0
 800168c:	46c1      	mov	r9, r8
 800168e:	fa98 f3a8 	rbit	r3, r8
 8001692:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	b1a3      	cbz	r3, 80016c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001698:	6a22      	ldr	r2, [r4, #32]
 800169a:	fa99 f3a9 	rbit	r3, r9
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	fa07 f303 	lsl.w	r3, r7, r3
 80016aa:	4213      	tst	r3, r2
 80016ac:	f47f af78 	bne.w	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7fe fdb8 	bl	8000224 <HAL_GetTick>
 80016b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80016b8:	eba0 000a 	sub.w	r0, r0, sl
 80016bc:	4298      	cmp	r0, r3
 80016be:	d9e6      	bls.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x126>
 80016c0:	e7bc      	b.n	800163c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80016c2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016c8:	e7e7      	b.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x132>
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
 80016d4:	10908100 	.word	0x10908100

080016d8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80016ea:	2000      	movs	r0, #0
 80016ec:	4770      	bx	lr

080016ee <HAL_TIM_OC_DelayElapsedCallback>:
 80016ee:	4770      	bx	lr

080016f0 <HAL_TIM_IC_CaptureCallback>:
 80016f0:	4770      	bx	lr

080016f2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80016f2:	4770      	bx	lr

080016f4 <HAL_TIM_TriggerCallback>:
 80016f4:	4770      	bx	lr

080016f6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016f6:	6803      	ldr	r3, [r0, #0]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	0791      	lsls	r1, r2, #30
{
 80016fc:	b510      	push	{r4, lr}
 80016fe:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001700:	d50f      	bpl.n	8001722 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	0792      	lsls	r2, r2, #30
 8001706:	d50c      	bpl.n	8001722 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001708:	f06f 0202 	mvn.w	r2, #2
 800170c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800170e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001710:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001712:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001714:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001716:	f000 8085 	beq.w	8001824 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800171a:	f7ff ffe9 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171e:	2300      	movs	r3, #0
 8001720:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	0752      	lsls	r2, r2, #29
 8001728:	d510      	bpl.n	800174c <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	0750      	lsls	r0, r2, #29
 800172e:	d50d      	bpl.n	800174c <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001730:	f06f 0204 	mvn.w	r2, #4
 8001734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001736:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001738:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800173a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800173e:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001740:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001742:	d075      	beq.n	8001830 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001744:	f7ff ffd4 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001748:	2300      	movs	r3, #0
 800174a:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	0711      	lsls	r1, r2, #28
 8001752:	d50f      	bpl.n	8001774 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	0712      	lsls	r2, r2, #28
 8001758:	d50c      	bpl.n	8001774 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800175a:	f06f 0208 	mvn.w	r2, #8
 800175e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001760:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001762:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001764:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001766:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001768:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800176a:	d067      	beq.n	800183c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800176c:	f7ff ffc0 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001770:	2300      	movs	r3, #0
 8001772:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	06d0      	lsls	r0, r2, #27
 800177a:	d510      	bpl.n	800179e <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	06d1      	lsls	r1, r2, #27
 8001780:	d50d      	bpl.n	800179e <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001782:	f06f 0210 	mvn.w	r2, #16
 8001786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001788:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800178a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800178c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001790:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001792:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001794:	d058      	beq.n	8001848 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001796:	f7ff ffab 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179a:	2300      	movs	r3, #0
 800179c:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	07d2      	lsls	r2, r2, #31
 80017a4:	d508      	bpl.n	80017b8 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	07d0      	lsls	r0, r2, #31
 80017aa:	d505      	bpl.n	80017b8 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80017ac:	f06f 0201 	mvn.w	r2, #1
 80017b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80017b2:	4620      	mov	r0, r4
 80017b4:	f001 f900 	bl	80029b8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	0611      	lsls	r1, r2, #24
 80017be:	d508      	bpl.n	80017d2 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	0612      	lsls	r2, r2, #24
 80017c4:	d505      	bpl.n	80017d2 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80017c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80017cc:	4620      	mov	r0, r4
 80017ce:	f000 f98a 	bl	8001ae6 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	05d0      	lsls	r0, r2, #23
 80017d8:	d508      	bpl.n	80017ec <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	0611      	lsls	r1, r2, #24
 80017de:	d505      	bpl.n	80017ec <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80017e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80017e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80017e6:	4620      	mov	r0, r4
 80017e8:	f000 f97e 	bl	8001ae8 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	0652      	lsls	r2, r2, #25
 80017f2:	d508      	bpl.n	8001806 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	0650      	lsls	r0, r2, #25
 80017f8:	d505      	bpl.n	8001806 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80017fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff ff77 	bl	80016f4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	0691      	lsls	r1, r2, #26
 800180c:	d522      	bpl.n	8001854 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	0692      	lsls	r2, r2, #26
 8001812:	d51f      	bpl.n	8001854 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001814:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001818:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800181a:	611a      	str	r2, [r3, #16]
    }
  }
}
 800181c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001820:	f000 b960 	b.w	8001ae4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001824:	f7ff ff63 	bl	80016ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff ff62 	bl	80016f2 <HAL_TIM_PWM_PulseFinishedCallback>
 800182e:	e776      	b.n	800171e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001830:	f7ff ff5d 	bl	80016ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff ff5c 	bl	80016f2 <HAL_TIM_PWM_PulseFinishedCallback>
 800183a:	e785      	b.n	8001748 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183c:	f7ff ff57 	bl	80016ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff ff56 	bl	80016f2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001846:	e793      	b.n	8001770 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001848:	f7ff ff51 	bl	80016ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff ff50 	bl	80016f2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001852:	e7a2      	b.n	800179a <HAL_TIM_IRQHandler+0xa4>
 8001854:	bd10      	pop	{r4, pc}
	...

08001858 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 800185a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800185c:	4290      	cmp	r0, r2
{
 800185e:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001860:	d005      	beq.n	800186e <TIM_Base_SetConfig+0x16>
 8001862:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001866:	d002      	beq.n	800186e <TIM_Base_SetConfig+0x16>
 8001868:	4c1e      	ldr	r4, [pc, #120]	; (80018e4 <TIM_Base_SetConfig+0x8c>)
 800186a:	42a0      	cmp	r0, r4
 800186c:	d10c      	bne.n	8001888 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800186e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001874:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001876:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800187a:	d010      	beq.n	800189e <TIM_Base_SetConfig+0x46>
 800187c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001880:	d00d      	beq.n	800189e <TIM_Base_SetConfig+0x46>
 8001882:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <TIM_Base_SetConfig+0x8c>)
 8001884:	4290      	cmp	r0, r2
 8001886:	d00a      	beq.n	800189e <TIM_Base_SetConfig+0x46>
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <TIM_Base_SetConfig+0x90>)
 800188a:	4290      	cmp	r0, r2
 800188c:	d007      	beq.n	800189e <TIM_Base_SetConfig+0x46>
 800188e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001892:	4290      	cmp	r0, r2
 8001894:	d003      	beq.n	800189e <TIM_Base_SetConfig+0x46>
 8001896:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800189a:	4290      	cmp	r0, r2
 800189c:	d103      	bne.n	80018a6 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800189e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80018a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018a4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018a6:	694a      	ldr	r2, [r1, #20]
 80018a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80018ae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018b0:	688b      	ldr	r3, [r1, #8]
 80018b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80018b4:	680b      	ldr	r3, [r1, #0]
 80018b6:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <TIM_Base_SetConfig+0x88>)
 80018ba:	4298      	cmp	r0, r3
 80018bc:	d00b      	beq.n	80018d6 <TIM_Base_SetConfig+0x7e>
 80018be:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80018c2:	4298      	cmp	r0, r3
 80018c4:	d007      	beq.n	80018d6 <TIM_Base_SetConfig+0x7e>
 80018c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d003      	beq.n	80018d6 <TIM_Base_SetConfig+0x7e>
 80018ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d2:	4298      	cmp	r0, r3
 80018d4:	d101      	bne.n	80018da <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018d6:	690b      	ldr	r3, [r1, #16]
 80018d8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80018da:	2301      	movs	r3, #1
 80018dc:	6143      	str	r3, [r0, #20]
 80018de:	bd10      	pop	{r4, pc}
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40014000 	.word	0x40014000

080018ec <HAL_TIM_Base_Init>:
{ 
 80018ec:	b510      	push	{r4, lr}
  if(htim == NULL)
 80018ee:	4604      	mov	r4, r0
 80018f0:	b1a0      	cbz	r0, 800191c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80018f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018fa:	b91b      	cbnz	r3, 8001904 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80018fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001900:	f001 f9e8 	bl	8002cd4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001904:	2302      	movs	r3, #2
 8001906:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800190a:	6820      	ldr	r0, [r4, #0]
 800190c:	1d21      	adds	r1, r4, #4
 800190e:	f7ff ffa3 	bl	8001858 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001912:	2301      	movs	r3, #1
 8001914:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001918:	2000      	movs	r0, #0
 800191a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
}
 800191e:	bd10      	pop	{r4, pc}

08001920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001920:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001922:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001924:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001926:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800192a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800192e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001930:	6083      	str	r3, [r0, #8]
 8001932:	bd10      	pop	{r4, pc}

08001934 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001934:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001938:	2b01      	cmp	r3, #1
{
 800193a:	b570      	push	{r4, r5, r6, lr}
 800193c:	4604      	mov	r4, r0
 800193e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001942:	d01a      	beq.n	800197a <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001944:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001948:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800194a:	2301      	movs	r3, #1
 800194c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001950:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001952:	4b52      	ldr	r3, [pc, #328]	; (8001a9c <HAL_TIM_ConfigClockSource+0x168>)
 8001954:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001956:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001958:	680b      	ldr	r3, [r1, #0]
 800195a:	2b40      	cmp	r3, #64	; 0x40
 800195c:	d075      	beq.n	8001a4a <HAL_TIM_ConfigClockSource+0x116>
 800195e:	d818      	bhi.n	8001992 <HAL_TIM_ConfigClockSource+0x5e>
 8001960:	2b10      	cmp	r3, #16
 8001962:	f000 808f 	beq.w	8001a84 <HAL_TIM_ConfigClockSource+0x150>
 8001966:	d809      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x48>
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8085 	beq.w	8001a78 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 800196e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001970:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001972:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001976:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800197a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800197c:	2b20      	cmp	r3, #32
 800197e:	f000 8087 	beq.w	8001a90 <HAL_TIM_ConfigClockSource+0x15c>
 8001982:	2b30      	cmp	r3, #48	; 0x30
 8001984:	d1f3      	bne.n	800196e <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001986:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800198c:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001990:	e033      	b.n	80019fa <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001992:	2b70      	cmp	r3, #112	; 0x70
 8001994:	d033      	beq.n	80019fe <HAL_TIM_ConfigClockSource+0xca>
 8001996:	d81b      	bhi.n	80019d0 <HAL_TIM_ConfigClockSource+0x9c>
 8001998:	2b50      	cmp	r3, #80	; 0x50
 800199a:	d03f      	beq.n	8001a1c <HAL_TIM_ConfigClockSource+0xe8>
 800199c:	2b60      	cmp	r3, #96	; 0x60
 800199e:	d1e6      	bne.n	800196e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80019a0:	684d      	ldr	r5, [r1, #4]
 80019a2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019a4:	6a01      	ldr	r1, [r0, #32]
 80019a6:	f021 0110 	bic.w	r1, r1, #16
 80019aa:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019ac:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80019ae:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019b0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80019b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019bc:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80019c0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80019c2:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80019c4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019ca:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80019ce:	e014      	b.n	80019fa <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80019d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d4:	d00c      	beq.n	80019f0 <HAL_TIM_ConfigClockSource+0xbc>
 80019d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019da:	d1c8      	bne.n	800196e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80019dc:	68cb      	ldr	r3, [r1, #12]
 80019de:	684a      	ldr	r2, [r1, #4]
 80019e0:	6889      	ldr	r1, [r1, #8]
 80019e2:	f7ff ff9d 	bl	8001920 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019e6:	6822      	ldr	r2, [r4, #0]
 80019e8:	6893      	ldr	r3, [r2, #8]
 80019ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ee:	e013      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019f0:	6883      	ldr	r3, [r0, #8]
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f6:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80019fa:	6083      	str	r3, [r0, #8]
 80019fc:	e7b7      	b.n	800196e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80019fe:	68cb      	ldr	r3, [r1, #12]
 8001a00:	684a      	ldr	r2, [r1, #4]
 8001a02:	6889      	ldr	r1, [r1, #8]
 8001a04:	f7ff ff8c 	bl	8001920 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a08:	6822      	ldr	r2, [r4, #0]
 8001a0a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a18:	6093      	str	r3, [r2, #8]
    break;
 8001a1a:	e7a8      	b.n	800196e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001a1c:	684a      	ldr	r2, [r1, #4]
 8001a1e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a20:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a22:	6a05      	ldr	r5, [r0, #32]
 8001a24:	f025 0501 	bic.w	r5, r5, #1
 8001a28:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a2a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a2c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a34:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001a38:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001a3a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a3c:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001a3e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a44:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001a48:	e7d7      	b.n	80019fa <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001a4a:	684a      	ldr	r2, [r1, #4]
 8001a4c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a4e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a50:	6a05      	ldr	r5, [r0, #32]
 8001a52:	f025 0501 	bic.w	r5, r5, #1
 8001a56:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a58:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a5a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a62:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001a66:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001a68:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a6a:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001a6c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a72:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001a76:	e7c0      	b.n	80019fa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001a78:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a7e:	f043 0307 	orr.w	r3, r3, #7
 8001a82:	e7ba      	b.n	80019fa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001a84:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a8a:	f043 0317 	orr.w	r3, r3, #23
 8001a8e:	e7b4      	b.n	80019fa <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001a90:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a96:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001a9a:	e7ae      	b.n	80019fa <HAL_TIM_ConfigClockSource+0xc6>
 8001a9c:	fffe0088 	.word	0xfffe0088

08001aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001aa0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001aa4:	2b01      	cmp	r3, #1
{
 8001aa6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001aa8:	d018      	beq.n	8001adc <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001aaa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001aac:	4d0c      	ldr	r5, [pc, #48]	; (8001ae0 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001aae:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001ab0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ab2:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ab4:	bf02      	ittt	eq
 8001ab6:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ab8:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001abc:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001abe:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ac0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ac6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001ac8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001acc:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ace:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001ad0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001ad2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001ad4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001adc:	2002      	movs	r0, #2
} 
 8001ade:	bd30      	pop	{r4, r5, pc}
 8001ae0:	40012c00 	.word	0x40012c00

08001ae4 <HAL_TIMEx_CommutationCallback>:
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_TIMEx_BreakCallback>:
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ae8:	4770      	bx	lr

08001aea <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001aea:	6803      	ldr	r3, [r0, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001af2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001afc:	2320      	movs	r3, #32
 8001afe:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001b02:	4770      	bx	lr

08001b04 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001b04:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d13d      	bne.n	8001b88 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 8001b0c:	2900      	cmp	r1, #0
 8001b0e:	d039      	beq.n	8001b84 <HAL_UART_Receive_IT+0x80>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d037      	beq.n	8001b84 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8001b14:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d035      	beq.n	8001b88 <HAL_UART_Receive_IT+0x84>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8001b22:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8001b24:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8001b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8001b2a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001b2e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001b32:	d119      	bne.n	8001b68 <HAL_UART_Receive_IT+0x64>
 8001b34:	6903      	ldr	r3, [r0, #16]
 8001b36:	b9ab      	cbnz	r3, 8001b64 <HAL_UART_Receive_IT+0x60>
 8001b38:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001b3c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b40:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b42:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b44:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b46:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b4a:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8001b4c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b50:	6891      	ldr	r1, [r2, #8]
 8001b52:	f041 0101 	orr.w	r1, r1, #1
 8001b56:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001b58:	6811      	ldr	r1, [r2, #0]
 8001b5a:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001b5e:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001b60:	4618      	mov	r0, r3
 8001b62:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001b64:	23ff      	movs	r3, #255	; 0xff
 8001b66:	e7e9      	b.n	8001b3c <HAL_UART_Receive_IT+0x38>
 8001b68:	b923      	cbnz	r3, 8001b74 <HAL_UART_Receive_IT+0x70>
 8001b6a:	6903      	ldr	r3, [r0, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f9      	beq.n	8001b64 <HAL_UART_Receive_IT+0x60>
 8001b70:	237f      	movs	r3, #127	; 0x7f
 8001b72:	e7e3      	b.n	8001b3c <HAL_UART_Receive_IT+0x38>
 8001b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b78:	d1e2      	bne.n	8001b40 <HAL_UART_Receive_IT+0x3c>
 8001b7a:	6903      	ldr	r3, [r0, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f7      	beq.n	8001b70 <HAL_UART_Receive_IT+0x6c>
 8001b80:	233f      	movs	r3, #63	; 0x3f
 8001b82:	e7db      	b.n	8001b3c <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
 8001b86:	4770      	bx	lr
    return HAL_BUSY;
 8001b88:	2002      	movs	r0, #2
}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_UART_TxCpltCallback>:
 8001b8c:	4770      	bx	lr

08001b8e <HAL_UART_ErrorCallback>:
 8001b8e:	4770      	bx	lr

08001b90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001b90:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001b92:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001b9a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001b9e:	f7ff fff6 	bl	8001b8e <HAL_UART_ErrorCallback>
 8001ba2:	bd08      	pop	{r3, pc}

08001ba4 <UART_SetConfig>:
{
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ba8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001baa:	6921      	ldr	r1, [r4, #16]
 8001bac:	68a3      	ldr	r3, [r4, #8]
 8001bae:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001bb0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	6961      	ldr	r1, [r4, #20]
 8001bb6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001bb8:	4949      	ldr	r1, [pc, #292]	; (8001ce0 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bba:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001bbc:	4001      	ands	r1, r0
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc2:	686b      	ldr	r3, [r5, #4]
 8001bc4:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001bc6:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001bd0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001bd2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001bd4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001bd8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <UART_SetConfig+0x140>)
 8001be0:	429d      	cmp	r5, r3
 8001be2:	d112      	bne.n	8001c0a <UART_SetConfig+0x66>
 8001be4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001be8:	493f      	ldr	r1, [pc, #252]	; (8001ce8 <UART_SetConfig+0x144>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bf4:	5ccb      	ldrb	r3, [r1, r3]
 8001bf6:	d13b      	bne.n	8001c70 <UART_SetConfig+0xcc>
    switch (clocksource)
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d836      	bhi.n	8001c6a <UART_SetConfig+0xc6>
 8001bfc:	e8df f003 	tbb	[pc, r3]
 8001c00:	3524210f 	.word	0x3524210f
 8001c04:	3535352d 	.word	0x3535352d
 8001c08:	30          	.byte	0x30
 8001c09:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <UART_SetConfig+0x148>)
 8001c0c:	429d      	cmp	r5, r3
 8001c0e:	d003      	beq.n	8001c18 <UART_SetConfig+0x74>
 8001c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c14:	429d      	cmp	r5, r3
 8001c16:	d15e      	bne.n	8001cd6 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c1c:	d131      	bne.n	8001c82 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c1e:	f7ff fc73 	bl	8001508 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c22:	6861      	ldr	r1, [r4, #4]
 8001c24:	084a      	lsrs	r2, r1, #1
 8001c26:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c2e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c30:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001c32:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001c36:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c38:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60cb      	str	r3, [r1, #12]
 8001c40:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c42:	f7ff fc79 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
 8001c46:	e7ec      	b.n	8001c22 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c48:	6860      	ldr	r0, [r4, #4]
 8001c4a:	0843      	lsrs	r3, r0, #1
 8001c4c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001c50:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c54:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c58:	e7e9      	b.n	8001c2e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c5a:	f7ff fb5b 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 8001c5e:	e7e0      	b.n	8001c22 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c60:	6860      	ldr	r0, [r4, #4]
 8001c62:	0843      	lsrs	r3, r0, #1
 8001c64:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c68:	e7f4      	b.n	8001c54 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e7e0      	b.n	8001c32 <UART_SetConfig+0x8e>
    switch (clocksource)
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d833      	bhi.n	8001cdc <UART_SetConfig+0x138>
 8001c74:	e8df f003 	tbb	[pc, r3]
 8001c78:	321b1005 	.word	0x321b1005
 8001c7c:	32323227 	.word	0x32323227
 8001c80:	2a          	.byte	0x2a
 8001c81:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c82:	f7ff fc41 	bl	8001508 <HAL_RCC_GetPCLK1Freq>
 8001c86:	6863      	ldr	r3, [r4, #4]
 8001c88:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c90:	b280      	uxth	r0, r0
 8001c92:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c94:	2000      	movs	r0, #0
        break;
 8001c96:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c98:	f7ff fc4e 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c9c:	6863      	ldr	r3, [r4, #4]
 8001c9e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001ca2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <UART_SetConfig+0x140>)
 8001ca8:	b280      	uxth	r0, r0
 8001caa:	60d8      	str	r0, [r3, #12]
 8001cac:	e7f2      	b.n	8001c94 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001cae:	6862      	ldr	r2, [r4, #4]
 8001cb0:	0853      	lsrs	r3, r2, #1
 8001cb2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001cb6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001cba:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <UART_SetConfig+0x140>)
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	60d3      	str	r3, [r2, #12]
 8001cc4:	e7e6      	b.n	8001c94 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cc6:	f7ff fb25 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 8001cca:	e7e7      	b.n	8001c9c <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ccc:	6862      	ldr	r2, [r4, #4]
 8001cce:	0853      	lsrs	r3, r2, #1
 8001cd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cd4:	e7f1      	b.n	8001cba <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cd6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cda:	d0c6      	beq.n	8001c6a <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001cdc:	2001      	movs	r0, #1
  return ret;
 8001cde:	bd38      	pop	{r3, r4, r5, pc}
 8001ce0:	efff69f3 	.word	0xefff69f3
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	08003018 	.word	0x08003018
 8001cec:	40004400 	.word	0x40004400

08001cf0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001cf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cf2:	07da      	lsls	r2, r3, #31
{
 8001cf4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001cf6:	d506      	bpl.n	8001d06 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001cf8:	6801      	ldr	r1, [r0, #0]
 8001cfa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001cfc:	684a      	ldr	r2, [r1, #4]
 8001cfe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d02:	4322      	orrs	r2, r4
 8001d04:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d06:	079c      	lsls	r4, r3, #30
 8001d08:	d506      	bpl.n	8001d18 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d0a:	6801      	ldr	r1, [r0, #0]
 8001d0c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d0e:	684a      	ldr	r2, [r1, #4]
 8001d10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d14:	4322      	orrs	r2, r4
 8001d16:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d18:	0759      	lsls	r1, r3, #29
 8001d1a:	d506      	bpl.n	8001d2a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d1c:	6801      	ldr	r1, [r0, #0]
 8001d1e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d20:	684a      	ldr	r2, [r1, #4]
 8001d22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d26:	4322      	orrs	r2, r4
 8001d28:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d2a:	071a      	lsls	r2, r3, #28
 8001d2c:	d506      	bpl.n	8001d3c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d2e:	6801      	ldr	r1, [r0, #0]
 8001d30:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001d32:	684a      	ldr	r2, [r1, #4]
 8001d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d38:	4322      	orrs	r2, r4
 8001d3a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d3c:	06dc      	lsls	r4, r3, #27
 8001d3e:	d506      	bpl.n	8001d4e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d40:	6801      	ldr	r1, [r0, #0]
 8001d42:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001d44:	688a      	ldr	r2, [r1, #8]
 8001d46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d4e:	0699      	lsls	r1, r3, #26
 8001d50:	d506      	bpl.n	8001d60 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d52:	6801      	ldr	r1, [r0, #0]
 8001d54:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001d56:	688a      	ldr	r2, [r1, #8]
 8001d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d5c:	4322      	orrs	r2, r4
 8001d5e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d60:	065a      	lsls	r2, r3, #25
 8001d62:	d50f      	bpl.n	8001d84 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d64:	6801      	ldr	r1, [r0, #0]
 8001d66:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001d68:	684a      	ldr	r2, [r1, #4]
 8001d6a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d6e:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d70:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d74:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d76:	d105      	bne.n	8001d84 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d78:	684a      	ldr	r2, [r1, #4]
 8001d7a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d7c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001d80:	4322      	orrs	r2, r4
 8001d82:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	d506      	bpl.n	8001d96 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d88:	6802      	ldr	r2, [r0, #0]
 8001d8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d8c:	6853      	ldr	r3, [r2, #4]
 8001d8e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d92:	430b      	orrs	r3, r1
 8001d94:	6053      	str	r3, [r2, #4]
 8001d96:	bd10      	pop	{r4, pc}

08001d98 <UART_WaitOnFlagUntilTimeout>:
{
 8001d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d9c:	9d06      	ldr	r5, [sp, #24]
 8001d9e:	4604      	mov	r4, r0
 8001da0:	460f      	mov	r7, r1
 8001da2:	4616      	mov	r6, r2
 8001da4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001da6:	6821      	ldr	r1, [r4, #0]
 8001da8:	69ca      	ldr	r2, [r1, #28]
 8001daa:	ea37 0302 	bics.w	r3, r7, r2
 8001dae:	bf0c      	ite	eq
 8001db0:	2201      	moveq	r2, #1
 8001db2:	2200      	movne	r2, #0
 8001db4:	42b2      	cmp	r2, r6
 8001db6:	d002      	beq.n	8001dbe <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001db8:	2000      	movs	r0, #0
}
 8001dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001dbe:	1c6b      	adds	r3, r5, #1
 8001dc0:	d0f2      	beq.n	8001da8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dc2:	b99d      	cbnz	r5, 8001dec <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001dcc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001ddc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001de0:	2300      	movs	r3, #0
 8001de2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001de6:	2003      	movs	r0, #3
 8001de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dec:	f7fe fa1a 	bl	8000224 <HAL_GetTick>
 8001df0:	eba0 0008 	sub.w	r0, r0, r8
 8001df4:	4285      	cmp	r5, r0
 8001df6:	d2d6      	bcs.n	8001da6 <UART_WaitOnFlagUntilTimeout+0xe>
 8001df8:	e7e4      	b.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x2c>

08001dfa <HAL_UART_Transmit>:
{
 8001dfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dfe:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001e00:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e04:	2b20      	cmp	r3, #32
{
 8001e06:	4604      	mov	r4, r0
 8001e08:	460d      	mov	r5, r1
 8001e0a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001e0c:	d14c      	bne.n	8001ea8 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001e0e:	2900      	cmp	r1, #0
 8001e10:	d048      	beq.n	8001ea4 <HAL_UART_Transmit+0xaa>
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d046      	beq.n	8001ea4 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001e16:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d044      	beq.n	8001ea8 <HAL_UART_Transmit+0xae>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e28:	2321      	movs	r3, #33	; 0x21
 8001e2a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001e2e:	f7fe f9f9 	bl	8000224 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001e32:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001e36:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001e38:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001e3c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001e40:	b292      	uxth	r2, r2
 8001e42:	b962      	cbnz	r2, 8001e5e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e44:	9700      	str	r7, [sp, #0]
 8001e46:	4633      	mov	r3, r6
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff ffa4 	bl	8001d98 <UART_WaitOnFlagUntilTimeout>
 8001e50:	b998      	cbnz	r0, 8001e7a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001e52:	2320      	movs	r3, #32
 8001e54:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001e58:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001e5c:	e00e      	b.n	8001e7c <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001e5e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e62:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4633      	mov	r3, r6
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff ff90 	bl	8001d98 <UART_WaitOnFlagUntilTimeout>
 8001e78:	b118      	cbz	r0, 8001e82 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001e7a:	2003      	movs	r0, #3
}
 8001e7c:	b002      	add	sp, #8
 8001e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e82:	68a3      	ldr	r3, [r4, #8]
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8a:	d107      	bne.n	8001e9c <HAL_UART_Transmit+0xa2>
 8001e8c:	6923      	ldr	r3, [r4, #16]
 8001e8e:	b92b      	cbnz	r3, 8001e9c <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e90:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e98:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001e9a:	e7cf      	b.n	8001e3c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001e9c:	782b      	ldrb	r3, [r5, #0]
 8001e9e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001ea0:	3501      	adds	r5, #1
 8001ea2:	e7cb      	b.n	8001e3c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	e7e9      	b.n	8001e7c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	e7e7      	b.n	8001e7c <HAL_UART_Transmit+0x82>

08001eac <UART_CheckIdleState>:
{
 8001eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001eae:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb0:	2600      	movs	r6, #0
 8001eb2:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001eb4:	f7fe f9b6 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001ebe:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ec0:	d417      	bmi.n	8001ef2 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	075b      	lsls	r3, r3, #29
 8001ec8:	d50a      	bpl.n	8001ee0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001eca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff ff5d 	bl	8001d98 <UART_WaitOnFlagUntilTimeout>
 8001ede:	b9a0      	cbnz	r0, 8001f0a <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001ee0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001ee2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001ee4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001ee8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001eec:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001ef0:	e00c      	b.n	8001f0c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ef2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4632      	mov	r2, r6
 8001efa:	4603      	mov	r3, r0
 8001efc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f00:	4620      	mov	r0, r4
 8001f02:	f7ff ff49 	bl	8001d98 <UART_WaitOnFlagUntilTimeout>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d0db      	beq.n	8001ec2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001f0a:	2003      	movs	r0, #3
}
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}

08001f10 <HAL_UART_Init>:
{
 8001f10:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001f12:	4604      	mov	r4, r0
 8001f14:	b360      	cbz	r0, 8001f70 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f16:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f1e:	b91b      	cbnz	r3, 8001f28 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f20:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001f24:	f000 fef2 	bl	8002d0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f28:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f2a:	2324      	movs	r3, #36	; 0x24
 8001f2c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7ff fe33 	bl	8001ba4 <UART_SetConfig>
 8001f3e:	2801      	cmp	r0, #1
 8001f40:	d016      	beq.n	8001f70 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f44:	b113      	cbz	r3, 8001f4c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff fed2 	bl	8001cf0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f5c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001f64:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001f66:	601a      	str	r2, [r3, #0]
}
 8001f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001f6c:	f7ff bf9e 	b.w	8001eac <UART_CheckIdleState>
}
 8001f70:	2001      	movs	r0, #1
 8001f72:	bd10      	pop	{r4, pc}

08001f74 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f74:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001f78:	2b21      	cmp	r3, #33	; 0x21
 8001f7a:	d127      	bne.n	8001fcc <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8001f7c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001f80:	6802      	ldr	r2, [r0, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b94b      	cbnz	r3, 8001f9a <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001f86:	6811      	ldr	r1, [r2, #0]
 8001f88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001f8c:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f8e:	6811      	ldr	r1, [r2, #0]
 8001f90:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001f94:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8001f96:	2000      	movs	r0, #0
 8001f98:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f9a:	6883      	ldr	r3, [r0, #8]
 8001f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001fa2:	d10e      	bne.n	8001fc2 <UART_Transmit_IT+0x4e>
 8001fa4:	6901      	ldr	r1, [r0, #16]
 8001fa6:	b961      	cbnz	r1, 8001fc2 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001fa8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001fac:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001fb0:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001fb2:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001fb4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8001fc0:	e7e9      	b.n	8001f96 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	8513      	strh	r3, [r2, #40]	; 0x28
 8001fca:	e7f3      	b.n	8001fb4 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8001fcc:	2002      	movs	r0, #2
  }
}
 8001fce:	4770      	bx	lr

08001fd0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fd0:	6801      	ldr	r1, [r0, #0]
{
 8001fd2:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fd4:	680b      	ldr	r3, [r1, #0]
 8001fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fda:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8001fe2:	f7ff fdd3 	bl	8001b8c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	bd08      	pop	{r3, pc}

08001fea <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fea:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001fee:	2b22      	cmp	r3, #34	; 0x22
{
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ff4:	d129      	bne.n	800204a <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001ff6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff8:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8001ffa:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002002:	ea02 0201 	and.w	r2, r2, r1
 8002006:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002008:	d11b      	bne.n	8002042 <UART_Receive_IT+0x58>
 800200a:	6901      	ldr	r1, [r0, #16]
 800200c:	b9c9      	cbnz	r1, 8002042 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800200e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8002012:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002014:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002018:	3c01      	subs	r4, #1
 800201a:	b2a4      	uxth	r4, r4
 800201c:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8002020:	b96c      	cbnz	r4, 800203e <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002022:	6803      	ldr	r3, [r0, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800202a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002034:	2320      	movs	r3, #32
 8002036:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800203a:	f000 f98d 	bl	8002358 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 800203e:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002040:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002042:	1c59      	adds	r1, r3, #1
 8002044:	6541      	str	r1, [r0, #84]	; 0x54
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e7e4      	b.n	8002014 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	f042 0208 	orr.w	r2, r2, #8
 8002050:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002052:	2002      	movs	r0, #2
 8002054:	bd10      	pop	{r4, pc}
	...

08002058 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002058:	6802      	ldr	r2, [r0, #0]
 800205a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800205c:	6811      	ldr	r1, [r2, #0]
{
 800205e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002060:	f013 050f 	ands.w	r5, r3, #15
{
 8002064:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002066:	d107      	bne.n	8002078 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002068:	069e      	lsls	r6, r3, #26
 800206a:	d505      	bpl.n	8002078 <HAL_UART_IRQHandler+0x20>
 800206c:	068e      	lsls	r6, r1, #26
 800206e:	d503      	bpl.n	8002078 <HAL_UART_IRQHandler+0x20>
}
 8002070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002074:	f7ff bfb9 	b.w	8001fea <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002078:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800207a:	2d00      	cmp	r5, #0
 800207c:	d05c      	beq.n	8002138 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800207e:	f010 0501 	ands.w	r5, r0, #1
 8002082:	d102      	bne.n	800208a <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002084:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002088:	d056      	beq.n	8002138 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800208a:	07d8      	lsls	r0, r3, #31
 800208c:	d507      	bpl.n	800209e <HAL_UART_IRQHandler+0x46>
 800208e:	05ce      	lsls	r6, r1, #23
 8002090:	d505      	bpl.n	800209e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002092:	2001      	movs	r0, #1
 8002094:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002096:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002098:	f040 0001 	orr.w	r0, r0, #1
 800209c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800209e:	0798      	lsls	r0, r3, #30
 80020a0:	d506      	bpl.n	80020b0 <HAL_UART_IRQHandler+0x58>
 80020a2:	b12d      	cbz	r5, 80020b0 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80020a4:	2002      	movs	r0, #2
 80020a6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020a8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80020aa:	f040 0004 	orr.w	r0, r0, #4
 80020ae:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020b0:	075e      	lsls	r6, r3, #29
 80020b2:	d506      	bpl.n	80020c2 <HAL_UART_IRQHandler+0x6a>
 80020b4:	b12d      	cbz	r5, 80020c2 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80020b6:	2004      	movs	r0, #4
 80020b8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80020bc:	f040 0002 	orr.w	r0, r0, #2
 80020c0:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80020c2:	0718      	lsls	r0, r3, #28
 80020c4:	d507      	bpl.n	80020d6 <HAL_UART_IRQHandler+0x7e>
 80020c6:	068e      	lsls	r6, r1, #26
 80020c8:	d400      	bmi.n	80020cc <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ca:	b125      	cbz	r5, 80020d6 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80020cc:	2008      	movs	r0, #8
 80020ce:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80020d2:	4302      	orrs	r2, r0
 80020d4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020d6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80020d8:	2a00      	cmp	r2, #0
 80020da:	d050      	beq.n	800217e <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020dc:	0698      	lsls	r0, r3, #26
 80020de:	d504      	bpl.n	80020ea <HAL_UART_IRQHandler+0x92>
 80020e0:	068a      	lsls	r2, r1, #26
 80020e2:	d502      	bpl.n	80020ea <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff ff80 	bl	8001fea <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80020ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80020ec:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 80020ee:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80020f0:	d404      	bmi.n	80020fc <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80020f6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80020fa:	d019      	beq.n	8002130 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80020fc:	f7ff fcf5 	bl	8001aea <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	0656      	lsls	r6, r2, #25
 8002106:	d50f      	bpl.n	8002128 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002108:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800210a:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800210c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002110:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002112:	b148      	cbz	r0, 8002128 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_UART_IRQHandler+0x128>)
 8002116:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002118:	f7fe fda5 	bl	8000c66 <HAL_DMA_Abort_IT>
 800211c:	b378      	cbz	r0, 800217e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800211e:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8002120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002124:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002126:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002128:	4620      	mov	r0, r4
 800212a:	f7ff fd30 	bl	8001b8e <HAL_UART_ErrorCallback>
 800212e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002130:	f7ff fd2d 	bl	8001b8e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002136:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002138:	02dd      	lsls	r5, r3, #11
 800213a:	d50e      	bpl.n	800215a <HAL_UART_IRQHandler+0x102>
 800213c:	0246      	lsls	r6, r0, #9
 800213e:	d50c      	bpl.n	800215a <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002140:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002144:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002146:	2320      	movs	r3, #32
 8002148:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 800214c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800214e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8002152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002156:	f000 b815 	b.w	8002184 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800215a:	061d      	lsls	r5, r3, #24
 800215c:	d506      	bpl.n	800216c <HAL_UART_IRQHandler+0x114>
 800215e:	0608      	lsls	r0, r1, #24
 8002160:	d504      	bpl.n	800216c <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002162:	4620      	mov	r0, r4
}
 8002164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002168:	f7ff bf04 	b.w	8001f74 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800216c:	065a      	lsls	r2, r3, #25
 800216e:	d506      	bpl.n	800217e <HAL_UART_IRQHandler+0x126>
 8002170:	064b      	lsls	r3, r1, #25
 8002172:	d504      	bpl.n	800217e <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002174:	4620      	mov	r0, r4
}
 8002176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 800217a:	f7ff bf29 	b.w	8001fd0 <UART_EndTransmit_IT>
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	08001b91 	.word	0x08001b91

08002184 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002184:	4770      	bx	lr
	...

08002188 <uart_comms>:
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void uart_comms(){
 8002188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 800218c:	4c64      	ldr	r4, [pc, #400]	; (8002320 <uart_comms+0x198>)
 800218e:	4865      	ldr	r0, [pc, #404]	; (8002324 <uart_comms+0x19c>)
	rx_flag = 0;
	uart_command[uart_counter] = rx_buffer;
 8002190:	4d65      	ldr	r5, [pc, #404]	; (8002328 <uart_comms+0x1a0>)
 8002192:	4e66      	ldr	r6, [pc, #408]	; (800232c <uart_comms+0x1a4>)
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8002194:	2201      	movs	r2, #1
 8002196:	4621      	mov	r1, r4
 8002198:	f7ff fcb4 	bl	8001b04 <HAL_UART_Receive_IT>
	rx_flag = 0;
 800219c:	4b64      	ldr	r3, [pc, #400]	; (8002330 <uart_comms+0x1a8>)
	uart_command[uart_counter] = rx_buffer;
 800219e:	7821      	ldrb	r1, [r4, #0]
	rx_flag = 0;
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 80021a4:	782b      	ldrb	r3, [r5, #0]
 80021a6:	6832      	ldr	r2, [r6, #0]
 80021a8:	54d1      	strb	r1, [r2, r3]
	if(uart_command[0] == '$'){
 80021aa:	6833      	ldr	r3, [r6, #0]
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	2a24      	cmp	r2, #36	; 0x24

	uart_counter += 1;
 80021b0:	bf02      	ittt	eq
 80021b2:	782a      	ldrbeq	r2, [r5, #0]
 80021b4:	3201      	addeq	r2, #1
 80021b6:	702a      	strbeq	r2, [r5, #0]
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	2a24      	cmp	r2, #36	; 0x24
 80021bc:	f040 80ab 	bne.w	8002316 <uart_comms+0x18e>
 80021c0:	782a      	ldrb	r2, [r5, #0]
 80021c2:	1899      	adds	r1, r3, r2
 80021c4:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80021c8:	280a      	cmp	r0, #10
 80021ca:	f040 80a4 	bne.w	8002316 <uart_comms+0x18e>
 80021ce:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 80021d2:	290d      	cmp	r1, #13
 80021d4:	f040 809f 	bne.w	8002316 <uart_comms+0x18e>
 80021d8:	2a02      	cmp	r2, #2
 80021da:	f240 809c 	bls.w	8002316 <uart_comms+0x18e>

		switch(uart_command[1]){
 80021de:	785a      	ldrb	r2, [r3, #1]
 80021e0:	4c54      	ldr	r4, [pc, #336]	; (8002334 <uart_comms+0x1ac>)
 80021e2:	3a41      	subs	r2, #65	; 0x41
 80021e4:	2a09      	cmp	r2, #9
 80021e6:	d839      	bhi.n	800225c <uart_comms+0xd4>
 80021e8:	e8df f002 	tbb	[pc, r2]
 80021ec:	49234905 	.word	0x49234905
 80021f0:	8b6e5449 	.word	0x8b6e5449
 80021f4:	508f      	.short	0x508f
			case  'A': // Request Serial number

				memcpy(studentnumber, uart_command, 2 );
 80021f6:	4a50      	ldr	r2, [pc, #320]	; (8002338 <uart_comms+0x1b0>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	6811      	ldr	r1, [r2, #0]
				memcpy(studentnumber+2,comma,1);
				memcpy(studentnumber+3 ,studentnumber1,8 );
 80021fc:	484f      	ldr	r0, [pc, #316]	; (800233c <uart_comms+0x1b4>)
				memcpy(studentnumber, uart_command, 2 );
 80021fe:	800b      	strh	r3, [r1, #0]
				memcpy(studentnumber+2,comma,1);
 8002200:	494f      	ldr	r1, [pc, #316]	; (8002340 <uart_comms+0x1b8>)
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	7809      	ldrb	r1, [r1, #0]
 8002206:	7099      	strb	r1, [r3, #2]
				memcpy(studentnumber+3 ,studentnumber1,8 );
 8002208:	6811      	ldr	r1, [r2, #0]
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	f8c1 3003 	str.w	r3, [r1, #3]
 8002210:	6843      	ldr	r3, [r0, #4]
 8002212:	f8c1 3007 	str.w	r3, [r1, #7]
				memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8002216:	6811      	ldr	r1, [r2, #0]
 8002218:	4a4a      	ldr	r2, [pc, #296]	; (8002344 <uart_comms+0x1bc>)
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	f8c1 300b 	str.w	r3, [r1, #11]
 8002220:	6853      	ldr	r3, [r2, #4]
 8002222:	f8c1 300f 	str.w	r3, [r1, #15]
				HAL_UART_Transmit(&huart1, ((uint8_t*)studentnumber), 13, 10);
 8002226:	220d      	movs	r2, #13
 8002228:	230a      	movs	r3, #10
				 case 'I': // get time
					HAL_UART_Transmit(&huart1,(uint8_t*)time, sizeof(time), 1000);
					 break;

				 case 'J': // set heating schedule
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value), 1000);
 800222a:	483e      	ldr	r0, [pc, #248]	; (8002324 <uart_comms+0x19c>)
 800222c:	f7ff fde5 	bl	8001dfa <HAL_UART_Transmit>
					 break;
 8002230:	e014      	b.n	800225c <uart_comms+0xd4>
					 memcpy(return_value, uart_command, 2);
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, endSimbol,2 );
 8002238:	4a42      	ldr	r2, [pc, #264]	; (8002344 <uart_comms+0x1bc>)
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	8812      	ldrh	r2, [r2, #0]
 800223e:	805a      	strh	r2, [r3, #2]
					 HAL_UART_Transmit(&huart1, return_value, sizeof(return_value), 1000);
 8002240:	6821      	ldr	r1, [r4, #0]
 8002242:	4838      	ldr	r0, [pc, #224]	; (8002324 <uart_comms+0x19c>)
 8002244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002248:	2204      	movs	r2, #4
 800224a:	f7ff fdd6 	bl	8001dfa <HAL_UART_Transmit>
					 if(uart_command[2]=='0'){
 800224e:	6833      	ldr	r3, [r6, #0]
 8002250:	789b      	ldrb	r3, [r3, #2]
 8002252:	2b30      	cmp	r3, #48	; 0x30
 8002254:	d10f      	bne.n	8002276 <uart_comms+0xee>
						auto_heating = 0;	// auto heating off
 8002256:	2200      	movs	r2, #0
						auto_heating = 1;	// auto heating on
 8002258:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <uart_comms+0x1c0>)
 800225a:	701a      	strb	r2, [r3, #0]

				 case 'L': // Request log Entry
					 // do something
					 break;
				 }
				memset(uart_command,0x00, 40);
 800225c:	2228      	movs	r2, #40	; 0x28
 800225e:	2100      	movs	r1, #0
 8002260:	6830      	ldr	r0, [r6, #0]
 8002262:	f000 fe36 	bl	8002ed2 <memset>
				memset(return_value,0x00, 15);
 8002266:	220f      	movs	r2, #15
 8002268:	2100      	movs	r1, #0
 800226a:	6820      	ldr	r0, [r4, #0]
 800226c:	f000 fe31 	bl	8002ed2 <memset>
				uart_counter = 0;
		  }
		  else if(uart_counter > 39 ){
			  uart_counter = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	702b      	strb	r3, [r5, #0]
		  }
}
 8002274:	e052      	b.n	800231c <uart_comms+0x194>
					 else if(uart_command[2] == '1'){
 8002276:	2b31      	cmp	r3, #49	; 0x31
 8002278:	d1f0      	bne.n	800225c <uart_comms+0xd4>
						auto_heating = 1;	// auto heating on
 800227a:	2201      	movs	r2, #1
 800227c:	e7ec      	b.n	8002258 <uart_comms+0xd0>
					 memcpy(return_value, uart_command, 2);
 800227e:	6822      	ldr	r2, [r4, #0]
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, endSimbol,2 );
 8002284:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <uart_comms+0x1bc>)
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	8812      	ldrh	r2, [r2, #0]
 800228a:	805a      	strh	r2, [r3, #2]
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value), 1000);
 800228c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002290:	2204      	movs	r2, #4
 8002292:	e034      	b.n	80022fe <uart_comms+0x176>
					 memcpy(return_value, uart_command,2);
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2,endSimbol, 2);
 800229a:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <uart_comms+0x1bc>)
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	8812      	ldrh	r2, [r2, #0]
 80022a0:	805a      	strh	r2, [r3, #2]
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, sizeof(return_value), 1000);
 80022a2:	6821      	ldr	r1, [r4, #0]
 80022a4:	481f      	ldr	r0, [pc, #124]	; (8002324 <uart_comms+0x19c>)
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	2204      	movs	r2, #4
 80022ac:	f7ff fda5 	bl	8001dfa <HAL_UART_Transmit>
					 sizeOfTemp = uart_counter - 5;
 80022b0:	782a      	ldrb	r2, [r5, #0]
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <uart_comms+0x1c4>)
					 memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 80022b4:	6831      	ldr	r1, [r6, #0]
					 sizeOfTemp = uart_counter - 5;
 80022b6:	3a05      	subs	r2, #5
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
					 memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <uart_comms+0x1c8>)
 80022be:	3103      	adds	r1, #3
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	f000 fdfb 	bl	8002ebc <memcpy>
					break;
 80022c6:	e7c9      	b.n	800225c <uart_comms+0xd4>
					 memcpy(return_value, uart_command, 2);
 80022c8:	6822      	ldr	r2, [r4, #0]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	8013      	strh	r3, [r2, #0]
					 memcpy(return_value+2, comma, 1);
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <uart_comms+0x1b8>)
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	7812      	ldrb	r2, [r2, #0]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 80022d4:	4f1d      	ldr	r7, [pc, #116]	; (800234c <uart_comms+0x1c4>)
					 memcpy(return_value+2, comma, 1);
 80022d6:	709a      	strb	r2, [r3, #2]
					 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 80022d8:	f897 8000 	ldrb.w	r8, [r7]
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <uart_comms+0x1c8>)
 80022de:	6820      	ldr	r0, [r4, #0]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	4642      	mov	r2, r8
 80022e4:	3003      	adds	r0, #3
 80022e6:	f000 fde9 	bl	8002ebc <memcpy>
					 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <uart_comms+0x1bc>)
 80022ee:	4442      	add	r2, r8
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f8a2 3003 	strh.w	r3, [r2, #3]
					HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 80022f6:	783a      	ldrb	r2, [r7, #0]
 80022f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fc:	3205      	adds	r2, #5
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value), 1000);
 80022fe:	6821      	ldr	r1, [r4, #0]
 8002300:	e793      	b.n	800222a <uart_comms+0xa2>
					HAL_UART_Transmit(&huart1,return_value, sizeof(return_value)+1, 1000);
 8002302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002306:	2205      	movs	r2, #5
 8002308:	e7f9      	b.n	80022fe <uart_comms+0x176>
					HAL_UART_Transmit(&huart1,(uint8_t*)time, sizeof(time), 1000);
 800230a:	4912      	ldr	r1, [pc, #72]	; (8002354 <uart_comms+0x1cc>)
 800230c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002310:	2204      	movs	r2, #4
 8002312:	6809      	ldr	r1, [r1, #0]
 8002314:	e789      	b.n	800222a <uart_comms+0xa2>
		  else if(uart_counter > 39 ){
 8002316:	782b      	ldrb	r3, [r5, #0]
 8002318:	2b27      	cmp	r3, #39	; 0x27
 800231a:	d8a9      	bhi.n	8002270 <uart_comms+0xe8>
 800231c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002320:	200001d0 	.word	0x200001d0
 8002324:	2000011c 	.word	0x2000011c
 8002328:	200000b4 	.word	0x200000b4
 800232c:	200000b0 	.word	0x200000b0
 8002330:	200000a4 	.word	0x200000a4
 8002334:	200000a0 	.word	0x200000a0
 8002338:	200001cc 	.word	0x200001cc
 800233c:	2000000f 	.word	0x2000000f
 8002340:	20000004 	.word	0x20000004
 8002344:	20000006 	.word	0x20000006
 8002348:	2000009f 	.word	0x2000009f
 800234c:	200000ac 	.word	0x200000ac
 8002350:	200000a8 	.word	0x200000a8
 8002354:	20000018 	.word	0x20000018

08002358 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
		rx_flag = 1;
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <HAL_UART_RxCpltCallback+0x8>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	4770      	bx	lr
 8002360:	200000a4 	.word	0x200000a4

08002364 <init_peripherals>:

}

void init_peripherals(){
 8002364:	b510      	push	{r4, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 8002366:	2201      	movs	r2, #1
 8002368:	2120      	movs	r1, #32
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f7fe fd59 	bl	8000e24 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 8002372:	2201      	movs	r2, #1
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237a:	f7fe fd53 	bl	8000e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 800237e:	4c2b      	ldr	r4, [pc, #172]	; (800242c <init_peripherals+0xc8>)
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 8002380:	2201      	movs	r2, #1
 8002382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238a:	f7fe fd4b 	bl	8000e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 800238e:	2201      	movs	r2, #1
 8002390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002398:	f7fe fd44 	bl	8000e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 800239c:	4620      	mov	r0, r4
 800239e:	2201      	movs	r2, #1
 80023a0:	2108      	movs	r1, #8
 80023a2:	f7fe fd3f 	bl	8000e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80023a6:	4620      	mov	r0, r4
 80023a8:	2201      	movs	r2, #1
 80023aa:	2110      	movs	r1, #16
 80023ac:	f7fe fd3a 	bl	8000e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80023b0:	4620      	mov	r0, r4
 80023b2:	2201      	movs	r2, #1
 80023b4:	2120      	movs	r1, #32
 80023b6:	f7fe fd35 	bl	8000e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 80023ba:	4620      	mov	r0, r4
 80023bc:	2201      	movs	r2, #1
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	f7fe fd30 	bl	8000e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80023c4:	4620      	mov	r0, r4
 80023c6:	2201      	movs	r2, #1
 80023c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023cc:	f7fe fd2a 	bl	8000e24 <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 80023d0:	2201      	movs	r2, #1
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	4816      	ldr	r0, [pc, #88]	; (8002430 <init_peripherals+0xcc>)
 80023d6:	f7fe fd25 	bl	8000e24 <HAL_GPIO_WritePin>


	  studentnumber = (uint8_t*)malloc(15);
 80023da:	200f      	movs	r0, #15
 80023dc:	f000 fd66 	bl	8002eac <malloc>
	  memset(studentnumber, 0x00, 15);
 80023e0:	240f      	movs	r4, #15
	  studentnumber = (uint8_t*)malloc(15);
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <init_peripherals+0xd0>)
	  memset(studentnumber, 0x00, 15);
 80023e4:	4622      	mov	r2, r4
 80023e6:	2100      	movs	r1, #0
	  studentnumber = (uint8_t*)malloc(15);
 80023e8:	6018      	str	r0, [r3, #0]
	  memset(studentnumber, 0x00, 15);
 80023ea:	f000 fd72 	bl	8002ed2 <memset>
	  return_value = (uint8_t*)malloc(15);
 80023ee:	4620      	mov	r0, r4
 80023f0:	f000 fd5c 	bl	8002eac <malloc>
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <init_peripherals+0xd4>)
	  memset(return_value, 0x00, 15);
 80023f6:	4622      	mov	r2, r4
 80023f8:	2100      	movs	r1, #0
	  return_value = (uint8_t*)malloc(15);
 80023fa:	6018      	str	r0, [r3, #0]
	  memset(return_value, 0x00, 15);
 80023fc:	f000 fd69 	bl	8002ed2 <memset>
	  uart_command = (uint8_t*)malloc(40);
 8002400:	2028      	movs	r0, #40	; 0x28
 8002402:	f000 fd53 	bl	8002eac <malloc>
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <init_peripherals+0xd8>)
	  memset(uart_command, 0x00, 40);
 8002408:	2228      	movs	r2, #40	; 0x28
 800240a:	2100      	movs	r1, #0
	  uart_command = (uint8_t*)malloc(40);
 800240c:	6018      	str	r0, [r3, #0]
	  memset(uart_command, 0x00, 40);
 800240e:	f000 fd60 	bl	8002ed2 <memset>
	  set_temp = (uint8_t*)malloc(3);
 8002412:	2003      	movs	r0, #3
 8002414:	f000 fd4a 	bl	8002eac <malloc>
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <init_peripherals+0xdc>)
 800241a:	6018      	str	r0, [r3, #0]
	  memset(set_temp, 0x00, 3);
 800241c:	2300      	movs	r3, #0
 800241e:	8003      	strh	r3, [r0, #0]
 8002420:	7083      	strb	r3, [r0, #2]


	HAL_TIM_Base_Start_IT(&htim2);

}
 8002422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Start_IT(&htim2);
 8002426:	4807      	ldr	r0, [pc, #28]	; (8002444 <init_peripherals+0xe0>)
 8002428:	f7ff b956 	b.w	80016d8 <HAL_TIM_Base_Start_IT>
 800242c:	48000400 	.word	0x48000400
 8002430:	48000800 	.word	0x48000800
 8002434:	200001cc 	.word	0x200001cc
 8002438:	200000a0 	.word	0x200000a0
 800243c:	200000b0 	.word	0x200000b0
 8002440:	200000a8 	.word	0x200000a8
 8002444:	2000018c 	.word	0x2000018c

08002448 <adc_comms>:

void adc_comms(){
 8002448:	b508      	push	{r3, lr}
	adc_raw_value = HAL_ADC_GetValue(&hadc2);
 800244a:	4803      	ldr	r0, [pc, #12]	; (8002458 <adc_comms+0x10>)
 800244c:	f7fe f8cc 	bl	80005e8 <HAL_ADC_GetValue>
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <adc_comms+0x14>)
 8002452:	7018      	strb	r0, [r3, #0]
 8002454:	bd08      	pop	{r3, pc}
 8002456:	bf00      	nop
 8002458:	200000c8 	.word	0x200000c8
 800245c:	2000009e 	.word	0x2000009e

08002460 <HAL_ADC_ConvCpltCallback>:
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 8002460:	4b01      	ldr	r3, [pc, #4]	; (8002468 <HAL_ADC_ConvCpltCallback+0x8>)
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	4770      	bx	lr
 8002468:	2000009d 	.word	0x2000009d

0800246c <seven_segment_display>:
}

void seven_segment_display(uint8_t num){
 800246c:	b508      	push	{r3, lr}

	switch(num){
 800246e:	2809      	cmp	r0, #9
 8002470:	f200 818e 	bhi.w	8002790 <seven_segment_display+0x324>
 8002474:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002478:	000a0168 	.word	0x000a0168
 800247c:	005f0036 	.word	0x005f0036
 8002480:	00ac0083 	.word	0x00ac0083
 8002484:	00fd00d6 	.word	0x00fd00d6
 8002488:	0145011f 	.word	0x0145011f
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	2140      	movs	r1, #64	; 0x40
 8002490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002494:	f7fe fcc6 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a0:	f7fe fcc0 	bl	8000e24 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	2120      	movs	r1, #32
 80024a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ac:	f7fe fcba 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ba:	f7fe fcb3 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c8:	f7fe fcac 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 80024cc:	48b1      	ldr	r0, [pc, #708]	; (8002794 <seven_segment_display+0x328>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	2140      	movs	r1, #64	; 0x40
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80024d2:	f7fe fca7 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80024d6:	48b0      	ldr	r0, [pc, #704]	; (8002798 <seven_segment_display+0x32c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	2180      	movs	r1, #128	; 0x80

	}



}
 80024dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80024e0:	f7fe bca0 	b.w	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 80024e4:	2200      	movs	r2, #0
 80024e6:	2120      	movs	r1, #32
 80024e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ec:	f7fe fc9a 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80024f0:	2200      	movs	r2, #0
 80024f2:	2140      	movs	r1, #64	; 0x40
 80024f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f8:	f7fe fc94 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80024fc:	2200      	movs	r2, #0
 80024fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002506:	f7fe fc8d 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 800250a:	2200      	movs	r2, #0
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	48a2      	ldr	r0, [pc, #648]	; (8002798 <seven_segment_display+0x32c>)
 8002510:	f7fe fc88 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8002514:	2200      	movs	r2, #0
 8002516:	2140      	movs	r1, #64	; 0x40
 8002518:	489e      	ldr	r0, [pc, #632]	; (8002794 <seven_segment_display+0x328>)
 800251a:	f7fe fc83 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800251e:	2201      	movs	r2, #1
 8002520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002528:	f7fe fc7c 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 800252c:	2201      	movs	r2, #1
 800252e:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	e7d2      	b.n	80024dc <seven_segment_display+0x70>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8002536:	2200      	movs	r2, #0
 8002538:	2120      	movs	r1, #32
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253e:	f7fe fc71 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8002542:	2200      	movs	r2, #0
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254a:	f7fe fc6b 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800254e:	2200      	movs	r2, #0
 8002550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002558:	f7fe fc64 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800255c:	2200      	movs	r2, #0
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002564:	f7fe fc5e 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8002568:	2200      	movs	r2, #0
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	4889      	ldr	r0, [pc, #548]	; (8002794 <seven_segment_display+0x328>)
 800256e:	f7fe fc59 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8002572:	2201      	movs	r2, #1
 8002574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800257c:	e7a9      	b.n	80024d2 <seven_segment_display+0x66>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800257e:	2200      	movs	r2, #0
 8002580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002588:	f7fe fc4c 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002596:	f7fe fc45 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800259a:	2200      	movs	r2, #0
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a2:	f7fe fc3f 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 80025a6:	2201      	movs	r2, #1
 80025a8:	2120      	movs	r1, #32
 80025aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ae:	f7fe fc39 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80025b2:	2201      	movs	r2, #1
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	4878      	ldr	r0, [pc, #480]	; (8002798 <seven_segment_display+0x32c>)
 80025b8:	f7fe fc34 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 80025bc:	2201      	movs	r2, #1
 80025be:	2120      	movs	r1, #32
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80025c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80025c4:	f7fe fc2e 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80025c8:	2201      	movs	r2, #1
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	4871      	ldr	r0, [pc, #452]	; (8002794 <seven_segment_display+0x328>)
 80025ce:	e785      	b.n	80024dc <seven_segment_display+0x70>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80025d0:	2200      	movs	r2, #0
 80025d2:	2120      	movs	r1, #32
 80025d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d8:	f7fe fc24 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80025dc:	2200      	movs	r2, #0
 80025de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e6:	f7fe fc1d 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f4:	f7fe fc16 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80025f8:	2200      	movs	r2, #0
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002600:	f7fe fc10 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8002604:	2200      	movs	r2, #0
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	4862      	ldr	r0, [pc, #392]	; (8002794 <seven_segment_display+0x328>)
 800260a:	f7fe fc0b 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 800260e:	2201      	movs	r2, #1
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002616:	f7fe fc05 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800261a:	2201      	movs	r2, #1
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	485e      	ldr	r0, [pc, #376]	; (8002798 <seven_segment_display+0x32c>)
 8002620:	f7fe fc00 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8002624:	2200      	movs	r2, #0
 8002626:	2120      	movs	r1, #32
 8002628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262c:	f7fe fbfa 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263a:	f7fe fbf3 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002648:	f7fe fbec 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800264c:	2200      	movs	r2, #0
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002654:	f7fe fbe6 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8002658:	2200      	movs	r2, #0
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	484d      	ldr	r0, [pc, #308]	; (8002794 <seven_segment_display+0x328>)
 800265e:	f7fe fbe1 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8002662:	2200      	movs	r2, #0
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	484c      	ldr	r0, [pc, #304]	; (8002798 <seven_segment_display+0x32c>)
 8002668:	f7fe fbdc 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 800266c:	2201      	movs	r2, #1
 800266e:	2140      	movs	r1, #64	; 0x40
 8002670:	e75e      	b.n	8002530 <seven_segment_display+0xc4>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8002672:	2200      	movs	r2, #0
 8002674:	2120      	movs	r1, #32
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f7fe fbd3 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800267e:	2200      	movs	r2, #0
 8002680:	2140      	movs	r1, #64	; 0x40
 8002682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002686:	f7fe fbcd 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800268a:	2200      	movs	r2, #0
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002692:	f7fe fbc7 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8002696:	2201      	movs	r2, #1
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	483f      	ldr	r0, [pc, #252]	; (8002798 <seven_segment_display+0x32c>)
 800269c:	f7fe fbc2 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026aa:	f7fe fbbb 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b4:	e784      	b.n	80025c0 <seven_segment_display+0x154>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80026b6:	2200      	movs	r2, #0
 80026b8:	2120      	movs	r1, #32
 80026ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026be:	f7fe fbb1 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80026c2:	2200      	movs	r2, #0
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	4833      	ldr	r0, [pc, #204]	; (8002794 <seven_segment_display+0x328>)
 80026c8:	f7fe fbac 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80026cc:	2200      	movs	r2, #0
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d4:	f7fe fba6 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80026d8:	2200      	movs	r2, #0
 80026da:	2140      	movs	r1, #64	; 0x40
 80026dc:	482d      	ldr	r0, [pc, #180]	; (8002794 <seven_segment_display+0x328>)
 80026de:	f7fe fba1 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80026e2:	2200      	movs	r2, #0
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	482c      	ldr	r0, [pc, #176]	; (8002798 <seven_segment_display+0x32c>)
 80026e8:	f7fe fb9c 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80026ec:	2200      	movs	r2, #0
 80026ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f6:	f7fe fb95 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80026fa:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80026fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002700:	e716      	b.n	8002530 <seven_segment_display+0xc4>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8002702:	2200      	movs	r2, #0
 8002704:	2120      	movs	r1, #32
 8002706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270a:	f7fe fb8b 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800270e:	2200      	movs	r2, #0
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	4820      	ldr	r0, [pc, #128]	; (8002794 <seven_segment_display+0x328>)
 8002714:	f7fe fb86 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8002718:	2200      	movs	r2, #0
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002720:	f7fe fb80 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8002724:	2200      	movs	r2, #0
 8002726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800272a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272e:	f7fe fb79 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f7fe fb72 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8002740:	2201      	movs	r2, #1
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	4814      	ldr	r0, [pc, #80]	; (8002798 <seven_segment_display+0x32c>)
 8002746:	e73d      	b.n	80025c4 <seven_segment_display+0x158>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8002748:	2200      	movs	r2, #0
 800274a:	2120      	movs	r1, #32
 800274c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002750:	f7fe fb68 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8002754:	2200      	movs	r2, #0
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	480e      	ldr	r0, [pc, #56]	; (8002794 <seven_segment_display+0x328>)
 800275a:	f7fe fb63 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800275e:	2200      	movs	r2, #0
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002766:	f7fe fb5d 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800276a:	2200      	movs	r2, #0
 800276c:	2140      	movs	r1, #64	; 0x40
 800276e:	4809      	ldr	r0, [pc, #36]	; (8002794 <seven_segment_display+0x328>)
 8002770:	f7fe fb58 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8002774:	2200      	movs	r2, #0
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	4807      	ldr	r0, [pc, #28]	; (8002798 <seven_segment_display+0x32c>)
 800277a:	f7fe fb53 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002788:	f7fe fb4c 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800278c:	2201      	movs	r2, #1
 800278e:	e7b5      	b.n	80026fc <seven_segment_display+0x290>
 8002790:	bd08      	pop	{r3, pc}
 8002792:	bf00      	nop
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800

0800279c <seven_segment>:
void seven_segment(){
 800279c:	b510      	push	{r4, lr}
	if(segment_counter == 1){	// Left Most Digit
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <seven_segment+0xec>)
 80027a0:	781c      	ldrb	r4, [r3, #0]
 80027a2:	2c01      	cmp	r4, #1
 80027a4:	d11e      	bne.n	80027e4 <seven_segment+0x48>
		segment_counter += 1;
 80027a6:	2202      	movs	r2, #2
 80027a8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 80027aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ae:	2200      	movs	r2, #0
 80027b0:	4836      	ldr	r0, [pc, #216]	; (800288c <seven_segment+0xf0>)
 80027b2:	f7fe fb37 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80027b6:	4622      	mov	r2, r4
 80027b8:	2110      	movs	r1, #16
 80027ba:	4834      	ldr	r0, [pc, #208]	; (800288c <seven_segment+0xf0>)
 80027bc:	f7fe fb32 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80027c0:	4622      	mov	r2, r4
 80027c2:	2120      	movs	r1, #32
 80027c4:	4831      	ldr	r0, [pc, #196]	; (800288c <seven_segment+0xf0>)
 80027c6:	f7fe fb2d 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80027ca:	4622      	mov	r2, r4
		seven_segment_display(segment_val);
 80027cc:	4c30      	ldr	r4, [pc, #192]	; (8002890 <seven_segment+0xf4>)
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80027ce:	482f      	ldr	r0, [pc, #188]	; (800288c <seven_segment+0xf0>)
 80027d0:	2108      	movs	r1, #8
 80027d2:	f7fe fb27 	bl	8000e24 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val);
 80027d6:	7820      	ldrb	r0, [r4, #0]
 80027d8:	f7ff fe48 	bl	800246c <seven_segment_display>
		segment_val += 1;
 80027dc:	7823      	ldrb	r3, [r4, #0]
 80027de:	3301      	adds	r3, #1
			segment_val = 0;
 80027e0:	7023      	strb	r3, [r4, #0]
 80027e2:	bd10      	pop	{r4, pc}
	else if( segment_counter == 2){		// Middle left Digit
 80027e4:	2c02      	cmp	r4, #2
 80027e6:	d11c      	bne.n	8002822 <seven_segment+0x86>
		segment_counter += 1;
 80027e8:	2203      	movs	r2, #3
 80027ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80027ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027f0:	2201      	movs	r2, #1
 80027f2:	4826      	ldr	r0, [pc, #152]	; (800288c <seven_segment+0xf0>)
 80027f4:	f7fe fb16 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 80027f8:	2200      	movs	r2, #0
 80027fa:	2110      	movs	r1, #16
 80027fc:	4823      	ldr	r0, [pc, #140]	; (800288c <seven_segment+0xf0>)
 80027fe:	f7fe fb11 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8002802:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8002804:	2120      	movs	r1, #32
 8002806:	4821      	ldr	r0, [pc, #132]	; (800288c <seven_segment+0xf0>)
 8002808:	f7fe fb0c 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 800280c:	481f      	ldr	r0, [pc, #124]	; (800288c <seven_segment+0xf0>)
 800280e:	2201      	movs	r2, #1
 8002810:	2108      	movs	r1, #8
 8002812:	f7fe fb07 	bl	8000e24 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val);
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <seven_segment+0xf4>)
}
 8002818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		seven_segment_display(segment_val);
 800281c:	7818      	ldrb	r0, [r3, #0]
 800281e:	f7ff be25 	b.w	800246c <seven_segment_display>
	else if( segment_counter == 3){		// Middle Right Digit
 8002822:	2c03      	cmp	r4, #3
 8002824:	d10e      	bne.n	8002844 <seven_segment+0xa8>
		segment_counter += 1;
 8002826:	2204      	movs	r2, #4
 8002828:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 800282a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800282e:	2201      	movs	r2, #1
 8002830:	4816      	ldr	r0, [pc, #88]	; (800288c <seven_segment+0xf0>)
 8002832:	f7fe faf7 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8002836:	2201      	movs	r2, #1
 8002838:	2110      	movs	r1, #16
 800283a:	4814      	ldr	r0, [pc, #80]	; (800288c <seven_segment+0xf0>)
 800283c:	f7fe faf2 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8002840:	2200      	movs	r2, #0
 8002842:	e7df      	b.n	8002804 <seven_segment+0x68>
	else if( segment_counter == 4){ // Right Most Digit
 8002844:	2c04      	cmp	r4, #4
 8002846:	d1cc      	bne.n	80027e2 <seven_segment+0x46>
		segment_counter = 1;
 8002848:	2401      	movs	r4, #1
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 800284a:	4622      	mov	r2, r4
 800284c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002850:	480e      	ldr	r0, [pc, #56]	; (800288c <seven_segment+0xf0>)
		segment_counter = 1;
 8002852:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8002854:	f7fe fae6 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8002858:	4622      	mov	r2, r4
 800285a:	2110      	movs	r1, #16
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <seven_segment+0xf0>)
 800285e:	f7fe fae1 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8002862:	4622      	mov	r2, r4
 8002864:	2120      	movs	r1, #32
 8002866:	4809      	ldr	r0, [pc, #36]	; (800288c <seven_segment+0xf0>)
		seven_segment_display(segment_val);
 8002868:	4c09      	ldr	r4, [pc, #36]	; (8002890 <seven_segment+0xf4>)
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 800286a:	f7fe fadb 	bl	8000e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 800286e:	2200      	movs	r2, #0
 8002870:	2108      	movs	r1, #8
 8002872:	4806      	ldr	r0, [pc, #24]	; (800288c <seven_segment+0xf0>)
 8002874:	f7fe fad6 	bl	8000e24 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val);
 8002878:	7820      	ldrb	r0, [r4, #0]
 800287a:	f7ff fdf7 	bl	800246c <seven_segment_display>
		if(segment_val==9){
 800287e:	7823      	ldrb	r3, [r4, #0]
 8002880:	2b09      	cmp	r3, #9
 8002882:	d1ae      	bne.n	80027e2 <seven_segment+0x46>
			segment_val = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	e7ab      	b.n	80027e0 <seven_segment+0x44>
 8002888:	2000000e 	.word	0x2000000e
 800288c:	48000400 	.word	0x48000400
 8002890:	200000a5 	.word	0x200000a5

08002894 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC2   ------> ADCx_IN8
*/
static void MX_GPIO_Init(void)
{
 8002894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002896:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <MX_GPIO_Init+0x114>)
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80028a0:	615a      	str	r2, [r3, #20]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80028a8:	9201      	str	r2, [sp, #4]
 80028aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028b2:	615a      	str	r2, [r3, #20]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80028ba:	9202      	str	r2, [sp, #8]
 80028bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028c4:	615a      	str	r2, [r3, #20]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80028cc:	9203      	str	r2, [sp, #12]
 80028ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028d6:	615a      	str	r2, [r3, #20]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028de:	9304      	str	r3, [sp, #16]
 80028e0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80028e2:	2200      	movs	r2, #0
 80028e4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80028e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ec:	f7fe fa9a 	bl	8000e24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80028f0:	4e2e      	ldr	r6, [pc, #184]	; (80029ac <MX_GPIO_Init+0x118>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80028f8:	4630      	mov	r0, r6
 80028fa:	f7fe fa93 	bl	8000e24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80028fe:	4d2c      	ldr	r5, [pc, #176]	; (80029b0 <MX_GPIO_Init+0x11c>)
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	4628      	mov	r0, r5
 8002906:	f7fe fa8d 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800290a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800290e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <MX_GPIO_Init+0x120>)
 8002912:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2400      	movs	r4, #0
 8002916:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002918:	a905      	add	r1, sp, #20
 800291a:	4628      	mov	r0, r5
 800291c:	f7fe f9c8 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002920:	2703      	movs	r7, #3
 8002922:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002924:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002928:	a905      	add	r1, sp, #20
 800292a:	4628      	mov	r0, r5
 800292c:	f7fe f9c0 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002930:	2304      	movs	r3, #4
 8002932:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002934:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002938:	a905      	add	r1, sp, #20
 800293a:	4628      	mov	r0, r5
 800293c:	f7fe f9b8 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002940:	2313      	movs	r3, #19
 8002942:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	a905      	add	r1, sp, #20
 800294a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294e:	f7fe f9af 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002952:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002956:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002958:	2701      	movs	r7, #1
 800295a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	a905      	add	r1, sp, #20
 8002962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002966:	f7fe f9a3 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800296a:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800296e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	a905      	add	r1, sp, #20
 8002978:	4630      	mov	r0, r6
 800297a:	f7fe f999 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002982:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002988:	a905      	add	r1, sp, #20
 800298a:	4628      	mov	r0, r5
 800298c:	f7fe f990 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002990:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002994:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002996:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	a905      	add	r1, sp, #20
 800299c:	4630      	mov	r0, r6
 800299e:	f7fe f987 	bl	8000cb0 <HAL_GPIO_Init>

}
 80029a2:	b00b      	add	sp, #44	; 0x2c
 80029a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	48000400 	.word	0x48000400
 80029b0:	48000800 	.word	0x48000800
 80029b4:	10210000 	.word	0x10210000

080029b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80029b8:	4770      	bx	lr

080029ba <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80029ba:	e7fe      	b.n	80029ba <_Error_Handler>

080029bc <MX_TIM2_Init>:
{
 80029bc:	b500      	push	{lr}
 80029be:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80029c0:	4818      	ldr	r0, [pc, #96]	; (8002a24 <MX_TIM2_Init+0x68>)
 80029c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029c6:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	2300      	movs	r3, #0
 80029ce:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 63999999;
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <MX_TIM2_Init+0x6c>)
 80029d2:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029d8:	f7fe ff88 	bl	80018ec <HAL_TIM_Base_Init>
 80029dc:	b998      	cbnz	r0, 8002a06 <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029de:	a908      	add	r1, sp, #32
 80029e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e4:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029e8:	480e      	ldr	r0, [pc, #56]	; (8002a24 <MX_TIM2_Init+0x68>)
 80029ea:	f7fe ffa3 	bl	8001934 <HAL_TIM_ConfigClockSource>
 80029ee:	b978      	cbnz	r0, 8002a10 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029f6:	a901      	add	r1, sp, #4
 80029f8:	480a      	ldr	r0, [pc, #40]	; (8002a24 <MX_TIM2_Init+0x68>)
 80029fa:	f7ff f851 	bl	8001aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80029fe:	b960      	cbnz	r0, 8002a1a <MX_TIM2_Init+0x5e>
}
 8002a00:	b009      	add	sp, #36	; 0x24
 8002a02:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002a06:	f240 1107 	movw	r1, #263	; 0x107
 8002a0a:	4808      	ldr	r0, [pc, #32]	; (8002a2c <MX_TIM2_Init+0x70>)
 8002a0c:	f7ff ffd5 	bl	80029ba <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002a10:	f240 110d 	movw	r1, #269	; 0x10d
 8002a14:	4805      	ldr	r0, [pc, #20]	; (8002a2c <MX_TIM2_Init+0x70>)
 8002a16:	f7ff ffd0 	bl	80029ba <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002a1a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002a1e:	4803      	ldr	r0, [pc, #12]	; (8002a2c <MX_TIM2_Init+0x70>)
 8002a20:	f7ff ffcb 	bl	80029ba <_Error_Handler>
 8002a24:	2000018c 	.word	0x2000018c
 8002a28:	03d08fff 	.word	0x03d08fff
 8002a2c:	0800301c 	.word	0x0800301c

08002a30 <MX_USART1_UART_Init>:
{
 8002a30:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002a32:	480c      	ldr	r0, [pc, #48]	; (8002a64 <MX_USART1_UART_Init+0x34>)
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_USART1_UART_Init+0x38>)
 8002a36:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002a38:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a3c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a42:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a44:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a46:	220c      	movs	r2, #12
 8002a48:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a4a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a50:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a52:	f7ff fa5d 	bl	8001f10 <HAL_UART_Init>
 8002a56:	b900      	cbnz	r0, 8002a5a <MX_USART1_UART_Init+0x2a>
 8002a58:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002a5a:	f240 1129 	movw	r1, #297	; 0x129
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <MX_USART1_UART_Init+0x3c>)
 8002a60:	f7ff ffab 	bl	80029ba <_Error_Handler>
 8002a64:	2000011c 	.word	0x2000011c
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	0800301c 	.word	0x0800301c

08002a70 <MX_ADC2_Init>:
{
 8002a70:	b500      	push	{lr}
 8002a72:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 8002a74:	4817      	ldr	r0, [pc, #92]	; (8002ad4 <MX_ADC2_Init+0x64>)
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <MX_ADC2_Init+0x68>)
 8002a78:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a7e:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a80:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a82:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a84:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a86:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a8c:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a8e:	6202      	str	r2, [r0, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002a90:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a92:	2204      	movs	r2, #4
 8002a94:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002a96:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002a98:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a9a:	f7fd fc31 	bl	8000300 <HAL_ADC_Init>
 8002a9e:	b980      	cbnz	r0, 8002ac2 <MX_ADC2_Init+0x52>
  sConfig.Channel = ADC_CHANNEL_8;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002aac:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002aae:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8002ab0:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ab2:	4669      	mov	r1, sp
 8002ab4:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <MX_ADC2_Init+0x64>)
 8002ab6:	f7fd fedd 	bl	8000874 <HAL_ADC_ConfigChannel>
 8002aba:	b930      	cbnz	r0, 8002aca <MX_ADC2_Init+0x5a>
}
 8002abc:	b007      	add	sp, #28
 8002abe:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002ac2:	21e6      	movs	r1, #230	; 0xe6
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_ADC2_Init+0x6c>)
 8002ac6:	f7ff ff78 	bl	80029ba <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002aca:	21f3      	movs	r1, #243	; 0xf3
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <MX_ADC2_Init+0x6c>)
 8002ace:	f7ff ff74 	bl	80029ba <_Error_Handler>
 8002ad2:	bf00      	nop
 8002ad4:	200000c8 	.word	0x200000c8
 8002ad8:	50000100 	.word	0x50000100
 8002adc:	0800301c 	.word	0x0800301c

08002ae0 <SystemClock_Config>:
{
 8002ae0:	b500      	push	{lr}
 8002ae2:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002aec:	2210      	movs	r2, #16
 8002aee:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002af0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002af2:	2300      	movs	r3, #0
 8002af4:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002af6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002afa:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002afc:	a80c      	add	r0, sp, #48	; 0x30
 8002afe:	f7fe f997 	bl	8000e30 <HAL_RCC_OscConfig>
 8002b02:	bb60      	cbnz	r0, 8002b5e <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b04:	230f      	movs	r3, #15
 8002b06:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b08:	2102      	movs	r1, #2
 8002b0a:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b14:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b16:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b18:	a807      	add	r0, sp, #28
 8002b1a:	f7fe fc2d 	bl	8001378 <HAL_RCC_ClockConfig>
 8002b1e:	bb10      	cbnz	r0, 8002b66 <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8002b20:	2381      	movs	r3, #129	; 0x81
 8002b22:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b24:	2300      	movs	r3, #0
 8002b26:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b2c:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2e:	4668      	mov	r0, sp
 8002b30:	f7fe fd1a 	bl	8001568 <HAL_RCCEx_PeriphCLKConfig>
 8002b34:	b9d8      	cbnz	r0, 8002b6e <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b36:	f7fe fce1 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <SystemClock_Config+0x98>)
 8002b3c:	fba3 3000 	umull	r3, r0, r3, r0
 8002b40:	0980      	lsrs	r0, r0, #6
 8002b42:	f7fe f869 	bl	8000c18 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b46:	2004      	movs	r0, #4
 8002b48:	f7fe f87c 	bl	8000c44 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	4611      	mov	r1, r2
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	f7fe f820 	bl	8000b98 <HAL_NVIC_SetPriority>
}
 8002b58:	b017      	add	sp, #92	; 0x5c
 8002b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002b5e:	21a9      	movs	r1, #169	; 0xa9
 8002b60:	4806      	ldr	r0, [pc, #24]	; (8002b7c <SystemClock_Config+0x9c>)
 8002b62:	f7ff ff2a 	bl	80029ba <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002b66:	21b7      	movs	r1, #183	; 0xb7
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <SystemClock_Config+0x9c>)
 8002b6a:	f7ff ff26 	bl	80029ba <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002b6e:	21bf      	movs	r1, #191	; 0xbf
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <SystemClock_Config+0x9c>)
 8002b72:	f7ff ff22 	bl	80029ba <_Error_Handler>
 8002b76:	bf00      	nop
 8002b78:	10624dd3 	.word	0x10624dd3
 8002b7c:	0800301c 	.word	0x0800301c

08002b80 <main>:
{
 8002b80:	b508      	push	{r3, lr}
  HAL_Init();
 8002b82:	f7fd fb35 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8002b86:	f7ff ffab 	bl	8002ae0 <SystemClock_Config>
  MX_GPIO_Init();
 8002b8a:	f7ff fe83 	bl	8002894 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002b8e:	f7ff ff15 	bl	80029bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002b92:	f7ff ff4d 	bl	8002a30 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8002b96:	f7ff ff6b 	bl	8002a70 <MX_ADC2_Init>
  init_peripherals();
 8002b9a:	f7ff fbe3 	bl	8002364 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4912      	ldr	r1, [pc, #72]	; (8002bec <main+0x6c>)
 8002ba2:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <main+0x70>)
 8002ba4:	f7fe ffae 	bl	8001b04 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc2);
 8002ba8:	4812      	ldr	r0, [pc, #72]	; (8002bf4 <main+0x74>)
 8002baa:	f7fd fca1 	bl	80004f0 <HAL_ADC_Start_IT>
 8002bae:	e009      	b.n	8002bc4 <main+0x44>
		  rx_flag = 0;
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <main+0x78>)
 8002bb4:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8002bb6:	f7ff fae7 	bl	8002188 <uart_comms>
 8002bba:	e007      	b.n	8002bcc <main+0x4c>
	  if(adc_flag == 1){	// ADC conversion
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <main+0x7c>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d00d      	beq.n	8002be0 <main+0x60>
	  if(rx_flag == 1 ){ 	// UART Comms
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <main+0x78>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d0f1      	beq.n	8002bb0 <main+0x30>
	  if(tim2_flag == 1){	// Seven Segment
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <main+0x80>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d1f3      	bne.n	8002bbc <main+0x3c>
		  tim2_flag = 0;
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <main+0x80>)
 8002bd8:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 8002bda:	f7ff fddf 	bl	800279c <seven_segment>
 8002bde:	e7ed      	b.n	8002bbc <main+0x3c>
		  adc_flag = 0;
 8002be0:	2200      	movs	r2, #0
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <main+0x7c>)
 8002be4:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8002be6:	f7ff fc2f 	bl	8002448 <adc_comms>
 8002bea:	e7eb      	b.n	8002bc4 <main+0x44>
 8002bec:	200001d0 	.word	0x200001d0
 8002bf0:	2000011c 	.word	0x2000011c
 8002bf4:	200000c8 	.word	0x200000c8
 8002bf8:	200000a4 	.word	0x200000a4
 8002bfc:	2000009d 	.word	0x2000009d
 8002c00:	2000009c 	.word	0x2000009c

08002c04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_MspInit+0x78>)
{
 8002c06:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	619a      	str	r2, [r3, #24]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c18:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c1c:	f7fd ffaa 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	4611      	mov	r1, r2
 8002c24:	f06f 000b 	mvn.w	r0, #11
 8002c28:	f7fd ffb6 	bl	8000b98 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4611      	mov	r1, r2
 8002c30:	f06f 000a 	mvn.w	r0, #10
 8002c34:	f7fd ffb0 	bl	8000b98 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	f06f 0009 	mvn.w	r0, #9
 8002c40:	f7fd ffaa 	bl	8000b98 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	4611      	mov	r1, r2
 8002c48:	f06f 0004 	mvn.w	r0, #4
 8002c4c:	f7fd ffa4 	bl	8000b98 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	4611      	mov	r1, r2
 8002c54:	f06f 0003 	mvn.w	r0, #3
 8002c58:	f7fd ff9e 	bl	8000b98 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4611      	mov	r1, r2
 8002c60:	f06f 0001 	mvn.w	r0, #1
 8002c64:	f7fd ff98 	bl	8000b98 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7fd ff92 	bl	8000b98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c74:	b003      	add	sp, #12
 8002c76:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c80:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8002c82:	6802      	ldr	r2, [r0, #0]
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_ADC_MspInit+0x48>)
 8002c86:	429a      	cmp	r2, r3
{
 8002c88:	b086      	sub	sp, #24
  if(hadc->Instance==ADC2)
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_ADC_MspInit+0x4c>)
    PC2     ------> ADC2_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8e:	4810      	ldr	r0, [pc, #64]	; (8002cd0 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c96:	615a      	str	r2, [r3, #20]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ca2:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ca6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002caa:	2303      	movs	r3, #3
 8002cac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb0:	f7fd fffe 	bl	8000cb0 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002cb4:	2012      	movs	r0, #18
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	4621      	mov	r1, r4
 8002cba:	f7fd ff6d 	bl	8000b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002cbe:	2012      	movs	r0, #18
 8002cc0:	f7fd ff9e 	bl	8000c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd10      	pop	{r4, pc}
 8002cc8:	50000100 	.word	0x50000100
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	48000800 	.word	0x48000800

08002cd4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002cda:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002cdc:	d112      	bne.n	8002d04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cde:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ce2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	61da      	str	r2, [r3, #28]
 8002cec:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cf6:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cf8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cfa:	f7fd ff4d 	bl	8000b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cfe:	201c      	movs	r0, #28
 8002d00:	f7fd ff7e 	bl	8000c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d04:	b003      	add	sp, #12
 8002d06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d0c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d0c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002d0e:	6802      	ldr	r2, [r0, #0]
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_UART_MspInit+0x54>)
 8002d12:	429a      	cmp	r2, r3
{
 8002d14:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8002d16:	d120      	bne.n	8002d5a <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d18:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d1e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d20:	4810      	ldr	r0, [pc, #64]	; (8002d64 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d26:	619a      	str	r2, [r3, #24]
 8002d28:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d34:	2330      	movs	r3, #48	; 0x30
 8002d36:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d40:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d42:	2307      	movs	r3, #7
 8002d44:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d46:	f7fd ffb3 	bl	8000cb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d4a:	2025      	movs	r0, #37	; 0x25
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	4621      	mov	r1, r4
 8002d50:	f7fd ff22 	bl	8000b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d54:	2025      	movs	r0, #37	; 0x25
 8002d56:	f7fd ff53 	bl	8000c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d5a:	b006      	add	sp, #24
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	bf00      	nop
 8002d60:	40013800 	.word	0x40013800
 8002d64:	48000800 	.word	0x48000800

08002d68 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d6a:	f7fd fa53 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002d72:	f7fd bf74 	b.w	8000c5e <HAL_SYSTICK_IRQHandler>
	...

08002d78 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002d78:	4801      	ldr	r0, [pc, #4]	; (8002d80 <ADC1_2_IRQHandler+0x8>)
 8002d7a:	f7fd bc3d 	b.w	80005f8 <HAL_ADC_IRQHandler>
 8002d7e:	bf00      	nop
 8002d80:	200000c8 	.word	0x200000c8

08002d84 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8002d84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d86:	4803      	ldr	r0, [pc, #12]	; (8002d94 <TIM2_IRQHandler+0x10>)
 8002d88:	f7fe fcb5 	bl	80016f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag= 1;
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <TIM2_IRQHandler+0x14>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	bd08      	pop	{r3, pc}
 8002d94:	2000018c 	.word	0x2000018c
 8002d98:	2000009c 	.word	0x2000009c

08002d9c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d9c:	4801      	ldr	r0, [pc, #4]	; (8002da4 <USART1_IRQHandler+0x8>)
 8002d9e:	f7ff b95b 	b.w	8002058 <HAL_UART_IRQHandler>
 8002da2:	bf00      	nop
 8002da4:	2000011c 	.word	0x2000011c

08002da8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da8:	4915      	ldr	r1, [pc, #84]	; (8002e00 <SystemInit+0x58>)
 8002daa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002dae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <SystemInit+0x5c>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002dc0:	6858      	ldr	r0, [r3, #4]
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <SystemInit+0x60>)
 8002dc4:	4002      	ands	r2, r0
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002dce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dda:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002de2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de6:	f022 020f 	bic.w	r2, r2, #15
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002dec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dee:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <SystemInit+0x64>)
 8002df0:	4002      	ands	r2, r0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002df8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dfc:	608b      	str	r3, [r1, #8]
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00
 8002e04:	40021000 	.word	0x40021000
 8002e08:	f87fc00c 	.word	0xf87fc00c
 8002e0c:	ff00fccc 	.word	0xff00fccc

08002e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e16:	e003      	b.n	8002e20 <LoopCopyDataInit>

08002e18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e1e:	3104      	adds	r1, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e20:	480b      	ldr	r0, [pc, #44]	; (8002e50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002e24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e28:	d3f6      	bcc.n	8002e18 <CopyDataInit>
	ldr	r2, =_sbss
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002e2c:	e002      	b.n	8002e34 <LoopFillZerobss>

08002e2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e30:	f842 3b04 	str.w	r3, [r2], #4

08002e34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <LoopForever+0x16>)
	cmp	r2, r3
 8002e36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e38:	d3f9      	bcc.n	8002e2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e3a:	f7ff ffb5 	bl	8002da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3e:	f000 f811 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e42:	f7ff fe9d 	bl	8002b80 <main>

08002e46 <LoopForever>:

LoopForever:
    b LoopForever
 8002e46:	e7fe      	b.n	8002e46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e48:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002e4c:	08003058 	.word	0x08003058
	ldr	r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e54:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8002e58:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8002e5c:	200001d8 	.word	0x200001d8

08002e60 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <BusFault_Handler>
	...

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4e0d      	ldr	r6, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1ba4      	subs	r4, r4, r6
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2500      	movs	r5, #0
 8002e70:	42a5      	cmp	r5, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4e0b      	ldr	r6, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f000 f8b2 	bl	8002fe0 <_init>
 8002e7c:	1ba4      	subs	r4, r4, r6
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2500      	movs	r5, #0
 8002e82:	42a5      	cmp	r5, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e8c:	4798      	blx	r3
 8002e8e:	3501      	adds	r5, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e96:	4798      	blx	r3
 8002e98:	3501      	adds	r5, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08003050 	.word	0x08003050
 8002ea0:	08003050 	.word	0x08003050
 8002ea4:	08003050 	.word	0x08003050
 8002ea8:	08003054 	.word	0x08003054

08002eac <malloc>:
 8002eac:	4b02      	ldr	r3, [pc, #8]	; (8002eb8 <malloc+0xc>)
 8002eae:	4601      	mov	r1, r0
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	f000 b817 	b.w	8002ee4 <_malloc_r>
 8002eb6:	bf00      	nop
 8002eb8:	2000001c 	.word	0x2000001c

08002ebc <memcpy>:
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	1e43      	subs	r3, r0, #1
 8002ec0:	440a      	add	r2, r1
 8002ec2:	4291      	cmp	r1, r2
 8002ec4:	d100      	bne.n	8002ec8 <memcpy+0xc>
 8002ec6:	bd10      	pop	{r4, pc}
 8002ec8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ed0:	e7f7      	b.n	8002ec2 <memcpy+0x6>

08002ed2 <memset>:
 8002ed2:	4402      	add	r2, r0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d100      	bne.n	8002edc <memset+0xa>
 8002eda:	4770      	bx	lr
 8002edc:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee0:	e7f9      	b.n	8002ed6 <memset+0x4>
	...

08002ee4 <_malloc_r>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	1ccd      	adds	r5, r1, #3
 8002ee8:	f025 0503 	bic.w	r5, r5, #3
 8002eec:	3508      	adds	r5, #8
 8002eee:	2d0c      	cmp	r5, #12
 8002ef0:	bf38      	it	cc
 8002ef2:	250c      	movcc	r5, #12
 8002ef4:	2d00      	cmp	r5, #0
 8002ef6:	4606      	mov	r6, r0
 8002ef8:	db01      	blt.n	8002efe <_malloc_r+0x1a>
 8002efa:	42a9      	cmp	r1, r5
 8002efc:	d903      	bls.n	8002f06 <_malloc_r+0x22>
 8002efe:	230c      	movs	r3, #12
 8002f00:	6033      	str	r3, [r6, #0]
 8002f02:	2000      	movs	r0, #0
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
 8002f06:	f000 f85b 	bl	8002fc0 <__malloc_lock>
 8002f0a:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <_malloc_r+0xb4>)
 8002f0c:	6814      	ldr	r4, [r2, #0]
 8002f0e:	4621      	mov	r1, r4
 8002f10:	b991      	cbnz	r1, 8002f38 <_malloc_r+0x54>
 8002f12:	4c22      	ldr	r4, [pc, #136]	; (8002f9c <_malloc_r+0xb8>)
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	b91b      	cbnz	r3, 8002f20 <_malloc_r+0x3c>
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f000 f841 	bl	8002fa0 <_sbrk_r>
 8002f1e:	6020      	str	r0, [r4, #0]
 8002f20:	4629      	mov	r1, r5
 8002f22:	4630      	mov	r0, r6
 8002f24:	f000 f83c 	bl	8002fa0 <_sbrk_r>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d126      	bne.n	8002f7a <_malloc_r+0x96>
 8002f2c:	230c      	movs	r3, #12
 8002f2e:	6033      	str	r3, [r6, #0]
 8002f30:	4630      	mov	r0, r6
 8002f32:	f000 f846 	bl	8002fc2 <__malloc_unlock>
 8002f36:	e7e4      	b.n	8002f02 <_malloc_r+0x1e>
 8002f38:	680b      	ldr	r3, [r1, #0]
 8002f3a:	1b5b      	subs	r3, r3, r5
 8002f3c:	d41a      	bmi.n	8002f74 <_malloc_r+0x90>
 8002f3e:	2b0b      	cmp	r3, #11
 8002f40:	d90f      	bls.n	8002f62 <_malloc_r+0x7e>
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	50cd      	str	r5, [r1, r3]
 8002f46:	18cc      	adds	r4, r1, r3
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f000 f83a 	bl	8002fc2 <__malloc_unlock>
 8002f4e:	f104 000b 	add.w	r0, r4, #11
 8002f52:	1d23      	adds	r3, r4, #4
 8002f54:	f020 0007 	bic.w	r0, r0, #7
 8002f58:	1ac3      	subs	r3, r0, r3
 8002f5a:	d01b      	beq.n	8002f94 <_malloc_r+0xb0>
 8002f5c:	425a      	negs	r2, r3
 8002f5e:	50e2      	str	r2, [r4, r3]
 8002f60:	bd70      	pop	{r4, r5, r6, pc}
 8002f62:	428c      	cmp	r4, r1
 8002f64:	bf0d      	iteet	eq
 8002f66:	6863      	ldreq	r3, [r4, #4]
 8002f68:	684b      	ldrne	r3, [r1, #4]
 8002f6a:	6063      	strne	r3, [r4, #4]
 8002f6c:	6013      	streq	r3, [r2, #0]
 8002f6e:	bf18      	it	ne
 8002f70:	460c      	movne	r4, r1
 8002f72:	e7e9      	b.n	8002f48 <_malloc_r+0x64>
 8002f74:	460c      	mov	r4, r1
 8002f76:	6849      	ldr	r1, [r1, #4]
 8002f78:	e7ca      	b.n	8002f10 <_malloc_r+0x2c>
 8002f7a:	1cc4      	adds	r4, r0, #3
 8002f7c:	f024 0403 	bic.w	r4, r4, #3
 8002f80:	42a0      	cmp	r0, r4
 8002f82:	d005      	beq.n	8002f90 <_malloc_r+0xac>
 8002f84:	1a21      	subs	r1, r4, r0
 8002f86:	4630      	mov	r0, r6
 8002f88:	f000 f80a 	bl	8002fa0 <_sbrk_r>
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d0cd      	beq.n	8002f2c <_malloc_r+0x48>
 8002f90:	6025      	str	r5, [r4, #0]
 8002f92:	e7d9      	b.n	8002f48 <_malloc_r+0x64>
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	bf00      	nop
 8002f98:	200000b8 	.word	0x200000b8
 8002f9c:	200000bc 	.word	0x200000bc

08002fa0 <_sbrk_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4c06      	ldr	r4, [pc, #24]	; (8002fbc <_sbrk_r+0x1c>)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	4608      	mov	r0, r1
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	f000 f80a 	bl	8002fc4 <_sbrk>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_sbrk_r+0x1a>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_sbrk_r+0x1a>
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	200001d4 	.word	0x200001d4

08002fc0 <__malloc_lock>:
 8002fc0:	4770      	bx	lr

08002fc2 <__malloc_unlock>:
 8002fc2:	4770      	bx	lr

08002fc4 <_sbrk>:
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <_sbrk+0x14>)
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	4602      	mov	r2, r0
 8002fca:	b909      	cbnz	r1, 8002fd0 <_sbrk+0xc>
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <_sbrk+0x18>)
 8002fce:	6019      	str	r1, [r3, #0]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	4402      	add	r2, r0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	4770      	bx	lr
 8002fd8:	200000c0 	.word	0x200000c0
 8002fdc:	200001d8 	.word	0x200001d8

08002fe0 <_init>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	bf00      	nop
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr

08002fec <_fini>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr
