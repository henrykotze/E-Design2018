
C:\Users\labuser\Desktop\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000224  20000000  080062f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
  7 .bss          0000039c  20000228  20000228  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200005c4  200005c4  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f9e6  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004b63  00000000  00000000  0004fc3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000cf93  00000000  00000000  0005479d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e00  00000000  00000000  00061730  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001d10  00000000  00000000  00062530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00021a72  00000000  00000000  00064240  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00012ffd  00000000  00000000  00085cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ab030  00000000  00000000  00098caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00143cdf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003138  00000000  00000000  00143d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060f0 	.word	0x080060f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	080060f0 	.word	0x080060f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <HAL_InitTick+0x24>)
 8000282:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <HAL_InitTick+0x28>)
 8000284:	681b      	ldr	r3, [r3, #0]
{
 8000286:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000288:	fba2 2303 	umull	r2, r3, r2, r3
{
 800028c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 800028e:	0998      	lsrs	r0, r3, #6
 8000290:	f000 fca8 	bl	8000be4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000294:	4621      	mov	r1, r4
 8000296:	2200      	movs	r2, #0
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 fc60 	bl	8000b60 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002a0:	2000      	movs	r0, #0
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	20000000 	.word	0x20000000
 80002a8:	10624dd3 	.word	0x10624dd3

080002ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <HAL_Init+0x20>)
{
 80002ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b0:	6813      	ldr	r3, [r2, #0]
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b8:	2003      	movs	r0, #3
 80002ba:	f000 fc3f 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002be:	2000      	movs	r0, #0
 80002c0:	f7ff ffde 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002c4:	f004 fa72 	bl	80047ac <HAL_MspInit>
}
 80002c8:	2000      	movs	r0, #0
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	40022000 	.word	0x40022000

080002d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <HAL_IncTick+0xc>)
 80002d2:	6813      	ldr	r3, [r2, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	20000300 	.word	0x20000300

080002e0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002e0:	4b01      	ldr	r3, [pc, #4]	; (80002e8 <HAL_GetTick+0x8>)
 80002e2:	6818      	ldr	r0, [r3, #0]
}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000300 	.word	0x20000300

080002ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	b083      	sub	sp, #12
 80002f0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f2:	f7ff fff5 	bl	80002e0 <HAL_GetTick>
  uint32_t wait = Delay;
 80002f6:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80002fa:	4605      	mov	r5, r0
  {
     wait++;
 80002fc:	bf18      	it	ne
 80002fe:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	1b40      	subs	r0, r0, r5
 8000306:	42a0      	cmp	r0, r4
 8000308:	d3fa      	bcc.n	8000300 <HAL_Delay+0x14>
  {
  }
}
 800030a:	b003      	add	sp, #12
 800030c:	bd30      	pop	{r4, r5, pc}
 800030e:	bf00      	nop

08000310 <HAL_ADC_ConvHalfCpltCallback>:
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop

08000314 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop

08000318 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000318:	6802      	ldr	r2, [r0, #0]
{
 800031a:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800031c:	6893      	ldr	r3, [r2, #8]
 800031e:	f003 0303 	and.w	r3, r3, #3
 8000322:	2b01      	cmp	r3, #1
 8000324:	d002      	beq.n	800032c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800032c:	6811      	ldr	r1, [r2, #0]
 800032e:	07c9      	lsls	r1, r1, #31
 8000330:	d5f9      	bpl.n	8000326 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000332:	6891      	ldr	r1, [r2, #8]
 8000334:	f001 010d 	and.w	r1, r1, #13
 8000338:	2901      	cmp	r1, #1
 800033a:	d009      	beq.n	8000350 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800033c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800033e:	f042 0210 	orr.w	r2, r2, #16
 8000342:	6442      	str	r2, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000344:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000346:	f042 0201 	orr.w	r2, r2, #1
 800034a:	6482      	str	r2, [r0, #72]	; 0x48
}
 800034c:	4618      	mov	r0, r3
 800034e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8000350:	6893      	ldr	r3, [r2, #8]
 8000352:	2103      	movs	r1, #3
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	6093      	str	r3, [r2, #8]
 800035a:	6011      	str	r1, [r2, #0]
 800035c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800035e:	f7ff ffbf 	bl	80002e0 <HAL_GetTick>
 8000362:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000364:	6823      	ldr	r3, [r4, #0]
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	07db      	lsls	r3, r3, #31
 800036a:	d5dc      	bpl.n	8000326 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800036c:	f7ff ffb8 	bl	80002e0 <HAL_GetTick>
 8000370:	1b40      	subs	r0, r0, r5
 8000372:	2802      	cmp	r0, #2
 8000374:	d9f6      	bls.n	8000364 <ADC_Disable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000376:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000378:	f043 0310 	orr.w	r3, r3, #16
 800037c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800037e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	e7ce      	b.n	8000328 <ADC_Disable+0x10>
 800038a:	bf00      	nop

0800038c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800038c:	6802      	ldr	r2, [r0, #0]
{
 800038e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000390:	6893      	ldr	r3, [r2, #8]
 8000392:	f003 0303 	and.w	r3, r3, #3
 8000396:	2b01      	cmp	r3, #1
 8000398:	d00d      	beq.n	80003b6 <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800039a:	6891      	ldr	r1, [r2, #8]
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <ADC_Enable+0x70>)
 800039e:	4219      	tst	r1, r3
 80003a0:	d00e      	beq.n	80003c0 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003a4:	f043 0310 	orr.w	r3, r3, #16
 80003a8:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003aa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 80003b2:	2001      	movs	r0, #1
 80003b4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003b6:	6813      	ldr	r3, [r2, #0]
 80003b8:	07d9      	lsls	r1, r3, #31
 80003ba:	d5ee      	bpl.n	800039a <ADC_Enable+0xe>
  return HAL_OK;
 80003bc:	2000      	movs	r0, #0
 80003be:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80003c0:	6893      	ldr	r3, [r2, #8]
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6093      	str	r3, [r2, #8]
 80003c8:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();  
 80003ca:	f7ff ff89 	bl	80002e0 <HAL_GetTick>
 80003ce:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003d0:	e004      	b.n	80003dc <ADC_Enable+0x50>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003d2:	f7ff ff85 	bl	80002e0 <HAL_GetTick>
 80003d6:	1b40      	subs	r0, r0, r5
 80003d8:	2802      	cmp	r0, #2
 80003da:	d804      	bhi.n	80003e6 <ADC_Enable+0x5a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003dc:	6823      	ldr	r3, [r4, #0]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	07db      	lsls	r3, r3, #31
 80003e2:	d5f6      	bpl.n	80003d2 <ADC_Enable+0x46>
 80003e4:	e7ea      	b.n	80003bc <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003e8:	f043 0310 	orr.w	r3, r3, #16
 80003ec:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80003f6:	2001      	movs	r0, #1
 80003f8:	bd38      	pop	{r3, r4, r5, pc}
 80003fa:	bf00      	nop
 80003fc:	8000003f 	.word	0x8000003f

08000400 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000400:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000402:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000408:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800040a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8000412:	f7ff bf7f 	b.w	8000314 <HAL_ADC_ErrorCallback>
 8000416:	bf00      	nop

08000418 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000418:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800041a:	f7ff bf79 	b.w	8000310 <HAL_ADC_ConvHalfCpltCallback>
 800041e:	bf00      	nop

08000420 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000420:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000424:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000428:	d118      	bne.n	800045c <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800042a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800042c:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800042e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000432:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000434:	68ca      	ldr	r2, [r1, #12]
 8000436:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800043a:	d10c      	bne.n	8000456 <ADC_DMAConvCplt+0x36>
 800043c:	69da      	ldr	r2, [r3, #28]
 800043e:	b952      	cbnz	r2, 8000456 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000446:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800044a:	04d2      	lsls	r2, r2, #19
 800044c:	d403      	bmi.n	8000456 <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800044e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000450:	f042 0201 	orr.w	r2, r2, #1
 8000454:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000456:	4618      	mov	r0, r3
 8000458:	f003 ba76 	b.w	8003948 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800045c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4718      	bx	r3
 8000462:	bf00      	nop

08000464 <HAL_ADC_Init>:
{
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000468:	2300      	movs	r3, #0
 800046a:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 800046c:	2800      	cmp	r0, #0
 800046e:	f000 809d 	beq.w	80005ac <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000472:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000474:	f013 0310 	ands.w	r3, r3, #16
 8000478:	4604      	mov	r4, r0
 800047a:	d117      	bne.n	80004ac <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800047c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 8087 	beq.w	8000592 <HAL_ADC_Init+0x12e>
 8000484:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000486:	6891      	ldr	r1, [r2, #8]
 8000488:	00c9      	lsls	r1, r1, #3
 800048a:	d576      	bpl.n	800057a <HAL_ADC_Init+0x116>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800048c:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800048e:	008f      	lsls	r7, r1, #2
 8000490:	d473      	bmi.n	800057a <HAL_ADC_Init+0x116>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000492:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000494:	06ce      	lsls	r6, r1, #27
 8000496:	d400      	bmi.n	800049a <HAL_ADC_Init+0x36>
 8000498:	b163      	cbz	r3, 80004b4 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 800049a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800049c:	f023 0312 	bic.w	r3, r3, #18
 80004a0:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 80004a4:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80004a6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80004a8:	b017      	add	sp, #92	; 0x5c
 80004aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80004ae:	06db      	lsls	r3, r3, #27
 80004b0:	d4f3      	bmi.n	800049a <HAL_ADC_Init+0x36>
 80004b2:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004b4:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80004b6:	f010 0004 	ands.w	r0, r0, #4
 80004ba:	d1ee      	bne.n	800049a <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 80004bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80004be:	f421 7181 	bic.w	r1, r1, #258	; 0x102
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004c2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80004c6:	f041 0102 	orr.w	r1, r1, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004ca:	bf08      	it	eq
 80004cc:	4b65      	ldreq	r3, [pc, #404]	; (8000664 <HAL_ADC_Init+0x200>)
    ADC_STATE_CLR_SET(hadc->State,
 80004ce:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004d0:	bf18      	it	ne
 80004d2:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 80004d6:	9301      	str	r3, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004d8:	6893      	ldr	r3, [r2, #8]
 80004da:	f003 0303 	and.w	r3, r3, #3
 80004de:	2b01      	cmp	r3, #1
 80004e0:	f000 809c 	beq.w	800061c <HAL_ADC_Init+0x1b8>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004e4:	9901      	ldr	r1, [sp, #4]
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80004e6:	688b      	ldr	r3, [r1, #8]
 80004e8:	f003 0303 	and.w	r3, r3, #3
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d060      	beq.n	80005b2 <HAL_ADC_Init+0x14e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80004f0:	495d      	ldr	r1, [pc, #372]	; (8000668 <HAL_ADC_Init+0x204>)
 80004f2:	6865      	ldr	r5, [r4, #4]
 80004f4:	688b      	ldr	r3, [r1, #8]
 80004f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80004fa:	432b      	orrs	r3, r5
 80004fc:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80004fe:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8000500:	68e1      	ldr	r1, [r4, #12]
 8000502:	68a3      	ldr	r3, [r4, #8]
 8000504:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000506:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000508:	2f01      	cmp	r7, #1
 800050a:	ea43 0301 	orr.w	r3, r3, r1
 800050e:	bf18      	it	ne
 8000510:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8000514:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000518:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800051a:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800051e:	f000 8086 	beq.w	800062e <HAL_ADC_Init+0x1ca>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000524:	2b01      	cmp	r3, #1
 8000526:	d002      	beq.n	800052e <HAL_ADC_Init+0xca>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000528:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800052a:	430b      	orrs	r3, r1
 800052c:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800052e:	6893      	ldr	r3, [r2, #8]
 8000530:	f013 0f0c 	tst.w	r3, #12
 8000534:	d10b      	bne.n	800054e <HAL_ADC_Init+0xea>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000536:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000538:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800053a:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800053c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000540:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000542:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000546:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800054a:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800054c:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 800054e:	68d5      	ldr	r5, [r2, #12]
 8000550:	4b46      	ldr	r3, [pc, #280]	; (800066c <HAL_ADC_Init+0x208>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000552:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000554:	402b      	ands	r3, r5
 8000556:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000558:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800055a:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800055c:	d06f      	beq.n	800063e <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800055e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000560:	f023 030f 	bic.w	r3, r3, #15
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000566:	2000      	movs	r0, #0
 8000568:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800056a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800056c:	f023 0303 	bic.w	r3, r3, #3
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000576:	b017      	add	sp, #92	; 0x5c
 8000578:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800057a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800057c:	f023 0312 	bic.w	r3, r3, #18
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000586:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800058e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000590:	e783      	b.n	800049a <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 8000592:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000594:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000596:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000598:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800059c:	f004 f944 	bl	8004828 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80005a0:	6822      	ldr	r2, [r4, #0]
 80005a2:	6893      	ldr	r3, [r2, #8]
 80005a4:	00de      	lsls	r6, r3, #3
 80005a6:	d508      	bpl.n	80005ba <HAL_ADC_Init+0x156>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005a8:	462b      	mov	r3, r5
 80005aa:	e76c      	b.n	8000486 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 80005ac:	2001      	movs	r0, #1
}
 80005ae:	b017      	add	sp, #92	; 0x5c
 80005b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80005b2:	680b      	ldr	r3, [r1, #0]
 80005b4:	07d9      	lsls	r1, r3, #31
 80005b6:	d4a2      	bmi.n	80004fe <HAL_ADC_Init+0x9a>
 80005b8:	e79a      	b.n	80004f0 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 80005ba:	4620      	mov	r0, r4
 80005bc:	f7ff feac 	bl	8000318 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
        tmp_hal_status = ADC_Disable(hadc);
 80005c2:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005c4:	06d0      	lsls	r0, r2, #27
 80005c6:	f53f af5d 	bmi.w	8000484 <HAL_ADC_Init+0x20>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	f47f af5a 	bne.w	8000484 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 80005d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80005d2:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005d4:	4926      	ldr	r1, [pc, #152]	; (8000670 <HAL_ADC_Init+0x20c>)
 80005d6:	4d27      	ldr	r5, [pc, #156]	; (8000674 <HAL_ADC_Init+0x210>)
 80005d8:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80005da:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 80005de:	f020 0002 	bic.w	r0, r0, #2
 80005e2:	f040 0002 	orr.w	r0, r0, #2
 80005e6:	6460      	str	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80005e8:	6890      	ldr	r0, [r2, #8]
 80005ea:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 80005ee:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005f0:	fba5 0101 	umull	r0, r1, r5, r1
 80005f4:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80005f6:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80005fc:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80005fe:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000602:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000604:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 8000606:	9900      	ldr	r1, [sp, #0]
 8000608:	2900      	cmp	r1, #0
 800060a:	f43f af3c 	beq.w	8000486 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800060e:	9900      	ldr	r1, [sp, #0]
 8000610:	3901      	subs	r1, #1
 8000612:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 8000614:	9900      	ldr	r1, [sp, #0]
 8000616:	2900      	cmp	r1, #0
 8000618:	d1f9      	bne.n	800060e <HAL_ADC_Init+0x1aa>
 800061a:	e734      	b.n	8000486 <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	07dd      	lsls	r5, r3, #31
 8000620:	f53f af6d 	bmi.w	80004fe <HAL_ADC_Init+0x9a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000624:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000626:	2900      	cmp	r1, #0
 8000628:	f43f af62 	beq.w	80004f0 <HAL_ADC_Init+0x8c>
 800062c:	e75b      	b.n	80004e6 <HAL_ADC_Init+0x82>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800062e:	b976      	cbnz	r6, 800064e <HAL_ADC_Init+0x1ea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000632:	3b01      	subs	r3, #1
 8000634:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 8000638:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 800063c:	e771      	b.n	8000522 <HAL_ADC_Init+0xbe>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800063e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000640:	6a23      	ldr	r3, [r4, #32]
 8000642:	f021 010f 	bic.w	r1, r1, #15
 8000646:	3b01      	subs	r3, #1
 8000648:	430b      	orrs	r3, r1
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	e78b      	b.n	8000566 <HAL_ADC_Init+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 800064e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000650:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800065a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64a3      	str	r3, [r4, #72]	; 0x48
 8000662:	e75e      	b.n	8000522 <HAL_ADC_Init+0xbe>
 8000664:	50000100 	.word	0x50000100
 8000668:	50000300 	.word	0x50000300
 800066c:	fff0c007 	.word	0xfff0c007
 8000670:	20000000 	.word	0x20000000
 8000674:	431bde83 	.word	0x431bde83

08000678 <HAL_ADC_Start_DMA>:
{
 8000678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800067c:	6803      	ldr	r3, [r0, #0]
 800067e:	689c      	ldr	r4, [r3, #8]
 8000680:	f014 0404 	ands.w	r4, r4, #4
 8000684:	d003      	beq.n	800068e <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 8000686:	2402      	movs	r4, #2
}
 8000688:	4620      	mov	r0, r4
 800068a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hadc);
 800068e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000692:	2b01      	cmp	r3, #1
 8000694:	4605      	mov	r5, r0
 8000696:	d0f6      	beq.n	8000686 <HAL_ADC_Start_DMA+0xe>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000698:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8000780 <HAL_ADC_Start_DMA+0x108>
 800069c:	f8d9 6008 	ldr.w	r6, [r9, #8]
    __HAL_LOCK(hadc);
 80006a0:	2701      	movs	r7, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80006a2:	f016 061f 	ands.w	r6, r6, #31
    __HAL_LOCK(hadc);
 80006a6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80006aa:	d005      	beq.n	80006b8 <HAL_ADC_Start_DMA+0x40>
      __HAL_UNLOCK(hadc);
 80006ac:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 80006b0:	463c      	mov	r4, r7
}
 80006b2:	4620      	mov	r0, r4
 80006b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006b8:	4690      	mov	r8, r2
 80006ba:	460f      	mov	r7, r1
      tmp_hal_status = ADC_Enable(hadc);
 80006bc:	f7ff fe66 	bl	800038c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80006c0:	4604      	mov	r4, r0
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d13d      	bne.n	8000742 <HAL_ADC_Start_DMA+0xca>
        ADC_STATE_CLR_SET(hadc->State,
 80006c6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80006c8:	6829      	ldr	r1, [r5, #0]
 80006ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80006ce:	f023 0301 	bic.w	r3, r3, #1
 80006d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d6:	646b      	str	r3, [r5, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80006dc:	06d8      	lsls	r0, r3, #27
 80006de:	d033      	beq.n	8000748 <HAL_ADC_Start_DMA+0xd0>
 80006e0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80006e4:	d030      	beq.n	8000748 <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006e6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <HAL_ADC_Start_DMA+0xf8>)
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006ee:	4291      	cmp	r1, r2
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006f0:	646b      	str	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006f2:	d037      	beq.n	8000764 <HAL_ADC_Start_DMA+0xec>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006f4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006f6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80006f8:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <HAL_ADC_Start_DMA+0xfc>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006fa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006fe:	bf1c      	itt	ne
 8000700:	6cab      	ldrne	r3, [r5, #72]	; 0x48
 8000702:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8000706:	64ab      	str	r3, [r5, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 8000708:	2600      	movs	r6, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <HAL_ADC_Start_DMA+0x100>)
        __HAL_UNLOCK(hadc);
 800070c:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000710:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000712:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000714:	4a19      	ldr	r2, [pc, #100]	; (800077c <HAL_ADC_Start_DMA+0x104>)
 8000716:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000718:	231c      	movs	r3, #28
 800071a:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800071c:	684b      	ldr	r3, [r1, #4]
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000724:	68ce      	ldr	r6, [r1, #12]
 8000726:	f046 0601 	orr.w	r6, r6, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800072a:	4643      	mov	r3, r8
 800072c:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800072e:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000730:	3140      	adds	r1, #64	; 0x40
 8000732:	f000 fabb 	bl	8000cac <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000736:	682a      	ldr	r2, [r5, #0]
 8000738:	6893      	ldr	r3, [r2, #8]
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6093      	str	r3, [r2, #8]
 8000740:	e7a2      	b.n	8000688 <HAL_ADC_Start_DMA+0x10>
        __HAL_UNLOCK(hadc);
 8000742:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
 8000746:	e79f      	b.n	8000688 <HAL_ADC_Start_DMA+0x10>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000748:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800074a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800074e:	646b      	str	r3, [r5, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000750:	68cb      	ldr	r3, [r1, #12]
 8000752:	019a      	lsls	r2, r3, #6
 8000754:	d5ce      	bpl.n	80006f4 <HAL_ADC_Start_DMA+0x7c>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000756:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000758:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800075c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000760:	646b      	str	r3, [r5, #68]	; 0x44
 8000762:	e7c7      	b.n	80006f4 <HAL_ADC_Start_DMA+0x7c>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000764:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	019b      	lsls	r3, r3, #6
 800076c:	d5c2      	bpl.n	80006f4 <HAL_ADC_Start_DMA+0x7c>
 800076e:	e7f2      	b.n	8000756 <HAL_ADC_Start_DMA+0xde>
 8000770:	50000100 	.word	0x50000100
 8000774:	08000421 	.word	0x08000421
 8000778:	08000419 	.word	0x08000419
 800077c:	08000401 	.word	0x08000401
 8000780:	50000300 	.word	0x50000300

08000784 <HAL_ADCEx_Calibration_Start>:
{
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8000786:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800078a:	2b01      	cmp	r3, #1
 800078c:	d102      	bne.n	8000794 <HAL_ADCEx_Calibration_Start+0x10>
 800078e:	2502      	movs	r5, #2
}
 8000790:	4628      	mov	r0, r5
 8000792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8000794:	2701      	movs	r7, #1
 8000796:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
 800079a:	4604      	mov	r4, r0
 800079c:	460e      	mov	r6, r1
  tmp_hal_status = ADC_Disable(hadc);
 800079e:	f7ff fdbb 	bl	8000318 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80007a2:	4605      	mov	r5, r0
 80007a4:	b9f0      	cbnz	r0, 80007e4 <HAL_ADCEx_Calibration_Start+0x60>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80007a6:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80007a8:	6467      	str	r7, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80007aa:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80007ac:	42be      	cmp	r6, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80007ae:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80007b2:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80007b4:	d026      	beq.n	8000804 <HAL_ADCEx_Calibration_Start+0x80>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007bc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80007be:	f7ff fd8f 	bl	80002e0 <HAL_GetTick>
 80007c2:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80007c4:	e004      	b.n	80007d0 <HAL_ADCEx_Calibration_Start+0x4c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80007c6:	f7ff fd8b 	bl	80002e0 <HAL_GetTick>
 80007ca:	1b80      	subs	r0, r0, r6
 80007cc:	280a      	cmp	r0, #10
 80007ce:	d80e      	bhi.n	80007ee <HAL_ADCEx_Calibration_Start+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dbf6      	blt.n	80007c6 <HAL_ADCEx_Calibration_Start+0x42>
    ADC_STATE_CLR_SET(hadc->State,
 80007d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007da:	f023 0303 	bic.w	r3, r3, #3
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80007e4:	2300      	movs	r3, #0
 80007e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80007ea:	4628      	mov	r0, r5
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 80007ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007f0:	f023 0312 	bic.w	r3, r3, #18
 80007f4:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 80007f8:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 80007fa:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80007fc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8000800:	2501      	movs	r5, #1
 8000802:	e7c5      	b.n	8000790 <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	e7d3      	b.n	80007b6 <HAL_ADCEx_Calibration_Start+0x32>
 800080e:	bf00      	nop

08000810 <HAL_ADC_ConfigChannel>:
{
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000812:	4603      	mov	r3, r0
 8000814:	b097      	sub	sp, #92	; 0x5c
  __HAL_LOCK(hadc);
 8000816:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 800081a:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 800081c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 800081e:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hadc);
 8000820:	d047      	beq.n	80008b2 <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000822:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000824:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000826:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 8000828:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800082a:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 800082c:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000830:	d508      	bpl.n	8000844 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000834:	f042 0220 	orr.w	r2, r2, #32
 8000838:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8000840:	b017      	add	sp, #92	; 0x5c
 8000842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 8000844:	6848      	ldr	r0, [r1, #4]
 8000846:	2804      	cmp	r0, #4
 8000848:	d936      	bls.n	80008b8 <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 800084a:	2809      	cmp	r0, #9
 800084c:	d871      	bhi.n	8000932 <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->SQR2,
 800084e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000852:	0040      	lsls	r0, r0, #1
 8000854:	381e      	subs	r0, #30
 8000856:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000858:	680d      	ldr	r5, [r1, #0]
 800085a:	271f      	movs	r7, #31
 800085c:	4087      	lsls	r7, r0
 800085e:	ea26 0607 	bic.w	r6, r6, r7
 8000862:	fa05 f000 	lsl.w	r0, r5, r0
 8000866:	4330      	orrs	r0, r6
 8000868:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800086a:	6890      	ldr	r0, [r2, #8]
 800086c:	f010 0f0c 	tst.w	r0, #12
 8000870:	d133      	bne.n	80008da <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000872:	2d09      	cmp	r5, #9
 8000874:	d94f      	bls.n	8000916 <HAL_ADC_ConfigChannel+0x106>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000876:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800087a:	3f1e      	subs	r7, #30
 800087c:	6990      	ldr	r0, [r2, #24]
 800087e:	688e      	ldr	r6, [r1, #8]
 8000880:	f04f 0e07 	mov.w	lr, #7
 8000884:	fa0e fe07 	lsl.w	lr, lr, r7
 8000888:	ea20 000e 	bic.w	r0, r0, lr
 800088c:	40be      	lsls	r6, r7
 800088e:	4330      	orrs	r0, r6
 8000890:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000892:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8000894:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000896:	694f      	ldr	r7, [r1, #20]
 8000898:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800089c:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 800089e:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80008a0:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80008a4:	2e03      	cmp	r6, #3
 80008a6:	f200 80cf 	bhi.w	8000a48 <HAL_ADC_ConfigChannel+0x238>
 80008aa:	e8df f006 	tbb	[pc, r6]
 80008ae:	747e      	.short	0x747e
 80008b0:	606a      	.short	0x606a
  __HAL_LOCK(hadc);
 80008b2:	2002      	movs	r0, #2
}
 80008b4:	b017      	add	sp, #92	; 0x5c
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 80008b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80008bc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80008be:	680d      	ldr	r5, [r1, #0]
 80008c0:	0040      	lsls	r0, r0, #1
 80008c2:	271f      	movs	r7, #31
 80008c4:	4087      	lsls	r7, r0
 80008c6:	ea26 0607 	bic.w	r6, r6, r7
 80008ca:	fa05 f000 	lsl.w	r0, r5, r0
 80008ce:	4330      	orrs	r0, r6
 80008d0:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80008d2:	6890      	ldr	r0, [r2, #8]
 80008d4:	f010 0f0c 	tst.w	r0, #12
 80008d8:	d0cb      	beq.n	8000872 <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008da:	6890      	ldr	r0, [r2, #8]
 80008dc:	f000 0003 	and.w	r0, r0, #3
 80008e0:	2801      	cmp	r0, #1
 80008e2:	d014      	beq.n	800090e <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80008e4:	2c01      	cmp	r4, #1
 80008e6:	f000 8093 	beq.w	8000a10 <HAL_ADC_ConfigChannel+0x200>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80008ea:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80008ee:	2001      	movs	r0, #1
 80008f0:	40a8      	lsls	r0, r5
 80008f2:	ea21 0100 	bic.w	r1, r1, r0
 80008f6:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80008fa:	2d10      	cmp	r5, #16
 80008fc:	f000 8083 	beq.w	8000a06 <HAL_ADC_ConfigChannel+0x1f6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000900:	2d11      	cmp	r5, #17
 8000902:	f000 809c 	beq.w	8000a3e <HAL_ADC_ConfigChannel+0x22e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000906:	2d12      	cmp	r5, #18
 8000908:	d059      	beq.n	80009be <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800090a:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800090c:	e795      	b.n	800083a <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800090e:	6810      	ldr	r0, [r2, #0]
 8000910:	07c0      	lsls	r0, r0, #31
 8000912:	d5e7      	bpl.n	80008e4 <HAL_ADC_ConfigChannel+0xd4>
 8000914:	e7f9      	b.n	800090a <HAL_ADC_ConfigChannel+0xfa>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000916:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800091a:	6950      	ldr	r0, [r2, #20]
 800091c:	688e      	ldr	r6, [r1, #8]
 800091e:	2707      	movs	r7, #7
 8000920:	fa07 f70e 	lsl.w	r7, r7, lr
 8000924:	ea20 0007 	bic.w	r0, r0, r7
 8000928:	fa06 f60e 	lsl.w	r6, r6, lr
 800092c:	4330      	orrs	r0, r6
 800092e:	6150      	str	r0, [r2, #20]
 8000930:	e7af      	b.n	8000892 <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 8000932:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000934:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000938:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 800093c:	d80b      	bhi.n	8000956 <HAL_ADC_ConfigChannel+0x146>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800093e:	383c      	subs	r0, #60	; 0x3c
 8000940:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8000942:	680d      	ldr	r5, [r1, #0]
 8000944:	271f      	movs	r7, #31
 8000946:	4087      	lsls	r7, r0
 8000948:	ea26 0607 	bic.w	r6, r6, r7
 800094c:	fa05 f000 	lsl.w	r0, r5, r0
 8000950:	4330      	orrs	r0, r6
 8000952:	6390      	str	r0, [r2, #56]	; 0x38
 8000954:	e789      	b.n	800086a <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000956:	385a      	subs	r0, #90	; 0x5a
 8000958:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800095a:	680d      	ldr	r5, [r1, #0]
 800095c:	271f      	movs	r7, #31
 800095e:	4087      	lsls	r7, r0
 8000960:	ea26 0607 	bic.w	r6, r6, r7
 8000964:	fa05 f000 	lsl.w	r0, r5, r0
 8000968:	4330      	orrs	r0, r6
 800096a:	63d0      	str	r0, [r2, #60]	; 0x3c
 800096c:	e77d      	b.n	800086a <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800096e:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8000970:	4e6d      	ldr	r6, [pc, #436]	; (8000b28 <HAL_ADC_ConfigChannel+0x318>)
 8000972:	403e      	ands	r6, r7
 8000974:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8000978:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 800097c:	4338      	orrs	r0, r7
 800097e:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8000980:	e7ab      	b.n	80008da <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000982:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8000984:	4e68      	ldr	r6, [pc, #416]	; (8000b28 <HAL_ADC_ConfigChannel+0x318>)
 8000986:	403e      	ands	r6, r7
 8000988:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800098c:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8000990:	4338      	orrs	r0, r7
 8000992:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8000994:	e7a1      	b.n	80008da <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000996:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8000998:	4e63      	ldr	r6, [pc, #396]	; (8000b28 <HAL_ADC_ConfigChannel+0x318>)
 800099a:	403e      	ands	r6, r7
 800099c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80009a0:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80009a4:	4338      	orrs	r0, r7
 80009a6:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80009a8:	e797      	b.n	80008da <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80009aa:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80009ac:	4e5e      	ldr	r6, [pc, #376]	; (8000b28 <HAL_ADC_ConfigChannel+0x318>)
 80009ae:	403e      	ands	r6, r7
 80009b0:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80009b4:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80009b8:	4338      	orrs	r0, r7
 80009ba:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 80009bc:	e78d      	b.n	80008da <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80009be:	495b      	ldr	r1, [pc, #364]	; (8000b2c <HAL_ADC_ConfigChannel+0x31c>)
 80009c0:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80009c2:	024c      	lsls	r4, r1, #9
 80009c4:	d4a1      	bmi.n	800090a <HAL_ADC_ConfigChannel+0xfa>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009c6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80009ca:	bf0c      	ite	eq
 80009cc:	4958      	ldreq	r1, [pc, #352]	; (8000b30 <HAL_ADC_ConfigChannel+0x320>)
 80009ce:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
 80009d2:	9101      	str	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80009d4:	6891      	ldr	r1, [r2, #8]
 80009d6:	f001 0103 	and.w	r1, r1, #3
 80009da:	2901      	cmp	r1, #1
 80009dc:	d05d      	beq.n	8000a9a <HAL_ADC_ConfigChannel+0x28a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009de:	9801      	ldr	r0, [sp, #4]
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009e0:	6881      	ldr	r1, [r0, #8]
 80009e2:	f001 0103 	and.w	r1, r1, #3
 80009e6:	2901      	cmp	r1, #1
 80009e8:	d05e      	beq.n	8000aa8 <HAL_ADC_ConfigChannel+0x298>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80009ea:	2d10      	cmp	r5, #16
 80009ec:	d074      	beq.n	8000ad8 <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80009ee:	2d11      	cmp	r5, #17
 80009f0:	f000 808f 	beq.w	8000b12 <HAL_ADC_ConfigChannel+0x302>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80009f4:	2d12      	cmp	r5, #18
 80009f6:	d188      	bne.n	800090a <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80009f8:	494c      	ldr	r1, [pc, #304]	; (8000b2c <HAL_ADC_ConfigChannel+0x31c>)
 80009fa:	688a      	ldr	r2, [r1, #8]
 80009fc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000a00:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a02:	2000      	movs	r0, #0
 8000a04:	e719      	b.n	800083a <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a06:	4949      	ldr	r1, [pc, #292]	; (8000b2c <HAL_ADC_ConfigChannel+0x31c>)
 8000a08:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a0a:	020f      	lsls	r7, r1, #8
 8000a0c:	d5db      	bpl.n	80009c6 <HAL_ADC_ConfigChannel+0x1b6>
 8000a0e:	e77c      	b.n	800090a <HAL_ADC_ConfigChannel+0xfa>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000a10:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8000a14:	40ac      	lsls	r4, r5
 8000a16:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a18:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000a1a:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a1e:	d92e      	bls.n	8000a7e <HAL_ADC_ConfigChannel+0x26e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000a20:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8000a24:	688e      	ldr	r6, [r1, #8]
 8000a26:	6994      	ldr	r4, [r2, #24]
 8000a28:	f1a0 011b 	sub.w	r1, r0, #27
 8000a2c:	2707      	movs	r7, #7
 8000a2e:	408f      	lsls	r7, r1
 8000a30:	fa06 f001 	lsl.w	r0, r6, r1
 8000a34:	ea24 0107 	bic.w	r1, r4, r7
 8000a38:	4301      	orrs	r1, r0
 8000a3a:	6191      	str	r1, [r2, #24]
 8000a3c:	e75d      	b.n	80008fa <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a3e:	493b      	ldr	r1, [pc, #236]	; (8000b2c <HAL_ADC_ConfigChannel+0x31c>)
 8000a40:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000a42:	01ce      	lsls	r6, r1, #7
 8000a44:	d5bf      	bpl.n	80009c6 <HAL_ADC_ConfigChannel+0x1b6>
 8000a46:	e760      	b.n	800090a <HAL_ADC_ConfigChannel+0xfa>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a48:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8000a4a:	06a8      	lsls	r0, r5, #26
 8000a4c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a50:	4286      	cmp	r6, r0
 8000a52:	d037      	beq.n	8000ac4 <HAL_ADC_ConfigChannel+0x2b4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a54:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8000a56:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a5a:	42b0      	cmp	r0, r6
 8000a5c:	d02d      	beq.n	8000aba <HAL_ADC_ConfigChannel+0x2aa>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a5e:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8000a60:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a64:	42b0      	cmp	r0, r6
 8000a66:	d032      	beq.n	8000ace <HAL_ADC_ConfigChannel+0x2be>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a68:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 8000a6a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a6e:	42b0      	cmp	r0, r6
 8000a70:	f47f af33 	bne.w	80008da <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000a74:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8000a76:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000a7a:	66d0      	str	r0, [r2, #108]	; 0x6c
 8000a7c:	e72d      	b.n	80008da <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000a7e:	1c68      	adds	r0, r5, #1
 8000a80:	688e      	ldr	r6, [r1, #8]
 8000a82:	6954      	ldr	r4, [r2, #20]
 8000a84:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000a88:	2707      	movs	r7, #7
 8000a8a:	408f      	lsls	r7, r1
 8000a8c:	fa06 f001 	lsl.w	r0, r6, r1
 8000a90:	ea24 0107 	bic.w	r1, r4, r7
 8000a94:	4301      	orrs	r1, r0
 8000a96:	6151      	str	r1, [r2, #20]
 8000a98:	e732      	b.n	8000900 <HAL_ADC_ConfigChannel+0xf0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a9a:	6811      	ldr	r1, [r2, #0]
 8000a9c:	07c8      	lsls	r0, r1, #31
 8000a9e:	d406      	bmi.n	8000aae <HAL_ADC_ConfigChannel+0x29e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000aa0:	9801      	ldr	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d0a1      	beq.n	80009ea <HAL_ADC_ConfigChannel+0x1da>
 8000aa6:	e79b      	b.n	80009e0 <HAL_ADC_ConfigChannel+0x1d0>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000aa8:	6801      	ldr	r1, [r0, #0]
 8000aaa:	07c9      	lsls	r1, r1, #31
 8000aac:	d59d      	bpl.n	80009ea <HAL_ADC_ConfigChannel+0x1da>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ab0:	f042 0220 	orr.w	r2, r2, #32
 8000ab4:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	e6bf      	b.n	800083a <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000aba:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8000abc:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8000ac0:	6656      	str	r6, [r2, #100]	; 0x64
 8000ac2:	e7cc      	b.n	8000a5e <HAL_ADC_ConfigChannel+0x24e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000ac4:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8000ac6:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8000aca:	6616      	str	r6, [r2, #96]	; 0x60
 8000acc:	e7c2      	b.n	8000a54 <HAL_ADC_ConfigChannel+0x244>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000ace:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8000ad0:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8000ad4:	6696      	str	r6, [r2, #104]	; 0x68
 8000ad6:	e7c7      	b.n	8000a68 <HAL_ADC_ConfigChannel+0x258>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ad8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000adc:	f47f af15 	bne.w	800090a <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000ae0:	4912      	ldr	r1, [pc, #72]	; (8000b2c <HAL_ADC_ConfigChannel+0x31c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ae2:	4c14      	ldr	r4, [pc, #80]	; (8000b34 <HAL_ADC_ConfigChannel+0x324>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000ae4:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000ae8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000aec:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000aee:	220a      	movs	r2, #10
 8000af0:	6821      	ldr	r1, [r4, #0]
 8000af2:	fbb1 f1f0 	udiv	r1, r1, r0
 8000af6:	fb02 f201 	mul.w	r2, r2, r1
 8000afa:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000afc:	9a00      	ldr	r2, [sp, #0]
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	f43f af03 	beq.w	800090a <HAL_ADC_ConfigChannel+0xfa>
            wait_loop_index--;
 8000b04:	9a00      	ldr	r2, [sp, #0]
 8000b06:	3a01      	subs	r2, #1
 8000b08:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000b0a:	9a00      	ldr	r2, [sp, #0]
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	d1f9      	bne.n	8000b04 <HAL_ADC_ConfigChannel+0x2f4>
 8000b10:	e6fb      	b.n	800090a <HAL_ADC_ConfigChannel+0xfa>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000b12:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000b16:	f47f aef8 	bne.w	800090a <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000b1a:	4904      	ldr	r1, [pc, #16]	; (8000b2c <HAL_ADC_ConfigChannel+0x31c>)
 8000b1c:	688a      	ldr	r2, [r1, #8]
 8000b1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b22:	608a      	str	r2, [r1, #8]
 8000b24:	e6f1      	b.n	800090a <HAL_ADC_ConfigChannel+0xfa>
 8000b26:	bf00      	nop
 8000b28:	83fff000 	.word	0x83fff000
 8000b2c:	50000300 	.word	0x50000300
 8000b30:	50000100 	.word	0x50000100
 8000b34:	20000000 	.word	0x20000000
 8000b38:	000f4240 	.word	0x000f4240

08000b3c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b3e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b40:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000b44:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b46:	0200      	lsls	r0, r0, #8
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b54:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b56:	60d3      	str	r3, [r2, #12]
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b62:	b470      	push	{r4, r5, r6}
 8000b64:	68dc      	ldr	r4, [r3, #12]
 8000b66:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6a:	f1c4 0607 	rsb	r6, r4, #7
 8000b6e:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b70:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	bf28      	it	cs
 8000b76:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	d917      	bls.n	8000bac <HAL_NVIC_SetPriority+0x4c>
 8000b7c:	3c03      	subs	r4, #3
 8000b7e:	2501      	movs	r5, #1
 8000b80:	40a5      	lsls	r5, r4
 8000b82:	3d01      	subs	r5, #1
 8000b84:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b86:	2301      	movs	r3, #1
 8000b88:	40b3      	lsls	r3, r6
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4019      	ands	r1, r3
 8000b8e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000b90:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b92:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8000b96:	db0c      	blt.n	8000bb2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b9c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ba0:	0109      	lsls	r1, r1, #4
 8000ba2:	b2c9      	uxtb	r1, r1
 8000ba4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ba8:	bc70      	pop	{r4, r5, r6}
 8000baa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bac:	2200      	movs	r2, #0
 8000bae:	4614      	mov	r4, r2
 8000bb0:	e7e9      	b.n	8000b86 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_NVIC_SetPriority+0x68>)
 8000bb4:	f000 000f 	and.w	r0, r0, #15
 8000bb8:	0109      	lsls	r1, r1, #4
 8000bba:	4403      	add	r3, r0
 8000bbc:	b2c9      	uxtb	r1, r1
 8000bbe:	7619      	strb	r1, [r3, #24]
 8000bc0:	bc70      	pop	{r4, r5, r6}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	e000ecfc 	.word	0xe000ecfc

08000bcc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bcc:	f000 011f 	and.w	r1, r0, #31
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	0940      	lsrs	r0, r0, #5
 8000bd4:	4a02      	ldr	r2, [pc, #8]	; (8000be0 <HAL_NVIC_EnableIRQ+0x14>)
 8000bd6:	408b      	lsls	r3, r1
 8000bd8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	3801      	subs	r0, #1
 8000be6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bea:	d20e      	bcs.n	8000c0a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	4c08      	ldr	r4, [pc, #32]	; (8000c14 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	20f0      	movs	r0, #240	; 0xf0
 8000bf6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfe:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000c1a:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c1c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c1e:	bf0c      	ite	eq
 8000c20:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c24:	f023 0304 	bicne.w	r3, r3, #4
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <HAL_SYSTICK_IRQHandler>:
{
 8000c34:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c36:	f7ff fffb 	bl	8000c30 <HAL_SYSTICK_Callback>
 8000c3a:	bd08      	pop	{r3, pc}

08000c3c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d02d      	beq.n	8000c9c <HAL_DMA_Init+0x60>
{ 
 8000c40:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c42:	6842      	ldr	r2, [r0, #4]
 8000c44:	6887      	ldr	r7, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c46:	68c6      	ldr	r6, [r0, #12]
 8000c48:	6904      	ldr	r4, [r0, #16]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c4a:	4915      	ldr	r1, [pc, #84]	; (8000ca0 <HAL_DMA_Init+0x64>)
 8000c4c:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000c4e:	433a      	orrs	r2, r7
  tmp = hdma->Instance->CCR;
 8000c50:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c52:	695d      	ldr	r5, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c54:	4f13      	ldr	r7, [pc, #76]	; (8000ca4 <HAL_DMA_Init+0x68>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c56:	4332      	orrs	r2, r6
 8000c58:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c5a:	699e      	ldr	r6, [r3, #24]
  tmp = hdma->Instance->CCR;
 8000c5c:	6804      	ldr	r4, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c5e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c60:	69dd      	ldr	r5, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c62:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c64:	4401      	add	r1, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c66:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c6a:	fba7 6101 	umull	r6, r1, r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c6e:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c70:	f024 0430 	bic.w	r4, r4, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000c74:	4322      	orrs	r2, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c76:	0909      	lsrs	r1, r1, #4
  hdma->Instance->CCR = tmp;  
 8000c78:	6002      	str	r2, [r0, #0]
  hdma->DmaBaseAddress = DMA1;
 8000c7a:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <HAL_DMA_Init+0x6c>)
 8000c7c:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000c7e:	2000      	movs	r0, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c80:	0089      	lsls	r1, r1, #2
  hdma->State = HAL_DMA_STATE_READY;
 8000c82:	2201      	movs	r2, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c84:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->XferCpltCallback = NULL;
 8000c86:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000c88:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000c8a:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000c8c:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c8e:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000c90:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8000c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}  
 8000c98:	bcf0      	pop	{r4, r5, r6, r7}
 8000c9a:	4770      	bx	lr
    return HAL_ERROR;
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4770      	bx	lr
 8000ca0:	bffdfff8 	.word	0xbffdfff8
 8000ca4:	cccccccd 	.word	0xcccccccd
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_DMA_Start_IT>:
{
 8000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000cae:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000cb2:	2c01      	cmp	r4, #1
 8000cb4:	d00b      	beq.n	8000cce <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cb6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000cba:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cbc:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8000cbe:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cc2:	d006      	beq.n	8000cd2 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8000cca:	2002      	movs	r0, #2
 8000ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8000cce:	2002      	movs	r0, #2
} 
 8000cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cd2:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cd4:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8000cd6:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cda:	2600      	movs	r6, #0
 8000cdc:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cde:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ce0:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ce2:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ce6:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ce8:	f04f 0c02 	mov.w	ip, #2
 8000cec:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cf0:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cf2:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 8000cf6:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8000cf8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cfa:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8000cfc:	bf0b      	itete	eq
 8000cfe:	60aa      	streq	r2, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000d00:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000d02:	60e9      	streq	r1, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 8000d04:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000d06:	b14b      	cbz	r3, 8000d1c <HAL_DMA_Start_IT+0x70>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d08:	682b      	ldr	r3, [r5, #0]
 8000d0a:	f043 030e 	orr.w	r3, r3, #14
 8000d0e:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d10:	682b      	ldr	r3, [r5, #0]
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d18:	2000      	movs	r0, #0
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	f043 030a 	orr.w	r3, r3, #10
 8000d22:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d24:	682b      	ldr	r3, [r5, #0]
 8000d26:	f023 0304 	bic.w	r3, r3, #4
 8000d2a:	602b      	str	r3, [r5, #0]
 8000d2c:	e7f0      	b.n	8000d10 <HAL_DMA_Start_IT+0x64>
 8000d2e:	bf00      	nop

08000d30 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d30:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000d34:	2a02      	cmp	r2, #2
{  
 8000d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d38:	d003      	beq.n	8000d42 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000d3e:	2001      	movs	r0, #1
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d42:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d44:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d46:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d48:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8000d4a:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d4c:	f024 040e 	bic.w	r4, r4, #14
 8000d50:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d52:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d54:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d56:	f024 0401 	bic.w	r4, r4, #1
 8000d5a:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d5c:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 8000d60:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d62:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d64:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000d68:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000d6c:	b116      	cbz	r6, 8000d74 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8000d6e:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	4620      	mov	r0, r4
 8000d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d74:	4630      	mov	r0, r6
}
 8000d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d78 <HAL_DMA_IRQHandler>:
{
 8000d78:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d7a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d7e:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d80:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d82:	2304      	movs	r3, #4
 8000d84:	4093      	lsls	r3, r2
 8000d86:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 8000d88:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d8a:	d00d      	beq.n	8000da8 <HAL_DMA_IRQHandler+0x30>
 8000d8c:	0777      	lsls	r7, r6, #29
 8000d8e:	d50b      	bpl.n	8000da8 <HAL_DMA_IRQHandler+0x30>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d90:	6822      	ldr	r2, [r4, #0]
 8000d92:	0692      	lsls	r2, r2, #26
 8000d94:	d403      	bmi.n	8000d9e <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d96:	6822      	ldr	r2, [r4, #0]
 8000d98:	f022 0204 	bic.w	r2, r2, #4
 8000d9c:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d9e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000da0:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000da2:	b1c2      	cbz	r2, 8000dd6 <HAL_DMA_IRQHandler+0x5e>
}  
 8000da4:	bcf0      	pop	{r4, r5, r6, r7}
  		hdma->XferCpltCallback(hdma);
 8000da6:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000da8:	2302      	movs	r3, #2
 8000daa:	4093      	lsls	r3, r2
 8000dac:	4219      	tst	r1, r3
 8000dae:	d014      	beq.n	8000dda <HAL_DMA_IRQHandler+0x62>
 8000db0:	07b7      	lsls	r7, r6, #30
 8000db2:	d512      	bpl.n	8000dda <HAL_DMA_IRQHandler+0x62>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000db4:	6822      	ldr	r2, [r4, #0]
 8000db6:	0692      	lsls	r2, r2, #26
 8000db8:	d406      	bmi.n	8000dc8 <HAL_DMA_IRQHandler+0x50>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000dba:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000dbe:	f022 020a 	bic.w	r2, r2, #10
 8000dc2:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000dc4:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8000dc8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000dca:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d1e6      	bne.n	8000da4 <HAL_DMA_IRQHandler+0x2c>
}  
 8000dd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000dd8:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dda:	2308      	movs	r3, #8
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	420b      	tst	r3, r1
 8000de0:	d0f9      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0x5e>
 8000de2:	0733      	lsls	r3, r6, #28
 8000de4:	d5f7      	bpl.n	8000dd6 <HAL_DMA_IRQHandler+0x5e>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000de6:	6821      	ldr	r1, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8000de8:	6b06      	ldr	r6, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dea:	2301      	movs	r3, #1
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dec:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000df0:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8000df4:	2700      	movs	r7, #0
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000df6:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000df8:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dfa:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000dfc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000e00:	f880 7020 	strb.w	r7, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000e04:	2e00      	cmp	r6, #0
 8000e06:	d0e6      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0x5e>
    	hdma->XferErrorCallback(hdma);
 8000e08:	4633      	mov	r3, r6
}  
 8000e0a:	bcf0      	pop	{r4, r5, r6, r7}
    	hdma->XferErrorCallback(hdma);
 8000e0c:	4718      	bx	r3
 8000e0e:	bf00      	nop

08000e10 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <FLASH_SetErrorCode+0x34>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f013 0310 	ands.w	r3, r3, #16
 8000e18:	d005      	beq.n	8000e26 <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <FLASH_SetErrorCode+0x38>)
 8000e1c:	69d3      	ldr	r3, [r2, #28]
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000e24:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <FLASH_SetErrorCode+0x34>)
 8000e28:	68d2      	ldr	r2, [r2, #12]
 8000e2a:	0752      	lsls	r2, r2, #29
 8000e2c:	d506      	bpl.n	8000e3c <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e2e:	4906      	ldr	r1, [pc, #24]	; (8000e48 <FLASH_SetErrorCode+0x38>)
 8000e30:	69ca      	ldr	r2, [r1, #28]
 8000e32:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8000e36:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e3a:	61ca      	str	r2, [r1, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e3c:	4a01      	ldr	r2, [pc, #4]	; (8000e44 <FLASH_SetErrorCode+0x34>)
 8000e3e:	60d3      	str	r3, [r2, #12]
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40022000 	.word	0x40022000
 8000e48:	20000308 	.word	0x20000308

08000e4c <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_FLASH_Unlock+0x18>)
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	0612      	lsls	r2, r2, #24
 8000e52:	d505      	bpl.n	8000e60 <HAL_FLASH_Unlock+0x14>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e54:	4904      	ldr	r1, [pc, #16]	; (8000e68 <HAL_FLASH_Unlock+0x1c>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e58:	6059      	str	r1, [r3, #4]
  return HAL_OK; 
 8000e5a:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e5c:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8000e5e:	4770      	bx	lr
    return HAL_ERROR;
 8000e60:	2001      	movs	r0, #1
}
 8000e62:	4770      	bx	lr
 8000e64:	40022000 	.word	0x40022000
 8000e68:	45670123 	.word	0x45670123
 8000e6c:	cdef89ab 	.word	0xcdef89ab

08000e70 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_FLASH_Lock+0x10>)
 8000e72:	6913      	ldr	r3, [r2, #16]
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	6113      	str	r3, [r2, #16]
}
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000

08000e84 <FLASH_WaitForLastOperation>:
{
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff fa2a 	bl	80002e0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e8c:	4c10      	ldr	r4, [pc, #64]	; (8000ed0 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8000e8e:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e90:	e001      	b.n	8000e96 <FLASH_WaitForLastOperation+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8000e92:	1c6b      	adds	r3, r5, #1
 8000e94:	d113      	bne.n	8000ebe <FLASH_WaitForLastOperation+0x3a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e96:	68e3      	ldr	r3, [r4, #12]
 8000e98:	07d8      	lsls	r0, r3, #31
 8000e9a:	d4fa      	bmi.n	8000e92 <FLASH_WaitForLastOperation+0xe>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e9c:	68e3      	ldr	r3, [r4, #12]
 8000e9e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ea0:	bf44      	itt	mi
 8000ea2:	2320      	movmi	r3, #32
 8000ea4:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <FLASH_WaitForLastOperation+0x4c>)
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	06d2      	lsls	r2, r2, #27
 8000eac:	d403      	bmi.n	8000eb6 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000eae:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000eb0:	f010 0004 	ands.w	r0, r0, #4
 8000eb4:	d002      	beq.n	8000ebc <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8000eb6:	f7ff ffab 	bl	8000e10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000eba:	2001      	movs	r0, #1
}
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ebe:	b125      	cbz	r5, 8000eca <FLASH_WaitForLastOperation+0x46>
 8000ec0:	f7ff fa0e 	bl	80002e0 <HAL_GetTick>
 8000ec4:	1b80      	subs	r0, r0, r6
 8000ec6:	4285      	cmp	r5, r0
 8000ec8:	d2e5      	bcs.n	8000e96 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8000eca:	2003      	movs	r0, #3
 8000ecc:	bd70      	pop	{r4, r5, r6, pc}
 8000ece:	bf00      	nop
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_FLASH_Program>:
{
 8000ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000ed8:	4f26      	ldr	r7, [pc, #152]	; (8000f74 <HAL_FLASH_Program+0xa0>)
 8000eda:	7e3c      	ldrb	r4, [r7, #24]
 8000edc:	2c01      	cmp	r4, #1
 8000ede:	d102      	bne.n	8000ee6 <HAL_FLASH_Program+0x12>
 8000ee0:	2002      	movs	r0, #2
}
 8000ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ee6:	461e      	mov	r6, r3
 8000ee8:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8000eea:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ef0:	4690      	mov	r8, r2
 8000ef2:	468b      	mov	fp, r1
  __HAL_LOCK(&pFlash);
 8000ef4:	763b      	strb	r3, [r7, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ef6:	f7ff ffc5 	bl	8000e84 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000efa:	bba8      	cbnz	r0, 8000f68 <HAL_FLASH_Program+0x94>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000efc:	2c01      	cmp	r4, #1
 8000efe:	d037      	beq.n	8000f70 <HAL_FLASH_Program+0x9c>
      nbiterations = 4U;
 8000f00:	2c02      	cmp	r4, #2
 8000f02:	bf0c      	ite	eq
 8000f04:	2002      	moveq	r0, #2
 8000f06:	2004      	movne	r0, #4
 8000f08:	3801      	subs	r0, #1
 8000f0a:	b2c0      	uxtb	r0, r0
 8000f0c:	f10b 0902 	add.w	r9, fp, #2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f10:	f8df a064 	ldr.w	sl, [pc, #100]	; 8000f78 <HAL_FLASH_Program+0xa4>
      nbiterations = 4U;
 8000f14:	2500      	movs	r5, #0
 8000f16:	eb09 0940 	add.w	r9, r9, r0, lsl #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f1a:	f1c5 0220 	rsb	r2, r5, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f22:	fa06 f202 	lsl.w	r2, r6, r2
 8000f26:	fa28 f005 	lsr.w	r0, r8, r5
 8000f2a:	f1a5 0120 	sub.w	r1, r5, #32
 8000f2e:	4310      	orrs	r0, r2
 8000f30:	fa26 f101 	lsr.w	r1, r6, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f34:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f38:	4308      	orrs	r0, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f3e:	b284      	uxth	r4, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f40:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f44:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8000f48:	f8ab 4000 	strh.w	r4, [fp]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f4c:	f7ff ff9a 	bl	8000e84 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f50:	f8da 2010 	ldr.w	r2, [sl, #16]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	f10b 0b02 	add.w	fp, fp, #2
 8000f5c:	3510      	adds	r5, #16
 8000f5e:	f8ca 2010 	str.w	r2, [sl, #16]
      if (status != HAL_OK)
 8000f62:	b908      	cbnz	r0, 8000f68 <HAL_FLASH_Program+0x94>
    for (index = 0U; index < nbiterations; index++)
 8000f64:	45cb      	cmp	fp, r9
 8000f66:	d1d8      	bne.n	8000f1a <HAL_FLASH_Program+0x46>
  __HAL_UNLOCK(&pFlash);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	763b      	strb	r3, [r7, #24]
  return status;
 8000f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nbiterations = 1U;
 8000f70:	4620      	mov	r0, r4
 8000f72:	e7c9      	b.n	8000f08 <HAL_FLASH_Program+0x34>
 8000f74:	20000308 	.word	0x20000308
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f7e:	6809      	ldr	r1, [r1, #0]
 8000f80:	2900      	cmp	r1, #0
 8000f82:	f000 80d9 	beq.w	8001138 <HAL_GPIO_Init+0x1bc>
{
 8000f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8a:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800114c <HAL_GPIO_Init+0x1d0>
{
 8000f8e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f90:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f92:	f04f 0801 	mov.w	r8, #1
 8000f96:	e079      	b.n	800108c <HAL_GPIO_Init+0x110>
 8000f98:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9c:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000f9e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa2:	fa03 f309 	lsl.w	r3, r3, r9
 8000fa6:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fac:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb0:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb8:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fbc:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000fc0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc2:	f240 8098 	bls.w	80010f6 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8000fc6:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fcc:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fce:	fa02 f209 	lsl.w	r2, r2, r9
 8000fd2:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd4:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8000fd6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd8:	d554      	bpl.n	8001084 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b58      	ldr	r3, [pc, #352]	; (800113c <HAL_GPIO_Init+0x1c0>)
 8000fdc:	4a57      	ldr	r2, [pc, #348]	; (800113c <HAL_GPIO_Init+0x1c0>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	6993      	ldr	r3, [r2, #24]
 8000fe8:	f025 0603 	bic.w	r6, r5, #3
 8000fec:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000ff8:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000ffa:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001000:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	f04f 090f 	mov.w	r9, #15
 8001008:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800100c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001010:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001014:	f000 8086 	beq.w	8001124 <HAL_GPIO_Init+0x1a8>
 8001018:	4a49      	ldr	r2, [pc, #292]	; (8001140 <HAL_GPIO_Init+0x1c4>)
 800101a:	4290      	cmp	r0, r2
 800101c:	f000 8084 	beq.w	8001128 <HAL_GPIO_Init+0x1ac>
 8001020:	4a48      	ldr	r2, [pc, #288]	; (8001144 <HAL_GPIO_Init+0x1c8>)
 8001022:	4290      	cmp	r0, r2
 8001024:	f000 8083 	beq.w	800112e <HAL_GPIO_Init+0x1b2>
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <HAL_GPIO_Init+0x1cc>)
 800102a:	4290      	cmp	r0, r2
 800102c:	bf0b      	itete	eq
 800102e:	f04f 0903 	moveq.w	r9, #3
 8001032:	2205      	movne	r2, #5
 8001034:	fa09 f303 	lsleq.w	r3, r9, r3
 8001038:	fa02 f303 	lslne.w	r3, r2, r3
 800103c:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001040:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8001042:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001046:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001048:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 800104a:	bf54      	ite	pl
 800104c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800104e:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8001050:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001054:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001058:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 800105a:	bf54      	ite	pl
 800105c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800105e:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8001060:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001064:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001068:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 800106a:	bf54      	ite	pl
 800106c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800106e:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8001070:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001074:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001078:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800107a:	bf54      	ite	pl
 800107c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800107e:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8001080:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001084:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001086:	fa31 f305 	lsrs.w	r3, r1, r5
 800108a:	d048      	beq.n	800111e <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800108c:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8001090:	ea12 0701 	ands.w	r7, r2, r1
 8001094:	d0f6      	beq.n	8001084 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001096:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800109a:	f024 0a10 	bic.w	sl, r4, #16
 800109e:	f1ba 0f02 	cmp.w	sl, #2
 80010a2:	f47f af79 	bne.w	8000f98 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 80010a6:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80010aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ae:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 80010b2:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	f04f 0a0f 	mov.w	sl, #15
 80010bc:	fa0a fb03 	lsl.w	fp, sl, r3
 80010c0:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c4:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80010c8:	fa06 f303 	lsl.w	r3, r6, r3
 80010cc:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 80010d0:	f8c9 3020 	str.w	r3, [r9, #32]
 80010d4:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d8:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80010da:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010de:	fa03 f309 	lsl.w	r3, r3, r9
 80010e2:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e8:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	fa06 f609 	lsl.w	r6, r6, r9
 80010f0:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 80010f4:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80010f6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f8:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fc:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001100:	fa06 f609 	lsl.w	r6, r6, r9
 8001104:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001108:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800110a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800110e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001112:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001116:	40ae      	lsls	r6, r5
 8001118:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800111a:	6046      	str	r6, [r0, #4]
 800111c:	e753      	b.n	8000fc6 <HAL_GPIO_Init+0x4a>
  }
}
 800111e:	b003      	add	sp, #12
 8001120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001124:	2300      	movs	r3, #0
 8001126:	e789      	b.n	800103c <HAL_GPIO_Init+0xc0>
 8001128:	fa08 f303 	lsl.w	r3, r8, r3
 800112c:	e786      	b.n	800103c <HAL_GPIO_Init+0xc0>
 800112e:	f04f 0902 	mov.w	r9, #2
 8001132:	fa09 f303 	lsl.w	r3, r9, r3
 8001136:	e781      	b.n	800103c <HAL_GPIO_Init+0xc0>
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001150:	6903      	ldr	r3, [r0, #16]
 8001152:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001154:	bf14      	ite	ne
 8001156:	2001      	movne	r0, #1
 8001158:	2000      	moveq	r0, #0
 800115a:	4770      	bx	lr

0800115c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	b90a      	cbnz	r2, 8001162 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115e:	6281      	str	r1, [r0, #40]	; 0x28
 8001160:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	6181      	str	r1, [r0, #24]
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800116a:	6951      	ldr	r1, [r2, #20]
 800116c:	4201      	tst	r1, r0
 800116e:	d100      	bne.n	8001172 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001170:	4770      	bx	lr
{
 8001172:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001174:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001176:	f002 fbef 	bl	8003958 <HAL_GPIO_EXTI_Callback>
 800117a:	bd08      	pop	{r3, pc}
 800117c:	40010400 	.word	0x40010400

08001180 <I2C_Disable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001180:	f011 0301 	ands.w	r3, r1, #1
 8001184:	d007      	beq.n	8001196 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001186:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800118a:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800118e:	2b28      	cmp	r3, #40	; 0x28
 8001190:	bf0c      	ite	eq
 8001192:	2342      	moveq	r3, #66	; 0x42
 8001194:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001196:	078a      	lsls	r2, r1, #30
 8001198:	d509      	bpl.n	80011ae <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800119a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800119e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80011a2:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80011a4:	bf0c      	ite	eq
 80011a6:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80011aa:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80011ae:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80011b0:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80011b4:	bf48      	it	mi
 80011b6:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80011ba:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80011be:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80011c0:	bf08      	it	eq
 80011c2:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80011c6:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80011c8:	6801      	ldr	r1, [r0, #0]
 80011ca:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 80011cc:	bf08      	it	eq
 80011ce:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80011d2:	ea22 0303 	bic.w	r3, r2, r3
 80011d6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 80011d8:	2000      	movs	r0, #0
 80011da:	4770      	bx	lr

080011dc <I2C_WaitOnFlagUntilTimeout>:
{
 80011dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e0:	4680      	mov	r8, r0
 80011e2:	460f      	mov	r7, r1
 80011e4:	4616      	mov	r6, r2
 80011e6:	461d      	mov	r5, r3
 80011e8:	f8d8 4000 	ldr.w	r4, [r8]
 80011ec:	e001      	b.n	80011f2 <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 80011ee:	1c6b      	adds	r3, r5, #1
 80011f0:	d10a      	bne.n	8001208 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011f2:	69a0      	ldr	r0, [r4, #24]
 80011f4:	ea37 0300 	bics.w	r3, r7, r0
 80011f8:	bf0c      	ite	eq
 80011fa:	2001      	moveq	r0, #1
 80011fc:	2000      	movne	r0, #0
 80011fe:	42b0      	cmp	r0, r6
 8001200:	d0f5      	beq.n	80011ee <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8001202:	2000      	movs	r0, #0
}
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001208:	b12d      	cbz	r5, 8001216 <I2C_WaitOnFlagUntilTimeout+0x3a>
 800120a:	f7ff f869 	bl	80002e0 <HAL_GetTick>
 800120e:	9b06      	ldr	r3, [sp, #24]
 8001210:	1ac0      	subs	r0, r0, r3
 8001212:	4285      	cmp	r5, r0
 8001214:	d2e8      	bcs.n	80011e8 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001216:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001218:	2220      	movs	r2, #32
 800121a:	f888 2041 	strb.w	r2, [r8, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800121e:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001222:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        return HAL_TIMEOUT;
 8001226:	2003      	movs	r0, #3
 8001228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800122c <I2C_IsAcknowledgeFailed.part.0>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	4605      	mov	r5, r0
 8001230:	460c      	mov	r4, r1
 8001232:	4616      	mov	r6, r2
 8001234:	6828      	ldr	r0, [r5, #0]
 8001236:	e001      	b.n	800123c <I2C_IsAcknowledgeFailed.part.0+0x10>
      if (Timeout != HAL_MAX_DELAY)
 8001238:	1c63      	adds	r3, r4, #1
 800123a:	d122      	bne.n	8001282 <I2C_IsAcknowledgeFailed.part.0+0x56>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800123c:	6983      	ldr	r3, [r0, #24]
 800123e:	0699      	lsls	r1, r3, #26
 8001240:	d5fa      	bpl.n	8001238 <I2C_IsAcknowledgeFailed.part.0+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001242:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001244:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001246:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001248:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800124a:	6983      	ldr	r3, [r0, #24]
 800124c:	079a      	lsls	r2, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800124e:	bf44      	itt	mi
 8001250:	2300      	movmi	r3, #0
 8001252:	6283      	strmi	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001254:	6983      	ldr	r3, [r0, #24]
 8001256:	07db      	lsls	r3, r3, #31
 8001258:	d403      	bmi.n	8001262 <I2C_IsAcknowledgeFailed.part.0+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800125a:	6983      	ldr	r3, [r0, #24]
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8001262:	6843      	ldr	r3, [r0, #4]
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <I2C_IsAcknowledgeFailed.part.0+0x78>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001266:	2404      	movs	r4, #4
    I2C_RESET_CR2(hi2c);
 8001268:	4013      	ands	r3, r2
    hi2c->State = HAL_I2C_STATE_READY;
 800126a:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800126c:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 800126e:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001270:	646c      	str	r4, [r5, #68]	; 0x44
    return HAL_ERROR;
 8001272:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_READY;
 8001274:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001278:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800127c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8001280:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001282:	b124      	cbz	r4, 800128e <I2C_IsAcknowledgeFailed.part.0+0x62>
 8001284:	f7ff f82c 	bl	80002e0 <HAL_GetTick>
 8001288:	1b80      	subs	r0, r0, r6
 800128a:	4284      	cmp	r4, r0
 800128c:	d2d2      	bcs.n	8001234 <I2C_IsAcknowledgeFailed.part.0+0x8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800128e:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8001290:	2220      	movs	r2, #32
 8001292:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8001296:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800129a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          return HAL_TIMEOUT;
 800129e:	2003      	movs	r0, #3
 80012a0:	bd70      	pop	{r4, r5, r6, pc}
 80012a2:	bf00      	nop
 80012a4:	fe00e800 	.word	0xfe00e800

080012a8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	4605      	mov	r5, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012b0:	e001      	b.n	80012b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80012b2:	1c61      	adds	r1, r4, #1
 80012b4:	d111      	bne.n	80012da <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	699a      	ldr	r2, [r3, #24]
 80012ba:	0792      	lsls	r2, r2, #30
 80012bc:	d40b      	bmi.n	80012d6 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	06d8      	lsls	r0, r3, #27
 80012c2:	d5f6      	bpl.n	80012b2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 80012c4:	4632      	mov	r2, r6
 80012c6:	4621      	mov	r1, r4
 80012c8:	4628      	mov	r0, r5
 80012ca:	f7ff ffaf 	bl	800122c <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d0ef      	beq.n	80012b2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 80012d2:	2001      	movs	r0, #1
}
 80012d4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80012d6:	2000      	movs	r0, #0
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012da:	b124      	cbz	r4, 80012e6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80012dc:	f7ff f800 	bl	80002e0 <HAL_GetTick>
 80012e0:	1b80      	subs	r0, r0, r6
 80012e2:	4284      	cmp	r4, r0
 80012e4:	d2e7      	bcs.n	80012b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012e6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012e8:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ea:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ec:	430b      	orrs	r3, r1
 80012ee:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80012f0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80012f4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80012f8:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fa:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 80012fe:	bd70      	pop	{r4, r5, r6, pc}

08001300 <I2C_RequestMemoryWrite>:
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpreg = hi2c->Instance->CR2;
 8001302:	6806      	ldr	r6, [r0, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001304:	f8df e074 	ldr.w	lr, [pc, #116]	; 800137c <I2C_RequestMemoryWrite+0x7c>
  tmpreg = hi2c->Instance->CR2;
 8001308:	6874      	ldr	r4, [r6, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800130a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800130e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001312:	ea04 040e 	and.w	r4, r4, lr
 8001316:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
{
 800131a:	b083      	sub	sp, #12
 800131c:	4321      	orrs	r1, r4
 800131e:	461f      	mov	r7, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001320:	b2db      	uxtb	r3, r3
 8001322:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 8001326:	4614      	mov	r4, r2
  hi2c->Instance->CR2 = tmpreg;
 8001328:	6071      	str	r1, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800132a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800132c:	9908      	ldr	r1, [sp, #32]
{
 800132e:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001330:	f7ff ffba 	bl	80012a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001334:	b950      	cbnz	r0, 800134c <I2C_RequestMemoryWrite+0x4c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001336:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001338:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800133a:	d00e      	beq.n	800135a <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800133c:	0a22      	lsrs	r2, r4, #8
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001340:	9908      	ldr	r1, [sp, #32]
 8001342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001344:	4628      	mov	r0, r5
 8001346:	f7ff ffaf 	bl	80012a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800134a:	b128      	cbz	r0, 8001358 <I2C_RequestMemoryWrite+0x58>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800134c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800134e:	2b04      	cmp	r3, #4
 8001350:	d011      	beq.n	8001376 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001352:	2003      	movs	r0, #3
}
 8001354:	b003      	add	sp, #12
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	b2e4      	uxtb	r4, r4
 800135c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800135e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	4628      	mov	r0, r5
 8001364:	9b08      	ldr	r3, [sp, #32]
 8001366:	2200      	movs	r2, #0
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	f7ff ff37 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
 800136e:	2800      	cmp	r0, #0
 8001370:	d1ef      	bne.n	8001352 <I2C_RequestMemoryWrite+0x52>
}
 8001372:	b003      	add	sp, #12
 8001374:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001376:	2001      	movs	r0, #1
}
 8001378:	b003      	add	sp, #12
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137c:	fc009800 	.word	0xfc009800

08001380 <I2C_RequestMemoryRead>:
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpreg = hi2c->Instance->CR2;
 8001382:	6806      	ldr	r6, [r0, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001384:	f8df e070 	ldr.w	lr, [pc, #112]	; 80013f8 <I2C_RequestMemoryRead+0x78>
  tmpreg = hi2c->Instance->CR2;
 8001388:	6874      	ldr	r4, [r6, #4]
 800138a:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800138e:	ea04 040e 	and.w	r4, r4, lr
 8001392:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
{
 8001396:	b083      	sub	sp, #12
 8001398:	4321      	orrs	r1, r4
 800139a:	461f      	mov	r7, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800139c:	b2db      	uxtb	r3, r3
 800139e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 80013a2:	4614      	mov	r4, r2
  hi2c->Instance->CR2 = tmpreg;
 80013a4:	6071      	str	r1, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013a8:	9908      	ldr	r1, [sp, #32]
{
 80013aa:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ac:	f7ff ff7c 	bl	80012a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80013b0:	b950      	cbnz	r0, 80013c8 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013b2:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013b4:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013b6:	d00e      	beq.n	80013d6 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013b8:	0a22      	lsrs	r2, r4, #8
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013bc:	9908      	ldr	r1, [sp, #32]
 80013be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013c0:	4628      	mov	r0, r5
 80013c2:	f7ff ff71 	bl	80012a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80013c6:	b128      	cbz	r0, 80013d4 <I2C_RequestMemoryRead+0x54>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d011      	beq.n	80013f2 <I2C_RequestMemoryRead+0x72>
      return HAL_TIMEOUT;
 80013ce:	2003      	movs	r0, #3
}
 80013d0:	b003      	add	sp, #12
 80013d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	b2e4      	uxtb	r4, r4
 80013d8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80013da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	4628      	mov	r0, r5
 80013e0:	9b08      	ldr	r3, [sp, #32]
 80013e2:	2200      	movs	r2, #0
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	f7ff fef9 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d1ef      	bne.n	80013ce <I2C_RequestMemoryRead+0x4e>
}
 80013ee:	b003      	add	sp, #12
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80013f2:	2001      	movs	r0, #1
}
 80013f4:	b003      	add	sp, #12
 80013f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f8:	fc009800 	.word	0xfc009800

080013fc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80013fc:	b570      	push	{r4, r5, r6, lr}
 80013fe:	4605      	mov	r5, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	0692      	lsls	r2, r2, #26
 800140a:	d41e      	bmi.n	800144a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	06d9      	lsls	r1, r3, #27
 8001410:	d412      	bmi.n	8001438 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001412:	b124      	cbz	r4, 800141e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8001414:	f7fe ff64 	bl	80002e0 <HAL_GetTick>
 8001418:	1b80      	subs	r0, r0, r6
 800141a:	4284      	cmp	r4, r0
 800141c:	d2f2      	bcs.n	8001404 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800141e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001420:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001422:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001424:	430b      	orrs	r3, r1
 8001426:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001428:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800142c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001430:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001432:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	4632      	mov	r2, r6
 800143a:	4621      	mov	r1, r4
 800143c:	4628      	mov	r0, r5
 800143e:	f7ff fef5 	bl	800122c <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001442:	2800      	cmp	r0, #0
 8001444:	d0e5      	beq.n	8001412 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
      return HAL_ERROR;
 8001446:	2001      	movs	r0, #1
}
 8001448:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800144a:	2000      	movs	r0, #0
 800144c:	bd70      	pop	{r4, r5, r6, pc}
 800144e:	bf00      	nop

08001450 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001450:	2800      	cmp	r0, #0
 8001452:	d051      	beq.n	80014f8 <HAL_I2C_Init+0xa8>
{
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001456:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800145a:	4604      	mov	r4, r0
 800145c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001460:	2b00      	cmp	r3, #0
 8001462:	d040      	beq.n	80014e6 <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 8001464:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001466:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001468:	2224      	movs	r2, #36	; 0x24
 800146a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800146e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001470:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8001472:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001476:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800147a:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800147c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800147e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001480:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001486:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001488:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800148a:	d031      	beq.n	80014f0 <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800148c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001490:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001492:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001494:	bf04      	itt	eq
 8001496:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800149a:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800149c:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800149e:	6922      	ldr	r2, [r4, #16]
 80014a0:	f8d4 e014 	ldr.w	lr, [r4, #20]
 80014a4:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014a6:	69e0      	ldr	r0, [r4, #28]
 80014a8:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014aa:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80014ae:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80014b2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014b4:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014b6:	ea42 020e 	orr.w	r2, r2, lr
 80014ba:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014be:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014c0:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 80014c4:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014c8:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80014ca:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 80014ce:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80014d4:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 80014d6:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d8:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014da:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014de:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 80014e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80014e6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80014ea:	f003 f9ef 	bl	80048cc <HAL_I2C_MspInit>
 80014ee:	e7b9      	b.n	8001464 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	e7d1      	b.n	800149c <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 80014f8:	2001      	movs	r0, #1
 80014fa:	4770      	bx	lr

080014fc <HAL_I2C_Mem_Write>:
{
 80014fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001500:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8001504:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001506:	2c20      	cmp	r4, #32
{
 8001508:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800150c:	d003      	beq.n	8001516 <HAL_I2C_Mem_Write+0x1a>
    return HAL_BUSY;
 800150e:	2002      	movs	r0, #2
}
 8001510:	b002      	add	sp, #8
 8001512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8001516:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001518:	2c00      	cmp	r4, #0
 800151a:	d03b      	beq.n	8001594 <HAL_I2C_Mem_Write+0x98>
 800151c:	2d00      	cmp	r5, #0
 800151e:	d039      	beq.n	8001594 <HAL_I2C_Mem_Write+0x98>
    __HAL_LOCK(hi2c);
 8001520:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001524:	2c01      	cmp	r4, #1
 8001526:	d0f2      	beq.n	800150e <HAL_I2C_Mem_Write+0x12>
 8001528:	461f      	mov	r7, r3
 800152a:	2301      	movs	r3, #1
 800152c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001530:	4690      	mov	r8, r2
 8001532:	4689      	mov	r9, r1
 8001534:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001536:	f7fe fed3 	bl	80002e0 <HAL_GetTick>
 800153a:	4682      	mov	sl, r0
 800153c:	e005      	b.n	800154a <HAL_I2C_Mem_Write+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800153e:	f7fe fecf 	bl	80002e0 <HAL_GetTick>
 8001542:	eba0 000a 	sub.w	r0, r0, sl
 8001546:	2819      	cmp	r0, #25
 8001548:	d826      	bhi.n	8001598 <HAL_I2C_Mem_Write+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	699e      	ldr	r6, [r3, #24]
 800154e:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8001552:	d1f4      	bne.n	800153e <HAL_I2C_Mem_Write+0x42>
    hi2c->pBuffPtr  = pData;
 8001554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001556:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001558:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800155a:	2140      	movs	r1, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800155c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->XferISR   = NULL;
 800155e:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001560:	4642      	mov	r2, r8
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	f8cd a004 	str.w	sl, [sp, #4]
 8001568:	463b      	mov	r3, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800156a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800156e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001572:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001574:	6466      	str	r6, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001576:	4649      	mov	r1, r9
    hi2c->XferCount = Size;
 8001578:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800157a:	f7ff fec1 	bl	8001300 <I2C_RequestMemoryWrite>
 800157e:	b1a8      	cbz	r0, 80015ac <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001580:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001582:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001586:	2b04      	cmp	r3, #4
 8001588:	d004      	beq.n	8001594 <HAL_I2C_Mem_Write+0x98>
          return HAL_TIMEOUT;
 800158a:	2003      	movs	r0, #3
 800158c:	e7c0      	b.n	8001510 <HAL_I2C_Mem_Write+0x14>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800158e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001590:	2b04      	cmp	r3, #4
 8001592:	d1fa      	bne.n	800158a <HAL_I2C_Mem_Write+0x8e>
        return HAL_ERROR;
 8001594:	2001      	movs	r0, #1
 8001596:	e7bb      	b.n	8001510 <HAL_I2C_Mem_Write+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800159a:	2220      	movs	r2, #32
 800159c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80015a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 80015a8:	2003      	movs	r0, #3
 80015aa:	e7b1      	b.n	8001510 <HAL_I2C_Mem_Write+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	2bff      	cmp	r3, #255	; 0xff
 80015b2:	d959      	bls.n	8001668 <HAL_I2C_Mem_Write+0x16c>
  tmpreg = hi2c->Instance->CR2;
 80015b4:	6820      	ldr	r0, [r4, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80015b6:	4d40      	ldr	r5, [pc, #256]	; (80016b8 <HAL_I2C_Mem_Write+0x1bc>)
  tmpreg = hi2c->Instance->CR2;
 80015b8:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80015ba:	f3c9 0109 	ubfx	r1, r9, #0, #10
 80015be:	f041 73ff 	orr.w	r3, r1, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80015c2:	402a      	ands	r2, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ca:	22ff      	movs	r2, #255	; 0xff
 80015cc:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 80015ce:	6043      	str	r3, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80015d0:	b28d      	uxth	r5, r1
 80015d2:	f045 76ff 	orr.w	r6, r5, #33423360	; 0x1fe0000
 80015d6:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80015da:	e003      	b.n	80015e4 <HAL_I2C_Mem_Write+0xe8>
    while (hi2c->XferCount > 0U);
 80015dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d052      	beq.n	800168a <HAL_I2C_Mem_Write+0x18e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e4:	4652      	mov	r2, sl
 80015e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff fe5d 	bl	80012a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	d1cd      	bne.n	800158e <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80015f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f4:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 80015f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80015f8:	1c58      	adds	r0, r3, #1
 80015fa:	6260      	str	r0, [r4, #36]	; 0x24
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8001600:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001602:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001604:	3b01      	subs	r3, #1
 8001606:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001608:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800160a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800160c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800160e:	2a00      	cmp	r2, #0
 8001610:	d1e4      	bne.n	80015dc <HAL_I2C_Mem_Write+0xe0>
 8001612:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001614:	b29b      	uxth	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0e0      	beq.n	80015dc <HAL_I2C_Mem_Write+0xe0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	f8cd a000 	str.w	sl, [sp]
 8001620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001622:	4620      	mov	r0, r4
 8001624:	f7ff fdda 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001628:	4923      	ldr	r1, [pc, #140]	; (80016b8 <HAL_I2C_Mem_Write+0x1bc>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800162a:	f04f 0eff 	mov.w	lr, #255	; 0xff
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800162e:	460f      	mov	r7, r1
 8001630:	f045 7200 	orr.w	r2, r5, #33554432	; 0x2000000
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001634:	2800      	cmp	r0, #0
 8001636:	d1a8      	bne.n	800158a <HAL_I2C_Mem_Write+0x8e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001638:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800163a:	b29b      	uxth	r3, r3
 800163c:	4573      	cmp	r3, lr
 800163e:	d907      	bls.n	8001650 <HAL_I2C_Mem_Write+0x154>
  tmpreg = hi2c->Instance->CR2;
 8001640:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001642:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  tmpreg = hi2c->Instance->CR2;
 8001646:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001648:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800164a:	4333      	orrs	r3, r6
  hi2c->Instance->CR2 = tmpreg;
 800164c:	6053      	str	r3, [r2, #4]
 800164e:	e7c5      	b.n	80015dc <HAL_I2C_Mem_Write+0xe0>
  tmpreg = hi2c->Instance->CR2;
 8001650:	6820      	ldr	r0, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001652:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 8001654:	6843      	ldr	r3, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001656:	b289      	uxth	r1, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001658:	403b      	ands	r3, r7
 800165a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800165c:	b2cf      	uxtb	r7, r1
 800165e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
          hi2c->XferSize = hi2c->XferCount;
 8001662:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8001664:	6043      	str	r3, [r0, #4]
 8001666:	e7b9      	b.n	80015dc <HAL_I2C_Mem_Write+0xe0>
  tmpreg = hi2c->Instance->CR2;
 8001668:	6825      	ldr	r5, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 800166a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800166c:	4812      	ldr	r0, [pc, #72]	; (80016b8 <HAL_I2C_Mem_Write+0x1bc>)
  tmpreg = hi2c->Instance->CR2;
 800166e:	686b      	ldr	r3, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001670:	f3c9 0109 	ubfx	r1, r9, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001674:	4018      	ands	r0, r3
      hi2c->XferSize = hi2c->XferCount;
 8001676:	b292      	uxth	r2, r2
 8001678:	f041 7300 	orr.w	r3, r1, #33554432	; 0x2000000
 800167c:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800167e:	b2d0      	uxtb	r0, r2
 8001680:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 8001684:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8001686:	606b      	str	r3, [r5, #4]
 8001688:	e7a2      	b.n	80015d0 <HAL_I2C_Mem_Write+0xd4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168a:	4652      	mov	r2, sl
 800168c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800168e:	4620      	mov	r0, r4
 8001690:	f7ff feb4 	bl	80013fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001694:	2800      	cmp	r0, #0
 8001696:	f47f af7a 	bne.w	800158e <HAL_I2C_Mem_Write+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800169c:	4d07      	ldr	r5, [pc, #28]	; (80016bc <HAL_I2C_Mem_Write+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169e:	2120      	movs	r1, #32
 80016a0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	402a      	ands	r2, r5
 80016a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80016a8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80016ac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016b0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80016b4:	e72c      	b.n	8001510 <HAL_I2C_Mem_Write+0x14>
 80016b6:	bf00      	nop
 80016b8:	fc009800 	.word	0xfc009800
 80016bc:	fe00e800 	.word	0xfe00e800

080016c0 <HAL_I2C_Mem_Read>:
{
 80016c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80016c8:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ca:	2c20      	cmp	r4, #32
{
 80016cc:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d0:	d003      	beq.n	80016da <HAL_I2C_Mem_Read+0x1a>
    return HAL_BUSY;
 80016d2:	2002      	movs	r0, #2
}
 80016d4:	b002      	add	sp, #8
 80016d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 80016da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80016dc:	2c00      	cmp	r4, #0
 80016de:	d043      	beq.n	8001768 <HAL_I2C_Mem_Read+0xa8>
 80016e0:	2d00      	cmp	r5, #0
 80016e2:	d041      	beq.n	8001768 <HAL_I2C_Mem_Read+0xa8>
    __HAL_LOCK(hi2c);
 80016e4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80016e8:	2c01      	cmp	r4, #1
 80016ea:	d0f2      	beq.n	80016d2 <HAL_I2C_Mem_Read+0x12>
 80016ec:	461f      	mov	r7, r3
 80016ee:	2301      	movs	r3, #1
 80016f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80016f4:	4690      	mov	r8, r2
 80016f6:	4689      	mov	r9, r1
 80016f8:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80016fa:	f7fe fdf1 	bl	80002e0 <HAL_GetTick>
 80016fe:	4682      	mov	sl, r0
 8001700:	e005      	b.n	800170e <HAL_I2C_Mem_Read+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001702:	f7fe fded 	bl	80002e0 <HAL_GetTick>
 8001706:	eba0 000a 	sub.w	r0, r0, sl
 800170a:	2819      	cmp	r0, #25
 800170c:	d82e      	bhi.n	800176c <HAL_I2C_Mem_Read+0xac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	699e      	ldr	r6, [r3, #24]
 8001712:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8001716:	d1f4      	bne.n	8001702 <HAL_I2C_Mem_Read+0x42>
    hi2c->pBuffPtr  = pData;
 8001718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800171a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800171c:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800171e:	2140      	movs	r1, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->XferISR   = NULL;
 8001722:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001724:	4642      	mov	r2, r8
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f8cd a004 	str.w	sl, [sp, #4]
 800172c:	463b      	mov	r3, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800172e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001732:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001736:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001738:	6466      	str	r6, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800173a:	4649      	mov	r1, r9
    hi2c->XferCount = Size;
 800173c:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800173e:	f7ff fe1f 	bl	8001380 <I2C_RequestMemoryRead>
 8001742:	b1e8      	cbz	r0, 8001780 <HAL_I2C_Mem_Read+0xc0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001744:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001746:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800174a:	2b04      	cmp	r3, #4
 800174c:	d00c      	beq.n	8001768 <HAL_I2C_Mem_Read+0xa8>
        return HAL_TIMEOUT;
 800174e:	2003      	movs	r0, #3
 8001750:	e7c0      	b.n	80016d4 <HAL_I2C_Mem_Read+0x14>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001752:	4652      	mov	r2, sl
 8001754:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fe50 	bl	80013fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800175c:	2800      	cmp	r0, #0
 800175e:	f000 8083 	beq.w	8001868 <HAL_I2C_Mem_Read+0x1a8>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001762:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001764:	2b04      	cmp	r3, #4
 8001766:	d1f2      	bne.n	800174e <HAL_I2C_Mem_Read+0x8e>
        return HAL_ERROR;
 8001768:	2001      	movs	r0, #1
 800176a:	e7b3      	b.n	80016d4 <HAL_I2C_Mem_Read+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800176c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800176e:	2220      	movs	r2, #32
 8001770:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8001774:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 800177c:	2003      	movs	r0, #3
 800177e:	e7a9      	b.n	80016d4 <HAL_I2C_Mem_Read+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001780:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d95c      	bls.n	8001842 <HAL_I2C_Mem_Read+0x182>
  tmpreg = hi2c->Instance->CR2;
 8001788:	6820      	ldr	r0, [r4, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800178a:	4d3e      	ldr	r5, [pc, #248]	; (8001884 <HAL_I2C_Mem_Read+0x1c4>)
  tmpreg = hi2c->Instance->CR2;
 800178c:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800178e:	f3c9 0109 	ubfx	r1, r9, #0, #10
 8001792:	f041 73ff 	orr.w	r3, r1, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001796:	402a      	ands	r2, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001798:	f443 3392 	orr.w	r3, r3, #74752	; 0x12400
 800179c:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 80017a2:	6043      	str	r3, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80017a4:	b28d      	uxth	r5, r1
 80017a6:	f045 76ff 	orr.w	r6, r5, #33423360	; 0x1fe0000
 80017aa:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80017ae:	e003      	b.n	80017b8 <HAL_I2C_Mem_Read+0xf8>
    while (hi2c->XferCount > 0U);
 80017b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0cc      	beq.n	8001752 <HAL_I2C_Mem_Read+0x92>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017b8:	f8cd a000 	str.w	sl, [sp]
 80017bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017be:	2200      	movs	r2, #0
 80017c0:	2104      	movs	r1, #4
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff fd0a 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d1c0      	bne.n	800174e <HAL_I2C_Mem_Read+0x8e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80017cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017ce:	6822      	ldr	r2, [r4, #0]
 80017d0:	1c59      	adds	r1, r3, #1
 80017d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d4:	6261      	str	r1, [r4, #36]	; 0x24
 80017d6:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80017d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80017da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80017dc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80017de:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80017e0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80017e2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80017e4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80017e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80017e8:	2a00      	cmp	r2, #0
 80017ea:	d1e1      	bne.n	80017b0 <HAL_I2C_Mem_Read+0xf0>
 80017ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0dd      	beq.n	80017b0 <HAL_I2C_Mem_Read+0xf0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	f8cd a000 	str.w	sl, [sp]
 80017fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff fced 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001802:	4920      	ldr	r1, [pc, #128]	; (8001884 <HAL_I2C_Mem_Read+0x1c4>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001804:	f04f 0eff 	mov.w	lr, #255	; 0xff
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001808:	460f      	mov	r7, r1
 800180a:	f045 7200 	orr.w	r2, r5, #33554432	; 0x2000000
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800180e:	2800      	cmp	r0, #0
 8001810:	d19d      	bne.n	800174e <HAL_I2C_Mem_Read+0x8e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001812:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	4573      	cmp	r3, lr
 8001818:	d907      	bls.n	800182a <HAL_I2C_Mem_Read+0x16a>
  tmpreg = hi2c->Instance->CR2;
 800181a:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800181c:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  tmpreg = hi2c->Instance->CR2;
 8001820:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001822:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001824:	4333      	orrs	r3, r6
  hi2c->Instance->CR2 = tmpreg;
 8001826:	6053      	str	r3, [r2, #4]
 8001828:	e7c2      	b.n	80017b0 <HAL_I2C_Mem_Read+0xf0>
  tmpreg = hi2c->Instance->CR2;
 800182a:	6820      	ldr	r0, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 800182c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 800182e:	6843      	ldr	r3, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001830:	b289      	uxth	r1, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001832:	403b      	ands	r3, r7
 8001834:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001836:	b2cf      	uxtb	r7, r1
 8001838:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
          hi2c->XferSize = hi2c->XferCount;
 800183c:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 800183e:	6043      	str	r3, [r0, #4]
 8001840:	e7b6      	b.n	80017b0 <HAL_I2C_Mem_Read+0xf0>
  tmpreg = hi2c->Instance->CR2;
 8001842:	6825      	ldr	r5, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001844:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001846:	4e0f      	ldr	r6, [pc, #60]	; (8001884 <HAL_I2C_Mem_Read+0x1c4>)
  tmpreg = hi2c->Instance->CR2;
 8001848:	6868      	ldr	r0, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800184a:	f3c9 0109 	ubfx	r1, r9, #0, #10
 800184e:	f041 7300 	orr.w	r3, r1, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8001852:	b292      	uxth	r2, r2
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001854:	4030      	ands	r0, r6
 8001856:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800185a:	b2d6      	uxtb	r6, r2
 800185c:	4303      	orrs	r3, r0
 800185e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 8001862:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8001864:	606b      	str	r3, [r5, #4]
 8001866:	e79d      	b.n	80017a4 <HAL_I2C_Mem_Read+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001868:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800186a:	4d07      	ldr	r5, [pc, #28]	; (8001888 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800186c:	2120      	movs	r1, #32
 800186e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	402a      	ands	r2, r5
 8001874:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001876:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800187a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800187e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001882:	e727      	b.n	80016d4 <HAL_I2C_Mem_Read+0x14>
 8001884:	fc009800 	.word	0xfc009800
 8001888:	fe00e800 	.word	0xfe00e800

0800188c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800188c:	6803      	ldr	r3, [r0, #0]
{
 800188e:	b410      	push	{r4}
  if (hi2c->XferISR != NULL)
 8001890:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001892:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001894:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001896:	b11c      	cbz	r4, 80018a0 <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001898:	4623      	mov	r3, r4
}
 800189a:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 800189e:	4718      	bx	r3
}
 80018a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <HAL_I2C_SlaveTxCpltCallback>:
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <HAL_I2C_SlaveRxCpltCallback>:
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop

080018b0 <I2C_ITSlaveSequentialCplt>:
{
 80018b0:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b2:	2500      	movs	r5, #0
 80018b4:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80018b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018bc:	2b29      	cmp	r3, #41	; 0x29
{
 80018be:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80018c0:	d012      	beq.n	80018e8 <I2C_ITSlaveSequentialCplt+0x38>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80018c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018c6:	2b2a      	cmp	r3, #42	; 0x2a
 80018c8:	d000      	beq.n	80018cc <I2C_ITSlaveSequentialCplt+0x1c>
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80018cc:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80018ce:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80018d0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80018d4:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80018d6:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80018d8:	f7ff fc52 	bl	8001180 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80018dc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ffe3 	bl	80018ac <HAL_I2C_SlaveRxCpltCallback>
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80018e8:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80018ea:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80018ec:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80018f0:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80018f2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80018f4:	f7ff fc44 	bl	8001180 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80018f8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff ffd3 	bl	80018a8 <HAL_I2C_SlaveTxCpltCallback>
 8001902:	bd38      	pop	{r3, r4, r5, pc}

08001904 <HAL_I2C_AddrCallback>:
{
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <HAL_I2C_ListenCpltCallback>:
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <I2C_ITListenCplt+0x5c>)
{
 800190e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8001910:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001912:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8001918:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 800191a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800191e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001922:	074b      	lsls	r3, r1, #29
{
 8001924:	4604      	mov	r4, r0
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001926:	d511      	bpl.n	800194c <I2C_ITListenCplt+0x40>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800192a:	6802      	ldr	r2, [r0, #0]
 800192c:	1c59      	adds	r1, r3, #1
 800192e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001930:	6241      	str	r1, [r0, #36]	; 0x24
 8001932:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001934:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001936:	b14b      	cbz	r3, 800194c <I2C_ITListenCplt+0x40>
      hi2c->XferCount--;
 8001938:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800193a:	3a01      	subs	r2, #1
 800193c:	b292      	uxth	r2, r2
 800193e:	8542      	strh	r2, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001940:	6c42      	ldr	r2, [r0, #68]	; 0x44
      hi2c->XferSize--;
 8001942:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001944:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 8001948:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800194a:	6442      	str	r2, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800194c:	2107      	movs	r1, #7
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fc16 	bl	8001180 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	2110      	movs	r1, #16
  __HAL_UNLOCK(hi2c);
 8001958:	2300      	movs	r3, #0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800195a:	61d1      	str	r1, [r2, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800195c:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800195e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8001962:	f7ff ffd1 	bl	8001908 <HAL_I2C_ListenCpltCallback>
 8001966:	bd10      	pop	{r4, pc}
 8001968:	ffff0000 	.word	0xffff0000

0800196c <HAL_I2C_ErrorCallback>:
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <HAL_I2C_AbortCpltCallback>:
{
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001974:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001976:	4a3a      	ldr	r2, [pc, #232]	; (8001a60 <I2C_ITError+0xec>)
{
 8001978:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800197a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800197e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001980:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001982:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001984:	4319      	orrs	r1, r3
 8001986:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001988:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800198c:	2b28      	cmp	r3, #40	; 0x28
{
 800198e:	4604      	mov	r4, r0
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001990:	d02c      	beq.n	80019ec <I2C_ITError+0x78>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001992:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001996:	2b29      	cmp	r3, #41	; 0x29
 8001998:	d028      	beq.n	80019ec <I2C_ITError+0x78>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800199a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800199e:	2b2a      	cmp	r3, #42	; 0x2a
 80019a0:	d024      	beq.n	80019ec <I2C_ITError+0x78>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80019a2:	2107      	movs	r1, #7
 80019a4:	f7ff fbec 	bl	8001180 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80019a8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80019ac:	6822      	ldr	r2, [r4, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80019ae:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 80019b0:	bf1c      	itt	ne
 80019b2:	2320      	movne	r3, #32
 80019b4:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80019bc:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 80019c4:	d022      	beq.n	8001a0c <I2C_ITError+0x98>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019c6:	6813      	ldr	r3, [r2, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80019c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80019ca:	4e26      	ldr	r6, [pc, #152]	; (8001a64 <I2C_ITError+0xf0>)
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_UNLOCK(hi2c);
 80019d0:	2500      	movs	r5, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019d2:	6013      	str	r3, [r2, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80019d4:	4608      	mov	r0, r1
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80019d6:	634e      	str	r6, [r1, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80019d8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80019dc:	f7ff f9a8 	bl	8000d30 <HAL_DMA_Abort_IT>
 80019e0:	b308      	cbz	r0, 8001a26 <I2C_ITError+0xb2>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80019e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80019e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80019e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019ea:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80019ec:	2103      	movs	r1, #3
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff fbc6 	bl	8001180 <I2C_Disable_IRQ>
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80019f4:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <I2C_ITError+0xf4>)
 80019f6:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_NONE;
 80019f8:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80019fa:	2128      	movs	r1, #40	; 0x28
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80019fc:	6822      	ldr	r2, [r4, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80019fe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a02:	6323      	str	r3, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8001a0a:	d1dc      	bne.n	80019c6 <I2C_ITError+0x52>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001a0c:	6811      	ldr	r1, [r2, #0]
 8001a0e:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 8001a12:	d109      	bne.n	8001a28 <I2C_ITError+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a14:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001a18:	2b60      	cmp	r3, #96	; 0x60
 8001a1a:	d018      	beq.n	8001a4e <I2C_ITError+0xda>
    __HAL_UNLOCK(hi2c);
 8001a1c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff ffa3 	bl	800196c <HAL_I2C_ErrorCallback>
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a28:	6811      	ldr	r1, [r2, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a2a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001a2c:	4e0d      	ldr	r6, [pc, #52]	; (8001a64 <I2C_ITError+0xf0>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a2e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001a32:	6011      	str	r1, [r2, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a34:	4628      	mov	r0, r5
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a36:	636e      	str	r6, [r5, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001a38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a3c:	f7ff f978 	bl	8000d30 <HAL_DMA_Abort_IT>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d0f0      	beq.n	8001a26 <I2C_ITError+0xb2>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8001a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a4c:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001a50:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001a54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff ff89 	bl	8001970 <HAL_I2C_AbortCpltCallback>
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
 8001a60:	ffff0000 	.word	0xffff0000
 8001a64:	08001dd1 	.word	0x08001dd1
 8001a68:	08001b79 	.word	0x08001b79

08001a6c <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a6c:	6803      	ldr	r3, [r0, #0]
{
 8001a6e:	b570      	push	{r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a70:	2208      	movs	r2, #8
{
 8001a72:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a74:	2620      	movs	r6, #32
 8001a76:	61de      	str	r6, [r3, #28]
{
 8001a78:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a7a:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001a7c:	2107      	movs	r1, #7
 8001a7e:	f7ff fb7f 	bl	8001180 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001a82:	6823      	ldr	r3, [r4, #0]
  I2C_RESET_CR2(hi2c);
 8001a84:	483a      	ldr	r0, [pc, #232]	; (8001b70 <I2C_ITSlaveCplt+0x104>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001a8c:	6059      	str	r1, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4002      	ands	r2, r0
 8001a92:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8001a98:	bf44      	itt	mi
 8001a9a:	2200      	movmi	r2, #0
 8001a9c:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	07d6      	lsls	r6, r2, #31
 8001aa2:	d403      	bmi.n	8001aac <I2C_ITSlaveCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	619a      	str	r2, [r3, #24]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	0450      	lsls	r0, r2, #17
 8001ab0:	d42c      	bmi.n	8001b0c <I2C_ITSlaveCplt+0xa0>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8001ab2:	681a      	ldr	r2, [r3, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001ab4:	0411      	lsls	r1, r2, #16
 8001ab6:	d429      	bmi.n	8001b0c <I2C_ITSlaveCplt+0xa0>
  if (hi2c->XferCount != 0U)
 8001ab8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001aba:	b292      	uxth	r2, r2
 8001abc:	b11a      	cbz	r2, 8001ac6 <I2C_ITSlaveCplt+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001abe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ac0:	f042 0204 	orr.w	r2, r2, #4
 8001ac4:	6462      	str	r2, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001ac6:	076a      	lsls	r2, r5, #29
 8001ac8:	d506      	bpl.n	8001ad8 <I2C_ITSlaveCplt+0x6c>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001aca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	1c51      	adds	r1, r2, #1
 8001ad0:	6261      	str	r1, [r4, #36]	; 0x24
 8001ad2:	7013      	strb	r3, [r2, #0]
    if ((hi2c->XferSize > 0U))
 8001ad4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ad6:	bb73      	cbnz	r3, 8001b36 <I2C_ITSlaveCplt+0xca>
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ae0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8001ae2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	d131      	bne.n	8001b4c <I2C_ITSlaveCplt+0xe0>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aea:	4922      	ldr	r1, [pc, #136]	; (8001b74 <I2C_ITSlaveCplt+0x108>)
 8001aec:	428b      	cmp	r3, r1
 8001aee:	d118      	bne.n	8001b22 <I2C_ITSlaveCplt+0xb6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001af0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001af4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001af8:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8001afa:	f04f 0320 	mov.w	r3, #32
 8001afe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b02:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b04:	d030      	beq.n	8001b68 <I2C_ITSlaveCplt+0xfc>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b06:	f7ff fecf 	bl	80018a8 <HAL_I2C_SlaveTxCpltCallback>
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8001b0c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001b10:	2a21      	cmp	r2, #33	; 0x21
 8001b12:	bf0c      	ite	eq
 8001b14:	6ba2      	ldreq	r2, [r4, #56]	; 0x38
 8001b16:	6be2      	ldrne	r2, [r4, #60]	; 0x3c
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	6852      	ldr	r2, [r2, #4]
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	8562      	strh	r2, [r4, #42]	; 0x2a
 8001b20:	e7ca      	b.n	8001ab8 <I2C_ITSlaveCplt+0x4c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b24:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 8001b26:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff feea 	bl	8001908 <HAL_I2C_ListenCpltCallback>
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 8001b36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8001b40:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b42:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 8001b46:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b48:	6462      	str	r2, [r4, #68]	; 0x44
 8001b4a:	e7c5      	b.n	8001ad8 <I2C_ITSlaveCplt+0x6c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff ff10 	bl	8001974 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001b54:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001b58:	2b28      	cmp	r3, #40	; 0x28
 8001b5a:	d1d6      	bne.n	8001b0a <I2C_ITSlaveCplt+0x9e>
      I2C_ITListenCplt(hi2c, ITFlags);
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4620      	mov	r0, r4
}
 8001b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8001b64:	f7ff bed2 	b.w	800190c <I2C_ITListenCplt>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b68:	f7ff fea0 	bl	80018ac <HAL_I2C_SlaveRxCpltCallback>
 8001b6c:	bd70      	pop	{r4, r5, r6, pc}
 8001b6e:	bf00      	nop
 8001b70:	fe00e800 	.word	0xfe00e800
 8001b74:	ffff0000 	.word	0xffff0000

08001b78 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8001b78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d06b      	beq.n	8001c58 <I2C_Slave_ISR_IT+0xe0>
{
 8001b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hi2c);
 8001b84:	2301      	movs	r3, #1
 8001b86:	4616      	mov	r6, r2
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001b88:	06ca      	lsls	r2, r1, #27
{
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	460d      	mov	r5, r1
 8001b8e:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8001b90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001b94:	d427      	bmi.n	8001be6 <I2C_Slave_ISR_IT+0x6e>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8001b96:	0769      	lsls	r1, r5, #29
 8001b98:	d54b      	bpl.n	8001c32 <I2C_Slave_ISR_IT+0xba>
 8001b9a:	0772      	lsls	r2, r6, #29
 8001b9c:	d549      	bpl.n	8001c32 <I2C_Slave_ISR_IT+0xba>
    if (hi2c->XferCount > 0U)
 8001b9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	b163      	cbz	r3, 8001bbe <I2C_Slave_ISR_IT+0x46>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ba6:	6822      	ldr	r2, [r4, #0]
 8001ba8:	1c59      	adds	r1, r3, #1
 8001baa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bac:	6261      	str	r1, [r4, #36]	; 0x24
 8001bae:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001bb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001bb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001bb8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001bba:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001bbc:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8001bbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	b933      	cbnz	r3, 8001bd2 <I2C_Slave_ISR_IT+0x5a>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8001bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8001bc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bca:	d002      	beq.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
        I2C_ITSlaveSequentialCplt(hi2c);
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7ff fe6f 	bl	80018b0 <I2C_ITSlaveSequentialCplt>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001bd2:	06aa      	lsls	r2, r5, #26
 8001bd4:	d501      	bpl.n	8001bda <I2C_Slave_ISR_IT+0x62>
 8001bd6:	06b3      	lsls	r3, r6, #26
 8001bd8:	d440      	bmi.n	8001c5c <I2C_Slave_ISR_IT+0xe4>
  __HAL_UNLOCK(hi2c);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001be0:	b002      	add	sp, #8
 8001be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001be6:	06f3      	lsls	r3, r6, #27
 8001be8:	d5d5      	bpl.n	8001b96 <I2C_Slave_ISR_IT+0x1e>
    if (hi2c->XferCount == 0U)
 8001bea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d13d      	bne.n	8001c6e <I2C_Slave_ISR_IT+0xf6>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001bf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bf8:	d05c      	beq.n	8001cb4 <I2C_Slave_ISR_IT+0x13c>
 8001bfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c00:	d058      	beq.n	8001cb4 <I2C_Slave_ISR_IT+0x13c>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c08:	d02d      	beq.n	8001c66 <I2C_Slave_ISR_IT+0xee>
 8001c0a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001c0e:	2b29      	cmp	r3, #41	; 0x29
 8001c10:	d129      	bne.n	8001c66 <I2C_Slave_ISR_IT+0xee>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	2210      	movs	r2, #16
 8001c16:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8001c1c:	bf44      	itt	mi
 8001c1e:	2200      	movmi	r2, #0
 8001c20:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	07d0      	lsls	r0, r2, #31
 8001c26:	d4d1      	bmi.n	8001bcc <I2C_Slave_ISR_IT+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	619a      	str	r2, [r3, #24]
 8001c30:	e7cc      	b.n	8001bcc <I2C_Slave_ISR_IT+0x54>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001c32:	072b      	lsls	r3, r5, #28
 8001c34:	d501      	bpl.n	8001c3a <I2C_Slave_ISR_IT+0xc2>
 8001c36:	0737      	lsls	r7, r6, #28
 8001c38:	d421      	bmi.n	8001c7e <I2C_Slave_ISR_IT+0x106>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8001c3a:	07a8      	lsls	r0, r5, #30
 8001c3c:	d5c9      	bpl.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
 8001c3e:	07b1      	lsls	r1, r6, #30
 8001c40:	d5c7      	bpl.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
    if (hi2c->XferCount > 0U)
 8001c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	bb3b      	cbnz	r3, 8001c98 <I2C_Slave_ISR_IT+0x120>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8001c48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4e:	d0bd      	beq.n	8001bcc <I2C_Slave_ISR_IT+0x54>
 8001c50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0ba      	beq.n	8001bcc <I2C_Slave_ISR_IT+0x54>
 8001c56:	e7bc      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
  __HAL_LOCK(hi2c);
 8001c58:	2002      	movs	r0, #2
 8001c5a:	4770      	bx	lr
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff ff04 	bl	8001a6c <I2C_ITSlaveCplt>
 8001c64:	e7b9      	b.n	8001bda <I2C_Slave_ISR_IT+0x62>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	2210      	movs	r2, #16
 8001c6a:	61da      	str	r2, [r3, #28]
 8001c6c:	e7b1      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c6e:	6803      	ldr	r3, [r0, #0]
 8001c70:	2210      	movs	r2, #16
 8001c72:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6443      	str	r3, [r0, #68]	; 0x44
 8001c7c:	e7a9      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8001c7e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001c82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c86:	2b28      	cmp	r3, #40	; 0x28
 8001c88:	d01d      	beq.n	8001cc6 <I2C_Slave_ISR_IT+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c8a:	6822      	ldr	r2, [r4, #0]
 8001c8c:	2108      	movs	r1, #8
    __HAL_UNLOCK(hi2c);
 8001c8e:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c90:	61d1      	str	r1, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8001c92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001c96:	e79c      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c9a:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 8001c9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001c9e:	1c58      	adds	r0, r3, #1
 8001ca0:	6260      	str	r0, [r4, #36]	; 0x24
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8001ca6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001cac:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001cae:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001cb0:	8522      	strh	r2, [r4, #40]	; 0x28
 8001cb2:	e78e      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8001cb4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001cb8:	2b28      	cmp	r3, #40	; 0x28
 8001cba:	d1a2      	bne.n	8001c02 <I2C_Slave_ISR_IT+0x8a>
        I2C_ITListenCplt(hi2c, ITFlags);
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fe24 	bl	800190c <I2C_ITListenCplt>
 8001cc4:	e785      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
    transferdirection = I2C_GET_DIR(hi2c);
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001cca:	699f      	ldr	r7, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001ccc:	6898      	ldr	r0, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001cce:	68da      	ldr	r2, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8001cd0:	f3c1 4800 	ubfx	r8, r1, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cd4:	68e1      	ldr	r1, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001cd6:	0c3f      	lsrs	r7, r7, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cd8:	2902      	cmp	r1, #2
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001cda:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cde:	d11a      	bne.n	8001d16 <I2C_Slave_ISR_IT+0x19e>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001ce0:	f3c0 0009 	ubfx	r0, r0, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001ce4:	ea87 17d0 	eor.w	r7, r7, r0, lsr #7
 8001ce8:	f017 0706 	ands.w	r7, r7, #6
 8001cec:	d120      	bne.n	8001d30 <I2C_Slave_ISR_IT+0x1b8>
        hi2c->AddrEventCount++;
 8001cee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cf0:	3201      	adds	r2, #1
 8001cf2:	64a2      	str	r2, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001cf4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cf6:	2a02      	cmp	r2, #2
 8001cf8:	f47f af6b 	bne.w	8001bd2 <I2C_Slave_ISR_IT+0x5a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cfc:	f04f 0e08 	mov.w	lr, #8
          hi2c->AddrEventCount = 0U;
 8001d00:	64a7      	str	r7, [r4, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d02:	4602      	mov	r2, r0
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d04:	f8c3 e01c 	str.w	lr, [r3, #28]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d08:	4641      	mov	r1, r8
 8001d0a:	4620      	mov	r0, r4
          __HAL_UNLOCK(hi2c);
 8001d0c:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d10:	f7ff fdf8 	bl	8001904 <HAL_I2C_AddrCallback>
 8001d14:	e75d      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d16:	2104      	movs	r1, #4
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f7ff fa31 	bl	8001180 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d1e:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d20:	463a      	mov	r2, r7
 8001d22:	4641      	mov	r1, r8
      __HAL_UNLOCK(hi2c);
 8001d24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f7ff fdeb 	bl	8001904 <HAL_I2C_AddrCallback>
 8001d2e:	e750      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d30:	2104      	movs	r1, #4
 8001d32:	4620      	mov	r0, r4
 8001d34:	9201      	str	r2, [sp, #4]
 8001d36:	f7ff fa23 	bl	8001180 <I2C_Disable_IRQ>
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d3a:	9a01      	ldr	r2, [sp, #4]
        __HAL_UNLOCK(hi2c);
 8001d3c:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d42:	4641      	mov	r1, r8
        __HAL_UNLOCK(hi2c);
 8001d44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff fddb 	bl	8001904 <HAL_I2C_AddrCallback>
 8001d4e:	e740      	b.n	8001bd2 <I2C_Slave_ISR_IT+0x5a>

08001d50 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d50:	6802      	ldr	r2, [r0, #0]
 8001d52:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d54:	6811      	ldr	r1, [r2, #0]
{
 8001d56:	b410      	push	{r4}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d58:	05dc      	lsls	r4, r3, #23
 8001d5a:	d51a      	bpl.n	8001d92 <HAL_I2C_ER_IRQHandler+0x42>
 8001d5c:	060c      	lsls	r4, r1, #24
 8001d5e:	d525      	bpl.n	8001dac <HAL_I2C_ER_IRQHandler+0x5c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d60:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001d62:	f041 0101 	orr.w	r1, r1, #1
 8001d66:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d68:	f44f 7480 	mov.w	r4, #256	; 0x100
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d6c:	0559      	lsls	r1, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d6e:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d70:	d52a      	bpl.n	8001dc8 <HAL_I2C_ER_IRQHandler+0x78>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d72:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d74:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d78:	f041 0108 	orr.w	r1, r1, #8
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d7c:	059b      	lsls	r3, r3, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d7e:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d80:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d82:	d419      	bmi.n	8001db8 <HAL_I2C_ER_IRQHandler+0x68>
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d86:	f013 0f0b 	tst.w	r3, #11
 8001d8a:	d10a      	bne.n	8001da2 <HAL_I2C_ER_IRQHandler+0x52>
}
 8001d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d90:	4770      	bx	lr
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001d92:	055c      	lsls	r4, r3, #21
 8001d94:	d50c      	bpl.n	8001db0 <HAL_I2C_ER_IRQHandler+0x60>
 8001d96:	0609      	lsls	r1, r1, #24
 8001d98:	d4eb      	bmi.n	8001d72 <HAL_I2C_ER_IRQHandler+0x22>
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d9c:	f013 0f0b 	tst.w	r3, #11
 8001da0:	d0f4      	beq.n	8001d8c <HAL_I2C_ER_IRQHandler+0x3c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001da2:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8001da4:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001da8:	f7ff bde4 	b.w	8001974 <I2C_ITError>
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001dac:	055c      	lsls	r4, r3, #21
 8001dae:	d4e9      	bmi.n	8001d84 <HAL_I2C_ER_IRQHandler+0x34>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001db0:	059c      	lsls	r4, r3, #22
 8001db2:	d5e7      	bpl.n	8001d84 <HAL_I2C_ER_IRQHandler+0x34>
 8001db4:	060b      	lsls	r3, r1, #24
 8001db6:	d5e5      	bpl.n	8001d84 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001db8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dba:	f44f 7100 	mov.w	r1, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dc4:	61d1      	str	r1, [r2, #28]
 8001dc6:	e7dd      	b.n	8001d84 <HAL_I2C_ER_IRQHandler+0x34>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001dc8:	059b      	lsls	r3, r3, #22
 8001dca:	d4f5      	bmi.n	8001db8 <HAL_I2C_ER_IRQHandler+0x68>
 8001dcc:	e7da      	b.n	8001d84 <HAL_I2C_ER_IRQHandler+0x34>
 8001dce:	bf00      	nop

08001dd0 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dd0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001dd2:	6802      	ldr	r2, [r0, #0]
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001dd4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001dd6:	6853      	ldr	r3, [r2, #4]
 8001dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
{
 8001ddc:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001dde:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001de0:	6053      	str	r3, [r2, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001de2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001de6:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001de8:	2a60      	cmp	r2, #96	; 0x60
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001dea:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001dec:	634b      	str	r3, [r1, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001dee:	d002      	beq.n	8001df6 <I2C_DMAAbort+0x26>
    HAL_I2C_ErrorCallback(hi2c);
 8001df0:	f7ff fdbc 	bl	800196c <HAL_I2C_ErrorCallback>
 8001df4:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	2320      	movs	r3, #32
 8001df8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001dfc:	f7ff fdb8 	bl	8001970 <HAL_I2C_AbortCpltCallback>
 8001e00:	bd10      	pop	{r4, pc}
 8001e02:	bf00      	nop

08001e04 <HAL_I2C_GetState>:
  return hi2c->State;
 8001e04:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop

08001e0c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d001      	beq.n	8001e1a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e16:	2002      	movs	r0, #2
 8001e18:	4770      	bx	lr
 8001e1a:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8001e1c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001e20:	2801      	cmp	r0, #1
 8001e22:	d0f8      	beq.n	8001e16 <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8001e24:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8001e26:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	2424      	movs	r4, #36	; 0x24
 8001e2a:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001e2e:	6804      	ldr	r4, [r0, #0]
 8001e30:	f024 0401 	bic.w	r4, r4, #1
 8001e34:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e36:	6804      	ldr	r4, [r0, #0]
 8001e38:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001e3c:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e3e:	6804      	ldr	r4, [r0, #0]
 8001e40:	4321      	orrs	r1, r4
 8001e42:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001e44:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8001e46:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8001e48:	f041 0101 	orr.w	r1, r1, #1
 8001e4c:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8001e4e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001e50:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8001e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop

08001e60 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d001      	beq.n	8001e6e <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	4770      	bx	lr
 8001e6e:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8001e70:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001e74:	2801      	cmp	r0, #1
 8001e76:	d0f8      	beq.n	8001e6a <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8001e78:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8001e7a:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7c:	2424      	movs	r4, #36	; 0x24
 8001e7e:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001e82:	6804      	ldr	r4, [r0, #0]
 8001e84:	f024 0401 	bic.w	r4, r4, #1
 8001e88:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8001e8a:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001e8c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001e90:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001e94:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001e96:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8001e98:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8001e9a:	f041 0101 	orr.w	r1, r1, #1
 8001e9e:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8001ea0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001ea2:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8001eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001eb0:	4a02      	ldr	r2, [pc, #8]	; (8001ebc <HAL_PWR_EnableBkUpAccess+0xc>)
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4770      	bx	lr
 8001ebc:	40007000 	.word	0x40007000

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec4:	6803      	ldr	r3, [r0, #0]
 8001ec6:	07d9      	lsls	r1, r3, #31
{
 8001ec8:	b083      	sub	sp, #12
 8001eca:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ecc:	d543      	bpl.n	8001f56 <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ece:	49c0      	ldr	r1, [pc, #768]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001ed0:	684a      	ldr	r2, [r1, #4]
 8001ed2:	f002 020c 	and.w	r2, r2, #12
 8001ed6:	2a04      	cmp	r2, #4
 8001ed8:	f000 8184 	beq.w	80021e4 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001edc:	684a      	ldr	r2, [r1, #4]
 8001ede:	f002 020c 	and.w	r2, r2, #12
 8001ee2:	2a08      	cmp	r2, #8
 8001ee4:	f000 817a 	beq.w	80021dc <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	f000 823d 	beq.w	800236c <HAL_RCC_OscConfig+0x4ac>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 81a1 	beq.w	800223a <HAL_RCC_OscConfig+0x37a>
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	f000 8297 	beq.w	800242e <HAL_RCC_OscConfig+0x56e>
 8001f00:	4bb3      	ldr	r3, [pc, #716]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f10:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f12:	4daf      	ldr	r5, [pc, #700]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001f14:	68a2      	ldr	r2, [r4, #8]
 8001f16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f18:	f023 030f 	bic.w	r3, r3, #15
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe f9de 	bl	80002e0 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001f28:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	2601      	movs	r6, #1
 8001f2c:	e005      	b.n	8001f3a <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f2e:	f7fe f9d7 	bl	80002e0 <HAL_GetTick>
 8001f32:	1bc0      	subs	r0, r0, r7
 8001f34:	2864      	cmp	r0, #100	; 0x64
 8001f36:	f200 81b9 	bhi.w	80022ac <HAL_RCC_OscConfig+0x3ec>
 8001f3a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	682a      	ldr	r2, [r5, #0]
 8001f40:	fa98 f3a8 	rbit	r3, r8
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa06 f303 	lsl.w	r3, r6, r3
 8001f50:	4213      	tst	r3, r2
 8001f52:	d0ec      	beq.n	8001f2e <HAL_RCC_OscConfig+0x6e>
 8001f54:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	079f      	lsls	r7, r3, #30
 8001f58:	d542      	bpl.n	8001fe0 <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f5a:	4a9d      	ldr	r2, [pc, #628]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001f5c:	6851      	ldr	r1, [r2, #4]
 8001f5e:	f011 0f0c 	tst.w	r1, #12
 8001f62:	f000 80f7 	beq.w	8002154 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f66:	6851      	ldr	r1, [r2, #4]
 8001f68:	f001 010c 	and.w	r1, r1, #12
 8001f6c:	2908      	cmp	r1, #8
 8001f6e:	f000 80ed 	beq.w	800214c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f72:	6922      	ldr	r2, [r4, #16]
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	f000 81d3 	beq.w	8002320 <HAL_RCC_OscConfig+0x460>
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f8c:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8001f90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f92:	f7fe f9a5 	bl	80002e0 <HAL_GetTick>
 8001f96:	f04f 0802 	mov.w	r8, #2
 8001f9a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4d8c      	ldr	r5, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001f9e:	e005      	b.n	8001fac <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7fe f99e 	bl	80002e0 <HAL_GetTick>
 8001fa4:	1bc0      	subs	r0, r0, r7
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	f200 8180 	bhi.w	80022ac <HAL_RCC_OscConfig+0x3ec>
 8001fac:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	682a      	ldr	r2, [r5, #0]
 8001fb2:	fa98 f3a8 	rbit	r3, r8
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	fa06 f303 	lsl.w	r3, r6, r3
 8001fc2:	4213      	tst	r3, r2
 8001fc4:	d0ec      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	6829      	ldr	r1, [r5, #0]
 8001fc8:	22f8      	movs	r2, #248	; 0xf8
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	6963      	ldr	r3, [r4, #20]
 8001fd0:	fab2 f282 	clz	r2, r2
 8001fd4:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001fd8:	4093      	lsls	r3, r2
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	602b      	str	r3, [r5, #0]
 8001fde:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe0:	071d      	lsls	r5, r3, #28
 8001fe2:	d44f      	bmi.n	8002084 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe4:	0758      	lsls	r0, r3, #29
 8001fe6:	d57b      	bpl.n	80020e0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe8:	4b79      	ldr	r3, [pc, #484]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	00d1      	lsls	r1, r2, #3
 8001fee:	f100 8110 	bmi.w	8002212 <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ff8:	61da      	str	r2, [r3, #28]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002004:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4d72      	ldr	r5, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x314>)
 800200a:	682b      	ldr	r3, [r5, #0]
 800200c:	05da      	lsls	r2, r3, #23
 800200e:	f140 813d 	bpl.w	800228c <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002012:	68e3      	ldr	r3, [r4, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	f000 81af 	beq.w	8002378 <HAL_RCC_OscConfig+0x4b8>
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8154 	beq.w	80022c8 <HAL_RCC_OscConfig+0x408>
 8002020:	2b05      	cmp	r3, #5
 8002022:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	f000 820f 	beq.w	8002448 <HAL_RCC_OscConfig+0x588>
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	621a      	str	r2, [r3, #32]
 8002030:	6a1a      	ldr	r2, [r3, #32]
 8002032:	f022 0204 	bic.w	r2, r2, #4
 8002036:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7fe f952 	bl	80002e0 <HAL_GetTick>
 800203c:	f04f 0902 	mov.w	r9, #2
 8002040:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	4e63      	ldr	r6, [pc, #396]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002044:	2501      	movs	r5, #1
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0x1b4>
 8002048:	fa99 f3a9 	rbit	r3, r9
 800204c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800204e:	fa99 f3a9 	rbit	r3, r9
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	fa05 f303 	lsl.w	r3, r5, r3
 800205e:	4213      	tst	r3, r2
 8002060:	f040 8128 	bne.w	80022b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7fe f93c 	bl	80002e0 <HAL_GetTick>
 8002068:	f241 3388 	movw	r3, #5000	; 0x1388
 800206c:	1bc0      	subs	r0, r0, r7
 800206e:	4298      	cmp	r0, r3
 8002070:	f200 811c 	bhi.w	80022ac <HAL_RCC_OscConfig+0x3ec>
 8002074:	fa99 f3a9 	rbit	r3, r9
 8002078:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0e3      	beq.n	8002048 <HAL_RCC_OscConfig+0x188>
 8002080:	6a32      	ldr	r2, [r6, #32]
 8002082:	e7e4      	b.n	800204e <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002084:	69a2      	ldr	r2, [r4, #24]
 8002086:	2a00      	cmp	r2, #0
 8002088:	d07b      	beq.n	8002182 <HAL_RCC_OscConfig+0x2c2>
 800208a:	2201      	movs	r2, #1
 800208c:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8002090:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4e4f      	ldr	r6, [pc, #316]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 8002094:	fab1 f181 	clz	r1, r1
 8002098:	440b      	add	r3, r1
 800209a:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209c:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 800209e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80020a0:	f7fe f91e 	bl	80002e0 <HAL_GetTick>
 80020a4:	f04f 0802 	mov.w	r8, #2
 80020a8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e005      	b.n	80020b8 <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ac:	f7fe f918 	bl	80002e0 <HAL_GetTick>
 80020b0:	1bc0      	subs	r0, r0, r7
 80020b2:	2802      	cmp	r0, #2
 80020b4:	f200 80fa 	bhi.w	80022ac <HAL_RCC_OscConfig+0x3ec>
 80020b8:	fa98 f3a8 	rbit	r3, r8
 80020bc:	fa98 f3a8 	rbit	r3, r8
 80020c0:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80020c6:	fa98 f3a8 	rbit	r3, r8
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	fa05 f303 	lsl.w	r3, r5, r3
 80020d6:	4213      	tst	r3, r2
 80020d8:	d0e8      	beq.n	80020ac <HAL_RCC_OscConfig+0x1ec>
 80020da:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	0758      	lsls	r0, r3, #29
 80020de:	d483      	bmi.n	8001fe8 <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e0:	69e3      	ldr	r3, [r4, #28]
 80020e2:	b37b      	cbz	r3, 8002144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e4:	4d3a      	ldr	r5, [pc, #232]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 80020e6:	686a      	ldr	r2, [r5, #4]
 80020e8:	f002 020c 	and.w	r2, r2, #12
 80020ec:	2a08      	cmp	r2, #8
 80020ee:	d044      	beq.n	800217a <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020f6:	f000 8145 	beq.w	8002384 <HAL_RCC_OscConfig+0x4c4>
 80020fa:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002106:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe f8e6 	bl	80002e0 <HAL_GetTick>
 8002114:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002118:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	2601      	movs	r6, #1
 800211c:	e005      	b.n	800212a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe f8df 	bl	80002e0 <HAL_GetTick>
 8002122:	1bc0      	subs	r0, r0, r7
 8002124:	2802      	cmp	r0, #2
 8002126:	f200 80c1 	bhi.w	80022ac <HAL_RCC_OscConfig+0x3ec>
 800212a:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	682a      	ldr	r2, [r5, #0]
 8002130:	fa94 f3a4 	rbit	r3, r4
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa06 f303 	lsl.w	r3, r6, r3
 8002140:	4213      	tst	r3, r2
 8002142:	d1ec      	bne.n	800211e <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002144:	2000      	movs	r0, #0
}
 8002146:	b003      	add	sp, #12
 8002148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800214c:	6852      	ldr	r2, [r2, #4]
 800214e:	03d6      	lsls	r6, r2, #15
 8002150:	f53f af0f 	bmi.w	8001f72 <HAL_RCC_OscConfig+0xb2>
 8002154:	2202      	movs	r2, #2
 8002156:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	491d      	ldr	r1, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
 800215c:	6808      	ldr	r0, [r1, #0]
 800215e:	fa92 f2a2 	rbit	r2, r2
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4202      	tst	r2, r0
 8002172:	d051      	beq.n	8002218 <HAL_RCC_OscConfig+0x358>
 8002174:	6922      	ldr	r2, [r4, #16]
 8002176:	428a      	cmp	r2, r1
 8002178:	d04e      	beq.n	8002218 <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
}
 800217c:	b003      	add	sp, #12
 800217e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002182:	2501      	movs	r5, #1
 8002184:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218a:	4e11      	ldr	r6, [pc, #68]	; (80021d0 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 800218c:	fab1 f181 	clz	r1, r1
 8002190:	440b      	add	r3, r1
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	f04f 0802 	mov.w	r8, #2
 8002198:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800219a:	f7fe f8a1 	bl	80002e0 <HAL_GetTick>
 800219e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	e004      	b.n	80021ac <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a2:	f7fe f89d 	bl	80002e0 <HAL_GetTick>
 80021a6:	1bc0      	subs	r0, r0, r7
 80021a8:	2802      	cmp	r0, #2
 80021aa:	d87f      	bhi.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 80021ac:	fa98 f3a8 	rbit	r3, r8
 80021b0:	fa98 f3a8 	rbit	r3, r8
 80021b4:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80021ba:	fa98 f3a8 	rbit	r3, r8
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	fa05 f303 	lsl.w	r3, r5, r3
 80021ca:	4213      	tst	r3, r2
 80021cc:	d1e9      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
 80021ce:	e784      	b.n	80020da <HAL_RCC_OscConfig+0x21a>
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
 80021d8:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021dc:	684a      	ldr	r2, [r1, #4]
 80021de:	03d2      	lsls	r2, r2, #15
 80021e0:	f57f ae82 	bpl.w	8001ee8 <HAL_RCC_OscConfig+0x28>
 80021e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021e8:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	499a      	ldr	r1, [pc, #616]	; (8002458 <HAL_RCC_OscConfig+0x598>)
 80021ee:	6808      	ldr	r0, [r1, #0]
 80021f0:	fa92 f2a2 	rbit	r2, r2
 80021f4:	fab2 f282 	clz	r2, r2
 80021f8:	f002 021f 	and.w	r2, r2, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	4202      	tst	r2, r0
 8002204:	f43f aea7 	beq.w	8001f56 <HAL_RCC_OscConfig+0x96>
 8002208:	6862      	ldr	r2, [r4, #4]
 800220a:	2a00      	cmp	r2, #0
 800220c:	f47f aea3 	bne.w	8001f56 <HAL_RCC_OscConfig+0x96>
 8002210:	e7b3      	b.n	800217a <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8002212:	f04f 0800 	mov.w	r8, #0
 8002216:	e6f7      	b.n	8002008 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4d8f      	ldr	r5, [pc, #572]	; (8002458 <HAL_RCC_OscConfig+0x598>)
 800221a:	21f8      	movs	r1, #248	; 0xf8
 800221c:	6828      	ldr	r0, [r5, #0]
 800221e:	fa91 f1a1 	rbit	r1, r1
 8002222:	6962      	ldr	r2, [r4, #20]
 8002224:	fab1 f181 	clz	r1, r1
 8002228:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800222c:	408a      	lsls	r2, r1
 800222e:	4302      	orrs	r2, r0
 8002230:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	071d      	lsls	r5, r3, #28
 8002234:	f57f aed6 	bpl.w	8001fe4 <HAL_RCC_OscConfig+0x124>
 8002238:	e724      	b.n	8002084 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223a:	4d87      	ldr	r5, [pc, #540]	; (8002458 <HAL_RCC_OscConfig+0x598>)
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002242:	602b      	str	r3, [r5, #0]
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224a:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800224e:	68a2      	ldr	r2, [r4, #8]
 8002250:	f023 030f 	bic.w	r3, r3, #15
 8002254:	4313      	orrs	r3, r2
 8002256:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8002258:	f7fe f842 	bl	80002e0 <HAL_GetTick>
 800225c:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002260:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	2601      	movs	r6, #1
 8002264:	e004      	b.n	8002270 <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002266:	f7fe f83b 	bl	80002e0 <HAL_GetTick>
 800226a:	1bc0      	subs	r0, r0, r7
 800226c:	2864      	cmp	r0, #100	; 0x64
 800226e:	d81d      	bhi.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 8002270:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002274:	682a      	ldr	r2, [r5, #0]
 8002276:	fa98 f3a8 	rbit	r3, r8
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	fa06 f303 	lsl.w	r3, r6, r3
 8002286:	4213      	tst	r3, r2
 8002288:	d1ed      	bne.n	8002266 <HAL_RCC_OscConfig+0x3a6>
 800228a:	e663      	b.n	8001f54 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002294:	f7fe f824 	bl	80002e0 <HAL_GetTick>
 8002298:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	682b      	ldr	r3, [r5, #0]
 800229c:	05db      	lsls	r3, r3, #23
 800229e:	f53f aeb8 	bmi.w	8002012 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe f81d 	bl	80002e0 <HAL_GetTick>
 80022a6:	1b80      	subs	r0, r0, r6
 80022a8:	2864      	cmp	r0, #100	; 0x64
 80022aa:	d9f6      	bls.n	800229a <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 80022ac:	2003      	movs	r0, #3
}
 80022ae:	b003      	add	sp, #12
 80022b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 80022b4:	f1b8 0f00 	cmp.w	r8, #0
 80022b8:	f43f af12 	beq.w	80020e0 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022bc:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x598>)
 80022be:	69d3      	ldr	r3, [r2, #28]
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]
 80022c6:	e70b      	b.n	80020e0 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	4d63      	ldr	r5, [pc, #396]	; (8002458 <HAL_RCC_OscConfig+0x598>)
 80022ca:	6a2b      	ldr	r3, [r5, #32]
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	622b      	str	r3, [r5, #32]
 80022d2:	6a2b      	ldr	r3, [r5, #32]
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80022da:	f7fe f801 	bl	80002e0 <HAL_GetTick>
 80022de:	f04f 0902 	mov.w	r9, #2
 80022e2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	2601      	movs	r6, #1
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0x450>
 80022e8:	fa99 f3a9 	rbit	r3, r9
 80022ec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80022ee:	fa99 f3a9 	rbit	r3, r9
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	fa06 f303 	lsl.w	r3, r6, r3
 80022fe:	4213      	tst	r3, r2
 8002300:	d0d8      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fd ffed 	bl	80002e0 <HAL_GetTick>
 8002306:	f241 3388 	movw	r3, #5000	; 0x1388
 800230a:	1bc0      	subs	r0, r0, r7
 800230c:	4298      	cmp	r0, r3
 800230e:	d8cd      	bhi.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 8002310:	fa99 f3a9 	rbit	r3, r9
 8002314:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0e5      	beq.n	80022e8 <HAL_RCC_OscConfig+0x428>
 800231c:	6a2a      	ldr	r2, [r5, #32]
 800231e:	e7e6      	b.n	80022ee <HAL_RCC_OscConfig+0x42e>
 8002320:	2501      	movs	r5, #1
 8002322:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800232e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f04f 0802 	mov.w	r8, #2
 8002338:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800233a:	f7fd ffd1 	bl	80002e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4e46      	ldr	r6, [pc, #280]	; (8002458 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8002340:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e004      	b.n	800234e <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7fd ffcc 	bl	80002e0 <HAL_GetTick>
 8002348:	1bc0      	subs	r0, r0, r7
 800234a:	2802      	cmp	r0, #2
 800234c:	d8ae      	bhi.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 800234e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	6832      	ldr	r2, [r6, #0]
 8002354:	fa98 f3a8 	rbit	r3, r8
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa05 f303 	lsl.w	r3, r5, r3
 8002364:	4213      	tst	r3, r2
 8002366:	d1ed      	bne.n	8002344 <HAL_RCC_OscConfig+0x484>
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	e639      	b.n	8001fe0 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	4a3a      	ldr	r2, [pc, #232]	; (8002458 <HAL_RCC_OscConfig+0x598>)
 800236e:	6813      	ldr	r3, [r2, #0]
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e5cc      	b.n	8001f12 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	4a37      	ldr	r2, [pc, #220]	; (8002458 <HAL_RCC_OscConfig+0x598>)
 800237a:	6a13      	ldr	r3, [r2, #32]
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	e659      	b.n	8002038 <HAL_RCC_OscConfig+0x178>
 8002384:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002390:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800239a:	f7fd ffa1 	bl	80002e0 <HAL_GetTick>
 800239e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80023a2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a4:	2601      	movs	r6, #1
 80023a6:	e005      	b.n	80023b4 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fd ff9a 	bl	80002e0 <HAL_GetTick>
 80023ac:	1bc0      	subs	r0, r0, r7
 80023ae:	2802      	cmp	r0, #2
 80023b0:	f63f af7c 	bhi.w	80022ac <HAL_RCC_OscConfig+0x3ec>
 80023b4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	682a      	ldr	r2, [r5, #0]
 80023ba:	fa98 f3a8 	rbit	r3, r8
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa06 f303 	lsl.w	r3, r6, r3
 80023ca:	4213      	tst	r3, r2
 80023cc:	d1ec      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ce:	686a      	ldr	r2, [r5, #4]
 80023d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d2:	6a21      	ldr	r1, [r4, #32]
 80023d4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80023d8:	430b      	orrs	r3, r1
 80023da:	4313      	orrs	r3, r2
 80023dc:	606b      	str	r3, [r5, #4]
 80023de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80023f8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80023fa:	f7fd ff71 	bl	80002e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fe:	4e16      	ldr	r6, [pc, #88]	; (8002458 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8002400:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002402:	2501      	movs	r5, #1
 8002404:	e005      	b.n	8002412 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002406:	f7fd ff6b 	bl	80002e0 <HAL_GetTick>
 800240a:	1bc0      	subs	r0, r0, r7
 800240c:	2802      	cmp	r0, #2
 800240e:	f63f af4d 	bhi.w	80022ac <HAL_RCC_OscConfig+0x3ec>
 8002412:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002416:	6832      	ldr	r2, [r6, #0]
 8002418:	fa94 f3a4 	rbit	r3, r4
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	fa05 f303 	lsl.w	r3, r5, r3
 8002428:	4213      	tst	r3, r2
 800242a:	d0ec      	beq.n	8002406 <HAL_RCC_OscConfig+0x546>
 800242c:	e68a      	b.n	8002144 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002432:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e564      	b.n	8001f12 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	f042 0204 	orr.w	r2, r2, #4
 800244c:	621a      	str	r2, [r3, #32]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	621a      	str	r2, [r3, #32]
 8002456:	e5ef      	b.n	8002038 <HAL_RCC_OscConfig+0x178>
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x54>)
 800245e:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002460:	f003 010c 	and.w	r1, r3, #12
 8002464:	2908      	cmp	r1, #8
 8002466:	d121      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x50>
 8002468:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 800246c:	fa91 f1a1 	rbit	r1, r1
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002470:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8002474:	fab1 f181 	clz	r1, r1
 8002478:	fa20 f101 	lsr.w	r1, r0, r1
 800247c:	480d      	ldr	r0, [pc, #52]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800247e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002480:	5c40      	ldrb	r0, [r0, r1]
 8002482:	210f      	movs	r1, #15
 8002484:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002488:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800248a:	fab1 f181 	clz	r1, r1
 800248e:	f002 020f 	and.w	r2, r2, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002492:	bf4c      	ite	mi
 8002494:	4b08      	ldrmi	r3, [pc, #32]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002496:	4b09      	ldrpl	r3, [pc, #36]	; (80024bc <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002498:	fa22 f201 	lsr.w	r2, r2, r1
 800249c:	4908      	ldr	r1, [pc, #32]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x64>)
 800249e:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80024a0:	bf48      	it	mi
 80024a2:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80024a6:	fb03 f000 	mul.w	r0, r3, r0
 80024aa:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	08006108 	.word	0x08006108
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	003d0900 	.word	0x003d0900
 80024c0:	08006118 	.word	0x08006118

080024c4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024c4:	4a5f      	ldr	r2, [pc, #380]	; (8002644 <HAL_RCC_ClockConfig+0x180>)
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	428b      	cmp	r3, r1
 80024ce:	d20b      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	f023 0307 	bic.w	r3, r3, #7
 80024d6:	430b      	orrs	r3, r1
 80024d8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4299      	cmp	r1, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
}
 80024e6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	6803      	ldr	r3, [r0, #0]
{
 80024ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ee:	079c      	lsls	r4, r3, #30
 80024f0:	d506      	bpl.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f2:	4c55      	ldr	r4, [pc, #340]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80024f4:	6885      	ldr	r5, [r0, #8]
 80024f6:	6862      	ldr	r2, [r4, #4]
 80024f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024fc:	432a      	orrs	r2, r5
 80024fe:	6062      	str	r2, [r4, #4]
 8002500:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	07d9      	lsls	r1, r3, #31
 8002504:	4606      	mov	r6, r0
 8002506:	d531      	bpl.n	800256c <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002508:	6842      	ldr	r2, [r0, #4]
 800250a:	2a01      	cmp	r2, #1
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002510:	2a02      	cmp	r2, #2
 8002512:	bf0c      	ite	eq
 8002514:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002518:	2302      	movne	r3, #2
 800251a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	494a      	ldr	r1, [pc, #296]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 8002520:	6808      	ldr	r0, [r1, #0]
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	4203      	tst	r3, r0
 8002536:	d029      	beq.n	800258c <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002538:	4d43      	ldr	r5, [pc, #268]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 800253a:	686b      	ldr	r3, [r5, #4]
 800253c:	f023 0303 	bic.w	r3, r3, #3
 8002540:	4313      	orrs	r3, r2
 8002542:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002544:	f7fd fecc 	bl	80002e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002548:	6873      	ldr	r3, [r6, #4]
 800254a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800254c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	d023      	beq.n	800259c <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002554:	2b02      	cmp	r3, #2
 8002556:	d105      	bne.n	8002564 <HAL_RCC_ClockConfig+0xa0>
 8002558:	e058      	b.n	800260c <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255a:	f7fd fec1 	bl	80002e0 <HAL_GetTick>
 800255e:	1bc0      	subs	r0, r0, r7
 8002560:	4540      	cmp	r0, r8
 8002562:	d859      	bhi.n	8002618 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002564:	686b      	ldr	r3, [r5, #4]
 8002566:	f013 0f0c 	tst.w	r3, #12
 800256a:	d1f6      	bne.n	800255a <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800256c:	4a35      	ldr	r2, [pc, #212]	; (8002644 <HAL_RCC_ClockConfig+0x180>)
 800256e:	6813      	ldr	r3, [r2, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	429c      	cmp	r4, r3
 8002576:	d217      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002578:	6813      	ldr	r3, [r2, #0]
 800257a:	f023 0307 	bic.w	r3, r3, #7
 800257e:	4323      	orrs	r3, r4
 8002580:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002582:	6813      	ldr	r3, [r2, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	429c      	cmp	r4, r3
 800258a:	d00d      	beq.n	80025a8 <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 800258c:	2001      	movs	r0, #1
 800258e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002592:	f7fd fea5 	bl	80002e0 <HAL_GetTick>
 8002596:	1bc0      	subs	r0, r0, r7
 8002598:	4540      	cmp	r0, r8
 800259a:	d83d      	bhi.n	8002618 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800259c:	686b      	ldr	r3, [r5, #4]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d1f5      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
 80025a6:	e7e1      	b.n	800256c <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	6833      	ldr	r3, [r6, #0]
 80025aa:	075a      	lsls	r2, r3, #29
 80025ac:	d506      	bpl.n	80025bc <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ae:	4926      	ldr	r1, [pc, #152]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80025b0:	68f0      	ldr	r0, [r6, #12]
 80025b2:	684a      	ldr	r2, [r1, #4]
 80025b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025b8:	4302      	orrs	r2, r0
 80025ba:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	071b      	lsls	r3, r3, #28
 80025be:	d507      	bpl.n	80025d0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c0:	4a21      	ldr	r2, [pc, #132]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80025c2:	6931      	ldr	r1, [r6, #16]
 80025c4:	6853      	ldr	r3, [r2, #4]
 80025c6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025ce:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025d0:	f7ff ff44 	bl	800245c <HAL_RCC_GetSysClockFreq>
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 80025d6:	4601      	mov	r1, r0
 80025d8:	22f0      	movs	r2, #240	; 0xf0
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	fa92 f2a2 	rbit	r2, r2
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e8:	40d3      	lsrs	r3, r2
 80025ea:	4818      	ldr	r0, [pc, #96]	; (800264c <HAL_RCC_ClockConfig+0x188>)
 80025ec:	4a18      	ldr	r2, [pc, #96]	; (8002650 <HAL_RCC_ClockConfig+0x18c>)
 80025ee:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 80025f0:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025f2:	fa21 f303 	lsr.w	r3, r1, r3
 80025f6:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80025f8:	f7fd fe42 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 80025fc:	2000      	movs	r0, #0
}
 80025fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002602:	f7fd fe6d 	bl	80002e0 <HAL_GetTick>
 8002606:	1bc0      	subs	r0, r0, r7
 8002608:	4540      	cmp	r0, r8
 800260a:	d805      	bhi.n	8002618 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260c:	686b      	ldr	r3, [r5, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b08      	cmp	r3, #8
 8002614:	d1f5      	bne.n	8002602 <HAL_RCC_ClockConfig+0x13e>
 8002616:	e7a9      	b.n	800256c <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 8002618:	2003      	movs	r0, #3
 800261a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800261e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002622:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4908      	ldr	r1, [pc, #32]	; (8002648 <HAL_RCC_ClockConfig+0x184>)
 8002628:	6809      	ldr	r1, [r1, #0]
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	420b      	tst	r3, r1
 800263c:	f47f af7c 	bne.w	8002538 <HAL_RCC_ClockConfig+0x74>
 8002640:	e7a4      	b.n	800258c <HAL_RCC_ClockConfig+0xc8>
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000
 8002648:	40021000 	.word	0x40021000
 800264c:	0800615c 	.word	0x0800615c
 8002650:	20000000 	.word	0x20000000

08002654 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002654:	4b01      	ldr	r3, [pc, #4]	; (800265c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002662:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	fa92 f2a2 	rbit	r2, r2
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002674:	40d3      	lsrs	r3, r2
 8002676:	4904      	ldr	r1, [pc, #16]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	6810      	ldr	r0, [r2, #0]
}    
 800267e:	40d8      	lsrs	r0, r3
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	0800616c 	.word	0x0800616c
 800268c:	20000000 	.word	0x20000000

08002690 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002692:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	fa92 f2a2 	rbit	r2, r2
 800269c:	fab2 f282 	clz	r2, r2
 80026a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026a4:	40d3      	lsrs	r3, r2
 80026a6:	4904      	ldr	r1, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	6810      	ldr	r0, [r2, #0]
} 
 80026ae:	40d8      	lsrs	r0, r3
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	0800616c 	.word	0x0800616c
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026c4:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	03c5      	lsls	r5, r0, #15
{
 80026ca:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026cc:	d538      	bpl.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ce:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	00d1      	lsls	r1, r2, #3
 80026d4:	d567      	bpl.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4d59      	ldr	r5, [pc, #356]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 80026dc:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	d570      	bpl.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026e2:	4d55      	ldr	r5, [pc, #340]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80026e4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026e6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80026ea:	d01f      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80026ec:	6861      	ldr	r1, [r4, #4]
 80026ee:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01b      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f6:	6a29      	ldr	r1, [r5, #32]
 80026f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fc:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002700:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002704:	4f4e      	ldr	r7, [pc, #312]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	443a      	add	r2, r7
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	f04f 0e01 	mov.w	lr, #1
 8002712:	f8c2 e000 	str.w	lr, [r2]
 8002716:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	443b      	add	r3, r7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002724:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002726:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8002728:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800272a:	d461      	bmi.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800272c:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800272e:	4a42      	ldr	r2, [pc, #264]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002730:	6a13      	ldr	r3, [r2, #32]
 8002732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002736:	430b      	orrs	r3, r1
 8002738:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800273a:	2e00      	cmp	r6, #0
 800273c:	d153      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x126>
 800273e:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002740:	07c5      	lsls	r5, r0, #31
 8002742:	d506      	bpl.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002744:	4a3c      	ldr	r2, [pc, #240]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002746:	68a1      	ldr	r1, [r4, #8]
 8002748:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	430b      	orrs	r3, r1
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002752:	0681      	lsls	r1, r0, #26
 8002754:	d506      	bpl.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002756:	4a38      	ldr	r2, [pc, #224]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002758:	68e1      	ldr	r1, [r4, #12]
 800275a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800275c:	f023 0310 	bic.w	r3, r3, #16
 8002760:	430b      	orrs	r3, r1
 8002762:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002764:	0602      	lsls	r2, r0, #24
 8002766:	d506      	bpl.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002768:	4a33      	ldr	r2, [pc, #204]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800276a:	6921      	ldr	r1, [r4, #16]
 800276c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800276e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002772:	430b      	orrs	r3, r1
 8002774:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002776:	04c3      	lsls	r3, r0, #19
 8002778:	d40d      	bmi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800277a:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800277e:	d007      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002780:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002782:	69a1      	ldr	r1, [r4, #24]
 8002784:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800278a:	430b      	orrs	r3, r1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	b003      	add	sp, #12
 8002792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002796:	4a28      	ldr	r2, [pc, #160]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002798:	6961      	ldr	r1, [r4, #20]
 800279a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800279c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	e7e9      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4d24      	ldr	r5, [pc, #144]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027ae:	61da      	str	r2, [r3, #28]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	682b      	ldr	r3, [r5, #0]
 80027bc:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 80027be:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	d48e      	bmi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80027cc:	f7fd fd88 	bl	80002e0 <HAL_GetTick>
 80027d0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	05db      	lsls	r3, r3, #23
 80027d6:	d484      	bmi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d8:	f7fd fd82 	bl	80002e0 <HAL_GetTick>
 80027dc:	1bc0      	subs	r0, r0, r7
 80027de:	2864      	cmp	r0, #100	; 0x64
 80027e0:	d9f7      	bls.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 80027e2:	2003      	movs	r0, #3
 80027e4:	e7d4      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e6:	69d3      	ldr	r3, [r2, #28]
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]
 80027ee:	e7a6      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 80027f2:	f7fd fd75 	bl	80002e0 <HAL_GetTick>
 80027f6:	f04f 0902 	mov.w	r9, #2
 80027fa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	e014      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80027fe:	fa99 f3a9 	rbit	r3, r9
 8002802:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002804:	fa99 f3a9 	rbit	r3, r9
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa07 f303 	lsl.w	r3, r7, r3
 8002814:	4213      	tst	r3, r2
 8002816:	d189      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002818:	f7fd fd62 	bl	80002e0 <HAL_GetTick>
 800281c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002820:	eba0 0008 	sub.w	r0, r0, r8
 8002824:	4298      	cmp	r0, r3
 8002826:	d8dc      	bhi.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002828:	fa99 f3a9 	rbit	r3, r9
 800282c:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0e4      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8002834:	6a2a      	ldr	r2, [r5, #32]
 8002836:	e7e5      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
 8002840:	10908100 	.word	0x10908100

08002844 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002844:	6803      	ldr	r3, [r0, #0]
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002848:	6a9d      	ldr	r5, [r3, #40]	; 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800284a:	691c      	ldr	r4, [r3, #16]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 800284c:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800284e:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002850:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002854:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002858:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800285a:	f3c3 2706 	ubfx	r7, r3, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800285e:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002862:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002864:	f000 0e40 	and.w	lr, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002868:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800286c:	608c      	str	r4, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800286e:	f881 e003 	strb.w	lr, [r1, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002872:	700e      	strb	r6, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002874:	704f      	strb	r7, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002876:	708b      	strb	r3, [r1, #2]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002878:	b9ba      	cbnz	r2, 80028aa <HAL_RTC_GetTime+0x66>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800287a:	093d      	lsrs	r5, r7, #4
 800287c:	091c      	lsrs	r4, r3, #4
 800287e:	0936      	lsrs	r6, r6, #4
 8002880:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002884:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002888:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 800288c:	f000 000f 	and.w	r0, r0, #15
 8002890:	f007 070f 	and.w	r7, r7, #15
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800289c:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 80028a0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028a4:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028a6:	704d      	strb	r5, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80028a8:	708c      	strb	r4, [r1, #2]
}
 80028aa:	2000      	movs	r0, #0
 80028ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ae:	bf00      	nop

080028b0 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80028b0:	6803      	ldr	r3, [r0, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
{
 80028bc:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80028be:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80028c2:	b2dd      	uxtb	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80028c4:	f3c3 3742 	ubfx	r7, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80028c8:	f004 061f 	and.w	r6, r4, #31
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80028cc:	0c1b      	lsrs	r3, r3, #16
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80028ce:	700f      	strb	r7, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80028d0:	704e      	strb	r6, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80028d2:	70cb      	strb	r3, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80028d4:	708d      	strb	r5, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 80028d6:	b9ba      	cbnz	r2, 8002908 <HAL_RTC_GetDate+0x58>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80028d8:	0936      	lsrs	r6, r6, #4
 80028da:	0928      	lsrs	r0, r5, #4
 80028dc:	091a      	lsrs	r2, r3, #4
 80028de:	00b7      	lsls	r7, r6, #2
 80028e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 80028e4:	f004 040f 	and.w	r4, r4, #15
 80028e8:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80028ec:	443e      	add	r6, r7
 80028ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80028fa:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80028fe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002902:	7088      	strb	r0, [r1, #2]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002904:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002906:	70cb      	strb	r3, [r1, #3]
}
 8002908:	2000      	movs	r0, #0
 800290a:	bcf0      	pop	{r4, r5, r6, r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002910:	6802      	ldr	r2, [r0, #0]
{
 8002912:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002914:	68d3      	ldr	r3, [r2, #12]
 8002916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800291a:	60d3      	str	r3, [r2, #12]
{
 800291c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800291e:	f7fd fcdf 	bl	80002e0 <HAL_GetTick>
 8002922:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002924:	e005      	b.n	8002932 <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002926:	f7fd fcdb 	bl	80002e0 <HAL_GetTick>
 800292a:	1b40      	subs	r0, r0, r5
 800292c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002930:	d805      	bhi.n	800293e <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	069b      	lsls	r3, r3, #26
 8002938:	d5f5      	bpl.n	8002926 <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 800293a:	2000      	movs	r0, #0
 800293c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800293e:	2003      	movs	r0, #3
}
 8002940:	bd38      	pop	{r3, r4, r5, pc}
 8002942:	bf00      	nop

08002944 <RTC_EnterInitMode>:
{
 8002944:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002946:	6803      	ldr	r3, [r0, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	0652      	lsls	r2, r2, #25
 800294c:	d501      	bpl.n	8002952 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 800294e:	2000      	movs	r0, #0
 8002950:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002952:	f04f 32ff 	mov.w	r2, #4294967295
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800295a:	f7fd fcc1 	bl	80002e0 <HAL_GetTick>
 800295e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	065b      	lsls	r3, r3, #25
 8002966:	d4f2      	bmi.n	800294e <RTC_EnterInitMode+0xa>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002968:	f7fd fcba 	bl	80002e0 <HAL_GetTick>
 800296c:	1b40      	subs	r0, r0, r5
 800296e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002972:	d9f5      	bls.n	8002960 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002974:	2003      	movs	r0, #3
}
 8002976:	bd38      	pop	{r3, r4, r5, pc}

08002978 <HAL_RTC_Init>:
{
 8002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hrtc == NULL)
 800297a:	2800      	cmp	r0, #0
 800297c:	d050      	beq.n	8002a20 <HAL_RTC_Init+0xa8>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800297e:	7f43      	ldrb	r3, [r0, #29]
 8002980:	4604      	mov	r4, r0
 8002982:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03f      	beq.n	8002a0a <HAL_RTC_Init+0x92>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800298a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800298c:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800298e:	21ca      	movs	r1, #202	; 0xca
 8002990:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002992:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002994:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002996:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800299a:	f7ff ffd3 	bl	8002944 <RTC_EnterInitMode>
 800299e:	4605      	mov	r5, r0
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d12a      	bne.n	80029fa <HAL_RTC_Init+0x82>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029a4:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029a6:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029a8:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029aa:	6927      	ldr	r7, [r4, #16]
 80029ac:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029ae:	68e0      	ldr	r0, [r4, #12]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029b0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80029b4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80029b8:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	433a      	orrs	r2, r7
 80029be:	4332      	orrs	r2, r6
 80029c0:	430a      	orrs	r2, r1
 80029c2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029c4:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68a1      	ldr	r1, [r4, #8]
 80029ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	0692      	lsls	r2, r2, #26
 80029dc:	d519      	bpl.n	8002a12 <HAL_RTC_Init+0x9a>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80029de:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80029e0:	69a6      	ldr	r6, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80029e2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80029e6:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80029ea:	20ff      	movs	r0, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80029ec:	4332      	orrs	r2, r6
    hrtc->State = HAL_RTC_STATE_READY;
 80029ee:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80029f2:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80029f4:	7761      	strb	r1, [r4, #29]
}
 80029f6:	4628      	mov	r0, r5
 80029f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029fa:	6822      	ldr	r2, [r4, #0]
 80029fc:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029fe:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002a00:	2501      	movs	r5, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a02:	6251      	str	r1, [r2, #36]	; 0x24
}
 8002a04:	4628      	mov	r0, r5
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a06:	7763      	strb	r3, [r4, #29]
}
 8002a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002a0a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002a0c:	f001 ff98 	bl	8004940 <HAL_RTC_MspInit>
 8002a10:	e7bb      	b.n	800298a <HAL_RTC_Init+0x12>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff ff7c 	bl	8002910 <HAL_RTC_WaitForSynchro>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	d1ee      	bne.n	80029fa <HAL_RTC_Init+0x82>
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	e7de      	b.n	80029de <HAL_RTC_Init+0x66>
     return HAL_ERROR;
 8002a20:	2501      	movs	r5, #1
}
 8002a22:	4628      	mov	r0, r5
 8002a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a26:	bf00      	nop

08002a28 <HAL_RTC_SetTime>:
{
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002a2a:	7f03      	ldrb	r3, [r0, #28]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d07b      	beq.n	8002b28 <HAL_RTC_SetTime+0x100>
 8002a30:	460e      	mov	r6, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a32:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002a34:	2101      	movs	r1, #1
 8002a36:	7701      	strb	r1, [r0, #28]
 8002a38:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a3a:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a3c:	6801      	ldr	r1, [r0, #0]
  if(Format == RTC_FORMAT_BIN)
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	d039      	beq.n	8002ab6 <HAL_RTC_SetTime+0x8e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a42:	688c      	ldr	r4, [r1, #8]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002a44:	7870      	ldrb	r0, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002a46:	7832      	ldrb	r2, [r6, #0]
              ((uint32_t)sTime->Seconds) | \
 8002a48:	78b3      	ldrb	r3, [r6, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a4a:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8002a4e:	bf14      	ite	ne
 8002a50:	78f4      	ldrbne	r4, [r6, #3]
      sTime->TimeFormat = 0x00U;
 8002a52:	70f4      	strbeq	r4, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002a54:	ea4f 2000 	mov.w	r0, r0, lsl #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002a58:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002a5c:	bf18      	it	ne
 8002a5e:	0424      	lslne	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002a60:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002a62:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a64:	22ca      	movs	r2, #202	; 0xca
 8002a66:	2353      	movs	r3, #83	; 0x53
 8002a68:	624a      	str	r2, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a6a:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a6c:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a6e:	f7ff ff69 	bl	8002944 <RTC_EnterInitMode>
 8002a72:	4607      	mov	r7, r0
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d15a      	bne.n	8002b2e <HAL_RTC_SetTime+0x106>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a78:	682b      	ldr	r3, [r5, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a7a:	68f2      	ldr	r2, [r6, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a7c:	f004 307f 	and.w	r0, r4, #2139062143	; 0x7f7f7f7f
 8002a80:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a84:	6934      	ldr	r4, [r6, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a86:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002a8e:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	4322      	orrs	r2, r4
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a9e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	0692      	lsls	r2, r2, #26
 8002aa4:	d54d      	bpl.n	8002b42 <HAL_RTC_SetTime+0x11a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa6:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8002aa8:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc); 
 8002aaa:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aac:	6258      	str	r0, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002aae:	7769      	strb	r1, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 8002ab0:	772a      	strb	r2, [r5, #28]
}
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ab6:	688f      	ldr	r7, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ab8:	7830      	ldrb	r0, [r6, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002aba:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002abe:	bf16      	itet	ne
 8002ac0:	78f7      	ldrbne	r7, [r6, #3]
      sTime->TimeFormat = 0x00U;
 8002ac2:	70f7      	strbeq	r7, [r6, #3]
 8002ac4:	043f      	lslne	r7, r7, #16
  while(Value >= 10U)
 8002ac6:	2809      	cmp	r0, #9
 8002ac8:	f04f 0400 	mov.w	r4, #0
 8002acc:	d907      	bls.n	8002ade <HAL_RTC_SetTime+0xb6>
    Value -= 10U;
 8002ace:	380a      	subs	r0, #10
 8002ad0:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002ad2:	2809      	cmp	r0, #9
    bcdhigh++;
 8002ad4:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 8002ad8:	d8f9      	bhi.n	8002ace <HAL_RTC_SetTime+0xa6>
 8002ada:	0124      	lsls	r4, r4, #4
 8002adc:	b2e4      	uxtb	r4, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ade:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ae0:	4320      	orrs	r0, r4
  while(Value >= 10U)
 8002ae2:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ae4:	ea4f 4400 	mov.w	r4, r0, lsl #16
  while(Value >= 10U)
 8002ae8:	d939      	bls.n	8002b5e <HAL_RTC_SetTime+0x136>
 8002aea:	2000      	movs	r0, #0
    Value -= 10U;
 8002aec:	3b0a      	subs	r3, #10
 8002aee:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002af0:	2b09      	cmp	r3, #9
    bcdhigh++;
 8002af2:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002af6:	d8f9      	bhi.n	8002aec <HAL_RTC_SetTime+0xc4>
 8002af8:	0100      	lsls	r0, r0, #4
 8002afa:	fa5f fe80 	uxtb.w	lr, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002afe:	78b0      	ldrb	r0, [r6, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b00:	ea43 030e 	orr.w	r3, r3, lr
  while(Value >= 10U)
 8002b04:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b06:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 8002b0a:	d92b      	bls.n	8002b64 <HAL_RTC_SetTime+0x13c>
    Value -= 10U;
 8002b0c:	380a      	subs	r0, #10
 8002b0e:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002b10:	2809      	cmp	r0, #9
    bcdhigh++;
 8002b12:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8002b16:	d8f9      	bhi.n	8002b0c <HAL_RTC_SetTime+0xe4>
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b1c:	433c      	orrs	r4, r7
 8002b1e:	4323      	orrs	r3, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b20:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b22:	ea43 0400 	orr.w	r4, r3, r0
 8002b26:	e79d      	b.n	8002a64 <HAL_RTC_SetTime+0x3c>
  __HAL_LOCK(hrtc);
 8002b28:	2702      	movs	r7, #2
}
 8002b2a:	4638      	mov	r0, r7
 8002b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b2e:	6829      	ldr	r1, [r5, #0]
 8002b30:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b32:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8002b34:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002b36:	2701      	movs	r7, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b38:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3a:	776a      	strb	r2, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002b3c:	772b      	strb	r3, [r5, #28]
}
 8002b3e:	4638      	mov	r0, r7
 8002b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b42:	4628      	mov	r0, r5
 8002b44:	f7ff fee4 	bl	8002910 <HAL_RTC_WaitForSynchro>
 8002b48:	b908      	cbnz	r0, 8002b4e <HAL_RTC_SetTime+0x126>
 8002b4a:	682b      	ldr	r3, [r5, #0]
 8002b4c:	e7ab      	b.n	8002aa6 <HAL_RTC_SetTime+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002b4e:	682a      	ldr	r2, [r5, #0]
 8002b50:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b52:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002b54:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002b56:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b58:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8002b5a:	2701      	movs	r7, #1
 8002b5c:	e7a9      	b.n	8002ab2 <HAL_RTC_SetTime+0x8a>
  while(Value >= 10U)
 8002b5e:	f04f 0e00 	mov.w	lr, #0
 8002b62:	e7cc      	b.n	8002afe <HAL_RTC_SetTime+0xd6>
 8002b64:	2200      	movs	r2, #0
 8002b66:	e7d9      	b.n	8002b1c <HAL_RTC_SetTime+0xf4>

08002b68 <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 8002b68:	7f03      	ldrb	r3, [r0, #28]
 8002b6a:	2b01      	cmp	r3, #1
{
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002b6e:	d063      	beq.n	8002c38 <HAL_RTC_SetDate+0xd0>
 8002b70:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002b72:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8002b74:	2001      	movs	r0, #1
 8002b76:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002b78:	7763      	strb	r3, [r4, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b7a:	b34a      	cbz	r2, 8002bd0 <HAL_RTC_SetDate+0x68>
                  (((uint32_t)sDate->Month) << 8U) | \
 8002b7c:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002b7e:	78ca      	ldrb	r2, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 8002b80:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002b82:	780d      	ldrb	r5, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002b84:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002b86:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002b8a:	4318      	orrs	r0, r3
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002b8c:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	21ca      	movs	r1, #202	; 0xca
 8002b94:	2253      	movs	r2, #83	; 0x53
 8002b96:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b98:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b9c:	f7ff fed2 	bl	8002944 <RTC_EnterInitMode>
 8002ba0:	4606      	mov	r6, r0
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d14b      	bne.n	8002c3e <HAL_RTC_SetDate+0xd6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002bac:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002bb0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	0692      	lsls	r2, r2, #26
 8002bbe:	d54e      	bpl.n	8002c5e <HAL_RTC_SetDate+0xf6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002bc0:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8002bc2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 8002bc4:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002bc6:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002bc8:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002bca:	7722      	strb	r2, [r4, #28]
}
 8002bcc:	4630      	mov	r0, r6
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002bd0:	784e      	ldrb	r6, [r1, #1]
 8002bd2:	06f0      	lsls	r0, r6, #27
 8002bd4:	d43d      	bmi.n	8002c52 <HAL_RTC_SetDate+0xea>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bd6:	78cb      	ldrb	r3, [r1, #3]
  while(Value >= 10U)
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	f04f 0000 	mov.w	r0, #0
 8002bde:	d907      	bls.n	8002bf0 <HAL_RTC_SetDate+0x88>
    Value -= 10U;
 8002be0:	3b0a      	subs	r3, #10
 8002be2:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002be4:	2b09      	cmp	r3, #9
    bcdhigh++;
 8002be6:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002bea:	d8f9      	bhi.n	8002be0 <HAL_RTC_SetDate+0x78>
 8002bec:	0100      	lsls	r0, r0, #4
 8002bee:	b2c0      	uxtb	r0, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bf0:	4303      	orrs	r3, r0
  while(Value >= 10U)
 8002bf2:	2e09      	cmp	r6, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bf4:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 8002bf8:	d93f      	bls.n	8002c7a <HAL_RTC_SetDate+0x112>
 8002bfa:	2000      	movs	r0, #0
    Value -= 10U;
 8002bfc:	f1a6 050a 	sub.w	r5, r6, #10
 8002c00:	b2ee      	uxtb	r6, r5
  while(Value >= 10U)
 8002c02:	2e09      	cmp	r6, #9
    bcdhigh++;
 8002c04:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002c08:	d8f8      	bhi.n	8002bfc <HAL_RTC_SetDate+0x94>
 8002c0a:	0105      	lsls	r5, r0, #4
 8002c0c:	b2ed      	uxtb	r5, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002c0e:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c10:	4335      	orrs	r5, r6
  while(Value >= 10U)
 8002c12:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c14:	ea4f 2505 	mov.w	r5, r5, lsl #8
  while(Value >= 10U)
 8002c18:	d931      	bls.n	8002c7e <HAL_RTC_SetDate+0x116>
    Value -= 10U;
 8002c1a:	380a      	subs	r0, #10
 8002c1c:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002c1e:	2809      	cmp	r0, #9
    bcdhigh++;
 8002c20:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8002c24:	d8f9      	bhi.n	8002c1a <HAL_RTC_SetDate+0xb2>
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002c2a:	7809      	ldrb	r1, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c2c:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8002c30:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002c32:	4310      	orrs	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c34:	4305      	orrs	r5, r0
 8002c36:	e7ab      	b.n	8002b90 <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 8002c38:	2602      	movs	r6, #2
}
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c3e:	6821      	ldr	r1, [r4, #0]
 8002c40:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c42:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8002c44:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002c46:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c48:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4a:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002c4c:	7723      	strb	r3, [r4, #28]
}
 8002c4e:	4630      	mov	r0, r6
 8002c50:	bd70      	pop	{r4, r5, r6, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c52:	f026 0510 	bic.w	r5, r6, #16
 8002c56:	350a      	adds	r5, #10
 8002c58:	b2ee      	uxtb	r6, r5
 8002c5a:	704e      	strb	r6, [r1, #1]
 8002c5c:	e7bb      	b.n	8002bd6 <HAL_RTC_SetDate+0x6e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff fe56 	bl	8002910 <HAL_RTC_WaitForSynchro>
 8002c64:	b908      	cbnz	r0, 8002c6a <HAL_RTC_SetDate+0x102>
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	e7aa      	b.n	8002bc0 <HAL_RTC_SetDate+0x58>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002c6a:	6822      	ldr	r2, [r4, #0]
 8002c6c:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c6e:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002c70:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002c72:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c74:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002c76:	2601      	movs	r6, #1
 8002c78:	e7a8      	b.n	8002bcc <HAL_RTC_SetDate+0x64>
  while(Value >= 10U)
 8002c7a:	2500      	movs	r5, #0
 8002c7c:	e7c7      	b.n	8002c0e <HAL_RTC_SetDate+0xa6>
 8002c7e:	2200      	movs	r2, #0
 8002c80:	e7d3      	b.n	8002c2a <HAL_RTC_SetDate+0xc2>
 8002c82:	bf00      	nop

08002c84 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c88:	7f03      	ldrb	r3, [r0, #28]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d058      	beq.n	8002d40 <HAL_RTCEx_SetWakeUpTimer_IT+0xbc>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	4605      	mov	r5, r0
 8002c92:	4617      	mov	r7, r2
 8002c94:	4688      	mov	r8, r1
 8002c96:	2253      	movs	r2, #83	; 0x53
 8002c98:	21ca      	movs	r1, #202	; 0xca
  __HAL_LOCK(hrtc);
 8002c9a:	2401      	movs	r4, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	7768      	strb	r0, [r5, #29]
  __HAL_LOCK(hrtc);
 8002ca0:	772c      	strb	r4, [r5, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ca2:	6259      	str	r1, [r3, #36]	; 0x24
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	0551      	lsls	r1, r2, #21
 8002caa:	d50d      	bpl.n	8002cc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
    tickstart = HAL_GetTick();
 8002cac:	f7fd fb18 	bl	80002e0 <HAL_GetTick>
 8002cb0:	4604      	mov	r4, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002cb2:	e005      	b.n	8002cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x3c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002cb4:	f7fd fb14 	bl	80002e0 <HAL_GetTick>
 8002cb8:	1b00      	subs	r0, r0, r4
 8002cba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cbe:	d84b      	bhi.n	8002d58 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002cc0:	682b      	ldr	r3, [r5, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	0752      	lsls	r2, r2, #29
 8002cc6:	d4f5      	bmi.n	8002cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cce:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002cd8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002cda:	f7fd fb01 	bl	80002e0 <HAL_GetTick>
 8002cde:	4681      	mov	r9, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002ce0:	e006      	b.n	8002cf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002ce2:	f7fd fafd 	bl	80002e0 <HAL_GetTick>
 8002ce6:	eba0 0009 	sub.w	r0, r0, r9
 8002cea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cee:	d82a      	bhi.n	8002d46 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002cf0:	682e      	ldr	r6, [r5, #0]
 8002cf2:	68f4      	ldr	r4, [r6, #12]
 8002cf4:	f014 0404 	ands.w	r4, r4, #4
 8002cf8:	d0f3      	beq.n	8002ce2 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002cfa:	f8c6 8014 	str.w	r8, [r6, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002cfe:	68b2      	ldr	r2, [r6, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002d02:	f022 0207 	bic.w	r2, r2, #7
 8002d06:	60b2      	str	r2, [r6, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002d08:	68b2      	ldr	r2, [r6, #8]
 8002d0a:	4317      	orrs	r7, r2
 8002d0c:	60b7      	str	r7, [r6, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d14:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d1c:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002d1e:	68b3      	ldr	r3, [r6, #8]
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	60b3      	str	r3, [r6, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d26:	68b3      	ldr	r3, [r6, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d28:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2a:	24ff      	movs	r4, #255	; 0xff
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  hrtc->State = HAL_RTC_STATE_READY;
 8002d30:	2101      	movs	r1, #1
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d32:	60b3      	str	r3, [r6, #8]

  return HAL_OK;
 8002d34:	4610      	mov	r0, r2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d36:	6274      	str	r4, [r6, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002d38:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8002d3a:	772a      	strb	r2, [r5, #28]
  return HAL_OK;
 8002d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8002d40:	2002      	movs	r0, #2
}
 8002d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d46:	682a      	ldr	r2, [r5, #0]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4a:	21ff      	movs	r1, #255	; 0xff
 8002d4c:	6251      	str	r1, [r2, #36]	; 0x24
      return HAL_TIMEOUT;
 8002d4e:	4618      	mov	r0, r3
      __HAL_UNLOCK(hrtc);
 8002d50:	772c      	strb	r4, [r5, #28]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d52:	776b      	strb	r3, [r5, #29]
      return HAL_TIMEOUT;
 8002d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d58:	6829      	ldr	r1, [r5, #0]
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d5c:	20ff      	movs	r0, #255	; 0xff
       __HAL_UNLOCK(hrtc);
 8002d5e:	2200      	movs	r2, #0
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d60:	6248      	str	r0, [r1, #36]	; 0x24
       return HAL_TIMEOUT;
 8002d62:	4618      	mov	r0, r3
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d64:	776b      	strb	r3, [r5, #29]
       __HAL_UNLOCK(hrtc);
 8002d66:	772a      	strb	r2, [r5, #28]
       return HAL_TIMEOUT;
 8002d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d6c:	40010400 	.word	0x40010400

08002d70 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002d70:	6803      	ldr	r3, [r0, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	055b      	lsls	r3, r3, #21
{
 8002d76:	b510      	push	{r4, lr}
 8002d78:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002d7a:	d507      	bpl.n	8002d8c <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002d7c:	f000 fde6 	bl	800394c <HAL_RTCEx_WakeUpTimerEventCallback>
    
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d80:	6822      	ldr	r2, [r4, #0]
 8002d82:	68d3      	ldr	r3, [r2, #12]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002d8a:	60d3      	str	r3, [r2, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8002d8e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d92:	2301      	movs	r3, #1
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d94:	6151      	str	r1, [r2, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8002d96:	7763      	strb	r3, [r4, #29]
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002da0:	6803      	ldr	r3, [r0, #0]
 8002da2:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002da4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002dac:	6803      	ldr	r3, [r0, #0]
 8002dae:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002db0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002db8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_Transmit_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002dc4:	b1c9      	cbz	r1, 8002dfa <HAL_UART_Transmit_IT+0x42>
 8002dc6:	b1c2      	cbz	r2, 8002dfa <HAL_UART_Transmit_IT+0x42>
    __HAL_LOCK(huart);
 8002dc8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d0f7      	beq.n	8002dc0 <HAL_UART_Transmit_IT+0x8>
{
 8002dd0:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002dd4:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 8002dd6:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dda:	2421      	movs	r4, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dde:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002de2:	682c      	ldr	r4, [r5, #0]
    huart->pTxBuffPtr = pData;
 8002de4:	64c1      	str	r1, [r0, #76]	; 0x4c
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002de6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 8002dea:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    __HAL_UNLOCK(huart);
 8002dee:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 8002df2:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002df4:	602c      	str	r4, [r5, #0]
  }
}
 8002df6:	bc30      	pop	{r4, r5}
 8002df8:	4770      	bx	lr
      return HAL_ERROR;
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop

08002e00 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e00:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2002      	movs	r0, #2
  }
}
 8002e0a:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002e0c:	b349      	cbz	r1, 8002e62 <HAL_UART_Receive_IT+0x62>
 8002e0e:	b342      	cbz	r2, 8002e62 <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 8002e10:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d0f7      	beq.n	8002e08 <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 8002e18:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8002e1a:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 8002e20:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 8002e24:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002e28:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 8002e2c:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8002e30:	d027      	beq.n	8002e82 <HAL_UART_Receive_IT+0x82>
 8002e32:	b9c3      	cbnz	r3, 8002e66 <HAL_UART_Receive_IT+0x66>
 8002e34:	6903      	ldr	r3, [r0, #16]
 8002e36:	b303      	cbz	r3, 8002e7a <HAL_UART_Receive_IT+0x7a>
 8002e38:	237f      	movs	r3, #127	; 0x7f
 8002e3a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e42:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e46:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8002e4c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e50:	f041 0101 	orr.w	r1, r1, #1
 8002e54:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002e56:	6811      	ldr	r1, [r2, #0]
 8002e58:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 8002e5c:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002e5e:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002e60:	4770      	bx	lr
      return HAL_ERROR;
 8002e62:	2001      	movs	r0, #1
 8002e64:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e6a:	d1e8      	bne.n	8002e3e <HAL_UART_Receive_IT+0x3e>
 8002e6c:	6903      	ldr	r3, [r0, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0e2      	beq.n	8002e38 <HAL_UART_Receive_IT+0x38>
 8002e72:	233f      	movs	r3, #63	; 0x3f
 8002e74:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002e78:	e7e1      	b.n	8002e3e <HAL_UART_Receive_IT+0x3e>
 8002e7a:	23ff      	movs	r3, #255	; 0xff
 8002e7c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002e80:	e7dd      	b.n	8002e3e <HAL_UART_Receive_IT+0x3e>
 8002e82:	6903      	ldr	r3, [r0, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f8      	bne.n	8002e7a <HAL_UART_Receive_IT+0x7a>
 8002e88:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002e8c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002e90:	e7d5      	b.n	8002e3e <HAL_UART_Receive_IT+0x3e>
 8002e92:	bf00      	nop

08002e94 <HAL_UART_TxCpltCallback>:
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop

08002e98 <HAL_UART_ErrorCallback>:
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop

08002e9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002e9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 8002ea6:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8002ea8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002eac:	f7ff fff4 	bl	8002e98 <HAL_UART_ErrorCallback>
 8002eb0:	bd08      	pop	{r3, pc}
 8002eb2:	bf00      	nop

08002eb4 <UART_SetConfig>:
{
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002eb6:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb8:	6907      	ldr	r7, [r0, #16]
 8002eba:	6883      	ldr	r3, [r0, #8]
 8002ebc:	6946      	ldr	r6, [r0, #20]
 8002ebe:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002ec0:	4a62      	ldr	r2, [pc, #392]	; (800304c <UART_SetConfig+0x198>)
{
 8002ec2:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002ec6:	6820      	ldr	r0, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002ec8:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eca:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002ecc:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ece:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed4:	6862      	ldr	r2, [r4, #4]
 8002ed6:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002ed8:	69ab      	ldr	r3, [r5, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eda:	485d      	ldr	r0, [pc, #372]	; (8003050 <UART_SetConfig+0x19c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002edc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ee0:	4332      	orrs	r2, r6
 8002ee2:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ee4:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002ee6:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ee8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002eec:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eee:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ef0:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef2:	d01b      	beq.n	8002f2c <UART_SetConfig+0x78>
 8002ef4:	4b57      	ldr	r3, [pc, #348]	; (8003054 <UART_SetConfig+0x1a0>)
 8002ef6:	429c      	cmp	r4, r3
 8002ef8:	d00a      	beq.n	8002f10 <UART_SetConfig+0x5c>
 8002efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002efe:	429c      	cmp	r4, r3
 8002f00:	d006      	beq.n	8002f10 <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f02:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002f06:	d158      	bne.n	8002fba <UART_SetConfig+0x106>
 8002f08:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8002f0a:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8002f0c:	60e3      	str	r3, [r4, #12]
 8002f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f10:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002f14:	d053      	beq.n	8002fbe <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f16:	f7ff fba3 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8002f1a:	686b      	ldr	r3, [r5, #4]
 8002f1c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f20:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f24:	b280      	uxth	r0, r0
 8002f26:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f28:	2000      	movs	r0, #0
        break;
 8002f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f2c:	4b4a      	ldr	r3, [pc, #296]	; (8003058 <UART_SetConfig+0x1a4>)
 8002f2e:	4a4b      	ldr	r2, [pc, #300]	; (800305c <UART_SetConfig+0x1a8>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f36:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	d051      	beq.n	8002fe2 <UART_SetConfig+0x12e>
    switch (clocksource)
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d83b      	bhi.n	8002fba <UART_SetConfig+0x106>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <UART_SetConfig+0x94>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f17 	.word	0x08002f17
 8002f4c:	08002fb5 	.word	0x08002fb5
 8002f50:	08002f9b 	.word	0x08002f9b
 8002f54:	08002fbb 	.word	0x08002fbb
 8002f58:	08002f83 	.word	0x08002f83
 8002f5c:	08002fbb 	.word	0x08002fbb
 8002f60:	08002fbb 	.word	0x08002fbb
 8002f64:	08002fbb 	.word	0x08002fbb
 8002f68:	08002f6d 	.word	0x08002f6d
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f6c:	686a      	ldr	r2, [r5, #4]
 8002f6e:	4938      	ldr	r1, [pc, #224]	; (8003050 <UART_SetConfig+0x19c>)
 8002f70:	0853      	lsrs	r3, r2, #1
 8002f72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f7e:	2000      	movs	r0, #0
        break;
 8002f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f82:	f7ff fa6b 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8002f86:	686b      	ldr	r3, [r5, #4]
 8002f88:	4a31      	ldr	r2, [pc, #196]	; (8003050 <UART_SetConfig+0x19c>)
 8002f8a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f92:	b280      	uxth	r0, r0
 8002f94:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f96:	2000      	movs	r0, #0
        break;
 8002f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f9a:	686a      	ldr	r2, [r5, #4]
 8002f9c:	492c      	ldr	r1, [pc, #176]	; (8003050 <UART_SetConfig+0x19c>)
 8002f9e:	0853      	lsrs	r3, r2, #1
 8002fa0:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002fa4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb0:	2000      	movs	r0, #0
        break;
 8002fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fb4:	f7ff fb6c 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	e7e5      	b.n	8002f86 <UART_SetConfig+0xd2>
        ret = HAL_ERROR;
 8002fba:	2001      	movs	r0, #1
  return ret;
 8002fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fbe:	f7ff fb4f 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fc2:	686a      	ldr	r2, [r5, #4]
 8002fc4:	682c      	ldr	r4, [r5, #0]
 8002fc6:	0853      	lsrs	r3, r2, #1
 8002fc8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002fcc:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fd0:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8002fd4:	f020 000f 	bic.w	r0, r0, #15
 8002fd8:	4303      	orrs	r3, r0
 8002fda:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fdc:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8002fde:	60e3      	str	r3, [r4, #12]
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d890      	bhi.n	8002f08 <UART_SetConfig+0x54>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <UART_SetConfig+0x138>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08002fbf 	.word	0x08002fbf
 8002ff0:	08003011 	.word	0x08003011
 8002ff4:	08003039 	.word	0x08003039
 8002ff8:	08002f09 	.word	0x08002f09
 8002ffc:	08003033 	.word	0x08003033
 8003000:	08002f09 	.word	0x08002f09
 8003004:	08002f09 	.word	0x08002f09
 8003008:	08002f09 	.word	0x08002f09
 800300c:	08003017 	.word	0x08003017
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003010:	f7ff fb3e 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003014:	e7d5      	b.n	8002fc2 <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003016:	686b      	ldr	r3, [r5, #4]
 8003018:	085a      	lsrs	r2, r3, #1
 800301a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800301e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003022:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8003026:	f022 020f 	bic.w	r2, r2, #15
 800302a:	4313      	orrs	r3, r2
 800302c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800302e:	2000      	movs	r0, #0
        break;
 8003030:	e76c      	b.n	8002f0c <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003032:	f7ff fa13 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003036:	e7c4      	b.n	8002fc2 <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003038:	686a      	ldr	r2, [r5, #4]
 800303a:	0853      	lsrs	r3, r2, #1
 800303c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003040:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003044:	fbb3 f2f2 	udiv	r2, r3, r2
 8003048:	e7eb      	b.n	8003022 <UART_SetConfig+0x16e>
 800304a:	bf00      	nop
 800304c:	efff69f3 	.word	0xefff69f3
 8003050:	40013800 	.word	0x40013800
 8003054:	40004400 	.word	0x40004400
 8003058:	40021000 	.word	0x40021000
 800305c:	08006128 	.word	0x08006128

08003060 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003060:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003062:	07da      	lsls	r2, r3, #31
{
 8003064:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003066:	d506      	bpl.n	8003076 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003068:	6801      	ldr	r1, [r0, #0]
 800306a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800306c:	684a      	ldr	r2, [r1, #4]
 800306e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003072:	4322      	orrs	r2, r4
 8003074:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003076:	079c      	lsls	r4, r3, #30
 8003078:	d506      	bpl.n	8003088 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800307a:	6801      	ldr	r1, [r0, #0]
 800307c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800307e:	684a      	ldr	r2, [r1, #4]
 8003080:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003084:	4322      	orrs	r2, r4
 8003086:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003088:	0759      	lsls	r1, r3, #29
 800308a:	d506      	bpl.n	800309a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800308c:	6801      	ldr	r1, [r0, #0]
 800308e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003090:	684a      	ldr	r2, [r1, #4]
 8003092:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003096:	4322      	orrs	r2, r4
 8003098:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800309a:	071a      	lsls	r2, r3, #28
 800309c:	d506      	bpl.n	80030ac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800309e:	6801      	ldr	r1, [r0, #0]
 80030a0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80030a2:	684a      	ldr	r2, [r1, #4]
 80030a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a8:	4322      	orrs	r2, r4
 80030aa:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030ac:	06dc      	lsls	r4, r3, #27
 80030ae:	d506      	bpl.n	80030be <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030b0:	6801      	ldr	r1, [r0, #0]
 80030b2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80030b4:	688a      	ldr	r2, [r1, #8]
 80030b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ba:	4322      	orrs	r2, r4
 80030bc:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030be:	0699      	lsls	r1, r3, #26
 80030c0:	d506      	bpl.n	80030d0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030c2:	6801      	ldr	r1, [r0, #0]
 80030c4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80030c6:	688a      	ldr	r2, [r1, #8]
 80030c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030cc:	4322      	orrs	r2, r4
 80030ce:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d0:	065a      	lsls	r2, r3, #25
 80030d2:	d509      	bpl.n	80030e8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030d4:	6801      	ldr	r1, [r0, #0]
 80030d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80030d8:	684a      	ldr	r2, [r1, #4]
 80030da:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80030de:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030e4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030e6:	d00b      	beq.n	8003100 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	d506      	bpl.n	80030fa <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ec:	6802      	ldr	r2, [r0, #0]
 80030ee:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80030f0:	6853      	ldr	r3, [r2, #4]
 80030f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80030f6:	430b      	orrs	r3, r1
 80030f8:	6053      	str	r3, [r2, #4]
}
 80030fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030fe:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003100:	684a      	ldr	r2, [r1, #4]
 8003102:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003104:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003108:	4322      	orrs	r2, r4
 800310a:	604a      	str	r2, [r1, #4]
 800310c:	e7ec      	b.n	80030e8 <UART_AdvFeatureConfig+0x88>
 800310e:	bf00      	nop

08003110 <UART_WaitOnFlagUntilTimeout>:
{
 8003110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003114:	9d08      	ldr	r5, [sp, #32]
 8003116:	4680      	mov	r8, r0
 8003118:	460f      	mov	r7, r1
 800311a:	4616      	mov	r6, r2
 800311c:	4699      	mov	r9, r3
 800311e:	f8d8 4000 	ldr.w	r4, [r8]
 8003122:	e001      	b.n	8003128 <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 8003124:	1c6b      	adds	r3, r5, #1
 8003126:	d10a      	bne.n	800313e <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003128:	69e0      	ldr	r0, [r4, #28]
 800312a:	ea37 0300 	bics.w	r3, r7, r0
 800312e:	bf0c      	ite	eq
 8003130:	2001      	moveq	r0, #1
 8003132:	2000      	movne	r0, #0
 8003134:	42b0      	cmp	r0, r6
 8003136:	d0f5      	beq.n	8003124 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8003138:	2000      	movs	r0, #0
}
 800313a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800313e:	b13d      	cbz	r5, 8003150 <UART_WaitOnFlagUntilTimeout+0x40>
 8003140:	f7fd f8ce 	bl	80002e0 <HAL_GetTick>
 8003144:	eba0 0009 	sub.w	r0, r0, r9
 8003148:	4285      	cmp	r5, r0
 800314a:	d2e8      	bcs.n	800311e <UART_WaitOnFlagUntilTimeout+0xe>
 800314c:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003156:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003158:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800315a:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315c:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8003160:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003162:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 8003164:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8003166:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800316a:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800316e:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 8003172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003176:	bf00      	nop

08003178 <UART_CheckIdleState>:
{
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317c:	2500      	movs	r5, #0
{
 800317e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8003182:	f7fd f8ad 	bl	80002e0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800318c:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800318e:	d40c      	bmi.n	80031aa <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	075b      	lsls	r3, r3, #29
 8003194:	d417      	bmi.n	80031c6 <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 8003196:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003198:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800319a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800319e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80031a2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80031a6:	b002      	add	sp, #8
 80031a8:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	462a      	mov	r2, r5
 80031b2:	4603      	mov	r3, r0
 80031b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7ff ffa9 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 80031be:	b180      	cbz	r0, 80031e2 <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 80031c0:	2003      	movs	r0, #3
}
 80031c2:	b002      	add	sp, #8
 80031c4:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031c6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80031ca:	9200      	str	r2, [sp, #0]
 80031cc:	4633      	mov	r3, r6
 80031ce:	2200      	movs	r2, #0
 80031d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff ff9b 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 80031da:	2800      	cmp	r0, #0
 80031dc:	d0db      	beq.n	8003196 <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 80031de:	2003      	movs	r0, #3
 80031e0:	e7ef      	b.n	80031c2 <UART_CheckIdleState+0x4a>
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	e7d4      	b.n	8003190 <UART_CheckIdleState+0x18>
 80031e6:	bf00      	nop

080031e8 <HAL_UART_Init>:
  if(huart == NULL)
 80031e8:	b390      	cbz	r0, 8003250 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 80031ea:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 80031ee:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80031f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031f4:	4604      	mov	r4, r0
 80031f6:	b303      	cbz	r3, 800323a <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80031f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031fa:	2324      	movs	r3, #36	; 0x24
 80031fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003200:	6813      	ldr	r3, [r2, #0]
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff fe53 	bl	8002eb4 <UART_SetConfig>
 800320e:	2801      	cmp	r0, #1
 8003210:	d018      	beq.n	8003244 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003214:	b9c3      	cbnz	r3, 8003248 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800321e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003226:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800322e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003236:	f7ff bf9f 	b.w	8003178 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800323a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800323e:	f001 fb9f 	bl	8004980 <HAL_UART_MspInit>
 8003242:	e7d9      	b.n	80031f8 <HAL_UART_Init+0x10>
}
 8003244:	2001      	movs	r0, #1
 8003246:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff ff09 	bl	8003060 <UART_AdvFeatureConfig>
 800324e:	e7e2      	b.n	8003216 <HAL_UART_Init+0x2e>
}
 8003250:	2001      	movs	r0, #1
 8003252:	4770      	bx	lr

08003254 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003254:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003258:	2b21      	cmp	r3, #33	; 0x21
 800325a:	d001      	beq.n	8003260 <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800325c:	2002      	movs	r0, #2
  }
}
 800325e:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8003260:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003264:	b29b      	uxth	r3, r3
 8003266:	b18b      	cbz	r3, 800328c <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003268:	6883      	ldr	r3, [r0, #8]
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d018      	beq.n	80032a2 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003270:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003272:	6802      	ldr	r2, [r0, #0]
 8003274:	1c59      	adds	r1, r3, #1
 8003276:	64c1      	str	r1, [r0, #76]	; 0x4c
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800327c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003280:	3b01      	subs	r3, #1
 8003282:	b29b      	uxth	r3, r3
 8003284:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8003288:	2000      	movs	r0, #0
 800328a:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800328c:	6802      	ldr	r2, [r0, #0]
 800328e:	6811      	ldr	r1, [r2, #0]
 8003290:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003294:	6011      	str	r1, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003296:	6811      	ldr	r1, [r2, #0]
 8003298:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800329c:	4618      	mov	r0, r3
 800329e:	6011      	str	r1, [r2, #0]
 80032a0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a2:	6903      	ldr	r3, [r0, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e3      	bne.n	8003270 <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80032a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80032aa:	6801      	ldr	r1, [r0, #0]
 80032ac:	f833 2b02 	ldrh.w	r2, [r3], #2
 80032b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b4:	850a      	strh	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80032b6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80032b8:	e7e0      	b.n	800327c <UART_Transmit_IT+0x28>
 80032ba:	bf00      	nop

080032bc <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032bc:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032be:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80032c2:	2b22      	cmp	r3, #34	; 0x22
 80032c4:	d006      	beq.n	80032d4 <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032c6:	6802      	ldr	r2, [r0, #0]
 80032c8:	6993      	ldr	r3, [r2, #24]
 80032ca:	f043 0308 	orr.w	r3, r3, #8
 80032ce:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80032d0:	2002      	movs	r0, #2
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032d4:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d6:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 80032da:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032de:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032e2:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	d01d      	beq.n	8003322 <UART_Receive_IT+0x66>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80032e6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80032e8:	400b      	ands	r3, r1
 80032ea:	1c51      	adds	r1, r2, #1
 80032ec:	6541      	str	r1, [r0, #84]	; 0x54
 80032ee:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 80032f0:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80032f4:	3c01      	subs	r4, #1
 80032f6:	b2a4      	uxth	r4, r4
 80032f8:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80032fc:	b10c      	cbz	r4, 8003302 <UART_Receive_IT+0x46>
    return HAL_OK;
 80032fe:	2000      	movs	r0, #0
  }
}
 8003300:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003302:	6803      	ldr	r3, [r0, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800330a:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330c:	6899      	ldr	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800330e:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003310:	f021 0101 	bic.w	r1, r1, #1
 8003314:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003316:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800331a:	f000 fb05 	bl	8003928 <HAL_UART_RxCpltCallback>
 800331e:	4620      	mov	r0, r4
 8003320:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003322:	6902      	ldr	r2, [r0, #16]
 8003324:	2a00      	cmp	r2, #0
 8003326:	d1de      	bne.n	80032e6 <UART_Receive_IT+0x2a>
      *tmp = (uint16_t)(uhdata & uhMask);
 8003328:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800332a:	400b      	ands	r3, r1
 800332c:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 8003330:	6542      	str	r2, [r0, #84]	; 0x54
 8003332:	e7dd      	b.n	80032f0 <UART_Receive_IT+0x34>

08003334 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003334:	6803      	ldr	r3, [r0, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003338:	6819      	ldr	r1, [r3, #0]
{
 800333a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800333c:	0715      	lsls	r5, r2, #28
{
 800333e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003340:	d110      	bne.n	8003364 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003342:	0696      	lsls	r6, r2, #26
 8003344:	d45b      	bmi.n	80033fe <HAL_UART_IRQHandler+0xca>
  cr3its = READ_REG(huart->Instance->CR3);
 8003346:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003348:	02d5      	lsls	r5, r2, #11
 800334a:	d501      	bpl.n	8003350 <HAL_UART_IRQHandler+0x1c>
 800334c:	0240      	lsls	r0, r0, #9
 800334e:	d47f      	bmi.n	8003450 <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003350:	0616      	lsls	r6, r2, #24
 8003352:	d502      	bpl.n	800335a <HAL_UART_IRQHandler+0x26>
 8003354:	060d      	lsls	r5, r1, #24
 8003356:	f100 808c 	bmi.w	8003472 <HAL_UART_IRQHandler+0x13e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800335a:	0650      	lsls	r0, r2, #25
 800335c:	d501      	bpl.n	8003362 <HAL_UART_IRQHandler+0x2e>
 800335e:	064a      	lsls	r2, r1, #25
 8003360:	d464      	bmi.n	800342c <HAL_UART_IRQHandler+0xf8>
 8003362:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8003364:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003366:	f010 0501 	ands.w	r5, r0, #1
 800336a:	d04e      	beq.n	800340a <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800336c:	07d6      	lsls	r6, r2, #31
 800336e:	d507      	bpl.n	8003380 <HAL_UART_IRQHandler+0x4c>
 8003370:	05c8      	lsls	r0, r1, #23
 8003372:	d505      	bpl.n	8003380 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003374:	2001      	movs	r0, #1
 8003376:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003378:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800337a:	f040 0001 	orr.w	r0, r0, #1
 800337e:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003380:	0796      	lsls	r6, r2, #30
 8003382:	d548      	bpl.n	8003416 <HAL_UART_IRQHandler+0xe2>
 8003384:	b13d      	cbz	r5, 8003396 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003386:	2002      	movs	r0, #2
 8003388:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800338a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800338c:	f040 0004 	orr.w	r0, r0, #4
 8003390:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003392:	0750      	lsls	r0, r2, #29
 8003394:	d443      	bmi.n	800341e <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003396:	0710      	lsls	r0, r2, #28
 8003398:	d503      	bpl.n	80033a2 <HAL_UART_IRQHandler+0x6e>
 800339a:	068e      	lsls	r6, r1, #26
 800339c:	d451      	bmi.n	8003442 <HAL_UART_IRQHandler+0x10e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800339e:	2d00      	cmp	r5, #0
 80033a0:	d14f      	bne.n	8003442 <HAL_UART_IRQHandler+0x10e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d0dc      	beq.n	8003362 <HAL_UART_IRQHandler+0x2e>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a8:	0690      	lsls	r0, r2, #26
 80033aa:	d501      	bpl.n	80033b0 <HAL_UART_IRQHandler+0x7c>
 80033ac:	0689      	lsls	r1, r1, #26
 80033ae:	d465      	bmi.n	800347c <HAL_UART_IRQHandler+0x148>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80033b0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80033b2:	0712      	lsls	r2, r2, #28
 80033b4:	d403      	bmi.n	80033be <HAL_UART_IRQHandler+0x8a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80033b6:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80033b8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80033bc:	d063      	beq.n	8003486 <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033c4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	0656      	lsls	r6, r2, #25
 80033d8:	d547      	bpl.n	800346a <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033da:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80033dc:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e2:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d040      	beq.n	800346a <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033e8:	4b29      	ldr	r3, [pc, #164]	; (8003490 <HAL_UART_IRQHandler+0x15c>)
 80033ea:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ec:	f7fd fca0 	bl	8000d30 <HAL_DMA_Abort_IT>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d0b6      	beq.n	8003362 <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033f4:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80033f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033fc:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033fe:	068d      	lsls	r5, r1, #26
 8003400:	d5a1      	bpl.n	8003346 <HAL_UART_IRQHandler+0x12>
}
 8003402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003406:	f7ff bf59 	b.w	80032bc <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800340a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800340e:	d09b      	beq.n	8003348 <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003410:	07d6      	lsls	r6, r2, #31
 8003412:	d5b5      	bpl.n	8003380 <HAL_UART_IRQHandler+0x4c>
 8003414:	e7ac      	b.n	8003370 <HAL_UART_IRQHandler+0x3c>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003416:	0756      	lsls	r6, r2, #29
 8003418:	d5bd      	bpl.n	8003396 <HAL_UART_IRQHandler+0x62>
 800341a:	2d00      	cmp	r5, #0
 800341c:	d0bb      	beq.n	8003396 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800341e:	2004      	movs	r0, #4
 8003420:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003422:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003424:	f040 0002 	orr.w	r0, r0, #2
 8003428:	66e0      	str	r0, [r4, #108]	; 0x6c
 800342a:	e7b4      	b.n	8003396 <HAL_UART_IRQHandler+0x62>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800342c:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800342e:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003434:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003436:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003438:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800343c:	f7ff fd2a 	bl	8002e94 <HAL_UART_TxCpltCallback>
 8003440:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003442:	2008      	movs	r0, #8
 8003444:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003446:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003448:	f040 0008 	orr.w	r0, r0, #8
 800344c:	66e0      	str	r0, [r4, #108]	; 0x6c
 800344e:	e7a8      	b.n	80033a2 <HAL_UART_IRQHandler+0x6e>
    huart->gState  = HAL_UART_STATE_READY;
 8003450:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003452:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003456:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003458:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 800345a:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800345e:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8003462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003466:	f000 b815 	b.w	8003494 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fd14 	bl	8002e98 <HAL_UART_ErrorCallback>
 8003470:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8003472:	4620      	mov	r0, r4
}
 8003474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8003478:	f7ff beec 	b.w	8003254 <UART_Transmit_IT>
        UART_Receive_IT(huart);
 800347c:	4620      	mov	r0, r4
 800347e:	f7ff ff1d 	bl	80032bc <UART_Receive_IT>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	e794      	b.n	80033b0 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 8003486:	4620      	mov	r0, r4
 8003488:	f7ff fd06 	bl	8002e98 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	08002e9d 	.word	0x08002e9d

08003494 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop

08003498 <write2Flash>:
extern RTC_HandleTypeDef hrtc;




void write2Flash(){
 8003498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if(log_counter <= 100){
 800349c:	4d07      	ldr	r5, [pc, #28]	; (80034bc <write2Flash+0x24>)
 800349e:	782b      	ldrb	r3, [r5, #0]
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d90f      	bls.n	80034c4 <write2Flash+0x2c>
 80034a4:	4c06      	ldr	r4, [pc, #24]	; (80034c0 <write2Flash+0x28>)
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	2232      	movs	r2, #50	; 0x32
 80034aa:	2100      	movs	r1, #0
 80034ac:	f002 f8ad 	bl	800560a <memset>


			log_counter += 1;
 80034b0:	782b      	ldrb	r3, [r5, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	702b      	strb	r3, [r5, #0]
 80034b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	20000298 	.word	0x20000298
 80034c0:	20000274 	.word	0x20000274
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80034c4:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8003838 <write2Flash+0x3a0>
		log_empty = 0;
 80034c8:	4bc4      	ldr	r3, [pc, #784]	; (80037dc <write2Flash+0x344>)
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80034ca:	f8d8 1000 	ldr.w	r1, [r8]
 80034ce:	48c4      	ldr	r0, [pc, #784]	; (80037e0 <write2Flash+0x348>)
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 80034d0:	4cc4      	ldr	r4, [pc, #784]	; (80037e4 <write2Flash+0x34c>)
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80034d2:	4ec5      	ldr	r6, [pc, #788]	; (80037e8 <write2Flash+0x350>)
		itoa((time->Hours),temp_time_var,10  );
 80034d4:	4fc5      	ldr	r7, [pc, #788]	; (80037ec <write2Flash+0x354>)
		log_empty = 0;
 80034d6:	f04f 0900 	mov.w	r9, #0
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80034da:	464a      	mov	r2, r9
		log_empty = 0;
 80034dc:	f883 9000 	strb.w	r9, [r3]
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80034e0:	f7ff f9b0 	bl	8002844 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80034e4:	4bc2      	ldr	r3, [pc, #776]	; (80037f0 <write2Flash+0x358>)
 80034e6:	48be      	ldr	r0, [pc, #760]	; (80037e0 <write2Flash+0x348>)
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	464a      	mov	r2, r9
 80034ec:	f7ff f9e0 	bl	80028b0 <HAL_RTC_GetDate>
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 80034f0:	f8d4 9000 	ldr.w	r9, [r4]
 80034f4:	4648      	mov	r0, r9
 80034f6:	f7fc fe6b 	bl	80001d0 <strlen>
 80034fa:	4682      	mov	sl, r0
 80034fc:	48bd      	ldr	r0, [pc, #756]	; (80037f4 <write2Flash+0x35c>)
 80034fe:	f7fc fe67 	bl	80001d0 <strlen>
 8003502:	49bc      	ldr	r1, [pc, #752]	; (80037f4 <write2Flash+0x35c>)
 8003504:	4602      	mov	r2, r0
 8003506:	eb09 000a 	add.w	r0, r9, sl
 800350a:	f002 f873 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800350e:	f8d4 9000 	ldr.w	r9, [r4]
 8003512:	4648      	mov	r0, r9
 8003514:	f7fc fe5c 	bl	80001d0 <strlen>
 8003518:	7833      	ldrb	r3, [r6, #0]
 800351a:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Hours),temp_time_var,10  );
 800351e:	f8d8 3000 	ldr.w	r3, [r8]
 8003522:	6839      	ldr	r1, [r7, #0]
 8003524:	7818      	ldrb	r0, [r3, #0]
 8003526:	220a      	movs	r2, #10
 8003528:	f002 f85a 	bl	80055e0 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 800352c:	f8d4 9000 	ldr.w	r9, [r4]
 8003530:	4648      	mov	r0, r9
 8003532:	f7fc fe4d 	bl	80001d0 <strlen>
 8003536:	f8d7 a000 	ldr.w	sl, [r7]
 800353a:	4683      	mov	fp, r0
 800353c:	4650      	mov	r0, sl
 800353e:	f7fc fe47 	bl	80001d0 <strlen>
 8003542:	4651      	mov	r1, sl
 8003544:	4602      	mov	r2, r0
 8003546:	eb09 000b 	add.w	r0, r9, fp
 800354a:	f002 f853 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800354e:	f8d4 9000 	ldr.w	r9, [r4]
 8003552:	4648      	mov	r0, r9
 8003554:	f7fc fe3c 	bl	80001d0 <strlen>
 8003558:	7833      	ldrb	r3, [r6, #0]
 800355a:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Minutes),temp_time_var,10  );
 800355e:	f8d8 3000 	ldr.w	r3, [r8]
 8003562:	6839      	ldr	r1, [r7, #0]
 8003564:	7858      	ldrb	r0, [r3, #1]
 8003566:	220a      	movs	r2, #10
 8003568:	f002 f83a 	bl	80055e0 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 800356c:	f8d4 9000 	ldr.w	r9, [r4]
 8003570:	4648      	mov	r0, r9
 8003572:	f7fc fe2d 	bl	80001d0 <strlen>
 8003576:	f8d7 a000 	ldr.w	sl, [r7]
 800357a:	4683      	mov	fp, r0
 800357c:	4650      	mov	r0, sl
 800357e:	f7fc fe27 	bl	80001d0 <strlen>
 8003582:	4651      	mov	r1, sl
 8003584:	4602      	mov	r2, r0
 8003586:	eb09 000b 	add.w	r0, r9, fp
 800358a:	f002 f833 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800358e:	f8d4 9000 	ldr.w	r9, [r4]
 8003592:	4648      	mov	r0, r9
 8003594:	f7fc fe1c 	bl	80001d0 <strlen>
 8003598:	7833      	ldrb	r3, [r6, #0]
 800359a:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Seconds),temp_time_var,10  );
 800359e:	f8d8 3000 	ldr.w	r3, [r8]
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	7898      	ldrb	r0, [r3, #2]
 80035a6:	220a      	movs	r2, #10
 80035a8:	f002 f81a 	bl	80055e0 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 80035ac:	f8d4 8000 	ldr.w	r8, [r4]
 80035b0:	4640      	mov	r0, r8
 80035b2:	f7fc fe0d 	bl	80001d0 <strlen>
 80035b6:	683f      	ldr	r7, [r7, #0]
 80035b8:	4681      	mov	r9, r0
 80035ba:	4638      	mov	r0, r7
 80035bc:	f7fc fe08 	bl	80001d0 <strlen>
 80035c0:	4639      	mov	r1, r7
 80035c2:	4602      	mov	r2, r0
 80035c4:	eb08 0009 	add.w	r0, r8, r9
 80035c8:	f002 f814 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80035cc:	6827      	ldr	r7, [r4, #0]
 80035ce:	4638      	mov	r0, r7
 80035d0:	f7fc fdfe 	bl	80001d0 <strlen>
 80035d4:	7833      	ldrb	r3, [r6, #0]
 80035d6:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 80035d8:	6827      	ldr	r7, [r4, #0]
 80035da:	4638      	mov	r0, r7
 80035dc:	f7fc fdf8 	bl	80001d0 <strlen>
 80035e0:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <write2Flash+0x360>)
 80035e2:	f8d3 8000 	ldr.w	r8, [r3]
 80035e6:	4681      	mov	r9, r0
 80035e8:	4640      	mov	r0, r8
 80035ea:	f7fc fdf1 	bl	80001d0 <strlen>
 80035ee:	4641      	mov	r1, r8
 80035f0:	4602      	mov	r2, r0
 80035f2:	eb07 0009 	add.w	r0, r7, r9
 80035f6:	f001 fffd 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80035fa:	6827      	ldr	r7, [r4, #0]
 80035fc:	4638      	mov	r0, r7
 80035fe:	f7fc fde7 	bl	80001d0 <strlen>
 8003602:	7833      	ldrb	r3, [r6, #0]
 8003604:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 8003606:	6827      	ldr	r7, [r4, #0]
 8003608:	4638      	mov	r0, r7
 800360a:	f7fc fde1 	bl	80001d0 <strlen>
 800360e:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <write2Flash+0x364>)
 8003610:	f8d3 8000 	ldr.w	r8, [r3]
 8003614:	4681      	mov	r9, r0
 8003616:	4640      	mov	r0, r8
 8003618:	f7fc fdda 	bl	80001d0 <strlen>
 800361c:	4641      	mov	r1, r8
 800361e:	4602      	mov	r2, r0
 8003620:	eb07 0009 	add.w	r0, r7, r9
 8003624:	f001 ffe6 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003628:	6827      	ldr	r7, [r4, #0]
 800362a:	4638      	mov	r0, r7
 800362c:	f7fc fdd0 	bl	80001d0 <strlen>
 8003630:	7833      	ldrb	r3, [r6, #0]
 8003632:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 8003634:	6827      	ldr	r7, [r4, #0]
 8003636:	4638      	mov	r0, r7
 8003638:	f7fc fdca 	bl	80001d0 <strlen>
 800363c:	4b70      	ldr	r3, [pc, #448]	; (8003800 <write2Flash+0x368>)
 800363e:	f8d3 8000 	ldr.w	r8, [r3]
 8003642:	4681      	mov	r9, r0
 8003644:	4640      	mov	r0, r8
 8003646:	f7fc fdc3 	bl	80001d0 <strlen>
 800364a:	4641      	mov	r1, r8
 800364c:	4602      	mov	r2, r0
 800364e:	eb07 0009 	add.w	r0, r7, r9
 8003652:	f001 ffcf 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003656:	6827      	ldr	r7, [r4, #0]
 8003658:	4638      	mov	r0, r7
 800365a:	f7fc fdb9 	bl	80001d0 <strlen>
 800365e:	7833      	ldrb	r3, [r6, #0]
 8003660:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8003662:	6827      	ldr	r7, [r4, #0]
 8003664:	4638      	mov	r0, r7
 8003666:	f7fc fdb3 	bl	80001d0 <strlen>
 800366a:	4b66      	ldr	r3, [pc, #408]	; (8003804 <write2Flash+0x36c>)
 800366c:	f8d3 8000 	ldr.w	r8, [r3]
 8003670:	4681      	mov	r9, r0
 8003672:	4640      	mov	r0, r8
 8003674:	f7fc fdac 	bl	80001d0 <strlen>
 8003678:	4641      	mov	r1, r8
 800367a:	4602      	mov	r2, r0
 800367c:	eb07 0009 	add.w	r0, r7, r9
 8003680:	f001 ffb8 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003684:	6827      	ldr	r7, [r4, #0]
 8003686:	4638      	mov	r0, r7
 8003688:	f7fc fda2 	bl	80001d0 <strlen>
 800368c:	7833      	ldrb	r3, [r6, #0]
 800368e:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8003690:	6827      	ldr	r7, [r4, #0]
 8003692:	4638      	mov	r0, r7
 8003694:	f7fc fd9c 	bl	80001d0 <strlen>
 8003698:	4b5b      	ldr	r3, [pc, #364]	; (8003808 <write2Flash+0x370>)
 800369a:	f8d3 8000 	ldr.w	r8, [r3]
 800369e:	4681      	mov	r9, r0
 80036a0:	4640      	mov	r0, r8
 80036a2:	f7fc fd95 	bl	80001d0 <strlen>
 80036a6:	4641      	mov	r1, r8
 80036a8:	4602      	mov	r2, r0
 80036aa:	eb07 0009 	add.w	r0, r7, r9
 80036ae:	f001 ffa1 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80036b2:	6827      	ldr	r7, [r4, #0]
 80036b4:	4638      	mov	r0, r7
 80036b6:	f7fc fd8b 	bl	80001d0 <strlen>
 80036ba:	7833      	ldrb	r3, [r6, #0]
 80036bc:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 80036be:	6827      	ldr	r7, [r4, #0]
 80036c0:	4638      	mov	r0, r7
 80036c2:	f7fc fd85 	bl	80001d0 <strlen>
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <write2Flash+0x374>)
 80036c8:	f8d3 8000 	ldr.w	r8, [r3]
 80036cc:	4681      	mov	r9, r0
 80036ce:	4640      	mov	r0, r8
 80036d0:	f7fc fd7e 	bl	80001d0 <strlen>
 80036d4:	4641      	mov	r1, r8
 80036d6:	4602      	mov	r2, r0
 80036d8:	eb07 0009 	add.w	r0, r7, r9
 80036dc:	f001 ff8a 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80036e0:	6827      	ldr	r7, [r4, #0]
 80036e2:	4638      	mov	r0, r7
 80036e4:	f7fc fd74 	bl	80001d0 <strlen>
 80036e8:	7833      	ldrb	r3, [r6, #0]
 80036ea:	543b      	strb	r3, [r7, r0]
		if(valve_state == valve_OPEN){
 80036ec:	4a48      	ldr	r2, [pc, #288]	; (8003810 <write2Flash+0x378>)
 80036ee:	4b49      	ldr	r3, [pc, #292]	; (8003814 <write2Flash+0x37c>)
 80036f0:	6816      	ldr	r6, [r2, #0]
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80036f2:	6827      	ldr	r7, [r4, #0]
		if(valve_state == valve_OPEN){
 80036f4:	429e      	cmp	r6, r3
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80036f6:	4638      	mov	r0, r7
		if(valve_state == valve_OPEN){
 80036f8:	f000 80dd 	beq.w	80038b6 <write2Flash+0x41e>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 80036fc:	f7fc fd68 	bl	80001d0 <strlen>
 8003700:	4680      	mov	r8, r0
 8003702:	4630      	mov	r0, r6
 8003704:	f7fc fd64 	bl	80001d0 <strlen>
 8003708:	4631      	mov	r1, r6
 800370a:	4602      	mov	r2, r0
 800370c:	eb07 0008 	add.w	r0, r7, r8
 8003710:	f001 ff70 	bl	80055f4 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 8003714:	6826      	ldr	r6, [r4, #0]
 8003716:	4630      	mov	r0, r6
 8003718:	f7fc fd5a 	bl	80001d0 <strlen>
 800371c:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <write2Flash+0x380>)
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	5233      	strh	r3, [r6, r0]
		if(log_counter == 0){
 8003722:	782b      	ldrb	r3, [r5, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8089 	beq.w	800383c <write2Flash+0x3a4>
			HAL_FLASH_Unlock();
 800372a:	f7fd fb8f 	bl	8000e4c <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008800+64*log_counter, *((uint64_t*)(flash_stored)) );
 800372e:	7829      	ldrb	r1, [r5, #0]
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	f101 1120 	add.w	r1, r1, #2097184	; 0x200020
 8003736:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	0189      	lsls	r1, r1, #6
 8003740:	2003      	movs	r0, #3
 8003742:	f7fd fbc7 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008808+64*log_counter, *((uint64_t*)(flash_stored)+1) );
 8003746:	7828      	ldrb	r0, [r5, #0]
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	4934      	ldr	r1, [pc, #208]	; (800381c <write2Flash+0x384>)
 800374c:	2640      	movs	r6, #64	; 0x40
 800374e:	fb06 1100 	mla	r1, r6, r0, r1
 8003752:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003756:	2003      	movs	r0, #3
 8003758:	f7fd fbbc 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008810+64*log_counter, *((uint64_t*)(flash_stored)+2) );
 800375c:	7829      	ldrb	r1, [r5, #0]
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <write2Flash+0x388>)
 8003762:	2003      	movs	r0, #3
 8003764:	fb06 2101 	mla	r1, r6, r1, r2
 8003768:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800376c:	f7fd fbb2 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008818+64*log_counter, *((uint64_t*)(flash_stored)+3) );
 8003770:	7829      	ldrb	r1, [r5, #0]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <write2Flash+0x38c>)
 8003776:	2003      	movs	r0, #3
 8003778:	fb06 2101 	mla	r1, r6, r1, r2
 800377c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003780:	f7fd fba8 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008820+64*log_counter, *((uint64_t*)(flash_stored)+4) );
 8003784:	7829      	ldrb	r1, [r5, #0]
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	4a27      	ldr	r2, [pc, #156]	; (8003828 <write2Flash+0x390>)
 800378a:	2003      	movs	r0, #3
 800378c:	fb06 2101 	mla	r1, r6, r1, r2
 8003790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003794:	f7fd fb9e 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008828+64*log_counter, *((uint64_t*)(flash_stored)+5) );
 8003798:	7829      	ldrb	r1, [r5, #0]
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	; (800382c <write2Flash+0x394>)
 800379e:	2003      	movs	r0, #3
 80037a0:	fb06 2101 	mla	r1, r6, r1, r2
 80037a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80037a8:	f7fd fb94 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008830+64*log_counter, *((uint64_t*)(flash_stored)+6) );
 80037ac:	7829      	ldrb	r1, [r5, #0]
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <write2Flash+0x398>)
 80037b2:	2003      	movs	r0, #3
 80037b4:	fb06 2101 	mla	r1, r6, r1, r2
 80037b8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80037bc:	f7fd fb8a 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008838+64*log_counter, *((uint64_t*)(flash_stored)+7) );
 80037c0:	7829      	ldrb	r1, [r5, #0]
 80037c2:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <write2Flash+0x39c>)
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	fb06 2101 	mla	r1, r6, r1, r2
 80037ca:	2003      	movs	r0, #3
 80037cc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80037d0:	f7fd fb80 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80037d4:	f7fd fb4c 	bl	8000e70 <HAL_FLASH_Lock>
 80037d8:	e665      	b.n	80034a6 <write2Flash+0xe>
 80037da:	bf00      	nop
 80037dc:	2000001a 	.word	0x2000001a
 80037e0:	20000480 	.word	0x20000480
 80037e4:	20000274 	.word	0x20000274
 80037e8:	20000004 	.word	0x20000004
 80037ec:	200002c0 	.word	0x200002c0
 80037f0:	20000260 	.word	0x20000260
 80037f4:	2000001c 	.word	0x2000001c
 80037f8:	2000025c 	.word	0x2000025c
 80037fc:	200002ec 	.word	0x200002ec
 8003800:	20000250 	.word	0x20000250
 8003804:	20000278 	.word	0x20000278
 8003808:	200002cc 	.word	0x200002cc
 800380c:	2000028c 	.word	0x2000028c
 8003810:	200002e0 	.word	0x200002e0
 8003814:	20000050 	.word	0x20000050
 8003818:	20000008 	.word	0x20000008
 800381c:	08008808 	.word	0x08008808
 8003820:	08008810 	.word	0x08008810
 8003824:	08008818 	.word	0x08008818
 8003828:	08008820 	.word	0x08008820
 800382c:	08008828 	.word	0x08008828
 8003830:	08008830 	.word	0x08008830
 8003834:	08008838 	.word	0x08008838
 8003838:	200002c8 	.word	0x200002c8
			HAL_FLASH_Unlock();
 800383c:	f7fd fb06 	bl	8000e4c <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008800, *((uint64_t*)(flash_stored)) );
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	4923      	ldr	r1, [pc, #140]	; (80038d0 <write2Flash+0x438>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	2003      	movs	r0, #3
 800384a:	f7fd fb43 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008808, *((uint64_t*)(flash_stored)+1) );
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	4920      	ldr	r1, [pc, #128]	; (80038d4 <write2Flash+0x43c>)
 8003852:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003856:	2003      	movs	r0, #3
 8003858:	f7fd fb3c 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008810, *((uint64_t*)(flash_stored)+2) );
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	491e      	ldr	r1, [pc, #120]	; (80038d8 <write2Flash+0x440>)
 8003860:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003864:	2003      	movs	r0, #3
 8003866:	f7fd fb35 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008818, *((uint64_t*)(flash_stored)+3) );
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	491b      	ldr	r1, [pc, #108]	; (80038dc <write2Flash+0x444>)
 800386e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003872:	2003      	movs	r0, #3
 8003874:	f7fd fb2e 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008820, *((uint64_t*)(flash_stored)+4) );
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	4919      	ldr	r1, [pc, #100]	; (80038e0 <write2Flash+0x448>)
 800387c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003880:	2003      	movs	r0, #3
 8003882:	f7fd fb27 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008828, *((uint64_t*)(flash_stored)+5) );
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	4916      	ldr	r1, [pc, #88]	; (80038e4 <write2Flash+0x44c>)
 800388a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800388e:	2003      	movs	r0, #3
 8003890:	f7fd fb20 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008830, *((uint64_t*)(flash_stored)+6) );
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	4914      	ldr	r1, [pc, #80]	; (80038e8 <write2Flash+0x450>)
 8003898:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800389c:	2003      	movs	r0, #3
 800389e:	f7fd fb19 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008838, *((uint64_t*)(flash_stored)+7) );
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	4911      	ldr	r1, [pc, #68]	; (80038ec <write2Flash+0x454>)
 80038a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80038aa:	2003      	movs	r0, #3
 80038ac:	f7fd fb12 	bl	8000ed4 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80038b0:	f7fd fade 	bl	8000e70 <HAL_FLASH_Lock>
 80038b4:	e5f7      	b.n	80034a6 <write2Flash+0xe>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80038b6:	f7fc fc8b 	bl	80001d0 <strlen>
 80038ba:	4680      	mov	r8, r0
 80038bc:	4630      	mov	r0, r6
 80038be:	f7fc fc87 	bl	80001d0 <strlen>
 80038c2:	4631      	mov	r1, r6
 80038c4:	1e42      	subs	r2, r0, #1
 80038c6:	eb07 0008 	add.w	r0, r7, r8
 80038ca:	f001 fe93 	bl	80055f4 <memcpy>
 80038ce:	e721      	b.n	8003714 <write2Flash+0x27c>
 80038d0:	08008800 	.word	0x08008800
 80038d4:	08008808 	.word	0x08008808
 80038d8:	08008810 	.word	0x08008810
 80038dc:	08008818 	.word	0x08008818
 80038e0:	08008820 	.word	0x08008820
 80038e4:	08008828 	.word	0x08008828
 80038e8:	08008830 	.word	0x08008830
 80038ec:	08008838 	.word	0x08008838

080038f0 <logPosition>:
}


void logPosition(){
	uint32_t* mem = (uint32_t*)(0x08008800);
	while(*mem != 0xFFFFFFFF){
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <logPosition+0x2c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	d00f      	beq.n	8003918 <logPosition+0x28>
 80038f8:	4909      	ldr	r1, [pc, #36]	; (8003920 <logPosition+0x30>)
 80038fa:	780a      	ldrb	r2, [r1, #0]
		log_counter += 1;
 80038fc:	3201      	adds	r2, #1
 80038fe:	b2d2      	uxtb	r2, r2
		mem = (uint32_t*)(0x08008800 + 64*log_counter);
 8003900:	f102 1320 	add.w	r3, r2, #2097184	; 0x200020
 8003904:	f503 7300 	add.w	r3, r3, #512	; 0x200
	while(*mem != 0xFFFFFFFF){
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	d1f5      	bne.n	80038fc <logPosition+0xc>
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <logPosition+0x34>)
 8003912:	700a      	strb	r2, [r1, #0]
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	08008800 	.word	0x08008800
 8003920:	20000298 	.word	0x20000298
 8003924:	2000001a 	.word	0x2000001a

08003928 <HAL_UART_RxCpltCallback>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003928:	b508      	push	{r3, lr}
	rx_flag = 1;
 800392a:	2201      	movs	r2, #1
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_UART_RxCpltCallback+0x14>)
 800392e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8003930:	4903      	ldr	r1, [pc, #12]	; (8003940 <HAL_UART_RxCpltCallback+0x18>)
 8003932:	4804      	ldr	r0, [pc, #16]	; (8003944 <HAL_UART_RxCpltCallback+0x1c>)
 8003934:	f7ff fa64 	bl	8002e00 <HAL_UART_Receive_IT>
 8003938:	bd08      	pop	{r3, pc}
 800393a:	bf00      	nop
 800393c:	200002b1 	.word	0x200002b1
 8003940:	2000057c 	.word	0x2000057c
 8003944:	20000410 	.word	0x20000410

08003948 <HAL_ADC_ConvCpltCallback>:

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003948:	4770      	bx	lr
	...

0800394c <HAL_RTCEx_WakeUpTimerEventCallback>:
////	tim3_flag = 1;
//}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 800394c:	2201      	movs	r2, #1
 800394e:	4b01      	ldr	r3, [pc, #4]	; (8003954 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	4770      	bx	lr
 8003954:	200002b0 	.word	0x200002b0

08003958 <HAL_GPIO_EXTI_Callback>:
////	pump_flag = 0;
////	HAL_TIM_Base_Stop_IT(&htim2);
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_6){
 8003958:	2840      	cmp	r0, #64	; 0x40
 800395a:	d000      	beq.n	800395e <HAL_GPIO_EXTI_Callback+0x6>
 800395c:	4770      	bx	lr
		pump_flag = 1;
 800395e:	2201      	movs	r2, #1
 8003960:	4b01      	ldr	r3, [pc, #4]	; (8003968 <HAL_GPIO_EXTI_Callback+0x10>)
 8003962:	701a      	strb	r2, [r3, #0]
	}
}
 8003964:	e7fa      	b.n	800395c <HAL_GPIO_EXTI_Callback+0x4>
 8003966:	bf00      	nop
 8003968:	200002a8 	.word	0x200002a8

0800396c <heating_control>:
		}
	}
}


void heating_control(){
 800396c:	b430      	push	{r4, r5}

	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 5) ) && !(geyser_temp_int > (*set_temp+5 ))){
 800396e:	4c1c      	ldr	r4, [pc, #112]	; (80039e0 <heating_control+0x74>)
 8003970:	4d1c      	ldr	r5, [pc, #112]	; (80039e4 <heating_control+0x78>)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	42ab      	cmp	r3, r5
 8003976:	d004      	beq.n	8003982 <heating_control+0x16>
	}
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
 8003978:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <heating_control+0x7c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d011      	beq.n	80039a2 <heating_control+0x36>
	}
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 5)) && !(geyser_temp_int > (*set_temp+5 ))){
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
}
 800397e:	bc30      	pop	{r4, r5}
 8003980:	4770      	bx	lr
	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 5) ) && !(geyser_temp_int > (*set_temp+5 ))){
 8003982:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <heating_control+0x80>)
 8003984:	491a      	ldr	r1, [pc, #104]	; (80039f0 <heating_control+0x84>)
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	7808      	ldrb	r0, [r1, #0]
 800398a:	7811      	ldrb	r1, [r2, #0]
 800398c:	1f4a      	subs	r2, r1, #5
 800398e:	4290      	cmp	r0, r2
 8003990:	db1a      	blt.n	80039c8 <heating_control+0x5c>
		heater_state = heater_OFF;
 8003992:	6025      	str	r5, [r4, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8003994:	2201      	movs	r2, #1
 8003996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800399a:	4816      	ldr	r0, [pc, #88]	; (80039f4 <heating_control+0x88>)
}
 800399c:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 800399e:	f7fd bbdd 	b.w	800115c <HAL_GPIO_WritePin>
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <heating_control+0x80>)
 80039a4:	4912      	ldr	r1, [pc, #72]	; (80039f0 <heating_control+0x84>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	7808      	ldrb	r0, [r1, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	1f59      	subs	r1, r3, #5
 80039ae:	4288      	cmp	r0, r1
 80039b0:	db11      	blt.n	80039d6 <heating_control+0x6a>
 80039b2:	3305      	adds	r3, #5
 80039b4:	4298      	cmp	r0, r3
 80039b6:	dcec      	bgt.n	8003992 <heating_control+0x26>
		heater_state = heater_ON;
 80039b8:	6022      	str	r2, [r4, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80039ba:	480e      	ldr	r0, [pc, #56]	; (80039f4 <heating_control+0x88>)
 80039bc:	2200      	movs	r2, #0
 80039be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 80039c2:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80039c4:	f7fd bbca 	b.w	800115c <HAL_GPIO_WritePin>
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
 80039c8:	1d4a      	adds	r2, r1, #5
 80039ca:	4290      	cmp	r0, r2
 80039cc:	4a06      	ldr	r2, [pc, #24]	; (80039e8 <heating_control+0x7c>)
 80039ce:	ddf3      	ble.n	80039b8 <heating_control+0x4c>
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 5 )) && !(geyser_temp_int > (*set_temp+5 ))){
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d1d4      	bne.n	800397e <heating_control+0x12>
 80039d4:	460b      	mov	r3, r1
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 5)) && !(geyser_temp_int > (*set_temp+5 ))){
 80039d6:	3305      	adds	r3, #5
 80039d8:	4298      	cmp	r0, r3
 80039da:	dcd0      	bgt.n	800397e <heating_control+0x12>
 80039dc:	e7ec      	b.n	80039b8 <heating_control+0x4c>
 80039de:	bf00      	nop
 80039e0:	2000028c 	.word	0x2000028c
 80039e4:	20000014 	.word	0x20000014
 80039e8:	20000018 	.word	0x20000018
 80039ec:	200002b8 	.word	0x200002b8
 80039f0:	2000027c 	.word	0x2000027c
 80039f4:	48000400 	.word	0x48000400

080039f8 <heating_scheduling>:
void heating_scheduling(){
 80039f8:	b538      	push	{r3, r4, r5, lr}
	if(auto_heating == 1){
 80039fa:	4b62      	ldr	r3, [pc, #392]	; (8003b84 <heating_scheduling+0x18c>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d000      	beq.n	8003a04 <heating_scheduling+0xc>
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8003a04:	4c60      	ldr	r4, [pc, #384]	; (8003b88 <heating_scheduling+0x190>)
 8003a06:	4861      	ldr	r0, [pc, #388]	; (8003b8c <heating_scheduling+0x194>)
 8003a08:	6821      	ldr	r1, [r4, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f7fe ff1a 	bl	8002844 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8003a10:	4b5f      	ldr	r3, [pc, #380]	; (8003b90 <heating_scheduling+0x198>)
 8003a12:	485e      	ldr	r0, [pc, #376]	; (8003b8c <heating_scheduling+0x194>)
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f7fe ff4a 	bl	80028b0 <HAL_RTC_GetDate>
		if( (time->Hours - heating_schedule[0].Hours) > 0 && (time->Hours - heating_schedule[1].Hours) < 0){
 8003a1c:	6820      	ldr	r0, [r4, #0]
 8003a1e:	4b5d      	ldr	r3, [pc, #372]	; (8003b94 <heating_scheduling+0x19c>)
 8003a20:	7802      	ldrb	r2, [r0, #0]
 8003a22:	7819      	ldrb	r1, [r3, #0]
 8003a24:	1a54      	subs	r4, r2, r1
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	dd03      	ble.n	8003a32 <heating_scheduling+0x3a>
 8003a2a:	7d1c      	ldrb	r4, [r3, #20]
 8003a2c:	1b14      	subs	r4, r2, r4
 8003a2e:	2c00      	cmp	r4, #0
 8003a30:	db4e      	blt.n	8003ad0 <heating_scheduling+0xd8>
		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 8003a32:	428a      	cmp	r2, r1
 8003a34:	d050      	beq.n	8003ad8 <heating_scheduling+0xe0>
 8003a36:	7d19      	ldrb	r1, [r3, #20]
 8003a38:	4291      	cmp	r1, r2
 8003a3a:	f000 8082 	beq.w	8003b42 <heating_scheduling+0x14a>
		else if( (time->Hours - heating_schedule[2].Hours) > 0 && (time->Hours - heating_schedule[3].Hours) < 0){
 8003a3e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003a42:	1a54      	subs	r4, r2, r1
 8003a44:	2c00      	cmp	r4, #0
 8003a46:	dd04      	ble.n	8003a52 <heating_scheduling+0x5a>
 8003a48:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8003a4c:	1b14      	subs	r4, r2, r4
 8003a4e:	2c00      	cmp	r4, #0
 8003a50:	db3e      	blt.n	8003ad0 <heating_scheduling+0xd8>
		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 8003a52:	428a      	cmp	r2, r1
 8003a54:	d01e      	beq.n	8003a94 <heating_scheduling+0x9c>
 8003a56:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8003a5a:	4291      	cmp	r1, r2
 8003a5c:	d07c      	beq.n	8003b58 <heating_scheduling+0x160>
		else if( (time->Hours - heating_schedule[4].Hours) > 0 && (time->Hours - heating_schedule[5].Hours) < 0){
 8003a5e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8003a62:	1a54      	subs	r4, r2, r1
 8003a64:	2c00      	cmp	r4, #0
 8003a66:	dd04      	ble.n	8003a72 <heating_scheduling+0x7a>
 8003a68:	f893 4064 	ldrb.w	r4, [r3, #100]	; 0x64
 8003a6c:	1b14      	subs	r4, r2, r4
 8003a6e:	2c00      	cmp	r4, #0
 8003a70:	db2e      	blt.n	8003ad0 <heating_scheduling+0xd8>
		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 8003a72:	428a      	cmp	r2, r1
 8003a74:	d048      	beq.n	8003b08 <heating_scheduling+0x110>
 8003a76:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8003a7a:	4291      	cmp	r1, r2
 8003a7c:	d073      	beq.n	8003b66 <heating_scheduling+0x16e>
			heater_state = heater_OFF;
 8003a7e:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <heating_scheduling+0x1a0>)
 8003a80:	4a46      	ldr	r2, [pc, #280]	; (8003b9c <heating_scheduling+0x1a4>)
 8003a82:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8003a84:	4846      	ldr	r0, [pc, #280]	; (8003ba0 <heating_scheduling+0x1a8>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 8003a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8003a90:	f7fd bb64 	b.w	800115c <HAL_GPIO_WritePin>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 8003a94:	7841      	ldrb	r1, [r0, #1]
 8003a96:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 8003a9a:	1b0c      	subs	r4, r1, r4
 8003a9c:	2c00      	cmp	r4, #0
 8003a9e:	dd04      	ble.n	8003aaa <heating_scheduling+0xb2>
 8003aa0:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 8003aa4:	1b0c      	subs	r4, r1, r4
 8003aa6:	2c00      	cmp	r4, #0
 8003aa8:	db12      	blt.n	8003ad0 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[2].Minutes == 0) || (time->Minutes - heating_schedule[3].Minutes == 0) )
 8003aaa:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 8003aae:	428c      	cmp	r4, r1
 8003ab0:	d003      	beq.n	8003aba <heating_scheduling+0xc2>
 8003ab2:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 8003ab6:	428c      	cmp	r4, r1
 8003ab8:	d1d1      	bne.n	8003a5e <heating_scheduling+0x66>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
 8003aba:	7881      	ldrb	r1, [r0, #2]
 8003abc:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 8003ac0:	1b0c      	subs	r4, r1, r4
 8003ac2:	2c00      	cmp	r4, #0
 8003ac4:	ddcb      	ble.n	8003a5e <heating_scheduling+0x66>
 8003ac6:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
 8003aca:	1b09      	subs	r1, r1, r4
 8003acc:	2900      	cmp	r1, #0
 8003ace:	dac6      	bge.n	8003a5e <heating_scheduling+0x66>
}
 8003ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			heating_control();
 8003ad4:	f7ff bf4a 	b.w	800396c <heating_control>
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 8003ad8:	7841      	ldrb	r1, [r0, #1]
 8003ada:	785c      	ldrb	r4, [r3, #1]
 8003adc:	1b0d      	subs	r5, r1, r4
 8003ade:	2d00      	cmp	r5, #0
 8003ae0:	dd03      	ble.n	8003aea <heating_scheduling+0xf2>
 8003ae2:	7d5d      	ldrb	r5, [r3, #21]
 8003ae4:	1b4d      	subs	r5, r1, r5
 8003ae6:	2d00      	cmp	r5, #0
 8003ae8:	dbf2      	blt.n	8003ad0 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[0].Minutes == 0) || (time->Minutes - heating_schedule[1].Minutes == 0) )
 8003aea:	42a1      	cmp	r1, r4
 8003aec:	d002      	beq.n	8003af4 <heating_scheduling+0xfc>
 8003aee:	7d5c      	ldrb	r4, [r3, #21]
 8003af0:	428c      	cmp	r4, r1
 8003af2:	d1a4      	bne.n	8003a3e <heating_scheduling+0x46>
				&& ( (time->Seconds - heating_schedule[0].Seconds > 0) && (time->Seconds - heating_schedule[1].Seconds < 0) ) ){
 8003af4:	7881      	ldrb	r1, [r0, #2]
 8003af6:	789c      	ldrb	r4, [r3, #2]
 8003af8:	1b0c      	subs	r4, r1, r4
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	dd9f      	ble.n	8003a3e <heating_scheduling+0x46>
 8003afe:	7d9c      	ldrb	r4, [r3, #22]
 8003b00:	1b09      	subs	r1, r1, r4
 8003b02:	2900      	cmp	r1, #0
 8003b04:	da9b      	bge.n	8003a3e <heating_scheduling+0x46>
 8003b06:	e7e3      	b.n	8003ad0 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 8003b08:	7841      	ldrb	r1, [r0, #1]
 8003b0a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8003b0e:	1a8c      	subs	r4, r1, r2
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	dd04      	ble.n	8003b1e <heating_scheduling+0x126>
 8003b14:	f893 4065 	ldrb.w	r4, [r3, #101]	; 0x65
 8003b18:	1b0c      	subs	r4, r1, r4
 8003b1a:	2c00      	cmp	r4, #0
 8003b1c:	dbd8      	blt.n	8003ad0 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[4].Minutes == 0) || (time->Minutes - heating_schedule[5].Minutes == 0) )
 8003b1e:	4291      	cmp	r1, r2
 8003b20:	d003      	beq.n	8003b2a <heating_scheduling+0x132>
 8003b22:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8003b26:	428a      	cmp	r2, r1
 8003b28:	d1a9      	bne.n	8003a7e <heating_scheduling+0x86>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
 8003b2a:	7882      	ldrb	r2, [r0, #2]
 8003b2c:	f893 1052 	ldrb.w	r1, [r3, #82]	; 0x52
 8003b30:	1a51      	subs	r1, r2, r1
 8003b32:	2900      	cmp	r1, #0
 8003b34:	dda3      	ble.n	8003a7e <heating_scheduling+0x86>
 8003b36:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003b3a:	1ad2      	subs	r2, r2, r3
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	da9e      	bge.n	8003a7e <heating_scheduling+0x86>
 8003b40:	e7c6      	b.n	8003ad0 <heating_scheduling+0xd8>
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 8003b42:	7841      	ldrb	r1, [r0, #1]
 8003b44:	785c      	ldrb	r4, [r3, #1]
 8003b46:	1b0c      	subs	r4, r1, r4
 8003b48:	2c00      	cmp	r4, #0
 8003b4a:	dd03      	ble.n	8003b54 <heating_scheduling+0x15c>
 8003b4c:	7d5c      	ldrb	r4, [r3, #21]
 8003b4e:	1b0c      	subs	r4, r1, r4
 8003b50:	2c00      	cmp	r4, #0
 8003b52:	dbbd      	blt.n	8003ad0 <heating_scheduling+0xd8>
 8003b54:	785c      	ldrb	r4, [r3, #1]
 8003b56:	e7c8      	b.n	8003aea <heating_scheduling+0xf2>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 8003b58:	7841      	ldrb	r1, [r0, #1]
 8003b5a:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 8003b5e:	1b0c      	subs	r4, r1, r4
 8003b60:	2c00      	cmp	r4, #0
 8003b62:	dda2      	ble.n	8003aaa <heating_scheduling+0xb2>
 8003b64:	e79c      	b.n	8003aa0 <heating_scheduling+0xa8>
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 8003b66:	7841      	ldrb	r1, [r0, #1]
 8003b68:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8003b6c:	1a8a      	subs	r2, r1, r2
 8003b6e:	2a00      	cmp	r2, #0
 8003b70:	dd04      	ble.n	8003b7c <heating_scheduling+0x184>
 8003b72:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8003b76:	1a8a      	subs	r2, r1, r2
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	dba9      	blt.n	8003ad0 <heating_scheduling+0xd8>
 8003b7c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8003b80:	e7cd      	b.n	8003b1e <heating_scheduling+0x126>
 8003b82:	bf00      	nop
 8003b84:	20000254 	.word	0x20000254
 8003b88:	200002c8 	.word	0x200002c8
 8003b8c:	20000480 	.word	0x20000480
 8003b90:	20000260 	.word	0x20000260
 8003b94:	20000500 	.word	0x20000500
 8003b98:	2000028c 	.word	0x2000028c
 8003b9c:	20000014 	.word	0x20000014
 8003ba0:	48000400 	.word	0x48000400

08003ba4 <init_iqs263>:
extern I2C_HandleTypeDef hi2c1;

//unsigned char sliderCoords;                     // variable identified with a Slide event
//unsigned char data_buffer[30];
//unsigned char events = 0;                       // variable identified with all events
int init_iqs263(){
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	b086      	sub	sp, #24
	// READING DEVICE INFORMATION
//	 data_buffer[0] = SYSTEM_FLAGS_VAL;
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003ba8:	2110      	movs	r1, #16
 8003baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bae:	f7fd facf 	bl	8001150 <HAL_GPIO_ReadPin>
 8003bb2:	2801      	cmp	r0, #1
 8003bb4:	d0f8      	beq.n	8003ba8 <init_iqs263+0x4>
	 uint8_t sysflag_byte[] = {0};
 8003bb6:	aa06      	add	r2, sp, #24
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f802 3d04 	strb.w	r3, [r2, #-4]!
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, (uint8_t)SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  sysflag_byte, 1,50);
 8003bbe:	2132      	movs	r1, #50	; 0x32
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	48cf      	ldr	r0, [pc, #828]	; (8003f00 <init_iqs263+0x35c>)
 8003bc4:	9200      	str	r2, [sp, #0]
 8003bc6:	9102      	str	r1, [sp, #8]
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003bce:	4604      	mov	r4, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, (uint8_t)SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  sysflag_byte, 1,50);
 8003bd0:	f7fd fc94 	bl	80014fc <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7fe f915 	bl	8001e04 <HAL_I2C_GetState>
 8003bda:	2820      	cmp	r0, #32
 8003bdc:	d1fa      	bne.n	8003bd4 <init_iqs263+0x30>

	 	HAL_Delay(42);
 8003bde:	202a      	movs	r0, #42	; 0x2a
	    // Set active channels
	 data_buffer[0] = ACTIVE_CHS;
 8003be0:	4dc8      	ldr	r5, [pc, #800]	; (8003f04 <init_iqs263+0x360>)
	 	HAL_Delay(42);
 8003be2:	f7fc fb83 	bl	80002ec <HAL_Delay>
	 data_buffer[0] = ACTIVE_CHS;
 8003be6:	230f      	movs	r3, #15
 8003be8:	702b      	strb	r3, [r5, #0]
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003bea:	2110      	movs	r1, #16
 8003bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf0:	f7fd faae 	bl	8001150 <HAL_GPIO_ReadPin>
 8003bf4:	2801      	cmp	r0, #1
 8003bf6:	d0f8      	beq.n	8003bea <init_iqs263+0x46>
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, ACTIVE_CHANNELS, I2C_MEMADD_SIZE_8BIT,  data_buffer, 1,50);
 8003bf8:	2232      	movs	r2, #50	; 0x32
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	48c0      	ldr	r0, [pc, #768]	; (8003f00 <init_iqs263+0x35c>)
 8003bfe:	9202      	str	r2, [sp, #8]
 8003c00:	9500      	str	r5, [sp, #0]
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	220d      	movs	r2, #13
 8003c06:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003c08:	4606      	mov	r6, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, ACTIVE_CHANNELS, I2C_MEMADD_SIZE_8BIT,  data_buffer, 1,50);
 8003c0a:	f7fd fc77 	bl	80014fc <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7fe f8f8 	bl	8001e04 <HAL_I2C_GetState>
 8003c14:	2820      	cmp	r0, #32
 8003c16:	4604      	mov	r4, r0
 8003c18:	d1f9      	bne.n	8003c0e <init_iqs263+0x6a>
	 HAL_Delay(42);
 8003c1a:	202a      	movs	r0, #42	; 0x2a
 8003c1c:	f7fc fb66 	bl	80002ec <HAL_Delay>
	 // Setup touch and prox thresholds for each channel
	 data_buffer[0] = PROX_THRESHOLD;
 8003c20:	2608      	movs	r6, #8
	 data_buffer[1] = TOUCH_THRESHOLD_CH1;
	 data_buffer[2] = TOUCH_THRESHOLD_CH2;
	 data_buffer[3] = TOUCH_THRESHOLD_CH3;
	 data_buffer[4] = MOVEMENT_THRESHOLD;
 8003c22:	2003      	movs	r0, #3
	 data_buffer[5] = RESEED_BLOCK;
 8003c24:	2100      	movs	r1, #0
	 data_buffer[6] = HALT_TIME;
 8003c26:	2214      	movs	r2, #20
	 data_buffer[7] = I2C_TIMEOUT;
 8003c28:	2304      	movs	r3, #4
	 data_buffer[1] = TOUCH_THRESHOLD_CH1;
 8003c2a:	706c      	strb	r4, [r5, #1]
	 data_buffer[2] = TOUCH_THRESHOLD_CH2;
 8003c2c:	70ac      	strb	r4, [r5, #2]
	 data_buffer[3] = TOUCH_THRESHOLD_CH3;
 8003c2e:	70ec      	strb	r4, [r5, #3]
	 data_buffer[0] = PROX_THRESHOLD;
 8003c30:	702e      	strb	r6, [r5, #0]
	 data_buffer[4] = MOVEMENT_THRESHOLD;
 8003c32:	7128      	strb	r0, [r5, #4]
	 data_buffer[5] = RESEED_BLOCK;
 8003c34:	7169      	strb	r1, [r5, #5]
	 data_buffer[6] = HALT_TIME;
 8003c36:	71aa      	strb	r2, [r5, #6]
	 data_buffer[7] = I2C_TIMEOUT;
 8003c38:	71eb      	strb	r3, [r5, #7]

	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003c3a:	2110      	movs	r1, #16
 8003c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c40:	f7fd fa86 	bl	8001150 <HAL_GPIO_ReadPin>
 8003c44:	2801      	cmp	r0, #1
 8003c46:	d0f8      	beq.n	8003c3a <init_iqs263+0x96>
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, THRESHOLDS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 8,50);
 8003c48:	2232      	movs	r2, #50	; 0x32
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	48ac      	ldr	r0, [pc, #688]	; (8003f00 <init_iqs263+0x35c>)
 8003c4e:	9202      	str	r2, [sp, #8]
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	9500      	str	r5, [sp, #0]
 8003c54:	2301      	movs	r3, #1
 8003c56:	220a      	movs	r2, #10
 8003c58:	2188      	movs	r1, #136	; 0x88
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003c5a:	4604      	mov	r4, r0
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, THRESHOLDS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 8,50);
 8003c5c:	f7fd fc4e 	bl	80014fc <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003c60:	4620      	mov	r0, r4
 8003c62:	f7fe f8cf 	bl	8001e04 <HAL_I2C_GetState>
 8003c66:	2820      	cmp	r0, #32
 8003c68:	d1fa      	bne.n	8003c60 <init_iqs263+0xbc>
	 HAL_Delay(42);
 8003c6a:	202a      	movs	r0, #42	; 0x2a
 8003c6c:	f7fc fb3e 	bl	80002ec <HAL_Delay>

	// Set the ATI Targets (Target Counts)
	data_buffer[0] = ATI_TARGET_TOUCH;
 8003c70:	2230      	movs	r2, #48	; 0x30
	data_buffer[1] = ATI_TARGET_PROX;
 8003c72:	2340      	movs	r3, #64	; 0x40
	data_buffer[0] = ATI_TARGET_TOUCH;
 8003c74:	702a      	strb	r2, [r5, #0]
	data_buffer[1] = ATI_TARGET_PROX;
 8003c76:	706b      	strb	r3, [r5, #1]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003c78:	2110      	movs	r1, #16
 8003c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c7e:	f7fd fa67 	bl	8001150 <HAL_GPIO_ReadPin>
 8003c82:	2801      	cmp	r0, #1
 8003c84:	d0f8      	beq.n	8003c78 <init_iqs263+0xd4>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8003c86:	2232      	movs	r2, #50	; 0x32
 8003c88:	2302      	movs	r3, #2
 8003c8a:	489d      	ldr	r0, [pc, #628]	; (8003f00 <init_iqs263+0x35c>)
 8003c8c:	9202      	str	r2, [sp, #8]
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	9500      	str	r5, [sp, #0]
 8003c92:	2301      	movs	r3, #1
 8003c94:	220b      	movs	r2, #11
 8003c96:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003c98:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8003c9a:	f7fd fc2f 	bl	80014fc <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f7fe f8b0 	bl	8001e04 <HAL_I2C_GetState>
 8003ca4:	2820      	cmp	r0, #32
 8003ca6:	d1fa      	bne.n	8003c9e <init_iqs263+0xfa>
	HAL_Delay(42);
 8003ca8:	202a      	movs	r0, #42	; 0x2a
 8003caa:	f7fc fb1f 	bl	80002ec <HAL_Delay>
	// Set the BASE value for each channel
	data_buffer[0] = MULTIPLIERS_CH0;
 8003cae:	2308      	movs	r3, #8
 8003cb0:	702b      	strb	r3, [r5, #0]
	data_buffer[1] = MULTIPLIERS_CH1;
 8003cb2:	706b      	strb	r3, [r5, #1]
	data_buffer[2] = MULTIPLIERS_CH2;
 8003cb4:	70ab      	strb	r3, [r5, #2]
	data_buffer[3] = MULTIPLIERS_CH3;
 8003cb6:	70eb      	strb	r3, [r5, #3]

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003cb8:	2110      	movs	r1, #16
 8003cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cbe:	f7fd fa47 	bl	8001150 <HAL_GPIO_ReadPin>
 8003cc2:	2801      	cmp	r0, #1
 8003cc4:	d0f8      	beq.n	8003cb8 <init_iqs263+0x114>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, MULTIPLIERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8003cc6:	2232      	movs	r2, #50	; 0x32
 8003cc8:	2304      	movs	r3, #4
 8003cca:	488d      	ldr	r0, [pc, #564]	; (8003f00 <init_iqs263+0x35c>)
 8003ccc:	9202      	str	r2, [sp, #8]
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	9500      	str	r5, [sp, #0]
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003cd8:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, MULTIPLIERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8003cda:	f7fd fc0f 	bl	80014fc <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f7fe f890 	bl	8001e04 <HAL_I2C_GetState>
 8003ce4:	2820      	cmp	r0, #32
 8003ce6:	d1fa      	bne.n	8003cde <init_iqs263+0x13a>
	HAL_Delay(42);
 8003ce8:	202a      	movs	r0, #42	; 0x2a
 8003cea:	f7fc faff 	bl	80002ec <HAL_Delay>

//	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1()){}; // Waiting for device
//	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
//	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003cee:	2110      	movs	r1, #16
 8003cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cf4:	f7fd fa2c 	bl	8001150 <HAL_GPIO_ReadPin>
 8003cf8:	2801      	cmp	r0, #1
 8003cfa:	d0f8      	beq.n	8003cee <init_iqs263+0x14a>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8003cfc:	2232      	movs	r2, #50	; 0x32
 8003cfe:	2305      	movs	r3, #5
 8003d00:	487f      	ldr	r0, [pc, #508]	; (8003f00 <init_iqs263+0x35c>)
 8003d02:	9202      	str	r2, [sp, #8]
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	9500      	str	r5, [sp, #0]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	2209      	movs	r2, #9
 8003d0c:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003d0e:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8003d10:	f7fd fcd6 	bl	80016c0 <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7fe f875 	bl	8001e04 <HAL_I2C_GetState>
 8003d1a:	2820      	cmp	r0, #32
 8003d1c:	d1fa      	bne.n	8003d14 <init_iqs263+0x170>
	HAL_Delay(42);
 8003d1e:	202a      	movs	r0, #42	; 0x2a
 8003d20:	f7fc fae4 	bl	80002ec <HAL_Delay>
	// Setup prox settings
//	data_buffer[0] = 0;
	data_buffer[0] = PROXSETTINGS0_VAL;
 8003d24:	2300      	movs	r3, #0
	data_buffer[1] = PROXSETTINGS1_VAL;
 8003d26:	211d      	movs	r1, #29
//	data_buffer[2] = 8;
	data_buffer[2] = PROXSETTINGS2_VAL;
 8003d28:	2204      	movs	r2, #4
	data_buffer[0] = PROXSETTINGS0_VAL;
 8003d2a:	702b      	strb	r3, [r5, #0]
	data_buffer[3] = PROXSETTINGS3_VAL;
 8003d2c:	70eb      	strb	r3, [r5, #3]
	data_buffer[4] = EVENT_MASK_VAL;
 8003d2e:	712b      	strb	r3, [r5, #4]
	data_buffer[1] = PROXSETTINGS1_VAL;
 8003d30:	7069      	strb	r1, [r5, #1]
	data_buffer[2] = PROXSETTINGS2_VAL;
 8003d32:	70aa      	strb	r2, [r5, #2]


	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003d34:	2110      	movs	r1, #16
 8003d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d3a:	f7fd fa09 	bl	8001150 <HAL_GPIO_ReadPin>
 8003d3e:	2801      	cmp	r0, #1
 8003d40:	d0f8      	beq.n	8003d34 <init_iqs263+0x190>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8003d42:	2232      	movs	r2, #50	; 0x32
 8003d44:	2305      	movs	r3, #5
 8003d46:	486e      	ldr	r0, [pc, #440]	; (8003f00 <init_iqs263+0x35c>)
 8003d48:	9202      	str	r2, [sp, #8]
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	9500      	str	r5, [sp, #0]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	2209      	movs	r2, #9
 8003d52:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003d54:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8003d56:	f7fd fbd1 	bl	80014fc <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7fe f852 	bl	8001e04 <HAL_I2C_GetState>
 8003d60:	2820      	cmp	r0, #32
 8003d62:	d1fa      	bne.n	8003d5a <init_iqs263+0x1b6>
	HAL_Delay(42);
 8003d64:	202a      	movs	r0, #42	; 0x2a
 8003d66:	f7fc fac1 	bl	80002ec <HAL_Delay>
//	data_buffer[1] = 0;
//	data_buffer[2] = 0;
//	data_buffer[3] = 0;
//	data_buffer[4] = 0;

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003d6a:	2110      	movs	r1, #16
 8003d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d70:	f7fd f9ee 	bl	8001150 <HAL_GPIO_ReadPin>
 8003d74:	2801      	cmp	r0, #1
 8003d76:	d0f8      	beq.n	8003d6a <init_iqs263+0x1c6>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8003d78:	2232      	movs	r2, #50	; 0x32
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	4860      	ldr	r0, [pc, #384]	; (8003f00 <init_iqs263+0x35c>)
 8003d7e:	9202      	str	r2, [sp, #8]
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	9500      	str	r5, [sp, #0]
 8003d84:	2301      	movs	r3, #1
 8003d86:	2209      	movs	r2, #9
 8003d88:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003d8a:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8003d8c:	f7fd fc98 	bl	80016c0 <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003d90:	4620      	mov	r0, r4
 8003d92:	f7fe f837 	bl	8001e04 <HAL_I2C_GetState>
 8003d96:	2820      	cmp	r0, #32
 8003d98:	d1fa      	bne.n	8003d90 <init_iqs263+0x1ec>
	HAL_Delay(42);
 8003d9a:	202a      	movs	r0, #42	; 0x2a
 8003d9c:	f7fc faa6 	bl	80002ec <HAL_Delay>

    // Setup Compensation (PCC)
    data_buffer[0] = COMPENSATION_CH0;
    data_buffer[1] = COMPENSATION_CH1;
 8003da0:	2349      	movs	r3, #73	; 0x49
    data_buffer[0] = COMPENSATION_CH0;
 8003da2:	2151      	movs	r1, #81	; 0x51
    data_buffer[2] = COMPENSATION_CH2;
 8003da4:	224a      	movs	r2, #74	; 0x4a
    data_buffer[0] = COMPENSATION_CH0;
 8003da6:	7029      	strb	r1, [r5, #0]
    data_buffer[1] = COMPENSATION_CH1;
 8003da8:	706b      	strb	r3, [r5, #1]
    data_buffer[3] = COMPENSATION_CH3;
 8003daa:	70eb      	strb	r3, [r5, #3]
    data_buffer[2] = COMPENSATION_CH2;
 8003dac:	70aa      	strb	r2, [r5, #2]

    while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003dae:	2110      	movs	r1, #16
 8003db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003db4:	f7fd f9cc 	bl	8001150 <HAL_GPIO_ReadPin>
 8003db8:	2801      	cmp	r0, #1
 8003dba:	d0f8      	beq.n	8003dae <init_iqs263+0x20a>
    HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, COMPENSATION, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8003dbc:	2232      	movs	r2, #50	; 0x32
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	484f      	ldr	r0, [pc, #316]	; (8003f00 <init_iqs263+0x35c>)
 8003dc2:	9202      	str	r2, [sp, #8]
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	9500      	str	r5, [sp, #0]
 8003dc8:	2301      	movs	r3, #1
 8003dca:	2208      	movs	r2, #8
 8003dcc:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003dce:	4604      	mov	r4, r0
    HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, COMPENSATION, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8003dd0:	f7fd fb94 	bl	80014fc <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f7fe f815 	bl	8001e04 <HAL_I2C_GetState>
 8003dda:	2820      	cmp	r0, #32
 8003ddc:	d1fa      	bne.n	8003dd4 <init_iqs263+0x230>
	HAL_Delay(42);
 8003dde:	202a      	movs	r0, #42	; 0x2a
 8003de0:	f7fc fa84 	bl	80002ec <HAL_Delay>

	// Set timings on the IQS263
	data_buffer[0] = LOW_POWER;
 8003de4:	2300      	movs	r3, #0
 8003de6:	702b      	strb	r3, [r5, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003de8:	2110      	movs	r1, #16
 8003dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dee:	f7fd f9af 	bl	8001150 <HAL_GPIO_ReadPin>
 8003df2:	2801      	cmp	r0, #1
 8003df4:	d0f8      	beq.n	8003de8 <init_iqs263+0x244>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8003df6:	2232      	movs	r2, #50	; 0x32
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4841      	ldr	r0, [pc, #260]	; (8003f00 <init_iqs263+0x35c>)
 8003dfc:	9202      	str	r2, [sp, #8]
 8003dfe:	9500      	str	r5, [sp, #0]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	220b      	movs	r2, #11
 8003e04:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003e06:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8003e08:	f7fd fb78 	bl	80014fc <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7fd fff9 	bl	8001e04 <HAL_I2C_GetState>
 8003e12:	2820      	cmp	r0, #32
 8003e14:	d1fa      	bne.n	8003e0c <init_iqs263+0x268>
	HAL_Delay(42);
 8003e16:	202a      	movs	r0, #42	; 0x2a
 8003e18:	f7fc fa68 	bl	80002ec <HAL_Delay>
	// Set gesture timers on IQS263
	data_buffer[0] = TAP_TIMER;
 8003e1c:	2105      	movs	r1, #5
	data_buffer[1] = FLICK_TIMER;
 8003e1e:	2251      	movs	r2, #81	; 0x51
	data_buffer[2] = FLICK_THRESHOLD;
 8003e20:	2333      	movs	r3, #51	; 0x33
	data_buffer[0] = TAP_TIMER;
 8003e22:	7029      	strb	r1, [r5, #0]
	data_buffer[1] = FLICK_TIMER;
 8003e24:	706a      	strb	r2, [r5, #1]
	data_buffer[2] = FLICK_THRESHOLD;
 8003e26:	70ab      	strb	r3, [r5, #2]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003e28:	2110      	movs	r1, #16
 8003e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e2e:	f7fd f98f 	bl	8001150 <HAL_GPIO_ReadPin>
 8003e32:	2801      	cmp	r0, #1
 8003e34:	d0f8      	beq.n	8003e28 <init_iqs263+0x284>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, GESTURE_TIMERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 3,50);
 8003e36:	2232      	movs	r2, #50	; 0x32
 8003e38:	2303      	movs	r3, #3
 8003e3a:	4831      	ldr	r0, [pc, #196]	; (8003f00 <init_iqs263+0x35c>)
 8003e3c:	9202      	str	r2, [sp, #8]
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	9500      	str	r5, [sp, #0]
 8003e42:	2301      	movs	r3, #1
 8003e44:	220c      	movs	r2, #12
 8003e46:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003e48:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, GESTURE_TIMERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 3,50);
 8003e4a:	f7fd fb57 	bl	80014fc <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd ffd8 	bl	8001e04 <HAL_I2C_GetState>
 8003e54:	2820      	cmp	r0, #32
 8003e56:	d1fa      	bne.n	8003e4e <init_iqs263+0x2aa>
	HAL_Delay(42);
 8003e58:	202a      	movs	r0, #42	; 0x2a
 8003e5a:	f7fc fa47 	bl	80002ec <HAL_Delay>

	// Redo ati
	data_buffer[0] = 0x10;
 8003e5e:	2310      	movs	r3, #16
 8003e60:	702b      	strb	r3, [r5, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003e62:	2110      	movs	r1, #16
 8003e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e68:	f7fd f972 	bl	8001150 <HAL_GPIO_ReadPin>
 8003e6c:	2801      	cmp	r0, #1
 8003e6e:	d0f8      	beq.n	8003e62 <init_iqs263+0x2be>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8003e70:	2232      	movs	r2, #50	; 0x32
 8003e72:	2301      	movs	r3, #1
 8003e74:	4822      	ldr	r0, [pc, #136]	; (8003f00 <init_iqs263+0x35c>)
 8003e76:	9202      	str	r2, [sp, #8]
 8003e78:	9500      	str	r5, [sp, #0]
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	2209      	movs	r2, #9
 8003e7e:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003e80:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8003e82:	f7fd fb3b 	bl	80014fc <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003e86:	4620      	mov	r0, r4
 8003e88:	f7fd ffbc 	bl	8001e04 <HAL_I2C_GetState>
 8003e8c:	2820      	cmp	r0, #32
 8003e8e:	d1fa      	bne.n	8003e86 <init_iqs263+0x2e2>
	HAL_Delay(42);
 8003e90:	202a      	movs	r0, #42	; 0x2a
 8003e92:	f7fc fa2b 	bl	80002ec <HAL_Delay>
	do
	    {
			HAL_Delay(10);
	        while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
	        HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8003e96:	4c1a      	ldr	r4, [pc, #104]	; (8003f00 <init_iqs263+0x35c>)
			HAL_Delay(10);
 8003e98:	200a      	movs	r0, #10
 8003e9a:	f7fc fa27 	bl	80002ec <HAL_Delay>
	        while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003e9e:	2110      	movs	r1, #16
 8003ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea4:	f7fd f954 	bl	8001150 <HAL_GPIO_ReadPin>
 8003ea8:	2801      	cmp	r0, #1
 8003eaa:	d0f8      	beq.n	8003e9e <init_iqs263+0x2fa>
	        HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8003eac:	2232      	movs	r2, #50	; 0x32
 8003eae:	2301      	movs	r3, #1
 8003eb0:	9202      	str	r2, [sp, #8]
 8003eb2:	9500      	str	r5, [sp, #0]
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2188      	movs	r1, #136	; 0x88
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f7fd fc00 	bl	80016c0 <HAL_I2C_Mem_Read>
	        while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f7fd ff9f 	bl	8001e04 <HAL_I2C_GetState>
 8003ec6:	2820      	cmp	r0, #32
 8003ec8:	d1fa      	bne.n	8003ec0 <init_iqs263+0x31c>
	        HAL_Delay(42);
 8003eca:	202a      	movs	r0, #42	; 0x2a
 8003ecc:	f7fc fa0e 	bl	80002ec <HAL_Delay>
	    }
	    while ((data_buffer[0] & 0b00000100) == 0b00000100);
 8003ed0:	782b      	ldrb	r3, [r5, #0]
 8003ed2:	075b      	lsls	r3, r3, #29
 8003ed4:	d4e0      	bmi.n	8003e98 <init_iqs263+0x2f4>

	// read the error bit to determine if ATI error occured
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8003ed6:	2110      	movs	r1, #16
 8003ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003edc:	f7fd f938 	bl	8001150 <HAL_GPIO_ReadPin>
 8003ee0:	2801      	cmp	r0, #1
 8003ee2:	d0f8      	beq.n	8003ed6 <init_iqs263+0x332>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8003ee4:	2232      	movs	r2, #50	; 0x32
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	4805      	ldr	r0, [pc, #20]	; (8003f00 <init_iqs263+0x35c>)
 8003eea:	9202      	str	r2, [sp, #8]
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	9500      	str	r5, [sp, #0]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	2209      	movs	r2, #9
 8003ef4:	2188      	movs	r1, #136	; 0x88
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003ef6:	4604      	mov	r4, r0
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8003ef8:	f7fd fbe2 	bl	80016c0 <HAL_I2C_Mem_Read>
 8003efc:	e004      	b.n	8003f08 <init_iqs263+0x364>
 8003efe:	bf00      	nop
 8003f00:	2000037c 	.word	0x2000037c
 8003f04:	20000594 	.word	0x20000594
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7fd ff7b 	bl	8001e04 <HAL_I2C_GetState>
 8003f0e:	2820      	cmp	r0, #32
 8003f10:	d1fa      	bne.n	8003f08 <init_iqs263+0x364>
	HAL_Delay(42);
 8003f12:	202a      	movs	r0, #42	; 0x2a
 8003f14:	f7fc f9ea 	bl	80002ec <HAL_Delay>
	if ( (data_buffer[1] & 0x02) == 0x02){
 8003f18:	786b      	ldrb	r3, [r5, #1]
		return -1;
	}
	return 1;
 8003f1a:	f013 0f02 	tst.w	r3, #2
}
 8003f1e:	bf14      	ite	ne
 8003f20:	f04f 30ff 	movne.w	r0, #4294967295
 8003f24:	2001      	moveq	r0, #1
 8003f26:	b006      	add	sp, #24
 8003f28:	bd70      	pop	{r4, r5, r6, pc}
 8003f2a:	bf00      	nop

08003f2c <init_peripherals>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 8003f2c:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 8003f2e:	2201      	movs	r2, #1
 8003f30:	2120      	movs	r1, #32
 8003f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f36:	f7fd f911 	bl	800115c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f42:	f7fd f90b 	bl	800115c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 8003f46:	2201      	movs	r2, #1
 8003f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f50:	f7fd f904 	bl	800115c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 8003f54:	2201      	movs	r2, #1
 8003f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f5e:	f7fd f8fd 	bl	800115c <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8003f62:	4c8e      	ldr	r4, [pc, #568]	; (800419c <init_peripherals+0x270>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	2108      	movs	r1, #8
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f7fd f8f7 	bl	800115c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2110      	movs	r1, #16
 8003f72:	4620      	mov	r0, r4
 8003f74:	f7fd f8f2 	bl	800115c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2120      	movs	r1, #32
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7fd f8ed 	bl	800115c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 8003f82:	2201      	movs	r2, #1
 8003f84:	2140      	movs	r1, #64	; 0x40
 8003f86:	4620      	mov	r0, r4
 8003f88:	f7fd f8e8 	bl	800115c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f92:	4620      	mov	r0, r4
 8003f94:	f7fd f8e2 	bl	800115c <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	4880      	ldr	r0, [pc, #512]	; (80041a0 <init_peripherals+0x274>)
 8003f9e:	f7fd f8dd 	bl	800115c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7fd f8d7 	bl	800115c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f7fd f8d1 	bl	800115c <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 8003fba:	200f      	movs	r0, #15
 8003fbc:	f001 fb12 	bl	80055e4 <malloc>
 8003fc0:	4b78      	ldr	r3, [pc, #480]	; (80041a4 <init_peripherals+0x278>)
 8003fc2:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 8003fc4:	2400      	movs	r4, #0
 8003fc6:	6004      	str	r4, [r0, #0]
 8003fc8:	6044      	str	r4, [r0, #4]
 8003fca:	6084      	str	r4, [r0, #8]
 8003fcc:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8003fd0:	2032      	movs	r0, #50	; 0x32
 8003fd2:	f001 fb07 	bl	80055e4 <malloc>
 8003fd6:	4b74      	ldr	r3, [pc, #464]	; (80041a8 <init_peripherals+0x27c>)
 8003fd8:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 8003fda:	2232      	movs	r2, #50	; 0x32
 8003fdc:	4621      	mov	r1, r4
 8003fde:	f001 fb14 	bl	800560a <memset>

	uart_command = (uint8_t*)malloc(60);
 8003fe2:	203c      	movs	r0, #60	; 0x3c
 8003fe4:	f001 fafe 	bl	80055e4 <malloc>
 8003fe8:	4e70      	ldr	r6, [pc, #448]	; (80041ac <init_peripherals+0x280>)
 8003fea:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 8003fec:	253c      	movs	r5, #60	; 0x3c
 8003fee:	462a      	mov	r2, r5
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	f001 fb0a 	bl	800560a <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f001 faf4 	bl	80055e4 <malloc>
 8003ffc:	4b6c      	ldr	r3, [pc, #432]	; (80041b0 <init_peripherals+0x284>)
 8003ffe:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 8004000:	462a      	mov	r2, r5
 8004002:	4621      	mov	r1, r4
 8004004:	6830      	ldr	r0, [r6, #0]
 8004006:	f001 fb00 	bl	800560a <memset>



	set_temp = (uint8_t*)malloc(4);
 800400a:	2004      	movs	r0, #4
 800400c:	f001 faea 	bl	80055e4 <malloc>
 8004010:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <init_peripherals+0x288>)
 8004012:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 8004014:	6004      	str	r4, [r0, #0]
	*set_temp = 0;
 8004016:	7004      	strb	r4, [r0, #0]
//	segment_val =set_temp;
	//	  memset(segment_val, 0x00, 4);
	segment_val = (char*)malloc(4);
 8004018:	2004      	movs	r0, #4
 800401a:	f001 fae3 	bl	80055e4 <malloc>
 800401e:	4b66      	ldr	r3, [pc, #408]	; (80041b8 <init_peripherals+0x28c>)
 8004020:	6018      	str	r0, [r3, #0]
	memset(segment_val, 0x00, 4);
 8004022:	6004      	str	r4, [r0, #0]
//
	temp_val = (char*)malloc(4);
 8004024:	2004      	movs	r0, #4
 8004026:	f001 fadd 	bl	80055e4 <malloc>
 800402a:	4b64      	ldr	r3, [pc, #400]	; (80041bc <init_peripherals+0x290>)
 800402c:	6018      	str	r0, [r3, #0]
	memset(temp_val, 0x00, 4);
 800402e:	6004      	str	r4, [r0, #0]

	ADC1_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8004030:	2014      	movs	r0, #20
 8004032:	f001 fad7 	bl	80055e4 <malloc>
 8004036:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <init_peripherals+0x294>)
 8004038:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 5);
 800403a:	6004      	str	r4, [r0, #0]
 800403c:	7104      	strb	r4, [r0, #4]

	ADC2_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 800403e:	2014      	movs	r0, #20
 8004040:	f001 fad0 	bl	80055e4 <malloc>
 8004044:	4b5f      	ldr	r3, [pc, #380]	; (80041c4 <init_peripherals+0x298>)
 8004046:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 5);
 8004048:	6004      	str	r4, [r0, #0]
 800404a:	7104      	strb	r4, [r0, #4]

	voltage_rms =(char*)malloc(3*sizeof(char));
 800404c:	2003      	movs	r0, #3
 800404e:	f001 fac9 	bl	80055e4 <malloc>
 8004052:	4b5d      	ldr	r3, [pc, #372]	; (80041c8 <init_peripherals+0x29c>)
 8004054:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 8004056:	8004      	strh	r4, [r0, #0]
 8004058:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 800405a:	2004      	movs	r0, #4
 800405c:	f001 fac2 	bl	80055e4 <malloc>
 8004060:	4b5a      	ldr	r3, [pc, #360]	; (80041cc <init_peripherals+0x2a0>)
 8004062:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 8004064:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 8004066:	2014      	movs	r0, #20
 8004068:	f001 fabc 	bl	80055e4 <malloc>
 800406c:	4a58      	ldr	r2, [pc, #352]	; (80041d0 <init_peripherals+0x2a4>)
 800406e:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 8004070:	6004      	str	r4, [r0, #0]
 8004072:	6044      	str	r4, [r0, #4]
 8004074:	6084      	str	r4, [r0, #8]
 8004076:	60c4      	str	r4, [r0, #12]
 8004078:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 800407a:	4b56      	ldr	r3, [pc, #344]	; (80041d4 <init_peripherals+0x2a8>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4956      	ldr	r1, [pc, #344]	; (80041d8 <init_peripherals+0x2ac>)
 8004080:	f001 fb88 	bl	8005794 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8004084:	2010      	movs	r0, #16
 8004086:	f001 faad 	bl	80055e4 <malloc>
 800408a:	4b54      	ldr	r3, [pc, #336]	; (80041dc <init_peripherals+0x2b0>)
 800408c:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 800408e:	2010      	movs	r0, #16
 8004090:	f001 faa8 	bl	80055e4 <malloc>
 8004094:	4b52      	ldr	r3, [pc, #328]	; (80041e0 <init_peripherals+0x2b4>)
 8004096:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 8004098:	2004      	movs	r0, #4
 800409a:	f001 faa3 	bl	80055e4 <malloc>
 800409e:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <init_peripherals+0x2b8>)
 80040a0:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 80040a2:	2004      	movs	r0, #4
 80040a4:	f001 fa9e 	bl	80055e4 <malloc>
 80040a8:	4b4f      	ldr	r3, [pc, #316]	; (80041e8 <init_peripherals+0x2bc>)
 80040aa:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 80040ac:	4a4f      	ldr	r2, [pc, #316]	; (80041ec <init_peripherals+0x2c0>)
 80040ae:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <init_peripherals+0x2c4>)
 80040b0:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 80040b2:	4a50      	ldr	r2, [pc, #320]	; (80041f4 <init_peripherals+0x2c8>)
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <init_peripherals+0x2cc>)
 80040b6:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 80040b8:	200f      	movs	r0, #15
 80040ba:	f001 fa93 	bl	80055e4 <malloc>
 80040be:	4e4f      	ldr	r6, [pc, #316]	; (80041fc <init_peripherals+0x2d0>)
 80040c0:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 80040c2:	6004      	str	r4, [r0, #0]
 80040c4:	6044      	str	r4, [r0, #4]
 80040c6:	6084      	str	r4, [r0, #8]
 80040c8:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 80040cc:	200f      	movs	r0, #15
 80040ce:	f001 fa89 	bl	80055e4 <malloc>
 80040d2:	4d4b      	ldr	r5, [pc, #300]	; (8004200 <init_peripherals+0x2d4>)
 80040d4:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 80040d6:	6004      	str	r4, [r0, #0]
 80040d8:	6044      	str	r4, [r0, #4]
 80040da:	6084      	str	r4, [r0, #8]
 80040dc:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 80040e0:	200f      	movs	r0, #15
 80040e2:	f001 fa7f 	bl	80055e4 <malloc>
 80040e6:	4b47      	ldr	r3, [pc, #284]	; (8004204 <init_peripherals+0x2d8>)
 80040e8:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 80040ea:	6004      	str	r4, [r0, #0]
 80040ec:	6044      	str	r4, [r0, #4]
 80040ee:	6084      	str	r4, [r0, #8]
 80040f0:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 80040f4:	4b44      	ldr	r3, [pc, #272]	; (8004208 <init_peripherals+0x2dc>)
 80040f6:	6832      	ldr	r2, [r6, #0]
 80040f8:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 80040fa:	682a      	ldr	r2, [r5, #0]
 80040fc:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 80040fe:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 8004100:	2014      	movs	r0, #20
 8004102:	f001 fa6f 	bl	80055e4 <malloc>
 8004106:	4b41      	ldr	r3, [pc, #260]	; (800420c <init_peripherals+0x2e0>)
 8004108:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 800410a:	6004      	str	r4, [r0, #0]
 800410c:	6044      	str	r4, [r0, #4]
 800410e:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 8004110:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <init_peripherals+0x2e4>)
 8004112:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 8004114:	2018      	movs	r0, #24
 8004116:	f001 fa65 	bl	80055e4 <malloc>
 800411a:	4e3e      	ldr	r6, [pc, #248]	; (8004214 <init_peripherals+0x2e8>)
 800411c:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 800411e:	6004      	str	r4, [r0, #0]
 8004120:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 8004122:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 8004124:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 8004126:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004128:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800412a:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 800412c:	2004      	movs	r0, #4
 800412e:	f001 fa59 	bl	80055e4 <malloc>
 8004132:	4b39      	ldr	r3, [pc, #228]	; (8004218 <init_peripherals+0x2ec>)
 8004134:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 8004136:	2501      	movs	r5, #1
 8004138:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 800413a:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 800413c:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 800413e:	70c4      	strb	r4, [r0, #3]


//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);

	log_receiced_num = (uint8_t*)malloc(3*sizeof(uint8_t));
 8004140:	2003      	movs	r0, #3
 8004142:	f001 fa4f 	bl	80055e4 <malloc>
 8004146:	4b35      	ldr	r3, [pc, #212]	; (800421c <init_peripherals+0x2f0>)
 8004148:	6018      	str	r0, [r3, #0]
	memset(log_receiced_num, 0x00, 3);
 800414a:	8004      	strh	r4, [r0, #0]
 800414c:	7084      	strb	r4, [r0, #2]
	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 800414e:	2046      	movs	r0, #70	; 0x46
 8004150:	f001 fa48 	bl	80055e4 <malloc>
 8004154:	4b32      	ldr	r3, [pc, #200]	; (8004220 <init_peripherals+0x2f4>)
 8004156:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 8004158:	2246      	movs	r2, #70	; 0x46
 800415a:	4621      	mov	r1, r4
 800415c:	f001 fa55 	bl	800560a <memset>


	new_time = malloc(6*sizeof(uint32_t));
 8004160:	2018      	movs	r0, #24
 8004162:	f001 fa3f 	bl	80055e4 <malloc>
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <init_peripherals+0x2f8>)
 8004168:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 800416a:	6004      	str	r4, [r0, #0]
 800416c:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 800416e:	2003      	movs	r0, #3
 8004170:	f001 fa38 	bl	80055e4 <malloc>
 8004174:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <init_peripherals+0x2fc>)
 8004176:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 8004178:	8004      	strh	r4, [r0, #0]
 800417a:	7084      	strb	r4, [r0, #2]

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 800417c:	2004      	movs	r0, #4
 800417e:	f001 fa31 	bl	80055e4 <malloc>
 8004182:	4b2a      	ldr	r3, [pc, #168]	; (800422c <init_peripherals+0x300>)
 8004184:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 8004186:	2010      	movs	r0, #16
 8004188:	f001 fa2c 	bl	80055e4 <malloc>
 800418c:	4b28      	ldr	r3, [pc, #160]	; (8004230 <init_peripherals+0x304>)
 800418e:	6018      	str	r0, [r3, #0]

	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 8004190:	462a      	mov	r2, r5
 8004192:	6831      	ldr	r1, [r6, #0]
 8004194:	4827      	ldr	r0, [pc, #156]	; (8004234 <init_peripherals+0x308>)
 8004196:	f7fe fb55 	bl	8002844 <HAL_RTC_GetTime>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	48000400 	.word	0x48000400
 80041a0:	48000800 	.word	0x48000800
 80041a4:	20000578 	.word	0x20000578
 80041a8:	200002ac 	.word	0x200002ac
 80041ac:	200002d4 	.word	0x200002d4
 80041b0:	200002d8 	.word	0x200002d8
 80041b4:	200002b8 	.word	0x200002b8
 80041b8:	200002b4 	.word	0x200002b4
 80041bc:	200002c4 	.word	0x200002c4
 80041c0:	20000244 	.word	0x20000244
 80041c4:	20000248 	.word	0x20000248
 80041c8:	200002ec 	.word	0x200002ec
 80041cc:	2000025c 	.word	0x2000025c
 80041d0:	200002cc 	.word	0x200002cc
 80041d4:	200002f0 	.word	0x200002f0
 80041d8:	0800612c 	.word	0x0800612c
 80041dc:	200002e8 	.word	0x200002e8
 80041e0:	20000258 	.word	0x20000258
 80041e4:	20000250 	.word	0x20000250
 80041e8:	20000278 	.word	0x20000278
 80041ec:	20000014 	.word	0x20000014
 80041f0:	2000028c 	.word	0x2000028c
 80041f4:	20000048 	.word	0x20000048
 80041f8:	200002e0 	.word	0x200002e0
 80041fc:	20000280 	.word	0x20000280
 8004200:	20000284 	.word	0x20000284
 8004204:	20000288 	.word	0x20000288
 8004208:	200005b4 	.word	0x200005b4
 800420c:	20000290 	.word	0x20000290
 8004210:	20000590 	.word	0x20000590
 8004214:	200002c8 	.word	0x200002c8
 8004218:	20000260 	.word	0x20000260
 800421c:	2000029c 	.word	0x2000029c
 8004220:	20000274 	.word	0x20000274
 8004224:	200002a0 	.word	0x200002a0
 8004228:	200002c0 	.word	0x200002c0
 800422c:	2000026c 	.word	0x2000026c
 8004230:	200002a4 	.word	0x200002a4
 8004234:	20000480 	.word	0x20000480

08004238 <liters_pumped>:

void liters_pumped(){



	if(valve_timer == 5){
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <liters_pumped+0x2c>)
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	2a05      	cmp	r2, #5
 800423e:	d000      	beq.n	8004242 <liters_pumped+0xa>
 8004240:	4770      	bx	lr
void liters_pumped(){
 8004242:	b4f0      	push	{r4, r5, r6, r7}
		pump_flag = 0;
		valve_timer = 0;
		water_acc+=100;
 8004244:	4e08      	ldr	r6, [pc, #32]	; (8004268 <liters_pumped+0x30>)
		pump_flag = 0;
 8004246:	4f09      	ldr	r7, [pc, #36]	; (800426c <liters_pumped+0x34>)
		water_acc+=100;
 8004248:	6834      	ldr	r4, [r6, #0]
		sprintf(total_water,"%lu", water_acc);
 800424a:	4a09      	ldr	r2, [pc, #36]	; (8004270 <liters_pumped+0x38>)
 800424c:	4909      	ldr	r1, [pc, #36]	; (8004274 <liters_pumped+0x3c>)
 800424e:	6810      	ldr	r0, [r2, #0]
		pump_flag = 0;
 8004250:	2500      	movs	r5, #0
		water_acc+=100;
 8004252:	3464      	adds	r4, #100	; 0x64
		pump_flag = 0;
 8004254:	703d      	strb	r5, [r7, #0]
		valve_timer = 0;
 8004256:	701d      	strb	r5, [r3, #0]
		sprintf(total_water,"%lu", water_acc);
 8004258:	4622      	mov	r2, r4
		water_acc+=100;
 800425a:	6034      	str	r4, [r6, #0]

	}
}
 800425c:	bcf0      	pop	{r4, r5, r6, r7}
		sprintf(total_water,"%lu", water_acc);
 800425e:	f001 ba99 	b.w	8005794 <siprintf>
 8004262:	bf00      	nop
 8004264:	200002e4 	.word	0x200002e4
 8004268:	200002f0 	.word	0x200002f0
 800426c:	200002a8 	.word	0x200002a8
 8004270:	200002cc 	.word	0x200002cc
 8004274:	0800612c 	.word	0x0800612c

08004278 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800427e:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <MX_GPIO_Init+0x15c>)
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004286:	615a      	str	r2, [r3, #20]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800428e:	9201      	str	r2, [sp, #4]
 8004290:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004298:	615a      	str	r2, [r3, #20]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80042a0:	9202      	str	r2, [sp, #8]
 80042a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80042aa:	615a      	str	r2, [r3, #20]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80042b2:	9203      	str	r2, [sp, #12]
 80042b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80042bc:	615a      	str	r2, [r3, #20]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c4:	9304      	str	r3, [sp, #16]
 80042c6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 80042c8:	2201      	movs	r2, #1
 80042ca:	2112      	movs	r1, #18
 80042cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042d0:	f7fc ff44 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80042d4:	2200      	movs	r2, #0
 80042d6:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80042da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042de:	f7fc ff3d 	bl	800115c <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80042e2:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80043e8 <MX_GPIO_Init+0x170>
 80042e6:	2200      	movs	r2, #0
 80042e8:	f246 4178 	movw	r1, #25720	; 0x6478
 80042ec:	4640      	mov	r0, r8
 80042ee:	f7fc ff35 	bl	800115c <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80042f2:	4e39      	ldr	r6, [pc, #228]	; (80043d8 <MX_GPIO_Init+0x160>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	2180      	movs	r1, #128	; 0x80
 80042f8:	4630      	mov	r0, r6
 80042fa:	f7fc ff2f 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80042fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004302:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <MX_GPIO_Init+0x164>)
 8004306:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2400      	movs	r4, #0
 800430a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800430c:	a905      	add	r1, sp, #20
 800430e:	4630      	mov	r0, r6
 8004310:	f7fc fe34 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004314:	2303      	movs	r3, #3
 8004316:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004318:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431c:	a905      	add	r1, sp, #20
 800431e:	4630      	mov	r0, r6
 8004320:	f7fc fe2c 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8004324:	2501      	movs	r5, #1
 8004326:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <MX_GPIO_Init+0x168>)
 800432a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800432c:	2702      	movs	r7, #2
 800432e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8004330:	a905      	add	r1, sp, #20
 8004332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004336:	f7fc fe21 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 800433a:	2312      	movs	r3, #18
 800433c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800433e:	2311      	movs	r3, #17
 8004340:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004342:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004344:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004346:	a905      	add	r1, sp, #20
 8004348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800434c:	f7fc fe16 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8004350:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004354:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004356:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004358:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800435c:	a905      	add	r1, sp, #20
 800435e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004362:	f7fc fe0b 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004366:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004368:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436c:	a905      	add	r1, sp, #20
 800436e:	4640      	mov	r0, r8
 8004370:	f7fc fe04 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8004374:	f246 4378 	movw	r3, #25720	; 0x6478
 8004378:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800437a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004380:	a905      	add	r1, sp, #20
 8004382:	4640      	mov	r0, r8
 8004384:	f7fc fdfa 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIGGER_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIGGER_Pin;
 8004388:	2340      	movs	r3, #64	; 0x40
 800438a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800438c:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <MX_GPIO_Init+0x16c>)
 800438e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004390:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8004392:	a905      	add	r1, sp, #20
 8004394:	4630      	mov	r0, r6
 8004396:	f7fc fdf1 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800439e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 80043a4:	a905      	add	r1, sp, #20
 80043a6:	4630      	mov	r0, r6
 80043a8:	f7fc fde8 	bl	8000f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80043ac:	4622      	mov	r2, r4
 80043ae:	4621      	mov	r1, r4
 80043b0:	2006      	movs	r0, #6
 80043b2:	f7fc fbd5 	bl	8000b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80043b6:	2006      	movs	r0, #6
 80043b8:	f7fc fc08 	bl	8000bcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 80043bc:	462a      	mov	r2, r5
 80043be:	4621      	mov	r1, r4
 80043c0:	2017      	movs	r0, #23
 80043c2:	f7fc fbcd 	bl	8000b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043c6:	2017      	movs	r0, #23
 80043c8:	f7fc fc00 	bl	8000bcc <HAL_NVIC_EnableIRQ>

}
 80043cc:	b00a      	add	sp, #40	; 0x28
 80043ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	48000800 	.word	0x48000800
 80043dc:	10110000 	.word	0x10110000
 80043e0:	10210000 	.word	0x10210000
 80043e4:	10310000 	.word	0x10310000
 80043e8:	48000400 	.word	0x48000400

080043ec <MX_DMA_Init>:
{
 80043ec:	b500      	push	{lr}
 80043ee:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <MX_DMA_Init+0x30>)
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	615a      	str	r2, [r3, #20]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8004404:	2201      	movs	r2, #1
 8004406:	2100      	movs	r1, #0
 8004408:	200c      	movs	r0, #12
 800440a:	f7fc fba9 	bl	8000b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800440e:	200c      	movs	r0, #12
 8004410:	f7fc fbdc 	bl	8000bcc <HAL_NVIC_EnableIRQ>
}
 8004414:	b003      	add	sp, #12
 8004416:	f85d fb04 	ldr.w	pc, [sp], #4
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000

08004420 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004420:	e7fe      	b.n	8004420 <_Error_Handler>
	...

08004424 <MX_USART1_UART_Init>:
{
 8004424:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8004426:	480c      	ldr	r0, [pc, #48]	; (8004458 <MX_USART1_UART_Init+0x34>)
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <MX_USART1_UART_Init+0x38>)
 800442a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800442c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004430:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004432:	2300      	movs	r3, #0
 8004434:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004436:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004438:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800443a:	220c      	movs	r2, #12
 800443c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800443e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004440:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004442:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004444:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004446:	f7fe fecf 	bl	80031e8 <HAL_UART_Init>
 800444a:	b900      	cbnz	r0, 800444e <MX_USART1_UART_Init+0x2a>
 800444c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800444e:	f240 1195 	movw	r1, #405	; 0x195
 8004452:	4803      	ldr	r0, [pc, #12]	; (8004460 <MX_USART1_UART_Init+0x3c>)
 8004454:	f7ff ffe4 	bl	8004420 <_Error_Handler>
 8004458:	20000410 	.word	0x20000410
 800445c:	40013800 	.word	0x40013800
 8004460:	08006130 	.word	0x08006130

08004464 <MX_ADC2_Init>:
{
 8004464:	b500      	push	{lr}
 8004466:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 8004468:	482d      	ldr	r0, [pc, #180]	; (8004520 <MX_ADC2_Init+0xbc>)
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <MX_ADC2_Init+0xc0>)
 800446c:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800446e:	2300      	movs	r3, #0
 8004470:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004472:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004474:	2201      	movs	r2, #1
 8004476:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004478:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800447a:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800447c:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800447e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004480:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8004482:	2104      	movs	r1, #4
 8004484:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004486:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004488:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800448a:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800448c:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800448e:	f7fb ffe9 	bl	8000464 <HAL_ADC_Init>
 8004492:	bb60      	cbnz	r0, 80044ee <MX_ADC2_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_8;
 8004494:	2308      	movs	r3, #8
 8004496:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004498:	2301      	movs	r3, #1
 800449a:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800449c:	2300      	movs	r3, #0
 800449e:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80044a0:	2207      	movs	r2, #7
 80044a2:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80044a4:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80044a6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044a8:	4669      	mov	r1, sp
 80044aa:	481d      	ldr	r0, [pc, #116]	; (8004520 <MX_ADC2_Init+0xbc>)
 80044ac:	f7fc f9b0 	bl	8000810 <HAL_ADC_ConfigChannel>
 80044b0:	bb08      	cbnz	r0, 80044f6 <MX_ADC2_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_9;
 80044b2:	2309      	movs	r3, #9
 80044b4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80044b6:	2302      	movs	r3, #2
 80044b8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044ba:	4669      	mov	r1, sp
 80044bc:	4818      	ldr	r0, [pc, #96]	; (8004520 <MX_ADC2_Init+0xbc>)
 80044be:	f7fc f9a7 	bl	8000810 <HAL_ADC_ConfigChannel>
 80044c2:	b9e8      	cbnz	r0, 8004500 <MX_ADC2_Init+0x9c>
  sConfig.Channel = ADC_CHANNEL_12;
 80044c4:	230c      	movs	r3, #12
 80044c6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80044c8:	2303      	movs	r3, #3
 80044ca:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044cc:	4669      	mov	r1, sp
 80044ce:	4814      	ldr	r0, [pc, #80]	; (8004520 <MX_ADC2_Init+0xbc>)
 80044d0:	f7fc f99e 	bl	8000810 <HAL_ADC_ConfigChannel>
 80044d4:	b9c8      	cbnz	r0, 800450a <MX_ADC2_Init+0xa6>
  sConfig.Channel = ADC_CHANNEL_15;
 80044d6:	230f      	movs	r3, #15
 80044d8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80044da:	2304      	movs	r3, #4
 80044dc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044de:	4669      	mov	r1, sp
 80044e0:	480f      	ldr	r0, [pc, #60]	; (8004520 <MX_ADC2_Init+0xbc>)
 80044e2:	f7fc f995 	bl	8000810 <HAL_ADC_ConfigChannel>
 80044e6:	b9a8      	cbnz	r0, 8004514 <MX_ADC2_Init+0xb0>
}
 80044e8:	b007      	add	sp, #28
 80044ea:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80044ee:	21fe      	movs	r1, #254	; 0xfe
 80044f0:	480d      	ldr	r0, [pc, #52]	; (8004528 <MX_ADC2_Init+0xc4>)
 80044f2:	f7ff ff95 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80044f6:	f240 110b 	movw	r1, #267	; 0x10b
 80044fa:	480b      	ldr	r0, [pc, #44]	; (8004528 <MX_ADC2_Init+0xc4>)
 80044fc:	f7ff ff90 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004500:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004504:	4808      	ldr	r0, [pc, #32]	; (8004528 <MX_ADC2_Init+0xc4>)
 8004506:	f7ff ff8b 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800450a:	f240 111d 	movw	r1, #285	; 0x11d
 800450e:	4806      	ldr	r0, [pc, #24]	; (8004528 <MX_ADC2_Init+0xc4>)
 8004510:	f7ff ff86 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004514:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004518:	4803      	ldr	r0, [pc, #12]	; (8004528 <MX_ADC2_Init+0xc4>)
 800451a:	f7ff ff81 	bl	8004420 <_Error_Handler>
 800451e:	bf00      	nop
 8004520:	20000328 	.word	0x20000328
 8004524:	50000100 	.word	0x50000100
 8004528:	08006130 	.word	0x08006130

0800452c <MX_RTC_Init>:
{
 800452c:	b500      	push	{lr}
 800452e:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 8004530:	482c      	ldr	r0, [pc, #176]	; (80045e4 <MX_RTC_Init+0xb8>)
 8004532:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <MX_RTC_Init+0xbc>)
 8004534:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8004536:	2100      	movs	r1, #0
 8004538:	f7fe fc38 	bl	8002dac <HAL_RTCEx_BKUPRead>
 800453c:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8004540:	4298      	cmp	r0, r3
 8004542:	d037      	beq.n	80045b4 <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004544:	4827      	ldr	r0, [pc, #156]	; (80045e4 <MX_RTC_Init+0xb8>)
 8004546:	2300      	movs	r3, #0
 8004548:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800454a:	227f      	movs	r2, #127	; 0x7f
 800454c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800454e:	22ff      	movs	r2, #255	; 0xff
 8004550:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004552:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004554:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004556:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004558:	f7fe fa0e 	bl	8002978 <HAL_RTC_Init>
 800455c:	bb68      	cbnz	r0, 80045ba <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 800455e:	2300      	movs	r3, #0
 8004560:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8004564:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8004568:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800456c:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800456e:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004570:	2201      	movs	r2, #1
 8004572:	a901      	add	r1, sp, #4
 8004574:	481b      	ldr	r0, [pc, #108]	; (80045e4 <MX_RTC_Init+0xb8>)
 8004576:	f7fe fa57 	bl	8002a28 <HAL_RTC_SetTime>
 800457a:	bb18      	cbnz	r0, 80045c4 <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800457c:	2201      	movs	r2, #1
 800457e:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8004582:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8004586:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800458a:	2300      	movs	r3, #0
 800458c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004590:	4669      	mov	r1, sp
 8004592:	4814      	ldr	r0, [pc, #80]	; (80045e4 <MX_RTC_Init+0xb8>)
 8004594:	f7fe fae8 	bl	8002b68 <HAL_RTC_SetDate>
 8004598:	b9c8      	cbnz	r0, 80045ce <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800459a:	2200      	movs	r2, #0
 800459c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045a0:	4810      	ldr	r0, [pc, #64]	; (80045e4 <MX_RTC_Init+0xb8>)
 80045a2:	f7fe fb6f 	bl	8002c84 <HAL_RTCEx_SetWakeUpTimer_IT>
 80045a6:	b9b8      	cbnz	r0, 80045d8 <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 80045a8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80045ac:	2100      	movs	r1, #0
 80045ae:	480d      	ldr	r0, [pc, #52]	; (80045e4 <MX_RTC_Init+0xb8>)
 80045b0:	f7fe fbf6 	bl	8002da0 <HAL_RTCEx_BKUPWrite>
}
 80045b4:	b007      	add	sp, #28
 80045b6:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80045ba:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80045be:	480b      	ldr	r0, [pc, #44]	; (80045ec <MX_RTC_Init+0xc0>)
 80045c0:	f7ff ff2e 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80045c4:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80045c8:	4808      	ldr	r0, [pc, #32]	; (80045ec <MX_RTC_Init+0xc0>)
 80045ca:	f7ff ff29 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80045ce:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80045d2:	4806      	ldr	r0, [pc, #24]	; (80045ec <MX_RTC_Init+0xc0>)
 80045d4:	f7ff ff24 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80045d8:	f240 117d 	movw	r1, #381	; 0x17d
 80045dc:	4803      	ldr	r0, [pc, #12]	; (80045ec <MX_RTC_Init+0xc0>)
 80045de:	f7ff ff1f 	bl	8004420 <_Error_Handler>
 80045e2:	bf00      	nop
 80045e4:	20000480 	.word	0x20000480
 80045e8:	40002800 	.word	0x40002800
 80045ec:	08006130 	.word	0x08006130

080045f0 <MX_I2C1_Init>:
{
 80045f0:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80045f2:	4816      	ldr	r0, [pc, #88]	; (800464c <MX_I2C1_Init+0x5c>)
 80045f4:	4b16      	ldr	r3, [pc, #88]	; (8004650 <MX_I2C1_Init+0x60>)
 80045f6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80045f8:	f240 230b 	movw	r3, #523	; 0x20b
 80045fc:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004602:	2201      	movs	r2, #1
 8004604:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004606:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004608:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800460a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800460c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800460e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004610:	f7fc ff1e 	bl	8001450 <HAL_I2C_Init>
 8004614:	b950      	cbnz	r0, 800462c <MX_I2C1_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004616:	2100      	movs	r1, #0
 8004618:	480c      	ldr	r0, [pc, #48]	; (800464c <MX_I2C1_Init+0x5c>)
 800461a:	f7fd fbf7 	bl	8001e0c <HAL_I2CEx_ConfigAnalogFilter>
 800461e:	b950      	cbnz	r0, 8004636 <MX_I2C1_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004620:	2100      	movs	r1, #0
 8004622:	480a      	ldr	r0, [pc, #40]	; (800464c <MX_I2C1_Init+0x5c>)
 8004624:	f7fd fc1c 	bl	8001e60 <HAL_I2CEx_ConfigDigitalFilter>
 8004628:	b950      	cbnz	r0, 8004640 <MX_I2C1_Init+0x50>
 800462a:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800462c:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8004630:	4808      	ldr	r0, [pc, #32]	; (8004654 <MX_I2C1_Init+0x64>)
 8004632:	f7ff fef5 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004636:	f240 1141 	movw	r1, #321	; 0x141
 800463a:	4806      	ldr	r0, [pc, #24]	; (8004654 <MX_I2C1_Init+0x64>)
 800463c:	f7ff fef0 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004640:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004644:	4803      	ldr	r0, [pc, #12]	; (8004654 <MX_I2C1_Init+0x64>)
 8004646:	f7ff feeb 	bl	8004420 <_Error_Handler>
 800464a:	bf00      	nop
 800464c:	2000037c 	.word	0x2000037c
 8004650:	40005400 	.word	0x40005400
 8004654:	08006130 	.word	0x08006130

08004658 <SystemClock_Config>:
{
 8004658:	b500      	push	{lr}
 800465a:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 800465c:	f7fd fc28 	bl	8001eb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004660:	4a29      	ldr	r2, [pc, #164]	; (8004708 <SystemClock_Config+0xb0>)
 8004662:	6a13      	ldr	r3, [r2, #32]
 8004664:	f023 0318 	bic.w	r3, r3, #24
 8004668:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800466a:	2306      	movs	r3, #6
 800466c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800466e:	2301      	movs	r3, #1
 8004670:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004672:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004674:	2310      	movs	r3, #16
 8004676:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004678:	2302      	movs	r3, #2
 800467a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800467c:	2300      	movs	r3, #0
 800467e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004680:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004684:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004686:	a80c      	add	r0, sp, #48	; 0x30
 8004688:	f7fd fc1a 	bl	8001ec0 <HAL_RCC_OscConfig>
 800468c:	bb80      	cbnz	r0, 80046f0 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800468e:	230f      	movs	r3, #15
 8004690:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004692:	2102      	movs	r1, #2
 8004694:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004696:	2300      	movs	r3, #0
 8004698:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800469a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800469e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046a0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046a2:	a807      	add	r0, sp, #28
 80046a4:	f7fd ff0e 	bl	80024c4 <HAL_RCC_ClockConfig>
 80046a8:	bb30      	cbnz	r0, 80046f8 <SystemClock_Config+0xa0>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80046aa:	4b18      	ldr	r3, [pc, #96]	; (800470c <SystemClock_Config+0xb4>)
 80046ac:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80046ae:	2300      	movs	r3, #0
 80046b0:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 80046b2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80046b6:	9204      	str	r2, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80046b8:	9303      	str	r3, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80046ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046be:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046c0:	4668      	mov	r0, sp
 80046c2:	f7fd fffd 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 80046c6:	b9d8      	cbnz	r0, 8004700 <SystemClock_Config+0xa8>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80046c8:	f7fd ffc4 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 80046cc:	4b10      	ldr	r3, [pc, #64]	; (8004710 <SystemClock_Config+0xb8>)
 80046ce:	fba3 3000 	umull	r3, r0, r3, r0
 80046d2:	0980      	lsrs	r0, r0, #6
 80046d4:	f7fc fa86 	bl	8000be4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80046d8:	2004      	movs	r0, #4
 80046da:	f7fc fa9d 	bl	8000c18 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 80046de:	2202      	movs	r2, #2
 80046e0:	2100      	movs	r1, #0
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	f7fc fa3b 	bl	8000b60 <HAL_NVIC_SetPriority>
}
 80046ea:	b017      	add	sp, #92	; 0x5c
 80046ec:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80046f0:	21be      	movs	r1, #190	; 0xbe
 80046f2:	4808      	ldr	r0, [pc, #32]	; (8004714 <SystemClock_Config+0xbc>)
 80046f4:	f7ff fe94 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80046f8:	21cc      	movs	r1, #204	; 0xcc
 80046fa:	4806      	ldr	r0, [pc, #24]	; (8004714 <SystemClock_Config+0xbc>)
 80046fc:	f7ff fe90 	bl	8004420 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004700:	21d7      	movs	r1, #215	; 0xd7
 8004702:	4804      	ldr	r0, [pc, #16]	; (8004714 <SystemClock_Config+0xbc>)
 8004704:	f7ff fe8c 	bl	8004420 <_Error_Handler>
 8004708:	40021000 	.word	0x40021000
 800470c:	000100a1 	.word	0x000100a1
 8004710:	10624dd3 	.word	0x10624dd3
 8004714:	08006130 	.word	0x08006130

08004718 <main>:
{
 8004718:	b510      	push	{r4, lr}
  HAL_Init();
 800471a:	f7fb fdc7 	bl	80002ac <HAL_Init>
  SystemClock_Config();
 800471e:	f7ff ff9b 	bl	8004658 <SystemClock_Config>
  MX_GPIO_Init();
 8004722:	f7ff fda9 	bl	8004278 <MX_GPIO_Init>
  MX_DMA_Init();
 8004726:	f7ff fe61 	bl	80043ec <MX_DMA_Init>
  MX_USART1_UART_Init();
 800472a:	f7ff fe7b 	bl	8004424 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 800472e:	f7ff fe99 	bl	8004464 <MX_ADC2_Init>
  MX_RTC_Init();
 8004732:	f7ff fefb 	bl	800452c <MX_RTC_Init>
  MX_I2C1_Init();
 8004736:	f7ff ff5b 	bl	80045f0 <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800473a:	4c15      	ldr	r4, [pc, #84]	; (8004790 <main+0x78>)
 800473c:	2100      	movs	r1, #0
 800473e:	4620      	mov	r0, r4
 8004740:	f7fc f820 	bl	8000784 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8004744:	f7ff fbf2 	bl	8003f2c <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004748:	2201      	movs	r2, #1
 800474a:	4912      	ldr	r1, [pc, #72]	; (8004794 <main+0x7c>)
 800474c:	4812      	ldr	r0, [pc, #72]	; (8004798 <main+0x80>)
 800474e:	f7fe fb57 	bl	8002e00 <HAL_UART_Receive_IT>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 4);
 8004752:	2204      	movs	r2, #4
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <main+0x84>)
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	4620      	mov	r0, r4
 800475a:	f7fb ff8d 	bl	8000678 <HAL_ADC_Start_DMA>
 	 HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 800475e:	4c10      	ldr	r4, [pc, #64]	; (80047a0 <main+0x88>)
 8004760:	2200      	movs	r2, #0
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <main+0x8c>)
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	4620      	mov	r0, r4
 8004768:	f7fe f86c 	bl	8002844 <HAL_RTC_GetTime>
 	 HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 800476c:	2200      	movs	r2, #0
 800476e:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <main+0x90>)
 8004770:	6819      	ldr	r1, [r3, #0]
 8004772:	4620      	mov	r0, r4
 8004774:	f7fe f89c 	bl	80028b0 <HAL_RTC_GetDate>
  int i2c_state = init_iqs263();
 8004778:	f7ff fa14 	bl	8003ba4 <init_iqs263>
 800477c:	4604      	mov	r4, r0
  logPosition();
 800477e:	f7ff f8b7 	bl	80038f0 <logPosition>
  while (i2c_state)
 8004782:	e001      	b.n	8004788 <main+0x70>
	  mainLoop();
 8004784:	f000 fe5a 	bl	800543c <mainLoop>
  while (i2c_state)
 8004788:	2c00      	cmp	r4, #0
 800478a:	d1fb      	bne.n	8004784 <main+0x6c>
}
 800478c:	2000      	movs	r0, #0
 800478e:	bd10      	pop	{r4, pc}
 8004790:	20000328 	.word	0x20000328
 8004794:	2000057c 	.word	0x2000057c
 8004798:	20000410 	.word	0x20000410
 800479c:	20000244 	.word	0x20000244
 80047a0:	20000480 	.word	0x20000480
 80047a4:	200002c8 	.word	0x200002c8
 80047a8:	20000260 	.word	0x20000260

080047ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ac:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_MspInit+0x78>)
{
 80047ae:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	619a      	str	r2, [r3, #24]
 80047b8:	699b      	ldr	r3, [r3, #24]
{
 80047ba:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80047c2:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80047c6:	f7fc f9b9 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 80047ca:	2202      	movs	r2, #2
 80047cc:	2100      	movs	r1, #0
 80047ce:	f06f 000b 	mvn.w	r0, #11
 80047d2:	f7fc f9c5 	bl	8000b60 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 80047d6:	2202      	movs	r2, #2
 80047d8:	2100      	movs	r1, #0
 80047da:	f06f 000a 	mvn.w	r0, #10
 80047de:	f7fc f9bf 	bl	8000b60 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 80047e2:	2202      	movs	r2, #2
 80047e4:	2100      	movs	r1, #0
 80047e6:	f06f 0009 	mvn.w	r0, #9
 80047ea:	f7fc f9b9 	bl	8000b60 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 80047ee:	2202      	movs	r2, #2
 80047f0:	2100      	movs	r1, #0
 80047f2:	f06f 0004 	mvn.w	r0, #4
 80047f6:	f7fc f9b3 	bl	8000b60 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 80047fa:	2202      	movs	r2, #2
 80047fc:	2100      	movs	r1, #0
 80047fe:	f06f 0003 	mvn.w	r0, #3
 8004802:	f7fc f9ad 	bl	8000b60 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 8004806:	2202      	movs	r2, #2
 8004808:	2100      	movs	r1, #0
 800480a:	f06f 0001 	mvn.w	r0, #1
 800480e:	f7fc f9a7 	bl	8000b60 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8004812:	2202      	movs	r2, #2
 8004814:	2100      	movs	r1, #0
 8004816:	f04f 30ff 	mov.w	r0, #4294967295
 800481a:	f7fc f9a1 	bl	8000b60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800481e:	b003      	add	sp, #12
 8004820:	f85d fb04 	ldr.w	pc, [sp], #4
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8004828:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <HAL_ADC_MspInit+0x88>)
 800482a:	6802      	ldr	r2, [r0, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d000      	beq.n	8004832 <HAL_ADC_MspInit+0xa>
 8004830:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_ADC_MspInit+0x8c>)
{
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004836:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8004838:	4d1f      	ldr	r5, [pc, #124]	; (80048b8 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800483a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800483e:	615a      	str	r2, [r3, #20]
 8004840:	695b      	ldr	r3, [r3, #20]
{
 8004842:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2600      	movs	r6, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 800484a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800484c:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 800484e:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004850:	a901      	add	r1, sp, #4
 8004852:	4604      	mov	r4, r0
 8004854:	4819      	ldr	r0, [pc, #100]	; (80048bc <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004856:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 8004858:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800485a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485c:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800485e:	f7fc fb8d 	bl	8000f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 8004862:	f248 0304 	movw	r3, #32772	; 0x8004
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004866:	a901      	add	r1, sp, #4
 8004868:	4815      	ldr	r0, [pc, #84]	; (80048c0 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800486a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 800486c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	9603      	str	r6, [sp, #12]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004870:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004872:	f7fc fb83 	bl	8000f7c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004876:	f8df e050 	ldr.w	lr, [pc, #80]	; 80048c8 <HAL_ADC_MspInit+0xa0>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800487a:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800487c:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004880:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004884:	2320      	movs	r3, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004886:	4628      	mov	r0, r5
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004888:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800488a:	61ee      	str	r6, [r5, #28]
    hdma_adc2.Instance = DMA1_Channel2;
 800488c:	f8c5 e000 	str.w	lr, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004890:	60ef      	str	r7, [r5, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004892:	6129      	str	r1, [r5, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004894:	616a      	str	r2, [r5, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004896:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004898:	f7fc f9d0 	bl	8000c3c <HAL_DMA_Init>
 800489c:	b918      	cbnz	r0, 80048a6 <HAL_ADC_MspInit+0x7e>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800489e:	63e5      	str	r5, [r4, #60]	; 0x3c
 80048a0:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80048a2:	b007      	add	sp, #28
 80048a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 80048a6:	217a      	movs	r1, #122	; 0x7a
 80048a8:	4806      	ldr	r0, [pc, #24]	; (80048c4 <HAL_ADC_MspInit+0x9c>)
 80048aa:	f7ff fdb9 	bl	8004420 <_Error_Handler>
 80048ae:	e7f6      	b.n	800489e <HAL_ADC_MspInit+0x76>
 80048b0:	50000100 	.word	0x50000100
 80048b4:	40021000 	.word	0x40021000
 80048b8:	200004b8 	.word	0x200004b8
 80048bc:	48000800 	.word	0x48000800
 80048c0:	48000400 	.word	0x48000400
 80048c4:	08006140 	.word	0x08006140
 80048c8:	4002001c 	.word	0x4002001c

080048cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80048cc:	6802      	ldr	r2, [r0, #0]
 80048ce:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_I2C_MspInit+0x68>)
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d000      	beq.n	80048d6 <HAL_I2C_MspInit+0xa>
 80048d4:	4770      	bx	lr
{
 80048d6:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048d8:	2304      	movs	r3, #4
{
 80048da:	b086      	sub	sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048de:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048e2:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 80048e4:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048e8:	2512      	movs	r5, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ea:	4813      	ldr	r0, [pc, #76]	; (8004938 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048ec:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 80048f0:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048f2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f6:	f7fc fb41 	bl	8000f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048fa:	4b10      	ldr	r3, [pc, #64]	; (800493c <HAL_I2C_MspInit+0x70>)
 80048fc:	69da      	ldr	r2, [r3, #28]
 80048fe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004902:	61da      	str	r2, [r3, #28]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800490a:	4622      	mov	r2, r4
 800490c:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 800490e:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004910:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004912:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004914:	f7fc f924 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004918:	201f      	movs	r0, #31
 800491a:	f7fc f957 	bl	8000bcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800491e:	4622      	mov	r2, r4
 8004920:	4621      	mov	r1, r4
 8004922:	2020      	movs	r0, #32
 8004924:	f7fc f91c 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004928:	2020      	movs	r0, #32
 800492a:	f7fc f94f 	bl	8000bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800492e:	b006      	add	sp, #24
 8004930:	bd70      	pop	{r4, r5, r6, pc}
 8004932:	bf00      	nop
 8004934:	40005400 	.word	0x40005400
 8004938:	48000400 	.word	0x48000400
 800493c:	40021000 	.word	0x40021000

08004940 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004940:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 8004942:	6802      	ldr	r2, [r0, #0]
 8004944:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_RTC_MspInit+0x38>)
 8004946:	429a      	cmp	r2, r3
 8004948:	d000      	beq.n	800494c <HAL_RTC_MspInit+0xc>
 800494a:	bd08      	pop	{r3, pc}
 800494c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004950:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RTC_MspInit+0x3c>)
 8004956:	fab2 f282 	clz	r2, r2
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	2101      	movs	r1, #1
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004960:	2200      	movs	r2, #0
    __HAL_RCC_RTC_ENABLE();
 8004962:	6019      	str	r1, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004964:	2003      	movs	r0, #3
 8004966:	4611      	mov	r1, r2
 8004968:	f7fc f8fa 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800496c:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800496e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004972:	f7fc b92b 	b.w	8000bcc <HAL_NVIC_EnableIRQ>
 8004976:	bf00      	nop
 8004978:	40002800 	.word	0x40002800
 800497c:	10908100 	.word	0x10908100

08004980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8004980:	6802      	ldr	r2, [r0, #0]
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <HAL_UART_MspInit+0x54>)
 8004984:	429a      	cmp	r2, r3
 8004986:	d000      	beq.n	800498a <HAL_UART_MspInit+0xa>
 8004988:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800498a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 800498e:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004990:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004992:	4811      	ldr	r0, [pc, #68]	; (80049d8 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004998:	619a      	str	r2, [r3, #24]
 800499a:	699b      	ldr	r3, [r3, #24]
{
 800499c:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 800499e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a2:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049a6:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049a8:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049aa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80049ac:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ae:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049b2:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 80049b4:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80049b6:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b8:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ba:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049bc:	f7fc fade 	bl	8000f7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80049c0:	4622      	mov	r2, r4
 80049c2:	4621      	mov	r1, r4
 80049c4:	2025      	movs	r0, #37	; 0x25
 80049c6:	f7fc f8cb 	bl	8000b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049ca:	2025      	movs	r0, #37	; 0x25
 80049cc:	f7fc f8fe 	bl	8000bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049d0:	b007      	add	sp, #28
 80049d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d4:	40013800 	.word	0x40013800
 80049d8:	48000800 	.word	0x48000800

080049dc <SVC_Handler>:
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop

080049e0 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop

080049e4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80049e4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e6:	f7fb fc73 	bl	80002d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80049ea:	f7fc f923 	bl	8000c34 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
  RTC_timer_flag = 1;
  flash_flag = 1;
  adc_flag = 1;
  if(pump_flag == 1){
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <SysTick_Handler+0x30>)
  systick_flag = 1;
 80049f0:	4d09      	ldr	r5, [pc, #36]	; (8004a18 <SysTick_Handler+0x34>)
  if(pump_flag == 1){
 80049f2:	781a      	ldrb	r2, [r3, #0]
  RTC_timer_flag = 1;
 80049f4:	4c09      	ldr	r4, [pc, #36]	; (8004a1c <SysTick_Handler+0x38>)
  flash_flag = 1;
 80049f6:	480a      	ldr	r0, [pc, #40]	; (8004a20 <SysTick_Handler+0x3c>)
  adc_flag = 1;
 80049f8:	490a      	ldr	r1, [pc, #40]	; (8004a24 <SysTick_Handler+0x40>)
  systick_flag = 1;
 80049fa:	2301      	movs	r3, #1
  if(pump_flag == 1){
 80049fc:	429a      	cmp	r2, r3
  systick_flag = 1;
 80049fe:	702b      	strb	r3, [r5, #0]
  RTC_timer_flag = 1;
 8004a00:	7023      	strb	r3, [r4, #0]
  flash_flag = 1;
 8004a02:	7003      	strb	r3, [r0, #0]
  adc_flag = 1;
 8004a04:	700b      	strb	r3, [r1, #0]
  if(pump_flag == 1){
 8004a06:	d103      	bne.n	8004a10 <SysTick_Handler+0x2c>
	  valve_timer += 1;
 8004a08:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <SysTick_Handler+0x44>)
 8004a0a:	7813      	ldrb	r3, [r2, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	7013      	strb	r3, [r2, #0]
 8004a10:	bd38      	pop	{r3, r4, r5, pc}
 8004a12:	bf00      	nop
 8004a14:	200002a8 	.word	0x200002a8
 8004a18:	200002bd 	.word	0x200002bd
 8004a1c:	2000024c 	.word	0x2000024c
 8004a20:	20000270 	.word	0x20000270
 8004a24:	2000024d 	.word	0x2000024d
 8004a28:	200002e4 	.word	0x200002e4

08004a2c <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004a2c:	4801      	ldr	r0, [pc, #4]	; (8004a34 <RTC_WKUP_IRQHandler+0x8>)
 8004a2e:	f7fe b99f 	b.w	8002d70 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8004a32:	bf00      	nop
 8004a34:	20000480 	.word	0x20000480

08004a38 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8004a38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f7fc fb94 	bl	8001168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  touch_flag = 1;
 8004a40:	4b01      	ldr	r3, [pc, #4]	; (8004a48 <EXTI0_IRQHandler+0x10>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	bd08      	pop	{r3, pc}
 8004a48:	200002d0 	.word	0x200002d0

08004a4c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <DMA1_Channel2_IRQHandler+0x8>)
 8004a4e:	f7fc b993 	b.w	8000d78 <HAL_DMA_IRQHandler>
 8004a52:	bf00      	nop
 8004a54:	200004b8 	.word	0x200004b8

08004a58 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8004a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004a5a:	2040      	movs	r0, #64	; 0x40
 8004a5c:	f7fc fb84 	bl	8001168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  pump_flag = 1;
 8004a60:	4b01      	ldr	r3, [pc, #4]	; (8004a68 <EXTI9_5_IRQHandler+0x10>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	bd08      	pop	{r3, pc}
 8004a68:	200002a8 	.word	0x200002a8

08004a6c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <I2C1_EV_IRQHandler+0x8>)
 8004a6e:	f7fc bf0d 	b.w	800188c <HAL_I2C_EV_IRQHandler>
 8004a72:	bf00      	nop
 8004a74:	2000037c 	.word	0x2000037c

08004a78 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <I2C1_ER_IRQHandler+0x8>)
 8004a7a:	f7fd b969 	b.w	8001d50 <HAL_I2C_ER_IRQHandler>
 8004a7e:	bf00      	nop
 8004a80:	2000037c 	.word	0x2000037c

08004a84 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <USART1_IRQHandler+0x8>)
 8004a86:	f7fe bc55 	b.w	8003334 <HAL_UART_IRQHandler>
 8004a8a:	bf00      	nop
 8004a8c:	20000410 	.word	0x20000410

08004a90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a90:	4917      	ldr	r1, [pc, #92]	; (8004af0 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004a92:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004a96:	4819      	ldr	r0, [pc, #100]	; (8004afc <SystemInit+0x6c>)
{
 8004a98:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a9a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 8004a9e:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8004aa2:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8004aa6:	681c      	ldr	r4, [r3, #0]
 8004aa8:	f044 0401 	orr.w	r4, r4, #1
 8004aac:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8004aae:	685c      	ldr	r4, [r3, #4]
 8004ab0:	4022      	ands	r2, r4
 8004ab2:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004aba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004abe:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ac6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004ace:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	f022 020f 	bic.w	r2, r2, #15
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004ada:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004adc:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004ae2:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8004ae4:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ae6:	608a      	str	r2, [r1, #8]
#endif
}
 8004ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	e000ed00 	.word	0xe000ed00
 8004af4:	40021000 	.word	0x40021000
 8004af8:	f87fc00c 	.word	0xf87fc00c
 8004afc:	ff00fccc 	.word	0xff00fccc

08004b00 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
	uart_command[uart_counter] = rx_buffer;
 8004b04:	4ca4      	ldr	r4, [pc, #656]	; (8004d98 <uart_comms+0x298>)
 8004b06:	4da5      	ldr	r5, [pc, #660]	; (8004d9c <uart_comms+0x29c>)
 8004b08:	49a5      	ldr	r1, [pc, #660]	; (8004da0 <uart_comms+0x2a0>)
 8004b0a:	7823      	ldrb	r3, [r4, #0]
 8004b0c:	682a      	ldr	r2, [r5, #0]
	rx_flag = 0;
 8004b0e:	4ea5      	ldr	r6, [pc, #660]	; (8004da4 <uart_comms+0x2a4>)
	uart_command[uart_counter] = rx_buffer;
 8004b10:	7808      	ldrb	r0, [r1, #0]
	rx_flag = 0;
 8004b12:	2100      	movs	r1, #0
 8004b14:	7031      	strb	r1, [r6, #0]
	uart_command[uart_counter] = rx_buffer;
 8004b16:	54d0      	strb	r0, [r2, r3]
	if(uart_command[0] == '$'){
 8004b18:	682a      	ldr	r2, [r5, #0]
 8004b1a:	7813      	ldrb	r3, [r2, #0]
 8004b1c:	2b24      	cmp	r3, #36	; 0x24
void uart_comms(){
 8004b1e:	b083      	sub	sp, #12

		uart_counter += 1;
 8004b20:	7823      	ldrb	r3, [r4, #0]
	if(uart_command[0] == '$'){
 8004b22:	d006      	beq.n	8004b32 <uart_comms+0x32>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 8004b24:	2b3b      	cmp	r3, #59	; 0x3b
		uart_counter = 0;
 8004b26:	bf84      	itt	hi
 8004b28:	2300      	movhi	r3, #0
 8004b2a:	7023      	strbhi	r3, [r4, #0]
	}
}
 8004b2c:	b003      	add	sp, #12
 8004b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uart_counter += 1;
 8004b32:	3301      	adds	r3, #1
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	7023      	strb	r3, [r4, #0]
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8004b38:	7810      	ldrb	r0, [r2, #0]
 8004b3a:	2824      	cmp	r0, #36	; 0x24
 8004b3c:	d1f2      	bne.n	8004b24 <uart_comms+0x24>
 8004b3e:	441a      	add	r2, r3
 8004b40:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8004b44:	280a      	cmp	r0, #10
 8004b46:	d1ed      	bne.n	8004b24 <uart_comms+0x24>
 8004b48:	f812 2c02 	ldrb.w	r2, [r2, #-2]
 8004b4c:	2a0d      	cmp	r2, #13
 8004b4e:	d1e9      	bne.n	8004b24 <uart_comms+0x24>
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d9eb      	bls.n	8004b2c <uart_comms+0x2c>
		memset(return_value,0x00, 50);
 8004b54:	4e94      	ldr	r6, [pc, #592]	; (8004da8 <uart_comms+0x2a8>)
		uart_command_copy = uart_command;
 8004b56:	4f95      	ldr	r7, [pc, #596]	; (8004dac <uart_comms+0x2ac>)
		memset(return_value,0x00, 50);
 8004b58:	6830      	ldr	r0, [r6, #0]
 8004b5a:	2232      	movs	r2, #50	; 0x32
 8004b5c:	f000 fd55 	bl	800560a <memset>
		uart_command_copy = uart_command;
 8004b60:	682a      	ldr	r2, [r5, #0]
 8004b62:	603a      	str	r2, [r7, #0]
		switch(uart_command[1]){
 8004b64:	7853      	ldrb	r3, [r2, #1]
 8004b66:	3b41      	subs	r3, #65	; 0x41
 8004b68:	2b0b      	cmp	r3, #11
 8004b6a:	f200 810d 	bhi.w	8004d88 <uart_comms+0x288>
 8004b6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b72:	02f5      	.short	0x02f5
 8004b74:	02b50354 	.word	0x02b50354
 8004b78:	0312032d 	.word	0x0312032d
 8004b7c:	0276028e 	.word	0x0276028e
 8004b80:	013d01a9 	.word	0x013d01a9
 8004b84:	0048020c 	.word	0x0048020c
 8004b88:	000c      	.short	0x000c
			memset(log_receiced_num,0x00,2);
 8004b8a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8004de4 <uart_comms+0x2e4>
 8004b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b92:	2700      	movs	r7, #0
 8004b94:	801f      	strh	r7, [r3, #0]
			memcpy(log_receiced_num,(uart_command+3), strlen((char*)uart_command)-5);
 8004b96:	682e      	ldr	r6, [r5, #0]
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f7fb fb19 	bl	80001d0 <strlen>
 8004b9e:	1cf1      	adds	r1, r6, #3
 8004ba0:	1f42      	subs	r2, r0, #5
 8004ba2:	f8d8 0000 	ldr.w	r0, [r8]
 8004ba6:	f000 fd25 	bl	80055f4 <memcpy>
			*log_receiced_num = strtol((char*)log_receiced_num,NULL,10);
 8004baa:	f8d8 6000 	ldr.w	r6, [r8]
 8004bae:	220a      	movs	r2, #10
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f000 fee6 	bl	8005984 <strtol>
 8004bb8:	7030      	strb	r0, [r6, #0]
			if(*log_receiced_num >= log_counter || log_empty){
 8004bba:	f8d8 3000 	ldr.w	r3, [r8]
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	; (8004db0 <uart_comms+0x2b0>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	7812      	ldrb	r2, [r2, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	f240 834a 	bls.w	800525e <uart_comms+0x75e>
 8004bca:	4a7a      	ldr	r2, [pc, #488]	; (8004db4 <uart_comms+0x2b4>)
 8004bcc:	7816      	ldrb	r6, [r2, #0]
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	f040 8345 	bne.w	800525e <uart_comms+0x75e>
 8004bd4:	f8df a210 	ldr.w	sl, [pc, #528]	; 8004de8 <uart_comms+0x2e8>
					HAL_UART_Transmit_IT(&huart1,(uint8_t*)(flash_mem_start+64*(*log_receiced_num)), strlen((char*)(flash_mem_start+64*(*log_receiced_num))));
 8004bd8:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8004de0 <uart_comms+0x2e0>
 8004bdc:	f8da 7000 	ldr.w	r7, [sl]
 8004be0:	eb07 1783 	add.w	r7, r7, r3, lsl #6
 8004be4:	4638      	mov	r0, r7
 8004be6:	f7fb faf3 	bl	80001d0 <strlen>
 8004bea:	4639      	mov	r1, r7
 8004bec:	b282      	uxth	r2, r0
 8004bee:	4648      	mov	r0, r9
 8004bf0:	f7fe f8e2 	bl	8002db8 <HAL_UART_Transmit_IT>
				for(int i = 0; i<=*log_receiced_num;i++){
 8004bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	42b3      	cmp	r3, r6
 8004bfe:	daed      	bge.n	8004bdc <uart_comms+0xdc>
 8004c00:	e0c2      	b.n	8004d88 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8004c02:	6833      	ldr	r3, [r6, #0]
 8004c04:	8812      	ldrh	r2, [r2, #0]
			memcpy(return_value+2,comma,1 );
 8004c06:	4f6c      	ldr	r7, [pc, #432]	; (8004db8 <uart_comms+0x2b8>)
			memcpy(return_value, uart_command, 2);
 8004c08:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 8004c0a:	6832      	ldr	r2, [r6, #0]
 8004c0c:	f897 9000 	ldrb.w	r9, [r7]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8004c10:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <uart_comms+0x2bc>)
			memcpy(return_value+2,comma,1 );
 8004c12:	f882 9002 	strb.w	r9, [r2, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8004c16:	f8d3 8000 	ldr.w	r8, [r3]
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	f7fb fad8 	bl	80001d0 <strlen>
 8004c20:	6833      	ldr	r3, [r6, #0]
 8004c22:	4602      	mov	r2, r0
 8004c24:	4641      	mov	r1, r8
 8004c26:	1cd8      	adds	r0, r3, #3
 8004c28:	f000 fce4 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004c2c:	f8d6 8000 	ldr.w	r8, [r6]
 8004c30:	4640      	mov	r0, r8
 8004c32:	f7fb facd 	bl	80001d0 <strlen>
 8004c36:	f808 9000 	strb.w	r9, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8004c3a:	f8d6 8000 	ldr.w	r8, [r6]
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f7fb fac6 	bl	80001d0 <strlen>
 8004c44:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <uart_comms+0x2c0>)
 8004c46:	f8d3 9000 	ldr.w	r9, [r3]
 8004c4a:	4682      	mov	sl, r0
 8004c4c:	4648      	mov	r0, r9
 8004c4e:	f7fb fabf 	bl	80001d0 <strlen>
 8004c52:	4649      	mov	r1, r9
 8004c54:	4602      	mov	r2, r0
 8004c56:	eb08 000a 	add.w	r0, r8, sl
 8004c5a:	f000 fccb 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004c5e:	f8d6 8000 	ldr.w	r8, [r6]
 8004c62:	4640      	mov	r0, r8
 8004c64:	f7fb fab4 	bl	80001d0 <strlen>
 8004c68:	783b      	ldrb	r3, [r7, #0]
 8004c6a:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 8004c6e:	f8d6 8000 	ldr.w	r8, [r6]
 8004c72:	4640      	mov	r0, r8
 8004c74:	f7fb faac 	bl	80001d0 <strlen>
 8004c78:	4b52      	ldr	r3, [pc, #328]	; (8004dc4 <uart_comms+0x2c4>)
 8004c7a:	f8d3 9000 	ldr.w	r9, [r3]
 8004c7e:	4682      	mov	sl, r0
 8004c80:	4648      	mov	r0, r9
 8004c82:	f7fb faa5 	bl	80001d0 <strlen>
 8004c86:	4649      	mov	r1, r9
 8004c88:	4602      	mov	r2, r0
 8004c8a:	eb08 000a 	add.w	r0, r8, sl
 8004c8e:	f000 fcb1 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004c92:	f8d6 8000 	ldr.w	r8, [r6]
 8004c96:	4640      	mov	r0, r8
 8004c98:	f7fb fa9a 	bl	80001d0 <strlen>
 8004c9c:	783b      	ldrb	r3, [r7, #0]
 8004c9e:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 8004ca2:	f8d6 8000 	ldr.w	r8, [r6]
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	f7fb fa92 	bl	80001d0 <strlen>
 8004cac:	4b46      	ldr	r3, [pc, #280]	; (8004dc8 <uart_comms+0x2c8>)
 8004cae:	f8d3 9000 	ldr.w	r9, [r3]
 8004cb2:	4682      	mov	sl, r0
 8004cb4:	4648      	mov	r0, r9
 8004cb6:	f7fb fa8b 	bl	80001d0 <strlen>
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	eb08 000a 	add.w	r0, r8, sl
 8004cc2:	f000 fc97 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004cc6:	f8d6 8000 	ldr.w	r8, [r6]
 8004cca:	4640      	mov	r0, r8
 8004ccc:	f7fb fa80 	bl	80001d0 <strlen>
 8004cd0:	783b      	ldrb	r3, [r7, #0]
 8004cd2:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8004cd6:	f8d6 8000 	ldr.w	r8, [r6]
 8004cda:	4640      	mov	r0, r8
 8004cdc:	f7fb fa78 	bl	80001d0 <strlen>
 8004ce0:	4b3a      	ldr	r3, [pc, #232]	; (8004dcc <uart_comms+0x2cc>)
 8004ce2:	f8d3 9000 	ldr.w	r9, [r3]
 8004ce6:	4682      	mov	sl, r0
 8004ce8:	4648      	mov	r0, r9
 8004cea:	f7fb fa71 	bl	80001d0 <strlen>
 8004cee:	4649      	mov	r1, r9
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	eb08 000a 	add.w	r0, r8, sl
 8004cf6:	f000 fc7d 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004cfa:	f8d6 8000 	ldr.w	r8, [r6]
 8004cfe:	4640      	mov	r0, r8
 8004d00:	f7fb fa66 	bl	80001d0 <strlen>
 8004d04:	783b      	ldrb	r3, [r7, #0]
 8004d06:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8004d0a:	f8d6 8000 	ldr.w	r8, [r6]
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f7fb fa5e 	bl	80001d0 <strlen>
 8004d14:	4b2e      	ldr	r3, [pc, #184]	; (8004dd0 <uart_comms+0x2d0>)
 8004d16:	f8d3 9000 	ldr.w	r9, [r3]
 8004d1a:	4682      	mov	sl, r0
 8004d1c:	4648      	mov	r0, r9
 8004d1e:	f7fb fa57 	bl	80001d0 <strlen>
 8004d22:	4649      	mov	r1, r9
 8004d24:	4602      	mov	r2, r0
 8004d26:	eb08 000a 	add.w	r0, r8, sl
 8004d2a:	f000 fc63 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004d2e:	f8d6 8000 	ldr.w	r8, [r6]
 8004d32:	4640      	mov	r0, r8
 8004d34:	f7fb fa4c 	bl	80001d0 <strlen>
 8004d38:	783b      	ldrb	r3, [r7, #0]
 8004d3a:	f808 3000 	strb.w	r3, [r8, r0]
			if(valve_state == valve_OPEN){
 8004d3e:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <uart_comms+0x2d4>)
 8004d40:	4b25      	ldr	r3, [pc, #148]	; (8004dd8 <uart_comms+0x2d8>)
 8004d42:	6817      	ldr	r7, [r2, #0]
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8004d44:	f8d6 8000 	ldr.w	r8, [r6]
			if(valve_state == valve_OPEN){
 8004d48:	429f      	cmp	r7, r3
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8004d4a:	4640      	mov	r0, r8
			if(valve_state == valve_OPEN){
 8004d4c:	f000 8330 	beq.w	80053b0 <uart_comms+0x8b0>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 8004d50:	f7fb fa3e 	bl	80001d0 <strlen>
 8004d54:	4681      	mov	r9, r0
 8004d56:	4638      	mov	r0, r7
 8004d58:	f7fb fa3a 	bl	80001d0 <strlen>
 8004d5c:	4639      	mov	r1, r7
 8004d5e:	4602      	mov	r2, r0
 8004d60:	eb08 0009 	add.w	r0, r8, r9
 8004d64:	f000 fc46 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8004d68:	6837      	ldr	r7, [r6, #0]
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f7fb fa30 	bl	80001d0 <strlen>
 8004d70:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <uart_comms+0x2dc>)
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	523b      	strh	r3, [r7, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8004d76:	6836      	ldr	r6, [r6, #0]
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f7fb fa29 	bl	80001d0 <strlen>
 8004d7e:	4631      	mov	r1, r6
 8004d80:	b282      	uxth	r2, r0
 8004d82:	4817      	ldr	r0, [pc, #92]	; (8004de0 <uart_comms+0x2e0>)
 8004d84:	f7fe f818 	bl	8002db8 <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 8004d88:	6828      	ldr	r0, [r5, #0]
 8004d8a:	223c      	movs	r2, #60	; 0x3c
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	f000 fc3c 	bl	800560a <memset>
		uart_counter = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	7023      	strb	r3, [r4, #0]
 8004d96:	e6c9      	b.n	8004b2c <uart_comms+0x2c>
 8004d98:	200002dc 	.word	0x200002dc
 8004d9c:	200002d4 	.word	0x200002d4
 8004da0:	2000057c 	.word	0x2000057c
 8004da4:	200002b1 	.word	0x200002b1
 8004da8:	200002ac 	.word	0x200002ac
 8004dac:	200002d8 	.word	0x200002d8
 8004db0:	20000298 	.word	0x20000298
 8004db4:	2000001a 	.word	0x2000001a
 8004db8:	20000004 	.word	0x20000004
 8004dbc:	2000025c 	.word	0x2000025c
 8004dc0:	200002ec 	.word	0x200002ec
 8004dc4:	20000250 	.word	0x20000250
 8004dc8:	20000278 	.word	0x20000278
 8004dcc:	200002cc 	.word	0x200002cc
 8004dd0:	2000028c 	.word	0x2000028c
 8004dd4:	200002e0 	.word	0x200002e0
 8004dd8:	20000050 	.word	0x20000050
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	20000410 	.word	0x20000410
 8004de4:	2000029c 	.word	0x2000029c
 8004de8:	20000010 	.word	0x20000010
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004dec:	f8df 8368 	ldr.w	r8, [pc, #872]	; 8005158 <uart_comms+0x658>
 8004df0:	48c8      	ldr	r0, [pc, #800]	; (8005114 <uart_comms+0x614>)
 8004df2:	f8d8 1000 	ldr.w	r1, [r8]
			memcpy(return_value+2,comma,1);
 8004df6:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8005140 <uart_comms+0x640>
			itoa((time->Hours),temp_time_var,10  );
 8004dfa:	4fc7      	ldr	r7, [pc, #796]	; (8005118 <uart_comms+0x618>)
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f7fd fd21 	bl	8002844 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8004e02:	4bc6      	ldr	r3, [pc, #792]	; (800511c <uart_comms+0x61c>)
 8004e04:	48c3      	ldr	r0, [pc, #780]	; (8005114 <uart_comms+0x614>)
 8004e06:	6819      	ldr	r1, [r3, #0]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f7fd fd51 	bl	80028b0 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 8004e0e:	682a      	ldr	r2, [r5, #0]
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	8812      	ldrh	r2, [r2, #0]
 8004e14:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8004e16:	6833      	ldr	r3, [r6, #0]
 8004e18:	f899 2000 	ldrb.w	r2, [r9]
 8004e1c:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 8004e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	7818      	ldrb	r0, [r3, #0]
 8004e26:	220a      	movs	r2, #10
 8004e28:	f000 fbda 	bl	80055e0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8004e2c:	f8d6 a000 	ldr.w	sl, [r6]
 8004e30:	4650      	mov	r0, sl
 8004e32:	f7fb f9cd 	bl	80001d0 <strlen>
 8004e36:	f8d7 b000 	ldr.w	fp, [r7]
 8004e3a:	9001      	str	r0, [sp, #4]
 8004e3c:	4658      	mov	r0, fp
 8004e3e:	f7fb f9c7 	bl	80001d0 <strlen>
 8004e42:	9b01      	ldr	r3, [sp, #4]
 8004e44:	4602      	mov	r2, r0
 8004e46:	4659      	mov	r1, fp
 8004e48:	eb0a 0003 	add.w	r0, sl, r3
 8004e4c:	f000 fbd2 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004e50:	f8d6 a000 	ldr.w	sl, [r6]
 8004e54:	4650      	mov	r0, sl
 8004e56:	f7fb f9bb 	bl	80001d0 <strlen>
 8004e5a:	f899 3000 	ldrb.w	r3, [r9]
 8004e5e:	f80a 3000 	strb.w	r3, [sl, r0]
			itoa((time->Minutes),temp_time_var,10  );
 8004e62:	f8d8 3000 	ldr.w	r3, [r8]
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	7858      	ldrb	r0, [r3, #1]
 8004e6a:	220a      	movs	r2, #10
 8004e6c:	f000 fbb8 	bl	80055e0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8004e70:	f8d6 a000 	ldr.w	sl, [r6]
 8004e74:	4650      	mov	r0, sl
 8004e76:	f7fb f9ab 	bl	80001d0 <strlen>
 8004e7a:	f8d7 b000 	ldr.w	fp, [r7]
 8004e7e:	9001      	str	r0, [sp, #4]
 8004e80:	4658      	mov	r0, fp
 8004e82:	f7fb f9a5 	bl	80001d0 <strlen>
 8004e86:	9b01      	ldr	r3, [sp, #4]
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4659      	mov	r1, fp
 8004e8c:	eb0a 0003 	add.w	r0, sl, r3
 8004e90:	f000 fbb0 	bl	80055f4 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8004e94:	f8d6 a000 	ldr.w	sl, [r6]
 8004e98:	4650      	mov	r0, sl
 8004e9a:	f7fb f999 	bl	80001d0 <strlen>
 8004e9e:	f899 3000 	ldrb.w	r3, [r9]
 8004ea2:	f80a 3000 	strb.w	r3, [sl, r0]
			itoa((time->Seconds),temp_time_var,10  );
 8004ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	7898      	ldrb	r0, [r3, #2]
 8004eae:	220a      	movs	r2, #10
 8004eb0:	f000 fb96 	bl	80055e0 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8004eb4:	f8d6 8000 	ldr.w	r8, [r6]
 8004eb8:	4640      	mov	r0, r8
 8004eba:	f7fb f989 	bl	80001d0 <strlen>
 8004ebe:	683f      	ldr	r7, [r7, #0]
 8004ec0:	4681      	mov	r9, r0
 8004ec2:	e748      	b.n	8004d56 <uart_comms+0x256>
			memcpy(return_value, uart_command, 2);
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	8812      	ldrh	r2, [r2, #0]
 8004ec8:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,endSimbol, 2);
 8004eca:	4a95      	ldr	r2, [pc, #596]	; (8005120 <uart_comms+0x620>)
 8004ecc:	6833      	ldr	r3, [r6, #0]
 8004ece:	8812      	ldrh	r2, [r2, #0]
 8004ed0:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8004ed2:	f8d6 b000 	ldr.w	fp, [r6]
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004ed6:	4e8f      	ldr	r6, [pc, #572]	; (8005114 <uart_comms+0x614>)
			time->Hours = strtol(heating_info, NULL,10);
 8004ed8:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8005158 <uart_comms+0x658>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8004edc:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8005134 <uart_comms+0x634>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8004ee0:	f8df a238 	ldr.w	sl, [pc, #568]	; 800511c <uart_comms+0x61c>
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8004ee4:	4658      	mov	r0, fp
 8004ee6:	f7fb f973 	bl	80001d0 <strlen>
 8004eea:	4659      	mov	r1, fp
 8004eec:	b282      	uxth	r2, r0
 8004eee:	488d      	ldr	r0, [pc, #564]	; (8005124 <uart_comms+0x624>)
 8004ef0:	f7fd ff62 	bl	8002db8 <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004ef4:	6833      	ldr	r3, [r6, #0]
 8004ef6:	2253      	movs	r2, #83	; 0x53
 8004ef8:	21ca      	movs	r1, #202	; 0xca
 8004efa:	6259      	str	r1, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8004efc:	4630      	mov	r0, r6
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8004f00:	f7fd fd20 	bl	8002944 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8004f04:	6838      	ldr	r0, [r7, #0]
 8004f06:	4988      	ldr	r1, [pc, #544]	; (8005128 <uart_comms+0x628>)
 8004f08:	f000 fc68 	bl	80057dc <strtok>
			time->Hours = strtol(heating_info, NULL,10);
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	2100      	movs	r1, #0
 8004f10:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8004f14:	f8c9 0000 	str.w	r0, [r9]
			time->Hours = strtol(heating_info, NULL,10);
 8004f18:	f000 fd34 	bl	8005984 <strtol>
			heating_info = (strtok(NULL, ","));
 8004f1c:	4983      	ldr	r1, [pc, #524]	; (800512c <uart_comms+0x62c>)
			time->Hours = strtol(heating_info, NULL,10);
 8004f1e:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 8004f20:	2000      	movs	r0, #0
 8004f22:	f000 fc5b 	bl	80057dc <strtok>
			time->Minutes = strtol(heating_info, NULL,10);
 8004f26:	220a      	movs	r2, #10
 8004f28:	2100      	movs	r1, #0
 8004f2a:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = (strtok(NULL, ","));
 8004f2e:	f8c9 0000 	str.w	r0, [r9]
			time->Minutes = strtol(heating_info, NULL,10);
 8004f32:	f000 fd27 	bl	8005984 <strtol>
			heating_info = (strtok(NULL, ",\r\n"));
 8004f36:	497e      	ldr	r1, [pc, #504]	; (8005130 <uart_comms+0x630>)
			time->Minutes = strtol(heating_info, NULL,10);
 8004f38:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f000 fc4e 	bl	80057dc <strtok>
			time->Seconds = strtol(heating_info, NULL,10);
 8004f40:	220a      	movs	r2, #10
 8004f42:	2100      	movs	r1, #0
 8004f44:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = (strtok(NULL, ",\r\n"));
 8004f48:	f8c9 0000 	str.w	r0, [r9]
			time->Seconds = strtol(heating_info, NULL,10);
 8004f4c:	f000 fd1a 	bl	8005984 <strtol>
 8004f50:	70b8      	strb	r0, [r7, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8004f52:	f8d8 1000 	ldr.w	r1, [r8]
 8004f56:	4630      	mov	r0, r6
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f7fd fd65 	bl	8002a28 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8004f5e:	f8da 1000 	ldr.w	r1, [sl]
 8004f62:	4630      	mov	r0, r6
 8004f64:	2200      	movs	r2, #0
 8004f66:	f7fd fdff 	bl	8002b68 <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004f6a:	6833      	ldr	r3, [r6, #0]
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004f6c:	f8d8 1000 	ldr.w	r1, [r8]
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004f70:	22ff      	movs	r2, #255	; 0xff
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004f74:	4630      	mov	r0, r6
 8004f76:	2200      	movs	r2, #0
 8004f78:	f7fd fc64 	bl	8002844 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8004f7c:	f8da 1000 	ldr.w	r1, [sl]
 8004f80:	4630      	mov	r0, r6
 8004f82:	2200      	movs	r2, #0
 8004f84:	f7fd fc94 	bl	80028b0 <HAL_RTC_GetDate>
			break;
 8004f88:	e6fe      	b.n	8004d88 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8004f8a:	6833      	ldr	r3, [r6, #0]
 8004f8c:	8812      	ldrh	r2, [r2, #0]
 8004f8e:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8004f90:	4a63      	ldr	r2, [pc, #396]	; (8005120 <uart_comms+0x620>)
 8004f92:	6833      	ldr	r3, [r6, #0]
 8004f94:	8812      	ldrh	r2, [r2, #0]
 8004f96:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8004f98:	6836      	ldr	r6, [r6, #0]
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7fb f918 	bl	80001d0 <strlen>
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	b282      	uxth	r2, r0
 8004fa4:	485f      	ldr	r0, [pc, #380]	; (8005124 <uart_comms+0x624>)
 8004fa6:	f7fd ff07 	bl	8002db8 <HAL_UART_Transmit_IT>
			if(uart_command[3] == '1'){ // first heating schedule
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	2b31      	cmp	r3, #49	; 0x31
 8004fb0:	f000 81b1 	beq.w	8005316 <uart_comms+0x816>
			else if(uart_command[3] == '2'){ // second heating schedule
 8004fb4:	2b32      	cmp	r3, #50	; 0x32
 8004fb6:	f000 815f 	beq.w	8005278 <uart_comms+0x778>
			else if(uart_command[3] == '3'){ // 3rd heating schedule
 8004fba:	2b33      	cmp	r3, #51	; 0x33
 8004fbc:	f47f aee4 	bne.w	8004d88 <uart_comms+0x288>
				heating_info = strtok((char*)uart_command_copy, ",");
 8004fc0:	6838      	ldr	r0, [r7, #0]
 8004fc2:	495a      	ldr	r1, [pc, #360]	; (800512c <uart_comms+0x62c>)
 8004fc4:	4e5b      	ldr	r6, [pc, #364]	; (8005134 <uart_comms+0x634>)
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8004fc6:	4f5c      	ldr	r7, [pc, #368]	; (8005138 <uart_comms+0x638>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8004fc8:	f000 fc08 	bl	80057dc <strtok>
				heating_info = (strtok(NULL, ","));
 8004fcc:	4957      	ldr	r1, [pc, #348]	; (800512c <uart_comms+0x62c>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8004fce:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f000 fc03 	bl	80057dc <strtok>
				heating_info = (strtok(NULL, ","));
 8004fd6:	4955      	ldr	r1, [pc, #340]	; (800512c <uart_comms+0x62c>)
				heating_info = (strtok(NULL, ","));
 8004fd8:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f000 fbfe 	bl	80057dc <strtok>
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8004fe0:	220a      	movs	r2, #10
 8004fe2:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8004fe4:	6030      	str	r0, [r6, #0]
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8004fe6:	f000 fccd 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 8004fea:	4950      	ldr	r1, [pc, #320]	; (800512c <uart_comms+0x62c>)
				heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8004fec:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
				heating_info = (strtok(NULL, ","));
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f000 fbf3 	bl	80057dc <strtok>
				heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8004ff6:	220a      	movs	r2, #10
 8004ff8:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8004ffa:	6030      	str	r0, [r6, #0]
				heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8004ffc:	f000 fcc2 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 8005000:	494a      	ldr	r1, [pc, #296]	; (800512c <uart_comms+0x62c>)
				heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 8005002:	f887 0051 	strb.w	r0, [r7, #81]	; 0x51
				heating_info = (strtok(NULL, ","));
 8005006:	2000      	movs	r0, #0
 8005008:	f000 fbe8 	bl	80057dc <strtok>
				heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 800500c:	220a      	movs	r2, #10
 800500e:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8005010:	6030      	str	r0, [r6, #0]
				heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8005012:	f000 fcb7 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 8005016:	4945      	ldr	r1, [pc, #276]	; (800512c <uart_comms+0x62c>)
				heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8005018:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
				heating_info = (strtok(NULL, ","));
 800501c:	2000      	movs	r0, #0
 800501e:	f000 fbdd 	bl	80057dc <strtok>
				heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8005022:	220a      	movs	r2, #10
 8005024:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8005026:	6030      	str	r0, [r6, #0]
				heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 8005028:	f000 fcac 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 800502c:	493f      	ldr	r1, [pc, #252]	; (800512c <uart_comms+0x62c>)
				heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 800502e:	f887 0064 	strb.w	r0, [r7, #100]	; 0x64
				heating_info = (strtok(NULL, ","));
 8005032:	2000      	movs	r0, #0
 8005034:	f000 fbd2 	bl	80057dc <strtok>
				heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 8005038:	220a      	movs	r2, #10
 800503a:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 800503c:	6030      	str	r0, [r6, #0]
				heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 800503e:	f000 fca1 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, "\r\n"));
 8005042:	493e      	ldr	r1, [pc, #248]	; (800513c <uart_comms+0x63c>)
				heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 8005044:	f887 0065 	strb.w	r0, [r7, #101]	; 0x65
				heating_info = (strtok(NULL, "\r\n"));
 8005048:	2000      	movs	r0, #0
 800504a:	f000 fbc7 	bl	80057dc <strtok>
				heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 800504e:	220a      	movs	r2, #10
 8005050:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, "\r\n"));
 8005052:	6030      	str	r0, [r6, #0]
				heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 8005054:	f000 fc96 	bl	8005984 <strtol>
 8005058:	f887 0066 	strb.w	r0, [r7, #102]	; 0x66
 800505c:	e694      	b.n	8004d88 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 800505e:	6833      	ldr	r3, [r6, #0]
 8005060:	8812      	ldrh	r2, [r2, #0]
 8005062:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8005064:	4b36      	ldr	r3, [pc, #216]	; (8005140 <uart_comms+0x640>)
 8005066:	6832      	ldr	r2, [r6, #0]
 8005068:	7819      	ldrb	r1, [r3, #0]
			sprintf(temp_val,"%d", *set_temp);
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <uart_comms+0x644>)
			memcpy(return_value+2, comma, 1);
 800506c:	7091      	strb	r1, [r2, #2]
			sprintf(temp_val,"%d", *set_temp);
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4f35      	ldr	r7, [pc, #212]	; (8005148 <uart_comms+0x648>)
 8005072:	781a      	ldrb	r2, [r3, #0]
 8005074:	4935      	ldr	r1, [pc, #212]	; (800514c <uart_comms+0x64c>)
 8005076:	6838      	ldr	r0, [r7, #0]
 8005078:	f000 fb8c 	bl	8005794 <siprintf>
			memcpy(return_value+3, temp_val, strlen(temp_val));
 800507c:	683f      	ldr	r7, [r7, #0]
 800507e:	4638      	mov	r0, r7
 8005080:	f7fb f8a6 	bl	80001d0 <strlen>
 8005084:	6833      	ldr	r3, [r6, #0]
 8005086:	4602      	mov	r2, r0
 8005088:	4639      	mov	r1, r7
 800508a:	1cd8      	adds	r0, r3, #3
 800508c:	e66a      	b.n	8004d64 <uart_comms+0x264>
			memcpy(return_value, uart_command,2);
 800508e:	6833      	ldr	r3, [r6, #0]
 8005090:	8812      	ldrh	r2, [r2, #0]
 8005092:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,endSimbol, 2);
 8005094:	4a22      	ldr	r2, [pc, #136]	; (8005120 <uart_comms+0x620>)
 8005096:	6833      	ldr	r3, [r6, #0]
 8005098:	8812      	ldrh	r2, [r2, #0]
 800509a:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 800509c:	6837      	ldr	r7, [r6, #0]
			memset(temp_val, 0x00, 4);
 800509e:	4e2a      	ldr	r6, [pc, #168]	; (8005148 <uart_comms+0x648>)
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80050a0:	4638      	mov	r0, r7
 80050a2:	f7fb f895 	bl	80001d0 <strlen>
 80050a6:	4639      	mov	r1, r7
 80050a8:	b282      	uxth	r2, r0
 80050aa:	481e      	ldr	r0, [pc, #120]	; (8005124 <uart_comms+0x624>)
 80050ac:	f7fd fe84 	bl	8002db8 <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 80050b0:	7823      	ldrb	r3, [r4, #0]
			memset(temp_val, 0x00, 4);
 80050b2:	6831      	ldr	r1, [r6, #0]
			sizeOfTemp = uart_counter - 5;
 80050b4:	4a26      	ldr	r2, [pc, #152]	; (8005150 <uart_comms+0x650>)
 80050b6:	3b05      	subs	r3, #5
			memset(temp_val, 0x00, 4);
 80050b8:	2700      	movs	r7, #0
			sizeOfTemp = uart_counter - 5;
 80050ba:	7013      	strb	r3, [r2, #0]
			memset(temp_val, 0x00, 4);
 80050bc:	600f      	str	r7, [r1, #0]
			memcpy(temp_val, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 80050be:	6829      	ldr	r1, [r5, #0]
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	6830      	ldr	r0, [r6, #0]
 80050c4:	3103      	adds	r1, #3
 80050c6:	f000 fa95 	bl	80055f4 <memcpy>
			*set_temp = strtol(temp_val, NULL,10);
 80050ca:	4b1e      	ldr	r3, [pc, #120]	; (8005144 <uart_comms+0x644>)
 80050cc:	6830      	ldr	r0, [r6, #0]
 80050ce:	681e      	ldr	r6, [r3, #0]
 80050d0:	4639      	mov	r1, r7
 80050d2:	220a      	movs	r2, #10
 80050d4:	f000 fc56 	bl	8005984 <strtol>
 80050d8:	7030      	strb	r0, [r6, #0]
			break;
 80050da:	e655      	b.n	8004d88 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	8812      	ldrh	r2, [r2, #0]
 80050e0:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 80050e2:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <uart_comms+0x620>)
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	8812      	ldrh	r2, [r2, #0]
 80050e8:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 80050ea:	6836      	ldr	r6, [r6, #0]
 80050ec:	4630      	mov	r0, r6
 80050ee:	f7fb f86f 	bl	80001d0 <strlen>
 80050f2:	4631      	mov	r1, r6
 80050f4:	b282      	uxth	r2, r0
 80050f6:	480b      	ldr	r0, [pc, #44]	; (8005124 <uart_comms+0x624>)
 80050f8:	f7fd fe5e 	bl	8002db8 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	78db      	ldrb	r3, [r3, #3]
 8005100:	2b30      	cmp	r3, #48	; 0x30
 8005102:	f000 8151 	beq.w	80053a8 <uart_comms+0x8a8>
			else if(uart_command[3] == '1'){
 8005106:	2b31      	cmp	r3, #49	; 0x31
 8005108:	f47f ae3e 	bne.w	8004d88 <uart_comms+0x288>
				auto_heating = 1;
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <uart_comms+0x654>)
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e639      	b.n	8004d88 <uart_comms+0x288>
 8005114:	20000480 	.word	0x20000480
 8005118:	200002c0 	.word	0x200002c0
 800511c:	20000260 	.word	0x20000260
 8005120:	20000008 	.word	0x20000008
 8005124:	20000410 	.word	0x20000410
 8005128:	08006178 	.word	0x08006178
 800512c:	0800617c 	.word	0x0800617c
 8005130:	08006180 	.word	0x08006180
 8005134:	20000290 	.word	0x20000290
 8005138:	20000500 	.word	0x20000500
 800513c:	08006184 	.word	0x08006184
 8005140:	20000004 	.word	0x20000004
 8005144:	200002b8 	.word	0x200002b8
 8005148:	200002c4 	.word	0x200002c4
 800514c:	08006174 	.word	0x08006174
 8005150:	200002bc 	.word	0x200002bc
 8005154:	20000254 	.word	0x20000254
 8005158:	200002c8 	.word	0x200002c8
			memcpy(studentnumber, uart_command, 2 );
 800515c:	4ba4      	ldr	r3, [pc, #656]	; (80053f0 <uart_comms+0x8f0>)
 800515e:	8810      	ldrh	r0, [r2, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
			memcpy(studentnumber+2,comma,1);
 8005162:	49a4      	ldr	r1, [pc, #656]	; (80053f4 <uart_comms+0x8f4>)
			memcpy(studentnumber, uart_command, 2 );
 8005164:	8010      	strh	r0, [r2, #0]
			memcpy(studentnumber+2,comma,1);
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	7809      	ldrb	r1, [r1, #0]
 800516a:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 800516c:	4aa2      	ldr	r2, [pc, #648]	; (80053f8 <uart_comms+0x8f8>)
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	6811      	ldr	r1, [r2, #0]
 8005172:	6856      	ldr	r6, [r2, #4]
 8005174:	f8c0 1003 	str.w	r1, [r0, #3]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8005178:	4aa0      	ldr	r2, [pc, #640]	; (80053fc <uart_comms+0x8fc>)
			memcpy(studentnumber+3 ,studentnumber1,8 );
 800517a:	f8c0 6007 	str.w	r6, [r0, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	6852      	ldr	r2, [r2, #4]
 8005184:	f8c1 200f 	str.w	r2, [r1, #15]
 8005188:	f8c1 300b 	str.w	r3, [r1, #11]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 800518c:	220d      	movs	r2, #13
 800518e:	489c      	ldr	r0, [pc, #624]	; (8005400 <uart_comms+0x900>)
 8005190:	f7fd fe12 	bl	8002db8 <HAL_UART_Transmit_IT>
			break;
 8005194:	e5f8      	b.n	8004d88 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 8005196:	6833      	ldr	r3, [r6, #0]
 8005198:	8812      	ldrh	r2, [r2, #0]
 800519a:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 800519c:	4a97      	ldr	r2, [pc, #604]	; (80053fc <uart_comms+0x8fc>)
 800519e:	6833      	ldr	r3, [r6, #0]
 80051a0:	8812      	ldrh	r2, [r2, #0]
 80051a2:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 80051a4:	6836      	ldr	r6, [r6, #0]
 80051a6:	4630      	mov	r0, r6
 80051a8:	f7fb f812 	bl	80001d0 <strlen>
 80051ac:	4631      	mov	r1, r6
 80051ae:	b282      	uxth	r2, r0
 80051b0:	4893      	ldr	r0, [pc, #588]	; (8005400 <uart_comms+0x900>)
 80051b2:	f7fd fe01 	bl	8002db8 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){ // logging disable
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	78db      	ldrb	r3, [r3, #3]
 80051ba:	2b30      	cmp	r3, #48	; 0x30
 80051bc:	d058      	beq.n	8005270 <uart_comms+0x770>
			else if(uart_command[3] == '1'){ // logging enable
 80051be:	2b31      	cmp	r3, #49	; 0x31
 80051c0:	f47f ade2 	bne.w	8004d88 <uart_comms+0x288>
				enableFlashLogging = 1;
 80051c4:	4b8f      	ldr	r3, [pc, #572]	; (8005404 <uart_comms+0x904>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e5dd      	b.n	8004d88 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 80051cc:	6833      	ldr	r3, [r6, #0]
 80051ce:	8812      	ldrh	r2, [r2, #0]
 80051d0:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 80051d2:	4a8a      	ldr	r2, [pc, #552]	; (80053fc <uart_comms+0x8fc>)
 80051d4:	6833      	ldr	r3, [r6, #0]
 80051d6:	8812      	ldrh	r2, [r2, #0]
 80051d8:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 80051da:	6836      	ldr	r6, [r6, #0]
 80051dc:	4630      	mov	r0, r6
 80051de:	f7fa fff7 	bl	80001d0 <strlen>
 80051e2:	4631      	mov	r1, r6
 80051e4:	b282      	uxth	r2, r0
 80051e6:	4886      	ldr	r0, [pc, #536]	; (8005400 <uart_comms+0x900>)
 80051e8:	f7fd fde6 	bl	8002db8 <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 80051ec:	4b86      	ldr	r3, [pc, #536]	; (8005408 <uart_comms+0x908>)
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	2a00      	cmp	r2, #0
 80051f2:	f47f adc9 	bne.w	8004d88 <uart_comms+0x288>
				if(uart_command[3]=='0'){
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	78db      	ldrb	r3, [r3, #3]
 80051fa:	2b30      	cmp	r3, #48	; 0x30
 80051fc:	f000 80ef 	beq.w	80053de <uart_comms+0x8de>
				else if(uart_command[3] == '1'){
 8005200:	2b31      	cmp	r3, #49	; 0x31
 8005202:	f47f adc1 	bne.w	8004d88 <uart_comms+0x288>
					heater_state = heater_ON;
 8005206:	4b81      	ldr	r3, [pc, #516]	; (800540c <uart_comms+0x90c>)
 8005208:	4a81      	ldr	r2, [pc, #516]	; (8005410 <uart_comms+0x910>)
 800520a:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 800520c:	4881      	ldr	r0, [pc, #516]	; (8005414 <uart_comms+0x914>)
 800520e:	2201      	movs	r2, #1
 8005210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005214:	f7fb ffa2 	bl	800115c <HAL_GPIO_WritePin>
 8005218:	e5b6      	b.n	8004d88 <uart_comms+0x288>
			memcpy(return_value, uart_command, 2);
 800521a:	6833      	ldr	r3, [r6, #0]
 800521c:	8812      	ldrh	r2, [r2, #0]
 800521e:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005220:	4a76      	ldr	r2, [pc, #472]	; (80053fc <uart_comms+0x8fc>)
 8005222:	6833      	ldr	r3, [r6, #0]
 8005224:	8812      	ldrh	r2, [r2, #0]
 8005226:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005228:	6836      	ldr	r6, [r6, #0]
 800522a:	4630      	mov	r0, r6
 800522c:	f7fa ffd0 	bl	80001d0 <strlen>
 8005230:	4631      	mov	r1, r6
 8005232:	b282      	uxth	r2, r0
 8005234:	4872      	ldr	r0, [pc, #456]	; (8005400 <uart_comms+0x900>)
 8005236:	f7fd fdbf 	bl	8002db8 <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 800523a:	682b      	ldr	r3, [r5, #0]
 800523c:	78db      	ldrb	r3, [r3, #3]
 800523e:	2b31      	cmp	r3, #49	; 0x31
 8005240:	f000 80c3 	beq.w	80053ca <uart_comms+0x8ca>
			else if(uart_command[3] == '0'){
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	f47f ad9f 	bne.w	8004d88 <uart_comms+0x288>
				valve_state=valve_CLOSE;
 800524a:	4b73      	ldr	r3, [pc, #460]	; (8005418 <uart_comms+0x918>)
 800524c:	4a73      	ldr	r2, [pc, #460]	; (800541c <uart_comms+0x91c>)
 800524e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 8005250:	4870      	ldr	r0, [pc, #448]	; (8005414 <uart_comms+0x914>)
 8005252:	2200      	movs	r2, #0
 8005254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005258:	f7fb ff80 	bl	800115c <HAL_GPIO_WritePin>
 800525c:	e594      	b.n	8004d88 <uart_comms+0x288>
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)noLoggingData, strlen((char*)noLoggingData));
 800525e:	4870      	ldr	r0, [pc, #448]	; (8005420 <uart_comms+0x920>)
 8005260:	f7fa ffb6 	bl	80001d0 <strlen>
 8005264:	496e      	ldr	r1, [pc, #440]	; (8005420 <uart_comms+0x920>)
 8005266:	b282      	uxth	r2, r0
 8005268:	4865      	ldr	r0, [pc, #404]	; (8005400 <uart_comms+0x900>)
 800526a:	f7fd fda5 	bl	8002db8 <HAL_UART_Transmit_IT>
 800526e:	e58b      	b.n	8004d88 <uart_comms+0x288>
				enableFlashLogging = 0;
 8005270:	4b64      	ldr	r3, [pc, #400]	; (8005404 <uart_comms+0x904>)
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e587      	b.n	8004d88 <uart_comms+0x288>
				heating_info = strtok((char*)uart_command_copy, ",");
 8005278:	6838      	ldr	r0, [r7, #0]
 800527a:	496a      	ldr	r1, [pc, #424]	; (8005424 <uart_comms+0x924>)
 800527c:	4e6a      	ldr	r6, [pc, #424]	; (8005428 <uart_comms+0x928>)
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 800527e:	4f6b      	ldr	r7, [pc, #428]	; (800542c <uart_comms+0x92c>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8005280:	f000 faac 	bl	80057dc <strtok>
				heating_info = (strtok(NULL, ","));
 8005284:	4967      	ldr	r1, [pc, #412]	; (8005424 <uart_comms+0x924>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8005286:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8005288:	2000      	movs	r0, #0
 800528a:	f000 faa7 	bl	80057dc <strtok>
				heating_info = (strtok(NULL, ","));
 800528e:	4965      	ldr	r1, [pc, #404]	; (8005424 <uart_comms+0x924>)
				heating_info = (strtok(NULL, ","));
 8005290:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8005292:	2000      	movs	r0, #0
 8005294:	f000 faa2 	bl	80057dc <strtok>
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005298:	220a      	movs	r2, #10
 800529a:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 800529c:	6030      	str	r0, [r6, #0]
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 800529e:	f000 fb71 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 80052a2:	4960      	ldr	r1, [pc, #384]	; (8005424 <uart_comms+0x924>)
				heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 80052a4:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
				heating_info = (strtok(NULL, ","));
 80052a8:	2000      	movs	r0, #0
 80052aa:	f000 fa97 	bl	80057dc <strtok>
				heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 80052ae:	220a      	movs	r2, #10
 80052b0:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 80052b2:	6030      	str	r0, [r6, #0]
				heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 80052b4:	f000 fb66 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 80052b8:	495a      	ldr	r1, [pc, #360]	; (8005424 <uart_comms+0x924>)
				heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 80052ba:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
				heating_info = (strtok(NULL, ","));
 80052be:	2000      	movs	r0, #0
 80052c0:	f000 fa8c 	bl	80057dc <strtok>
				heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 80052c4:	220a      	movs	r2, #10
 80052c6:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 80052c8:	6030      	str	r0, [r6, #0]
				heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 80052ca:	f000 fb5b 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 80052ce:	4955      	ldr	r1, [pc, #340]	; (8005424 <uart_comms+0x924>)
				heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 80052d0:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
				heating_info = (strtok(NULL, ","));
 80052d4:	2000      	movs	r0, #0
 80052d6:	f000 fa81 	bl	80057dc <strtok>
				heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 80052da:	220a      	movs	r2, #10
 80052dc:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 80052de:	6030      	str	r0, [r6, #0]
				heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 80052e0:	f000 fb50 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 80052e4:	494f      	ldr	r1, [pc, #316]	; (8005424 <uart_comms+0x924>)
				heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 80052e6:	f887 003c 	strb.w	r0, [r7, #60]	; 0x3c
				heating_info = (strtok(NULL, ","));
 80052ea:	2000      	movs	r0, #0
 80052ec:	f000 fa76 	bl	80057dc <strtok>
				heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 80052f0:	220a      	movs	r2, #10
 80052f2:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 80052f4:	6030      	str	r0, [r6, #0]
				heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 80052f6:	f000 fb45 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, "\r\n"));
 80052fa:	494d      	ldr	r1, [pc, #308]	; (8005430 <uart_comms+0x930>)
				heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 80052fc:	f887 003d 	strb.w	r0, [r7, #61]	; 0x3d
				heating_info = (strtok(NULL, "\r\n"));
 8005300:	2000      	movs	r0, #0
 8005302:	f000 fa6b 	bl	80057dc <strtok>
				heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8005306:	220a      	movs	r2, #10
 8005308:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, "\r\n"));
 800530a:	6030      	str	r0, [r6, #0]
				heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 800530c:	f000 fb3a 	bl	8005984 <strtol>
 8005310:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
 8005314:	e538      	b.n	8004d88 <uart_comms+0x288>
				heating_info = strtok((char*)uart_command_copy, ",");
 8005316:	6838      	ldr	r0, [r7, #0]
 8005318:	4942      	ldr	r1, [pc, #264]	; (8005424 <uart_comms+0x924>)
 800531a:	4e43      	ldr	r6, [pc, #268]	; (8005428 <uart_comms+0x928>)
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 800531c:	4f43      	ldr	r7, [pc, #268]	; (800542c <uart_comms+0x92c>)
				heating_info = strtok((char*)uart_command_copy, ",");
 800531e:	f000 fa5d 	bl	80057dc <strtok>
				heating_info = (strtok(NULL, ","));
 8005322:	4940      	ldr	r1, [pc, #256]	; (8005424 <uart_comms+0x924>)
				heating_info = strtok((char*)uart_command_copy, ",");
 8005324:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8005326:	2000      	movs	r0, #0
 8005328:	f000 fa58 	bl	80057dc <strtok>
				heating_info = (strtok(NULL, ","));
 800532c:	493d      	ldr	r1, [pc, #244]	; (8005424 <uart_comms+0x924>)
				heating_info = (strtok(NULL, ","));
 800532e:	6030      	str	r0, [r6, #0]
				heating_info = (strtok(NULL, ","));
 8005330:	2000      	movs	r0, #0
 8005332:	f000 fa53 	bl	80057dc <strtok>
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005336:	220a      	movs	r2, #10
 8005338:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 800533a:	6030      	str	r0, [r6, #0]
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 800533c:	f000 fb22 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 8005340:	4938      	ldr	r1, [pc, #224]	; (8005424 <uart_comms+0x924>)
				heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005342:	7038      	strb	r0, [r7, #0]
				heating_info = (strtok(NULL, ","));
 8005344:	2000      	movs	r0, #0
 8005346:	f000 fa49 	bl	80057dc <strtok>
				heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 800534a:	220a      	movs	r2, #10
 800534c:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 800534e:	6030      	str	r0, [r6, #0]
				heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005350:	f000 fb18 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 8005354:	4933      	ldr	r1, [pc, #204]	; (8005424 <uart_comms+0x924>)
				heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005356:	7078      	strb	r0, [r7, #1]
				heating_info = (strtok(NULL, ","));
 8005358:	2000      	movs	r0, #0
 800535a:	f000 fa3f 	bl	80057dc <strtok>
				heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 800535e:	220a      	movs	r2, #10
 8005360:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8005362:	6030      	str	r0, [r6, #0]
				heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005364:	f000 fb0e 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 8005368:	492e      	ldr	r1, [pc, #184]	; (8005424 <uart_comms+0x924>)
				heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 800536a:	70b8      	strb	r0, [r7, #2]
				heating_info = (strtok(NULL, ","));
 800536c:	2000      	movs	r0, #0
 800536e:	f000 fa35 	bl	80057dc <strtok>
				heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005372:	220a      	movs	r2, #10
 8005374:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 8005376:	6030      	str	r0, [r6, #0]
				heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005378:	f000 fb04 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, ","));
 800537c:	4929      	ldr	r1, [pc, #164]	; (8005424 <uart_comms+0x924>)
				heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 800537e:	7538      	strb	r0, [r7, #20]
				heating_info = (strtok(NULL, ","));
 8005380:	2000      	movs	r0, #0
 8005382:	f000 fa2b 	bl	80057dc <strtok>
				heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005386:	220a      	movs	r2, #10
 8005388:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, ","));
 800538a:	6030      	str	r0, [r6, #0]
				heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 800538c:	f000 fafa 	bl	8005984 <strtol>
				heating_info = (strtok(NULL, "\r\n"));
 8005390:	4927      	ldr	r1, [pc, #156]	; (8005430 <uart_comms+0x930>)
				heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005392:	7578      	strb	r0, [r7, #21]
				heating_info = (strtok(NULL, "\r\n"));
 8005394:	2000      	movs	r0, #0
 8005396:	f000 fa21 	bl	80057dc <strtok>
				heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 800539a:	220a      	movs	r2, #10
 800539c:	2100      	movs	r1, #0
				heating_info = (strtok(NULL, "\r\n"));
 800539e:	6030      	str	r0, [r6, #0]
				heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 80053a0:	f000 faf0 	bl	8005984 <strtol>
 80053a4:	75b8      	strb	r0, [r7, #22]
 80053a6:	e4ef      	b.n	8004d88 <uart_comms+0x288>
				auto_heating = 0;
 80053a8:	4b17      	ldr	r3, [pc, #92]	; (8005408 <uart_comms+0x908>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e4eb      	b.n	8004d88 <uart_comms+0x288>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 80053b0:	f7fa ff0e 	bl	80001d0 <strlen>
 80053b4:	4681      	mov	r9, r0
 80053b6:	4638      	mov	r0, r7
 80053b8:	f7fa ff0a 	bl	80001d0 <strlen>
 80053bc:	4639      	mov	r1, r7
 80053be:	1e42      	subs	r2, r0, #1
 80053c0:	eb08 0009 	add.w	r0, r8, r9
 80053c4:	f000 f916 	bl	80055f4 <memcpy>
 80053c8:	e4ce      	b.n	8004d68 <uart_comms+0x268>
				valve_state = valve_OPEN;
 80053ca:	4b13      	ldr	r3, [pc, #76]	; (8005418 <uart_comms+0x918>)
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <uart_comms+0x934>)
 80053ce:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 80053d0:	4810      	ldr	r0, [pc, #64]	; (8005414 <uart_comms+0x914>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053d8:	f7fb fec0 	bl	800115c <HAL_GPIO_WritePin>
 80053dc:	e4d4      	b.n	8004d88 <uart_comms+0x288>
					heater_state = heater_OFF;
 80053de:	4b0b      	ldr	r3, [pc, #44]	; (800540c <uart_comms+0x90c>)
 80053e0:	4915      	ldr	r1, [pc, #84]	; (8005438 <uart_comms+0x938>)
 80053e2:	6019      	str	r1, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 80053e4:	480b      	ldr	r0, [pc, #44]	; (8005414 <uart_comms+0x914>)
 80053e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053ea:	f7fb feb7 	bl	800115c <HAL_GPIO_WritePin>
 80053ee:	e4cb      	b.n	8004d88 <uart_comms+0x288>
 80053f0:	20000578 	.word	0x20000578
 80053f4:	20000004 	.word	0x20000004
 80053f8:	20000040 	.word	0x20000040
 80053fc:	20000008 	.word	0x20000008
 8005400:	20000410 	.word	0x20000410
 8005404:	20000264 	.word	0x20000264
 8005408:	20000254 	.word	0x20000254
 800540c:	2000028c 	.word	0x2000028c
 8005410:	20000018 	.word	0x20000018
 8005414:	48000400 	.word	0x48000400
 8005418:	200002e0 	.word	0x200002e0
 800541c:	20000048 	.word	0x20000048
 8005420:	20000020 	.word	0x20000020
 8005424:	0800617c 	.word	0x0800617c
 8005428:	20000290 	.word	0x20000290
 800542c:	20000500 	.word	0x20000500
 8005430:	08006184 	.word	0x08006184
 8005434:	20000050 	.word	0x20000050
 8005438:	20000014 	.word	0x20000014

0800543c <mainLoop>:
ADC_ChannelConfTypeDef Channel_4;
extern uint32_t uwTick;



void mainLoop(){
 800543c:	b510      	push	{r4, lr}
	  if(rx_flag == 1 ){ 	// UART Comms
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <mainLoop+0xac>)
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	2a01      	cmp	r2, #1
 8005444:	d04a      	beq.n	80054dc <mainLoop+0xa0>
		  rx_flag = 0;
		  uart_comms();
	  }

	  // Seven Segment
	  if(systick_flag == 1){
 8005446:	4929      	ldr	r1, [pc, #164]	; (80054ec <mainLoop+0xb0>)
		  systick_flag = 0;
		  i2c_counter += 1;
 8005448:	4a29      	ldr	r2, [pc, #164]	; (80054f0 <mainLoop+0xb4>)
	  if(systick_flag == 1){
 800544a:	780b      	ldrb	r3, [r1, #0]
 800544c:	2b01      	cmp	r3, #1
		  i2c_counter += 1;
 800544e:	6813      	ldr	r3, [r2, #0]
	  if(systick_flag == 1){
 8005450:	d033      	beq.n	80054ba <mainLoop+0x7e>
//		  seven_segment();
//		  HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
	  }

	  if(i2c_counter == 150){
 8005452:	2b96      	cmp	r3, #150	; 0x96
		  i2c_counter = 0;
 8005454:	bf04      	itt	eq
 8005456:	2300      	moveq	r3, #0
 8005458:	6013      	streq	r3, [r2, #0]
//		  handleEvents();
	  }

	  // ADC conversion
	  if(adc_flag == 1){
 800545a:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <mainLoop+0xb8>)
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	2a01      	cmp	r2, #1
		  adc_flag = 0;
 8005460:	bf04      	itt	eq
 8005462:	2200      	moveq	r2, #0
 8005464:	701a      	strbeq	r2, [r3, #0]
//		  adc_comms();
	  }
	  // Nothing at the moment
	  if(touch_flag == 1 ){
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <mainLoop+0xbc>)
 8005468:	781a      	ldrb	r2, [r3, #0]
 800546a:	2a01      	cmp	r2, #1
		  touch_flag = 0;
 800546c:	bf04      	itt	eq
 800546e:	2200      	moveq	r2, #0
 8005470:	701a      	strbeq	r2, [r3, #0]
		  // do something
	  }
	  // scheduling of heating and RTC
	  if(RTC_timer_flag == 1){
 8005472:	4b22      	ldr	r3, [pc, #136]	; (80054fc <mainLoop+0xc0>)
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	2a01      	cmp	r2, #1
 8005478:	d011      	beq.n	800549e <mainLoop+0x62>
			  heating_scheduling();
		  }
	  }

	  // Writing to FLASH
	  if(flash_flag){
 800547a:	4b21      	ldr	r3, [pc, #132]	; (8005500 <mainLoop+0xc4>)
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	b14a      	cbz	r2, 8005494 <mainLoop+0x58>
		  flash_flag = 0;
		  flash_counter += 1;
 8005480:	4920      	ldr	r1, [pc, #128]	; (8005504 <mainLoop+0xc8>)
 8005482:	680a      	ldr	r2, [r1, #0]
		  if(flash_counter == 10000){
 8005484:	f242 7410 	movw	r4, #10000	; 0x2710
		  flash_counter += 1;
 8005488:	3201      	adds	r2, #1
		  flash_flag = 0;
 800548a:	2000      	movs	r0, #0
		  if(flash_counter == 10000){
 800548c:	42a2      	cmp	r2, r4
		  flash_flag = 0;
 800548e:	7018      	strb	r0, [r3, #0]
		  if(flash_counter == 10000){
 8005490:	d018      	beq.n	80054c4 <mainLoop+0x88>
		  flash_counter += 1;
 8005492:	600a      	str	r2, [r1, #0]
			  write2Flash();
		  	  }
		  }
	  }
	  // Pumping is occurring
	  if(pump_flag == 1){
 8005494:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <mainLoop+0xcc>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d01b      	beq.n	80054d4 <mainLoop+0x98>
 800549c:	bd10      	pop	{r4, pc}
		  fake_RTC_timer += 1;
 800549e:	491b      	ldr	r1, [pc, #108]	; (800550c <mainLoop+0xd0>)
 80054a0:	880a      	ldrh	r2, [r1, #0]
 80054a2:	3201      	adds	r2, #1
 80054a4:	b292      	uxth	r2, r2
		  RTC_timer_flag = 0;
 80054a6:	2000      	movs	r0, #0
		  if(fake_RTC_timer == 1000){
 80054a8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
		  fake_RTC_timer += 1;
 80054ac:	800a      	strh	r2, [r1, #0]
		  RTC_timer_flag = 0;
 80054ae:	7018      	strb	r0, [r3, #0]
		  if(fake_RTC_timer == 1000){
 80054b0:	d1e3      	bne.n	800547a <mainLoop+0x3e>
			  fake_RTC_timer = 0;
 80054b2:	8008      	strh	r0, [r1, #0]
			  heating_scheduling();
 80054b4:	f7fe faa0 	bl	80039f8 <heating_scheduling>
 80054b8:	e7df      	b.n	800547a <mainLoop+0x3e>
		  systick_flag = 0;
 80054ba:	2000      	movs	r0, #0
		  i2c_counter += 1;
 80054bc:	3301      	adds	r3, #1
 80054be:	6013      	str	r3, [r2, #0]
		  systick_flag = 0;
 80054c0:	7008      	strb	r0, [r1, #0]
 80054c2:	e7c6      	b.n	8005452 <mainLoop+0x16>
			  if(enableFlashLogging){
 80054c4:	4b12      	ldr	r3, [pc, #72]	; (8005510 <mainLoop+0xd4>)
			  flash_counter = 0;
 80054c6:	6008      	str	r0, [r1, #0]
			  if(enableFlashLogging){
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0e2      	beq.n	8005494 <mainLoop+0x58>
			  write2Flash();
 80054ce:	f7fd ffe3 	bl	8003498 <write2Flash>
 80054d2:	e7df      	b.n	8005494 <mainLoop+0x58>
		  liters_pumped();
	  }



}
 80054d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  liters_pumped();
 80054d8:	f7fe beae 	b.w	8004238 <liters_pumped>
		  rx_flag = 0;
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 80054e0:	f7ff fb0e 	bl	8004b00 <uart_comms>
 80054e4:	e7af      	b.n	8005446 <mainLoop+0xa>
 80054e6:	bf00      	nop
 80054e8:	200002b1 	.word	0x200002b1
 80054ec:	200002bd 	.word	0x200002bd
 80054f0:	20000294 	.word	0x20000294
 80054f4:	2000024d 	.word	0x2000024d
 80054f8:	200002d0 	.word	0x200002d0
 80054fc:	2000024c 	.word	0x2000024c
 8005500:	20000270 	.word	0x20000270
 8005504:	20000268 	.word	0x20000268
 8005508:	200002a8 	.word	0x200002a8
 800550c:	20000266 	.word	0x20000266
 8005510:	20000264 	.word	0x20000264

08005514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800554c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005518:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800551a:	e003      	b.n	8005524 <LoopCopyDataInit>

0800551c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800551e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005520:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005522:	3104      	adds	r1, #4

08005524 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005524:	480b      	ldr	r0, [pc, #44]	; (8005554 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005528:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800552a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800552c:	d3f6      	bcc.n	800551c <CopyDataInit>
	ldr	r2, =_sbss
 800552e:	4a0b      	ldr	r2, [pc, #44]	; (800555c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005530:	e002      	b.n	8005538 <LoopFillZerobss>

08005532 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005532:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005534:	f842 3b04 	str.w	r3, [r2], #4

08005538 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <LoopForever+0x16>)
	cmp	r2, r3
 800553a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800553c:	d3f9      	bcc.n	8005532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800553e:	f7ff faa7 	bl	8004a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005542:	f000 f811 	bl	8005568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005546:	f7ff f8e7 	bl	8004718 <main>

0800554a <LoopForever>:

LoopForever:
    b LoopForever
 800554a:	e7fe      	b.n	800554a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800554c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8005550:	080062f4 	.word	0x080062f4
	ldr	r0, =_sdata
 8005554:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005558:	20000224 	.word	0x20000224
	ldr	r2, =_sbss
 800555c:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 8005560:	200005c4 	.word	0x200005c4

08005564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005564:	e7fe      	b.n	8005564 <ADC1_2_IRQHandler>
	...

08005568 <__libc_init_array>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4e0d      	ldr	r6, [pc, #52]	; (80055a0 <__libc_init_array+0x38>)
 800556c:	4c0d      	ldr	r4, [pc, #52]	; (80055a4 <__libc_init_array+0x3c>)
 800556e:	1ba4      	subs	r4, r4, r6
 8005570:	10a4      	asrs	r4, r4, #2
 8005572:	2500      	movs	r5, #0
 8005574:	42a5      	cmp	r5, r4
 8005576:	d109      	bne.n	800558c <__libc_init_array+0x24>
 8005578:	4e0b      	ldr	r6, [pc, #44]	; (80055a8 <__libc_init_array+0x40>)
 800557a:	4c0c      	ldr	r4, [pc, #48]	; (80055ac <__libc_init_array+0x44>)
 800557c:	f000 fdb8 	bl	80060f0 <_init>
 8005580:	1ba4      	subs	r4, r4, r6
 8005582:	10a4      	asrs	r4, r4, #2
 8005584:	2500      	movs	r5, #0
 8005586:	42a5      	cmp	r5, r4
 8005588:	d105      	bne.n	8005596 <__libc_init_array+0x2e>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005590:	4798      	blx	r3
 8005592:	3501      	adds	r5, #1
 8005594:	e7ee      	b.n	8005574 <__libc_init_array+0xc>
 8005596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800559a:	4798      	blx	r3
 800559c:	3501      	adds	r5, #1
 800559e:	e7f2      	b.n	8005586 <__libc_init_array+0x1e>
 80055a0:	080062ec 	.word	0x080062ec
 80055a4:	080062ec 	.word	0x080062ec
 80055a8:	080062ec 	.word	0x080062ec
 80055ac:	080062f0 	.word	0x080062f0

080055b0 <__itoa>:
 80055b0:	1e93      	subs	r3, r2, #2
 80055b2:	2b22      	cmp	r3, #34	; 0x22
 80055b4:	b510      	push	{r4, lr}
 80055b6:	460c      	mov	r4, r1
 80055b8:	d904      	bls.n	80055c4 <__itoa+0x14>
 80055ba:	2300      	movs	r3, #0
 80055bc:	700b      	strb	r3, [r1, #0]
 80055be:	461c      	mov	r4, r3
 80055c0:	4620      	mov	r0, r4
 80055c2:	bd10      	pop	{r4, pc}
 80055c4:	2a0a      	cmp	r2, #10
 80055c6:	d109      	bne.n	80055dc <__itoa+0x2c>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	da07      	bge.n	80055dc <__itoa+0x2c>
 80055cc:	232d      	movs	r3, #45	; 0x2d
 80055ce:	700b      	strb	r3, [r1, #0]
 80055d0:	4240      	negs	r0, r0
 80055d2:	2101      	movs	r1, #1
 80055d4:	4421      	add	r1, r4
 80055d6:	f000 f9eb 	bl	80059b0 <__utoa>
 80055da:	e7f1      	b.n	80055c0 <__itoa+0x10>
 80055dc:	2100      	movs	r1, #0
 80055de:	e7f9      	b.n	80055d4 <__itoa+0x24>

080055e0 <itoa>:
 80055e0:	f7ff bfe6 	b.w	80055b0 <__itoa>

080055e4 <malloc>:
 80055e4:	4b02      	ldr	r3, [pc, #8]	; (80055f0 <malloc+0xc>)
 80055e6:	4601      	mov	r1, r0
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	f000 b865 	b.w	80056b8 <_malloc_r>
 80055ee:	bf00      	nop
 80055f0:	20000054 	.word	0x20000054

080055f4 <memcpy>:
 80055f4:	b510      	push	{r4, lr}
 80055f6:	1e43      	subs	r3, r0, #1
 80055f8:	440a      	add	r2, r1
 80055fa:	4291      	cmp	r1, r2
 80055fc:	d100      	bne.n	8005600 <memcpy+0xc>
 80055fe:	bd10      	pop	{r4, pc}
 8005600:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005604:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005608:	e7f7      	b.n	80055fa <memcpy+0x6>

0800560a <memset>:
 800560a:	4402      	add	r2, r0
 800560c:	4603      	mov	r3, r0
 800560e:	4293      	cmp	r3, r2
 8005610:	d100      	bne.n	8005614 <memset+0xa>
 8005612:	4770      	bx	lr
 8005614:	f803 1b01 	strb.w	r1, [r3], #1
 8005618:	e7f9      	b.n	800560e <memset+0x4>
	...

0800561c <_free_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4605      	mov	r5, r0
 8005620:	2900      	cmp	r1, #0
 8005622:	d045      	beq.n	80056b0 <_free_r+0x94>
 8005624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005628:	1f0c      	subs	r4, r1, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	bfb8      	it	lt
 800562e:	18e4      	addlt	r4, r4, r3
 8005630:	f000 fa13 	bl	8005a5a <__malloc_lock>
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <_free_r+0x98>)
 8005636:	6813      	ldr	r3, [r2, #0]
 8005638:	4610      	mov	r0, r2
 800563a:	b933      	cbnz	r3, 800564a <_free_r+0x2e>
 800563c:	6063      	str	r3, [r4, #4]
 800563e:	6014      	str	r4, [r2, #0]
 8005640:	4628      	mov	r0, r5
 8005642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005646:	f000 ba09 	b.w	8005a5c <__malloc_unlock>
 800564a:	42a3      	cmp	r3, r4
 800564c:	d90c      	bls.n	8005668 <_free_r+0x4c>
 800564e:	6821      	ldr	r1, [r4, #0]
 8005650:	1862      	adds	r2, r4, r1
 8005652:	4293      	cmp	r3, r2
 8005654:	bf04      	itt	eq
 8005656:	681a      	ldreq	r2, [r3, #0]
 8005658:	685b      	ldreq	r3, [r3, #4]
 800565a:	6063      	str	r3, [r4, #4]
 800565c:	bf04      	itt	eq
 800565e:	1852      	addeq	r2, r2, r1
 8005660:	6022      	streq	r2, [r4, #0]
 8005662:	6004      	str	r4, [r0, #0]
 8005664:	e7ec      	b.n	8005640 <_free_r+0x24>
 8005666:	4613      	mov	r3, r2
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	b10a      	cbz	r2, 8005670 <_free_r+0x54>
 800566c:	42a2      	cmp	r2, r4
 800566e:	d9fa      	bls.n	8005666 <_free_r+0x4a>
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	1858      	adds	r0, r3, r1
 8005674:	42a0      	cmp	r0, r4
 8005676:	d10b      	bne.n	8005690 <_free_r+0x74>
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	4401      	add	r1, r0
 800567c:	1858      	adds	r0, r3, r1
 800567e:	4282      	cmp	r2, r0
 8005680:	6019      	str	r1, [r3, #0]
 8005682:	d1dd      	bne.n	8005640 <_free_r+0x24>
 8005684:	6810      	ldr	r0, [r2, #0]
 8005686:	6852      	ldr	r2, [r2, #4]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	4401      	add	r1, r0
 800568c:	6019      	str	r1, [r3, #0]
 800568e:	e7d7      	b.n	8005640 <_free_r+0x24>
 8005690:	d902      	bls.n	8005698 <_free_r+0x7c>
 8005692:	230c      	movs	r3, #12
 8005694:	602b      	str	r3, [r5, #0]
 8005696:	e7d3      	b.n	8005640 <_free_r+0x24>
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	1821      	adds	r1, r4, r0
 800569c:	428a      	cmp	r2, r1
 800569e:	bf04      	itt	eq
 80056a0:	6811      	ldreq	r1, [r2, #0]
 80056a2:	6852      	ldreq	r2, [r2, #4]
 80056a4:	6062      	str	r2, [r4, #4]
 80056a6:	bf04      	itt	eq
 80056a8:	1809      	addeq	r1, r1, r0
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	605c      	str	r4, [r3, #4]
 80056ae:	e7c7      	b.n	8005640 <_free_r+0x24>
 80056b0:	bd38      	pop	{r3, r4, r5, pc}
 80056b2:	bf00      	nop
 80056b4:	200002f4 	.word	0x200002f4

080056b8 <_malloc_r>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	1ccd      	adds	r5, r1, #3
 80056bc:	f025 0503 	bic.w	r5, r5, #3
 80056c0:	3508      	adds	r5, #8
 80056c2:	2d0c      	cmp	r5, #12
 80056c4:	bf38      	it	cc
 80056c6:	250c      	movcc	r5, #12
 80056c8:	2d00      	cmp	r5, #0
 80056ca:	4606      	mov	r6, r0
 80056cc:	db01      	blt.n	80056d2 <_malloc_r+0x1a>
 80056ce:	42a9      	cmp	r1, r5
 80056d0:	d903      	bls.n	80056da <_malloc_r+0x22>
 80056d2:	230c      	movs	r3, #12
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	2000      	movs	r0, #0
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
 80056da:	f000 f9be 	bl	8005a5a <__malloc_lock>
 80056de:	4a23      	ldr	r2, [pc, #140]	; (800576c <_malloc_r+0xb4>)
 80056e0:	6814      	ldr	r4, [r2, #0]
 80056e2:	4621      	mov	r1, r4
 80056e4:	b991      	cbnz	r1, 800570c <_malloc_r+0x54>
 80056e6:	4c22      	ldr	r4, [pc, #136]	; (8005770 <_malloc_r+0xb8>)
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	b91b      	cbnz	r3, 80056f4 <_malloc_r+0x3c>
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f841 	bl	8005774 <_sbrk_r>
 80056f2:	6020      	str	r0, [r4, #0]
 80056f4:	4629      	mov	r1, r5
 80056f6:	4630      	mov	r0, r6
 80056f8:	f000 f83c 	bl	8005774 <_sbrk_r>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d126      	bne.n	800574e <_malloc_r+0x96>
 8005700:	230c      	movs	r3, #12
 8005702:	6033      	str	r3, [r6, #0]
 8005704:	4630      	mov	r0, r6
 8005706:	f000 f9a9 	bl	8005a5c <__malloc_unlock>
 800570a:	e7e4      	b.n	80056d6 <_malloc_r+0x1e>
 800570c:	680b      	ldr	r3, [r1, #0]
 800570e:	1b5b      	subs	r3, r3, r5
 8005710:	d41a      	bmi.n	8005748 <_malloc_r+0x90>
 8005712:	2b0b      	cmp	r3, #11
 8005714:	d90f      	bls.n	8005736 <_malloc_r+0x7e>
 8005716:	600b      	str	r3, [r1, #0]
 8005718:	50cd      	str	r5, [r1, r3]
 800571a:	18cc      	adds	r4, r1, r3
 800571c:	4630      	mov	r0, r6
 800571e:	f000 f99d 	bl	8005a5c <__malloc_unlock>
 8005722:	f104 000b 	add.w	r0, r4, #11
 8005726:	1d23      	adds	r3, r4, #4
 8005728:	f020 0007 	bic.w	r0, r0, #7
 800572c:	1ac3      	subs	r3, r0, r3
 800572e:	d01b      	beq.n	8005768 <_malloc_r+0xb0>
 8005730:	425a      	negs	r2, r3
 8005732:	50e2      	str	r2, [r4, r3]
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	428c      	cmp	r4, r1
 8005738:	bf0d      	iteet	eq
 800573a:	6863      	ldreq	r3, [r4, #4]
 800573c:	684b      	ldrne	r3, [r1, #4]
 800573e:	6063      	strne	r3, [r4, #4]
 8005740:	6013      	streq	r3, [r2, #0]
 8005742:	bf18      	it	ne
 8005744:	460c      	movne	r4, r1
 8005746:	e7e9      	b.n	800571c <_malloc_r+0x64>
 8005748:	460c      	mov	r4, r1
 800574a:	6849      	ldr	r1, [r1, #4]
 800574c:	e7ca      	b.n	80056e4 <_malloc_r+0x2c>
 800574e:	1cc4      	adds	r4, r0, #3
 8005750:	f024 0403 	bic.w	r4, r4, #3
 8005754:	42a0      	cmp	r0, r4
 8005756:	d005      	beq.n	8005764 <_malloc_r+0xac>
 8005758:	1a21      	subs	r1, r4, r0
 800575a:	4630      	mov	r0, r6
 800575c:	f000 f80a 	bl	8005774 <_sbrk_r>
 8005760:	3001      	adds	r0, #1
 8005762:	d0cd      	beq.n	8005700 <_malloc_r+0x48>
 8005764:	6025      	str	r5, [r4, #0]
 8005766:	e7d9      	b.n	800571c <_malloc_r+0x64>
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	bf00      	nop
 800576c:	200002f4 	.word	0x200002f4
 8005770:	200002f8 	.word	0x200002f8

08005774 <_sbrk_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4c06      	ldr	r4, [pc, #24]	; (8005790 <_sbrk_r+0x1c>)
 8005778:	2300      	movs	r3, #0
 800577a:	4605      	mov	r5, r0
 800577c:	4608      	mov	r0, r1
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	f000 fca8 	bl	80060d4 <_sbrk>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_sbrk_r+0x1a>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	b103      	cbz	r3, 800578e <_sbrk_r+0x1a>
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	200005c0 	.word	0x200005c0

08005794 <siprintf>:
 8005794:	b40e      	push	{r1, r2, r3}
 8005796:	b500      	push	{lr}
 8005798:	b09c      	sub	sp, #112	; 0x70
 800579a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800579e:	ab1d      	add	r3, sp, #116	; 0x74
 80057a0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80057a4:	9002      	str	r0, [sp, #8]
 80057a6:	9006      	str	r0, [sp, #24]
 80057a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057ac:	480a      	ldr	r0, [pc, #40]	; (80057d8 <siprintf+0x44>)
 80057ae:	9104      	str	r1, [sp, #16]
 80057b0:	9107      	str	r1, [sp, #28]
 80057b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80057b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 80057be:	6800      	ldr	r0, [r0, #0]
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	a902      	add	r1, sp, #8
 80057c4:	f000 f9a6 	bl	8005b14 <_svfiprintf_r>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	b01c      	add	sp, #112	; 0x70
 80057d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d4:	b003      	add	sp, #12
 80057d6:	4770      	bx	lr
 80057d8:	20000054 	.word	0x20000054

080057dc <strtok>:
 80057dc:	4b13      	ldr	r3, [pc, #76]	; (800582c <strtok+0x50>)
 80057de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e2:	681d      	ldr	r5, [r3, #0]
 80057e4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80057e6:	4606      	mov	r6, r0
 80057e8:	460f      	mov	r7, r1
 80057ea:	b9b4      	cbnz	r4, 800581a <strtok+0x3e>
 80057ec:	2050      	movs	r0, #80	; 0x50
 80057ee:	f7ff fef9 	bl	80055e4 <malloc>
 80057f2:	65a8      	str	r0, [r5, #88]	; 0x58
 80057f4:	6004      	str	r4, [r0, #0]
 80057f6:	6044      	str	r4, [r0, #4]
 80057f8:	6084      	str	r4, [r0, #8]
 80057fa:	60c4      	str	r4, [r0, #12]
 80057fc:	6104      	str	r4, [r0, #16]
 80057fe:	6144      	str	r4, [r0, #20]
 8005800:	6184      	str	r4, [r0, #24]
 8005802:	6284      	str	r4, [r0, #40]	; 0x28
 8005804:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005806:	6304      	str	r4, [r0, #48]	; 0x30
 8005808:	6344      	str	r4, [r0, #52]	; 0x34
 800580a:	6384      	str	r4, [r0, #56]	; 0x38
 800580c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800580e:	6404      	str	r4, [r0, #64]	; 0x40
 8005810:	6444      	str	r4, [r0, #68]	; 0x44
 8005812:	6484      	str	r4, [r0, #72]	; 0x48
 8005814:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005816:	7704      	strb	r4, [r0, #28]
 8005818:	6244      	str	r4, [r0, #36]	; 0x24
 800581a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800581c:	4639      	mov	r1, r7
 800581e:	4630      	mov	r0, r6
 8005820:	2301      	movs	r3, #1
 8005822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005826:	f000 b803 	b.w	8005830 <__strtok_r>
 800582a:	bf00      	nop
 800582c:	20000054 	.word	0x20000054

08005830 <__strtok_r>:
 8005830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005832:	b918      	cbnz	r0, 800583c <__strtok_r+0xc>
 8005834:	6810      	ldr	r0, [r2, #0]
 8005836:	b908      	cbnz	r0, 800583c <__strtok_r+0xc>
 8005838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800583a:	4620      	mov	r0, r4
 800583c:	4604      	mov	r4, r0
 800583e:	460f      	mov	r7, r1
 8005840:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005844:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005848:	b91e      	cbnz	r6, 8005852 <__strtok_r+0x22>
 800584a:	b965      	cbnz	r5, 8005866 <__strtok_r+0x36>
 800584c:	6015      	str	r5, [r2, #0]
 800584e:	4628      	mov	r0, r5
 8005850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005852:	42b5      	cmp	r5, r6
 8005854:	d1f6      	bne.n	8005844 <__strtok_r+0x14>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1ef      	bne.n	800583a <__strtok_r+0xa>
 800585a:	6014      	str	r4, [r2, #0]
 800585c:	7003      	strb	r3, [r0, #0]
 800585e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005860:	461c      	mov	r4, r3
 8005862:	e00c      	b.n	800587e <__strtok_r+0x4e>
 8005864:	b915      	cbnz	r5, 800586c <__strtok_r+0x3c>
 8005866:	f814 3b01 	ldrb.w	r3, [r4], #1
 800586a:	460e      	mov	r6, r1
 800586c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005870:	42ab      	cmp	r3, r5
 8005872:	d1f7      	bne.n	8005864 <__strtok_r+0x34>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f3      	beq.n	8005860 <__strtok_r+0x30>
 8005878:	2300      	movs	r3, #0
 800587a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800587e:	6014      	str	r4, [r2, #0]
 8005880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005882 <_strtol_l.isra.0>:
 8005882:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005886:	4680      	mov	r8, r0
 8005888:	4689      	mov	r9, r1
 800588a:	4692      	mov	sl, r2
 800588c:	461f      	mov	r7, r3
 800588e:	468b      	mov	fp, r1
 8005890:	465d      	mov	r5, fp
 8005892:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005894:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005898:	f000 f8ca 	bl	8005a30 <__locale_ctype_ptr_l>
 800589c:	4420      	add	r0, r4
 800589e:	7846      	ldrb	r6, [r0, #1]
 80058a0:	f016 0608 	ands.w	r6, r6, #8
 80058a4:	d10b      	bne.n	80058be <_strtol_l.isra.0+0x3c>
 80058a6:	2c2d      	cmp	r4, #45	; 0x2d
 80058a8:	d10b      	bne.n	80058c2 <_strtol_l.isra.0+0x40>
 80058aa:	782c      	ldrb	r4, [r5, #0]
 80058ac:	2601      	movs	r6, #1
 80058ae:	f10b 0502 	add.w	r5, fp, #2
 80058b2:	b167      	cbz	r7, 80058ce <_strtol_l.isra.0+0x4c>
 80058b4:	2f10      	cmp	r7, #16
 80058b6:	d114      	bne.n	80058e2 <_strtol_l.isra.0+0x60>
 80058b8:	2c30      	cmp	r4, #48	; 0x30
 80058ba:	d00a      	beq.n	80058d2 <_strtol_l.isra.0+0x50>
 80058bc:	e011      	b.n	80058e2 <_strtol_l.isra.0+0x60>
 80058be:	46ab      	mov	fp, r5
 80058c0:	e7e6      	b.n	8005890 <_strtol_l.isra.0+0xe>
 80058c2:	2c2b      	cmp	r4, #43	; 0x2b
 80058c4:	bf04      	itt	eq
 80058c6:	782c      	ldrbeq	r4, [r5, #0]
 80058c8:	f10b 0502 	addeq.w	r5, fp, #2
 80058cc:	e7f1      	b.n	80058b2 <_strtol_l.isra.0+0x30>
 80058ce:	2c30      	cmp	r4, #48	; 0x30
 80058d0:	d127      	bne.n	8005922 <_strtol_l.isra.0+0xa0>
 80058d2:	782b      	ldrb	r3, [r5, #0]
 80058d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058d8:	2b58      	cmp	r3, #88	; 0x58
 80058da:	d14b      	bne.n	8005974 <_strtol_l.isra.0+0xf2>
 80058dc:	786c      	ldrb	r4, [r5, #1]
 80058de:	2710      	movs	r7, #16
 80058e0:	3502      	adds	r5, #2
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	bf0c      	ite	eq
 80058e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80058ea:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80058ee:	2200      	movs	r2, #0
 80058f0:	fbb1 fef7 	udiv	lr, r1, r7
 80058f4:	4610      	mov	r0, r2
 80058f6:	fb07 1c1e 	mls	ip, r7, lr, r1
 80058fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80058fe:	2b09      	cmp	r3, #9
 8005900:	d811      	bhi.n	8005926 <_strtol_l.isra.0+0xa4>
 8005902:	461c      	mov	r4, r3
 8005904:	42a7      	cmp	r7, r4
 8005906:	dd1d      	ble.n	8005944 <_strtol_l.isra.0+0xc2>
 8005908:	1c53      	adds	r3, r2, #1
 800590a:	d007      	beq.n	800591c <_strtol_l.isra.0+0x9a>
 800590c:	4586      	cmp	lr, r0
 800590e:	d316      	bcc.n	800593e <_strtol_l.isra.0+0xbc>
 8005910:	d101      	bne.n	8005916 <_strtol_l.isra.0+0x94>
 8005912:	45a4      	cmp	ip, r4
 8005914:	db13      	blt.n	800593e <_strtol_l.isra.0+0xbc>
 8005916:	fb00 4007 	mla	r0, r0, r7, r4
 800591a:	2201      	movs	r2, #1
 800591c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005920:	e7eb      	b.n	80058fa <_strtol_l.isra.0+0x78>
 8005922:	270a      	movs	r7, #10
 8005924:	e7dd      	b.n	80058e2 <_strtol_l.isra.0+0x60>
 8005926:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800592a:	2b19      	cmp	r3, #25
 800592c:	d801      	bhi.n	8005932 <_strtol_l.isra.0+0xb0>
 800592e:	3c37      	subs	r4, #55	; 0x37
 8005930:	e7e8      	b.n	8005904 <_strtol_l.isra.0+0x82>
 8005932:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005936:	2b19      	cmp	r3, #25
 8005938:	d804      	bhi.n	8005944 <_strtol_l.isra.0+0xc2>
 800593a:	3c57      	subs	r4, #87	; 0x57
 800593c:	e7e2      	b.n	8005904 <_strtol_l.isra.0+0x82>
 800593e:	f04f 32ff 	mov.w	r2, #4294967295
 8005942:	e7eb      	b.n	800591c <_strtol_l.isra.0+0x9a>
 8005944:	1c53      	adds	r3, r2, #1
 8005946:	d108      	bne.n	800595a <_strtol_l.isra.0+0xd8>
 8005948:	2322      	movs	r3, #34	; 0x22
 800594a:	f8c8 3000 	str.w	r3, [r8]
 800594e:	4608      	mov	r0, r1
 8005950:	f1ba 0f00 	cmp.w	sl, #0
 8005954:	d107      	bne.n	8005966 <_strtol_l.isra.0+0xe4>
 8005956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595a:	b106      	cbz	r6, 800595e <_strtol_l.isra.0+0xdc>
 800595c:	4240      	negs	r0, r0
 800595e:	f1ba 0f00 	cmp.w	sl, #0
 8005962:	d00c      	beq.n	800597e <_strtol_l.isra.0+0xfc>
 8005964:	b122      	cbz	r2, 8005970 <_strtol_l.isra.0+0xee>
 8005966:	3d01      	subs	r5, #1
 8005968:	f8ca 5000 	str.w	r5, [sl]
 800596c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005970:	464d      	mov	r5, r9
 8005972:	e7f9      	b.n	8005968 <_strtol_l.isra.0+0xe6>
 8005974:	2430      	movs	r4, #48	; 0x30
 8005976:	2f00      	cmp	r7, #0
 8005978:	d1b3      	bne.n	80058e2 <_strtol_l.isra.0+0x60>
 800597a:	2708      	movs	r7, #8
 800597c:	e7b1      	b.n	80058e2 <_strtol_l.isra.0+0x60>
 800597e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005984 <strtol>:
 8005984:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <strtol+0x24>)
 8005986:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005988:	681c      	ldr	r4, [r3, #0]
 800598a:	4d08      	ldr	r5, [pc, #32]	; (80059ac <strtol+0x28>)
 800598c:	6a23      	ldr	r3, [r4, #32]
 800598e:	2b00      	cmp	r3, #0
 8005990:	bf08      	it	eq
 8005992:	462b      	moveq	r3, r5
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	4613      	mov	r3, r2
 8005998:	460a      	mov	r2, r1
 800599a:	4601      	mov	r1, r0
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff ff70 	bl	8005882 <_strtol_l.isra.0>
 80059a2:	b003      	add	sp, #12
 80059a4:	bd30      	pop	{r4, r5, pc}
 80059a6:	bf00      	nop
 80059a8:	20000054 	.word	0x20000054
 80059ac:	200000b8 	.word	0x200000b8

080059b0 <__utoa>:
 80059b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b2:	4c1e      	ldr	r4, [pc, #120]	; (8005a2c <__utoa+0x7c>)
 80059b4:	b08b      	sub	sp, #44	; 0x2c
 80059b6:	4603      	mov	r3, r0
 80059b8:	460f      	mov	r7, r1
 80059ba:	466d      	mov	r5, sp
 80059bc:	f104 0e20 	add.w	lr, r4, #32
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	6861      	ldr	r1, [r4, #4]
 80059c4:	462e      	mov	r6, r5
 80059c6:	c603      	stmia	r6!, {r0, r1}
 80059c8:	3408      	adds	r4, #8
 80059ca:	4574      	cmp	r4, lr
 80059cc:	4635      	mov	r5, r6
 80059ce:	d1f7      	bne.n	80059c0 <__utoa+0x10>
 80059d0:	7921      	ldrb	r1, [r4, #4]
 80059d2:	7131      	strb	r1, [r6, #4]
 80059d4:	1e91      	subs	r1, r2, #2
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	6030      	str	r0, [r6, #0]
 80059da:	2922      	cmp	r1, #34	; 0x22
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	d904      	bls.n	80059ec <__utoa+0x3c>
 80059e2:	7039      	strb	r1, [r7, #0]
 80059e4:	460f      	mov	r7, r1
 80059e6:	4638      	mov	r0, r7
 80059e8:	b00b      	add	sp, #44	; 0x2c
 80059ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ec:	1e78      	subs	r0, r7, #1
 80059ee:	4606      	mov	r6, r0
 80059f0:	fbb3 f5f2 	udiv	r5, r3, r2
 80059f4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80059f8:	fb02 3315 	mls	r3, r2, r5, r3
 80059fc:	4473      	add	r3, lr
 80059fe:	1c4c      	adds	r4, r1, #1
 8005a00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005a04:	f806 3f01 	strb.w	r3, [r6, #1]!
 8005a08:	462b      	mov	r3, r5
 8005a0a:	b965      	cbnz	r5, 8005a26 <__utoa+0x76>
 8005a0c:	553d      	strb	r5, [r7, r4]
 8005a0e:	187a      	adds	r2, r7, r1
 8005a10:	1acc      	subs	r4, r1, r3
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	dae7      	bge.n	80059e6 <__utoa+0x36>
 8005a16:	7844      	ldrb	r4, [r0, #1]
 8005a18:	7815      	ldrb	r5, [r2, #0]
 8005a1a:	f800 5f01 	strb.w	r5, [r0, #1]!
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f802 4901 	strb.w	r4, [r2], #-1
 8005a24:	e7f4      	b.n	8005a10 <__utoa+0x60>
 8005a26:	4621      	mov	r1, r4
 8005a28:	e7e2      	b.n	80059f0 <__utoa+0x40>
 8005a2a:	bf00      	nop
 8005a2c:	08006188 	.word	0x08006188

08005a30 <__locale_ctype_ptr_l>:
 8005a30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005a34:	4770      	bx	lr

08005a36 <__ascii_mbtowc>:
 8005a36:	b082      	sub	sp, #8
 8005a38:	b901      	cbnz	r1, 8005a3c <__ascii_mbtowc+0x6>
 8005a3a:	a901      	add	r1, sp, #4
 8005a3c:	b142      	cbz	r2, 8005a50 <__ascii_mbtowc+0x1a>
 8005a3e:	b14b      	cbz	r3, 8005a54 <__ascii_mbtowc+0x1e>
 8005a40:	7813      	ldrb	r3, [r2, #0]
 8005a42:	600b      	str	r3, [r1, #0]
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	1c10      	adds	r0, r2, #0
 8005a48:	bf18      	it	ne
 8005a4a:	2001      	movne	r0, #1
 8005a4c:	b002      	add	sp, #8
 8005a4e:	4770      	bx	lr
 8005a50:	4610      	mov	r0, r2
 8005a52:	e7fb      	b.n	8005a4c <__ascii_mbtowc+0x16>
 8005a54:	f06f 0001 	mvn.w	r0, #1
 8005a58:	e7f8      	b.n	8005a4c <__ascii_mbtowc+0x16>

08005a5a <__malloc_lock>:
 8005a5a:	4770      	bx	lr

08005a5c <__malloc_unlock>:
 8005a5c:	4770      	bx	lr

08005a5e <__ssputs_r>:
 8005a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a62:	688e      	ldr	r6, [r1, #8]
 8005a64:	429e      	cmp	r6, r3
 8005a66:	4682      	mov	sl, r0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	4691      	mov	r9, r2
 8005a6c:	4698      	mov	r8, r3
 8005a6e:	d835      	bhi.n	8005adc <__ssputs_r+0x7e>
 8005a70:	898a      	ldrh	r2, [r1, #12]
 8005a72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a76:	d031      	beq.n	8005adc <__ssputs_r+0x7e>
 8005a78:	6825      	ldr	r5, [r4, #0]
 8005a7a:	6909      	ldr	r1, [r1, #16]
 8005a7c:	1a6f      	subs	r7, r5, r1
 8005a7e:	6965      	ldr	r5, [r4, #20]
 8005a80:	2302      	movs	r3, #2
 8005a82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a86:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a8a:	f108 0301 	add.w	r3, r8, #1
 8005a8e:	443b      	add	r3, r7
 8005a90:	429d      	cmp	r5, r3
 8005a92:	bf38      	it	cc
 8005a94:	461d      	movcc	r5, r3
 8005a96:	0553      	lsls	r3, r2, #21
 8005a98:	d531      	bpl.n	8005afe <__ssputs_r+0xa0>
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f7ff fe0c 	bl	80056b8 <_malloc_r>
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	b950      	cbnz	r0, 8005aba <__ssputs_r+0x5c>
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	f8ca 3000 	str.w	r3, [sl]
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aba:	463a      	mov	r2, r7
 8005abc:	6921      	ldr	r1, [r4, #16]
 8005abe:	f7ff fd99 	bl	80055f4 <memcpy>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005acc:	81a3      	strh	r3, [r4, #12]
 8005ace:	6126      	str	r6, [r4, #16]
 8005ad0:	6165      	str	r5, [r4, #20]
 8005ad2:	443e      	add	r6, r7
 8005ad4:	1bed      	subs	r5, r5, r7
 8005ad6:	6026      	str	r6, [r4, #0]
 8005ad8:	60a5      	str	r5, [r4, #8]
 8005ada:	4646      	mov	r6, r8
 8005adc:	4546      	cmp	r6, r8
 8005ade:	bf28      	it	cs
 8005ae0:	4646      	movcs	r6, r8
 8005ae2:	4632      	mov	r2, r6
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	6820      	ldr	r0, [r4, #0]
 8005ae8:	f000 faab 	bl	8006042 <memmove>
 8005aec:	68a3      	ldr	r3, [r4, #8]
 8005aee:	1b9b      	subs	r3, r3, r6
 8005af0:	60a3      	str	r3, [r4, #8]
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	441e      	add	r6, r3
 8005af6:	6026      	str	r6, [r4, #0]
 8005af8:	2000      	movs	r0, #0
 8005afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afe:	462a      	mov	r2, r5
 8005b00:	f000 fab9 	bl	8006076 <_realloc_r>
 8005b04:	4606      	mov	r6, r0
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d1e1      	bne.n	8005ace <__ssputs_r+0x70>
 8005b0a:	6921      	ldr	r1, [r4, #16]
 8005b0c:	4650      	mov	r0, sl
 8005b0e:	f7ff fd85 	bl	800561c <_free_r>
 8005b12:	e7c7      	b.n	8005aa4 <__ssputs_r+0x46>

08005b14 <_svfiprintf_r>:
 8005b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	b09d      	sub	sp, #116	; 0x74
 8005b1a:	4680      	mov	r8, r0
 8005b1c:	9303      	str	r3, [sp, #12]
 8005b1e:	898b      	ldrh	r3, [r1, #12]
 8005b20:	061c      	lsls	r4, r3, #24
 8005b22:	460d      	mov	r5, r1
 8005b24:	4616      	mov	r6, r2
 8005b26:	d50f      	bpl.n	8005b48 <_svfiprintf_r+0x34>
 8005b28:	690b      	ldr	r3, [r1, #16]
 8005b2a:	b96b      	cbnz	r3, 8005b48 <_svfiprintf_r+0x34>
 8005b2c:	2140      	movs	r1, #64	; 0x40
 8005b2e:	f7ff fdc3 	bl	80056b8 <_malloc_r>
 8005b32:	6028      	str	r0, [r5, #0]
 8005b34:	6128      	str	r0, [r5, #16]
 8005b36:	b928      	cbnz	r0, 8005b44 <_svfiprintf_r+0x30>
 8005b38:	230c      	movs	r3, #12
 8005b3a:	f8c8 3000 	str.w	r3, [r8]
 8005b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b42:	e0c5      	b.n	8005cd0 <_svfiprintf_r+0x1bc>
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	616b      	str	r3, [r5, #20]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b52:	2330      	movs	r3, #48	; 0x30
 8005b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b58:	f04f 0b01 	mov.w	fp, #1
 8005b5c:	4637      	mov	r7, r6
 8005b5e:	463c      	mov	r4, r7
 8005b60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d13c      	bne.n	8005be2 <_svfiprintf_r+0xce>
 8005b68:	ebb7 0a06 	subs.w	sl, r7, r6
 8005b6c:	d00b      	beq.n	8005b86 <_svfiprintf_r+0x72>
 8005b6e:	4653      	mov	r3, sl
 8005b70:	4632      	mov	r2, r6
 8005b72:	4629      	mov	r1, r5
 8005b74:	4640      	mov	r0, r8
 8005b76:	f7ff ff72 	bl	8005a5e <__ssputs_r>
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f000 80a3 	beq.w	8005cc6 <_svfiprintf_r+0x1b2>
 8005b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b82:	4453      	add	r3, sl
 8005b84:	9309      	str	r3, [sp, #36]	; 0x24
 8005b86:	783b      	ldrb	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 809c 	beq.w	8005cc6 <_svfiprintf_r+0x1b2>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f04f 32ff 	mov.w	r2, #4294967295
 8005b94:	9304      	str	r3, [sp, #16]
 8005b96:	9307      	str	r3, [sp, #28]
 8005b98:	9205      	str	r2, [sp, #20]
 8005b9a:	9306      	str	r3, [sp, #24]
 8005b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ba2:	2205      	movs	r2, #5
 8005ba4:	7821      	ldrb	r1, [r4, #0]
 8005ba6:	4850      	ldr	r0, [pc, #320]	; (8005ce8 <_svfiprintf_r+0x1d4>)
 8005ba8:	f7fa fb1a 	bl	80001e0 <memchr>
 8005bac:	1c67      	adds	r7, r4, #1
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	b9d8      	cbnz	r0, 8005bea <_svfiprintf_r+0xd6>
 8005bb2:	06d9      	lsls	r1, r3, #27
 8005bb4:	bf44      	itt	mi
 8005bb6:	2220      	movmi	r2, #32
 8005bb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bbc:	071a      	lsls	r2, r3, #28
 8005bbe:	bf44      	itt	mi
 8005bc0:	222b      	movmi	r2, #43	; 0x2b
 8005bc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bc6:	7822      	ldrb	r2, [r4, #0]
 8005bc8:	2a2a      	cmp	r2, #42	; 0x2a
 8005bca:	d016      	beq.n	8005bfa <_svfiprintf_r+0xe6>
 8005bcc:	9a07      	ldr	r2, [sp, #28]
 8005bce:	2100      	movs	r1, #0
 8005bd0:	200a      	movs	r0, #10
 8005bd2:	4627      	mov	r7, r4
 8005bd4:	3401      	adds	r4, #1
 8005bd6:	783b      	ldrb	r3, [r7, #0]
 8005bd8:	3b30      	subs	r3, #48	; 0x30
 8005bda:	2b09      	cmp	r3, #9
 8005bdc:	d951      	bls.n	8005c82 <_svfiprintf_r+0x16e>
 8005bde:	b1c9      	cbz	r1, 8005c14 <_svfiprintf_r+0x100>
 8005be0:	e011      	b.n	8005c06 <_svfiprintf_r+0xf2>
 8005be2:	2b25      	cmp	r3, #37	; 0x25
 8005be4:	d0c0      	beq.n	8005b68 <_svfiprintf_r+0x54>
 8005be6:	4627      	mov	r7, r4
 8005be8:	e7b9      	b.n	8005b5e <_svfiprintf_r+0x4a>
 8005bea:	4a3f      	ldr	r2, [pc, #252]	; (8005ce8 <_svfiprintf_r+0x1d4>)
 8005bec:	1a80      	subs	r0, r0, r2
 8005bee:	fa0b f000 	lsl.w	r0, fp, r0
 8005bf2:	4318      	orrs	r0, r3
 8005bf4:	9004      	str	r0, [sp, #16]
 8005bf6:	463c      	mov	r4, r7
 8005bf8:	e7d3      	b.n	8005ba2 <_svfiprintf_r+0x8e>
 8005bfa:	9a03      	ldr	r2, [sp, #12]
 8005bfc:	1d11      	adds	r1, r2, #4
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	9103      	str	r1, [sp, #12]
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	db01      	blt.n	8005c0a <_svfiprintf_r+0xf6>
 8005c06:	9207      	str	r2, [sp, #28]
 8005c08:	e004      	b.n	8005c14 <_svfiprintf_r+0x100>
 8005c0a:	4252      	negs	r2, r2
 8005c0c:	f043 0302 	orr.w	r3, r3, #2
 8005c10:	9207      	str	r2, [sp, #28]
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	783b      	ldrb	r3, [r7, #0]
 8005c16:	2b2e      	cmp	r3, #46	; 0x2e
 8005c18:	d10e      	bne.n	8005c38 <_svfiprintf_r+0x124>
 8005c1a:	787b      	ldrb	r3, [r7, #1]
 8005c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1e:	f107 0101 	add.w	r1, r7, #1
 8005c22:	d132      	bne.n	8005c8a <_svfiprintf_r+0x176>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	9203      	str	r2, [sp, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bfb8      	it	lt
 8005c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c34:	3702      	adds	r7, #2
 8005c36:	9305      	str	r3, [sp, #20]
 8005c38:	4c2c      	ldr	r4, [pc, #176]	; (8005cec <_svfiprintf_r+0x1d8>)
 8005c3a:	7839      	ldrb	r1, [r7, #0]
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f7fa face 	bl	80001e0 <memchr>
 8005c44:	b138      	cbz	r0, 8005c56 <_svfiprintf_r+0x142>
 8005c46:	2340      	movs	r3, #64	; 0x40
 8005c48:	1b00      	subs	r0, r0, r4
 8005c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c4e:	9b04      	ldr	r3, [sp, #16]
 8005c50:	4303      	orrs	r3, r0
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	3701      	adds	r7, #1
 8005c56:	7839      	ldrb	r1, [r7, #0]
 8005c58:	4825      	ldr	r0, [pc, #148]	; (8005cf0 <_svfiprintf_r+0x1dc>)
 8005c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c5e:	2206      	movs	r2, #6
 8005c60:	1c7e      	adds	r6, r7, #1
 8005c62:	f7fa fabd 	bl	80001e0 <memchr>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d035      	beq.n	8005cd6 <_svfiprintf_r+0x1c2>
 8005c6a:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <_svfiprintf_r+0x1e0>)
 8005c6c:	b9fb      	cbnz	r3, 8005cae <_svfiprintf_r+0x19a>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	3307      	adds	r3, #7
 8005c72:	f023 0307 	bic.w	r3, r3, #7
 8005c76:	3308      	adds	r3, #8
 8005c78:	9303      	str	r3, [sp, #12]
 8005c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7c:	444b      	add	r3, r9
 8005c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c80:	e76c      	b.n	8005b5c <_svfiprintf_r+0x48>
 8005c82:	fb00 3202 	mla	r2, r0, r2, r3
 8005c86:	2101      	movs	r1, #1
 8005c88:	e7a3      	b.n	8005bd2 <_svfiprintf_r+0xbe>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	240a      	movs	r4, #10
 8005c92:	460f      	mov	r7, r1
 8005c94:	3101      	adds	r1, #1
 8005c96:	783a      	ldrb	r2, [r7, #0]
 8005c98:	3a30      	subs	r2, #48	; 0x30
 8005c9a:	2a09      	cmp	r2, #9
 8005c9c:	d903      	bls.n	8005ca6 <_svfiprintf_r+0x192>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0ca      	beq.n	8005c38 <_svfiprintf_r+0x124>
 8005ca2:	9005      	str	r0, [sp, #20]
 8005ca4:	e7c8      	b.n	8005c38 <_svfiprintf_r+0x124>
 8005ca6:	fb04 2000 	mla	r0, r4, r0, r2
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7f1      	b.n	8005c92 <_svfiprintf_r+0x17e>
 8005cae:	ab03      	add	r3, sp, #12
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <_svfiprintf_r+0x1e4>)
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	4640      	mov	r0, r8
 8005cba:	f3af 8000 	nop.w
 8005cbe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005cc2:	4681      	mov	r9, r0
 8005cc4:	d1d9      	bne.n	8005c7a <_svfiprintf_r+0x166>
 8005cc6:	89ab      	ldrh	r3, [r5, #12]
 8005cc8:	065b      	lsls	r3, r3, #25
 8005cca:	f53f af38 	bmi.w	8005b3e <_svfiprintf_r+0x2a>
 8005cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd0:	b01d      	add	sp, #116	; 0x74
 8005cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd6:	ab03      	add	r3, sp, #12
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	462a      	mov	r2, r5
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <_svfiprintf_r+0x1e4>)
 8005cde:	a904      	add	r1, sp, #16
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	f000 f881 	bl	8005de8 <_printf_i>
 8005ce6:	e7ea      	b.n	8005cbe <_svfiprintf_r+0x1aa>
 8005ce8:	080061b7 	.word	0x080061b7
 8005cec:	080061bd 	.word	0x080061bd
 8005cf0:	080061c1 	.word	0x080061c1
 8005cf4:	00000000 	.word	0x00000000
 8005cf8:	08005a5f 	.word	0x08005a5f

08005cfc <_printf_common>:
 8005cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	4691      	mov	r9, r2
 8005d02:	461f      	mov	r7, r3
 8005d04:	688a      	ldr	r2, [r1, #8]
 8005d06:	690b      	ldr	r3, [r1, #16]
 8005d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	bfb8      	it	lt
 8005d10:	4613      	movlt	r3, r2
 8005d12:	f8c9 3000 	str.w	r3, [r9]
 8005d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	b112      	cbz	r2, 8005d26 <_printf_common+0x2a>
 8005d20:	3301      	adds	r3, #1
 8005d22:	f8c9 3000 	str.w	r3, [r9]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	0699      	lsls	r1, r3, #26
 8005d2a:	bf42      	ittt	mi
 8005d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d30:	3302      	addmi	r3, #2
 8005d32:	f8c9 3000 	strmi.w	r3, [r9]
 8005d36:	6825      	ldr	r5, [r4, #0]
 8005d38:	f015 0506 	ands.w	r5, r5, #6
 8005d3c:	d107      	bne.n	8005d4e <_printf_common+0x52>
 8005d3e:	f104 0a19 	add.w	sl, r4, #25
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	f8d9 2000 	ldr.w	r2, [r9]
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	429d      	cmp	r5, r3
 8005d4c:	db29      	blt.n	8005da2 <_printf_common+0xa6>
 8005d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	3300      	adds	r3, #0
 8005d56:	bf18      	it	ne
 8005d58:	2301      	movne	r3, #1
 8005d5a:	0692      	lsls	r2, r2, #26
 8005d5c:	d42e      	bmi.n	8005dbc <_printf_common+0xc0>
 8005d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d62:	4639      	mov	r1, r7
 8005d64:	4630      	mov	r0, r6
 8005d66:	47c0      	blx	r8
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d021      	beq.n	8005db0 <_printf_common+0xb4>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	68e5      	ldr	r5, [r4, #12]
 8005d70:	f8d9 2000 	ldr.w	r2, [r9]
 8005d74:	f003 0306 	and.w	r3, r3, #6
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	bf08      	it	eq
 8005d7c:	1aad      	subeq	r5, r5, r2
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	6922      	ldr	r2, [r4, #16]
 8005d82:	bf0c      	ite	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	2500      	movne	r5, #0
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	bfc4      	itt	gt
 8005d8e:	1a9b      	subgt	r3, r3, r2
 8005d90:	18ed      	addgt	r5, r5, r3
 8005d92:	f04f 0900 	mov.w	r9, #0
 8005d96:	341a      	adds	r4, #26
 8005d98:	454d      	cmp	r5, r9
 8005d9a:	d11b      	bne.n	8005dd4 <_printf_common+0xd8>
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da2:	2301      	movs	r3, #1
 8005da4:	4652      	mov	r2, sl
 8005da6:	4639      	mov	r1, r7
 8005da8:	4630      	mov	r0, r6
 8005daa:	47c0      	blx	r8
 8005dac:	3001      	adds	r0, #1
 8005dae:	d103      	bne.n	8005db8 <_printf_common+0xbc>
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db8:	3501      	adds	r5, #1
 8005dba:	e7c2      	b.n	8005d42 <_printf_common+0x46>
 8005dbc:	18e1      	adds	r1, r4, r3
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	2030      	movs	r0, #48	; 0x30
 8005dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dc6:	4422      	add	r2, r4
 8005dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	e7c4      	b.n	8005d5e <_printf_common+0x62>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	4639      	mov	r1, r7
 8005dda:	4630      	mov	r0, r6
 8005ddc:	47c0      	blx	r8
 8005dde:	3001      	adds	r0, #1
 8005de0:	d0e6      	beq.n	8005db0 <_printf_common+0xb4>
 8005de2:	f109 0901 	add.w	r9, r9, #1
 8005de6:	e7d7      	b.n	8005d98 <_printf_common+0x9c>

08005de8 <_printf_i>:
 8005de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dec:	4617      	mov	r7, r2
 8005dee:	7e0a      	ldrb	r2, [r1, #24]
 8005df0:	b085      	sub	sp, #20
 8005df2:	2a6e      	cmp	r2, #110	; 0x6e
 8005df4:	4698      	mov	r8, r3
 8005df6:	4606      	mov	r6, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dfc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005e00:	f000 80bc 	beq.w	8005f7c <_printf_i+0x194>
 8005e04:	d81a      	bhi.n	8005e3c <_printf_i+0x54>
 8005e06:	2a63      	cmp	r2, #99	; 0x63
 8005e08:	d02e      	beq.n	8005e68 <_printf_i+0x80>
 8005e0a:	d80a      	bhi.n	8005e22 <_printf_i+0x3a>
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	f000 80c8 	beq.w	8005fa2 <_printf_i+0x1ba>
 8005e12:	2a58      	cmp	r2, #88	; 0x58
 8005e14:	f000 808a 	beq.w	8005f2c <_printf_i+0x144>
 8005e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e1c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005e20:	e02a      	b.n	8005e78 <_printf_i+0x90>
 8005e22:	2a64      	cmp	r2, #100	; 0x64
 8005e24:	d001      	beq.n	8005e2a <_printf_i+0x42>
 8005e26:	2a69      	cmp	r2, #105	; 0x69
 8005e28:	d1f6      	bne.n	8005e18 <_printf_i+0x30>
 8005e2a:	6821      	ldr	r1, [r4, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005e32:	d023      	beq.n	8005e7c <_printf_i+0x94>
 8005e34:	1d11      	adds	r1, r2, #4
 8005e36:	6019      	str	r1, [r3, #0]
 8005e38:	6813      	ldr	r3, [r2, #0]
 8005e3a:	e027      	b.n	8005e8c <_printf_i+0xa4>
 8005e3c:	2a73      	cmp	r2, #115	; 0x73
 8005e3e:	f000 80b4 	beq.w	8005faa <_printf_i+0x1c2>
 8005e42:	d808      	bhi.n	8005e56 <_printf_i+0x6e>
 8005e44:	2a6f      	cmp	r2, #111	; 0x6f
 8005e46:	d02a      	beq.n	8005e9e <_printf_i+0xb6>
 8005e48:	2a70      	cmp	r2, #112	; 0x70
 8005e4a:	d1e5      	bne.n	8005e18 <_printf_i+0x30>
 8005e4c:	680a      	ldr	r2, [r1, #0]
 8005e4e:	f042 0220 	orr.w	r2, r2, #32
 8005e52:	600a      	str	r2, [r1, #0]
 8005e54:	e003      	b.n	8005e5e <_printf_i+0x76>
 8005e56:	2a75      	cmp	r2, #117	; 0x75
 8005e58:	d021      	beq.n	8005e9e <_printf_i+0xb6>
 8005e5a:	2a78      	cmp	r2, #120	; 0x78
 8005e5c:	d1dc      	bne.n	8005e18 <_printf_i+0x30>
 8005e5e:	2278      	movs	r2, #120	; 0x78
 8005e60:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005e64:	496e      	ldr	r1, [pc, #440]	; (8006020 <_printf_i+0x238>)
 8005e66:	e064      	b.n	8005f32 <_printf_i+0x14a>
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005e6e:	1d11      	adds	r1, r2, #4
 8005e70:	6019      	str	r1, [r3, #0]
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0a3      	b.n	8005fc4 <_printf_i+0x1dc>
 8005e7c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005e80:	f102 0104 	add.w	r1, r2, #4
 8005e84:	6019      	str	r1, [r3, #0]
 8005e86:	d0d7      	beq.n	8005e38 <_printf_i+0x50>
 8005e88:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	da03      	bge.n	8005e98 <_printf_i+0xb0>
 8005e90:	222d      	movs	r2, #45	; 0x2d
 8005e92:	425b      	negs	r3, r3
 8005e94:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e98:	4962      	ldr	r1, [pc, #392]	; (8006024 <_printf_i+0x23c>)
 8005e9a:	220a      	movs	r2, #10
 8005e9c:	e017      	b.n	8005ece <_printf_i+0xe6>
 8005e9e:	6820      	ldr	r0, [r4, #0]
 8005ea0:	6819      	ldr	r1, [r3, #0]
 8005ea2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005ea6:	d003      	beq.n	8005eb0 <_printf_i+0xc8>
 8005ea8:	1d08      	adds	r0, r1, #4
 8005eaa:	6018      	str	r0, [r3, #0]
 8005eac:	680b      	ldr	r3, [r1, #0]
 8005eae:	e006      	b.n	8005ebe <_printf_i+0xd6>
 8005eb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eb4:	f101 0004 	add.w	r0, r1, #4
 8005eb8:	6018      	str	r0, [r3, #0]
 8005eba:	d0f7      	beq.n	8005eac <_printf_i+0xc4>
 8005ebc:	880b      	ldrh	r3, [r1, #0]
 8005ebe:	4959      	ldr	r1, [pc, #356]	; (8006024 <_printf_i+0x23c>)
 8005ec0:	2a6f      	cmp	r2, #111	; 0x6f
 8005ec2:	bf14      	ite	ne
 8005ec4:	220a      	movne	r2, #10
 8005ec6:	2208      	moveq	r2, #8
 8005ec8:	2000      	movs	r0, #0
 8005eca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005ece:	6865      	ldr	r5, [r4, #4]
 8005ed0:	60a5      	str	r5, [r4, #8]
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	f2c0 809c 	blt.w	8006010 <_printf_i+0x228>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	f020 0004 	bic.w	r0, r0, #4
 8005ede:	6020      	str	r0, [r4, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d13f      	bne.n	8005f64 <_printf_i+0x17c>
 8005ee4:	2d00      	cmp	r5, #0
 8005ee6:	f040 8095 	bne.w	8006014 <_printf_i+0x22c>
 8005eea:	4675      	mov	r5, lr
 8005eec:	2a08      	cmp	r2, #8
 8005eee:	d10b      	bne.n	8005f08 <_printf_i+0x120>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	07da      	lsls	r2, r3, #31
 8005ef4:	d508      	bpl.n	8005f08 <_printf_i+0x120>
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	6862      	ldr	r2, [r4, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	bfde      	ittt	le
 8005efe:	2330      	movle	r3, #48	; 0x30
 8005f00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f08:	ebae 0305 	sub.w	r3, lr, r5
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	f8cd 8000 	str.w	r8, [sp]
 8005f12:	463b      	mov	r3, r7
 8005f14:	aa03      	add	r2, sp, #12
 8005f16:	4621      	mov	r1, r4
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f7ff feef 	bl	8005cfc <_printf_common>
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d155      	bne.n	8005fce <_printf_i+0x1e6>
 8005f22:	f04f 30ff 	mov.w	r0, #4294967295
 8005f26:	b005      	add	sp, #20
 8005f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f2c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005f30:	493c      	ldr	r1, [pc, #240]	; (8006024 <_printf_i+0x23c>)
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005f3a:	f100 0504 	add.w	r5, r0, #4
 8005f3e:	601d      	str	r5, [r3, #0]
 8005f40:	d001      	beq.n	8005f46 <_printf_i+0x15e>
 8005f42:	6803      	ldr	r3, [r0, #0]
 8005f44:	e002      	b.n	8005f4c <_printf_i+0x164>
 8005f46:	0655      	lsls	r5, r2, #25
 8005f48:	d5fb      	bpl.n	8005f42 <_printf_i+0x15a>
 8005f4a:	8803      	ldrh	r3, [r0, #0]
 8005f4c:	07d0      	lsls	r0, r2, #31
 8005f4e:	bf44      	itt	mi
 8005f50:	f042 0220 	orrmi.w	r2, r2, #32
 8005f54:	6022      	strmi	r2, [r4, #0]
 8005f56:	b91b      	cbnz	r3, 8005f60 <_printf_i+0x178>
 8005f58:	6822      	ldr	r2, [r4, #0]
 8005f5a:	f022 0220 	bic.w	r2, r2, #32
 8005f5e:	6022      	str	r2, [r4, #0]
 8005f60:	2210      	movs	r2, #16
 8005f62:	e7b1      	b.n	8005ec8 <_printf_i+0xe0>
 8005f64:	4675      	mov	r5, lr
 8005f66:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f6a:	fb02 3310 	mls	r3, r2, r0, r3
 8005f6e:	5ccb      	ldrb	r3, [r1, r3]
 8005f70:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f74:	4603      	mov	r3, r0
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d1f5      	bne.n	8005f66 <_printf_i+0x17e>
 8005f7a:	e7b7      	b.n	8005eec <_printf_i+0x104>
 8005f7c:	6808      	ldr	r0, [r1, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	6949      	ldr	r1, [r1, #20]
 8005f82:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005f86:	d004      	beq.n	8005f92 <_printf_i+0x1aa>
 8005f88:	1d10      	adds	r0, r2, #4
 8005f8a:	6018      	str	r0, [r3, #0]
 8005f8c:	6813      	ldr	r3, [r2, #0]
 8005f8e:	6019      	str	r1, [r3, #0]
 8005f90:	e007      	b.n	8005fa2 <_printf_i+0x1ba>
 8005f92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f96:	f102 0004 	add.w	r0, r2, #4
 8005f9a:	6018      	str	r0, [r3, #0]
 8005f9c:	6813      	ldr	r3, [r2, #0]
 8005f9e:	d0f6      	beq.n	8005f8e <_printf_i+0x1a6>
 8005fa0:	8019      	strh	r1, [r3, #0]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	4675      	mov	r5, lr
 8005fa8:	e7b1      	b.n	8005f0e <_printf_i+0x126>
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	1d11      	adds	r1, r2, #4
 8005fae:	6019      	str	r1, [r3, #0]
 8005fb0:	6815      	ldr	r5, [r2, #0]
 8005fb2:	6862      	ldr	r2, [r4, #4]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f7fa f912 	bl	80001e0 <memchr>
 8005fbc:	b108      	cbz	r0, 8005fc2 <_printf_i+0x1da>
 8005fbe:	1b40      	subs	r0, r0, r5
 8005fc0:	6060      	str	r0, [r4, #4]
 8005fc2:	6863      	ldr	r3, [r4, #4]
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fcc:	e79f      	b.n	8005f0e <_printf_i+0x126>
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	47c0      	blx	r8
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d0a2      	beq.n	8005f22 <_printf_i+0x13a>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	079b      	lsls	r3, r3, #30
 8005fe0:	d507      	bpl.n	8005ff2 <_printf_i+0x20a>
 8005fe2:	2500      	movs	r5, #0
 8005fe4:	f104 0919 	add.w	r9, r4, #25
 8005fe8:	68e3      	ldr	r3, [r4, #12]
 8005fea:	9a03      	ldr	r2, [sp, #12]
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	429d      	cmp	r5, r3
 8005ff0:	db05      	blt.n	8005ffe <_printf_i+0x216>
 8005ff2:	68e0      	ldr	r0, [r4, #12]
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	4298      	cmp	r0, r3
 8005ff8:	bfb8      	it	lt
 8005ffa:	4618      	movlt	r0, r3
 8005ffc:	e793      	b.n	8005f26 <_printf_i+0x13e>
 8005ffe:	2301      	movs	r3, #1
 8006000:	464a      	mov	r2, r9
 8006002:	4639      	mov	r1, r7
 8006004:	4630      	mov	r0, r6
 8006006:	47c0      	blx	r8
 8006008:	3001      	adds	r0, #1
 800600a:	d08a      	beq.n	8005f22 <_printf_i+0x13a>
 800600c:	3501      	adds	r5, #1
 800600e:	e7eb      	b.n	8005fe8 <_printf_i+0x200>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1a7      	bne.n	8005f64 <_printf_i+0x17c>
 8006014:	780b      	ldrb	r3, [r1, #0]
 8006016:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800601a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800601e:	e765      	b.n	8005eec <_printf_i+0x104>
 8006020:	080061d9 	.word	0x080061d9
 8006024:	080061c8 	.word	0x080061c8

08006028 <__ascii_wctomb>:
 8006028:	b149      	cbz	r1, 800603e <__ascii_wctomb+0x16>
 800602a:	2aff      	cmp	r2, #255	; 0xff
 800602c:	bf85      	ittet	hi
 800602e:	238a      	movhi	r3, #138	; 0x8a
 8006030:	6003      	strhi	r3, [r0, #0]
 8006032:	700a      	strbls	r2, [r1, #0]
 8006034:	f04f 30ff 	movhi.w	r0, #4294967295
 8006038:	bf98      	it	ls
 800603a:	2001      	movls	r0, #1
 800603c:	4770      	bx	lr
 800603e:	4608      	mov	r0, r1
 8006040:	4770      	bx	lr

08006042 <memmove>:
 8006042:	4288      	cmp	r0, r1
 8006044:	b510      	push	{r4, lr}
 8006046:	eb01 0302 	add.w	r3, r1, r2
 800604a:	d803      	bhi.n	8006054 <memmove+0x12>
 800604c:	1e42      	subs	r2, r0, #1
 800604e:	4299      	cmp	r1, r3
 8006050:	d10c      	bne.n	800606c <memmove+0x2a>
 8006052:	bd10      	pop	{r4, pc}
 8006054:	4298      	cmp	r0, r3
 8006056:	d2f9      	bcs.n	800604c <memmove+0xa>
 8006058:	1881      	adds	r1, r0, r2
 800605a:	1ad2      	subs	r2, r2, r3
 800605c:	42d3      	cmn	r3, r2
 800605e:	d100      	bne.n	8006062 <memmove+0x20>
 8006060:	bd10      	pop	{r4, pc}
 8006062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006066:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800606a:	e7f7      	b.n	800605c <memmove+0x1a>
 800606c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006070:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006074:	e7eb      	b.n	800604e <memmove+0xc>

08006076 <_realloc_r>:
 8006076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006078:	4607      	mov	r7, r0
 800607a:	4614      	mov	r4, r2
 800607c:	460e      	mov	r6, r1
 800607e:	b921      	cbnz	r1, 800608a <_realloc_r+0x14>
 8006080:	4611      	mov	r1, r2
 8006082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006086:	f7ff bb17 	b.w	80056b8 <_malloc_r>
 800608a:	b922      	cbnz	r2, 8006096 <_realloc_r+0x20>
 800608c:	f7ff fac6 	bl	800561c <_free_r>
 8006090:	4625      	mov	r5, r4
 8006092:	4628      	mov	r0, r5
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006096:	f000 f814 	bl	80060c2 <_malloc_usable_size_r>
 800609a:	4284      	cmp	r4, r0
 800609c:	d90f      	bls.n	80060be <_realloc_r+0x48>
 800609e:	4621      	mov	r1, r4
 80060a0:	4638      	mov	r0, r7
 80060a2:	f7ff fb09 	bl	80056b8 <_malloc_r>
 80060a6:	4605      	mov	r5, r0
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d0f2      	beq.n	8006092 <_realloc_r+0x1c>
 80060ac:	4631      	mov	r1, r6
 80060ae:	4622      	mov	r2, r4
 80060b0:	f7ff faa0 	bl	80055f4 <memcpy>
 80060b4:	4631      	mov	r1, r6
 80060b6:	4638      	mov	r0, r7
 80060b8:	f7ff fab0 	bl	800561c <_free_r>
 80060bc:	e7e9      	b.n	8006092 <_realloc_r+0x1c>
 80060be:	4635      	mov	r5, r6
 80060c0:	e7e7      	b.n	8006092 <_realloc_r+0x1c>

080060c2 <_malloc_usable_size_r>:
 80060c2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f1a0 0004 	sub.w	r0, r0, #4
 80060cc:	bfbc      	itt	lt
 80060ce:	580b      	ldrlt	r3, [r1, r0]
 80060d0:	18c0      	addlt	r0, r0, r3
 80060d2:	4770      	bx	lr

080060d4 <_sbrk>:
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <_sbrk+0x14>)
 80060d6:	6819      	ldr	r1, [r3, #0]
 80060d8:	4602      	mov	r2, r0
 80060da:	b909      	cbnz	r1, 80060e0 <_sbrk+0xc>
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <_sbrk+0x18>)
 80060de:	6019      	str	r1, [r3, #0]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	4402      	add	r2, r0
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	4770      	bx	lr
 80060e8:	200002fc 	.word	0x200002fc
 80060ec:	200005c4 	.word	0x200005c4

080060f0 <_init>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr

080060fc <_fini>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr
