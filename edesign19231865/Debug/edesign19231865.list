
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007d40  08007d40  00017d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000022c  20000000  08007d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002022c  2**0
                  CONTENTS
  7 .bss          000003dc  20000230  20000230  00020230  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000060c  2000060c  00020230  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000350d2  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004f68  00000000  00000000  0005532e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b741  00000000  00000000  0005a296  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010c0  00000000  00000000  000659d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f38  00000000  00000000  00066a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00022687  00000000  00000000  000679d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00013aa6  00000000  00000000  0008a057  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ab207  00000000  00000000  0009dafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00148d04  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000033a0  00000000  00000000  00148d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b40 	.word	0x08007b40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08007b40 	.word	0x08007b40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	d1ed      	bne.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_f2ulz>:
 8000dac:	b5d0      	push	{r4, r6, r7, lr}
 8000dae:	f7ff fbcb 	bl	8000548 <__aeabi_f2d>
 8000db2:	2200      	movs	r2, #0
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <__aeabi_f2ulz+0x44>)
 8000db6:	4606      	mov	r6, r0
 8000db8:	460f      	mov	r7, r1
 8000dba:	f7ff fc19 	bl	80005f0 <__aeabi_dmul>
 8000dbe:	f7ff fec7 	bl	8000b50 <__aeabi_d2uiz>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	f7ff fb9e 	bl	8000504 <__aeabi_ui2d>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <__aeabi_f2ulz+0x48>)
 8000dcc:	f7ff fc10 	bl	80005f0 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	4639      	mov	r1, r7
 8000dd8:	f7ff fa56 	bl	8000288 <__aeabi_dsub>
 8000ddc:	f7ff feb8 	bl	8000b50 <__aeabi_d2uiz>
 8000de0:	4623      	mov	r3, r4
 8000de2:	2200      	movs	r2, #0
 8000de4:	ea42 0200 	orr.w	r2, r2, r0
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	bdd0      	pop	{r4, r6, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	3df00000 	.word	0x3df00000
 8000df4:	41f00000 	.word	0x41f00000

08000df8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_InitTick+0x24>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <HAL_InitTick+0x28>)
 8000e02:	fba3 3000 	umull	r3, r0, r3, r0
 8000e06:	0980      	lsrs	r0, r0, #6
 8000e08:	f000 fcfe 	bl	8001808 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4621      	mov	r1, r4
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 fcba 	bl	800178c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000e18:	2000      	movs	r0, #0
 8000e1a:	bd10      	pop	{r4, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	10624dd3 	.word	0x10624dd3

08000e24 <HAL_Init>:
{
 8000e24:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x20>)
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 fc99 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_InitTick>
  HAL_MspInit();
 8000e3c:	f005 f868 	bl	8005f10 <HAL_MspInit>
}
 8000e40:	2000      	movs	r0, #0
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e48:	4a02      	ldr	r2, [pc, #8]	; (8000e54 <HAL_IncTick+0xc>)
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000330 	.word	0x20000330

08000e58 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <HAL_GetTick+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000330 	.word	0x20000330

08000e64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6a:	f7ff fff5 	bl	8000e58 <HAL_GetTick>
 8000e6e:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 8000e70:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e76:	d000      	beq.n	8000e7a <HAL_Delay+0x16>
  {
     wait++;
 8000e78:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e7a:	f7ff ffed 	bl	8000e58 <HAL_GetTick>
 8000e7e:	1b40      	subs	r0, r0, r5
 8000e80:	42a0      	cmp	r0, r4
 8000e82:	d3fa      	bcc.n	8000e7a <HAL_Delay+0x16>
  {
  }
}
 8000e84:	b003      	add	sp, #12
 8000e86:	bd30      	pop	{r4, r5, pc}

08000e88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e88:	4770      	bx	lr

08000e8a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e8a:	4770      	bx	lr

08000e8c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e8e:	6802      	ldr	r2, [r0, #0]
 8000e90:	6893      	ldr	r3, [r2, #8]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d011      	beq.n	8000ebe <ADC_Disable+0x32>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d037      	beq.n	8000f10 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000ea0:	6893      	ldr	r3, [r2, #8]
 8000ea2:	f003 030d 	and.w	r3, r3, #13
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d011      	beq.n	8000ece <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eaa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000eba:	2001      	movs	r0, #1
 8000ebc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000ebe:	6813      	ldr	r3, [r2, #0]
 8000ec0:	f013 0f01 	tst.w	r3, #1
 8000ec4:	d101      	bne.n	8000eca <ADC_Disable+0x3e>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e7e8      	b.n	8000e9c <ADC_Disable+0x10>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e7e6      	b.n	8000e9c <ADC_Disable+0x10>
 8000ece:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000ed0:	6893      	ldr	r3, [r2, #8]
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	6093      	str	r3, [r2, #8]
 8000ed8:	6803      	ldr	r3, [r0, #0]
 8000eda:	2203      	movs	r2, #3
 8000edc:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000ede:	f7ff ffbb 	bl	8000e58 <HAL_GetTick>
 8000ee2:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f013 0f01 	tst.w	r3, #1
 8000eec:	d00e      	beq.n	8000f0c <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eee:	f7ff ffb3 	bl	8000e58 <HAL_GetTick>
 8000ef2:	1b40      	subs	r0, r0, r5
 8000ef4:	2802      	cmp	r0, #2
 8000ef6:	d9f5      	bls.n	8000ee4 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
 8000f10:	2000      	movs	r0, #0
}
 8000f12:	bd38      	pop	{r3, r4, r5, pc}

08000f14 <ADC_Enable>:
{
 8000f14:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f16:	6802      	ldr	r2, [r0, #0]
 8000f18:	6893      	ldr	r3, [r2, #8]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d010      	beq.n	8000f44 <ADC_Enable+0x30>
 8000f22:	2300      	movs	r3, #0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d133      	bne.n	8000f90 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000f28:	6891      	ldr	r1, [r2, #8]
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <ADC_Enable+0x80>)
 8000f2c:	4219      	tst	r1, r3
 8000f2e:	d011      	beq.n	8000f54 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f30:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f38:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000f40:	2001      	movs	r0, #1
 8000f42:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	f013 0f01 	tst.w	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <ADC_Enable+0x3c>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e7e9      	b.n	8000f24 <ADC_Enable+0x10>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e7e7      	b.n	8000f24 <ADC_Enable+0x10>
 8000f54:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000f56:	6893      	ldr	r3, [r2, #8]
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000f5e:	f7ff ff7b 	bl	8000e58 <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f013 0f01 	tst.w	r3, #1
 8000f6c:	d10e      	bne.n	8000f8c <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f6e:	f7ff ff73 	bl	8000e58 <HAL_GetTick>
 8000f72:	1b40      	subs	r0, r0, r5
 8000f74:	2802      	cmp	r0, #2
 8000f76:	d9f5      	bls.n	8000f64 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	2000      	movs	r0, #0
}
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	8000003f 	.word	0x8000003f

08000f98 <ADC_DMAError>:
{
 8000f98:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa2:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000fa4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8000fac:	f7ff ff6d 	bl	8000e8a <HAL_ADC_ErrorCallback>
 8000fb0:	bd08      	pop	{r3, pc}

08000fb2 <ADC_DMAHalfConvCplt>:
{
 8000fb2:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000fb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000fb6:	f7ff ff67 	bl	8000e88 <HAL_ADC_ConvHalfCpltCallback>
 8000fba:	bd08      	pop	{r3, pc}

08000fbc <ADC_DMAConvCplt>:
{
 8000fbc:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fc2:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000fc6:	d11a      	bne.n	8000ffe <ADC_DMAConvCplt+0x42>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fce:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68d2      	ldr	r2, [r2, #12]
 8000fd4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000fd8:	d10d      	bne.n	8000ff6 <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fda:	69da      	ldr	r2, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fdc:	b95a      	cbnz	r2, 8000ff6 <ADC_DMAConvCplt+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fe8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000fec:	d103      	bne.n	8000ff6 <ADC_DMAConvCplt+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ff0:	f042 0201 	orr.w	r2, r2, #1
 8000ff4:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fd24 	bl	8004a44 <HAL_ADC_ConvCpltCallback>
 8000ffc:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4798      	blx	r3
 8001004:	bd08      	pop	{r3, pc}
	...

08001008 <HAL_ADC_Init>:
{
 8001008:	b530      	push	{r4, r5, lr}
 800100a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8001010:	2800      	cmp	r0, #0
 8001012:	f000 80fb 	beq.w	800120c <HAL_ADC_Init+0x204>
 8001016:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001018:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800101a:	f013 0f10 	tst.w	r3, #16
 800101e:	d151      	bne.n	80010c4 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001020:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001022:	b1ab      	cbz	r3, 8001050 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001024:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800102e:	d003      	beq.n	8001038 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001030:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001032:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001036:	d046      	beq.n	80010c6 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8001038:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800103a:	f023 0312 	bic.w	r3, r3, #18
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001044:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800104c:	2001      	movs	r0, #1
 800104e:	e03a      	b.n	80010c6 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8001050:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8001052:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8001054:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8001056:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800105a:	f004 ff97 	bl	8005f8c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001066:	d001      	beq.n	800106c <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2000      	movs	r0, #0
 800106a:	e7dc      	b.n	8001026 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff ff0d 	bl	8000e8c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001072:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001074:	f013 0f10 	tst.w	r3, #16
 8001078:	d1d5      	bne.n	8001026 <HAL_ADC_Init+0x1e>
 800107a:	2800      	cmp	r0, #0
 800107c:	d1d3      	bne.n	8001026 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800107e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001080:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001084:	f023 0302 	bic.w	r3, r3, #2
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800108e:	6822      	ldr	r2, [r4, #0]
 8001090:	6893      	ldr	r3, [r2, #8]
 8001092:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001096:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001098:	6822      	ldr	r2, [r4, #0]
 800109a:	6893      	ldr	r3, [r2, #8]
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <HAL_ADC_Init+0x208>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_ADC_Init+0x20c>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010b2:	005a      	lsls	r2, r3, #1
 80010b4:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80010b6:	9b00      	ldr	r3, [sp, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0b4      	beq.n	8001026 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 80010bc:	9b00      	ldr	r3, [sp, #0]
 80010be:	3b01      	subs	r3, #1
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	e7f8      	b.n	80010b6 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c4:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010c8:	f013 0f10 	tst.w	r3, #16
 80010cc:	f040 8095 	bne.w	80011fa <HAL_ADC_Init+0x1f2>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	f040 8092 	bne.w	80011fa <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80010da:	f013 0304 	ands.w	r3, r3, #4
 80010de:	f040 808c 	bne.w	80011fa <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80010e4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80010e8:	f041 0102 	orr.w	r1, r1, #2
 80010ec:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010ee:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80010f2:	d055      	beq.n	80011a0 <HAL_ADC_Init+0x198>
 80010f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80010f8:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010fa:	6891      	ldr	r1, [r2, #8]
 80010fc:	f001 0103 	and.w	r1, r1, #3
 8001100:	2901      	cmp	r1, #1
 8001102:	d050      	beq.n	80011a6 <HAL_ADC_Init+0x19e>
 8001104:	2200      	movs	r2, #0
 8001106:	b972      	cbnz	r2, 8001126 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001108:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800110a:	b12d      	cbz	r5, 8001118 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800110c:	68a9      	ldr	r1, [r5, #8]
 800110e:	f001 0103 	and.w	r1, r1, #3
 8001112:	2901      	cmp	r1, #1
 8001114:	d04f      	beq.n	80011b6 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001116:	b932      	cbnz	r2, 8001126 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001118:	493f      	ldr	r1, [pc, #252]	; (8001218 <HAL_ADC_Init+0x210>)
 800111a:	688a      	ldr	r2, [r1, #8]
 800111c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001120:	6865      	ldr	r5, [r4, #4]
 8001122:	432a      	orrs	r2, r5
 8001124:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001126:	69e2      	ldr	r2, [r4, #28]
 8001128:	0351      	lsls	r1, r2, #13
 800112a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800112c:	2d01      	cmp	r5, #1
 800112e:	d001      	beq.n	8001134 <HAL_ADC_Init+0x12c>
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	430b      	orrs	r3, r1
 8001136:	68e1      	ldr	r1, [r4, #12]
 8001138:	430b      	orrs	r3, r1
 800113a:	68a1      	ldr	r1, [r4, #8]
 800113c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800113e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001140:	2901      	cmp	r1, #1
 8001142:	d03e      	beq.n	80011c2 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001144:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001146:	2a01      	cmp	r2, #1
 8001148:	d002      	beq.n	8001150 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800114a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800114c:	430a      	orrs	r2, r1
 800114e:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	6891      	ldr	r1, [r2, #8]
 8001154:	f011 0f0c 	tst.w	r1, #12
 8001158:	d10b      	bne.n	8001172 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800115a:	68d1      	ldr	r1, [r2, #12]
 800115c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001160:	f021 0102 	bic.w	r1, r1, #2
 8001164:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001166:	69a1      	ldr	r1, [r4, #24]
 8001168:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800116a:	0052      	lsls	r2, r2, #1
 800116c:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001170:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001172:	6821      	ldr	r1, [r4, #0]
 8001174:	68cd      	ldr	r5, [r1, #12]
 8001176:	4a29      	ldr	r2, [pc, #164]	; (800121c <HAL_ADC_Init+0x214>)
 8001178:	402a      	ands	r2, r5
 800117a:	4313      	orrs	r3, r2
 800117c:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800117e:	6923      	ldr	r3, [r4, #16]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d031      	beq.n	80011e8 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001184:	6822      	ldr	r2, [r4, #0]
 8001186:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001188:	f023 030f 	bic.w	r3, r3, #15
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800118e:	2300      	movs	r3, #0
 8001190:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8001192:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001194:	f023 0303 	bic.w	r3, r3, #3
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6463      	str	r3, [r4, #68]	; 0x44
 800119e:	e033      	b.n	8001208 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011a0:	491f      	ldr	r1, [pc, #124]	; (8001220 <HAL_ADC_Init+0x218>)
 80011a2:	9101      	str	r1, [sp, #4]
 80011a4:	e7a9      	b.n	80010fa <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	f012 0f01 	tst.w	r2, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Init+0x1aa>
 80011ae:	2200      	movs	r2, #0
 80011b0:	e7a9      	b.n	8001106 <HAL_ADC_Init+0xfe>
 80011b2:	2201      	movs	r2, #1
 80011b4:	e7a7      	b.n	8001106 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011b6:	6829      	ldr	r1, [r5, #0]
 80011b8:	f011 0f01 	tst.w	r1, #1
 80011bc:	d0ab      	beq.n	8001116 <HAL_ADC_Init+0x10e>
 80011be:	2201      	movs	r2, #1
 80011c0:	e7a9      	b.n	8001116 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011c2:	b932      	cbnz	r2, 80011d2 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011c6:	3a01      	subs	r2, #1
 80011c8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d0:	e7b8      	b.n	8001144 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 80011d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80011d4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80011d8:	f042 0220 	orr.w	r2, r2, #32
 80011dc:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80011e0:	f042 0201 	orr.w	r2, r2, #1
 80011e4:	64a2      	str	r2, [r4, #72]	; 0x48
 80011e6:	e7ad      	b.n	8001144 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011e8:	6821      	ldr	r1, [r4, #0]
 80011ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	6a22      	ldr	r2, [r4, #32]
 80011f2:	3a01      	subs	r2, #1
 80011f4:	4313      	orrs	r3, r2
 80011f6:	630b      	str	r3, [r1, #48]	; 0x30
 80011f8:	e7c9      	b.n	800118e <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011fc:	f023 0312 	bic.w	r3, r3, #18
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8001206:	2001      	movs	r0, #1
}
 8001208:	b017      	add	sp, #92	; 0x5c
 800120a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800120c:	2001      	movs	r0, #1
 800120e:	e7fb      	b.n	8001208 <HAL_ADC_Init+0x200>
 8001210:	20000000 	.word	0x20000000
 8001214:	431bde83 	.word	0x431bde83
 8001218:	50000300 	.word	0x50000300
 800121c:	fff0c007 	.word	0xfff0c007
 8001220:	50000100 	.word	0x50000100

08001224 <HAL_ADC_Start_DMA>:
{
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001226:	6804      	ldr	r4, [r0, #0]
 8001228:	68a4      	ldr	r4, [r4, #8]
 800122a:	f014 0f04 	tst.w	r4, #4
 800122e:	d002      	beq.n	8001236 <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_BUSY;
 8001230:	2502      	movs	r5, #2
}
 8001232:	4628      	mov	r0, r5
 8001234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001236:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800123a:	2b01      	cmp	r3, #1
 800123c:	d07e      	beq.n	800133c <HAL_ADC_Start_DMA+0x118>
 800123e:	2301      	movs	r3, #1
 8001240:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001244:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <HAL_ADC_Start_DMA+0x11c>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f013 0f1f 	tst.w	r3, #31
 800124c:	d004      	beq.n	8001258 <HAL_ADC_Start_DMA+0x34>
      __HAL_UNLOCK(hadc);
 800124e:	2300      	movs	r3, #0
 8001250:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8001254:	2501      	movs	r5, #1
 8001256:	e7ec      	b.n	8001232 <HAL_ADC_Start_DMA+0xe>
 8001258:	4617      	mov	r7, r2
 800125a:	460e      	mov	r6, r1
 800125c:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 800125e:	f7ff fe59 	bl	8000f14 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001262:	4605      	mov	r5, r0
 8001264:	2800      	cmp	r0, #0
 8001266:	d165      	bne.n	8001334 <HAL_ADC_Start_DMA+0x110>
        ADC_STATE_CLR_SET(hadc->State,
 8001268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800126a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_ADC_Start_DMA+0x11c>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f013 0f1f 	tst.w	r3, #31
 8001280:	d038      	beq.n	80012f4 <HAL_ADC_Start_DMA+0xd0>
 8001282:	6822      	ldr	r2, [r4, #0]
 8001284:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001288:	d034      	beq.n	80012f4 <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800128a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800128c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001290:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <HAL_ADC_Start_DMA+0x120>)
 8001294:	429a      	cmp	r2, r3
 8001296:	d03d      	beq.n	8001314 <HAL_ADC_Start_DMA+0xf0>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001298:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800129a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800129e:	d046      	beq.n	800132e <HAL_ADC_Start_DMA+0x10a>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012a2:	f023 0306 	bic.w	r3, r3, #6
 80012a6:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 80012a8:	2300      	movs	r3, #0
 80012aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012b0:	4a25      	ldr	r2, [pc, #148]	; (8001348 <HAL_ADC_Start_DMA+0x124>)
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012b6:	4a25      	ldr	r2, [pc, #148]	; (800134c <HAL_ADC_Start_DMA+0x128>)
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012bc:	4a24      	ldr	r2, [pc, #144]	; (8001350 <HAL_ADC_Start_DMA+0x12c>)
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	221c      	movs	r2, #28
 80012c4:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012c6:	6822      	ldr	r2, [r4, #0]
 80012c8:	6853      	ldr	r3, [r2, #4]
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012d0:	6822      	ldr	r2, [r4, #0]
 80012d2:	68d3      	ldr	r3, [r2, #12]
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012da:	6821      	ldr	r1, [r4, #0]
 80012dc:	463b      	mov	r3, r7
 80012de:	4632      	mov	r2, r6
 80012e0:	3140      	adds	r1, #64	; 0x40
 80012e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012e4:	f000 fb10 	bl	8001908 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80012e8:	6822      	ldr	r2, [r4, #0]
 80012ea:	6893      	ldr	r3, [r2, #8]
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6093      	str	r3, [r2, #8]
 80012f2:	e79e      	b.n	8001232 <HAL_ADC_Start_DMA+0xe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012fa:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001304:	d0c8      	beq.n	8001298 <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001306:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001308:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800130c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001310:	6463      	str	r3, [r4, #68]	; 0x44
 8001312:	e7c1      	b.n	8001298 <HAL_ADC_Start_DMA+0x74>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001314:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800131e:	d0bb      	beq.n	8001298 <HAL_ADC_Start_DMA+0x74>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001322:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001326:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800132a:	6463      	str	r3, [r4, #68]	; 0x44
 800132c:	e7b4      	b.n	8001298 <HAL_ADC_Start_DMA+0x74>
          ADC_CLEAR_ERRORCODE(hadc);
 800132e:	2300      	movs	r3, #0
 8001330:	64a3      	str	r3, [r4, #72]	; 0x48
 8001332:	e7b9      	b.n	80012a8 <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 8001334:	2300      	movs	r3, #0
 8001336:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800133a:	e77a      	b.n	8001232 <HAL_ADC_Start_DMA+0xe>
    __HAL_LOCK(hadc);
 800133c:	2502      	movs	r5, #2
 800133e:	e778      	b.n	8001232 <HAL_ADC_Start_DMA+0xe>
 8001340:	50000300 	.word	0x50000300
 8001344:	50000100 	.word	0x50000100
 8001348:	08000fbd 	.word	0x08000fbd
 800134c:	08000fb3 	.word	0x08000fb3
 8001350:	08000f99 	.word	0x08000f99

08001354 <HAL_ADCEx_Calibration_Start>:
{
 8001354:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001356:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800135a:	2b01      	cmp	r3, #1
 800135c:	d102      	bne.n	8001364 <HAL_ADCEx_Calibration_Start+0x10>
 800135e:	2502      	movs	r5, #2
}
 8001360:	4628      	mov	r0, r5
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	460e      	mov	r6, r1
 8001366:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001368:	2301      	movs	r3, #1
 800136a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_Disable(hadc);
 800136e:	f7ff fd8d 	bl	8000e8c <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8001372:	4605      	mov	r5, r0
 8001374:	2800      	cmp	r0, #0
 8001376:	d130      	bne.n	80013da <HAL_ADCEx_Calibration_Start+0x86>
    hadc->State = HAL_ADC_STATE_READY;
 8001378:	2301      	movs	r3, #1
 800137a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800137c:	6822      	ldr	r2, [r4, #0]
 800137e:	6893      	ldr	r3, [r2, #8]
 8001380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001384:	6093      	str	r3, [r2, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001386:	2e01      	cmp	r6, #1
 8001388:	d01b      	beq.n	80013c2 <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800138a:	6822      	ldr	r2, [r4, #0]
 800138c:	6893      	ldr	r3, [r2, #8]
 800138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001392:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001394:	f7ff fd60 	bl	8000e58 <HAL_GetTick>
 8001398:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da15      	bge.n	80013ce <HAL_ADCEx_Calibration_Start+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013a2:	f7ff fd59 	bl	8000e58 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	280a      	cmp	r0, #10
 80013aa:	d9f6      	bls.n	800139a <HAL_ADCEx_Calibration_Start+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 80013ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ae:	f023 0312 	bic.w	r3, r3, #18
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80013b8:	2300      	movs	r3, #0
 80013ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80013be:	2501      	movs	r5, #1
 80013c0:	e7ce      	b.n	8001360 <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	6893      	ldr	r3, [r2, #8]
 80013c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013ca:	6093      	str	r3, [r2, #8]
 80013cc:	e7dd      	b.n	800138a <HAL_ADCEx_Calibration_Start+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 80013ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013d0:	f023 0303 	bic.w	r3, r3, #3
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80013da:	2300      	movs	r3, #0
 80013dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 80013e0:	e7be      	b.n	8001360 <HAL_ADCEx_Calibration_Start+0xc>
	...

080013e4 <HAL_ADC_ConfigChannel>:
{
 80013e4:	b470      	push	{r4, r5, r6}
 80013e6:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80013e8:	2200      	movs	r2, #0
 80013ea:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 80013ec:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80013f0:	2a01      	cmp	r2, #1
 80013f2:	f000 81ad 	beq.w	8001750 <HAL_ADC_ConfigChannel+0x36c>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2201      	movs	r2, #1
 80013fa:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013fe:	6800      	ldr	r0, [r0, #0]
 8001400:	6882      	ldr	r2, [r0, #8]
 8001402:	f012 0f04 	tst.w	r2, #4
 8001406:	f040 8196 	bne.w	8001736 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 800140a:	684a      	ldr	r2, [r1, #4]
 800140c:	2a04      	cmp	r2, #4
 800140e:	d831      	bhi.n	8001474 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8001410:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001412:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001416:	0055      	lsls	r5, r2, #1
 8001418:	221f      	movs	r2, #31
 800141a:	40aa      	lsls	r2, r5
 800141c:	ea24 0202 	bic.w	r2, r4, r2
 8001420:	680c      	ldr	r4, [r1, #0]
 8001422:	40ac      	lsls	r4, r5
 8001424:	4322      	orrs	r2, r4
 8001426:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	6882      	ldr	r2, [r0, #8]
 800142c:	f012 0f0c 	tst.w	r2, #12
 8001430:	d168      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001432:	680a      	ldr	r2, [r1, #0]
 8001434:	2a09      	cmp	r2, #9
 8001436:	d94e      	bls.n	80014d6 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001438:	6984      	ldr	r4, [r0, #24]
 800143a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800143e:	3a1e      	subs	r2, #30
 8001440:	2507      	movs	r5, #7
 8001442:	4095      	lsls	r5, r2
 8001444:	ea24 0405 	bic.w	r4, r4, r5
 8001448:	688d      	ldr	r5, [r1, #8]
 800144a:	fa05 f202 	lsl.w	r2, r5, r2
 800144e:	4322      	orrs	r2, r4
 8001450:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001452:	6948      	ldr	r0, [r1, #20]
 8001454:	681c      	ldr	r4, [r3, #0]
 8001456:	68e2      	ldr	r2, [r4, #12]
 8001458:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800145c:	0052      	lsls	r2, r2, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8001462:	6908      	ldr	r0, [r1, #16]
 8001464:	3801      	subs	r0, #1
 8001466:	2803      	cmp	r0, #3
 8001468:	f200 808f 	bhi.w	800158a <HAL_ADC_ConfigChannel+0x1a6>
 800146c:	e8df f000 	tbb	[pc, r0]
 8001470:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8001474:	2a09      	cmp	r2, #9
 8001476:	d80e      	bhi.n	8001496 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001478:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800147a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800147e:	0055      	lsls	r5, r2, #1
 8001480:	3d1e      	subs	r5, #30
 8001482:	221f      	movs	r2, #31
 8001484:	40aa      	lsls	r2, r5
 8001486:	ea24 0202 	bic.w	r2, r4, r2
 800148a:	680c      	ldr	r4, [r1, #0]
 800148c:	fa04 f505 	lsl.w	r5, r4, r5
 8001490:	432a      	orrs	r2, r5
 8001492:	6342      	str	r2, [r0, #52]	; 0x34
 8001494:	e7c8      	b.n	8001428 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001496:	2a0e      	cmp	r2, #14
 8001498:	d80e      	bhi.n	80014b8 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800149a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800149c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80014a0:	0055      	lsls	r5, r2, #1
 80014a2:	3d3c      	subs	r5, #60	; 0x3c
 80014a4:	221f      	movs	r2, #31
 80014a6:	40aa      	lsls	r2, r5
 80014a8:	ea24 0202 	bic.w	r2, r4, r2
 80014ac:	680c      	ldr	r4, [r1, #0]
 80014ae:	fa04 f505 	lsl.w	r5, r4, r5
 80014b2:	432a      	orrs	r2, r5
 80014b4:	6382      	str	r2, [r0, #56]	; 0x38
 80014b6:	e7b7      	b.n	8001428 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014b8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80014ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80014be:	0055      	lsls	r5, r2, #1
 80014c0:	3d5a      	subs	r5, #90	; 0x5a
 80014c2:	221f      	movs	r2, #31
 80014c4:	40aa      	lsls	r2, r5
 80014c6:	ea24 0202 	bic.w	r2, r4, r2
 80014ca:	680c      	ldr	r4, [r1, #0]
 80014cc:	fa04 f505 	lsl.w	r5, r4, r5
 80014d0:	432a      	orrs	r2, r5
 80014d2:	63c2      	str	r2, [r0, #60]	; 0x3c
 80014d4:	e7a8      	b.n	8001428 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014d6:	6944      	ldr	r4, [r0, #20]
 80014d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80014dc:	2507      	movs	r5, #7
 80014de:	4095      	lsls	r5, r2
 80014e0:	ea24 0405 	bic.w	r4, r4, r5
 80014e4:	688d      	ldr	r5, [r1, #8]
 80014e6:	fa05 f202 	lsl.w	r2, r5, r2
 80014ea:	4322      	orrs	r2, r4
 80014ec:	6142      	str	r2, [r0, #20]
 80014ee:	e7b0      	b.n	8001452 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80014f2:	4d98      	ldr	r5, [pc, #608]	; (8001754 <HAL_ADC_ConfigChannel+0x370>)
 80014f4:	4005      	ands	r5, r0
 80014f6:	6808      	ldr	r0, [r1, #0]
 80014f8:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80014fc:	4315      	orrs	r5, r2
 80014fe:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001502:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	6882      	ldr	r2, [r0, #8]
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	2a01      	cmp	r2, #1
 800150e:	d06f      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0x20c>
 8001510:	2200      	movs	r2, #0
 8001512:	2a00      	cmp	r2, #0
 8001514:	f040 811a 	bne.w	800174c <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001518:	68cc      	ldr	r4, [r1, #12]
 800151a:	2c01      	cmp	r4, #1
 800151c:	d070      	beq.n	8001600 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800151e:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001522:	680e      	ldr	r6, [r1, #0]
 8001524:	2501      	movs	r5, #1
 8001526:	40b5      	lsls	r5, r6
 8001528:	ea24 0405 	bic.w	r4, r4, r5
 800152c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001530:	6809      	ldr	r1, [r1, #0]
 8001532:	2910      	cmp	r1, #16
 8001534:	f000 808d 	beq.w	8001652 <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001538:	2911      	cmp	r1, #17
 800153a:	f000 80af 	beq.w	800169c <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800153e:	2912      	cmp	r1, #18
 8001540:	f000 80b2 	beq.w	80016a8 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	e0fb      	b.n	8001740 <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001548:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800154a:	4d82      	ldr	r5, [pc, #520]	; (8001754 <HAL_ADC_ConfigChannel+0x370>)
 800154c:	4005      	ands	r5, r0
 800154e:	6808      	ldr	r0, [r1, #0]
 8001550:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001554:	4315      	orrs	r5, r2
 8001556:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800155a:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 800155c:	e7d2      	b.n	8001504 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800155e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001560:	4d7c      	ldr	r5, [pc, #496]	; (8001754 <HAL_ADC_ConfigChannel+0x370>)
 8001562:	4005      	ands	r5, r0
 8001564:	6808      	ldr	r0, [r1, #0]
 8001566:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 800156a:	4315      	orrs	r5, r2
 800156c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001570:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8001572:	e7c7      	b.n	8001504 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001574:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001576:	4877      	ldr	r0, [pc, #476]	; (8001754 <HAL_ADC_ConfigChannel+0x370>)
 8001578:	4028      	ands	r0, r5
 800157a:	680d      	ldr	r5, [r1, #0]
 800157c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001580:	4302      	orrs	r2, r0
 8001582:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001586:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001588:	e7bc      	b.n	8001504 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800158a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800158c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001590:	6808      	ldr	r0, [r1, #0]
 8001592:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001596:	d01c      	beq.n	80015d2 <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800159c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80015a0:	680c      	ldr	r4, [r1, #0]
 80015a2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80015a6:	d019      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80015ac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80015b0:	680c      	ldr	r4, [r1, #0]
 80015b2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80015b6:	d016      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80015bc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80015c0:	680c      	ldr	r4, [r1, #0]
 80015c2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80015c6:	d19d      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015c8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80015ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ce:	66c2      	str	r2, [r0, #108]	; 0x6c
 80015d0:	e798      	b.n	8001504 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80015d2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80015d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015d8:	6622      	str	r2, [r4, #96]	; 0x60
 80015da:	e7dd      	b.n	8001598 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80015dc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80015de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015e2:	6642      	str	r2, [r0, #100]	; 0x64
 80015e4:	e7e0      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015e6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80015e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ec:	6682      	str	r2, [r0, #104]	; 0x68
 80015ee:	e7e3      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015f0:	6802      	ldr	r2, [r0, #0]
 80015f2:	f012 0f01 	tst.w	r2, #1
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x218>
 80015f8:	2200      	movs	r2, #0
 80015fa:	e78a      	b.n	8001512 <HAL_ADC_ConfigChannel+0x12e>
 80015fc:	2201      	movs	r2, #1
 80015fe:	e788      	b.n	8001512 <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001600:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001604:	680e      	ldr	r6, [r1, #0]
 8001606:	2501      	movs	r5, #1
 8001608:	40b5      	lsls	r5, r6
 800160a:	432c      	orrs	r4, r5
 800160c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001610:	6808      	ldr	r0, [r1, #0]
 8001612:	2809      	cmp	r0, #9
 8001614:	d90e      	bls.n	8001634 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001616:	681e      	ldr	r6, [r3, #0]
 8001618:	69b4      	ldr	r4, [r6, #24]
 800161a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800161e:	381b      	subs	r0, #27
 8001620:	2507      	movs	r5, #7
 8001622:	4085      	lsls	r5, r0
 8001624:	ea24 0405 	bic.w	r4, r4, r5
 8001628:	688d      	ldr	r5, [r1, #8]
 800162a:	fa05 f000 	lsl.w	r0, r5, r0
 800162e:	4320      	orrs	r0, r4
 8001630:	61b0      	str	r0, [r6, #24]
 8001632:	e77d      	b.n	8001530 <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001634:	681e      	ldr	r6, [r3, #0]
 8001636:	6974      	ldr	r4, [r6, #20]
 8001638:	3001      	adds	r0, #1
 800163a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800163e:	2507      	movs	r5, #7
 8001640:	4085      	lsls	r5, r0
 8001642:	ea24 0405 	bic.w	r4, r4, r5
 8001646:	688d      	ldr	r5, [r1, #8]
 8001648:	fa05 f000 	lsl.w	r0, r5, r0
 800164c:	4320      	orrs	r0, r4
 800164e:	6170      	str	r0, [r6, #20]
 8001650:	e76e      	b.n	8001530 <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001652:	4841      	ldr	r0, [pc, #260]	; (8001758 <HAL_ADC_ConfigChannel+0x374>)
 8001654:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001656:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800165a:	f47f af6d 	bne.w	8001538 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800165e:	681c      	ldr	r4, [r3, #0]
 8001660:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001664:	d027      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x2d2>
 8001666:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800166a:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800166c:	68a0      	ldr	r0, [r4, #8]
 800166e:	f000 0003 	and.w	r0, r0, #3
 8001672:	2801      	cmp	r0, #1
 8001674:	d022      	beq.n	80016bc <HAL_ADC_ConfigChannel+0x2d8>
 8001676:	2a00      	cmp	r2, #0
 8001678:	d157      	bne.n	800172a <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800167a:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800167c:	b135      	cbz	r5, 800168c <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800167e:	68a8      	ldr	r0, [r5, #8]
 8001680:	f000 0003 	and.w	r0, r0, #3
 8001684:	2801      	cmp	r0, #1
 8001686:	d01f      	beq.n	80016c8 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001688:	2a00      	cmp	r2, #0
 800168a:	d14e      	bne.n	800172a <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800168c:	2910      	cmp	r1, #16
 800168e:	d021      	beq.n	80016d4 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001690:	2911      	cmp	r1, #17
 8001692:	d039      	beq.n	8001708 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001694:	2912      	cmp	r1, #18
 8001696:	d041      	beq.n	800171c <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001698:	2000      	movs	r0, #0
 800169a:	e051      	b.n	8001740 <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800169c:	482e      	ldr	r0, [pc, #184]	; (8001758 <HAL_ADC_ConfigChannel+0x374>)
 800169e:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016a0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80016a4:	d0db      	beq.n	800165e <HAL_ADC_ConfigChannel+0x27a>
 80016a6:	e74a      	b.n	800153e <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016a8:	482b      	ldr	r0, [pc, #172]	; (8001758 <HAL_ADC_ConfigChannel+0x374>)
 80016aa:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016ac:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80016b0:	d0d5      	beq.n	800165e <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b2:	2000      	movs	r0, #0
 80016b4:	e044      	b.n	8001740 <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016b6:	4829      	ldr	r0, [pc, #164]	; (800175c <HAL_ADC_ConfigChannel+0x378>)
 80016b8:	9001      	str	r0, [sp, #4]
 80016ba:	e7d7      	b.n	800166c <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	f010 0f01 	tst.w	r0, #1
 80016c2:	d0d8      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x292>
 80016c4:	2201      	movs	r2, #1
 80016c6:	e7d6      	b.n	8001676 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016c8:	6828      	ldr	r0, [r5, #0]
 80016ca:	f010 0f01 	tst.w	r0, #1
 80016ce:	d0db      	beq.n	8001688 <HAL_ADC_ConfigChannel+0x2a4>
 80016d0:	2201      	movs	r2, #1
 80016d2:	e7d9      	b.n	8001688 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016d4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80016d8:	d1da      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016da:	491f      	ldr	r1, [pc, #124]	; (8001758 <HAL_ADC_ConfigChannel+0x374>)
 80016dc:	688a      	ldr	r2, [r1, #8]
 80016de:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016e2:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e4:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <HAL_ADC_ConfigChannel+0x37c>)
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	491e      	ldr	r1, [pc, #120]	; (8001764 <HAL_ADC_ConfigChannel+0x380>)
 80016ea:	fbb2 f1f1 	udiv	r1, r2, r1
 80016ee:	220a      	movs	r2, #10
 80016f0:	fb02 f201 	mul.w	r2, r2, r1
 80016f4:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80016f6:	e002      	b.n	80016fe <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 80016f8:	9a00      	ldr	r2, [sp, #0]
 80016fa:	3a01      	subs	r2, #1
 80016fc:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80016fe:	9a00      	ldr	r2, [sp, #0]
 8001700:	2a00      	cmp	r2, #0
 8001702:	d1f9      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2000      	movs	r0, #0
 8001706:	e01b      	b.n	8001740 <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001708:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800170c:	d1c2      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800170e:	4912      	ldr	r1, [pc, #72]	; (8001758 <HAL_ADC_ConfigChannel+0x374>)
 8001710:	688a      	ldr	r2, [r1, #8]
 8001712:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001716:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001718:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800171a:	e011      	b.n	8001740 <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <HAL_ADC_ConfigChannel+0x374>)
 800171e:	688a      	ldr	r2, [r1, #8]
 8001720:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001724:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001726:	2000      	movs	r0, #0
 8001728:	e00a      	b.n	8001740 <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800172c:	f042 0220 	orr.w	r2, r2, #32
 8001730:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001732:	2001      	movs	r0, #1
 8001734:	e004      	b.n	8001740 <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001738:	f042 0220 	orr.w	r2, r2, #32
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800173e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001746:	b017      	add	sp, #92	; 0x5c
 8001748:	bc70      	pop	{r4, r5, r6}
 800174a:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174c:	2000      	movs	r0, #0
 800174e:	e7f7      	b.n	8001740 <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 8001750:	2002      	movs	r0, #2
 8001752:	e7f8      	b.n	8001746 <HAL_ADC_ConfigChannel+0x362>
 8001754:	83fff000 	.word	0x83fff000
 8001758:	50000300 	.word	0x50000300
 800175c:	50000100 	.word	0x50000100
 8001760:	20000000 	.word	0x20000000
 8001764:	000f4240 	.word	0x000f4240

08001768 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800176a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001774:	0200      	lsls	r0, r0, #8
 8001776:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800177c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001780:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001784:	60d0      	str	r0, [r2, #12]
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_NVIC_SetPriority+0x5c>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001796:	f1c3 0407 	rsb	r4, r3, #7
 800179a:	2c04      	cmp	r4, #4
 800179c:	bf28      	it	cs
 800179e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a0:	1d1d      	adds	r5, r3, #4
 80017a2:	2d06      	cmp	r5, #6
 80017a4:	d917      	bls.n	80017d6 <HAL_NVIC_SetPriority+0x4a>
 80017a6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	2501      	movs	r5, #1
 80017aa:	fa05 f404 	lsl.w	r4, r5, r4
 80017ae:	3c01      	subs	r4, #1
 80017b0:	4021      	ands	r1, r4
 80017b2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	fa05 f303 	lsl.w	r3, r5, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80017be:	2800      	cmp	r0, #0
 80017c0:	db0b      	blt.n	80017da <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	0109      	lsls	r1, r1, #4
 80017c4:	b2c9      	uxtb	r1, r1
 80017c6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017ca:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017ce:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017d2:	bc30      	pop	{r4, r5}
 80017d4:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	2300      	movs	r3, #0
 80017d8:	e7e6      	b.n	80017a8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	f000 000f 	and.w	r0, r0, #15
 80017de:	0109      	lsls	r1, r1, #4
 80017e0:	b2c9      	uxtb	r1, r1
 80017e2:	4b02      	ldr	r3, [pc, #8]	; (80017ec <HAL_NVIC_SetPriority+0x60>)
 80017e4:	5419      	strb	r1, [r3, r0]
 80017e6:	e7f4      	b.n	80017d2 <HAL_NVIC_SetPriority+0x46>
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	e000ed14 	.word	0xe000ed14

080017f0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017f0:	0942      	lsrs	r2, r0, #5
 80017f2:	f000 001f 	and.w	r0, r0, #31
 80017f6:	2301      	movs	r3, #1
 80017f8:	fa03 f000 	lsl.w	r0, r3, r0
 80017fc:	4b01      	ldr	r3, [pc, #4]	; (8001804 <HAL_NVIC_EnableIRQ+0x14>)
 80017fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100

08001808 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	3801      	subs	r0, #1
 800180a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800180e:	d20a      	bcs.n	8001826 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_SYSTICK_Config+0x24>)
 8001812:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	21f0      	movs	r1, #240	; 0xf0
 8001816:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_SYSTICK_Config+0x28>)
 8001818:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	2000      	movs	r0, #0
 800181e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001834:	2804      	cmp	r0, #4
 8001836:	d005      	beq.n	8001844 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001838:	4a05      	ldr	r2, [pc, #20]	; (8001850 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800183a:	6813      	ldr	r3, [r2, #0]
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001844:	4a02      	ldr	r2, [pc, #8]	; (8001850 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4770      	bx	lr
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001854:	4770      	bx	lr

08001856 <HAL_SYSTICK_IRQHandler>:
{
 8001856:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001858:	f7ff fffc 	bl	8001854 <HAL_SYSTICK_Callback>
 800185c:	bd08      	pop	{r3, pc}

0800185e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800185e:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001860:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001862:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001864:	2401      	movs	r4, #1
 8001866:	40b4      	lsls	r4, r6
 8001868:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800186a:	6804      	ldr	r4, [r0, #0]
 800186c:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800186e:	6843      	ldr	r3, [r0, #4]
 8001870:	2b10      	cmp	r3, #16
 8001872:	d005      	beq.n	8001880 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001874:	6803      	ldr	r3, [r0, #0]
 8001876:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001878:	6803      	ldr	r3, [r0, #0]
 800187a:	60da      	str	r2, [r3, #12]
  }
}
 800187c:	bc70      	pop	{r4, r5, r6}
 800187e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001880:	6803      	ldr	r3, [r0, #0]
 8001882:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001884:	6803      	ldr	r3, [r0, #0]
 8001886:	60d9      	str	r1, [r3, #12]
 8001888:	e7f8      	b.n	800187c <DMA_SetConfig+0x1e>
	...

0800188c <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800188c:	6802      	ldr	r2, [r0, #0]
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <DMA_CalcBaseAndBitshift+0x18>)
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <DMA_CalcBaseAndBitshift+0x1c>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <DMA_CalcBaseAndBitshift+0x20>)
 80018a0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80018a2:	4770      	bx	lr
 80018a4:	bffdfff8 	.word	0xbffdfff8
 80018a8:	cccccccd 	.word	0xcccccccd
 80018ac:	40020000 	.word	0x40020000

080018b0 <HAL_DMA_Init>:
  if(NULL == hdma)
 80018b0:	b340      	cbz	r0, 8001904 <HAL_DMA_Init+0x54>
{ 
 80018b2:	b510      	push	{r4, lr}
 80018b4:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b6:	2302      	movs	r3, #2
 80018b8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80018bc:	6801      	ldr	r1, [r0, #0]
 80018be:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018c0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80018c4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80018c8:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 80018cc:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ce:	68e0      	ldr	r0, [r4, #12]
 80018d0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	6960      	ldr	r0, [r4, #20]
 80018d8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80018da:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018dc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80018de:	69e0      	ldr	r0, [r4, #28]
 80018e0:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80018e2:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80018e4:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff ffd0 	bl	800188c <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 80018ec:	2000      	movs	r0, #0
 80018ee:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80018f0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80018f2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80018f4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80018fe:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8001902:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001904:	2001      	movs	r0, #1
 8001906:	4770      	bx	lr

08001908 <HAL_DMA_Start_IT>:
{
 8001908:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800190a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800190e:	2c01      	cmp	r4, #1
 8001910:	d032      	beq.n	8001978 <HAL_DMA_Start_IT+0x70>
 8001912:	2401      	movs	r4, #1
 8001914:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001918:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 800191c:	2c01      	cmp	r4, #1
 800191e:	d004      	beq.n	800192a <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001920:	2300      	movs	r3, #0
 8001922:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001926:	2002      	movs	r0, #2
 8001928:	bd38      	pop	{r3, r4, r5, pc}
 800192a:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 800192c:	2002      	movs	r0, #2
 800192e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001932:	2000      	movs	r0, #0
 8001934:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001936:	6825      	ldr	r5, [r4, #0]
 8001938:	6828      	ldr	r0, [r5, #0]
 800193a:	f020 0001 	bic.w	r0, r0, #1
 800193e:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001940:	4620      	mov	r0, r4
 8001942:	f7ff ff8c 	bl	800185e <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001948:	b15b      	cbz	r3, 8001962 <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	f043 030e 	orr.w	r3, r3, #14
 8001952:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800195e:	2000      	movs	r0, #0
 8001960:	bd38      	pop	{r3, r4, r5, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	6813      	ldr	r3, [r2, #0]
 8001966:	f043 030a 	orr.w	r3, r3, #10
 800196a:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800196c:	6822      	ldr	r2, [r4, #0]
 800196e:	6813      	ldr	r3, [r2, #0]
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e7ed      	b.n	8001954 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001978:	2002      	movs	r0, #2
} 
 800197a:	bd38      	pop	{r3, r4, r5, pc}

0800197c <HAL_DMA_Abort_IT>:
{  
 800197c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001982:	2b02      	cmp	r3, #2
 8001984:	d003      	beq.n	800198e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001986:	2304      	movs	r3, #4
 8001988:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800198a:	2001      	movs	r0, #1
 800198c:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800198e:	6802      	ldr	r2, [r0, #0]
 8001990:	6813      	ldr	r3, [r2, #0]
 8001992:	f023 030e 	bic.w	r3, r3, #14
 8001996:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001998:	6802      	ldr	r2, [r0, #0]
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019a2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80019a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019a6:	2201      	movs	r2, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80019b2:	2300      	movs	r3, #0
 80019b4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019ba:	b113      	cbz	r3, 80019c2 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80019bc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019be:	2000      	movs	r0, #0
 80019c0:	bd08      	pop	{r3, pc}
 80019c2:	2000      	movs	r0, #0
}
 80019c4:	bd08      	pop	{r3, pc}

080019c6 <HAL_DMA_IRQHandler>:
{
 80019c6:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80019ca:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80019cc:	6804      	ldr	r4, [r0, #0]
 80019ce:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019d0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80019d2:	2304      	movs	r3, #4
 80019d4:	408b      	lsls	r3, r1
 80019d6:	421a      	tst	r2, r3
 80019d8:	d014      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x3e>
 80019da:	f015 0f04 	tst.w	r5, #4
 80019de:	d011      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x3e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	f013 0f20 	tst.w	r3, #32
 80019e6:	d103      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80019f2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80019f4:	2304      	movs	r3, #4
 80019f6:	408b      	lsls	r3, r1
 80019f8:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80019fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03a      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferHalfCpltCallback(hdma);
 8001a00:	4798      	blx	r3
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a04:	2302      	movs	r3, #2
 8001a06:	408b      	lsls	r3, r1
 8001a08:	421a      	tst	r2, r3
 8001a0a:	d019      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x7a>
 8001a0c:	f015 0f02 	tst.w	r5, #2
 8001a10:	d016      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	f013 0f20 	tst.w	r3, #32
 8001a18:	d106      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x62>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	f023 030a 	bic.w	r3, r3, #10
 8001a20:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001a2a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	408b      	lsls	r3, r1
 8001a30:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001a32:	2300      	movs	r3, #0
 8001a34:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001a38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a3a:	b1e3      	cbz	r3, 8001a76 <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferCpltCallback(hdma);
 8001a3c:	4798      	blx	r3
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a40:	2308      	movs	r3, #8
 8001a42:	fa03 f101 	lsl.w	r1, r3, r1
 8001a46:	420a      	tst	r2, r1
 8001a48:	d015      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xb0>
 8001a4a:	f015 0f08 	tst.w	r5, #8
 8001a4e:	d012      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xb0>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	f023 030e 	bic.w	r3, r3, #14
 8001a56:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a58:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001a5a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	fa03 f202 	lsl.w	r2, r3, r2
 8001a62:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a64:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001a66:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001a70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a72:	b103      	cbz	r3, 8001a76 <HAL_DMA_IRQHandler+0xb0>
    	hdma->XferErrorCallback(hdma);
 8001a74:	4798      	blx	r3
 8001a76:	bd38      	pop	{r3, r4, r5, pc}

08001a78 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <FLASH_Program_HalfWord+0x14>)
 8001a7c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <FLASH_Program_HalfWord+0x18>)
 8001a80:	6913      	ldr	r3, [r2, #16]
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001a88:	8001      	strh	r1, [r0, #0]
 8001a8a:	4770      	bx	lr
 8001a8c:	20000338 	.word	0x20000338
 8001a90:	40022000 	.word	0x40022000

08001a94 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <FLASH_SetErrorCode+0x38>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f013 0f10 	tst.w	r3, #16
 8001a9c:	d014      	beq.n	8001ac8 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <FLASH_SetErrorCode+0x3c>)
 8001aa0:	69d3      	ldr	r3, [r2, #28]
 8001aa2:	f043 0302 	orr.w	r3, r3, #2
 8001aa6:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001aa8:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <FLASH_SetErrorCode+0x38>)
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	f012 0f04 	tst.w	r2, #4
 8001ab2:	d006      	beq.n	8001ac2 <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001ab4:	4906      	ldr	r1, [pc, #24]	; (8001ad0 <FLASH_SetErrorCode+0x3c>)
 8001ab6:	69ca      	ldr	r2, [r1, #28]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8001abe:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ac2:	4a02      	ldr	r2, [pc, #8]	; (8001acc <FLASH_SetErrorCode+0x38>)
 8001ac4:	60d3      	str	r3, [r2, #12]
 8001ac6:	4770      	bx	lr
  uint32_t flags = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e7ee      	b.n	8001aaa <FLASH_SetErrorCode+0x16>
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	20000338 	.word	0x20000338

08001ad4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_FLASH_Unlock+0x20>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001adc:	d007      	beq.n	8001aee <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_FLASH_Unlock+0x20>)
 8001ae0:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <HAL_FLASH_Unlock+0x24>)
 8001ae2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ae4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001ae8:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8001aea:	2000      	movs	r0, #0
 8001aec:	4770      	bx	lr
    return HAL_ERROR;
 8001aee:	2001      	movs	r0, #1
}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000
 8001af8:	45670123 	.word	0x45670123

08001afc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_FLASH_Lock+0x10>)
 8001afe:	6913      	ldr	r3, [r2, #16]
 8001b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b04:	6113      	str	r3, [r2, #16]
}
 8001b06:	2000      	movs	r0, #0
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40022000 	.word	0x40022000

08001b10 <FLASH_WaitForLastOperation>:
{
 8001b10:	b538      	push	{r3, r4, r5, lr}
 8001b12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff f9a0 	bl	8000e58 <HAL_GetTick>
 8001b18:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <FLASH_WaitForLastOperation+0x60>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f013 0f01 	tst.w	r3, #1
 8001b22:	d00a      	beq.n	8001b3a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001b24:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001b28:	d0f7      	beq.n	8001b1a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b2a:	b1e4      	cbz	r4, 8001b66 <FLASH_WaitForLastOperation+0x56>
 8001b2c:	f7ff f994 	bl	8000e58 <HAL_GetTick>
 8001b30:	1b40      	subs	r0, r0, r5
 8001b32:	4284      	cmp	r4, r0
 8001b34:	d2f1      	bcs.n	8001b1a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001b36:	2003      	movs	r0, #3
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <FLASH_WaitForLastOperation+0x60>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f013 0f20 	tst.w	r3, #32
 8001b42:	d002      	beq.n	8001b4a <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b44:	2220      	movs	r2, #32
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <FLASH_WaitForLastOperation+0x60>)
 8001b48:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <FLASH_WaitForLastOperation+0x60>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f013 0f10 	tst.w	r3, #16
 8001b52:	d104      	bne.n	8001b5e <FLASH_WaitForLastOperation+0x4e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <FLASH_WaitForLastOperation+0x60>)
 8001b56:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b58:	f013 0f04 	tst.w	r3, #4
 8001b5c:	d005      	beq.n	8001b6a <FLASH_WaitForLastOperation+0x5a>
    FLASH_SetErrorCode();
 8001b5e:	f7ff ff99 	bl	8001a94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b62:	2001      	movs	r0, #1
 8001b64:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8001b66:	2003      	movs	r0, #3
 8001b68:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001b6a:	2000      	movs	r0, #0
}
 8001b6c:	bd38      	pop	{r3, r4, r5, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_FLASH_Program>:
{
 8001b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001b78:	4c23      	ldr	r4, [pc, #140]	; (8001c08 <HAL_FLASH_Program+0x94>)
 8001b7a:	7e24      	ldrb	r4, [r4, #24]
 8001b7c:	2c01      	cmp	r4, #1
 8001b7e:	d103      	bne.n	8001b88 <HAL_FLASH_Program+0x14>
 8001b80:	2302      	movs	r3, #2
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b88:	461e      	mov	r6, r3
 8001b8a:	4690      	mov	r8, r2
 8001b8c:	460f      	mov	r7, r1
 8001b8e:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001b90:	2201      	movs	r2, #1
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_FLASH_Program+0x94>)
 8001b94:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b9a:	f7ff ffb9 	bl	8001b10 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	bb70      	cbnz	r0, 8001c00 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001ba2:	2c01      	cmp	r4, #1
 8001ba4:	d029      	beq.n	8001bfa <HAL_FLASH_Program+0x86>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001ba6:	2c02      	cmp	r4, #2
 8001ba8:	d024      	beq.n	8001bf4 <HAL_FLASH_Program+0x80>
      nbiterations = 4U;
 8001baa:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001bae:	2400      	movs	r4, #0
 8001bb0:	454c      	cmp	r4, r9
 8001bb2:	d225      	bcs.n	8001c00 <HAL_FLASH_Program+0x8c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001bb4:	0121      	lsls	r1, r4, #4
 8001bb6:	f1c1 0220 	rsb	r2, r1, #32
 8001bba:	f1a1 0320 	sub.w	r3, r1, #32
 8001bbe:	fa28 f101 	lsr.w	r1, r8, r1
 8001bc2:	fa06 f202 	lsl.w	r2, r6, r2
 8001bc6:	4311      	orrs	r1, r2
 8001bc8:	fa26 f303 	lsr.w	r3, r6, r3
 8001bcc:	4319      	orrs	r1, r3
 8001bce:	b289      	uxth	r1, r1
 8001bd0:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8001bd4:	f7ff ff50 	bl	8001a78 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bdc:	f7ff ff98 	bl	8001b10 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_FLASH_Program+0x98>)
 8001be2:	691d      	ldr	r5, [r3, #16]
 8001be4:	f025 0501 	bic.w	r5, r5, #1
 8001be8:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8001bea:	4603      	mov	r3, r0
 8001bec:	b940      	cbnz	r0, 8001c00 <HAL_FLASH_Program+0x8c>
    for (index = 0U; index < nbiterations; index++)
 8001bee:	3401      	adds	r4, #1
 8001bf0:	b2e4      	uxtb	r4, r4
 8001bf2:	e7dd      	b.n	8001bb0 <HAL_FLASH_Program+0x3c>
      nbiterations = 2U;
 8001bf4:	f04f 0902 	mov.w	r9, #2
 8001bf8:	e7d9      	b.n	8001bae <HAL_FLASH_Program+0x3a>
      nbiterations = 1U;
 8001bfa:	f04f 0901 	mov.w	r9, #1
 8001bfe:	e7d6      	b.n	8001bae <HAL_FLASH_Program+0x3a>
  __HAL_UNLOCK(&pFlash);
 8001c00:	2100      	movs	r1, #0
 8001c02:	4a01      	ldr	r2, [pc, #4]	; (8001c08 <HAL_FLASH_Program+0x94>)
 8001c04:	7611      	strb	r1, [r2, #24]
  return status;
 8001c06:	e7bc      	b.n	8001b82 <HAL_FLASH_Program+0xe>
 8001c08:	20000338 	.word	0x20000338
 8001c0c:	40022000 	.word	0x40022000

08001c10 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c10:	2200      	movs	r2, #0
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <FLASH_MassErase+0x1c>)
 8001c14:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <FLASH_MassErase+0x20>)
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	f042 0204 	orr.w	r2, r2, #4
 8001c1e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000338 	.word	0x20000338
 8001c30:	40022000 	.word	0x40022000

08001c34 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c34:	2200      	movs	r2, #0
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <FLASH_PageErase+0x1c>)
 8001c38:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <FLASH_PageErase+0x20>)
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	f042 0202 	orr.w	r2, r2, #2
 8001c42:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c44:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	4770      	bx	lr
 8001c50:	20000338 	.word	0x20000338
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_FLASHEx_Erase+0x9c>)
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d045      	beq.n	8001cec <HAL_FLASHEx_Erase+0x94>
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	460e      	mov	r6, r1
 8001c64:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8001c66:	2201      	movs	r2, #1
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_FLASHEx_Erase+0x9c>)
 8001c6a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c6c:	6803      	ldr	r3, [r0, #0]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d020      	beq.n	8001cb4 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c76:	f7ff ff4b 	bl	8001b10 <FLASH_WaitForLastOperation>
 8001c7a:	bb88      	cbnz	r0, 8001ce0 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001c82:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c84:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001c86:	68aa      	ldr	r2, [r5, #8]
 8001c88:	686b      	ldr	r3, [r5, #4]
 8001c8a:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8001c8e:	429c      	cmp	r4, r3
 8001c90:	d227      	bcs.n	8001ce2 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff ffce 	bl	8001c34 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c9c:	f7ff ff38 	bl	8001b10 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <HAL_FLASHEx_Erase+0xa0>)
 8001ca2:	6913      	ldr	r3, [r2, #16]
 8001ca4:	f023 0302 	bic.w	r3, r3, #2
 8001ca8:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001caa:	4601      	mov	r1, r0
 8001cac:	b9b0      	cbnz	r0, 8001cdc <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8001cae:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8001cb2:	e7e8      	b.n	8001c86 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001cb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cb8:	f7ff ff2a 	bl	8001b10 <FLASH_WaitForLastOperation>
 8001cbc:	b108      	cbz	r0, 8001cc2 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	e00f      	b.n	8001ce2 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8001cc2:	f7ff ffa5 	bl	8001c10 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cca:	f7ff ff21 	bl	8001b10 <FLASH_WaitForLastOperation>
 8001cce:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001cd0:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_FLASHEx_Erase+0xa0>)
 8001cd2:	6913      	ldr	r3, [r2, #16]
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6113      	str	r3, [r2, #16]
 8001cda:	e002      	b.n	8001ce2 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8001cdc:	6034      	str	r4, [r6, #0]
            break;
 8001cde:	e000      	b.n	8001ce2 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ce0:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_FLASHEx_Erase+0x9c>)
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	4608      	mov	r0, r1
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001cec:	2102      	movs	r1, #2
}
 8001cee:	4608      	mov	r0, r1
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000338 	.word	0x20000338
 8001cf8:	40022000 	.word	0x40022000

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfe:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001d00:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d02:	e088      	b.n	8001e16 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d04:	08de      	lsrs	r6, r3, #3
 8001d06:	3608      	adds	r6, #8
 8001d08:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0c:	f003 0e07 	and.w	lr, r3, #7
 8001d10:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001d14:	270f      	movs	r7, #15
 8001d16:	fa07 f70e 	lsl.w	r7, r7, lr
 8001d1a:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d1e:	690f      	ldr	r7, [r1, #16]
 8001d20:	fa07 f70e 	lsl.w	r7, r7, lr
 8001d24:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001d26:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8001d2a:	e083      	b.n	8001e34 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d2c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d30:	68cf      	ldr	r7, [r1, #12]
 8001d32:	fa07 f70e 	lsl.w	r7, r7, lr
 8001d36:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001d38:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3c:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d40:	684e      	ldr	r6, [r1, #4]
 8001d42:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001d46:	409e      	lsls	r6, r3
 8001d48:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001d4a:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d4c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d50:	688d      	ldr	r5, [r1, #8]
 8001d52:	fa05 f50e 	lsl.w	r5, r5, lr
 8001d56:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001d58:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	684c      	ldr	r4, [r1, #4]
 8001d5c:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001d60:	d058      	beq.n	8001e14 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4c47      	ldr	r4, [pc, #284]	; (8001e80 <HAL_GPIO_Init+0x184>)
 8001d64:	69a5      	ldr	r5, [r4, #24]
 8001d66:	f045 0501 	orr.w	r5, r5, #1
 8001d6a:	61a5      	str	r5, [r4, #24]
 8001d6c:	69a4      	ldr	r4, [r4, #24]
 8001d6e:	f004 0401 	and.w	r4, r4, #1
 8001d72:	9401      	str	r4, [sp, #4]
 8001d74:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d76:	089d      	lsrs	r5, r3, #2
 8001d78:	1cae      	adds	r6, r5, #2
 8001d7a:	4c42      	ldr	r4, [pc, #264]	; (8001e84 <HAL_GPIO_Init+0x188>)
 8001d7c:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001d80:	f003 0603 	and.w	r6, r3, #3
 8001d84:	00b6      	lsls	r6, r6, #2
 8001d86:	270f      	movs	r7, #15
 8001d88:	40b7      	lsls	r7, r6
 8001d8a:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d8e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001d92:	d06c      	beq.n	8001e6e <HAL_GPIO_Init+0x172>
 8001d94:	4f3c      	ldr	r7, [pc, #240]	; (8001e88 <HAL_GPIO_Init+0x18c>)
 8001d96:	42b8      	cmp	r0, r7
 8001d98:	d06b      	beq.n	8001e72 <HAL_GPIO_Init+0x176>
 8001d9a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d9e:	42b8      	cmp	r0, r7
 8001da0:	d069      	beq.n	8001e76 <HAL_GPIO_Init+0x17a>
 8001da2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001da6:	42b8      	cmp	r0, r7
 8001da8:	d05f      	beq.n	8001e6a <HAL_GPIO_Init+0x16e>
 8001daa:	2705      	movs	r7, #5
 8001dac:	fa07 f606 	lsl.w	r6, r7, r6
 8001db0:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001db2:	3502      	adds	r5, #2
 8001db4:	4e33      	ldr	r6, [pc, #204]	; (8001e84 <HAL_GPIO_Init+0x188>)
 8001db6:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dba:	4c34      	ldr	r4, [pc, #208]	; (8001e8c <HAL_GPIO_Init+0x190>)
 8001dbc:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	43d4      	mvns	r4, r2
 8001dc0:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dc4:	684f      	ldr	r7, [r1, #4]
 8001dc6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001dca:	d001      	beq.n	8001dd0 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001dcc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001dd0:	4d2e      	ldr	r5, [pc, #184]	; (8001e8c <HAL_GPIO_Init+0x190>)
 8001dd2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001dd4:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dda:	684f      	ldr	r7, [r1, #4]
 8001ddc:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001de0:	d001      	beq.n	8001de6 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001de2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001de6:	4d29      	ldr	r5, [pc, #164]	; (8001e8c <HAL_GPIO_Init+0x190>)
 8001de8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dea:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df0:	684f      	ldr	r7, [r1, #4]
 8001df2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001df6:	d001      	beq.n	8001dfc <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8001df8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001dfc:	4d23      	ldr	r5, [pc, #140]	; (8001e8c <HAL_GPIO_Init+0x190>)
 8001dfe:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001e00:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e04:	684e      	ldr	r6, [r1, #4]
 8001e06:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001e0a:	d001      	beq.n	8001e10 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8001e0c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_GPIO_Init+0x190>)
 8001e12:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001e14:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001e16:	680a      	ldr	r2, [r1, #0]
 8001e18:	fa32 f403 	lsrs.w	r4, r2, r3
 8001e1c:	d02d      	beq.n	8001e7a <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e1e:	2501      	movs	r5, #1
 8001e20:	409d      	lsls	r5, r3
    if(iocurrent)
 8001e22:	402a      	ands	r2, r5
 8001e24:	d0f6      	beq.n	8001e14 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e26:	684c      	ldr	r4, [r1, #4]
 8001e28:	2c02      	cmp	r4, #2
 8001e2a:	f43f af6b 	beq.w	8001d04 <HAL_GPIO_Init+0x8>
 8001e2e:	2c12      	cmp	r4, #18
 8001e30:	f43f af68 	beq.w	8001d04 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001e34:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e36:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e3a:	2403      	movs	r4, #3
 8001e3c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e40:	43e4      	mvns	r4, r4
 8001e42:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e44:	684f      	ldr	r7, [r1, #4]
 8001e46:	f007 0703 	and.w	r7, r7, #3
 8001e4a:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e4e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001e50:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e52:	684e      	ldr	r6, [r1, #4]
 8001e54:	1e77      	subs	r7, r6, #1
 8001e56:	2f01      	cmp	r7, #1
 8001e58:	f67f af68 	bls.w	8001d2c <HAL_GPIO_Init+0x30>
 8001e5c:	2e11      	cmp	r6, #17
 8001e5e:	f43f af65 	beq.w	8001d2c <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e62:	2e12      	cmp	r6, #18
 8001e64:	f47f af72 	bne.w	8001d4c <HAL_GPIO_Init+0x50>
 8001e68:	e760      	b.n	8001d2c <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e6a:	2703      	movs	r7, #3
 8001e6c:	e79e      	b.n	8001dac <HAL_GPIO_Init+0xb0>
 8001e6e:	2700      	movs	r7, #0
 8001e70:	e79c      	b.n	8001dac <HAL_GPIO_Init+0xb0>
 8001e72:	2701      	movs	r7, #1
 8001e74:	e79a      	b.n	8001dac <HAL_GPIO_Init+0xb0>
 8001e76:	2702      	movs	r7, #2
 8001e78:	e798      	b.n	8001dac <HAL_GPIO_Init+0xb0>
  }
}
 8001e7a:	b003      	add	sp, #12
 8001e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	48000400 	.word	0x48000400
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e90:	6903      	ldr	r3, [r0, #16]
 8001e92:	4219      	tst	r1, r3
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e96:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001e98:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	4770      	bx	lr

08001e9e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9e:	b90a      	cbnz	r2, 8001ea4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea0:	6281      	str	r1, [r0, #40]	; 0x28
 8001ea2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea4:	6181      	str	r1, [r0, #24]
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4203      	tst	r3, r0
 8001eb0:	d100      	bne.n	8001eb4 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001eb2:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001eb6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb8:	f002 fdd0 	bl	8004a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001ebc:	e7f9      	b.n	8001eb2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001ebe:	bf00      	nop
 8001ec0:	40010400 	.word	0x40010400

08001ec4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ec4:	6803      	ldr	r3, [r0, #0]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	f012 0f02 	tst.w	r2, #2
 8001ecc:	d001      	beq.n	8001ed2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ed2:	6803      	ldr	r3, [r0, #0]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	f012 0f01 	tst.w	r2, #1
 8001eda:	d103      	bne.n	8001ee4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	619a      	str	r2, [r3, #24]
 8001ee4:	4770      	bx	lr

08001ee6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001ee6:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001ee8:	6804      	ldr	r4, [r0, #0]
 8001eea:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001eec:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8001ef0:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8001ef4:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8001ef8:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001efc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001f00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001f04:	4319      	orrs	r1, r3
 8001f06:	9b01      	ldr	r3, [sp, #4]
 8001f08:	4319      	orrs	r1, r3
 8001f0a:	4301      	orrs	r1, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001f0c:	6061      	str	r1, [r4, #4]
}
 8001f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001f14:	b410      	push	{r4}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001f16:	f011 0f01 	tst.w	r1, #1
 8001f1a:	d009      	beq.n	8001f30 <I2C_Disable_IRQ+0x1c>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001f1c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f24:	2b28      	cmp	r3, #40	; 0x28
 8001f26:	d001      	beq.n	8001f2c <I2C_Disable_IRQ+0x18>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f28:	23f2      	movs	r3, #242	; 0xf2
 8001f2a:	e002      	b.n	8001f32 <I2C_Disable_IRQ+0x1e>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001f2c:	2342      	movs	r3, #66	; 0x42
 8001f2e:	e000      	b.n	8001f32 <I2C_Disable_IRQ+0x1e>
  uint32_t tmpisr = 0U;
 8001f30:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f32:	f011 0f02 	tst.w	r1, #2
 8001f36:	d009      	beq.n	8001f4c <I2C_Disable_IRQ+0x38>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f38:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001f3c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001f40:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001f44:	2a28      	cmp	r2, #40	; 0x28
 8001f46:	d019      	beq.n	8001f7c <I2C_Disable_IRQ+0x68>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f48:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f4c:	f011 0f04 	tst.w	r1, #4
 8001f50:	d001      	beq.n	8001f56 <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f52:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001f56:	f001 0211 	and.w	r2, r1, #17
 8001f5a:	2a11      	cmp	r2, #17
 8001f5c:	d010      	beq.n	8001f80 <I2C_Disable_IRQ+0x6c>
 8001f5e:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001f62:	2912      	cmp	r1, #18
 8001f64:	d00f      	beq.n	8001f86 <I2C_Disable_IRQ+0x72>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001f66:	2912      	cmp	r1, #18
 8001f68:	d010      	beq.n	8001f8c <I2C_Disable_IRQ+0x78>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f6a:	6801      	ldr	r1, [r0, #0]
 8001f6c:	680a      	ldr	r2, [r1, #0]
 8001f6e:	ea22 0303 	bic.w	r3, r2, r3
 8001f72:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 8001f74:	2000      	movs	r0, #0
 8001f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f7a:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	e7e5      	b.n	8001f4c <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f80:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001f84:	e7eb      	b.n	8001f5e <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8001f86:	f043 0320 	orr.w	r3, r3, #32
 8001f8a:	e7ec      	b.n	8001f66 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8001f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f90:	e7eb      	b.n	8001f6a <I2C_Disable_IRQ+0x56>

08001f92 <I2C_IsAcknowledgeFailed>:
{
 8001f92:	b570      	push	{r4, r5, r6, lr}
 8001f94:	4604      	mov	r4, r0
 8001f96:	460d      	mov	r5, r1
 8001f98:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f9a:	6803      	ldr	r3, [r0, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f013 0f10 	tst.w	r3, #16
 8001fa2:	d017      	beq.n	8001fd4 <I2C_IsAcknowledgeFailed+0x42>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	f012 0f20 	tst.w	r2, #32
 8001fac:	d114      	bne.n	8001fd8 <I2C_IsAcknowledgeFailed+0x46>
      if (Timeout != HAL_MAX_DELAY)
 8001fae:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001fb2:	d0f7      	beq.n	8001fa4 <I2C_IsAcknowledgeFailed+0x12>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fb4:	b125      	cbz	r5, 8001fc0 <I2C_IsAcknowledgeFailed+0x2e>
 8001fb6:	f7fe ff4f 	bl	8000e58 <HAL_GetTick>
 8001fba:	1b80      	subs	r0, r0, r6
 8001fbc:	4285      	cmp	r5, r0
 8001fbe:	d2f1      	bcs.n	8001fa4 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001fcc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd8:	2210      	movs	r2, #16
 8001fda:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	2520      	movs	r5, #32
 8001fe0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff ff6e 	bl	8001ec4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001fe8:	6822      	ldr	r2, [r4, #0]
 8001fea:	6853      	ldr	r3, [r2, #4]
 8001fec:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001ff0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001ff4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ffe:	2304      	movs	r3, #4
 8002000:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002002:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800200c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002010:	2001      	movs	r0, #1
}
 8002012:	bd70      	pop	{r4, r5, r6, pc}

08002014 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	460d      	mov	r5, r1
 800201a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f013 0f02 	tst.w	r3, #2
 8002024:	d11c      	bne.n	8002060 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002026:	4632      	mov	r2, r6
 8002028:	4629      	mov	r1, r5
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff ffb1 	bl	8001f92 <I2C_IsAcknowledgeFailed>
 8002030:	b9c0      	cbnz	r0, 8002064 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002032:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002036:	d0f1      	beq.n	800201c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002038:	b125      	cbz	r5, 8002044 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 800203a:	f7fe ff0d 	bl	8000e58 <HAL_GetTick>
 800203e:	1b80      	subs	r0, r0, r6
 8002040:	4285      	cmp	r5, r0
 8002042:	d2eb      	bcs.n	800201c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002046:	f043 0320 	orr.w	r3, r3, #32
 800204a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800204c:	2320      	movs	r3, #32
 800204e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002052:	2300      	movs	r3, #0
 8002054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002058:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800205c:	2003      	movs	r0, #3
 800205e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002060:	2000      	movs	r0, #0
 8002062:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002064:	2001      	movs	r0, #1
}
 8002066:	bd70      	pop	{r4, r5, r6, pc}

08002068 <I2C_WaitOnFlagUntilTimeout>:
{
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	4605      	mov	r5, r0
 800206c:	460f      	mov	r7, r1
 800206e:	4616      	mov	r6, r2
 8002070:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002072:	682b      	ldr	r3, [r5, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	ea37 0303 	bics.w	r3, r7, r3
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	42b3      	cmp	r3, r6
 8002082:	d113      	bne.n	80020ac <I2C_WaitOnFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8002084:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002088:	d0f3      	beq.n	8002072 <I2C_WaitOnFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800208a:	b12c      	cbz	r4, 8002098 <I2C_WaitOnFlagUntilTimeout+0x30>
 800208c:	f7fe fee4 	bl	8000e58 <HAL_GetTick>
 8002090:	9b06      	ldr	r3, [sp, #24]
 8002092:	1ac0      	subs	r0, r0, r3
 8002094:	4284      	cmp	r4, r0
 8002096:	d2ec      	bcs.n	8002072 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->State = HAL_I2C_STATE_READY;
 8002098:	2320      	movs	r3, #32
 800209a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	2300      	movs	r3, #0
 80020a0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80020a4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 80020a8:	2003      	movs	r0, #3
 80020aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80020ac:	2000      	movs	r0, #0
}
 80020ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020b0 <I2C_RequestMemoryWrite>:
{
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	4604      	mov	r4, r0
 80020b6:	4616      	mov	r6, r2
 80020b8:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c4:	b2ea      	uxtb	r2, r5
 80020c6:	f7ff ff0e 	bl	8001ee6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ca:	9a07      	ldr	r2, [sp, #28]
 80020cc:	9906      	ldr	r1, [sp, #24]
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7ff ffa0 	bl	8002014 <I2C_WaitOnTXISFlagUntilTimeout>
 80020d4:	b140      	cbz	r0, 80020e8 <I2C_RequestMemoryWrite+0x38>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d003      	beq.n	80020e4 <I2C_RequestMemoryWrite+0x34>
      return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
}
 80020de:	4618      	mov	r0, r3
 80020e0:	b002      	add	sp, #8
 80020e2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e7fa      	b.n	80020de <I2C_RequestMemoryWrite+0x2e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020e8:	2d01      	cmp	r5, #1
 80020ea:	d00d      	beq.n	8002108 <I2C_RequestMemoryWrite+0x58>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	0a32      	lsrs	r2, r6, #8
 80020f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f2:	9a07      	ldr	r2, [sp, #28]
 80020f4:	9906      	ldr	r1, [sp, #24]
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7ff ff8c 	bl	8002014 <I2C_WaitOnTXISFlagUntilTimeout>
 80020fc:	b1b0      	cbz	r0, 800212c <I2C_RequestMemoryWrite+0x7c>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002100:	2b04      	cmp	r3, #4
 8002102:	d011      	beq.n	8002128 <I2C_RequestMemoryWrite+0x78>
        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e7ea      	b.n	80020de <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	b2f6      	uxtb	r6, r6
 800210c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800210e:	9b07      	ldr	r3, [sp, #28]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	9b06      	ldr	r3, [sp, #24]
 8002114:	2200      	movs	r2, #0
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff ffa5 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2800      	cmp	r0, #0
 8002122:	d0dc      	beq.n	80020de <I2C_RequestMemoryWrite+0x2e>
    return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e7da      	b.n	80020de <I2C_RequestMemoryWrite+0x2e>
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e7d8      	b.n	80020de <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	b2f6      	uxtb	r6, r6
 8002130:	629e      	str	r6, [r3, #40]	; 0x28
 8002132:	e7ec      	b.n	800210e <I2C_RequestMemoryWrite+0x5e>

08002134 <I2C_RequestMemoryRead>:
{
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	4604      	mov	r4, r0
 800213a:	4616      	mov	r6, r2
 800213c:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800213e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	b2ea      	uxtb	r2, r5
 8002148:	f7ff fecd 	bl	8001ee6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214c:	9a07      	ldr	r2, [sp, #28]
 800214e:	9906      	ldr	r1, [sp, #24]
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff ff5f 	bl	8002014 <I2C_WaitOnTXISFlagUntilTimeout>
 8002156:	b140      	cbz	r0, 800216a <I2C_RequestMemoryRead+0x36>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002158:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800215a:	2b04      	cmp	r3, #4
 800215c:	d003      	beq.n	8002166 <I2C_RequestMemoryRead+0x32>
      return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
}
 8002160:	4618      	mov	r0, r3
 8002162:	b002      	add	sp, #8
 8002164:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e7fa      	b.n	8002160 <I2C_RequestMemoryRead+0x2c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800216a:	2d01      	cmp	r5, #1
 800216c:	d00d      	beq.n	800218a <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	0a32      	lsrs	r2, r6, #8
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002174:	9a07      	ldr	r2, [sp, #28]
 8002176:	9906      	ldr	r1, [sp, #24]
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff ff4b 	bl	8002014 <I2C_WaitOnTXISFlagUntilTimeout>
 800217e:	b1b0      	cbz	r0, 80021ae <I2C_RequestMemoryRead+0x7a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002180:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002182:	2b04      	cmp	r3, #4
 8002184:	d011      	beq.n	80021aa <I2C_RequestMemoryRead+0x76>
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e7ea      	b.n	8002160 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	b2f6      	uxtb	r6, r6
 800218e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002190:	9b07      	ldr	r3, [sp, #28]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	9b06      	ldr	r3, [sp, #24]
 8002196:	2200      	movs	r2, #0
 8002198:	2140      	movs	r1, #64	; 0x40
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff ff64 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d0dc      	beq.n	8002160 <I2C_RequestMemoryRead+0x2c>
    return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e7da      	b.n	8002160 <I2C_RequestMemoryRead+0x2c>
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e7d8      	b.n	8002160 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	b2f6      	uxtb	r6, r6
 80021b2:	629e      	str	r6, [r3, #40]	; 0x28
 80021b4:	e7ec      	b.n	8002190 <I2C_RequestMemoryRead+0x5c>

080021b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80021b6:	b570      	push	{r4, r5, r6, lr}
 80021b8:	4605      	mov	r5, r0
 80021ba:	460c      	mov	r4, r1
 80021bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021be:	682b      	ldr	r3, [r5, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f013 0f20 	tst.w	r3, #32
 80021c6:	d119      	bne.n	80021fc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c8:	4632      	mov	r2, r6
 80021ca:	4621      	mov	r1, r4
 80021cc:	4628      	mov	r0, r5
 80021ce:	f7ff fee0 	bl	8001f92 <I2C_IsAcknowledgeFailed>
 80021d2:	b9a8      	cbnz	r0, 8002200 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021d4:	b124      	cbz	r4, 80021e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 80021d6:	f7fe fe3f 	bl	8000e58 <HAL_GetTick>
 80021da:	1b80      	subs	r0, r0, r6
 80021dc:	4284      	cmp	r4, r0
 80021de:	d2ee      	bcs.n	80021be <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80021e2:	f043 0320 	orr.w	r3, r3, #32
 80021e6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	2320      	movs	r3, #32
 80021ea:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80021f4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 80021f8:	2003      	movs	r0, #3
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80021fc:	2000      	movs	r0, #0
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
}
 8002202:	bd70      	pop	{r4, r5, r6, pc}

08002204 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002204:	2800      	cmp	r0, #0
 8002206:	d059      	beq.n	80022bc <HAL_I2C_Init+0xb8>
{
 8002208:	b510      	push	{r4, lr}
 800220a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002210:	2b00      	cmp	r3, #0
 8002212:	d043      	beq.n	800229c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002214:	2324      	movs	r3, #36	; 0x24
 8002216:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800222c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800222e:	6822      	ldr	r2, [r4, #0]
 8002230:	6893      	ldr	r3, [r2, #8]
 8002232:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002236:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002238:	68e3      	ldr	r3, [r4, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d033      	beq.n	80022a6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	68a3      	ldr	r3, [r4, #8]
 8002242:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002246:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002248:	68e3      	ldr	r3, [r4, #12]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d031      	beq.n	80022b2 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	6853      	ldr	r3, [r2, #4]
 8002252:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800225c:	6822      	ldr	r2, [r4, #0]
 800225e:	68d3      	ldr	r3, [r2, #12]
 8002260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002264:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	6923      	ldr	r3, [r4, #16]
 800226a:	6961      	ldr	r1, [r4, #20]
 800226c:	430b      	orrs	r3, r1
 800226e:	69a1      	ldr	r1, [r4, #24]
 8002270:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002274:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002276:	6822      	ldr	r2, [r4, #0]
 8002278:	69e3      	ldr	r3, [r4, #28]
 800227a:	6a21      	ldr	r1, [r4, #32]
 800227c:	430b      	orrs	r3, r1
 800227e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002280:	6822      	ldr	r2, [r4, #0]
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228a:	2000      	movs	r0, #0
 800228c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800228e:	2320      	movs	r3, #32
 8002290:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002294:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002296:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800229a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800229c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80022a0:	f003 fec4 	bl	800602c <HAL_I2C_MspInit>
 80022a4:	e7b6      	b.n	8002214 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	68a3      	ldr	r3, [r4, #8]
 80022aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	e7ca      	b.n	8002248 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e7c8      	b.n	800224e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
 80022be:	4770      	bx	lr

080022c0 <HAL_I2C_Mem_Write>:
{
 80022c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ca:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80022ce:	b2e4      	uxtb	r4, r4
 80022d0:	2c20      	cmp	r4, #32
 80022d2:	d004      	beq.n	80022de <HAL_I2C_Mem_Write+0x1e>
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	b002      	add	sp, #8
 80022da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 80022de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80022e0:	2c00      	cmp	r4, #0
 80022e2:	f000 80cd 	beq.w	8002480 <HAL_I2C_Mem_Write+0x1c0>
 80022e6:	2d00      	cmp	r5, #0
 80022e8:	f000 80cc 	beq.w	8002484 <HAL_I2C_Mem_Write+0x1c4>
    __HAL_LOCK(hi2c);
 80022ec:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80022f0:	2c01      	cmp	r4, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2C_Mem_Write+0x38>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e7ee      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
 80022f8:	4698      	mov	r8, r3
 80022fa:	4691      	mov	r9, r2
 80022fc:	460e      	mov	r6, r1
 80022fe:	4604      	mov	r4, r0
 8002300:	f04f 0a01 	mov.w	sl, #1
 8002304:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002308:	f7fe fda6 	bl	8000e58 <HAL_GetTick>
 800230c:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800230e:	9000      	str	r0, [sp, #0]
 8002310:	2319      	movs	r3, #25
 8002312:	4652      	mov	r2, sl
 8002314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002318:	4620      	mov	r0, r4
 800231a:	f7ff fea5 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 800231e:	b108      	cbz	r0, 8002324 <HAL_I2C_Mem_Write+0x64>
      return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e7d8      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002324:	2321      	movs	r3, #33	; 0x21
 8002326:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800232a:	2340      	movs	r3, #64	; 0x40
 800232c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002330:	2300      	movs	r3, #0
 8002332:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002336:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002338:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800233a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800233c:	9701      	str	r7, [sp, #4]
 800233e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	4643      	mov	r3, r8
 8002344:	464a      	mov	r2, r9
 8002346:	4631      	mov	r1, r6
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff feb1 	bl	80020b0 <I2C_RequestMemoryWrite>
 800234e:	b160      	cbz	r0, 800236a <HAL_I2C_Mem_Write+0xaa>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002350:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002352:	2b04      	cmp	r3, #4
 8002354:	d004      	beq.n	8002360 <HAL_I2C_Mem_Write+0xa0>
        __HAL_UNLOCK(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e7ba      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
        __HAL_UNLOCK(hi2c);
 8002360:	2300      	movs	r3, #0
 8002362:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002366:	4653      	mov	r3, sl
 8002368:	e7b5      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d90a      	bls.n	8002388 <HAL_I2C_Mem_Write+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002372:	22ff      	movs	r2, #255	; 0xff
 8002374:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002376:	2300      	movs	r3, #0
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800237e:	4631      	mov	r1, r6
 8002380:	4620      	mov	r0, r4
 8002382:	f7ff fdb0 	bl	8001ee6 <I2C_TransferConfig>
 8002386:	e023      	b.n	80023d0 <HAL_I2C_Mem_Write+0x110>
      hi2c->XferSize = hi2c->XferCount;
 8002388:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800238a:	b292      	uxth	r2, r2
 800238c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800238e:	2300      	movs	r3, #0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	4631      	mov	r1, r6
 800239a:	4620      	mov	r0, r4
 800239c:	f7ff fda3 	bl	8001ee6 <I2C_TransferConfig>
 80023a0:	e016      	b.n	80023d0 <HAL_I2C_Mem_Write+0x110>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Write+0xec>
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e794      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e792      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
          hi2c->XferSize = hi2c->XferCount;
 80023b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023b2:	b292      	uxth	r2, r2
 80023b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023b6:	2300      	movs	r3, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4631      	mov	r1, r6
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff fd8f 	bl	8001ee6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80023c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d033      	beq.n	8002438 <HAL_I2C_Mem_Write+0x178>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	463a      	mov	r2, r7
 80023d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff fe1d 	bl	8002014 <I2C_WaitOnTXISFlagUntilTimeout>
 80023da:	2800      	cmp	r0, #0
 80023dc:	d1e1      	bne.n	80023a2 <HAL_I2C_Mem_Write+0xe2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023e2:	1c59      	adds	r1, r3, #1
 80023e4:	6261      	str	r1, [r4, #36]	; 0x24
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80023ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80023f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e3      	bne.n	80023c8 <HAL_I2C_Mem_Write+0x108>
 8002400:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0df      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x108>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002408:	9700      	str	r7, [sp, #0]
 800240a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800240c:	2200      	movs	r2, #0
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff fe29 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8002416:	2800      	cmp	r0, #0
 8002418:	d136      	bne.n	8002488 <HAL_I2C_Mem_Write+0x1c8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2bff      	cmp	r3, #255	; 0xff
 8002420:	d9c6      	bls.n	80023b0 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002422:	22ff      	movs	r2, #255	; 0xff
 8002424:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800242e:	4631      	mov	r1, r6
 8002430:	4620      	mov	r0, r4
 8002432:	f7ff fd58 	bl	8001ee6 <I2C_TransferConfig>
 8002436:	e7c7      	b.n	80023c8 <HAL_I2C_Mem_Write+0x108>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002438:	463a      	mov	r2, r7
 800243a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800243c:	4620      	mov	r0, r4
 800243e:	f7ff feba 	bl	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	b130      	cbz	r0, 8002454 <HAL_I2C_Mem_Write+0x194>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002446:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002448:	2b04      	cmp	r3, #4
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Write+0x190>
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e742      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e740      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	2120      	movs	r1, #32
 8002458:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800245a:	6820      	ldr	r0, [r4, #0]
 800245c:	6842      	ldr	r2, [r0, #4]
 800245e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002462:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002466:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002470:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002474:	2200      	movs	r2, #0
 8002476:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800247a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800247e:	e72a      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
      return  HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e728      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
 8002484:	2301      	movs	r3, #1
 8002486:	e726      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e724      	b.n	80022d6 <HAL_I2C_Mem_Write+0x16>

0800248c <HAL_I2C_Mem_Read>:
{
 800248c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800249a:	b2e4      	uxtb	r4, r4
 800249c:	2c20      	cmp	r4, #32
 800249e:	d004      	beq.n	80024aa <HAL_I2C_Mem_Read+0x1e>
    return HAL_BUSY;
 80024a0:	2302      	movs	r3, #2
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	b002      	add	sp, #8
 80024a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 80024aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80024ac:	2c00      	cmp	r4, #0
 80024ae:	f000 80c9 	beq.w	8002644 <HAL_I2C_Mem_Read+0x1b8>
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	f000 80c8 	beq.w	8002648 <HAL_I2C_Mem_Read+0x1bc>
    __HAL_LOCK(hi2c);
 80024b8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80024bc:	2c01      	cmp	r4, #1
 80024be:	d101      	bne.n	80024c4 <HAL_I2C_Mem_Read+0x38>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e7ee      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
 80024c4:	4698      	mov	r8, r3
 80024c6:	4691      	mov	r9, r2
 80024c8:	460e      	mov	r6, r1
 80024ca:	4604      	mov	r4, r0
 80024cc:	f04f 0a01 	mov.w	sl, #1
 80024d0:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80024d4:	f7fe fcc0 	bl	8000e58 <HAL_GetTick>
 80024d8:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024da:	9000      	str	r0, [sp, #0]
 80024dc:	2319      	movs	r3, #25
 80024de:	4652      	mov	r2, sl
 80024e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7ff fdbf 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	b108      	cbz	r0, 80024f0 <HAL_I2C_Mem_Read+0x64>
      return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e7d8      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f0:	2322      	movs	r3, #34	; 0x22
 80024f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f6:	2340      	movs	r3, #64	; 0x40
 80024f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002502:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002504:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002506:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002508:	9701      	str	r7, [sp, #4]
 800250a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4643      	mov	r3, r8
 8002510:	464a      	mov	r2, r9
 8002512:	4631      	mov	r1, r6
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff fe0d 	bl	8002134 <I2C_RequestMemoryRead>
 800251a:	b160      	cbz	r0, 8002536 <HAL_I2C_Mem_Read+0xaa>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800251e:	2b04      	cmp	r3, #4
 8002520:	d004      	beq.n	800252c <HAL_I2C_Mem_Read+0xa0>
        __HAL_UNLOCK(hi2c);
 8002522:	2300      	movs	r3, #0
 8002524:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e7ba      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
        __HAL_UNLOCK(hi2c);
 800252c:	2300      	movs	r3, #0
 800252e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002532:	4653      	mov	r3, sl
 8002534:	e7b5      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002536:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2bff      	cmp	r3, #255	; 0xff
 800253c:	d90b      	bls.n	8002556 <HAL_I2C_Mem_Read+0xca>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800253e:	22ff      	movs	r2, #255	; 0xff
 8002540:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002542:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800254c:	4631      	mov	r1, r6
 800254e:	4620      	mov	r0, r4
 8002550:	f7ff fcc9 	bl	8001ee6 <I2C_TransferConfig>
 8002554:	e01d      	b.n	8002592 <HAL_I2C_Mem_Read+0x106>
      hi2c->XferSize = hi2c->XferCount;
 8002556:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002558:	b292      	uxth	r2, r2
 800255a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800255c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	4631      	mov	r1, r6
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff fcbb 	bl	8001ee6 <I2C_TransferConfig>
 8002570:	e00f      	b.n	8002592 <HAL_I2C_Mem_Read+0x106>
          hi2c->XferSize = hi2c->XferCount;
 8002572:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002574:	b292      	uxth	r2, r2
 8002576:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002578:	2300      	movs	r3, #0
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	4631      	mov	r1, r6
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff fcae 	bl	8001ee6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800258a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d034      	beq.n	80025fc <HAL_I2C_Mem_Read+0x170>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002592:	9700      	str	r7, [sp, #0]
 8002594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002596:	2200      	movs	r2, #0
 8002598:	2104      	movs	r1, #4
 800259a:	4620      	mov	r0, r4
 800259c:	f7ff fd64 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d153      	bne.n	800264c <HAL_I2C_Mem_Read+0x1c0>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80025a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	6262      	str	r2, [r4, #36]	; 0x24
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ae:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80025b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80025b2:	3a01      	subs	r2, #1
 80025b4:	b292      	uxth	r2, r2
 80025b6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80025b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29b      	uxth	r3, r3
 80025c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d1e1      	bne.n	800258a <HAL_I2C_Mem_Read+0xfe>
 80025c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0dd      	beq.n	800258a <HAL_I2C_Mem_Read+0xfe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ce:	9700      	str	r7, [sp, #0]
 80025d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025d2:	2180      	movs	r1, #128	; 0x80
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff fd47 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 80025da:	2800      	cmp	r0, #0
 80025dc:	d138      	bne.n	8002650 <HAL_I2C_Mem_Read+0x1c4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2bff      	cmp	r3, #255	; 0xff
 80025e4:	d9c5      	bls.n	8002572 <HAL_I2C_Mem_Read+0xe6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e6:	22ff      	movs	r2, #255	; 0xff
 80025e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025ea:	2300      	movs	r3, #0
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f2:	4631      	mov	r1, r6
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7ff fc76 	bl	8001ee6 <I2C_TransferConfig>
 80025fa:	e7c6      	b.n	800258a <HAL_I2C_Mem_Read+0xfe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fc:	463a      	mov	r2, r7
 80025fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff fdd8 	bl	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	b130      	cbz	r0, 8002618 <HAL_I2C_Mem_Read+0x18c>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800260a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800260c:	2b04      	cmp	r3, #4
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Mem_Read+0x188>
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e746      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e744      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002618:	6822      	ldr	r2, [r4, #0]
 800261a:	2120      	movs	r1, #32
 800261c:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800261e:	6820      	ldr	r0, [r4, #0]
 8002620:	6842      	ldr	r2, [r0, #4]
 8002622:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002626:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800262a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002638:	2200      	movs	r2, #0
 800263a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800263e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002642:	e72e      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
      return  HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e72c      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
 8002648:	2301      	movs	r3, #1
 800264a:	e72a      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e728      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e726      	b.n	80024a2 <HAL_I2C_Mem_Read+0x16>

08002654 <HAL_I2C_EV_IRQHandler>:
{
 8002654:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002656:	6803      	ldr	r3, [r0, #0]
 8002658:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800265a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800265c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800265e:	b103      	cbz	r3, 8002662 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002660:	4798      	blx	r3
 8002662:	bd08      	pop	{r3, pc}

08002664 <HAL_I2C_SlaveTxCpltCallback>:
{
 8002664:	4770      	bx	lr

08002666 <HAL_I2C_SlaveRxCpltCallback>:
{
 8002666:	4770      	bx	lr

08002668 <I2C_ITSlaveSequentialCplt>:
{
 8002668:	b510      	push	{r4, lr}
 800266a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	2300      	movs	r3, #0
 800266e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002672:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b29      	cmp	r3, #41	; 0x29
 800267a:	d005      	beq.n	8002688 <I2C_ITSlaveSequentialCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800267c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b2a      	cmp	r3, #42	; 0x2a
 8002684:	d00f      	beq.n	80026a6 <I2C_ITSlaveSequentialCplt+0x3e>
 8002686:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002688:	2328      	movs	r3, #40	; 0x28
 800268a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800268e:	2321      	movs	r3, #33	; 0x21
 8002690:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002692:	2101      	movs	r1, #1
 8002694:	f7ff fc3e 	bl	8001f14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002698:	2300      	movs	r3, #0
 800269a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800269e:	4620      	mov	r0, r4
 80026a0:	f7ff ffe0 	bl	8002664 <HAL_I2C_SlaveTxCpltCallback>
 80026a4:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026a6:	2328      	movs	r3, #40	; 0x28
 80026a8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026ac:	2322      	movs	r3, #34	; 0x22
 80026ae:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026b0:	2102      	movs	r1, #2
 80026b2:	f7ff fc2f 	bl	8001f14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80026b6:	2300      	movs	r3, #0
 80026b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026bc:	4620      	mov	r0, r4
 80026be:	f7ff ffd2 	bl	8002666 <HAL_I2C_SlaveRxCpltCallback>
}
 80026c2:	e7e0      	b.n	8002686 <I2C_ITSlaveSequentialCplt+0x1e>

080026c4 <HAL_I2C_AddrCallback>:
{
 80026c4:	4770      	bx	lr

080026c6 <I2C_ITAddrCplt>:
{
 80026c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 80026c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80026cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026d0:	2b28      	cmp	r3, #40	; 0x28
 80026d2:	d006      	beq.n	80026e2 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d4:	6803      	ldr	r3, [r0, #0]
 80026d6:	2208      	movs	r2, #8
 80026d8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80026da:	2300      	movs	r3, #0
 80026dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80026e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e2:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 80026e4:	6803      	ldr	r3, [r0, #0]
 80026e6:	699e      	ldr	r6, [r3, #24]
 80026e8:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	0c12      	lsrs	r2, r2, #16
 80026f0:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80026fa:	68df      	ldr	r7, [r3, #12]
 80026fc:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002700:	68c1      	ldr	r1, [r0, #12]
 8002702:	2902      	cmp	r1, #2
 8002704:	d121      	bne.n	800274a <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002706:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800270a:	f015 0f06 	tst.w	r5, #6
 800270e:	d110      	bne.n	8002732 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8002710:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002712:	3101      	adds	r1, #1
 8002714:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002716:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002718:	2902      	cmp	r1, #2
 800271a:	d1e1      	bne.n	80026e0 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 800271c:	2100      	movs	r1, #0
 800271e:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002720:	2008      	movs	r0, #8
 8002722:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002724:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002728:	4631      	mov	r1, r6
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff ffca 	bl	80026c4 <HAL_I2C_AddrCallback>
 8002730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002732:	2104      	movs	r1, #4
 8002734:	f7ff fbee 	bl	8001f14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002738:	2300      	movs	r3, #0
 800273a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800273e:	463a      	mov	r2, r7
 8002740:	4631      	mov	r1, r6
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff ffbe 	bl	80026c4 <HAL_I2C_AddrCallback>
 8002748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800274a:	2104      	movs	r1, #4
 800274c:	f7ff fbe2 	bl	8001f14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002750:	2300      	movs	r3, #0
 8002752:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002756:	462a      	mov	r2, r5
 8002758:	4631      	mov	r1, r6
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff ffb2 	bl	80026c4 <HAL_I2C_AddrCallback>
 8002760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002762 <HAL_I2C_ListenCpltCallback>:
{
 8002762:	4770      	bx	lr

08002764 <I2C_ITListenCplt>:
{
 8002764:	b510      	push	{r4, lr}
 8002766:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <I2C_ITListenCplt+0x60>)
 800276a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800276c:	2300      	movs	r3, #0
 800276e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002770:	2220      	movs	r2, #32
 8002772:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800277a:	6343      	str	r3, [r0, #52]	; 0x34
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 800277c:	f011 0f04 	tst.w	r1, #4
 8002780:	d012      	beq.n	80027a8 <I2C_ITListenCplt+0x44>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002782:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	6242      	str	r2, [r0, #36]	; 0x24
 8002788:	6802      	ldr	r2, [r0, #0]
 800278a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800278c:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 800278e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002790:	b153      	cbz	r3, 80027a8 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8002792:	3b01      	subs	r3, #1
 8002794:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002796:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80027a2:	f043 0304 	orr.w	r3, r3, #4
 80027a6:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80027a8:	2107      	movs	r1, #7
 80027aa:	4620      	mov	r0, r4
 80027ac:	f7ff fbb2 	bl	8001f14 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	2210      	movs	r2, #16
 80027b4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80027b6:	2300      	movs	r3, #0
 80027b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80027bc:	4620      	mov	r0, r4
 80027be:	f7ff ffd0 	bl	8002762 <HAL_I2C_ListenCpltCallback>
 80027c2:	bd10      	pop	{r4, pc}
 80027c4:	ffff0000 	.word	0xffff0000

080027c8 <HAL_I2C_ErrorCallback>:
{
 80027c8:	4770      	bx	lr

080027ca <HAL_I2C_AbortCpltCallback>:
{
 80027ca:	4770      	bx	lr

080027cc <I2C_ITError>:
{
 80027cc:	b510      	push	{r4, lr}
 80027ce:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027d6:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <I2C_ITError+0xf4>)
 80027d8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80027da:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80027dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80027de:	4319      	orrs	r1, r3
 80027e0:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80027e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b28      	cmp	r3, #40	; 0x28
 80027ea:	d018      	beq.n	800281e <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80027ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80027f0:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80027f2:	2b29      	cmp	r3, #41	; 0x29
 80027f4:	d013      	beq.n	800281e <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80027fa:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80027fc:	2b2a      	cmp	r3, #42	; 0x2a
 80027fe:	d00e      	beq.n	800281e <I2C_ITError+0x52>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002800:	2107      	movs	r1, #7
 8002802:	f7ff fb87 	bl	8001f14 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002806:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d002      	beq.n	8002816 <I2C_ITError+0x4a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8002810:	2320      	movs	r3, #32
 8002812:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002816:	2300      	movs	r3, #0
 8002818:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800281a:	6363      	str	r3, [r4, #52]	; 0x34
 800281c:	e00a      	b.n	8002834 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800281e:	2103      	movs	r1, #3
 8002820:	4620      	mov	r0, r4
 8002822:	f7ff fb77 	bl	8001f14 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002826:	2328      	movs	r3, #40	; 0x28
 8002828:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800282c:	2300      	movs	r3, #0
 800282e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <I2C_ITError+0xf8>)
 8002832:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800283c:	d10f      	bne.n	800285e <I2C_ITError+0x92>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002844:	d11e      	bne.n	8002884 <I2C_ITError+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002846:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b60      	cmp	r3, #96	; 0x60
 800284e:	d02c      	beq.n	80028aa <I2C_ITError+0xde>
    __HAL_UNLOCK(hi2c);
 8002850:	2300      	movs	r3, #0
 8002852:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002856:	4620      	mov	r0, r4
 8002858:	f7ff ffb6 	bl	80027c8 <HAL_I2C_ErrorCallback>
 800285c:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002864:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <I2C_ITError+0xfc>)
 800286a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 800286c:	2300      	movs	r3, #0
 800286e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002872:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002874:	f7ff f882 	bl	800197c <HAL_DMA_Abort_IT>
 8002878:	2800      	cmp	r0, #0
 800287a:	d0ef      	beq.n	800285c <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800287c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800287e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002880:	4798      	blx	r3
 8002882:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288a:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800288c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <I2C_ITError+0xfc>)
 8002890:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002898:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800289a:	f7ff f86f 	bl	800197c <HAL_DMA_Abort_IT>
 800289e:	2800      	cmp	r0, #0
 80028a0:	d0dc      	beq.n	800285c <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80028a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028a6:	4798      	blx	r3
 80028a8:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	2320      	movs	r3, #32
 80028ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80028b0:	2300      	movs	r3, #0
 80028b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff ff87 	bl	80027ca <HAL_I2C_AbortCpltCallback>
 80028bc:	bd10      	pop	{r4, pc}
 80028be:	bf00      	nop
 80028c0:	ffff0000 	.word	0xffff0000
 80028c4:	080029f5 	.word	0x080029f5
 80028c8:	08002baf 	.word	0x08002baf

080028cc <I2C_ITSlaveCplt>:
{
 80028cc:	b538      	push	{r3, r4, r5, lr}
 80028ce:	4604      	mov	r4, r0
 80028d0:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	2220      	movs	r2, #32
 80028d6:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028d8:	6803      	ldr	r3, [r0, #0]
 80028da:	2208      	movs	r2, #8
 80028dc:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80028de:	2107      	movs	r1, #7
 80028e0:	f7ff fb18 	bl	8001f14 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	6853      	ldr	r3, [r2, #4]
 80028e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ec:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	6853      	ldr	r3, [r2, #4]
 80028f2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80028f6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80028fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8002904:	4620      	mov	r0, r4
 8002906:	f7ff fadd 	bl	8001ec4 <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800290a:	6822      	ldr	r2, [r4, #0]
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002912:	d103      	bne.n	800291c <I2C_ITSlaveCplt+0x50>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8002914:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8002916:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800291a:	d009      	beq.n	8002930 <I2C_ITSlaveCplt+0x64>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 800291c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b21      	cmp	r3, #33	; 0x21
 8002924:	d03a      	beq.n	800299c <I2C_ITSlaveCplt+0xd0>
 8002926:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	b29b      	uxth	r3, r3
 800292e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002930:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	b11b      	cbz	r3, 800293e <I2C_ITSlaveCplt+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002936:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 800293e:	f015 0f04 	tst.w	r5, #4
 8002942:	d011      	beq.n	8002968 <I2C_ITSlaveCplt+0x9c>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	6261      	str	r1, [r4, #36]	; 0x24
 800294a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800294c:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 800294e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002950:	b153      	cbz	r3, 8002968 <I2C_ITSlaveCplt+0x9c>
      hi2c->XferSize--;
 8002952:	3b01      	subs	r3, #1
 8002954:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002956:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002960:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8002968:	2300      	movs	r3, #0
 800296a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002970:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002972:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002974:	b9bb      	cbnz	r3, 80029a6 <I2C_ITSlaveCplt+0xda>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800297c:	d121      	bne.n	80029c2 <I2C_ITSlaveCplt+0xf6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800297e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b22      	cmp	r3, #34	; 0x22
 8002986:	d028      	beq.n	80029da <I2C_ITSlaveCplt+0x10e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	2320      	movs	r3, #32
 800298a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff fe65 	bl	8002664 <HAL_I2C_SlaveTxCpltCallback>
 800299a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 800299c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	e7c3      	b.n	800292e <I2C_ITSlaveCplt+0x62>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80029a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7ff ff0f 	bl	80027cc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80029ae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b28      	cmp	r3, #40	; 0x28
 80029b6:	d1f0      	bne.n	800299a <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, ITFlags);
 80029b8:	4629      	mov	r1, r5
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7ff fed2 	bl	8002764 <I2C_ITListenCplt>
 80029c0:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <I2C_ITSlaveCplt+0x124>)
 80029c4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	2320      	movs	r3, #32
 80029c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029cc:	2300      	movs	r3, #0
 80029ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7ff fec5 	bl	8002762 <HAL_I2C_ListenCpltCallback>
 80029d8:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80029da:	2320      	movs	r3, #32
 80029dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029e0:	2300      	movs	r3, #0
 80029e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7ff fe3d 	bl	8002666 <HAL_I2C_SlaveRxCpltCallback>
 80029ec:	bd38      	pop	{r3, r4, r5, pc}
 80029ee:	bf00      	nop
 80029f0:	ffff0000 	.word	0xffff0000

080029f4 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 80029f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	f000 80a0 	beq.w	8002b3e <I2C_Slave_ISR_IT+0x14a>
{
 80029fe:	b570      	push	{r4, r5, r6, lr}
 8002a00:	4616      	mov	r6, r2
 8002a02:	460d      	mov	r5, r1
 8002a04:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8002a06:	2301      	movs	r3, #1
 8002a08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002a0c:	f011 0f10 	tst.w	r1, #16
 8002a10:	d03f      	beq.n	8002a92 <I2C_Slave_ISR_IT+0x9e>
 8002a12:	f012 0f10 	tst.w	r2, #16
 8002a16:	d03c      	beq.n	8002a92 <I2C_Slave_ISR_IT+0x9e>
    if (hi2c->XferCount == 0U)
 8002a18:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	bb43      	cbnz	r3, 8002a70 <I2C_Slave_ISR_IT+0x7c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8002a1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a24:	d010      	beq.n	8002a48 <I2C_Slave_ISR_IT+0x54>
 8002a26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a2c:	d00c      	beq.n	8002a48 <I2C_Slave_ISR_IT+0x54>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a34:	d004      	beq.n	8002a40 <I2C_Slave_ISR_IT+0x4c>
 8002a36:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b29      	cmp	r3, #41	; 0x29
 8002a3e:	d00d      	beq.n	8002a5c <I2C_Slave_ISR_IT+0x68>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	2210      	movs	r2, #16
 8002a44:	61da      	str	r2, [r3, #28]
 8002a46:	e01a      	b.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8002a48:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a4c:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8002a4e:	2b28      	cmp	r3, #40	; 0x28
 8002a50:	d1ed      	bne.n	8002a2e <I2C_Slave_ISR_IT+0x3a>
        I2C_ITListenCplt(hi2c, ITFlags);
 8002a52:	4629      	mov	r1, r5
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7ff fe85 	bl	8002764 <I2C_ITListenCplt>
 8002a5a:	e010      	b.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8002a62:	4620      	mov	r0, r4
 8002a64:	f7ff fa2e 	bl	8001ec4 <I2C_Flush_TXDR>
        I2C_ITSlaveSequentialCplt(hi2c);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff fdfd 	bl	8002668 <I2C_ITSlaveSequentialCplt>
 8002a6e:	e006      	b.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a70:	6803      	ldr	r3, [r0, #0]
 8002a72:	2210      	movs	r2, #16
 8002a74:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	6443      	str	r3, [r0, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8002a7e:	f015 0f20 	tst.w	r5, #32
 8002a82:	d002      	beq.n	8002a8a <I2C_Slave_ISR_IT+0x96>
 8002a84:	f016 0f20 	tst.w	r6, #32
 8002a88:	d154      	bne.n	8002b34 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002a90:	bd70      	pop	{r4, r5, r6, pc}
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8002a92:	f015 0f04 	tst.w	r5, #4
 8002a96:	d01f      	beq.n	8002ad8 <I2C_Slave_ISR_IT+0xe4>
 8002a98:	f016 0f04 	tst.w	r6, #4
 8002a9c:	d01c      	beq.n	8002ad8 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount > 0U)
 8002a9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	b16b      	cbz	r3, 8002ac0 <I2C_Slave_ISR_IT+0xcc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	6262      	str	r2, [r4, #36]	; 0x24
 8002aaa:	6822      	ldr	r2, [r4, #0]
 8002aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aae:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002ab0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002ab6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002ac0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1da      	bne.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8002ac8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8002aca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ace:	d0d6      	beq.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
      I2C_ITSlaveSequentialCplt(hi2c);
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff fdc9 	bl	8002668 <I2C_ITSlaveSequentialCplt>
 8002ad6:	e7d2      	b.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8002ad8:	f015 0f08 	tst.w	r5, #8
 8002adc:	d002      	beq.n	8002ae4 <I2C_Slave_ISR_IT+0xf0>
 8002ade:	f016 0f08 	tst.w	r6, #8
 8002ae2:	d117      	bne.n	8002b14 <I2C_Slave_ISR_IT+0x120>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8002ae4:	f015 0f02 	tst.w	r5, #2
 8002ae8:	d0c9      	beq.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
 8002aea:	f016 0f02 	tst.w	r6, #2
 8002aee:	d0c6      	beq.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
    if (hi2c->XferCount > 0U)
 8002af0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	b19b      	cbz	r3, 8002b1e <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002afa:	1c59      	adds	r1, r3, #1
 8002afc:	6261      	str	r1, [r4, #36]	; 0x24
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002b02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	8523      	strh	r3, [r4, #40]	; 0x28
 8002b12:	e7b4      	b.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002b14:	4629      	mov	r1, r5
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7ff fdd5 	bl	80026c6 <I2C_ITAddrCplt>
 8002b1c:	e7af      	b.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8002b1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b24:	d002      	beq.n	8002b2c <I2C_Slave_ISR_IT+0x138>
 8002b26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1a8      	bne.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
        I2C_ITSlaveSequentialCplt(hi2c);
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff fd9b 	bl	8002668 <I2C_ITSlaveSequentialCplt>
 8002b32:	e7a4      	b.n	8002a7e <I2C_Slave_ISR_IT+0x8a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002b34:	4629      	mov	r1, r5
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff fec8 	bl	80028cc <I2C_ITSlaveCplt>
 8002b3c:	e7a5      	b.n	8002a8a <I2C_Slave_ISR_IT+0x96>
  __HAL_LOCK(hi2c);
 8002b3e:	2002      	movs	r0, #2
 8002b40:	4770      	bx	lr

08002b42 <HAL_I2C_ER_IRQHandler>:
{
 8002b42:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b44:	6802      	ldr	r2, [r0, #0]
 8002b46:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b48:	6811      	ldr	r1, [r2, #0]
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002b4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b4e:	d009      	beq.n	8002b64 <HAL_I2C_ER_IRQHandler+0x22>
 8002b50:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b54:	d006      	beq.n	8002b64 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b56:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b58:	f044 0401 	orr.w	r4, r4, #1
 8002b5c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b5e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002b62:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002b64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b68:	d00a      	beq.n	8002b80 <HAL_I2C_ER_IRQHandler+0x3e>
 8002b6a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b6e:	d007      	beq.n	8002b80 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b72:	f042 0208 	orr.w	r2, r2, #8
 8002b76:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b78:	6802      	ldr	r2, [r0, #0]
 8002b7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002b7e:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002b80:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002b84:	d00a      	beq.n	8002b9c <HAL_I2C_ER_IRQHandler+0x5a>
 8002b86:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b8a:	d007      	beq.n	8002b9c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b94:	6803      	ldr	r3, [r0, #0]
 8002b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9a:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b9e:	f013 0f0b 	tst.w	r3, #11
 8002ba2:	d100      	bne.n	8002ba6 <HAL_I2C_ER_IRQHandler+0x64>
 8002ba4:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ba6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002ba8:	f7ff fe10 	bl	80027cc <I2C_ITError>
}
 8002bac:	e7fa      	b.n	8002ba4 <HAL_I2C_ER_IRQHandler+0x62>

08002bae <I2C_DMAAbort>:
{
 8002bae:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bb2:	6802      	ldr	r2, [r0, #0]
 8002bb4:	6853      	ldr	r3, [r2, #4]
 8002bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bba:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002bbc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002bc2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002bc4:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d002      	beq.n	8002bd6 <I2C_DMAAbort+0x28>
    HAL_I2C_ErrorCallback(hi2c);
 8002bd0:	f7ff fdfa 	bl	80027c8 <HAL_I2C_ErrorCallback>
 8002bd4:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bdc:	f7ff fdf5 	bl	80027ca <HAL_I2C_AbortCpltCallback>
 8002be0:	bd08      	pop	{r3, pc}

08002be2 <HAL_I2C_GetState>:
  return hi2c->State;
 8002be2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002be6:	4770      	bx	lr

08002be8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002bf6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d020      	beq.n	8002c40 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c04:	2324      	movs	r3, #36	; 0x24
 8002c06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002c0a:	6802      	ldr	r2, [r0, #0]
 8002c0c:	6813      	ldr	r3, [r2, #0]
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c14:	6802      	ldr	r2, [r0, #0]
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c1c:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c1e:	6802      	ldr	r2, [r0, #0]
 8002c20:	6813      	ldr	r3, [r2, #0]
 8002c22:	4319      	orrs	r1, r3
 8002c24:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002c26:	6802      	ldr	r2, [r0, #0]
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	2320      	movs	r3, #32
 8002c32:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c36:	2300      	movs	r3, #0
 8002c38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002c40:	2002      	movs	r0, #2
  }
}
 8002c42:	4770      	bx	lr

08002c44 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c44:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002c4e:	2002      	movs	r0, #2
 8002c50:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002c52:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d01e      	beq.n	8002c98 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c60:	2324      	movs	r3, #36	; 0x24
 8002c62:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002c66:	6802      	ldr	r2, [r0, #0]
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8002c70:	6802      	ldr	r2, [r0, #0]
 8002c72:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002c74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002c78:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002c7c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002c7e:	6802      	ldr	r2, [r0, #0]
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8002c94:	4618      	mov	r0, r3
 8002c96:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002c98:	2002      	movs	r0, #2
  }
}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002c9c:	4a02      	ldr	r2, [pc, #8]	; (8002ca8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4770      	bx	lr
 8002ca8:	40007000 	.word	0x40007000

08002cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	6803      	ldr	r3, [r0, #0]
 8002cb4:	f013 0f01 	tst.w	r3, #1
 8002cb8:	d063      	beq.n	8002d82 <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cba:	4bb5      	ldr	r3, [pc, #724]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d046      	beq.n	8002d54 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cc6:	4bb2      	ldr	r3, [pc, #712]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d03b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd2:	6863      	ldr	r3, [r4, #4]
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	f000 808e 	beq.w	8002df8 <HAL_RCC_OscConfig+0x14c>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 8091 	bne.w	8002e04 <HAL_RCC_OscConfig+0x158>
 8002ce2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ce6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cf8:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cfa:	4aa5      	ldr	r2, [pc, #660]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002cfc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002cfe:	f023 030f 	bic.w	r3, r3, #15
 8002d02:	68a1      	ldr	r1, [r4, #8]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8094 	beq.w	8002e38 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f8a2 	bl	8000e58 <HAL_GetTick>
 8002d14:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d1a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	4b9c      	ldr	r3, [pc, #624]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2201      	movs	r2, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	4219      	tst	r1, r3
 8002d3a:	d122      	bne.n	8002d82 <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7fe f88c 	bl	8000e58 <HAL_GetTick>
 8002d40:	1b40      	subs	r0, r0, r5
 8002d42:	2864      	cmp	r0, #100	; 0x64
 8002d44:	d9e7      	bls.n	8002d16 <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 8002d46:	2003      	movs	r0, #3
 8002d48:	e2ab      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4a:	4b91      	ldr	r3, [pc, #580]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d52:	d0be      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x26>
 8002d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d58:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	4b8c      	ldr	r3, [pc, #560]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2201      	movs	r2, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	4219      	tst	r1, r3
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_OscConfig+0xd6>
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8289 	beq.w	8003294 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f013 0f02 	tst.w	r3, #2
 8002d88:	f000 809c 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d8c:	4b80      	ldr	r3, [pc, #512]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f013 0f0c 	tst.w	r3, #12
 8002d94:	d072      	beq.n	8002e7c <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d96:	4b7e      	ldr	r3, [pc, #504]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d067      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da2:	6923      	ldr	r3, [r4, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80cb 	beq.w	8002f40 <HAL_RCC_OscConfig+0x294>
 8002daa:	2201      	movs	r2, #1
 8002dac:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f84a 	bl	8000e58 <HAL_GetTick>
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2201      	movs	r2, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	4219      	tst	r1, r3
 8002de6:	f040 809c 	bne.w	8002f22 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fe f835 	bl	8000e58 <HAL_GetTick>
 8002dee:	1b40      	subs	r0, r0, r5
 8002df0:	2802      	cmp	r0, #2
 8002df2:	d9e8      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002df4:	2003      	movs	r0, #3
 8002df6:	e254      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df8:	4a65      	ldr	r2, [pc, #404]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dfa:	6813      	ldr	r3, [r2, #0]
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e77a      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e>
 8002e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_OscConfig+0x172>
 8002e0a:	4b61      	ldr	r3, [pc, #388]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e76d      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e>
 8002e1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e22:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e760      	b.n	8002cfa <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8002e38:	f7fe f80e 	bl	8000e58 <HAL_GetTick>
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e42:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	4b52      	ldr	r3, [pc, #328]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	4219      	tst	r1, r3
 8002e62:	d08e      	beq.n	8002d82 <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fd fff8 	bl	8000e58 <HAL_GetTick>
 8002e68:	1b40      	subs	r0, r0, r5
 8002e6a:	2864      	cmp	r0, #100	; 0x64
 8002e6c:	d9e7      	bls.n	8002e3e <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8002e6e:	2003      	movs	r0, #3
 8002e70:	e217      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002e7a:	d192      	bne.n	8002da2 <HAL_RCC_OscConfig+0xf6>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	4b43      	ldr	r3, [pc, #268]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	2302      	movs	r3, #2
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	2201      	movs	r2, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	4219      	tst	r1, r3
 8002e9c:	d004      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1fc>
 8002e9e:	6923      	ldr	r3, [r4, #16]
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	e1fc      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea8:	4839      	ldr	r0, [pc, #228]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002eaa:	6803      	ldr	r3, [r0, #0]
 8002eac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002eb0:	6961      	ldr	r1, [r4, #20]
 8002eb2:	22f8      	movs	r2, #248	; 0xf8
 8002eb4:	fa92 f2a2 	rbit	r2, r2
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	f013 0f08 	tst.w	r3, #8
 8002eca:	f000 808d 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ece:	69a3      	ldr	r3, [r4, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d061      	beq.n	8002f98 <HAL_RCC_OscConfig+0x2ec>
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_RCC_OscConfig+0x2e8>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7fd ffb7 	bl	8000e58 <HAL_GetTick>
 8002eea:	4605      	mov	r5, r0
 8002eec:	2302      	movs	r3, #2
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002efc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	4219      	tst	r1, r3
 8002f12:	d169      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fd ffa0 	bl	8000e58 <HAL_GetTick>
 8002f18:	1b40      	subs	r0, r0, r5
 8002f1a:	2802      	cmp	r0, #2
 8002f1c:	d9e6      	bls.n	8002eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f1e:	2003      	movs	r0, #3
 8002f20:	e1bf      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	481b      	ldr	r0, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002f24:	6803      	ldr	r3, [r0, #0]
 8002f26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f2a:	6961      	ldr	r1, [r4, #20]
 8002f2c:	22f8      	movs	r2, #248	; 0xf8
 8002f2e:	fa92 f2a2 	rbit	r2, r2
 8002f32:	fab2 f282 	clz	r2, r2
 8002f36:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	6003      	str	r3, [r0, #0]
 8002f3e:	e7c1      	b.n	8002ec4 <HAL_RCC_OscConfig+0x218>
 8002f40:	2301      	movs	r3, #1
 8002f42:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f58:	f7fd ff7e 	bl	8000e58 <HAL_GetTick>
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	2302      	movs	r3, #2
 8002f60:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	2302      	movs	r3, #2
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2201      	movs	r2, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	4219      	tst	r1, r3
 8002f7e:	d0a1      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f80:	f7fd ff6a 	bl	8000e58 <HAL_GetTick>
 8002f84:	1b40      	subs	r0, r0, r5
 8002f86:	2802      	cmp	r0, #2
 8002f88:	d9e9      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	e189      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	10908120 	.word	0x10908120
 8002f98:	2201      	movs	r2, #1
 8002f9a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	4bc1      	ldr	r3, [pc, #772]	; (80032a8 <HAL_RCC_OscConfig+0x5fc>)
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fac:	f7fd ff54 	bl	8000e58 <HAL_GetTick>
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4aba      	ldr	r2, [pc, #744]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8002fc2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	4219      	tst	r1, r3
 8002fd8:	d006      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fda:	f7fd ff3d 	bl	8000e58 <HAL_GetTick>
 8002fde:	1b40      	subs	r0, r0, r5
 8002fe0:	2802      	cmp	r0, #2
 8002fe2:	d9e6      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	e15c      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	f013 0f04 	tst.w	r3, #4
 8002fee:	f000 80b3 	beq.w	8003158 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4bae      	ldr	r3, [pc, #696]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002ffa:	d126      	bne.n	800304a <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4bab      	ldr	r3, [pc, #684]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003004:	61da      	str	r2, [r3, #28]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003010:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003012:	4ba7      	ldr	r3, [pc, #668]	; (80032b0 <HAL_RCC_OscConfig+0x604>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f413 7f80 	tst.w	r3, #256	; 0x100
 800301a:	d018      	beq.n	800304e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	68e3      	ldr	r3, [r4, #12]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d029      	beq.n	8003076 <HAL_RCC_OscConfig+0x3ca>
 8003022:	bb73      	cbnz	r3, 8003082 <HAL_RCC_OscConfig+0x3d6>
 8003024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003028:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	621a      	str	r2, [r3, #32]
 8003034:	6a1a      	ldr	r2, [r3, #32]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303c:	68e3      	ldr	r3, [r4, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d05d      	beq.n	80030fe <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fd ff09 	bl	8000e58 <HAL_GetTick>
 8003046:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	e047      	b.n	80030da <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2500      	movs	r5, #0
 800304c:	e7e1      	b.n	8003012 <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304e:	4a98      	ldr	r2, [pc, #608]	; (80032b0 <HAL_RCC_OscConfig+0x604>)
 8003050:	6813      	ldr	r3, [r2, #0]
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003058:	f7fd fefe 	bl	8000e58 <HAL_GetTick>
 800305c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b94      	ldr	r3, [pc, #592]	; (80032b0 <HAL_RCC_OscConfig+0x604>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003066:	d1d9      	bne.n	800301c <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003068:	f7fd fef6 	bl	8000e58 <HAL_GetTick>
 800306c:	1b80      	subs	r0, r0, r6
 800306e:	2864      	cmp	r0, #100	; 0x64
 8003070:	d9f5      	bls.n	800305e <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8003072:	2003      	movs	r0, #3
 8003074:	e115      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003076:	4a8d      	ldr	r2, [pc, #564]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8003078:	6a13      	ldr	r3, [r2, #32]
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	e7dc      	b.n	800303c <HAL_RCC_OscConfig+0x390>
 8003082:	2b05      	cmp	r3, #5
 8003084:	d009      	beq.n	800309a <HAL_RCC_OscConfig+0x3ee>
 8003086:	4b89      	ldr	r3, [pc, #548]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	621a      	str	r2, [r3, #32]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	f022 0204 	bic.w	r2, r2, #4
 8003096:	621a      	str	r2, [r3, #32]
 8003098:	e7d0      	b.n	800303c <HAL_RCC_OscConfig+0x390>
 800309a:	4b84      	ldr	r3, [pc, #528]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 800309c:	6a1a      	ldr	r2, [r3, #32]
 800309e:	f042 0204 	orr.w	r2, r2, #4
 80030a2:	621a      	str	r2, [r3, #32]
 80030a4:	6a1a      	ldr	r2, [r3, #32]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	621a      	str	r2, [r3, #32]
 80030ac:	e7c6      	b.n	800303c <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	4b7f      	ldr	r3, [pc, #508]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 80030b0:	6a19      	ldr	r1, [r3, #32]
 80030b2:	2302      	movs	r3, #2
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2201      	movs	r2, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	4219      	tst	r1, r3
 80030c8:	d145      	bne.n	8003156 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fd fec5 	bl	8000e58 <HAL_GetTick>
 80030ce:	1b80      	subs	r0, r0, r6
 80030d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80030d4:	4298      	cmp	r0, r3
 80030d6:	f200 80df 	bhi.w	8003298 <HAL_RCC_OscConfig+0x5ec>
 80030da:	2302      	movs	r3, #2
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d0dd      	beq.n	80030ae <HAL_RCC_OscConfig+0x402>
 80030f2:	2302      	movs	r3, #2
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 80030fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030fc:	e7d9      	b.n	80030b2 <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fd feab 	bl	8000e58 <HAL_GetTick>
 8003102:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	e015      	b.n	8003132 <HAL_RCC_OscConfig+0x486>
 8003106:	4b69      	ldr	r3, [pc, #420]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8003108:	6a19      	ldr	r1, [r3, #32]
 800310a:	2302      	movs	r3, #2
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2201      	movs	r2, #1
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	4219      	tst	r1, r3
 8003120:	d019      	beq.n	8003156 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fd fe99 	bl	8000e58 <HAL_GetTick>
 8003126:	1b80      	subs	r0, r0, r6
 8003128:	f241 3388 	movw	r3, #5000	; 0x1388
 800312c:	4298      	cmp	r0, r3
 800312e:	f200 80b5 	bhi.w	800329c <HAL_RCC_OscConfig+0x5f0>
 8003132:	2302      	movs	r3, #2
 8003134:	fa93 f2a3 	rbit	r2, r3
 8003138:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f043 0302 	orr.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d0dd      	beq.n	8003106 <HAL_RCC_OscConfig+0x45a>
 800314a:	2302      	movs	r3, #2
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	4b56      	ldr	r3, [pc, #344]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8003152:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003154:	e7d9      	b.n	800310a <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003156:	bbb5      	cbnz	r5, 80031c6 <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003158:	69e3      	ldr	r3, [r4, #28]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80a0 	beq.w	80032a0 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003160:	4a52      	ldr	r2, [pc, #328]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8003162:	6852      	ldr	r2, [r2, #4]
 8003164:	f002 020c 	and.w	r2, r2, #12
 8003168:	2a08      	cmp	r2, #8
 800316a:	f000 80a3 	beq.w	80032b4 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316e:	2b02      	cmp	r3, #2
 8003170:	d02f      	beq.n	80031d2 <HAL_RCC_OscConfig+0x526>
 8003172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003176:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003182:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fd fe64 	bl	8000e58 <HAL_GetTick>
 8003190:	4604      	mov	r4, r0
 8003192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003196:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2201      	movs	r2, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	4219      	tst	r1, r3
 80031b6:	d06b      	beq.n	8003290 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd fe4e 	bl	8000e58 <HAL_GetTick>
 80031bc:	1b00      	subs	r0, r0, r4
 80031be:	2802      	cmp	r0, #2
 80031c0:	d9e7      	bls.n	8003192 <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 80031c2:	2003      	movs	r0, #3
 80031c4:	e06d      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4a39      	ldr	r2, [pc, #228]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 80031c8:	69d3      	ldr	r3, [r2, #28]
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
 80031d0:	e7c2      	b.n	8003158 <HAL_RCC_OscConfig+0x4ac>
 80031d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031ec:	f7fd fe34 	bl	8000e58 <HAL_GetTick>
 80031f0:	4605      	mov	r5, r0
 80031f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fa:	4b2c      	ldr	r3, [pc, #176]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	2201      	movs	r2, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	4219      	tst	r1, r3
 8003216:	d006      	beq.n	8003226 <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7fd fe1e 	bl	8000e58 <HAL_GetTick>
 800321c:	1b40      	subs	r0, r0, r5
 800321e:	2802      	cmp	r0, #2
 8003220:	d9e7      	bls.n	80031f2 <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8003222:	2003      	movs	r0, #3
 8003224:	e03d      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003226:	4921      	ldr	r1, [pc, #132]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8003228:	684b      	ldr	r3, [r1, #4]
 800322a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800322e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003230:	6a20      	ldr	r0, [r4, #32]
 8003232:	4302      	orrs	r2, r0
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
 8003238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800323c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003252:	f7fd fe01 	bl	8000e58 <HAL_GetTick>
 8003256:	4604      	mov	r4, r0
 8003258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800325c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_OscConfig+0x600>)
 8003262:	6819      	ldr	r1, [r3, #0]
 8003264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2201      	movs	r2, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	4219      	tst	r1, r3
 800327c:	d106      	bne.n	800328c <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327e:	f7fd fdeb 	bl	8000e58 <HAL_GetTick>
 8003282:	1b00      	subs	r0, r0, r4
 8003284:	2802      	cmp	r0, #2
 8003286:	d9e7      	bls.n	8003258 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8003288:	2003      	movs	r0, #3
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800328c:	2000      	movs	r0, #0
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
 8003290:	2000      	movs	r0, #0
 8003292:	e006      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8003294:	2001      	movs	r0, #1
 8003296:	e004      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8003298:	2003      	movs	r0, #3
 800329a:	e002      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 800329c:	2003      	movs	r0, #3
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 80032a0:	2000      	movs	r0, #0
}
 80032a2:	b002      	add	sp, #8
 80032a4:	bd70      	pop	{r4, r5, r6, pc}
 80032a6:	bf00      	nop
 80032a8:	10908120 	.word	0x10908120
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
      return HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
 80032b6:	e7f4      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f6>

080032b8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_RCC_GetSysClockFreq+0x5c>)
 80032ba:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032bc:	f003 020c 	and.w	r2, r3, #12
 80032c0:	2a08      	cmp	r2, #8
 80032c2:	d124      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032c4:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80032c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032cc:	fa92 f2a2 	rbit	r2, r2
 80032d0:	fab2 f282 	clz	r2, r2
 80032d4:	fa21 f202 	lsr.w	r2, r1, r2
 80032d8:	490f      	ldr	r1, [pc, #60]	; (8003318 <HAL_RCC_GetSysClockFreq+0x60>)
 80032da:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <HAL_RCC_GetSysClockFreq+0x5c>)
 80032de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032e0:	f002 020f 	and.w	r2, r2, #15
 80032e4:	210f      	movs	r1, #15
 80032e6:	fa91 f1a1 	rbit	r1, r1
 80032ea:	fab1 f181 	clz	r1, r1
 80032ee:	40ca      	lsrs	r2, r1
 80032f0:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RCC_GetSysClockFreq+0x64>)
 80032f2:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80032f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80032f8:	d103      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_GetSysClockFreq+0x68>)
 80032fc:	fb03 f000 	mul.w	r0, r3, r0
 8003300:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003304:	fbb3 f3f2 	udiv	r3, r3, r2
 8003308:	fb03 f000 	mul.w	r0, r3, r0
 800330c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800330e:	4805      	ldr	r0, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	08007b58 	.word	0x08007b58
 800331c:	08007b68 	.word	0x08007b68
 8003320:	003d0900 	.word	0x003d0900
 8003324:	007a1200 	.word	0x007a1200

08003328 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003328:	4b70      	ldr	r3, [pc, #448]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	428b      	cmp	r3, r1
 8003332:	d20c      	bcs.n	800334e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003334:	4a6d      	ldr	r2, [pc, #436]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	430b      	orrs	r3, r1
 800333e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003340:	6813      	ldr	r3, [r2, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	4299      	cmp	r1, r3
 8003348:	d001      	beq.n	800334e <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 800334a:	2001      	movs	r0, #1
 800334c:	4770      	bx	lr
{
 800334e:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	6803      	ldr	r3, [r0, #0]
 8003352:	f013 0f02 	tst.w	r3, #2
 8003356:	d006      	beq.n	8003366 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003358:	4a65      	ldr	r2, [pc, #404]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800335a:	6853      	ldr	r3, [r2, #4]
 800335c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003360:	6884      	ldr	r4, [r0, #8]
 8003362:	4323      	orrs	r3, r4
 8003364:	6053      	str	r3, [r2, #4]
 8003366:	460d      	mov	r5, r1
 8003368:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336a:	6803      	ldr	r3, [r0, #0]
 800336c:	f013 0f01 	tst.w	r3, #1
 8003370:	d07a      	beq.n	8003468 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	6843      	ldr	r3, [r0, #4]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d02f      	beq.n	80033d8 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003378:	2b02      	cmp	r3, #2
 800337a:	d042      	beq.n	8003402 <HAL_RCC_ClockConfig+0xda>
 800337c:	2202      	movs	r2, #2
 800337e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	4a5b      	ldr	r2, [pc, #364]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	6810      	ldr	r0, [r2, #0]
 8003386:	2202      	movs	r2, #2
 8003388:	fa92 f2a2 	rbit	r2, r2
 800338c:	fab2 f282 	clz	r2, r2
 8003390:	f002 021f 	and.w	r2, r2, #31
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	4210      	tst	r0, r2
 800339c:	f000 80a4 	beq.w	80034e8 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a0:	4953      	ldr	r1, [pc, #332]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	684a      	ldr	r2, [r1, #4]
 80033a4:	f022 0203 	bic.w	r2, r2, #3
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80033ac:	f7fd fd54 	bl	8000e58 <HAL_GetTick>
 80033b0:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b2:	6863      	ldr	r3, [r4, #4]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d039      	beq.n	800342c <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d046      	beq.n	800344a <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033bc:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f013 0f0c 	tst.w	r3, #12
 80033c4:	d050      	beq.n	8003468 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c6:	f7fd fd47 	bl	8000e58 <HAL_GetTick>
 80033ca:	1b80      	subs	r0, r0, r6
 80033cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80033d0:	4298      	cmp	r0, r3
 80033d2:	d9f3      	bls.n	80033bc <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80033d4:	2003      	movs	r0, #3
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033dc:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e0:	4a43      	ldr	r2, [pc, #268]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	6810      	ldr	r0, [r2, #0]
 80033e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033e8:	fa92 f2a2 	rbit	r2, r2
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	f002 021f 	and.w	r2, r2, #31
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f202 	lsl.w	r2, r1, r2
 80033fa:	4210      	tst	r0, r2
 80033fc:	d1d0      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80033fe:	2001      	movs	r0, #1
 8003400:	bd70      	pop	{r4, r5, r6, pc}
 8003402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003406:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	4a39      	ldr	r2, [pc, #228]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	6810      	ldr	r0, [r2, #0]
 800340e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003412:	fa92 f2a2 	rbit	r2, r2
 8003416:	fab2 f282 	clz	r2, r2
 800341a:	f002 021f 	and.w	r2, r2, #31
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f202 	lsl.w	r2, r1, r2
 8003424:	4210      	tst	r0, r2
 8003426:	d1bb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8003428:	2001      	movs	r0, #1
 800342a:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800342c:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b04      	cmp	r3, #4
 8003436:	d017      	beq.n	8003468 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fd fd0e 	bl	8000e58 <HAL_GetTick>
 800343c:	1b80      	subs	r0, r0, r6
 800343e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003442:	4298      	cmp	r0, r3
 8003444:	d9f2      	bls.n	800342c <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8003446:	2003      	movs	r0, #3
 8003448:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344a:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d008      	beq.n	8003468 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003456:	f7fd fcff 	bl	8000e58 <HAL_GetTick>
 800345a:	1b80      	subs	r0, r0, r6
 800345c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003460:	4298      	cmp	r0, r3
 8003462:	d9f2      	bls.n	800344a <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8003464:	2003      	movs	r0, #3
 8003466:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003468:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	429d      	cmp	r5, r3
 8003472:	d20c      	bcs.n	800348e <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	f023 0307 	bic.w	r3, r3, #7
 800347c:	432b      	orrs	r3, r5
 800347e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	429d      	cmp	r5, r3
 8003488:	d001      	beq.n	800348e <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
}
 800348c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	f013 0f04 	tst.w	r3, #4
 8003494:	d006      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003496:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	6853      	ldr	r3, [r2, #4]
 800349a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800349e:	68e1      	ldr	r1, [r4, #12]
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f013 0f08 	tst.w	r3, #8
 80034aa:	d007      	beq.n	80034bc <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ac:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034ae:	6853      	ldr	r3, [r2, #4]
 80034b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80034b4:	6921      	ldr	r1, [r4, #16]
 80034b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034ba:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034bc:	f7ff fefc 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c8:	22f0      	movs	r2, #240	; 0xf0
 80034ca:	fa92 f2a2 	rbit	r2, r2
 80034ce:	fab2 f282 	clz	r2, r2
 80034d2:	40d3      	lsrs	r3, r2
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <HAL_RCC_ClockConfig+0x1cc>)
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	40d8      	lsrs	r0, r3
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_RCC_ClockConfig+0x1d0>)
 80034dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd fc8a 	bl	8000df8 <HAL_InitTick>
  return HAL_OK;
 80034e4:	2000      	movs	r0, #0
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80034e8:	2001      	movs	r0, #1
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	40022000 	.word	0x40022000
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08007bb0 	.word	0x08007bb0
 80034f8:	20000000 	.word	0x20000000

080034fc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80034fc:	4b01      	ldr	r3, [pc, #4]	; (8003504 <HAL_RCC_GetHCLKFreq+0x8>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800350a:	f7ff fff7 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003516:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	fab2 f282 	clz	r2, r2
 8003522:	40d3      	lsrs	r3, r2
 8003524:	4a02      	ldr	r2, [pc, #8]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003526:	5cd3      	ldrb	r3, [r2, r3]
}    
 8003528:	40d8      	lsrs	r0, r3
 800352a:	bd08      	pop	{r3, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	08007bc0 	.word	0x08007bc0

08003534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003534:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003536:	f7ff ffe1 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003542:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003546:	fa92 f2a2 	rbit	r2, r2
 800354a:	fab2 f282 	clz	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a02      	ldr	r2, [pc, #8]	; (800355c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003554:	40d8      	lsrs	r0, r3
 8003556:	bd08      	pop	{r3, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	08007bc0 	.word	0x08007bc0

08003560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b083      	sub	sp, #12
 8003564:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003566:	6803      	ldr	r3, [r0, #0]
 8003568:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800356c:	d044      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b64      	ldr	r3, [pc, #400]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003576:	d179      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003580:	61da      	str	r2, [r3, #28]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800358c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b5d      	ldr	r3, [pc, #372]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003596:	d06b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003598:	4b59      	ldr	r3, [pc, #356]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800359c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80035a0:	d021      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80035a2:	6862      	ldr	r2, [r4, #4]
 80035a4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d01c      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ac:	4854      	ldr	r0, [pc, #336]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80035ae:	6a01      	ldr	r1, [r0, #32]
 80035b0:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 80035b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035b8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	4f51      	ldr	r7, [pc, #324]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035c2:	443a      	add	r2, r7
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	f04f 0e01 	mov.w	lr, #1
 80035ca:	f8c2 e000 	str.w	lr, [r2]
 80035ce:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	443b      	add	r3, r7
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035de:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035e0:	f011 0f01 	tst.w	r1, #1
 80035e4:	d158      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035e6:	4a46      	ldr	r2, [pc, #280]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80035e8:	6a13      	ldr	r3, [r2, #32]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	6861      	ldr	r1, [r4, #4]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	d17a      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	f013 0f01 	tst.w	r3, #1
 80035fe:	d006      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003600:	4a3f      	ldr	r2, [pc, #252]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003602:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003604:	f023 0303 	bic.w	r3, r3, #3
 8003608:	68a1      	ldr	r1, [r4, #8]
 800360a:	430b      	orrs	r3, r1
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	f013 0f20 	tst.w	r3, #32
 8003614:	d006      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003616:	4a3a      	ldr	r2, [pc, #232]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003618:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800361a:	f023 0310 	bic.w	r3, r3, #16
 800361e:	68e1      	ldr	r1, [r4, #12]
 8003620:	430b      	orrs	r3, r1
 8003622:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	f013 0f80 	tst.w	r3, #128	; 0x80
 800362a:	d006      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800362c:	4a34      	ldr	r2, [pc, #208]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800362e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003630:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003634:	6921      	ldr	r1, [r4, #16]
 8003636:	430b      	orrs	r3, r1
 8003638:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003640:	d006      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003642:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003644:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800364a:	6961      	ldr	r1, [r4, #20]
 800364c:	430b      	orrs	r3, r1
 800364e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003656:	d051      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003658:	4a29      	ldr	r2, [pc, #164]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800365a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800365c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003660:	69a1      	ldr	r1, [r4, #24]
 8003662:	430b      	orrs	r3, r1
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003666:	2000      	movs	r0, #0
}
 8003668:	b003      	add	sp, #12
 800366a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800366c:	2500      	movs	r5, #0
 800366e:	e78e      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003670:	4a24      	ldr	r2, [pc, #144]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003672:	6813      	ldr	r3, [r2, #0]
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800367a:	f7fd fbed 	bl	8000e58 <HAL_GetTick>
 800367e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003688:	d186      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fd fbe5 	bl	8000e58 <HAL_GetTick>
 800368e:	1b80      	subs	r0, r0, r6
 8003690:	2864      	cmp	r0, #100	; 0x64
 8003692:	d9f5      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8003694:	2003      	movs	r0, #3
 8003696:	e7e7      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003698:	f7fd fbde 	bl	8000e58 <HAL_GetTick>
 800369c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e014      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80036a2:	6a19      	ldr	r1, [r3, #32]
 80036a4:	2302      	movs	r3, #2
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	2201      	movs	r2, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	4219      	tst	r1, r3
 80036ba:	d194      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fd fbcc 	bl	8000e58 <HAL_GetTick>
 80036c0:	1b80      	subs	r0, r0, r6
 80036c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80036c6:	4298      	cmp	r0, r3
 80036c8:	d816      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036ca:	2302      	movs	r3, #2
 80036cc:	fa93 f2a3 	rbit	r2, r3
 80036d0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d0de      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80036e2:	2302      	movs	r3, #2
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80036ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036ec:	e7da      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	69d3      	ldr	r3, [r2, #28]
 80036f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f4:	61d3      	str	r3, [r2, #28]
 80036f6:	e77f      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 80036f8:	2003      	movs	r0, #3
 80036fa:	e7b5      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 80036fc:	2000      	movs	r0, #0
 80036fe:	e7b3      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003700:	40021000 	.word	0x40021000
 8003704:	40007000 	.word	0x40007000
 8003708:	10908100 	.word	0x10908100

0800370c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003710:	6802      	ldr	r2, [r0, #0]
 8003712:	68d3      	ldr	r3, [r2, #12]
 8003714:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003718:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 800371a:	f7fd fb9d 	bl	8000e58 <HAL_GetTick>
 800371e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f013 0f20 	tst.w	r3, #32
 8003728:	d107      	bne.n	800373a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800372a:	f7fd fb95 	bl	8000e58 <HAL_GetTick>
 800372e:	1b40      	subs	r0, r0, r5
 8003730:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003734:	d9f4      	bls.n	8003720 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8003736:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8003738:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800373a:	2000      	movs	r0, #0
 800373c:	bd38      	pop	{r3, r4, r5, pc}

0800373e <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800373e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003740:	6803      	ldr	r3, [r0, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003748:	d001      	beq.n	800374e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 800374a:	2000      	movs	r0, #0
 800374c:	bd38      	pop	{r3, r4, r5, pc}
 800374e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003756:	f7fd fb7f 	bl	8000e58 <HAL_GetTick>
 800375a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003764:	d107      	bne.n	8003776 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003766:	f7fd fb77 	bl	8000e58 <HAL_GetTick>
 800376a:	1b40      	subs	r0, r0, r5
 800376c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003770:	d9f4      	bls.n	800375c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8003772:	2003      	movs	r0, #3
}
 8003774:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8003776:	2000      	movs	r0, #0
 8003778:	bd38      	pop	{r3, r4, r5, pc}

0800377a <HAL_RTC_Init>:
{
 800377a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800377c:	2800      	cmp	r0, #0
 800377e:	d05c      	beq.n	800383a <HAL_RTC_Init+0xc0>
 8003780:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003782:	7f43      	ldrb	r3, [r0, #29]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d041      	beq.n	800380c <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8003788:	2302      	movs	r3, #2
 800378a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	22ca      	movs	r2, #202	; 0xca
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	2253      	movs	r2, #83	; 0x53
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ffd0 	bl	800373e <RTC_EnterInitMode>
 800379e:	4605      	mov	r5, r0
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d137      	bne.n	8003814 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80037a4:	6822      	ldr	r2, [r4, #0]
 80037a6:	6893      	ldr	r3, [r2, #8]
 80037a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80037ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b0:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80037b2:	6821      	ldr	r1, [r4, #0]
 80037b4:	688a      	ldr	r2, [r1, #8]
 80037b6:	6863      	ldr	r3, [r4, #4]
 80037b8:	6920      	ldr	r0, [r4, #16]
 80037ba:	4303      	orrs	r3, r0
 80037bc:	6960      	ldr	r0, [r4, #20]
 80037be:	4303      	orrs	r3, r0
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	68e2      	ldr	r2, [r4, #12]
 80037c8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80037ca:	6822      	ldr	r2, [r4, #0]
 80037cc:	6913      	ldr	r3, [r2, #16]
 80037ce:	68a1      	ldr	r1, [r4, #8]
 80037d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80037d4:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80037d6:	6822      	ldr	r2, [r4, #0]
 80037d8:	68d3      	ldr	r3, [r2, #12]
 80037da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037de:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f013 0f20 	tst.w	r3, #32
 80037e8:	d01b      	beq.n	8003822 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f2:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80037f8:	69a1      	ldr	r1, [r4, #24]
 80037fa:	430b      	orrs	r3, r1
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	22ff      	movs	r2, #255	; 0xff
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003804:	2301      	movs	r3, #1
 8003806:	7763      	strb	r3, [r4, #29]
}
 8003808:	4628      	mov	r0, r5
 800380a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800380c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800380e:	f002 fc47 	bl	80060a0 <HAL_RTC_MspInit>
 8003812:	e7b9      	b.n	8003788 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800381a:	2304      	movs	r3, #4
 800381c:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800381e:	2501      	movs	r5, #1
 8003820:	e7f2      	b.n	8003808 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff ff72 	bl	800370c <HAL_RTC_WaitForSynchro>
 8003828:	2800      	cmp	r0, #0
 800382a:	d0de      	beq.n	80037ea <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	22ff      	movs	r2, #255	; 0xff
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003832:	2304      	movs	r3, #4
 8003834:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003836:	2501      	movs	r5, #1
 8003838:	e7e6      	b.n	8003808 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 800383a:	2501      	movs	r5, #1
 800383c:	e7e4      	b.n	8003808 <HAL_RTC_Init+0x8e>

0800383e <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800383e:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8003840:	e002      	b.n	8003848 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8003842:	3301      	adds	r3, #1
    Value -= 10U;
 8003844:	380a      	subs	r0, #10
 8003846:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8003848:	2809      	cmp	r0, #9
 800384a:	d8fa      	bhi.n	8003842 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	b2db      	uxtb	r3, r3
}
 8003850:	4318      	orrs	r0, r3
 8003852:	4770      	bx	lr

08003854 <HAL_RTC_SetTime>:
{
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003856:	7f03      	ldrb	r3, [r0, #28]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d077      	beq.n	800394c <HAL_RTC_SetTime+0xf8>
 800385c:	460e      	mov	r6, r1
 800385e:	4604      	mov	r4, r0
 8003860:	2301      	movs	r3, #1
 8003862:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003864:	2302      	movs	r3, #2
 8003866:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003868:	2a00      	cmp	r2, #0
 800386a:	d146      	bne.n	80038fa <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800386c:	6803      	ldr	r3, [r0, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003874:	d101      	bne.n	800387a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800387a:	7830      	ldrb	r0, [r6, #0]
 800387c:	f7ff ffdf 	bl	800383e <RTC_ByteToBcd2>
 8003880:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003882:	7870      	ldrb	r0, [r6, #1]
 8003884:	f7ff ffdb 	bl	800383e <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003888:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800388c:	78b0      	ldrb	r0, [r6, #2]
 800388e:	f7ff ffd6 	bl	800383e <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003892:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8003894:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003896:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	22ca      	movs	r2, #202	; 0xca
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	2253      	movs	r2, #83	; 0x53
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7ff ff49 	bl	800373e <RTC_EnterInitMode>
 80038ac:	4607      	mov	r7, r0
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d135      	bne.n	800391e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 80038b8:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80038bc:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80038be:	6822      	ldr	r2, [r4, #0]
 80038c0:	6893      	ldr	r3, [r2, #8]
 80038c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80038c8:	6821      	ldr	r1, [r4, #0]
 80038ca:	688b      	ldr	r3, [r1, #8]
 80038cc:	68f2      	ldr	r2, [r6, #12]
 80038ce:	6930      	ldr	r0, [r6, #16]
 80038d0:	4302      	orrs	r2, r0
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	68d3      	ldr	r3, [r2, #12]
 80038da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038de:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f013 0f20 	tst.w	r3, #32
 80038e8:	d022      	beq.n	8003930 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	22ff      	movs	r2, #255	; 0xff
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80038f0:	2301      	movs	r3, #1
 80038f2:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80038f4:	2300      	movs	r3, #0
 80038f6:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80038f8:	e029      	b.n	800394e <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80038fa:	6803      	ldr	r3, [r0, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003902:	d101      	bne.n	8003908 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8003904:	2300      	movs	r3, #0
 8003906:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003908:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800390a:	7870      	ldrb	r0, [r6, #1]
 800390c:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800390e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8003912:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003914:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8003916:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003918:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800391c:	e7bd      	b.n	800389a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003924:	2304      	movs	r3, #4
 8003926:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003928:	2300      	movs	r3, #0
 800392a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800392c:	2701      	movs	r7, #1
 800392e:	e00e      	b.n	800394e <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff feeb 	bl	800370c <HAL_RTC_WaitForSynchro>
 8003936:	2800      	cmp	r0, #0
 8003938:	d0d7      	beq.n	80038ea <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	22ff      	movs	r2, #255	; 0xff
 800393e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003940:	2304      	movs	r3, #4
 8003942:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003944:	2300      	movs	r3, #0
 8003946:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8003948:	2701      	movs	r7, #1
 800394a:	e000      	b.n	800394e <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 800394c:	2702      	movs	r7, #2
}
 800394e:	4638      	mov	r0, r7
 8003950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003952 <HAL_RTC_SetDate>:
{
 8003952:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8003954:	7f03      	ldrb	r3, [r0, #28]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d065      	beq.n	8003a26 <HAL_RTC_SetDate+0xd4>
 800395a:	2301      	movs	r3, #1
 800395c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800395e:	2302      	movs	r3, #2
 8003960:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003962:	b93a      	cbnz	r2, 8003974 <HAL_RTC_SetDate+0x22>
 8003964:	784b      	ldrb	r3, [r1, #1]
 8003966:	f013 0f10 	tst.w	r3, #16
 800396a:	d003      	beq.n	8003974 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800396c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003970:	330a      	adds	r3, #10
 8003972:	704b      	strb	r3, [r1, #1]
 8003974:	460e      	mov	r6, r1
 8003976:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8003978:	2a00      	cmp	r2, #0
 800397a:	d132      	bne.n	80039e2 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800397c:	78c8      	ldrb	r0, [r1, #3]
 800397e:	f7ff ff5e 	bl	800383e <RTC_ByteToBcd2>
 8003982:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003984:	7870      	ldrb	r0, [r6, #1]
 8003986:	f7ff ff5a 	bl	800383e <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800398a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800398e:	78b0      	ldrb	r0, [r6, #2]
 8003990:	f7ff ff55 	bl	800383e <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003994:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8003996:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003998:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	22ca      	movs	r2, #202	; 0xca
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	2253      	movs	r2, #83	; 0x53
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff fec8 	bl	800373e <RTC_EnterInitMode>
 80039ae:	4606      	mov	r6, r0
 80039b0:	bb10      	cbnz	r0, 80039f8 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80039b8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80039bc:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039be:	6822      	ldr	r2, [r4, #0]
 80039c0:	68d3      	ldr	r3, [r2, #12]
 80039c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039c6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f013 0f20 	tst.w	r3, #32
 80039d0:	d01b      	beq.n	8003a0a <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	22ff      	movs	r2, #255	; 0xff
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80039d8:	2301      	movs	r3, #1
 80039da:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80039dc:	2300      	movs	r3, #0
 80039de:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80039e0:	e022      	b.n	8003a28 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80039e2:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80039e4:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039e6:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80039e8:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80039ee:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80039f0:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039f2:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80039f6:	e7d1      	b.n	800399c <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039fe:	2304      	movs	r3, #4
 8003a00:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003a02:	2300      	movs	r3, #0
 8003a04:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8003a06:	2601      	movs	r6, #1
 8003a08:	e00e      	b.n	8003a28 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f7ff fe7e 	bl	800370c <HAL_RTC_WaitForSynchro>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d0de      	beq.n	80039d2 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	22ff      	movs	r2, #255	; 0xff
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8003a22:	2601      	movs	r6, #1
 8003a24:	e000      	b.n	8003a28 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8003a26:	2602      	movs	r6, #2
}
 8003a28:	4630      	mov	r0, r6
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}

08003a2c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003a2c:	0903      	lsrs	r3, r0, #4
 8003a2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a32:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8003a34:	f000 000f 	and.w	r0, r0, #15
 8003a38:	4410      	add	r0, r2
}
 8003a3a:	b2c0      	uxtb	r0, r0
 8003a3c:	4770      	bx	lr

08003a3e <HAL_RTC_GetTime>:
{
 8003a3e:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003a40:	6803      	ldr	r3, [r0, #0]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003a46:	6803      	ldr	r3, [r0, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a4e:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8003a50:	6803      	ldr	r3, [r0, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a58:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003a5c:	0c1d      	lsrs	r5, r3, #16
 8003a5e:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8003a62:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8003a64:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8003a68:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003a6a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8003a6e:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8003a70:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8003a74:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8003a76:	b95a      	cbnz	r2, 8003a90 <HAL_RTC_GetTime+0x52>
 8003a78:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a7a:	f7ff ffd7 	bl	8003a2c <RTC_Bcd2ToByte>
 8003a7e:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003a80:	4630      	mov	r0, r6
 8003a82:	f7ff ffd3 	bl	8003a2c <RTC_Bcd2ToByte>
 8003a86:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff ffcf 	bl	8003a2c <RTC_Bcd2ToByte>
 8003a8e:	70a8      	strb	r0, [r5, #2]
}
 8003a90:	2000      	movs	r0, #0
 8003a92:	bd70      	pop	{r4, r5, r6, pc}

08003a94 <HAL_RTC_GetDate>:
{
 8003a94:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8003a96:	6803      	ldr	r3, [r0, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003aa2:	0c18      	lsrs	r0, r3, #16
 8003aa4:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003aa6:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8003aaa:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003aac:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8003ab0:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003ab2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003ab6:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8003ab8:	b95a      	cbnz	r2, 8003ad2 <HAL_RTC_GetDate+0x3e>
 8003aba:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003abc:	f7ff ffb6 	bl	8003a2c <RTC_Bcd2ToByte>
 8003ac0:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f7ff ffb2 	bl	8003a2c <RTC_Bcd2ToByte>
 8003ac8:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7ff ffae 	bl	8003a2c <RTC_Bcd2ToByte>
 8003ad0:	70a0      	strb	r0, [r4, #2]
}
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ad8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ada:	7f03      	ldrb	r3, [r0, #28]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d06d      	beq.n	8003bbc <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8003ae0:	4615      	mov	r5, r2
 8003ae2:	460e      	mov	r6, r1
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aea:	2302      	movs	r3, #2
 8003aec:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003aee:	6803      	ldr	r3, [r0, #0]
 8003af0:	22ca      	movs	r2, #202	; 0xca
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24
 8003af4:	6803      	ldr	r3, [r0, #0]
 8003af6:	2253      	movs	r2, #83	; 0x53
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8003afa:	6803      	ldr	r3, [r0, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b02:	d015      	beq.n	8003b30 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 8003b04:	f7fd f9a8 	bl	8000e58 <HAL_GetTick>
 8003b08:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f013 0f04 	tst.w	r3, #4
 8003b12:	d00d      	beq.n	8003b30 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b14:	f7fd f9a0 	bl	8000e58 <HAL_GetTick>
 8003b18:	1bc0      	subs	r0, r0, r7
 8003b1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b1e:	d9f4      	bls.n	8003b0a <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	22ff      	movs	r2, #255	; 0xff
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b26:	2003      	movs	r0, #3
 8003b28:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 8003b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	6893      	ldr	r3, [r2, #8]
 8003b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b38:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	68d3      	ldr	r3, [r2, #12]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8003b44:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003b46:	f7fd f987 	bl	8000e58 <HAL_GetTick>
 8003b4a:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	68d8      	ldr	r0, [r3, #12]
 8003b50:	f010 0f04 	tst.w	r0, #4
 8003b54:	d10d      	bne.n	8003b72 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003b56:	f7fd f97f 	bl	8000e58 <HAL_GetTick>
 8003b5a:	1bc0      	subs	r0, r0, r7
 8003b5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b60:	d9f4      	bls.n	8003b4c <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	22ff      	movs	r2, #255	; 0xff
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b68:	2003      	movs	r0, #3
 8003b6a:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 8003b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003b72:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	6893      	ldr	r3, [r2, #8]
 8003b78:	f023 0307 	bic.w	r3, r3, #7
 8003b7c:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	6893      	ldr	r3, [r2, #8]
 8003b82:	431d      	orrs	r5, r3
 8003b84:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b8e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b96:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003b98:	6822      	ldr	r2, [r4, #0]
 8003b9a:	6893      	ldr	r3, [r2, #8]
 8003b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba0:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	6893      	ldr	r3, [r2, #8]
 8003ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003baa:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	22ff      	movs	r2, #255	; 0xff
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 8003bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8003bbc:	2002      	movs	r0, #2
}
 8003bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	4604      	mov	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003bc8:	6803      	ldr	r3, [r0, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003bd0:	d106      	bne.n	8003be0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003bd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8003bd8:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	7763      	strb	r3, [r4, #29]
 8003bde:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003be0:	f000 ff36 	bl	8004a50 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003be4:	6822      	ldr	r2, [r4, #0]
 8003be6:	68d3      	ldr	r3, [r2, #12]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8003bee:	60d3      	str	r3, [r2, #12]
 8003bf0:	e7ef      	b.n	8003bd2 <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 8003bf2:	bf00      	nop
 8003bf4:	40010400 	.word	0x40010400

08003bf8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003bf8:	6803      	ldr	r3, [r0, #0]
 8003bfa:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003bfc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003c00:	4770      	bx	lr

08003c02 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003c02:	6803      	ldr	r3, [r0, #0]
 8003c04:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003c06:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8003c0a:	4770      	bx	lr

08003c0c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0c:	6802      	ldr	r2, [r0, #0]
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c14:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	6802      	ldr	r2, [r0, #0]
 8003c18:	6893      	ldr	r3, [r2, #8]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	2320      	movs	r3, #32
 8003c22:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8003c28:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d001      	beq.n	8003c36 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8003c32:	2002      	movs	r0, #2
 8003c34:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003c36:	b1b9      	cbz	r1, 8003c68 <HAL_UART_Transmit_IT+0x40>
 8003c38:	b1c2      	cbz	r2, 8003c6c <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 8003c3a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d016      	beq.n	8003c70 <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 8003c42:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8003c44:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c48:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c50:	2221      	movs	r2, #33	; 0x21
 8003c52:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8003c56:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c5a:	6801      	ldr	r1, [r0, #0]
 8003c5c:	680a      	ldr	r2, [r1, #0]
 8003c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c62:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003c64:	4618      	mov	r0, r3
 8003c66:	4770      	bx	lr
      return HAL_ERROR;
 8003c68:	2001      	movs	r0, #1
 8003c6a:	4770      	bx	lr
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003c70:	2002      	movs	r0, #2
}
 8003c72:	4770      	bx	lr

08003c74 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8003c74:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d001      	beq.n	8003c82 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8003c7e:	2002      	movs	r0, #2
 8003c80:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003c82:	2900      	cmp	r1, #0
 8003c84:	d047      	beq.n	8003d16 <HAL_UART_Receive_IT+0xa2>
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d047      	beq.n	8003d1a <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8003c8a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d045      	beq.n	8003d1e <HAL_UART_Receive_IT+0xaa>
 8003c92:	2301      	movs	r3, #1
 8003c94:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8003c98:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8003c9a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8003c9e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003ca2:	6883      	ldr	r3, [r0, #8]
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d006      	beq.n	8003cb8 <HAL_UART_Receive_IT+0x44>
 8003caa:	b9a3      	cbnz	r3, 8003cd6 <HAL_UART_Receive_IT+0x62>
 8003cac:	6903      	ldr	r3, [r0, #16]
 8003cae:	b973      	cbnz	r3, 8003cce <HAL_UART_Receive_IT+0x5a>
 8003cb0:	23ff      	movs	r3, #255	; 0xff
 8003cb2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003cb6:	e011      	b.n	8003cdc <HAL_UART_Receive_IT+0x68>
 8003cb8:	6903      	ldr	r3, [r0, #16]
 8003cba:	b923      	cbnz	r3, 8003cc6 <HAL_UART_Receive_IT+0x52>
 8003cbc:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003cc0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003cc4:	e00a      	b.n	8003cdc <HAL_UART_Receive_IT+0x68>
 8003cc6:	23ff      	movs	r3, #255	; 0xff
 8003cc8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003ccc:	e006      	b.n	8003cdc <HAL_UART_Receive_IT+0x68>
 8003cce:	237f      	movs	r3, #127	; 0x7f
 8003cd0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003cd4:	e002      	b.n	8003cdc <HAL_UART_Receive_IT+0x68>
 8003cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cda:	d012      	beq.n	8003d02 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce0:	2222      	movs	r2, #34	; 0x22
 8003ce2:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8003ce6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cea:	6801      	ldr	r1, [r0, #0]
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cf4:	6801      	ldr	r1, [r0, #0]
 8003cf6:	680a      	ldr	r2, [r1, #0]
 8003cf8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003cfc:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003cfe:	4618      	mov	r0, r3
 8003d00:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8003d02:	6903      	ldr	r3, [r0, #16]
 8003d04:	b91b      	cbnz	r3, 8003d0e <HAL_UART_Receive_IT+0x9a>
 8003d06:	237f      	movs	r3, #127	; 0x7f
 8003d08:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003d0c:	e7e6      	b.n	8003cdc <HAL_UART_Receive_IT+0x68>
 8003d0e:	233f      	movs	r3, #63	; 0x3f
 8003d10:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003d14:	e7e2      	b.n	8003cdc <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8003d16:	2001      	movs	r0, #1
 8003d18:	4770      	bx	lr
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003d1e:	2002      	movs	r0, #2
}
 8003d20:	4770      	bx	lr

08003d22 <HAL_UART_TxCpltCallback>:
{
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_ErrorCallback>:
{
 8003d24:	4770      	bx	lr

08003d26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d26:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003d28:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d30:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8003d34:	f7ff fff6 	bl	8003d24 <HAL_UART_ErrorCallback>
 8003d38:	bd08      	pop	{r3, pc}
	...

08003d3c <UART_SetConfig>:
{
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d40:	6883      	ldr	r3, [r0, #8]
 8003d42:	6902      	ldr	r2, [r0, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	6942      	ldr	r2, [r0, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	69c2      	ldr	r2, [r0, #28]
 8003d4c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d4e:	6801      	ldr	r1, [r0, #0]
 8003d50:	6808      	ldr	r0, [r1, #0]
 8003d52:	4a64      	ldr	r2, [pc, #400]	; (8003ee4 <UART_SetConfig+0x1a8>)
 8003d54:	4002      	ands	r2, r0
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	6853      	ldr	r3, [r2, #4]
 8003d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d62:	68e1      	ldr	r1, [r4, #12]
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d68:	69a3      	ldr	r3, [r4, #24]
 8003d6a:	6a22      	ldr	r2, [r4, #32]
 8003d6c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d6e:	6821      	ldr	r1, [r4, #0]
 8003d70:	688a      	ldr	r2, [r1, #8]
 8003d72:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7a:	6825      	ldr	r5, [r4, #0]
 8003d7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ee8 <UART_SetConfig+0x1ac>)
 8003d7e:	429d      	cmp	r5, r3
 8003d80:	d015      	beq.n	8003dae <UART_SetConfig+0x72>
 8003d82:	4b5a      	ldr	r3, [pc, #360]	; (8003eec <UART_SetConfig+0x1b0>)
 8003d84:	429d      	cmp	r5, r3
 8003d86:	d029      	beq.n	8003ddc <UART_SetConfig+0xa0>
 8003d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d8c:	429d      	cmp	r5, r3
 8003d8e:	d021      	beq.n	8003dd4 <UART_SetConfig+0x98>
 8003d90:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d92:	69e2      	ldr	r2, [r4, #28]
 8003d94:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003d98:	d022      	beq.n	8003de0 <UART_SetConfig+0xa4>
    switch (clocksource)
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	f200 809f 	bhi.w	8003ede <UART_SetConfig+0x1a2>
 8003da0:	e8df f003 	tbb	[pc, r3]
 8003da4:	9d7c7166 	.word	0x9d7c7166
 8003da8:	9d9d9d88 	.word	0x9d9d9d88
 8003dac:	93          	.byte	0x93
 8003dad:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dae:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d809      	bhi.n	8003dd0 <UART_SetConfig+0x94>
 8003dbc:	e8df f003 	tbb	[pc, r3]
 8003dc0:	0c060402 	.word	0x0c060402
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e7e4      	b.n	8003d92 <UART_SetConfig+0x56>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	e7e2      	b.n	8003d92 <UART_SetConfig+0x56>
 8003dcc:	2308      	movs	r3, #8
 8003dce:	e7e0      	b.n	8003d92 <UART_SetConfig+0x56>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	e7de      	b.n	8003d92 <UART_SetConfig+0x56>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e7dc      	b.n	8003d92 <UART_SetConfig+0x56>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e7da      	b.n	8003d92 <UART_SetConfig+0x56>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e7d8      	b.n	8003d92 <UART_SetConfig+0x56>
    switch (clocksource)
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d842      	bhi.n	8003e6a <UART_SetConfig+0x12e>
 8003de4:	e8df f003 	tbb	[pc, r3]
 8003de8:	41221705 	.word	0x41221705
 8003dec:	4141412d 	.word	0x4141412d
 8003df0:	38          	.byte	0x38
 8003df1:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003df2:	f7ff fb89 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8003df6:	6862      	ldr	r2, [r4, #4]
 8003df8:	0853      	lsrs	r3, r2, #1
 8003dfa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e02:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e04:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8003e06:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003e0e:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8003e10:	6822      	ldr	r2, [r4, #0]
 8003e12:	60d3      	str	r3, [r2, #12]
 8003e14:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e16:	f7ff fb8d 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 8003e1a:	6862      	ldr	r2, [r4, #4]
 8003e1c:	0853      	lsrs	r3, r2, #1
 8003e1e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e26:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e28:	2000      	movs	r0, #0
        break;
 8003e2a:	e7ec      	b.n	8003e06 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e2c:	6862      	ldr	r2, [r4, #4]
 8003e2e:	0853      	lsrs	r3, r2, #1
 8003e30:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003e34:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e3c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e3e:	2000      	movs	r0, #0
        break;
 8003e40:	e7e1      	b.n	8003e06 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e42:	f7ff fa39 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	0853      	lsrs	r3, r2, #1
 8003e4a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e52:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e54:	2000      	movs	r0, #0
        break;
 8003e56:	e7d6      	b.n	8003e06 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e58:	6862      	ldr	r2, [r4, #4]
 8003e5a:	0853      	lsrs	r3, r2, #1
 8003e5c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e64:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e66:	2000      	movs	r0, #0
        break;
 8003e68:	e7cd      	b.n	8003e06 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8003e6a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e7ca      	b.n	8003e06 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e70:	f7ff fb4a 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e7e:	b280      	uxth	r0, r0
 8003e80:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e82:	2000      	movs	r0, #0
        break;
 8003e84:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e86:	f7ff fb55 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e90:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e94:	b280      	uxth	r0, r0
 8003e96:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e98:	2000      	movs	r0, #0
        break;
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e9c:	6862      	ldr	r2, [r4, #4]
 8003e9e:	0853      	lsrs	r3, r2, #1
 8003ea0:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003ea4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb0:	2000      	movs	r0, #0
        break;
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003eb4:	f7ff fa00 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003ebe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ec2:	b280      	uxth	r0, r0
 8003ec4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec6:	2000      	movs	r0, #0
        break;
 8003ec8:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003eca:	6862      	ldr	r2, [r4, #4]
 8003ecc:	0853      	lsrs	r3, r2, #1
 8003ece:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eda:	2000      	movs	r0, #0
        break;
 8003edc:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
}
 8003ee0:	bd38      	pop	{r3, r4, r5, pc}
 8003ee2:	bf00      	nop
 8003ee4:	efff69f3 	.word	0xefff69f3
 8003ee8:	40013800 	.word	0x40013800
 8003eec:	40004400 	.word	0x40004400

08003ef0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ef2:	f013 0f01 	tst.w	r3, #1
 8003ef6:	d006      	beq.n	8003f06 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ef8:	6802      	ldr	r2, [r0, #0]
 8003efa:	6853      	ldr	r3, [r2, #4]
 8003efc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f00:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003f02:	430b      	orrs	r3, r1
 8003f04:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f08:	f013 0f02 	tst.w	r3, #2
 8003f0c:	d006      	beq.n	8003f1c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f0e:	6802      	ldr	r2, [r0, #0]
 8003f10:	6853      	ldr	r3, [r2, #4]
 8003f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f16:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f1e:	f013 0f04 	tst.w	r3, #4
 8003f22:	d006      	beq.n	8003f32 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f24:	6802      	ldr	r2, [r0, #0]
 8003f26:	6853      	ldr	r3, [r2, #4]
 8003f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f34:	f013 0f08 	tst.w	r3, #8
 8003f38:	d006      	beq.n	8003f48 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f3a:	6802      	ldr	r2, [r0, #0]
 8003f3c:	6853      	ldr	r3, [r2, #4]
 8003f3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f42:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f4a:	f013 0f10 	tst.w	r3, #16
 8003f4e:	d006      	beq.n	8003f5e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f50:	6802      	ldr	r2, [r0, #0]
 8003f52:	6893      	ldr	r3, [r2, #8]
 8003f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f58:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f60:	f013 0f20 	tst.w	r3, #32
 8003f64:	d006      	beq.n	8003f74 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f66:	6802      	ldr	r2, [r0, #0]
 8003f68:	6893      	ldr	r3, [r2, #8]
 8003f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f7a:	d00a      	beq.n	8003f92 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f7c:	6802      	ldr	r2, [r0, #0]
 8003f7e:	6853      	ldr	r3, [r2, #4]
 8003f80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f84:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f86:	430b      	orrs	r3, r1
 8003f88:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f90:	d00b      	beq.n	8003faa <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f98:	d006      	beq.n	8003fa8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f9a:	6802      	ldr	r2, [r0, #0]
 8003f9c:	6853      	ldr	r3, [r2, #4]
 8003f9e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003fa2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6053      	str	r3, [r2, #4]
 8003fa8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003faa:	6802      	ldr	r2, [r0, #0]
 8003fac:	6853      	ldr	r3, [r2, #4]
 8003fae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fb2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6053      	str	r3, [r2, #4]
 8003fb8:	e7eb      	b.n	8003f92 <UART_AdvFeatureConfig+0xa2>

08003fba <UART_WaitOnFlagUntilTimeout>:
{
 8003fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	460f      	mov	r7, r1
 8003fc2:	4616      	mov	r6, r2
 8003fc4:	4698      	mov	r8, r3
 8003fc6:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	ea37 0303 	bics.w	r3, r7, r3
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	42b3      	cmp	r3, r6
 8003fd8:	d11e      	bne.n	8004018 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8003fda:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003fde:	d0f3      	beq.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003fe0:	b12c      	cbz	r4, 8003fee <UART_WaitOnFlagUntilTimeout+0x34>
 8003fe2:	f7fc ff39 	bl	8000e58 <HAL_GetTick>
 8003fe6:	eba0 0008 	sub.w	r0, r0, r8
 8003fea:	4284      	cmp	r4, r0
 8003fec:	d2ec      	bcs.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fee:	682a      	ldr	r2, [r5, #0]
 8003ff0:	6813      	ldr	r3, [r2, #0]
 8003ff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	682a      	ldr	r2, [r5, #0]
 8003ffa:	6893      	ldr	r3, [r2, #8]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8004002:	2320      	movs	r3, #32
 8004004:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004008:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800400c:	2300      	movs	r3, #0
 800400e:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8004012:	2003      	movs	r0, #3
 8004014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8004018:	2000      	movs	r0, #0
}
 800401a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800401e <UART_CheckIdleState>:
{
 800401e:	b530      	push	{r4, r5, lr}
 8004020:	b083      	sub	sp, #12
 8004022:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	2300      	movs	r3, #0
 8004026:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8004028:	f7fc ff16 	bl	8000e58 <HAL_GetTick>
 800402c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f013 0f08 	tst.w	r3, #8
 8004036:	d10e      	bne.n	8004056 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f013 0f04 	tst.w	r3, #4
 8004040:	d117      	bne.n	8004072 <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 8004042:	2320      	movs	r3, #32
 8004044:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8004048:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 800404c:	2000      	movs	r0, #0
 800404e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8004052:	b003      	add	sp, #12
 8004054:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004056:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4603      	mov	r3, r0
 800405e:	2200      	movs	r2, #0
 8004060:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004064:	4620      	mov	r0, r4
 8004066:	f7ff ffa8 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 800406a:	2800      	cmp	r0, #0
 800406c:	d0e4      	beq.n	8004038 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800406e:	2003      	movs	r0, #3
 8004070:	e7ef      	b.n	8004052 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004072:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	462b      	mov	r3, r5
 800407a:	2200      	movs	r2, #0
 800407c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004080:	4620      	mov	r0, r4
 8004082:	f7ff ff9a 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 8004086:	2800      	cmp	r0, #0
 8004088:	d0db      	beq.n	8004042 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800408a:	2003      	movs	r0, #3
 800408c:	e7e1      	b.n	8004052 <UART_CheckIdleState+0x34>

0800408e <HAL_UART_Init>:
  if(huart == NULL)
 800408e:	b378      	cbz	r0, 80040f0 <HAL_UART_Init+0x62>
{
 8004090:	b510      	push	{r4, lr}
 8004092:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8004094:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004098:	b30b      	cbz	r3, 80040de <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800409a:	2324      	movs	r3, #36	; 0x24
 800409c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7ff fe46 	bl	8003d3c <UART_SetConfig>
 80040b0:	2801      	cmp	r0, #1
 80040b2:	d01f      	beq.n	80040f4 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040b6:	b9bb      	cbnz	r3, 80040e8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	6853      	ldr	r3, [r2, #4]
 80040bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80040c0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	6893      	ldr	r3, [r2, #8]
 80040c6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80040ca:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80040cc:	6822      	ldr	r2, [r4, #0]
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff ffa1 	bl	800401e <UART_CheckIdleState>
 80040dc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80040de:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80040e2:	f001 fffb 	bl	80060dc <HAL_UART_MspInit>
 80040e6:	e7d8      	b.n	800409a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7ff ff01 	bl	8003ef0 <UART_AdvFeatureConfig>
 80040ee:	e7e3      	b.n	80040b8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80040f0:	2001      	movs	r0, #1
 80040f2:	4770      	bx	lr
}
 80040f4:	bd10      	pop	{r4, pc}

080040f6 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b21      	cmp	r3, #33	; 0x21
 80040fe:	d001      	beq.n	8004104 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8004100:	2002      	movs	r0, #2
  }
}
 8004102:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8004104:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004108:	b29b      	uxth	r3, r3
 800410a:	b193      	cbz	r3, 8004132 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	6883      	ldr	r3, [r0, #8]
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004112:	d01a      	beq.n	800414a <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8004114:	6802      	ldr	r2, [r0, #0]
 8004116:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004118:	1c59      	adds	r1, r3, #1
 800411a:	64c1      	str	r1, [r0, #76]	; 0x4c
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004120:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29b      	uxth	r3, r3
 800412a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800412e:	2000      	movs	r0, #0
 8004130:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004132:	6802      	ldr	r2, [r0, #0]
 8004134:	6813      	ldr	r3, [r2, #0]
 8004136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800413c:	6802      	ldr	r2, [r0, #0]
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004144:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8004146:	2000      	movs	r0, #0
 8004148:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414a:	6903      	ldr	r3, [r0, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e1      	bne.n	8004114 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8004150:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004152:	6802      	ldr	r2, [r0, #0]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415a:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800415c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800415e:	3302      	adds	r3, #2
 8004160:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004162:	e7dd      	b.n	8004120 <UART_Transmit_IT+0x2a>

08004164 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004164:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004166:	6801      	ldr	r1, [r0, #0]
 8004168:	680b      	ldr	r3, [r1, #0]
 800416a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416e:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004170:	2320      	movs	r3, #32
 8004172:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8004176:	f7ff fdd4 	bl	8003d22 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800417a:	2000      	movs	r0, #0
 800417c:	bd08      	pop	{r3, pc}

0800417e <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800417e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004182:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b22      	cmp	r3, #34	; 0x22
 800418a:	d006      	beq.n	800419a <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800418c:	6802      	ldr	r2, [r0, #0]
 800418e:	6993      	ldr	r3, [r2, #24]
 8004190:	f043 0308 	orr.w	r3, r3, #8
 8004194:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8004196:	2002      	movs	r0, #2
 8004198:	4770      	bx	lr
{
 800419a:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800419c:	6803      	ldr	r3, [r0, #0]
 800419e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041a0:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a2:	6881      	ldr	r1, [r0, #8]
 80041a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80041a8:	d00f      	beq.n	80041ca <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041aa:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80041ac:	1c4c      	adds	r4, r1, #1
 80041ae:	6544      	str	r4, [r0, #84]	; 0x54
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	401a      	ands	r2, r3
 80041b4:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 80041b6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80041c4:	b15b      	cbz	r3, 80041de <UART_Receive_IT+0x60>
    return HAL_OK;
 80041c6:	2000      	movs	r0, #0
  }
}
 80041c8:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ca:	6901      	ldr	r1, [r0, #16]
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d1ec      	bne.n	80041aa <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80041d0:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80041d2:	401a      	ands	r2, r3
 80041d4:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 80041d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80041d8:	3302      	adds	r3, #2
 80041da:	6543      	str	r3, [r0, #84]	; 0x54
 80041dc:	e7eb      	b.n	80041b6 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	6802      	ldr	r2, [r0, #0]
 80041e0:	6813      	ldr	r3, [r2, #0]
 80041e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e6:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	6802      	ldr	r2, [r0, #0]
 80041ea:	6893      	ldr	r3, [r2, #8]
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80041f2:	2320      	movs	r3, #32
 80041f4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80041f8:	f000 fc14 	bl	8004a24 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80041fc:	2000      	movs	r0, #0
 80041fe:	bd10      	pop	{r4, pc}

08004200 <HAL_UART_IRQHandler>:
{
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004204:	6802      	ldr	r2, [r0, #0]
 8004206:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004208:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 800420a:	f013 050f 	ands.w	r5, r3, #15
 800420e:	d105      	bne.n	800421c <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004210:	f013 0f20 	tst.w	r3, #32
 8004214:	d002      	beq.n	800421c <HAL_UART_IRQHandler+0x1c>
 8004216:	f011 0f20 	tst.w	r1, #32
 800421a:	d160      	bne.n	80042de <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 800421c:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800421e:	2d00      	cmp	r5, #0
 8004220:	d072      	beq.n	8004308 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004222:	f010 0501 	ands.w	r5, r0, #1
 8004226:	d102      	bne.n	800422e <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8004228:	f411 7f90 	tst.w	r1, #288	; 0x120
 800422c:	d06c      	beq.n	8004308 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800422e:	f013 0f01 	tst.w	r3, #1
 8004232:	d007      	beq.n	8004244 <HAL_UART_IRQHandler+0x44>
 8004234:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004238:	d004      	beq.n	8004244 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800423a:	2001      	movs	r0, #1
 800423c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800423e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004240:	4302      	orrs	r2, r0
 8004242:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004244:	f013 0f02 	tst.w	r3, #2
 8004248:	d007      	beq.n	800425a <HAL_UART_IRQHandler+0x5a>
 800424a:	b135      	cbz	r5, 800425a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800424c:	6822      	ldr	r2, [r4, #0]
 800424e:	2002      	movs	r0, #2
 8004250:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004252:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004254:	f042 0204 	orr.w	r2, r2, #4
 8004258:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425a:	f013 0f04 	tst.w	r3, #4
 800425e:	d007      	beq.n	8004270 <HAL_UART_IRQHandler+0x70>
 8004260:	b135      	cbz	r5, 8004270 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	2004      	movs	r0, #4
 8004266:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004268:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800426a:	f042 0202 	orr.w	r2, r2, #2
 800426e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004270:	f013 0f08 	tst.w	r3, #8
 8004274:	d009      	beq.n	800428a <HAL_UART_IRQHandler+0x8a>
 8004276:	f011 0f20 	tst.w	r1, #32
 800427a:	d100      	bne.n	800427e <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800427c:	b12d      	cbz	r5, 800428a <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	2008      	movs	r0, #8
 8004282:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004284:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004286:	4302      	orrs	r2, r0
 8004288:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800428a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800428c:	2a00      	cmp	r2, #0
 800428e:	d04d      	beq.n	800432c <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004290:	f013 0f20 	tst.w	r3, #32
 8004294:	d002      	beq.n	800429c <HAL_UART_IRQHandler+0x9c>
 8004296:	f011 0f20 	tst.w	r1, #32
 800429a:	d123      	bne.n	80042e4 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800429c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800429e:	f013 0f08 	tst.w	r3, #8
 80042a2:	d104      	bne.n	80042ae <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80042a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042ac:	d026      	beq.n	80042fc <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff fcac 	bl	8003c0c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80042bc:	d01a      	beq.n	80042f4 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c4:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80042c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042c8:	b183      	cbz	r3, 80042ec <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ca:	4a23      	ldr	r2, [pc, #140]	; (8004358 <HAL_UART_IRQHandler+0x158>)
 80042cc:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ce:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80042d0:	f7fd fb54 	bl	800197c <HAL_DMA_Abort_IT>
 80042d4:	b350      	cbz	r0, 800432c <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042d6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80042d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042da:	4798      	blx	r3
 80042dc:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 80042de:	f7ff ff4e 	bl	800417e <UART_Receive_IT>
      return;
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff ff4a 	bl	800417e <UART_Receive_IT>
 80042ea:	e7d7      	b.n	800429c <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7ff fd19 	bl	8003d24 <HAL_UART_ErrorCallback>
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80042f4:	4620      	mov	r0, r4
 80042f6:	f7ff fd15 	bl	8003d24 <HAL_UART_ErrorCallback>
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7ff fd11 	bl	8003d24 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004302:	2300      	movs	r3, #0
 8004304:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004306:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8004308:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800430c:	d002      	beq.n	8004314 <HAL_UART_IRQHandler+0x114>
 800430e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8004312:	d10c      	bne.n	800432e <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004314:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004318:	d002      	beq.n	8004320 <HAL_UART_IRQHandler+0x120>
 800431a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800431e:	d112      	bne.n	8004346 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004320:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004324:	d002      	beq.n	800432c <HAL_UART_IRQHandler+0x12c>
 8004326:	f011 0f40 	tst.w	r1, #64	; 0x40
 800432a:	d110      	bne.n	800434e <HAL_UART_IRQHandler+0x14e>
 800432c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800432e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004332:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8004334:	2320      	movs	r3, #32
 8004336:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800433a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 800433e:	4620      	mov	r0, r4
 8004340:	f000 f80c 	bl	800435c <HAL_UARTEx_WakeupCallback>
    return;
 8004344:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8004346:	4620      	mov	r0, r4
 8004348:	f7ff fed5 	bl	80040f6 <UART_Transmit_IT>
    return;
 800434c:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 800434e:	4620      	mov	r0, r4
 8004350:	f7ff ff08 	bl	8004164 <UART_EndTransmit_IT>
    return;
 8004354:	e7ea      	b.n	800432c <HAL_UART_IRQHandler+0x12c>
 8004356:	bf00      	nop
 8004358:	08003d27 	.word	0x08003d27

0800435c <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800435c:	4770      	bx	lr
	...

08004360 <adc_comms>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void adc_comms(){
 8004360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004364:	ed2d 8b02 	vpush	{d8}

	adc_raw_voltage =  ADC1_buffer[0];
 8004368:	4b7a      	ldr	r3, [pc, #488]	; (8004554 <adc_comms+0x1f4>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	497a      	ldr	r1, [pc, #488]	; (8004558 <adc_comms+0x1f8>)
 8004370:	600b      	str	r3, [r1, #0]
	adc_raw_current =	ADC1_buffer[1];
 8004372:	6854      	ldr	r4, [r2, #4]
 8004374:	4979      	ldr	r1, [pc, #484]	; (800455c <adc_comms+0x1fc>)
 8004376:	600c      	str	r4, [r1, #0]
	raw_ambient_temp = ADC1_buffer[2];
 8004378:	6895      	ldr	r5, [r2, #8]
 800437a:	4979      	ldr	r1, [pc, #484]	; (8004560 <adc_comms+0x200>)
 800437c:	600d      	str	r5, [r1, #0]
	raw_geyser_temp = ADC1_buffer[3];
 800437e:	68d1      	ldr	r1, [r2, #12]
 8004380:	4a78      	ldr	r2, [pc, #480]	; (8004564 <adc_comms+0x204>)
 8004382:	6011      	str	r1, [r2, #0]


	//Converting Voltage
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 8004384:	ee07 3a90 	vmov	s15, r3
 8004388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438c:	eddf 8a76 	vldr	s17, [pc, #472]	; 8004568 <adc_comms+0x208>
 8004390:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8004394:	eddf 6a75 	vldr	s13, [pc, #468]	; 800456c <adc_comms+0x20c>
 8004398:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800439c:	ee27 8a07 	vmul.f32	s16, s14, s14
 80043a0:	4e73      	ldr	r6, [pc, #460]	; (8004570 <adc_comms+0x210>)
 80043a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80043a6:	f7fc fcbb 	bl	8000d20 <__aeabi_ul2f>
 80043aa:	ee07 0a90 	vmov	s15, r0
 80043ae:	ee77 7a88 	vadd.f32	s15, s15, s16
 80043b2:	ee17 0a90 	vmov	r0, s15
 80043b6:	f7fc fcf9 	bl	8000dac <__aeabi_f2ulz>
 80043ba:	e9c6 0100 	strd	r0, r1, [r6]

	//Converting Current
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 80043be:	ee07 4a90 	vmov	s15, r4
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80043ca:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8004574 <adc_comms+0x214>
 80043ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80043d2:	ee27 8a07 	vmul.f32	s16, s14, s14
 80043d6:	4c68      	ldr	r4, [pc, #416]	; (8004578 <adc_comms+0x218>)
 80043d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80043dc:	f7fc fca0 	bl	8000d20 <__aeabi_ul2f>
 80043e0:	ee07 0a90 	vmov	s15, r0
 80043e4:	ee77 7a88 	vadd.f32	s15, s15, s16
 80043e8:	ee17 0a90 	vmov	r0, s15
 80043ec:	f7fc fcde 	bl	8000dac <__aeabi_f2ulz>
 80043f0:	e9c4 0100 	strd	r0, r1, [r4]

	//Converting Ambient temperature
	if( (raw_ambient_temp-620.5f)/12.4f < 100){
 80043f4:	ee07 5a90 	vmov	s15, r5
 80043f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fc:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800457c <adc_comms+0x21c>
 8004400:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004404:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8004580 <adc_comms+0x220>
 8004408:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800440c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8004584 <adc_comms+0x224>
 8004410:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	d420      	bmi.n	800445c <adc_comms+0xfc>
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-620.5f)/12.4f < 100){
 800441a:	4b52      	ldr	r3, [pc, #328]	; (8004564 <adc_comms+0x204>)
 800441c:	edd3 7a00 	vldr	s15, [r3]
 8004420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004424:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800457c <adc_comms+0x21c>
 8004428:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800442c:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8004580 <adc_comms+0x220>
 8004430:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004434:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004584 <adc_comms+0x224>
 8004438:	eef4 6ac7 	vcmpe.f32	s13, s14
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	d41f      	bmi.n	8004482 <adc_comms+0x122>
//		raw_geyser_temp = 50;
//		geyser_temp_int = 50;
//		sprintf(geyser_temp,"%lu", raw_geyser_temp);
//		sprintf(segment_val, "%lu", raw_geyser_temp);
//	}
	adc_counter += 1;
 8004442:	4a51      	ldr	r2, [pc, #324]	; (8004588 <adc_comms+0x228>)
 8004444:	8813      	ldrh	r3, [r2, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	b29b      	uxth	r3, r3
 800444a:	8013      	strh	r3, [r2, #0]
	if(adc_counter == 5000){
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d032      	beq.n	80044ba <adc_comms+0x15a>

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}

}
 8004454:	ecbd 8b02 	vpop	{d8}
 8004458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
 800445c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800458c <adc_comms+0x22c>
 8004460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004464:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8004468:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800446c:	ee17 2a90 	vmov	r2, s15
 8004470:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <adc_comms+0x200>)
 8004472:	edc3 7a00 	vstr	s15, [r3]
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 8004476:	4946      	ldr	r1, [pc, #280]	; (8004590 <adc_comms+0x230>)
 8004478:	4b46      	ldr	r3, [pc, #280]	; (8004594 <adc_comms+0x234>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	f002 fda0 	bl	8006fc0 <siprintf>
 8004480:	e7cb      	b.n	800441a <adc_comms+0xba>
		raw_geyser_temp = (raw_geyser_temp-620.4f)/12.4f;
 8004482:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800458c <adc_comms+0x22c>
 8004486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800448a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800448e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004492:	ee17 2a90 	vmov	r2, s15
 8004496:	461d      	mov	r5, r3
 8004498:	edc5 7a00 	vstr	s15, [r5]
		geyser_temp_int = raw_geyser_temp;
 800449c:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <adc_comms+0x238>)
 800449e:	701a      	strb	r2, [r3, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 80044a0:	4c3e      	ldr	r4, [pc, #248]	; (800459c <adc_comms+0x23c>)
 80044a2:	4621      	mov	r1, r4
 80044a4:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <adc_comms+0x240>)
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	f002 fd8a 	bl	8006fc0 <siprintf>
		sprintf(segment_val, "%lu", raw_geyser_temp);
 80044ac:	682a      	ldr	r2, [r5, #0]
 80044ae:	4621      	mov	r1, r4
 80044b0:	4b3c      	ldr	r3, [pc, #240]	; (80045a4 <adc_comms+0x244>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	f002 fd84 	bl	8006fc0 <siprintf>
 80044b8:	e7c3      	b.n	8004442 <adc_comms+0xe2>
		*voltage_int_rms = sqrt(adc_buffer_voltage/5000.f);
 80044ba:	4e3b      	ldr	r6, [pc, #236]	; (80045a8 <adc_comms+0x248>)
 80044bc:	6834      	ldr	r4, [r6, #0]
 80044be:	4d2c      	ldr	r5, [pc, #176]	; (8004570 <adc_comms+0x210>)
 80044c0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80044c4:	f7fc fc2c 	bl	8000d20 <__aeabi_ul2f>
 80044c8:	ed9f 8a38 	vldr	s16, [pc, #224]	; 80045ac <adc_comms+0x24c>
 80044cc:	ee07 0a10 	vmov	s14, r0
 80044d0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80044d4:	ee17 0a90 	vmov	r0, s15
 80044d8:	f7fc f836 	bl	8000548 <__aeabi_f2d>
 80044dc:	ec41 0b10 	vmov	d0, r0, r1
 80044e0:	f003 fa0e 	bl	8007900 <sqrt>
 80044e4:	ec51 0b10 	vmov	r0, r1, d0
 80044e8:	f7fc fb32 	bl	8000b50 <__aeabi_d2uiz>
 80044ec:	6020      	str	r0, [r4, #0]
		*current_int_rms = sqrt(adc_buffer_current/5000.f);
 80044ee:	4f30      	ldr	r7, [pc, #192]	; (80045b0 <adc_comms+0x250>)
 80044f0:	f8d7 8000 	ldr.w	r8, [r7]
 80044f4:	4c20      	ldr	r4, [pc, #128]	; (8004578 <adc_comms+0x218>)
 80044f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80044fa:	f7fc fc11 	bl	8000d20 <__aeabi_ul2f>
 80044fe:	ee07 0a10 	vmov	s14, r0
 8004502:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8004506:	ee17 0a90 	vmov	r0, s15
 800450a:	f7fc f81d 	bl	8000548 <__aeabi_f2d>
 800450e:	ec41 0b10 	vmov	d0, r0, r1
 8004512:	f003 f9f5 	bl	8007900 <sqrt>
 8004516:	ec51 0b10 	vmov	r0, r1, d0
 800451a:	f7fc fb19 	bl	8000b50 <__aeabi_d2uiz>
 800451e:	f8c8 0000 	str.w	r0, [r8]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8004522:	6833      	ldr	r3, [r6, #0]
 8004524:	4e1d      	ldr	r6, [pc, #116]	; (800459c <adc_comms+0x23c>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4631      	mov	r1, r6
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <adc_comms+0x254>)
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	f002 fd47 	bl	8006fc0 <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4631      	mov	r1, r6
 8004538:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <adc_comms+0x258>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	f002 fd40 	bl	8006fc0 <siprintf>
		adc_counter = 0;
 8004540:	2200      	movs	r2, #0
 8004542:	4b11      	ldr	r3, [pc, #68]	; (8004588 <adc_comms+0x228>)
 8004544:	801a      	strh	r2, [r3, #0]
		adc_buffer_voltage = 0;
 8004546:	2200      	movs	r2, #0
 8004548:	2300      	movs	r3, #0
 800454a:	e9c5 2300 	strd	r2, r3, [r5]
		adc_buffer_current = 0;
 800454e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8004552:	e77f      	b.n	8004454 <adc_comms+0xf4>
 8004554:	2000024c 	.word	0x2000024c
 8004558:	20000278 	.word	0x20000278
 800455c:	20000274 	.word	0x20000274
 8004560:	200002d8 	.word	0x200002d8
 8004564:	200002dc 	.word	0x200002dc
 8004568:	4500be87 	.word	0x4500be87
 800456c:	3c0e4fb9 	.word	0x3c0e4fb9
 8004570:	20000268 	.word	0x20000268
 8004574:	3e166cf4 	.word	0x3e166cf4
 8004578:	20000260 	.word	0x20000260
 800457c:	441b2000 	.word	0x441b2000
 8004580:	41466666 	.word	0x41466666
 8004584:	42c80000 	.word	0x42c80000
 8004588:	20000270 	.word	0x20000270
 800458c:	441b199a 	.word	0x441b199a
 8004590:	08007b78 	.word	0x08007b78
 8004594:	2000027c 	.word	0x2000027c
 8004598:	200002a8 	.word	0x200002a8
 800459c:	08007b7c 	.word	0x08007b7c
 80045a0:	200002a4 	.word	0x200002a4
 80045a4:	200002e8 	.word	0x200002e8
 80045a8:	20000318 	.word	0x20000318
 80045ac:	459c4000 	.word	0x459c4000
 80045b0:	20000284 	.word	0x20000284
 80045b4:	2000031c 	.word	0x2000031c
 80045b8:	20000288 	.word	0x20000288

080045bc <write2Flash>:
extern RTC_HandleTypeDef hrtc;




void write2Flash(){
 80045bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if(log_counter <= 100){
 80045c0:	4bc2      	ldr	r3, [pc, #776]	; (80048cc <write2Flash+0x310>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b64      	cmp	r3, #100	; 0x64
 80045c6:	d90b      	bls.n	80045e0 <write2Flash+0x24>
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 80045c8:	2232      	movs	r2, #50	; 0x32
 80045ca:	2100      	movs	r1, #0
 80045cc:	4bc0      	ldr	r3, [pc, #768]	; (80048d0 <write2Flash+0x314>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	f002 fc31 	bl	8006e36 <memset>


			log_counter += 1;
 80045d4:	4abd      	ldr	r2, [pc, #756]	; (80048cc <write2Flash+0x310>)
 80045d6:	7813      	ldrb	r3, [r2, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	7013      	strb	r3, [r2, #0]
 80045dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		log_empty = 0;
 80045e0:	2400      	movs	r4, #0
 80045e2:	4bbc      	ldr	r3, [pc, #752]	; (80048d4 <write2Flash+0x318>)
 80045e4:	701c      	strb	r4, [r3, #0]
		HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 80045e6:	4fbc      	ldr	r7, [pc, #752]	; (80048d8 <write2Flash+0x31c>)
 80045e8:	4dbc      	ldr	r5, [pc, #752]	; (80048dc <write2Flash+0x320>)
 80045ea:	4622      	mov	r2, r4
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7ff fa25 	bl	8003a3e <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80045f4:	4622      	mov	r2, r4
 80045f6:	4bba      	ldr	r3, [pc, #744]	; (80048e0 <write2Flash+0x324>)
 80045f8:	6819      	ldr	r1, [r3, #0]
 80045fa:	4628      	mov	r0, r5
 80045fc:	f7ff fa4a 	bl	8003a94 <HAL_RTC_GetDate>
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 8004600:	4cb3      	ldr	r4, [pc, #716]	; (80048d0 <write2Flash+0x314>)
 8004602:	6825      	ldr	r5, [r4, #0]
 8004604:	4628      	mov	r0, r5
 8004606:	f7fb fde3 	bl	80001d0 <strlen>
 800460a:	4405      	add	r5, r0
 800460c:	4eb5      	ldr	r6, [pc, #724]	; (80048e4 <write2Flash+0x328>)
 800460e:	4630      	mov	r0, r6
 8004610:	f7fb fdde 	bl	80001d0 <strlen>
 8004614:	4602      	mov	r2, r0
 8004616:	4631      	mov	r1, r6
 8004618:	4628      	mov	r0, r5
 800461a:	f002 fc01 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800461e:	6826      	ldr	r6, [r4, #0]
 8004620:	4630      	mov	r0, r6
 8004622:	f7fb fdd5 	bl	80001d0 <strlen>
 8004626:	4db0      	ldr	r5, [pc, #704]	; (80048e8 <write2Flash+0x32c>)
 8004628:	782b      	ldrb	r3, [r5, #0]
 800462a:	5433      	strb	r3, [r6, r0]
		itoa((timeOfRTC->Hours),temp_time_var,10  );
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4eaf      	ldr	r6, [pc, #700]	; (80048ec <write2Flash+0x330>)
 8004630:	220a      	movs	r2, #10
 8004632:	6831      	ldr	r1, [r6, #0]
 8004634:	7818      	ldrb	r0, [r3, #0]
 8004636:	f002 fbe9 	bl	8006e0c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 800463a:	f8d4 8000 	ldr.w	r8, [r4]
 800463e:	4640      	mov	r0, r8
 8004640:	f7fb fdc6 	bl	80001d0 <strlen>
 8004644:	4480      	add	r8, r0
 8004646:	f8d6 9000 	ldr.w	r9, [r6]
 800464a:	4648      	mov	r0, r9
 800464c:	f7fb fdc0 	bl	80001d0 <strlen>
 8004650:	4602      	mov	r2, r0
 8004652:	4649      	mov	r1, r9
 8004654:	4640      	mov	r0, r8
 8004656:	f002 fbe3 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800465a:	f8d4 8000 	ldr.w	r8, [r4]
 800465e:	4640      	mov	r0, r8
 8004660:	f7fb fdb6 	bl	80001d0 <strlen>
 8004664:	782b      	ldrb	r3, [r5, #0]
 8004666:	f808 3000 	strb.w	r3, [r8, r0]
		itoa((timeOfRTC->Minutes),temp_time_var,10  );
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	220a      	movs	r2, #10
 800466e:	6831      	ldr	r1, [r6, #0]
 8004670:	7858      	ldrb	r0, [r3, #1]
 8004672:	f002 fbcb 	bl	8006e0c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8004676:	f8d4 8000 	ldr.w	r8, [r4]
 800467a:	4640      	mov	r0, r8
 800467c:	f7fb fda8 	bl	80001d0 <strlen>
 8004680:	4480      	add	r8, r0
 8004682:	f8d6 9000 	ldr.w	r9, [r6]
 8004686:	4648      	mov	r0, r9
 8004688:	f7fb fda2 	bl	80001d0 <strlen>
 800468c:	4602      	mov	r2, r0
 800468e:	4649      	mov	r1, r9
 8004690:	4640      	mov	r0, r8
 8004692:	f002 fbc5 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004696:	f8d4 8000 	ldr.w	r8, [r4]
 800469a:	4640      	mov	r0, r8
 800469c:	f7fb fd98 	bl	80001d0 <strlen>
 80046a0:	782b      	ldrb	r3, [r5, #0]
 80046a2:	f808 3000 	strb.w	r3, [r8, r0]
		itoa((timeOfRTC->Seconds),temp_time_var,10  );
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	220a      	movs	r2, #10
 80046aa:	6831      	ldr	r1, [r6, #0]
 80046ac:	7898      	ldrb	r0, [r3, #2]
 80046ae:	f002 fbad 	bl	8006e0c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 80046b2:	6827      	ldr	r7, [r4, #0]
 80046b4:	4638      	mov	r0, r7
 80046b6:	f7fb fd8b 	bl	80001d0 <strlen>
 80046ba:	4407      	add	r7, r0
 80046bc:	6836      	ldr	r6, [r6, #0]
 80046be:	4630      	mov	r0, r6
 80046c0:	f7fb fd86 	bl	80001d0 <strlen>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4631      	mov	r1, r6
 80046c8:	4638      	mov	r0, r7
 80046ca:	f002 fba9 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80046ce:	6826      	ldr	r6, [r4, #0]
 80046d0:	4630      	mov	r0, r6
 80046d2:	f7fb fd7d 	bl	80001d0 <strlen>
 80046d6:	782b      	ldrb	r3, [r5, #0]
 80046d8:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 80046da:	6826      	ldr	r6, [r4, #0]
 80046dc:	4630      	mov	r0, r6
 80046de:	f7fb fd77 	bl	80001d0 <strlen>
 80046e2:	4406      	add	r6, r0
 80046e4:	4b82      	ldr	r3, [pc, #520]	; (80048f0 <write2Flash+0x334>)
 80046e6:	681f      	ldr	r7, [r3, #0]
 80046e8:	4638      	mov	r0, r7
 80046ea:	f7fb fd71 	bl	80001d0 <strlen>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4639      	mov	r1, r7
 80046f2:	4630      	mov	r0, r6
 80046f4:	f002 fb94 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80046f8:	6826      	ldr	r6, [r4, #0]
 80046fa:	4630      	mov	r0, r6
 80046fc:	f7fb fd68 	bl	80001d0 <strlen>
 8004700:	782b      	ldrb	r3, [r5, #0]
 8004702:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 8004704:	6826      	ldr	r6, [r4, #0]
 8004706:	4630      	mov	r0, r6
 8004708:	f7fb fd62 	bl	80001d0 <strlen>
 800470c:	4406      	add	r6, r0
 800470e:	4b79      	ldr	r3, [pc, #484]	; (80048f4 <write2Flash+0x338>)
 8004710:	681f      	ldr	r7, [r3, #0]
 8004712:	4638      	mov	r0, r7
 8004714:	f7fb fd5c 	bl	80001d0 <strlen>
 8004718:	4602      	mov	r2, r0
 800471a:	4639      	mov	r1, r7
 800471c:	4630      	mov	r0, r6
 800471e:	f002 fb7f 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004722:	6826      	ldr	r6, [r4, #0]
 8004724:	4630      	mov	r0, r6
 8004726:	f7fb fd53 	bl	80001d0 <strlen>
 800472a:	782b      	ldrb	r3, [r5, #0]
 800472c:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 800472e:	6826      	ldr	r6, [r4, #0]
 8004730:	4630      	mov	r0, r6
 8004732:	f7fb fd4d 	bl	80001d0 <strlen>
 8004736:	4406      	add	r6, r0
 8004738:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <write2Flash+0x33c>)
 800473a:	681f      	ldr	r7, [r3, #0]
 800473c:	4638      	mov	r0, r7
 800473e:	f7fb fd47 	bl	80001d0 <strlen>
 8004742:	4602      	mov	r2, r0
 8004744:	4639      	mov	r1, r7
 8004746:	4630      	mov	r0, r6
 8004748:	f002 fb6a 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800474c:	6826      	ldr	r6, [r4, #0]
 800474e:	4630      	mov	r0, r6
 8004750:	f7fb fd3e 	bl	80001d0 <strlen>
 8004754:	782b      	ldrb	r3, [r5, #0]
 8004756:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8004758:	6826      	ldr	r6, [r4, #0]
 800475a:	4630      	mov	r0, r6
 800475c:	f7fb fd38 	bl	80001d0 <strlen>
 8004760:	4406      	add	r6, r0
 8004762:	4b66      	ldr	r3, [pc, #408]	; (80048fc <write2Flash+0x340>)
 8004764:	681f      	ldr	r7, [r3, #0]
 8004766:	4638      	mov	r0, r7
 8004768:	f7fb fd32 	bl	80001d0 <strlen>
 800476c:	4602      	mov	r2, r0
 800476e:	4639      	mov	r1, r7
 8004770:	4630      	mov	r0, r6
 8004772:	f002 fb55 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004776:	6826      	ldr	r6, [r4, #0]
 8004778:	4630      	mov	r0, r6
 800477a:	f7fb fd29 	bl	80001d0 <strlen>
 800477e:	782b      	ldrb	r3, [r5, #0]
 8004780:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8004782:	6826      	ldr	r6, [r4, #0]
 8004784:	4630      	mov	r0, r6
 8004786:	f7fb fd23 	bl	80001d0 <strlen>
 800478a:	4406      	add	r6, r0
 800478c:	4b5c      	ldr	r3, [pc, #368]	; (8004900 <write2Flash+0x344>)
 800478e:	681f      	ldr	r7, [r3, #0]
 8004790:	4638      	mov	r0, r7
 8004792:	f7fb fd1d 	bl	80001d0 <strlen>
 8004796:	4602      	mov	r2, r0
 8004798:	4639      	mov	r1, r7
 800479a:	4630      	mov	r0, r6
 800479c:	f002 fb40 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80047a0:	6826      	ldr	r6, [r4, #0]
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7fb fd14 	bl	80001d0 <strlen>
 80047a8:	782b      	ldrb	r3, [r5, #0]
 80047aa:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 80047ac:	6826      	ldr	r6, [r4, #0]
 80047ae:	4630      	mov	r0, r6
 80047b0:	f7fb fd0e 	bl	80001d0 <strlen>
 80047b4:	4406      	add	r6, r0
 80047b6:	4b53      	ldr	r3, [pc, #332]	; (8004904 <write2Flash+0x348>)
 80047b8:	681f      	ldr	r7, [r3, #0]
 80047ba:	4638      	mov	r0, r7
 80047bc:	f7fb fd08 	bl	80001d0 <strlen>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4639      	mov	r1, r7
 80047c4:	4630      	mov	r0, r6
 80047c6:	f002 fb2b 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80047ca:	6824      	ldr	r4, [r4, #0]
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7fb fcff 	bl	80001d0 <strlen>
 80047d2:	782b      	ldrb	r3, [r5, #0]
 80047d4:	5423      	strb	r3, [r4, r0]
		if(valve_state == valve_OPEN){
 80047d6:	4b4c      	ldr	r3, [pc, #304]	; (8004908 <write2Flash+0x34c>)
 80047d8:	681d      	ldr	r5, [r3, #0]
 80047da:	4b4c      	ldr	r3, [pc, #304]	; (800490c <write2Flash+0x350>)
 80047dc:	429d      	cmp	r5, r3
 80047de:	f000 80a7 	beq.w	8004930 <write2Flash+0x374>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 80047e2:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <write2Flash+0x314>)
 80047e4:	681c      	ldr	r4, [r3, #0]
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7fb fcf2 	bl	80001d0 <strlen>
 80047ec:	4404      	add	r4, r0
 80047ee:	4628      	mov	r0, r5
 80047f0:	f7fb fcee 	bl	80001d0 <strlen>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4629      	mov	r1, r5
 80047f8:	4620      	mov	r0, r4
 80047fa:	f002 fb11 	bl	8006e20 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 80047fe:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <write2Flash+0x314>)
 8004800:	681c      	ldr	r4, [r3, #0]
 8004802:	4620      	mov	r0, r4
 8004804:	f7fb fce4 	bl	80001d0 <strlen>
 8004808:	4b41      	ldr	r3, [pc, #260]	; (8004910 <write2Flash+0x354>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	5223      	strh	r3, [r4, r0]
		if(log_counter == 0){
 800480e:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <write2Flash+0x310>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 809b 	beq.w	800494e <write2Flash+0x392>
			HAL_FLASH_Unlock();
 8004818:	f7fd f95c 	bl	8001ad4 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008800+64*log_counter, *((uint64_t*)(flash_stored)) );
 800481c:	4d2b      	ldr	r5, [pc, #172]	; (80048cc <write2Flash+0x310>)
 800481e:	7829      	ldrb	r1, [r5, #0]
 8004820:	f101 1120 	add.w	r1, r1, #2097184	; 0x200020
 8004824:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8004828:	4c29      	ldr	r4, [pc, #164]	; (80048d0 <write2Flash+0x314>)
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	0189      	lsls	r1, r1, #6
 8004832:	2003      	movs	r0, #3
 8004834:	f7fd f99e 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008808+64*log_counter, *((uint64_t*)(flash_stored)+1) );
 8004838:	7828      	ldrb	r0, [r5, #0]
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004840:	4934      	ldr	r1, [pc, #208]	; (8004914 <write2Flash+0x358>)
 8004842:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8004846:	2003      	movs	r0, #3
 8004848:	f7fd f994 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008810+64*log_counter, *((uint64_t*)(flash_stored)+2) );
 800484c:	7828      	ldrb	r0, [r5, #0]
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004854:	4930      	ldr	r1, [pc, #192]	; (8004918 <write2Flash+0x35c>)
 8004856:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 800485a:	2003      	movs	r0, #3
 800485c:	f7fd f98a 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008818+64*log_counter, *((uint64_t*)(flash_stored)+3) );
 8004860:	7828      	ldrb	r0, [r5, #0]
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004868:	492c      	ldr	r1, [pc, #176]	; (800491c <write2Flash+0x360>)
 800486a:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 800486e:	2003      	movs	r0, #3
 8004870:	f7fd f980 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008820+64*log_counter, *((uint64_t*)(flash_stored)+4) );
 8004874:	7828      	ldrb	r0, [r5, #0]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800487c:	4928      	ldr	r1, [pc, #160]	; (8004920 <write2Flash+0x364>)
 800487e:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8004882:	2003      	movs	r0, #3
 8004884:	f7fd f976 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008828+64*log_counter, *((uint64_t*)(flash_stored)+5) );
 8004888:	7828      	ldrb	r0, [r5, #0]
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004890:	4924      	ldr	r1, [pc, #144]	; (8004924 <write2Flash+0x368>)
 8004892:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8004896:	2003      	movs	r0, #3
 8004898:	f7fd f96c 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008830+64*log_counter, *((uint64_t*)(flash_stored)+6) );
 800489c:	7828      	ldrb	r0, [r5, #0]
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80048a4:	4920      	ldr	r1, [pc, #128]	; (8004928 <write2Flash+0x36c>)
 80048a6:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 80048aa:	2003      	movs	r0, #3
 80048ac:	f7fd f962 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008838+64*log_counter, *((uint64_t*)(flash_stored)+7) );
 80048b0:	7828      	ldrb	r0, [r5, #0]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80048b8:	491c      	ldr	r1, [pc, #112]	; (800492c <write2Flash+0x370>)
 80048ba:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 80048be:	2003      	movs	r0, #3
 80048c0:	f7fd f958 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80048c4:	f7fd f91a 	bl	8001afc <HAL_FLASH_Lock>
 80048c8:	e67e      	b.n	80045c8 <write2Flash+0xc>
 80048ca:	bf00      	nop
 80048cc:	200002c4 	.word	0x200002c4
 80048d0:	200002a0 	.word	0x200002a0
 80048d4:	2000001b 	.word	0x2000001b
 80048d8:	200002fc 	.word	0x200002fc
 80048dc:	200004b0 	.word	0x200004b0
 80048e0:	2000028c 	.word	0x2000028c
 80048e4:	2000001c 	.word	0x2000001c
 80048e8:	20000004 	.word	0x20000004
 80048ec:	200002f4 	.word	0x200002f4
 80048f0:	20000288 	.word	0x20000288
 80048f4:	2000031c 	.word	0x2000031c
 80048f8:	2000027c 	.word	0x2000027c
 80048fc:	200002a4 	.word	0x200002a4
 8004900:	20000300 	.word	0x20000300
 8004904:	200002b8 	.word	0x200002b8
 8004908:	20000310 	.word	0x20000310
 800490c:	20000054 	.word	0x20000054
 8004910:	20000008 	.word	0x20000008
 8004914:	08008808 	.word	0x08008808
 8004918:	08008810 	.word	0x08008810
 800491c:	08008818 	.word	0x08008818
 8004920:	08008820 	.word	0x08008820
 8004924:	08008828 	.word	0x08008828
 8004928:	08008830 	.word	0x08008830
 800492c:	08008838 	.word	0x08008838
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 8004930:	4b26      	ldr	r3, [pc, #152]	; (80049cc <write2Flash+0x410>)
 8004932:	681c      	ldr	r4, [r3, #0]
 8004934:	4620      	mov	r0, r4
 8004936:	f7fb fc4b 	bl	80001d0 <strlen>
 800493a:	4404      	add	r4, r0
 800493c:	4628      	mov	r0, r5
 800493e:	f7fb fc47 	bl	80001d0 <strlen>
 8004942:	1e42      	subs	r2, r0, #1
 8004944:	4629      	mov	r1, r5
 8004946:	4620      	mov	r0, r4
 8004948:	f002 fa6a 	bl	8006e20 <memcpy>
 800494c:	e757      	b.n	80047fe <write2Flash+0x242>
			HAL_FLASH_Unlock();
 800494e:	f7fd f8c1 	bl	8001ad4 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008800, *((uint64_t*)(flash_stored)) );
 8004952:	4c1e      	ldr	r4, [pc, #120]	; (80049cc <write2Flash+0x410>)
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	491d      	ldr	r1, [pc, #116]	; (80049d0 <write2Flash+0x414>)
 800495c:	2003      	movs	r0, #3
 800495e:	f7fd f909 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008808, *((uint64_t*)(flash_stored)+1) );
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004968:	491a      	ldr	r1, [pc, #104]	; (80049d4 <write2Flash+0x418>)
 800496a:	2003      	movs	r0, #3
 800496c:	f7fd f902 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008810, *((uint64_t*)(flash_stored)+2) );
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004976:	4918      	ldr	r1, [pc, #96]	; (80049d8 <write2Flash+0x41c>)
 8004978:	2003      	movs	r0, #3
 800497a:	f7fd f8fb 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008818, *((uint64_t*)(flash_stored)+3) );
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004984:	4915      	ldr	r1, [pc, #84]	; (80049dc <write2Flash+0x420>)
 8004986:	2003      	movs	r0, #3
 8004988:	f7fd f8f4 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008820, *((uint64_t*)(flash_stored)+4) );
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004992:	4913      	ldr	r1, [pc, #76]	; (80049e0 <write2Flash+0x424>)
 8004994:	2003      	movs	r0, #3
 8004996:	f7fd f8ed 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008828, *((uint64_t*)(flash_stored)+5) );
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80049a0:	4910      	ldr	r1, [pc, #64]	; (80049e4 <write2Flash+0x428>)
 80049a2:	2003      	movs	r0, #3
 80049a4:	f7fd f8e6 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008830, *((uint64_t*)(flash_stored)+6) );
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80049ae:	490e      	ldr	r1, [pc, #56]	; (80049e8 <write2Flash+0x42c>)
 80049b0:	2003      	movs	r0, #3
 80049b2:	f7fd f8df 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008838, *((uint64_t*)(flash_stored)+7) );
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80049bc:	490b      	ldr	r1, [pc, #44]	; (80049ec <write2Flash+0x430>)
 80049be:	2003      	movs	r0, #3
 80049c0:	f7fd f8d8 	bl	8001b74 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80049c4:	f7fd f89a 	bl	8001afc <HAL_FLASH_Lock>
 80049c8:	e5fe      	b.n	80045c8 <write2Flash+0xc>
 80049ca:	bf00      	nop
 80049cc:	200002a0 	.word	0x200002a0
 80049d0:	08008800 	.word	0x08008800
 80049d4:	08008808 	.word	0x08008808
 80049d8:	08008810 	.word	0x08008810
 80049dc:	08008818 	.word	0x08008818
 80049e0:	08008820 	.word	0x08008820
 80049e4:	08008828 	.word	0x08008828
 80049e8:	08008830 	.word	0x08008830
 80049ec:	08008838 	.word	0x08008838

080049f0 <logPosition>:

}


void logPosition(){
	uint32_t* mem = (uint32_t*)(0x08008800);
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <logPosition+0x28>)
	while(*mem != 0xFFFFFFFF){
 80049f2:	e00c      	b.n	8004a0e <logPosition+0x1e>
		log_counter += 1;
 80049f4:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <logPosition+0x2c>)
 80049f6:	7813      	ldrb	r3, [r2, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	7013      	strb	r3, [r2, #0]
		mem = (uint32_t*)(0x08008800 + 64*log_counter);
 80049fe:	f103 1320 	add.w	r3, r3, #2097184	; 0x200020
 8004a02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a06:	019b      	lsls	r3, r3, #6
		log_empty = 0;
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <logPosition+0x30>)
 8004a0c:	7011      	strb	r1, [r2, #0]
	while(*mem != 0xFFFFFFFF){
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d1ee      	bne.n	80049f4 <logPosition+0x4>
	}




}
 8004a16:	4770      	bx	lr
 8004a18:	08008800 	.word	0x08008800
 8004a1c:	200002c4 	.word	0x200002c4
 8004a20:	2000001b 	.word	0x2000001b

08004a24 <HAL_UART_RxCpltCallback>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004a24:	b508      	push	{r3, lr}
	rx_flag = 1;
 8004a26:	2201      	movs	r2, #1
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_UART_RxCpltCallback+0x14>)
 8004a2a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004a2c:	4903      	ldr	r1, [pc, #12]	; (8004a3c <HAL_UART_RxCpltCallback+0x18>)
 8004a2e:	4804      	ldr	r0, [pc, #16]	; (8004a40 <HAL_UART_RxCpltCallback+0x1c>)
 8004a30:	f7ff f920 	bl	8003c74 <HAL_UART_Receive_IT>
 8004a34:	bd08      	pop	{r3, pc}
 8004a36:	bf00      	nop
 8004a38:	200002e5 	.word	0x200002e5
 8004a3c:	200005ac 	.word	0x200005ac
 8004a40:	20000440 	.word	0x20000440

08004a44 <HAL_ADC_ConvCpltCallback>:

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 8004a44:	2201      	movs	r2, #1
 8004a46:	4b01      	ldr	r3, [pc, #4]	; (8004a4c <HAL_ADC_ConvCpltCallback+0x8>)
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	4770      	bx	lr
 8004a4c:	20000272 	.word	0x20000272

08004a50 <HAL_RTCEx_WakeUpTimerEventCallback>:
////	tim3_flag = 1;
//}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 8004a50:	2201      	movs	r2, #1
 8004a52:	4b01      	ldr	r3, [pc, #4]	; (8004a58 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	4770      	bx	lr
 8004a58:	200002e4 	.word	0x200002e4

08004a5c <HAL_GPIO_EXTI_Callback>:
////	pump_flag = 0;
////	HAL_TIM_Base_Stop_IT(&htim2);
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_6){
 8004a5c:	2840      	cmp	r0, #64	; 0x40
 8004a5e:	d000      	beq.n	8004a62 <HAL_GPIO_EXTI_Callback+0x6>
 8004a60:	4770      	bx	lr
		pump_flag = 1;
 8004a62:	2201      	movs	r2, #1
 8004a64:	4b01      	ldr	r3, [pc, #4]	; (8004a6c <HAL_GPIO_EXTI_Callback+0x10>)
 8004a66:	701a      	strb	r2, [r3, #0]
	}
}
 8004a68:	e7fa      	b.n	8004a60 <HAL_GPIO_EXTI_Callback+0x4>
 8004a6a:	bf00      	nop
 8004a6c:	200002d4 	.word	0x200002d4

08004a70 <heating_control>:
		}
	}
}


void heating_control(){
 8004a70:	b508      	push	{r3, lr}

	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 4) ) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a72:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <heating_control+0x128>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a49      	ldr	r2, [pc, #292]	; (8004b9c <heating_control+0x12c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00f      	beq.n	8004a9c <heating_control+0x2c>
		heater_state = heater_OFF;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
	}
	else if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 4) ) && (geyser_temp_int > (*set_temp+4 ))){
 8004a7c:	4a47      	ldr	r2, [pc, #284]	; (8004b9c <heating_control+0x12c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d021      	beq.n	8004ac6 <heating_control+0x56>
		heater_state = heater_OFF;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
	}
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a82:	4a46      	ldr	r2, [pc, #280]	; (8004b9c <heating_control+0x12c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d033      	beq.n	8004af0 <heating_control+0x80>
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a88:	4a45      	ldr	r2, [pc, #276]	; (8004ba0 <heating_control+0x130>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d045      	beq.n	8004b1a <heating_control+0xaa>
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && (geyser_temp_int > (*set_temp+4))){
 8004a8e:	4a44      	ldr	r2, [pc, #272]	; (8004ba0 <heating_control+0x130>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d057      	beq.n	8004b44 <heating_control+0xd4>
		heater_state = heater_OFF;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
	}
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a94:	4a42      	ldr	r2, [pc, #264]	; (8004ba0 <heating_control+0x130>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d069      	beq.n	8004b6e <heating_control+0xfe>
 8004a9a:	bd08      	pop	{r3, pc}
	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 4) ) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a9c:	4a41      	ldr	r2, [pc, #260]	; (8004ba4 <heating_control+0x134>)
 8004a9e:	7811      	ldrb	r1, [r2, #0]
 8004aa0:	4a41      	ldr	r2, [pc, #260]	; (8004ba8 <heating_control+0x138>)
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	1f10      	subs	r0, r2, #4
 8004aa8:	4281      	cmp	r1, r0
 8004aaa:	dbe7      	blt.n	8004a7c <heating_control+0xc>
 8004aac:	3204      	adds	r2, #4
 8004aae:	4291      	cmp	r1, r2
 8004ab0:	dce4      	bgt.n	8004a7c <heating_control+0xc>
		heater_state = heater_OFF;
 8004ab2:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <heating_control+0x12c>)
 8004ab4:	4b38      	ldr	r3, [pc, #224]	; (8004b98 <heating_control+0x128>)
 8004ab6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004abe:	483b      	ldr	r0, [pc, #236]	; (8004bac <heating_control+0x13c>)
 8004ac0:	f7fd f9ed 	bl	8001e9e <HAL_GPIO_WritePin>
 8004ac4:	bd08      	pop	{r3, pc}
	else if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 4) ) && (geyser_temp_int > (*set_temp+4 ))){
 8004ac6:	4a37      	ldr	r2, [pc, #220]	; (8004ba4 <heating_control+0x134>)
 8004ac8:	7811      	ldrb	r1, [r2, #0]
 8004aca:	4a37      	ldr	r2, [pc, #220]	; (8004ba8 <heating_control+0x138>)
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	1f10      	subs	r0, r2, #4
 8004ad2:	4281      	cmp	r1, r0
 8004ad4:	dbd5      	blt.n	8004a82 <heating_control+0x12>
 8004ad6:	3204      	adds	r2, #4
 8004ad8:	4291      	cmp	r1, r2
 8004ada:	ddd2      	ble.n	8004a82 <heating_control+0x12>
		heater_state = heater_OFF;
 8004adc:	4a2f      	ldr	r2, [pc, #188]	; (8004b9c <heating_control+0x12c>)
 8004ade:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <heating_control+0x128>)
 8004ae0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ae8:	4830      	ldr	r0, [pc, #192]	; (8004bac <heating_control+0x13c>)
 8004aea:	f7fd f9d8 	bl	8001e9e <HAL_GPIO_WritePin>
 8004aee:	bd08      	pop	{r3, pc}
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
 8004af0:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <heating_control+0x134>)
 8004af2:	7811      	ldrb	r1, [r2, #0]
 8004af4:	4a2c      	ldr	r2, [pc, #176]	; (8004ba8 <heating_control+0x138>)
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	1f10      	subs	r0, r2, #4
 8004afc:	4281      	cmp	r1, r0
 8004afe:	dac3      	bge.n	8004a88 <heating_control+0x18>
 8004b00:	3204      	adds	r2, #4
 8004b02:	4291      	cmp	r1, r2
 8004b04:	dcc0      	bgt.n	8004a88 <heating_control+0x18>
		heater_state = heater_ON;
 8004b06:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <heating_control+0x130>)
 8004b08:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <heating_control+0x128>)
 8004b0a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b12:	4826      	ldr	r0, [pc, #152]	; (8004bac <heating_control+0x13c>)
 8004b14:	f7fd f9c3 	bl	8001e9e <HAL_GPIO_WritePin>
 8004b18:	bd08      	pop	{r3, pc}
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && !(geyser_temp_int > (*set_temp+4 ))){
 8004b1a:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <heating_control+0x134>)
 8004b1c:	7811      	ldrb	r1, [r2, #0]
 8004b1e:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <heating_control+0x138>)
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	1f10      	subs	r0, r2, #4
 8004b26:	4281      	cmp	r1, r0
 8004b28:	dbb1      	blt.n	8004a8e <heating_control+0x1e>
 8004b2a:	3204      	adds	r2, #4
 8004b2c:	4291      	cmp	r1, r2
 8004b2e:	dcae      	bgt.n	8004a8e <heating_control+0x1e>
		heater_state = heater_ON;
 8004b30:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <heating_control+0x130>)
 8004b32:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <heating_control+0x128>)
 8004b34:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004b36:	2200      	movs	r2, #0
 8004b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b3c:	481b      	ldr	r0, [pc, #108]	; (8004bac <heating_control+0x13c>)
 8004b3e:	f7fd f9ae 	bl	8001e9e <HAL_GPIO_WritePin>
 8004b42:	bd08      	pop	{r3, pc}
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && (geyser_temp_int > (*set_temp+4))){
 8004b44:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <heating_control+0x134>)
 8004b46:	7811      	ldrb	r1, [r2, #0]
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <heating_control+0x138>)
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	1f10      	subs	r0, r2, #4
 8004b50:	4281      	cmp	r1, r0
 8004b52:	db9f      	blt.n	8004a94 <heating_control+0x24>
 8004b54:	3204      	adds	r2, #4
 8004b56:	4291      	cmp	r1, r2
 8004b58:	dd9c      	ble.n	8004a94 <heating_control+0x24>
		heater_state = heater_OFF;
 8004b5a:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <heating_control+0x12c>)
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <heating_control+0x128>)
 8004b5e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004b60:	2201      	movs	r2, #1
 8004b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b66:	4811      	ldr	r0, [pc, #68]	; (8004bac <heating_control+0x13c>)
 8004b68:	f7fd f999 	bl	8001e9e <HAL_GPIO_WritePin>
 8004b6c:	bd08      	pop	{r3, pc}
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <heating_control+0x134>)
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <heating_control+0x138>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	1f19      	subs	r1, r3, #4
 8004b7a:	428a      	cmp	r2, r1
 8004b7c:	da8d      	bge.n	8004a9a <heating_control+0x2a>
 8004b7e:	3304      	adds	r3, #4
 8004b80:	429a      	cmp	r2, r3
 8004b82:	dc8a      	bgt.n	8004a9a <heating_control+0x2a>
		heater_state = heater_ON;
 8004b84:	4a06      	ldr	r2, [pc, #24]	; (8004ba0 <heating_control+0x130>)
 8004b86:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <heating_control+0x128>)
 8004b88:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b90:	4806      	ldr	r0, [pc, #24]	; (8004bac <heating_control+0x13c>)
 8004b92:	f7fd f984 	bl	8001e9e <HAL_GPIO_WritePin>
	}
}
 8004b96:	e780      	b.n	8004a9a <heating_control+0x2a>
 8004b98:	200002b8 	.word	0x200002b8
 8004b9c:	20000014 	.word	0x20000014
 8004ba0:	20000018 	.word	0x20000018
 8004ba4:	200002a8 	.word	0x200002a8
 8004ba8:	200002ec 	.word	0x200002ec
 8004bac:	48000400 	.word	0x48000400

08004bb0 <heating_scheduling>:
void heating_scheduling(){
 8004bb0:	b538      	push	{r3, r4, r5, lr}
	if(auto_heating == 1){
 8004bb2:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <heating_scheduling+0x90>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d000      	beq.n	8004bbc <heating_scheduling+0xc>
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
		HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 8004bbc:	4c21      	ldr	r4, [pc, #132]	; (8004c44 <heating_scheduling+0x94>)
 8004bbe:	4d22      	ldr	r5, [pc, #136]	; (8004c48 <heating_scheduling+0x98>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	6821      	ldr	r1, [r4, #0]
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f7fe ff3a 	bl	8003a3e <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <heating_scheduling+0x9c>)
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f7fe ff5f 	bl	8003a94 <HAL_RTC_GetDate>
		RTC_in_seconds = timeOfRTC->Hours*3600 + timeOfRTC->Minutes*60 +timeOfRTC->Seconds;
 8004bd6:	6821      	ldr	r1, [r4, #0]
 8004bd8:	780b      	ldrb	r3, [r1, #0]
 8004bda:	784a      	ldrb	r2, [r1, #1]
 8004bdc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8004be0:	0090      	lsls	r0, r2, #2
 8004be2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004be6:	fb02 0303 	mla	r3, r2, r3, r0
 8004bea:	788a      	ldrb	r2, [r1, #2]
 8004bec:	4413      	add	r3, r2
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <heating_scheduling+0xa0>)
 8004bf0:	6013      	str	r3, [r2, #0]
		if( (time_intervals[1] - time_intervals[0] ) > 0){ // no overlapping days
 8004bf2:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <heating_scheduling+0xa4>)
 8004bf4:	6851      	ldr	r1, [r2, #4]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	4291      	cmp	r1, r2
 8004bfa:	d003      	beq.n	8004c04 <heating_scheduling+0x54>
			if (RTC_in_seconds > time_intervals[0] && RTC_in_seconds < time_intervals[1]){
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <heating_scheduling+0x54>
 8004c00:	428b      	cmp	r3, r1
 8004c02:	d31a      	bcc.n	8004c3a <heating_scheduling+0x8a>
		else if( (time_intervals[3] - time_intervals[2]) != 0 ){	// overlapping
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <heating_scheduling+0xa4>)
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d007      	beq.n	8004c1e <heating_scheduling+0x6e>
			if( !(RTC_in_seconds>time_intervals[3] && RTC_in_seconds< time_intervals[2] )){
 8004c0e:	4910      	ldr	r1, [pc, #64]	; (8004c50 <heating_scheduling+0xa0>)
 8004c10:	6809      	ldr	r1, [r1, #0]
 8004c12:	428a      	cmp	r2, r1
 8004c14:	d201      	bcs.n	8004c1a <heating_scheduling+0x6a>
 8004c16:	428b      	cmp	r3, r1
 8004c18:	d801      	bhi.n	8004c1e <heating_scheduling+0x6e>
				heating_control();
 8004c1a:	f7ff ff29 	bl	8004a70 <heating_control>
		else if( (time_intervals[5] - time_intervals[4] ) != 0){	// overlapping
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <heating_scheduling+0xa4>)
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d0c8      	beq.n	8004bba <heating_scheduling+0xa>
			if( !(RTC_in_seconds>time_intervals[5] && RTC_in_seconds< time_intervals[4] )){
 8004c28:	4909      	ldr	r1, [pc, #36]	; (8004c50 <heating_scheduling+0xa0>)
 8004c2a:	6809      	ldr	r1, [r1, #0]
 8004c2c:	428a      	cmp	r2, r1
 8004c2e:	d201      	bcs.n	8004c34 <heating_scheduling+0x84>
 8004c30:	428b      	cmp	r3, r1
 8004c32:	d8c2      	bhi.n	8004bba <heating_scheduling+0xa>
				heating_control();
 8004c34:	f7ff ff1c 	bl	8004a70 <heating_control>
}
 8004c38:	e7bf      	b.n	8004bba <heating_scheduling+0xa>
				heating_control();
 8004c3a:	f7ff ff19 	bl	8004a70 <heating_control>
 8004c3e:	e7e1      	b.n	8004c04 <heating_scheduling+0x54>
 8004c40:	20000280 	.word	0x20000280
 8004c44:	200002fc 	.word	0x200002fc
 8004c48:	200004b0 	.word	0x200004b0
 8004c4c:	2000028c 	.word	0x2000028c
 8004c50:	20000254 	.word	0x20000254
 8004c54:	200005b0 	.word	0x200005b0

08004c58 <init_iqs263>:
extern I2C_HandleTypeDef hi2c1;




int init_iqs263(){
 8004c58:	b500      	push	{lr}
 8004c5a:	b087      	sub	sp, #28
	// READING DEVICE INFORMATION
//	 data_buffer[0] = SYSTEM_FLAGS_VAL;
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004c5c:	2110      	movs	r1, #16
 8004c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c62:	f7fd f915 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004c66:	2801      	cmp	r0, #1
 8004c68:	d0f8      	beq.n	8004c5c <init_iqs263+0x4>
	 uint8_t sysflag_byte[] = {0};
 8004c6a:	ab06      	add	r3, sp, #24
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f803 2d04 	strb.w	r2, [r3, #-4]!
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, (uint8_t)SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  sysflag_byte, 1,50);
 8004c72:	2232      	movs	r2, #50	; 0x32
 8004c74:	9202      	str	r2, [sp, #8]
 8004c76:	2201      	movs	r2, #1
 8004c78:	9201      	str	r2, [sp, #4]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	2188      	movs	r1, #136	; 0x88
 8004c80:	48c6      	ldr	r0, [pc, #792]	; (8004f9c <init_iqs263+0x344>)
 8004c82:	f7fd fb1d 	bl	80022c0 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004c86:	48c5      	ldr	r0, [pc, #788]	; (8004f9c <init_iqs263+0x344>)
 8004c88:	f7fd ffab 	bl	8002be2 <HAL_I2C_GetState>
 8004c8c:	2820      	cmp	r0, #32
 8004c8e:	d1fa      	bne.n	8004c86 <init_iqs263+0x2e>

	 	HAL_Delay(42);
 8004c90:	202a      	movs	r0, #42	; 0x2a
 8004c92:	f7fc f8e7 	bl	8000e64 <HAL_Delay>
	    // Set active channels
	 data_buffer[0] = ACTIVE_CHS;
 8004c96:	220f      	movs	r2, #15
 8004c98:	4bc1      	ldr	r3, [pc, #772]	; (8004fa0 <init_iqs263+0x348>)
 8004c9a:	701a      	strb	r2, [r3, #0]
	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004c9c:	2110      	movs	r1, #16
 8004c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ca2:	f7fd f8f5 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004ca6:	2801      	cmp	r0, #1
 8004ca8:	d0f8      	beq.n	8004c9c <init_iqs263+0x44>
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, ACTIVE_CHANNELS, I2C_MEMADD_SIZE_8BIT,  data_buffer, 1,50);
 8004caa:	2332      	movs	r3, #50	; 0x32
 8004cac:	9302      	str	r3, [sp, #8]
 8004cae:	2301      	movs	r3, #1
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	4abb      	ldr	r2, [pc, #748]	; (8004fa0 <init_iqs263+0x348>)
 8004cb4:	9200      	str	r2, [sp, #0]
 8004cb6:	220d      	movs	r2, #13
 8004cb8:	2188      	movs	r1, #136	; 0x88
 8004cba:	48b8      	ldr	r0, [pc, #736]	; (8004f9c <init_iqs263+0x344>)
 8004cbc:	f7fd fb00 	bl	80022c0 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004cc0:	48b6      	ldr	r0, [pc, #728]	; (8004f9c <init_iqs263+0x344>)
 8004cc2:	f7fd ff8e 	bl	8002be2 <HAL_I2C_GetState>
 8004cc6:	2820      	cmp	r0, #32
 8004cc8:	d1fa      	bne.n	8004cc0 <init_iqs263+0x68>
	 HAL_Delay(42);
 8004cca:	202a      	movs	r0, #42	; 0x2a
 8004ccc:	f7fc f8ca 	bl	8000e64 <HAL_Delay>
	 // Setup touch and prox thresholds for each channel
	 data_buffer[0] = PROX_THRESHOLD;
 8004cd0:	4bb3      	ldr	r3, [pc, #716]	; (8004fa0 <init_iqs263+0x348>)
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	701a      	strb	r2, [r3, #0]
	 data_buffer[1] = TOUCH_THRESHOLD_CH1;
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	705a      	strb	r2, [r3, #1]
	 data_buffer[2] = TOUCH_THRESHOLD_CH2;
 8004cda:	709a      	strb	r2, [r3, #2]
	 data_buffer[3] = TOUCH_THRESHOLD_CH3;
 8004cdc:	70da      	strb	r2, [r3, #3]
	 data_buffer[4] = MOVEMENT_THRESHOLD;
 8004cde:	2203      	movs	r2, #3
 8004ce0:	711a      	strb	r2, [r3, #4]
	 data_buffer[5] = RESEED_BLOCK;
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	715a      	strb	r2, [r3, #5]
	 data_buffer[6] = HALT_TIME;
 8004ce6:	2214      	movs	r2, #20
 8004ce8:	719a      	strb	r2, [r3, #6]
	 data_buffer[7] = I2C_TIMEOUT;
 8004cea:	2204      	movs	r2, #4
 8004cec:	71da      	strb	r2, [r3, #7]

	 while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004cee:	2110      	movs	r1, #16
 8004cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cf4:	f7fd f8cc 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004cf8:	2801      	cmp	r0, #1
 8004cfa:	d0f8      	beq.n	8004cee <init_iqs263+0x96>
	 HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, THRESHOLDS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 8,50);
 8004cfc:	2332      	movs	r3, #50	; 0x32
 8004cfe:	9302      	str	r3, [sp, #8]
 8004d00:	2308      	movs	r3, #8
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	4ba6      	ldr	r3, [pc, #664]	; (8004fa0 <init_iqs263+0x348>)
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	2301      	movs	r3, #1
 8004d0a:	220a      	movs	r2, #10
 8004d0c:	2188      	movs	r1, #136	; 0x88
 8004d0e:	48a3      	ldr	r0, [pc, #652]	; (8004f9c <init_iqs263+0x344>)
 8004d10:	f7fd fad6 	bl	80022c0 <HAL_I2C_Mem_Write>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d14:	48a1      	ldr	r0, [pc, #644]	; (8004f9c <init_iqs263+0x344>)
 8004d16:	f7fd ff64 	bl	8002be2 <HAL_I2C_GetState>
 8004d1a:	2820      	cmp	r0, #32
 8004d1c:	d1fa      	bne.n	8004d14 <init_iqs263+0xbc>
	 HAL_Delay(42);
 8004d1e:	202a      	movs	r0, #42	; 0x2a
 8004d20:	f7fc f8a0 	bl	8000e64 <HAL_Delay>

	// Set the ATI Targets (Target Counts)
	data_buffer[0] = ATI_TARGET_TOUCH;
 8004d24:	4b9e      	ldr	r3, [pc, #632]	; (8004fa0 <init_iqs263+0x348>)
 8004d26:	2230      	movs	r2, #48	; 0x30
 8004d28:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = ATI_TARGET_PROX;
 8004d2a:	2240      	movs	r2, #64	; 0x40
 8004d2c:	705a      	strb	r2, [r3, #1]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004d2e:	2110      	movs	r1, #16
 8004d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d34:	f7fd f8ac 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004d38:	2801      	cmp	r0, #1
 8004d3a:	d0f8      	beq.n	8004d2e <init_iqs263+0xd6>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8004d3c:	2332      	movs	r3, #50	; 0x32
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	2302      	movs	r3, #2
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	4b96      	ldr	r3, [pc, #600]	; (8004fa0 <init_iqs263+0x348>)
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2301      	movs	r3, #1
 8004d4a:	220b      	movs	r2, #11
 8004d4c:	2188      	movs	r1, #136	; 0x88
 8004d4e:	4893      	ldr	r0, [pc, #588]	; (8004f9c <init_iqs263+0x344>)
 8004d50:	f7fd fab6 	bl	80022c0 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d54:	4891      	ldr	r0, [pc, #580]	; (8004f9c <init_iqs263+0x344>)
 8004d56:	f7fd ff44 	bl	8002be2 <HAL_I2C_GetState>
 8004d5a:	2820      	cmp	r0, #32
 8004d5c:	d1fa      	bne.n	8004d54 <init_iqs263+0xfc>
	HAL_Delay(42);
 8004d5e:	202a      	movs	r0, #42	; 0x2a
 8004d60:	f7fc f880 	bl	8000e64 <HAL_Delay>
	// Set the BASE value for each channel
	data_buffer[0] = MULTIPLIERS_CH0;
 8004d64:	4b8e      	ldr	r3, [pc, #568]	; (8004fa0 <init_iqs263+0x348>)
 8004d66:	2208      	movs	r2, #8
 8004d68:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = MULTIPLIERS_CH1;
 8004d6a:	705a      	strb	r2, [r3, #1]
	data_buffer[2] = MULTIPLIERS_CH2;
 8004d6c:	709a      	strb	r2, [r3, #2]
	data_buffer[3] = MULTIPLIERS_CH3;
 8004d6e:	70da      	strb	r2, [r3, #3]

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004d70:	2110      	movs	r1, #16
 8004d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d76:	f7fd f88b 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004d7a:	2801      	cmp	r0, #1
 8004d7c:	d0f8      	beq.n	8004d70 <init_iqs263+0x118>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, MULTIPLIERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8004d7e:	2332      	movs	r3, #50	; 0x32
 8004d80:	9302      	str	r3, [sp, #8]
 8004d82:	2304      	movs	r3, #4
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	4b86      	ldr	r3, [pc, #536]	; (8004fa0 <init_iqs263+0x348>)
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	2188      	movs	r1, #136	; 0x88
 8004d90:	4882      	ldr	r0, [pc, #520]	; (8004f9c <init_iqs263+0x344>)
 8004d92:	f7fd fa95 	bl	80022c0 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004d96:	4881      	ldr	r0, [pc, #516]	; (8004f9c <init_iqs263+0x344>)
 8004d98:	f7fd ff23 	bl	8002be2 <HAL_I2C_GetState>
 8004d9c:	2820      	cmp	r0, #32
 8004d9e:	d1fa      	bne.n	8004d96 <init_iqs263+0x13e>
	HAL_Delay(42);
 8004da0:	202a      	movs	r0, #42	; 0x2a
 8004da2:	f7fc f85f 	bl	8000e64 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004da6:	2110      	movs	r1, #16
 8004da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dac:	f7fd f870 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004db0:	2801      	cmp	r0, #1
 8004db2:	d0f8      	beq.n	8004da6 <init_iqs263+0x14e>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004db4:	2332      	movs	r3, #50	; 0x32
 8004db6:	9302      	str	r3, [sp, #8]
 8004db8:	2305      	movs	r3, #5
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	4b78      	ldr	r3, [pc, #480]	; (8004fa0 <init_iqs263+0x348>)
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	2209      	movs	r2, #9
 8004dc4:	2188      	movs	r1, #136	; 0x88
 8004dc6:	4875      	ldr	r0, [pc, #468]	; (8004f9c <init_iqs263+0x344>)
 8004dc8:	f7fd fb60 	bl	800248c <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004dcc:	4873      	ldr	r0, [pc, #460]	; (8004f9c <init_iqs263+0x344>)
 8004dce:	f7fd ff08 	bl	8002be2 <HAL_I2C_GetState>
 8004dd2:	2820      	cmp	r0, #32
 8004dd4:	d1fa      	bne.n	8004dcc <init_iqs263+0x174>
	HAL_Delay(42);
 8004dd6:	202a      	movs	r0, #42	; 0x2a
 8004dd8:	f7fc f844 	bl	8000e64 <HAL_Delay>
	// Setup prox settings
//	data_buffer[0] = 0;
	data_buffer[0] = PROXSETTINGS0_VAL;
 8004ddc:	4b70      	ldr	r3, [pc, #448]	; (8004fa0 <init_iqs263+0x348>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = PROXSETTINGS1_VAL;
 8004de2:	211d      	movs	r1, #29
 8004de4:	7059      	strb	r1, [r3, #1]
//	data_buffer[2] = 8;
	data_buffer[2] = PROXSETTINGS2_VAL;
 8004de6:	2104      	movs	r1, #4
 8004de8:	7099      	strb	r1, [r3, #2]
	data_buffer[3] = PROXSETTINGS3_VAL;
 8004dea:	70da      	strb	r2, [r3, #3]
	data_buffer[4] = EVENT_MASK_VAL;
 8004dec:	711a      	strb	r2, [r3, #4]


	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004dee:	2110      	movs	r1, #16
 8004df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004df4:	f7fd f84c 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004df8:	2801      	cmp	r0, #1
 8004dfa:	d0f8      	beq.n	8004dee <init_iqs263+0x196>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004dfc:	2332      	movs	r3, #50	; 0x32
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	2305      	movs	r3, #5
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	4b66      	ldr	r3, [pc, #408]	; (8004fa0 <init_iqs263+0x348>)
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	2301      	movs	r3, #1
 8004e0a:	2209      	movs	r2, #9
 8004e0c:	2188      	movs	r1, #136	; 0x88
 8004e0e:	4863      	ldr	r0, [pc, #396]	; (8004f9c <init_iqs263+0x344>)
 8004e10:	f7fd fa56 	bl	80022c0 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e14:	4861      	ldr	r0, [pc, #388]	; (8004f9c <init_iqs263+0x344>)
 8004e16:	f7fd fee4 	bl	8002be2 <HAL_I2C_GetState>
 8004e1a:	2820      	cmp	r0, #32
 8004e1c:	d1fa      	bne.n	8004e14 <init_iqs263+0x1bc>
	HAL_Delay(42);
 8004e1e:	202a      	movs	r0, #42	; 0x2a
 8004e20:	f7fc f820 	bl	8000e64 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004e24:	2110      	movs	r1, #16
 8004e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e2a:	f7fd f831 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004e2e:	2801      	cmp	r0, #1
 8004e30:	d0f8      	beq.n	8004e24 <init_iqs263+0x1cc>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 5,50);
 8004e32:	2332      	movs	r3, #50	; 0x32
 8004e34:	9302      	str	r3, [sp, #8]
 8004e36:	2305      	movs	r3, #5
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	4b59      	ldr	r3, [pc, #356]	; (8004fa0 <init_iqs263+0x348>)
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	2209      	movs	r2, #9
 8004e42:	2188      	movs	r1, #136	; 0x88
 8004e44:	4855      	ldr	r0, [pc, #340]	; (8004f9c <init_iqs263+0x344>)
 8004e46:	f7fd fb21 	bl	800248c <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e4a:	4854      	ldr	r0, [pc, #336]	; (8004f9c <init_iqs263+0x344>)
 8004e4c:	f7fd fec9 	bl	8002be2 <HAL_I2C_GetState>
 8004e50:	2820      	cmp	r0, #32
 8004e52:	d1fa      	bne.n	8004e4a <init_iqs263+0x1f2>
	HAL_Delay(42);
 8004e54:	202a      	movs	r0, #42	; 0x2a
 8004e56:	f7fc f805 	bl	8000e64 <HAL_Delay>

    // Setup Compensation (PCC)
    data_buffer[0] = COMPENSATION_CH0;
 8004e5a:	4b51      	ldr	r3, [pc, #324]	; (8004fa0 <init_iqs263+0x348>)
 8004e5c:	2251      	movs	r2, #81	; 0x51
 8004e5e:	701a      	strb	r2, [r3, #0]
    data_buffer[1] = COMPENSATION_CH1;
 8004e60:	2249      	movs	r2, #73	; 0x49
 8004e62:	705a      	strb	r2, [r3, #1]
    data_buffer[2] = COMPENSATION_CH2;
 8004e64:	214a      	movs	r1, #74	; 0x4a
 8004e66:	7099      	strb	r1, [r3, #2]
    data_buffer[3] = COMPENSATION_CH3;
 8004e68:	70da      	strb	r2, [r3, #3]

    while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004e6a:	2110      	movs	r1, #16
 8004e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e70:	f7fd f80e 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004e74:	2801      	cmp	r0, #1
 8004e76:	d0f8      	beq.n	8004e6a <init_iqs263+0x212>
    HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, COMPENSATION, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 4,50);
 8004e78:	2332      	movs	r3, #50	; 0x32
 8004e7a:	9302      	str	r3, [sp, #8]
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	4b47      	ldr	r3, [pc, #284]	; (8004fa0 <init_iqs263+0x348>)
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2301      	movs	r3, #1
 8004e86:	2208      	movs	r2, #8
 8004e88:	2188      	movs	r1, #136	; 0x88
 8004e8a:	4844      	ldr	r0, [pc, #272]	; (8004f9c <init_iqs263+0x344>)
 8004e8c:	f7fd fa18 	bl	80022c0 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004e90:	4842      	ldr	r0, [pc, #264]	; (8004f9c <init_iqs263+0x344>)
 8004e92:	f7fd fea6 	bl	8002be2 <HAL_I2C_GetState>
 8004e96:	2820      	cmp	r0, #32
 8004e98:	d1fa      	bne.n	8004e90 <init_iqs263+0x238>
	HAL_Delay(42);
 8004e9a:	202a      	movs	r0, #42	; 0x2a
 8004e9c:	f7fb ffe2 	bl	8000e64 <HAL_Delay>

	// Set timings on the IQS263
	data_buffer[0] = LOW_POWER;
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4b3f      	ldr	r3, [pc, #252]	; (8004fa0 <init_iqs263+0x348>)
 8004ea4:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004ea6:	2110      	movs	r1, #16
 8004ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eac:	f7fc fff0 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004eb0:	2801      	cmp	r0, #1
 8004eb2:	d0f8      	beq.n	8004ea6 <init_iqs263+0x24e>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, TIMINGS_AND_TARGETS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004eb4:	2332      	movs	r3, #50	; 0x32
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	4a38      	ldr	r2, [pc, #224]	; (8004fa0 <init_iqs263+0x348>)
 8004ebe:	9200      	str	r2, [sp, #0]
 8004ec0:	220b      	movs	r2, #11
 8004ec2:	2188      	movs	r1, #136	; 0x88
 8004ec4:	4835      	ldr	r0, [pc, #212]	; (8004f9c <init_iqs263+0x344>)
 8004ec6:	f7fd f9fb 	bl	80022c0 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004eca:	4834      	ldr	r0, [pc, #208]	; (8004f9c <init_iqs263+0x344>)
 8004ecc:	f7fd fe89 	bl	8002be2 <HAL_I2C_GetState>
 8004ed0:	2820      	cmp	r0, #32
 8004ed2:	d1fa      	bne.n	8004eca <init_iqs263+0x272>
	HAL_Delay(42);
 8004ed4:	202a      	movs	r0, #42	; 0x2a
 8004ed6:	f7fb ffc5 	bl	8000e64 <HAL_Delay>
	// Set gesture timers on IQS263
	data_buffer[0] = TAP_TIMER;
 8004eda:	4b31      	ldr	r3, [pc, #196]	; (8004fa0 <init_iqs263+0x348>)
 8004edc:	2205      	movs	r2, #5
 8004ede:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = FLICK_TIMER;
 8004ee0:	2251      	movs	r2, #81	; 0x51
 8004ee2:	705a      	strb	r2, [r3, #1]
	data_buffer[2] = FLICK_THRESHOLD;
 8004ee4:	2233      	movs	r2, #51	; 0x33
 8004ee6:	709a      	strb	r2, [r3, #2]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004ee8:	2110      	movs	r1, #16
 8004eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eee:	f7fc ffcf 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004ef2:	2801      	cmp	r0, #1
 8004ef4:	d0f8      	beq.n	8004ee8 <init_iqs263+0x290>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, GESTURE_TIMERS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 3,50);
 8004ef6:	2332      	movs	r3, #50	; 0x32
 8004ef8:	9302      	str	r3, [sp, #8]
 8004efa:	2303      	movs	r3, #3
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	4b28      	ldr	r3, [pc, #160]	; (8004fa0 <init_iqs263+0x348>)
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2301      	movs	r3, #1
 8004f04:	220c      	movs	r2, #12
 8004f06:	2188      	movs	r1, #136	; 0x88
 8004f08:	4824      	ldr	r0, [pc, #144]	; (8004f9c <init_iqs263+0x344>)
 8004f0a:	f7fd f9d9 	bl	80022c0 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004f0e:	4823      	ldr	r0, [pc, #140]	; (8004f9c <init_iqs263+0x344>)
 8004f10:	f7fd fe67 	bl	8002be2 <HAL_I2C_GetState>
 8004f14:	2820      	cmp	r0, #32
 8004f16:	d1fa      	bne.n	8004f0e <init_iqs263+0x2b6>
	HAL_Delay(42);
 8004f18:	202a      	movs	r0, #42	; 0x2a
 8004f1a:	f7fb ffa3 	bl	8000e64 <HAL_Delay>

	// Redo ati
	data_buffer[0] = 0x10;
 8004f1e:	2210      	movs	r2, #16
 8004f20:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <init_iqs263+0x348>)
 8004f22:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004f24:	2110      	movs	r1, #16
 8004f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f2a:	f7fc ffb1 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004f2e:	2801      	cmp	r0, #1
 8004f30:	d0f8      	beq.n	8004f24 <init_iqs263+0x2cc>
	HAL_I2C_Mem_Write( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004f32:	2332      	movs	r3, #50	; 0x32
 8004f34:	9302      	str	r3, [sp, #8]
 8004f36:	2301      	movs	r3, #1
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <init_iqs263+0x348>)
 8004f3c:	9200      	str	r2, [sp, #0]
 8004f3e:	2209      	movs	r2, #9
 8004f40:	2188      	movs	r1, #136	; 0x88
 8004f42:	4816      	ldr	r0, [pc, #88]	; (8004f9c <init_iqs263+0x344>)
 8004f44:	f7fd f9bc 	bl	80022c0 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004f48:	4814      	ldr	r0, [pc, #80]	; (8004f9c <init_iqs263+0x344>)
 8004f4a:	f7fd fe4a 	bl	8002be2 <HAL_I2C_GetState>
 8004f4e:	2820      	cmp	r0, #32
 8004f50:	d1fa      	bne.n	8004f48 <init_iqs263+0x2f0>
	HAL_Delay(42);
 8004f52:	202a      	movs	r0, #42	; 0x2a
 8004f54:	f7fb ff86 	bl	8000e64 <HAL_Delay>
	do
	    {
			HAL_Delay(10);
 8004f58:	200a      	movs	r0, #10
 8004f5a:	f7fb ff83 	bl	8000e64 <HAL_Delay>
	        while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004f5e:	2110      	movs	r1, #16
 8004f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f64:	f7fc ff94 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004f68:	2801      	cmp	r0, #1
 8004f6a:	d0f8      	beq.n	8004f5e <init_iqs263+0x306>
	        HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, SYS_FLAGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 1,50);
 8004f6c:	2332      	movs	r3, #50	; 0x32
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	2201      	movs	r2, #1
 8004f72:	9201      	str	r2, [sp, #4]
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <init_iqs263+0x348>)
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	2188      	movs	r1, #136	; 0x88
 8004f7c:	4807      	ldr	r0, [pc, #28]	; (8004f9c <init_iqs263+0x344>)
 8004f7e:	f7fd fa85 	bl	800248c <HAL_I2C_Mem_Read>
	        while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004f82:	4806      	ldr	r0, [pc, #24]	; (8004f9c <init_iqs263+0x344>)
 8004f84:	f7fd fe2d 	bl	8002be2 <HAL_I2C_GetState>
 8004f88:	2820      	cmp	r0, #32
 8004f8a:	d1fa      	bne.n	8004f82 <init_iqs263+0x32a>
	        HAL_Delay(42);
 8004f8c:	202a      	movs	r0, #42	; 0x2a
 8004f8e:	f7fb ff69 	bl	8000e64 <HAL_Delay>
	    }
	    while ((data_buffer[0] & 0b00000100) == 0b00000100);
 8004f92:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <init_iqs263+0x348>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	f013 0f04 	tst.w	r3, #4
 8004f9a:	e003      	b.n	8004fa4 <init_iqs263+0x34c>
 8004f9c:	200003ac 	.word	0x200003ac
 8004fa0:	200005dc 	.word	0x200005dc
 8004fa4:	d1d8      	bne.n	8004f58 <init_iqs263+0x300>

	// read the error bit to determine if ATI error occured
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){}; // Waiting for device
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fac:	f7fc ff70 	bl	8001e90 <HAL_GPIO_ReadPin>
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d0f8      	beq.n	8004fa6 <init_iqs263+0x34e>
	HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, PROX_SETTINGS, I2C_MEMADD_SIZE_8BIT,  &data_buffer[0], 2,50);
 8004fb4:	2332      	movs	r3, #50	; 0x32
 8004fb6:	9302      	str	r3, [sp, #8]
 8004fb8:	2302      	movs	r3, #2
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <init_iqs263+0x39c>)
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	2209      	movs	r2, #9
 8004fc4:	2188      	movs	r1, #136	; 0x88
 8004fc6:	480c      	ldr	r0, [pc, #48]	; (8004ff8 <init_iqs263+0x3a0>)
 8004fc8:	f7fd fa60 	bl	800248c <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){};
 8004fcc:	480a      	ldr	r0, [pc, #40]	; (8004ff8 <init_iqs263+0x3a0>)
 8004fce:	f7fd fe08 	bl	8002be2 <HAL_I2C_GetState>
 8004fd2:	2820      	cmp	r0, #32
 8004fd4:	d1fa      	bne.n	8004fcc <init_iqs263+0x374>
	HAL_Delay(42);
 8004fd6:	202a      	movs	r0, #42	; 0x2a
 8004fd8:	f7fb ff44 	bl	8000e64 <HAL_Delay>
	if ( (data_buffer[1] & 0x02) == 0x02){
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <init_iqs263+0x39c>)
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	f013 0f02 	tst.w	r3, #2
 8004fe4:	d103      	bne.n	8004fee <init_iqs263+0x396>
		return -1;
	}
	return 1;
 8004fe6:	2001      	movs	r0, #1
}
 8004fe8:	b007      	add	sp, #28
 8004fea:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
 8004fee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff2:	e7f9      	b.n	8004fe8 <init_iqs263+0x390>
 8004ff4:	200005dc 	.word	0x200005dc
 8004ff8:	200003ac 	.word	0x200003ac

08004ffc <handleEvents>:

void handleEvents(void){
 8004ffc:	b510      	push	{r4, lr}
 8004ffe:	b084      	sub	sp, #16


		display_set_temp = 0;
 8005000:	2200      	movs	r2, #0
 8005002:	4b25      	ldr	r3, [pc, #148]	; (8005098 <handleEvents+0x9c>)
 8005004:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){};
 8005006:	2110      	movs	r1, #16
 8005008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800500c:	f7fc ff40 	bl	8001e90 <HAL_GPIO_ReadPin>
 8005010:	2801      	cmp	r0, #1
 8005012:	d0f8      	beq.n	8005006 <handleEvents+0xa>
		HAL_I2C_Mem_Read( &hi2c1, IQS263_ADD, 0x03, I2C_MEMADD_SIZE_8BIT,  &recv_buffer[2], 1,10);
 8005014:	230a      	movs	r3, #10
 8005016:	9302      	str	r3, [sp, #8]
 8005018:	2301      	movs	r3, #1
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	4c1f      	ldr	r4, [pc, #124]	; (800509c <handleEvents+0xa0>)
 800501e:	9400      	str	r4, [sp, #0]
 8005020:	2203      	movs	r2, #3
 8005022:	2188      	movs	r1, #136	; 0x88
 8005024:	481e      	ldr	r0, [pc, #120]	; (80050a0 <handleEvents+0xa4>)
 8005026:	f7fd fa31 	bl	800248c <HAL_I2C_Mem_Read>

			  // do something

		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 800502a:	7823      	ldrb	r3, [r4, #0]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d008      	beq.n	8005042 <handleEvents+0x46>
				*set_temp -= 1;
				display_set_temp = 1;
				touch_flag = 1;
			}
		}
		else if(recv_buffer[2]== 0x05 && touch_flag == 0)	// middle position on slider
 8005030:	2b05      	cmp	r3, #5
 8005032:	d017      	beq.n	8005064 <handleEvents+0x68>
		{
			display_set_temp = 1;
		}


		else if (recv_buffer[2]== 0x09 && touch_flag == 0)	// right most position on slider
 8005034:	2b09      	cmp	r3, #9
 8005036:	d01d      	beq.n	8005074 <handleEvents+0x78>
				display_set_temp = 1;
				touch_flag = 1;
			}
		}
		else{
			display_set_temp = 0;
 8005038:	2200      	movs	r2, #0
 800503a:	4b17      	ldr	r3, [pc, #92]	; (8005098 <handleEvents+0x9c>)
 800503c:	701a      	strb	r2, [r3, #0]
		}
}
 800503e:	b004      	add	sp, #16
 8005040:	bd10      	pop	{r4, pc}
		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 8005042:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <handleEvents+0xa8>)
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	2a00      	cmp	r2, #0
 8005048:	d1f2      	bne.n	8005030 <handleEvents+0x34>
			if(*set_temp - 1 >= 0 ){
 800504a:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <handleEvents+0xac>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	7813      	ldrb	r3, [r2, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d4f4      	bmi.n	800503e <handleEvents+0x42>
				*set_temp -= 1;
 8005054:	3b01      	subs	r3, #1
 8005056:	7013      	strb	r3, [r2, #0]
				display_set_temp = 1;
 8005058:	2301      	movs	r3, #1
 800505a:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <handleEvents+0x9c>)
 800505c:	7013      	strb	r3, [r2, #0]
				touch_flag = 1;
 800505e:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <handleEvents+0xa8>)
 8005060:	7013      	strb	r3, [r2, #0]
 8005062:	e7ec      	b.n	800503e <handleEvents+0x42>
		else if(recv_buffer[2]== 0x05 && touch_flag == 0)	// middle position on slider
 8005064:	4a0f      	ldr	r2, [pc, #60]	; (80050a4 <handleEvents+0xa8>)
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	2a00      	cmp	r2, #0
 800506a:	d1e3      	bne.n	8005034 <handleEvents+0x38>
			display_set_temp = 1;
 800506c:	2201      	movs	r2, #1
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <handleEvents+0x9c>)
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	e7e4      	b.n	800503e <handleEvents+0x42>
		else if (recv_buffer[2]== 0x09 && touch_flag == 0)	// right most position on slider
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <handleEvents+0xa8>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1dd      	bne.n	8005038 <handleEvents+0x3c>
			if(*set_temp +1 <= 100){
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <handleEvents+0xac>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	7813      	ldrb	r3, [r2, #0]
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	2964      	cmp	r1, #100	; 0x64
 8005086:	dcda      	bgt.n	800503e <handleEvents+0x42>
				*set_temp += 1;
 8005088:	7011      	strb	r1, [r2, #0]
				display_set_temp = 1;
 800508a:	2301      	movs	r3, #1
 800508c:	4a02      	ldr	r2, [pc, #8]	; (8005098 <handleEvents+0x9c>)
 800508e:	7013      	strb	r3, [r2, #0]
				touch_flag = 1;
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <handleEvents+0xa8>)
 8005092:	7013      	strb	r3, [r2, #0]
 8005094:	e7d3      	b.n	800503e <handleEvents+0x42>
 8005096:	bf00      	nop
 8005098:	20000290 	.word	0x20000290
 800509c:	200005ca 	.word	0x200005ca
 80050a0:	200003ac 	.word	0x200003ac
 80050a4:	20000048 	.word	0x20000048
 80050a8:	200002ec 	.word	0x200002ec

080050ac <init_peripherals>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 80050ae:	2201      	movs	r2, #1
 80050b0:	2120      	movs	r1, #32
 80050b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b6:	f7fc fef2 	bl	8001e9e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 80050ba:	2201      	movs	r2, #1
 80050bc:	2180      	movs	r1, #128	; 0x80
 80050be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050c2:	f7fc feec 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 80050c6:	2201      	movs	r2, #1
 80050c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d0:	f7fc fee5 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80050d4:	2201      	movs	r2, #1
 80050d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050de:	f7fc fede 	bl	8001e9e <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80050e2:	4c8f      	ldr	r4, [pc, #572]	; (8005320 <init_peripherals+0x274>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	2108      	movs	r1, #8
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7fc fed8 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80050ee:	2201      	movs	r2, #1
 80050f0:	2110      	movs	r1, #16
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7fc fed3 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80050f8:	2201      	movs	r2, #1
 80050fa:	2120      	movs	r1, #32
 80050fc:	4620      	mov	r0, r4
 80050fe:	f7fc fece 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 8005102:	2201      	movs	r2, #1
 8005104:	2140      	movs	r1, #64	; 0x40
 8005106:	4620      	mov	r0, r4
 8005108:	f7fc fec9 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 800510c:	2201      	movs	r2, #1
 800510e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005112:	4620      	mov	r0, r4
 8005114:	f7fc fec3 	bl	8001e9e <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 8005118:	2201      	movs	r2, #1
 800511a:	2180      	movs	r1, #128	; 0x80
 800511c:	4881      	ldr	r0, [pc, #516]	; (8005324 <init_peripherals+0x278>)
 800511e:	f7fc febe 	bl	8001e9e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 8005122:	2200      	movs	r2, #0
 8005124:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005128:	4620      	mov	r0, r4
 800512a:	f7fc feb8 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 800512e:	2201      	movs	r2, #1
 8005130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005134:	4620      	mov	r0, r4
 8005136:	f7fc feb2 	bl	8001e9e <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 800513a:	200f      	movs	r0, #15
 800513c:	f001 fe68 	bl	8006e10 <malloc>
 8005140:	4b79      	ldr	r3, [pc, #484]	; (8005328 <init_peripherals+0x27c>)
 8005142:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 8005144:	2400      	movs	r4, #0
 8005146:	6004      	str	r4, [r0, #0]
 8005148:	6044      	str	r4, [r0, #4]
 800514a:	6084      	str	r4, [r0, #8]
 800514c:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8005150:	2032      	movs	r0, #50	; 0x32
 8005152:	f001 fe5d 	bl	8006e10 <malloc>
 8005156:	4b75      	ldr	r3, [pc, #468]	; (800532c <init_peripherals+0x280>)
 8005158:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 800515a:	2632      	movs	r6, #50	; 0x32
 800515c:	4632      	mov	r2, r6
 800515e:	4621      	mov	r1, r4
 8005160:	f001 fe69 	bl	8006e36 <memset>

	uart_command = (uint8_t*)malloc(60);
 8005164:	203c      	movs	r0, #60	; 0x3c
 8005166:	f001 fe53 	bl	8006e10 <malloc>
 800516a:	4f71      	ldr	r7, [pc, #452]	; (8005330 <init_peripherals+0x284>)
 800516c:	6038      	str	r0, [r7, #0]
	memset(uart_command, 0x00, 60);
 800516e:	253c      	movs	r5, #60	; 0x3c
 8005170:	462a      	mov	r2, r5
 8005172:	4621      	mov	r1, r4
 8005174:	f001 fe5f 	bl	8006e36 <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 8005178:	4628      	mov	r0, r5
 800517a:	f001 fe49 	bl	8006e10 <malloc>
 800517e:	4b6d      	ldr	r3, [pc, #436]	; (8005334 <init_peripherals+0x288>)
 8005180:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 8005182:	462a      	mov	r2, r5
 8005184:	4621      	mov	r1, r4
 8005186:	6838      	ldr	r0, [r7, #0]
 8005188:	f001 fe55 	bl	8006e36 <memset>



	set_temp = (uint8_t*)malloc(4);
 800518c:	2004      	movs	r0, #4
 800518e:	f001 fe3f 	bl	8006e10 <malloc>
 8005192:	4b69      	ldr	r3, [pc, #420]	; (8005338 <init_peripherals+0x28c>)
 8005194:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 8005196:	6004      	str	r4, [r0, #0]
	*set_temp = 50;
 8005198:	7006      	strb	r6, [r0, #0]
//	segment_val =set_temp;
	//	  memset(segment_val, 0x00, 4);
	segment_val = (char*)malloc(4);
 800519a:	2004      	movs	r0, #4
 800519c:	f001 fe38 	bl	8006e10 <malloc>
 80051a0:	4b66      	ldr	r3, [pc, #408]	; (800533c <init_peripherals+0x290>)
 80051a2:	6018      	str	r0, [r3, #0]
	memset(segment_val, 0x00, 4);
 80051a4:	6004      	str	r4, [r0, #0]
//
	temp_val = (char*)malloc(4);
 80051a6:	2004      	movs	r0, #4
 80051a8:	f001 fe32 	bl	8006e10 <malloc>
 80051ac:	4b64      	ldr	r3, [pc, #400]	; (8005340 <init_peripherals+0x294>)
 80051ae:	6018      	str	r0, [r3, #0]
	memset(temp_val, 0x00, 4);
 80051b0:	6004      	str	r4, [r0, #0]

	ADC1_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 80051b2:	2014      	movs	r0, #20
 80051b4:	f001 fe2c 	bl	8006e10 <malloc>
 80051b8:	4b62      	ldr	r3, [pc, #392]	; (8005344 <init_peripherals+0x298>)
 80051ba:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 5);
 80051bc:	6004      	str	r4, [r0, #0]
 80051be:	7104      	strb	r4, [r0, #4]

	ADC2_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 80051c0:	2014      	movs	r0, #20
 80051c2:	f001 fe25 	bl	8006e10 <malloc>
 80051c6:	4b60      	ldr	r3, [pc, #384]	; (8005348 <init_peripherals+0x29c>)
 80051c8:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 5);
 80051ca:	6004      	str	r4, [r0, #0]
 80051cc:	7104      	strb	r4, [r0, #4]

	voltage_rms =(char*)malloc(3*sizeof(char));
 80051ce:	2003      	movs	r0, #3
 80051d0:	f001 fe1e 	bl	8006e10 <malloc>
 80051d4:	4b5d      	ldr	r3, [pc, #372]	; (800534c <init_peripherals+0x2a0>)
 80051d6:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 80051d8:	8004      	strh	r4, [r0, #0]
 80051da:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 80051dc:	2004      	movs	r0, #4
 80051de:	f001 fe17 	bl	8006e10 <malloc>
 80051e2:	4b5b      	ldr	r3, [pc, #364]	; (8005350 <init_peripherals+0x2a4>)
 80051e4:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 80051e6:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 80051e8:	2014      	movs	r0, #20
 80051ea:	f001 fe11 	bl	8006e10 <malloc>
 80051ee:	4a59      	ldr	r2, [pc, #356]	; (8005354 <init_peripherals+0x2a8>)
 80051f0:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 80051f2:	6004      	str	r4, [r0, #0]
 80051f4:	6044      	str	r4, [r0, #4]
 80051f6:	6084      	str	r4, [r0, #8]
 80051f8:	60c4      	str	r4, [r0, #12]
 80051fa:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 80051fc:	4b56      	ldr	r3, [pc, #344]	; (8005358 <init_peripherals+0x2ac>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4956      	ldr	r1, [pc, #344]	; (800535c <init_peripherals+0x2b0>)
 8005202:	f001 fedd 	bl	8006fc0 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8005206:	2010      	movs	r0, #16
 8005208:	f001 fe02 	bl	8006e10 <malloc>
 800520c:	4b54      	ldr	r3, [pc, #336]	; (8005360 <init_peripherals+0x2b4>)
 800520e:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8005210:	2010      	movs	r0, #16
 8005212:	f001 fdfd 	bl	8006e10 <malloc>
 8005216:	4b53      	ldr	r3, [pc, #332]	; (8005364 <init_peripherals+0x2b8>)
 8005218:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 800521a:	2004      	movs	r0, #4
 800521c:	f001 fdf8 	bl	8006e10 <malloc>
 8005220:	4b51      	ldr	r3, [pc, #324]	; (8005368 <init_peripherals+0x2bc>)
 8005222:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 8005224:	2004      	movs	r0, #4
 8005226:	f001 fdf3 	bl	8006e10 <malloc>
 800522a:	4b50      	ldr	r3, [pc, #320]	; (800536c <init_peripherals+0x2c0>)
 800522c:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 800522e:	4a50      	ldr	r2, [pc, #320]	; (8005370 <init_peripherals+0x2c4>)
 8005230:	4b50      	ldr	r3, [pc, #320]	; (8005374 <init_peripherals+0x2c8>)
 8005232:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 8005234:	4a50      	ldr	r2, [pc, #320]	; (8005378 <init_peripherals+0x2cc>)
 8005236:	4b51      	ldr	r3, [pc, #324]	; (800537c <init_peripherals+0x2d0>)
 8005238:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 800523a:	200f      	movs	r0, #15
 800523c:	f001 fde8 	bl	8006e10 <malloc>
 8005240:	4e4f      	ldr	r6, [pc, #316]	; (8005380 <init_peripherals+0x2d4>)
 8005242:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 8005244:	6004      	str	r4, [r0, #0]
 8005246:	6044      	str	r4, [r0, #4]
 8005248:	6084      	str	r4, [r0, #8]
 800524a:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 800524e:	200f      	movs	r0, #15
 8005250:	f001 fdde 	bl	8006e10 <malloc>
 8005254:	4d4b      	ldr	r5, [pc, #300]	; (8005384 <init_peripherals+0x2d8>)
 8005256:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 8005258:	6004      	str	r4, [r0, #0]
 800525a:	6044      	str	r4, [r0, #4]
 800525c:	6084      	str	r4, [r0, #8]
 800525e:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8005262:	200f      	movs	r0, #15
 8005264:	f001 fdd4 	bl	8006e10 <malloc>
 8005268:	4b47      	ldr	r3, [pc, #284]	; (8005388 <init_peripherals+0x2dc>)
 800526a:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 800526c:	6004      	str	r4, [r0, #0]
 800526e:	6044      	str	r4, [r0, #4]
 8005270:	6084      	str	r4, [r0, #8]
 8005272:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 8005276:	4b45      	ldr	r3, [pc, #276]	; (800538c <init_peripherals+0x2e0>)
 8005278:	6832      	ldr	r2, [r6, #0]
 800527a:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 800527c:	682a      	ldr	r2, [r5, #0]
 800527e:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 8005280:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 8005282:	2014      	movs	r0, #20
 8005284:	f001 fdc4 	bl	8006e10 <malloc>
 8005288:	4b41      	ldr	r3, [pc, #260]	; (8005390 <init_peripherals+0x2e4>)
 800528a:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 800528c:	6004      	str	r4, [r0, #0]
 800528e:	6044      	str	r4, [r0, #4]
 8005290:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 8005292:	4b40      	ldr	r3, [pc, #256]	; (8005394 <init_peripherals+0x2e8>)
 8005294:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	timeOfRTC = malloc(6*sizeof(uint32_t));
 8005296:	2018      	movs	r0, #24
 8005298:	f001 fdba 	bl	8006e10 <malloc>
 800529c:	4e3e      	ldr	r6, [pc, #248]	; (8005398 <init_peripherals+0x2ec>)
 800529e:	6030      	str	r0, [r6, #0]
	memset(timeOfRTC, 0x00, 6);
 80052a0:	6004      	str	r4, [r0, #0]
 80052a2:	8084      	strh	r4, [r0, #4]
//
	timeOfRTC->Hours = 0x0;
 80052a4:	7004      	strb	r4, [r0, #0]
	timeOfRTC->Minutes = 0x0;
 80052a6:	7044      	strb	r4, [r0, #1]
	timeOfRTC->Seconds = 0x0;
 80052a8:	7084      	strb	r4, [r0, #2]
	timeOfRTC->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80052aa:	60c4      	str	r4, [r0, #12]
	timeOfRTC->StoreOperation = RTC_STOREOPERATION_RESET;
 80052ac:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 80052ae:	2004      	movs	r0, #4
 80052b0:	f001 fdae 	bl	8006e10 <malloc>
 80052b4:	4b39      	ldr	r3, [pc, #228]	; (800539c <init_peripherals+0x2f0>)
 80052b6:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 80052b8:	2501      	movs	r5, #1
 80052ba:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 80052bc:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 80052be:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 80052c0:	70c4      	strb	r4, [r0, #3]


//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);

	log_receiced_num = (uint8_t*)malloc(3*sizeof(uint8_t));
 80052c2:	2003      	movs	r0, #3
 80052c4:	f001 fda4 	bl	8006e10 <malloc>
 80052c8:	4b35      	ldr	r3, [pc, #212]	; (80053a0 <init_peripherals+0x2f4>)
 80052ca:	6018      	str	r0, [r3, #0]
	memset(log_receiced_num, 0x00, 3);
 80052cc:	8004      	strh	r4, [r0, #0]
 80052ce:	7084      	strb	r4, [r0, #2]
	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 80052d0:	2046      	movs	r0, #70	; 0x46
 80052d2:	f001 fd9d 	bl	8006e10 <malloc>
 80052d6:	4b33      	ldr	r3, [pc, #204]	; (80053a4 <init_peripherals+0x2f8>)
 80052d8:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 80052da:	2246      	movs	r2, #70	; 0x46
 80052dc:	4621      	mov	r1, r4
 80052de:	f001 fdaa 	bl	8006e36 <memset>


	new_time = malloc(6*sizeof(uint32_t));
 80052e2:	2018      	movs	r0, #24
 80052e4:	f001 fd94 	bl	8006e10 <malloc>
 80052e8:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <init_peripherals+0x2fc>)
 80052ea:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 80052ec:	6004      	str	r4, [r0, #0]
 80052ee:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 80052f0:	2003      	movs	r0, #3
 80052f2:	f001 fd8d 	bl	8006e10 <malloc>
 80052f6:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <init_peripherals+0x300>)
 80052f8:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 80052fa:	8004      	strh	r4, [r0, #0]
 80052fc:	7084      	strb	r4, [r0, #2]

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 80052fe:	2004      	movs	r0, #4
 8005300:	f001 fd86 	bl	8006e10 <malloc>
 8005304:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <init_peripherals+0x304>)
 8005306:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 8005308:	2010      	movs	r0, #16
 800530a:	f001 fd81 	bl	8006e10 <malloc>
 800530e:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <init_peripherals+0x308>)
 8005310:	6018      	str	r0, [r3, #0]

	// get time
	HAL_RTC_GetTime(&hrtc, timeOfRTC, RTC_FORMAT_BCD);
 8005312:	462a      	mov	r2, r5
 8005314:	6831      	ldr	r1, [r6, #0]
 8005316:	4828      	ldr	r0, [pc, #160]	; (80053b8 <init_peripherals+0x30c>)
 8005318:	f7fe fb91 	bl	8003a3e <HAL_RTC_GetTime>
 800531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800531e:	bf00      	nop
 8005320:	48000400 	.word	0x48000400
 8005324:	48000800 	.word	0x48000800
 8005328:	200005a8 	.word	0x200005a8
 800532c:	200002e0 	.word	0x200002e0
 8005330:	20000304 	.word	0x20000304
 8005334:	20000308 	.word	0x20000308
 8005338:	200002ec 	.word	0x200002ec
 800533c:	200002e8 	.word	0x200002e8
 8005340:	200002f8 	.word	0x200002f8
 8005344:	2000024c 	.word	0x2000024c
 8005348:	20000250 	.word	0x20000250
 800534c:	2000031c 	.word	0x2000031c
 8005350:	20000288 	.word	0x20000288
 8005354:	20000300 	.word	0x20000300
 8005358:	20000320 	.word	0x20000320
 800535c:	08007b7c 	.word	0x08007b7c
 8005360:	20000318 	.word	0x20000318
 8005364:	20000284 	.word	0x20000284
 8005368:	2000027c 	.word	0x2000027c
 800536c:	200002a4 	.word	0x200002a4
 8005370:	20000014 	.word	0x20000014
 8005374:	200002b8 	.word	0x200002b8
 8005378:	2000004c 	.word	0x2000004c
 800537c:	20000310 	.word	0x20000310
 8005380:	200002ac 	.word	0x200002ac
 8005384:	200002b0 	.word	0x200002b0
 8005388:	200002b4 	.word	0x200002b4
 800538c:	200005fc 	.word	0x200005fc
 8005390:	200002bc 	.word	0x200002bc
 8005394:	200005d8 	.word	0x200005d8
 8005398:	200002fc 	.word	0x200002fc
 800539c:	2000028c 	.word	0x2000028c
 80053a0:	200002c8 	.word	0x200002c8
 80053a4:	200002a0 	.word	0x200002a0
 80053a8:	200002cc 	.word	0x200002cc
 80053ac:	200002f4 	.word	0x200002f4
 80053b0:	20000298 	.word	0x20000298
 80053b4:	200002d0 	.word	0x200002d0
 80053b8:	200004b0 	.word	0x200004b0

080053bc <liters_pumped>:
// external Variables
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void liters_pumped(){
 80053bc:	b508      	push	{r3, lr}

	if(valve_timer == 5){
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <liters_pumped+0x2c>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d000      	beq.n	80053c8 <liters_pumped+0xc>
 80053c6:	bd08      	pop	{r3, pc}
		pump_flag = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	4a08      	ldr	r2, [pc, #32]	; (80053ec <liters_pumped+0x30>)
 80053cc:	7013      	strb	r3, [r2, #0]
		valve_timer = 0;
 80053ce:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <liters_pumped+0x2c>)
 80053d0:	7013      	strb	r3, [r2, #0]
		water_acc+=100;
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <liters_pumped+0x34>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	3264      	adds	r2, #100	; 0x64
 80053d8:	601a      	str	r2, [r3, #0]
		sprintf(total_water,"%lu", water_acc);
 80053da:	4906      	ldr	r1, [pc, #24]	; (80053f4 <liters_pumped+0x38>)
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <liters_pumped+0x3c>)
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	f001 fdee 	bl	8006fc0 <siprintf>

	}
}
 80053e4:	e7ef      	b.n	80053c6 <liters_pumped+0xa>
 80053e6:	bf00      	nop
 80053e8:	20000314 	.word	0x20000314
 80053ec:	200002d4 	.word	0x200002d4
 80053f0:	20000320 	.word	0x20000320
 80053f4:	08007b7c 	.word	0x08007b7c
 80053f8:	20000300 	.word	0x20000300

080053fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80053fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005402:	4b55      	ldr	r3, [pc, #340]	; (8005558 <MX_GPIO_Init+0x15c>)
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800540a:	615a      	str	r2, [r3, #20]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005412:	9201      	str	r2, [sp, #4]
 8005414:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800541c:	615a      	str	r2, [r3, #20]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005424:	9202      	str	r2, [sp, #8]
 8005426:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800542e:	615a      	str	r2, [r3, #20]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005436:	9203      	str	r2, [sp, #12]
 8005438:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005440:	615a      	str	r2, [r3, #20]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 800544c:	2201      	movs	r2, #1
 800544e:	2112      	movs	r1, #18
 8005450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005454:	f7fc fd23 	bl	8001e9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8005458:	2200      	movs	r2, #0
 800545a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800545e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005462:	f7fc fd1c 	bl	8001e9e <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8005466:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800556c <MX_GPIO_Init+0x170>
 800546a:	2200      	movs	r2, #0
 800546c:	f246 4178 	movw	r1, #25720	; 0x6478
 8005470:	4640      	mov	r0, r8
 8005472:	f7fc fd14 	bl	8001e9e <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8005476:	4e39      	ldr	r6, [pc, #228]	; (800555c <MX_GPIO_Init+0x160>)
 8005478:	2200      	movs	r2, #0
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	4630      	mov	r0, r6
 800547e:	f7fc fd0e 	bl	8001e9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005486:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005488:	4b35      	ldr	r3, [pc, #212]	; (8005560 <MX_GPIO_Init+0x164>)
 800548a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548c:	2400      	movs	r4, #0
 800548e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005490:	a905      	add	r1, sp, #20
 8005492:	4630      	mov	r0, r6
 8005494:	f7fc fc32 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8005498:	2303      	movs	r3, #3
 800549a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800549c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a0:	a905      	add	r1, sp, #20
 80054a2:	4630      	mov	r0, r6
 80054a4:	f7fc fc2a 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 80054a8:	2501      	movs	r5, #1
 80054aa:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80054ac:	4b2d      	ldr	r3, [pc, #180]	; (8005564 <MX_GPIO_Init+0x168>)
 80054ae:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80054b0:	2702      	movs	r7, #2
 80054b2:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 80054b4:	a905      	add	r1, sp, #20
 80054b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ba:	f7fc fc1f 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 80054be:	2312      	movs	r3, #18
 80054c0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80054c2:	2311      	movs	r3, #17
 80054c4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054c6:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ca:	a905      	add	r1, sp, #20
 80054cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054d0:	f7fc fc14 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80054d4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80054d8:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054da:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054de:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e0:	a905      	add	r1, sp, #20
 80054e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054e6:	f7fc fc09 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80054ea:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f0:	a905      	add	r1, sp, #20
 80054f2:	4640      	mov	r0, r8
 80054f4:	f7fc fc02 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80054f8:	f246 4378 	movw	r3, #25720	; 0x6478
 80054fc:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054fe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005500:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005502:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005504:	a905      	add	r1, sp, #20
 8005506:	4640      	mov	r0, r8
 8005508:	f7fc fbf8 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIGGER_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIGGER_Pin;
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005510:	4b15      	ldr	r3, [pc, #84]	; (8005568 <MX_GPIO_Init+0x16c>)
 8005512:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005514:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8005516:	a905      	add	r1, sp, #20
 8005518:	4630      	mov	r0, r6
 800551a:	f7fc fbef 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005522:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005526:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 8005528:	a905      	add	r1, sp, #20
 800552a:	4630      	mov	r0, r6
 800552c:	f7fc fbe6 	bl	8001cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005530:	4622      	mov	r2, r4
 8005532:	4621      	mov	r1, r4
 8005534:	2006      	movs	r0, #6
 8005536:	f7fc f929 	bl	800178c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800553a:	2006      	movs	r0, #6
 800553c:	f7fc f958 	bl	80017f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8005540:	462a      	mov	r2, r5
 8005542:	4621      	mov	r1, r4
 8005544:	2017      	movs	r0, #23
 8005546:	f7fc f921 	bl	800178c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800554a:	2017      	movs	r0, #23
 800554c:	f7fc f950 	bl	80017f0 <HAL_NVIC_EnableIRQ>

}
 8005550:	b00a      	add	sp, #40	; 0x28
 8005552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	48000800 	.word	0x48000800
 8005560:	10110000 	.word	0x10110000
 8005564:	10210000 	.word	0x10210000
 8005568:	10310000 	.word	0x10310000
 800556c:	48000400 	.word	0x48000400

08005570 <MX_DMA_Init>:
{
 8005570:	b500      	push	{lr}
 8005572:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005574:	4b11      	ldr	r3, [pc, #68]	; (80055bc <MX_DMA_Init+0x4c>)
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	615a      	str	r2, [r3, #20]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8005588:	2201      	movs	r2, #1
 800558a:	2100      	movs	r1, #0
 800558c:	200c      	movs	r0, #12
 800558e:	f7fc f8fd 	bl	800178c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005592:	200c      	movs	r0, #12
 8005594:	f7fc f92c 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005598:	4909      	ldr	r1, [pc, #36]	; (80055c0 <MX_DMA_Init+0x50>)
 800559a:	68cb      	ldr	r3, [r1, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <MX_DMA_Init+0x54>)
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80055a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80055a8:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055aa:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ac:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80055b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055b4:	601a      	str	r2, [r3, #0]
}
 80055b6:	b003      	add	sp, #12
 80055b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80055bc:	40021000 	.word	0x40021000
 80055c0:	e000ed00 	.word	0xe000ed00
 80055c4:	e000e100 	.word	0xe000e100

080055c8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80055c8:	e7fe      	b.n	80055c8 <_Error_Handler>
	...

080055cc <MX_USART1_UART_Init>:
{
 80055cc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80055ce:	480c      	ldr	r0, [pc, #48]	; (8005600 <MX_USART1_UART_Init+0x34>)
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <MX_USART1_UART_Init+0x38>)
 80055d2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80055d4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80055d8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055da:	2300      	movs	r3, #0
 80055dc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055de:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055e0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055e2:	220c      	movs	r2, #12
 80055e4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055e6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055e8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055ea:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055ec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055ee:	f7fe fd4e 	bl	800408e <HAL_UART_Init>
 80055f2:	b900      	cbnz	r0, 80055f6 <MX_USART1_UART_Init+0x2a>
 80055f4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80055f6:	f240 1195 	movw	r1, #405	; 0x195
 80055fa:	4803      	ldr	r0, [pc, #12]	; (8005608 <MX_USART1_UART_Init+0x3c>)
 80055fc:	f7ff ffe4 	bl	80055c8 <_Error_Handler>
 8005600:	20000440 	.word	0x20000440
 8005604:	40013800 	.word	0x40013800
 8005608:	08007b80 	.word	0x08007b80

0800560c <MX_ADC2_Init>:
{
 800560c:	b500      	push	{lr}
 800560e:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 8005610:	482d      	ldr	r0, [pc, #180]	; (80056c8 <MX_ADC2_Init+0xbc>)
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <MX_ADC2_Init+0xc0>)
 8005614:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005616:	2300      	movs	r3, #0
 8005618:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800561a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800561c:	2201      	movs	r2, #1
 800561e:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005620:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005622:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005624:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005626:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005628:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 800562a:	2104      	movs	r1, #4
 800562c:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800562e:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005630:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005632:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005634:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005636:	f7fb fce7 	bl	8001008 <HAL_ADC_Init>
 800563a:	bb60      	cbnz	r0, 8005696 <MX_ADC2_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_8;
 800563c:	2308      	movs	r3, #8
 800563e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005640:	2301      	movs	r3, #1
 8005642:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005644:	2300      	movs	r3, #0
 8005646:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8005648:	2207      	movs	r2, #7
 800564a:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800564c:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800564e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005650:	4669      	mov	r1, sp
 8005652:	481d      	ldr	r0, [pc, #116]	; (80056c8 <MX_ADC2_Init+0xbc>)
 8005654:	f7fb fec6 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8005658:	bb08      	cbnz	r0, 800569e <MX_ADC2_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_9;
 800565a:	2309      	movs	r3, #9
 800565c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800565e:	2302      	movs	r3, #2
 8005660:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005662:	4669      	mov	r1, sp
 8005664:	4818      	ldr	r0, [pc, #96]	; (80056c8 <MX_ADC2_Init+0xbc>)
 8005666:	f7fb febd 	bl	80013e4 <HAL_ADC_ConfigChannel>
 800566a:	b9e8      	cbnz	r0, 80056a8 <MX_ADC2_Init+0x9c>
  sConfig.Channel = ADC_CHANNEL_12;
 800566c:	230c      	movs	r3, #12
 800566e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005670:	2303      	movs	r3, #3
 8005672:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005674:	4669      	mov	r1, sp
 8005676:	4814      	ldr	r0, [pc, #80]	; (80056c8 <MX_ADC2_Init+0xbc>)
 8005678:	f7fb feb4 	bl	80013e4 <HAL_ADC_ConfigChannel>
 800567c:	b9c8      	cbnz	r0, 80056b2 <MX_ADC2_Init+0xa6>
  sConfig.Channel = ADC_CHANNEL_13;
 800567e:	230d      	movs	r3, #13
 8005680:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005682:	2304      	movs	r3, #4
 8005684:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005686:	4669      	mov	r1, sp
 8005688:	480f      	ldr	r0, [pc, #60]	; (80056c8 <MX_ADC2_Init+0xbc>)
 800568a:	f7fb feab 	bl	80013e4 <HAL_ADC_ConfigChannel>
 800568e:	b9a8      	cbnz	r0, 80056bc <MX_ADC2_Init+0xb0>
}
 8005690:	b007      	add	sp, #28
 8005692:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8005696:	21fe      	movs	r1, #254	; 0xfe
 8005698:	480d      	ldr	r0, [pc, #52]	; (80056d0 <MX_ADC2_Init+0xc4>)
 800569a:	f7ff ff95 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800569e:	f240 110b 	movw	r1, #267	; 0x10b
 80056a2:	480b      	ldr	r0, [pc, #44]	; (80056d0 <MX_ADC2_Init+0xc4>)
 80056a4:	f7ff ff90 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80056a8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80056ac:	4808      	ldr	r0, [pc, #32]	; (80056d0 <MX_ADC2_Init+0xc4>)
 80056ae:	f7ff ff8b 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80056b2:	f240 111d 	movw	r1, #285	; 0x11d
 80056b6:	4806      	ldr	r0, [pc, #24]	; (80056d0 <MX_ADC2_Init+0xc4>)
 80056b8:	f7ff ff86 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80056bc:	f44f 7193 	mov.w	r1, #294	; 0x126
 80056c0:	4803      	ldr	r0, [pc, #12]	; (80056d0 <MX_ADC2_Init+0xc4>)
 80056c2:	f7ff ff81 	bl	80055c8 <_Error_Handler>
 80056c6:	bf00      	nop
 80056c8:	20000358 	.word	0x20000358
 80056cc:	50000100 	.word	0x50000100
 80056d0:	08007b80 	.word	0x08007b80

080056d4 <MX_RTC_Init>:
{
 80056d4:	b500      	push	{lr}
 80056d6:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 80056d8:	482c      	ldr	r0, [pc, #176]	; (800578c <MX_RTC_Init+0xb8>)
 80056da:	4b2d      	ldr	r3, [pc, #180]	; (8005790 <MX_RTC_Init+0xbc>)
 80056dc:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80056de:	2100      	movs	r1, #0
 80056e0:	f7fe fa8f 	bl	8003c02 <HAL_RTCEx_BKUPRead>
 80056e4:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80056e8:	4298      	cmp	r0, r3
 80056ea:	d037      	beq.n	800575c <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80056ec:	4827      	ldr	r0, [pc, #156]	; (800578c <MX_RTC_Init+0xb8>)
 80056ee:	2300      	movs	r3, #0
 80056f0:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80056f2:	227f      	movs	r2, #127	; 0x7f
 80056f4:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80056f6:	22ff      	movs	r2, #255	; 0xff
 80056f8:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80056fa:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80056fc:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80056fe:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005700:	f7fe f83b 	bl	800377a <HAL_RTC_Init>
 8005704:	bb68      	cbnz	r0, 8005762 <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 8005706:	2300      	movs	r3, #0
 8005708:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 800570c:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8005710:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005714:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005716:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005718:	2201      	movs	r2, #1
 800571a:	a901      	add	r1, sp, #4
 800571c:	481b      	ldr	r0, [pc, #108]	; (800578c <MX_RTC_Init+0xb8>)
 800571e:	f7fe f899 	bl	8003854 <HAL_RTC_SetTime>
 8005722:	bb18      	cbnz	r0, 800576c <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005724:	2201      	movs	r2, #1
 8005726:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800572a:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800572e:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8005732:	2300      	movs	r3, #0
 8005734:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005738:	4669      	mov	r1, sp
 800573a:	4814      	ldr	r0, [pc, #80]	; (800578c <MX_RTC_Init+0xb8>)
 800573c:	f7fe f909 	bl	8003952 <HAL_RTC_SetDate>
 8005740:	b9c8      	cbnz	r0, 8005776 <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8005742:	2200      	movs	r2, #0
 8005744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005748:	4810      	ldr	r0, [pc, #64]	; (800578c <MX_RTC_Init+0xb8>)
 800574a:	f7fe f9c5 	bl	8003ad8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800574e:	b9b8      	cbnz	r0, 8005780 <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8005750:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005754:	2100      	movs	r1, #0
 8005756:	480d      	ldr	r0, [pc, #52]	; (800578c <MX_RTC_Init+0xb8>)
 8005758:	f7fe fa4e 	bl	8003bf8 <HAL_RTCEx_BKUPWrite>
}
 800575c:	b007      	add	sp, #28
 800575e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8005762:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005766:	480b      	ldr	r0, [pc, #44]	; (8005794 <MX_RTC_Init+0xc0>)
 8005768:	f7ff ff2e 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800576c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8005770:	4808      	ldr	r0, [pc, #32]	; (8005794 <MX_RTC_Init+0xc0>)
 8005772:	f7ff ff29 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005776:	f44f 71bb 	mov.w	r1, #374	; 0x176
 800577a:	4806      	ldr	r0, [pc, #24]	; (8005794 <MX_RTC_Init+0xc0>)
 800577c:	f7ff ff24 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005780:	f240 117d 	movw	r1, #381	; 0x17d
 8005784:	4803      	ldr	r0, [pc, #12]	; (8005794 <MX_RTC_Init+0xc0>)
 8005786:	f7ff ff1f 	bl	80055c8 <_Error_Handler>
 800578a:	bf00      	nop
 800578c:	200004b0 	.word	0x200004b0
 8005790:	40002800 	.word	0x40002800
 8005794:	08007b80 	.word	0x08007b80

08005798 <MX_I2C1_Init>:
{
 8005798:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800579a:	4816      	ldr	r0, [pc, #88]	; (80057f4 <MX_I2C1_Init+0x5c>)
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <MX_I2C1_Init+0x60>)
 800579e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80057a0:	f240 230b 	movw	r3, #523	; 0x20b
 80057a4:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057aa:	2201      	movs	r2, #1
 80057ac:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80057ae:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80057b0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80057b2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80057b4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80057b6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80057b8:	f7fc fd24 	bl	8002204 <HAL_I2C_Init>
 80057bc:	b950      	cbnz	r0, 80057d4 <MX_I2C1_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80057be:	2100      	movs	r1, #0
 80057c0:	480c      	ldr	r0, [pc, #48]	; (80057f4 <MX_I2C1_Init+0x5c>)
 80057c2:	f7fd fa11 	bl	8002be8 <HAL_I2CEx_ConfigAnalogFilter>
 80057c6:	b950      	cbnz	r0, 80057de <MX_I2C1_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80057c8:	2100      	movs	r1, #0
 80057ca:	480a      	ldr	r0, [pc, #40]	; (80057f4 <MX_I2C1_Init+0x5c>)
 80057cc:	f7fd fa3a 	bl	8002c44 <HAL_I2CEx_ConfigDigitalFilter>
 80057d0:	b950      	cbnz	r0, 80057e8 <MX_I2C1_Init+0x50>
 80057d2:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80057d4:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80057d8:	4808      	ldr	r0, [pc, #32]	; (80057fc <MX_I2C1_Init+0x64>)
 80057da:	f7ff fef5 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80057de:	f240 1141 	movw	r1, #321	; 0x141
 80057e2:	4806      	ldr	r0, [pc, #24]	; (80057fc <MX_I2C1_Init+0x64>)
 80057e4:	f7ff fef0 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80057e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80057ec:	4803      	ldr	r0, [pc, #12]	; (80057fc <MX_I2C1_Init+0x64>)
 80057ee:	f7ff feeb 	bl	80055c8 <_Error_Handler>
 80057f2:	bf00      	nop
 80057f4:	200003ac 	.word	0x200003ac
 80057f8:	40005400 	.word	0x40005400
 80057fc:	08007b80 	.word	0x08007b80

08005800 <SystemClock_Config>:
{
 8005800:	b500      	push	{lr}
 8005802:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 8005804:	f7fd fa4a 	bl	8002c9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005808:	4a29      	ldr	r2, [pc, #164]	; (80058b0 <SystemClock_Config+0xb0>)
 800580a:	6a13      	ldr	r3, [r2, #32]
 800580c:	f023 0318 	bic.w	r3, r3, #24
 8005810:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8005812:	2306      	movs	r3, #6
 8005814:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005816:	2301      	movs	r3, #1
 8005818:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800581a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800581c:	2310      	movs	r3, #16
 800581e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005820:	2302      	movs	r3, #2
 8005822:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005824:	2300      	movs	r3, #0
 8005826:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005828:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800582c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800582e:	a80c      	add	r0, sp, #48	; 0x30
 8005830:	f7fd fa3c 	bl	8002cac <HAL_RCC_OscConfig>
 8005834:	bb80      	cbnz	r0, 8005898 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005836:	230f      	movs	r3, #15
 8005838:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800583a:	2102      	movs	r1, #2
 800583c:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800583e:	2300      	movs	r3, #0
 8005840:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005846:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005848:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800584a:	a807      	add	r0, sp, #28
 800584c:	f7fd fd6c 	bl	8003328 <HAL_RCC_ClockConfig>
 8005850:	bb30      	cbnz	r0, 80058a0 <SystemClock_Config+0xa0>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005852:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <SystemClock_Config+0xb4>)
 8005854:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005856:	2300      	movs	r3, #0
 8005858:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 800585a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800585e:	9204      	str	r2, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005860:	9303      	str	r3, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005866:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005868:	4668      	mov	r0, sp
 800586a:	f7fd fe79 	bl	8003560 <HAL_RCCEx_PeriphCLKConfig>
 800586e:	b9d8      	cbnz	r0, 80058a8 <SystemClock_Config+0xa8>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005870:	f7fd fe44 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8005874:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <SystemClock_Config+0xb8>)
 8005876:	fba3 3000 	umull	r3, r0, r3, r0
 800587a:	0980      	lsrs	r0, r0, #6
 800587c:	f7fb ffc4 	bl	8001808 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005880:	2004      	movs	r0, #4
 8005882:	f7fb ffd7 	bl	8001834 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8005886:	2202      	movs	r2, #2
 8005888:	2100      	movs	r1, #0
 800588a:	f04f 30ff 	mov.w	r0, #4294967295
 800588e:	f7fb ff7d 	bl	800178c <HAL_NVIC_SetPriority>
}
 8005892:	b017      	add	sp, #92	; 0x5c
 8005894:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8005898:	21be      	movs	r1, #190	; 0xbe
 800589a:	4808      	ldr	r0, [pc, #32]	; (80058bc <SystemClock_Config+0xbc>)
 800589c:	f7ff fe94 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80058a0:	21cc      	movs	r1, #204	; 0xcc
 80058a2:	4806      	ldr	r0, [pc, #24]	; (80058bc <SystemClock_Config+0xbc>)
 80058a4:	f7ff fe90 	bl	80055c8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80058a8:	21d7      	movs	r1, #215	; 0xd7
 80058aa:	4804      	ldr	r0, [pc, #16]	; (80058bc <SystemClock_Config+0xbc>)
 80058ac:	f7ff fe8c 	bl	80055c8 <_Error_Handler>
 80058b0:	40021000 	.word	0x40021000
 80058b4:	000100a1 	.word	0x000100a1
 80058b8:	10624dd3 	.word	0x10624dd3
 80058bc:	08007b80 	.word	0x08007b80

080058c0 <main>:
{
 80058c0:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 80058c2:	f7fb faaf 	bl	8000e24 <HAL_Init>
  SystemClock_Config();
 80058c6:	f7ff ff9b 	bl	8005800 <SystemClock_Config>
  MX_GPIO_Init();
 80058ca:	f7ff fd97 	bl	80053fc <MX_GPIO_Init>
  MX_DMA_Init();
 80058ce:	f7ff fe4f 	bl	8005570 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80058d2:	f7ff fe7b 	bl	80055cc <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80058d6:	f7ff fe99 	bl	800560c <MX_ADC2_Init>
  MX_RTC_Init();
 80058da:	f7ff fefb 	bl	80056d4 <MX_RTC_Init>
  MX_I2C1_Init();
 80058de:	f7ff ff5b 	bl	8005798 <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80058e2:	4c1e      	ldr	r4, [pc, #120]	; (800595c <main+0x9c>)
 80058e4:	2100      	movs	r1, #0
 80058e6:	4620      	mov	r0, r4
 80058e8:	f7fb fd34 	bl	8001354 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 80058ec:	f7ff fbde 	bl	80050ac <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80058f0:	2201      	movs	r2, #1
 80058f2:	491b      	ldr	r1, [pc, #108]	; (8005960 <main+0xa0>)
 80058f4:	481b      	ldr	r0, [pc, #108]	; (8005964 <main+0xa4>)
 80058f6:	f7fe f9bd 	bl	8003c74 <HAL_UART_Receive_IT>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 4);
 80058fa:	2204      	movs	r2, #4
 80058fc:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <main+0xa8>)
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	4620      	mov	r0, r4
 8005902:	f7fb fc8f 	bl	8001224 <HAL_ADC_Start_DMA>
	HAL_FLASH_Unlock();
 8005906:	f7fc f8e5 	bl	8001ad4 <HAL_FLASH_Unlock>
	pEraseInit->NbPages = 5;
 800590a:	4a18      	ldr	r2, [pc, #96]	; (800596c <main+0xac>)
 800590c:	6813      	ldr	r3, [r2, #0]
 800590e:	2105      	movs	r1, #5
 8005910:	6099      	str	r1, [r3, #8]
	pEraseInit->PageAddress = (uint32_t)(0x08008800);
 8005912:	4917      	ldr	r1, [pc, #92]	; (8005970 <main+0xb0>)
 8005914:	6059      	str	r1, [r3, #4]
	pEraseInit->TypeErase = (uint32_t)FLASH_TYPEERASE_PAGES;
 8005916:	2400      	movs	r4, #0
 8005918:	601c      	str	r4, [r3, #0]
	HAL_FLASHEx_Erase(pEraseInit,flash_error);
 800591a:	4b16      	ldr	r3, [pc, #88]	; (8005974 <main+0xb4>)
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	6810      	ldr	r0, [r2, #0]
 8005920:	f7fc f99a 	bl	8001c58 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8005924:	f7fc f8ea 	bl	8001afc <HAL_FLASH_Lock>
 	 HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 8005928:	4d13      	ldr	r5, [pc, #76]	; (8005978 <main+0xb8>)
 800592a:	4622      	mov	r2, r4
 800592c:	4b13      	ldr	r3, [pc, #76]	; (800597c <main+0xbc>)
 800592e:	6819      	ldr	r1, [r3, #0]
 8005930:	4628      	mov	r0, r5
 8005932:	f7fe f884 	bl	8003a3e <HAL_RTC_GetTime>
 	 HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005936:	4622      	mov	r2, r4
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <main+0xc0>)
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	4628      	mov	r0, r5
 800593e:	f7fe f8a9 	bl	8003a94 <HAL_RTC_GetDate>
  int i2c_state = init_iqs263();
 8005942:	f7ff f989 	bl	8004c58 <init_iqs263>
 8005946:	4604      	mov	r4, r0
  logPosition();
 8005948:	f7ff f852 	bl	80049f0 <logPosition>
  while (i2c_state)
 800594c:	e001      	b.n	8005952 <main+0x92>
	  mainLoop();
 800594e:	f001 f967 	bl	8006c20 <mainLoop>
  while (i2c_state)
 8005952:	2c00      	cmp	r4, #0
 8005954:	d1fb      	bne.n	800594e <main+0x8e>
}
 8005956:	2000      	movs	r0, #0
 8005958:	bd38      	pop	{r3, r4, r5, pc}
 800595a:	bf00      	nop
 800595c:	20000358 	.word	0x20000358
 8005960:	200005ac 	.word	0x200005ac
 8005964:	20000440 	.word	0x20000440
 8005968:	2000024c 	.word	0x2000024c
 800596c:	200002d0 	.word	0x200002d0
 8005970:	08008800 	.word	0x08008800
 8005974:	20000298 	.word	0x20000298
 8005978:	200004b0 	.word	0x200004b0
 800597c:	200002fc 	.word	0x200002fc
 8005980:	2000028c 	.word	0x2000028c

08005984 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8005984:	b510      	push	{r4, lr}
	if(display_set_temp){
 8005986:	4b54      	ldr	r3, [pc, #336]	; (8005ad8 <seven_segment+0x154>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	b18b      	cbz	r3, 80059b0 <seven_segment+0x2c>
		sprintf(segment_val, "%d", *set_temp);
 800598c:	4b53      	ldr	r3, [pc, #332]	; (8005adc <seven_segment+0x158>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	781a      	ldrb	r2, [r3, #0]
 8005992:	4953      	ldr	r1, [pc, #332]	; (8005ae0 <seven_segment+0x15c>)
 8005994:	4b53      	ldr	r3, [pc, #332]	; (8005ae4 <seven_segment+0x160>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	f001 fb12 	bl	8006fc0 <siprintf>
	}
	else {
		sprintf(segment_val, "%lu", raw_geyser_temp);
	}

	if(segment_counter == 0){	// Left Most Digit
 800599c:	4b52      	ldr	r3, [pc, #328]	; (8005ae8 <seven_segment+0x164>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	b173      	cbz	r3, 80059c0 <seven_segment+0x3c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d02f      	beq.n	8005a06 <seven_segment+0x82>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d050      	beq.n	8005a4c <seven_segment+0xc8>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d071      	beq.n	8005a92 <seven_segment+0x10e>
 80059ae:	bd10      	pop	{r4, pc}
		sprintf(segment_val, "%lu", raw_geyser_temp);
 80059b0:	4b4e      	ldr	r3, [pc, #312]	; (8005aec <seven_segment+0x168>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	494e      	ldr	r1, [pc, #312]	; (8005af0 <seven_segment+0x16c>)
 80059b6:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <seven_segment+0x160>)
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	f001 fb01 	bl	8006fc0 <siprintf>
 80059be:	e7ed      	b.n	800599c <seven_segment+0x18>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 80059c0:	4c4c      	ldr	r4, [pc, #304]	; (8005af4 <seven_segment+0x170>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059c8:	4620      	mov	r0, r4
 80059ca:	f7fc fa68 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80059ce:	2201      	movs	r2, #1
 80059d0:	2110      	movs	r1, #16
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7fc fa63 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80059d8:	2201      	movs	r2, #1
 80059da:	2120      	movs	r1, #32
 80059dc:	4620      	mov	r0, r4
 80059de:	f7fc fa5e 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80059e2:	2201      	movs	r2, #1
 80059e4:	2108      	movs	r1, #8
 80059e6:	4620      	mov	r0, r4
 80059e8:	f7fc fa59 	bl	8001e9e <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 80059ec:	4c3e      	ldr	r4, [pc, #248]	; (8005ae8 <seven_segment+0x164>)
 80059ee:	7823      	ldrb	r3, [r4, #0]
 80059f0:	4a3c      	ldr	r2, [pc, #240]	; (8005ae4 <seven_segment+0x160>)
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	5cd0      	ldrb	r0, [r2, r3]
 80059f6:	3830      	subs	r0, #48	; 0x30
 80059f8:	b2c0      	uxtb	r0, r0
 80059fa:	f000 f87d 	bl	8005af8 <seven_segment_display>
		segment_counter += 1;
 80059fe:	7823      	ldrb	r3, [r4, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	7023      	strb	r3, [r4, #0]
 8005a04:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005a06:	4c3b      	ldr	r4, [pc, #236]	; (8005af4 <seven_segment+0x170>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f7fc fa45 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8005a14:	2200      	movs	r2, #0
 8005a16:	2110      	movs	r1, #16
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f7fc fa40 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8005a1e:	2201      	movs	r2, #1
 8005a20:	2120      	movs	r1, #32
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7fc fa3b 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8005a28:	2201      	movs	r2, #1
 8005a2a:	2108      	movs	r1, #8
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f7fc fa36 	bl	8001e9e <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8005a32:	4c2d      	ldr	r4, [pc, #180]	; (8005ae8 <seven_segment+0x164>)
 8005a34:	7823      	ldrb	r3, [r4, #0]
 8005a36:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <seven_segment+0x160>)
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	5cd0      	ldrb	r0, [r2, r3]
 8005a3c:	3830      	subs	r0, #48	; 0x30
 8005a3e:	b2c0      	uxtb	r0, r0
 8005a40:	f000 f85a 	bl	8005af8 <seven_segment_display>
		segment_counter += 1;
 8005a44:	7823      	ldrb	r3, [r4, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	7023      	strb	r3, [r4, #0]
 8005a4a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005a4c:	4c29      	ldr	r4, [pc, #164]	; (8005af4 <seven_segment+0x170>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a54:	4620      	mov	r0, r4
 8005a56:	f7fc fa22 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2110      	movs	r1, #16
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7fc fa1d 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8005a64:	2200      	movs	r2, #0
 8005a66:	2120      	movs	r1, #32
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f7fc fa18 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2108      	movs	r1, #8
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7fc fa13 	bl	8001e9e <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8005a78:	4c1b      	ldr	r4, [pc, #108]	; (8005ae8 <seven_segment+0x164>)
 8005a7a:	7823      	ldrb	r3, [r4, #0]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <seven_segment+0x160>)
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	5cd0      	ldrb	r0, [r2, r3]
 8005a82:	3830      	subs	r0, #48	; 0x30
 8005a84:	b2c0      	uxtb	r0, r0
 8005a86:	f000 f837 	bl	8005af8 <seven_segment_display>
		segment_counter += 1;
 8005a8a:	7823      	ldrb	r3, [r4, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	7023      	strb	r3, [r4, #0]
 8005a90:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005a92:	4c18      	ldr	r4, [pc, #96]	; (8005af4 <seven_segment+0x170>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7fc f9ff 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	2110      	movs	r1, #16
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f7fc f9fa 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2120      	movs	r1, #32
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7fc f9f5 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2108      	movs	r1, #8
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f7fc f9f0 	bl	8001e9e <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8005abe:	4c0a      	ldr	r4, [pc, #40]	; (8005ae8 <seven_segment+0x164>)
 8005ac0:	7823      	ldrb	r3, [r4, #0]
 8005ac2:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <seven_segment+0x160>)
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	5cd0      	ldrb	r0, [r2, r3]
 8005ac8:	3830      	subs	r0, #48	; 0x30
 8005aca:	b2c0      	uxtb	r0, r0
 8005acc:	f000 f814 	bl	8005af8 <seven_segment_display>
		segment_counter = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	7023      	strb	r3, [r4, #0]
	}
}
 8005ad4:	e76b      	b.n	80059ae <seven_segment+0x2a>
 8005ad6:	bf00      	nop
 8005ad8:	20000290 	.word	0x20000290
 8005adc:	200002ec 	.word	0x200002ec
 8005ae0:	08007b90 	.word	0x08007b90
 8005ae4:	200002e8 	.word	0x200002e8
 8005ae8:	200002e6 	.word	0x200002e6
 8005aec:	200002dc 	.word	0x200002dc
 8005af0:	08007b7c 	.word	0x08007b7c
 8005af4:	48000400 	.word	0x48000400

08005af8 <seven_segment_display>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8005af8:	b510      	push	{r4, lr}
	switch(num){
 8005afa:	2809      	cmp	r0, #9
 8005afc:	f200 81d2 	bhi.w	8005ea4 <seven_segment_display+0x3ac>
 8005b00:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005b04:	000a019f 	.word	0x000a019f
 8005b08:	00600035 	.word	0x00600035
 8005b0c:	00bc008b 	.word	0x00bc008b
 8005b10:	011200e7 	.word	0x011200e7
 8005b14:	016e013d 	.word	0x016e013d
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2140      	movs	r1, #64	; 0x40
 8005b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b20:	f7fc f9bd 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8005b24:	2200      	movs	r2, #0
 8005b26:	2180      	movs	r1, #128	; 0x80
 8005b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b2c:	f7fc f9b7 	bl	8001e9e <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8005b30:	2201      	movs	r2, #1
 8005b32:	2120      	movs	r1, #32
 8005b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b38:	f7fc f9b1 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b46:	f7fc f9aa 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b54:	f7fc f9a3 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8005b58:	2201      	movs	r2, #1
 8005b5a:	2140      	movs	r1, #64	; 0x40
 8005b5c:	48ea      	ldr	r0, [pc, #936]	; (8005f08 <seven_segment_display+0x410>)
 8005b5e:	f7fc f99e 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8005b62:	2201      	movs	r2, #1
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	48e9      	ldr	r0, [pc, #932]	; (8005f0c <seven_segment_display+0x414>)
 8005b68:	f7fc f999 	bl	8001e9e <HAL_GPIO_WritePin>
		break;
 8005b6c:	bd10      	pop	{r4, pc}
	case 2:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2120      	movs	r1, #32
 8005b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b76:	f7fc f992 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2140      	movs	r1, #64	; 0x40
 8005b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b82:	f7fc f98c 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005b86:	2200      	movs	r2, #0
 8005b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b90:	f7fc f985 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005b94:	2200      	movs	r2, #0
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	48dc      	ldr	r0, [pc, #880]	; (8005f0c <seven_segment_display+0x414>)
 8005b9a:	f7fc f980 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2140      	movs	r1, #64	; 0x40
 8005ba2:	48d9      	ldr	r0, [pc, #868]	; (8005f08 <seven_segment_display+0x410>)
 8005ba4:	f7fc f97b 	bl	8001e9e <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bb2:	f7fc f974 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	2180      	movs	r1, #128	; 0x80
 8005bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bbe:	f7fc f96e 	bl	8001e9e <HAL_GPIO_WritePin>
		break;
 8005bc2:	bd10      	pop	{r4, pc}

	case 3:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2120      	movs	r1, #32
 8005bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bcc:	f7fc f967 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2140      	movs	r1, #64	; 0x40
 8005bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bd8:	f7fc f961 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005be6:	f7fc f95a 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005bea:	2200      	movs	r2, #0
 8005bec:	2180      	movs	r1, #128	; 0x80
 8005bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bf2:	f7fc f954 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2140      	movs	r1, #64	; 0x40
 8005bfa:	48c3      	ldr	r0, [pc, #780]	; (8005f08 <seven_segment_display+0x410>)
 8005bfc:	f7fc f94f 	bl	8001e9e <HAL_GPIO_WritePin>

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005c00:	2201      	movs	r2, #1
 8005c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c0a:	f7fc f948 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005c0e:	2201      	movs	r2, #1
 8005c10:	2180      	movs	r1, #128	; 0x80
 8005c12:	48be      	ldr	r0, [pc, #760]	; (8005f0c <seven_segment_display+0x414>)
 8005c14:	f7fc f943 	bl	8001e9e <HAL_GPIO_WritePin>

		break;
 8005c18:	bd10      	pop	{r4, pc}
	case 4:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c22:	f7fc f93c 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005c26:	2200      	movs	r2, #0
 8005c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c30:	f7fc f935 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005c34:	2200      	movs	r2, #0
 8005c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c3e:	f7fc f92e 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005c42:	2200      	movs	r2, #0
 8005c44:	2180      	movs	r1, #128	; 0x80
 8005c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c4a:	f7fc f928 	bl	8001e9e <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005c4e:	2201      	movs	r2, #1
 8005c50:	2120      	movs	r1, #32
 8005c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c56:	f7fc f922 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	2180      	movs	r1, #128	; 0x80
 8005c5e:	48ab      	ldr	r0, [pc, #684]	; (8005f0c <seven_segment_display+0x414>)
 8005c60:	f7fc f91d 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005c64:	2201      	movs	r2, #1
 8005c66:	2120      	movs	r1, #32
 8005c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c6c:	f7fc f917 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005c70:	2201      	movs	r2, #1
 8005c72:	2140      	movs	r1, #64	; 0x40
 8005c74:	48a4      	ldr	r0, [pc, #656]	; (8005f08 <seven_segment_display+0x410>)
 8005c76:	f7fc f912 	bl	8001e9e <HAL_GPIO_WritePin>

		break;
 8005c7a:	bd10      	pop	{r4, pc}
	case 5:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2120      	movs	r1, #32
 8005c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c84:	f7fc f90b 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c92:	f7fc f904 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005c96:	2200      	movs	r2, #0
 8005c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ca0:	f7fc f8fd 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2180      	movs	r1, #128	; 0x80
 8005ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cac:	f7fc f8f7 	bl	8001e9e <HAL_GPIO_WritePin>

		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2140      	movs	r1, #64	; 0x40
 8005cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cb8:	f7fc f8f1 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	4892      	ldr	r0, [pc, #584]	; (8005f0c <seven_segment_display+0x414>)
 8005cc2:	f7fc f8ec 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2140      	movs	r1, #64	; 0x40
 8005cca:	488f      	ldr	r0, [pc, #572]	; (8005f08 <seven_segment_display+0x410>)
 8005ccc:	f7fc f8e7 	bl	8001e9e <HAL_GPIO_WritePin>
		break;
 8005cd0:	bd10      	pop	{r4, pc}

	case 6:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2120      	movs	r1, #32
 8005cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cda:	f7fc f8e0 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ce8:	f7fc f8d9 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005cec:	2200      	movs	r2, #0
 8005cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cf6:	f7fc f8d2 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2180      	movs	r1, #128	; 0x80
 8005cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d02:	f7fc f8cc 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005d06:	2200      	movs	r2, #0
 8005d08:	2140      	movs	r1, #64	; 0x40
 8005d0a:	487f      	ldr	r0, [pc, #508]	; (8005f08 <seven_segment_display+0x410>)
 8005d0c:	f7fc f8c7 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005d10:	2200      	movs	r2, #0
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	487d      	ldr	r0, [pc, #500]	; (8005f0c <seven_segment_display+0x414>)
 8005d16:	f7fc f8c2 	bl	8001e9e <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	2140      	movs	r1, #64	; 0x40
 8005d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d22:	f7fc f8bc 	bl	8001e9e <HAL_GPIO_WritePin>
		break;
 8005d26:	bd10      	pop	{r4, pc}
	case 7:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2120      	movs	r1, #32
 8005d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d30:	f7fc f8b5 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005d34:	2200      	movs	r2, #0
 8005d36:	2140      	movs	r1, #64	; 0x40
 8005d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d3c:	f7fc f8af 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005d40:	2200      	movs	r2, #0
 8005d42:	2180      	movs	r1, #128	; 0x80
 8005d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d48:	f7fc f8a9 	bl	8001e9e <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	2180      	movs	r1, #128	; 0x80
 8005d50:	486e      	ldr	r0, [pc, #440]	; (8005f0c <seven_segment_display+0x414>)
 8005d52:	f7fc f8a4 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005d56:	2201      	movs	r2, #1
 8005d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d60:	f7fc f89d 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005d64:	2201      	movs	r2, #1
 8005d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d6e:	f7fc f896 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005d72:	2201      	movs	r2, #1
 8005d74:	2140      	movs	r1, #64	; 0x40
 8005d76:	4864      	ldr	r0, [pc, #400]	; (8005f08 <seven_segment_display+0x410>)
 8005d78:	f7fc f891 	bl	8001e9e <HAL_GPIO_WritePin>

		break;
 8005d7c:	bd10      	pop	{r4, pc}
	case 8:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2140      	movs	r1, #64	; 0x40
 8005d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d86:	f7fc f88a 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2120      	movs	r1, #32
 8005d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d92:	f7fc f884 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005d96:	4c5c      	ldr	r4, [pc, #368]	; (8005f08 <seven_segment_display+0x410>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2140      	movs	r1, #64	; 0x40
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f7fc f87e 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005da2:	2200      	movs	r2, #0
 8005da4:	2180      	movs	r1, #128	; 0x80
 8005da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005daa:	f7fc f878 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005dae:	2200      	movs	r2, #0
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7fc f873 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005db8:	2200      	movs	r2, #0
 8005dba:	2180      	movs	r1, #128	; 0x80
 8005dbc:	4853      	ldr	r0, [pc, #332]	; (8005f0c <seven_segment_display+0x414>)
 8005dbe:	f7fc f86e 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dcc:	f7fc f867 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dda:	f7fc f860 	bl	8001e9e <HAL_GPIO_WritePin>
		break;
 8005dde:	bd10      	pop	{r4, pc}
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005de0:	2200      	movs	r2, #0
 8005de2:	2120      	movs	r1, #32
 8005de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005de8:	f7fc f859 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005dec:	4c46      	ldr	r4, [pc, #280]	; (8005f08 <seven_segment_display+0x410>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	2140      	movs	r1, #64	; 0x40
 8005df2:	4620      	mov	r0, r4
 8005df4:	f7fc f853 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2180      	movs	r1, #128	; 0x80
 8005dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e00:	f7fc f84d 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005e04:	2200      	movs	r2, #0
 8005e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e0e:	f7fc f846 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005e12:	2200      	movs	r2, #0
 8005e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e1c:	f7fc f83f 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005e20:	2200      	movs	r2, #0
 8005e22:	2140      	movs	r1, #64	; 0x40
 8005e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e28:	f7fc f839 	bl	8001e9e <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	2180      	movs	r1, #128	; 0x80
 8005e30:	4836      	ldr	r0, [pc, #216]	; (8005f0c <seven_segment_display+0x414>)
 8005e32:	f7fc f834 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005e36:	2201      	movs	r2, #1
 8005e38:	2140      	movs	r1, #64	; 0x40
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7fc f82f 	bl	8001e9e <HAL_GPIO_WritePin>
		break;
 8005e40:	bd10      	pop	{r4, pc}
	case 0:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005e42:	2200      	movs	r2, #0
 8005e44:	2140      	movs	r1, #64	; 0x40
 8005e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e4a:	f7fc f828 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2120      	movs	r1, #32
 8005e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e56:	f7fc f822 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005e5a:	4c2b      	ldr	r4, [pc, #172]	; (8005f08 <seven_segment_display+0x410>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2140      	movs	r1, #64	; 0x40
 8005e60:	4620      	mov	r0, r4
 8005e62:	f7fc f81c 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005e66:	2200      	movs	r2, #0
 8005e68:	2180      	movs	r1, #128	; 0x80
 8005e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e6e:	f7fc f816 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005e72:	2200      	movs	r2, #0
 8005e74:	2140      	movs	r1, #64	; 0x40
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7fc f811 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2180      	movs	r1, #128	; 0x80
 8005e80:	4822      	ldr	r0, [pc, #136]	; (8005f0c <seven_segment_display+0x414>)
 8005e82:	f7fc f80c 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005e86:	2200      	movs	r2, #0
 8005e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e90:	f7fc f805 	bl	8001e9e <HAL_GPIO_WritePin>
		//OFF

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005e94:	2201      	movs	r2, #1
 8005e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e9e:	f7fb fffe 	bl	8001e9e <HAL_GPIO_WritePin>
		break;
 8005ea2:	bd10      	pop	{r4, pc}
	default:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	2120      	movs	r1, #32
 8005ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005eac:	f7fb fff7 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 8005eb0:	4c15      	ldr	r4, [pc, #84]	; (8005f08 <seven_segment_display+0x410>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	2140      	movs	r1, #64	; 0x40
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7fb fff1 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	2180      	movs	r1, #128	; 0x80
 8005ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ec4:	f7fb ffeb 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2140      	movs	r1, #64	; 0x40
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7fb ffe6 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	2180      	movs	r1, #128	; 0x80
 8005ed6:	480d      	ldr	r0, [pc, #52]	; (8005f0c <seven_segment_display+0x414>)
 8005ed8:	f7fb ffe1 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005edc:	2201      	movs	r2, #1
 8005ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ee6:	f7fb ffda 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8005eea:	2201      	movs	r2, #1
 8005eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ef4:	f7fb ffd3 	bl	8001e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2140      	movs	r1, #64	; 0x40
 8005efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f00:	f7fb ffcd 	bl	8001e9e <HAL_GPIO_WritePin>
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	bf00      	nop
 8005f08:	48000400 	.word	0x48000400
 8005f0c:	48000800 	.word	0x48000800

08005f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f10:	b500      	push	{lr}
 8005f12:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f14:	4b1c      	ldr	r3, [pc, #112]	; (8005f88 <HAL_MspInit+0x78>)
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	f042 0201 	orr.w	r2, r2, #1
 8005f1c:	619a      	str	r2, [r3, #24]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005f28:	2007      	movs	r0, #7
 8005f2a:	f7fb fc1d 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 8005f2e:	2202      	movs	r2, #2
 8005f30:	2100      	movs	r1, #0
 8005f32:	f06f 000b 	mvn.w	r0, #11
 8005f36:	f7fb fc29 	bl	800178c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f06f 000a 	mvn.w	r0, #10
 8005f42:	f7fb fc23 	bl	800178c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 8005f46:	2202      	movs	r2, #2
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f06f 0009 	mvn.w	r0, #9
 8005f4e:	f7fb fc1d 	bl	800178c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 8005f52:	2202      	movs	r2, #2
 8005f54:	2100      	movs	r1, #0
 8005f56:	f06f 0004 	mvn.w	r0, #4
 8005f5a:	f7fb fc17 	bl	800178c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 8005f5e:	2202      	movs	r2, #2
 8005f60:	2100      	movs	r1, #0
 8005f62:	f06f 0003 	mvn.w	r0, #3
 8005f66:	f7fb fc11 	bl	800178c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	f06f 0001 	mvn.w	r0, #1
 8005f72:	f7fb fc0b 	bl	800178c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8005f76:	2202      	movs	r2, #2
 8005f78:	2100      	movs	r1, #0
 8005f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7e:	f7fb fc05 	bl	800178c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f82:	b003      	add	sp, #12
 8005f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f88:	40021000 	.word	0x40021000

08005f8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8005f8c:	6802      	ldr	r2, [r0, #0]
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <HAL_ADC_MspInit+0x84>)
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d000      	beq.n	8005f96 <HAL_ADC_MspInit+0xa>
 8005f94:	4770      	bx	lr
{
 8005f96:	b570      	push	{r4, r5, r6, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <HAL_ADC_MspInit+0x88>)
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005fa4:	615a      	str	r2, [r3, #20]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC2_IN8
    PC3     ------> ADC2_IN9
    PB2     ------> ADC2_IN12
    PB12     ------> ADC2_IN13 
    */
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fb4:	2603      	movs	r6, #3
 8005fb6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb8:	2500      	movs	r5, #0
 8005fba:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fbc:	a901      	add	r1, sp, #4
 8005fbe:	4816      	ldr	r0, [pc, #88]	; (8006018 <HAL_ADC_MspInit+0x8c>)
 8005fc0:	f7fb fe9c 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GPIO_PIN_12;
 8005fc4:	f241 0304 	movw	r3, #4100	; 0x1004
 8005fc8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fca:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fcc:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fce:	a901      	add	r1, sp, #4
 8005fd0:	4812      	ldr	r0, [pc, #72]	; (800601c <HAL_ADC_MspInit+0x90>)
 8005fd2:	f7fb fe93 	bl	8001cfc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8005fd6:	4812      	ldr	r0, [pc, #72]	; (8006020 <HAL_ADC_MspInit+0x94>)
 8005fd8:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_ADC_MspInit+0x98>)
 8005fda:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fdc:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fde:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005fe0:	2380      	movs	r3, #128	; 0x80
 8005fe2:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe8:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fee:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005ff0:	2320      	movs	r3, #32
 8005ff2:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005ff4:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005ff6:	f7fb fc5b 	bl	80018b0 <HAL_DMA_Init>
 8005ffa:	b920      	cbnz	r0, 8006006 <HAL_ADC_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005ffc:	4b08      	ldr	r3, [pc, #32]	; (8006020 <HAL_ADC_MspInit+0x94>)
 8005ffe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006000:	625c      	str	r4, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006002:	b006      	add	sp, #24
 8006004:	bd70      	pop	{r4, r5, r6, pc}
      _Error_Handler(__FILE__, __LINE__);
 8006006:	217a      	movs	r1, #122	; 0x7a
 8006008:	4807      	ldr	r0, [pc, #28]	; (8006028 <HAL_ADC_MspInit+0x9c>)
 800600a:	f7ff fadd 	bl	80055c8 <_Error_Handler>
 800600e:	e7f5      	b.n	8005ffc <HAL_ADC_MspInit+0x70>
 8006010:	50000100 	.word	0x50000100
 8006014:	40021000 	.word	0x40021000
 8006018:	48000800 	.word	0x48000800
 800601c:	48000400 	.word	0x48000400
 8006020:	200004e8 	.word	0x200004e8
 8006024:	4002001c 	.word	0x4002001c
 8006028:	08007b94 	.word	0x08007b94

0800602c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800602c:	6802      	ldr	r2, [r0, #0]
 800602e:	4b19      	ldr	r3, [pc, #100]	; (8006094 <HAL_I2C_MspInit+0x68>)
 8006030:	429a      	cmp	r2, r3
 8006032:	d000      	beq.n	8006036 <HAL_I2C_MspInit+0xa>
 8006034:	4770      	bx	lr
{
 8006036:	b510      	push	{r4, lr}
 8006038:	b086      	sub	sp, #24
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 800603a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800603e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006040:	2312      	movs	r3, #18
 8006042:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006044:	2400      	movs	r4, #0
 8006046:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006048:	2303      	movs	r3, #3
 800604a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800604c:	2304      	movs	r3, #4
 800604e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006050:	eb0d 0103 	add.w	r1, sp, r3
 8006054:	4810      	ldr	r0, [pc, #64]	; (8006098 <HAL_I2C_MspInit+0x6c>)
 8006056:	f7fb fe51 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800605a:	4b10      	ldr	r3, [pc, #64]	; (800609c <HAL_I2C_MspInit+0x70>)
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006062:	61da      	str	r2, [r3, #28]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800606e:	4622      	mov	r2, r4
 8006070:	4621      	mov	r1, r4
 8006072:	201f      	movs	r0, #31
 8006074:	f7fb fb8a 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006078:	201f      	movs	r0, #31
 800607a:	f7fb fbb9 	bl	80017f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800607e:	4622      	mov	r2, r4
 8006080:	4621      	mov	r1, r4
 8006082:	2020      	movs	r0, #32
 8006084:	f7fb fb82 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006088:	2020      	movs	r0, #32
 800608a:	f7fb fbb1 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800608e:	b006      	add	sp, #24
 8006090:	bd10      	pop	{r4, pc}
 8006092:	bf00      	nop
 8006094:	40005400 	.word	0x40005400
 8006098:	48000400 	.word	0x48000400
 800609c:	40021000 	.word	0x40021000

080060a0 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80060a0:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 80060a2:	6802      	ldr	r2, [r0, #0]
 80060a4:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <HAL_RTC_MspInit+0x34>)
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d000      	beq.n	80060ac <HAL_RTC_MspInit+0xc>
 80060aa:	bd08      	pop	{r3, pc}
 80060ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060b0:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80060b4:	fab2 f282 	clz	r2, r2
 80060b8:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <HAL_RTC_MspInit+0x38>)
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	2201      	movs	r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80060c2:	2200      	movs	r2, #0
 80060c4:	4611      	mov	r1, r2
 80060c6:	2003      	movs	r0, #3
 80060c8:	f7fb fb60 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80060cc:	2003      	movs	r0, #3
 80060ce:	f7fb fb8f 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80060d2:	e7ea      	b.n	80060aa <HAL_RTC_MspInit+0xa>
 80060d4:	40002800 	.word	0x40002800
 80060d8:	10908100 	.word	0x10908100

080060dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80060dc:	6802      	ldr	r2, [r0, #0]
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <HAL_UART_MspInit+0x54>)
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d000      	beq.n	80060e6 <HAL_UART_MspInit+0xa>
 80060e4:	4770      	bx	lr
{
 80060e6:	b510      	push	{r4, lr}
 80060e8:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060ea:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f4:	619a      	str	r2, [r3, #24]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006100:	2330      	movs	r3, #48	; 0x30
 8006102:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006104:	2302      	movs	r3, #2
 8006106:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006108:	2400      	movs	r4, #0
 800610a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800610c:	2303      	movs	r3, #3
 800610e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006110:	2307      	movs	r3, #7
 8006112:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006114:	a901      	add	r1, sp, #4
 8006116:	4807      	ldr	r0, [pc, #28]	; (8006134 <HAL_UART_MspInit+0x58>)
 8006118:	f7fb fdf0 	bl	8001cfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800611c:	4622      	mov	r2, r4
 800611e:	4621      	mov	r1, r4
 8006120:	2025      	movs	r0, #37	; 0x25
 8006122:	f7fb fb33 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006126:	2025      	movs	r0, #37	; 0x25
 8006128:	f7fb fb62 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800612c:	b006      	add	sp, #24
 800612e:	bd10      	pop	{r4, pc}
 8006130:	40013800 	.word	0x40013800
 8006134:	48000800 	.word	0x48000800

08006138 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8006138:	4770      	bx	lr

0800613a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800613a:	4770      	bx	lr

0800613c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800613c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800613e:	f7fa fe83 	bl	8000e48 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006142:	f7fb fb88 	bl	8001856 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
 8006146:	2301      	movs	r3, #1
 8006148:	4a08      	ldr	r2, [pc, #32]	; (800616c <SysTick_Handler+0x30>)
 800614a:	7013      	strb	r3, [r2, #0]
  RTC_timer_flag = 1;
 800614c:	4a08      	ldr	r2, [pc, #32]	; (8006170 <SysTick_Handler+0x34>)
 800614e:	7013      	strb	r3, [r2, #0]
  flash_flag = 1;
 8006150:	4a08      	ldr	r2, [pc, #32]	; (8006174 <SysTick_Handler+0x38>)
 8006152:	7013      	strb	r3, [r2, #0]
  adc_flag = 1;
 8006154:	4a08      	ldr	r2, [pc, #32]	; (8006178 <SysTick_Handler+0x3c>)
 8006156:	7013      	strb	r3, [r2, #0]
  if(pump_flag == 1){
 8006158:	4b08      	ldr	r3, [pc, #32]	; (800617c <SysTick_Handler+0x40>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d000      	beq.n	8006162 <SysTick_Handler+0x26>
 8006160:	bd08      	pop	{r3, pc}
	  valve_timer += 1;
 8006162:	4a07      	ldr	r2, [pc, #28]	; (8006180 <SysTick_Handler+0x44>)
 8006164:	7813      	ldrb	r3, [r2, #0]
 8006166:	3301      	adds	r3, #1
 8006168:	7013      	strb	r3, [r2, #0]
  }
  //adc_flag = 1;
  /* USER CODE END SysTick_IRQn 1 */
}
 800616a:	e7f9      	b.n	8006160 <SysTick_Handler+0x24>
 800616c:	200002f1 	.word	0x200002f1
 8006170:	20000258 	.word	0x20000258
 8006174:	2000029c 	.word	0x2000029c
 8006178:	20000272 	.word	0x20000272
 800617c:	200002d4 	.word	0x200002d4
 8006180:	20000314 	.word	0x20000314

08006184 <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 8006184:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006186:	4802      	ldr	r0, [pc, #8]	; (8006190 <RTC_WKUP_IRQHandler+0xc>)
 8006188:	f7fd fd1c 	bl	8003bc4 <HAL_RTCEx_WakeUpTimerIRQHandler>
 800618c:	bd08      	pop	{r3, pc}
 800618e:	bf00      	nop
 8006190:	200004b0 	.word	0x200004b0

08006194 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8006194:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006196:	2001      	movs	r0, #1
 8006198:	f7fb fe86 	bl	8001ea8 <HAL_GPIO_EXTI_IRQHandler>
 800619c:	bd08      	pop	{r3, pc}
	...

080061a0 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80061a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80061a2:	4802      	ldr	r0, [pc, #8]	; (80061ac <DMA1_Channel2_IRQHandler+0xc>)
 80061a4:	f7fb fc0f 	bl	80019c6 <HAL_DMA_IRQHandler>
 80061a8:	bd08      	pop	{r3, pc}
 80061aa:	bf00      	nop
 80061ac:	200004e8 	.word	0x200004e8

080061b0 <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 80061b0:	4770      	bx	lr

080061b2 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 80061b2:	4770      	bx	lr

080061b4 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80061b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80061b6:	2040      	movs	r0, #64	; 0x40
 80061b8:	f7fb fe76 	bl	8001ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  pump_flag = 1;
 80061bc:	2201      	movs	r2, #1
 80061be:	4b01      	ldr	r3, [pc, #4]	; (80061c4 <EXTI9_5_IRQHandler+0x10>)
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	bd08      	pop	{r3, pc}
 80061c4:	200002d4 	.word	0x200002d4

080061c8 <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 80061c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80061ca:	4802      	ldr	r0, [pc, #8]	; (80061d4 <I2C1_EV_IRQHandler+0xc>)
 80061cc:	f7fc fa42 	bl	8002654 <HAL_I2C_EV_IRQHandler>
 80061d0:	bd08      	pop	{r3, pc}
 80061d2:	bf00      	nop
 80061d4:	200003ac 	.word	0x200003ac

080061d8 <I2C1_ER_IRQHandler>:

/**
* @brief This function handles I2C1 error interrupt.
*/
void I2C1_ER_IRQHandler(void)
{
 80061d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80061da:	4802      	ldr	r0, [pc, #8]	; (80061e4 <I2C1_ER_IRQHandler+0xc>)
 80061dc:	f7fc fcb1 	bl	8002b42 <HAL_I2C_ER_IRQHandler>
 80061e0:	bd08      	pop	{r3, pc}
 80061e2:	bf00      	nop
 80061e4:	200003ac 	.word	0x200003ac

080061e8 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 80061e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80061ea:	4802      	ldr	r0, [pc, #8]	; (80061f4 <USART1_IRQHandler+0xc>)
 80061ec:	f7fe f808 	bl	8004200 <HAL_UART_IRQHandler>
 80061f0:	bd08      	pop	{r3, pc}
 80061f2:	bf00      	nop
 80061f4:	20000440 	.word	0x20000440

080061f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061f8:	4915      	ldr	r1, [pc, #84]	; (8006250 <SystemInit+0x58>)
 80061fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80061fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006206:	4b13      	ldr	r3, [pc, #76]	; (8006254 <SystemInit+0x5c>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8006210:	6858      	ldr	r0, [r3, #4]
 8006212:	4a11      	ldr	r2, [pc, #68]	; (8006258 <SystemInit+0x60>)
 8006214:	4002      	ands	r2, r0
 8006216:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800621e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006222:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800622a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8006232:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8006234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006236:	f022 020f 	bic.w	r2, r2, #15
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800623c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800623e:	4a07      	ldr	r2, [pc, #28]	; (800625c <SystemInit+0x64>)
 8006240:	4002      	ands	r2, r0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006244:	2200      	movs	r2, #0
 8006246:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800624c:	608b      	str	r3, [r1, #8]
 800624e:	4770      	bx	lr
 8006250:	e000ed00 	.word	0xe000ed00
 8006254:	40021000 	.word	0x40021000
 8006258:	f87fc00c 	.word	0xf87fc00c
 800625c:	ff00fccc 	.word	0xff00fccc

08006260 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 8006260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
 8006264:	2200      	movs	r2, #0
 8006266:	4b9a      	ldr	r3, [pc, #616]	; (80064d0 <uart_comms+0x270>)
 8006268:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 800626a:	4b9a      	ldr	r3, [pc, #616]	; (80064d4 <uart_comms+0x274>)
 800626c:	4a9a      	ldr	r2, [pc, #616]	; (80064d8 <uart_comms+0x278>)
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	6819      	ldr	r1, [r3, #0]
 8006272:	489a      	ldr	r0, [pc, #616]	; (80064dc <uart_comms+0x27c>)
 8006274:	7800      	ldrb	r0, [r0, #0]
 8006276:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	2a24      	cmp	r2, #36	; 0x24
 800627e:	d00b      	beq.n	8006298 <uart_comms+0x38>

		uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	2a24      	cmp	r2, #36	; 0x24
 8006284:	d00d      	beq.n	80062a2 <uart_comms+0x42>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 8006286:	4b94      	ldr	r3, [pc, #592]	; (80064d8 <uart_comms+0x278>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b3b      	cmp	r3, #59	; 0x3b
 800628c:	d902      	bls.n	8006294 <uart_comms+0x34>
		uart_counter = 0;
 800628e:	2200      	movs	r2, #0
 8006290:	4b91      	ldr	r3, [pc, #580]	; (80064d8 <uart_comms+0x278>)
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_counter += 1;
 8006298:	498f      	ldr	r1, [pc, #572]	; (80064d8 <uart_comms+0x278>)
 800629a:	780a      	ldrb	r2, [r1, #0]
 800629c:	3201      	adds	r2, #1
 800629e:	700a      	strb	r2, [r1, #0]
 80062a0:	e7ee      	b.n	8006280 <uart_comms+0x20>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80062a2:	4a8d      	ldr	r2, [pc, #564]	; (80064d8 <uart_comms+0x278>)
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	1899      	adds	r1, r3, r2
 80062a8:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80062ac:	290a      	cmp	r1, #10
 80062ae:	d1ea      	bne.n	8006286 <uart_comms+0x26>
 80062b0:	4413      	add	r3, r2
 80062b2:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80062b6:	2b0d      	cmp	r3, #13
 80062b8:	d1e5      	bne.n	8006286 <uart_comms+0x26>
 80062ba:	2a02      	cmp	r2, #2
 80062bc:	d9e3      	bls.n	8006286 <uart_comms+0x26>
		memset(return_value,0x00, 50);
 80062be:	2232      	movs	r2, #50	; 0x32
 80062c0:	2100      	movs	r1, #0
 80062c2:	4b87      	ldr	r3, [pc, #540]	; (80064e0 <uart_comms+0x280>)
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	f000 fdb6 	bl	8006e36 <memset>
		uart_command_copy = uart_command;
 80062ca:	4b82      	ldr	r3, [pc, #520]	; (80064d4 <uart_comms+0x274>)
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	4b85      	ldr	r3, [pc, #532]	; (80064e4 <uart_comms+0x284>)
 80062d0:	6018      	str	r0, [r3, #0]
		switch(uart_command[1]){
 80062d2:	7843      	ldrb	r3, [r0, #1]
 80062d4:	3b41      	subs	r3, #65	; 0x41
 80062d6:	2b0b      	cmp	r3, #11
 80062d8:	d829      	bhi.n	800632e <uart_comms+0xce>
 80062da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80062de:	000c      	.short	0x000c
 80062e0:	00600033 	.word	0x00600033
 80062e4:	00af007f 	.word	0x00af007f
 80062e8:	012700ce 	.word	0x012700ce
 80062ec:	01ac0153 	.word	0x01ac0153
 80062f0:	037b0223 	.word	0x037b0223
 80062f4:	0453      	.short	0x0453
			memcpy(studentnumber, uart_command, 2 );
 80062f6:	4b7c      	ldr	r3, [pc, #496]	; (80064e8 <uart_comms+0x288>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	8801      	ldrh	r1, [r0, #0]
 80062fc:	8011      	strh	r1, [r2, #0]
			memcpy(studentnumber+2,comma,1);
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	497a      	ldr	r1, [pc, #488]	; (80064ec <uart_comms+0x28c>)
 8006302:	7809      	ldrb	r1, [r1, #0]
 8006304:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4979      	ldr	r1, [pc, #484]	; (80064f0 <uart_comms+0x290>)
 800630a:	6808      	ldr	r0, [r1, #0]
 800630c:	6849      	ldr	r1, [r1, #4]
 800630e:	f8c2 0003 	str.w	r0, [r2, #3]
 8006312:	f8c2 1007 	str.w	r1, [r2, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8006316:	6819      	ldr	r1, [r3, #0]
 8006318:	4b76      	ldr	r3, [pc, #472]	; (80064f4 <uart_comms+0x294>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f8c1 200b 	str.w	r2, [r1, #11]
 8006322:	f8c1 300f 	str.w	r3, [r1, #15]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 8006326:	220d      	movs	r2, #13
 8006328:	4873      	ldr	r0, [pc, #460]	; (80064f8 <uart_comms+0x298>)
 800632a:	f7fd fc7d 	bl	8003c28 <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 800632e:	223c      	movs	r2, #60	; 0x3c
 8006330:	2100      	movs	r1, #0
 8006332:	4b68      	ldr	r3, [pc, #416]	; (80064d4 <uart_comms+0x274>)
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f000 fd7e 	bl	8006e36 <memset>
		uart_counter = 0;
 800633a:	2200      	movs	r2, #0
 800633c:	4b66      	ldr	r3, [pc, #408]	; (80064d8 <uart_comms+0x278>)
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if(uart_command[3]=='1'){
 8006344:	78c3      	ldrb	r3, [r0, #3]
 8006346:	2b31      	cmp	r3, #49	; 0x31
 8006348:	d015      	beq.n	8006376 <uart_comms+0x116>
			else if(uart_command[3] == '0'){
 800634a:	2b30      	cmp	r3, #48	; 0x30
 800634c:	d01d      	beq.n	800638a <uart_comms+0x12a>
			memcpy(return_value, uart_command, 2);
 800634e:	4b64      	ldr	r3, [pc, #400]	; (80064e0 <uart_comms+0x280>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4960      	ldr	r1, [pc, #384]	; (80064d4 <uart_comms+0x274>)
 8006354:	6809      	ldr	r1, [r1, #0]
 8006356:	8809      	ldrh	r1, [r1, #0]
 8006358:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4965      	ldr	r1, [pc, #404]	; (80064f4 <uart_comms+0x294>)
 800635e:	8809      	ldrh	r1, [r1, #0]
 8006360:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8006362:	681c      	ldr	r4, [r3, #0]
 8006364:	4620      	mov	r0, r4
 8006366:	f7f9 ff33 	bl	80001d0 <strlen>
 800636a:	b282      	uxth	r2, r0
 800636c:	4621      	mov	r1, r4
 800636e:	4862      	ldr	r0, [pc, #392]	; (80064f8 <uart_comms+0x298>)
 8006370:	f7fd fc5a 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 8006374:	e7db      	b.n	800632e <uart_comms+0xce>
				valve_state = valve_OPEN;
 8006376:	4a61      	ldr	r2, [pc, #388]	; (80064fc <uart_comms+0x29c>)
 8006378:	4b61      	ldr	r3, [pc, #388]	; (8006500 <uart_comms+0x2a0>)
 800637a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 800637c:	2201      	movs	r2, #1
 800637e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006382:	4860      	ldr	r0, [pc, #384]	; (8006504 <uart_comms+0x2a4>)
 8006384:	f7fb fd8b 	bl	8001e9e <HAL_GPIO_WritePin>
 8006388:	e7e1      	b.n	800634e <uart_comms+0xee>
				valve_state=valve_CLOSE;
 800638a:	4a5f      	ldr	r2, [pc, #380]	; (8006508 <uart_comms+0x2a8>)
 800638c:	4b5c      	ldr	r3, [pc, #368]	; (8006500 <uart_comms+0x2a0>)
 800638e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 8006390:	2200      	movs	r2, #0
 8006392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006396:	485b      	ldr	r0, [pc, #364]	; (8006504 <uart_comms+0x2a4>)
 8006398:	f7fb fd81 	bl	8001e9e <HAL_GPIO_WritePin>
 800639c:	e7d7      	b.n	800634e <uart_comms+0xee>
			if(uart_command[3]=='0'){
 800639e:	78c3      	ldrb	r3, [r0, #3]
 80063a0:	2b30      	cmp	r3, #48	; 0x30
 80063a2:	d013      	beq.n	80063cc <uart_comms+0x16c>
			else if(uart_command[3] == '1'){
 80063a4:	2b31      	cmp	r3, #49	; 0x31
 80063a6:	d015      	beq.n	80063d4 <uart_comms+0x174>
			memcpy(return_value, uart_command, 2);
 80063a8:	4b4d      	ldr	r3, [pc, #308]	; (80064e0 <uart_comms+0x280>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	8801      	ldrh	r1, [r0, #0]
 80063ae:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4950      	ldr	r1, [pc, #320]	; (80064f4 <uart_comms+0x294>)
 80063b4:	8809      	ldrh	r1, [r1, #0]
 80063b6:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 80063b8:	681c      	ldr	r4, [r3, #0]
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7f9 ff08 	bl	80001d0 <strlen>
 80063c0:	b282      	uxth	r2, r0
 80063c2:	4621      	mov	r1, r4
 80063c4:	484c      	ldr	r0, [pc, #304]	; (80064f8 <uart_comms+0x298>)
 80063c6:	f7fd fc2f 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 80063ca:	e7b0      	b.n	800632e <uart_comms+0xce>
				auto_heating = 0;
 80063cc:	2200      	movs	r2, #0
 80063ce:	4b4f      	ldr	r3, [pc, #316]	; (800650c <uart_comms+0x2ac>)
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e7e9      	b.n	80063a8 <uart_comms+0x148>
				auto_heating = 1;
 80063d4:	2201      	movs	r2, #1
 80063d6:	4b4d      	ldr	r3, [pc, #308]	; (800650c <uart_comms+0x2ac>)
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	e7e5      	b.n	80063a8 <uart_comms+0x148>
			if(auto_heating == 0){	// if auto heating off
 80063dc:	4b4b      	ldr	r3, [pc, #300]	; (800650c <uart_comms+0x2ac>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b923      	cbnz	r3, 80063ec <uart_comms+0x18c>
				if(uart_command[3]=='0'){
 80063e2:	78c3      	ldrb	r3, [r0, #3]
 80063e4:	2b30      	cmp	r3, #48	; 0x30
 80063e6:	d015      	beq.n	8006414 <uart_comms+0x1b4>
				else if(uart_command[3] == '1'){
 80063e8:	2b31      	cmp	r3, #49	; 0x31
 80063ea:	d01d      	beq.n	8006428 <uart_comms+0x1c8>
			memcpy(return_value, uart_command, 2);
 80063ec:	4b3c      	ldr	r3, [pc, #240]	; (80064e0 <uart_comms+0x280>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4938      	ldr	r1, [pc, #224]	; (80064d4 <uart_comms+0x274>)
 80063f2:	6809      	ldr	r1, [r1, #0]
 80063f4:	8809      	ldrh	r1, [r1, #0]
 80063f6:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	493e      	ldr	r1, [pc, #248]	; (80064f4 <uart_comms+0x294>)
 80063fc:	8809      	ldrh	r1, [r1, #0]
 80063fe:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8006400:	681c      	ldr	r4, [r3, #0]
 8006402:	4620      	mov	r0, r4
 8006404:	f7f9 fee4 	bl	80001d0 <strlen>
 8006408:	b282      	uxth	r2, r0
 800640a:	4621      	mov	r1, r4
 800640c:	483a      	ldr	r0, [pc, #232]	; (80064f8 <uart_comms+0x298>)
 800640e:	f7fd fc0b 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 8006412:	e78c      	b.n	800632e <uart_comms+0xce>
					heater_state = heater_OFF;
 8006414:	4a3e      	ldr	r2, [pc, #248]	; (8006510 <uart_comms+0x2b0>)
 8006416:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <uart_comms+0x2b4>)
 8006418:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 800641a:	2200      	movs	r2, #0
 800641c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006420:	4838      	ldr	r0, [pc, #224]	; (8006504 <uart_comms+0x2a4>)
 8006422:	f7fb fd3c 	bl	8001e9e <HAL_GPIO_WritePin>
 8006426:	e7e1      	b.n	80063ec <uart_comms+0x18c>
					heater_state = heater_ON;
 8006428:	4a3b      	ldr	r2, [pc, #236]	; (8006518 <uart_comms+0x2b8>)
 800642a:	4b3a      	ldr	r3, [pc, #232]	; (8006514 <uart_comms+0x2b4>)
 800642c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 800642e:	2201      	movs	r2, #1
 8006430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006434:	4833      	ldr	r0, [pc, #204]	; (8006504 <uart_comms+0x2a4>)
 8006436:	f7fb fd32 	bl	8001e9e <HAL_GPIO_WritePin>
 800643a:	e7d7      	b.n	80063ec <uart_comms+0x18c>
			if(uart_command[3]=='0'){ // logging disable
 800643c:	78c3      	ldrb	r3, [r0, #3]
 800643e:	2b30      	cmp	r3, #48	; 0x30
 8006440:	d013      	beq.n	800646a <uart_comms+0x20a>
			else if(uart_command[3] == '1'){ // logging enable
 8006442:	2b31      	cmp	r3, #49	; 0x31
 8006444:	d015      	beq.n	8006472 <uart_comms+0x212>
			memcpy(return_value, uart_command, 2);
 8006446:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <uart_comms+0x280>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	8801      	ldrh	r1, [r0, #0]
 800644c:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	4928      	ldr	r1, [pc, #160]	; (80064f4 <uart_comms+0x294>)
 8006452:	8809      	ldrh	r1, [r1, #0]
 8006454:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8006456:	681c      	ldr	r4, [r3, #0]
 8006458:	4620      	mov	r0, r4
 800645a:	f7f9 feb9 	bl	80001d0 <strlen>
 800645e:	b282      	uxth	r2, r0
 8006460:	4621      	mov	r1, r4
 8006462:	4825      	ldr	r0, [pc, #148]	; (80064f8 <uart_comms+0x298>)
 8006464:	f7fd fbe0 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 8006468:	e761      	b.n	800632e <uart_comms+0xce>
				enableFlashLogging = 0;
 800646a:	2200      	movs	r2, #0
 800646c:	4b2b      	ldr	r3, [pc, #172]	; (800651c <uart_comms+0x2bc>)
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	e7e9      	b.n	8006446 <uart_comms+0x1e6>
				enableFlashLogging = 1;
 8006472:	2201      	movs	r2, #1
 8006474:	4b29      	ldr	r3, [pc, #164]	; (800651c <uart_comms+0x2bc>)
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e7e5      	b.n	8006446 <uart_comms+0x1e6>
			sizeOfTemp = uart_counter - 5;
 800647a:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <uart_comms+0x278>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	3b05      	subs	r3, #5
 8006480:	4a27      	ldr	r2, [pc, #156]	; (8006520 <uart_comms+0x2c0>)
 8006482:	7013      	strb	r3, [r2, #0]
			memset(temp_val, 0x00, 4);
 8006484:	4c27      	ldr	r4, [pc, #156]	; (8006524 <uart_comms+0x2c4>)
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	2600      	movs	r6, #0
 800648a:	601e      	str	r6, [r3, #0]
			memcpy(temp_val, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 800648c:	4d11      	ldr	r5, [pc, #68]	; (80064d4 <uart_comms+0x274>)
 800648e:	6829      	ldr	r1, [r5, #0]
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	3103      	adds	r1, #3
 8006494:	6820      	ldr	r0, [r4, #0]
 8006496:	f000 fcc3 	bl	8006e20 <memcpy>
			*set_temp = strtol(temp_val, NULL,10);
 800649a:	4b23      	ldr	r3, [pc, #140]	; (8006528 <uart_comms+0x2c8>)
 800649c:	681f      	ldr	r7, [r3, #0]
 800649e:	220a      	movs	r2, #10
 80064a0:	4631      	mov	r1, r6
 80064a2:	6820      	ldr	r0, [r4, #0]
 80064a4:	f000 fe84 	bl	80071b0 <strtol>
 80064a8:	7038      	strb	r0, [r7, #0]
			memcpy(return_value, uart_command,2);
 80064aa:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <uart_comms+0x280>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	6829      	ldr	r1, [r5, #0]
 80064b0:	8809      	ldrh	r1, [r1, #0]
 80064b2:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2,endSimbol, 2);
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	490f      	ldr	r1, [pc, #60]	; (80064f4 <uart_comms+0x294>)
 80064b8:	8809      	ldrh	r1, [r1, #0]
 80064ba:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80064bc:	681c      	ldr	r4, [r3, #0]
 80064be:	4620      	mov	r0, r4
 80064c0:	f7f9 fe86 	bl	80001d0 <strlen>
 80064c4:	b282      	uxth	r2, r0
 80064c6:	4621      	mov	r1, r4
 80064c8:	480b      	ldr	r0, [pc, #44]	; (80064f8 <uart_comms+0x298>)
 80064ca:	f7fd fbad 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 80064ce:	e72e      	b.n	800632e <uart_comms+0xce>
 80064d0:	200002e5 	.word	0x200002e5
 80064d4:	20000304 	.word	0x20000304
 80064d8:	2000030c 	.word	0x2000030c
 80064dc:	200005ac 	.word	0x200005ac
 80064e0:	200002e0 	.word	0x200002e0
 80064e4:	20000308 	.word	0x20000308
 80064e8:	200005a8 	.word	0x200005a8
 80064ec:	20000004 	.word	0x20000004
 80064f0:	20000040 	.word	0x20000040
 80064f4:	20000008 	.word	0x20000008
 80064f8:	20000440 	.word	0x20000440
 80064fc:	20000054 	.word	0x20000054
 8006500:	20000310 	.word	0x20000310
 8006504:	48000400 	.word	0x48000400
 8006508:	2000004c 	.word	0x2000004c
 800650c:	20000280 	.word	0x20000280
 8006510:	20000014 	.word	0x20000014
 8006514:	200002b8 	.word	0x200002b8
 8006518:	20000018 	.word	0x20000018
 800651c:	20000291 	.word	0x20000291
 8006520:	200002f0 	.word	0x200002f0
 8006524:	200002f8 	.word	0x200002f8
 8006528:	200002ec 	.word	0x200002ec
			memcpy(return_value, uart_command, 2);
 800652c:	4cba      	ldr	r4, [pc, #744]	; (8006818 <uart_comms+0x5b8>)
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	8802      	ldrh	r2, [r0, #0]
 8006532:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	4ab9      	ldr	r2, [pc, #740]	; (800681c <uart_comms+0x5bc>)
 8006538:	7812      	ldrb	r2, [r2, #0]
 800653a:	709a      	strb	r2, [r3, #2]
			sprintf(temp_val,"%d", *set_temp);
 800653c:	4bb8      	ldr	r3, [pc, #736]	; (8006820 <uart_comms+0x5c0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4eb8      	ldr	r6, [pc, #736]	; (8006824 <uart_comms+0x5c4>)
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	49b8      	ldr	r1, [pc, #736]	; (8006828 <uart_comms+0x5c8>)
 8006546:	6830      	ldr	r0, [r6, #0]
 8006548:	f000 fd3a 	bl	8006fc0 <siprintf>
			memcpy(return_value+3, temp_val, strlen(temp_val));
 800654c:	6825      	ldr	r5, [r4, #0]
 800654e:	3503      	adds	r5, #3
 8006550:	6836      	ldr	r6, [r6, #0]
 8006552:	4630      	mov	r0, r6
 8006554:	f7f9 fe3c 	bl	80001d0 <strlen>
 8006558:	4602      	mov	r2, r0
 800655a:	4631      	mov	r1, r6
 800655c:	4628      	mov	r0, r5
 800655e:	f000 fc5f 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),endSimbol, 2);
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	4628      	mov	r0, r5
 8006566:	f7f9 fe33 	bl	80001d0 <strlen>
 800656a:	4bb0      	ldr	r3, [pc, #704]	; (800682c <uart_comms+0x5cc>)
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006570:	6824      	ldr	r4, [r4, #0]
 8006572:	4620      	mov	r0, r4
 8006574:	f7f9 fe2c 	bl	80001d0 <strlen>
 8006578:	b282      	uxth	r2, r0
 800657a:	4621      	mov	r1, r4
 800657c:	48ac      	ldr	r0, [pc, #688]	; (8006830 <uart_comms+0x5d0>)
 800657e:	f7fd fb53 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 8006582:	e6d4      	b.n	800632e <uart_comms+0xce>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8006584:	4cab      	ldr	r4, [pc, #684]	; (8006834 <uart_comms+0x5d4>)
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	22ca      	movs	r2, #202	; 0xca
 800658a:	625a      	str	r2, [r3, #36]	; 0x24
 800658c:	2253      	movs	r2, #83	; 0x53
 800658e:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8006590:	4620      	mov	r0, r4
 8006592:	f7fd f8d4 	bl	800373e <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8006596:	49a8      	ldr	r1, [pc, #672]	; (8006838 <uart_comms+0x5d8>)
 8006598:	4ba8      	ldr	r3, [pc, #672]	; (800683c <uart_comms+0x5dc>)
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	f000 fd34 	bl	8007008 <strtok>
 80065a0:	4ea7      	ldr	r6, [pc, #668]	; (8006840 <uart_comms+0x5e0>)
 80065a2:	6030      	str	r0, [r6, #0]
			timeOfRTC->Hours = strtol(heating_info, NULL,10);
 80065a4:	4da7      	ldr	r5, [pc, #668]	; (8006844 <uart_comms+0x5e4>)
 80065a6:	682f      	ldr	r7, [r5, #0]
 80065a8:	220a      	movs	r2, #10
 80065aa:	2100      	movs	r1, #0
 80065ac:	f000 fe00 	bl	80071b0 <strtol>
 80065b0:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 80065b2:	49a5      	ldr	r1, [pc, #660]	; (8006848 <uart_comms+0x5e8>)
 80065b4:	2000      	movs	r0, #0
 80065b6:	f000 fd27 	bl	8007008 <strtok>
 80065ba:	6030      	str	r0, [r6, #0]
			timeOfRTC->Minutes = strtol(heating_info, NULL,10);
 80065bc:	682f      	ldr	r7, [r5, #0]
 80065be:	220a      	movs	r2, #10
 80065c0:	2100      	movs	r1, #0
 80065c2:	f000 fdf5 	bl	80071b0 <strtol>
 80065c6:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 80065c8:	49a0      	ldr	r1, [pc, #640]	; (800684c <uart_comms+0x5ec>)
 80065ca:	2000      	movs	r0, #0
 80065cc:	f000 fd1c 	bl	8007008 <strtok>
 80065d0:	6030      	str	r0, [r6, #0]
			timeOfRTC->Seconds = strtol(heating_info, NULL,10);
 80065d2:	682e      	ldr	r6, [r5, #0]
 80065d4:	220a      	movs	r2, #10
 80065d6:	2100      	movs	r1, #0
 80065d8:	f000 fdea 	bl	80071b0 <strtol>
 80065dc:	70b0      	strb	r0, [r6, #2]
			HAL_RTC_SetTime(&hrtc, timeOfRTC, RTC_FORMAT_BIN);
 80065de:	2200      	movs	r2, #0
 80065e0:	6829      	ldr	r1, [r5, #0]
 80065e2:	4620      	mov	r0, r4
 80065e4:	f7fd f936 	bl	8003854 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 80065e8:	4e99      	ldr	r6, [pc, #612]	; (8006850 <uart_comms+0x5f0>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	6831      	ldr	r1, [r6, #0]
 80065ee:	4620      	mov	r0, r4
 80065f0:	f7fd f9af 	bl	8003952 <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	22ff      	movs	r2, #255	; 0xff
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 80065fa:	2200      	movs	r2, #0
 80065fc:	6829      	ldr	r1, [r5, #0]
 80065fe:	4620      	mov	r0, r4
 8006600:	f7fd fa1d 	bl	8003a3e <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8006604:	2200      	movs	r2, #0
 8006606:	6831      	ldr	r1, [r6, #0]
 8006608:	4620      	mov	r0, r4
 800660a:	f7fd fa43 	bl	8003a94 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 800660e:	4b82      	ldr	r3, [pc, #520]	; (8006818 <uart_comms+0x5b8>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4990      	ldr	r1, [pc, #576]	; (8006854 <uart_comms+0x5f4>)
 8006614:	6809      	ldr	r1, [r1, #0]
 8006616:	8809      	ldrh	r1, [r1, #0]
 8006618:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2,endSimbol, 2);
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	4983      	ldr	r1, [pc, #524]	; (800682c <uart_comms+0x5cc>)
 800661e:	8809      	ldrh	r1, [r1, #0]
 8006620:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8006622:	681c      	ldr	r4, [r3, #0]
 8006624:	4620      	mov	r0, r4
 8006626:	f7f9 fdd3 	bl	80001d0 <strlen>
 800662a:	b282      	uxth	r2, r0
 800662c:	4621      	mov	r1, r4
 800662e:	4880      	ldr	r0, [pc, #512]	; (8006830 <uart_comms+0x5d0>)
 8006630:	f7fd fafa 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 8006634:	e67b      	b.n	800632e <uart_comms+0xce>
			HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 8006636:	4e83      	ldr	r6, [pc, #524]	; (8006844 <uart_comms+0x5e4>)
 8006638:	4c7e      	ldr	r4, [pc, #504]	; (8006834 <uart_comms+0x5d4>)
 800663a:	2200      	movs	r2, #0
 800663c:	6831      	ldr	r1, [r6, #0]
 800663e:	4620      	mov	r0, r4
 8006640:	f7fd f9fd 	bl	8003a3e <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8006644:	2200      	movs	r2, #0
 8006646:	4b82      	ldr	r3, [pc, #520]	; (8006850 <uart_comms+0x5f0>)
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	4620      	mov	r0, r4
 800664c:	f7fd fa22 	bl	8003a94 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 8006650:	4c71      	ldr	r4, [pc, #452]	; (8006818 <uart_comms+0x5b8>)
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	4a7f      	ldr	r2, [pc, #508]	; (8006854 <uart_comms+0x5f4>)
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	8812      	ldrh	r2, [r2, #0]
 800665a:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800681c <uart_comms+0x5bc>
 8006662:	f898 2000 	ldrb.w	r2, [r8]
 8006666:	709a      	strb	r2, [r3, #2]
			itoa((timeOfRTC->Hours),temp_time_var,10  );
 8006668:	6833      	ldr	r3, [r6, #0]
 800666a:	4d7b      	ldr	r5, [pc, #492]	; (8006858 <uart_comms+0x5f8>)
 800666c:	220a      	movs	r2, #10
 800666e:	6829      	ldr	r1, [r5, #0]
 8006670:	7818      	ldrb	r0, [r3, #0]
 8006672:	f000 fbcb 	bl	8006e0c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8006676:	6827      	ldr	r7, [r4, #0]
 8006678:	4638      	mov	r0, r7
 800667a:	f7f9 fda9 	bl	80001d0 <strlen>
 800667e:	4407      	add	r7, r0
 8006680:	f8d5 9000 	ldr.w	r9, [r5]
 8006684:	4648      	mov	r0, r9
 8006686:	f7f9 fda3 	bl	80001d0 <strlen>
 800668a:	4602      	mov	r2, r0
 800668c:	4649      	mov	r1, r9
 800668e:	4638      	mov	r0, r7
 8006690:	f000 fbc6 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006694:	6827      	ldr	r7, [r4, #0]
 8006696:	4638      	mov	r0, r7
 8006698:	f7f9 fd9a 	bl	80001d0 <strlen>
 800669c:	f898 3000 	ldrb.w	r3, [r8]
 80066a0:	543b      	strb	r3, [r7, r0]
			itoa((timeOfRTC->Minutes),temp_time_var,10  );
 80066a2:	6833      	ldr	r3, [r6, #0]
 80066a4:	220a      	movs	r2, #10
 80066a6:	6829      	ldr	r1, [r5, #0]
 80066a8:	7858      	ldrb	r0, [r3, #1]
 80066aa:	f000 fbaf 	bl	8006e0c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 80066ae:	6827      	ldr	r7, [r4, #0]
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7f9 fd8d 	bl	80001d0 <strlen>
 80066b6:	4407      	add	r7, r0
 80066b8:	f8d5 9000 	ldr.w	r9, [r5]
 80066bc:	4648      	mov	r0, r9
 80066be:	f7f9 fd87 	bl	80001d0 <strlen>
 80066c2:	4602      	mov	r2, r0
 80066c4:	4649      	mov	r1, r9
 80066c6:	4638      	mov	r0, r7
 80066c8:	f000 fbaa 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80066cc:	6827      	ldr	r7, [r4, #0]
 80066ce:	4638      	mov	r0, r7
 80066d0:	f7f9 fd7e 	bl	80001d0 <strlen>
 80066d4:	f898 3000 	ldrb.w	r3, [r8]
 80066d8:	543b      	strb	r3, [r7, r0]
			itoa((timeOfRTC->Seconds),temp_time_var,10  );
 80066da:	6833      	ldr	r3, [r6, #0]
 80066dc:	220a      	movs	r2, #10
 80066de:	6829      	ldr	r1, [r5, #0]
 80066e0:	7898      	ldrb	r0, [r3, #2]
 80066e2:	f000 fb93 	bl	8006e0c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 80066e6:	6826      	ldr	r6, [r4, #0]
 80066e8:	4630      	mov	r0, r6
 80066ea:	f7f9 fd71 	bl	80001d0 <strlen>
 80066ee:	4406      	add	r6, r0
 80066f0:	682d      	ldr	r5, [r5, #0]
 80066f2:	4628      	mov	r0, r5
 80066f4:	f7f9 fd6c 	bl	80001d0 <strlen>
 80066f8:	4602      	mov	r2, r0
 80066fa:	4629      	mov	r1, r5
 80066fc:	4630      	mov	r0, r6
 80066fe:	f000 fb8f 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8006702:	6825      	ldr	r5, [r4, #0]
 8006704:	4628      	mov	r0, r5
 8006706:	f7f9 fd63 	bl	80001d0 <strlen>
 800670a:	4b48      	ldr	r3, [pc, #288]	; (800682c <uart_comms+0x5cc>)
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006710:	6824      	ldr	r4, [r4, #0]
 8006712:	4620      	mov	r0, r4
 8006714:	f7f9 fd5c 	bl	80001d0 <strlen>
 8006718:	b282      	uxth	r2, r0
 800671a:	4621      	mov	r1, r4
 800671c:	4844      	ldr	r0, [pc, #272]	; (8006830 <uart_comms+0x5d0>)
 800671e:	f7fd fa83 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 8006722:	e604      	b.n	800632e <uart_comms+0xce>
			if(uart_command[3] == '1'){ // first heating schedule
 8006724:	78c3      	ldrb	r3, [r0, #3]
 8006726:	2b31      	cmp	r3, #49	; 0x31
 8006728:	d019      	beq.n	800675e <uart_comms+0x4fe>
			else if(uart_command[3] == '2'){ // second heating schedule
 800672a:	2b32      	cmp	r3, #50	; 0x32
 800672c:	f000 809a 	beq.w	8006864 <uart_comms+0x604>
			else if(uart_command[3] == '3'){ // 3rd heating schedule
 8006730:	2b33      	cmp	r3, #51	; 0x33
 8006732:	f000 80f3 	beq.w	800691c <uart_comms+0x6bc>
			memcpy(return_value, uart_command, 2);
 8006736:	4b38      	ldr	r3, [pc, #224]	; (8006818 <uart_comms+0x5b8>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4946      	ldr	r1, [pc, #280]	; (8006854 <uart_comms+0x5f4>)
 800673c:	6809      	ldr	r1, [r1, #0]
 800673e:	8809      	ldrh	r1, [r1, #0]
 8006740:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	4939      	ldr	r1, [pc, #228]	; (800682c <uart_comms+0x5cc>)
 8006746:	8809      	ldrh	r1, [r1, #0]
 8006748:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 800674a:	681c      	ldr	r4, [r3, #0]
 800674c:	4620      	mov	r0, r4
 800674e:	f7f9 fd3f 	bl	80001d0 <strlen>
 8006752:	b282      	uxth	r2, r0
 8006754:	4621      	mov	r1, r4
 8006756:	4836      	ldr	r0, [pc, #216]	; (8006830 <uart_comms+0x5d0>)
 8006758:	f7fd fa66 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 800675c:	e5e7      	b.n	800632e <uart_comms+0xce>
				heating_info = strtok((char*)uart_command_copy, ",");
 800675e:	4e3a      	ldr	r6, [pc, #232]	; (8006848 <uart_comms+0x5e8>)
 8006760:	4631      	mov	r1, r6
 8006762:	f000 fc51 	bl	8007008 <strtok>
 8006766:	4d36      	ldr	r5, [pc, #216]	; (8006840 <uart_comms+0x5e0>)
 8006768:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 800676a:	4631      	mov	r1, r6
 800676c:	2000      	movs	r0, #0
 800676e:	f000 fc4b 	bl	8007008 <strtok>
 8006772:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 8006774:	4631      	mov	r1, r6
 8006776:	2000      	movs	r0, #0
 8006778:	f000 fc46 	bl	8007008 <strtok>
 800677c:	6028      	str	r0, [r5, #0]
				time_intervals[0] = 3600*strtol(heating_info, NULL,10);
 800677e:	220a      	movs	r2, #10
 8006780:	2100      	movs	r1, #0
 8006782:	f000 fd15 	bl	80071b0 <strtol>
 8006786:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 800678a:	fb08 f000 	mul.w	r0, r8, r0
 800678e:	4c33      	ldr	r4, [pc, #204]	; (800685c <uart_comms+0x5fc>)
 8006790:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 8006792:	4631      	mov	r1, r6
 8006794:	2000      	movs	r0, #0
 8006796:	f000 fc37 	bl	8007008 <strtok>
 800679a:	6028      	str	r0, [r5, #0]
				time_intervals[0] = time_intervals[0] + strtol(heating_info, NULL,10)*60;
 800679c:	f8d4 9000 	ldr.w	r9, [r4]
 80067a0:	220a      	movs	r2, #10
 80067a2:	2100      	movs	r1, #0
 80067a4:	f000 fd04 	bl	80071b0 <strtol>
 80067a8:	273c      	movs	r7, #60	; 0x3c
 80067aa:	fb07 9000 	mla	r0, r7, r0, r9
 80067ae:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 80067b0:	4631      	mov	r1, r6
 80067b2:	2000      	movs	r0, #0
 80067b4:	f000 fc28 	bl	8007008 <strtok>
 80067b8:	6028      	str	r0, [r5, #0]
				time_intervals[0] = time_intervals[0] + strtol(heating_info, NULL,10);
 80067ba:	f8d4 9000 	ldr.w	r9, [r4]
 80067be:	220a      	movs	r2, #10
 80067c0:	2100      	movs	r1, #0
 80067c2:	f000 fcf5 	bl	80071b0 <strtol>
 80067c6:	4448      	add	r0, r9
 80067c8:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 80067ca:	4631      	mov	r1, r6
 80067cc:	2000      	movs	r0, #0
 80067ce:	f000 fc1b 	bl	8007008 <strtok>
 80067d2:	6028      	str	r0, [r5, #0]
				time_intervals[1] = 3600*strtol(heating_info, NULL,10);
 80067d4:	220a      	movs	r2, #10
 80067d6:	2100      	movs	r1, #0
 80067d8:	f000 fcea 	bl	80071b0 <strtol>
 80067dc:	fb08 f000 	mul.w	r0, r8, r0
 80067e0:	6060      	str	r0, [r4, #4]
				heating_info = (strtok(NULL, ","));
 80067e2:	4631      	mov	r1, r6
 80067e4:	2000      	movs	r0, #0
 80067e6:	f000 fc0f 	bl	8007008 <strtok>
 80067ea:	6028      	str	r0, [r5, #0]
				time_intervals[1] = time_intervals[1] + strtol(heating_info, NULL,10)*60;
 80067ec:	6866      	ldr	r6, [r4, #4]
 80067ee:	220a      	movs	r2, #10
 80067f0:	2100      	movs	r1, #0
 80067f2:	f000 fcdd 	bl	80071b0 <strtol>
 80067f6:	fb07 6000 	mla	r0, r7, r0, r6
 80067fa:	6060      	str	r0, [r4, #4]
				heating_info = (strtok(NULL, "\r\n"));
 80067fc:	4918      	ldr	r1, [pc, #96]	; (8006860 <uart_comms+0x600>)
 80067fe:	2000      	movs	r0, #0
 8006800:	f000 fc02 	bl	8007008 <strtok>
 8006804:	6028      	str	r0, [r5, #0]
				time_intervals[1] = time_intervals[1] + strtol(heating_info, NULL,10);
 8006806:	6865      	ldr	r5, [r4, #4]
 8006808:	220a      	movs	r2, #10
 800680a:	2100      	movs	r1, #0
 800680c:	f000 fcd0 	bl	80071b0 <strtol>
 8006810:	4428      	add	r0, r5
 8006812:	6060      	str	r0, [r4, #4]
 8006814:	e78f      	b.n	8006736 <uart_comms+0x4d6>
 8006816:	bf00      	nop
 8006818:	200002e0 	.word	0x200002e0
 800681c:	20000004 	.word	0x20000004
 8006820:	200002ec 	.word	0x200002ec
 8006824:	200002f8 	.word	0x200002f8
 8006828:	08007b90 	.word	0x08007b90
 800682c:	20000008 	.word	0x20000008
 8006830:	20000440 	.word	0x20000440
 8006834:	200004b0 	.word	0x200004b0
 8006838:	08007bc8 	.word	0x08007bc8
 800683c:	20000308 	.word	0x20000308
 8006840:	200002bc 	.word	0x200002bc
 8006844:	200002fc 	.word	0x200002fc
 8006848:	08007bcc 	.word	0x08007bcc
 800684c:	08007bd0 	.word	0x08007bd0
 8006850:	2000028c 	.word	0x2000028c
 8006854:	20000304 	.word	0x20000304
 8006858:	200002f4 	.word	0x200002f4
 800685c:	200005b0 	.word	0x200005b0
 8006860:	08007bd4 	.word	0x08007bd4
				heating_info = strtok((char*)uart_command_copy, ",");
 8006864:	4eb7      	ldr	r6, [pc, #732]	; (8006b44 <uart_comms+0x8e4>)
 8006866:	4631      	mov	r1, r6
 8006868:	f000 fbce 	bl	8007008 <strtok>
 800686c:	4db6      	ldr	r5, [pc, #728]	; (8006b48 <uart_comms+0x8e8>)
 800686e:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 8006870:	4631      	mov	r1, r6
 8006872:	2000      	movs	r0, #0
 8006874:	f000 fbc8 	bl	8007008 <strtok>
 8006878:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 800687a:	4631      	mov	r1, r6
 800687c:	2000      	movs	r0, #0
 800687e:	f000 fbc3 	bl	8007008 <strtok>
 8006882:	6028      	str	r0, [r5, #0]
				time_intervals[2] = 3600*strtol(heating_info, NULL,10);
 8006884:	220a      	movs	r2, #10
 8006886:	2100      	movs	r1, #0
 8006888:	f000 fc92 	bl	80071b0 <strtol>
 800688c:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 8006890:	fb08 f000 	mul.w	r0, r8, r0
 8006894:	4cad      	ldr	r4, [pc, #692]	; (8006b4c <uart_comms+0x8ec>)
 8006896:	60a0      	str	r0, [r4, #8]
				heating_info = (strtok(NULL, ","));
 8006898:	4631      	mov	r1, r6
 800689a:	2000      	movs	r0, #0
 800689c:	f000 fbb4 	bl	8007008 <strtok>
 80068a0:	6028      	str	r0, [r5, #0]
				time_intervals[2] = time_intervals[2] + strtol(heating_info, NULL,10)*60;
 80068a2:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80068a6:	220a      	movs	r2, #10
 80068a8:	2100      	movs	r1, #0
 80068aa:	f000 fc81 	bl	80071b0 <strtol>
 80068ae:	273c      	movs	r7, #60	; 0x3c
 80068b0:	fb07 9000 	mla	r0, r7, r0, r9
 80068b4:	60a0      	str	r0, [r4, #8]
				heating_info = (strtok(NULL, ","));
 80068b6:	4631      	mov	r1, r6
 80068b8:	2000      	movs	r0, #0
 80068ba:	f000 fba5 	bl	8007008 <strtok>
 80068be:	6028      	str	r0, [r5, #0]
				time_intervals[2] = time_intervals[2] + strtol(heating_info, NULL,10);
 80068c0:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80068c4:	220a      	movs	r2, #10
 80068c6:	2100      	movs	r1, #0
 80068c8:	f000 fc72 	bl	80071b0 <strtol>
 80068cc:	4448      	add	r0, r9
 80068ce:	60a0      	str	r0, [r4, #8]
				heating_info = (strtok(NULL, ","));
 80068d0:	4631      	mov	r1, r6
 80068d2:	2000      	movs	r0, #0
 80068d4:	f000 fb98 	bl	8007008 <strtok>
 80068d8:	6028      	str	r0, [r5, #0]
				time_intervals[3] = 3600*strtol(heating_info, NULL,10);
 80068da:	220a      	movs	r2, #10
 80068dc:	2100      	movs	r1, #0
 80068de:	f000 fc67 	bl	80071b0 <strtol>
 80068e2:	fb08 f000 	mul.w	r0, r8, r0
 80068e6:	60e0      	str	r0, [r4, #12]
				heating_info = (strtok(NULL, ","));
 80068e8:	4631      	mov	r1, r6
 80068ea:	2000      	movs	r0, #0
 80068ec:	f000 fb8c 	bl	8007008 <strtok>
 80068f0:	6028      	str	r0, [r5, #0]
				time_intervals[3] = time_intervals[3] + strtol(heating_info, NULL,10)*60;
 80068f2:	68e6      	ldr	r6, [r4, #12]
 80068f4:	220a      	movs	r2, #10
 80068f6:	2100      	movs	r1, #0
 80068f8:	f000 fc5a 	bl	80071b0 <strtol>
 80068fc:	fb07 6000 	mla	r0, r7, r0, r6
 8006900:	60e0      	str	r0, [r4, #12]
				heating_info = (strtok(NULL, "\r\n"));
 8006902:	4993      	ldr	r1, [pc, #588]	; (8006b50 <uart_comms+0x8f0>)
 8006904:	2000      	movs	r0, #0
 8006906:	f000 fb7f 	bl	8007008 <strtok>
 800690a:	6028      	str	r0, [r5, #0]
				time_intervals[3] = time_intervals[3] + strtol(heating_info, NULL,10);
 800690c:	68e5      	ldr	r5, [r4, #12]
 800690e:	220a      	movs	r2, #10
 8006910:	2100      	movs	r1, #0
 8006912:	f000 fc4d 	bl	80071b0 <strtol>
 8006916:	4428      	add	r0, r5
 8006918:	60e0      	str	r0, [r4, #12]
 800691a:	e70c      	b.n	8006736 <uart_comms+0x4d6>
				heating_info = strtok((char*)uart_command_copy, ",");
 800691c:	4e89      	ldr	r6, [pc, #548]	; (8006b44 <uart_comms+0x8e4>)
 800691e:	4631      	mov	r1, r6
 8006920:	f000 fb72 	bl	8007008 <strtok>
 8006924:	4d88      	ldr	r5, [pc, #544]	; (8006b48 <uart_comms+0x8e8>)
 8006926:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 8006928:	4631      	mov	r1, r6
 800692a:	2000      	movs	r0, #0
 800692c:	f000 fb6c 	bl	8007008 <strtok>
 8006930:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 8006932:	4631      	mov	r1, r6
 8006934:	2000      	movs	r0, #0
 8006936:	f000 fb67 	bl	8007008 <strtok>
 800693a:	6028      	str	r0, [r5, #0]
				time_intervals[4] = 3600*strtol(heating_info, NULL,10);
 800693c:	220a      	movs	r2, #10
 800693e:	2100      	movs	r1, #0
 8006940:	f000 fc36 	bl	80071b0 <strtol>
 8006944:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 8006948:	fb08 f000 	mul.w	r0, r8, r0
 800694c:	4c7f      	ldr	r4, [pc, #508]	; (8006b4c <uart_comms+0x8ec>)
 800694e:	6120      	str	r0, [r4, #16]
				heating_info = (strtok(NULL, ","));
 8006950:	4631      	mov	r1, r6
 8006952:	2000      	movs	r0, #0
 8006954:	f000 fb58 	bl	8007008 <strtok>
 8006958:	6028      	str	r0, [r5, #0]
				time_intervals[4] = time_intervals[4] + strtol(heating_info, NULL,10)*60;
 800695a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800695e:	220a      	movs	r2, #10
 8006960:	2100      	movs	r1, #0
 8006962:	f000 fc25 	bl	80071b0 <strtol>
 8006966:	273c      	movs	r7, #60	; 0x3c
 8006968:	fb07 9000 	mla	r0, r7, r0, r9
 800696c:	6120      	str	r0, [r4, #16]
				heating_info = (strtok(NULL, ","));
 800696e:	4631      	mov	r1, r6
 8006970:	2000      	movs	r0, #0
 8006972:	f000 fb49 	bl	8007008 <strtok>
 8006976:	6028      	str	r0, [r5, #0]
				time_intervals[4] = time_intervals[4] + strtol(heating_info, NULL,10);
 8006978:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800697c:	220a      	movs	r2, #10
 800697e:	2100      	movs	r1, #0
 8006980:	f000 fc16 	bl	80071b0 <strtol>
 8006984:	4448      	add	r0, r9
 8006986:	6120      	str	r0, [r4, #16]
				heating_info = (strtok(NULL, ","));
 8006988:	4631      	mov	r1, r6
 800698a:	2000      	movs	r0, #0
 800698c:	f000 fb3c 	bl	8007008 <strtok>
 8006990:	6028      	str	r0, [r5, #0]
				time_intervals[5] = 3600*strtol(heating_info, NULL,10);
 8006992:	220a      	movs	r2, #10
 8006994:	2100      	movs	r1, #0
 8006996:	f000 fc0b 	bl	80071b0 <strtol>
 800699a:	fb08 f000 	mul.w	r0, r8, r0
 800699e:	6160      	str	r0, [r4, #20]
				heating_info = (strtok(NULL, ","));
 80069a0:	4631      	mov	r1, r6
 80069a2:	2000      	movs	r0, #0
 80069a4:	f000 fb30 	bl	8007008 <strtok>
 80069a8:	6028      	str	r0, [r5, #0]
				time_intervals[5] = time_intervals[5] + strtol(heating_info, NULL,10)*60;
 80069aa:	6966      	ldr	r6, [r4, #20]
 80069ac:	220a      	movs	r2, #10
 80069ae:	2100      	movs	r1, #0
 80069b0:	f000 fbfe 	bl	80071b0 <strtol>
 80069b4:	fb07 6000 	mla	r0, r7, r0, r6
 80069b8:	6160      	str	r0, [r4, #20]
				heating_info = (strtok(NULL, "\r\n"));
 80069ba:	4965      	ldr	r1, [pc, #404]	; (8006b50 <uart_comms+0x8f0>)
 80069bc:	2000      	movs	r0, #0
 80069be:	f000 fb23 	bl	8007008 <strtok>
 80069c2:	6028      	str	r0, [r5, #0]
				time_intervals[5] = time_intervals[5] + strtol(heating_info, NULL,10);;
 80069c4:	6965      	ldr	r5, [r4, #20]
 80069c6:	220a      	movs	r2, #10
 80069c8:	2100      	movs	r1, #0
 80069ca:	f000 fbf1 	bl	80071b0 <strtol>
 80069ce:	4428      	add	r0, r5
 80069d0:	6160      	str	r0, [r4, #20]
 80069d2:	e6b0      	b.n	8006736 <uart_comms+0x4d6>
			memcpy(return_value, uart_command, 2);
 80069d4:	4c5f      	ldr	r4, [pc, #380]	; (8006b54 <uart_comms+0x8f4>)
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	8802      	ldrh	r2, [r0, #0]
 80069da:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	4d5e      	ldr	r5, [pc, #376]	; (8006b58 <uart_comms+0x8f8>)
 80069e0:	782f      	ldrb	r7, [r5, #0]
 80069e2:	709f      	strb	r7, [r3, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 80069e4:	6826      	ldr	r6, [r4, #0]
 80069e6:	3603      	adds	r6, #3
 80069e8:	4b5c      	ldr	r3, [pc, #368]	; (8006b5c <uart_comms+0x8fc>)
 80069ea:	f8d3 8000 	ldr.w	r8, [r3]
 80069ee:	4640      	mov	r0, r8
 80069f0:	f7f9 fbee 	bl	80001d0 <strlen>
 80069f4:	4602      	mov	r2, r0
 80069f6:	4641      	mov	r1, r8
 80069f8:	4630      	mov	r0, r6
 80069fa:	f000 fa11 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80069fe:	6826      	ldr	r6, [r4, #0]
 8006a00:	4630      	mov	r0, r6
 8006a02:	f7f9 fbe5 	bl	80001d0 <strlen>
 8006a06:	5437      	strb	r7, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8006a08:	6826      	ldr	r6, [r4, #0]
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f7f9 fbe0 	bl	80001d0 <strlen>
 8006a10:	4406      	add	r6, r0
 8006a12:	4b53      	ldr	r3, [pc, #332]	; (8006b60 <uart_comms+0x900>)
 8006a14:	681f      	ldr	r7, [r3, #0]
 8006a16:	4638      	mov	r0, r7
 8006a18:	f7f9 fbda 	bl	80001d0 <strlen>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	4639      	mov	r1, r7
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f9fd 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006a26:	6826      	ldr	r6, [r4, #0]
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7f9 fbd1 	bl	80001d0 <strlen>
 8006a2e:	782b      	ldrb	r3, [r5, #0]
 8006a30:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 8006a32:	6826      	ldr	r6, [r4, #0]
 8006a34:	4630      	mov	r0, r6
 8006a36:	f7f9 fbcb 	bl	80001d0 <strlen>
 8006a3a:	4406      	add	r6, r0
 8006a3c:	4b49      	ldr	r3, [pc, #292]	; (8006b64 <uart_comms+0x904>)
 8006a3e:	681f      	ldr	r7, [r3, #0]
 8006a40:	4638      	mov	r0, r7
 8006a42:	f7f9 fbc5 	bl	80001d0 <strlen>
 8006a46:	4602      	mov	r2, r0
 8006a48:	4639      	mov	r1, r7
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f000 f9e8 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006a50:	6826      	ldr	r6, [r4, #0]
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7f9 fbbc 	bl	80001d0 <strlen>
 8006a58:	782b      	ldrb	r3, [r5, #0]
 8006a5a:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 8006a5c:	6826      	ldr	r6, [r4, #0]
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f7f9 fbb6 	bl	80001d0 <strlen>
 8006a64:	4406      	add	r6, r0
 8006a66:	4b40      	ldr	r3, [pc, #256]	; (8006b68 <uart_comms+0x908>)
 8006a68:	681f      	ldr	r7, [r3, #0]
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f7f9 fbb0 	bl	80001d0 <strlen>
 8006a70:	4602      	mov	r2, r0
 8006a72:	4639      	mov	r1, r7
 8006a74:	4630      	mov	r0, r6
 8006a76:	f000 f9d3 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006a7a:	6826      	ldr	r6, [r4, #0]
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f7f9 fba7 	bl	80001d0 <strlen>
 8006a82:	782b      	ldrb	r3, [r5, #0]
 8006a84:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8006a86:	6826      	ldr	r6, [r4, #0]
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f7f9 fba1 	bl	80001d0 <strlen>
 8006a8e:	4406      	add	r6, r0
 8006a90:	4b36      	ldr	r3, [pc, #216]	; (8006b6c <uart_comms+0x90c>)
 8006a92:	681f      	ldr	r7, [r3, #0]
 8006a94:	4638      	mov	r0, r7
 8006a96:	f7f9 fb9b 	bl	80001d0 <strlen>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f000 f9be 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006aa4:	6826      	ldr	r6, [r4, #0]
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7f9 fb92 	bl	80001d0 <strlen>
 8006aac:	782b      	ldrb	r3, [r5, #0]
 8006aae:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8006ab0:	6826      	ldr	r6, [r4, #0]
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7f9 fb8c 	bl	80001d0 <strlen>
 8006ab8:	4406      	add	r6, r0
 8006aba:	4b2d      	ldr	r3, [pc, #180]	; (8006b70 <uart_comms+0x910>)
 8006abc:	681f      	ldr	r7, [r3, #0]
 8006abe:	4638      	mov	r0, r7
 8006ac0:	f7f9 fb86 	bl	80001d0 <strlen>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 f9a9 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006ace:	6824      	ldr	r4, [r4, #0]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f7f9 fb7d 	bl	80001d0 <strlen>
 8006ad6:	782b      	ldrb	r3, [r5, #0]
 8006ad8:	5423      	strb	r3, [r4, r0]
			if(valve_state == valve_OPEN){
 8006ada:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <uart_comms+0x914>)
 8006adc:	681c      	ldr	r4, [r3, #0]
 8006ade:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <uart_comms+0x918>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	d01f      	beq.n	8006b24 <uart_comms+0x8c4>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <uart_comms+0x8f4>)
 8006ae6:	681d      	ldr	r5, [r3, #0]
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f7f9 fb71 	bl	80001d0 <strlen>
 8006aee:	4405      	add	r5, r0
 8006af0:	4620      	mov	r0, r4
 8006af2:	f7f9 fb6d 	bl	80001d0 <strlen>
 8006af6:	4602      	mov	r2, r0
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f990 	bl	8006e20 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8006b00:	4c14      	ldr	r4, [pc, #80]	; (8006b54 <uart_comms+0x8f4>)
 8006b02:	6825      	ldr	r5, [r4, #0]
 8006b04:	4628      	mov	r0, r5
 8006b06:	f7f9 fb63 	bl	80001d0 <strlen>
 8006b0a:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <uart_comms+0x91c>)
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006b10:	6824      	ldr	r4, [r4, #0]
 8006b12:	4620      	mov	r0, r4
 8006b14:	f7f9 fb5c 	bl	80001d0 <strlen>
 8006b18:	b282      	uxth	r2, r0
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4818      	ldr	r0, [pc, #96]	; (8006b80 <uart_comms+0x920>)
 8006b1e:	f7fd f883 	bl	8003c28 <HAL_UART_Transmit_IT>
			break;
 8006b22:	e404      	b.n	800632e <uart_comms+0xce>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8006b24:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <uart_comms+0x8f4>)
 8006b26:	681d      	ldr	r5, [r3, #0]
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f7f9 fb51 	bl	80001d0 <strlen>
 8006b2e:	4405      	add	r5, r0
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7f9 fb4d 	bl	80001d0 <strlen>
 8006b36:	1e42      	subs	r2, r0, #1
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f000 f970 	bl	8006e20 <memcpy>
 8006b40:	e7de      	b.n	8006b00 <uart_comms+0x8a0>
 8006b42:	bf00      	nop
 8006b44:	08007bcc 	.word	0x08007bcc
 8006b48:	200002bc 	.word	0x200002bc
 8006b4c:	200005b0 	.word	0x200005b0
 8006b50:	08007bd4 	.word	0x08007bd4
 8006b54:	200002e0 	.word	0x200002e0
 8006b58:	20000004 	.word	0x20000004
 8006b5c:	20000288 	.word	0x20000288
 8006b60:	2000031c 	.word	0x2000031c
 8006b64:	2000027c 	.word	0x2000027c
 8006b68:	200002a4 	.word	0x200002a4
 8006b6c:	20000300 	.word	0x20000300
 8006b70:	200002b8 	.word	0x200002b8
 8006b74:	20000310 	.word	0x20000310
 8006b78:	20000054 	.word	0x20000054
 8006b7c:	20000008 	.word	0x20000008
 8006b80:	20000440 	.word	0x20000440
			memset(log_receiced_num,0x00,2);
 8006b84:	4c1f      	ldr	r4, [pc, #124]	; (8006c04 <uart_comms+0x9a4>)
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	2600      	movs	r6, #0
 8006b8a:	801e      	strh	r6, [r3, #0]
			memcpy(log_receiced_num,(uart_command+3), strlen((char*)uart_command)-5);
 8006b8c:	4b1e      	ldr	r3, [pc, #120]	; (8006c08 <uart_comms+0x9a8>)
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	1cc5      	adds	r5, r0, #3
 8006b92:	f7f9 fb1d 	bl	80001d0 <strlen>
 8006b96:	1f42      	subs	r2, r0, #5
 8006b98:	4629      	mov	r1, r5
 8006b9a:	6820      	ldr	r0, [r4, #0]
 8006b9c:	f000 f940 	bl	8006e20 <memcpy>
			*log_receiced_num = strtol((char*)log_receiced_num,NULL,10);
 8006ba0:	6825      	ldr	r5, [r4, #0]
 8006ba2:	220a      	movs	r2, #10
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 fb02 	bl	80071b0 <strtol>
 8006bac:	7028      	strb	r0, [r5, #0]
			if(*log_receiced_num >= log_counter || log_empty){
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <uart_comms+0x9ac>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d202      	bcs.n	8006bc0 <uart_comms+0x960>
 8006bba:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <uart_comms+0x9b0>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b1f3      	cbz	r3, 8006bfe <uart_comms+0x99e>
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)noLoggingData, strlen((char*)noLoggingData));
 8006bc0:	4c14      	ldr	r4, [pc, #80]	; (8006c14 <uart_comms+0x9b4>)
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7f9 fb04 	bl	80001d0 <strlen>
 8006bc8:	b282      	uxth	r2, r0
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4812      	ldr	r0, [pc, #72]	; (8006c18 <uart_comms+0x9b8>)
 8006bce:	f7fd f82b 	bl	8003c28 <HAL_UART_Transmit_IT>
 8006bd2:	f7ff bbac 	b.w	800632e <uart_comms+0xce>
					HAL_UART_Transmit_IT(&huart1,(uint8_t*)(flash_mem_start+64*(*log_receiced_num)), strlen((char*)(flash_mem_start+64*(*log_receiced_num))));
 8006bd6:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <uart_comms+0x9bc>)
 8006bd8:	6814      	ldr	r4, [r2, #0]
 8006bda:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 8006bde:	4620      	mov	r0, r4
 8006be0:	f7f9 faf6 	bl	80001d0 <strlen>
 8006be4:	b282      	uxth	r2, r0
 8006be6:	4621      	mov	r1, r4
 8006be8:	480b      	ldr	r0, [pc, #44]	; (8006c18 <uart_comms+0x9b8>)
 8006bea:	f7fd f81d 	bl	8003c28 <HAL_UART_Transmit_IT>
				for(int i = 0; i<=*log_receiced_num;i++){
 8006bee:	3501      	adds	r5, #1
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <uart_comms+0x9a4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	429d      	cmp	r5, r3
 8006bf8:	dded      	ble.n	8006bd6 <uart_comms+0x976>
 8006bfa:	f7ff bb98 	b.w	800632e <uart_comms+0xce>
 8006bfe:	2500      	movs	r5, #0
 8006c00:	e7f6      	b.n	8006bf0 <uart_comms+0x990>
 8006c02:	bf00      	nop
 8006c04:	200002c8 	.word	0x200002c8
 8006c08:	20000304 	.word	0x20000304
 8006c0c:	200002c4 	.word	0x200002c4
 8006c10:	2000001b 	.word	0x2000001b
 8006c14:	20000020 	.word	0x20000020
 8006c18:	20000440 	.word	0x20000440
 8006c1c:	20000010 	.word	0x20000010

08006c20 <mainLoop>:
ADC_ChannelConfTypeDef Channel_4;
extern uint32_t uwTick;



void mainLoop(){
 8006c20:	b508      	push	{r3, lr}
	  if(rx_flag == 1 ){ 	// UART Comms
 8006c22:	4b3a      	ldr	r3, [pc, #232]	; (8006d0c <mainLoop+0xec>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d026      	beq.n	8006c78 <mainLoop+0x58>
		  rx_flag = 0;
		  uart_comms();
	  }

	  // Seven Segment
	  if(systick_flag == 1 && uwTick%10){
 8006c2a:	4b39      	ldr	r3, [pc, #228]	; (8006d10 <mainLoop+0xf0>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d028      	beq.n	8006c84 <mainLoop+0x64>
		  seven_segment();


	  }

	  if(i2c_counter == 250){
 8006c32:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <mainLoop+0xf4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2bfa      	cmp	r3, #250	; 0xfa
 8006c38:	d039      	beq.n	8006cae <mainLoop+0x8e>
		  touch_flag = 0;
		  handleEvents();
	  }

	  // ADC conversion
	  if(adc_flag == 1){
 8006c3a:	4b37      	ldr	r3, [pc, #220]	; (8006d18 <mainLoop+0xf8>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d03d      	beq.n	8006cbe <mainLoop+0x9e>
		  adc_flag = 0;
		  adc_comms();
	  }
	  // Nothing at the moment
	  if(touch_flag == 1 ){
 8006c42:	4b36      	ldr	r3, [pc, #216]	; (8006d1c <mainLoop+0xfc>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d03f      	beq.n	8006cca <mainLoop+0xaa>
		  touch_flag = 0;
	  }
	  // scheduling of heating and RTC
	  if(RTC_timer_flag == 1){
 8006c4a:	4b35      	ldr	r3, [pc, #212]	; (8006d20 <mainLoop+0x100>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d03f      	beq.n	8006cd2 <mainLoop+0xb2>
			  heating_scheduling();
		  }
	  }

	  // Writing to FLASH
	  if(flash_flag){
 8006c52:	4b34      	ldr	r3, [pc, #208]	; (8006d24 <mainLoop+0x104>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b153      	cbz	r3, 8006c6e <mainLoop+0x4e>
		  flash_flag = 0;
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <mainLoop+0x104>)
 8006c5c:	701a      	strb	r2, [r3, #0]
		  flash_counter += 1;
 8006c5e:	4a32      	ldr	r2, [pc, #200]	; (8006d28 <mainLoop+0x108>)
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	6013      	str	r3, [r2, #0]
		  if(flash_counter == 10000){
 8006c66:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d041      	beq.n	8006cf2 <mainLoop+0xd2>
			  write2Flash();
		  	  }
		  }
	  }
	  // Pumping is occurring
	  if(pump_flag == 1){
 8006c6e:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <mainLoop+0x10c>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d047      	beq.n	8006d06 <mainLoop+0xe6>
 8006c76:	bd08      	pop	{r3, pc}
		  rx_flag = 0;
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4b24      	ldr	r3, [pc, #144]	; (8006d0c <mainLoop+0xec>)
 8006c7c:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8006c7e:	f7ff faef 	bl	8006260 <uart_comms>
 8006c82:	e7d2      	b.n	8006c2a <mainLoop+0xa>
	  if(systick_flag == 1 && uwTick%10){
 8006c84:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <mainLoop+0x110>)
 8006c86:	6819      	ldr	r1, [r3, #0]
 8006c88:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <mainLoop+0x114>)
 8006c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c8e:	08db      	lsrs	r3, r3, #3
 8006c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c94:	005a      	lsls	r2, r3, #1
 8006c96:	4291      	cmp	r1, r2
 8006c98:	d0cb      	beq.n	8006c32 <mainLoop+0x12>
		  systick_flag = 0;
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <mainLoop+0xf0>)
 8006c9e:	701a      	strb	r2, [r3, #0]
		  i2c_counter += 1;
 8006ca0:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <mainLoop+0xf4>)
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	6013      	str	r3, [r2, #0]
		  seven_segment();
 8006ca8:	f7fe fe6c 	bl	8005984 <seven_segment>
 8006cac:	e7c1      	b.n	8006c32 <mainLoop+0x12>
		  i2c_counter = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <mainLoop+0xf4>)
 8006cb2:	6013      	str	r3, [r2, #0]
		  touch_flag = 0;
 8006cb4:	4a19      	ldr	r2, [pc, #100]	; (8006d1c <mainLoop+0xfc>)
 8006cb6:	7013      	strb	r3, [r2, #0]
		  handleEvents();
 8006cb8:	f7fe f9a0 	bl	8004ffc <handleEvents>
 8006cbc:	e7bd      	b.n	8006c3a <mainLoop+0x1a>
		  adc_flag = 0;
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <mainLoop+0xf8>)
 8006cc2:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8006cc4:	f7fd fb4c 	bl	8004360 <adc_comms>
 8006cc8:	e7bb      	b.n	8006c42 <mainLoop+0x22>
		  touch_flag = 0;
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <mainLoop+0xfc>)
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	e7bb      	b.n	8006c4a <mainLoop+0x2a>
		  fake_RTC_timer += 1;
 8006cd2:	4a19      	ldr	r2, [pc, #100]	; (8006d38 <mainLoop+0x118>)
 8006cd4:	8813      	ldrh	r3, [r2, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	8013      	strh	r3, [r2, #0]
		  RTC_timer_flag = 0;
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4a10      	ldr	r2, [pc, #64]	; (8006d20 <mainLoop+0x100>)
 8006ce0:	7011      	strb	r1, [r2, #0]
		  if(fake_RTC_timer == 1000){
 8006ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ce6:	d1b4      	bne.n	8006c52 <mainLoop+0x32>
			  fake_RTC_timer = 0;
 8006ce8:	4b13      	ldr	r3, [pc, #76]	; (8006d38 <mainLoop+0x118>)
 8006cea:	8019      	strh	r1, [r3, #0]
			  heating_scheduling();
 8006cec:	f7fd ff60 	bl	8004bb0 <heating_scheduling>
 8006cf0:	e7af      	b.n	8006c52 <mainLoop+0x32>
			  flash_counter = 0;
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <mainLoop+0x108>)
 8006cf6:	601a      	str	r2, [r3, #0]
			  if(enableFlashLogging){
 8006cf8:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <mainLoop+0x11c>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0b6      	beq.n	8006c6e <mainLoop+0x4e>
			  write2Flash();
 8006d00:	f7fd fc5c 	bl	80045bc <write2Flash>
 8006d04:	e7b3      	b.n	8006c6e <mainLoop+0x4e>
		  liters_pumped();
 8006d06:	f7fe fb59 	bl	80053bc <liters_pumped>
	  }



}
 8006d0a:	e7b4      	b.n	8006c76 <mainLoop+0x56>
 8006d0c:	200002e5 	.word	0x200002e5
 8006d10:	200002f1 	.word	0x200002f1
 8006d14:	200002c0 	.word	0x200002c0
 8006d18:	20000272 	.word	0x20000272
 8006d1c:	20000048 	.word	0x20000048
 8006d20:	20000258 	.word	0x20000258
 8006d24:	2000029c 	.word	0x2000029c
 8006d28:	20000294 	.word	0x20000294
 8006d2c:	200002d4 	.word	0x200002d4
 8006d30:	20000330 	.word	0x20000330
 8006d34:	cccccccd 	.word	0xcccccccd
 8006d38:	20000292 	.word	0x20000292
 8006d3c:	20000291 	.word	0x20000291

08006d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006d44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006d46:	e003      	b.n	8006d50 <LoopCopyDataInit>

08006d48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006d4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006d4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006d4e:	3104      	adds	r1, #4

08006d50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006d50:	480b      	ldr	r0, [pc, #44]	; (8006d80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006d52:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006d54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006d56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006d58:	d3f6      	bcc.n	8006d48 <CopyDataInit>
	ldr	r2, =_sbss
 8006d5a:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006d5c:	e002      	b.n	8006d64 <LoopFillZerobss>

08006d5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006d5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006d60:	f842 3b04 	str.w	r3, [r2], #4

08006d64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006d64:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <LoopForever+0x16>)
	cmp	r2, r3
 8006d66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006d68:	d3f9      	bcc.n	8006d5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006d6a:	f7ff fa45 	bl	80061f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d6e:	f000 f811 	bl	8006d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006d72:	f7fe fda5 	bl	80058c0 <main>

08006d76 <LoopForever>:

LoopForever:
    b LoopForever
 8006d76:	e7fe      	b.n	8006d76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006d78:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006d7c:	08007d48 	.word	0x08007d48
	ldr	r0, =_sdata
 8006d80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006d84:	2000022c 	.word	0x2000022c
	ldr	r2, =_sbss
 8006d88:	20000230 	.word	0x20000230
	ldr	r3, = _ebss
 8006d8c:	2000060c 	.word	0x2000060c

08006d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006d90:	e7fe      	b.n	8006d90 <ADC1_2_IRQHandler>
	...

08006d94 <__libc_init_array>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	4e0d      	ldr	r6, [pc, #52]	; (8006dcc <__libc_init_array+0x38>)
 8006d98:	4c0d      	ldr	r4, [pc, #52]	; (8006dd0 <__libc_init_array+0x3c>)
 8006d9a:	1ba4      	subs	r4, r4, r6
 8006d9c:	10a4      	asrs	r4, r4, #2
 8006d9e:	2500      	movs	r5, #0
 8006da0:	42a5      	cmp	r5, r4
 8006da2:	d109      	bne.n	8006db8 <__libc_init_array+0x24>
 8006da4:	4e0b      	ldr	r6, [pc, #44]	; (8006dd4 <__libc_init_array+0x40>)
 8006da6:	4c0c      	ldr	r4, [pc, #48]	; (8006dd8 <__libc_init_array+0x44>)
 8006da8:	f000 feca 	bl	8007b40 <_init>
 8006dac:	1ba4      	subs	r4, r4, r6
 8006dae:	10a4      	asrs	r4, r4, #2
 8006db0:	2500      	movs	r5, #0
 8006db2:	42a5      	cmp	r5, r4
 8006db4:	d105      	bne.n	8006dc2 <__libc_init_array+0x2e>
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dbc:	4798      	blx	r3
 8006dbe:	3501      	adds	r5, #1
 8006dc0:	e7ee      	b.n	8006da0 <__libc_init_array+0xc>
 8006dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dc6:	4798      	blx	r3
 8006dc8:	3501      	adds	r5, #1
 8006dca:	e7f2      	b.n	8006db2 <__libc_init_array+0x1e>
 8006dcc:	08007d40 	.word	0x08007d40
 8006dd0:	08007d40 	.word	0x08007d40
 8006dd4:	08007d40 	.word	0x08007d40
 8006dd8:	08007d44 	.word	0x08007d44

08006ddc <__itoa>:
 8006ddc:	1e93      	subs	r3, r2, #2
 8006dde:	2b22      	cmp	r3, #34	; 0x22
 8006de0:	b510      	push	{r4, lr}
 8006de2:	460c      	mov	r4, r1
 8006de4:	d904      	bls.n	8006df0 <__itoa+0x14>
 8006de6:	2300      	movs	r3, #0
 8006de8:	700b      	strb	r3, [r1, #0]
 8006dea:	461c      	mov	r4, r3
 8006dec:	4620      	mov	r0, r4
 8006dee:	bd10      	pop	{r4, pc}
 8006df0:	2a0a      	cmp	r2, #10
 8006df2:	d109      	bne.n	8006e08 <__itoa+0x2c>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	da07      	bge.n	8006e08 <__itoa+0x2c>
 8006df8:	232d      	movs	r3, #45	; 0x2d
 8006dfa:	700b      	strb	r3, [r1, #0]
 8006dfc:	4240      	negs	r0, r0
 8006dfe:	2101      	movs	r1, #1
 8006e00:	4421      	add	r1, r4
 8006e02:	f000 f9eb 	bl	80071dc <__utoa>
 8006e06:	e7f1      	b.n	8006dec <__itoa+0x10>
 8006e08:	2100      	movs	r1, #0
 8006e0a:	e7f9      	b.n	8006e00 <__itoa+0x24>

08006e0c <itoa>:
 8006e0c:	f7ff bfe6 	b.w	8006ddc <__itoa>

08006e10 <malloc>:
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <malloc+0xc>)
 8006e12:	4601      	mov	r1, r0
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	f000 b865 	b.w	8006ee4 <_malloc_r>
 8006e1a:	bf00      	nop
 8006e1c:	20000058 	.word	0x20000058

08006e20 <memcpy>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	1e43      	subs	r3, r0, #1
 8006e24:	440a      	add	r2, r1
 8006e26:	4291      	cmp	r1, r2
 8006e28:	d100      	bne.n	8006e2c <memcpy+0xc>
 8006e2a:	bd10      	pop	{r4, pc}
 8006e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e34:	e7f7      	b.n	8006e26 <memcpy+0x6>

08006e36 <memset>:
 8006e36:	4402      	add	r2, r0
 8006e38:	4603      	mov	r3, r0
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d100      	bne.n	8006e40 <memset+0xa>
 8006e3e:	4770      	bx	lr
 8006e40:	f803 1b01 	strb.w	r1, [r3], #1
 8006e44:	e7f9      	b.n	8006e3a <memset+0x4>
	...

08006e48 <_free_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	d045      	beq.n	8006edc <_free_r+0x94>
 8006e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e54:	1f0c      	subs	r4, r1, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bfb8      	it	lt
 8006e5a:	18e4      	addlt	r4, r4, r3
 8006e5c:	f000 fa13 	bl	8007286 <__malloc_lock>
 8006e60:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <_free_r+0x98>)
 8006e62:	6813      	ldr	r3, [r2, #0]
 8006e64:	4610      	mov	r0, r2
 8006e66:	b933      	cbnz	r3, 8006e76 <_free_r+0x2e>
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	6014      	str	r4, [r2, #0]
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e72:	f000 ba09 	b.w	8007288 <__malloc_unlock>
 8006e76:	42a3      	cmp	r3, r4
 8006e78:	d90c      	bls.n	8006e94 <_free_r+0x4c>
 8006e7a:	6821      	ldr	r1, [r4, #0]
 8006e7c:	1862      	adds	r2, r4, r1
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	bf04      	itt	eq
 8006e82:	681a      	ldreq	r2, [r3, #0]
 8006e84:	685b      	ldreq	r3, [r3, #4]
 8006e86:	6063      	str	r3, [r4, #4]
 8006e88:	bf04      	itt	eq
 8006e8a:	1852      	addeq	r2, r2, r1
 8006e8c:	6022      	streq	r2, [r4, #0]
 8006e8e:	6004      	str	r4, [r0, #0]
 8006e90:	e7ec      	b.n	8006e6c <_free_r+0x24>
 8006e92:	4613      	mov	r3, r2
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	b10a      	cbz	r2, 8006e9c <_free_r+0x54>
 8006e98:	42a2      	cmp	r2, r4
 8006e9a:	d9fa      	bls.n	8006e92 <_free_r+0x4a>
 8006e9c:	6819      	ldr	r1, [r3, #0]
 8006e9e:	1858      	adds	r0, r3, r1
 8006ea0:	42a0      	cmp	r0, r4
 8006ea2:	d10b      	bne.n	8006ebc <_free_r+0x74>
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	4401      	add	r1, r0
 8006ea8:	1858      	adds	r0, r3, r1
 8006eaa:	4282      	cmp	r2, r0
 8006eac:	6019      	str	r1, [r3, #0]
 8006eae:	d1dd      	bne.n	8006e6c <_free_r+0x24>
 8006eb0:	6810      	ldr	r0, [r2, #0]
 8006eb2:	6852      	ldr	r2, [r2, #4]
 8006eb4:	605a      	str	r2, [r3, #4]
 8006eb6:	4401      	add	r1, r0
 8006eb8:	6019      	str	r1, [r3, #0]
 8006eba:	e7d7      	b.n	8006e6c <_free_r+0x24>
 8006ebc:	d902      	bls.n	8006ec4 <_free_r+0x7c>
 8006ebe:	230c      	movs	r3, #12
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	e7d3      	b.n	8006e6c <_free_r+0x24>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	1821      	adds	r1, r4, r0
 8006ec8:	428a      	cmp	r2, r1
 8006eca:	bf04      	itt	eq
 8006ecc:	6811      	ldreq	r1, [r2, #0]
 8006ece:	6852      	ldreq	r2, [r2, #4]
 8006ed0:	6062      	str	r2, [r4, #4]
 8006ed2:	bf04      	itt	eq
 8006ed4:	1809      	addeq	r1, r1, r0
 8006ed6:	6021      	streq	r1, [r4, #0]
 8006ed8:	605c      	str	r4, [r3, #4]
 8006eda:	e7c7      	b.n	8006e6c <_free_r+0x24>
 8006edc:	bd38      	pop	{r3, r4, r5, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000324 	.word	0x20000324

08006ee4 <_malloc_r>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	1ccd      	adds	r5, r1, #3
 8006ee8:	f025 0503 	bic.w	r5, r5, #3
 8006eec:	3508      	adds	r5, #8
 8006eee:	2d0c      	cmp	r5, #12
 8006ef0:	bf38      	it	cc
 8006ef2:	250c      	movcc	r5, #12
 8006ef4:	2d00      	cmp	r5, #0
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	db01      	blt.n	8006efe <_malloc_r+0x1a>
 8006efa:	42a9      	cmp	r1, r5
 8006efc:	d903      	bls.n	8006f06 <_malloc_r+0x22>
 8006efe:	230c      	movs	r3, #12
 8006f00:	6033      	str	r3, [r6, #0]
 8006f02:	2000      	movs	r0, #0
 8006f04:	bd70      	pop	{r4, r5, r6, pc}
 8006f06:	f000 f9be 	bl	8007286 <__malloc_lock>
 8006f0a:	4a23      	ldr	r2, [pc, #140]	; (8006f98 <_malloc_r+0xb4>)
 8006f0c:	6814      	ldr	r4, [r2, #0]
 8006f0e:	4621      	mov	r1, r4
 8006f10:	b991      	cbnz	r1, 8006f38 <_malloc_r+0x54>
 8006f12:	4c22      	ldr	r4, [pc, #136]	; (8006f9c <_malloc_r+0xb8>)
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	b91b      	cbnz	r3, 8006f20 <_malloc_r+0x3c>
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f000 f841 	bl	8006fa0 <_sbrk_r>
 8006f1e:	6020      	str	r0, [r4, #0]
 8006f20:	4629      	mov	r1, r5
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 f83c 	bl	8006fa0 <_sbrk_r>
 8006f28:	1c43      	adds	r3, r0, #1
 8006f2a:	d126      	bne.n	8006f7a <_malloc_r+0x96>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	6033      	str	r3, [r6, #0]
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 f9a9 	bl	8007288 <__malloc_unlock>
 8006f36:	e7e4      	b.n	8006f02 <_malloc_r+0x1e>
 8006f38:	680b      	ldr	r3, [r1, #0]
 8006f3a:	1b5b      	subs	r3, r3, r5
 8006f3c:	d41a      	bmi.n	8006f74 <_malloc_r+0x90>
 8006f3e:	2b0b      	cmp	r3, #11
 8006f40:	d90f      	bls.n	8006f62 <_malloc_r+0x7e>
 8006f42:	600b      	str	r3, [r1, #0]
 8006f44:	50cd      	str	r5, [r1, r3]
 8006f46:	18cc      	adds	r4, r1, r3
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f000 f99d 	bl	8007288 <__malloc_unlock>
 8006f4e:	f104 000b 	add.w	r0, r4, #11
 8006f52:	1d23      	adds	r3, r4, #4
 8006f54:	f020 0007 	bic.w	r0, r0, #7
 8006f58:	1ac3      	subs	r3, r0, r3
 8006f5a:	d01b      	beq.n	8006f94 <_malloc_r+0xb0>
 8006f5c:	425a      	negs	r2, r3
 8006f5e:	50e2      	str	r2, [r4, r3]
 8006f60:	bd70      	pop	{r4, r5, r6, pc}
 8006f62:	428c      	cmp	r4, r1
 8006f64:	bf0d      	iteet	eq
 8006f66:	6863      	ldreq	r3, [r4, #4]
 8006f68:	684b      	ldrne	r3, [r1, #4]
 8006f6a:	6063      	strne	r3, [r4, #4]
 8006f6c:	6013      	streq	r3, [r2, #0]
 8006f6e:	bf18      	it	ne
 8006f70:	460c      	movne	r4, r1
 8006f72:	e7e9      	b.n	8006f48 <_malloc_r+0x64>
 8006f74:	460c      	mov	r4, r1
 8006f76:	6849      	ldr	r1, [r1, #4]
 8006f78:	e7ca      	b.n	8006f10 <_malloc_r+0x2c>
 8006f7a:	1cc4      	adds	r4, r0, #3
 8006f7c:	f024 0403 	bic.w	r4, r4, #3
 8006f80:	42a0      	cmp	r0, r4
 8006f82:	d005      	beq.n	8006f90 <_malloc_r+0xac>
 8006f84:	1a21      	subs	r1, r4, r0
 8006f86:	4630      	mov	r0, r6
 8006f88:	f000 f80a 	bl	8006fa0 <_sbrk_r>
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d0cd      	beq.n	8006f2c <_malloc_r+0x48>
 8006f90:	6025      	str	r5, [r4, #0]
 8006f92:	e7d9      	b.n	8006f48 <_malloc_r+0x64>
 8006f94:	bd70      	pop	{r4, r5, r6, pc}
 8006f96:	bf00      	nop
 8006f98:	20000324 	.word	0x20000324
 8006f9c:	20000328 	.word	0x20000328

08006fa0 <_sbrk_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4c06      	ldr	r4, [pc, #24]	; (8006fbc <_sbrk_r+0x1c>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	f000 fdba 	bl	8007b24 <_sbrk>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_sbrk_r+0x1a>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_sbrk_r+0x1a>
 8006fb8:	602b      	str	r3, [r5, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	20000608 	.word	0x20000608

08006fc0 <siprintf>:
 8006fc0:	b40e      	push	{r1, r2, r3}
 8006fc2:	b500      	push	{lr}
 8006fc4:	b09c      	sub	sp, #112	; 0x70
 8006fc6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006fca:	ab1d      	add	r3, sp, #116	; 0x74
 8006fcc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006fd0:	9002      	str	r0, [sp, #8]
 8006fd2:	9006      	str	r0, [sp, #24]
 8006fd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fd8:	480a      	ldr	r0, [pc, #40]	; (8007004 <siprintf+0x44>)
 8006fda:	9104      	str	r1, [sp, #16]
 8006fdc:	9107      	str	r1, [sp, #28]
 8006fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	a902      	add	r1, sp, #8
 8006ff0:	f000 f9a6 	bl	8007340 <_svfiprintf_r>
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	b01c      	add	sp, #112	; 0x70
 8006ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007000:	b003      	add	sp, #12
 8007002:	4770      	bx	lr
 8007004:	20000058 	.word	0x20000058

08007008 <strtok>:
 8007008:	4b13      	ldr	r3, [pc, #76]	; (8007058 <strtok+0x50>)
 800700a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700e:	681d      	ldr	r5, [r3, #0]
 8007010:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8007012:	4606      	mov	r6, r0
 8007014:	460f      	mov	r7, r1
 8007016:	b9b4      	cbnz	r4, 8007046 <strtok+0x3e>
 8007018:	2050      	movs	r0, #80	; 0x50
 800701a:	f7ff fef9 	bl	8006e10 <malloc>
 800701e:	65a8      	str	r0, [r5, #88]	; 0x58
 8007020:	6004      	str	r4, [r0, #0]
 8007022:	6044      	str	r4, [r0, #4]
 8007024:	6084      	str	r4, [r0, #8]
 8007026:	60c4      	str	r4, [r0, #12]
 8007028:	6104      	str	r4, [r0, #16]
 800702a:	6144      	str	r4, [r0, #20]
 800702c:	6184      	str	r4, [r0, #24]
 800702e:	6284      	str	r4, [r0, #40]	; 0x28
 8007030:	62c4      	str	r4, [r0, #44]	; 0x2c
 8007032:	6304      	str	r4, [r0, #48]	; 0x30
 8007034:	6344      	str	r4, [r0, #52]	; 0x34
 8007036:	6384      	str	r4, [r0, #56]	; 0x38
 8007038:	63c4      	str	r4, [r0, #60]	; 0x3c
 800703a:	6404      	str	r4, [r0, #64]	; 0x40
 800703c:	6444      	str	r4, [r0, #68]	; 0x44
 800703e:	6484      	str	r4, [r0, #72]	; 0x48
 8007040:	64c4      	str	r4, [r0, #76]	; 0x4c
 8007042:	7704      	strb	r4, [r0, #28]
 8007044:	6244      	str	r4, [r0, #36]	; 0x24
 8007046:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8007048:	4639      	mov	r1, r7
 800704a:	4630      	mov	r0, r6
 800704c:	2301      	movs	r3, #1
 800704e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	f000 b803 	b.w	800705c <__strtok_r>
 8007056:	bf00      	nop
 8007058:	20000058 	.word	0x20000058

0800705c <__strtok_r>:
 800705c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800705e:	b918      	cbnz	r0, 8007068 <__strtok_r+0xc>
 8007060:	6810      	ldr	r0, [r2, #0]
 8007062:	b908      	cbnz	r0, 8007068 <__strtok_r+0xc>
 8007064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007066:	4620      	mov	r0, r4
 8007068:	4604      	mov	r4, r0
 800706a:	460f      	mov	r7, r1
 800706c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007070:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007074:	b91e      	cbnz	r6, 800707e <__strtok_r+0x22>
 8007076:	b965      	cbnz	r5, 8007092 <__strtok_r+0x36>
 8007078:	6015      	str	r5, [r2, #0]
 800707a:	4628      	mov	r0, r5
 800707c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707e:	42b5      	cmp	r5, r6
 8007080:	d1f6      	bne.n	8007070 <__strtok_r+0x14>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1ef      	bne.n	8007066 <__strtok_r+0xa>
 8007086:	6014      	str	r4, [r2, #0]
 8007088:	7003      	strb	r3, [r0, #0]
 800708a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800708c:	461c      	mov	r4, r3
 800708e:	e00c      	b.n	80070aa <__strtok_r+0x4e>
 8007090:	b915      	cbnz	r5, 8007098 <__strtok_r+0x3c>
 8007092:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007096:	460e      	mov	r6, r1
 8007098:	f816 5b01 	ldrb.w	r5, [r6], #1
 800709c:	42ab      	cmp	r3, r5
 800709e:	d1f7      	bne.n	8007090 <__strtok_r+0x34>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f3      	beq.n	800708c <__strtok_r+0x30>
 80070a4:	2300      	movs	r3, #0
 80070a6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80070aa:	6014      	str	r4, [r2, #0]
 80070ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070ae <_strtol_l.isra.0>:
 80070ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b2:	4680      	mov	r8, r0
 80070b4:	4689      	mov	r9, r1
 80070b6:	4692      	mov	sl, r2
 80070b8:	461f      	mov	r7, r3
 80070ba:	468b      	mov	fp, r1
 80070bc:	465d      	mov	r5, fp
 80070be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070c4:	f000 f8ca 	bl	800725c <__locale_ctype_ptr_l>
 80070c8:	4420      	add	r0, r4
 80070ca:	7846      	ldrb	r6, [r0, #1]
 80070cc:	f016 0608 	ands.w	r6, r6, #8
 80070d0:	d10b      	bne.n	80070ea <_strtol_l.isra.0+0x3c>
 80070d2:	2c2d      	cmp	r4, #45	; 0x2d
 80070d4:	d10b      	bne.n	80070ee <_strtol_l.isra.0+0x40>
 80070d6:	782c      	ldrb	r4, [r5, #0]
 80070d8:	2601      	movs	r6, #1
 80070da:	f10b 0502 	add.w	r5, fp, #2
 80070de:	b167      	cbz	r7, 80070fa <_strtol_l.isra.0+0x4c>
 80070e0:	2f10      	cmp	r7, #16
 80070e2:	d114      	bne.n	800710e <_strtol_l.isra.0+0x60>
 80070e4:	2c30      	cmp	r4, #48	; 0x30
 80070e6:	d00a      	beq.n	80070fe <_strtol_l.isra.0+0x50>
 80070e8:	e011      	b.n	800710e <_strtol_l.isra.0+0x60>
 80070ea:	46ab      	mov	fp, r5
 80070ec:	e7e6      	b.n	80070bc <_strtol_l.isra.0+0xe>
 80070ee:	2c2b      	cmp	r4, #43	; 0x2b
 80070f0:	bf04      	itt	eq
 80070f2:	782c      	ldrbeq	r4, [r5, #0]
 80070f4:	f10b 0502 	addeq.w	r5, fp, #2
 80070f8:	e7f1      	b.n	80070de <_strtol_l.isra.0+0x30>
 80070fa:	2c30      	cmp	r4, #48	; 0x30
 80070fc:	d127      	bne.n	800714e <_strtol_l.isra.0+0xa0>
 80070fe:	782b      	ldrb	r3, [r5, #0]
 8007100:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007104:	2b58      	cmp	r3, #88	; 0x58
 8007106:	d14b      	bne.n	80071a0 <_strtol_l.isra.0+0xf2>
 8007108:	786c      	ldrb	r4, [r5, #1]
 800710a:	2710      	movs	r7, #16
 800710c:	3502      	adds	r5, #2
 800710e:	2e00      	cmp	r6, #0
 8007110:	bf0c      	ite	eq
 8007112:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007116:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800711a:	2200      	movs	r2, #0
 800711c:	fbb1 fef7 	udiv	lr, r1, r7
 8007120:	4610      	mov	r0, r2
 8007122:	fb07 1c1e 	mls	ip, r7, lr, r1
 8007126:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800712a:	2b09      	cmp	r3, #9
 800712c:	d811      	bhi.n	8007152 <_strtol_l.isra.0+0xa4>
 800712e:	461c      	mov	r4, r3
 8007130:	42a7      	cmp	r7, r4
 8007132:	dd1d      	ble.n	8007170 <_strtol_l.isra.0+0xc2>
 8007134:	1c53      	adds	r3, r2, #1
 8007136:	d007      	beq.n	8007148 <_strtol_l.isra.0+0x9a>
 8007138:	4586      	cmp	lr, r0
 800713a:	d316      	bcc.n	800716a <_strtol_l.isra.0+0xbc>
 800713c:	d101      	bne.n	8007142 <_strtol_l.isra.0+0x94>
 800713e:	45a4      	cmp	ip, r4
 8007140:	db13      	blt.n	800716a <_strtol_l.isra.0+0xbc>
 8007142:	fb00 4007 	mla	r0, r0, r7, r4
 8007146:	2201      	movs	r2, #1
 8007148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800714c:	e7eb      	b.n	8007126 <_strtol_l.isra.0+0x78>
 800714e:	270a      	movs	r7, #10
 8007150:	e7dd      	b.n	800710e <_strtol_l.isra.0+0x60>
 8007152:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007156:	2b19      	cmp	r3, #25
 8007158:	d801      	bhi.n	800715e <_strtol_l.isra.0+0xb0>
 800715a:	3c37      	subs	r4, #55	; 0x37
 800715c:	e7e8      	b.n	8007130 <_strtol_l.isra.0+0x82>
 800715e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007162:	2b19      	cmp	r3, #25
 8007164:	d804      	bhi.n	8007170 <_strtol_l.isra.0+0xc2>
 8007166:	3c57      	subs	r4, #87	; 0x57
 8007168:	e7e2      	b.n	8007130 <_strtol_l.isra.0+0x82>
 800716a:	f04f 32ff 	mov.w	r2, #4294967295
 800716e:	e7eb      	b.n	8007148 <_strtol_l.isra.0+0x9a>
 8007170:	1c53      	adds	r3, r2, #1
 8007172:	d108      	bne.n	8007186 <_strtol_l.isra.0+0xd8>
 8007174:	2322      	movs	r3, #34	; 0x22
 8007176:	f8c8 3000 	str.w	r3, [r8]
 800717a:	4608      	mov	r0, r1
 800717c:	f1ba 0f00 	cmp.w	sl, #0
 8007180:	d107      	bne.n	8007192 <_strtol_l.isra.0+0xe4>
 8007182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007186:	b106      	cbz	r6, 800718a <_strtol_l.isra.0+0xdc>
 8007188:	4240      	negs	r0, r0
 800718a:	f1ba 0f00 	cmp.w	sl, #0
 800718e:	d00c      	beq.n	80071aa <_strtol_l.isra.0+0xfc>
 8007190:	b122      	cbz	r2, 800719c <_strtol_l.isra.0+0xee>
 8007192:	3d01      	subs	r5, #1
 8007194:	f8ca 5000 	str.w	r5, [sl]
 8007198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	464d      	mov	r5, r9
 800719e:	e7f9      	b.n	8007194 <_strtol_l.isra.0+0xe6>
 80071a0:	2430      	movs	r4, #48	; 0x30
 80071a2:	2f00      	cmp	r7, #0
 80071a4:	d1b3      	bne.n	800710e <_strtol_l.isra.0+0x60>
 80071a6:	2708      	movs	r7, #8
 80071a8:	e7b1      	b.n	800710e <_strtol_l.isra.0+0x60>
 80071aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080071b0 <strtol>:
 80071b0:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <strtol+0x24>)
 80071b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071b4:	681c      	ldr	r4, [r3, #0]
 80071b6:	4d08      	ldr	r5, [pc, #32]	; (80071d8 <strtol+0x28>)
 80071b8:	6a23      	ldr	r3, [r4, #32]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	bf08      	it	eq
 80071be:	462b      	moveq	r3, r5
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	4613      	mov	r3, r2
 80071c4:	460a      	mov	r2, r1
 80071c6:	4601      	mov	r1, r0
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7ff ff70 	bl	80070ae <_strtol_l.isra.0>
 80071ce:	b003      	add	sp, #12
 80071d0:	bd30      	pop	{r4, r5, pc}
 80071d2:	bf00      	nop
 80071d4:	20000058 	.word	0x20000058
 80071d8:	200000bc 	.word	0x200000bc

080071dc <__utoa>:
 80071dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071de:	4c1e      	ldr	r4, [pc, #120]	; (8007258 <__utoa+0x7c>)
 80071e0:	b08b      	sub	sp, #44	; 0x2c
 80071e2:	4603      	mov	r3, r0
 80071e4:	460f      	mov	r7, r1
 80071e6:	466d      	mov	r5, sp
 80071e8:	f104 0e20 	add.w	lr, r4, #32
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	6861      	ldr	r1, [r4, #4]
 80071f0:	462e      	mov	r6, r5
 80071f2:	c603      	stmia	r6!, {r0, r1}
 80071f4:	3408      	adds	r4, #8
 80071f6:	4574      	cmp	r4, lr
 80071f8:	4635      	mov	r5, r6
 80071fa:	d1f7      	bne.n	80071ec <__utoa+0x10>
 80071fc:	7921      	ldrb	r1, [r4, #4]
 80071fe:	7131      	strb	r1, [r6, #4]
 8007200:	1e91      	subs	r1, r2, #2
 8007202:	6820      	ldr	r0, [r4, #0]
 8007204:	6030      	str	r0, [r6, #0]
 8007206:	2922      	cmp	r1, #34	; 0x22
 8007208:	f04f 0100 	mov.w	r1, #0
 800720c:	d904      	bls.n	8007218 <__utoa+0x3c>
 800720e:	7039      	strb	r1, [r7, #0]
 8007210:	460f      	mov	r7, r1
 8007212:	4638      	mov	r0, r7
 8007214:	b00b      	add	sp, #44	; 0x2c
 8007216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007218:	1e78      	subs	r0, r7, #1
 800721a:	4606      	mov	r6, r0
 800721c:	fbb3 f5f2 	udiv	r5, r3, r2
 8007220:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007224:	fb02 3315 	mls	r3, r2, r5, r3
 8007228:	4473      	add	r3, lr
 800722a:	1c4c      	adds	r4, r1, #1
 800722c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007230:	f806 3f01 	strb.w	r3, [r6, #1]!
 8007234:	462b      	mov	r3, r5
 8007236:	b965      	cbnz	r5, 8007252 <__utoa+0x76>
 8007238:	553d      	strb	r5, [r7, r4]
 800723a:	187a      	adds	r2, r7, r1
 800723c:	1acc      	subs	r4, r1, r3
 800723e:	42a3      	cmp	r3, r4
 8007240:	dae7      	bge.n	8007212 <__utoa+0x36>
 8007242:	7844      	ldrb	r4, [r0, #1]
 8007244:	7815      	ldrb	r5, [r2, #0]
 8007246:	f800 5f01 	strb.w	r5, [r0, #1]!
 800724a:	3301      	adds	r3, #1
 800724c:	f802 4901 	strb.w	r4, [r2], #-1
 8007250:	e7f4      	b.n	800723c <__utoa+0x60>
 8007252:	4621      	mov	r1, r4
 8007254:	e7e2      	b.n	800721c <__utoa+0x40>
 8007256:	bf00      	nop
 8007258:	08007bd8 	.word	0x08007bd8

0800725c <__locale_ctype_ptr_l>:
 800725c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007260:	4770      	bx	lr

08007262 <__ascii_mbtowc>:
 8007262:	b082      	sub	sp, #8
 8007264:	b901      	cbnz	r1, 8007268 <__ascii_mbtowc+0x6>
 8007266:	a901      	add	r1, sp, #4
 8007268:	b142      	cbz	r2, 800727c <__ascii_mbtowc+0x1a>
 800726a:	b14b      	cbz	r3, 8007280 <__ascii_mbtowc+0x1e>
 800726c:	7813      	ldrb	r3, [r2, #0]
 800726e:	600b      	str	r3, [r1, #0]
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	1c10      	adds	r0, r2, #0
 8007274:	bf18      	it	ne
 8007276:	2001      	movne	r0, #1
 8007278:	b002      	add	sp, #8
 800727a:	4770      	bx	lr
 800727c:	4610      	mov	r0, r2
 800727e:	e7fb      	b.n	8007278 <__ascii_mbtowc+0x16>
 8007280:	f06f 0001 	mvn.w	r0, #1
 8007284:	e7f8      	b.n	8007278 <__ascii_mbtowc+0x16>

08007286 <__malloc_lock>:
 8007286:	4770      	bx	lr

08007288 <__malloc_unlock>:
 8007288:	4770      	bx	lr

0800728a <__ssputs_r>:
 800728a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800728e:	688e      	ldr	r6, [r1, #8]
 8007290:	429e      	cmp	r6, r3
 8007292:	4682      	mov	sl, r0
 8007294:	460c      	mov	r4, r1
 8007296:	4691      	mov	r9, r2
 8007298:	4698      	mov	r8, r3
 800729a:	d835      	bhi.n	8007308 <__ssputs_r+0x7e>
 800729c:	898a      	ldrh	r2, [r1, #12]
 800729e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072a2:	d031      	beq.n	8007308 <__ssputs_r+0x7e>
 80072a4:	6825      	ldr	r5, [r4, #0]
 80072a6:	6909      	ldr	r1, [r1, #16]
 80072a8:	1a6f      	subs	r7, r5, r1
 80072aa:	6965      	ldr	r5, [r4, #20]
 80072ac:	2302      	movs	r3, #2
 80072ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072b2:	fb95 f5f3 	sdiv	r5, r5, r3
 80072b6:	f108 0301 	add.w	r3, r8, #1
 80072ba:	443b      	add	r3, r7
 80072bc:	429d      	cmp	r5, r3
 80072be:	bf38      	it	cc
 80072c0:	461d      	movcc	r5, r3
 80072c2:	0553      	lsls	r3, r2, #21
 80072c4:	d531      	bpl.n	800732a <__ssputs_r+0xa0>
 80072c6:	4629      	mov	r1, r5
 80072c8:	f7ff fe0c 	bl	8006ee4 <_malloc_r>
 80072cc:	4606      	mov	r6, r0
 80072ce:	b950      	cbnz	r0, 80072e6 <__ssputs_r+0x5c>
 80072d0:	230c      	movs	r3, #12
 80072d2:	f8ca 3000 	str.w	r3, [sl]
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072dc:	81a3      	strh	r3, [r4, #12]
 80072de:	f04f 30ff 	mov.w	r0, #4294967295
 80072e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e6:	463a      	mov	r2, r7
 80072e8:	6921      	ldr	r1, [r4, #16]
 80072ea:	f7ff fd99 	bl	8006e20 <memcpy>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f8:	81a3      	strh	r3, [r4, #12]
 80072fa:	6126      	str	r6, [r4, #16]
 80072fc:	6165      	str	r5, [r4, #20]
 80072fe:	443e      	add	r6, r7
 8007300:	1bed      	subs	r5, r5, r7
 8007302:	6026      	str	r6, [r4, #0]
 8007304:	60a5      	str	r5, [r4, #8]
 8007306:	4646      	mov	r6, r8
 8007308:	4546      	cmp	r6, r8
 800730a:	bf28      	it	cs
 800730c:	4646      	movcs	r6, r8
 800730e:	4632      	mov	r2, r6
 8007310:	4649      	mov	r1, r9
 8007312:	6820      	ldr	r0, [r4, #0]
 8007314:	f000 faab 	bl	800786e <memmove>
 8007318:	68a3      	ldr	r3, [r4, #8]
 800731a:	1b9b      	subs	r3, r3, r6
 800731c:	60a3      	str	r3, [r4, #8]
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	441e      	add	r6, r3
 8007322:	6026      	str	r6, [r4, #0]
 8007324:	2000      	movs	r0, #0
 8007326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732a:	462a      	mov	r2, r5
 800732c:	f000 fab9 	bl	80078a2 <_realloc_r>
 8007330:	4606      	mov	r6, r0
 8007332:	2800      	cmp	r0, #0
 8007334:	d1e1      	bne.n	80072fa <__ssputs_r+0x70>
 8007336:	6921      	ldr	r1, [r4, #16]
 8007338:	4650      	mov	r0, sl
 800733a:	f7ff fd85 	bl	8006e48 <_free_r>
 800733e:	e7c7      	b.n	80072d0 <__ssputs_r+0x46>

08007340 <_svfiprintf_r>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	b09d      	sub	sp, #116	; 0x74
 8007346:	4680      	mov	r8, r0
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	898b      	ldrh	r3, [r1, #12]
 800734c:	061c      	lsls	r4, r3, #24
 800734e:	460d      	mov	r5, r1
 8007350:	4616      	mov	r6, r2
 8007352:	d50f      	bpl.n	8007374 <_svfiprintf_r+0x34>
 8007354:	690b      	ldr	r3, [r1, #16]
 8007356:	b96b      	cbnz	r3, 8007374 <_svfiprintf_r+0x34>
 8007358:	2140      	movs	r1, #64	; 0x40
 800735a:	f7ff fdc3 	bl	8006ee4 <_malloc_r>
 800735e:	6028      	str	r0, [r5, #0]
 8007360:	6128      	str	r0, [r5, #16]
 8007362:	b928      	cbnz	r0, 8007370 <_svfiprintf_r+0x30>
 8007364:	230c      	movs	r3, #12
 8007366:	f8c8 3000 	str.w	r3, [r8]
 800736a:	f04f 30ff 	mov.w	r0, #4294967295
 800736e:	e0c5      	b.n	80074fc <_svfiprintf_r+0x1bc>
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	616b      	str	r3, [r5, #20]
 8007374:	2300      	movs	r3, #0
 8007376:	9309      	str	r3, [sp, #36]	; 0x24
 8007378:	2320      	movs	r3, #32
 800737a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800737e:	2330      	movs	r3, #48	; 0x30
 8007380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007384:	f04f 0b01 	mov.w	fp, #1
 8007388:	4637      	mov	r7, r6
 800738a:	463c      	mov	r4, r7
 800738c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d13c      	bne.n	800740e <_svfiprintf_r+0xce>
 8007394:	ebb7 0a06 	subs.w	sl, r7, r6
 8007398:	d00b      	beq.n	80073b2 <_svfiprintf_r+0x72>
 800739a:	4653      	mov	r3, sl
 800739c:	4632      	mov	r2, r6
 800739e:	4629      	mov	r1, r5
 80073a0:	4640      	mov	r0, r8
 80073a2:	f7ff ff72 	bl	800728a <__ssputs_r>
 80073a6:	3001      	adds	r0, #1
 80073a8:	f000 80a3 	beq.w	80074f2 <_svfiprintf_r+0x1b2>
 80073ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ae:	4453      	add	r3, sl
 80073b0:	9309      	str	r3, [sp, #36]	; 0x24
 80073b2:	783b      	ldrb	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 809c 	beq.w	80074f2 <_svfiprintf_r+0x1b2>
 80073ba:	2300      	movs	r3, #0
 80073bc:	f04f 32ff 	mov.w	r2, #4294967295
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	9205      	str	r2, [sp, #20]
 80073c6:	9306      	str	r3, [sp, #24]
 80073c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073cc:	931a      	str	r3, [sp, #104]	; 0x68
 80073ce:	2205      	movs	r2, #5
 80073d0:	7821      	ldrb	r1, [r4, #0]
 80073d2:	4850      	ldr	r0, [pc, #320]	; (8007514 <_svfiprintf_r+0x1d4>)
 80073d4:	f7f8 ff04 	bl	80001e0 <memchr>
 80073d8:	1c67      	adds	r7, r4, #1
 80073da:	9b04      	ldr	r3, [sp, #16]
 80073dc:	b9d8      	cbnz	r0, 8007416 <_svfiprintf_r+0xd6>
 80073de:	06d9      	lsls	r1, r3, #27
 80073e0:	bf44      	itt	mi
 80073e2:	2220      	movmi	r2, #32
 80073e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073e8:	071a      	lsls	r2, r3, #28
 80073ea:	bf44      	itt	mi
 80073ec:	222b      	movmi	r2, #43	; 0x2b
 80073ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073f2:	7822      	ldrb	r2, [r4, #0]
 80073f4:	2a2a      	cmp	r2, #42	; 0x2a
 80073f6:	d016      	beq.n	8007426 <_svfiprintf_r+0xe6>
 80073f8:	9a07      	ldr	r2, [sp, #28]
 80073fa:	2100      	movs	r1, #0
 80073fc:	200a      	movs	r0, #10
 80073fe:	4627      	mov	r7, r4
 8007400:	3401      	adds	r4, #1
 8007402:	783b      	ldrb	r3, [r7, #0]
 8007404:	3b30      	subs	r3, #48	; 0x30
 8007406:	2b09      	cmp	r3, #9
 8007408:	d951      	bls.n	80074ae <_svfiprintf_r+0x16e>
 800740a:	b1c9      	cbz	r1, 8007440 <_svfiprintf_r+0x100>
 800740c:	e011      	b.n	8007432 <_svfiprintf_r+0xf2>
 800740e:	2b25      	cmp	r3, #37	; 0x25
 8007410:	d0c0      	beq.n	8007394 <_svfiprintf_r+0x54>
 8007412:	4627      	mov	r7, r4
 8007414:	e7b9      	b.n	800738a <_svfiprintf_r+0x4a>
 8007416:	4a3f      	ldr	r2, [pc, #252]	; (8007514 <_svfiprintf_r+0x1d4>)
 8007418:	1a80      	subs	r0, r0, r2
 800741a:	fa0b f000 	lsl.w	r0, fp, r0
 800741e:	4318      	orrs	r0, r3
 8007420:	9004      	str	r0, [sp, #16]
 8007422:	463c      	mov	r4, r7
 8007424:	e7d3      	b.n	80073ce <_svfiprintf_r+0x8e>
 8007426:	9a03      	ldr	r2, [sp, #12]
 8007428:	1d11      	adds	r1, r2, #4
 800742a:	6812      	ldr	r2, [r2, #0]
 800742c:	9103      	str	r1, [sp, #12]
 800742e:	2a00      	cmp	r2, #0
 8007430:	db01      	blt.n	8007436 <_svfiprintf_r+0xf6>
 8007432:	9207      	str	r2, [sp, #28]
 8007434:	e004      	b.n	8007440 <_svfiprintf_r+0x100>
 8007436:	4252      	negs	r2, r2
 8007438:	f043 0302 	orr.w	r3, r3, #2
 800743c:	9207      	str	r2, [sp, #28]
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	783b      	ldrb	r3, [r7, #0]
 8007442:	2b2e      	cmp	r3, #46	; 0x2e
 8007444:	d10e      	bne.n	8007464 <_svfiprintf_r+0x124>
 8007446:	787b      	ldrb	r3, [r7, #1]
 8007448:	2b2a      	cmp	r3, #42	; 0x2a
 800744a:	f107 0101 	add.w	r1, r7, #1
 800744e:	d132      	bne.n	80074b6 <_svfiprintf_r+0x176>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	1d1a      	adds	r2, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9203      	str	r2, [sp, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	bfb8      	it	lt
 800745c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007460:	3702      	adds	r7, #2
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	4c2c      	ldr	r4, [pc, #176]	; (8007518 <_svfiprintf_r+0x1d8>)
 8007466:	7839      	ldrb	r1, [r7, #0]
 8007468:	2203      	movs	r2, #3
 800746a:	4620      	mov	r0, r4
 800746c:	f7f8 feb8 	bl	80001e0 <memchr>
 8007470:	b138      	cbz	r0, 8007482 <_svfiprintf_r+0x142>
 8007472:	2340      	movs	r3, #64	; 0x40
 8007474:	1b00      	subs	r0, r0, r4
 8007476:	fa03 f000 	lsl.w	r0, r3, r0
 800747a:	9b04      	ldr	r3, [sp, #16]
 800747c:	4303      	orrs	r3, r0
 800747e:	9304      	str	r3, [sp, #16]
 8007480:	3701      	adds	r7, #1
 8007482:	7839      	ldrb	r1, [r7, #0]
 8007484:	4825      	ldr	r0, [pc, #148]	; (800751c <_svfiprintf_r+0x1dc>)
 8007486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800748a:	2206      	movs	r2, #6
 800748c:	1c7e      	adds	r6, r7, #1
 800748e:	f7f8 fea7 	bl	80001e0 <memchr>
 8007492:	2800      	cmp	r0, #0
 8007494:	d035      	beq.n	8007502 <_svfiprintf_r+0x1c2>
 8007496:	4b22      	ldr	r3, [pc, #136]	; (8007520 <_svfiprintf_r+0x1e0>)
 8007498:	b9fb      	cbnz	r3, 80074da <_svfiprintf_r+0x19a>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	3307      	adds	r3, #7
 800749e:	f023 0307 	bic.w	r3, r3, #7
 80074a2:	3308      	adds	r3, #8
 80074a4:	9303      	str	r3, [sp, #12]
 80074a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a8:	444b      	add	r3, r9
 80074aa:	9309      	str	r3, [sp, #36]	; 0x24
 80074ac:	e76c      	b.n	8007388 <_svfiprintf_r+0x48>
 80074ae:	fb00 3202 	mla	r2, r0, r2, r3
 80074b2:	2101      	movs	r1, #1
 80074b4:	e7a3      	b.n	80073fe <_svfiprintf_r+0xbe>
 80074b6:	2300      	movs	r3, #0
 80074b8:	9305      	str	r3, [sp, #20]
 80074ba:	4618      	mov	r0, r3
 80074bc:	240a      	movs	r4, #10
 80074be:	460f      	mov	r7, r1
 80074c0:	3101      	adds	r1, #1
 80074c2:	783a      	ldrb	r2, [r7, #0]
 80074c4:	3a30      	subs	r2, #48	; 0x30
 80074c6:	2a09      	cmp	r2, #9
 80074c8:	d903      	bls.n	80074d2 <_svfiprintf_r+0x192>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0ca      	beq.n	8007464 <_svfiprintf_r+0x124>
 80074ce:	9005      	str	r0, [sp, #20]
 80074d0:	e7c8      	b.n	8007464 <_svfiprintf_r+0x124>
 80074d2:	fb04 2000 	mla	r0, r4, r0, r2
 80074d6:	2301      	movs	r3, #1
 80074d8:	e7f1      	b.n	80074be <_svfiprintf_r+0x17e>
 80074da:	ab03      	add	r3, sp, #12
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	462a      	mov	r2, r5
 80074e0:	4b10      	ldr	r3, [pc, #64]	; (8007524 <_svfiprintf_r+0x1e4>)
 80074e2:	a904      	add	r1, sp, #16
 80074e4:	4640      	mov	r0, r8
 80074e6:	f3af 8000 	nop.w
 80074ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074ee:	4681      	mov	r9, r0
 80074f0:	d1d9      	bne.n	80074a6 <_svfiprintf_r+0x166>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	065b      	lsls	r3, r3, #25
 80074f6:	f53f af38 	bmi.w	800736a <_svfiprintf_r+0x2a>
 80074fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074fc:	b01d      	add	sp, #116	; 0x74
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	ab03      	add	r3, sp, #12
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	462a      	mov	r2, r5
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <_svfiprintf_r+0x1e4>)
 800750a:	a904      	add	r1, sp, #16
 800750c:	4640      	mov	r0, r8
 800750e:	f000 f881 	bl	8007614 <_printf_i>
 8007512:	e7ea      	b.n	80074ea <_svfiprintf_r+0x1aa>
 8007514:	08007c07 	.word	0x08007c07
 8007518:	08007c0d 	.word	0x08007c0d
 800751c:	08007c11 	.word	0x08007c11
 8007520:	00000000 	.word	0x00000000
 8007524:	0800728b 	.word	0x0800728b

08007528 <_printf_common>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	4691      	mov	r9, r2
 800752e:	461f      	mov	r7, r3
 8007530:	688a      	ldr	r2, [r1, #8]
 8007532:	690b      	ldr	r3, [r1, #16]
 8007534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007538:	4293      	cmp	r3, r2
 800753a:	bfb8      	it	lt
 800753c:	4613      	movlt	r3, r2
 800753e:	f8c9 3000 	str.w	r3, [r9]
 8007542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007546:	4606      	mov	r6, r0
 8007548:	460c      	mov	r4, r1
 800754a:	b112      	cbz	r2, 8007552 <_printf_common+0x2a>
 800754c:	3301      	adds	r3, #1
 800754e:	f8c9 3000 	str.w	r3, [r9]
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	0699      	lsls	r1, r3, #26
 8007556:	bf42      	ittt	mi
 8007558:	f8d9 3000 	ldrmi.w	r3, [r9]
 800755c:	3302      	addmi	r3, #2
 800755e:	f8c9 3000 	strmi.w	r3, [r9]
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	f015 0506 	ands.w	r5, r5, #6
 8007568:	d107      	bne.n	800757a <_printf_common+0x52>
 800756a:	f104 0a19 	add.w	sl, r4, #25
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	f8d9 2000 	ldr.w	r2, [r9]
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	429d      	cmp	r5, r3
 8007578:	db29      	blt.n	80075ce <_printf_common+0xa6>
 800757a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	3300      	adds	r3, #0
 8007582:	bf18      	it	ne
 8007584:	2301      	movne	r3, #1
 8007586:	0692      	lsls	r2, r2, #26
 8007588:	d42e      	bmi.n	80075e8 <_printf_common+0xc0>
 800758a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800758e:	4639      	mov	r1, r7
 8007590:	4630      	mov	r0, r6
 8007592:	47c0      	blx	r8
 8007594:	3001      	adds	r0, #1
 8007596:	d021      	beq.n	80075dc <_printf_common+0xb4>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	68e5      	ldr	r5, [r4, #12]
 800759c:	f8d9 2000 	ldr.w	r2, [r9]
 80075a0:	f003 0306 	and.w	r3, r3, #6
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	bf08      	it	eq
 80075a8:	1aad      	subeq	r5, r5, r2
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	6922      	ldr	r2, [r4, #16]
 80075ae:	bf0c      	ite	eq
 80075b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b4:	2500      	movne	r5, #0
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bfc4      	itt	gt
 80075ba:	1a9b      	subgt	r3, r3, r2
 80075bc:	18ed      	addgt	r5, r5, r3
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	341a      	adds	r4, #26
 80075c4:	454d      	cmp	r5, r9
 80075c6:	d11b      	bne.n	8007600 <_printf_common+0xd8>
 80075c8:	2000      	movs	r0, #0
 80075ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ce:	2301      	movs	r3, #1
 80075d0:	4652      	mov	r2, sl
 80075d2:	4639      	mov	r1, r7
 80075d4:	4630      	mov	r0, r6
 80075d6:	47c0      	blx	r8
 80075d8:	3001      	adds	r0, #1
 80075da:	d103      	bne.n	80075e4 <_printf_common+0xbc>
 80075dc:	f04f 30ff 	mov.w	r0, #4294967295
 80075e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e4:	3501      	adds	r5, #1
 80075e6:	e7c2      	b.n	800756e <_printf_common+0x46>
 80075e8:	18e1      	adds	r1, r4, r3
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	2030      	movs	r0, #48	; 0x30
 80075ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075f2:	4422      	add	r2, r4
 80075f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075fc:	3302      	adds	r3, #2
 80075fe:	e7c4      	b.n	800758a <_printf_common+0x62>
 8007600:	2301      	movs	r3, #1
 8007602:	4622      	mov	r2, r4
 8007604:	4639      	mov	r1, r7
 8007606:	4630      	mov	r0, r6
 8007608:	47c0      	blx	r8
 800760a:	3001      	adds	r0, #1
 800760c:	d0e6      	beq.n	80075dc <_printf_common+0xb4>
 800760e:	f109 0901 	add.w	r9, r9, #1
 8007612:	e7d7      	b.n	80075c4 <_printf_common+0x9c>

08007614 <_printf_i>:
 8007614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007618:	4617      	mov	r7, r2
 800761a:	7e0a      	ldrb	r2, [r1, #24]
 800761c:	b085      	sub	sp, #20
 800761e:	2a6e      	cmp	r2, #110	; 0x6e
 8007620:	4698      	mov	r8, r3
 8007622:	4606      	mov	r6, r0
 8007624:	460c      	mov	r4, r1
 8007626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007628:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800762c:	f000 80bc 	beq.w	80077a8 <_printf_i+0x194>
 8007630:	d81a      	bhi.n	8007668 <_printf_i+0x54>
 8007632:	2a63      	cmp	r2, #99	; 0x63
 8007634:	d02e      	beq.n	8007694 <_printf_i+0x80>
 8007636:	d80a      	bhi.n	800764e <_printf_i+0x3a>
 8007638:	2a00      	cmp	r2, #0
 800763a:	f000 80c8 	beq.w	80077ce <_printf_i+0x1ba>
 800763e:	2a58      	cmp	r2, #88	; 0x58
 8007640:	f000 808a 	beq.w	8007758 <_printf_i+0x144>
 8007644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007648:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800764c:	e02a      	b.n	80076a4 <_printf_i+0x90>
 800764e:	2a64      	cmp	r2, #100	; 0x64
 8007650:	d001      	beq.n	8007656 <_printf_i+0x42>
 8007652:	2a69      	cmp	r2, #105	; 0x69
 8007654:	d1f6      	bne.n	8007644 <_printf_i+0x30>
 8007656:	6821      	ldr	r1, [r4, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800765e:	d023      	beq.n	80076a8 <_printf_i+0x94>
 8007660:	1d11      	adds	r1, r2, #4
 8007662:	6019      	str	r1, [r3, #0]
 8007664:	6813      	ldr	r3, [r2, #0]
 8007666:	e027      	b.n	80076b8 <_printf_i+0xa4>
 8007668:	2a73      	cmp	r2, #115	; 0x73
 800766a:	f000 80b4 	beq.w	80077d6 <_printf_i+0x1c2>
 800766e:	d808      	bhi.n	8007682 <_printf_i+0x6e>
 8007670:	2a6f      	cmp	r2, #111	; 0x6f
 8007672:	d02a      	beq.n	80076ca <_printf_i+0xb6>
 8007674:	2a70      	cmp	r2, #112	; 0x70
 8007676:	d1e5      	bne.n	8007644 <_printf_i+0x30>
 8007678:	680a      	ldr	r2, [r1, #0]
 800767a:	f042 0220 	orr.w	r2, r2, #32
 800767e:	600a      	str	r2, [r1, #0]
 8007680:	e003      	b.n	800768a <_printf_i+0x76>
 8007682:	2a75      	cmp	r2, #117	; 0x75
 8007684:	d021      	beq.n	80076ca <_printf_i+0xb6>
 8007686:	2a78      	cmp	r2, #120	; 0x78
 8007688:	d1dc      	bne.n	8007644 <_printf_i+0x30>
 800768a:	2278      	movs	r2, #120	; 0x78
 800768c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007690:	496e      	ldr	r1, [pc, #440]	; (800784c <_printf_i+0x238>)
 8007692:	e064      	b.n	800775e <_printf_i+0x14a>
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800769a:	1d11      	adds	r1, r2, #4
 800769c:	6019      	str	r1, [r3, #0]
 800769e:	6813      	ldr	r3, [r2, #0]
 80076a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a4:	2301      	movs	r3, #1
 80076a6:	e0a3      	b.n	80077f0 <_printf_i+0x1dc>
 80076a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80076ac:	f102 0104 	add.w	r1, r2, #4
 80076b0:	6019      	str	r1, [r3, #0]
 80076b2:	d0d7      	beq.n	8007664 <_printf_i+0x50>
 80076b4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da03      	bge.n	80076c4 <_printf_i+0xb0>
 80076bc:	222d      	movs	r2, #45	; 0x2d
 80076be:	425b      	negs	r3, r3
 80076c0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80076c4:	4962      	ldr	r1, [pc, #392]	; (8007850 <_printf_i+0x23c>)
 80076c6:	220a      	movs	r2, #10
 80076c8:	e017      	b.n	80076fa <_printf_i+0xe6>
 80076ca:	6820      	ldr	r0, [r4, #0]
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80076d2:	d003      	beq.n	80076dc <_printf_i+0xc8>
 80076d4:	1d08      	adds	r0, r1, #4
 80076d6:	6018      	str	r0, [r3, #0]
 80076d8:	680b      	ldr	r3, [r1, #0]
 80076da:	e006      	b.n	80076ea <_printf_i+0xd6>
 80076dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076e0:	f101 0004 	add.w	r0, r1, #4
 80076e4:	6018      	str	r0, [r3, #0]
 80076e6:	d0f7      	beq.n	80076d8 <_printf_i+0xc4>
 80076e8:	880b      	ldrh	r3, [r1, #0]
 80076ea:	4959      	ldr	r1, [pc, #356]	; (8007850 <_printf_i+0x23c>)
 80076ec:	2a6f      	cmp	r2, #111	; 0x6f
 80076ee:	bf14      	ite	ne
 80076f0:	220a      	movne	r2, #10
 80076f2:	2208      	moveq	r2, #8
 80076f4:	2000      	movs	r0, #0
 80076f6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80076fa:	6865      	ldr	r5, [r4, #4]
 80076fc:	60a5      	str	r5, [r4, #8]
 80076fe:	2d00      	cmp	r5, #0
 8007700:	f2c0 809c 	blt.w	800783c <_printf_i+0x228>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	f020 0004 	bic.w	r0, r0, #4
 800770a:	6020      	str	r0, [r4, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d13f      	bne.n	8007790 <_printf_i+0x17c>
 8007710:	2d00      	cmp	r5, #0
 8007712:	f040 8095 	bne.w	8007840 <_printf_i+0x22c>
 8007716:	4675      	mov	r5, lr
 8007718:	2a08      	cmp	r2, #8
 800771a:	d10b      	bne.n	8007734 <_printf_i+0x120>
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	07da      	lsls	r2, r3, #31
 8007720:	d508      	bpl.n	8007734 <_printf_i+0x120>
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	6862      	ldr	r2, [r4, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	bfde      	ittt	le
 800772a:	2330      	movle	r3, #48	; 0x30
 800772c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007730:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007734:	ebae 0305 	sub.w	r3, lr, r5
 8007738:	6123      	str	r3, [r4, #16]
 800773a:	f8cd 8000 	str.w	r8, [sp]
 800773e:	463b      	mov	r3, r7
 8007740:	aa03      	add	r2, sp, #12
 8007742:	4621      	mov	r1, r4
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff feef 	bl	8007528 <_printf_common>
 800774a:	3001      	adds	r0, #1
 800774c:	d155      	bne.n	80077fa <_printf_i+0x1e6>
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
 8007752:	b005      	add	sp, #20
 8007754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007758:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800775c:	493c      	ldr	r1, [pc, #240]	; (8007850 <_printf_i+0x23c>)
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007766:	f100 0504 	add.w	r5, r0, #4
 800776a:	601d      	str	r5, [r3, #0]
 800776c:	d001      	beq.n	8007772 <_printf_i+0x15e>
 800776e:	6803      	ldr	r3, [r0, #0]
 8007770:	e002      	b.n	8007778 <_printf_i+0x164>
 8007772:	0655      	lsls	r5, r2, #25
 8007774:	d5fb      	bpl.n	800776e <_printf_i+0x15a>
 8007776:	8803      	ldrh	r3, [r0, #0]
 8007778:	07d0      	lsls	r0, r2, #31
 800777a:	bf44      	itt	mi
 800777c:	f042 0220 	orrmi.w	r2, r2, #32
 8007780:	6022      	strmi	r2, [r4, #0]
 8007782:	b91b      	cbnz	r3, 800778c <_printf_i+0x178>
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	f022 0220 	bic.w	r2, r2, #32
 800778a:	6022      	str	r2, [r4, #0]
 800778c:	2210      	movs	r2, #16
 800778e:	e7b1      	b.n	80076f4 <_printf_i+0xe0>
 8007790:	4675      	mov	r5, lr
 8007792:	fbb3 f0f2 	udiv	r0, r3, r2
 8007796:	fb02 3310 	mls	r3, r2, r0, r3
 800779a:	5ccb      	ldrb	r3, [r1, r3]
 800779c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80077a0:	4603      	mov	r3, r0
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d1f5      	bne.n	8007792 <_printf_i+0x17e>
 80077a6:	e7b7      	b.n	8007718 <_printf_i+0x104>
 80077a8:	6808      	ldr	r0, [r1, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	6949      	ldr	r1, [r1, #20]
 80077ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80077b2:	d004      	beq.n	80077be <_printf_i+0x1aa>
 80077b4:	1d10      	adds	r0, r2, #4
 80077b6:	6018      	str	r0, [r3, #0]
 80077b8:	6813      	ldr	r3, [r2, #0]
 80077ba:	6019      	str	r1, [r3, #0]
 80077bc:	e007      	b.n	80077ce <_printf_i+0x1ba>
 80077be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077c2:	f102 0004 	add.w	r0, r2, #4
 80077c6:	6018      	str	r0, [r3, #0]
 80077c8:	6813      	ldr	r3, [r2, #0]
 80077ca:	d0f6      	beq.n	80077ba <_printf_i+0x1a6>
 80077cc:	8019      	strh	r1, [r3, #0]
 80077ce:	2300      	movs	r3, #0
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	4675      	mov	r5, lr
 80077d4:	e7b1      	b.n	800773a <_printf_i+0x126>
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	1d11      	adds	r1, r2, #4
 80077da:	6019      	str	r1, [r3, #0]
 80077dc:	6815      	ldr	r5, [r2, #0]
 80077de:	6862      	ldr	r2, [r4, #4]
 80077e0:	2100      	movs	r1, #0
 80077e2:	4628      	mov	r0, r5
 80077e4:	f7f8 fcfc 	bl	80001e0 <memchr>
 80077e8:	b108      	cbz	r0, 80077ee <_printf_i+0x1da>
 80077ea:	1b40      	subs	r0, r0, r5
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	6863      	ldr	r3, [r4, #4]
 80077f0:	6123      	str	r3, [r4, #16]
 80077f2:	2300      	movs	r3, #0
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	e79f      	b.n	800773a <_printf_i+0x126>
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4639      	mov	r1, r7
 8007800:	4630      	mov	r0, r6
 8007802:	47c0      	blx	r8
 8007804:	3001      	adds	r0, #1
 8007806:	d0a2      	beq.n	800774e <_printf_i+0x13a>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	079b      	lsls	r3, r3, #30
 800780c:	d507      	bpl.n	800781e <_printf_i+0x20a>
 800780e:	2500      	movs	r5, #0
 8007810:	f104 0919 	add.w	r9, r4, #25
 8007814:	68e3      	ldr	r3, [r4, #12]
 8007816:	9a03      	ldr	r2, [sp, #12]
 8007818:	1a9b      	subs	r3, r3, r2
 800781a:	429d      	cmp	r5, r3
 800781c:	db05      	blt.n	800782a <_printf_i+0x216>
 800781e:	68e0      	ldr	r0, [r4, #12]
 8007820:	9b03      	ldr	r3, [sp, #12]
 8007822:	4298      	cmp	r0, r3
 8007824:	bfb8      	it	lt
 8007826:	4618      	movlt	r0, r3
 8007828:	e793      	b.n	8007752 <_printf_i+0x13e>
 800782a:	2301      	movs	r3, #1
 800782c:	464a      	mov	r2, r9
 800782e:	4639      	mov	r1, r7
 8007830:	4630      	mov	r0, r6
 8007832:	47c0      	blx	r8
 8007834:	3001      	adds	r0, #1
 8007836:	d08a      	beq.n	800774e <_printf_i+0x13a>
 8007838:	3501      	adds	r5, #1
 800783a:	e7eb      	b.n	8007814 <_printf_i+0x200>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1a7      	bne.n	8007790 <_printf_i+0x17c>
 8007840:	780b      	ldrb	r3, [r1, #0]
 8007842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007846:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800784a:	e765      	b.n	8007718 <_printf_i+0x104>
 800784c:	08007c29 	.word	0x08007c29
 8007850:	08007c18 	.word	0x08007c18

08007854 <__ascii_wctomb>:
 8007854:	b149      	cbz	r1, 800786a <__ascii_wctomb+0x16>
 8007856:	2aff      	cmp	r2, #255	; 0xff
 8007858:	bf85      	ittet	hi
 800785a:	238a      	movhi	r3, #138	; 0x8a
 800785c:	6003      	strhi	r3, [r0, #0]
 800785e:	700a      	strbls	r2, [r1, #0]
 8007860:	f04f 30ff 	movhi.w	r0, #4294967295
 8007864:	bf98      	it	ls
 8007866:	2001      	movls	r0, #1
 8007868:	4770      	bx	lr
 800786a:	4608      	mov	r0, r1
 800786c:	4770      	bx	lr

0800786e <memmove>:
 800786e:	4288      	cmp	r0, r1
 8007870:	b510      	push	{r4, lr}
 8007872:	eb01 0302 	add.w	r3, r1, r2
 8007876:	d803      	bhi.n	8007880 <memmove+0x12>
 8007878:	1e42      	subs	r2, r0, #1
 800787a:	4299      	cmp	r1, r3
 800787c:	d10c      	bne.n	8007898 <memmove+0x2a>
 800787e:	bd10      	pop	{r4, pc}
 8007880:	4298      	cmp	r0, r3
 8007882:	d2f9      	bcs.n	8007878 <memmove+0xa>
 8007884:	1881      	adds	r1, r0, r2
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	42d3      	cmn	r3, r2
 800788a:	d100      	bne.n	800788e <memmove+0x20>
 800788c:	bd10      	pop	{r4, pc}
 800788e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007892:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007896:	e7f7      	b.n	8007888 <memmove+0x1a>
 8007898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800789c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80078a0:	e7eb      	b.n	800787a <memmove+0xc>

080078a2 <_realloc_r>:
 80078a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a4:	4607      	mov	r7, r0
 80078a6:	4614      	mov	r4, r2
 80078a8:	460e      	mov	r6, r1
 80078aa:	b921      	cbnz	r1, 80078b6 <_realloc_r+0x14>
 80078ac:	4611      	mov	r1, r2
 80078ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078b2:	f7ff bb17 	b.w	8006ee4 <_malloc_r>
 80078b6:	b922      	cbnz	r2, 80078c2 <_realloc_r+0x20>
 80078b8:	f7ff fac6 	bl	8006e48 <_free_r>
 80078bc:	4625      	mov	r5, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c2:	f000 f814 	bl	80078ee <_malloc_usable_size_r>
 80078c6:	4284      	cmp	r4, r0
 80078c8:	d90f      	bls.n	80078ea <_realloc_r+0x48>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff fb09 	bl	8006ee4 <_malloc_r>
 80078d2:	4605      	mov	r5, r0
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d0f2      	beq.n	80078be <_realloc_r+0x1c>
 80078d8:	4631      	mov	r1, r6
 80078da:	4622      	mov	r2, r4
 80078dc:	f7ff faa0 	bl	8006e20 <memcpy>
 80078e0:	4631      	mov	r1, r6
 80078e2:	4638      	mov	r0, r7
 80078e4:	f7ff fab0 	bl	8006e48 <_free_r>
 80078e8:	e7e9      	b.n	80078be <_realloc_r+0x1c>
 80078ea:	4635      	mov	r5, r6
 80078ec:	e7e7      	b.n	80078be <_realloc_r+0x1c>

080078ee <_malloc_usable_size_r>:
 80078ee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80078f2:	2800      	cmp	r0, #0
 80078f4:	f1a0 0004 	sub.w	r0, r0, #4
 80078f8:	bfbc      	itt	lt
 80078fa:	580b      	ldrlt	r3, [r1, r0]
 80078fc:	18c0      	addlt	r0, r0, r3
 80078fe:	4770      	bx	lr

08007900 <sqrt>:
 8007900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007904:	ed2d 8b02 	vpush	{d8}
 8007908:	b08b      	sub	sp, #44	; 0x2c
 800790a:	ec55 4b10 	vmov	r4, r5, d0
 800790e:	f000 f851 	bl	80079b4 <__ieee754_sqrt>
 8007912:	4b26      	ldr	r3, [pc, #152]	; (80079ac <sqrt+0xac>)
 8007914:	eeb0 8a40 	vmov.f32	s16, s0
 8007918:	eef0 8a60 	vmov.f32	s17, s1
 800791c:	f993 6000 	ldrsb.w	r6, [r3]
 8007920:	1c73      	adds	r3, r6, #1
 8007922:	d02a      	beq.n	800797a <sqrt+0x7a>
 8007924:	4622      	mov	r2, r4
 8007926:	462b      	mov	r3, r5
 8007928:	4620      	mov	r0, r4
 800792a:	4629      	mov	r1, r5
 800792c:	f7f9 f8fa 	bl	8000b24 <__aeabi_dcmpun>
 8007930:	4607      	mov	r7, r0
 8007932:	bb10      	cbnz	r0, 800797a <sqrt+0x7a>
 8007934:	f04f 0800 	mov.w	r8, #0
 8007938:	f04f 0900 	mov.w	r9, #0
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	4620      	mov	r0, r4
 8007942:	4629      	mov	r1, r5
 8007944:	f7f9 f8c6 	bl	8000ad4 <__aeabi_dcmplt>
 8007948:	b1b8      	cbz	r0, 800797a <sqrt+0x7a>
 800794a:	2301      	movs	r3, #1
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	4b18      	ldr	r3, [pc, #96]	; (80079b0 <sqrt+0xb0>)
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	9708      	str	r7, [sp, #32]
 8007954:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007958:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800795c:	b9b6      	cbnz	r6, 800798c <sqrt+0x8c>
 800795e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007962:	4668      	mov	r0, sp
 8007964:	f000 f8d6 	bl	8007b14 <matherr>
 8007968:	b1d0      	cbz	r0, 80079a0 <sqrt+0xa0>
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	b11b      	cbz	r3, 8007976 <sqrt+0x76>
 800796e:	f000 f8d3 	bl	8007b18 <__errno>
 8007972:	9b08      	ldr	r3, [sp, #32]
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	ed9d 8b06 	vldr	d8, [sp, #24]
 800797a:	eeb0 0a48 	vmov.f32	s0, s16
 800797e:	eef0 0a68 	vmov.f32	s1, s17
 8007982:	b00b      	add	sp, #44	; 0x2c
 8007984:	ecbd 8b02 	vpop	{d8}
 8007988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800798c:	4642      	mov	r2, r8
 800798e:	464b      	mov	r3, r9
 8007990:	4640      	mov	r0, r8
 8007992:	4649      	mov	r1, r9
 8007994:	f7f8 ff56 	bl	8000844 <__aeabi_ddiv>
 8007998:	2e02      	cmp	r6, #2
 800799a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800799e:	d1e0      	bne.n	8007962 <sqrt+0x62>
 80079a0:	f000 f8ba 	bl	8007b18 <__errno>
 80079a4:	2321      	movs	r3, #33	; 0x21
 80079a6:	6003      	str	r3, [r0, #0]
 80079a8:	e7df      	b.n	800796a <sqrt+0x6a>
 80079aa:	bf00      	nop
 80079ac:	20000228 	.word	0x20000228
 80079b0:	08007d3b 	.word	0x08007d3b

080079b4 <__ieee754_sqrt>:
 80079b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	ec55 4b10 	vmov	r4, r5, d0
 80079bc:	4e54      	ldr	r6, [pc, #336]	; (8007b10 <__ieee754_sqrt+0x15c>)
 80079be:	43ae      	bics	r6, r5
 80079c0:	ee10 0a10 	vmov	r0, s0
 80079c4:	462b      	mov	r3, r5
 80079c6:	462a      	mov	r2, r5
 80079c8:	4621      	mov	r1, r4
 80079ca:	d113      	bne.n	80079f4 <__ieee754_sqrt+0x40>
 80079cc:	ee10 2a10 	vmov	r2, s0
 80079d0:	462b      	mov	r3, r5
 80079d2:	ee10 0a10 	vmov	r0, s0
 80079d6:	4629      	mov	r1, r5
 80079d8:	f7f8 fe0a 	bl	80005f0 <__aeabi_dmul>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4620      	mov	r0, r4
 80079e2:	4629      	mov	r1, r5
 80079e4:	f7f8 fc52 	bl	800028c <__adddf3>
 80079e8:	4604      	mov	r4, r0
 80079ea:	460d      	mov	r5, r1
 80079ec:	ec45 4b10 	vmov	d0, r4, r5
 80079f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f4:	2d00      	cmp	r5, #0
 80079f6:	dc10      	bgt.n	8007a1a <__ieee754_sqrt+0x66>
 80079f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079fc:	4330      	orrs	r0, r6
 80079fe:	d0f5      	beq.n	80079ec <__ieee754_sqrt+0x38>
 8007a00:	b15d      	cbz	r5, 8007a1a <__ieee754_sqrt+0x66>
 8007a02:	ee10 2a10 	vmov	r2, s0
 8007a06:	462b      	mov	r3, r5
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f8 fc3c 	bl	8000288 <__aeabi_dsub>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	f7f8 ff16 	bl	8000844 <__aeabi_ddiv>
 8007a18:	e7e6      	b.n	80079e8 <__ieee754_sqrt+0x34>
 8007a1a:	151b      	asrs	r3, r3, #20
 8007a1c:	d10c      	bne.n	8007a38 <__ieee754_sqrt+0x84>
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	d06d      	beq.n	8007afe <__ieee754_sqrt+0x14a>
 8007a22:	2000      	movs	r0, #0
 8007a24:	02d6      	lsls	r6, r2, #11
 8007a26:	d56e      	bpl.n	8007b06 <__ieee754_sqrt+0x152>
 8007a28:	1e44      	subs	r4, r0, #1
 8007a2a:	1b1b      	subs	r3, r3, r4
 8007a2c:	f1c0 0420 	rsb	r4, r0, #32
 8007a30:	fa21 f404 	lsr.w	r4, r1, r4
 8007a34:	4322      	orrs	r2, r4
 8007a36:	4081      	lsls	r1, r0
 8007a38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a3c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a40:	07dd      	lsls	r5, r3, #31
 8007a42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a46:	bf42      	ittt	mi
 8007a48:	0052      	lslmi	r2, r2, #1
 8007a4a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8007a4e:	0049      	lslmi	r1, r1, #1
 8007a50:	1058      	asrs	r0, r3, #1
 8007a52:	2500      	movs	r5, #0
 8007a54:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8007a58:	441a      	add	r2, r3
 8007a5a:	0049      	lsls	r1, r1, #1
 8007a5c:	2316      	movs	r3, #22
 8007a5e:	462c      	mov	r4, r5
 8007a60:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007a64:	19a7      	adds	r7, r4, r6
 8007a66:	4297      	cmp	r7, r2
 8007a68:	bfde      	ittt	le
 8007a6a:	1bd2      	suble	r2, r2, r7
 8007a6c:	19bc      	addle	r4, r7, r6
 8007a6e:	19ad      	addle	r5, r5, r6
 8007a70:	0052      	lsls	r2, r2, #1
 8007a72:	3b01      	subs	r3, #1
 8007a74:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007a78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a80:	d1f0      	bne.n	8007a64 <__ieee754_sqrt+0xb0>
 8007a82:	f04f 0e20 	mov.w	lr, #32
 8007a86:	469c      	mov	ip, r3
 8007a88:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a8c:	42a2      	cmp	r2, r4
 8007a8e:	eb06 070c 	add.w	r7, r6, ip
 8007a92:	dc02      	bgt.n	8007a9a <__ieee754_sqrt+0xe6>
 8007a94:	d112      	bne.n	8007abc <__ieee754_sqrt+0x108>
 8007a96:	428f      	cmp	r7, r1
 8007a98:	d810      	bhi.n	8007abc <__ieee754_sqrt+0x108>
 8007a9a:	2f00      	cmp	r7, #0
 8007a9c:	eb07 0c06 	add.w	ip, r7, r6
 8007aa0:	da34      	bge.n	8007b0c <__ieee754_sqrt+0x158>
 8007aa2:	f1bc 0f00 	cmp.w	ip, #0
 8007aa6:	db31      	blt.n	8007b0c <__ieee754_sqrt+0x158>
 8007aa8:	f104 0801 	add.w	r8, r4, #1
 8007aac:	1b12      	subs	r2, r2, r4
 8007aae:	428f      	cmp	r7, r1
 8007ab0:	bf88      	it	hi
 8007ab2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007ab6:	1bc9      	subs	r1, r1, r7
 8007ab8:	4433      	add	r3, r6
 8007aba:	4644      	mov	r4, r8
 8007abc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007ac0:	f1be 0e01 	subs.w	lr, lr, #1
 8007ac4:	443a      	add	r2, r7
 8007ac6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007aca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007ace:	d1dd      	bne.n	8007a8c <__ieee754_sqrt+0xd8>
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	d006      	beq.n	8007ae2 <__ieee754_sqrt+0x12e>
 8007ad4:	1c5c      	adds	r4, r3, #1
 8007ad6:	bf13      	iteet	ne
 8007ad8:	3301      	addne	r3, #1
 8007ada:	3501      	addeq	r5, #1
 8007adc:	4673      	moveq	r3, lr
 8007ade:	f023 0301 	bicne.w	r3, r3, #1
 8007ae2:	106a      	asrs	r2, r5, #1
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	07e9      	lsls	r1, r5, #31
 8007ae8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007aec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007af0:	bf48      	it	mi
 8007af2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007af6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007afa:	461c      	mov	r4, r3
 8007afc:	e776      	b.n	80079ec <__ieee754_sqrt+0x38>
 8007afe:	0aca      	lsrs	r2, r1, #11
 8007b00:	3b15      	subs	r3, #21
 8007b02:	0549      	lsls	r1, r1, #21
 8007b04:	e78b      	b.n	8007a1e <__ieee754_sqrt+0x6a>
 8007b06:	0052      	lsls	r2, r2, #1
 8007b08:	3001      	adds	r0, #1
 8007b0a:	e78b      	b.n	8007a24 <__ieee754_sqrt+0x70>
 8007b0c:	46a0      	mov	r8, r4
 8007b0e:	e7cd      	b.n	8007aac <__ieee754_sqrt+0xf8>
 8007b10:	7ff00000 	.word	0x7ff00000

08007b14 <matherr>:
 8007b14:	2000      	movs	r0, #0
 8007b16:	4770      	bx	lr

08007b18 <__errno>:
 8007b18:	4b01      	ldr	r3, [pc, #4]	; (8007b20 <__errno+0x8>)
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	20000058 	.word	0x20000058

08007b24 <_sbrk>:
 8007b24:	4b04      	ldr	r3, [pc, #16]	; (8007b38 <_sbrk+0x14>)
 8007b26:	6819      	ldr	r1, [r3, #0]
 8007b28:	4602      	mov	r2, r0
 8007b2a:	b909      	cbnz	r1, 8007b30 <_sbrk+0xc>
 8007b2c:	4903      	ldr	r1, [pc, #12]	; (8007b3c <_sbrk+0x18>)
 8007b2e:	6019      	str	r1, [r3, #0]
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	4402      	add	r2, r0
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	4770      	bx	lr
 8007b38:	2000032c 	.word	0x2000032c
 8007b3c:	2000060c 	.word	0x2000060c

08007b40 <_init>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	bf00      	nop
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr

08007b4c <_fini>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	bf00      	nop
 8007b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b52:	bc08      	pop	{r3}
 8007b54:	469e      	mov	lr, r3
 8007b56:	4770      	bx	lr
