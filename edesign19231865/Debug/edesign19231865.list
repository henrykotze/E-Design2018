
C:\Users\labuser\Desktop\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000228  20000000  08007520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  7 .bss          000003dc  20000228  20000228  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000604  20000604  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035bbe  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000052da  00000000  00000000  00055e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f2b7  00000000  00000000  0005b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dc8  00000000  00000000  0006a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002ba0  00000000  00000000  0006b170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00022c46  00000000  00000000  0006dd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000150ea  00000000  00000000  00090956  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000aafc7  00000000  00000000  000a5a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00150a07  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000327c  00000000  00000000  00150a84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007328 	.word	0x08007328

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08007328 	.word	0x08007328

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_frsub>:
 8000280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__addsf3>
 8000286:	bf00      	nop

08000288 <__aeabi_fsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800028c <__addsf3>:
 800028c:	0042      	lsls	r2, r0, #1
 800028e:	bf1f      	itttt	ne
 8000290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000294:	ea92 0f03 	teqne	r2, r3
 8000298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800029c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002a0:	d06a      	beq.n	8000378 <__addsf3+0xec>
 80002a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002aa:	bfc1      	itttt	gt
 80002ac:	18d2      	addgt	r2, r2, r3
 80002ae:	4041      	eorgt	r1, r0
 80002b0:	4048      	eorgt	r0, r1
 80002b2:	4041      	eorgt	r1, r0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	2b19      	cmp	r3, #25
 80002ba:	bf88      	it	hi
 80002bc:	4770      	bxhi	lr
 80002be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002ca:	bf18      	it	ne
 80002cc:	4240      	negne	r0, r0
 80002ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4249      	negne	r1, r1
 80002de:	ea92 0f03 	teq	r2, r3
 80002e2:	d03f      	beq.n	8000364 <__addsf3+0xd8>
 80002e4:	f1a2 0201 	sub.w	r2, r2, #1
 80002e8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ec:	eb10 000c 	adds.w	r0, r0, ip
 80002f0:	f1c3 0320 	rsb	r3, r3, #32
 80002f4:	fa01 f103 	lsl.w	r1, r1, r3
 80002f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__addsf3+0x78>
 80002fe:	4249      	negs	r1, r1
 8000300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000308:	d313      	bcc.n	8000332 <__addsf3+0xa6>
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d306      	bcc.n	800031e <__addsf3+0x92>
 8000310:	0840      	lsrs	r0, r0, #1
 8000312:	ea4f 0131 	mov.w	r1, r1, rrx
 8000316:	f102 0201 	add.w	r2, r2, #1
 800031a:	2afe      	cmp	r2, #254	; 0xfe
 800031c:	d251      	bcs.n	80003c2 <__addsf3+0x136>
 800031e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000326:	bf08      	it	eq
 8000328:	f020 0001 	biceq.w	r0, r0, #1
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	4770      	bx	lr
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	eb40 0000 	adc.w	r0, r0, r0
 8000338:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	d1ed      	bne.n	800031e <__addsf3+0x92>
 8000342:	fab0 fc80 	clz	ip, r0
 8000346:	f1ac 0c08 	sub.w	ip, ip, #8
 800034a:	ebb2 020c 	subs.w	r2, r2, ip
 800034e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000352:	bfaa      	itet	ge
 8000354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000358:	4252      	neglt	r2, r2
 800035a:	4318      	orrge	r0, r3
 800035c:	bfbc      	itt	lt
 800035e:	40d0      	lsrlt	r0, r2
 8000360:	4318      	orrlt	r0, r3
 8000362:	4770      	bx	lr
 8000364:	f092 0f00 	teq	r2, #0
 8000368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800036c:	bf06      	itte	eq
 800036e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000372:	3201      	addeq	r2, #1
 8000374:	3b01      	subne	r3, #1
 8000376:	e7b5      	b.n	80002e4 <__addsf3+0x58>
 8000378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800037c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000380:	bf18      	it	ne
 8000382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000386:	d021      	beq.n	80003cc <__addsf3+0x140>
 8000388:	ea92 0f03 	teq	r2, r3
 800038c:	d004      	beq.n	8000398 <__addsf3+0x10c>
 800038e:	f092 0f00 	teq	r2, #0
 8000392:	bf08      	it	eq
 8000394:	4608      	moveq	r0, r1
 8000396:	4770      	bx	lr
 8000398:	ea90 0f01 	teq	r0, r1
 800039c:	bf1c      	itt	ne
 800039e:	2000      	movne	r0, #0
 80003a0:	4770      	bxne	lr
 80003a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003a6:	d104      	bne.n	80003b2 <__addsf3+0x126>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	bf28      	it	cs
 80003ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003b6:	bf3c      	itt	cc
 80003b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bxcc	lr
 80003be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ca:	4770      	bx	lr
 80003cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003d0:	bf16      	itet	ne
 80003d2:	4608      	movne	r0, r1
 80003d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003d8:	4601      	movne	r1, r0
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	bf06      	itte	eq
 80003de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003e2:	ea90 0f01 	teqeq	r0, r1
 80003e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003ea:	4770      	bx	lr

080003ec <__aeabi_ui2f>:
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e004      	b.n	80003fc <__aeabi_i2f+0x8>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2f>:
 80003f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003f8:	bf48      	it	mi
 80003fa:	4240      	negmi	r0, r0
 80003fc:	ea5f 0c00 	movs.w	ip, r0
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000408:	4601      	mov	r1, r0
 800040a:	f04f 0000 	mov.w	r0, #0
 800040e:	e01c      	b.n	800044a <__aeabi_l2f+0x2a>

08000410 <__aeabi_ul2f>:
 8000410:	ea50 0201 	orrs.w	r2, r0, r1
 8000414:	bf08      	it	eq
 8000416:	4770      	bxeq	lr
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	e00a      	b.n	8000434 <__aeabi_l2f+0x14>
 800041e:	bf00      	nop

08000420 <__aeabi_l2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__aeabi_l2f+0x14>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	ea5f 0c01 	movs.w	ip, r1
 8000438:	bf02      	ittt	eq
 800043a:	4684      	moveq	ip, r0
 800043c:	4601      	moveq	r1, r0
 800043e:	2000      	moveq	r0, #0
 8000440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000444:	bf08      	it	eq
 8000446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800044a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800044e:	fabc f28c 	clz	r2, ip
 8000452:	3a08      	subs	r2, #8
 8000454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000458:	db10      	blt.n	800047c <__aeabi_l2f+0x5c>
 800045a:	fa01 fc02 	lsl.w	ip, r1, r2
 800045e:	4463      	add	r3, ip
 8000460:	fa00 fc02 	lsl.w	ip, r0, r2
 8000464:	f1c2 0220 	rsb	r2, r2, #32
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	eb43 0002 	adc.w	r0, r3, r2
 8000474:	bf08      	it	eq
 8000476:	f020 0001 	biceq.w	r0, r0, #1
 800047a:	4770      	bx	lr
 800047c:	f102 0220 	add.w	r2, r2, #32
 8000480:	fa01 fc02 	lsl.w	ip, r1, r2
 8000484:	f1c2 0220 	rsb	r2, r2, #32
 8000488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800048c:	fa21 f202 	lsr.w	r2, r1, r2
 8000490:	eb43 0002 	adc.w	r0, r3, r2
 8000494:	bf08      	it	eq
 8000496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800049a:	4770      	bx	lr

0800049c <__aeabi_f2ulz>:
 800049c:	b5d0      	push	{r4, r6, r7, lr}
 800049e:	f000 f987 	bl	80007b0 <__aeabi_f2d>
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <__aeabi_f2ulz+0x44>)
 80004a6:	4606      	mov	r6, r0
 80004a8:	460f      	mov	r7, r1
 80004aa:	f000 f9d5 	bl	8000858 <__aeabi_dmul>
 80004ae:	f000 fbe5 	bl	8000c7c <__aeabi_d2uiz>
 80004b2:	4604      	mov	r4, r0
 80004b4:	f000 f95a 	bl	800076c <__aeabi_ui2d>
 80004b8:	2200      	movs	r2, #0
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <__aeabi_f2ulz+0x48>)
 80004bc:	f000 f9cc 	bl	8000858 <__aeabi_dmul>
 80004c0:	4602      	mov	r2, r0
 80004c2:	460b      	mov	r3, r1
 80004c4:	4630      	mov	r0, r6
 80004c6:	4639      	mov	r1, r7
 80004c8:	f000 f812 	bl	80004f0 <__aeabi_dsub>
 80004cc:	f000 fbd6 	bl	8000c7c <__aeabi_d2uiz>
 80004d0:	4623      	mov	r3, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	ea42 0200 	orr.w	r2, r2, r0
 80004d8:	4610      	mov	r0, r2
 80004da:	4619      	mov	r1, r3
 80004dc:	bdd0      	pop	{r4, r6, r7, pc}
 80004de:	bf00      	nop
 80004e0:	3df00000 	.word	0x3df00000
 80004e4:	41f00000 	.word	0x41f00000

080004e8 <__aeabi_drsub>:
 80004e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e002      	b.n	80004f4 <__adddf3>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dsub>:
 80004f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f4 <__adddf3>:
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	bf1f      	itttt	ne
 800050a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051a:	f000 80e2 	beq.w	80006e2 <__adddf3+0x1ee>
 800051e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000526:	bfb8      	it	lt
 8000528:	426d      	neglt	r5, r5
 800052a:	dd0c      	ble.n	8000546 <__adddf3+0x52>
 800052c:	442c      	add	r4, r5
 800052e:	ea80 0202 	eor.w	r2, r0, r2
 8000532:	ea81 0303 	eor.w	r3, r1, r3
 8000536:	ea82 0000 	eor.w	r0, r2, r0
 800053a:	ea83 0101 	eor.w	r1, r3, r1
 800053e:	ea80 0202 	eor.w	r2, r0, r2
 8000542:	ea81 0303 	eor.w	r3, r1, r3
 8000546:	2d36      	cmp	r5, #54	; 0x36
 8000548:	bf88      	it	hi
 800054a:	bd30      	pophi	{r4, r5, pc}
 800054c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000550:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x70>
 800055e:	4240      	negs	r0, r0
 8000560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000568:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800056c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000570:	d002      	beq.n	8000578 <__adddf3+0x84>
 8000572:	4252      	negs	r2, r2
 8000574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000578:	ea94 0f05 	teq	r4, r5
 800057c:	f000 80a7 	beq.w	80006ce <__adddf3+0x1da>
 8000580:	f1a4 0401 	sub.w	r4, r4, #1
 8000584:	f1d5 0e20 	rsbs	lr, r5, #32
 8000588:	db0d      	blt.n	80005a6 <__adddf3+0xb2>
 800058a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058e:	fa22 f205 	lsr.w	r2, r2, r5
 8000592:	1880      	adds	r0, r0, r2
 8000594:	f141 0100 	adc.w	r1, r1, #0
 8000598:	fa03 f20e 	lsl.w	r2, r3, lr
 800059c:	1880      	adds	r0, r0, r2
 800059e:	fa43 f305 	asr.w	r3, r3, r5
 80005a2:	4159      	adcs	r1, r3
 80005a4:	e00e      	b.n	80005c4 <__adddf3+0xd0>
 80005a6:	f1a5 0520 	sub.w	r5, r5, #32
 80005aa:	f10e 0e20 	add.w	lr, lr, #32
 80005ae:	2a01      	cmp	r2, #1
 80005b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b4:	bf28      	it	cs
 80005b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	18c0      	adds	r0, r0, r3
 80005c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	d507      	bpl.n	80005da <__adddf3+0xe6>
 80005ca:	f04f 0e00 	mov.w	lr, #0
 80005ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005de:	d31b      	bcc.n	8000618 <__adddf3+0x124>
 80005e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e4:	d30c      	bcc.n	8000600 <__adddf3+0x10c>
 80005e6:	0849      	lsrs	r1, r1, #1
 80005e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80005ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f0:	f104 0401 	add.w	r4, r4, #1
 80005f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005fc:	f080 809a 	bcs.w	8000734 <__adddf3+0x240>
 8000600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	ea41 0105 	orr.w	r1, r1, r5
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800061c:	4140      	adcs	r0, r0
 800061e:	eb41 0101 	adc.w	r1, r1, r1
 8000622:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000626:	f1a4 0401 	sub.w	r4, r4, #1
 800062a:	d1e9      	bne.n	8000600 <__adddf3+0x10c>
 800062c:	f091 0f00 	teq	r1, #0
 8000630:	bf04      	itt	eq
 8000632:	4601      	moveq	r1, r0
 8000634:	2000      	moveq	r0, #0
 8000636:	fab1 f381 	clz	r3, r1
 800063a:	bf08      	it	eq
 800063c:	3320      	addeq	r3, #32
 800063e:	f1a3 030b 	sub.w	r3, r3, #11
 8000642:	f1b3 0220 	subs.w	r2, r3, #32
 8000646:	da0c      	bge.n	8000662 <__adddf3+0x16e>
 8000648:	320c      	adds	r2, #12
 800064a:	dd08      	ble.n	800065e <__adddf3+0x16a>
 800064c:	f102 0c14 	add.w	ip, r2, #20
 8000650:	f1c2 020c 	rsb	r2, r2, #12
 8000654:	fa01 f00c 	lsl.w	r0, r1, ip
 8000658:	fa21 f102 	lsr.w	r1, r1, r2
 800065c:	e00c      	b.n	8000678 <__adddf3+0x184>
 800065e:	f102 0214 	add.w	r2, r2, #20
 8000662:	bfd8      	it	le
 8000664:	f1c2 0c20 	rsble	ip, r2, #32
 8000668:	fa01 f102 	lsl.w	r1, r1, r2
 800066c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000670:	bfdc      	itt	le
 8000672:	ea41 010c 	orrle.w	r1, r1, ip
 8000676:	4090      	lslle	r0, r2
 8000678:	1ae4      	subs	r4, r4, r3
 800067a:	bfa2      	ittt	ge
 800067c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000680:	4329      	orrge	r1, r5
 8000682:	bd30      	popge	{r4, r5, pc}
 8000684:	ea6f 0404 	mvn.w	r4, r4
 8000688:	3c1f      	subs	r4, #31
 800068a:	da1c      	bge.n	80006c6 <__adddf3+0x1d2>
 800068c:	340c      	adds	r4, #12
 800068e:	dc0e      	bgt.n	80006ae <__adddf3+0x1ba>
 8000690:	f104 0414 	add.w	r4, r4, #20
 8000694:	f1c4 0220 	rsb	r2, r4, #32
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f302 	lsl.w	r3, r1, r2
 80006a0:	ea40 0003 	orr.w	r0, r0, r3
 80006a4:	fa21 f304 	lsr.w	r3, r1, r4
 80006a8:	ea45 0103 	orr.w	r1, r5, r3
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	f1c4 040c 	rsb	r4, r4, #12
 80006b2:	f1c4 0220 	rsb	r2, r4, #32
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	fa01 f304 	lsl.w	r3, r1, r4
 80006be:	ea40 0003 	orr.w	r0, r0, r3
 80006c2:	4629      	mov	r1, r5
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	fa21 f004 	lsr.w	r0, r1, r4
 80006ca:	4629      	mov	r1, r5
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	f094 0f00 	teq	r4, #0
 80006d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d6:	bf06      	itte	eq
 80006d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006dc:	3401      	addeq	r4, #1
 80006de:	3d01      	subne	r5, #1
 80006e0:	e74e      	b.n	8000580 <__adddf3+0x8c>
 80006e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e6:	bf18      	it	ne
 80006e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006ec:	d029      	beq.n	8000742 <__adddf3+0x24e>
 80006ee:	ea94 0f05 	teq	r4, r5
 80006f2:	bf08      	it	eq
 80006f4:	ea90 0f02 	teqeq	r0, r2
 80006f8:	d005      	beq.n	8000706 <__adddf3+0x212>
 80006fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fe:	bf04      	itt	eq
 8000700:	4619      	moveq	r1, r3
 8000702:	4610      	moveq	r0, r2
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	ea91 0f03 	teq	r1, r3
 800070a:	bf1e      	ittt	ne
 800070c:	2100      	movne	r1, #0
 800070e:	2000      	movne	r0, #0
 8000710:	bd30      	popne	{r4, r5, pc}
 8000712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000716:	d105      	bne.n	8000724 <__adddf3+0x230>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	4149      	adcs	r1, r1
 800071c:	bf28      	it	cs
 800071e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000728:	bf3c      	itt	cc
 800072a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072e:	bd30      	popcc	{r4, r5, pc}
 8000730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000746:	bf1a      	itte	ne
 8000748:	4619      	movne	r1, r3
 800074a:	4610      	movne	r0, r2
 800074c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000750:	bf1c      	itt	ne
 8000752:	460b      	movne	r3, r1
 8000754:	4602      	movne	r2, r0
 8000756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075a:	bf06      	itte	eq
 800075c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000760:	ea91 0f03 	teqeq	r1, r3
 8000764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	bf00      	nop

0800076c <__aeabi_ui2d>:
 800076c:	f090 0f00 	teq	r0, #0
 8000770:	bf04      	itt	eq
 8000772:	2100      	moveq	r1, #0
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000780:	f04f 0500 	mov.w	r5, #0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e750      	b.n	800062c <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_i2d>:
 800078c:	f090 0f00 	teq	r0, #0
 8000790:	bf04      	itt	eq
 8000792:	2100      	moveq	r1, #0
 8000794:	4770      	bxeq	lr
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a4:	bf48      	it	mi
 80007a6:	4240      	negmi	r0, r0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e73e      	b.n	800062c <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_f2d>:
 80007b0:	0042      	lsls	r2, r0, #1
 80007b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007be:	bf1f      	itttt	ne
 80007c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007cc:	4770      	bxne	lr
 80007ce:	f092 0f00 	teq	r2, #0
 80007d2:	bf14      	ite	ne
 80007d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d8:	4770      	bxeq	lr
 80007da:	b530      	push	{r4, r5, lr}
 80007dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	e720      	b.n	800062c <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_ul2d>:
 80007ec:	ea50 0201 	orrs.w	r2, r0, r1
 80007f0:	bf08      	it	eq
 80007f2:	4770      	bxeq	lr
 80007f4:	b530      	push	{r4, r5, lr}
 80007f6:	f04f 0500 	mov.w	r5, #0
 80007fa:	e00a      	b.n	8000812 <__aeabi_l2d+0x16>

080007fc <__aeabi_l2d>:
 80007fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000800:	bf08      	it	eq
 8000802:	4770      	bxeq	lr
 8000804:	b530      	push	{r4, r5, lr}
 8000806:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080a:	d502      	bpl.n	8000812 <__aeabi_l2d+0x16>
 800080c:	4240      	negs	r0, r0
 800080e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000812:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000816:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800081e:	f43f aedc 	beq.w	80005da <__adddf3+0xe6>
 8000822:	f04f 0203 	mov.w	r2, #3
 8000826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082a:	bf18      	it	ne
 800082c:	3203      	addne	r2, #3
 800082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000832:	bf18      	it	ne
 8000834:	3203      	addne	r2, #3
 8000836:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083a:	f1c2 0320 	rsb	r3, r2, #32
 800083e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000842:	fa20 f002 	lsr.w	r0, r0, r2
 8000846:	fa01 fe03 	lsl.w	lr, r1, r3
 800084a:	ea40 000e 	orr.w	r0, r0, lr
 800084e:	fa21 f102 	lsr.w	r1, r1, r2
 8000852:	4414      	add	r4, r2
 8000854:	e6c1      	b.n	80005da <__adddf3+0xe6>
 8000856:	bf00      	nop

08000858 <__aeabi_dmul>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000862:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000866:	bf1d      	ittte	ne
 8000868:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800086c:	ea94 0f0c 	teqne	r4, ip
 8000870:	ea95 0f0c 	teqne	r5, ip
 8000874:	f000 f8de 	bleq	8000a34 <__aeabi_dmul+0x1dc>
 8000878:	442c      	add	r4, r5
 800087a:	ea81 0603 	eor.w	r6, r1, r3
 800087e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000882:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000886:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800088a:	bf18      	it	ne
 800088c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000898:	d038      	beq.n	800090c <__aeabi_dmul+0xb4>
 800089a:	fba0 ce02 	umull	ip, lr, r0, r2
 800089e:	f04f 0500 	mov.w	r5, #0
 80008a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008ae:	f04f 0600 	mov.w	r6, #0
 80008b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008b6:	f09c 0f00 	teq	ip, #0
 80008ba:	bf18      	it	ne
 80008bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80008c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008cc:	d204      	bcs.n	80008d8 <__aeabi_dmul+0x80>
 80008ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008d2:	416d      	adcs	r5, r5
 80008d4:	eb46 0606 	adc.w	r6, r6, r6
 80008d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f0:	bf88      	it	hi
 80008f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f6:	d81e      	bhi.n	8000936 <__aeabi_dmul+0xde>
 80008f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008fc:	bf08      	it	eq
 80008fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000910:	ea46 0101 	orr.w	r1, r6, r1
 8000914:	ea40 0002 	orr.w	r0, r0, r2
 8000918:	ea81 0103 	eor.w	r1, r1, r3
 800091c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	f300 80ab 	bgt.w	8000a90 <__aeabi_dmul+0x238>
 800093a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800093e:	bfde      	ittt	le
 8000940:	2000      	movle	r0, #0
 8000942:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000946:	bd70      	pople	{r4, r5, r6, pc}
 8000948:	f1c4 0400 	rsb	r4, r4, #0
 800094c:	3c20      	subs	r4, #32
 800094e:	da35      	bge.n	80009bc <__aeabi_dmul+0x164>
 8000950:	340c      	adds	r4, #12
 8000952:	dc1b      	bgt.n	800098c <__aeabi_dmul+0x134>
 8000954:	f104 0414 	add.w	r4, r4, #20
 8000958:	f1c4 0520 	rsb	r5, r4, #32
 800095c:	fa00 f305 	lsl.w	r3, r0, r5
 8000960:	fa20 f004 	lsr.w	r0, r0, r4
 8000964:	fa01 f205 	lsl.w	r2, r1, r5
 8000968:	ea40 0002 	orr.w	r0, r0, r2
 800096c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000978:	fa21 f604 	lsr.w	r6, r1, r4
 800097c:	eb42 0106 	adc.w	r1, r2, r6
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f1c4 040c 	rsb	r4, r4, #12
 8000990:	f1c4 0520 	rsb	r5, r4, #32
 8000994:	fa00 f304 	lsl.w	r3, r0, r4
 8000998:	fa20 f005 	lsr.w	r0, r0, r5
 800099c:	fa01 f204 	lsl.w	r2, r1, r4
 80009a0:	ea40 0002 	orr.w	r0, r0, r2
 80009a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009ac:	f141 0100 	adc.w	r1, r1, #0
 80009b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009b4:	bf08      	it	eq
 80009b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f1c4 0520 	rsb	r5, r4, #32
 80009c0:	fa00 f205 	lsl.w	r2, r0, r5
 80009c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80009c8:	fa20 f304 	lsr.w	r3, r0, r4
 80009cc:	fa01 f205 	lsl.w	r2, r1, r5
 80009d0:	ea43 0302 	orr.w	r3, r3, r2
 80009d4:	fa21 f004 	lsr.w	r0, r1, r4
 80009d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009dc:	fa21 f204 	lsr.w	r2, r1, r4
 80009e0:	ea20 0002 	bic.w	r0, r0, r2
 80009e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009ec:	bf08      	it	eq
 80009ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f094 0f00 	teq	r4, #0
 80009f8:	d10f      	bne.n	8000a1a <__aeabi_dmul+0x1c2>
 80009fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009fe:	0040      	lsls	r0, r0, #1
 8000a00:	eb41 0101 	adc.w	r1, r1, r1
 8000a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a08:	bf08      	it	eq
 8000a0a:	3c01      	subeq	r4, #1
 8000a0c:	d0f7      	beq.n	80009fe <__aeabi_dmul+0x1a6>
 8000a0e:	ea41 0106 	orr.w	r1, r1, r6
 8000a12:	f095 0f00 	teq	r5, #0
 8000a16:	bf18      	it	ne
 8000a18:	4770      	bxne	lr
 8000a1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	eb43 0303 	adc.w	r3, r3, r3
 8000a24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a28:	bf08      	it	eq
 8000a2a:	3d01      	subeq	r5, #1
 8000a2c:	d0f7      	beq.n	8000a1e <__aeabi_dmul+0x1c6>
 8000a2e:	ea43 0306 	orr.w	r3, r3, r6
 8000a32:	4770      	bx	lr
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3c:	bf18      	it	ne
 8000a3e:	ea95 0f0c 	teqne	r5, ip
 8000a42:	d00c      	beq.n	8000a5e <__aeabi_dmul+0x206>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	d1d1      	bne.n	80009f4 <__aeabi_dmul+0x19c>
 8000a50:	ea81 0103 	eor.w	r1, r1, r3
 8000a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a62:	bf06      	itte	eq
 8000a64:	4610      	moveq	r0, r2
 8000a66:	4619      	moveq	r1, r3
 8000a68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6c:	d019      	beq.n	8000aa2 <__aeabi_dmul+0x24a>
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	d102      	bne.n	8000a7a <__aeabi_dmul+0x222>
 8000a74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a78:	d113      	bne.n	8000aa2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_dmul+0x234>
 8000a80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a84:	bf1c      	itt	ne
 8000a86:	4610      	movne	r0, r2
 8000a88:	4619      	movne	r1, r3
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dmul+0x24a>
 8000a8c:	ea81 0103 	eor.w	r1, r1, r3
 8000a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}

08000aac <__aeabi_ddiv>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aba:	bf1d      	ittte	ne
 8000abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ac0:	ea94 0f0c 	teqne	r4, ip
 8000ac4:	ea95 0f0c 	teqne	r5, ip
 8000ac8:	f000 f8a7 	bleq	8000c1a <__aeabi_ddiv+0x16e>
 8000acc:	eba4 0405 	sub.w	r4, r4, r5
 8000ad0:	ea81 0e03 	eor.w	lr, r1, r3
 8000ad4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000adc:	f000 8088 	beq.w	8000bf0 <__aeabi_ddiv+0x144>
 8000ae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ae4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ae8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000aec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000af0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000af4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000af8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000afc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b04:	429d      	cmp	r5, r3
 8000b06:	bf08      	it	eq
 8000b08:	4296      	cmpeq	r6, r2
 8000b0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b12:	d202      	bcs.n	8000b1a <__aeabi_ddiv+0x6e>
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b1a:	1ab6      	subs	r6, r6, r2
 8000b1c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b20:	085b      	lsrs	r3, r3, #1
 8000b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b36:	bf22      	ittt	cs
 8000b38:	1ab6      	subcs	r6, r6, r2
 8000b3a:	4675      	movcs	r5, lr
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b66:	bf22      	ittt	cs
 8000b68:	1ab6      	subcs	r6, r6, r2
 8000b6a:	4675      	movcs	r5, lr
 8000b6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b7e:	bf22      	ittt	cs
 8000b80:	1ab6      	subcs	r6, r6, r2
 8000b82:	4675      	movcs	r5, lr
 8000b84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b88:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b8c:	d018      	beq.n	8000bc0 <__aeabi_ddiv+0x114>
 8000b8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ba2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ba6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000baa:	d1c0      	bne.n	8000b2e <__aeabi_ddiv+0x82>
 8000bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bb0:	d10b      	bne.n	8000bca <__aeabi_ddiv+0x11e>
 8000bb2:	ea41 0100 	orr.w	r1, r1, r0
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bbe:	e7b6      	b.n	8000b2e <__aeabi_ddiv+0x82>
 8000bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bc4:	bf04      	itt	eq
 8000bc6:	4301      	orreq	r1, r0
 8000bc8:	2000      	moveq	r0, #0
 8000bca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bce:	bf88      	it	hi
 8000bd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bd4:	f63f aeaf 	bhi.w	8000936 <__aeabi_dmul+0xde>
 8000bd8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bdc:	bf04      	itt	eq
 8000bde:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000be6:	f150 0000 	adcs.w	r0, r0, #0
 8000bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bfc:	bfc2      	ittt	gt
 8000bfe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c06:	bd70      	popgt	{r4, r5, r6, pc}
 8000c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0c:	f04f 0e00 	mov.w	lr, #0
 8000c10:	3c01      	subs	r4, #1
 8000c12:	e690      	b.n	8000936 <__aeabi_dmul+0xde>
 8000c14:	ea45 0e06 	orr.w	lr, r5, r6
 8000c18:	e68d      	b.n	8000936 <__aeabi_dmul+0xde>
 8000c1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c1e:	ea94 0f0c 	teq	r4, ip
 8000c22:	bf08      	it	eq
 8000c24:	ea95 0f0c 	teqeq	r5, ip
 8000c28:	f43f af3b 	beq.w	8000aa2 <__aeabi_dmul+0x24a>
 8000c2c:	ea94 0f0c 	teq	r4, ip
 8000c30:	d10a      	bne.n	8000c48 <__aeabi_ddiv+0x19c>
 8000c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c36:	f47f af34 	bne.w	8000aa2 <__aeabi_dmul+0x24a>
 8000c3a:	ea95 0f0c 	teq	r5, ip
 8000c3e:	f47f af25 	bne.w	8000a8c <__aeabi_dmul+0x234>
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	e72c      	b.n	8000aa2 <__aeabi_dmul+0x24a>
 8000c48:	ea95 0f0c 	teq	r5, ip
 8000c4c:	d106      	bne.n	8000c5c <__aeabi_ddiv+0x1b0>
 8000c4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c52:	f43f aefd 	beq.w	8000a50 <__aeabi_dmul+0x1f8>
 8000c56:	4610      	mov	r0, r2
 8000c58:	4619      	mov	r1, r3
 8000c5a:	e722      	b.n	8000aa2 <__aeabi_dmul+0x24a>
 8000c5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c60:	bf18      	it	ne
 8000c62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c66:	f47f aec5 	bne.w	80009f4 <__aeabi_dmul+0x19c>
 8000c6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c6e:	f47f af0d 	bne.w	8000a8c <__aeabi_dmul+0x234>
 8000c72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c76:	f47f aeeb 	bne.w	8000a50 <__aeabi_dmul+0x1f8>
 8000c7a:	e712      	b.n	8000aa2 <__aeabi_dmul+0x24a>

08000c7c <__aeabi_d2uiz>:
 8000c7c:	004a      	lsls	r2, r1, #1
 8000c7e:	d211      	bcs.n	8000ca4 <__aeabi_d2uiz+0x28>
 8000c80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c84:	d211      	bcs.n	8000caa <__aeabi_d2uiz+0x2e>
 8000c86:	d50d      	bpl.n	8000ca4 <__aeabi_d2uiz+0x28>
 8000c88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c90:	d40e      	bmi.n	8000cb0 <__aeabi_d2uiz+0x34>
 8000c92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	4770      	bx	lr
 8000ca4:	f04f 0000 	mov.w	r0, #0
 8000ca8:	4770      	bx	lr
 8000caa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cae:	d102      	bne.n	8000cb6 <__aeabi_d2uiz+0x3a>
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	4770      	bx	lr
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	4770      	bx	lr

08000cbc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_InitTick+0x24>)
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <HAL_InitTick+0x28>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
{
 8000cc2:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
{
 8000cc8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000cca:	0998      	lsrs	r0, r3, #6
 8000ccc:	f000 fc98 	bl	8001600 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 fc50 	bl	800157c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000cdc:	2000      	movs	r0, #0
 8000cde:	bd10      	pop	{r4, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	10624dd3 	.word	0x10624dd3

08000ce8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_Init+0x20>)
{
 8000cea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	6813      	ldr	r3, [r2, #0]
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 fc2f 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_InitTick>
  HAL_MspInit();
 8000d00:	f004 fda6 	bl	8005850 <HAL_MspInit>
}
 8000d04:	2000      	movs	r0, #0
 8000d06:	bd08      	pop	{r3, pc}
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d0c:	4a02      	ldr	r2, [pc, #8]	; (8000d18 <HAL_IncTick+0xc>)
 8000d0e:	6813      	ldr	r3, [r2, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000328 	.word	0x20000328

08000d1c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000d1c:	4b01      	ldr	r3, [pc, #4]	; (8000d24 <HAL_GetTick+0x8>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000328 	.word	0x20000328

08000d28 <HAL_ADC_ConvCpltCallback>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <HAL_ADC_ConvHalfCpltCallback>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d34:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000d36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3c:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000d3e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000d46:	f7ff bff3 	b.w	8000d30 <HAL_ADC_ErrorCallback>
 8000d4a:	bf00      	nop

08000d4c <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000d4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000d4e:	f7ff bfed 	b.w	8000d2c <HAL_ADC_ConvHalfCpltCallback>
 8000d52:	bf00      	nop

08000d54 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d54:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d58:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000d5c:	d118      	bne.n	8000d90 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d60:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d66:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d68:	68ca      	ldr	r2, [r1, #12]
 8000d6a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000d6e:	d10c      	bne.n	8000d8a <ADC_DMAConvCplt+0x36>
 8000d70:	69da      	ldr	r2, [r3, #28]
 8000d72:	b952      	cbnz	r2, 8000d8a <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d7a:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d7e:	04d2      	lsls	r2, r2, #19
 8000d80:	d403      	bmi.n	8000d8a <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d84:	f042 0201 	orr.w	r2, r2, #1
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff bfcc 	b.w	8000d28 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4718      	bx	r3
 8000d96:	bf00      	nop

08000d98 <HAL_ADC_Init>:
{
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8000da0:	2800      	cmp	r0, #0
 8000da2:	f000 8099 	beq.w	8000ed8 <HAL_ADC_Init+0x140>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000da6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000da8:	f013 0310 	ands.w	r3, r3, #16
 8000dac:	4604      	mov	r4, r0
 8000dae:	d117      	bne.n	8000de0 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000db0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 8083 	beq.w	8000ebe <HAL_ADC_Init+0x126>
 8000db8:	6802      	ldr	r2, [r0, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dba:	6891      	ldr	r1, [r2, #8]
 8000dbc:	00c8      	lsls	r0, r1, #3
 8000dbe:	d572      	bpl.n	8000ea6 <HAL_ADC_Init+0x10e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000dc0:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dc2:	0089      	lsls	r1, r1, #2
 8000dc4:	d46f      	bmi.n	8000ea6 <HAL_ADC_Init+0x10e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dc6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000dc8:	06cf      	lsls	r7, r1, #27
 8000dca:	d400      	bmi.n	8000dce <HAL_ADC_Init+0x36>
 8000dcc:	b163      	cbz	r3, 8000de8 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 8000dce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dd0:	f023 0312 	bic.w	r3, r3, #18
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8000dd8:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8000dda:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000ddc:	b003      	add	sp, #12
 8000dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000de0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000de2:	06db      	lsls	r3, r3, #27
 8000de4:	d4f3      	bmi.n	8000dce <HAL_ADC_Init+0x36>
 8000de6:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000de8:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000dea:	f010 0004 	ands.w	r0, r0, #4
 8000dee:	d1ee      	bne.n	8000dce <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8000df0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000df2:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000df6:	f041 0102 	orr.w	r1, r1, #2
 8000dfa:	6461      	str	r1, [r4, #68]	; 0x44
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dfc:	6893      	ldr	r3, [r2, #8]
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000dfe:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e02:	f003 0303 	and.w	r3, r3, #3
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e06:	f000 80a3 	beq.w	8000f50 <HAL_ADC_Init+0x1b8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e0a:	2b01      	cmp	r3, #1
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e0c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e10:	f000 80a2 	beq.w	8000f58 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e14:	688b      	ldr	r3, [r1, #8]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d05f      	beq.n	8000ede <HAL_ADC_Init+0x146>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e1e:	4972      	ldr	r1, [pc, #456]	; (8000fe8 <HAL_ADC_Init+0x250>)
 8000e20:	6865      	ldr	r5, [r4, #4]
 8000e22:	688b      	ldr	r3, [r1, #8]
 8000e24:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e28:	432b      	orrs	r3, r5
 8000e2a:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e2c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8000e2e:	68e1      	ldr	r1, [r4, #12]
 8000e30:	68a3      	ldr	r3, [r4, #8]
 8000e32:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e34:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e36:	2f01      	cmp	r7, #1
 8000e38:	ea43 0301 	orr.w	r3, r3, r1
 8000e3c:	bf18      	it	ne
 8000e3e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8000e42:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e46:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e48:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e4c:	d078      	beq.n	8000f40 <HAL_ADC_Init+0x1a8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d002      	beq.n	8000e5a <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e56:	430b      	orrs	r3, r1
 8000e58:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e5a:	6893      	ldr	r3, [r2, #8]
 8000e5c:	f013 0f0c 	tst.w	r3, #12
 8000e60:	d10b      	bne.n	8000e7a <HAL_ADC_Init+0xe2>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e62:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e66:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e68:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e6c:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e6e:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e72:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e76:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e78:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 8000e7a:	68d5      	ldr	r5, [r2, #12]
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <HAL_ADC_Init+0x254>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e7e:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000e80:	402b      	ands	r3, r5
 8000e82:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e84:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8000e86:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e88:	d06b      	beq.n	8000f62 <HAL_ADC_Init+0x1ca>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e8c:	f023 030f 	bic.w	r3, r3, #15
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000e92:	2000      	movs	r0, #0
 8000e94:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000e96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e98:	f023 0303 	bic.w	r3, r3, #3
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000ea2:	b003      	add	sp, #12
 8000ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8000ea6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ea8:	f023 0312 	bic.w	r3, r3, #18
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ebc:	e787      	b.n	8000dce <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 8000ebe:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ec0:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ec2:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000ec4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000ec8:	f004 fd00 	bl	80058cc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	6893      	ldr	r3, [r2, #8]
 8000ed0:	00df      	lsls	r7, r3, #3
 8000ed2:	d508      	bpl.n	8000ee6 <HAL_ADC_Init+0x14e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e770      	b.n	8000dba <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
}
 8000eda:	b003      	add	sp, #12
 8000edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ede:	680b      	ldr	r3, [r1, #0]
 8000ee0:	07dd      	lsls	r5, r3, #31
 8000ee2:	d4a3      	bmi.n	8000e2c <HAL_ADC_Init+0x94>
 8000ee4:	e79b      	b.n	8000e1e <HAL_ADC_Init+0x86>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000ee6:	6893      	ldr	r3, [r2, #8]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d04b      	beq.n	8000f88 <HAL_ADC_Init+0x1f0>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ef2:	06dd      	lsls	r5, r3, #27
 8000ef4:	d4ee      	bmi.n	8000ed4 <HAL_ADC_Init+0x13c>
          ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	6c61      	ldr	r1, [r4, #68]	; 0x44
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ef8:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <HAL_ADC_Init+0x258>)
 8000efa:	483e      	ldr	r0, [pc, #248]	; (8000ff4 <HAL_ADC_Init+0x25c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8000efe:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8000f02:	f021 0102 	bic.w	r1, r1, #2
 8000f06:	f041 0102 	orr.w	r1, r1, #2
 8000f0a:	6461      	str	r1, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f0c:	6891      	ldr	r1, [r2, #8]
 8000f0e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8000f12:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f14:	fba0 1303 	umull	r1, r3, r0, r3
 8000f18:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f1a:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f20:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f22:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000f26:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f28:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000f2a:	9b01      	ldr	r3, [sp, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f43f af44 	beq.w	8000dba <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8000f32:	9b01      	ldr	r3, [sp, #4]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000f38:	9b01      	ldr	r3, [sp, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f9      	bne.n	8000f32 <HAL_ADC_Init+0x19a>
 8000f3e:	e73c      	b.n	8000dba <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f40:	b9be      	cbnz	r6, 8000f72 <HAL_ADC_Init+0x1da>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f44:	3b01      	subs	r3, #1
 8000f46:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 8000f4a:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 8000f4e:	e77e      	b.n	8000e4e <HAL_ADC_Init+0xb6>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f50:	2b01      	cmp	r3, #1
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f52:	4929      	ldr	r1, [pc, #164]	; (8000ff8 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f54:	f47f af5e 	bne.w	8000e14 <HAL_ADC_Init+0x7c>
 8000f58:	6813      	ldr	r3, [r2, #0]
 8000f5a:	07de      	lsls	r6, r3, #31
 8000f5c:	f53f af66 	bmi.w	8000e2c <HAL_ADC_Init+0x94>
 8000f60:	e758      	b.n	8000e14 <HAL_ADC_Init+0x7c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f62:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000f64:	6a23      	ldr	r3, [r4, #32]
 8000f66:	f021 010f 	bic.w	r1, r1, #15
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	e78f      	b.n	8000e92 <HAL_ADC_Init+0xfa>
        ADC_STATE_CLR_SET(hadc->State,
 8000f72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f74:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64a3      	str	r3, [r4, #72]	; 0x48
 8000f86:	e762      	b.n	8000e4e <HAL_ADC_Init+0xb6>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f88:	6813      	ldr	r3, [r2, #0]
 8000f8a:	07de      	lsls	r6, r3, #31
 8000f8c:	d5b0      	bpl.n	8000ef0 <HAL_ADC_Init+0x158>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f8e:	6893      	ldr	r3, [r2, #8]
 8000f90:	f003 030d 	and.w	r3, r3, #13
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d00a      	beq.n	8000fae <HAL_ADC_Init+0x216>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000faa:	2301      	movs	r3, #1
 8000fac:	e705      	b.n	8000dba <HAL_ADC_Init+0x22>
      __HAL_ADC_DISABLE(hadc);
 8000fae:	6893      	ldr	r3, [r2, #8]
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	6093      	str	r3, [r2, #8]
 8000fb8:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8000fba:	f7ff feaf 	bl	8000d1c <HAL_GetTick>
 8000fbe:	4605      	mov	r5, r0
 8000fc0:	e004      	b.n	8000fcc <HAL_ADC_Init+0x234>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fc2:	f7ff feab 	bl	8000d1c <HAL_GetTick>
 8000fc6:	1b40      	subs	r0, r0, r5
 8000fc8:	2802      	cmp	r0, #2
 8000fca:	d809      	bhi.n	8000fe0 <HAL_ADC_Init+0x248>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	6893      	ldr	r3, [r2, #8]
 8000fd0:	f013 0301 	ands.w	r3, r3, #1
 8000fd4:	d1f5      	bne.n	8000fc2 <HAL_ADC_Init+0x22a>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000fd8:	06c9      	lsls	r1, r1, #27
 8000fda:	f53f aeee 	bmi.w	8000dba <HAL_ADC_Init+0x22>
 8000fde:	e78a      	b.n	8000ef6 <HAL_ADC_Init+0x15e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	e7d9      	b.n	8000f9a <HAL_ADC_Init+0x202>
 8000fe6:	bf00      	nop
 8000fe8:	50000300 	.word	0x50000300
 8000fec:	fff0c007 	.word	0xfff0c007
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	431bde83 	.word	0x431bde83
 8000ff8:	50000100 	.word	0x50000100

08000ffc <HAL_ADC_Start_DMA>:
{
 8000ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001000:	6805      	ldr	r5, [r0, #0]
 8001002:	68ac      	ldr	r4, [r5, #8]
 8001004:	0767      	lsls	r7, r4, #29
 8001006:	d502      	bpl.n	800100e <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_BUSY;
 8001008:	2002      	movs	r0, #2
 800100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 800100e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001012:	2b01      	cmp	r3, #1
 8001014:	d0f8      	beq.n	8001008 <HAL_ADC_Start_DMA+0xc>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <HAL_ADC_Start_DMA+0x134>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	4690      	mov	r8, r2
 800101c:	06de      	lsls	r6, r3, #27
    __HAL_LOCK(hadc);
 800101e:	f04f 0201 	mov.w	r2, #1
 8001022:	460f      	mov	r7, r1
 8001024:	4604      	mov	r4, r0
 8001026:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800102a:	d005      	beq.n	8001038 <HAL_ADC_Start_DMA+0x3c>
      __HAL_UNLOCK(hadc);
 800102c:	2300      	movs	r3, #0
 800102e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001038:	68ab      	ldr	r3, [r5, #8]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	4293      	cmp	r3, r2
 8001040:	d00c      	beq.n	800105c <HAL_ADC_Start_DMA+0x60>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001042:	68aa      	ldr	r2, [r5, #8]
 8001044:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_ADC_Start_DMA+0x138>)
 8001046:	421a      	tst	r2, r3
 8001048:	d059      	beq.n	80010fe <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001052:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	64a3      	str	r3, [r4, #72]	; 0x48
 800105a:	e7e7      	b.n	800102c <HAL_ADC_Start_DMA+0x30>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	07d8      	lsls	r0, r3, #31
 8001060:	d5ef      	bpl.n	8001042 <HAL_ADC_Start_DMA+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8001062:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001064:	4a32      	ldr	r2, [pc, #200]	; (8001130 <HAL_ADC_Start_DMA+0x134>)
        ADC_STATE_CLR_SET(hadc->State,
 8001066:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001074:	6893      	ldr	r3, [r2, #8]
 8001076:	f013 0f1f 	tst.w	r3, #31
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800107a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800107c:	d032      	beq.n	80010e4 <HAL_ADC_Start_DMA+0xe8>
 800107e:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 8001082:	d02f      	beq.n	80010e4 <HAL_ADC_Start_DMA+0xe8>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001084:	4a2c      	ldr	r2, [pc, #176]	; (8001138 <HAL_ADC_Start_DMA+0x13c>)
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800108a:	4295      	cmp	r5, r2
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800108c:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800108e:	d048      	beq.n	8001122 <HAL_ADC_Start_DMA+0x126>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001090:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001092:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001094:	4929      	ldr	r1, [pc, #164]	; (800113c <HAL_ADC_Start_DMA+0x140>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <HAL_ADC_Start_DMA+0x144>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001098:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800109c:	bf1c      	itt	ne
 800109e:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 80010a0:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80010a4:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 80010a6:	2600      	movs	r6, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <HAL_ADC_Start_DMA+0x148>)
        __HAL_UNLOCK(hadc);
 80010aa:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010ae:	62c3      	str	r3, [r0, #44]	; 0x2c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010b0:	231c      	movs	r3, #28
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010b2:	6281      	str	r1, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010b4:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010b6:	602b      	str	r3, [r5, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010b8:	686b      	ldr	r3, [r5, #4]
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	606b      	str	r3, [r5, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80010c0:	68e9      	ldr	r1, [r5, #12]
 80010c2:	f041 0101 	orr.w	r1, r1, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010c6:	4643      	mov	r3, r8
 80010c8:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80010ca:	60e9      	str	r1, [r5, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010cc:	f105 0140 	add.w	r1, r5, #64	; 0x40
 80010d0:	f000 fafa 	bl	80016c8 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	6893      	ldr	r3, [r2, #8]
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	4630      	mov	r0, r6
 80010de:	6093      	str	r3, [r2, #8]
 80010e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010e8:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010ea:	68eb      	ldr	r3, [r5, #12]
 80010ec:	019a      	lsls	r2, r3, #6
 80010ee:	d5cf      	bpl.n	8001090 <HAL_ADC_Start_DMA+0x94>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010fa:	6463      	str	r3, [r4, #68]	; 0x44
 80010fc:	e7c8      	b.n	8001090 <HAL_ADC_Start_DMA+0x94>
    __HAL_ADC_ENABLE(hadc);
 80010fe:	68ab      	ldr	r3, [r5, #8]
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();  
 8001106:	f7ff fe09 	bl	8000d1c <HAL_GetTick>
 800110a:	4606      	mov	r6, r0
 800110c:	e004      	b.n	8001118 <HAL_ADC_Start_DMA+0x11c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800110e:	f7ff fe05 	bl	8000d1c <HAL_GetTick>
 8001112:	1b80      	subs	r0, r0, r6
 8001114:	2802      	cmp	r0, #2
 8001116:	d898      	bhi.n	800104a <HAL_ADC_Start_DMA+0x4e>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001118:	6825      	ldr	r5, [r4, #0]
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	07d9      	lsls	r1, r3, #31
 800111e:	d5f6      	bpl.n	800110e <HAL_ADC_Start_DMA+0x112>
 8001120:	e79f      	b.n	8001062 <HAL_ADC_Start_DMA+0x66>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001122:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	019b      	lsls	r3, r3, #6
 800112a:	d5b1      	bpl.n	8001090 <HAL_ADC_Start_DMA+0x94>
 800112c:	e7e0      	b.n	80010f0 <HAL_ADC_Start_DMA+0xf4>
 800112e:	bf00      	nop
 8001130:	50000300 	.word	0x50000300
 8001134:	8000003f 	.word	0x8000003f
 8001138:	50000100 	.word	0x50000100
 800113c:	08000d55 	.word	0x08000d55
 8001140:	08000d35 	.word	0x08000d35
 8001144:	08000d4d 	.word	0x08000d4d

08001148 <HAL_ADCEx_Calibration_Start>:
  __HAL_LOCK(hadc);
 8001148:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800114c:	2b01      	cmp	r3, #1
 800114e:	d101      	bne.n	8001154 <HAL_ADCEx_Calibration_Start+0xc>
 8001150:	2002      	movs	r0, #2
 8001152:	4770      	bx	lr
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001154:	6803      	ldr	r3, [r0, #0]
{
 8001156:	b570      	push	{r4, r5, r6, lr}
 8001158:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800115a:	6898      	ldr	r0, [r3, #8]
  __HAL_LOCK(hadc);
 800115c:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET )
 800115e:	f000 0003 	and.w	r0, r0, #3
 8001162:	4290      	cmp	r0, r2
 8001164:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8001166:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) != RESET )
 800116a:	d023      	beq.n	80011b4 <HAL_ADCEx_Calibration_Start+0x6c>
    hadc->State = HAL_ADC_STATE_READY;
 800116c:	2201      	movs	r2, #1
 800116e:	6462      	str	r2, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001170:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001172:	2d01      	cmp	r5, #1
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001174:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001178:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800117a:	d03a      	beq.n	80011f2 <HAL_ADCEx_Calibration_Start+0xaa>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001182:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001184:	f7ff fdca 	bl	8000d1c <HAL_GetTick>
 8001188:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800118a:	e004      	b.n	8001196 <HAL_ADCEx_Calibration_Start+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800118c:	f7ff fdc6 	bl	8000d1c <HAL_GetTick>
 8001190:	1b40      	subs	r0, r0, r5
 8001192:	280a      	cmp	r0, #10
 8001194:	d822      	bhi.n	80011dc <HAL_ADCEx_Calibration_Start+0x94>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	dbf6      	blt.n	800118c <HAL_ADCEx_Calibration_Start+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011a0:	f023 0303 	bic.w	r3, r3, #3
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6463      	str	r3, [r4, #68]	; 0x44
 80011aa:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80011ac:	2300      	movs	r3, #0
 80011ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	07d1      	lsls	r1, r2, #31
 80011b8:	d5d8      	bpl.n	800116c <HAL_ADCEx_Calibration_Start+0x24>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	f002 020d 	and.w	r2, r2, #13
 80011c0:	2a01      	cmp	r2, #1
 80011c2:	d01b      	beq.n	80011fc <HAL_ADCEx_Calibration_Start+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_UNLOCK(hadc);
 80011d4:	2300      	movs	r3, #0
 80011d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 80011da:	bd70      	pop	{r4, r5, r6, pc}
        ADC_STATE_CLR_SET(hadc->State,
 80011dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011de:	f023 0312 	bic.w	r3, r3, #18
 80011e2:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 80011e6:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 80011e8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80011ea:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e7bf      	b.n	800117c <HAL_ADCEx_Calibration_Start+0x34>
      __HAL_ADC_DISABLE(hadc);
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	2103      	movs	r1, #3
 8001200:	f042 0202 	orr.w	r2, r2, #2
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001208:	f7ff fd88 	bl	8000d1c <HAL_GetTick>
 800120c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	07d2      	lsls	r2, r2, #31
 8001214:	d5aa      	bpl.n	800116c <HAL_ADCEx_Calibration_Start+0x24>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001216:	f7ff fd81 	bl	8000d1c <HAL_GetTick>
 800121a:	1b80      	subs	r0, r0, r6
 800121c:	2802      	cmp	r0, #2
 800121e:	d9f6      	bls.n	800120e <HAL_ADCEx_Calibration_Start+0xc6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001220:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	64a3      	str	r3, [r4, #72]	; 0x48
 8001230:	2001      	movs	r0, #1
 8001232:	e7bb      	b.n	80011ac <HAL_ADCEx_Calibration_Start+0x64>

08001234 <HAL_ADC_ConfigChannel>:
{
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	4603      	mov	r3, r0
 8001238:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 800123a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 800123e:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001240:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8001242:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001244:	d047      	beq.n	80012d6 <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001246:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001248:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800124a:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 800124c:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800124e:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8001250:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001254:	d508      	bpl.n	8001268 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001258:	f042 0220 	orr.w	r2, r2, #32
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001264:	b003      	add	sp, #12
 8001266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 8001268:	6848      	ldr	r0, [r1, #4]
 800126a:	2804      	cmp	r0, #4
 800126c:	d936      	bls.n	80012dc <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 800126e:	2809      	cmp	r0, #9
 8001270:	d870      	bhi.n	8001354 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->SQR2,
 8001272:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001276:	0040      	lsls	r0, r0, #1
 8001278:	381e      	subs	r0, #30
 800127a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800127c:	680d      	ldr	r5, [r1, #0]
 800127e:	271f      	movs	r7, #31
 8001280:	4087      	lsls	r7, r0
 8001282:	ea26 0607 	bic.w	r6, r6, r7
 8001286:	fa05 f000 	lsl.w	r0, r5, r0
 800128a:	4330      	orrs	r0, r6
 800128c:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800128e:	6890      	ldr	r0, [r2, #8]
 8001290:	f010 0f0c 	tst.w	r0, #12
 8001294:	d133      	bne.n	80012fe <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001296:	2d09      	cmp	r5, #9
 8001298:	d94e      	bls.n	8001338 <HAL_ADC_ConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800129a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800129e:	3f1e      	subs	r7, #30
 80012a0:	6990      	ldr	r0, [r2, #24]
 80012a2:	688e      	ldr	r6, [r1, #8]
 80012a4:	f04f 0e07 	mov.w	lr, #7
 80012a8:	fa0e fe07 	lsl.w	lr, lr, r7
 80012ac:	ea20 000e 	bic.w	r0, r0, lr
 80012b0:	40be      	lsls	r6, r7
 80012b2:	4330      	orrs	r0, r6
 80012b4:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012b6:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 80012b8:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012ba:	694f      	ldr	r7, [r1, #20]
 80012bc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80012c0:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 80012c2:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012c4:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80012c8:	2e03      	cmp	r6, #3
 80012ca:	f200 80cb 	bhi.w	8001464 <HAL_ADC_ConfigChannel+0x230>
 80012ce:	e8df f006 	tbb	[pc, r6]
 80012d2:	737d      	.short	0x737d
 80012d4:	5f69      	.short	0x5f69
  __HAL_LOCK(hadc);
 80012d6:	2002      	movs	r0, #2
}
 80012d8:	b003      	add	sp, #12
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 80012dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80012e0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80012e2:	680d      	ldr	r5, [r1, #0]
 80012e4:	0040      	lsls	r0, r0, #1
 80012e6:	271f      	movs	r7, #31
 80012e8:	4087      	lsls	r7, r0
 80012ea:	ea26 0607 	bic.w	r6, r6, r7
 80012ee:	fa05 f000 	lsl.w	r0, r5, r0
 80012f2:	4330      	orrs	r0, r6
 80012f4:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012f6:	6890      	ldr	r0, [r2, #8]
 80012f8:	f010 0f0c 	tst.w	r0, #12
 80012fc:	d0cb      	beq.n	8001296 <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012fe:	6890      	ldr	r0, [r2, #8]
 8001300:	f000 0003 	and.w	r0, r0, #3
 8001304:	2801      	cmp	r0, #1
 8001306:	d013      	beq.n	8001330 <HAL_ADC_ConfigChannel+0xfc>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001308:	2c01      	cmp	r4, #1
 800130a:	f000 808f 	beq.w	800142c <HAL_ADC_ConfigChannel+0x1f8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800130e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001312:	2001      	movs	r0, #1
 8001314:	40a8      	lsls	r0, r5
 8001316:	ea21 0100 	bic.w	r1, r1, r0
 800131a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800131e:	2d10      	cmp	r5, #16
 8001320:	d07f      	beq.n	8001422 <HAL_ADC_ConfigChannel+0x1ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001322:	2d11      	cmp	r5, #17
 8001324:	f000 8099 	beq.w	800145a <HAL_ADC_ConfigChannel+0x226>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001328:	2d12      	cmp	r5, #18
 800132a:	d059      	beq.n	80013e0 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800132e:	e796      	b.n	800125e <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001330:	6810      	ldr	r0, [r2, #0]
 8001332:	07c0      	lsls	r0, r0, #31
 8001334:	d5e8      	bpl.n	8001308 <HAL_ADC_ConfigChannel+0xd4>
 8001336:	e7f9      	b.n	800132c <HAL_ADC_ConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001338:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800133c:	6950      	ldr	r0, [r2, #20]
 800133e:	688e      	ldr	r6, [r1, #8]
 8001340:	2707      	movs	r7, #7
 8001342:	fa07 f70e 	lsl.w	r7, r7, lr
 8001346:	ea20 0007 	bic.w	r0, r0, r7
 800134a:	fa06 f60e 	lsl.w	r6, r6, lr
 800134e:	4330      	orrs	r0, r6
 8001350:	6150      	str	r0, [r2, #20]
 8001352:	e7b0      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 8001354:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001356:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800135a:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 800135e:	d80b      	bhi.n	8001378 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001360:	383c      	subs	r0, #60	; 0x3c
 8001362:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8001364:	680d      	ldr	r5, [r1, #0]
 8001366:	271f      	movs	r7, #31
 8001368:	4087      	lsls	r7, r0
 800136a:	ea26 0607 	bic.w	r6, r6, r7
 800136e:	fa05 f000 	lsl.w	r0, r5, r0
 8001372:	4330      	orrs	r0, r6
 8001374:	6390      	str	r0, [r2, #56]	; 0x38
 8001376:	e78a      	b.n	800128e <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001378:	385a      	subs	r0, #90	; 0x5a
 800137a:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800137c:	680d      	ldr	r5, [r1, #0]
 800137e:	271f      	movs	r7, #31
 8001380:	4087      	lsls	r7, r0
 8001382:	ea26 0607 	bic.w	r6, r6, r7
 8001386:	fa05 f000 	lsl.w	r0, r5, r0
 800138a:	4330      	orrs	r0, r6
 800138c:	63d0      	str	r0, [r2, #60]	; 0x3c
 800138e:	e77e      	b.n	800128e <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001390:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8001392:	4e6c      	ldr	r6, [pc, #432]	; (8001544 <HAL_ADC_ConfigChannel+0x310>)
 8001394:	403e      	ands	r6, r7
 8001396:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800139a:	4330      	orrs	r0, r6
 800139c:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 80013a0:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 80013a2:	e7ac      	b.n	80012fe <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013a4:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80013a6:	4e67      	ldr	r6, [pc, #412]	; (8001544 <HAL_ADC_ConfigChannel+0x310>)
 80013a8:	403e      	ands	r6, r7
 80013aa:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80013ae:	4330      	orrs	r0, r6
 80013b0:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 80013b4:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80013b6:	e7a2      	b.n	80012fe <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013b8:	6e57      	ldr	r7, [r2, #100]	; 0x64
 80013ba:	4e62      	ldr	r6, [pc, #392]	; (8001544 <HAL_ADC_ConfigChannel+0x310>)
 80013bc:	403e      	ands	r6, r7
 80013be:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80013c2:	4330      	orrs	r0, r6
 80013c4:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 80013c8:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80013ca:	e798      	b.n	80012fe <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013cc:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80013ce:	4e5d      	ldr	r6, [pc, #372]	; (8001544 <HAL_ADC_ConfigChannel+0x310>)
 80013d0:	403e      	ands	r6, r7
 80013d2:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80013d6:	4330      	orrs	r0, r6
 80013d8:	ea40 6085 	orr.w	r0, r0, r5, lsl #26
 80013dc:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 80013de:	e78e      	b.n	80012fe <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80013e0:	4959      	ldr	r1, [pc, #356]	; (8001548 <HAL_ADC_ConfigChannel+0x314>)
 80013e2:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80013e4:	024e      	lsls	r6, r1, #9
 80013e6:	d4a1      	bmi.n	800132c <HAL_ADC_ConfigChannel+0xf8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013e8:	6891      	ldr	r1, [r2, #8]
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013ea:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013ee:	f001 0103 	and.w	r1, r1, #3
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013f2:	d060      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x282>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013f4:	2901      	cmp	r1, #1
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013fa:	d05f      	beq.n	80014bc <HAL_ADC_ConfigChannel+0x288>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013fc:	6881      	ldr	r1, [r0, #8]
 80013fe:	f001 0103 	and.w	r1, r1, #3
 8001402:	2901      	cmp	r1, #1
 8001404:	d072      	beq.n	80014ec <HAL_ADC_ConfigChannel+0x2b8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001406:	2d10      	cmp	r5, #16
 8001408:	d074      	beq.n	80014f4 <HAL_ADC_ConfigChannel+0x2c0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800140a:	2d11      	cmp	r5, #17
 800140c:	f000 808f 	beq.w	800152e <HAL_ADC_ConfigChannel+0x2fa>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001410:	2d12      	cmp	r5, #18
 8001412:	d18b      	bne.n	800132c <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001414:	494c      	ldr	r1, [pc, #304]	; (8001548 <HAL_ADC_ConfigChannel+0x314>)
 8001416:	688a      	ldr	r2, [r1, #8]
 8001418:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800141c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141e:	2000      	movs	r0, #0
 8001420:	e71d      	b.n	800125e <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001422:	4949      	ldr	r1, [pc, #292]	; (8001548 <HAL_ADC_ConfigChannel+0x314>)
 8001424:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001426:	0209      	lsls	r1, r1, #8
 8001428:	d5de      	bpl.n	80013e8 <HAL_ADC_ConfigChannel+0x1b4>
 800142a:	e77f      	b.n	800132c <HAL_ADC_ConfigChannel+0xf8>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800142c:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8001430:	40ac      	lsls	r4, r5
 8001432:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001434:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001436:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800143a:	d92e      	bls.n	800149a <HAL_ADC_ConfigChannel+0x266>
        MODIFY_REG(hadc->Instance->SMPR2,
 800143c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8001440:	688e      	ldr	r6, [r1, #8]
 8001442:	6994      	ldr	r4, [r2, #24]
 8001444:	f1a0 011b 	sub.w	r1, r0, #27
 8001448:	2707      	movs	r7, #7
 800144a:	408f      	lsls	r7, r1
 800144c:	fa06 f001 	lsl.w	r0, r6, r1
 8001450:	ea24 0107 	bic.w	r1, r4, r7
 8001454:	4301      	orrs	r1, r0
 8001456:	6191      	str	r1, [r2, #24]
 8001458:	e761      	b.n	800131e <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800145a:	493b      	ldr	r1, [pc, #236]	; (8001548 <HAL_ADC_ConfigChannel+0x314>)
 800145c:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800145e:	01cf      	lsls	r7, r1, #7
 8001460:	d5c2      	bpl.n	80013e8 <HAL_ADC_ConfigChannel+0x1b4>
 8001462:	e763      	b.n	800132c <HAL_ADC_ConfigChannel+0xf8>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001464:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8001466:	06a8      	lsls	r0, r5, #26
 8001468:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800146c:	4286      	cmp	r6, r0
 800146e:	d038      	beq.n	80014e2 <HAL_ADC_ConfigChannel+0x2ae>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001470:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001472:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001476:	42b0      	cmp	r0, r6
 8001478:	d02e      	beq.n	80014d8 <HAL_ADC_ConfigChannel+0x2a4>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800147a:	6e96      	ldr	r6, [r2, #104]	; 0x68
 800147c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001480:	42b0      	cmp	r0, r6
 8001482:	d024      	beq.n	80014ce <HAL_ADC_ConfigChannel+0x29a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001484:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 8001486:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800148a:	42b0      	cmp	r0, r6
 800148c:	f47f af37 	bne.w	80012fe <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001490:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001492:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001496:	66d0      	str	r0, [r2, #108]	; 0x6c
 8001498:	e731      	b.n	80012fe <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 800149a:	1c68      	adds	r0, r5, #1
 800149c:	688e      	ldr	r6, [r1, #8]
 800149e:	6954      	ldr	r4, [r2, #20]
 80014a0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80014a4:	2707      	movs	r7, #7
 80014a6:	408f      	lsls	r7, r1
 80014a8:	fa06 f001 	lsl.w	r0, r6, r1
 80014ac:	ea24 0107 	bic.w	r1, r4, r7
 80014b0:	4301      	orrs	r1, r0
 80014b2:	6151      	str	r1, [r2, #20]
 80014b4:	e735      	b.n	8001322 <HAL_ADC_ConfigChannel+0xee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014b6:	2901      	cmp	r1, #1
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014b8:	4824      	ldr	r0, [pc, #144]	; (800154c <HAL_ADC_ConfigChannel+0x318>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014ba:	d19f      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1c8>
 80014bc:	6811      	ldr	r1, [r2, #0]
 80014be:	07cc      	lsls	r4, r1, #31
 80014c0:	d59c      	bpl.n	80013fc <HAL_ADC_ConfigChannel+0x1c8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014c4:	f042 0220 	orr.w	r2, r2, #32
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
 80014cc:	e6c7      	b.n	800125e <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014ce:	6e96      	ldr	r6, [r2, #104]	; 0x68
 80014d0:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80014d4:	6696      	str	r6, [r2, #104]	; 0x68
 80014d6:	e7d5      	b.n	8001484 <HAL_ADC_ConfigChannel+0x250>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014d8:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80014da:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80014de:	6656      	str	r6, [r2, #100]	; 0x64
 80014e0:	e7cb      	b.n	800147a <HAL_ADC_ConfigChannel+0x246>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014e2:	6e16      	ldr	r6, [r2, #96]	; 0x60
 80014e4:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80014e8:	6616      	str	r6, [r2, #96]	; 0x60
 80014ea:	e7c1      	b.n	8001470 <HAL_ADC_ConfigChannel+0x23c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014ec:	6801      	ldr	r1, [r0, #0]
 80014ee:	07c9      	lsls	r1, r1, #31
 80014f0:	d4e7      	bmi.n	80014c2 <HAL_ADC_ConfigChannel+0x28e>
 80014f2:	e788      	b.n	8001406 <HAL_ADC_ConfigChannel+0x1d2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014f4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80014f8:	f47f af18 	bne.w	800132c <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014fc:	4912      	ldr	r1, [pc, #72]	; (8001548 <HAL_ADC_ConfigChannel+0x314>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014fe:	4c14      	ldr	r4, [pc, #80]	; (8001550 <HAL_ADC_ConfigChannel+0x31c>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001500:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001502:	4814      	ldr	r0, [pc, #80]	; (8001554 <HAL_ADC_ConfigChannel+0x320>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001504:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001508:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800150a:	220a      	movs	r2, #10
 800150c:	6821      	ldr	r1, [r4, #0]
 800150e:	fbb1 f1f0 	udiv	r1, r1, r0
 8001512:	fb02 f201 	mul.w	r2, r2, r1
 8001516:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001518:	9a01      	ldr	r2, [sp, #4]
 800151a:	2a00      	cmp	r2, #0
 800151c:	f43f af06 	beq.w	800132c <HAL_ADC_ConfigChannel+0xf8>
            wait_loop_index--;
 8001520:	9a01      	ldr	r2, [sp, #4]
 8001522:	3a01      	subs	r2, #1
 8001524:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001526:	9a01      	ldr	r2, [sp, #4]
 8001528:	2a00      	cmp	r2, #0
 800152a:	d1f9      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x2ec>
 800152c:	e6fe      	b.n	800132c <HAL_ADC_ConfigChannel+0xf8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800152e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001532:	f47f aefb 	bne.w	800132c <HAL_ADC_ConfigChannel+0xf8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001536:	4904      	ldr	r1, [pc, #16]	; (8001548 <HAL_ADC_ConfigChannel+0x314>)
 8001538:	688a      	ldr	r2, [r1, #8]
 800153a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800153e:	608a      	str	r2, [r1, #8]
 8001540:	e6f4      	b.n	800132c <HAL_ADC_ConfigChannel+0xf8>
 8001542:	bf00      	nop
 8001544:	83fff000 	.word	0x83fff000
 8001548:	50000300 	.word	0x50000300
 800154c:	50000100 	.word	0x50000100
 8001550:	20000000 	.word	0x20000000
 8001554:	000f4240 	.word	0x000f4240

08001558 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800155a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001560:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001562:	0200      	lsls	r0, r0, #8
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001570:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001572:	60d3      	str	r3, [r2, #12]
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157e:	b470      	push	{r4, r5, r6}
 8001580:	68dc      	ldr	r4, [r3, #12]
 8001582:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001586:	f1c4 0607 	rsb	r6, r4, #7
 800158a:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	bf28      	it	cs
 8001592:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001594:	2b06      	cmp	r3, #6
 8001596:	d917      	bls.n	80015c8 <HAL_NVIC_SetPriority+0x4c>
 8001598:	3c03      	subs	r4, #3
 800159a:	2501      	movs	r5, #1
 800159c:	40a5      	lsls	r5, r4
 800159e:	3d01      	subs	r5, #1
 80015a0:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a2:	2301      	movs	r3, #1
 80015a4:	40b3      	lsls	r3, r6
 80015a6:	3b01      	subs	r3, #1
 80015a8:	4019      	ands	r1, r3
 80015aa:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80015ac:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ae:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80015b2:	db0c      	blt.n	80015ce <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80015b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80015bc:	0109      	lsls	r1, r1, #4
 80015be:	b2c9      	uxtb	r1, r1
 80015c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015c4:	bc70      	pop	{r4, r5, r6}
 80015c6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c8:	2200      	movs	r2, #0
 80015ca:	4614      	mov	r4, r2
 80015cc:	e7e9      	b.n	80015a2 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_NVIC_SetPriority+0x68>)
 80015d0:	f000 000f 	and.w	r0, r0, #15
 80015d4:	0109      	lsls	r1, r1, #4
 80015d6:	4403      	add	r3, r0
 80015d8:	b2c9      	uxtb	r1, r1
 80015da:	7619      	strb	r1, [r3, #24]
 80015dc:	bc70      	pop	{r4, r5, r6}
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	e000ecfc 	.word	0xe000ecfc

080015e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015e8:	f000 011f 	and.w	r1, r0, #31
 80015ec:	2301      	movs	r3, #1
 80015ee:	0940      	lsrs	r0, r0, #5
 80015f0:	4a02      	ldr	r2, [pc, #8]	; (80015fc <HAL_NVIC_EnableIRQ+0x14>)
 80015f2:	408b      	lsls	r3, r1
 80015f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	3801      	subs	r0, #1
 8001602:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001606:	d20e      	bcs.n	8001626 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	4c08      	ldr	r4, [pc, #32]	; (8001630 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	20f0      	movs	r0, #240	; 0xf0
 8001612:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001616:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001618:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001624:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001636:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001638:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800163a:	bf0c      	ite	eq
 800163c:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001640:	f023 0304 	bicne.w	r3, r3, #4
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4770      	bx	lr
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <HAL_SYSTICK_IRQHandler>:
{
 8001650:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001652:	f7ff fffb 	bl	800164c <HAL_SYSTICK_Callback>
 8001656:	bd08      	pop	{r3, pc}

08001658 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001658:	2800      	cmp	r0, #0
 800165a:	d02d      	beq.n	80016b8 <HAL_DMA_Init+0x60>
{ 
 800165c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800165e:	6842      	ldr	r2, [r0, #4]
 8001660:	6887      	ldr	r7, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	68c6      	ldr	r6, [r0, #12]
 8001664:	6904      	ldr	r4, [r0, #16]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001666:	4915      	ldr	r1, [pc, #84]	; (80016bc <HAL_DMA_Init+0x64>)
 8001668:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 800166a:	433a      	orrs	r2, r7
  tmp = hdma->Instance->CCR;
 800166c:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	695d      	ldr	r5, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001670:	4f13      	ldr	r7, [pc, #76]	; (80016c0 <HAL_DMA_Init+0x68>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001672:	4332      	orrs	r2, r6
 8001674:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001676:	699e      	ldr	r6, [r3, #24]
  tmp = hdma->Instance->CCR;
 8001678:	6804      	ldr	r4, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167a:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800167c:	69dd      	ldr	r5, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167e:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001680:	4401      	add	r1, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001682:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001686:	fba7 6101 	umull	r6, r1, r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800168a:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800168c:	f024 0430 	bic.w	r4, r4, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001690:	4322      	orrs	r2, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001692:	0909      	lsrs	r1, r1, #4
  hdma->Instance->CCR = tmp;  
 8001694:	6002      	str	r2, [r0, #0]
  hdma->DmaBaseAddress = DMA1;
 8001696:	4c0b      	ldr	r4, [pc, #44]	; (80016c4 <HAL_DMA_Init+0x6c>)
 8001698:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 800169a:	2000      	movs	r0, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800169c:	0089      	lsls	r1, r1, #2
  hdma->State = HAL_DMA_STATE_READY;
 800169e:	2201      	movs	r2, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016a0:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->XferCpltCallback = NULL;
 80016a2:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80016a4:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80016a6:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80016a8:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016aa:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80016ac:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80016b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}  
 80016b4:	bcf0      	pop	{r4, r5, r6, r7}
 80016b6:	4770      	bx	lr
    return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
 80016ba:	4770      	bx	lr
 80016bc:	bffdfff8 	.word	0xbffdfff8
 80016c0:	cccccccd 	.word	0xcccccccd
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_DMA_Start_IT>:
{
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80016ca:	f890 4020 	ldrb.w	r4, [r0, #32]
 80016ce:	2c01      	cmp	r4, #1
 80016d0:	d00b      	beq.n	80016ea <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 80016d2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80016d6:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80016d8:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80016da:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80016de:	d006      	beq.n	80016ee <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 80016e0:	2300      	movs	r3, #0
 80016e2:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 80016e6:	2002      	movs	r0, #2
 80016e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80016ea:	2002      	movs	r0, #2
} 
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016ee:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016f0:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80016f2:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f6:	2600      	movs	r6, #0
 80016f8:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016fa:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016fc:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016fe:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001702:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001704:	f04f 0c02 	mov.w	ip, #2
 8001708:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800170c:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800170e:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 8001712:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001714:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001716:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8001718:	bf0b      	itete	eq
 800171a:	60aa      	streq	r2, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 800171c:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 800171e:	60e9      	streq	r1, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 8001720:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001722:	b14b      	cbz	r3, 8001738 <HAL_DMA_Start_IT+0x70>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001724:	682b      	ldr	r3, [r5, #0]
 8001726:	f043 030e 	orr.w	r3, r3, #14
 800172a:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001734:	2000      	movs	r0, #0
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	f043 030a 	orr.w	r3, r3, #10
 800173e:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	602b      	str	r3, [r5, #0]
 8001748:	e7f0      	b.n	800172c <HAL_DMA_Start_IT+0x64>
 800174a:	bf00      	nop

0800174c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800174c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001750:	2a02      	cmp	r2, #2
{  
 8001752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001754:	d003      	beq.n	800175e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001756:	2204      	movs	r2, #4
 8001758:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800175a:	2001      	movs	r0, #1
 800175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800175e:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001760:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001762:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001764:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8001766:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001768:	f024 040e 	bic.w	r4, r4, #14
 800176c:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800176e:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001770:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001772:	f024 0401 	bic.w	r4, r4, #1
 8001776:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001778:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 800177c:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800177e:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001780:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001784:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001788:	b116      	cbz	r6, 8001790 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 800178a:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 800178c:	4620      	mov	r0, r4
 800178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001790:	4630      	mov	r0, r6
}
 8001792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001794 <HAL_DMA_IRQHandler>:
{
 8001794:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001796:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001798:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800179a:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800179c:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800179e:	2304      	movs	r3, #4
 80017a0:	4093      	lsls	r3, r2
 80017a2:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 80017a4:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017a6:	d00d      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x30>
 80017a8:	0777      	lsls	r7, r6, #29
 80017aa:	d50b      	bpl.n	80017c4 <HAL_DMA_IRQHandler+0x30>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	0692      	lsls	r2, r2, #26
 80017b0:	d403      	bmi.n	80017ba <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017b2:	6822      	ldr	r2, [r4, #0]
 80017b4:	f022 0204 	bic.w	r2, r2, #4
 80017b8:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80017ba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017bc:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80017be:	b1c2      	cbz	r2, 80017f2 <HAL_DMA_IRQHandler+0x5e>
}  
 80017c0:	bcf0      	pop	{r4, r5, r6, r7}
  		hdma->XferCpltCallback(hdma);
 80017c2:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017c4:	2302      	movs	r3, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	4219      	tst	r1, r3
 80017ca:	d014      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x62>
 80017cc:	07b7      	lsls	r7, r6, #30
 80017ce:	d512      	bpl.n	80017f6 <HAL_DMA_IRQHandler+0x62>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	0692      	lsls	r2, r2, #26
 80017d4:	d406      	bmi.n	80017e4 <HAL_DMA_IRQHandler+0x50>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017d6:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80017d8:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017da:	f022 020a 	bic.w	r2, r2, #10
 80017de:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80017e0:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 80017e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80017e6:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 80017e8:	2300      	movs	r3, #0
 80017ea:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d1e6      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x2c>
}  
 80017f2:	bcf0      	pop	{r4, r5, r6, r7}
 80017f4:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017f6:	2308      	movs	r3, #8
 80017f8:	4093      	lsls	r3, r2
 80017fa:	420b      	tst	r3, r1
 80017fc:	d0f9      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x5e>
 80017fe:	0733      	lsls	r3, r6, #28
 8001800:	d5f7      	bpl.n	80017f2 <HAL_DMA_IRQHandler+0x5e>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001802:	6821      	ldr	r1, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001804:	6b06      	ldr	r6, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001806:	2301      	movs	r3, #1
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001808:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800180c:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8001810:	2700      	movs	r7, #0
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001812:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001814:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001816:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001818:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800181c:	f880 7020 	strb.w	r7, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001820:	2e00      	cmp	r6, #0
 8001822:	d0e6      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x5e>
    	hdma->XferErrorCallback(hdma);
 8001824:	4633      	mov	r3, r6
}  
 8001826:	bcf0      	pop	{r4, r5, r6, r7}
    	hdma->XferErrorCallback(hdma);
 8001828:	4718      	bx	r3
 800182a:	bf00      	nop

0800182c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001830:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80019c0 <HAL_FLASH_Program+0x194>
 8001834:	f899 4018 	ldrb.w	r4, [r9, #24]
 8001838:	2c01      	cmp	r4, #1
{
 800183a:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 800183c:	d103      	bne.n	8001846 <HAL_FLASH_Program+0x1a>
 800183e:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 8001840:	b003      	add	sp, #12
 8001842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001846:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8001848:	2301      	movs	r3, #1
 800184a:	4693      	mov	fp, r2
 800184c:	460f      	mov	r7, r1
 800184e:	4680      	mov	r8, r0
 8001850:	f889 3018 	strb.w	r3, [r9, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff fa62 	bl	8000d1c <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001858:	4c58      	ldr	r4, [pc, #352]	; (80019bc <HAL_FLASH_Program+0x190>)
  uint32_t tickstart = HAL_GetTick();
 800185a:	4606      	mov	r6, r0
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800185c:	f24c 3550 	movw	r5, #50000	; 0xc350
 8001860:	e005      	b.n	800186e <HAL_FLASH_Program+0x42>
 8001862:	f7ff fa5b 	bl	8000d1c <HAL_GetTick>
 8001866:	1b80      	subs	r0, r0, r6
 8001868:	42a8      	cmp	r0, r5
 800186a:	f200 80a1 	bhi.w	80019b0 <HAL_FLASH_Program+0x184>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800186e:	68e3      	ldr	r3, [r4, #12]
 8001870:	07db      	lsls	r3, r3, #31
 8001872:	d4f6      	bmi.n	8001862 <HAL_FLASH_Program+0x36>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001874:	68e3      	ldr	r3, [r4, #12]
 8001876:	069d      	lsls	r5, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001878:	bf44      	itt	mi
 800187a:	2320      	movmi	r3, #32
 800187c:	60e3      	strmi	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_FLASH_Program+0x190>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	06d0      	lsls	r0, r2, #27
 8001884:	d402      	bmi.n	800188c <HAL_FLASH_Program+0x60>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001886:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001888:	0759      	lsls	r1, r3, #29
 800188a:	d521      	bpl.n	80018d0 <HAL_FLASH_Program+0xa4>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800188c:	4b4b      	ldr	r3, [pc, #300]	; (80019bc <HAL_FLASH_Program+0x190>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f013 0310 	ands.w	r3, r3, #16
 8001894:	f000 808e 	beq.w	80019b4 <HAL_FLASH_Program+0x188>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001898:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	f8c9 301c 	str.w	r3, [r9, #28]
 80018a4:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 80018a6:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018a8:	4a44      	ldr	r2, [pc, #272]	; (80019bc <HAL_FLASH_Program+0x190>)
 80018aa:	68d2      	ldr	r2, [r2, #12]
 80018ac:	0752      	lsls	r2, r2, #29
 80018ae:	d506      	bpl.n	80018be <HAL_FLASH_Program+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80018b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80018b4:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 80018b8:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80018ba:	f8c9 201c 	str.w	r2, [r9, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018be:	4a3f      	ldr	r2, [pc, #252]	; (80019bc <HAL_FLASH_Program+0x190>)
    return HAL_ERROR;
 80018c0:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018c2:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 80018c4:	2300      	movs	r3, #0
 80018c6:	f889 3018 	strb.w	r3, [r9, #24]
}
 80018ca:	b003      	add	sp, #12
 80018cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80018d0:	f1b8 0f01 	cmp.w	r8, #1
 80018d4:	d070      	beq.n	80019b8 <HAL_FLASH_Program+0x18c>
      nbiterations = 2U;
 80018d6:	f1b8 0f02 	cmp.w	r8, #2
 80018da:	bf14      	ite	ne
 80018dc:	2304      	movne	r3, #4
 80018de:	2302      	moveq	r3, #2
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	1cba      	adds	r2, r7, #2
 80018e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80018ea:	4c34      	ldr	r4, [pc, #208]	; (80019bc <HAL_FLASH_Program+0x190>)
 80018ec:	9301      	str	r3, [sp, #4]
      nbiterations = 4U;
 80018ee:	f04f 0800 	mov.w	r8, #0
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018f2:	f24c 3650 	movw	r6, #50000	; 0xc350
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018f6:	2100      	movs	r1, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80018f8:	f1c8 0220 	rsb	r2, r8, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018fc:	f8c9 101c 	str.w	r1, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001900:	fa0a f202 	lsl.w	r2, sl, r2
 8001904:	fa2b f308 	lsr.w	r3, fp, r8
 8001908:	f1a8 0120 	sub.w	r1, r8, #32
 800190c:	4313      	orrs	r3, r2
 800190e:	fa2a f101 	lsr.w	r1, sl, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001912:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001914:	430b      	orrs	r3, r1
 8001916:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 800191e:	803b      	strh	r3, [r7, #0]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff f9fc 	bl	8000d1c <HAL_GetTick>
 8001924:	4605      	mov	r5, r0
 8001926:	e004      	b.n	8001932 <HAL_FLASH_Program+0x106>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001928:	f7ff f9f8 	bl	8000d1c <HAL_GetTick>
 800192c:	1b40      	subs	r0, r0, r5
 800192e:	42b0      	cmp	r0, r6
 8001930:	d83a      	bhi.n	80019a8 <HAL_FLASH_Program+0x17c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001932:	68e3      	ldr	r3, [r4, #12]
 8001934:	07db      	lsls	r3, r3, #31
 8001936:	d4f7      	bmi.n	8001928 <HAL_FLASH_Program+0xfc>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001938:	68e3      	ldr	r3, [r4, #12]
 800193a:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800193c:	bf44      	itt	mi
 800193e:	2320      	movmi	r3, #32
 8001940:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001942:	68e3      	ldr	r3, [r4, #12]
 8001944:	06d9      	lsls	r1, r3, #27
 8001946:	d403      	bmi.n	8001950 <HAL_FLASH_Program+0x124>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001948:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800194a:	f010 0004 	ands.w	r0, r0, #4
 800194e:	d020      	beq.n	8001992 <HAL_FLASH_Program+0x166>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <HAL_FLASH_Program+0x190>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f013 0310 	ands.w	r3, r3, #16
 8001958:	d028      	beq.n	80019ac <HAL_FLASH_Program+0x180>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800195a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	f8c9 301c 	str.w	r3, [r9, #28]
 8001966:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8001968:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800196a:	4a14      	ldr	r2, [pc, #80]	; (80019bc <HAL_FLASH_Program+0x190>)
 800196c:	68d2      	ldr	r2, [r2, #12]
 800196e:	0752      	lsls	r2, r2, #29
 8001970:	d506      	bpl.n	8001980 <HAL_FLASH_Program+0x154>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001972:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8001976:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 800197a:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800197c:	f8c9 201c 	str.w	r2, [r9, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_FLASH_Program+0x190>)
    return HAL_ERROR;
 8001982:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001984:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001986:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_FLASH_Program+0x190>)
 8001988:	6913      	ldr	r3, [r2, #16]
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6113      	str	r3, [r2, #16]
 8001990:	e798      	b.n	80018c4 <HAL_FLASH_Program+0x98>
 8001992:	6923      	ldr	r3, [r4, #16]
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 800199a:	9b01      	ldr	r3, [sp, #4]
 800199c:	3702      	adds	r7, #2
 800199e:	42bb      	cmp	r3, r7
 80019a0:	f108 0810 	add.w	r8, r8, #16
 80019a4:	d1a7      	bne.n	80018f6 <HAL_FLASH_Program+0xca>
 80019a6:	e78d      	b.n	80018c4 <HAL_FLASH_Program+0x98>
        return HAL_TIMEOUT;
 80019a8:	2003      	movs	r0, #3
 80019aa:	e7ec      	b.n	8001986 <HAL_FLASH_Program+0x15a>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80019ac:	2104      	movs	r1, #4
 80019ae:	e7dc      	b.n	800196a <HAL_FLASH_Program+0x13e>
        return HAL_TIMEOUT;
 80019b0:	2003      	movs	r0, #3
 80019b2:	e787      	b.n	80018c4 <HAL_FLASH_Program+0x98>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80019b4:	2104      	movs	r1, #4
 80019b6:	e777      	b.n	80018a8 <HAL_FLASH_Program+0x7c>
      nbiterations = 1U;
 80019b8:	4643      	mov	r3, r8
 80019ba:	e791      	b.n	80018e0 <HAL_FLASH_Program+0xb4>
 80019bc:	40022000 	.word	0x40022000
 80019c0:	20000330 	.word	0x20000330

080019c4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_FLASH_Unlock+0x18>)
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	0612      	lsls	r2, r2, #24
 80019ca:	d505      	bpl.n	80019d8 <HAL_FLASH_Unlock+0x14>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019cc:	4904      	ldr	r1, [pc, #16]	; (80019e0 <HAL_FLASH_Unlock+0x1c>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019d0:	6059      	str	r1, [r3, #4]
  return HAL_OK; 
 80019d2:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019d4:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80019d6:	4770      	bx	lr
    return HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
}
 80019da:	4770      	bx	lr
 80019dc:	40022000 	.word	0x40022000
 80019e0:	45670123 	.word	0x45670123
 80019e4:	cdef89ab 	.word	0xcdef89ab

080019e8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80019e8:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <HAL_FLASH_Lock+0x10>)
 80019ea:	6913      	ldr	r3, [r2, #16]
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6113      	str	r3, [r2, #16]
}
 80019f2:	2000      	movs	r0, #0
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019fe:	6809      	ldr	r1, [r1, #0]
 8001a00:	2900      	cmp	r1, #0
 8001a02:	f000 80d9 	beq.w	8001bb8 <HAL_GPIO_Init+0x1bc>
{
 8001a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0a:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8001bcc <HAL_GPIO_Init+0x1d0>
{
 8001a0e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a10:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a12:	f04f 0801 	mov.w	r8, #1
 8001a16:	e079      	b.n	8001b0c <HAL_GPIO_Init+0x110>
 8001a18:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1c:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001a1e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a22:	fa03 f309 	lsl.w	r3, r3, r9
 8001a26:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a28:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2c:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a30:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a34:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001a40:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a42:	f240 8098 	bls.w	8001b76 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8001a46:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a48:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4c:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4e:	fa02 f209 	lsl.w	r2, r2, r9
 8001a52:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a54:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8001a56:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a58:	d554      	bpl.n	8001b04 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_GPIO_Init+0x1c0>)
 8001a5c:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_GPIO_Init+0x1c0>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6193      	str	r3, [r2, #24]
 8001a66:	6993      	ldr	r3, [r2, #24]
 8001a68:	f025 0603 	bic.w	r6, r5, #3
 8001a6c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001a78:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001a7a:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001a80:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	f04f 090f 	mov.w	r9, #15
 8001a88:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a8c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001a90:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a94:	f000 8086 	beq.w	8001ba4 <HAL_GPIO_Init+0x1a8>
 8001a98:	4a49      	ldr	r2, [pc, #292]	; (8001bc0 <HAL_GPIO_Init+0x1c4>)
 8001a9a:	4290      	cmp	r0, r2
 8001a9c:	f000 8084 	beq.w	8001ba8 <HAL_GPIO_Init+0x1ac>
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_GPIO_Init+0x1c8>)
 8001aa2:	4290      	cmp	r0, r2
 8001aa4:	f000 8083 	beq.w	8001bae <HAL_GPIO_Init+0x1b2>
 8001aa8:	4a47      	ldr	r2, [pc, #284]	; (8001bc8 <HAL_GPIO_Init+0x1cc>)
 8001aaa:	4290      	cmp	r0, r2
 8001aac:	bf0b      	itete	eq
 8001aae:	f04f 0903 	moveq.w	r9, #3
 8001ab2:	2205      	movne	r2, #5
 8001ab4:	fa09 f303 	lsleq.w	r3, r9, r3
 8001ab8:	fa02 f303 	lslne.w	r3, r2, r3
 8001abc:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ac0:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8001ac2:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac8:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8001aca:	bf54      	ite	pl
 8001acc:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001ace:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8001ad0:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001ad4:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad8:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8001ada:	bf54      	ite	pl
 8001adc:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001ade:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8001ae0:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae8:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001aea:	bf54      	ite	pl
 8001aec:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001aee:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8001af0:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001af4:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001afa:	bf54      	ite	pl
 8001afc:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001afe:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8001b00:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001b04:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b06:	fa31 f305 	lsrs.w	r3, r1, r5
 8001b0a:	d048      	beq.n	8001b9e <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b0c:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8001b10:	ea12 0701 	ands.w	r7, r2, r1
 8001b14:	d0f6      	beq.n	8001b04 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b16:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8001b1a:	f024 0a10 	bic.w	sl, r4, #16
 8001b1e:	f1ba 0f02 	cmp.w	sl, #2
 8001b22:	f47f af79 	bne.w	8001a18 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8001b26:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001b2a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8001b32:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f04f 0a0f 	mov.w	sl, #15
 8001b3c:	fa0a fb03 	lsl.w	fp, sl, r3
 8001b40:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8001b48:	fa06 f303 	lsl.w	r3, r6, r3
 8001b4c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8001b50:	f8c9 3020 	str.w	r3, [r9, #32]
 8001b54:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b58:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001b5a:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5e:	fa03 f309 	lsl.w	r3, r3, r9
 8001b62:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b64:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b68:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6c:	fa06 f609 	lsl.w	r6, r6, r9
 8001b70:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8001b74:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8001b76:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b78:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7c:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001b80:	fa06 f609 	lsl.w	r6, r6, r9
 8001b84:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001b88:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b8a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b8e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b92:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b96:	40ae      	lsls	r6, r5
 8001b98:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001b9a:	6046      	str	r6, [r0, #4]
 8001b9c:	e753      	b.n	8001a46 <HAL_GPIO_Init+0x4a>
  }
}
 8001b9e:	b003      	add	sp, #12
 8001ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e789      	b.n	8001abc <HAL_GPIO_Init+0xc0>
 8001ba8:	fa08 f303 	lsl.w	r3, r8, r3
 8001bac:	e786      	b.n	8001abc <HAL_GPIO_Init+0xc0>
 8001bae:	f04f 0902 	mov.w	r9, #2
 8001bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8001bb6:	e781      	b.n	8001abc <HAL_GPIO_Init+0xc0>
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	48000c00 	.word	0x48000c00
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	b90a      	cbnz	r2, 8001bd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd2:	6281      	str	r1, [r0, #40]	; 0x28
 8001bd4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd6:	6181      	str	r1, [r0, #24]
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop

08001bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001bde:	6951      	ldr	r1, [r2, #20]
 8001be0:	4201      	tst	r1, r0
 8001be2:	d100      	bne.n	8001be6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001be4:	4770      	bx	lr
{
 8001be6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001be8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bea:	f002 ff41 	bl	8004a70 <HAL_GPIO_EXTI_Callback>
 8001bee:	bd08      	pop	{r3, pc}
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	460d      	mov	r5, r1
 8001bfa:	4616      	mov	r6, r2
 8001bfc:	1c6b      	adds	r3, r5, #1
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	d128      	bne.n	8001c54 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c02:	6993      	ldr	r3, [r2, #24]
 8001c04:	0798      	lsls	r0, r3, #30
 8001c06:	d428      	bmi.n	8001c5a <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c08:	6993      	ldr	r3, [r2, #24]
 8001c0a:	06d9      	lsls	r1, r3, #27
 8001c0c:	d5f9      	bpl.n	8001c02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0e:	6993      	ldr	r3, [r2, #24]
 8001c10:	069d      	lsls	r5, r3, #26
 8001c12:	d5fc      	bpl.n	8001c0e <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c14:	2110      	movs	r1, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c16:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c18:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c1a:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c1c:	6993      	ldr	r3, [r2, #24]
 8001c1e:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8001c20:	bf44      	itt	mi
 8001c22:	2300      	movmi	r3, #0
 8001c24:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c26:	6993      	ldr	r3, [r2, #24]
 8001c28:	07d9      	lsls	r1, r3, #31
 8001c2a:	d403      	bmi.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c2c:	6993      	ldr	r3, [r2, #24]
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6193      	str	r3, [r2, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c34:	6853      	ldr	r3, [r2, #4]
 8001c36:	491f      	ldr	r1, [pc, #124]	; (8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c38:	2604      	movs	r6, #4
    I2C_RESET_CR2(hi2c);
 8001c3a:	400b      	ands	r3, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	2520      	movs	r5, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001c40:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8001c42:	2001      	movs	r0, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c44:	6466      	str	r6, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c46:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001c4a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c54:	6993      	ldr	r3, [r2, #24]
 8001c56:	079b      	lsls	r3, r3, #30
 8001c58:	d501      	bpl.n	8001c5e <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  return HAL_OK;
 8001c5a:	2000      	movs	r0, #0
}
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c5e:	6993      	ldr	r3, [r2, #24]
 8001c60:	06d9      	lsls	r1, r3, #27
 8001c62:	d419      	bmi.n	8001c98 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c64:	b125      	cbz	r5, 8001c70 <I2C_WaitOnTXISFlagUntilTimeout+0x7c>
 8001c66:	f7ff f859 	bl	8000d1c <HAL_GetTick>
 8001c6a:	1b80      	subs	r0, r0, r6
 8001c6c:	4285      	cmp	r5, r0
 8001c6e:	d2c5      	bcs.n	8001bfc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c76:	430b      	orrs	r3, r1
 8001c78:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001c7a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001c7e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001c82:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c8a:	b14d      	cbz	r5, 8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8001c8c:	f7ff f846 	bl	8000d1c <HAL_GetTick>
 8001c90:	1b80      	subs	r0, r0, r6
 8001c92:	4285      	cmp	r5, r0
 8001c94:	d304      	bcc.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8001c96:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c98:	6993      	ldr	r3, [r2, #24]
 8001c9a:	069b      	lsls	r3, r3, #26
 8001c9c:	d5f5      	bpl.n	8001c8a <I2C_WaitOnTXISFlagUntilTimeout+0x96>
 8001c9e:	e7b9      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca0:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8001ca8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}
 8001cb4:	fe00e800 	.word	0xfe00e800

08001cb8 <I2C_RequestMemoryRead>:
{
 8001cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001cbc:	f8d0 e000 	ldr.w	lr, [r0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001cc0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8001d64 <I2C_RequestMemoryRead+0xac>
  tmpreg = hi2c->Instance->CR2;
 8001cc4:	f8de 4004 	ldr.w	r4, [lr, #4]
{
 8001cc8:	9e06      	ldr	r6, [sp, #24]
 8001cca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001cce:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001cd2:	ea04 040c 	and.w	r4, r4, ip
{
 8001cd6:	461f      	mov	r7, r3
 8001cd8:	4321      	orrs	r1, r4

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 8001ce0:	4690      	mov	r8, r2
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001ce2:	f8ce 1004 	str.w	r1, [lr, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce6:	9a07      	ldr	r2, [sp, #28]
 8001ce8:	4631      	mov	r1, r6
{
 8001cea:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cec:	f7ff ff82 	bl	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cf0:	b960      	cbnz	r0, 8001d0c <I2C_RequestMemoryRead+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cf2:	2f01      	cmp	r7, #1
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	d010      	beq.n	8001d1a <I2C_RequestMemoryRead+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d00:	4631      	mov	r1, r6
 8001d02:	9a07      	ldr	r2, [sp, #28]
 8001d04:	4628      	mov	r0, r5
 8001d06:	f7ff ff75 	bl	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d0a:	b130      	cbz	r0, 8001d1a <I2C_RequestMemoryRead+0x62>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d01b      	beq.n	8001d4a <I2C_RequestMemoryRead+0x92>
    return HAL_TIMEOUT;
 8001d12:	2403      	movs	r4, #3
}
 8001d14:	4620      	mov	r0, r4
 8001d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d1a:	6829      	ldr	r1, [r5, #0]
 8001d1c:	fa5f f388 	uxtb.w	r3, r8
 8001d20:	628b      	str	r3, [r1, #40]	; 0x28
 8001d22:	1c70      	adds	r0, r6, #1
 8001d24:	d105      	bne.n	8001d32 <I2C_RequestMemoryRead+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d26:	698b      	ldr	r3, [r1, #24]
 8001d28:	065a      	lsls	r2, r3, #25
 8001d2a:	d5fc      	bpl.n	8001d26 <I2C_RequestMemoryRead+0x6e>
}
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d32:	698b      	ldr	r3, [r1, #24]
 8001d34:	065b      	lsls	r3, r3, #25
 8001d36:	d4ed      	bmi.n	8001d14 <I2C_RequestMemoryRead+0x5c>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d38:	b15e      	cbz	r6, 8001d52 <I2C_RequestMemoryRead+0x9a>
 8001d3a:	f7fe ffef 	bl	8000d1c <HAL_GetTick>
 8001d3e:	9b07      	ldr	r3, [sp, #28]
 8001d40:	1ac0      	subs	r0, r0, r3
 8001d42:	4286      	cmp	r6, r0
 8001d44:	d305      	bcc.n	8001d52 <I2C_RequestMemoryRead+0x9a>
 8001d46:	6829      	ldr	r1, [r5, #0]
 8001d48:	e7eb      	b.n	8001d22 <I2C_RequestMemoryRead+0x6a>
      return HAL_ERROR;
 8001d4a:	2401      	movs	r4, #1
}
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d52:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	2220      	movs	r2, #32
 8001d56:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8001d5a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8001d62:	e7d6      	b.n	8001d12 <I2C_RequestMemoryRead+0x5a>
 8001d64:	fc009800 	.word	0xfc009800

08001d68 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d051      	beq.n	8001e10 <HAL_I2C_Init+0xa8>
{
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d72:	4604      	mov	r4, r0
 8001d74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d040      	beq.n	8001dfe <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 8001d7c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d7e:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d80:	2224      	movs	r2, #36	; 0x24
 8001d82:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001d86:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d88:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8001d8a:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8001d92:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d94:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d96:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d98:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d9e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001da0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da2:	d031      	beq.n	8001e08 <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001da4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001da8:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001daa:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dac:	bf04      	itt	eq
 8001dae:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001db2:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001db4:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001db6:	6922      	ldr	r2, [r4, #16]
 8001db8:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8001dbc:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dbe:	69e0      	ldr	r0, [r4, #28]
 8001dc0:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dc2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001dc6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001dca:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dcc:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001dce:	ea42 020e 	orr.w	r2, r2, lr
 8001dd2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dd6:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd8:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 8001ddc:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001dde:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001de0:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001de2:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8001de6:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8001dec:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8001dee:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df0:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df6:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8001dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001dfe:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001e02:	f003 fdb5 	bl	8005970 <HAL_I2C_MspInit>
 8001e06:	e7b9      	b.n	8001d7c <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e7d1      	b.n	8001db4 <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8001e10:	2001      	movs	r0, #1
 8001e12:	4770      	bx	lr

08001e14 <HAL_I2C_Mem_Read_IT>:
{
 8001e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e18:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8001e1c:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	2c20      	cmp	r4, #32
{
 8001e20:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e24:	d003      	beq.n	8001e2e <HAL_I2C_Mem_Read_IT+0x1a>
    return HAL_BUSY;
 8001e26:	2002      	movs	r0, #2
}
 8001e28:	b003      	add	sp, #12
 8001e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((pData == NULL) || (Size == 0U))
 8001e2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001e30:	2c00      	cmp	r4, #0
 8001e32:	d046      	beq.n	8001ec2 <HAL_I2C_Mem_Read_IT+0xae>
 8001e34:	2d00      	cmp	r5, #0
 8001e36:	d044      	beq.n	8001ec2 <HAL_I2C_Mem_Read_IT+0xae>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e38:	6804      	ldr	r4, [r0, #0]
 8001e3a:	69a4      	ldr	r4, [r4, #24]
 8001e3c:	f414 4800 	ands.w	r8, r4, #32768	; 0x8000
 8001e40:	d1f1      	bne.n	8001e26 <HAL_I2C_Mem_Read_IT+0x12>
    __HAL_LOCK(hi2c);
 8001e42:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001e46:	2c01      	cmp	r4, #1
 8001e48:	d0ed      	beq.n	8001e26 <HAL_I2C_Mem_Read_IT+0x12>
 8001e4a:	461f      	mov	r7, r3
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	4681      	mov	r9, r0
 8001e50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001e54:	4616      	mov	r6, r2
 8001e56:	460c      	mov	r4, r1
    tickstart = HAL_GetTick();
 8001e58:	f7fe ff60 	bl	8000d1c <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e5c:	2322      	movs	r3, #34	; 0x22
 8001e5e:	f889 3041 	strb.w	r3, [r9, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001e62:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_I2C_Mem_Read_IT+0x100>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001e66:	f889 2042 	strb.w	r2, [r9, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e6a:	f8c9 8044 	str.w	r8, [r9, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001e6e:	f8a9 502a 	strh.w	r5, [r9, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e72:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e76:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001e7a:	4a27      	ldr	r2, [pc, #156]	; (8001f18 <HAL_I2C_Mem_Read_IT+0x104>)
    hi2c->pBuffPtr    = pData;
 8001e7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e7e:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001e86:	f8c9 2034 	str.w	r2, [r9, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e8a:	d81c      	bhi.n	8001ec6 <HAL_I2C_Mem_Read_IT+0xb2>
      hi2c->XferSize = hi2c->XferCount;
 8001e8c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8001e90:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8001e94:	b29b      	uxth	r3, r3
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001e96:	2119      	movs	r1, #25
 8001e98:	f8a9 3028 	strh.w	r3, [r9, #40]	; 0x28
 8001e9c:	4632      	mov	r2, r6
 8001e9e:	9001      	str	r0, [sp, #4]
 8001ea0:	9100      	str	r1, [sp, #0]
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	4648      	mov	r0, r9
 8001ea8:	f7ff ff06 	bl	8001cb8 <I2C_RequestMemoryRead>
 8001eac:	b178      	cbz	r0, 8001ece <HAL_I2C_Mem_Read_IT+0xba>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eae:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8001eb2:	2b04      	cmp	r3, #4
        __HAL_UNLOCK(hi2c);
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_Mem_Read_IT+0xae>
        return HAL_TIMEOUT;
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	e7b2      	b.n	8001e28 <HAL_I2C_Mem_Read_IT+0x14>
      return  HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	e7b0      	b.n	8001e28 <HAL_I2C_Mem_Read_IT+0x14>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec6:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8001ec8:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8001ecc:	e7e3      	b.n	8001e96 <HAL_I2C_Mem_Read_IT+0x82>
  tmpreg = hi2c->Instance->CR2;
 8001ece:	f8d9 2000 	ldr.w	r2, [r9]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001ed2:	4f12      	ldr	r7, [pc, #72]	; (8001f1c <HAL_I2C_Mem_Read_IT+0x108>)
  tmpreg = hi2c->Instance->CR2;
 8001ed4:	6851      	ldr	r1, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001ed6:	f899 6028 	ldrb.w	r6, [r9, #40]	; 0x28
 8001eda:	f3c4 0309 	ubfx	r3, r4, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001ede:	4039      	ands	r1, r7
 8001ee0:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8001ee4:	430b      	orrs	r3, r1
  */
static HAL_StatusTypeDef I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001ee6:	4c0e      	ldr	r4, [pc, #56]	; (8001f20 <HAL_I2C_Mem_Read_IT+0x10c>)
 8001ee8:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 8001eec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001ef0:	432b      	orrs	r3, r5
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001ef2:	42a1      	cmp	r1, r4
  hi2c->Instance->CR2 = tmpreg;
 8001ef4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 8001ef6:	f889 0040 	strb.w	r0, [r9, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001efa:	d008      	beq.n	8001f0e <HAL_I2C_Mem_Read_IT+0xfa>
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_I2C_Mem_Read_IT+0x110>)
 8001efe:	4299      	cmp	r1, r3
 8001f00:	bf14      	ite	ne
 8001f02:	21f4      	movne	r1, #244	; 0xf4
 8001f04:	2100      	moveq	r1, #0
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8001f06:	6813      	ldr	r3, [r2, #0]
 8001f08:	4319      	orrs	r1, r3
 8001f0a:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001f0c:	e78c      	b.n	8001e28 <HAL_I2C_Mem_Read_IT+0x14>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001f0e:	4601      	mov	r1, r0
 8001f10:	e7f9      	b.n	8001f06 <HAL_I2C_Mem_Read_IT+0xf2>
 8001f12:	bf00      	nop
 8001f14:	ffff0000 	.word	0xffff0000
 8001f18:	0800293d 	.word	0x0800293d
 8001f1c:	fc009800 	.word	0xfc009800
 8001f20:	08002b6d 	.word	0x08002b6d
 8001f24:	08002505 	.word	0x08002505

08001f28 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f28:	6803      	ldr	r3, [r0, #0]
{
 8001f2a:	b410      	push	{r4}
  if (hi2c->XferISR != NULL)
 8001f2c:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f2e:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f30:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001f32:	b11c      	cbz	r4, 8001f3c <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f34:	4623      	mov	r3, r4
}
 8001f36:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f3a:	4718      	bx	r3
}
 8001f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <HAL_I2C_MasterTxCpltCallback>:
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <HAL_I2C_SlaveTxCpltCallback>:
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <HAL_I2C_SlaveRxCpltCallback>:
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop

08001f50 <HAL_I2C_AddrCallback>:
{
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop

08001f54 <HAL_I2C_ListenCpltCallback>:
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <HAL_I2C_ErrorCallback>:
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <HAL_I2C_AbortCpltCallback>:
{
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop

08001f60 <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f60:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f62:	4a46      	ldr	r2, [pc, #280]	; (800207c <I2C_ITError+0x11c>)
{
 8001f64:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f66:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f6a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001f6c:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001f6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f70:	4319      	orrs	r1, r3
 8001f72:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001f74:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f78:	2b28      	cmp	r3, #40	; 0x28
{
 8001f7a:	4604      	mov	r4, r0
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001f7c:	d02c      	beq.n	8001fd8 <I2C_ITError+0x78>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001f82:	2b29      	cmp	r3, #41	; 0x29
 8001f84:	d028      	beq.n	8001fd8 <I2C_ITError+0x78>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001f8c:	d024      	beq.n	8001fd8 <I2C_ITError+0x78>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f8e:	6803      	ldr	r3, [r0, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001f90:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001f94:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8001f9e:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001fa0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001fa4:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8001fa6:	bf1c      	itt	ne
 8001fa8:	2220      	movne	r2, #32
 8001faa:	f880 2041 	strbne.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fae:	2200      	movs	r2, #0
 8001fb0:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001fb2:	6342      	str	r2, [r0, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8001fba:	d12e      	bne.n	800201a <I2C_ITError+0xba>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 8001fc2:	d13e      	bne.n	8002042 <I2C_ITError+0xe2>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001fc4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001fc8:	2b60      	cmp	r3, #96	; 0x60
 8001fca:	d04d      	beq.n	8002068 <I2C_ITError+0x108>
    __HAL_UNLOCK(hi2c);
 8001fcc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ffc1 	bl	8001f58 <HAL_I2C_ErrorCallback>
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001fd8:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001fdc:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001fe0:	6823      	ldr	r3, [r4, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001fe2:	4d27      	ldr	r5, [pc, #156]	; (8002080 <I2C_ITError+0x120>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001fe4:	681a      	ldr	r2, [r3, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001fe6:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8001fea:	2928      	cmp	r1, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001fec:	f000 0028 	and.w	r0, r0, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001ff0:	bf14      	ite	ne
 8001ff2:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8001ff6:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001ffa:	2828      	cmp	r0, #40	; 0x28
 8001ffc:	bf18      	it	ne
 8001ffe:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002002:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002004:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_NONE;
 8002006:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002008:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800200a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002010:	681a      	ldr	r2, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002012:	6365      	str	r5, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002014:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8002018:	d0d0      	beq.n	8001fbc <I2C_ITError+0x5c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800201a:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800201c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800201e:	4e19      	ldr	r6, [pc, #100]	; (8002084 <I2C_ITError+0x124>)
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002020:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    __HAL_UNLOCK(hi2c);
 8002024:	2500      	movs	r5, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002026:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002028:	4608      	mov	r0, r1
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800202a:	634e      	str	r6, [r1, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 800202c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002030:	f7ff fb8c 	bl	800174c <HAL_DMA_Abort_IT>
 8002034:	2800      	cmp	r0, #0
 8002036:	d0ce      	beq.n	8001fd6 <I2C_ITError+0x76>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002038:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 800203a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800203e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002040:	4718      	bx	r3
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002042:	6819      	ldr	r1, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002044:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002046:	4e0f      	ldr	r6, [pc, #60]	; (8002084 <I2C_ITError+0x124>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002048:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800204c:	6019      	str	r1, [r3, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800204e:	4628      	mov	r0, r5
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002050:	636e      	str	r6, [r5, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8002052:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002056:	f7ff fb79 	bl	800174c <HAL_DMA_Abort_IT>
 800205a:	2800      	cmp	r0, #0
 800205c:	d0bb      	beq.n	8001fd6 <I2C_ITError+0x76>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800205e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8002060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002064:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002066:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002068:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800206a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800206e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002072:	4620      	mov	r0, r4
 8002074:	f7ff ff72 	bl	8001f5c <HAL_I2C_AbortCpltCallback>
 8002078:	bd70      	pop	{r4, r5, r6, pc}
 800207a:	bf00      	nop
 800207c:	ffff0000 	.word	0xffff0000
 8002080:	080021ed 	.word	0x080021ed
 8002084:	08002579 	.word	0x08002579

08002088 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002088:	6803      	ldr	r3, [r0, #0]
 800208a:	2220      	movs	r2, #32
{
 800208c:	b570      	push	{r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800208e:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002090:	2208      	movs	r2, #8
 8002092:	61da      	str	r2, [r3, #28]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002094:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002098:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  I2C_RESET_CR2(hi2c);
 800209c:	4d51      	ldr	r5, [pc, #324]	; (80021e4 <I2C_ITSlaveCplt+0x15c>)
{
 800209e:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f020 00fe 	bic.w	r0, r0, #254	; 0xfe
 80020a6:	6018      	str	r0, [r3, #0]
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020a8:	6858      	ldr	r0, [r3, #4]
 80020aa:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80020ae:	6058      	str	r0, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	402a      	ands	r2, r5
 80020b4:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	0796      	lsls	r6, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80020ba:	bf44      	itt	mi
 80020bc:	2200      	movmi	r2, #0
 80020be:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	07d5      	lsls	r5, r2, #31
 80020c4:	d403      	bmi.n	80020ce <I2C_ITSlaveCplt+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	619a      	str	r2, [r3, #24]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	0450      	lsls	r0, r2, #17
 80020d2:	d42d      	bmi.n	8002130 <I2C_ITSlaveCplt+0xa8>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 80020d4:	681a      	ldr	r2, [r3, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 80020d6:	0412      	lsls	r2, r2, #16
 80020d8:	d42a      	bmi.n	8002130 <I2C_ITSlaveCplt+0xa8>
  if (hi2c->XferCount != 0U)
 80020da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020dc:	b292      	uxth	r2, r2
 80020de:	b11a      	cbz	r2, 80020e8 <I2C_ITSlaveCplt+0x60>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80020e2:	f042 0204 	orr.w	r2, r2, #4
 80020e6:	6462      	str	r2, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80020e8:	f011 0604 	ands.w	r6, r1, #4
 80020ec:	d006      	beq.n	80020fc <I2C_ITSlaveCplt+0x74>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80020ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c51      	adds	r1, r2, #1
 80020f4:	6261      	str	r1, [r4, #36]	; 0x24
 80020f6:	7013      	strb	r3, [r2, #0]
    if ((hi2c->XferSize > 0U))
 80020f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80020fa:	bb73      	cbnz	r3, 800215a <I2C_ITSlaveCplt+0xd2>
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fc:	2500      	movs	r5, #0
 80020fe:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002104:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8002106:	6365      	str	r5, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002108:	2b00      	cmp	r3, #0
 800210a:	d131      	bne.n	8002170 <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800210c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800210e:	4936      	ldr	r1, [pc, #216]	; (80021e8 <I2C_ITSlaveCplt+0x160>)
 8002110:	428a      	cmp	r2, r1
 8002112:	d118      	bne.n	8002146 <I2C_ITSlaveCplt+0xbe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002114:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002118:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800211c:	2a22      	cmp	r2, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 800211e:	f04f 0220 	mov.w	r2, #32
 8002122:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002126:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002128:	d058      	beq.n	80021dc <I2C_ITSlaveCplt+0x154>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800212a:	f7ff ff0d 	bl	8001f48 <HAL_I2C_SlaveTxCpltCallback>
 800212e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8002130:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002134:	2a21      	cmp	r2, #33	; 0x21
 8002136:	bf0c      	ite	eq
 8002138:	6ba2      	ldreq	r2, [r4, #56]	; 0x38
 800213a:	6be2      	ldrne	r2, [r4, #60]	; 0x3c
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	6852      	ldr	r2, [r2, #4]
 8002140:	b292      	uxth	r2, r2
 8002142:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002144:	e7c9      	b.n	80020da <I2C_ITSlaveCplt+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 8002146:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002148:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 800214a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800214e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff fefe 	bl	8001f54 <HAL_I2C_ListenCpltCallback>
 8002158:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 800215a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800215c:	3a01      	subs	r2, #1
 800215e:	b292      	uxth	r2, r2
 8002160:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002162:	6c62      	ldr	r2, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8002164:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002166:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 800216a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800216c:	6462      	str	r2, [r4, #68]	; 0x44
 800216e:	e7c5      	b.n	80020fc <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002170:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff fef4 	bl	8001f60 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002178:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800217c:	2b28      	cmp	r3, #40	; 0x28
 800217e:	d1d6      	bne.n	800212e <I2C_ITSlaveCplt+0xa6>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <I2C_ITSlaveCplt+0x160>)
 8002182:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8002184:	2320      	movs	r3, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8002186:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002188:	6365      	str	r5, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 800218a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800218e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8002192:	b18e      	cbz	r6, 80021b8 <I2C_ITSlaveCplt+0x130>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	1c59      	adds	r1, r3, #1
 800219a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800219c:	6261      	str	r1, [r4, #36]	; 0x24
 800219e:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 80021a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021a2:	b14b      	cbz	r3, 80021b8 <I2C_ITSlaveCplt+0x130>
      hi2c->XferCount--;
 80021a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80021a6:	3a01      	subs	r2, #1
 80021a8:	b292      	uxth	r2, r2
 80021aa:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
      hi2c->XferSize--;
 80021ae:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021b0:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 80021b4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021b6:	6462      	str	r2, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80021b8:	6823      	ldr	r3, [r4, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80021ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80021be:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80021c2:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c4:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80021c6:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 80021ca:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80021cc:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80021ce:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d0:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80021d2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80021d6:	f7ff febd 	bl	8001f54 <HAL_I2C_ListenCpltCallback>
 80021da:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021dc:	f7ff feb6 	bl	8001f4c <HAL_I2C_SlaveRxCpltCallback>
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
 80021e2:	bf00      	nop
 80021e4:	fe00e800 	.word	0xfe00e800
 80021e8:	ffff0000 	.word	0xffff0000

080021ec <I2C_Slave_ISR_IT>:
{
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80021ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	f000 80b0 	beq.w	8002358 <I2C_Slave_ISR_IT+0x16c>
 80021f8:	460d      	mov	r5, r1
 80021fa:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 80021fc:	06e9      	lsls	r1, r5, #27
 80021fe:	4616      	mov	r6, r2
 8002200:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8002202:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002206:	d423      	bmi.n	8002250 <I2C_Slave_ISR_IT+0x64>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8002208:	0769      	lsls	r1, r5, #29
 800220a:	d56d      	bpl.n	80022e8 <I2C_Slave_ISR_IT+0xfc>
 800220c:	0772      	lsls	r2, r6, #29
 800220e:	d56b      	bpl.n	80022e8 <I2C_Slave_ISR_IT+0xfc>
    if (hi2c->XferCount > 0U)
 8002210:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	b163      	cbz	r3, 8002230 <I2C_Slave_ISR_IT+0x44>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002218:	6822      	ldr	r2, [r4, #0]
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800221e:	6261      	str	r1, [r4, #36]	; 0x24
 8002220:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002222:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002224:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002226:	3b01      	subs	r3, #1
 8002228:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800222a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800222c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800222e:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8002230:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	b91b      	cbnz	r3, 800223e <I2C_Slave_ISR_IT+0x52>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8002236:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8002238:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800223c:	d168      	bne.n	8002310 <I2C_Slave_ISR_IT+0x124>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 800223e:	06aa      	lsls	r2, r5, #26
 8002240:	d502      	bpl.n	8002248 <I2C_Slave_ISR_IT+0x5c>
 8002242:	06b3      	lsls	r3, r6, #26
 8002244:	f100 808a 	bmi.w	800235c <I2C_Slave_ISR_IT+0x170>
  __HAL_UNLOCK(hi2c);
 8002248:	2000      	movs	r0, #0
 800224a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 800224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002250:	06f2      	lsls	r2, r6, #27
 8002252:	d5d9      	bpl.n	8002208 <I2C_Slave_ISR_IT+0x1c>
    if (hi2c->XferCount == 0U)
 8002254:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 8088 	bne.w	800236e <I2C_Slave_ISR_IT+0x182>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800225e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002260:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002264:	f000 80a6 	beq.w	80023b4 <I2C_Slave_ISR_IT+0x1c8>
 8002268:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800226a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800226e:	f000 80a1 	beq.w	80023b4 <I2C_Slave_ISR_IT+0x1c8>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002278:	d075      	beq.n	8002366 <I2C_Slave_ISR_IT+0x17a>
 800227a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800227e:	2b29      	cmp	r3, #41	; 0x29
 8002280:	d171      	bne.n	8002366 <I2C_Slave_ISR_IT+0x17a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	2210      	movs	r2, #16
 8002286:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800228c:	bf44      	itt	mi
 800228e:	2200      	movmi	r2, #0
 8002290:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	07d0      	lsls	r0, r2, #31
 8002296:	d403      	bmi.n	80022a0 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	619a      	str	r2, [r3, #24]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	2200      	movs	r2, #0
 80022a2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80022a6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80022aa:	2929      	cmp	r1, #41	; 0x29
 80022ac:	f000 810f 	beq.w	80024ce <I2C_Slave_ISR_IT+0x2e2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80022b0:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80022b4:	292a      	cmp	r1, #42	; 0x2a
 80022b6:	d1c2      	bne.n	800223e <I2C_Slave_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022b8:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022ba:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022bc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022c0:	6321      	str	r1, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80022c2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80022c6:	6818      	ldr	r0, [r3, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80022c8:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80022cc:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80022ce:	bf14      	ite	ne
 80022d0:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 80022d4:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 80022d8:	4001      	ands	r1, r0
 80022da:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022dc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80022de:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022e2:	f7ff fe33 	bl	8001f4c <HAL_I2C_SlaveRxCpltCallback>
 80022e6:	e7aa      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 80022e8:	072b      	lsls	r3, r5, #28
 80022ea:	d501      	bpl.n	80022f0 <I2C_Slave_ISR_IT+0x104>
 80022ec:	0737      	lsls	r7, r6, #28
 80022ee:	d446      	bmi.n	800237e <I2C_Slave_ISR_IT+0x192>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 80022f0:	07a8      	lsls	r0, r5, #30
 80022f2:	d5a4      	bpl.n	800223e <I2C_Slave_ISR_IT+0x52>
 80022f4:	07b1      	lsls	r1, r6, #30
 80022f6:	d5a2      	bpl.n	800223e <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80022f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d14b      	bne.n	8002398 <I2C_Slave_ISR_IT+0x1ac>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8002300:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002306:	d002      	beq.n	800230e <I2C_Slave_ISR_IT+0x122>
 8002308:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d197      	bne.n	800223e <I2C_Slave_ISR_IT+0x52>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	2300      	movs	r3, #0
 8002310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002314:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002318:	2a29      	cmp	r2, #41	; 0x29
 800231a:	f000 80b1 	beq.w	8002480 <I2C_Slave_ISR_IT+0x294>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800231e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002322:	2a2a      	cmp	r2, #42	; 0x2a
 8002324:	d18b      	bne.n	800223e <I2C_Slave_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002326:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002328:	2222      	movs	r2, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800232a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800232e:	6322      	str	r2, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002330:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002334:	6821      	ldr	r1, [r4, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002336:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800233a:	6808      	ldr	r0, [r1, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800233c:	2a28      	cmp	r2, #40	; 0x28
 800233e:	bf14      	ite	ne
 8002340:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
 8002344:	f06f 0244 	mvneq.w	r2, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002348:	4002      	ands	r2, r0
 800234a:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800234c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800234e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002352:	f7ff fdfb 	bl	8001f4c <HAL_I2C_SlaveRxCpltCallback>
 8002356:	e772      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8002358:	2002      	movs	r0, #2
}
 800235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800235c:	4629      	mov	r1, r5
 800235e:	4620      	mov	r0, r4
 8002360:	f7ff fe92 	bl	8002088 <I2C_ITSlaveCplt>
 8002364:	e770      	b.n	8002248 <I2C_Slave_ISR_IT+0x5c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	2210      	movs	r2, #16
 800236a:	61da      	str	r2, [r3, #28]
 800236c:	e767      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236e:	6803      	ldr	r3, [r0, #0]
 8002370:	2210      	movs	r2, #16
 8002372:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002374:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6443      	str	r3, [r0, #68]	; 0x44
 800237c:	e75f      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 800237e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002382:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002386:	2b28      	cmp	r3, #40	; 0x28
 8002388:	d049      	beq.n	800241e <I2C_Slave_ISR_IT+0x232>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	2108      	movs	r1, #8
    __HAL_UNLOCK(hi2c);
 800238e:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002390:	61d1      	str	r1, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8002392:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002396:	e752      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800239a:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 800239c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800239e:	1c58      	adds	r0, r3, #1
 80023a0:	6260      	str	r0, [r4, #36]	; 0x24
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 80023a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80023ac:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80023ae:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80023b0:	8522      	strh	r2, [r4, #40]	; 0x28
 80023b2:	e744      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 80023b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 80023b8:	2b28      	cmp	r3, #40	; 0x28
 80023ba:	f47f af5a 	bne.w	8002272 <I2C_Slave_ISR_IT+0x86>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <I2C_Slave_ISR_IT+0x314>)
 80023c0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 80023c8:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80023d2:	076b      	lsls	r3, r5, #29
 80023d4:	d511      	bpl.n	80023fa <I2C_Slave_ISR_IT+0x20e>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80023d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d8:	6822      	ldr	r2, [r4, #0]
 80023da:	1c59      	adds	r1, r3, #1
 80023dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023de:	6261      	str	r1, [r4, #36]	; 0x24
 80023e0:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 80023e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80023e4:	b14b      	cbz	r3, 80023fa <I2C_Slave_ISR_IT+0x20e>
      hi2c->XferCount--;
 80023e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023e8:	3a01      	subs	r2, #1
 80023ea:	b292      	uxth	r2, r2
 80023ec:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
      hi2c->XferSize--;
 80023f0:	3b01      	subs	r3, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023f2:	f042 0204 	orr.w	r2, r2, #4
      hi2c->XferSize--;
 80023f6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023f8:	6462      	str	r2, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80023fa:	6823      	ldr	r3, [r4, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80023fc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002400:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002404:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002406:	2710      	movs	r7, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002408:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 800240c:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800240e:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002410:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002412:	61df      	str	r7, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002414:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002418:	f7ff fd9c 	bl	8001f54 <HAL_I2C_ListenCpltCallback>
 800241c:	e70f      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
    transferdirection = I2C_GET_DIR(hi2c);
 800241e:	6820      	ldr	r0, [r4, #0]
 8002420:	6981      	ldr	r1, [r0, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002422:	6983      	ldr	r3, [r0, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002424:	f8d0 e008 	ldr.w	lr, [r0, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002428:	68c7      	ldr	r7, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002430:	68e3      	ldr	r3, [r4, #12]
 8002432:	2b02      	cmp	r3, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002434:	f3c1 4100 	ubfx	r1, r1, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002438:	d117      	bne.n	800246a <I2C_Slave_ISR_IT+0x27e>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800243a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800243e:	ea82 13de 	eor.w	r3, r2, lr, lsr #7
 8002442:	f013 0306 	ands.w	r3, r3, #6
 8002446:	d134      	bne.n	80024b2 <I2C_Slave_ISR_IT+0x2c6>
        hi2c->AddrEventCount++;
 8002448:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800244a:	3201      	adds	r2, #1
 800244c:	64a2      	str	r2, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800244e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002450:	2a02      	cmp	r2, #2
 8002452:	f47f aef4 	bne.w	800223e <I2C_Slave_ISR_IT+0x52>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002456:	2708      	movs	r7, #8
          hi2c->AddrEventCount = 0U;
 8002458:	64a3      	str	r3, [r4, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800245a:	4672      	mov	r2, lr
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800245c:	61c7      	str	r7, [r0, #28]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800245e:	4620      	mov	r0, r4
          __HAL_UNLOCK(hi2c);
 8002460:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002464:	f7ff fd74 	bl	8001f50 <HAL_I2C_AddrCallback>
 8002468:	e6e9      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800246a:	6803      	ldr	r3, [r0, #0]
      __HAL_UNLOCK(hi2c);
 800246c:	2700      	movs	r7, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800246e:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8002472:	6003      	str	r3, [r0, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002474:	4620      	mov	r0, r4
      __HAL_UNLOCK(hi2c);
 8002476:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800247a:	f7ff fd69 	bl	8001f50 <HAL_I2C_AddrCallback>
 800247e:	e6de      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002480:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002482:	2221      	movs	r2, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002484:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002488:	6322      	str	r2, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800248a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800248e:	6821      	ldr	r1, [r4, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002490:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002494:	6808      	ldr	r0, [r1, #0]
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002496:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002498:	bf14      	ite	ne
 800249a:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
 800249e:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 80024a2:	4002      	ands	r2, r0
 80024a4:	600a      	str	r2, [r1, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024a6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80024a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024ac:	f7ff fd4c 	bl	8001f48 <HAL_I2C_SlaveTxCpltCallback>
 80024b0:	e6c5      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024b2:	6803      	ldr	r3, [r0, #0]
        __HAL_UNLOCK(hi2c);
 80024b4:	f04f 0e00 	mov.w	lr, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024b8:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 80024bc:	6003      	str	r3, [r0, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024be:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80024c2:	4620      	mov	r0, r4
        __HAL_UNLOCK(hi2c);
 80024c4:	f884 e040 	strb.w	lr, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024c8:	f7ff fd42 	bl	8001f50 <HAL_I2C_AddrCallback>
 80024cc:	e6b7      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024ce:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024d0:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024d2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024d6:	6321      	str	r1, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80024d8:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024dc:	6818      	ldr	r0, [r3, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80024de:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80024e2:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024e4:	bf14      	ite	ne
 80024e6:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 80024ea:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 80024ee:	4001      	ands	r1, r0
 80024f0:	6019      	str	r1, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024f2:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80024f4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024f8:	f7ff fd26 	bl	8001f48 <HAL_I2C_SlaveTxCpltCallback>
 80024fc:	e69f      	b.n	800223e <I2C_Slave_ISR_IT+0x52>
 80024fe:	bf00      	nop
 8002500:	ffff0000 	.word	0xffff0000

08002504 <I2C_Slave_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8002504:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002508:	2b01      	cmp	r3, #1
 800250a:	d02b      	beq.n	8002564 <I2C_Slave_ISR_DMA+0x60>
 800250c:	2301      	movs	r3, #1
{
 800250e:	b510      	push	{r4, lr}
 8002510:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8002512:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002516:	06c8      	lsls	r0, r1, #27
 8002518:	d40a      	bmi.n	8002530 <I2C_Slave_ISR_DMA+0x2c>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 800251a:	0708      	lsls	r0, r1, #28
 800251c:	d51a      	bpl.n	8002554 <I2C_Slave_ISR_DMA+0x50>
 800251e:	0713      	lsls	r3, r2, #28
 8002520:	d518      	bpl.n	8002554 <I2C_Slave_ISR_DMA+0x50>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	2208      	movs	r2, #8
 8002526:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002528:	2000      	movs	r0, #0
 800252a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 800252e:	bd10      	pop	{r4, pc}
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002530:	06d3      	lsls	r3, r2, #27
 8002532:	d5f2      	bpl.n	800251a <I2C_Slave_ISR_DMA+0x16>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
 8002534:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002538:	2b21      	cmp	r3, #33	; 0x21
 800253a:	bf0c      	ite	eq
 800253c:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
 800253e:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	b16b      	cbz	r3, 8002568 <I2C_Slave_ISR_DMA+0x64>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	2210      	movs	r2, #16
 8002550:	61da      	str	r2, [r3, #28]
 8002552:	e7e9      	b.n	8002528 <I2C_Slave_ISR_DMA+0x24>
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8002554:	0688      	lsls	r0, r1, #26
 8002556:	d5e7      	bpl.n	8002528 <I2C_Slave_ISR_DMA+0x24>
 8002558:	0693      	lsls	r3, r2, #26
 800255a:	d5e5      	bpl.n	8002528 <I2C_Slave_ISR_DMA+0x24>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fd93 	bl	8002088 <I2C_ITSlaveCplt>
 8002562:	e7e1      	b.n	8002528 <I2C_Slave_ISR_DMA+0x24>
  __HAL_LOCK(hi2c);
 8002564:	2002      	movs	r0, #2
 8002566:	4770      	bx	lr
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	2210      	movs	r2, #16
 800256c:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800256e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6463      	str	r3, [r4, #68]	; 0x44
 8002576:	e7d7      	b.n	8002528 <I2C_Slave_ISR_DMA+0x24>

08002578 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002578:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800257a:	6802      	ldr	r2, [r0, #0]
  hi2c->hdmarx->XferAbortCallback = NULL;
 800257c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800257e:	6853      	ldr	r3, [r2, #4]
 8002580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
{
 8002584:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002586:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002588:	6053      	str	r3, [r2, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800258a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->hdmatx->XferAbortCallback = NULL;
 800258e:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002590:	2a60      	cmp	r2, #96	; 0x60
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002592:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002594:	634b      	str	r3, [r1, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002596:	d002      	beq.n	800259e <I2C_DMAAbort+0x26>
    HAL_I2C_ErrorCallback(hi2c);
 8002598:	f7ff fcde 	bl	8001f58 <HAL_I2C_ErrorCallback>
 800259c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800259e:	2320      	movs	r3, #32
 80025a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80025a4:	f7ff fcda 	bl	8001f5c <HAL_I2C_AbortCpltCallback>
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	bf00      	nop

080025ac <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025ac:	6801      	ldr	r1, [r0, #0]
 80025ae:	698b      	ldr	r3, [r1, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025b0:	680a      	ldr	r2, [r1, #0]
{
 80025b2:	b570      	push	{r4, r5, r6, lr}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80025b4:	05dd      	lsls	r5, r3, #23
 80025b6:	d518      	bpl.n	80025ea <HAL_I2C_ER_IRQHandler+0x3e>
 80025b8:	0614      	lsls	r4, r2, #24
 80025ba:	d558      	bpl.n	800266e <HAL_I2C_ER_IRQHandler+0xc2>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025be:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025c2:	f042 0201 	orr.w	r2, r2, #1
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80025c6:	055e      	lsls	r6, r3, #21
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025c8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025ca:	61cc      	str	r4, [r1, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80025cc:	d55d      	bpl.n	800268a <HAL_I2C_ER_IRQHandler+0xde>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025d4:	f042 0208 	orr.w	r2, r2, #8
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80025d8:	059d      	lsls	r5, r3, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025da:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025dc:	61cc      	str	r4, [r1, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80025de:	d44c      	bmi.n	800267a <HAL_I2C_ER_IRQHandler+0xce>
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80025e2:	f013 0f0b 	tst.w	r3, #11
 80025e6:	d108      	bne.n	80025fa <HAL_I2C_ER_IRQHandler+0x4e>
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80025ea:	055c      	lsls	r4, r3, #21
 80025ec:	d541      	bpl.n	8002672 <HAL_I2C_ER_IRQHandler+0xc6>
 80025ee:	0612      	lsls	r2, r2, #24
 80025f0:	d4ed      	bmi.n	80025ce <HAL_I2C_ER_IRQHandler+0x22>
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80025f4:	f013 0f0b 	tst.w	r3, #11
 80025f8:	d0f6      	beq.n	80025e8 <HAL_I2C_ER_IRQHandler+0x3c>
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025fa:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025fc:	4c4d      	ldr	r4, [pc, #308]	; (8002734 <HAL_I2C_ER_IRQHandler+0x188>)
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80025fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002600:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002604:	62c4      	str	r4, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002606:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800260a:	4313      	orrs	r3, r2
 800260c:	6443      	str	r3, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800260e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002612:	2b28      	cmp	r3, #40	; 0x28
 8002614:	d03c      	beq.n	8002690 <HAL_I2C_ER_IRQHandler+0xe4>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002616:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800261a:	2b29      	cmp	r3, #41	; 0x29
 800261c:	d038      	beq.n	8002690 <HAL_I2C_ER_IRQHandler+0xe4>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800261e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002622:	2b2a      	cmp	r3, #42	; 0x2a
 8002624:	d034      	beq.n	8002690 <HAL_I2C_ER_IRQHandler+0xe4>
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002626:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800262a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800262e:	680b      	ldr	r3, [r1, #0]
 8002630:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002634:	600b      	str	r3, [r1, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002636:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800263a:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 800263c:	bf1c      	itt	ne
 800263e:	2320      	movne	r3, #32
 8002640:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002644:	2300      	movs	r3, #0
 8002646:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002648:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800264a:	680b      	ldr	r3, [r1, #0]
 800264c:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8002650:	4604      	mov	r4, r0
 8002652:	d13e      	bne.n	80026d2 <HAL_I2C_ER_IRQHandler+0x126>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002654:	680a      	ldr	r2, [r1, #0]
 8002656:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 800265a:	d14f      	bne.n	80026fc <HAL_I2C_ER_IRQHandler+0x150>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800265c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002660:	2b60      	cmp	r3, #96	; 0x60
 8002662:	d05f      	beq.n	8002724 <HAL_I2C_ER_IRQHandler+0x178>
    __HAL_UNLOCK(hi2c);
 8002664:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002668:	f7ff fc76 	bl	8001f58 <HAL_I2C_ErrorCallback>
}
 800266c:	bd70      	pop	{r4, r5, r6, pc}
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 800266e:	055c      	lsls	r4, r3, #21
 8002670:	d4b6      	bmi.n	80025e0 <HAL_I2C_ER_IRQHandler+0x34>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002672:	059e      	lsls	r6, r3, #22
 8002674:	d5b4      	bpl.n	80025e0 <HAL_I2C_ER_IRQHandler+0x34>
 8002676:	0615      	lsls	r5, r2, #24
 8002678:	d5b2      	bpl.n	80025e0 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800267a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800267c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002686:	61ca      	str	r2, [r1, #28]
 8002688:	e7aa      	b.n	80025e0 <HAL_I2C_ER_IRQHandler+0x34>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 800268a:	059b      	lsls	r3, r3, #22
 800268c:	d4f5      	bmi.n	800267a <HAL_I2C_ER_IRQHandler+0xce>
 800268e:	e7a7      	b.n	80025e0 <HAL_I2C_ER_IRQHandler+0x34>
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002690:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002694:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002698:	680e      	ldr	r6, [r1, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800269a:	4d27      	ldr	r5, [pc, #156]	; (8002738 <HAL_I2C_ER_IRQHandler+0x18c>)
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800269c:	f004 0428 	and.w	r4, r4, #40	; 0x28
 80026a0:	2c28      	cmp	r4, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80026a2:	f002 0228 	and.w	r2, r2, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80026a6:	bf14      	ite	ne
 80026a8:	f06f 03f6 	mvnne.w	r3, #246	; 0xf6
 80026ac:	f06f 0346 	mvneq.w	r3, #70	; 0x46
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80026b0:	2a28      	cmp	r2, #40	; 0x28
 80026b2:	bf18      	it	ne
 80026b4:	f06f 03f6 	mvnne.w	r3, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026b8:	4033      	ands	r3, r6
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026ba:	2428      	movs	r4, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_NONE;
 80026bc:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026be:	600b      	str	r3, [r1, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026c0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026c4:	6302      	str	r2, [r0, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026c6:	680b      	ldr	r3, [r1, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80026c8:	6345      	str	r5, [r0, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026ca:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 80026ce:	4604      	mov	r4, r0
 80026d0:	d0c0      	beq.n	8002654 <HAL_I2C_ER_IRQHandler+0xa8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026d2:	680b      	ldr	r3, [r1, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80026d6:	4e19      	ldr	r6, [pc, #100]	; (800273c <HAL_I2C_ER_IRQHandler+0x190>)
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_UNLOCK(hi2c);
 80026dc:	2500      	movs	r5, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026de:	600b      	str	r3, [r1, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026e0:	4610      	mov	r0, r2
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026e2:	6356      	str	r6, [r2, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80026e4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026e8:	f7ff f830 	bl	800174c <HAL_DMA_Abort_IT>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	f43f af7b 	beq.w	80025e8 <HAL_I2C_ER_IRQHandler+0x3c>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80026f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026fa:	4718      	bx	r3
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026fc:	680a      	ldr	r2, [r1, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026fe:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002700:	4e0e      	ldr	r6, [pc, #56]	; (800273c <HAL_I2C_ER_IRQHandler+0x190>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002706:	600a      	str	r2, [r1, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002708:	4628      	mov	r0, r5
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800270a:	636e      	str	r6, [r5, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 800270c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002710:	f7ff f81c 	bl	800174c <HAL_DMA_Abort_IT>
 8002714:	2800      	cmp	r0, #0
 8002716:	f43f af67 	beq.w	80025e8 <HAL_I2C_ER_IRQHandler+0x3c>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800271a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800271c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002720:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002722:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002726:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800272a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 800272e:	f7ff fc15 	bl	8001f5c <HAL_I2C_AbortCpltCallback>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	ffff0000 	.word	0xffff0000
 8002738:	080021ed 	.word	0x080021ed
 800273c:	08002579 	.word	0x08002579

08002740 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002740:	6803      	ldr	r3, [r0, #0]
 8002742:	2220      	movs	r2, #32
{
 8002744:	b570      	push	{r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002746:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8002748:	685a      	ldr	r2, [r3, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800274a:	4d78      	ldr	r5, [pc, #480]	; (800292c <I2C_ITMasterCplt+0x1ec>)
{
 800274c:	4604      	mov	r4, r0
  I2C_RESET_CR2(hi2c);
 800274e:	4878      	ldr	r0, [pc, #480]	; (8002930 <I2C_ITMasterCplt+0x1f0>)
 8002750:	4002      	ands	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	2000      	movs	r0, #0
  I2C_RESET_CR2(hi2c);
 8002754:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002756:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8002758:	6360      	str	r0, [r4, #52]	; 0x34
  if ((ITFlags & I2C_FLAG_AF) != RESET)
 800275a:	06c8      	lsls	r0, r1, #27
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800275c:	62e5      	str	r5, [r4, #44]	; 0x2c
  if ((ITFlags & I2C_FLAG_AF) != RESET)
 800275e:	d505      	bpl.n	800276c <I2C_ITMasterCplt+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002760:	2210      	movs	r2, #16
 8002762:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002764:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002766:	f042 0204 	orr.w	r2, r2, #4
 800276a:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002770:	bf44      	itt	mi
 8002772:	2200      	movmi	r2, #0
 8002774:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	07d2      	lsls	r2, r2, #31
 800277a:	d403      	bmi.n	8002784 <I2C_ITMasterCplt+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	619a      	str	r2, [r3, #24]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002784:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002788:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800278c:	681a      	ldr	r2, [r3, #0]
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800278e:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8002792:	2928      	cmp	r1, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002794:	f000 0028 	and.w	r0, r0, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002798:	bf14      	ite	ne
 800279a:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 800279e:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80027a2:	2828      	cmp	r0, #40	; 0x28
 80027a4:	bf18      	it	ne
 80027a6:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027aa:	400a      	ands	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
  if ((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
 80027ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80027b0:	b962      	cbnz	r2, 80027cc <I2C_ITMasterCplt+0x8c>
 80027b2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80027b6:	2960      	cmp	r1, #96	; 0x60
 80027b8:	d008      	beq.n	80027cc <I2C_ITMasterCplt+0x8c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80027be:	2b21      	cmp	r3, #33	; 0x21
 80027c0:	d03e      	beq.n	8002840 <I2C_ITMasterCplt+0x100>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027c2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80027c6:	2b22      	cmp	r3, #34	; 0x22
 80027c8:	d07d      	beq.n	80028c6 <I2C_ITMasterCplt+0x186>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027cc:	2100      	movs	r1, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027ce:	4857      	ldr	r0, [pc, #348]	; (800292c <I2C_ITMasterCplt+0x1ec>)
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80027d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027d2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027d6:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80027d8:	8561      	strh	r1, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80027da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80027dc:	430a      	orrs	r2, r1
 80027de:	6462      	str	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80027e0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80027e4:	2a28      	cmp	r2, #40	; 0x28
 80027e6:	d03a      	beq.n	800285e <I2C_ITMasterCplt+0x11e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80027e8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80027ec:	2a29      	cmp	r2, #41	; 0x29
 80027ee:	d036      	beq.n	800285e <I2C_ITMasterCplt+0x11e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027f0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80027f4:	2a2a      	cmp	r2, #42	; 0x2a
 80027f6:	d032      	beq.n	800285e <I2C_ITMasterCplt+0x11e>
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80027f8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80027fc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8002806:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002808:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800280c:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 800280e:	bf1c      	itt	ne
 8002810:	2220      	movne	r2, #32
 8002812:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002816:	2200      	movs	r2, #0
 8002818:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800281a:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8002822:	d13c      	bne.n	800289e <I2C_ITMasterCplt+0x15e>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800282a:	d15b      	bne.n	80028e4 <I2C_ITMasterCplt+0x1a4>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800282c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002830:	2b60      	cmp	r3, #96	; 0x60
 8002832:	d06e      	beq.n	8002912 <I2C_ITMasterCplt+0x1d2>
    __HAL_UNLOCK(hi2c);
 8002834:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002838:	4620      	mov	r0, r4
 800283a:	f7ff fb8d 	bl	8001f58 <HAL_I2C_ErrorCallback>
 800283e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002840:	2320      	movs	r3, #32
 8002842:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002846:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800284a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800284e:	2b40      	cmp	r3, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002854:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002856:	d059      	beq.n	800290c <I2C_ITMasterCplt+0x1cc>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002858:	f7ff fb74 	bl	8001f44 <HAL_I2C_MasterTxCpltCallback>
 800285c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800285e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002862:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002866:	681e      	ldr	r6, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002868:	4d32      	ldr	r5, [pc, #200]	; (8002934 <I2C_ITMasterCplt+0x1f4>)
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800286a:	f000 0028 	and.w	r0, r0, #40	; 0x28
 800286e:	2828      	cmp	r0, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002870:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002874:	bf14      	ite	ne
 8002876:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 800287a:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800287e:	2928      	cmp	r1, #40	; 0x28
 8002880:	bf18      	it	ne
 8002882:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002886:	4032      	ands	r2, r6
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002888:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_NONE;
 800288a:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800288c:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800288e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002892:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002894:	681a      	ldr	r2, [r3, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002896:	6365      	str	r5, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002898:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 800289c:	d0c2      	beq.n	8002824 <I2C_ITMasterCplt+0xe4>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800289e:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80028a2:	4e25      	ldr	r6, [pc, #148]	; (8002938 <I2C_ITMasterCplt+0x1f8>)
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    __HAL_UNLOCK(hi2c);
 80028a8:	2500      	movs	r5, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028aa:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028ac:	4608      	mov	r0, r1
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028ae:	634e      	str	r6, [r1, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80028b0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028b4:	f7fe ff4a 	bl	800174c <HAL_DMA_Abort_IT>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d086      	beq.n	80027ca <I2C_ITMasterCplt+0x8a>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80028be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028c4:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	2320      	movs	r3, #32
 80028c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028d4:	2b40      	cmp	r3, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028da:	4620      	mov	r0, r4
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028dc:	d022      	beq.n	8002924 <I2C_ITMasterCplt+0x1e4>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028de:	f002 f8c1 	bl	8004a64 <HAL_I2C_MasterRxCpltCallback>
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028e4:	6819      	ldr	r1, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028e6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80028e8:	4e13      	ldr	r6, [pc, #76]	; (8002938 <I2C_ITMasterCplt+0x1f8>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028ea:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80028ee:	6019      	str	r1, [r3, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028f0:	4628      	mov	r0, r5
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028f2:	636e      	str	r6, [r5, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80028f4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028f8:	f7fe ff28 	bl	800174c <HAL_DMA_Abort_IT>
 80028fc:	2800      	cmp	r0, #0
 80028fe:	f43f af64 	beq.w	80027ca <I2C_ITMasterCplt+0x8a>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002902:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8002904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002908:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800290a:	4718      	bx	r3
      HAL_I2C_MemTxCpltCallback(hi2c);
 800290c:	f002 f89e 	bl	8004a4c <HAL_I2C_MemTxCpltCallback>
 8002910:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002914:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002918:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff fb1d 	bl	8001f5c <HAL_I2C_AbortCpltCallback>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002924:	f002 f898 	bl	8004a58 <HAL_I2C_MemRxCpltCallback>
 8002928:	bd70      	pop	{r4, r5, r6, pc}
 800292a:	bf00      	nop
 800292c:	ffff0000 	.word	0xffff0000
 8002930:	fe00e800 	.word	0xfe00e800
 8002934:	080021ed 	.word	0x080021ed
 8002938:	08002579 	.word	0x08002579

0800293c <I2C_Master_ISR_IT>:
{
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800293e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002942:	2b01      	cmp	r3, #1
 8002944:	d062      	beq.n	8002a0c <I2C_Master_ISR_IT+0xd0>
 8002946:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002948:	06cf      	lsls	r7, r1, #27
 800294a:	4616      	mov	r6, r2
 800294c:	460d      	mov	r5, r1
 800294e:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8002950:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002954:	d40c      	bmi.n	8002970 <I2C_Master_ISR_IT+0x34>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8002956:	076f      	lsls	r7, r5, #29
 8002958:	d520      	bpl.n	800299c <I2C_Master_ISR_IT+0x60>
 800295a:	0770      	lsls	r0, r6, #29
 800295c:	d51e      	bpl.n	800299c <I2C_Master_ISR_IT+0x60>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800295e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002960:	6822      	ldr	r2, [r4, #0]
 8002962:	1c59      	adds	r1, r3, #1
 8002964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002966:	6261      	str	r1, [r4, #36]	; 0x24
 8002968:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800296a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 800296c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800296e:	e021      	b.n	80029b4 <I2C_Master_ISR_IT+0x78>
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002970:	06d0      	lsls	r0, r2, #27
 8002972:	d5f0      	bpl.n	8002956 <I2C_Master_ISR_IT+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	2210      	movs	r2, #16
 8002978:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800297a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800297c:	f042 0204 	orr.w	r2, r2, #4
 8002980:	6462      	str	r2, [r4, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002986:	bf44      	itt	mi
 8002988:	2200      	movmi	r2, #0
 800298a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	07d2      	lsls	r2, r2, #31
 8002990:	d415      	bmi.n	80029be <I2C_Master_ISR_IT+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	619a      	str	r2, [r3, #24]
 800299a:	e010      	b.n	80029be <I2C_Master_ISR_IT+0x82>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 800299c:	07a9      	lsls	r1, r5, #30
 800299e:	d516      	bpl.n	80029ce <I2C_Master_ISR_IT+0x92>
 80029a0:	07b2      	lsls	r2, r6, #30
 80029a2:	d514      	bpl.n	80029ce <I2C_Master_ISR_IT+0x92>
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80029a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029a6:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize--;
 80029a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80029aa:	1c58      	adds	r0, r3, #1
 80029ac:	6260      	str	r0, [r4, #36]	; 0x24
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	628b      	str	r3, [r1, #40]	; 0x28
    hi2c->XferCount--;
 80029b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29b      	uxth	r3, r3
    hi2c->XferSize--;
 80029b8:	3a01      	subs	r2, #1
    hi2c->XferCount--;
 80029ba:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 80029bc:	8522      	strh	r2, [r4, #40]	; 0x28
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80029be:	06aa      	lsls	r2, r5, #26
 80029c0:	d501      	bpl.n	80029c6 <I2C_Master_ISR_IT+0x8a>
 80029c2:	06b3      	lsls	r3, r6, #26
 80029c4:	d43a      	bmi.n	8002a3c <I2C_Master_ISR_IT+0x100>
  __HAL_UNLOCK(hi2c);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 80029cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 80029ce:	062b      	lsls	r3, r5, #24
 80029d0:	d51e      	bpl.n	8002a10 <I2C_Master_ISR_IT+0xd4>
 80029d2:	0677      	lsls	r7, r6, #25
 80029d4:	d5f3      	bpl.n	80029be <I2C_Master_ISR_IT+0x82>
    if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80029d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d134      	bne.n	8002a46 <I2C_Master_ISR_IT+0x10a>
 80029dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d030      	beq.n	8002a46 <I2C_Master_ISR_IT+0x10a>
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 80029e4:	6822      	ldr	r2, [r4, #0]
 80029e6:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80029ea:	b280      	uxth	r0, r0
 80029ec:	28ff      	cmp	r0, #255	; 0xff
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 80029ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f2:	d972      	bls.n	8002ada <I2C_Master_ISR_IT+0x19e>
  tmpreg = hi2c->Instance->CR2;
 80029f4:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80029f6:	485c      	ldr	r0, [pc, #368]	; (8002b68 <I2C_Master_ISR_IT+0x22c>)
 80029f8:	4003      	ands	r3, r0
 80029fa:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002a02:	430b      	orrs	r3, r1
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a04:	21ff      	movs	r1, #255	; 0xff
 8002a06:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8002a08:	6053      	str	r3, [r2, #4]
 8002a0a:	e7d8      	b.n	80029be <I2C_Master_ISR_IT+0x82>
  __HAL_LOCK(hi2c);
 8002a0c:	2002      	movs	r0, #2
}
 8002a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8002a10:	0668      	lsls	r0, r5, #25
 8002a12:	d5d4      	bpl.n	80029be <I2C_Master_ISR_IT+0x82>
 8002a14:	0671      	lsls	r1, r6, #25
 8002a16:	d5d2      	bpl.n	80029be <I2C_Master_ISR_IT+0x82>
    if (hi2c->XferCount == 0U)
 8002a18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d137      	bne.n	8002a90 <I2C_Master_ISR_IT+0x154>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	6853      	ldr	r3, [r2, #4]
 8002a24:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002a28:	d1c9      	bne.n	80029be <I2C_Master_ISR_IT+0x82>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002a2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a2c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002a30:	d133      	bne.n	8002a9a <I2C_Master_ISR_IT+0x15e>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a32:	6853      	ldr	r3, [r2, #4]
 8002a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a38:	6053      	str	r3, [r2, #4]
 8002a3a:	e7c0      	b.n	80029be <I2C_Master_ISR_IT+0x82>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff fe7e 	bl	8002740 <I2C_ITMasterCplt>
 8002a44:	e7bf      	b.n	80029c6 <I2C_Master_ISR_IT+0x8a>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a46:	6822      	ldr	r2, [r4, #0]
 8002a48:	6853      	ldr	r3, [r2, #4]
 8002a4a:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	d11f      	bne.n	8002a90 <I2C_Master_ISR_IT+0x154>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a54:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8002a58:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a5a:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a5e:	d050      	beq.n	8002b02 <I2C_Master_ISR_IT+0x1c6>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a60:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a62:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a66:	6321      	str	r1, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002a68:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a6c:	6817      	ldr	r7, [r2, #0]
    hi2c->XferISR       = NULL;
 8002a6e:	6363      	str	r3, [r4, #52]	; 0x34
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002a70:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8002a74:	2828      	cmp	r0, #40	; 0x28
 8002a76:	bf14      	ite	ne
 8002a78:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8002a7c:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a80:	4039      	ands	r1, r7
 8002a82:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a84:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002a86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a8a:	f001 ffeb 	bl	8004a64 <HAL_I2C_MasterRxCpltCallback>
 8002a8e:	e796      	b.n	80029be <I2C_Master_ISR_IT+0x82>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	4620      	mov	r0, r4
 8002a94:	f7ff fa64 	bl	8001f60 <I2C_ITError>
 8002a98:	e791      	b.n	80029be <I2C_Master_ISR_IT+0x82>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a9e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8002aa2:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8002aa4:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002aa8:	d04f      	beq.n	8002b4a <I2C_Master_ISR_IT+0x20e>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002aaa:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8002aac:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ab0:	6321      	str	r1, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002ab2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ab6:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8002ab8:	6363      	str	r3, [r4, #52]	; 0x34
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002aba:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8002abe:	2928      	cmp	r1, #40	; 0x28
 8002ac0:	bf14      	ite	ne
 8002ac2:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8002ac6:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002aca:	4001      	ands	r1, r0
 8002acc:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ace:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002ad0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ad4:	f001 ffc6 	bl	8004a64 <HAL_I2C_MasterRxCpltCallback>
 8002ad8:	e771      	b.n	80029be <I2C_Master_ISR_IT+0x82>
        hi2c->XferSize = hi2c->XferCount;
 8002ada:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8002ade:	b280      	uxth	r0, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8002ae4:	8520      	strh	r0, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ae6:	d025      	beq.n	8002b34 <I2C_Master_ISR_IT+0x1f8>
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002ae8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002aea:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8002b68 <I2C_Master_ISR_IT+0x22c>
  tmpreg = hi2c->Instance->CR2;
 8002aee:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002af0:	ea03 030e 	and.w	r3, r3, lr
 8002af4:	433b      	orrs	r3, r7
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002af6:	b2c0      	uxtb	r0, r0
 8002af8:	430b      	orrs	r3, r1
 8002afa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hi2c->Instance->CR2 = tmpreg;
 8002afe:	6053      	str	r3, [r2, #4]
 8002b00:	e75d      	b.n	80029be <I2C_Master_ISR_IT+0x82>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b02:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b04:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b08:	6321      	str	r1, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002b0a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b0e:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8002b10:	6363      	str	r3, [r4, #52]	; 0x34
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002b12:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8002b16:	2928      	cmp	r1, #40	; 0x28
 8002b18:	bf18      	it	ne
 8002b1a:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b1e:	bf08      	it	eq
 8002b20:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 8002b24:	4001      	ands	r1, r0
 8002b26:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b28:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002b2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b2e:	f7ff fa09 	bl	8001f44 <HAL_I2C_MasterTxCpltCallback>
 8002b32:	e744      	b.n	80029be <I2C_Master_ISR_IT+0x82>
  tmpreg = hi2c->Instance->CR2;
 8002b34:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002b36:	4f0c      	ldr	r7, [pc, #48]	; (8002b68 <I2C_Master_ISR_IT+0x22c>)
 8002b38:	403b      	ands	r3, r7
 8002b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002b3e:	b2c0      	uxtb	r0, r0
 8002b40:	430b      	orrs	r3, r1
 8002b42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  hi2c->Instance->CR2 = tmpreg;
 8002b46:	6050      	str	r0, [r2, #4]
 8002b48:	e739      	b.n	80029be <I2C_Master_ISR_IT+0x82>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b4a:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b4c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b50:	6321      	str	r1, [r4, #48]	; 0x30
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002b52:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b56:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8002b58:	6363      	str	r3, [r4, #52]	; 0x34
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002b5a:	f001 0128 	and.w	r1, r1, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002b5e:	2928      	cmp	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b60:	bf18      	it	ne
 8002b62:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8002b66:	e7da      	b.n	8002b1e <I2C_Master_ISR_IT+0x1e2>
 8002b68:	fc009800 	.word	0xfc009800

08002b6c <I2C_Master_ISR_DMA>:
{
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8002b6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d063      	beq.n	8002c3e <I2C_Master_ISR_DMA+0xd2>
 8002b76:	2301      	movs	r3, #1
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002b78:	06cd      	lsls	r5, r1, #27
 8002b7a:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8002b7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002b80:	d433      	bmi.n	8002bea <I2C_Master_ISR_DMA+0x7e>
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8002b82:	060e      	lsls	r6, r1, #24
 8002b84:	d553      	bpl.n	8002c2e <I2C_Master_ISR_DMA+0xc2>
 8002b86:	0655      	lsls	r5, r2, #25
 8002b88:	d551      	bpl.n	8002c2e <I2C_Master_ISR_DMA+0xc2>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002b8a:	6822      	ldr	r2, [r4, #0]
 8002b8c:	6813      	ldr	r3, [r2, #0]
 8002b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b92:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8002b94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d058      	beq.n	8002c4e <I2C_Master_ISR_DMA+0xe2>
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002b9c:	6850      	ldr	r0, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002ba0:	b289      	uxth	r1, r1
 8002ba2:	29ff      	cmp	r1, #255	; 0xff
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002ba4:	f3c0 0009 	ubfx	r0, r0, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba8:	d84b      	bhi.n	8002c42 <I2C_Master_ISR_DMA+0xd6>
        hi2c->XferSize = hi2c->XferCount;
 8002baa:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002bac:	b289      	uxth	r1, r1
 8002bae:	b2cb      	uxtb	r3, r1
 8002bb0:	041d      	lsls	r5, r3, #16
        xfermode = I2C_AUTOEND_MODE;
 8002bb2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  tmpreg = hi2c->Instance->CR2;
 8002bb6:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002bb8:	4f28      	ldr	r7, [pc, #160]	; (8002c5c <I2C_Master_ISR_DMA+0xf0>)
 8002bba:	8521      	strh	r1, [r4, #40]	; 0x28
 8002bbc:	403b      	ands	r3, r7
 8002bbe:	4303      	orrs	r3, r0
 8002bc0:	4333      	orrs	r3, r6
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002bc2:	432b      	orrs	r3, r5
  hi2c->Instance->CR2 = tmpreg;
 8002bc4:	6053      	str	r3, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8002bc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bc8:	1a5b      	subs	r3, r3, r1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bce:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002bd2:	2b22      	cmp	r3, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002bd4:	6813      	ldr	r3, [r2, #0]
 8002bd6:	bf0c      	ite	eq
 8002bd8:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002bdc:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
 8002be0:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hi2c);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8002be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002bea:	06d0      	lsls	r0, r2, #27
 8002bec:	d5c9      	bpl.n	8002b82 <I2C_Master_ISR_DMA+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bee:	6823      	ldr	r3, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002bf0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002bf2:	481b      	ldr	r0, [pc, #108]	; (8002c60 <I2C_Master_ISR_DMA+0xf4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf4:	2110      	movs	r1, #16
 8002bf6:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bf8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002bfa:	4282      	cmp	r2, r0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bfc:	f041 0104 	orr.w	r1, r1, #4
 8002c00:	6461      	str	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002c02:	d029      	beq.n	8002c58 <I2C_Master_ISR_DMA+0xec>
 8002c04:	4917      	ldr	r1, [pc, #92]	; (8002c64 <I2C_Master_ISR_DMA+0xf8>)
      tmpisr |= I2C_IT_TCI;
 8002c06:	428a      	cmp	r2, r1
 8002c08:	bf14      	ite	ne
 8002c0a:	22f4      	movne	r2, #244	; 0xf4
 8002c0c:	2260      	moveq	r2, #96	; 0x60
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002c18:	bf44      	itt	mi
 8002c1a:	2200      	movmi	r2, #0
 8002c1c:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	07d7      	lsls	r7, r2, #31
 8002c22:	d4de      	bmi.n	8002be2 <I2C_Master_ISR_DMA+0x76>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	e7d9      	b.n	8002be2 <I2C_Master_ISR_DMA+0x76>
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8002c2e:	0688      	lsls	r0, r1, #26
 8002c30:	d5d7      	bpl.n	8002be2 <I2C_Master_ISR_DMA+0x76>
 8002c32:	0693      	lsls	r3, r2, #26
 8002c34:	d5d5      	bpl.n	8002be2 <I2C_Master_ISR_DMA+0x76>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7ff fd82 	bl	8002740 <I2C_ITMasterCplt>
 8002c3c:	e7d1      	b.n	8002be2 <I2C_Master_ISR_DMA+0x76>
  __HAL_LOCK(hi2c);
 8002c3e:	2002      	movs	r0, #2
}
 8002c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c42:	f44f 057f 	mov.w	r5, #16711680	; 0xff0000
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c46:	21ff      	movs	r1, #255	; 0xff
        xfermode = I2C_RELOAD_MODE;
 8002c48:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8002c4c:	e7b3      	b.n	8002bb6 <I2C_Master_ISR_DMA+0x4a>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c4e:	2140      	movs	r1, #64	; 0x40
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7ff f985 	bl	8001f60 <I2C_ITError>
 8002c56:	e7c4      	b.n	8002be2 <I2C_Master_ISR_DMA+0x76>
      tmpisr |= I2C_IT_TCI;
 8002c58:	2260      	movs	r2, #96	; 0x60
 8002c5a:	e7d8      	b.n	8002c0e <I2C_Master_ISR_DMA+0xa2>
 8002c5c:	fc009800 	.word	0xfc009800
 8002c60:	08002b6d 	.word	0x08002b6d
 8002c64:	08002505 	.word	0x08002505

08002c68 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d001      	beq.n	8002c76 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2002      	movs	r0, #2
 8002c74:	4770      	bx	lr
 8002c76:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8002c78:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002c7c:	2801      	cmp	r0, #1
 8002c7e:	d0f8      	beq.n	8002c72 <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8002c80:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8002c82:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c84:	2424      	movs	r4, #36	; 0x24
 8002c86:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002c8a:	6804      	ldr	r4, [r0, #0]
 8002c8c:	f024 0401 	bic.w	r4, r4, #1
 8002c90:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c92:	6804      	ldr	r4, [r0, #0]
 8002c94:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002c98:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c9a:	6804      	ldr	r4, [r0, #0]
 8002c9c:	4321      	orrs	r1, r4
 8002c9e:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002ca0:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8002ca2:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8002ca4:	f041 0101 	orr.w	r1, r1, #1
 8002ca8:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8002caa:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002cac:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002cb0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8002cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop

08002cbc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d001      	beq.n	8002cca <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	4770      	bx	lr
 8002cca:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8002ccc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002cd0:	2801      	cmp	r0, #1
 8002cd2:	d0f8      	beq.n	8002cc6 <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8002cd4:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8002cd6:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	2424      	movs	r4, #36	; 0x24
 8002cda:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002cde:	6804      	ldr	r4, [r0, #0]
 8002ce0:	f024 0401 	bic.w	r4, r4, #1
 8002ce4:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8002ce6:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002ce8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002cec:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002cf0:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002cf2:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8002cf4:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8002cf6:	f041 0101 	orr.w	r1, r1, #1
 8002cfa:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8002cfc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8002cfe:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8002d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002d0c:	4a02      	ldr	r2, [pc, #8]	; (8002d18 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002d0e:	6813      	ldr	r3, [r2, #0]
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4770      	bx	lr
 8002d18:	40007000 	.word	0x40007000

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d20:	6803      	ldr	r3, [r0, #0]
 8002d22:	07d9      	lsls	r1, r3, #31
{
 8002d24:	b083      	sub	sp, #12
 8002d26:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d28:	d543      	bpl.n	8002db2 <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d2a:	49c0      	ldr	r1, [pc, #768]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002d2c:	684a      	ldr	r2, [r1, #4]
 8002d2e:	f002 020c 	and.w	r2, r2, #12
 8002d32:	2a04      	cmp	r2, #4
 8002d34:	f000 8184 	beq.w	8003040 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d38:	684a      	ldr	r2, [r1, #4]
 8002d3a:	f002 020c 	and.w	r2, r2, #12
 8002d3e:	2a08      	cmp	r2, #8
 8002d40:	f000 817a 	beq.w	8003038 <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d44:	6863      	ldr	r3, [r4, #4]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4a:	f000 823d 	beq.w	80031c8 <HAL_RCC_OscConfig+0x4ac>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 81a1 	beq.w	8003096 <HAL_RCC_OscConfig+0x37a>
 8002d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d58:	f000 8297 	beq.w	800328a <HAL_RCC_OscConfig+0x56e>
 8002d5c:	4bb3      	ldr	r3, [pc, #716]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d6c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d6e:	4daf      	ldr	r5, [pc, #700]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002d70:	68a2      	ldr	r2, [r4, #8]
 8002d72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002d74:	f023 030f 	bic.w	r3, r3, #15
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fd ffce 	bl	8000d1c <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002d84:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	2601      	movs	r6, #1
 8002d88:	e005      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8a:	f7fd ffc7 	bl	8000d1c <HAL_GetTick>
 8002d8e:	1bc0      	subs	r0, r0, r7
 8002d90:	2864      	cmp	r0, #100	; 0x64
 8002d92:	f200 81b9 	bhi.w	8003108 <HAL_RCC_OscConfig+0x3ec>
 8002d96:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	682a      	ldr	r2, [r5, #0]
 8002d9c:	fa98 f3a8 	rbit	r3, r8
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa06 f303 	lsl.w	r3, r6, r3
 8002dac:	4213      	tst	r3, r2
 8002dae:	d0ec      	beq.n	8002d8a <HAL_RCC_OscConfig+0x6e>
 8002db0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	079f      	lsls	r7, r3, #30
 8002db4:	d542      	bpl.n	8002e3c <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002db6:	4a9d      	ldr	r2, [pc, #628]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002db8:	6851      	ldr	r1, [r2, #4]
 8002dba:	f011 0f0c 	tst.w	r1, #12
 8002dbe:	f000 80f7 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dc2:	6851      	ldr	r1, [r2, #4]
 8002dc4:	f001 010c 	and.w	r1, r1, #12
 8002dc8:	2908      	cmp	r1, #8
 8002dca:	f000 80ed 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dce:	6922      	ldr	r2, [r4, #16]
 8002dd0:	2a00      	cmp	r2, #0
 8002dd2:	f000 81d3 	beq.w	800317c <HAL_RCC_OscConfig+0x460>
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002de8:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8002dec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dee:	f7fd ff95 	bl	8000d1c <HAL_GetTick>
 8002df2:	f04f 0802 	mov.w	r8, #2
 8002df6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df8:	4d8c      	ldr	r5, [pc, #560]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002dfa:	e005      	b.n	8002e08 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7fd ff8e 	bl	8000d1c <HAL_GetTick>
 8002e00:	1bc0      	subs	r0, r0, r7
 8002e02:	2802      	cmp	r0, #2
 8002e04:	f200 8180 	bhi.w	8003108 <HAL_RCC_OscConfig+0x3ec>
 8002e08:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0c:	682a      	ldr	r2, [r5, #0]
 8002e0e:	fa98 f3a8 	rbit	r3, r8
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	fa06 f303 	lsl.w	r3, r6, r3
 8002e1e:	4213      	tst	r3, r2
 8002e20:	d0ec      	beq.n	8002dfc <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	6829      	ldr	r1, [r5, #0]
 8002e24:	22f8      	movs	r2, #248	; 0xf8
 8002e26:	fa92 f2a2 	rbit	r2, r2
 8002e2a:	6963      	ldr	r3, [r4, #20]
 8002e2c:	fab2 f282 	clz	r2, r2
 8002e30:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8002e34:	4093      	lsls	r3, r2
 8002e36:	430b      	orrs	r3, r1
 8002e38:	602b      	str	r3, [r5, #0]
 8002e3a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3c:	071d      	lsls	r5, r3, #28
 8002e3e:	d44f      	bmi.n	8002ee0 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	0758      	lsls	r0, r3, #29
 8002e42:	d57b      	bpl.n	8002f3c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e44:	4b79      	ldr	r3, [pc, #484]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	00d1      	lsls	r1, r2, #3
 8002e4a:	f100 8110 	bmi.w	800306e <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e54:	61da      	str	r2, [r3, #28]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e60:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4d72      	ldr	r5, [pc, #456]	; (8003030 <HAL_RCC_OscConfig+0x314>)
 8002e66:	682b      	ldr	r3, [r5, #0]
 8002e68:	05da      	lsls	r2, r3, #23
 8002e6a:	f140 813d 	bpl.w	80030e8 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6e:	68e3      	ldr	r3, [r4, #12]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	f000 81af 	beq.w	80031d4 <HAL_RCC_OscConfig+0x4b8>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8154 	beq.w	8003124 <HAL_RCC_OscConfig+0x408>
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	4b6b      	ldr	r3, [pc, #428]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	f000 820f 	beq.w	80032a4 <HAL_RCC_OscConfig+0x588>
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	621a      	str	r2, [r3, #32]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	f022 0204 	bic.w	r2, r2, #4
 8002e92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e94:	f7fd ff42 	bl	8000d1c <HAL_GetTick>
 8002e98:	f04f 0902 	mov.w	r9, #2
 8002e9c:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	4e63      	ldr	r6, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002ea0:	2501      	movs	r5, #1
 8002ea2:	e015      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1b4>
 8002ea4:	fa99 f3a9 	rbit	r3, r9
 8002ea8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002eaa:	fa99 f3a9 	rbit	r3, r9
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	fa05 f303 	lsl.w	r3, r5, r3
 8002eba:	4213      	tst	r3, r2
 8002ebc:	f040 8128 	bne.w	8003110 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7fd ff2c 	bl	8000d1c <HAL_GetTick>
 8002ec4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ec8:	1bc0      	subs	r0, r0, r7
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	f200 811c 	bhi.w	8003108 <HAL_RCC_OscConfig+0x3ec>
 8002ed0:	fa99 f3a9 	rbit	r3, r9
 8002ed4:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0e3      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x188>
 8002edc:	6a32      	ldr	r2, [r6, #32]
 8002ede:	e7e4      	b.n	8002eaa <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee0:	69a2      	ldr	r2, [r4, #24]
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	d07b      	beq.n	8002fde <HAL_RCC_OscConfig+0x2c2>
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8002eec:	4b51      	ldr	r3, [pc, #324]	; (8003034 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	4e4f      	ldr	r6, [pc, #316]	; (800302c <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 8002ef0:	fab1 f181 	clz	r1, r1
 8002ef4:	440b      	add	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef8:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8002efa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002efc:	f7fd ff0e 	bl	8000d1c <HAL_GetTick>
 8002f00:	f04f 0802 	mov.w	r8, #2
 8002f04:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e005      	b.n	8002f14 <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fd ff08 	bl	8000d1c <HAL_GetTick>
 8002f0c:	1bc0      	subs	r0, r0, r7
 8002f0e:	2802      	cmp	r0, #2
 8002f10:	f200 80fa 	bhi.w	8003108 <HAL_RCC_OscConfig+0x3ec>
 8002f14:	fa98 f3a8 	rbit	r3, r8
 8002f18:	fa98 f3a8 	rbit	r3, r8
 8002f1c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002f22:	fa98 f3a8 	rbit	r3, r8
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	fa05 f303 	lsl.w	r3, r5, r3
 8002f32:	4213      	tst	r3, r2
 8002f34:	d0e8      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1ec>
 8002f36:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	0758      	lsls	r0, r3, #29
 8002f3a:	d483      	bmi.n	8002e44 <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3c:	69e3      	ldr	r3, [r4, #28]
 8002f3e:	b37b      	cbz	r3, 8002fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f40:	4d3a      	ldr	r5, [pc, #232]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002f42:	686a      	ldr	r2, [r5, #4]
 8002f44:	f002 020c 	and.w	r2, r2, #12
 8002f48:	2a08      	cmp	r2, #8
 8002f4a:	d044      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f52:	f000 8145 	beq.w	80031e0 <HAL_RCC_OscConfig+0x4c4>
 8002f56:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fd fed6 	bl	8000d1c <HAL_GetTick>
 8002f70:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002f74:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f76:	2601      	movs	r6, #1
 8002f78:	e005      	b.n	8002f86 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fd fecf 	bl	8000d1c <HAL_GetTick>
 8002f7e:	1bc0      	subs	r0, r0, r7
 8002f80:	2802      	cmp	r0, #2
 8002f82:	f200 80c1 	bhi.w	8003108 <HAL_RCC_OscConfig+0x3ec>
 8002f86:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8a:	682a      	ldr	r2, [r5, #0]
 8002f8c:	fa94 f3a4 	rbit	r3, r4
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	fa06 f303 	lsl.w	r3, r6, r3
 8002f9c:	4213      	tst	r3, r2
 8002f9e:	d1ec      	bne.n	8002f7a <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002fa0:	2000      	movs	r0, #0
}
 8002fa2:	b003      	add	sp, #12
 8002fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fa8:	6852      	ldr	r2, [r2, #4]
 8002faa:	03d6      	lsls	r6, r2, #15
 8002fac:	f53f af0f 	bmi.w	8002dce <HAL_RCC_OscConfig+0xb2>
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	491d      	ldr	r1, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x310>)
 8002fb8:	6808      	ldr	r0, [r1, #0]
 8002fba:	fa92 f2a2 	rbit	r2, r2
 8002fbe:	fab2 f282 	clz	r2, r2
 8002fc2:	f002 021f 	and.w	r2, r2, #31
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	4202      	tst	r2, r0
 8002fce:	d051      	beq.n	8003074 <HAL_RCC_OscConfig+0x358>
 8002fd0:	6922      	ldr	r2, [r4, #16]
 8002fd2:	428a      	cmp	r2, r1
 8002fd4:	d04e      	beq.n	8003074 <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
}
 8002fd8:	b003      	add	sp, #12
 8002fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fde:	2501      	movs	r5, #1
 8002fe0:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8002fe4:	4b13      	ldr	r3, [pc, #76]	; (8003034 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe6:	4e11      	ldr	r6, [pc, #68]	; (800302c <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 8002fe8:	fab1 f181 	clz	r1, r1
 8002fec:	440b      	add	r3, r1
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f04f 0802 	mov.w	r8, #2
 8002ff4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ff6:	f7fd fe91 	bl	8000d1c <HAL_GetTick>
 8002ffa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	e004      	b.n	8003008 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7fd fe8d 	bl	8000d1c <HAL_GetTick>
 8003002:	1bc0      	subs	r0, r0, r7
 8003004:	2802      	cmp	r0, #2
 8003006:	d87f      	bhi.n	8003108 <HAL_RCC_OscConfig+0x3ec>
 8003008:	fa98 f3a8 	rbit	r3, r8
 800300c:	fa98 f3a8 	rbit	r3, r8
 8003010:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003016:	fa98 f3a8 	rbit	r3, r8
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	fa05 f303 	lsl.w	r3, r5, r3
 8003026:	4213      	tst	r3, r2
 8003028:	d1e9      	bne.n	8002ffe <HAL_RCC_OscConfig+0x2e2>
 800302a:	e784      	b.n	8002f36 <HAL_RCC_OscConfig+0x21a>
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
 8003034:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003038:	684a      	ldr	r2, [r1, #4]
 800303a:	03d2      	lsls	r2, r2, #15
 800303c:	f57f ae82 	bpl.w	8002d44 <HAL_RCC_OscConfig+0x28>
 8003040:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003044:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	499a      	ldr	r1, [pc, #616]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
 800304a:	6808      	ldr	r0, [r1, #0]
 800304c:	fa92 f2a2 	rbit	r2, r2
 8003050:	fab2 f282 	clz	r2, r2
 8003054:	f002 021f 	and.w	r2, r2, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f202 	lsl.w	r2, r1, r2
 800305e:	4202      	tst	r2, r0
 8003060:	f43f aea7 	beq.w	8002db2 <HAL_RCC_OscConfig+0x96>
 8003064:	6862      	ldr	r2, [r4, #4]
 8003066:	2a00      	cmp	r2, #0
 8003068:	f47f aea3 	bne.w	8002db2 <HAL_RCC_OscConfig+0x96>
 800306c:	e7b3      	b.n	8002fd6 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 800306e:	f04f 0800 	mov.w	r8, #0
 8003072:	e6f7      	b.n	8002e64 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4d8f      	ldr	r5, [pc, #572]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
 8003076:	21f8      	movs	r1, #248	; 0xf8
 8003078:	6828      	ldr	r0, [r5, #0]
 800307a:	fa91 f1a1 	rbit	r1, r1
 800307e:	6962      	ldr	r2, [r4, #20]
 8003080:	fab1 f181 	clz	r1, r1
 8003084:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8003088:	408a      	lsls	r2, r1
 800308a:	4302      	orrs	r2, r0
 800308c:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	071d      	lsls	r5, r3, #28
 8003090:	f57f aed6 	bpl.w	8002e40 <HAL_RCC_OscConfig+0x124>
 8003094:	e724      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003096:	4d87      	ldr	r5, [pc, #540]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
 8003098:	682b      	ldr	r3, [r5, #0]
 800309a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309e:	602b      	str	r3, [r5, #0]
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a6:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030aa:	68a2      	ldr	r2, [r4, #8]
 80030ac:	f023 030f 	bic.w	r3, r3, #15
 80030b0:	4313      	orrs	r3, r2
 80030b2:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 80030b4:	f7fd fe32 	bl	8000d1c <HAL_GetTick>
 80030b8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80030bc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	2601      	movs	r6, #1
 80030c0:	e004      	b.n	80030cc <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c2:	f7fd fe2b 	bl	8000d1c <HAL_GetTick>
 80030c6:	1bc0      	subs	r0, r0, r7
 80030c8:	2864      	cmp	r0, #100	; 0x64
 80030ca:	d81d      	bhi.n	8003108 <HAL_RCC_OscConfig+0x3ec>
 80030cc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d0:	682a      	ldr	r2, [r5, #0]
 80030d2:	fa98 f3a8 	rbit	r3, r8
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	fa06 f303 	lsl.w	r3, r6, r3
 80030e2:	4213      	tst	r3, r2
 80030e4:	d1ed      	bne.n	80030c2 <HAL_RCC_OscConfig+0x3a6>
 80030e6:	e663      	b.n	8002db0 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80030f0:	f7fd fe14 	bl	8000d1c <HAL_GetTick>
 80030f4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	682b      	ldr	r3, [r5, #0]
 80030f8:	05db      	lsls	r3, r3, #23
 80030fa:	f53f aeb8 	bmi.w	8002e6e <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fe:	f7fd fe0d 	bl	8000d1c <HAL_GetTick>
 8003102:	1b80      	subs	r0, r0, r6
 8003104:	2864      	cmp	r0, #100	; 0x64
 8003106:	d9f6      	bls.n	80030f6 <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 8003108:	2003      	movs	r0, #3
}
 800310a:	b003      	add	sp, #12
 800310c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 8003110:	f1b8 0f00 	cmp.w	r8, #0
 8003114:	f43f af12 	beq.w	8002f3c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003118:	4a66      	ldr	r2, [pc, #408]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
 800311a:	69d3      	ldr	r3, [r2, #28]
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	e70b      	b.n	8002f3c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003124:	4d63      	ldr	r5, [pc, #396]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
 8003126:	6a2b      	ldr	r3, [r5, #32]
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	622b      	str	r3, [r5, #32]
 800312e:	6a2b      	ldr	r3, [r5, #32]
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003136:	f7fd fdf1 	bl	8000d1c <HAL_GetTick>
 800313a:	f04f 0902 	mov.w	r9, #2
 800313e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003140:	2601      	movs	r6, #1
 8003142:	e013      	b.n	800316c <HAL_RCC_OscConfig+0x450>
 8003144:	fa99 f3a9 	rbit	r3, r9
 8003148:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800314a:	fa99 f3a9 	rbit	r3, r9
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	fa06 f303 	lsl.w	r3, r6, r3
 800315a:	4213      	tst	r3, r2
 800315c:	d0d8      	beq.n	8003110 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fd fddd 	bl	8000d1c <HAL_GetTick>
 8003162:	f241 3388 	movw	r3, #5000	; 0x1388
 8003166:	1bc0      	subs	r0, r0, r7
 8003168:	4298      	cmp	r0, r3
 800316a:	d8cd      	bhi.n	8003108 <HAL_RCC_OscConfig+0x3ec>
 800316c:	fa99 f3a9 	rbit	r3, r9
 8003170:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0e5      	beq.n	8003144 <HAL_RCC_OscConfig+0x428>
 8003178:	6a2a      	ldr	r2, [r5, #32]
 800317a:	e7e6      	b.n	800314a <HAL_RCC_OscConfig+0x42e>
 800317c:	2501      	movs	r5, #1
 800317e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800318a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f04f 0802 	mov.w	r8, #2
 8003194:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003196:	f7fd fdc1 	bl	8000d1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4e46      	ldr	r6, [pc, #280]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 800319c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	e004      	b.n	80031aa <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a0:	f7fd fdbc 	bl	8000d1c <HAL_GetTick>
 80031a4:	1bc0      	subs	r0, r0, r7
 80031a6:	2802      	cmp	r0, #2
 80031a8:	d8ae      	bhi.n	8003108 <HAL_RCC_OscConfig+0x3ec>
 80031aa:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	6832      	ldr	r2, [r6, #0]
 80031b0:	fa98 f3a8 	rbit	r3, r8
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa05 f303 	lsl.w	r3, r5, r3
 80031c0:	4213      	tst	r3, r2
 80031c2:	d1ed      	bne.n	80031a0 <HAL_RCC_OscConfig+0x484>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	e639      	b.n	8002e3c <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c8:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e5cc      	b.n	8002d6e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d4:	4a37      	ldr	r2, [pc, #220]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
 80031d6:	6a13      	ldr	r3, [r2, #32]
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6213      	str	r3, [r2, #32]
 80031de:	e659      	b.n	8002e94 <HAL_RCC_OscConfig+0x178>
 80031e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031f6:	f7fd fd91 	bl	8000d1c <HAL_GetTick>
 80031fa:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80031fe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	2601      	movs	r6, #1
 8003202:	e005      	b.n	8003210 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003204:	f7fd fd8a 	bl	8000d1c <HAL_GetTick>
 8003208:	1bc0      	subs	r0, r0, r7
 800320a:	2802      	cmp	r0, #2
 800320c:	f63f af7c 	bhi.w	8003108 <HAL_RCC_OscConfig+0x3ec>
 8003210:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003214:	682a      	ldr	r2, [r5, #0]
 8003216:	fa98 f3a8 	rbit	r3, r8
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	fa06 f303 	lsl.w	r3, r6, r3
 8003226:	4213      	tst	r3, r2
 8003228:	d1ec      	bne.n	8003204 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322a:	686a      	ldr	r2, [r5, #4]
 800322c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800322e:	6a21      	ldr	r1, [r4, #32]
 8003230:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003234:	430b      	orrs	r3, r1
 8003236:	4313      	orrs	r3, r2
 8003238:	606b      	str	r3, [r5, #4]
 800323a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800323e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800324a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003254:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003256:	f7fd fd61 	bl	8000d1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800325a:	4e16      	ldr	r6, [pc, #88]	; (80032b4 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 800325c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800325e:	2501      	movs	r5, #1
 8003260:	e005      	b.n	800326e <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fd fd5b 	bl	8000d1c <HAL_GetTick>
 8003266:	1bc0      	subs	r0, r0, r7
 8003268:	2802      	cmp	r0, #2
 800326a:	f63f af4d 	bhi.w	8003108 <HAL_RCC_OscConfig+0x3ec>
 800326e:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003272:	6832      	ldr	r2, [r6, #0]
 8003274:	fa94 f3a4 	rbit	r3, r4
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa05 f303 	lsl.w	r3, r5, r3
 8003284:	4213      	tst	r3, r2
 8003286:	d0ec      	beq.n	8003262 <HAL_RCC_OscConfig+0x546>
 8003288:	e68a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800328e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e564      	b.n	8002d6e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a4:	f042 0204 	orr.w	r2, r2, #4
 80032a8:	621a      	str	r2, [r3, #32]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	621a      	str	r2, [r3, #32]
 80032b2:	e5ef      	b.n	8002e94 <HAL_RCC_OscConfig+0x178>
 80032b4:	40021000 	.word	0x40021000

080032b8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80032b8:	4a70      	ldr	r2, [pc, #448]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	6813      	ldr	r3, [r2, #0]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	428b      	cmp	r3, r1
 80032c2:	d20b      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x24>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c4:	6813      	ldr	r3, [r2, #0]
 80032c6:	f023 0307 	bic.w	r3, r3, #7
 80032ca:	430b      	orrs	r3, r1
 80032cc:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032ce:	6813      	ldr	r3, [r2, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4299      	cmp	r1, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x24>
    {
      return HAL_ERROR;
 80032d8:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80032da:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	6803      	ldr	r3, [r0, #0]
{
 80032de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e2:	079e      	lsls	r6, r3, #30
 80032e4:	d506      	bpl.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e6:	4c66      	ldr	r4, [pc, #408]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 80032e8:	6885      	ldr	r5, [r0, #8]
 80032ea:	6862      	ldr	r2, [r4, #4]
 80032ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032f0:	432a      	orrs	r2, r5
 80032f2:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f4:	07dd      	lsls	r5, r3, #31
 80032f6:	4606      	mov	r6, r0
 80032f8:	460c      	mov	r4, r1
 80032fa:	d531      	bpl.n	8003360 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fc:	6842      	ldr	r2, [r0, #4]
 80032fe:	2a01      	cmp	r2, #1
 8003300:	f000 80aa 	beq.w	8003458 <HAL_RCC_ClockConfig+0x1a0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003304:	2a02      	cmp	r2, #2
 8003306:	bf0c      	ite	eq
 8003308:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800330c:	2302      	movne	r3, #2
 800330e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	495b      	ldr	r1, [pc, #364]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	6808      	ldr	r0, [r1, #0]
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	4203      	tst	r3, r0
 800332a:	d029      	beq.n	8003380 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332c:	4d54      	ldr	r5, [pc, #336]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	686b      	ldr	r3, [r5, #4]
 8003330:	f023 0303 	bic.w	r3, r3, #3
 8003334:	4313      	orrs	r3, r2
 8003336:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003338:	f7fd fcf0 	bl	8000d1c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333c:	6873      	ldr	r3, [r6, #4]
 800333e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8003340:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003342:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	d023      	beq.n	8003390 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003348:	2b02      	cmp	r3, #2
 800334a:	d105      	bne.n	8003358 <HAL_RCC_ClockConfig+0xa0>
 800334c:	e07b      	b.n	8003446 <HAL_RCC_ClockConfig+0x18e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334e:	f7fd fce5 	bl	8000d1c <HAL_GetTick>
 8003352:	1bc0      	subs	r0, r0, r7
 8003354:	4540      	cmp	r0, r8
 8003356:	d87c      	bhi.n	8003452 <HAL_RCC_ClockConfig+0x19a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003358:	686b      	ldr	r3, [r5, #4]
 800335a:	f013 0f0c 	tst.w	r3, #12
 800335e:	d1f6      	bne.n	800334e <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003360:	4a46      	ldr	r2, [pc, #280]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	429c      	cmp	r4, r3
 800336a:	d217      	bcs.n	800339c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336c:	6813      	ldr	r3, [r2, #0]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	4323      	orrs	r3, r4
 8003374:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	429c      	cmp	r4, r3
 800337e:	d00d      	beq.n	800339c <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 8003380:	2001      	movs	r0, #1
 8003382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003386:	f7fd fcc9 	bl	8000d1c <HAL_GetTick>
 800338a:	1bc0      	subs	r0, r0, r7
 800338c:	4540      	cmp	r0, r8
 800338e:	d860      	bhi.n	8003452 <HAL_RCC_ClockConfig+0x19a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003390:	686b      	ldr	r3, [r5, #4]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d1f5      	bne.n	8003386 <HAL_RCC_ClockConfig+0xce>
 800339a:	e7e1      	b.n	8003360 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	6833      	ldr	r3, [r6, #0]
 800339e:	0758      	lsls	r0, r3, #29
 80033a0:	d506      	bpl.n	80033b0 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a2:	4937      	ldr	r1, [pc, #220]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	68f0      	ldr	r0, [r6, #12]
 80033a6:	684a      	ldr	r2, [r1, #4]
 80033a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ac:	4302      	orrs	r2, r0
 80033ae:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	0719      	lsls	r1, r3, #28
 80033b2:	d507      	bpl.n	80033c4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b4:	4a32      	ldr	r2, [pc, #200]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 80033b6:	6931      	ldr	r1, [r6, #16]
 80033b8:	6853      	ldr	r3, [r2, #4]
 80033ba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80033be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033c2:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80033c4:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 80033c6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c8:	f002 010c 	and.w	r1, r2, #12
 80033cc:	2908      	cmp	r1, #8
 80033ce:	d016      	beq.n	80033fe <HAL_RCC_ClockConfig+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d0:	492c      	ldr	r1, [pc, #176]	; (8003484 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033d2:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 80033d4:	22f0      	movs	r2, #240	; 0xf0
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	fa92 f2a2 	rbit	r2, r2
 80033dc:	fab2 f282 	clz	r2, r2
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e4:	40d3      	lsrs	r3, r2
 80033e6:	4828      	ldr	r0, [pc, #160]	; (8003488 <HAL_RCC_ClockConfig+0x1d0>)
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_RCC_ClockConfig+0x1d4>)
 80033ea:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 80033ec:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033ee:	fa21 f303 	lsr.w	r3, r1, r3
 80033f2:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80033f4:	f7fd fc62 	bl	8000cbc <HAL_InitTick>
  return HAL_OK;
 80033f8:	2000      	movs	r0, #0
}
 80033fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033fe:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8003402:	fa91 f1a1 	rbit	r1, r1
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003406:	fab1 f181 	clz	r1, r1
 800340a:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 800340e:	40c8      	lsrs	r0, r1
 8003410:	4c1f      	ldr	r4, [pc, #124]	; (8003490 <HAL_RCC_ClockConfig+0x1d8>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003412:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003414:	5c23      	ldrb	r3, [r4, r0]
 8003416:	200f      	movs	r0, #15
 8003418:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800341c:	fab0 f080 	clz	r0, r0
 8003420:	f001 010f 	and.w	r1, r1, #15
 8003424:	40c1      	lsrs	r1, r0
 8003426:	481b      	ldr	r0, [pc, #108]	; (8003494 <HAL_RCC_ClockConfig+0x1dc>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003428:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800342a:	5c40      	ldrb	r0, [r0, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800342c:	bf4a      	itet	mi
 800342e:	4915      	ldrmi	r1, [pc, #84]	; (8003484 <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003430:	4919      	ldrpl	r1, [pc, #100]	; (8003498 <HAL_RCC_ClockConfig+0x1e0>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003432:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003436:	fb01 f103 	mul.w	r1, r1, r3
 800343a:	e7ca      	b.n	80033d2 <HAL_RCC_ClockConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fd fc6e 	bl	8000d1c <HAL_GetTick>
 8003440:	1bc0      	subs	r0, r0, r7
 8003442:	4540      	cmp	r0, r8
 8003444:	d805      	bhi.n	8003452 <HAL_RCC_ClockConfig+0x19a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003446:	686b      	ldr	r3, [r5, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d1f5      	bne.n	800343c <HAL_RCC_ClockConfig+0x184>
 8003450:	e786      	b.n	8003360 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 8003452:	2003      	movs	r0, #3
 8003454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003460:	4907      	ldr	r1, [pc, #28]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003462:	6809      	ldr	r1, [r1, #0]
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	420b      	tst	r3, r1
 8003476:	f47f af59 	bne.w	800332c <HAL_RCC_ClockConfig+0x74>
 800347a:	e781      	b.n	8003380 <HAL_RCC_ClockConfig+0xc8>
 800347c:	40022000 	.word	0x40022000
 8003480:	40021000 	.word	0x40021000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	0800738c 	.word	0x0800738c
 800348c:	20000000 	.word	0x20000000
 8003490:	08007340 	.word	0x08007340
 8003494:	08007350 	.word	0x08007350
 8003498:	003d0900 	.word	0x003d0900

0800349c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x54>)
 800349e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80034a0:	f003 010c 	and.w	r1, r3, #12
 80034a4:	2908      	cmp	r1, #8
 80034a6:	d121      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x50>
 80034a8:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80034ac:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034b0:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80034b4:	fab1 f181 	clz	r1, r1
 80034b8:	fa20 f101 	lsr.w	r1, r0, r1
 80034bc:	480d      	ldr	r0, [pc, #52]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034c0:	5c40      	ldrb	r0, [r0, r1]
 80034c2:	210f      	movs	r1, #15
 80034c4:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034c8:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034ca:	fab1 f181 	clz	r1, r1
 80034ce:	f002 020f 	and.w	r2, r2, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80034d2:	bf4c      	ite	mi
 80034d4:	4b08      	ldrmi	r3, [pc, #32]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80034d6:	4b09      	ldrpl	r3, [pc, #36]	; (80034fc <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034d8:	fa22 f201 	lsr.w	r2, r2, r1
 80034dc:	4908      	ldr	r1, [pc, #32]	; (8003500 <HAL_RCC_GetSysClockFreq+0x64>)
 80034de:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80034e0:	bf48      	it	mi
 80034e2:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80034e6:	fb03 f000 	mul.w	r0, r3, r0
 80034ea:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034ee:	4770      	bx	lr
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08007340 	.word	0x08007340
 80034f8:	007a1200 	.word	0x007a1200
 80034fc:	003d0900 	.word	0x003d0900
 8003500:	08007350 	.word	0x08007350

08003504 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003504:	4b01      	ldr	r3, [pc, #4]	; (800350c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000000 	.word	0x20000000

08003510 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003512:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	fa92 f2a2 	rbit	r2, r2
 800351c:	fab2 f282 	clz	r2, r2
 8003520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003524:	40d3      	lsrs	r3, r2
 8003526:	4904      	ldr	r1, [pc, #16]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	6810      	ldr	r0, [r2, #0]
}    
 800352e:	40d8      	lsrs	r0, r3
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	0800739c 	.word	0x0800739c
 800353c:	20000000 	.word	0x20000000

08003540 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003542:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	fa92 f2a2 	rbit	r2, r2
 800354c:	fab2 f282 	clz	r2, r2
 8003550:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003554:	40d3      	lsrs	r3, r2
 8003556:	4904      	ldr	r1, [pc, #16]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	6810      	ldr	r0, [r2, #0]
} 
 800355e:	40d8      	lsrs	r0, r3
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	0800739c 	.word	0x0800739c
 800356c:	20000000 	.word	0x20000000

08003570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003574:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003576:	6800      	ldr	r0, [r0, #0]
 8003578:	03c5      	lsls	r5, r0, #15
{
 800357a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800357c:	d538      	bpl.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357e:	4b5a      	ldr	r3, [pc, #360]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	00d1      	lsls	r1, r2, #3
 8003584:	d567      	bpl.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003586:	4d59      	ldr	r5, [pc, #356]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 800358c:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	d570      	bpl.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003592:	4d55      	ldr	r5, [pc, #340]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003594:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003596:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800359a:	d01f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800359c:	6861      	ldr	r1, [r4, #4]
 800359e:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01b      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035a6:	6a29      	ldr	r1, [r5, #32]
 80035a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ac:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80035b0:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035b4:	4f4e      	ldr	r7, [pc, #312]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	443a      	add	r2, r7
 80035bc:	0092      	lsls	r2, r2, #2
 80035be:	f04f 0e01 	mov.w	lr, #1
 80035c2:	f8c2 e000 	str.w	lr, [r2]
 80035c6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	443b      	add	r3, r7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035d4:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d6:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80035d8:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035da:	d461      	bmi.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80035dc:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035de:	4a42      	ldr	r2, [pc, #264]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80035e0:	6a13      	ldr	r3, [r2, #32]
 80035e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ea:	2e00      	cmp	r6, #0
 80035ec:	d153      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x126>
 80035ee:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f0:	07c5      	lsls	r5, r0, #31
 80035f2:	d506      	bpl.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f4:	4a3c      	ldr	r2, [pc, #240]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80035f6:	68a1      	ldr	r1, [r4, #8]
 80035f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	430b      	orrs	r3, r1
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003602:	0681      	lsls	r1, r0, #26
 8003604:	d506      	bpl.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003606:	4a38      	ldr	r2, [pc, #224]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003608:	68e1      	ldr	r1, [r4, #12]
 800360a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800360c:	f023 0310 	bic.w	r3, r3, #16
 8003610:	430b      	orrs	r3, r1
 8003612:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003614:	0602      	lsls	r2, r0, #24
 8003616:	d506      	bpl.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003618:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800361a:	6921      	ldr	r1, [r4, #16]
 800361c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800361e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003622:	430b      	orrs	r3, r1
 8003624:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003626:	04c3      	lsls	r3, r0, #19
 8003628:	d40d      	bmi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800362a:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800362e:	d007      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003630:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003632:	69a1      	ldr	r1, [r4, #24]
 8003634:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800363a:	430b      	orrs	r3, r1
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800363e:	2000      	movs	r0, #0
}
 8003640:	b003      	add	sp, #12
 8003642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003646:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003648:	6961      	ldr	r1, [r4, #20]
 800364a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800364c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003650:	430b      	orrs	r3, r1
 8003652:	6313      	str	r3, [r2, #48]	; 0x30
 8003654:	e7e9      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4d24      	ldr	r5, [pc, #144]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800365e:	61da      	str	r2, [r3, #28]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	682b      	ldr	r3, [r5, #0]
 800366c:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 800366e:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	d48e      	bmi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800367c:	f7fd fb4e 	bl	8000d1c <HAL_GetTick>
 8003680:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	682b      	ldr	r3, [r5, #0]
 8003684:	05db      	lsls	r3, r3, #23
 8003686:	d484      	bmi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fd fb48 	bl	8000d1c <HAL_GetTick>
 800368c:	1bc0      	subs	r0, r0, r7
 800368e:	2864      	cmp	r0, #100	; 0x64
 8003690:	d9f7      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8003692:	2003      	movs	r0, #3
 8003694:	e7d4      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	69d3      	ldr	r3, [r2, #28]
 8003698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369c:	61d3      	str	r3, [r2, #28]
 800369e:	e7a6      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 80036a2:	f7fd fb3b 	bl	8000d1c <HAL_GetTick>
 80036a6:	f04f 0902 	mov.w	r9, #2
 80036aa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e014      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036ae:	fa99 f3a9 	rbit	r3, r9
 80036b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80036b4:	fa99 f3a9 	rbit	r3, r9
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa07 f303 	lsl.w	r3, r7, r3
 80036c4:	4213      	tst	r3, r2
 80036c6:	d189      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fd fb28 	bl	8000d1c <HAL_GetTick>
 80036cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80036d0:	eba0 0008 	sub.w	r0, r0, r8
 80036d4:	4298      	cmp	r0, r3
 80036d6:	d8dc      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80036d8:	fa99 f3a9 	rbit	r3, r9
 80036dc:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0e4      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80036e4:	6a2a      	ldr	r2, [r5, #32]
 80036e6:	e7e5      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	10908100 	.word	0x10908100

080036f4 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d067      	beq.n	80037c8 <HAL_RTC_Init+0xd4>
{
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80036fa:	7f43      	ldrb	r3, [r0, #29]
 80036fc:	4604      	mov	r4, r0
 80036fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04a      	beq.n	800379c <HAL_RTC_Init+0xa8>
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800370a:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800370c:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800370e:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003710:	6259      	str	r1, [r3, #36]	; 0x24
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	0655      	lsls	r5, r2, #25
 8003718:	d529      	bpl.n	800376e <HAL_RTC_Init+0x7a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800371a:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800371c:	6862      	ldr	r2, [r4, #4]
 800371e:	6927      	ldr	r7, [r4, #16]
 8003720:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003722:	68a0      	ldr	r0, [r4, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003724:	68e5      	ldr	r5, [r4, #12]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003726:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800372a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800372e:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003730:	6899      	ldr	r1, [r3, #8]
 8003732:	433a      	orrs	r2, r7
 8003734:	4332      	orrs	r2, r6
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800373a:	611d      	str	r5, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003742:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	0692      	lsls	r2, r2, #26
 8003750:	d528      	bpl.n	80037a4 <HAL_RTC_Init+0xb0>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003752:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003754:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003756:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800375a:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800375c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800375e:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003760:	4302      	orrs	r2, r0
    hrtc->State = HAL_RTC_STATE_READY;
 8003762:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    return HAL_OK;
 8003766:	2000      	movs	r0, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003768:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800376a:	7761      	strb	r1, [r4, #29]
    return HAL_OK;
 800376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800376e:	f04f 32ff 	mov.w	r2, #4294967295
 8003772:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 8003774:	f7fd fad2 	bl	8000d1c <HAL_GetTick>
 8003778:	4605      	mov	r5, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	0650      	lsls	r0, r2, #25
 8003780:	d4cb      	bmi.n	800371a <HAL_RTC_Init+0x26>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003782:	f7fd facb 	bl	8000d1c <HAL_GetTick>
 8003786:	1b40      	subs	r0, r0, r5
 8003788:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800378c:	d9f5      	bls.n	800377a <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800378e:	6822      	ldr	r2, [r4, #0]
 8003790:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003792:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003794:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003796:	2001      	movs	r0, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003798:	7763      	strb	r3, [r4, #29]
}
 800379a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800379c:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800379e:	f002 f921 	bl	80059e4 <HAL_RTC_MspInit>
 80037a2:	e7b0      	b.n	8003706 <HAL_RTC_Init+0x12>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037aa:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 80037ac:	f7fd fab6 	bl	8000d1c <HAL_GetTick>
 80037b0:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	0691      	lsls	r1, r2, #26
 80037b8:	d4cb      	bmi.n	8003752 <HAL_RTC_Init+0x5e>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80037ba:	f7fd faaf 	bl	8000d1c <HAL_GetTick>
 80037be:	1b40      	subs	r0, r0, r5
 80037c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037c4:	d9f5      	bls.n	80037b2 <HAL_RTC_Init+0xbe>
 80037c6:	e7e2      	b.n	800378e <HAL_RTC_Init+0x9a>
     return HAL_ERROR;
 80037c8:	2001      	movs	r0, #1
 80037ca:	4770      	bx	lr

080037cc <HAL_RTC_SetTime>:
{
 80037cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 80037d0:	7f03      	ldrb	r3, [r0, #28]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d078      	beq.n	80038c8 <HAL_RTC_SetTime+0xfc>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037d6:	2302      	movs	r3, #2
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80037d8:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037da:	7743      	strb	r3, [r0, #29]
 80037dc:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80037de:	2101      	movs	r1, #1
 80037e0:	4605      	mov	r5, r0
 80037e2:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80037e4:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 80037e6:	2a00      	cmp	r2, #0
 80037e8:	d035      	beq.n	8003856 <HAL_RTC_SetTime+0x8a>
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037ea:	7861      	ldrb	r1, [r4, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037ec:	7822      	ldrb	r2, [r4, #0]
              ((uint32_t)sTime->Seconds) | \
 80037ee:	78a3      	ldrb	r3, [r4, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80037f0:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80037f4:	bf14      	ite	ne
 80037f6:	78e7      	ldrbne	r7, [r4, #3]
      sTime->TimeFormat = 0x00U;
 80037f8:	70e7      	strbeq	r7, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037fa:	ea4f 2101 	mov.w	r1, r1, lsl #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037fe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003802:	bf18      	it	ne
 8003804:	043f      	lslne	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003806:	4319      	orrs	r1, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003808:	430f      	orrs	r7, r1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800380a:	22ca      	movs	r2, #202	; 0xca
 800380c:	2353      	movs	r3, #83	; 0x53
 800380e:	6272      	str	r2, [r6, #36]	; 0x24
 8003810:	6273      	str	r3, [r6, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003812:	68f3      	ldr	r3, [r6, #12]
 8003814:	065a      	lsls	r2, r3, #25
 8003816:	d55a      	bpl.n	80038ce <HAL_RTC_SetTime+0x102>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003818:	f007 377f 	and.w	r7, r7, #2139062143	; 0x7f7f7f7f
 800381c:	f027 47fe 	bic.w	r7, r7, #2130706432	; 0x7f000000
 8003820:	6037      	str	r7, [r6, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003822:	68b2      	ldr	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003824:	68e3      	ldr	r3, [r4, #12]
 8003826:	6921      	ldr	r1, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800382c:	60b2      	str	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800382e:	68b2      	ldr	r2, [r6, #8]
 8003830:	430b      	orrs	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	60b3      	str	r3, [r6, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003836:	68f3      	ldr	r3, [r6, #12]
 8003838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383c:	60f3      	str	r3, [r6, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800383e:	68b3      	ldr	r3, [r6, #8]
 8003840:	069b      	lsls	r3, r3, #26
 8003842:	d560      	bpl.n	8003906 <HAL_RTC_SetTime+0x13a>
   __HAL_UNLOCK(hrtc); 
 8003844:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003846:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8003848:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800384a:	6271      	str	r1, [r6, #36]	; 0x24
   return HAL_OK;
 800384c:	4618      	mov	r0, r3
   hrtc->State = HAL_RTC_STATE_READY;
 800384e:	776a      	strb	r2, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 8003850:	772b      	strb	r3, [r5, #28]
   return HAL_OK;
 8003852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003856:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 800385a:	bf18      	it	ne
 800385c:	78e7      	ldrbne	r7, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800385e:	7821      	ldrb	r1, [r4, #0]
      sTime->TimeFormat = 0x00U;
 8003860:	bf0c      	ite	eq
 8003862:	70e7      	strbeq	r7, [r4, #3]
 8003864:	043f      	lslne	r7, r7, #16
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  
  while(Value >= 10U)
 8003866:	2909      	cmp	r1, #9
 8003868:	f04f 0000 	mov.w	r0, #0
 800386c:	d907      	bls.n	800387e <HAL_RTC_SetTime+0xb2>
  {
    bcdhigh++;
    Value -= 10U;
 800386e:	390a      	subs	r1, #10
 8003870:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 8003872:	2909      	cmp	r1, #9
    bcdhigh++;
 8003874:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8003878:	d8f9      	bhi.n	800386e <HAL_RTC_SetTime+0xa2>
 800387a:	0100      	lsls	r0, r0, #4
 800387c:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800387e:	7863      	ldrb	r3, [r4, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003880:	4301      	orrs	r1, r0
  while(Value >= 10U)
 8003882:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003884:	ea4f 4001 	mov.w	r0, r1, lsl #16
  while(Value >= 10U)
 8003888:	d958      	bls.n	800393c <HAL_RTC_SetTime+0x170>
 800388a:	2100      	movs	r1, #0
    Value -= 10U;
 800388c:	3b0a      	subs	r3, #10
 800388e:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003890:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003892:	f101 0101 	add.w	r1, r1, #1
  while(Value >= 10U)
 8003896:	d8f9      	bhi.n	800388c <HAL_RTC_SetTime+0xc0>
 8003898:	0109      	lsls	r1, r1, #4
 800389a:	fa5f fe81 	uxtb.w	lr, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800389e:	78a1      	ldrb	r1, [r4, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80038a0:	ea43 030e 	orr.w	r3, r3, lr
  while(Value >= 10U)
 80038a4:	2909      	cmp	r1, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80038a6:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 80038aa:	d94a      	bls.n	8003942 <HAL_RTC_SetTime+0x176>
    Value -= 10U;
 80038ac:	390a      	subs	r1, #10
 80038ae:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 80038b0:	2909      	cmp	r1, #9
    bcdhigh++;
 80038b2:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 80038b6:	d8f9      	bhi.n	80038ac <HAL_RTC_SetTime+0xe0>
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038bc:	4307      	orrs	r7, r0
 80038be:	433b      	orrs	r3, r7
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80038c0:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038c2:	ea43 0701 	orr.w	r7, r3, r1
 80038c6:	e7a0      	b.n	800380a <HAL_RTC_SetTime+0x3e>
  __HAL_LOCK(hrtc);
 80038c8:	2002      	movs	r0, #2
 80038ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80038d4:	f7fd fa22 	bl	8000d1c <HAL_GetTick>
 80038d8:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038da:	682e      	ldr	r6, [r5, #0]
 80038dc:	68f3      	ldr	r3, [r6, #12]
 80038de:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 80038e2:	d199      	bne.n	8003818 <HAL_RTC_SetTime+0x4c>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80038e4:	f7fd fa1a 	bl	8000d1c <HAL_GetTick>
 80038e8:	eba0 0009 	sub.w	r0, r0, r9
 80038ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80038f0:	d9f3      	bls.n	80038da <HAL_RTC_SetTime+0x10e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80038f2:	682a      	ldr	r2, [r5, #0]
 80038f4:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038f6:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80038f8:	6251      	str	r1, [r2, #36]	; 0x24
    return HAL_ERROR;
 80038fa:	2001      	movs	r0, #1
    __HAL_UNLOCK(hrtc);
 80038fc:	f885 801c 	strb.w	r8, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003900:	776b      	strb	r3, [r5, #29]
    return HAL_ERROR;
 8003902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003906:	68f3      	ldr	r3, [r6, #12]
 8003908:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800390c:	60f3      	str	r3, [r6, #12]
  tickstart = HAL_GetTick();
 800390e:	f7fd fa05 	bl	8000d1c <HAL_GetTick>
 8003912:	4607      	mov	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003914:	682e      	ldr	r6, [r5, #0]
 8003916:	68f4      	ldr	r4, [r6, #12]
 8003918:	f014 0420 	ands.w	r4, r4, #32
 800391c:	d192      	bne.n	8003844 <HAL_RTC_SetTime+0x78>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800391e:	f7fd f9fd 	bl	8000d1c <HAL_GetTick>
 8003922:	1bc0      	subs	r0, r0, r7
 8003924:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003928:	d9f4      	bls.n	8003914 <HAL_RTC_SetTime+0x148>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800392a:	682a      	ldr	r2, [r5, #0]
 800392c:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800392e:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003930:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 8003934:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003936:	776b      	strb	r3, [r5, #29]
}
 8003938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while(Value >= 10U)
 800393c:	f04f 0e00 	mov.w	lr, #0
 8003940:	e7ad      	b.n	800389e <HAL_RTC_SetTime+0xd2>
 8003942:	2200      	movs	r2, #0
 8003944:	e7ba      	b.n	80038bc <HAL_RTC_SetTime+0xf0>
 8003946:	bf00      	nop

08003948 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003948:	6803      	ldr	r3, [r0, #0]
{
 800394a:	b5f0      	push	{r4, r5, r6, r7, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800394c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800394e:	691c      	ldr	r4, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8003950:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003952:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8003954:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003958:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800395c:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800395e:	f3c3 2706 	ubfx	r7, r3, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003962:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003966:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8003968:	f000 0e40 	and.w	lr, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800396c:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003970:	608c      	str	r4, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8003972:	f881 e003 	strb.w	lr, [r1, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003976:	700e      	strb	r6, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8003978:	704f      	strb	r7, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800397a:	708b      	strb	r3, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 800397c:	b9ba      	cbnz	r2, 80039ae <HAL_RTC_GetTime+0x66>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800397e:	093d      	lsrs	r5, r7, #4
 8003980:	091c      	lsrs	r4, r3, #4
 8003982:	0936      	lsrs	r6, r6, #4
 8003984:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003988:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800398c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8003990:	f000 000f 	and.w	r0, r0, #15
 8003994:	f007 070f 	and.w	r7, r7, #15
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80039a0:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 80039a4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80039a8:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80039aa:	704d      	strb	r5, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80039ac:	708c      	strb	r4, [r1, #2]
}
 80039ae:	2000      	movs	r0, #0
 80039b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b2:	bf00      	nop

080039b4 <HAL_RTC_SetDate>:
{
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80039b6:	7f03      	ldrb	r3, [r0, #28]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d060      	beq.n	8003a7e <HAL_RTC_SetDate+0xca>
 80039bc:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80039be:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 80039c0:	2001      	movs	r0, #1
 80039c2:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80039c4:	7763      	strb	r3, [r4, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039c6:	b32a      	cbz	r2, 8003a14 <HAL_RTC_SetDate+0x60>
                  (((uint32_t)sDate->Month) << 8U) | \
 80039c8:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039ca:	78ca      	ldrb	r2, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 80039cc:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80039ce:	780d      	ldrb	r5, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 80039d0:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039d2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80039d6:	4318      	orrs	r0, r3
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039d8:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039dc:	6822      	ldr	r2, [r4, #0]
 80039de:	21ca      	movs	r1, #202	; 0xca
 80039e0:	2353      	movs	r3, #83	; 0x53
 80039e2:	6251      	str	r1, [r2, #36]	; 0x24
 80039e4:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039e6:	68d3      	ldr	r3, [r2, #12]
 80039e8:	0659      	lsls	r1, r3, #25
 80039ea:	d54a      	bpl.n	8003a82 <HAL_RTC_SetDate+0xce>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80039ec:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80039f0:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80039f4:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039f6:	68d3      	ldr	r3, [r2, #12]
 80039f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039fc:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039fe:	6893      	ldr	r3, [r2, #8]
 8003a00:	069b      	lsls	r3, r3, #26
 8003a02:	d55d      	bpl.n	8003ac0 <HAL_RTC_SetDate+0x10c>
    __HAL_UNLOCK(hrtc);
 8003a04:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003a06:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8003a08:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003a0a:	6250      	str	r0, [r2, #36]	; 0x24
    return HAL_OK;    
 8003a0c:	4618      	mov	r0, r3
    hrtc->State = HAL_RTC_STATE_READY ;
 8003a0e:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003a10:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8003a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a14:	784e      	ldrb	r6, [r1, #1]
 8003a16:	06f0      	lsls	r0, r6, #27
 8003a18:	d44c      	bmi.n	8003ab4 <HAL_RTC_SetDate+0x100>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a1a:	78cb      	ldrb	r3, [r1, #3]
  while(Value >= 10U)
 8003a1c:	2b09      	cmp	r3, #9
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	d907      	bls.n	8003a34 <HAL_RTC_SetDate+0x80>
    Value -= 10U;
 8003a24:	3b0a      	subs	r3, #10
 8003a26:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003a28:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003a2a:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8003a2e:	d8f9      	bhi.n	8003a24 <HAL_RTC_SetDate+0x70>
 8003a30:	0100      	lsls	r0, r0, #4
 8003a32:	b2c0      	uxtb	r0, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a34:	4303      	orrs	r3, r0
  while(Value >= 10U)
 8003a36:	2e09      	cmp	r6, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a38:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 8003a3c:	f04f 0500 	mov.w	r5, #0
 8003a40:	d908      	bls.n	8003a54 <HAL_RTC_SetDate+0xa0>
    Value -= 10U;
 8003a42:	f1a6 000a 	sub.w	r0, r6, #10
 8003a46:	b2c6      	uxtb	r6, r0
  while(Value >= 10U)
 8003a48:	2e09      	cmp	r6, #9
    bcdhigh++;
 8003a4a:	f105 0501 	add.w	r5, r5, #1
  while(Value >= 10U)
 8003a4e:	d8f8      	bhi.n	8003a42 <HAL_RTC_SetDate+0x8e>
 8003a50:	012d      	lsls	r5, r5, #4
 8003a52:	b2ed      	uxtb	r5, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a54:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a56:	4335      	orrs	r5, r6
  while(Value >= 10U)
 8003a58:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003a5a:	ea4f 2505 	mov.w	r5, r5, lsl #8
  while(Value >= 10U)
 8003a5e:	d949      	bls.n	8003af4 <HAL_RTC_SetDate+0x140>
    Value -= 10U;
 8003a60:	380a      	subs	r0, #10
 8003a62:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8003a64:	2809      	cmp	r0, #9
    bcdhigh++;
 8003a66:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8003a6a:	d8f9      	bhi.n	8003a60 <HAL_RTC_SetDate+0xac>
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13U));   
 8003a70:	7809      	ldrb	r1, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a72:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8003a76:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a78:	4310      	orrs	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a7a:	4305      	orrs	r5, r0
 8003a7c:	e7ae      	b.n	80039dc <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 8003a7e:	2002      	movs	r0, #2
 8003a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003a88:	f7fd f948 	bl	8000d1c <HAL_GetTick>
 8003a8c:	4607      	mov	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	68d6      	ldr	r6, [r2, #12]
 8003a92:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8003a96:	d1a9      	bne.n	80039ec <HAL_RTC_SetDate+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003a98:	f7fd f940 	bl	8000d1c <HAL_GetTick>
 8003a9c:	1bc0      	subs	r0, r0, r7
 8003a9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003aa2:	d9f4      	bls.n	8003a8e <HAL_RTC_SetDate+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003aa8:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003aaa:	6251      	str	r1, [r2, #36]	; 0x24
    return HAL_ERROR;
 8003aac:	2001      	movs	r0, #1
    __HAL_UNLOCK(hrtc);
 8003aae:	7726      	strb	r6, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ab0:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8003ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ab4:	f026 0510 	bic.w	r5, r6, #16
 8003ab8:	350a      	adds	r5, #10
 8003aba:	b2ee      	uxtb	r6, r5
 8003abc:	704e      	strb	r6, [r1, #1]
 8003abe:	e7ac      	b.n	8003a1a <HAL_RTC_SetDate+0x66>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ac0:	68d3      	ldr	r3, [r2, #12]
 8003ac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac6:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8003ac8:	f7fd f928 	bl	8000d1c <HAL_GetTick>
 8003acc:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	68d5      	ldr	r5, [r2, #12]
 8003ad2:	f015 0520 	ands.w	r5, r5, #32
 8003ad6:	d195      	bne.n	8003a04 <HAL_RTC_SetDate+0x50>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003ad8:	f7fd f920 	bl	8000d1c <HAL_GetTick>
 8003adc:	1b80      	subs	r0, r0, r6
 8003ade:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ae2:	d9f4      	bls.n	8003ace <HAL_RTC_SetDate+0x11a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003ae4:	6822      	ldr	r2, [r4, #0]
 8003ae6:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ae8:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003aea:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003aec:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 8003aee:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003af0:	7763      	strb	r3, [r4, #29]
}
 8003af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(Value >= 10U)
 8003af4:	2200      	movs	r2, #0
 8003af6:	e7bb      	b.n	8003a70 <HAL_RTC_SetDate+0xbc>

08003af8 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8003af8:	6803      	ldr	r3, [r0, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
{
 8003b04:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003b06:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003b0a:	b2dd      	uxtb	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003b0c:	f3c3 3742 	ubfx	r7, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003b10:	f004 061f 	and.w	r6, r4, #31
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003b14:	0c1b      	lsrs	r3, r3, #16
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003b16:	700f      	strb	r7, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003b18:	704e      	strb	r6, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003b1a:	70cb      	strb	r3, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003b1c:	708d      	strb	r5, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8003b1e:	b9ba      	cbnz	r2, 8003b50 <HAL_RTC_GetDate+0x58>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003b20:	0936      	lsrs	r6, r6, #4
 8003b22:	0928      	lsrs	r0, r5, #4
 8003b24:	091a      	lsrs	r2, r3, #4
 8003b26:	00b7      	lsls	r7, r6, #2
 8003b28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8003b2c:	f004 040f 	and.w	r4, r4, #15
 8003b30:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003b34:	443e      	add	r6, r7
 8003b36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8003b42:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8003b46:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8003b4a:	7088      	strb	r0, [r1, #2]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b4c:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b4e:	70cb      	strb	r3, [r1, #3]
}
 8003b50:	2000      	movs	r0, #0
 8003b52:	bcf0      	pop	{r4, r5, r6, r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop

08003b58 <RTC_EnterInitMode>:
{
 8003b58:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b5a:	6803      	ldr	r3, [r0, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	0652      	lsls	r2, r2, #25
 8003b60:	d501      	bpl.n	8003b66 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8003b62:	2000      	movs	r0, #0
 8003b64:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b66:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8003b6e:	f7fd f8d5 	bl	8000d1c <HAL_GetTick>
 8003b72:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	065b      	lsls	r3, r3, #25
 8003b7a:	d4f2      	bmi.n	8003b62 <RTC_EnterInitMode+0xa>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003b7c:	f7fd f8ce 	bl	8000d1c <HAL_GetTick>
 8003b80:	1b40      	subs	r0, r0, r5
 8003b82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b86:	d9f5      	bls.n	8003b74 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003b88:	2003      	movs	r0, #3
}
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}

08003b8c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b90:	7f03      	ldrb	r3, [r0, #28]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d058      	beq.n	8003c48 <HAL_RTCEx_SetWakeUpTimer_IT+0xbc>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b96:	6803      	ldr	r3, [r0, #0]
 8003b98:	4605      	mov	r5, r0
 8003b9a:	4617      	mov	r7, r2
 8003b9c:	4688      	mov	r8, r1
 8003b9e:	2253      	movs	r2, #83	; 0x53
 8003ba0:	21ca      	movs	r1, #202	; 0xca
  __HAL_LOCK(hrtc);
 8003ba2:	2401      	movs	r4, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ba4:	2002      	movs	r0, #2
 8003ba6:	7768      	strb	r0, [r5, #29]
  __HAL_LOCK(hrtc);
 8003ba8:	772c      	strb	r4, [r5, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003baa:	6259      	str	r1, [r3, #36]	; 0x24
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	0551      	lsls	r1, r2, #21
 8003bb2:	d50d      	bpl.n	8003bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
    tickstart = HAL_GetTick();
 8003bb4:	f7fd f8b2 	bl	8000d1c <HAL_GetTick>
 8003bb8:	4604      	mov	r4, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003bba:	e005      	b.n	8003bc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x3c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003bbc:	f7fd f8ae 	bl	8000d1c <HAL_GetTick>
 8003bc0:	1b00      	subs	r0, r0, r4
 8003bc2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bc6:	d84b      	bhi.n	8003c60 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	0752      	lsls	r2, r2, #29
 8003bce:	d4f5      	bmi.n	8003bbc <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd6:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003be0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003be2:	f7fd f89b 	bl	8000d1c <HAL_GetTick>
 8003be6:	4681      	mov	r9, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003be8:	e006      	b.n	8003bf8 <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003bea:	f7fd f897 	bl	8000d1c <HAL_GetTick>
 8003bee:	eba0 0009 	sub.w	r0, r0, r9
 8003bf2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bf6:	d82a      	bhi.n	8003c4e <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003bf8:	682e      	ldr	r6, [r5, #0]
 8003bfa:	68f4      	ldr	r4, [r6, #12]
 8003bfc:	f014 0404 	ands.w	r4, r4, #4
 8003c00:	d0f3      	beq.n	8003bea <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003c02:	f8c6 8014 	str.w	r8, [r6, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003c06:	68b2      	ldr	r2, [r6, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c08:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003c0a:	f022 0207 	bic.w	r2, r2, #7
 8003c0e:	60b2      	str	r2, [r6, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003c10:	68b2      	ldr	r2, [r6, #8]
 8003c12:	4317      	orrs	r7, r2
 8003c14:	60b7      	str	r7, [r6, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c1c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c24:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003c26:	68b3      	ldr	r3, [r6, #8]
 8003c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2c:	60b3      	str	r3, [r6, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c2e:	68b3      	ldr	r3, [r6, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c30:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c32:	24ff      	movs	r4, #255	; 0xff
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  hrtc->State = HAL_RTC_STATE_READY;
 8003c38:	2101      	movs	r1, #1
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c3a:	60b3      	str	r3, [r6, #8]

  return HAL_OK;
 8003c3c:	4610      	mov	r0, r2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c3e:	6274      	str	r4, [r6, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003c40:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8003c42:	772a      	strb	r2, [r5, #28]
  return HAL_OK;
 8003c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8003c48:	2002      	movs	r0, #2
}
 8003c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4e:	682a      	ldr	r2, [r5, #0]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c52:	21ff      	movs	r1, #255	; 0xff
 8003c54:	6251      	str	r1, [r2, #36]	; 0x24
      return HAL_TIMEOUT;
 8003c56:	4618      	mov	r0, r3
      __HAL_UNLOCK(hrtc);
 8003c58:	772c      	strb	r4, [r5, #28]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c5a:	776b      	strb	r3, [r5, #29]
      return HAL_TIMEOUT;
 8003c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c60:	6829      	ldr	r1, [r5, #0]
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c64:	20ff      	movs	r0, #255	; 0xff
       __HAL_UNLOCK(hrtc);
 8003c66:	2200      	movs	r2, #0
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c68:	6248      	str	r0, [r1, #36]	; 0x24
       return HAL_TIMEOUT;
 8003c6a:	4618      	mov	r0, r3
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c6c:	776b      	strb	r3, [r5, #29]
       __HAL_UNLOCK(hrtc);
 8003c6e:	772a      	strb	r2, [r5, #28]
       return HAL_TIMEOUT;
 8003c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c74:	40010400 	.word	0x40010400

08003c78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003c78:	6803      	ldr	r3, [r0, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	055b      	lsls	r3, r3, #21
{
 8003c7e:	b510      	push	{r4, lr}
 8003c80:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003c82:	d507      	bpl.n	8003c94 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003c84:	f000 fedc 	bl	8004a40 <HAL_RTCEx_WakeUpTimerEventCallback>
    
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	68d3      	ldr	r3, [r2, #12]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8003c92:	60d3      	str	r3, [r2, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003c94:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8003c96:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c9a:	2301      	movs	r3, #1
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003c9c:	6151      	str	r1, [r2, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8003c9e:	7763      	strb	r3, [r4, #29]
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003ca8:	6803      	ldr	r3, [r0, #0]
 8003caa:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003cac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop

08003cb4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003cb4:	6803      	ldr	r3, [r0, #0]
 8003cb6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003cb8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop

08003cc0 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003cc0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d001      	beq.n	8003ccc <HAL_UART_Transmit_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2002      	movs	r0, #2
 8003cca:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003ccc:	b1c9      	cbz	r1, 8003d02 <HAL_UART_Transmit_IT+0x42>
 8003cce:	b1c2      	cbz	r2, 8003d02 <HAL_UART_Transmit_IT+0x42>
    __HAL_LOCK(huart);
 8003cd0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d0f7      	beq.n	8003cc8 <HAL_UART_Transmit_IT+0x8>
{
 8003cd8:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cdc:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 8003cde:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce2:	2421      	movs	r4, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce6:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cea:	682c      	ldr	r4, [r5, #0]
    huart->pTxBuffPtr = pData;
 8003cec:	64c1      	str	r1, [r0, #76]	; 0x4c
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cee:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 8003cf2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    __HAL_UNLOCK(huart);
 8003cf6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 8003cfa:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cfc:	602c      	str	r4, [r5, #0]
  }
}
 8003cfe:	bc30      	pop	{r4, r5}
 8003d00:	4770      	bx	lr
      return HAL_ERROR;
 8003d02:	2001      	movs	r0, #1
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop

08003d08 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003d08:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d001      	beq.n	8003d14 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2002      	movs	r0, #2
  }
}
 8003d12:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003d14:	b349      	cbz	r1, 8003d6a <HAL_UART_Receive_IT+0x62>
 8003d16:	b342      	cbz	r2, 8003d6a <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 8003d18:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d0f7      	beq.n	8003d10 <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 8003d20:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8003d22:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 8003d28:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 8003d2c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8003d30:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 8003d34:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8003d38:	d027      	beq.n	8003d8a <HAL_UART_Receive_IT+0x82>
 8003d3a:	b9c3      	cbnz	r3, 8003d6e <HAL_UART_Receive_IT+0x66>
 8003d3c:	6903      	ldr	r3, [r0, #16]
 8003d3e:	b303      	cbz	r3, 8003d82 <HAL_UART_Receive_IT+0x7a>
 8003d40:	237f      	movs	r3, #127	; 0x7f
 8003d42:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d46:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d48:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d4a:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d4e:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8003d54:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	f041 0101 	orr.w	r1, r1, #1
 8003d5c:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d5e:	6811      	ldr	r1, [r2, #0]
 8003d60:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 8003d64:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d66:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8003d68:	4770      	bx	lr
      return HAL_ERROR;
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8003d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d72:	d1e8      	bne.n	8003d46 <HAL_UART_Receive_IT+0x3e>
 8003d74:	6903      	ldr	r3, [r0, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0e2      	beq.n	8003d40 <HAL_UART_Receive_IT+0x38>
 8003d7a:	233f      	movs	r3, #63	; 0x3f
 8003d7c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003d80:	e7e1      	b.n	8003d46 <HAL_UART_Receive_IT+0x3e>
 8003d82:	23ff      	movs	r3, #255	; 0xff
 8003d84:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003d88:	e7dd      	b.n	8003d46 <HAL_UART_Receive_IT+0x3e>
 8003d8a:	6903      	ldr	r3, [r0, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f8      	bne.n	8003d82 <HAL_UART_Receive_IT+0x7a>
 8003d90:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003d94:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003d98:	e7d5      	b.n	8003d46 <HAL_UART_Receive_IT+0x3e>
 8003d9a:	bf00      	nop

08003d9c <HAL_UART_TxCpltCallback>:
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop

08003da0 <HAL_UART_ErrorCallback>:
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop

08003da4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003da6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 8003dae:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8003db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003db4:	f7ff fff4 	bl	8003da0 <HAL_UART_ErrorCallback>
 8003db8:	bd08      	pop	{r3, pc}
 8003dba:	bf00      	nop

08003dbc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dbc:	6803      	ldr	r3, [r0, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dc0:	6819      	ldr	r1, [r3, #0]
{
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003dc6:	0710      	lsls	r0, r2, #28
 8003dc8:	d111      	bne.n	8003dee <HAL_UART_IRQHandler+0x32>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dca:	0696      	lsls	r6, r2, #26
 8003dcc:	d45f      	bmi.n	8003e8e <HAL_UART_IRQHandler+0xd2>
  cr3its = READ_REG(huart->Instance->CR3);
 8003dce:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003dd0:	02d5      	lsls	r5, r2, #11
 8003dd2:	d502      	bpl.n	8003dda <HAL_UART_IRQHandler+0x1e>
 8003dd4:	0240      	lsls	r0, r0, #9
 8003dd6:	f100 8088 	bmi.w	8003eea <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dda:	0616      	lsls	r6, r2, #24
 8003ddc:	d502      	bpl.n	8003de4 <HAL_UART_IRQHandler+0x28>
 8003dde:	060d      	lsls	r5, r1, #24
 8003de0:	f100 8094 	bmi.w	8003f0c <HAL_UART_IRQHandler+0x150>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003de4:	0650      	lsls	r0, r2, #25
 8003de6:	d501      	bpl.n	8003dec <HAL_UART_IRQHandler+0x30>
 8003de8:	064a      	lsls	r2, r1, #25
 8003dea:	d46c      	bmi.n	8003ec6 <HAL_UART_IRQHandler+0x10a>
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8003dee:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003df0:	f010 0601 	ands.w	r6, r0, #1
 8003df4:	461d      	mov	r5, r3
 8003df6:	d055      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xe8>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003df8:	07d0      	lsls	r0, r2, #31
 8003dfa:	d507      	bpl.n	8003e0c <HAL_UART_IRQHandler+0x50>
 8003dfc:	05c8      	lsls	r0, r1, #23
 8003dfe:	d505      	bpl.n	8003e0c <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003e00:	2001      	movs	r0, #1
 8003e02:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e04:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e06:	f040 0001 	orr.w	r0, r0, #1
 8003e0a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e0c:	0790      	lsls	r0, r2, #30
 8003e0e:	d54f      	bpl.n	8003eb0 <HAL_UART_IRQHandler+0xf4>
 8003e10:	b13e      	cbz	r6, 8003e22 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003e12:	2002      	movs	r0, #2
 8003e14:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e16:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e18:	f040 0004 	orr.w	r0, r0, #4
 8003e1c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e1e:	0750      	lsls	r0, r2, #29
 8003e20:	d44a      	bmi.n	8003eb8 <HAL_UART_IRQHandler+0xfc>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003e22:	0710      	lsls	r0, r2, #28
 8003e24:	d503      	bpl.n	8003e2e <HAL_UART_IRQHandler+0x72>
 8003e26:	0688      	lsls	r0, r1, #26
 8003e28:	d458      	bmi.n	8003edc <HAL_UART_IRQHandler+0x120>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e2a:	2e00      	cmp	r6, #0
 8003e2c:	d156      	bne.n	8003edc <HAL_UART_IRQHandler+0x120>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e2e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d0db      	beq.n	8003dec <HAL_UART_IRQHandler+0x30>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e34:	0690      	lsls	r0, r2, #26
 8003e36:	d502      	bpl.n	8003e3e <HAL_UART_IRQHandler+0x82>
 8003e38:	068a      	lsls	r2, r1, #26
 8003e3a:	f100 80a7 	bmi.w	8003f8c <HAL_UART_IRQHandler+0x1d0>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003e3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003e40:	071b      	lsls	r3, r3, #28
 8003e42:	d404      	bmi.n	8003e4e <HAL_UART_IRQHandler+0x92>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003e44:	68ae      	ldr	r6, [r5, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003e46:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8003e4a:	f000 80a8 	beq.w	8003f9e <HAL_UART_IRQHandler+0x1e2>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e54:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e56:	68ab      	ldr	r3, [r5, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	60ab      	str	r3, [r5, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	68ab      	ldr	r3, [r5, #8]
 8003e66:	065e      	lsls	r6, r3, #25
 8003e68:	d54c      	bpl.n	8003f04 <HAL_UART_IRQHandler+0x148>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6a:	68ab      	ldr	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 8003e6c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e72:	60ab      	str	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d045      	beq.n	8003f04 <HAL_UART_IRQHandler+0x148>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e78:	4b72      	ldr	r3, [pc, #456]	; (8004044 <HAL_UART_IRQHandler+0x288>)
 8003e7a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e7c:	f7fd fc66 	bl	800174c <HAL_DMA_Abort_IT>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d0b3      	beq.n	8003dec <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e84:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8003e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e8c:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8e:	068d      	lsls	r5, r1, #26
 8003e90:	d59d      	bpl.n	8003dce <HAL_UART_IRQHandler+0x12>
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e92:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8003e96:	2a22      	cmp	r2, #34	; 0x22
 8003e98:	d052      	beq.n	8003f40 <HAL_UART_IRQHandler+0x184>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	f042 0208 	orr.w	r2, r2, #8
 8003ea0:	619a      	str	r2, [r3, #24]
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003ea4:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003ea8:	d092      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eaa:	07d0      	lsls	r0, r2, #31
 8003eac:	d5ae      	bpl.n	8003e0c <HAL_UART_IRQHandler+0x50>
 8003eae:	e7a5      	b.n	8003dfc <HAL_UART_IRQHandler+0x40>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eb0:	0750      	lsls	r0, r2, #29
 8003eb2:	d5b6      	bpl.n	8003e22 <HAL_UART_IRQHandler+0x66>
 8003eb4:	2e00      	cmp	r6, #0
 8003eb6:	d0b4      	beq.n	8003e22 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003eb8:	2004      	movs	r0, #4
 8003eba:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ebc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003ebe:	f040 0002 	orr.w	r0, r0, #2
 8003ec2:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003ec4:	e7ad      	b.n	8003e22 <HAL_UART_IRQHandler+0x66>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ec6:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003ec8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ece:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003ed0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003ed2:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003ed6:	f7ff ff61 	bl	8003d9c <HAL_UART_TxCpltCallback>
 8003eda:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003edc:	2008      	movs	r0, #8
 8003ede:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ee0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003ee2:	f040 0008 	orr.w	r0, r0, #8
 8003ee6:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003ee8:	e7a1      	b.n	8003e2e <HAL_UART_IRQHandler+0x72>
    huart->gState  = HAL_UART_STATE_READY;
 8003eea:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003eec:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003ef0:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003ef2:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 8003ef4:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8003efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003f00:	f000 ba26 	b.w	8004350 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7ff ff4b 	bl	8003da0 <HAL_UART_ErrorCallback>
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f0c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8003f10:	2a21      	cmp	r2, #33	; 0x21
 8003f12:	f47f af6b 	bne.w	8003dec <HAL_UART_IRQHandler+0x30>
    if(huart->TxXferCount == 0U)
 8003f16:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	2a00      	cmp	r2, #0
 8003f1e:	d05a      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x21a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68a2      	ldr	r2, [r4, #8]
 8003f22:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003f26:	d068      	beq.n	8003ffa <HAL_UART_IRQHandler+0x23e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003f28:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003f2a:	1c51      	adds	r1, r2, #1
 8003f2c:	64e1      	str	r1, [r4, #76]	; 0x4c
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8003f32:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f40:	68a2      	ldr	r2, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 8003f44:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f48:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f4c:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4e:	d04b      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x22c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003f52:	400b      	ands	r3, r1
 8003f54:	1c51      	adds	r1, r2, #1
 8003f56:	6561      	str	r1, [r4, #84]	; 0x54
 8003f58:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8003f5a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f47f af40 	bne.w	8003dec <HAL_UART_IRQHandler+0x30>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f74:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	689a      	ldr	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003f78:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	609a      	str	r2, [r3, #8]
      HAL_UART_RxCpltCallback(huart);
 8003f80:	4620      	mov	r0, r4
      huart->RxState = HAL_UART_STATE_READY;
 8003f82:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003f86:	f000 fd49 	bl	8004a1c <HAL_UART_RxCpltCallback>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f8c:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8003f90:	2a22      	cmp	r2, #34	; 0x22
 8003f92:	d009      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x1ec>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	619a      	str	r2, [r3, #24]
 8003f9c:	e74f      	b.n	8003e3e <HAL_UART_IRQHandler+0x82>
        HAL_UART_ErrorCallback(huart);
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f7ff fefe 	bl	8003da0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	66e6      	str	r6, [r4, #108]	; 0x6c
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa8:	68a0      	ldr	r0, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003faa:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 8003fac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb4:	b292      	uxth	r2, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb6:	d03b      	beq.n	8004030 <HAL_UART_IRQHandler+0x274>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fba:	400a      	ands	r2, r1
 8003fbc:	1c59      	adds	r1, r3, #1
 8003fbe:	6561      	str	r1, [r4, #84]	; 0x54
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0U)
 8003fc4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8003fc8:	3a01      	subs	r2, #1
 8003fca:	b292      	uxth	r2, r2
 8003fcc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8003fd0:	b1f2      	cbz	r2, 8004010 <HAL_UART_IRQHandler+0x254>
 8003fd2:	461d      	mov	r5, r3
 8003fd4:	e733      	b.n	8003e3e <HAL_UART_IRQHandler+0x82>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fdc:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe8:	6922      	ldr	r2, [r4, #16]
 8003fea:	2a00      	cmp	r2, #0
 8003fec:	d1b0      	bne.n	8003f50 <HAL_UART_IRQHandler+0x194>
      *tmp = (uint16_t)(uhdata & uhMask);
 8003fee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003ff0:	400b      	ands	r3, r1
 8003ff2:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 8003ff6:	6562      	str	r2, [r4, #84]	; 0x54
 8003ff8:	e7af      	b.n	8003f5a <HAL_UART_IRQHandler+0x19e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffa:	6922      	ldr	r2, [r4, #16]
 8003ffc:	2a00      	cmp	r2, #0
 8003ffe:	d193      	bne.n	8003f28 <HAL_UART_IRQHandler+0x16c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004000:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004002:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004006:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800400a:	8519      	strh	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800400c:	64e2      	str	r2, [r4, #76]	; 0x4c
 800400e:	e790      	b.n	8003f32 <HAL_UART_IRQHandler+0x176>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004016:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	689a      	ldr	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800401a:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	609a      	str	r2, [r3, #8]
      HAL_UART_RxCpltCallback(huart);
 8004022:	4620      	mov	r0, r4
      huart->RxState = HAL_UART_STATE_READY;
 8004024:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8004028:	f000 fcf8 	bl	8004a1c <HAL_UART_RxCpltCallback>
 800402c:	6825      	ldr	r5, [r4, #0]
 800402e:	e706      	b.n	8003e3e <HAL_UART_IRQHandler+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004030:	6920      	ldr	r0, [r4, #16]
 8004032:	2800      	cmp	r0, #0
 8004034:	d1c0      	bne.n	8003fb8 <HAL_UART_IRQHandler+0x1fc>
      *tmp = (uint16_t)(uhdata & uhMask);
 8004036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004038:	400a      	ands	r2, r1
 800403a:	f820 2b02 	strh.w	r2, [r0], #2
      huart->pRxBuffPtr +=2U;
 800403e:	6560      	str	r0, [r4, #84]	; 0x54
 8004040:	e7c0      	b.n	8003fc4 <HAL_UART_IRQHandler+0x208>
 8004042:	bf00      	nop
 8004044:	08003da5 	.word	0x08003da5

08004048 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004048:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800404a:	07da      	lsls	r2, r3, #31
{
 800404c:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800404e:	d506      	bpl.n	800405e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004050:	6801      	ldr	r1, [r0, #0]
 8004052:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004054:	684a      	ldr	r2, [r1, #4]
 8004056:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800405a:	4322      	orrs	r2, r4
 800405c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800405e:	079c      	lsls	r4, r3, #30
 8004060:	d506      	bpl.n	8004070 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004062:	6801      	ldr	r1, [r0, #0]
 8004064:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004066:	684a      	ldr	r2, [r1, #4]
 8004068:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800406c:	4322      	orrs	r2, r4
 800406e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004070:	0759      	lsls	r1, r3, #29
 8004072:	d506      	bpl.n	8004082 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004074:	6801      	ldr	r1, [r0, #0]
 8004076:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004078:	684a      	ldr	r2, [r1, #4]
 800407a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800407e:	4322      	orrs	r2, r4
 8004080:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004082:	071a      	lsls	r2, r3, #28
 8004084:	d506      	bpl.n	8004094 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004086:	6801      	ldr	r1, [r0, #0]
 8004088:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800408a:	684a      	ldr	r2, [r1, #4]
 800408c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004090:	4322      	orrs	r2, r4
 8004092:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004094:	06dc      	lsls	r4, r3, #27
 8004096:	d506      	bpl.n	80040a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004098:	6801      	ldr	r1, [r0, #0]
 800409a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800409c:	688a      	ldr	r2, [r1, #8]
 800409e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040a2:	4322      	orrs	r2, r4
 80040a4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040a6:	0699      	lsls	r1, r3, #26
 80040a8:	d506      	bpl.n	80040b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040aa:	6801      	ldr	r1, [r0, #0]
 80040ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80040ae:	688a      	ldr	r2, [r1, #8]
 80040b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b4:	4322      	orrs	r2, r4
 80040b6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b8:	065a      	lsls	r2, r3, #25
 80040ba:	d509      	bpl.n	80040d0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040bc:	6801      	ldr	r1, [r0, #0]
 80040be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80040c0:	684a      	ldr	r2, [r1, #4]
 80040c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80040c6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040cc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ce:	d00b      	beq.n	80040e8 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	d506      	bpl.n	80040e2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040d4:	6802      	ldr	r2, [r0, #0]
 80040d6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80040d8:	6853      	ldr	r3, [r2, #4]
 80040da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80040de:	430b      	orrs	r3, r1
 80040e0:	6053      	str	r3, [r2, #4]
}
 80040e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040e6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e8:	684a      	ldr	r2, [r1, #4]
 80040ea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80040ec:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80040f0:	4322      	orrs	r2, r4
 80040f2:	604a      	str	r2, [r1, #4]
 80040f4:	e7ec      	b.n	80040d0 <UART_AdvFeatureConfig+0x88>
 80040f6:	bf00      	nop

080040f8 <HAL_UART_Init>:
  if(huart == NULL)
 80040f8:	2800      	cmp	r0, #0
 80040fa:	f000 80af 	beq.w	800425c <HAL_UART_Init+0x164>
{
 80040fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8004100:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004104:	4604      	mov	r4, r0
 8004106:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800410a:	2b00      	cmp	r3, #0
 800410c:	d031      	beq.n	8004172 <HAL_UART_Init+0x7a>
  __HAL_UART_DISABLE(huart);
 800410e:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004110:	6927      	ldr	r7, [r4, #16]
 8004112:	6966      	ldr	r6, [r4, #20]
 8004114:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004116:	4a89      	ldr	r2, [pc, #548]	; (800433c <HAL_UART_Init+0x244>)
  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	2324      	movs	r3, #36	; 0x24
 800411a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800411e:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004120:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004122:	f020 0001 	bic.w	r0, r0, #1
 8004126:	6028      	str	r0, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004128:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800412a:	433b      	orrs	r3, r7
 800412c:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800412e:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004130:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004132:	4313      	orrs	r3, r2
 8004134:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004136:	686a      	ldr	r2, [r5, #4]
 8004138:	68e6      	ldr	r6, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800413a:	69a3      	ldr	r3, [r4, #24]
 800413c:	6a27      	ldr	r7, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800413e:	4880      	ldr	r0, [pc, #512]	; (8004340 <HAL_UART_Init+0x248>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004140:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004144:	4332      	orrs	r2, r6
 8004146:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004148:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800414a:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800414c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004150:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004152:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004154:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004156:	d06f      	beq.n	8004238 <HAL_UART_Init+0x140>
 8004158:	4b7a      	ldr	r3, [pc, #488]	; (8004344 <HAL_UART_Init+0x24c>)
 800415a:	429d      	cmp	r5, r3
 800415c:	d00e      	beq.n	800417c <HAL_UART_Init+0x84>
 800415e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004162:	429d      	cmp	r5, r3
 8004164:	d00a      	beq.n	800417c <HAL_UART_Init+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004166:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800416a:	f000 80a2 	beq.w	80042b2 <HAL_UART_Init+0x1ba>
    return HAL_ERROR;
 800416e:	2001      	movs	r0, #1
 8004170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004172:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004176:	f001 fc55 	bl	8005a24 <HAL_UART_MspInit>
 800417a:	e7c8      	b.n	800410e <HAL_UART_Init+0x16>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800417c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004180:	f000 8094 	beq.w	80042ac <HAL_UART_Init+0x1b4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004184:	f7ff f9c4 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8004188:	6862      	ldr	r2, [r4, #4]
 800418a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800418e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004192:	b29b      	uxth	r3, r3
 8004194:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d149      	bne.n	8004230 <HAL_UART_Init+0x138>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80041ae:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	66e1      	str	r1, [r4, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80041ba:	f7fc fdaf 	bl	8000d1c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80041c4:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041c6:	d40b      	bmi.n	80041e0 <HAL_UART_Init+0xe8>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	0752      	lsls	r2, r2, #29
 80041cc:	d424      	bmi.n	8004218 <HAL_UART_Init+0x120>
  huart->gState  = HAL_UART_STATE_READY;
 80041ce:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80041d0:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80041d2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80041d6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80041da:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80041de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e0:	69dd      	ldr	r5, [r3, #28]
 80041e2:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80041e6:	d1ef      	bne.n	80041c8 <HAL_UART_Init+0xd0>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80041e8:	f7fc fd98 	bl	8000d1c <HAL_GetTick>
 80041ec:	1b80      	subs	r0, r0, r6
 80041ee:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f2:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80041f4:	d3f4      	bcc.n	80041e0 <HAL_UART_Init+0xe8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fe:	689a      	ldr	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8004200:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8004208:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800420a:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800420e:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004212:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004218:	69dd      	ldr	r5, [r3, #28]
 800421a:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800421e:	d1d6      	bne.n	80041ce <HAL_UART_Init+0xd6>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004220:	f7fc fd7c 	bl	8000d1c <HAL_GetTick>
 8004224:	1b80      	subs	r0, r0, r6
 8004226:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800422a:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800422c:	d3f4      	bcc.n	8004218 <HAL_UART_Init+0x120>
 800422e:	e7e2      	b.n	80041f6 <HAL_UART_Init+0xfe>
    UART_AdvFeatureConfig(huart);
 8004230:	4620      	mov	r0, r4
 8004232:	f7ff ff09 	bl	8004048 <UART_AdvFeatureConfig>
 8004236:	e7b1      	b.n	800419c <HAL_UART_Init+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004238:	4b43      	ldr	r3, [pc, #268]	; (8004348 <HAL_UART_Init+0x250>)
 800423a:	4a44      	ldr	r2, [pc, #272]	; (800434c <HAL_UART_Init+0x254>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004242:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004246:	5cd3      	ldrb	r3, [r2, r3]
 8004248:	d13b      	bne.n	80042c2 <HAL_UART_Init+0x1ca>
    switch (clocksource)
 800424a:	2b08      	cmp	r3, #8
 800424c:	d834      	bhi.n	80042b8 <HAL_UART_Init+0x1c0>
 800424e:	e8df f003 	tbb	[pc, r3]
 8004252:	2a2d      	.short	0x2a2d
 8004254:	33153320 	.word	0x33153320
 8004258:	3333      	.short	0x3333
 800425a:	07          	.byte	0x07
 800425b:	00          	.byte	0x00
    return HAL_ERROR;
 800425c:	2001      	movs	r0, #1
}
 800425e:	4770      	bx	lr
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004260:	6862      	ldr	r2, [r4, #4]
 8004262:	0853      	lsrs	r3, r2, #1
 8004264:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004268:	fbb3 f3f2 	udiv	r3, r3, r2
 800426c:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 800426e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004272:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8004276:	4313      	orrs	r3, r2
 8004278:	60eb      	str	r3, [r5, #12]
 800427a:	e78c      	b.n	8004196 <HAL_UART_Init+0x9e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800427c:	f7ff f90e 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8004280:	6862      	ldr	r2, [r4, #4]
 8004282:	6825      	ldr	r5, [r4, #0]
 8004284:	0853      	lsrs	r3, r2, #1
 8004286:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800428a:	fbb3 f3f2 	udiv	r3, r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	e7ed      	b.n	800426e <HAL_UART_Init+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004292:	6862      	ldr	r2, [r4, #4]
 8004294:	0853      	lsrs	r3, r2, #1
 8004296:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800429a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800429e:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	e7e3      	b.n	800426e <HAL_UART_Init+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80042a6:	f7ff f94b 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 80042aa:	e7e9      	b.n	8004280 <HAL_UART_Init+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80042ac:	f7ff f930 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 80042b0:	e7e6      	b.n	8004280 <HAL_UART_Init+0x188>
    huart->Instance->BRR = brrtemp;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60eb      	str	r3, [r5, #12]
 80042b6:	e75a      	b.n	800416e <HAL_UART_Init+0x76>
 80042b8:	4b21      	ldr	r3, [pc, #132]	; (8004340 <HAL_UART_Init+0x248>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 80042be:	2001      	movs	r0, #1
 80042c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	f63f af53 	bhi.w	800416e <HAL_UART_Init+0x76>
 80042c8:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <HAL_UART_Init+0x1d8>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	08004185 	.word	0x08004185
 80042d4:	080042f5 	.word	0x080042f5
 80042d8:	08004325 	.word	0x08004325
 80042dc:	0800416f 	.word	0x0800416f
 80042e0:	0800431f 	.word	0x0800431f
 80042e4:	0800416f 	.word	0x0800416f
 80042e8:	0800416f 	.word	0x0800416f
 80042ec:	0800416f 	.word	0x0800416f
 80042f0:	0800430b 	.word	0x0800430b
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80042f4:	f7ff f924 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042f8:	6862      	ldr	r2, [r4, #4]
 80042fa:	4911      	ldr	r1, [pc, #68]	; (8004340 <HAL_UART_Init+0x248>)
 80042fc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004300:	fbb3 f3f2 	udiv	r3, r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	60cb      	str	r3, [r1, #12]
 8004308:	e745      	b.n	8004196 <HAL_UART_Init+0x9e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800430a:	6862      	ldr	r2, [r4, #4]
 800430c:	490c      	ldr	r1, [pc, #48]	; (8004340 <HAL_UART_Init+0x248>)
 800430e:	0853      	lsrs	r3, r2, #1
 8004310:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004314:	fbb3 f3f2 	udiv	r3, r3, r2
 8004318:	b29b      	uxth	r3, r3
 800431a:	60cb      	str	r3, [r1, #12]
 800431c:	e73b      	b.n	8004196 <HAL_UART_Init+0x9e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800431e:	f7ff f8bd 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8004322:	e7e9      	b.n	80042f8 <HAL_UART_Init+0x200>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004324:	6862      	ldr	r2, [r4, #4]
 8004326:	4906      	ldr	r1, [pc, #24]	; (8004340 <HAL_UART_Init+0x248>)
 8004328:	0853      	lsrs	r3, r2, #1
 800432a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800432e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004332:	fbb3 f3f2 	udiv	r3, r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	60cb      	str	r3, [r1, #12]
 800433a:	e72c      	b.n	8004196 <HAL_UART_Init+0x9e>
 800433c:	efff69f3 	.word	0xefff69f3
 8004340:	40013800 	.word	0x40013800
 8004344:	40004400 	.word	0x40004400
 8004348:	40021000 	.word	0x40021000
 800434c:	08007360 	.word	0x08007360

08004350 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop

08004354 <adc_comms>:
extern ADC_HandleTypeDef hadc2;


void adc_comms(){

	adc_raw_voltage =  ADC1_buffer[0];
 8004354:	4b73      	ldr	r3, [pc, #460]	; (8004524 <adc_comms+0x1d0>)
 8004356:	4874      	ldr	r0, [pc, #464]	; (8004528 <adc_comms+0x1d4>)
 8004358:	681a      	ldr	r2, [r3, #0]
	adc_raw_current =	ADC1_buffer[1];
 800435a:	4974      	ldr	r1, [pc, #464]	; (800452c <adc_comms+0x1d8>)
	adc_raw_voltage =  ADC1_buffer[0];
 800435c:	6813      	ldr	r3, [r2, #0]
void adc_comms(){
 800435e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	raw_ambient_temp = ADC1_buffer[2];
	raw_geyser_temp = ADC1_buffer[3];


	//Converting Voltage
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 8004362:	ee07 3a90 	vmov	s15, r3
void adc_comms(){
 8004366:	ed2d 8b02 	vpush	{d8}
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 800436a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800436e:	eddf 8a70 	vldr	s17, [pc, #448]	; 8004530 <adc_comms+0x1dc>
 8004372:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8004580 <adc_comms+0x22c>
	raw_ambient_temp = ADC1_buffer[2];
 8004376:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8004584 <adc_comms+0x230>
	raw_geyser_temp = ADC1_buffer[3];
 800437a:	4f6e      	ldr	r7, [pc, #440]	; (8004534 <adc_comms+0x1e0>)
	adc_raw_current =	ADC1_buffer[1];
 800437c:	6854      	ldr	r4, [r2, #4]
	raw_ambient_temp = ADC1_buffer[2];
 800437e:	6896      	ldr	r6, [r2, #8]
	raw_geyser_temp = ADC1_buffer[3];
 8004380:	68d5      	ldr	r5, [r2, #12]
	adc_raw_voltage =  ADC1_buffer[0];
 8004382:	6003      	str	r3, [r0, #0]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 8004384:	ee37 7a68 	vsub.f32	s14, s14, s17
	adc_raw_current =	ADC1_buffer[1];
 8004388:	600c      	str	r4, [r1, #0]
	raw_ambient_temp = ADC1_buffer[2];
 800438a:	f8ca 6000 	str.w	r6, [sl]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 800438e:	e9d8 0100 	ldrd	r0, r1, [r8]
	raw_geyser_temp = ADC1_buffer[3];
 8004392:	603d      	str	r5, [r7, #0]
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 8004394:	ee27 8a07 	vmul.f32	s16, s14, s14
 8004398:	f7fc f83a 	bl	8000410 <__aeabi_ul2f>
 800439c:	eddf 7a66 	vldr	s15, [pc, #408]	; 8004538 <adc_comms+0x1e4>

	//Converting Current
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 80043a0:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8004588 <adc_comms+0x234>
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 80043a4:	ee07 0a10 	vmov	s14, r0
 80043a8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80043ac:	ee17 0a10 	vmov	r0, s14
 80043b0:	f7fc f874 	bl	800049c <__aeabi_f2ulz>
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 80043b4:	ee07 4a90 	vmov	s15, r4
 80043b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
	adc_buffer_voltage = ((float)(adc_raw_voltage-2059.908f)/0.008686f)*((float)(adc_raw_voltage-2059.908f)/0.008686f)+adc_buffer_voltage;
 80043bc:	e9c8 0100 	strd	r0, r1, [r8]
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 80043c0:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80043c4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80043c8:	ee27 8aa7 	vmul.f32	s16, s15, s15
 80043cc:	f7fc f820 	bl	8000410 <__aeabi_ul2f>
 80043d0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800453c <adc_comms+0x1e8>
 80043d4:	ee07 0a10 	vmov	s14, r0
 80043d8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80043dc:	ee17 0a10 	vmov	r0, s14
 80043e0:	f7fc f85c 	bl	800049c <__aeabi_f2ulz>

	//Converting Ambient temperature
	if( (raw_ambient_temp-620.5f)/12.4f < 100){
 80043e4:	ee07 6a90 	vmov	s15, r6
 80043e8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004540 <adc_comms+0x1ec>
 80043ec:	eddf 6a55 	vldr	s13, [pc, #340]	; 8004544 <adc_comms+0x1f0>
 80043f0:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8004548 <adc_comms+0x1f4>
 80043f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
	adc_buffer_current = ((adc_raw_current-2059.908f)/0.1469f)*((adc_raw_current-2059.908f)/0.1469f)+adc_buffer_current;
 80043f8:	e9c9 0100 	strd	r0, r1, [r9]
	if( (raw_ambient_temp-620.5f)/12.4f < 100){
 80043fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004400:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004404:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	d43c      	bmi.n	8004488 <adc_comms+0x134>
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-620.5f)/12.4f < 100){
 800440e:	ee07 5a90 	vmov	s15, r5
 8004412:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004540 <adc_comms+0x1ec>
 8004416:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8004544 <adc_comms+0x1f0>
 800441a:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 8004548 <adc_comms+0x1f4>
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004426:	ee27 7a26 	vmul.f32	s14, s14, s13
 800442a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004432:	d523      	bpl.n	800447c <adc_comms+0x128>
		raw_geyser_temp = (raw_geyser_temp-620.4f)/12.4f;
 8004434:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800454c <adc_comms+0x1f8>
		geyser_temp_int = raw_geyser_temp;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004438:	4b45      	ldr	r3, [pc, #276]	; (8004550 <adc_comms+0x1fc>)
		geyser_temp_int = raw_geyser_temp;
 800443a:	4c46      	ldr	r4, [pc, #280]	; (8004554 <adc_comms+0x200>)
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	4946      	ldr	r1, [pc, #280]	; (8004558 <adc_comms+0x204>)
		raw_geyser_temp = (raw_geyser_temp-620.4f)/12.4f;
 8004440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004444:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444c:	ee17 3a90 	vmov	r3, s15
	}
	else{
		raw_geyser_temp = (raw_geyser_temp-620.4f)/12.41f;
		raw_geyser_temp = 0;
		geyser_temp_int = 0;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004450:	461a      	mov	r2, r3
		geyser_temp_int = 0;
 8004452:	7023      	strb	r3, [r4, #0]
		raw_geyser_temp = 0;
 8004454:	603b      	str	r3, [r7, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004456:	f002 fab9 	bl	80069cc <siprintf>
		sprintf(segment_val, "%lu", raw_geyser_temp);
 800445a:	4b40      	ldr	r3, [pc, #256]	; (800455c <adc_comms+0x208>)
	}
	adc_counter += 1;
 800445c:	4c40      	ldr	r4, [pc, #256]	; (8004560 <adc_comms+0x20c>)
		sprintf(segment_val, "%lu", raw_geyser_temp);
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	493d      	ldr	r1, [pc, #244]	; (8004558 <adc_comms+0x204>)
 8004464:	f002 fab2 	bl	80069cc <siprintf>
	adc_counter += 1;
 8004468:	8823      	ldrh	r3, [r4, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	b29b      	uxth	r3, r3
	if(adc_counter == 100){
 800446e:	2b64      	cmp	r3, #100	; 0x64
	adc_counter += 1;
 8004470:	8023      	strh	r3, [r4, #0]
	if(adc_counter == 100){
 8004472:	d01c      	beq.n	80044ae <adc_comms+0x15a>

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}

}
 8004474:	ecbd 8b02 	vpop	{d8}
 8004478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 800447c:	4b34      	ldr	r3, [pc, #208]	; (8004550 <adc_comms+0x1fc>)
		geyser_temp_int = 0;
 800447e:	4c35      	ldr	r4, [pc, #212]	; (8004554 <adc_comms+0x200>)
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	4935      	ldr	r1, [pc, #212]	; (8004558 <adc_comms+0x204>)
		raw_geyser_temp = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	e7e3      	b.n	8004450 <adc_comms+0xfc>
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
 8004488:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800454c <adc_comms+0x1f8>
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 800448c:	4b35      	ldr	r3, [pc, #212]	; (8004564 <adc_comms+0x210>)
 800448e:	4936      	ldr	r1, [pc, #216]	; (8004568 <adc_comms+0x214>)
 8004490:	6818      	ldr	r0, [r3, #0]
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
 8004492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004496:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800449a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 800449e:	ee17 2a90 	vmov	r2, s15
		raw_ambient_temp = (raw_ambient_temp-620.4f)/12.4f;
 80044a2:	edca 7a00 	vstr	s15, [sl]
		sprintf(ambient_temp,"%ld", raw_ambient_temp);
 80044a6:	f002 fa91 	bl	80069cc <siprintf>
 80044aa:	683d      	ldr	r5, [r7, #0]
 80044ac:	e7af      	b.n	800440e <adc_comms+0xba>
		*voltage_int_rms = __builtin_sqrtf(adc_buffer_voltage/100.f);
 80044ae:	4b2f      	ldr	r3, [pc, #188]	; (800456c <adc_comms+0x218>)
 80044b0:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8004570 <adc_comms+0x21c>
 80044b4:	681e      	ldr	r6, [r3, #0]
		*current_int_rms = __builtin_sqrtf(adc_buffer_current/100.f);
 80044b6:	4d2f      	ldr	r5, [pc, #188]	; (8004574 <adc_comms+0x220>)
		*voltage_int_rms = __builtin_sqrtf(adc_buffer_voltage/100.f);
 80044b8:	e9d8 0100 	ldrd	r0, r1, [r8]
 80044bc:	f7fb ffa8 	bl	8000410 <__aeabi_ul2f>
 80044c0:	ee07 0a90 	vmov	s15, r0
 80044c4:	ee27 7a88 	vmul.f32	s14, s15, s16
		*current_int_rms = __builtin_sqrtf(adc_buffer_current/100.f);
 80044c8:	e9d9 0100 	ldrd	r0, r1, [r9]
		*voltage_int_rms = __builtin_sqrtf(adc_buffer_voltage/100.f);
 80044cc:	eef1 7ac7 	vsqrt.f32	s15, s14
 80044d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d4:	edc6 7a00 	vstr	s15, [r6]
		*current_int_rms = __builtin_sqrtf(adc_buffer_current/100.f);
 80044d8:	f7fb ff9a 	bl	8000410 <__aeabi_ul2f>
 80044dc:	ee07 0a90 	vmov	s15, r0
 80044e0:	ee27 8a88 	vmul.f32	s16, s15, s16
 80044e4:	682b      	ldr	r3, [r5, #0]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 80044e6:	4a24      	ldr	r2, [pc, #144]	; (8004578 <adc_comms+0x224>)
 80044e8:	491b      	ldr	r1, [pc, #108]	; (8004558 <adc_comms+0x204>)
 80044ea:	6810      	ldr	r0, [r2, #0]
		*current_int_rms = __builtin_sqrtf(adc_buffer_current/100.f);
 80044ec:	eef1 7ac8 	vsqrt.f32	s15, s16
 80044f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f4:	edc3 7a00 	vstr	s15, [r3]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 80044f8:	6832      	ldr	r2, [r6, #0]
 80044fa:	f002 fa67 	bl	80069cc <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <adc_comms+0x228>)
 8004500:	682a      	ldr	r2, [r5, #0]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	4914      	ldr	r1, [pc, #80]	; (8004558 <adc_comms+0x204>)
 8004508:	f002 fa60 	bl	80069cc <siprintf>
}
 800450c:	ecbd 8b02 	vpop	{d8}
		adc_buffer_voltage = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	2200      	movs	r2, #0
 8004514:	e9c8 2300 	strd	r2, r3, [r8]
		adc_buffer_current = 0;
 8004518:	e9c9 2300 	strd	r2, r3, [r9]
		adc_counter = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	8023      	strh	r3, [r4, #0]
}
 8004520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004524:	20000244 	.word	0x20000244
 8004528:	20000270 	.word	0x20000270
 800452c:	2000026c 	.word	0x2000026c
 8004530:	4500be87 	.word	0x4500be87
 8004534:	200002d4 	.word	0x200002d4
 8004538:	464f19a4 	.word	0x464f19a4
 800453c:	42395c34 	.word	0x42395c34
 8004540:	441b2000 	.word	0x441b2000
 8004544:	3da5294b 	.word	0x3da5294b
 8004548:	42c80000 	.word	0x42c80000
 800454c:	441b199a 	.word	0x441b199a
 8004550:	2000029c 	.word	0x2000029c
 8004554:	200002a0 	.word	0x200002a0
 8004558:	08007368 	.word	0x08007368
 800455c:	200002e0 	.word	0x200002e0
 8004560:	20000268 	.word	0x20000268
 8004564:	20000274 	.word	0x20000274
 8004568:	08007364 	.word	0x08007364
 800456c:	20000310 	.word	0x20000310
 8004570:	3c23d70a 	.word	0x3c23d70a
 8004574:	2000027c 	.word	0x2000027c
 8004578:	20000314 	.word	0x20000314
 800457c:	20000280 	.word	0x20000280
 8004580:	20000260 	.word	0x20000260
 8004584:	200002d0 	.word	0x200002d0
 8004588:	20000258 	.word	0x20000258

0800458c <write2Flash>:
extern RTC_HandleTypeDef hrtc;




void write2Flash(){
 800458c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if(log_counter <= 100){
 8004590:	4d07      	ldr	r5, [pc, #28]	; (80045b0 <write2Flash+0x24>)
 8004592:	782b      	ldrb	r3, [r5, #0]
 8004594:	2b64      	cmp	r3, #100	; 0x64
 8004596:	d90f      	bls.n	80045b8 <write2Flash+0x2c>
 8004598:	4c06      	ldr	r4, [pc, #24]	; (80045b4 <write2Flash+0x28>)
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	2232      	movs	r2, #50	; 0x32
 800459e:	2100      	movs	r1, #0
 80045a0:	f002 f941 	bl	8006826 <memset>


			log_counter += 1;
 80045a4:	782b      	ldrb	r3, [r5, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	702b      	strb	r3, [r5, #0]
 80045aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ae:	bf00      	nop
 80045b0:	200002bd 	.word	0x200002bd
 80045b4:	20000298 	.word	0x20000298
		HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 80045b8:	f8df 8370 	ldr.w	r8, [pc, #880]	; 800492c <write2Flash+0x3a0>
		log_empty = 0;
 80045bc:	4bc4      	ldr	r3, [pc, #784]	; (80048d0 <write2Flash+0x344>)
		HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 80045be:	f8d8 1000 	ldr.w	r1, [r8]
 80045c2:	48c4      	ldr	r0, [pc, #784]	; (80048d4 <write2Flash+0x348>)
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 80045c4:	4cc4      	ldr	r4, [pc, #784]	; (80048d8 <write2Flash+0x34c>)
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80045c6:	4ec5      	ldr	r6, [pc, #788]	; (80048dc <write2Flash+0x350>)
		itoa((timeOfRTC->Hours),temp_time_var,10  );
 80045c8:	4fc5      	ldr	r7, [pc, #788]	; (80048e0 <write2Flash+0x354>)
		log_empty = 0;
 80045ca:	f04f 0900 	mov.w	r9, #0
		HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 80045ce:	464a      	mov	r2, r9
		log_empty = 0;
 80045d0:	f883 9000 	strb.w	r9, [r3]
		HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 80045d4:	f7ff f9b8 	bl	8003948 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80045d8:	4bc2      	ldr	r3, [pc, #776]	; (80048e4 <write2Flash+0x358>)
 80045da:	48be      	ldr	r0, [pc, #760]	; (80048d4 <write2Flash+0x348>)
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	464a      	mov	r2, r9
 80045e0:	f7ff fa8a 	bl	8003af8 <HAL_RTC_GetDate>
		memcpy(flash_stored+strlen((char*)flash_stored),loggingIdentifier,strlen(loggingIdentifier));
 80045e4:	f8d4 9000 	ldr.w	r9, [r4]
 80045e8:	4648      	mov	r0, r9
 80045ea:	f7fb fdf1 	bl	80001d0 <strlen>
 80045ee:	4682      	mov	sl, r0
 80045f0:	48bd      	ldr	r0, [pc, #756]	; (80048e8 <write2Flash+0x35c>)
 80045f2:	f7fb fded 	bl	80001d0 <strlen>
 80045f6:	49bc      	ldr	r1, [pc, #752]	; (80048e8 <write2Flash+0x35c>)
 80045f8:	4602      	mov	r2, r0
 80045fa:	eb09 000a 	add.w	r0, r9, sl
 80045fe:	f002 f907 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004602:	f8d4 9000 	ldr.w	r9, [r4]
 8004606:	4648      	mov	r0, r9
 8004608:	f7fb fde2 	bl	80001d0 <strlen>
 800460c:	7833      	ldrb	r3, [r6, #0]
 800460e:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((timeOfRTC->Hours),temp_time_var,10  );
 8004612:	f8d8 3000 	ldr.w	r3, [r8]
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	7818      	ldrb	r0, [r3, #0]
 800461a:	220a      	movs	r2, #10
 800461c:	f002 f8ee 	bl	80067fc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8004620:	f8d4 9000 	ldr.w	r9, [r4]
 8004624:	4648      	mov	r0, r9
 8004626:	f7fb fdd3 	bl	80001d0 <strlen>
 800462a:	f8d7 a000 	ldr.w	sl, [r7]
 800462e:	4683      	mov	fp, r0
 8004630:	4650      	mov	r0, sl
 8004632:	f7fb fdcd 	bl	80001d0 <strlen>
 8004636:	4651      	mov	r1, sl
 8004638:	4602      	mov	r2, r0
 800463a:	eb09 000b 	add.w	r0, r9, fp
 800463e:	f002 f8e7 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004642:	f8d4 9000 	ldr.w	r9, [r4]
 8004646:	4648      	mov	r0, r9
 8004648:	f7fb fdc2 	bl	80001d0 <strlen>
 800464c:	7833      	ldrb	r3, [r6, #0]
 800464e:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((timeOfRTC->Minutes),temp_time_var,10  );
 8004652:	f8d8 3000 	ldr.w	r3, [r8]
 8004656:	6839      	ldr	r1, [r7, #0]
 8004658:	7858      	ldrb	r0, [r3, #1]
 800465a:	220a      	movs	r2, #10
 800465c:	f002 f8ce 	bl	80067fc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8004660:	f8d4 9000 	ldr.w	r9, [r4]
 8004664:	4648      	mov	r0, r9
 8004666:	f7fb fdb3 	bl	80001d0 <strlen>
 800466a:	f8d7 a000 	ldr.w	sl, [r7]
 800466e:	4683      	mov	fp, r0
 8004670:	4650      	mov	r0, sl
 8004672:	f7fb fdad 	bl	80001d0 <strlen>
 8004676:	4651      	mov	r1, sl
 8004678:	4602      	mov	r2, r0
 800467a:	eb09 000b 	add.w	r0, r9, fp
 800467e:	f002 f8c7 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004682:	f8d4 9000 	ldr.w	r9, [r4]
 8004686:	4648      	mov	r0, r9
 8004688:	f7fb fda2 	bl	80001d0 <strlen>
 800468c:	7833      	ldrb	r3, [r6, #0]
 800468e:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((timeOfRTC->Seconds),temp_time_var,10  );
 8004692:	f8d8 3000 	ldr.w	r3, [r8]
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	7898      	ldrb	r0, [r3, #2]
 800469a:	220a      	movs	r2, #10
 800469c:	f002 f8ae 	bl	80067fc <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 80046a0:	f8d4 8000 	ldr.w	r8, [r4]
 80046a4:	4640      	mov	r0, r8
 80046a6:	f7fb fd93 	bl	80001d0 <strlen>
 80046aa:	683f      	ldr	r7, [r7, #0]
 80046ac:	4681      	mov	r9, r0
 80046ae:	4638      	mov	r0, r7
 80046b0:	f7fb fd8e 	bl	80001d0 <strlen>
 80046b4:	4639      	mov	r1, r7
 80046b6:	4602      	mov	r2, r0
 80046b8:	eb08 0009 	add.w	r0, r8, r9
 80046bc:	f002 f8a8 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80046c0:	6827      	ldr	r7, [r4, #0]
 80046c2:	4638      	mov	r0, r7
 80046c4:	f7fb fd84 	bl	80001d0 <strlen>
 80046c8:	7833      	ldrb	r3, [r6, #0]
 80046ca:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 80046cc:	6827      	ldr	r7, [r4, #0]
 80046ce:	4638      	mov	r0, r7
 80046d0:	f7fb fd7e 	bl	80001d0 <strlen>
 80046d4:	4b85      	ldr	r3, [pc, #532]	; (80048ec <write2Flash+0x360>)
 80046d6:	f8d3 8000 	ldr.w	r8, [r3]
 80046da:	4681      	mov	r9, r0
 80046dc:	4640      	mov	r0, r8
 80046de:	f7fb fd77 	bl	80001d0 <strlen>
 80046e2:	4641      	mov	r1, r8
 80046e4:	4602      	mov	r2, r0
 80046e6:	eb07 0009 	add.w	r0, r7, r9
 80046ea:	f002 f891 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80046ee:	6827      	ldr	r7, [r4, #0]
 80046f0:	4638      	mov	r0, r7
 80046f2:	f7fb fd6d 	bl	80001d0 <strlen>
 80046f6:	7833      	ldrb	r3, [r6, #0]
 80046f8:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 80046fa:	6827      	ldr	r7, [r4, #0]
 80046fc:	4638      	mov	r0, r7
 80046fe:	f7fb fd67 	bl	80001d0 <strlen>
 8004702:	4b7b      	ldr	r3, [pc, #492]	; (80048f0 <write2Flash+0x364>)
 8004704:	f8d3 8000 	ldr.w	r8, [r3]
 8004708:	4681      	mov	r9, r0
 800470a:	4640      	mov	r0, r8
 800470c:	f7fb fd60 	bl	80001d0 <strlen>
 8004710:	4641      	mov	r1, r8
 8004712:	4602      	mov	r2, r0
 8004714:	eb07 0009 	add.w	r0, r7, r9
 8004718:	f002 f87a 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800471c:	6827      	ldr	r7, [r4, #0]
 800471e:	4638      	mov	r0, r7
 8004720:	f7fb fd56 	bl	80001d0 <strlen>
 8004724:	7833      	ldrb	r3, [r6, #0]
 8004726:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 8004728:	6827      	ldr	r7, [r4, #0]
 800472a:	4638      	mov	r0, r7
 800472c:	f7fb fd50 	bl	80001d0 <strlen>
 8004730:	4b70      	ldr	r3, [pc, #448]	; (80048f4 <write2Flash+0x368>)
 8004732:	f8d3 8000 	ldr.w	r8, [r3]
 8004736:	4681      	mov	r9, r0
 8004738:	4640      	mov	r0, r8
 800473a:	f7fb fd49 	bl	80001d0 <strlen>
 800473e:	4641      	mov	r1, r8
 8004740:	4602      	mov	r2, r0
 8004742:	eb07 0009 	add.w	r0, r7, r9
 8004746:	f002 f863 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 800474a:	6827      	ldr	r7, [r4, #0]
 800474c:	4638      	mov	r0, r7
 800474e:	f7fb fd3f 	bl	80001d0 <strlen>
 8004752:	7833      	ldrb	r3, [r6, #0]
 8004754:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8004756:	6827      	ldr	r7, [r4, #0]
 8004758:	4638      	mov	r0, r7
 800475a:	f7fb fd39 	bl	80001d0 <strlen>
 800475e:	4b66      	ldr	r3, [pc, #408]	; (80048f8 <write2Flash+0x36c>)
 8004760:	f8d3 8000 	ldr.w	r8, [r3]
 8004764:	4681      	mov	r9, r0
 8004766:	4640      	mov	r0, r8
 8004768:	f7fb fd32 	bl	80001d0 <strlen>
 800476c:	4641      	mov	r1, r8
 800476e:	4602      	mov	r2, r0
 8004770:	eb07 0009 	add.w	r0, r7, r9
 8004774:	f002 f84c 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8004778:	6827      	ldr	r7, [r4, #0]
 800477a:	4638      	mov	r0, r7
 800477c:	f7fb fd28 	bl	80001d0 <strlen>
 8004780:	7833      	ldrb	r3, [r6, #0]
 8004782:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8004784:	6827      	ldr	r7, [r4, #0]
 8004786:	4638      	mov	r0, r7
 8004788:	f7fb fd22 	bl	80001d0 <strlen>
 800478c:	4b5b      	ldr	r3, [pc, #364]	; (80048fc <write2Flash+0x370>)
 800478e:	f8d3 8000 	ldr.w	r8, [r3]
 8004792:	4681      	mov	r9, r0
 8004794:	4640      	mov	r0, r8
 8004796:	f7fb fd1b 	bl	80001d0 <strlen>
 800479a:	4641      	mov	r1, r8
 800479c:	4602      	mov	r2, r0
 800479e:	eb07 0009 	add.w	r0, r7, r9
 80047a2:	f002 f835 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80047a6:	6827      	ldr	r7, [r4, #0]
 80047a8:	4638      	mov	r0, r7
 80047aa:	f7fb fd11 	bl	80001d0 <strlen>
 80047ae:	7833      	ldrb	r3, [r6, #0]
 80047b0:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 80047b2:	6827      	ldr	r7, [r4, #0]
 80047b4:	4638      	mov	r0, r7
 80047b6:	f7fb fd0b 	bl	80001d0 <strlen>
 80047ba:	4b51      	ldr	r3, [pc, #324]	; (8004900 <write2Flash+0x374>)
 80047bc:	f8d3 8000 	ldr.w	r8, [r3]
 80047c0:	4681      	mov	r9, r0
 80047c2:	4640      	mov	r0, r8
 80047c4:	f7fb fd04 	bl	80001d0 <strlen>
 80047c8:	4641      	mov	r1, r8
 80047ca:	4602      	mov	r2, r0
 80047cc:	eb07 0009 	add.w	r0, r7, r9
 80047d0:	f002 f81e 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 80047d4:	6827      	ldr	r7, [r4, #0]
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7fb fcfa 	bl	80001d0 <strlen>
 80047dc:	7833      	ldrb	r3, [r6, #0]
 80047de:	543b      	strb	r3, [r7, r0]
		if(valve_state == valve_OPEN){
 80047e0:	4a48      	ldr	r2, [pc, #288]	; (8004904 <write2Flash+0x378>)
 80047e2:	4b49      	ldr	r3, [pc, #292]	; (8004908 <write2Flash+0x37c>)
 80047e4:	6816      	ldr	r6, [r2, #0]
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80047e6:	6827      	ldr	r7, [r4, #0]
		if(valve_state == valve_OPEN){
 80047e8:	429e      	cmp	r6, r3
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80047ea:	4638      	mov	r0, r7
		if(valve_state == valve_OPEN){
 80047ec:	f000 80dd 	beq.w	80049aa <write2Flash+0x41e>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 80047f0:	f7fb fcee 	bl	80001d0 <strlen>
 80047f4:	4680      	mov	r8, r0
 80047f6:	4630      	mov	r0, r6
 80047f8:	f7fb fcea 	bl	80001d0 <strlen>
 80047fc:	4631      	mov	r1, r6
 80047fe:	4602      	mov	r2, r0
 8004800:	eb07 0008 	add.w	r0, r7, r8
 8004804:	f002 f804 	bl	8006810 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 8004808:	6826      	ldr	r6, [r4, #0]
 800480a:	4630      	mov	r0, r6
 800480c:	f7fb fce0 	bl	80001d0 <strlen>
 8004810:	4b3e      	ldr	r3, [pc, #248]	; (800490c <write2Flash+0x380>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	5233      	strh	r3, [r6, r0]
		if(log_counter == 0){
 8004816:	782b      	ldrb	r3, [r5, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8089 	beq.w	8004930 <write2Flash+0x3a4>
			HAL_FLASH_Unlock();
 800481e:	f7fd f8d1 	bl	80019c4 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009000+64*log_counter, *((uint64_t*)(flash_stored)) );
 8004822:	7829      	ldrb	r1, [r5, #0]
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800482a:	f501 7110 	add.w	r1, r1, #576	; 0x240
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	0189      	lsls	r1, r1, #6
 8004834:	2003      	movs	r0, #3
 8004836:	f7fc fff9 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009008+64*log_counter, *((uint64_t*)(flash_stored)+1) );
 800483a:	7828      	ldrb	r0, [r5, #0]
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	4934      	ldr	r1, [pc, #208]	; (8004910 <write2Flash+0x384>)
 8004840:	2640      	movs	r6, #64	; 0x40
 8004842:	fb06 1100 	mla	r1, r6, r0, r1
 8004846:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800484a:	2003      	movs	r0, #3
 800484c:	f7fc ffee 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009010+64*log_counter, *((uint64_t*)(flash_stored)+2) );
 8004850:	7829      	ldrb	r1, [r5, #0]
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <write2Flash+0x388>)
 8004856:	2003      	movs	r0, #3
 8004858:	fb06 2101 	mla	r1, r6, r1, r2
 800485c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004860:	f7fc ffe4 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009018+64*log_counter, *((uint64_t*)(flash_stored)+3) );
 8004864:	7829      	ldrb	r1, [r5, #0]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	4a2b      	ldr	r2, [pc, #172]	; (8004918 <write2Flash+0x38c>)
 800486a:	2003      	movs	r0, #3
 800486c:	fb06 2101 	mla	r1, r6, r1, r2
 8004870:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004874:	f7fc ffda 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009020+64*log_counter, *((uint64_t*)(flash_stored)+4) );
 8004878:	7829      	ldrb	r1, [r5, #0]
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <write2Flash+0x390>)
 800487e:	2003      	movs	r0, #3
 8004880:	fb06 2101 	mla	r1, r6, r1, r2
 8004884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004888:	f7fc ffd0 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009028+64*log_counter, *((uint64_t*)(flash_stored)+5) );
 800488c:	7829      	ldrb	r1, [r5, #0]
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	4a23      	ldr	r2, [pc, #140]	; (8004920 <write2Flash+0x394>)
 8004892:	2003      	movs	r0, #3
 8004894:	fb06 2101 	mla	r1, r6, r1, r2
 8004898:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800489c:	f7fc ffc6 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009030+64*log_counter, *((uint64_t*)(flash_stored)+6) );
 80048a0:	7829      	ldrb	r1, [r5, #0]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <write2Flash+0x398>)
 80048a6:	2003      	movs	r0, #3
 80048a8:	fb06 2101 	mla	r1, r6, r1, r2
 80048ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80048b0:	f7fc ffbc 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009038+64*log_counter, *((uint64_t*)(flash_stored)+7) );
 80048b4:	7829      	ldrb	r1, [r5, #0]
 80048b6:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <write2Flash+0x39c>)
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	fb06 2101 	mla	r1, r6, r1, r2
 80048be:	2003      	movs	r0, #3
 80048c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80048c4:	f7fc ffb2 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80048c8:	f7fd f88e 	bl	80019e8 <HAL_FLASH_Lock>
 80048cc:	e665      	b.n	800459a <write2Flash+0xe>
 80048ce:	bf00      	nop
 80048d0:	2000001b 	.word	0x2000001b
 80048d4:	200004a8 	.word	0x200004a8
 80048d8:	20000298 	.word	0x20000298
 80048dc:	20000004 	.word	0x20000004
 80048e0:	200002ec 	.word	0x200002ec
 80048e4:	20000284 	.word	0x20000284
 80048e8:	2000001c 	.word	0x2000001c
 80048ec:	20000280 	.word	0x20000280
 80048f0:	20000314 	.word	0x20000314
 80048f4:	20000274 	.word	0x20000274
 80048f8:	2000029c 	.word	0x2000029c
 80048fc:	200002f8 	.word	0x200002f8
 8004900:	200002b0 	.word	0x200002b0
 8004904:	20000308 	.word	0x20000308
 8004908:	20000054 	.word	0x20000054
 800490c:	20000008 	.word	0x20000008
 8004910:	08009008 	.word	0x08009008
 8004914:	08009010 	.word	0x08009010
 8004918:	08009018 	.word	0x08009018
 800491c:	08009020 	.word	0x08009020
 8004920:	08009028 	.word	0x08009028
 8004924:	08009030 	.word	0x08009030
 8004928:	08009038 	.word	0x08009038
 800492c:	200002f4 	.word	0x200002f4
			HAL_FLASH_Unlock();
 8004930:	f7fd f848 	bl	80019c4 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009000, *((uint64_t*)(flash_stored)) );
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	4923      	ldr	r1, [pc, #140]	; (80049c4 <write2Flash+0x438>)
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	2003      	movs	r0, #3
 800493e:	f7fc ff75 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009008, *((uint64_t*)(flash_stored)+1) );
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	4920      	ldr	r1, [pc, #128]	; (80049c8 <write2Flash+0x43c>)
 8004946:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800494a:	2003      	movs	r0, #3
 800494c:	f7fc ff6e 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009010, *((uint64_t*)(flash_stored)+2) );
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	491e      	ldr	r1, [pc, #120]	; (80049cc <write2Flash+0x440>)
 8004954:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004958:	2003      	movs	r0, #3
 800495a:	f7fc ff67 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009018, *((uint64_t*)(flash_stored)+3) );
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	491b      	ldr	r1, [pc, #108]	; (80049d0 <write2Flash+0x444>)
 8004962:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004966:	2003      	movs	r0, #3
 8004968:	f7fc ff60 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009020, *((uint64_t*)(flash_stored)+4) );
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	4919      	ldr	r1, [pc, #100]	; (80049d4 <write2Flash+0x448>)
 8004970:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004974:	2003      	movs	r0, #3
 8004976:	f7fc ff59 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009028, *((uint64_t*)(flash_stored)+5) );
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	4916      	ldr	r1, [pc, #88]	; (80049d8 <write2Flash+0x44c>)
 800497e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004982:	2003      	movs	r0, #3
 8004984:	f7fc ff52 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009030, *((uint64_t*)(flash_stored)+6) );
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	4914      	ldr	r1, [pc, #80]	; (80049dc <write2Flash+0x450>)
 800498c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004990:	2003      	movs	r0, #3
 8004992:	f7fc ff4b 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08009038, *((uint64_t*)(flash_stored)+7) );
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	4911      	ldr	r1, [pc, #68]	; (80049e0 <write2Flash+0x454>)
 800499a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800499e:	2003      	movs	r0, #3
 80049a0:	f7fc ff44 	bl	800182c <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80049a4:	f7fd f820 	bl	80019e8 <HAL_FLASH_Lock>
 80049a8:	e5f7      	b.n	800459a <write2Flash+0xe>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 80049aa:	f7fb fc11 	bl	80001d0 <strlen>
 80049ae:	4680      	mov	r8, r0
 80049b0:	4630      	mov	r0, r6
 80049b2:	f7fb fc0d 	bl	80001d0 <strlen>
 80049b6:	4631      	mov	r1, r6
 80049b8:	1e42      	subs	r2, r0, #1
 80049ba:	eb07 0008 	add.w	r0, r7, r8
 80049be:	f001 ff27 	bl	8006810 <memcpy>
 80049c2:	e721      	b.n	8004808 <write2Flash+0x27c>
 80049c4:	08009000 	.word	0x08009000
 80049c8:	08009008 	.word	0x08009008
 80049cc:	08009010 	.word	0x08009010
 80049d0:	08009018 	.word	0x08009018
 80049d4:	08009020 	.word	0x08009020
 80049d8:	08009028 	.word	0x08009028
 80049dc:	08009030 	.word	0x08009030
 80049e0:	08009038 	.word	0x08009038

080049e4 <logPosition>:
}


void logPosition(){
	uint32_t* mem = (uint32_t*)(0x08009000);
	while(*mem != 0xFFFFFFFF){
 80049e4:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <logPosition+0x2c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	d00f      	beq.n	8004a0c <logPosition+0x28>
 80049ec:	4909      	ldr	r1, [pc, #36]	; (8004a14 <logPosition+0x30>)
 80049ee:	780a      	ldrb	r2, [r1, #0]
		log_counter += 1;
 80049f0:	3201      	adds	r2, #1
 80049f2:	b2d2      	uxtb	r2, r2
		mem = (uint32_t*)(0x08009000 + 64*log_counter);
 80049f4:	f502 1300 	add.w	r3, r2, #2097152	; 0x200000
 80049f8:	f503 7310 	add.w	r3, r3, #576	; 0x240
	while(*mem != 0xFFFFFFFF){
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	d1f5      	bne.n	80049f0 <logPosition+0xc>
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <logPosition+0x34>)
 8004a06:	700a      	strb	r2, [r1, #0]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	08009000 	.word	0x08009000
 8004a14:	200002bd 	.word	0x200002bd
 8004a18:	2000001b 	.word	0x2000001b

08004a1c <HAL_UART_RxCpltCallback>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004a1c:	b410      	push	{r4}
	rx_flag = 1;
 8004a1e:	4c05      	ldr	r4, [pc, #20]	; (8004a34 <HAL_UART_RxCpltCallback+0x18>)
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004a20:	4905      	ldr	r1, [pc, #20]	; (8004a38 <HAL_UART_RxCpltCallback+0x1c>)
 8004a22:	4806      	ldr	r0, [pc, #24]	; (8004a3c <HAL_UART_RxCpltCallback+0x20>)
	rx_flag = 1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004a28:	461a      	mov	r2, r3

}
 8004a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004a2e:	f7ff b96b 	b.w	8003d08 <HAL_UART_Receive_IT>
 8004a32:	bf00      	nop
 8004a34:	200002de 	.word	0x200002de
 8004a38:	200005a4 	.word	0x200005a4
 8004a3c:	20000438 	.word	0x20000438

08004a40 <HAL_RTCEx_WakeUpTimerEventCallback>:
 8004a40:	4b01      	ldr	r3, [pc, #4]	; (8004a48 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	4770      	bx	lr
 8004a48:	200002dc 	.word	0x200002dc

08004a4c <HAL_I2C_MemTxCpltCallback>:
 8004a4c:	4b01      	ldr	r3, [pc, #4]	; (8004a54 <HAL_I2C_MemTxCpltCallback+0x8>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	4770      	bx	lr
 8004a54:	200002dc 	.word	0x200002dc

08004a58 <HAL_I2C_MemRxCpltCallback>:
 8004a58:	4b01      	ldr	r3, [pc, #4]	; (8004a60 <HAL_I2C_MemRxCpltCallback+0x8>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	4770      	bx	lr
 8004a60:	200002dc 	.word	0x200002dc

08004a64 <HAL_I2C_MasterRxCpltCallback>:
	rtcSecFlag = 1; // Flag to indicate 1 second period

}

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
	rtcSecFlag = 1; // Flag to indicate 1 second period
 8004a64:	4b01      	ldr	r3, [pc, #4]	; (8004a6c <HAL_I2C_MasterRxCpltCallback+0x8>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	4770      	bx	lr
 8004a6c:	200002dc 	.word	0x200002dc

08004a70 <HAL_GPIO_EXTI_Callback>:
////	pump_flag = 0;
////	HAL_TIM_Base_Stop_IT(&htim2);
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_6){
 8004a70:	2840      	cmp	r0, #64	; 0x40
 8004a72:	d102      	bne.n	8004a7a <HAL_GPIO_EXTI_Callback+0xa>
		pump_flag = 1;
 8004a74:	4b01      	ldr	r3, [pc, #4]	; (8004a7c <HAL_GPIO_EXTI_Callback+0xc>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	4770      	bx	lr
 8004a7c:	200002cc 	.word	0x200002cc

08004a80 <heating_control>:
		}
	}
}


void heating_control(){
 8004a80:	b430      	push	{r4, r5}

	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 4) ) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a82:	4c1c      	ldr	r4, [pc, #112]	; (8004af4 <heating_control+0x74>)
 8004a84:	4d1c      	ldr	r5, [pc, #112]	; (8004af8 <heating_control+0x78>)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	42ab      	cmp	r3, r5
 8004a8a:	d004      	beq.n	8004a96 <heating_control+0x16>
	}
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <heating_control+0x7c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d011      	beq.n	8004ab6 <heating_control+0x36>
	}
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
		heater_state = heater_ON;
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
	}
}
 8004a92:	bc30      	pop	{r4, r5}
 8004a94:	4770      	bx	lr
	if( (heater_state == heater_OFF) && !(geyser_temp_int < (*set_temp - 4) ) && !(geyser_temp_int > (*set_temp+4 ))){
 8004a96:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <heating_control+0x80>)
 8004a98:	491a      	ldr	r1, [pc, #104]	; (8004b04 <heating_control+0x84>)
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	7808      	ldrb	r0, [r1, #0]
 8004a9e:	7811      	ldrb	r1, [r2, #0]
 8004aa0:	1f0a      	subs	r2, r1, #4
 8004aa2:	4290      	cmp	r0, r2
 8004aa4:	db1a      	blt.n	8004adc <heating_control+0x5c>
		heater_state = heater_OFF;
 8004aa6:	6025      	str	r5, [r4, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004aae:	4816      	ldr	r0, [pc, #88]	; (8004b08 <heating_control+0x88>)
}
 8004ab0:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004ab2:	f7fd b88d 	b.w	8001bd0 <HAL_GPIO_WritePin>
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && !(geyser_temp_int > (*set_temp+4 ))){
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <heating_control+0x80>)
 8004ab8:	4912      	ldr	r1, [pc, #72]	; (8004b04 <heating_control+0x84>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	7808      	ldrb	r0, [r1, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	1f19      	subs	r1, r3, #4
 8004ac2:	4288      	cmp	r0, r1
 8004ac4:	db11      	blt.n	8004aea <heating_control+0x6a>
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4298      	cmp	r0, r3
 8004aca:	dcec      	bgt.n	8004aa6 <heating_control+0x26>
		heater_state = heater_ON;
 8004acc:	6022      	str	r2, [r4, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004ace:	480e      	ldr	r0, [pc, #56]	; (8004b08 <heating_control+0x88>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 8004ad6:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004ad8:	f7fd b87a 	b.w	8001bd0 <HAL_GPIO_WritePin>
	else if( (heater_state == heater_OFF) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
 8004adc:	1d0a      	adds	r2, r1, #4
 8004ade:	4290      	cmp	r0, r2
 8004ae0:	4a06      	ldr	r2, [pc, #24]	; (8004afc <heating_control+0x7c>)
 8004ae2:	ddf3      	ble.n	8004acc <heating_control+0x4c>
	else if( (heater_state == heater_ON) && !(geyser_temp_int < (*set_temp - 4 )) && !(geyser_temp_int > (*set_temp+4 ))){
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d1d4      	bne.n	8004a92 <heating_control+0x12>
 8004ae8:	460b      	mov	r3, r1
	else if( (heater_state == heater_ON) && (geyser_temp_int < (*set_temp - 4)) && !(geyser_temp_int > (*set_temp+4 ))){
 8004aea:	3304      	adds	r3, #4
 8004aec:	4298      	cmp	r0, r3
 8004aee:	dcd0      	bgt.n	8004a92 <heating_control+0x12>
 8004af0:	e7ec      	b.n	8004acc <heating_control+0x4c>
 8004af2:	bf00      	nop
 8004af4:	200002b0 	.word	0x200002b0
 8004af8:	20000014 	.word	0x20000014
 8004afc:	20000018 	.word	0x20000018
 8004b00:	200002e4 	.word	0x200002e4
 8004b04:	200002a0 	.word	0x200002a0
 8004b08:	48000400 	.word	0x48000400

08004b0c <heating_scheduling>:
void heating_scheduling(){
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(auto_heating == 1){
 8004b0e:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <heating_scheduling+0xa4>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d000      	beq.n	8004b18 <heating_scheduling+0xc>
 8004b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		RTC_in_seconds = timeOfRTC->Hours*3600 + timeOfRTC->Minutes*60 +timeOfRTC->Seconds;
 8004b18:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <heating_scheduling+0xa8>)
		if( (time_intervals[1] > time_intervals[0] )){ // no overlapping days
 8004b1a:	4c27      	ldr	r4, [pc, #156]	; (8004bb8 <heating_scheduling+0xac>)
		RTC_in_seconds = timeOfRTC->Hours*3600 + timeOfRTC->Minutes*60 +timeOfRTC->Seconds;
 8004b1c:	6819      	ldr	r1, [r3, #0]
		if( (time_intervals[1] > time_intervals[0] )){ // no overlapping days
 8004b1e:	6860      	ldr	r0, [r4, #4]
		RTC_in_seconds = timeOfRTC->Hours*3600 + timeOfRTC->Minutes*60 +timeOfRTC->Seconds;
 8004b20:	784a      	ldrb	r2, [r1, #1]
 8004b22:	780b      	ldrb	r3, [r1, #0]
 8004b24:	788e      	ldrb	r6, [r1, #2]
		if( (time_intervals[1] > time_intervals[0] )){ // no overlapping days
 8004b26:	6821      	ldr	r1, [r4, #0]
		RTC_in_seconds = timeOfRTC->Hours*3600 + timeOfRTC->Minutes*60 +timeOfRTC->Seconds;
 8004b28:	4d24      	ldr	r5, [pc, #144]	; (8004bbc <heating_scheduling+0xb0>)
 8004b2a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	f44f 6761 	mov.w	r7, #3600	; 0xe10
 8004b34:	fb07 2303 	mla	r3, r7, r3, r2
 8004b38:	4433      	add	r3, r6
		if( (time_intervals[1] > time_intervals[0] )){ // no overlapping days
 8004b3a:	4288      	cmp	r0, r1
		RTC_in_seconds = timeOfRTC->Hours*3600 + timeOfRTC->Minutes*60 +timeOfRTC->Seconds;
 8004b3c:	602b      	str	r3, [r5, #0]
		if( (time_intervals[1] > time_intervals[0] )){ // no overlapping days
 8004b3e:	d919      	bls.n	8004b74 <heating_scheduling+0x68>
			if (RTC_in_seconds > time_intervals[0] && RTC_in_seconds < time_intervals[1]){
 8004b40:	428b      	cmp	r3, r1
 8004b42:	d901      	bls.n	8004b48 <heating_scheduling+0x3c>
 8004b44:	4283      	cmp	r3, r0
 8004b46:	d31a      	bcc.n	8004b7e <heating_scheduling+0x72>
		if( (time_intervals[3] > time_intervals[2])){ // no overlapping days
 8004b48:	68e2      	ldr	r2, [r4, #12]
 8004b4a:	68a3      	ldr	r3, [r4, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d91c      	bls.n	8004b8a <heating_scheduling+0x7e>
			if (RTC_in_seconds > time_intervals[2] && RTC_in_seconds < time_intervals[3]){
 8004b50:	6829      	ldr	r1, [r5, #0]
 8004b52:	428b      	cmp	r3, r1
 8004b54:	d201      	bcs.n	8004b5a <heating_scheduling+0x4e>
 8004b56:	428a      	cmp	r2, r1
 8004b58:	d81d      	bhi.n	8004b96 <heating_scheduling+0x8a>
		if( (time_intervals[5] > time_intervals[4] )){ // no overlapping days
 8004b5a:	6962      	ldr	r2, [r4, #20]
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d91f      	bls.n	8004ba2 <heating_scheduling+0x96>
			if ( (RTC_in_seconds > time_intervals[4]) && RTC_in_seconds < time_intervals[5]){
 8004b62:	6829      	ldr	r1, [r5, #0]
 8004b64:	428b      	cmp	r3, r1
 8004b66:	d2d6      	bcs.n	8004b16 <heating_scheduling+0xa>
 8004b68:	428a      	cmp	r2, r1
 8004b6a:	d9d4      	bls.n	8004b16 <heating_scheduling+0xa>
}
 8004b6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				heating_control();
 8004b70:	f7ff bf86 	b.w	8004a80 <heating_control>
		else if((time_intervals[1] - time_intervals[0] ) != 0){	// overlapping
 8004b74:	d0e8      	beq.n	8004b48 <heating_scheduling+0x3c>
			if( !( (RTC_in_seconds>time_intervals[1]) && (RTC_in_seconds< time_intervals[0]) )){
 8004b76:	4283      	cmp	r3, r0
 8004b78:	d901      	bls.n	8004b7e <heating_scheduling+0x72>
 8004b7a:	428b      	cmp	r3, r1
 8004b7c:	d3e4      	bcc.n	8004b48 <heating_scheduling+0x3c>
				heating_control();
 8004b7e:	f7ff ff7f 	bl	8004a80 <heating_control>
		if( (time_intervals[3] > time_intervals[2])){ // no overlapping days
 8004b82:	68e2      	ldr	r2, [r4, #12]
 8004b84:	68a3      	ldr	r3, [r4, #8]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d8e2      	bhi.n	8004b50 <heating_scheduling+0x44>
		else if( (time_intervals[3] - time_intervals[2]) != 0 ){	// overlapping
 8004b8a:	d0e6      	beq.n	8004b5a <heating_scheduling+0x4e>
			if( !(RTC_in_seconds>time_intervals[3] && RTC_in_seconds< time_intervals[2] )){
 8004b8c:	6829      	ldr	r1, [r5, #0]
 8004b8e:	428a      	cmp	r2, r1
 8004b90:	d201      	bcs.n	8004b96 <heating_scheduling+0x8a>
 8004b92:	428b      	cmp	r3, r1
 8004b94:	d8e1      	bhi.n	8004b5a <heating_scheduling+0x4e>
				heating_control();
 8004b96:	f7ff ff73 	bl	8004a80 <heating_control>
		if( (time_intervals[5] > time_intervals[4] )){ // no overlapping days
 8004b9a:	6962      	ldr	r2, [r4, #20]
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d8df      	bhi.n	8004b62 <heating_scheduling+0x56>
		else if( (time_intervals[5] - time_intervals[4] ) != 0){	// overlapping
 8004ba2:	d0b8      	beq.n	8004b16 <heating_scheduling+0xa>
			if( !(RTC_in_seconds>time_intervals[5] && RTC_in_seconds< time_intervals[4] )){
 8004ba4:	6829      	ldr	r1, [r5, #0]
 8004ba6:	428a      	cmp	r2, r1
 8004ba8:	d2e0      	bcs.n	8004b6c <heating_scheduling+0x60>
 8004baa:	428b      	cmp	r3, r1
 8004bac:	d9de      	bls.n	8004b6c <heating_scheduling+0x60>
 8004bae:	e7b2      	b.n	8004b16 <heating_scheduling+0xa>
 8004bb0:	20000278 	.word	0x20000278
 8004bb4:	200002f4 	.word	0x200002f4
 8004bb8:	200005a8 	.word	0x200005a8
 8004bbc:	2000024c 	.word	0x2000024c

08004bc0 <handleEvents>:


	return 1;
}

void handleEvents(void){
 8004bc0:	b410      	push	{r4}
//		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){};
//		HAL_I2C_Mem_Read_IT( &hi2c1, IQS263_ADD, 0x03, I2C_MEMADD_SIZE_8BIT,  &recv_buffer[2],1,1);

			  // do something

		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <handleEvents+0x68>)
		display_set_temp = 0;
 8004bc4:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <handleEvents+0x6c>)
		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 8004bc6:	789b      	ldrb	r3, [r3, #2]
		display_set_temp = 0;
 8004bc8:	2100      	movs	r1, #0
		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 8004bca:	2b03      	cmp	r3, #3
		display_set_temp = 0;
 8004bcc:	7011      	strb	r1, [r2, #0]
		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 8004bce:	d01a      	beq.n	8004c06 <handleEvents+0x46>
				*set_temp -= 1;
				display_set_temp = 1;
				touch_flag = 1;
			}
		}
		else if(recv_buffer[2]== 0x05 && touch_flag == 0)	// middle position on slider
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d011      	beq.n	8004bf8 <handleEvents+0x38>
		{
			display_set_temp = 1;
		}


		else if (recv_buffer[2]== 0x09 && touch_flag == 0)	// right most position on slider
 8004bd4:	2b09      	cmp	r3, #9
 8004bd6:	d10c      	bne.n	8004bf2 <handleEvents+0x32>
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <handleEvents+0x70>)
 8004bda:	7819      	ldrb	r1, [r3, #0]
 8004bdc:	b949      	cbnz	r1, 8004bf2 <handleEvents+0x32>
		{
			if(*set_temp +1 <= 100){
 8004bde:	4915      	ldr	r1, [pc, #84]	; (8004c34 <handleEvents+0x74>)
 8004be0:	6808      	ldr	r0, [r1, #0]
 8004be2:	7801      	ldrb	r1, [r0, #0]
 8004be4:	2963      	cmp	r1, #99	; 0x63
 8004be6:	dc04      	bgt.n	8004bf2 <handleEvents+0x32>
				*set_temp += 1;
				display_set_temp = 1;
 8004be8:	2401      	movs	r4, #1
				*set_temp += 1;
 8004bea:	3101      	adds	r1, #1
 8004bec:	7001      	strb	r1, [r0, #0]
				display_set_temp = 1;
 8004bee:	7014      	strb	r4, [r2, #0]
				touch_flag = 1;
 8004bf0:	701c      	strb	r4, [r3, #0]
			}
		}
		else{
			display_set_temp = 0;
		}
}
 8004bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bf6:	4770      	bx	lr
		else if(recv_buffer[2]== 0x05 && touch_flag == 0)	// middle position on slider
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <handleEvents+0x70>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f8      	bne.n	8004bf2 <handleEvents+0x32>
			display_set_temp = 1;
 8004c00:	2301      	movs	r3, #1
 8004c02:	7013      	strb	r3, [r2, #0]
 8004c04:	e7f5      	b.n	8004bf2 <handleEvents+0x32>
		if(recv_buffer[2]== 0x03 && touch_flag == 0) // most left position on slider
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <handleEvents+0x70>)
 8004c08:	7819      	ldrb	r1, [r3, #0]
 8004c0a:	2900      	cmp	r1, #0
 8004c0c:	d1f1      	bne.n	8004bf2 <handleEvents+0x32>
			if(*set_temp - 1 >= 0 ){
 8004c0e:	4909      	ldr	r1, [pc, #36]	; (8004c34 <handleEvents+0x74>)
 8004c10:	6808      	ldr	r0, [r1, #0]
 8004c12:	7801      	ldrb	r1, [r0, #0]
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d0ec      	beq.n	8004bf2 <handleEvents+0x32>
				display_set_temp = 1;
 8004c18:	2401      	movs	r4, #1
				*set_temp -= 1;
 8004c1a:	3901      	subs	r1, #1
 8004c1c:	7001      	strb	r1, [r0, #0]
				display_set_temp = 1;
 8004c1e:	7014      	strb	r4, [r2, #0]
				touch_flag = 1;
 8004c20:	701c      	strb	r4, [r3, #0]
}
 8004c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	200005c0 	.word	0x200005c0
 8004c2c:	20000288 	.word	0x20000288
 8004c30:	20000048 	.word	0x20000048
 8004c34:	200002e4 	.word	0x200002e4

08004c38 <init_peripherals>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 8004c38:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	2120      	movs	r1, #32
 8004c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c42:	f7fc ffc5 	bl	8001bd0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 8004c46:	2201      	movs	r2, #1
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004c4e:	4c84      	ldr	r4, [pc, #528]	; (8004e60 <init_peripherals+0x228>)
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 8004c50:	f7fc ffbe 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 8004c54:	2201      	movs	r2, #1
 8004c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c5e:	f7fc ffb7 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 8004c62:	2201      	movs	r2, #1
 8004c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c6c:	f7fc ffb0 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004c70:	4620      	mov	r0, r4
 8004c72:	2201      	movs	r2, #1
 8004c74:	2108      	movs	r1, #8
 8004c76:	f7fc ffab 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	2110      	movs	r1, #16
 8004c80:	f7fc ffa6 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004c84:	4620      	mov	r0, r4
 8004c86:	2201      	movs	r2, #1
 8004c88:	2120      	movs	r1, #32
 8004c8a:	f7fc ffa1 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 8004c8e:	4620      	mov	r0, r4
 8004c90:	2201      	movs	r2, #1
 8004c92:	2140      	movs	r1, #64	; 0x40
 8004c94:	f7fc ff9c 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004c98:	4620      	mov	r0, r4
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ca0:	f7fc ff96 	bl	8001bd0 <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	486e      	ldr	r0, [pc, #440]	; (8004e64 <init_peripherals+0x22c>)
 8004caa:	f7fc ff91 	bl	8001bd0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 8004cae:	4620      	mov	r0, r4
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cb6:	f7fc ff8b 	bl	8001bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cc2:	f7fc ff85 	bl	8001bd0 <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	200f      	movs	r0, #15
 8004cca:	f001 fd53 	bl	8006774 <calloc>
 8004cce:	4b66      	ldr	r3, [pc, #408]	; (8004e68 <init_peripherals+0x230>)
	uart_command_copy = (uint8_t*)malloc(60);
	memset(uart_command, 0x00, 60);



	set_temp = (uint8_t*)malloc(4);
 8004cd0:	4c66      	ldr	r4, [pc, #408]	; (8004e6c <init_peripherals+0x234>)
	studentnumber = (uint8_t*)malloc(15);
 8004cd2:	6018      	str	r0, [r3, #0]
	return_value = (uint8_t*)malloc(50);
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	2032      	movs	r0, #50	; 0x32
 8004cd8:	f001 fd4c 	bl	8006774 <calloc>
 8004cdc:	4b64      	ldr	r3, [pc, #400]	; (8004e70 <init_peripherals+0x238>)
	uart_command = (uint8_t*)malloc(60);
 8004cde:	2101      	movs	r1, #1
	return_value = (uint8_t*)malloc(50);
 8004ce0:	6018      	str	r0, [r3, #0]
	uart_command = (uint8_t*)malloc(60);
 8004ce2:	203c      	movs	r0, #60	; 0x3c
 8004ce4:	f001 fd46 	bl	8006774 <calloc>
 8004ce8:	4b62      	ldr	r3, [pc, #392]	; (8004e74 <init_peripherals+0x23c>)
 8004cea:	6018      	str	r0, [r3, #0]
	uart_command_copy = (uint8_t*)malloc(60);
 8004cec:	203c      	movs	r0, #60	; 0x3c
 8004cee:	f001 fd87 	bl	8006800 <malloc>
 8004cf2:	4b61      	ldr	r3, [pc, #388]	; (8004e78 <init_peripherals+0x240>)
	set_temp = (uint8_t*)malloc(4);
 8004cf4:	2101      	movs	r1, #1
	uart_command_copy = (uint8_t*)malloc(60);
 8004cf6:	6018      	str	r0, [r3, #0]
	set_temp = (uint8_t*)malloc(4);
 8004cf8:	2004      	movs	r0, #4
 8004cfa:	f001 fd3b 	bl	8006774 <calloc>
 8004cfe:	4603      	mov	r3, r0
	memset(set_temp, 0x00, 4);
	*set_temp = 50;
 8004d00:	2232      	movs	r2, #50	; 0x32
 8004d02:	701a      	strb	r2, [r3, #0]
//	segment_val =set_temp;
	//	  memset(segment_val, 0x00, 4);
	segment_val = (char*)malloc(4);
 8004d04:	2101      	movs	r1, #1
 8004d06:	2004      	movs	r0, #4
	set_temp = (uint8_t*)malloc(4);
 8004d08:	6023      	str	r3, [r4, #0]
	segment_val = (char*)malloc(4);
 8004d0a:	f001 fd33 	bl	8006774 <calloc>
 8004d0e:	4b5b      	ldr	r3, [pc, #364]	; (8004e7c <init_peripherals+0x244>)
	memset(segment_val, 0x00, 4);
//
	temp_val = (char*)malloc(4);
 8004d10:	2101      	movs	r1, #1
	segment_val = (char*)malloc(4);
 8004d12:	6018      	str	r0, [r3, #0]
	temp_val = (char*)malloc(4);
 8004d14:	2004      	movs	r0, #4
 8004d16:	f001 fd2d 	bl	8006774 <calloc>
 8004d1a:	4b59      	ldr	r3, [pc, #356]	; (8004e80 <init_peripherals+0x248>)
 8004d1c:	6018      	str	r0, [r3, #0]
	memset(temp_val, 0x00, 4);

	ADC1_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8004d1e:	2014      	movs	r0, #20
 8004d20:	f001 fd6e 	bl	8006800 <malloc>
 8004d24:	4603      	mov	r3, r0
	memset(ADC1_buffer, 0x00, 5);
 8004d26:	2400      	movs	r4, #0
	ADC1_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8004d28:	4a56      	ldr	r2, [pc, #344]	; (8004e84 <init_peripherals+0x24c>)
	memset(ADC1_buffer, 0x00, 5);
 8004d2a:	601c      	str	r4, [r3, #0]
 8004d2c:	711c      	strb	r4, [r3, #4]

	ADC2_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8004d2e:	2014      	movs	r0, #20
	ADC1_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8004d30:	6013      	str	r3, [r2, #0]
	ADC2_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8004d32:	f001 fd65 	bl	8006800 <malloc>
 8004d36:	4603      	mov	r3, r0
 8004d38:	4a53      	ldr	r2, [pc, #332]	; (8004e88 <init_peripherals+0x250>)
	memset(ADC2_buffer, 0x00, 5);
 8004d3a:	6004      	str	r4, [r0, #0]

	voltage_rms =(char*)malloc(3*sizeof(char));
 8004d3c:	2101      	movs	r1, #1
	memset(ADC2_buffer, 0x00, 5);
 8004d3e:	711c      	strb	r4, [r3, #4]
	voltage_rms =(char*)malloc(3*sizeof(char));
 8004d40:	2003      	movs	r0, #3
	ADC2_buffer = (uint32_t*)malloc(5*sizeof(uint32_t));
 8004d42:	6013      	str	r3, [r2, #0]
	voltage_rms =(char*)malloc(3*sizeof(char));
 8004d44:	f001 fd16 	bl	8006774 <calloc>
 8004d48:	4b50      	ldr	r3, [pc, #320]	; (8004e8c <init_peripherals+0x254>)
	memset(voltage_rms, 0x00, 3);

	current_rms =(char*)malloc(4*sizeof(char));
 8004d4a:	2101      	movs	r1, #1
	voltage_rms =(char*)malloc(3*sizeof(char));
 8004d4c:	6018      	str	r0, [r3, #0]
	current_rms =(char*)malloc(4*sizeof(char));
 8004d4e:	2004      	movs	r0, #4
 8004d50:	f001 fd10 	bl	8006774 <calloc>
 8004d54:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <init_peripherals+0x258>)
	memset(current_rms, 0x00, 4);

	total_water =(char*)malloc(20*sizeof(char));
 8004d56:	2101      	movs	r1, #1
	current_rms =(char*)malloc(4*sizeof(char));
 8004d58:	6018      	str	r0, [r3, #0]
	total_water =(char*)malloc(20*sizeof(char));
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	f001 fd0a 	bl	8006774 <calloc>
 8004d60:	4b4c      	ldr	r3, [pc, #304]	; (8004e94 <init_peripherals+0x25c>)
 8004d62:	6018      	str	r0, [r3, #0]
	memset(total_water, 0x00, 20);
//	total_water = "0";
//	sprintf(total_water,"%lu", water_acc);


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8004d64:	2010      	movs	r0, #16
 8004d66:	f001 fd4b 	bl	8006800 <malloc>
 8004d6a:	4b4b      	ldr	r3, [pc, #300]	; (8004e98 <init_peripherals+0x260>)
 8004d6c:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8004d6e:	2010      	movs	r0, #16
 8004d70:	f001 fd46 	bl	8006800 <malloc>
 8004d74:	4b49      	ldr	r3, [pc, #292]	; (8004e9c <init_peripherals+0x264>)
 8004d76:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 8004d78:	2004      	movs	r0, #4
 8004d7a:	f001 fd41 	bl	8006800 <malloc>
 8004d7e:	4b48      	ldr	r3, [pc, #288]	; (8004ea0 <init_peripherals+0x268>)
 8004d80:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 8004d82:	2004      	movs	r0, #4
 8004d84:	f001 fd3c 	bl	8006800 <malloc>
 8004d88:	4a46      	ldr	r2, [pc, #280]	; (8004ea4 <init_peripherals+0x26c>)

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 8004d8a:	4947      	ldr	r1, [pc, #284]	; (8004ea8 <init_peripherals+0x270>)

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 8004d8c:	4b47      	ldr	r3, [pc, #284]	; (8004eac <init_peripherals+0x274>)
	geyser_temp = (char*)malloc(4*sizeof(char));
 8004d8e:	6010      	str	r0, [r2, #0]
	heater_state = heater_OFF;
 8004d90:	4847      	ldr	r0, [pc, #284]	; (8004eb0 <init_peripherals+0x278>)
	valve_state = valve_CLOSE;
 8004d92:	4a48      	ldr	r2, [pc, #288]	; (8004eb4 <init_peripherals+0x27c>)
	heater_state = heater_OFF;
 8004d94:	6008      	str	r0, [r1, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 8004d96:	2101      	movs	r1, #1
 8004d98:	200f      	movs	r0, #15
	valve_state = valve_CLOSE;
 8004d9a:	601a      	str	r2, [r3, #0]
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 8004d9c:	f001 fcea 	bl	8006774 <calloc>
 8004da0:	4b45      	ldr	r3, [pc, #276]	; (8004eb8 <init_peripherals+0x280>)
 8004da2:	4606      	mov	r6, r0
	memset(heat_schedule1, 0x00, 15);
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 8004da4:	2101      	movs	r1, #1
 8004da6:	200f      	movs	r0, #15
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 8004da8:	601e      	str	r6, [r3, #0]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 8004daa:	f001 fce3 	bl	8006774 <calloc>
 8004dae:	4b43      	ldr	r3, [pc, #268]	; (8004ebc <init_peripherals+0x284>)
 8004db0:	4605      	mov	r5, r0
	memset(heat_schedule2, 0x00, 15);
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8004db2:	2101      	movs	r1, #1
 8004db4:	200f      	movs	r0, #15
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 8004db6:	601d      	str	r5, [r3, #0]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8004db8:	f001 fcdc 	bl	8006774 <calloc>
	memset(heat_schedule3, 0x00, 15);

	heating_schedule_info[0] = heat_schedule1;
 8004dbc:	4b40      	ldr	r3, [pc, #256]	; (8004ec0 <init_peripherals+0x288>)
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8004dbe:	4941      	ldr	r1, [pc, #260]	; (8004ec4 <init_peripherals+0x28c>)
	heating_schedule_info[0] = heat_schedule1;
 8004dc0:	601e      	str	r6, [r3, #0]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8004dc2:	4602      	mov	r2, r0
	heating_schedule_info[1] = heat_schedule2;
	heating_schedule_info[2] = heat_schedule3;

	heating_info = (char*)malloc(20*sizeof(char));
 8004dc4:	2014      	movs	r0, #20
	heating_schedule_info[1] = heat_schedule2;
 8004dc6:	605d      	str	r5, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 8004dc8:	609a      	str	r2, [r3, #8]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8004dca:	600a      	str	r2, [r1, #0]
	heating_info = (char*)malloc(20*sizeof(char));
 8004dcc:	f001 fd18 	bl	8006800 <malloc>
 8004dd0:	4603      	mov	r3, r0
	memset(heating_info, 0x00, 10);

	heating_time_size = 0;
 8004dd2:	493d      	ldr	r1, [pc, #244]	; (8004ec8 <init_peripherals+0x290>)
	heating_info = (char*)malloc(20*sizeof(char));
 8004dd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ecc <init_peripherals+0x294>)
	memset(heating_info, 0x00, 10);
 8004dd6:	6004      	str	r4, [r0, #0]
 8004dd8:	605c      	str	r4, [r3, #4]
 8004dda:	811c      	strh	r4, [r3, #8]


	// Initiliazing the RTC
	timeOfRTC = malloc(6*sizeof(uint32_t));
 8004ddc:	2018      	movs	r0, #24
	heating_time_size = 0;
 8004dde:	600c      	str	r4, [r1, #0]
	heating_info = (char*)malloc(20*sizeof(char));
 8004de0:	6013      	str	r3, [r2, #0]
	timeOfRTC = malloc(6*sizeof(uint32_t));
 8004de2:	f001 fd0d 	bl	8006800 <malloc>
 8004de6:	4605      	mov	r5, r0
 8004de8:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <init_peripherals+0x298>)
	memset(timeOfRTC, 0x00, 6);
 8004dea:	6004      	str	r4, [r0, #0]
 8004dec:	80ac      	strh	r4, [r5, #4]
//
	timeOfRTC->Hours = 0x0;
 8004dee:	702c      	strb	r4, [r5, #0]
	timeOfRTC->Minutes = 0x0;
 8004df0:	706c      	strb	r4, [r5, #1]
	timeOfRTC->Seconds = 0x0;
 8004df2:	70ac      	strb	r4, [r5, #2]
	timeOfRTC->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004df4:	60ec      	str	r4, [r5, #12]
	timeOfRTC->StoreOperation = RTC_STOREOPERATION_RESET;
 8004df6:	612c      	str	r4, [r5, #16]

	date = malloc(sizeof(uint32_t));
 8004df8:	2004      	movs	r0, #4
	timeOfRTC = malloc(6*sizeof(uint32_t));
 8004dfa:	601d      	str	r5, [r3, #0]
	date = malloc(sizeof(uint32_t));
 8004dfc:	f001 fd00 	bl	8006800 <malloc>
 8004e00:	4934      	ldr	r1, [pc, #208]	; (8004ed4 <init_peripherals+0x29c>)
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 8004e02:	4a35      	ldr	r2, [pc, #212]	; (8004ed8 <init_peripherals+0x2a0>)
	date = malloc(sizeof(uint32_t));
 8004e04:	6008      	str	r0, [r1, #0]
 8004e06:	4603      	mov	r3, r0


//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);

	log_receiced_num = (uint8_t*)malloc(3*sizeof(uint8_t));
 8004e08:	2101      	movs	r1, #1
	date->WeekDay = RTC_WEEKDAY_MONDAY;
 8004e0a:	601a      	str	r2, [r3, #0]
	log_receiced_num = (uint8_t*)malloc(3*sizeof(uint8_t));
 8004e0c:	2003      	movs	r0, #3
 8004e0e:	f001 fcb1 	bl	8006774 <calloc>
 8004e12:	4b32      	ldr	r3, [pc, #200]	; (8004edc <init_peripherals+0x2a4>)
	memset(log_receiced_num, 0x00, 3);
	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 8004e14:	2101      	movs	r1, #1
	log_receiced_num = (uint8_t*)malloc(3*sizeof(uint8_t));
 8004e16:	6018      	str	r0, [r3, #0]
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 8004e18:	2046      	movs	r0, #70	; 0x46
 8004e1a:	f001 fcab 	bl	8006774 <calloc>
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <init_peripherals+0x2a8>)
 8004e20:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);


	new_time = malloc(6*sizeof(uint32_t));
 8004e22:	2018      	movs	r0, #24
 8004e24:	f001 fcec 	bl	8006800 <malloc>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ee4 <init_peripherals+0x2ac>)
	memset(new_time, 0x00, 6);
 8004e2c:	6004      	str	r4, [r0, #0]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 8004e2e:	2101      	movs	r1, #1
	memset(new_time, 0x00, 6);
 8004e30:	809c      	strh	r4, [r3, #4]
	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 8004e32:	2003      	movs	r0, #3
	new_time = malloc(6*sizeof(uint32_t));
 8004e34:	6013      	str	r3, [r2, #0]
	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 8004e36:	f001 fc9d 	bl	8006774 <calloc>
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ee8 <init_peripherals+0x2b0>)
 8004e3c:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 8004e3e:	2004      	movs	r0, #4
 8004e40:	f001 fcde 	bl	8006800 <malloc>
 8004e44:	4b29      	ldr	r3, [pc, #164]	; (8004eec <init_peripherals+0x2b4>)
 8004e46:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 8004e48:	2010      	movs	r0, #16
 8004e4a:	f001 fcd9 	bl	8006800 <malloc>
 8004e4e:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <init_peripherals+0x2b8>)

	// get time
	HAL_RTC_GetTime(&hrtc, timeOfRTC, RTC_FORMAT_BCD);
 8004e50:	4629      	mov	r1, r5
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 8004e52:	6018      	str	r0, [r3, #0]
	HAL_RTC_GetTime(&hrtc, timeOfRTC, RTC_FORMAT_BCD);
 8004e54:	2201      	movs	r2, #1
 8004e56:	4827      	ldr	r0, [pc, #156]	; (8004ef4 <init_peripherals+0x2bc>)





}
 8004e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_RTC_GetTime(&hrtc, timeOfRTC, RTC_FORMAT_BCD);
 8004e5c:	f7fe bd74 	b.w	8003948 <HAL_RTC_GetTime>
 8004e60:	48000400 	.word	0x48000400
 8004e64:	48000800 	.word	0x48000800
 8004e68:	200005a0 	.word	0x200005a0
 8004e6c:	200002e4 	.word	0x200002e4
 8004e70:	200002d8 	.word	0x200002d8
 8004e74:	200002fc 	.word	0x200002fc
 8004e78:	20000300 	.word	0x20000300
 8004e7c:	200002e0 	.word	0x200002e0
 8004e80:	200002f0 	.word	0x200002f0
 8004e84:	20000244 	.word	0x20000244
 8004e88:	20000248 	.word	0x20000248
 8004e8c:	20000314 	.word	0x20000314
 8004e90:	20000280 	.word	0x20000280
 8004e94:	200002f8 	.word	0x200002f8
 8004e98:	20000310 	.word	0x20000310
 8004e9c:	2000027c 	.word	0x2000027c
 8004ea0:	20000274 	.word	0x20000274
 8004ea4:	2000029c 	.word	0x2000029c
 8004ea8:	200002b0 	.word	0x200002b0
 8004eac:	20000308 	.word	0x20000308
 8004eb0:	20000014 	.word	0x20000014
 8004eb4:	2000004c 	.word	0x2000004c
 8004eb8:	200002a4 	.word	0x200002a4
 8004ebc:	200002a8 	.word	0x200002a8
 8004ec0:	200005f4 	.word	0x200005f4
 8004ec4:	200002ac 	.word	0x200002ac
 8004ec8:	200005d0 	.word	0x200005d0
 8004ecc:	200002b4 	.word	0x200002b4
 8004ed0:	200002f4 	.word	0x200002f4
 8004ed4:	20000284 	.word	0x20000284
 8004ed8:	00010101 	.word	0x00010101
 8004edc:	200002c0 	.word	0x200002c0
 8004ee0:	20000298 	.word	0x20000298
 8004ee4:	200002c4 	.word	0x200002c4
 8004ee8:	200002ec 	.word	0x200002ec
 8004eec:	20000290 	.word	0x20000290
 8004ef0:	200002c8 	.word	0x200002c8
 8004ef4:	200004a8 	.word	0x200004a8

08004ef8 <liters_pumped>:
extern ADC_HandleTypeDef hadc2;


void liters_pumped(){

	if(valve_timer == 5){
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <liters_pumped+0x20>)
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	2a05      	cmp	r2, #5
 8004efe:	d10a      	bne.n	8004f16 <liters_pumped+0x1e>
		pump_flag = 0;
		valve_timer = 0;
		water_acc+=100;
 8004f00:	4806      	ldr	r0, [pc, #24]	; (8004f1c <liters_pumped+0x24>)
void liters_pumped(){
 8004f02:	b410      	push	{r4}
		water_acc+=100;
 8004f04:	6802      	ldr	r2, [r0, #0]
		pump_flag = 0;
 8004f06:	4c06      	ldr	r4, [pc, #24]	; (8004f20 <liters_pumped+0x28>)
 8004f08:	2100      	movs	r1, #0
		valve_timer = 0;
 8004f0a:	7019      	strb	r1, [r3, #0]
		water_acc+=100;
 8004f0c:	3264      	adds	r2, #100	; 0x64
		pump_flag = 0;
 8004f0e:	7021      	strb	r1, [r4, #0]
//		sprintf(total_water,"%lu", water_acc);

	}
}
 8004f10:	f85d 4b04 	ldr.w	r4, [sp], #4
		water_acc+=100;
 8004f14:	6002      	str	r2, [r0, #0]
}
 8004f16:	4770      	bx	lr
 8004f18:	2000030c 	.word	0x2000030c
 8004f1c:	20000318 	.word	0x20000318
 8004f20:	200002cc 	.word	0x200002cc

08004f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	b096      	sub	sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 8004f28:	f7fd fef0 	bl	8002d0c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004f2c:	4a25      	ldr	r2, [pc, #148]	; (8004fc4 <SystemClock_Config+0xa0>)
 8004f2e:	6a13      	ldr	r3, [r2, #32]
 8004f30:	f023 0318 	bic.w	r3, r3, #24
 8004f34:	6213      	str	r3, [r2, #32]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004f36:	2606      	movs	r6, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004f38:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004f3a:	2510      	movs	r5, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f3c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f3e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004f40:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f44:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004f46:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004f48:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f4a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004f4c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f4e:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f50:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004f52:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f54:	f7fd fee2 	bl	8002d1c <HAL_RCC_OscConfig>
 8004f58:	b100      	cbz	r0, 8004f5c <SystemClock_Config+0x38>
 8004f5a:	e7fe      	b.n	8004f5a <SystemClock_Config+0x36>
 8004f5c:	4603      	mov	r3, r0
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f62:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f64:	4621      	mov	r1, r4
 8004f66:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f68:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f6a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f6c:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f6e:	9500      	str	r5, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f70:	9203      	str	r2, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f72:	f7fe f9a1 	bl	80032b8 <HAL_RCC_ClockConfig>
 8004f76:	4603      	mov	r3, r0
 8004f78:	b100      	cbz	r0, 8004f7c <SystemClock_Config+0x58>
 8004f7a:	e7fe      	b.n	8004f7a <SystemClock_Config+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004f7c:	4d12      	ldr	r5, [pc, #72]	; (8004fc8 <SystemClock_Config+0xa4>)
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004f7e:	9007      	str	r0, [sp, #28]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 8004f80:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004f84:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f88:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004f8a:	9505      	str	r5, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004f8c:	9308      	str	r3, [sp, #32]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 8004f8e:	9109      	str	r1, [sp, #36]	; 0x24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004f90:	9206      	str	r2, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f92:	f7fe faed 	bl	8003570 <HAL_RCCEx_PeriphCLKConfig>
 8004f96:	4605      	mov	r5, r0
 8004f98:	b100      	cbz	r0, 8004f9c <SystemClock_Config+0x78>
 8004f9a:	e7fe      	b.n	8004f9a <SystemClock_Config+0x76>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004f9c:	f7fe fab2 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <SystemClock_Config+0xa8>)
 8004fa2:	fba3 3000 	umull	r3, r0, r3, r0
 8004fa6:	0980      	lsrs	r0, r0, #6
 8004fa8:	f7fc fb2a 	bl	8001600 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004fac:	2004      	movs	r0, #4
 8004fae:	f7fc fb41 	bl	8001634 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fba:	f7fc fadf 	bl	800157c <HAL_NVIC_SetPriority>
}
 8004fbe:	b016      	add	sp, #88	; 0x58
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	000100a1 	.word	0x000100a1
 8004fcc:	10624dd3 	.word	0x10624dd3

08004fd0 <main>:
{
 8004fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fd4:	4ea3      	ldr	r6, [pc, #652]	; (8005264 <main+0x294>)
{
 8004fd6:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8004fd8:	f7fb fe86 	bl	8000ce8 <HAL_Init>
  SystemClock_Config();
 8004fdc:	f7ff ffa2 	bl	8004f24 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fe0:	6973      	ldr	r3, [r6, #20]
 8004fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fe6:	6173      	str	r3, [r6, #20]
 8004fe8:	6973      	ldr	r3, [r6, #20]
 8004fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fee:	9302      	str	r3, [sp, #8]
 8004ff0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ff2:	6973      	ldr	r3, [r6, #20]
 8004ff4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ff8:	6173      	str	r3, [r6, #20]
 8004ffa:	6973      	ldr	r3, [r6, #20]
 8004ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005000:	9303      	str	r3, [sp, #12]
 8005002:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005004:	6973      	ldr	r3, [r6, #20]
 8005006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500a:	6173      	str	r3, [r6, #20]
 800500c:	6973      	ldr	r3, [r6, #20]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005016:	6973      	ldr	r3, [r6, #20]
 8005018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800501c:	6173      	str	r3, [r6, #20]
 800501e:	6973      	ldr	r3, [r6, #20]
 8005020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005024:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 8005026:	2201      	movs	r2, #1
 8005028:	2112      	movs	r1, #18
 800502a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800502e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 8005030:	f7fc fdce 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800503a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800503e:	f7fc fdc7 	bl	8001bd0 <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8005042:	2200      	movs	r2, #0
 8005044:	f246 4178 	movw	r1, #25720	; 0x6478
 8005048:	4887      	ldr	r0, [pc, #540]	; (8005268 <main+0x298>)
 800504a:	f7fc fdc1 	bl	8001bd0 <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800504e:	2200      	movs	r2, #0
 8005050:	2180      	movs	r1, #128	; 0x80
 8005052:	4886      	ldr	r0, [pc, #536]	; (800526c <main+0x29c>)

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005054:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8005056:	f7fc fdbb 	bl	8001bd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800505a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800505e:	4b84      	ldr	r3, [pc, #528]	; (8005270 <main+0x2a0>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005060:	4882      	ldr	r0, [pc, #520]	; (800526c <main+0x29c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005062:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005064:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005066:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	9408      	str	r4, [sp, #32]

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800506a:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800506e:	f7fc fcc5 	bl	80019fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005072:	a906      	add	r1, sp, #24
 8005074:	487d      	ldr	r0, [pc, #500]	; (800526c <main+0x29c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005076:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8005078:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800507a:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800507e:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005082:	f7fc fcbb 	bl	80019fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005086:	4b7b      	ldr	r3, [pc, #492]	; (8005274 <main+0x2a4>)
 8005088:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 800508a:	a906      	add	r1, sp, #24
 800508c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8005090:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005092:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8005094:	f7fc fcb2 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 8005098:	2212      	movs	r2, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800509a:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800509c:	a906      	add	r1, sp, #24
 800509e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 80050a2:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80050a4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050a6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050aa:	f7fc fca7 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80050ae:	f44f 7378 	mov.w	r3, #992	; 0x3e0
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b2:	a906      	add	r1, sp, #24
 80050b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80050b8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050ba:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050bc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050be:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c0:	f7fc fc9c 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c4:	a906      	add	r1, sp, #24
 80050c6:	4868      	ldr	r0, [pc, #416]	; (8005268 <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80050c8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050ca:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050cc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ce:	f7fc fc95 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80050d2:	f246 4378 	movw	r3, #25720	; 0x6478
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d6:	a906      	add	r1, sp, #24
 80050d8:	4863      	ldr	r0, [pc, #396]	; (8005268 <main+0x298>)
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80050da:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050dc:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050de:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e2:	f7fc fc8b 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIGGER_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIGGER_Pin;
 80050e6:	2240      	movs	r2, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80050e8:	4b63      	ldr	r3, [pc, #396]	; (8005278 <main+0x2a8>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(FLOW_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80050ea:	4860      	ldr	r0, [pc, #384]	; (800526c <main+0x29c>)
  GPIO_InitStruct.Pin = FLOW_TRIGGER_Pin;
 80050ec:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init(FLOW_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80050ee:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80050f0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050f2:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(FLOW_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80050f4:	f7fc fc82 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 80050f8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 80050fa:	a906      	add	r1, sp, #24
 80050fc:	485b      	ldr	r0, [pc, #364]	; (800526c <main+0x29c>)
  GPIO_InitStruct.Pin = SEG_5_Pin;
 80050fe:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005100:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005102:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005104:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 8005106:	f7fc fc79 	bl	80019fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800510a:	4622      	mov	r2, r4
 800510c:	4621      	mov	r1, r4
 800510e:	2006      	movs	r0, #6
 8005110:	f7fc fa34 	bl	800157c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005114:	2006      	movs	r0, #6
 8005116:	f7fc fa67 	bl	80015e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 800511a:	462a      	mov	r2, r5
 800511c:	4621      	mov	r1, r4
 800511e:	2017      	movs	r0, #23
 8005120:	f7fc fa2c 	bl	800157c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005124:	2017      	movs	r0, #23
 8005126:	f7fc fa5f 	bl	80015e8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800512a:	6973      	ldr	r3, [r6, #20]
 800512c:	432b      	orrs	r3, r5
 800512e:	6173      	str	r3, [r6, #20]
 8005130:	6973      	ldr	r3, [r6, #20]
 8005132:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8005134:	462a      	mov	r2, r5
 8005136:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005138:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 800513a:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800513c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 800513e:	f7fc fa1d 	bl	800157c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005142:	200c      	movs	r0, #12
 8005144:	f7fc fa50 	bl	80015e8 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8005148:	4b4c      	ldr	r3, [pc, #304]	; (800527c <main+0x2ac>)
 800514a:	494d      	ldr	r1, [pc, #308]	; (8005280 <main+0x2b0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800514c:	609c      	str	r4, [r3, #8]
  huart1.Init.BaudRate = 115200;
 800514e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005152:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005154:	4618      	mov	r0, r3
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005156:	60dc      	str	r4, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005158:	611c      	str	r4, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800515a:	619c      	str	r4, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800515c:	61dc      	str	r4, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800515e:	621c      	str	r4, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005160:	625c      	str	r4, [r3, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 8005162:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005166:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005168:	f7fe ffc6 	bl	80040f8 <HAL_UART_Init>
 800516c:	b100      	cbz	r0, 8005170 <main+0x1a0>
 800516e:	e7fe      	b.n	800516e <main+0x19e>
  hadc2.Instance = ADC2;
 8005170:	4c44      	ldr	r4, [pc, #272]	; (8005284 <main+0x2b4>)
 8005172:	4a45      	ldr	r2, [pc, #276]	; (8005288 <main+0x2b8>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005174:	6060      	str	r0, [r4, #4]
 8005176:	4603      	mov	r3, r0
  hadc2.Init.NbrOfConversion = 4;
 8005178:	f04f 0904 	mov.w	r9, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800517c:	4620      	mov	r0, r4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800517e:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005180:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005182:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005184:	6263      	str	r3, [r4, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005186:	6323      	str	r3, [r4, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005188:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800518a:	60e3      	str	r3, [r4, #12]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800518c:	6365      	str	r5, [r4, #52]	; 0x34
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800518e:	61a3      	str	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005190:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc2.Instance = ADC2;
 8005192:	6022      	str	r2, [r4, #0]
  hadc2.Init.NbrOfConversion = 4;
 8005194:	f8c4 9020 	str.w	r9, [r4, #32]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005198:	f8c4 9014 	str.w	r9, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800519c:	f7fb fdfc 	bl	8000d98 <HAL_ADC_Init>
 80051a0:	b100      	cbz	r0, 80051a4 <main+0x1d4>
 80051a2:	e7fe      	b.n	80051a2 <main+0x1d2>
  sConfig.Channel = ADC_CHANNEL_8;
 80051a4:	2208      	movs	r2, #8
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80051a6:	2306      	movs	r3, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80051a8:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80051aa:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 80051ac:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051ae:	a906      	add	r1, sp, #24
 80051b0:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80051b2:	9507      	str	r5, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_8;
 80051b4:	9206      	str	r2, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80051b6:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051b8:	f7fc f83c 	bl	8001234 <HAL_ADC_ConfigChannel>
 80051bc:	b100      	cbz	r0, 80051c0 <main+0x1f0>
 80051be:	e7fe      	b.n	80051be <main+0x1ee>
  sConfig.Channel = ADC_CHANNEL_9;
 80051c0:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051c2:	a906      	add	r1, sp, #24
 80051c4:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80051c6:	9707      	str	r7, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_9;
 80051c8:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051ca:	f7fc f833 	bl	8001234 <HAL_ADC_ConfigChannel>
 80051ce:	b100      	cbz	r0, 80051d2 <main+0x202>
 80051d0:	e7fe      	b.n	80051d0 <main+0x200>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051d2:	a906      	add	r1, sp, #24
 80051d4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_12;
 80051d6:	9606      	str	r6, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80051d8:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051dc:	f7fc f82a 	bl	8001234 <HAL_ADC_ConfigChannel>
 80051e0:	b100      	cbz	r0, 80051e4 <main+0x214>
 80051e2:	e7fe      	b.n	80051e2 <main+0x212>
  sConfig.Channel = ADC_CHANNEL_13;
 80051e4:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051e6:	4620      	mov	r0, r4
 80051e8:	a906      	add	r1, sp, #24
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80051ea:	f8cd 901c 	str.w	r9, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_13;
 80051ee:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051f0:	f7fc f820 	bl	8001234 <HAL_ADC_ConfigChannel>
 80051f4:	4606      	mov	r6, r0
 80051f6:	b100      	cbz	r0, 80051fa <main+0x22a>
 80051f8:	e7fe      	b.n	80051f8 <main+0x228>
  hrtc.Instance = RTC;
 80051fa:	4c24      	ldr	r4, [pc, #144]	; (800528c <main+0x2bc>)
 80051fc:	4b24      	ldr	r3, [pc, #144]	; (8005290 <main+0x2c0>)
 80051fe:	6023      	str	r3, [r4, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8005200:	4620      	mov	r0, r4
 8005202:	4631      	mov	r1, r6
 8005204:	f7fe fd56 	bl	8003cb4 <HAL_RTCEx_BKUPRead>
 8005208:	f243 23f2 	movw	r3, #13042	; 0x32f2
 800520c:	4298      	cmp	r0, r3
 800520e:	d013      	beq.n	8005238 <main+0x268>
  hrtc.Init.SynchPrediv = 255;
 8005210:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.AsynchPrediv = 127;
 8005212:	227f      	movs	r2, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005214:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 8005216:	60e3      	str	r3, [r4, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005218:	6066      	str	r6, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800521a:	6126      	str	r6, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800521c:	6166      	str	r6, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800521e:	61a6      	str	r6, [r4, #24]
  hrtc.Init.AsynchPrediv = 127;
 8005220:	60a2      	str	r2, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005222:	f7fe fa67 	bl	80036f4 <HAL_RTC_Init>
 8005226:	4603      	mov	r3, r0
 8005228:	2800      	cmp	r0, #0
 800522a:	d037      	beq.n	800529c <main+0x2cc>
 800522c:	e7fe      	b.n	800522c <main+0x25c>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 800522e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005232:	4816      	ldr	r0, [pc, #88]	; (800528c <main+0x2bc>)
 8005234:	f7fe fd38 	bl	8003ca8 <HAL_RTCEx_BKUPWrite>
  hi2c1.Instance = I2C1;
 8005238:	4c16      	ldr	r4, [pc, #88]	; (8005294 <main+0x2c4>)
 800523a:	4b17      	ldr	r3, [pc, #92]	; (8005298 <main+0x2c8>)
 800523c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800523e:	f240 220b 	movw	r2, #523	; 0x20b
  hi2c1.Init.OwnAddress1 = 0;
 8005242:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005244:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005246:	2501      	movs	r5, #1
  hi2c1.Init.Timing = 0x0000020B;
 8005248:	6062      	str	r2, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800524a:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800524c:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800524e:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005250:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005252:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005254:	6223      	str	r3, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005256:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005258:	f7fc fd86 	bl	8001d68 <HAL_I2C_Init>
 800525c:	4601      	mov	r1, r0
 800525e:	b360      	cbz	r0, 80052ba <main+0x2ea>
 8005260:	e7fe      	b.n	8005260 <main+0x290>
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000
 8005268:	48000400 	.word	0x48000400
 800526c:	48000800 	.word	0x48000800
 8005270:	10110000 	.word	0x10110000
 8005274:	10210000 	.word	0x10210000
 8005278:	10310000 	.word	0x10310000
 800527c:	20000438 	.word	0x20000438
 8005280:	40013800 	.word	0x40013800
 8005284:	20000350 	.word	0x20000350
 8005288:	50000100 	.word	0x50000100
 800528c:	200004a8 	.word	0x200004a8
 8005290:	40002800 	.word	0x40002800
 8005294:	200003a4 	.word	0x200003a4
 8005298:	40005400 	.word	0x40005400
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800529c:	a906      	add	r1, sp, #24
 800529e:	462a      	mov	r2, r5
 80052a0:	4620      	mov	r0, r4
  sTime.Hours = 0x0;
 80052a2:	f88d 3018 	strb.w	r3, [sp, #24]
  sTime.Minutes = 0x0;
 80052a6:	f88d 3019 	strb.w	r3, [sp, #25]
  sTime.Seconds = 0x0;
 80052aa:	f88d 301a 	strb.w	r3, [sp, #26]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80052ae:	9309      	str	r3, [sp, #36]	; 0x24
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80052b0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80052b2:	f7fe fa8b 	bl	80037cc <HAL_RTC_SetTime>
 80052b6:	b130      	cbz	r0, 80052c6 <main+0x2f6>
 80052b8:	e7fe      	b.n	80052b8 <main+0x2e8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7fd fcd4 	bl	8002c68 <HAL_I2CEx_ConfigAnalogFilter>
 80052c0:	4601      	mov	r1, r0
 80052c2:	b150      	cbz	r0, 80052da <main+0x30a>
 80052c4:	e7fe      	b.n	80052c4 <main+0x2f4>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80052c6:	a90c      	add	r1, sp, #48	; 0x30
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <main+0x370>)
 80052ca:	f841 3d30 	str.w	r3, [r1, #-48]!
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80052ce:	462a      	mov	r2, r5
 80052d0:	4620      	mov	r0, r4
 80052d2:	f7fe fb6f 	bl	80039b4 <HAL_RTC_SetDate>
 80052d6:	b130      	cbz	r0, 80052e6 <main+0x316>
 80052d8:	e7fe      	b.n	80052d8 <main+0x308>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80052da:	4620      	mov	r0, r4
 80052dc:	f7fd fcee 	bl	8002cbc <HAL_I2CEx_ConfigDigitalFilter>
 80052e0:	4604      	mov	r4, r0
 80052e2:	b150      	cbz	r0, 80052fa <main+0x32a>
 80052e4:	e7fe      	b.n	80052e4 <main+0x314>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80052e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80052ea:	2200      	movs	r2, #0
 80052ec:	4815      	ldr	r0, [pc, #84]	; (8005344 <main+0x374>)
 80052ee:	f7fe fc4d 	bl	8003b8c <HAL_RTCEx_SetWakeUpTimer_IT>
 80052f2:	4601      	mov	r1, r0
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d09a      	beq.n	800522e <main+0x25e>
 80052f8:	e7fe      	b.n	80052f8 <main+0x328>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80052fa:	4601      	mov	r1, r0
 80052fc:	4812      	ldr	r0, [pc, #72]	; (8005348 <main+0x378>)
 80052fe:	f7fb ff23 	bl	8001148 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8005302:	f7ff fc99 	bl	8004c38 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8005306:	462a      	mov	r2, r5
 8005308:	4910      	ldr	r1, [pc, #64]	; (800534c <main+0x37c>)
 800530a:	4811      	ldr	r0, [pc, #68]	; (8005350 <main+0x380>)
 800530c:	f7fe fcfc 	bl	8003d08 <HAL_UART_Receive_IT>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 4);
 8005310:	4b10      	ldr	r3, [pc, #64]	; (8005354 <main+0x384>)
 8005312:	480d      	ldr	r0, [pc, #52]	; (8005348 <main+0x378>)
 8005314:	6819      	ldr	r1, [r3, #0]
 8005316:	2204      	movs	r2, #4
 8005318:	f7fb fe70 	bl	8000ffc <HAL_ADC_Start_DMA>
 	 HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <main+0x388>)
 800531e:	4809      	ldr	r0, [pc, #36]	; (8005344 <main+0x374>)
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	4622      	mov	r2, r4
 8005324:	f7fe fb10 	bl	8003948 <HAL_RTC_GetTime>
 	 HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <main+0x38c>)
 800532a:	4806      	ldr	r0, [pc, #24]	; (8005344 <main+0x374>)
 800532c:	6819      	ldr	r1, [r3, #0]
 800532e:	4622      	mov	r2, r4
 8005330:	f7fe fbe2 	bl	8003af8 <HAL_RTC_GetDate>
  logPosition();
 8005334:	f7ff fb56 	bl	80049e4 <logPosition>
	  mainLoop();
 8005338:	f001 f91a 	bl	8006570 <mainLoop>
 800533c:	e7fc      	b.n	8005338 <main+0x368>
 800533e:	bf00      	nop
 8005340:	00010101 	.word	0x00010101
 8005344:	200004a8 	.word	0x200004a8
 8005348:	20000350 	.word	0x20000350
 800534c:	200005a4 	.word	0x200005a4
 8005350:	20000438 	.word	0x20000438
 8005354:	20000244 	.word	0x20000244
 8005358:	200002f4 	.word	0x200002f4
 800535c:	20000284 	.word	0x20000284

08005360 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005360:	e7fe      	b.n	8005360 <_Error_Handler>
 8005362:	bf00      	nop

08005364 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8005364:	b570      	push	{r4, r5, r6, lr}
	if(display_set_temp){
 8005366:	4b3a      	ldr	r3, [pc, #232]	; (8005450 <seven_segment+0xec>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	b18b      	cbz	r3, 8005390 <seven_segment+0x2c>
		sprintf(segment_val, "%d", *set_temp);
 800536c:	4b39      	ldr	r3, [pc, #228]	; (8005454 <seven_segment+0xf0>)
 800536e:	4e3a      	ldr	r6, [pc, #232]	; (8005458 <seven_segment+0xf4>)
 8005370:	681b      	ldr	r3, [r3, #0]
	}
	else {
		sprintf(segment_val, "%lu", raw_geyser_temp);
	}

	if(segment_counter == 0){	// Left Most Digit
 8005372:	4d3a      	ldr	r5, [pc, #232]	; (800545c <seven_segment+0xf8>)
		sprintf(segment_val, "%d", *set_temp);
 8005374:	6830      	ldr	r0, [r6, #0]
 8005376:	781a      	ldrb	r2, [r3, #0]
 8005378:	4939      	ldr	r1, [pc, #228]	; (8005460 <seven_segment+0xfc>)
 800537a:	f001 fb27 	bl	80069cc <siprintf>
	if(segment_counter == 0){	// Left Most Digit
 800537e:	782c      	ldrb	r4, [r5, #0]
 8005380:	b18c      	cbz	r4, 80053a6 <seven_segment+0x42>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8005382:	2c01      	cmp	r4, #1
 8005384:	d04e      	beq.n	8005424 <seven_segment+0xc0>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8005386:	2c02      	cmp	r4, #2
 8005388:	d054      	beq.n	8005434 <seven_segment+0xd0>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 800538a:	2c03      	cmp	r4, #3
 800538c:	d02b      	beq.n	80053e6 <seven_segment+0x82>
 800538e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(segment_val, "%lu", raw_geyser_temp);
 8005390:	4b34      	ldr	r3, [pc, #208]	; (8005464 <seven_segment+0x100>)
 8005392:	4e31      	ldr	r6, [pc, #196]	; (8005458 <seven_segment+0xf4>)
	if(segment_counter == 0){	// Left Most Digit
 8005394:	4d31      	ldr	r5, [pc, #196]	; (800545c <seven_segment+0xf8>)
		sprintf(segment_val, "%lu", raw_geyser_temp);
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	6830      	ldr	r0, [r6, #0]
 800539a:	4933      	ldr	r1, [pc, #204]	; (8005468 <seven_segment+0x104>)
 800539c:	f001 fb16 	bl	80069cc <siprintf>
	if(segment_counter == 0){	// Left Most Digit
 80053a0:	782c      	ldrb	r4, [r5, #0]
 80053a2:	2c00      	cmp	r4, #0
 80053a4:	d1ed      	bne.n	8005382 <seven_segment+0x1e>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 80053a6:	4622      	mov	r2, r4
 80053a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053ac:	482f      	ldr	r0, [pc, #188]	; (800546c <seven_segment+0x108>)
 80053ae:	f7fc fc0f 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80053b2:	2201      	movs	r2, #1
 80053b4:	2110      	movs	r1, #16
 80053b6:	482d      	ldr	r0, [pc, #180]	; (800546c <seven_segment+0x108>)
 80053b8:	f7fc fc0a 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80053bc:	2201      	movs	r2, #1
 80053be:	2120      	movs	r1, #32
 80053c0:	482a      	ldr	r0, [pc, #168]	; (800546c <seven_segment+0x108>)
 80053c2:	f7fc fc05 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80053c6:	2201      	movs	r2, #1
 80053c8:	2108      	movs	r1, #8
 80053ca:	4828      	ldr	r0, [pc, #160]	; (800546c <seven_segment+0x108>)
 80053cc:	f7fc fc00 	bl	8001bd0 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 80053d0:	782b      	ldrb	r3, [r5, #0]
 80053d2:	6832      	ldr	r2, [r6, #0]
 80053d4:	5cd0      	ldrb	r0, [r2, r3]
 80053d6:	3830      	subs	r0, #48	; 0x30
 80053d8:	b2c0      	uxtb	r0, r0
 80053da:	f000 f849 	bl	8005470 <seven_segment_display>
		segment_counter += 1;
 80053de:	782b      	ldrb	r3, [r5, #0]
 80053e0:	3301      	adds	r3, #1
 80053e2:	702b      	strb	r3, [r5, #0]
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 80053e6:	2201      	movs	r2, #1
 80053e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053ec:	481f      	ldr	r0, [pc, #124]	; (800546c <seven_segment+0x108>)
 80053ee:	f7fc fbef 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80053f2:	2201      	movs	r2, #1
 80053f4:	2110      	movs	r1, #16
 80053f6:	481d      	ldr	r0, [pc, #116]	; (800546c <seven_segment+0x108>)
 80053f8:	f7fc fbea 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80053fc:	2201      	movs	r2, #1
 80053fe:	2120      	movs	r1, #32
 8005400:	481a      	ldr	r0, [pc, #104]	; (800546c <seven_segment+0x108>)
 8005402:	f7fc fbe5 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8005406:	2200      	movs	r2, #0
 8005408:	2108      	movs	r1, #8
 800540a:	4818      	ldr	r0, [pc, #96]	; (800546c <seven_segment+0x108>)
 800540c:	f7fc fbe0 	bl	8001bd0 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8005410:	782b      	ldrb	r3, [r5, #0]
 8005412:	6832      	ldr	r2, [r6, #0]
 8005414:	5cd0      	ldrb	r0, [r2, r3]
 8005416:	3830      	subs	r0, #48	; 0x30
 8005418:	b2c0      	uxtb	r0, r0
 800541a:	f000 f829 	bl	8005470 <seven_segment_display>
		segment_counter = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	702b      	strb	r3, [r5, #0]
 8005422:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005424:	4622      	mov	r2, r4
 8005426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800542a:	4810      	ldr	r0, [pc, #64]	; (800546c <seven_segment+0x108>)
 800542c:	f7fc fbd0 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8005430:	2200      	movs	r2, #0
 8005432:	e7bf      	b.n	80053b4 <seven_segment+0x50>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8005434:	2201      	movs	r2, #1
 8005436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800543a:	480c      	ldr	r0, [pc, #48]	; (800546c <seven_segment+0x108>)
 800543c:	f7fc fbc8 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8005440:	2201      	movs	r2, #1
 8005442:	2110      	movs	r1, #16
 8005444:	4809      	ldr	r0, [pc, #36]	; (800546c <seven_segment+0x108>)
 8005446:	f7fc fbc3 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 800544a:	2200      	movs	r2, #0
 800544c:	e7b7      	b.n	80053be <seven_segment+0x5a>
 800544e:	bf00      	nop
 8005450:	20000288 	.word	0x20000288
 8005454:	200002e4 	.word	0x200002e4
 8005458:	200002e0 	.word	0x200002e0
 800545c:	200002df 	.word	0x200002df
 8005460:	0800736c 	.word	0x0800736c
 8005464:	200002d4 	.word	0x200002d4
 8005468:	08007368 	.word	0x08007368
 800546c:	48000400 	.word	0x48000400

08005470 <seven_segment_display>:
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8005470:	b508      	push	{r3, lr}
	switch(num){
 8005472:	2809      	cmp	r0, #9
 8005474:	f200 81bf 	bhi.w	80057f6 <seven_segment_display+0x386>
 8005478:	e8df f010 	tbh	[pc, r0, lsl #1]
 800547c:	006c003b 	.word	0x006c003b
 8005480:	00c40098 	.word	0x00c40098
 8005484:	011200e8 	.word	0x011200e8
 8005488:	016a013e 	.word	0x016a013e
 800548c:	000a018c 	.word	0x000a018c
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
		break;
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005490:	2200      	movs	r2, #0
 8005492:	2120      	movs	r1, #32
 8005494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005498:	f7fc fb9a 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800549c:	2200      	movs	r2, #0
 800549e:	2140      	movs	r1, #64	; 0x40
 80054a0:	48e9      	ldr	r0, [pc, #932]	; (8005848 <seven_segment_display+0x3d8>)
 80054a2:	f7fc fb95 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80054a6:	2200      	movs	r2, #0
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ae:	f7fc fb8f 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80054b2:	2200      	movs	r2, #0
 80054b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054bc:	f7fc fb88 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80054c0:	2200      	movs	r2, #0
 80054c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ca:	f7fc fb81 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2140      	movs	r1, #64	; 0x40
 80054d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054d6:	f7fc fb7b 	bl	8001bd0 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80054da:	48dc      	ldr	r0, [pc, #880]	; (800584c <seven_segment_display+0x3dc>)
 80054dc:	2201      	movs	r2, #1
 80054de:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80054e0:	f7fc fb76 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80054e4:	2201      	movs	r2, #1
 80054e6:	2140      	movs	r1, #64	; 0x40
 80054e8:	48d7      	ldr	r0, [pc, #860]	; (8005848 <seven_segment_display+0x3d8>)

	}



}
 80054ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80054ee:	f7fc bb6f 	b.w	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80054f2:	2200      	movs	r2, #0
 80054f4:	2140      	movs	r1, #64	; 0x40
 80054f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054fa:	f7fc fb69 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80054fe:	2200      	movs	r2, #0
 8005500:	2120      	movs	r1, #32
 8005502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005506:	f7fc fb63 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800550a:	2200      	movs	r2, #0
 800550c:	2140      	movs	r1, #64	; 0x40
 800550e:	48ce      	ldr	r0, [pc, #824]	; (8005848 <seven_segment_display+0x3d8>)
 8005510:	f7fc fb5e 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005514:	2200      	movs	r2, #0
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800551c:	f7fc fb58 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005520:	2200      	movs	r2, #0
 8005522:	2140      	movs	r1, #64	; 0x40
 8005524:	48c8      	ldr	r0, [pc, #800]	; (8005848 <seven_segment_display+0x3d8>)
 8005526:	f7fc fb53 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 800552a:	2200      	movs	r2, #0
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	48c7      	ldr	r0, [pc, #796]	; (800584c <seven_segment_display+0x3dc>)
 8005530:	f7fc fb4e 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005534:	2200      	movs	r2, #0
 8005536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800553a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800553e:	f7fc fb47 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005542:	2201      	movs	r2, #1
 8005544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 800554c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005550:	f7fc bb3e 	b.w	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005554:	2200      	movs	r2, #0
 8005556:	2140      	movs	r1, #64	; 0x40
 8005558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800555c:	f7fc fb38 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8005560:	2200      	movs	r2, #0
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005568:	f7fc fb32 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800556c:	2201      	movs	r2, #1
 800556e:	2120      	movs	r1, #32
 8005570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005574:	f7fc fb2c 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8005578:	2201      	movs	r2, #1
 800557a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800557e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005582:	f7fc fb25 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8005586:	2201      	movs	r2, #1
 8005588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800558c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005590:	f7fc fb1e 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8005594:	48ac      	ldr	r0, [pc, #688]	; (8005848 <seven_segment_display+0x3d8>)
 8005596:	2201      	movs	r2, #1
 8005598:	2140      	movs	r1, #64	; 0x40
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800559a:	f7fc fb19 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800559e:	2201      	movs	r2, #1
 80055a0:	2180      	movs	r1, #128	; 0x80
 80055a2:	48aa      	ldr	r0, [pc, #680]	; (800584c <seven_segment_display+0x3dc>)
}
 80055a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80055a8:	f7fc bb12 	b.w	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 80055ac:	2200      	movs	r2, #0
 80055ae:	2120      	movs	r1, #32
 80055b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055b4:	f7fc fb0c 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80055b8:	2200      	movs	r2, #0
 80055ba:	2140      	movs	r1, #64	; 0x40
 80055bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055c0:	f7fc fb06 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80055c4:	2200      	movs	r2, #0
 80055c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055ce:	f7fc faff 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80055d2:	2200      	movs	r2, #0
 80055d4:	2180      	movs	r1, #128	; 0x80
 80055d6:	489d      	ldr	r0, [pc, #628]	; (800584c <seven_segment_display+0x3dc>)
 80055d8:	f7fc fafa 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80055dc:	2200      	movs	r2, #0
 80055de:	2140      	movs	r1, #64	; 0x40
 80055e0:	4899      	ldr	r0, [pc, #612]	; (8005848 <seven_segment_display+0x3d8>)
 80055e2:	f7fc faf5 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80055e6:	2201      	movs	r2, #1
 80055e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055f0:	f7fc faee 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80055f4:	2201      	movs	r2, #1
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 80055fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8005600:	f7fc bae6 	b.w	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005604:	2200      	movs	r2, #0
 8005606:	2120      	movs	r1, #32
 8005608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800560c:	f7fc fae0 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8005610:	2200      	movs	r2, #0
 8005612:	2140      	movs	r1, #64	; 0x40
 8005614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005618:	f7fc fada 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800561c:	2200      	movs	r2, #0
 800561e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005626:	f7fc fad3 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800562a:	2200      	movs	r2, #0
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005632:	f7fc facd 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005636:	2200      	movs	r2, #0
 8005638:	2140      	movs	r1, #64	; 0x40
 800563a:	4883      	ldr	r0, [pc, #524]	; (8005848 <seven_segment_display+0x3d8>)
 800563c:	f7fc fac8 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005640:	2201      	movs	r2, #1
 8005642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800564a:	e7a6      	b.n	800559a <seven_segment_display+0x12a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800564c:	2200      	movs	r2, #0
 800564e:	2140      	movs	r1, #64	; 0x40
 8005650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005654:	f7fc fabc 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005658:	2200      	movs	r2, #0
 800565a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800565e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005662:	f7fc fab5 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005666:	2200      	movs	r2, #0
 8005668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800566c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005670:	f7fc faae 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005674:	2200      	movs	r2, #0
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800567c:	f7fc faa8 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005680:	2201      	movs	r2, #1
 8005682:	2120      	movs	r1, #32
 8005684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005688:	f7fc faa2 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 800568c:	2201      	movs	r2, #1
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	486e      	ldr	r0, [pc, #440]	; (800584c <seven_segment_display+0x3dc>)
 8005692:	f7fc fa9d 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005696:	2201      	movs	r2, #1
 8005698:	2120      	movs	r1, #32
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800569a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800569e:	e71f      	b.n	80054e0 <seven_segment_display+0x70>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80056a0:	2200      	movs	r2, #0
 80056a2:	2120      	movs	r1, #32
 80056a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056a8:	f7fc fa92 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80056ac:	2200      	movs	r2, #0
 80056ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056b6:	f7fc fa8b 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80056ba:	2200      	movs	r2, #0
 80056bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056c4:	f7fc fa84 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80056c8:	2200      	movs	r2, #0
 80056ca:	2180      	movs	r1, #128	; 0x80
 80056cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056d0:	f7fc fa7e 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 80056d4:	2201      	movs	r2, #1
 80056d6:	2140      	movs	r1, #64	; 0x40
 80056d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056dc:	f7fc fa78 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80056e0:	2201      	movs	r2, #1
 80056e2:	2180      	movs	r1, #128	; 0x80
 80056e4:	4859      	ldr	r0, [pc, #356]	; (800584c <seven_segment_display+0x3dc>)
 80056e6:	f7fc fa73 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 80056ea:	2200      	movs	r2, #0
 80056ec:	2140      	movs	r1, #64	; 0x40
 80056ee:	4856      	ldr	r0, [pc, #344]	; (8005848 <seven_segment_display+0x3d8>)
}
 80056f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 80056f4:	f7fc ba6c 	b.w	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80056f8:	2200      	movs	r2, #0
 80056fa:	2120      	movs	r1, #32
 80056fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005700:	f7fc fa66 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005704:	2200      	movs	r2, #0
 8005706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800570a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800570e:	f7fc fa5f 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005712:	2200      	movs	r2, #0
 8005714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800571c:	f7fc fa58 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005720:	2200      	movs	r2, #0
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005728:	f7fc fa52 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800572c:	2200      	movs	r2, #0
 800572e:	2140      	movs	r1, #64	; 0x40
 8005730:	4845      	ldr	r0, [pc, #276]	; (8005848 <seven_segment_display+0x3d8>)
 8005732:	f7fc fa4d 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005736:	4845      	ldr	r0, [pc, #276]	; (800584c <seven_segment_display+0x3dc>)
 8005738:	2200      	movs	r2, #0
 800573a:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 800573c:	f7fc fa48 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8005740:	2201      	movs	r2, #1
 8005742:	2140      	movs	r1, #64	; 0x40
 8005744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8005748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800574c:	f7fc ba40 	b.w	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005750:	2200      	movs	r2, #0
 8005752:	2120      	movs	r1, #32
 8005754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005758:	f7fc fa3a 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800575c:	2200      	movs	r2, #0
 800575e:	2140      	movs	r1, #64	; 0x40
 8005760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005764:	f7fc fa34 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005768:	2200      	movs	r2, #0
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005770:	f7fc fa2e 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005774:	2201      	movs	r2, #1
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	4834      	ldr	r0, [pc, #208]	; (800584c <seven_segment_display+0x3dc>)
 800577a:	f7fc fa29 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800577e:	2201      	movs	r2, #1
 8005780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005788:	f7fc fa22 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 800578c:	2201      	movs	r2, #1
 800578e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005792:	e782      	b.n	800569a <seven_segment_display+0x22a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005794:	2200      	movs	r2, #0
 8005796:	2140      	movs	r1, #64	; 0x40
 8005798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800579c:	f7fc fa18 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 80057a0:	2200      	movs	r2, #0
 80057a2:	2120      	movs	r1, #32
 80057a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057a8:	f7fc fa12 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 80057ac:	2200      	movs	r2, #0
 80057ae:	2140      	movs	r1, #64	; 0x40
 80057b0:	4825      	ldr	r0, [pc, #148]	; (8005848 <seven_segment_display+0x3d8>)
 80057b2:	f7fc fa0d 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 80057b6:	2200      	movs	r2, #0
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057be:	f7fc fa07 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 80057c2:	2200      	movs	r2, #0
 80057c4:	2140      	movs	r1, #64	; 0x40
 80057c6:	4820      	ldr	r0, [pc, #128]	; (8005848 <seven_segment_display+0x3d8>)
 80057c8:	f7fc fa02 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80057cc:	2200      	movs	r2, #0
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	481e      	ldr	r0, [pc, #120]	; (800584c <seven_segment_display+0x3dc>)
 80057d2:	f7fc f9fd 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057e0:	f7fc f9f6 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80057e4:	2200      	movs	r2, #0
 80057e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 80057ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 80057f2:	f7fc b9ed 	b.w	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 80057f6:	2201      	movs	r2, #1
 80057f8:	2120      	movs	r1, #32
 80057fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057fe:	f7fc f9e7 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 8005802:	2201      	movs	r2, #1
 8005804:	2140      	movs	r1, #64	; 0x40
 8005806:	4810      	ldr	r0, [pc, #64]	; (8005848 <seven_segment_display+0x3d8>)
 8005808:	f7fc f9e2 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 800580c:	2201      	movs	r2, #1
 800580e:	2180      	movs	r1, #128	; 0x80
 8005810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005814:	f7fc f9dc 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8005818:	2201      	movs	r2, #1
 800581a:	2140      	movs	r1, #64	; 0x40
 800581c:	480a      	ldr	r0, [pc, #40]	; (8005848 <seven_segment_display+0x3d8>)
 800581e:	f7fc f9d7 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005822:	2201      	movs	r2, #1
 8005824:	2180      	movs	r1, #128	; 0x80
 8005826:	4809      	ldr	r0, [pc, #36]	; (800584c <seven_segment_display+0x3dc>)
 8005828:	f7fc f9d2 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800582c:	2201      	movs	r2, #1
 800582e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005836:	f7fc f9cb 	bl	8001bd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 800583a:	2201      	movs	r2, #1
 800583c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005844:	e77a      	b.n	800573c <seven_segment_display+0x2cc>
 8005846:	bf00      	nop
 8005848:	48000400 	.word	0x48000400
 800584c:	48000800 	.word	0x48000800

08005850 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005850:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <HAL_MspInit+0x78>)
{
 8005852:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	619a      	str	r2, [r3, #24]
 800585c:	699b      	ldr	r3, [r3, #24]
{
 800585e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005866:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005868:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800586a:	f7fb fe75 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 800586e:	2202      	movs	r2, #2
 8005870:	2100      	movs	r1, #0
 8005872:	f06f 000b 	mvn.w	r0, #11
 8005876:	f7fb fe81 	bl	800157c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 800587a:	2202      	movs	r2, #2
 800587c:	2100      	movs	r1, #0
 800587e:	f06f 000a 	mvn.w	r0, #10
 8005882:	f7fb fe7b 	bl	800157c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 8005886:	2202      	movs	r2, #2
 8005888:	2100      	movs	r1, #0
 800588a:	f06f 0009 	mvn.w	r0, #9
 800588e:	f7fb fe75 	bl	800157c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 8005892:	2202      	movs	r2, #2
 8005894:	2100      	movs	r1, #0
 8005896:	f06f 0004 	mvn.w	r0, #4
 800589a:	f7fb fe6f 	bl	800157c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 800589e:	2202      	movs	r2, #2
 80058a0:	2100      	movs	r1, #0
 80058a2:	f06f 0003 	mvn.w	r0, #3
 80058a6:	f7fb fe69 	bl	800157c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 80058aa:	2202      	movs	r2, #2
 80058ac:	2100      	movs	r1, #0
 80058ae:	f06f 0001 	mvn.w	r0, #1
 80058b2:	f7fb fe63 	bl	800157c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 80058b6:	2202      	movs	r2, #2
 80058b8:	2100      	movs	r1, #0
 80058ba:	f04f 30ff 	mov.w	r0, #4294967295
 80058be:	f7fb fe5d 	bl	800157c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058c2:	b003      	add	sp, #12
 80058c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80058c8:	40021000 	.word	0x40021000

080058cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 80058cc:	4b21      	ldr	r3, [pc, #132]	; (8005954 <HAL_ADC_MspInit+0x88>)
 80058ce:	6802      	ldr	r2, [r0, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d000      	beq.n	80058d6 <HAL_ADC_MspInit+0xa>
 80058d4:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80058d6:	4b20      	ldr	r3, [pc, #128]	; (8005958 <HAL_ADC_MspInit+0x8c>)
{
 80058d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 80058da:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80058dc:	4d1f      	ldr	r5, [pc, #124]	; (800595c <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80058de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058e2:	615a      	str	r2, [r3, #20]
 80058e4:	695b      	ldr	r3, [r3, #20]
{
 80058e6:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ec:	2600      	movs	r6, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 80058ee:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058f0:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 80058f2:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058f4:	a901      	add	r1, sp, #4
 80058f6:	4604      	mov	r4, r0
 80058f8:	4819      	ldr	r0, [pc, #100]	; (8005960 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80058fa:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 80058fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058fe:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005900:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005902:	f7fc f87b 	bl	80019fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GPIO_PIN_12;
 8005906:	f241 0304 	movw	r3, #4100	; 0x1004
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800590a:	a901      	add	r1, sp, #4
 800590c:	4815      	ldr	r0, [pc, #84]	; (8005964 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800590e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GPIO_PIN_12;
 8005910:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005912:	9603      	str	r6, [sp, #12]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005914:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005916:	f7fc f871 	bl	80019fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800591a:	f8df e050 	ldr.w	lr, [pc, #80]	; 800596c <HAL_ADC_MspInit+0xa0>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800591e:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005920:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005924:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005928:	2320      	movs	r3, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800592a:	4628      	mov	r0, r5
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800592c:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800592e:	61ee      	str	r6, [r5, #28]
    hdma_adc2.Instance = DMA1_Channel2;
 8005930:	f8c5 e000 	str.w	lr, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005934:	60ef      	str	r7, [r5, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005936:	6129      	str	r1, [r5, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005938:	616a      	str	r2, [r5, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800593a:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800593c:	f7fb fe8c 	bl	8001658 <HAL_DMA_Init>
 8005940:	b918      	cbnz	r0, 800594a <HAL_ADC_MspInit+0x7e>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005942:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005944:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005946:	b007      	add	sp, #28
 8005948:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 800594a:	217a      	movs	r1, #122	; 0x7a
 800594c:	4806      	ldr	r0, [pc, #24]	; (8005968 <HAL_ADC_MspInit+0x9c>)
 800594e:	f7ff fd07 	bl	8005360 <_Error_Handler>
 8005952:	e7f6      	b.n	8005942 <HAL_ADC_MspInit+0x76>
 8005954:	50000100 	.word	0x50000100
 8005958:	40021000 	.word	0x40021000
 800595c:	200004e0 	.word	0x200004e0
 8005960:	48000800 	.word	0x48000800
 8005964:	48000400 	.word	0x48000400
 8005968:	08007370 	.word	0x08007370
 800596c:	4002001c 	.word	0x4002001c

08005970 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005970:	6802      	ldr	r2, [r0, #0]
 8005972:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <HAL_I2C_MspInit+0x68>)
 8005974:	429a      	cmp	r2, r3
 8005976:	d000      	beq.n	800597a <HAL_I2C_MspInit+0xa>
 8005978:	4770      	bx	lr
{
 800597a:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800597c:	2304      	movs	r3, #4
{
 800597e:	b086      	sub	sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005980:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005982:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005986:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8005988:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800598c:	2512      	movs	r5, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800598e:	4813      	ldr	r0, [pc, #76]	; (80059dc <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005990:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005992:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8005994:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005996:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005998:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800599a:	f7fc f82f 	bl	80019fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <HAL_I2C_MspInit+0x70>)
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80059a6:	61da      	str	r2, [r3, #28]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80059ae:	4622      	mov	r2, r4
 80059b0:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059b2:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80059b4:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059b6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80059b8:	f7fb fde0 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80059bc:	201f      	movs	r0, #31
 80059be:	f7fb fe13 	bl	80015e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80059c2:	4622      	mov	r2, r4
 80059c4:	4621      	mov	r1, r4
 80059c6:	2020      	movs	r0, #32
 80059c8:	f7fb fdd8 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80059cc:	2020      	movs	r0, #32
 80059ce:	f7fb fe0b 	bl	80015e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059d2:	b006      	add	sp, #24
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
 80059d6:	bf00      	nop
 80059d8:	40005400 	.word	0x40005400
 80059dc:	48000400 	.word	0x48000400
 80059e0:	40021000 	.word	0x40021000

080059e4 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80059e4:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 80059e6:	6802      	ldr	r2, [r0, #0]
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <HAL_RTC_MspInit+0x38>)
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d000      	beq.n	80059f0 <HAL_RTC_MspInit+0xc>
 80059ee:	bd08      	pop	{r3, pc}
 80059f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80059f4:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <HAL_RTC_MspInit+0x3c>)
 80059fa:	fab2 f282 	clz	r2, r2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	2101      	movs	r1, #1
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8005a04:	2200      	movs	r2, #0
    __HAL_RCC_RTC_ENABLE();
 8005a06:	6019      	str	r1, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8005a08:	2003      	movs	r0, #3
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	f7fb fdb6 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8005a10:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8005a16:	f7fb bde7 	b.w	80015e8 <HAL_NVIC_EnableIRQ>
 8005a1a:	bf00      	nop
 8005a1c:	40002800 	.word	0x40002800
 8005a20:	10908100 	.word	0x10908100

08005a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8005a24:	6802      	ldr	r2, [r0, #0]
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <HAL_UART_MspInit+0x54>)
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d000      	beq.n	8005a2e <HAL_UART_MspInit+0xa>
 8005a2c:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a2e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 8005a32:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a34:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a36:	4811      	ldr	r0, [pc, #68]	; (8005a7c <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a3c:	619a      	str	r2, [r3, #24]
 8005a3e:	699b      	ldr	r3, [r3, #24]
{
 8005a40:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a46:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a4a:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a4c:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a4e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005a50:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a52:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a56:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a58:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005a5a:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5c:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a60:	f7fb ffcc 	bl	80019fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a64:	4622      	mov	r2, r4
 8005a66:	4621      	mov	r1, r4
 8005a68:	2025      	movs	r0, #37	; 0x25
 8005a6a:	f7fb fd87 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a6e:	2025      	movs	r0, #37	; 0x25
 8005a70:	f7fb fdba 	bl	80015e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005a74:	b007      	add	sp, #28
 8005a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a78:	40013800 	.word	0x40013800
 8005a7c:	48000800 	.word	0x48000800

08005a80 <SVC_Handler>:
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop

08005a84 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop

08005a88 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a8a:	f7fb f93f 	bl	8000d0c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005a8e:	f7fb fddf 	bl	8001650 <HAL_SYSTICK_IRQHandler>
  rtc_flag2 = 1;
  i2c_flag2 = 1;
  RTC_timer_flag = 1;
  flash_flag = 1;
  adc_flag = 1;
  if(pump_flag == 1){
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <SysTick_Handler+0x38>)
  systick_flag = 1;
 8005a94:	4f0b      	ldr	r7, [pc, #44]	; (8005ac4 <SysTick_Handler+0x3c>)
  if(pump_flag == 1){
 8005a96:	781a      	ldrb	r2, [r3, #0]
  rtc_flag2 = 1;
 8005a98:	4e0b      	ldr	r6, [pc, #44]	; (8005ac8 <SysTick_Handler+0x40>)
  i2c_flag2 = 1;
 8005a9a:	4d0c      	ldr	r5, [pc, #48]	; (8005acc <SysTick_Handler+0x44>)
  RTC_timer_flag = 1;
 8005a9c:	4c0c      	ldr	r4, [pc, #48]	; (8005ad0 <SysTick_Handler+0x48>)
  flash_flag = 1;
 8005a9e:	480d      	ldr	r0, [pc, #52]	; (8005ad4 <SysTick_Handler+0x4c>)
  adc_flag = 1;
 8005aa0:	490d      	ldr	r1, [pc, #52]	; (8005ad8 <SysTick_Handler+0x50>)
  systick_flag = 1;
 8005aa2:	2301      	movs	r3, #1
  if(pump_flag == 1){
 8005aa4:	429a      	cmp	r2, r3
  systick_flag = 1;
 8005aa6:	703b      	strb	r3, [r7, #0]
  rtc_flag2 = 1;
 8005aa8:	7033      	strb	r3, [r6, #0]
  i2c_flag2 = 1;
 8005aaa:	702b      	strb	r3, [r5, #0]
  RTC_timer_flag = 1;
 8005aac:	7023      	strb	r3, [r4, #0]
  flash_flag = 1;
 8005aae:	7003      	strb	r3, [r0, #0]
  adc_flag = 1;
 8005ab0:	700b      	strb	r3, [r1, #0]
  if(pump_flag == 1){
 8005ab2:	d103      	bne.n	8005abc <SysTick_Handler+0x34>
	  valve_timer += 1;
 8005ab4:	4a09      	ldr	r2, [pc, #36]	; (8005adc <SysTick_Handler+0x54>)
 8005ab6:	7813      	ldrb	r3, [r2, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	7013      	strb	r3, [r2, #0]
 8005abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	200002cc 	.word	0x200002cc
 8005ac4:	200002e9 	.word	0x200002e9
 8005ac8:	200002dd 	.word	0x200002dd
 8005acc:	200002bc 	.word	0x200002bc
 8005ad0:	20000250 	.word	0x20000250
 8005ad4:	20000294 	.word	0x20000294
 8005ad8:	2000026a 	.word	0x2000026a
 8005adc:	2000030c 	.word	0x2000030c

08005ae0 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <RTC_WKUP_IRQHandler+0x8>)
 8005ae2:	f7fe b8c9 	b.w	8003c78 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8005ae6:	bf00      	nop
 8005ae8:	200004a8 	.word	0x200004a8

08005aec <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005aec:	2001      	movs	r0, #1
 8005aee:	f7fc b875 	b.w	8001bdc <HAL_GPIO_EXTI_IRQHandler>
 8005af2:	bf00      	nop

08005af4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005af4:	4801      	ldr	r0, [pc, #4]	; (8005afc <DMA1_Channel2_IRQHandler+0x8>)
 8005af6:	f7fb be4d 	b.w	8001794 <HAL_DMA_IRQHandler>
 8005afa:	bf00      	nop
 8005afc:	200004e0 	.word	0x200004e0

08005b00 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8005b00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005b02:	2040      	movs	r0, #64	; 0x40
 8005b04:	f7fc f86a 	bl	8001bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  pump_flag = 1;
 8005b08:	4b01      	ldr	r3, [pc, #4]	; (8005b10 <EXTI9_5_IRQHandler+0x10>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	bd08      	pop	{r3, pc}
 8005b10:	200002cc 	.word	0x200002cc

08005b14 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <I2C1_EV_IRQHandler+0x8>)
 8005b16:	f7fc ba07 	b.w	8001f28 <HAL_I2C_EV_IRQHandler>
 8005b1a:	bf00      	nop
 8005b1c:	200003a4 	.word	0x200003a4

08005b20 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <I2C1_ER_IRQHandler+0x8>)
 8005b22:	f7fc bd43 	b.w	80025ac <HAL_I2C_ER_IRQHandler>
 8005b26:	bf00      	nop
 8005b28:	200003a4 	.word	0x200003a4

08005b2c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <USART1_IRQHandler+0x8>)
 8005b2e:	f7fe b945 	b.w	8003dbc <HAL_UART_IRQHandler>
 8005b32:	bf00      	nop
 8005b34:	20000438 	.word	0x20000438

08005b38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b38:	4917      	ldr	r1, [pc, #92]	; (8005b98 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005b3a:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005b3e:	4819      	ldr	r0, [pc, #100]	; (8005ba4 <SystemInit+0x6c>)
{
 8005b40:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b42:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 8005b46:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8005b4a:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8005b4e:	681c      	ldr	r4, [r3, #0]
 8005b50:	f044 0401 	orr.w	r4, r4, #1
 8005b54:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8005b56:	685c      	ldr	r4, [r3, #4]
 8005b58:	4022      	ands	r2, r4
 8005b5a:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005b62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b66:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b6e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005b76:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	f022 020f 	bic.w	r2, r2, #15
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005b82:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005b84:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005b8a:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8005b8c:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b8e:	608a      	str	r2, [r1, #8]
#endif
}
 8005b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	e000ed00 	.word	0xe000ed00
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	f87fc00c 	.word	0xf87fc00c
 8005ba4:	ff00fccc 	.word	0xff00fccc

08005ba8 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 8005ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
 8005bac:	2200      	movs	r2, #0
 8005bae:	4b9e      	ldr	r3, [pc, #632]	; (8005e28 <uart_comms+0x280>)
 8005bb0:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 8005bb2:	4b9e      	ldr	r3, [pc, #632]	; (8005e2c <uart_comms+0x284>)
 8005bb4:	4a9e      	ldr	r2, [pc, #632]	; (8005e30 <uart_comms+0x288>)
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	6819      	ldr	r1, [r3, #0]
 8005bba:	489e      	ldr	r0, [pc, #632]	; (8005e34 <uart_comms+0x28c>)
 8005bbc:	7800      	ldrb	r0, [r0, #0]
 8005bbe:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	781a      	ldrb	r2, [r3, #0]
 8005bc4:	2a24      	cmp	r2, #36	; 0x24
 8005bc6:	d00b      	beq.n	8005be0 <uart_comms+0x38>

		uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	2a24      	cmp	r2, #36	; 0x24
 8005bcc:	d00d      	beq.n	8005bea <uart_comms+0x42>
		}
		memset(uart_command,0x00, 60);
		memset(uart_command_copy,0x00,60);
		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 8005bce:	4b98      	ldr	r3, [pc, #608]	; (8005e30 <uart_comms+0x288>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b3b      	cmp	r3, #59	; 0x3b
 8005bd4:	d902      	bls.n	8005bdc <uart_comms+0x34>
		uart_counter = 0;
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4b95      	ldr	r3, [pc, #596]	; (8005e30 <uart_comms+0x288>)
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_counter += 1;
 8005be0:	4993      	ldr	r1, [pc, #588]	; (8005e30 <uart_comms+0x288>)
 8005be2:	780a      	ldrb	r2, [r1, #0]
 8005be4:	3201      	adds	r2, #1
 8005be6:	700a      	strb	r2, [r1, #0]
 8005be8:	e7ee      	b.n	8005bc8 <uart_comms+0x20>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8005bea:	4a91      	ldr	r2, [pc, #580]	; (8005e30 <uart_comms+0x288>)
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	1899      	adds	r1, r3, r2
 8005bf0:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8005bf4:	290a      	cmp	r1, #10
 8005bf6:	d1ea      	bne.n	8005bce <uart_comms+0x26>
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8005bfe:	2b0d      	cmp	r3, #13
 8005c00:	d1e5      	bne.n	8005bce <uart_comms+0x26>
 8005c02:	2a02      	cmp	r2, #2
 8005c04:	d9e3      	bls.n	8005bce <uart_comms+0x26>
		memset(return_value,0x00, 50);
 8005c06:	2232      	movs	r2, #50	; 0x32
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4b8b      	ldr	r3, [pc, #556]	; (8005e38 <uart_comms+0x290>)
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	f000 fe0a 	bl	8006826 <memset>
		uart_command_copy = uart_command;
 8005c12:	4b86      	ldr	r3, [pc, #536]	; (8005e2c <uart_comms+0x284>)
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	4b89      	ldr	r3, [pc, #548]	; (8005e3c <uart_comms+0x294>)
 8005c18:	6018      	str	r0, [r3, #0]
		switch(uart_command[1]){
 8005c1a:	7843      	ldrb	r3, [r0, #1]
 8005c1c:	3b41      	subs	r3, #65	; 0x41
 8005c1e:	2b0b      	cmp	r3, #11
 8005c20:	d829      	bhi.n	8005c76 <uart_comms+0xce>
 8005c22:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005c26:	000c      	.short	0x000c
 8005c28:	0067003a 	.word	0x0067003a
 8005c2c:	00b60086 	.word	0x00b60086
 8005c30:	012f00d5 	.word	0x012f00d5
 8005c34:	01aa015b 	.word	0x01aa015b
 8005c38:	036b0213 	.word	0x036b0213
 8005c3c:	0457      	.short	0x0457
			memcpy(studentnumber, uart_command, 2 );
 8005c3e:	4b80      	ldr	r3, [pc, #512]	; (8005e40 <uart_comms+0x298>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	8801      	ldrh	r1, [r0, #0]
 8005c44:	8011      	strh	r1, [r2, #0]
			memcpy(studentnumber+2,comma,1);
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	497e      	ldr	r1, [pc, #504]	; (8005e44 <uart_comms+0x29c>)
 8005c4a:	7809      	ldrb	r1, [r1, #0]
 8005c4c:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	497d      	ldr	r1, [pc, #500]	; (8005e48 <uart_comms+0x2a0>)
 8005c52:	6808      	ldr	r0, [r1, #0]
 8005c54:	6849      	ldr	r1, [r1, #4]
 8005c56:	f8c2 0003 	str.w	r0, [r2, #3]
 8005c5a:	f8c2 1007 	str.w	r1, [r2, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8005c5e:	6819      	ldr	r1, [r3, #0]
 8005c60:	4b7a      	ldr	r3, [pc, #488]	; (8005e4c <uart_comms+0x2a4>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f8c1 200b 	str.w	r2, [r1, #11]
 8005c6a:	f8c1 300f 	str.w	r3, [r1, #15]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 8005c6e:	220d      	movs	r2, #13
 8005c70:	4877      	ldr	r0, [pc, #476]	; (8005e50 <uart_comms+0x2a8>)
 8005c72:	f7fe f825 	bl	8003cc0 <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 8005c76:	243c      	movs	r4, #60	; 0x3c
 8005c78:	4622      	mov	r2, r4
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4b6b      	ldr	r3, [pc, #428]	; (8005e2c <uart_comms+0x284>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f000 fdd1 	bl	8006826 <memset>
		memset(uart_command_copy,0x00,60);
 8005c84:	4622      	mov	r2, r4
 8005c86:	2100      	movs	r1, #0
 8005c88:	4b6c      	ldr	r3, [pc, #432]	; (8005e3c <uart_comms+0x294>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	f000 fdcb 	bl	8006826 <memset>
		uart_counter = 0;
 8005c90:	2200      	movs	r2, #0
 8005c92:	4b67      	ldr	r3, [pc, #412]	; (8005e30 <uart_comms+0x288>)
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if(uart_command[3]=='1'){
 8005c9a:	78c3      	ldrb	r3, [r0, #3]
 8005c9c:	2b31      	cmp	r3, #49	; 0x31
 8005c9e:	d015      	beq.n	8005ccc <uart_comms+0x124>
			else if(uart_command[3] == '0'){
 8005ca0:	2b30      	cmp	r3, #48	; 0x30
 8005ca2:	d01d      	beq.n	8005ce0 <uart_comms+0x138>
			memcpy(return_value, uart_command, 2);
 8005ca4:	4b64      	ldr	r3, [pc, #400]	; (8005e38 <uart_comms+0x290>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4960      	ldr	r1, [pc, #384]	; (8005e2c <uart_comms+0x284>)
 8005caa:	6809      	ldr	r1, [r1, #0]
 8005cac:	8809      	ldrh	r1, [r1, #0]
 8005cae:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4966      	ldr	r1, [pc, #408]	; (8005e4c <uart_comms+0x2a4>)
 8005cb4:	8809      	ldrh	r1, [r1, #0]
 8005cb6:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005cb8:	681c      	ldr	r4, [r3, #0]
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f7fa fa88 	bl	80001d0 <strlen>
 8005cc0:	b282      	uxth	r2, r0
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4862      	ldr	r0, [pc, #392]	; (8005e50 <uart_comms+0x2a8>)
 8005cc6:	f7fd fffb 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8005cca:	e7d4      	b.n	8005c76 <uart_comms+0xce>
				valve_state = valve_OPEN;
 8005ccc:	4a61      	ldr	r2, [pc, #388]	; (8005e54 <uart_comms+0x2ac>)
 8005cce:	4b62      	ldr	r3, [pc, #392]	; (8005e58 <uart_comms+0x2b0>)
 8005cd0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cd8:	4860      	ldr	r0, [pc, #384]	; (8005e5c <uart_comms+0x2b4>)
 8005cda:	f7fb ff79 	bl	8001bd0 <HAL_GPIO_WritePin>
 8005cde:	e7e1      	b.n	8005ca4 <uart_comms+0xfc>
				valve_state=valve_CLOSE;
 8005ce0:	4a5f      	ldr	r2, [pc, #380]	; (8005e60 <uart_comms+0x2b8>)
 8005ce2:	4b5d      	ldr	r3, [pc, #372]	; (8005e58 <uart_comms+0x2b0>)
 8005ce4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cec:	485b      	ldr	r0, [pc, #364]	; (8005e5c <uart_comms+0x2b4>)
 8005cee:	f7fb ff6f 	bl	8001bd0 <HAL_GPIO_WritePin>
 8005cf2:	e7d7      	b.n	8005ca4 <uart_comms+0xfc>
			if(uart_command[3]=='0'){
 8005cf4:	78c3      	ldrb	r3, [r0, #3]
 8005cf6:	2b30      	cmp	r3, #48	; 0x30
 8005cf8:	d013      	beq.n	8005d22 <uart_comms+0x17a>
			else if(uart_command[3] == '1'){
 8005cfa:	2b31      	cmp	r3, #49	; 0x31
 8005cfc:	d015      	beq.n	8005d2a <uart_comms+0x182>
			memcpy(return_value, uart_command, 2);
 8005cfe:	4b4e      	ldr	r3, [pc, #312]	; (8005e38 <uart_comms+0x290>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	8801      	ldrh	r1, [r0, #0]
 8005d04:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4950      	ldr	r1, [pc, #320]	; (8005e4c <uart_comms+0x2a4>)
 8005d0a:	8809      	ldrh	r1, [r1, #0]
 8005d0c:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8005d0e:	681c      	ldr	r4, [r3, #0]
 8005d10:	4620      	mov	r0, r4
 8005d12:	f7fa fa5d 	bl	80001d0 <strlen>
 8005d16:	b282      	uxth	r2, r0
 8005d18:	4621      	mov	r1, r4
 8005d1a:	484d      	ldr	r0, [pc, #308]	; (8005e50 <uart_comms+0x2a8>)
 8005d1c:	f7fd ffd0 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8005d20:	e7a9      	b.n	8005c76 <uart_comms+0xce>
				auto_heating = 0;
 8005d22:	2200      	movs	r2, #0
 8005d24:	4b4f      	ldr	r3, [pc, #316]	; (8005e64 <uart_comms+0x2bc>)
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e7e9      	b.n	8005cfe <uart_comms+0x156>
				auto_heating = 1;
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4b4d      	ldr	r3, [pc, #308]	; (8005e64 <uart_comms+0x2bc>)
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	e7e5      	b.n	8005cfe <uart_comms+0x156>
			if(auto_heating == 0){	// if auto heating off
 8005d32:	4b4c      	ldr	r3, [pc, #304]	; (8005e64 <uart_comms+0x2bc>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b923      	cbnz	r3, 8005d42 <uart_comms+0x19a>
				if(uart_command[3]=='0'){
 8005d38:	78c3      	ldrb	r3, [r0, #3]
 8005d3a:	2b30      	cmp	r3, #48	; 0x30
 8005d3c:	d015      	beq.n	8005d6a <uart_comms+0x1c2>
				else if(uart_command[3] == '1'){
 8005d3e:	2b31      	cmp	r3, #49	; 0x31
 8005d40:	d01d      	beq.n	8005d7e <uart_comms+0x1d6>
			memcpy(return_value, uart_command, 2);
 8005d42:	4b3d      	ldr	r3, [pc, #244]	; (8005e38 <uart_comms+0x290>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4939      	ldr	r1, [pc, #228]	; (8005e2c <uart_comms+0x284>)
 8005d48:	6809      	ldr	r1, [r1, #0]
 8005d4a:	8809      	ldrh	r1, [r1, #0]
 8005d4c:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	493e      	ldr	r1, [pc, #248]	; (8005e4c <uart_comms+0x2a4>)
 8005d52:	8809      	ldrh	r1, [r1, #0]
 8005d54:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005d56:	681c      	ldr	r4, [r3, #0]
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f7fa fa39 	bl	80001d0 <strlen>
 8005d5e:	b282      	uxth	r2, r0
 8005d60:	4621      	mov	r1, r4
 8005d62:	483b      	ldr	r0, [pc, #236]	; (8005e50 <uart_comms+0x2a8>)
 8005d64:	f7fd ffac 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8005d68:	e785      	b.n	8005c76 <uart_comms+0xce>
					heater_state = heater_OFF;
 8005d6a:	4a3f      	ldr	r2, [pc, #252]	; (8005e68 <uart_comms+0x2c0>)
 8005d6c:	4b3f      	ldr	r3, [pc, #252]	; (8005e6c <uart_comms+0x2c4>)
 8005d6e:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 8005d70:	2200      	movs	r2, #0
 8005d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d76:	4839      	ldr	r0, [pc, #228]	; (8005e5c <uart_comms+0x2b4>)
 8005d78:	f7fb ff2a 	bl	8001bd0 <HAL_GPIO_WritePin>
 8005d7c:	e7e1      	b.n	8005d42 <uart_comms+0x19a>
					heater_state = heater_ON;
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <uart_comms+0x2c8>)
 8005d80:	4b3a      	ldr	r3, [pc, #232]	; (8005e6c <uart_comms+0x2c4>)
 8005d82:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 8005d84:	2201      	movs	r2, #1
 8005d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d8a:	4834      	ldr	r0, [pc, #208]	; (8005e5c <uart_comms+0x2b4>)
 8005d8c:	f7fb ff20 	bl	8001bd0 <HAL_GPIO_WritePin>
 8005d90:	e7d7      	b.n	8005d42 <uart_comms+0x19a>
			if(uart_command[3]=='0'){ // logging disable
 8005d92:	78c3      	ldrb	r3, [r0, #3]
 8005d94:	2b30      	cmp	r3, #48	; 0x30
 8005d96:	d013      	beq.n	8005dc0 <uart_comms+0x218>
			else if(uart_command[3] == '1'){ // logging enable
 8005d98:	2b31      	cmp	r3, #49	; 0x31
 8005d9a:	d015      	beq.n	8005dc8 <uart_comms+0x220>
			memcpy(return_value, uart_command, 2);
 8005d9c:	4b26      	ldr	r3, [pc, #152]	; (8005e38 <uart_comms+0x290>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	8801      	ldrh	r1, [r0, #0]
 8005da2:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4929      	ldr	r1, [pc, #164]	; (8005e4c <uart_comms+0x2a4>)
 8005da8:	8809      	ldrh	r1, [r1, #0]
 8005daa:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8005dac:	681c      	ldr	r4, [r3, #0]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f7fa fa0e 	bl	80001d0 <strlen>
 8005db4:	b282      	uxth	r2, r0
 8005db6:	4621      	mov	r1, r4
 8005db8:	4825      	ldr	r0, [pc, #148]	; (8005e50 <uart_comms+0x2a8>)
 8005dba:	f7fd ff81 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8005dbe:	e75a      	b.n	8005c76 <uart_comms+0xce>
				enableFlashLogging = 0;
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4b2c      	ldr	r3, [pc, #176]	; (8005e74 <uart_comms+0x2cc>)
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e7e9      	b.n	8005d9c <uart_comms+0x1f4>
				enableFlashLogging = 1;
 8005dc8:	2201      	movs	r2, #1
 8005dca:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <uart_comms+0x2cc>)
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e7e5      	b.n	8005d9c <uart_comms+0x1f4>
			sizeOfTemp = uart_counter - 5;
 8005dd0:	4b17      	ldr	r3, [pc, #92]	; (8005e30 <uart_comms+0x288>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	3b05      	subs	r3, #5
 8005dd6:	4a28      	ldr	r2, [pc, #160]	; (8005e78 <uart_comms+0x2d0>)
 8005dd8:	7013      	strb	r3, [r2, #0]
			memset(temp_val, 0x00, 4);
 8005dda:	4c28      	ldr	r4, [pc, #160]	; (8005e7c <uart_comms+0x2d4>)
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	2600      	movs	r6, #0
 8005de0:	601e      	str	r6, [r3, #0]
			memcpy(temp_val, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 8005de2:	4d12      	ldr	r5, [pc, #72]	; (8005e2c <uart_comms+0x284>)
 8005de4:	6829      	ldr	r1, [r5, #0]
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	3103      	adds	r1, #3
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	f000 fd10 	bl	8006810 <memcpy>
			*set_temp = strtol(temp_val, NULL,10);
 8005df0:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <uart_comms+0x2d8>)
 8005df2:	681f      	ldr	r7, [r3, #0]
 8005df4:	220a      	movs	r2, #10
 8005df6:	4631      	mov	r1, r6
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	f000 fedf 	bl	8006bbc <strtol>
 8005dfe:	7038      	strb	r0, [r7, #0]
			memcpy(return_value, uart_command,2);
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <uart_comms+0x290>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	6829      	ldr	r1, [r5, #0]
 8005e06:	8809      	ldrh	r1, [r1, #0]
 8005e08:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2,endSimbol, 2);
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	490f      	ldr	r1, [pc, #60]	; (8005e4c <uart_comms+0x2a4>)
 8005e0e:	8809      	ldrh	r1, [r1, #0]
 8005e10:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005e12:	681c      	ldr	r4, [r3, #0]
 8005e14:	4620      	mov	r0, r4
 8005e16:	f7fa f9db 	bl	80001d0 <strlen>
 8005e1a:	b282      	uxth	r2, r0
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	480c      	ldr	r0, [pc, #48]	; (8005e50 <uart_comms+0x2a8>)
 8005e20:	f7fd ff4e 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8005e24:	e727      	b.n	8005c76 <uart_comms+0xce>
 8005e26:	bf00      	nop
 8005e28:	200002de 	.word	0x200002de
 8005e2c:	200002fc 	.word	0x200002fc
 8005e30:	20000304 	.word	0x20000304
 8005e34:	200005a4 	.word	0x200005a4
 8005e38:	200002d8 	.word	0x200002d8
 8005e3c:	20000300 	.word	0x20000300
 8005e40:	200005a0 	.word	0x200005a0
 8005e44:	20000004 	.word	0x20000004
 8005e48:	20000040 	.word	0x20000040
 8005e4c:	20000008 	.word	0x20000008
 8005e50:	20000438 	.word	0x20000438
 8005e54:	20000054 	.word	0x20000054
 8005e58:	20000308 	.word	0x20000308
 8005e5c:	48000400 	.word	0x48000400
 8005e60:	2000004c 	.word	0x2000004c
 8005e64:	20000278 	.word	0x20000278
 8005e68:	20000014 	.word	0x20000014
 8005e6c:	200002b0 	.word	0x200002b0
 8005e70:	20000018 	.word	0x20000018
 8005e74:	20000289 	.word	0x20000289
 8005e78:	200002e8 	.word	0x200002e8
 8005e7c:	200002f0 	.word	0x200002f0
 8005e80:	200002e4 	.word	0x200002e4
			memcpy(return_value, uart_command, 2);
 8005e84:	4cae      	ldr	r4, [pc, #696]	; (8006140 <uart_comms+0x598>)
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	8802      	ldrh	r2, [r0, #0]
 8005e8a:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	4aad      	ldr	r2, [pc, #692]	; (8006144 <uart_comms+0x59c>)
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	709a      	strb	r2, [r3, #2]
			sprintf(temp_val,"%d", *set_temp);
 8005e94:	4bac      	ldr	r3, [pc, #688]	; (8006148 <uart_comms+0x5a0>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4eac      	ldr	r6, [pc, #688]	; (800614c <uart_comms+0x5a4>)
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	49ac      	ldr	r1, [pc, #688]	; (8006150 <uart_comms+0x5a8>)
 8005e9e:	6830      	ldr	r0, [r6, #0]
 8005ea0:	f000 fd94 	bl	80069cc <siprintf>
			memcpy(return_value+3, temp_val, strlen(temp_val));
 8005ea4:	6825      	ldr	r5, [r4, #0]
 8005ea6:	3503      	adds	r5, #3
 8005ea8:	6836      	ldr	r6, [r6, #0]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f7fa f990 	bl	80001d0 <strlen>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fcab 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),endSimbol, 2);
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f7fa f987 	bl	80001d0 <strlen>
 8005ec2:	4ba4      	ldr	r3, [pc, #656]	; (8006154 <uart_comms+0x5ac>)
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005ec8:	6824      	ldr	r4, [r4, #0]
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7fa f980 	bl	80001d0 <strlen>
 8005ed0:	b282      	uxth	r2, r0
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	48a0      	ldr	r0, [pc, #640]	; (8006158 <uart_comms+0x5b0>)
 8005ed6:	f7fd fef3 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8005eda:	e6cc      	b.n	8005c76 <uart_comms+0xce>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8005edc:	4c9f      	ldr	r4, [pc, #636]	; (800615c <uart_comms+0x5b4>)
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	22ca      	movs	r2, #202	; 0xca
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ee4:	2253      	movs	r2, #83	; 0x53
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7fd fe35 	bl	8003b58 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8005eee:	499c      	ldr	r1, [pc, #624]	; (8006160 <uart_comms+0x5b8>)
 8005ef0:	4b9c      	ldr	r3, [pc, #624]	; (8006164 <uart_comms+0x5bc>)
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	f000 fd8e 	bl	8006a14 <strtok>
 8005ef8:	4e9b      	ldr	r6, [pc, #620]	; (8006168 <uart_comms+0x5c0>)
 8005efa:	6030      	str	r0, [r6, #0]
			timeOfRTC->Hours = strtol(heating_info, NULL,10);
 8005efc:	4d9b      	ldr	r5, [pc, #620]	; (800616c <uart_comms+0x5c4>)
 8005efe:	682f      	ldr	r7, [r5, #0]
 8005f00:	220a      	movs	r2, #10
 8005f02:	2100      	movs	r1, #0
 8005f04:	f000 fe5a 	bl	8006bbc <strtol>
 8005f08:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 8005f0a:	4999      	ldr	r1, [pc, #612]	; (8006170 <uart_comms+0x5c8>)
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f000 fd81 	bl	8006a14 <strtok>
 8005f12:	6030      	str	r0, [r6, #0]
			timeOfRTC->Minutes = strtol(heating_info, NULL,10);
 8005f14:	682f      	ldr	r7, [r5, #0]
 8005f16:	220a      	movs	r2, #10
 8005f18:	2100      	movs	r1, #0
 8005f1a:	f000 fe4f 	bl	8006bbc <strtol>
 8005f1e:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 8005f20:	4994      	ldr	r1, [pc, #592]	; (8006174 <uart_comms+0x5cc>)
 8005f22:	2000      	movs	r0, #0
 8005f24:	f000 fd76 	bl	8006a14 <strtok>
 8005f28:	6030      	str	r0, [r6, #0]
			timeOfRTC->Seconds = strtol(heating_info, NULL,10);
 8005f2a:	682e      	ldr	r6, [r5, #0]
 8005f2c:	220a      	movs	r2, #10
 8005f2e:	2100      	movs	r1, #0
 8005f30:	f000 fe44 	bl	8006bbc <strtol>
 8005f34:	70b0      	strb	r0, [r6, #2]
			HAL_RTC_SetTime(&hrtc, timeOfRTC, RTC_FORMAT_BIN);
 8005f36:	2200      	movs	r2, #0
 8005f38:	6829      	ldr	r1, [r5, #0]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f7fd fc46 	bl	80037cc <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8005f40:	2200      	movs	r2, #0
 8005f42:	4b8d      	ldr	r3, [pc, #564]	; (8006178 <uart_comms+0x5d0>)
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	4620      	mov	r0, r4
 8005f48:	f7fd fd34 	bl	80039b4 <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	22ff      	movs	r2, #255	; 0xff
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24
			memcpy(return_value, uart_command, 2);
 8005f52:	4b7b      	ldr	r3, [pc, #492]	; (8006140 <uart_comms+0x598>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4989      	ldr	r1, [pc, #548]	; (800617c <uart_comms+0x5d4>)
 8005f58:	6809      	ldr	r1, [r1, #0]
 8005f5a:	8809      	ldrh	r1, [r1, #0]
 8005f5c:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2,endSimbol, 2);
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	497c      	ldr	r1, [pc, #496]	; (8006154 <uart_comms+0x5ac>)
 8005f62:	8809      	ldrh	r1, [r1, #0]
 8005f64:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8005f66:	681c      	ldr	r4, [r3, #0]
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f7fa f931 	bl	80001d0 <strlen>
 8005f6e:	b282      	uxth	r2, r0
 8005f70:	4621      	mov	r1, r4
 8005f72:	4879      	ldr	r0, [pc, #484]	; (8006158 <uart_comms+0x5b0>)
 8005f74:	f7fd fea4 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8005f78:	e67d      	b.n	8005c76 <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8005f7a:	4c71      	ldr	r4, [pc, #452]	; (8006140 <uart_comms+0x598>)
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	8802      	ldrh	r2, [r0, #0]
 8005f80:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006144 <uart_comms+0x59c>
 8005f88:	f898 2000 	ldrb.w	r2, [r8]
 8005f8c:	709a      	strb	r2, [r3, #2]
			itoa((timeOfRTC->Hours),temp_time_var,10  );
 8005f8e:	4f77      	ldr	r7, [pc, #476]	; (800616c <uart_comms+0x5c4>)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	4d7b      	ldr	r5, [pc, #492]	; (8006180 <uart_comms+0x5d8>)
 8005f94:	220a      	movs	r2, #10
 8005f96:	6829      	ldr	r1, [r5, #0]
 8005f98:	7818      	ldrb	r0, [r3, #0]
 8005f9a:	f000 fc2f 	bl	80067fc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005f9e:	6826      	ldr	r6, [r4, #0]
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f7fa f915 	bl	80001d0 <strlen>
 8005fa6:	4406      	add	r6, r0
 8005fa8:	f8d5 9000 	ldr.w	r9, [r5]
 8005fac:	4648      	mov	r0, r9
 8005fae:	f7fa f90f 	bl	80001d0 <strlen>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f000 fc2a 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005fbc:	6826      	ldr	r6, [r4, #0]
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7fa f906 	bl	80001d0 <strlen>
 8005fc4:	f898 3000 	ldrb.w	r3, [r8]
 8005fc8:	5433      	strb	r3, [r6, r0]
			itoa((timeOfRTC->Minutes),temp_time_var,10  );
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	220a      	movs	r2, #10
 8005fce:	6829      	ldr	r1, [r5, #0]
 8005fd0:	7858      	ldrb	r0, [r3, #1]
 8005fd2:	f000 fc13 	bl	80067fc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005fd6:	6826      	ldr	r6, [r4, #0]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f7fa f8f9 	bl	80001d0 <strlen>
 8005fde:	4406      	add	r6, r0
 8005fe0:	f8d5 9000 	ldr.w	r9, [r5]
 8005fe4:	4648      	mov	r0, r9
 8005fe6:	f7fa f8f3 	bl	80001d0 <strlen>
 8005fea:	4602      	mov	r2, r0
 8005fec:	4649      	mov	r1, r9
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f000 fc0e 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005ff4:	6826      	ldr	r6, [r4, #0]
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f7fa f8ea 	bl	80001d0 <strlen>
 8005ffc:	f898 3000 	ldrb.w	r3, [r8]
 8006000:	5433      	strb	r3, [r6, r0]
			itoa((timeOfRTC->Seconds),temp_time_var,10  );
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	220a      	movs	r2, #10
 8006006:	6829      	ldr	r1, [r5, #0]
 8006008:	7898      	ldrb	r0, [r3, #2]
 800600a:	f000 fbf7 	bl	80067fc <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 800600e:	6826      	ldr	r6, [r4, #0]
 8006010:	4630      	mov	r0, r6
 8006012:	f7fa f8dd 	bl	80001d0 <strlen>
 8006016:	4406      	add	r6, r0
 8006018:	682d      	ldr	r5, [r5, #0]
 800601a:	4628      	mov	r0, r5
 800601c:	f7fa f8d8 	bl	80001d0 <strlen>
 8006020:	4602      	mov	r2, r0
 8006022:	4629      	mov	r1, r5
 8006024:	4630      	mov	r0, r6
 8006026:	f000 fbf3 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	4628      	mov	r0, r5
 800602e:	f7fa f8cf 	bl	80001d0 <strlen>
 8006032:	4b48      	ldr	r3, [pc, #288]	; (8006154 <uart_comms+0x5ac>)
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006038:	6824      	ldr	r4, [r4, #0]
 800603a:	4620      	mov	r0, r4
 800603c:	f7fa f8c8 	bl	80001d0 <strlen>
 8006040:	b282      	uxth	r2, r0
 8006042:	4621      	mov	r1, r4
 8006044:	4844      	ldr	r0, [pc, #272]	; (8006158 <uart_comms+0x5b0>)
 8006046:	f7fd fe3b 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 800604a:	e614      	b.n	8005c76 <uart_comms+0xce>
			if(uart_command[3] == '1'){ // first heating schedule
 800604c:	78c3      	ldrb	r3, [r0, #3]
 800604e:	2b31      	cmp	r3, #49	; 0x31
 8006050:	d019      	beq.n	8006086 <uart_comms+0x4de>
			else if(uart_command[3] == '2'){ // second heating schedule
 8006052:	2b32      	cmp	r3, #50	; 0x32
 8006054:	f000 809a 	beq.w	800618c <uart_comms+0x5e4>
			else if(uart_command[3] == '3'){ // 3rd heating schedule
 8006058:	2b33      	cmp	r3, #51	; 0x33
 800605a:	f000 80f3 	beq.w	8006244 <uart_comms+0x69c>
			memcpy(return_value, uart_command, 2);
 800605e:	4b38      	ldr	r3, [pc, #224]	; (8006140 <uart_comms+0x598>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4946      	ldr	r1, [pc, #280]	; (800617c <uart_comms+0x5d4>)
 8006064:	6809      	ldr	r1, [r1, #0]
 8006066:	8809      	ldrh	r1, [r1, #0]
 8006068:	8011      	strh	r1, [r2, #0]
			memcpy(return_value+2, endSimbol,2 );
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4939      	ldr	r1, [pc, #228]	; (8006154 <uart_comms+0x5ac>)
 800606e:	8809      	ldrh	r1, [r1, #0]
 8006070:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8006072:	681c      	ldr	r4, [r3, #0]
 8006074:	4620      	mov	r0, r4
 8006076:	f7fa f8ab 	bl	80001d0 <strlen>
 800607a:	b282      	uxth	r2, r0
 800607c:	4621      	mov	r1, r4
 800607e:	4836      	ldr	r0, [pc, #216]	; (8006158 <uart_comms+0x5b0>)
 8006080:	f7fd fe1e 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8006084:	e5f7      	b.n	8005c76 <uart_comms+0xce>
				heating_info = strtok((char*)uart_command_copy, ",");
 8006086:	4e3a      	ldr	r6, [pc, #232]	; (8006170 <uart_comms+0x5c8>)
 8006088:	4631      	mov	r1, r6
 800608a:	f000 fcc3 	bl	8006a14 <strtok>
 800608e:	4d36      	ldr	r5, [pc, #216]	; (8006168 <uart_comms+0x5c0>)
 8006090:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 8006092:	4631      	mov	r1, r6
 8006094:	2000      	movs	r0, #0
 8006096:	f000 fcbd 	bl	8006a14 <strtok>
 800609a:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 800609c:	4631      	mov	r1, r6
 800609e:	2000      	movs	r0, #0
 80060a0:	f000 fcb8 	bl	8006a14 <strtok>
 80060a4:	6028      	str	r0, [r5, #0]
				time_intervals[0] = 3600*strtol(heating_info, NULL,10);
 80060a6:	220a      	movs	r2, #10
 80060a8:	2100      	movs	r1, #0
 80060aa:	f000 fd87 	bl	8006bbc <strtol>
 80060ae:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 80060b2:	fb08 f000 	mul.w	r0, r8, r0
 80060b6:	4c33      	ldr	r4, [pc, #204]	; (8006184 <uart_comms+0x5dc>)
 80060b8:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 80060ba:	4631      	mov	r1, r6
 80060bc:	2000      	movs	r0, #0
 80060be:	f000 fca9 	bl	8006a14 <strtok>
 80060c2:	6028      	str	r0, [r5, #0]
				time_intervals[0] = time_intervals[0] + strtol(heating_info, NULL,10)*60;
 80060c4:	f8d4 9000 	ldr.w	r9, [r4]
 80060c8:	220a      	movs	r2, #10
 80060ca:	2100      	movs	r1, #0
 80060cc:	f000 fd76 	bl	8006bbc <strtol>
 80060d0:	273c      	movs	r7, #60	; 0x3c
 80060d2:	fb07 9000 	mla	r0, r7, r0, r9
 80060d6:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 80060d8:	4631      	mov	r1, r6
 80060da:	2000      	movs	r0, #0
 80060dc:	f000 fc9a 	bl	8006a14 <strtok>
 80060e0:	6028      	str	r0, [r5, #0]
				time_intervals[0] = time_intervals[0] + strtol(heating_info, NULL,10);
 80060e2:	f8d4 9000 	ldr.w	r9, [r4]
 80060e6:	220a      	movs	r2, #10
 80060e8:	2100      	movs	r1, #0
 80060ea:	f000 fd67 	bl	8006bbc <strtol>
 80060ee:	4448      	add	r0, r9
 80060f0:	6020      	str	r0, [r4, #0]
				heating_info = (strtok(NULL, ","));
 80060f2:	4631      	mov	r1, r6
 80060f4:	2000      	movs	r0, #0
 80060f6:	f000 fc8d 	bl	8006a14 <strtok>
 80060fa:	6028      	str	r0, [r5, #0]
				time_intervals[1] = 3600*strtol(heating_info, NULL,10);
 80060fc:	220a      	movs	r2, #10
 80060fe:	2100      	movs	r1, #0
 8006100:	f000 fd5c 	bl	8006bbc <strtol>
 8006104:	fb08 f000 	mul.w	r0, r8, r0
 8006108:	6060      	str	r0, [r4, #4]
				heating_info = (strtok(NULL, ","));
 800610a:	4631      	mov	r1, r6
 800610c:	2000      	movs	r0, #0
 800610e:	f000 fc81 	bl	8006a14 <strtok>
 8006112:	6028      	str	r0, [r5, #0]
				time_intervals[1] = time_intervals[1] + strtol(heating_info, NULL,10)*60;
 8006114:	6866      	ldr	r6, [r4, #4]
 8006116:	220a      	movs	r2, #10
 8006118:	2100      	movs	r1, #0
 800611a:	f000 fd4f 	bl	8006bbc <strtol>
 800611e:	fb07 6000 	mla	r0, r7, r0, r6
 8006122:	6060      	str	r0, [r4, #4]
				heating_info = (strtok(NULL, "\r\n"));
 8006124:	4918      	ldr	r1, [pc, #96]	; (8006188 <uart_comms+0x5e0>)
 8006126:	2000      	movs	r0, #0
 8006128:	f000 fc74 	bl	8006a14 <strtok>
 800612c:	6028      	str	r0, [r5, #0]
				time_intervals[1] = time_intervals[1] + strtol(heating_info, NULL,10);
 800612e:	6865      	ldr	r5, [r4, #4]
 8006130:	220a      	movs	r2, #10
 8006132:	2100      	movs	r1, #0
 8006134:	f000 fd42 	bl	8006bbc <strtol>
 8006138:	4428      	add	r0, r5
 800613a:	6060      	str	r0, [r4, #4]
 800613c:	e78f      	b.n	800605e <uart_comms+0x4b6>
 800613e:	bf00      	nop
 8006140:	200002d8 	.word	0x200002d8
 8006144:	20000004 	.word	0x20000004
 8006148:	200002e4 	.word	0x200002e4
 800614c:	200002f0 	.word	0x200002f0
 8006150:	0800736c 	.word	0x0800736c
 8006154:	20000008 	.word	0x20000008
 8006158:	20000438 	.word	0x20000438
 800615c:	200004a8 	.word	0x200004a8
 8006160:	080073a4 	.word	0x080073a4
 8006164:	20000300 	.word	0x20000300
 8006168:	200002b4 	.word	0x200002b4
 800616c:	200002f4 	.word	0x200002f4
 8006170:	080073a8 	.word	0x080073a8
 8006174:	080073ac 	.word	0x080073ac
 8006178:	20000284 	.word	0x20000284
 800617c:	200002fc 	.word	0x200002fc
 8006180:	200002ec 	.word	0x200002ec
 8006184:	200005a8 	.word	0x200005a8
 8006188:	080073b0 	.word	0x080073b0
				heating_info = strtok((char*)uart_command_copy, ",");
 800618c:	4ebe      	ldr	r6, [pc, #760]	; (8006488 <uart_comms+0x8e0>)
 800618e:	4631      	mov	r1, r6
 8006190:	f000 fc40 	bl	8006a14 <strtok>
 8006194:	4dbd      	ldr	r5, [pc, #756]	; (800648c <uart_comms+0x8e4>)
 8006196:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 8006198:	4631      	mov	r1, r6
 800619a:	2000      	movs	r0, #0
 800619c:	f000 fc3a 	bl	8006a14 <strtok>
 80061a0:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 80061a2:	4631      	mov	r1, r6
 80061a4:	2000      	movs	r0, #0
 80061a6:	f000 fc35 	bl	8006a14 <strtok>
 80061aa:	6028      	str	r0, [r5, #0]
				time_intervals[2] = 3600*strtol(heating_info, NULL,10);
 80061ac:	220a      	movs	r2, #10
 80061ae:	2100      	movs	r1, #0
 80061b0:	f000 fd04 	bl	8006bbc <strtol>
 80061b4:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 80061b8:	fb08 f000 	mul.w	r0, r8, r0
 80061bc:	4cb4      	ldr	r4, [pc, #720]	; (8006490 <uart_comms+0x8e8>)
 80061be:	60a0      	str	r0, [r4, #8]
				heating_info = (strtok(NULL, ","));
 80061c0:	4631      	mov	r1, r6
 80061c2:	2000      	movs	r0, #0
 80061c4:	f000 fc26 	bl	8006a14 <strtok>
 80061c8:	6028      	str	r0, [r5, #0]
				time_intervals[2] = time_intervals[2] + strtol(heating_info, NULL,10)*60;
 80061ca:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80061ce:	220a      	movs	r2, #10
 80061d0:	2100      	movs	r1, #0
 80061d2:	f000 fcf3 	bl	8006bbc <strtol>
 80061d6:	273c      	movs	r7, #60	; 0x3c
 80061d8:	fb07 9000 	mla	r0, r7, r0, r9
 80061dc:	60a0      	str	r0, [r4, #8]
				heating_info = (strtok(NULL, ","));
 80061de:	4631      	mov	r1, r6
 80061e0:	2000      	movs	r0, #0
 80061e2:	f000 fc17 	bl	8006a14 <strtok>
 80061e6:	6028      	str	r0, [r5, #0]
				time_intervals[2] = time_intervals[2] + strtol(heating_info, NULL,10);
 80061e8:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80061ec:	220a      	movs	r2, #10
 80061ee:	2100      	movs	r1, #0
 80061f0:	f000 fce4 	bl	8006bbc <strtol>
 80061f4:	4448      	add	r0, r9
 80061f6:	60a0      	str	r0, [r4, #8]
				heating_info = (strtok(NULL, ","));
 80061f8:	4631      	mov	r1, r6
 80061fa:	2000      	movs	r0, #0
 80061fc:	f000 fc0a 	bl	8006a14 <strtok>
 8006200:	6028      	str	r0, [r5, #0]
				time_intervals[3] = 3600*strtol(heating_info, NULL,10);
 8006202:	220a      	movs	r2, #10
 8006204:	2100      	movs	r1, #0
 8006206:	f000 fcd9 	bl	8006bbc <strtol>
 800620a:	fb08 f000 	mul.w	r0, r8, r0
 800620e:	60e0      	str	r0, [r4, #12]
				heating_info = (strtok(NULL, ","));
 8006210:	4631      	mov	r1, r6
 8006212:	2000      	movs	r0, #0
 8006214:	f000 fbfe 	bl	8006a14 <strtok>
 8006218:	6028      	str	r0, [r5, #0]
				time_intervals[3] = time_intervals[3] + strtol(heating_info, NULL,10)*60;
 800621a:	68e6      	ldr	r6, [r4, #12]
 800621c:	220a      	movs	r2, #10
 800621e:	2100      	movs	r1, #0
 8006220:	f000 fccc 	bl	8006bbc <strtol>
 8006224:	fb07 6000 	mla	r0, r7, r0, r6
 8006228:	60e0      	str	r0, [r4, #12]
				heating_info = (strtok(NULL, "\r\n"));
 800622a:	499a      	ldr	r1, [pc, #616]	; (8006494 <uart_comms+0x8ec>)
 800622c:	2000      	movs	r0, #0
 800622e:	f000 fbf1 	bl	8006a14 <strtok>
 8006232:	6028      	str	r0, [r5, #0]
				time_intervals[3] = time_intervals[3] + strtol(heating_info, NULL,10);
 8006234:	68e5      	ldr	r5, [r4, #12]
 8006236:	220a      	movs	r2, #10
 8006238:	2100      	movs	r1, #0
 800623a:	f000 fcbf 	bl	8006bbc <strtol>
 800623e:	4428      	add	r0, r5
 8006240:	60e0      	str	r0, [r4, #12]
 8006242:	e70c      	b.n	800605e <uart_comms+0x4b6>
				heating_info = strtok((char*)uart_command_copy, ",");
 8006244:	4e90      	ldr	r6, [pc, #576]	; (8006488 <uart_comms+0x8e0>)
 8006246:	4631      	mov	r1, r6
 8006248:	f000 fbe4 	bl	8006a14 <strtok>
 800624c:	4d8f      	ldr	r5, [pc, #572]	; (800648c <uart_comms+0x8e4>)
 800624e:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 8006250:	4631      	mov	r1, r6
 8006252:	2000      	movs	r0, #0
 8006254:	f000 fbde 	bl	8006a14 <strtok>
 8006258:	6028      	str	r0, [r5, #0]
				heating_info = (strtok(NULL, ","));
 800625a:	4631      	mov	r1, r6
 800625c:	2000      	movs	r0, #0
 800625e:	f000 fbd9 	bl	8006a14 <strtok>
 8006262:	6028      	str	r0, [r5, #0]
				time_intervals[4] = 3600*strtol(heating_info, NULL,10);
 8006264:	220a      	movs	r2, #10
 8006266:	2100      	movs	r1, #0
 8006268:	f000 fca8 	bl	8006bbc <strtol>
 800626c:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 8006270:	fb08 f000 	mul.w	r0, r8, r0
 8006274:	4c86      	ldr	r4, [pc, #536]	; (8006490 <uart_comms+0x8e8>)
 8006276:	6120      	str	r0, [r4, #16]
				heating_info = (strtok(NULL, ","));
 8006278:	4631      	mov	r1, r6
 800627a:	2000      	movs	r0, #0
 800627c:	f000 fbca 	bl	8006a14 <strtok>
 8006280:	6028      	str	r0, [r5, #0]
				time_intervals[4] = time_intervals[4] + strtol(heating_info, NULL,10)*60;
 8006282:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006286:	220a      	movs	r2, #10
 8006288:	2100      	movs	r1, #0
 800628a:	f000 fc97 	bl	8006bbc <strtol>
 800628e:	273c      	movs	r7, #60	; 0x3c
 8006290:	fb07 9000 	mla	r0, r7, r0, r9
 8006294:	6120      	str	r0, [r4, #16]
				heating_info = (strtok(NULL, ","));
 8006296:	4631      	mov	r1, r6
 8006298:	2000      	movs	r0, #0
 800629a:	f000 fbbb 	bl	8006a14 <strtok>
 800629e:	6028      	str	r0, [r5, #0]
				time_intervals[4] = time_intervals[4] + strtol(heating_info, NULL,10);
 80062a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062a4:	220a      	movs	r2, #10
 80062a6:	2100      	movs	r1, #0
 80062a8:	f000 fc88 	bl	8006bbc <strtol>
 80062ac:	4448      	add	r0, r9
 80062ae:	6120      	str	r0, [r4, #16]
				heating_info = (strtok(NULL, ","));
 80062b0:	4631      	mov	r1, r6
 80062b2:	2000      	movs	r0, #0
 80062b4:	f000 fbae 	bl	8006a14 <strtok>
 80062b8:	6028      	str	r0, [r5, #0]
				time_intervals[5] = 3600*strtol(heating_info, NULL,10);
 80062ba:	220a      	movs	r2, #10
 80062bc:	2100      	movs	r1, #0
 80062be:	f000 fc7d 	bl	8006bbc <strtol>
 80062c2:	fb08 f000 	mul.w	r0, r8, r0
 80062c6:	6160      	str	r0, [r4, #20]
				heating_info = (strtok(NULL, ","));
 80062c8:	4631      	mov	r1, r6
 80062ca:	2000      	movs	r0, #0
 80062cc:	f000 fba2 	bl	8006a14 <strtok>
 80062d0:	6028      	str	r0, [r5, #0]
				time_intervals[5] = time_intervals[5] + strtol(heating_info, NULL,10)*60;
 80062d2:	6966      	ldr	r6, [r4, #20]
 80062d4:	220a      	movs	r2, #10
 80062d6:	2100      	movs	r1, #0
 80062d8:	f000 fc70 	bl	8006bbc <strtol>
 80062dc:	fb07 6000 	mla	r0, r7, r0, r6
 80062e0:	6160      	str	r0, [r4, #20]
				heating_info = (strtok(NULL, "\r\n"));
 80062e2:	496c      	ldr	r1, [pc, #432]	; (8006494 <uart_comms+0x8ec>)
 80062e4:	2000      	movs	r0, #0
 80062e6:	f000 fb95 	bl	8006a14 <strtok>
 80062ea:	6028      	str	r0, [r5, #0]
				time_intervals[5] = time_intervals[5] + strtol(heating_info, NULL,10);;
 80062ec:	6965      	ldr	r5, [r4, #20]
 80062ee:	220a      	movs	r2, #10
 80062f0:	2100      	movs	r1, #0
 80062f2:	f000 fc63 	bl	8006bbc <strtol>
 80062f6:	4428      	add	r0, r5
 80062f8:	6160      	str	r0, [r4, #20]
 80062fa:	e6b0      	b.n	800605e <uart_comms+0x4b6>
			sprintf(total_water,"%lu", water_acc);
 80062fc:	4f66      	ldr	r7, [pc, #408]	; (8006498 <uart_comms+0x8f0>)
 80062fe:	4b67      	ldr	r3, [pc, #412]	; (800649c <uart_comms+0x8f4>)
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4967      	ldr	r1, [pc, #412]	; (80064a0 <uart_comms+0x8f8>)
 8006304:	6838      	ldr	r0, [r7, #0]
 8006306:	f000 fb61 	bl	80069cc <siprintf>
			memcpy(return_value, uart_command, 2);
 800630a:	4c66      	ldr	r4, [pc, #408]	; (80064a4 <uart_comms+0x8fc>)
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	4a66      	ldr	r2, [pc, #408]	; (80064a8 <uart_comms+0x900>)
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	4d64      	ldr	r5, [pc, #400]	; (80064ac <uart_comms+0x904>)
 800631a:	f895 8000 	ldrb.w	r8, [r5]
 800631e:	f883 8002 	strb.w	r8, [r3, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8006322:	6826      	ldr	r6, [r4, #0]
 8006324:	3603      	adds	r6, #3
 8006326:	4b62      	ldr	r3, [pc, #392]	; (80064b0 <uart_comms+0x908>)
 8006328:	f8d3 9000 	ldr.w	r9, [r3]
 800632c:	4648      	mov	r0, r9
 800632e:	f7f9 ff4f 	bl	80001d0 <strlen>
 8006332:	4602      	mov	r2, r0
 8006334:	4649      	mov	r1, r9
 8006336:	4630      	mov	r0, r6
 8006338:	f000 fa6a 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800633c:	6826      	ldr	r6, [r4, #0]
 800633e:	4630      	mov	r0, r6
 8006340:	f7f9 ff46 	bl	80001d0 <strlen>
 8006344:	f806 8000 	strb.w	r8, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8006348:	6826      	ldr	r6, [r4, #0]
 800634a:	4630      	mov	r0, r6
 800634c:	f7f9 ff40 	bl	80001d0 <strlen>
 8006350:	4406      	add	r6, r0
 8006352:	4b58      	ldr	r3, [pc, #352]	; (80064b4 <uart_comms+0x90c>)
 8006354:	f8d3 8000 	ldr.w	r8, [r3]
 8006358:	4640      	mov	r0, r8
 800635a:	f7f9 ff39 	bl	80001d0 <strlen>
 800635e:	4602      	mov	r2, r0
 8006360:	4641      	mov	r1, r8
 8006362:	4630      	mov	r0, r6
 8006364:	f000 fa54 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006368:	6826      	ldr	r6, [r4, #0]
 800636a:	4630      	mov	r0, r6
 800636c:	f7f9 ff30 	bl	80001d0 <strlen>
 8006370:	782b      	ldrb	r3, [r5, #0]
 8006372:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 8006374:	6826      	ldr	r6, [r4, #0]
 8006376:	4630      	mov	r0, r6
 8006378:	f7f9 ff2a 	bl	80001d0 <strlen>
 800637c:	4406      	add	r6, r0
 800637e:	4b4e      	ldr	r3, [pc, #312]	; (80064b8 <uart_comms+0x910>)
 8006380:	f8d3 8000 	ldr.w	r8, [r3]
 8006384:	4640      	mov	r0, r8
 8006386:	f7f9 ff23 	bl	80001d0 <strlen>
 800638a:	4602      	mov	r2, r0
 800638c:	4641      	mov	r1, r8
 800638e:	4630      	mov	r0, r6
 8006390:	f000 fa3e 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006394:	6826      	ldr	r6, [r4, #0]
 8006396:	4630      	mov	r0, r6
 8006398:	f7f9 ff1a 	bl	80001d0 <strlen>
 800639c:	782b      	ldrb	r3, [r5, #0]
 800639e:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 80063a0:	6826      	ldr	r6, [r4, #0]
 80063a2:	4630      	mov	r0, r6
 80063a4:	f7f9 ff14 	bl	80001d0 <strlen>
 80063a8:	4406      	add	r6, r0
 80063aa:	4b44      	ldr	r3, [pc, #272]	; (80064bc <uart_comms+0x914>)
 80063ac:	f8d3 8000 	ldr.w	r8, [r3]
 80063b0:	4640      	mov	r0, r8
 80063b2:	f7f9 ff0d 	bl	80001d0 <strlen>
 80063b6:	4602      	mov	r2, r0
 80063b8:	4641      	mov	r1, r8
 80063ba:	4630      	mov	r0, r6
 80063bc:	f000 fa28 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80063c0:	6826      	ldr	r6, [r4, #0]
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7f9 ff04 	bl	80001d0 <strlen>
 80063c8:	782b      	ldrb	r3, [r5, #0]
 80063ca:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 80063cc:	6826      	ldr	r6, [r4, #0]
 80063ce:	4630      	mov	r0, r6
 80063d0:	f7f9 fefe 	bl	80001d0 <strlen>
 80063d4:	4406      	add	r6, r0
 80063d6:	683f      	ldr	r7, [r7, #0]
 80063d8:	4638      	mov	r0, r7
 80063da:	f7f9 fef9 	bl	80001d0 <strlen>
 80063de:	4602      	mov	r2, r0
 80063e0:	4639      	mov	r1, r7
 80063e2:	4630      	mov	r0, r6
 80063e4:	f000 fa14 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80063e8:	6826      	ldr	r6, [r4, #0]
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7f9 fef0 	bl	80001d0 <strlen>
 80063f0:	782b      	ldrb	r3, [r5, #0]
 80063f2:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 80063f4:	6826      	ldr	r6, [r4, #0]
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7f9 feea 	bl	80001d0 <strlen>
 80063fc:	4406      	add	r6, r0
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <uart_comms+0x918>)
 8006400:	681f      	ldr	r7, [r3, #0]
 8006402:	4638      	mov	r0, r7
 8006404:	f7f9 fee4 	bl	80001d0 <strlen>
 8006408:	4602      	mov	r2, r0
 800640a:	4639      	mov	r1, r7
 800640c:	4630      	mov	r0, r6
 800640e:	f000 f9ff 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8006412:	6824      	ldr	r4, [r4, #0]
 8006414:	4620      	mov	r0, r4
 8006416:	f7f9 fedb 	bl	80001d0 <strlen>
 800641a:	782b      	ldrb	r3, [r5, #0]
 800641c:	5423      	strb	r3, [r4, r0]
			if(valve_state == valve_OPEN){
 800641e:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <uart_comms+0x91c>)
 8006420:	681c      	ldr	r4, [r3, #0]
 8006422:	4b29      	ldr	r3, [pc, #164]	; (80064c8 <uart_comms+0x920>)
 8006424:	429c      	cmp	r4, r3
 8006426:	d01f      	beq.n	8006468 <uart_comms+0x8c0>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 8006428:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <uart_comms+0x8fc>)
 800642a:	681d      	ldr	r5, [r3, #0]
 800642c:	4628      	mov	r0, r5
 800642e:	f7f9 fecf 	bl	80001d0 <strlen>
 8006432:	4405      	add	r5, r0
 8006434:	4620      	mov	r0, r4
 8006436:	f7f9 fecb 	bl	80001d0 <strlen>
 800643a:	4602      	mov	r2, r0
 800643c:	4621      	mov	r1, r4
 800643e:	4628      	mov	r0, r5
 8006440:	f000 f9e6 	bl	8006810 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8006444:	4c17      	ldr	r4, [pc, #92]	; (80064a4 <uart_comms+0x8fc>)
 8006446:	6825      	ldr	r5, [r4, #0]
 8006448:	4628      	mov	r0, r5
 800644a:	f7f9 fec1 	bl	80001d0 <strlen>
 800644e:	4b1f      	ldr	r3, [pc, #124]	; (80064cc <uart_comms+0x924>)
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8006454:	6824      	ldr	r4, [r4, #0]
 8006456:	4620      	mov	r0, r4
 8006458:	f7f9 feba 	bl	80001d0 <strlen>
 800645c:	b282      	uxth	r2, r0
 800645e:	4621      	mov	r1, r4
 8006460:	481b      	ldr	r0, [pc, #108]	; (80064d0 <uart_comms+0x928>)
 8006462:	f7fd fc2d 	bl	8003cc0 <HAL_UART_Transmit_IT>
			break;
 8006466:	e406      	b.n	8005c76 <uart_comms+0xce>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8006468:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <uart_comms+0x8fc>)
 800646a:	681d      	ldr	r5, [r3, #0]
 800646c:	4628      	mov	r0, r5
 800646e:	f7f9 feaf 	bl	80001d0 <strlen>
 8006472:	4405      	add	r5, r0
 8006474:	4620      	mov	r0, r4
 8006476:	f7f9 feab 	bl	80001d0 <strlen>
 800647a:	1e42      	subs	r2, r0, #1
 800647c:	4621      	mov	r1, r4
 800647e:	4628      	mov	r0, r5
 8006480:	f000 f9c6 	bl	8006810 <memcpy>
 8006484:	e7de      	b.n	8006444 <uart_comms+0x89c>
 8006486:	bf00      	nop
 8006488:	080073a8 	.word	0x080073a8
 800648c:	200002b4 	.word	0x200002b4
 8006490:	200005a8 	.word	0x200005a8
 8006494:	080073b0 	.word	0x080073b0
 8006498:	200002f8 	.word	0x200002f8
 800649c:	20000318 	.word	0x20000318
 80064a0:	08007368 	.word	0x08007368
 80064a4:	200002d8 	.word	0x200002d8
 80064a8:	200002fc 	.word	0x200002fc
 80064ac:	20000004 	.word	0x20000004
 80064b0:	20000280 	.word	0x20000280
 80064b4:	20000314 	.word	0x20000314
 80064b8:	20000274 	.word	0x20000274
 80064bc:	2000029c 	.word	0x2000029c
 80064c0:	200002b0 	.word	0x200002b0
 80064c4:	20000308 	.word	0x20000308
 80064c8:	20000054 	.word	0x20000054
 80064cc:	20000008 	.word	0x20000008
 80064d0:	20000438 	.word	0x20000438
			memset(log_receiced_num,0x00,2);
 80064d4:	4c1f      	ldr	r4, [pc, #124]	; (8006554 <uart_comms+0x9ac>)
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	2600      	movs	r6, #0
 80064da:	801e      	strh	r6, [r3, #0]
			memcpy(log_receiced_num,(uart_command+3), strlen((char*)uart_command)-5);
 80064dc:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <uart_comms+0x9b0>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	1cc5      	adds	r5, r0, #3
 80064e2:	f7f9 fe75 	bl	80001d0 <strlen>
 80064e6:	1f42      	subs	r2, r0, #5
 80064e8:	4629      	mov	r1, r5
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	f000 f990 	bl	8006810 <memcpy>
			*log_receiced_num = strtol((char*)log_receiced_num,NULL,10);
 80064f0:	6825      	ldr	r5, [r4, #0]
 80064f2:	220a      	movs	r2, #10
 80064f4:	4631      	mov	r1, r6
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 fb60 	bl	8006bbc <strtol>
 80064fc:	7028      	strb	r0, [r5, #0]
			if(*log_receiced_num >= log_counter || log_empty){
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	781a      	ldrb	r2, [r3, #0]
 8006502:	4b16      	ldr	r3, [pc, #88]	; (800655c <uart_comms+0x9b4>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d202      	bcs.n	8006510 <uart_comms+0x968>
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <uart_comms+0x9b8>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b1f3      	cbz	r3, 800654e <uart_comms+0x9a6>
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)noLoggingData, strlen((char*)noLoggingData));
 8006510:	4c14      	ldr	r4, [pc, #80]	; (8006564 <uart_comms+0x9bc>)
 8006512:	4620      	mov	r0, r4
 8006514:	f7f9 fe5c 	bl	80001d0 <strlen>
 8006518:	b282      	uxth	r2, r0
 800651a:	4621      	mov	r1, r4
 800651c:	4812      	ldr	r0, [pc, #72]	; (8006568 <uart_comms+0x9c0>)
 800651e:	f7fd fbcf 	bl	8003cc0 <HAL_UART_Transmit_IT>
 8006522:	f7ff bba8 	b.w	8005c76 <uart_comms+0xce>
					HAL_UART_Transmit_IT(&huart1,(uint8_t*)(flash_mem_start+64*(*log_receiced_num)), strlen((char*)(flash_mem_start+64*(*log_receiced_num))));
 8006526:	4a11      	ldr	r2, [pc, #68]	; (800656c <uart_comms+0x9c4>)
 8006528:	6814      	ldr	r4, [r2, #0]
 800652a:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 800652e:	4620      	mov	r0, r4
 8006530:	f7f9 fe4e 	bl	80001d0 <strlen>
 8006534:	b282      	uxth	r2, r0
 8006536:	4621      	mov	r1, r4
 8006538:	480b      	ldr	r0, [pc, #44]	; (8006568 <uart_comms+0x9c0>)
 800653a:	f7fd fbc1 	bl	8003cc0 <HAL_UART_Transmit_IT>
				for(int i = 0; i<=*log_receiced_num;i++){
 800653e:	3501      	adds	r5, #1
 8006540:	4b04      	ldr	r3, [pc, #16]	; (8006554 <uart_comms+0x9ac>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	429d      	cmp	r5, r3
 8006548:	dded      	ble.n	8006526 <uart_comms+0x97e>
 800654a:	f7ff bb94 	b.w	8005c76 <uart_comms+0xce>
 800654e:	2500      	movs	r5, #0
 8006550:	e7f6      	b.n	8006540 <uart_comms+0x998>
 8006552:	bf00      	nop
 8006554:	200002c0 	.word	0x200002c0
 8006558:	200002fc 	.word	0x200002fc
 800655c:	200002bd 	.word	0x200002bd
 8006560:	2000001b 	.word	0x2000001b
 8006564:	20000020 	.word	0x20000020
 8006568:	20000438 	.word	0x20000438
 800656c:	20000010 	.word	0x20000010

08006570 <mainLoop>:
ADC_ChannelConfTypeDef Channel_4;
extern uint32_t uwTick;



void mainLoop(){
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
	  if(rx_flag == 1 ){ 	// UART Comms
 8006572:	4b55      	ldr	r3, [pc, #340]	; (80066c8 <mainLoop+0x158>)
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	2a01      	cmp	r2, #1
void mainLoop(){
 8006578:	b083      	sub	sp, #12
	  if(rx_flag == 1 ){ 	// UART Comms
 800657a:	f000 809f 	beq.w	80066bc <mainLoop+0x14c>
		  rx_flag = 0;
		  uart_comms();
	  }

	  // Seven Segment
	  if(systick_flag == 1 && uwTick%10){
 800657e:	4953      	ldr	r1, [pc, #332]	; (80066cc <mainLoop+0x15c>)
 8006580:	4d53      	ldr	r5, [pc, #332]	; (80066d0 <mainLoop+0x160>)
 8006582:	780b      	ldrb	r3, [r1, #0]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d040      	beq.n	800660a <mainLoop+0x9a>
 8006588:	4e52      	ldr	r6, [pc, #328]	; (80066d4 <mainLoop+0x164>)
 800658a:	682c      	ldr	r4, [r5, #0]
		  seven_segment();
//		  HAL_I2C_Mem_Read_IT( &hi2c1, IQS263_ADD, 0x03, I2C_MEMADD_SIZE_8BIT,  &recv_buffer[2],1);


	  }
	  if(uwTick%30 == 0 && i2c_flag2){
 800658c:	4b52      	ldr	r3, [pc, #328]	; (80066d8 <mainLoop+0x168>)
 800658e:	fba3 2304 	umull	r2, r3, r3, r4
 8006592:	091b      	lsrs	r3, r3, #4
 8006594:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8006598:	ebb4 0443 	subs.w	r4, r4, r3, lsl #1
 800659c:	d103      	bne.n	80065a6 <mainLoop+0x36>
 800659e:	4f4f      	ldr	r7, [pc, #316]	; (80066dc <mainLoop+0x16c>)
 80065a0:	783b      	ldrb	r3, [r7, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d169      	bne.n	800667a <mainLoop+0x10a>
		  HAL_I2C_Mem_Read_IT( &hi2c1, IQS263_ADD, 0x03, I2C_MEMADD_SIZE_8BIT,  &recv_buffer[2],1);
		  i2c_flag2 = 0;
	  }

	  if(i2c_counter == 250){
 80065a6:	6833      	ldr	r3, [r6, #0]
		  i2c_counter = 0;
		  touch_flag = 0;
 80065a8:	4f4d      	ldr	r7, [pc, #308]	; (80066e0 <mainLoop+0x170>)
	  if(i2c_counter == 250){
 80065aa:	2bfa      	cmp	r3, #250	; 0xfa
 80065ac:	d073      	beq.n	8006696 <mainLoop+0x126>
		  handleEvents();
	  }
	  if(uwTick%500 == 0 && rtc_flag2 ){
 80065ae:	682b      	ldr	r3, [r5, #0]
 80065b0:	4c4c      	ldr	r4, [pc, #304]	; (80066e4 <mainLoop+0x174>)
 80065b2:	fba4 2403 	umull	r2, r4, r4, r3
 80065b6:	0964      	lsrs	r4, r4, #5
 80065b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80065bc:	fb02 3414 	mls	r4, r2, r4, r3
 80065c0:	b91c      	cbnz	r4, 80065ca <mainLoop+0x5a>
 80065c2:	4b49      	ldr	r3, [pc, #292]	; (80066e8 <mainLoop+0x178>)
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d141      	bne.n	800664e <mainLoop+0xde>
		  HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
		  HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
	  }

	  // ADC conversion
	  if(adc_flag == 1){
 80065ca:	4b48      	ldr	r3, [pc, #288]	; (80066ec <mainLoop+0x17c>)
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	2a01      	cmp	r2, #1
 80065d0:	d04e      	beq.n	8006670 <mainLoop+0x100>
		  adc_flag = 0;
		  adc_comms();
	  }
	  // Nothing at the moment
	  if(touch_flag == 1 ){
 80065d2:	783b      	ldrb	r3, [r7, #0]
 80065d4:	2b01      	cmp	r3, #1
		  touch_flag = 0;
 80065d6:	bf04      	itt	eq
 80065d8:	2300      	moveq	r3, #0
 80065da:	703b      	strbeq	r3, [r7, #0]
	  }
	  // scheduling of heating and RTC
	  if(RTC_timer_flag == 1){
 80065dc:	4b44      	ldr	r3, [pc, #272]	; (80066f0 <mainLoop+0x180>)
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	2a01      	cmp	r2, #1
 80065e2:	d026      	beq.n	8006632 <mainLoop+0xc2>
			  heating_scheduling();
		  }
	  }

	  // Writing to FLASH
	  if(flash_flag){
 80065e4:	4b43      	ldr	r3, [pc, #268]	; (80066f4 <mainLoop+0x184>)
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	b14a      	cbz	r2, 80065fe <mainLoop+0x8e>
		  flash_flag = 0;
		  flash_counter += 1;
 80065ea:	4943      	ldr	r1, [pc, #268]	; (80066f8 <mainLoop+0x188>)
 80065ec:	680a      	ldr	r2, [r1, #0]
		  if(flash_counter == 10000){
 80065ee:	f242 7410 	movw	r4, #10000	; 0x2710
		  flash_counter += 1;
 80065f2:	3201      	adds	r2, #1
		  flash_flag = 0;
 80065f4:	2000      	movs	r0, #0
		  if(flash_counter == 10000){
 80065f6:	42a2      	cmp	r2, r4
		  flash_flag = 0;
 80065f8:	7018      	strb	r0, [r3, #0]
		  if(flash_counter == 10000){
 80065fa:	d052      	beq.n	80066a2 <mainLoop+0x132>
		  flash_counter += 1;
 80065fc:	600a      	str	r2, [r1, #0]
			  write2Flash();
		  	  }
		  }
	  }
	  // Pumping is occurring
	  if(pump_flag == 1){
 80065fe:	4b3f      	ldr	r3, [pc, #252]	; (80066fc <mainLoop+0x18c>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d055      	beq.n	80066b2 <mainLoop+0x142>
		  liters_pumped();
	  }



}
 8006606:	b003      	add	sp, #12
 8006608:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  if(systick_flag == 1 && uwTick%10){
 800660a:	682c      	ldr	r4, [r5, #0]
 800660c:	4b3c      	ldr	r3, [pc, #240]	; (8006700 <mainLoop+0x190>)
		  i2c_counter += 1;
 800660e:	4e31      	ldr	r6, [pc, #196]	; (80066d4 <mainLoop+0x164>)
	  if(systick_flag == 1 && uwTick%10){
 8006610:	fba3 2304 	umull	r2, r3, r3, r4
 8006614:	08db      	lsrs	r3, r3, #3
 8006616:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800661a:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 800661e:	d0b5      	beq.n	800658c <mainLoop+0x1c>
		  i2c_counter += 1;
 8006620:	6833      	ldr	r3, [r6, #0]
		  systick_flag = 0;
 8006622:	2200      	movs	r2, #0
		  i2c_counter += 1;
 8006624:	3301      	adds	r3, #1
 8006626:	6033      	str	r3, [r6, #0]
		  systick_flag = 0;
 8006628:	700a      	strb	r2, [r1, #0]
		  seven_segment();
 800662a:	f7fe fe9b 	bl	8005364 <seven_segment>
 800662e:	682c      	ldr	r4, [r5, #0]
 8006630:	e7ac      	b.n	800658c <mainLoop+0x1c>
		  fake_RTC_timer += 1;
 8006632:	4934      	ldr	r1, [pc, #208]	; (8006704 <mainLoop+0x194>)
 8006634:	880a      	ldrh	r2, [r1, #0]
 8006636:	3201      	adds	r2, #1
 8006638:	b292      	uxth	r2, r2
		  RTC_timer_flag = 0;
 800663a:	2000      	movs	r0, #0
		  if(fake_RTC_timer == 500){
 800663c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
		  fake_RTC_timer += 1;
 8006640:	800a      	strh	r2, [r1, #0]
		  RTC_timer_flag = 0;
 8006642:	7018      	strb	r0, [r3, #0]
		  if(fake_RTC_timer == 500){
 8006644:	d1ce      	bne.n	80065e4 <mainLoop+0x74>
			  fake_RTC_timer = 0;
 8006646:	8008      	strh	r0, [r1, #0]
			  heating_scheduling();
 8006648:	f7fe fa60 	bl	8004b0c <heating_scheduling>
 800664c:	e7ca      	b.n	80065e4 <mainLoop+0x74>
		  HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 800664e:	4a2e      	ldr	r2, [pc, #184]	; (8006708 <mainLoop+0x198>)
 8006650:	482e      	ldr	r0, [pc, #184]	; (800670c <mainLoop+0x19c>)
 8006652:	6811      	ldr	r1, [r2, #0]
		  rtc_flag2 = 0;
 8006654:	701c      	strb	r4, [r3, #0]
		  HAL_RTC_GetTime(&hrtc,timeOfRTC,RTC_FORMAT_BIN);
 8006656:	4622      	mov	r2, r4
 8006658:	f7fd f976 	bl	8003948 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 800665c:	4b2c      	ldr	r3, [pc, #176]	; (8006710 <mainLoop+0x1a0>)
 800665e:	482b      	ldr	r0, [pc, #172]	; (800670c <mainLoop+0x19c>)
 8006660:	6819      	ldr	r1, [r3, #0]
 8006662:	4622      	mov	r2, r4
 8006664:	f7fd fa48 	bl	8003af8 <HAL_RTC_GetDate>
	  if(adc_flag == 1){
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <mainLoop+0x17c>)
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	2a01      	cmp	r2, #1
 800666e:	d1b0      	bne.n	80065d2 <mainLoop+0x62>
		  adc_flag = 0;
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8006674:	f7fd fe6e 	bl	8004354 <adc_comms>
 8006678:	e7ab      	b.n	80065d2 <mainLoop+0x62>
		  HAL_I2C_Mem_Read_IT( &hi2c1, IQS263_ADD, 0x03, I2C_MEMADD_SIZE_8BIT,  &recv_buffer[2],1);
 800667a:	4a26      	ldr	r2, [pc, #152]	; (8006714 <mainLoop+0x1a4>)
 800667c:	4826      	ldr	r0, [pc, #152]	; (8006718 <mainLoop+0x1a8>)
 800667e:	2301      	movs	r3, #1
 8006680:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006684:	2188      	movs	r1, #136	; 0x88
 8006686:	2203      	movs	r2, #3
 8006688:	f7fb fbc4 	bl	8001e14 <HAL_I2C_Mem_Read_IT>
	  if(i2c_counter == 250){
 800668c:	6833      	ldr	r3, [r6, #0]
		  i2c_flag2 = 0;
 800668e:	703c      	strb	r4, [r7, #0]
	  if(i2c_counter == 250){
 8006690:	2bfa      	cmp	r3, #250	; 0xfa
		  touch_flag = 0;
 8006692:	4f13      	ldr	r7, [pc, #76]	; (80066e0 <mainLoop+0x170>)
	  if(i2c_counter == 250){
 8006694:	d18b      	bne.n	80065ae <mainLoop+0x3e>
		  i2c_counter = 0;
 8006696:	2300      	movs	r3, #0
		  touch_flag = 0;
 8006698:	703b      	strb	r3, [r7, #0]
		  i2c_counter = 0;
 800669a:	6033      	str	r3, [r6, #0]
		  handleEvents();
 800669c:	f7fe fa90 	bl	8004bc0 <handleEvents>
 80066a0:	e785      	b.n	80065ae <mainLoop+0x3e>
			  if(enableFlashLogging){
 80066a2:	4b1e      	ldr	r3, [pc, #120]	; (800671c <mainLoop+0x1ac>)
			  flash_counter = 0;
 80066a4:	6008      	str	r0, [r1, #0]
			  if(enableFlashLogging){
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0a8      	beq.n	80065fe <mainLoop+0x8e>
			  write2Flash();
 80066ac:	f7fd ff6e 	bl	800458c <write2Flash>
 80066b0:	e7a5      	b.n	80065fe <mainLoop+0x8e>
}
 80066b2:	b003      	add	sp, #12
 80066b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		  liters_pumped();
 80066b8:	f7fe bc1e 	b.w	8004ef8 <liters_pumped>
		  rx_flag = 0;
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 80066c0:	f7ff fa72 	bl	8005ba8 <uart_comms>
 80066c4:	e75b      	b.n	800657e <mainLoop+0xe>
 80066c6:	bf00      	nop
 80066c8:	200002de 	.word	0x200002de
 80066cc:	200002e9 	.word	0x200002e9
 80066d0:	20000328 	.word	0x20000328
 80066d4:	200002b8 	.word	0x200002b8
 80066d8:	88888889 	.word	0x88888889
 80066dc:	200002bc 	.word	0x200002bc
 80066e0:	20000048 	.word	0x20000048
 80066e4:	10624dd3 	.word	0x10624dd3
 80066e8:	200002dd 	.word	0x200002dd
 80066ec:	2000026a 	.word	0x2000026a
 80066f0:	20000250 	.word	0x20000250
 80066f4:	20000294 	.word	0x20000294
 80066f8:	2000028c 	.word	0x2000028c
 80066fc:	200002cc 	.word	0x200002cc
 8006700:	cccccccd 	.word	0xcccccccd
 8006704:	2000028a 	.word	0x2000028a
 8006708:	200002f4 	.word	0x200002f4
 800670c:	200004a8 	.word	0x200004a8
 8006710:	20000284 	.word	0x20000284
 8006714:	200005c2 	.word	0x200005c2
 8006718:	200003a4 	.word	0x200003a4
 800671c:	20000289 	.word	0x20000289

08006720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006758 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006724:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006726:	e003      	b.n	8006730 <LoopCopyDataInit>

08006728 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800672a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800672c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800672e:	3104      	adds	r1, #4

08006730 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006730:	480b      	ldr	r0, [pc, #44]	; (8006760 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006734:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006736:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006738:	d3f6      	bcc.n	8006728 <CopyDataInit>
	ldr	r2, =_sbss
 800673a:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <LoopForever+0x12>)
	b	LoopFillZerobss
 800673c:	e002      	b.n	8006744 <LoopFillZerobss>

0800673e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800673e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006740:	f842 3b04 	str.w	r3, [r2], #4

08006744 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <LoopForever+0x16>)
	cmp	r2, r3
 8006746:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006748:	d3f9      	bcc.n	800673e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800674a:	f7ff f9f5 	bl	8005b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800674e:	f000 f819 	bl	8006784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006752:	f7fe fc3d 	bl	8004fd0 <main>

08006756 <LoopForever>:

LoopForever:
    b LoopForever
 8006756:	e7fe      	b.n	8006756 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006758:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800675c:	08007520 	.word	0x08007520
	ldr	r0, =_sdata
 8006760:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006764:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 8006768:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 800676c:	20000604 	.word	0x20000604

08006770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006770:	e7fe      	b.n	8006770 <ADC1_2_IRQHandler>
	...

08006774 <calloc>:
 8006774:	4b02      	ldr	r3, [pc, #8]	; (8006780 <calloc+0xc>)
 8006776:	460a      	mov	r2, r1
 8006778:	4601      	mov	r1, r0
 800677a:	6818      	ldr	r0, [r3, #0]
 800677c:	f000 b85b 	b.w	8006836 <_calloc_r>
 8006780:	20000058 	.word	0x20000058

08006784 <__libc_init_array>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	4e0d      	ldr	r6, [pc, #52]	; (80067bc <__libc_init_array+0x38>)
 8006788:	4c0d      	ldr	r4, [pc, #52]	; (80067c0 <__libc_init_array+0x3c>)
 800678a:	1ba4      	subs	r4, r4, r6
 800678c:	10a4      	asrs	r4, r4, #2
 800678e:	2500      	movs	r5, #0
 8006790:	42a5      	cmp	r5, r4
 8006792:	d109      	bne.n	80067a8 <__libc_init_array+0x24>
 8006794:	4e0b      	ldr	r6, [pc, #44]	; (80067c4 <__libc_init_array+0x40>)
 8006796:	4c0c      	ldr	r4, [pc, #48]	; (80067c8 <__libc_init_array+0x44>)
 8006798:	f000 fdc6 	bl	8007328 <_init>
 800679c:	1ba4      	subs	r4, r4, r6
 800679e:	10a4      	asrs	r4, r4, #2
 80067a0:	2500      	movs	r5, #0
 80067a2:	42a5      	cmp	r5, r4
 80067a4:	d105      	bne.n	80067b2 <__libc_init_array+0x2e>
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ac:	4798      	blx	r3
 80067ae:	3501      	adds	r5, #1
 80067b0:	e7ee      	b.n	8006790 <__libc_init_array+0xc>
 80067b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067b6:	4798      	blx	r3
 80067b8:	3501      	adds	r5, #1
 80067ba:	e7f2      	b.n	80067a2 <__libc_init_array+0x1e>
 80067bc:	08007518 	.word	0x08007518
 80067c0:	08007518 	.word	0x08007518
 80067c4:	08007518 	.word	0x08007518
 80067c8:	0800751c 	.word	0x0800751c

080067cc <__itoa>:
 80067cc:	1e93      	subs	r3, r2, #2
 80067ce:	2b22      	cmp	r3, #34	; 0x22
 80067d0:	b510      	push	{r4, lr}
 80067d2:	460c      	mov	r4, r1
 80067d4:	d904      	bls.n	80067e0 <__itoa+0x14>
 80067d6:	2300      	movs	r3, #0
 80067d8:	700b      	strb	r3, [r1, #0]
 80067da:	461c      	mov	r4, r3
 80067dc:	4620      	mov	r0, r4
 80067de:	bd10      	pop	{r4, pc}
 80067e0:	2a0a      	cmp	r2, #10
 80067e2:	d109      	bne.n	80067f8 <__itoa+0x2c>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	da07      	bge.n	80067f8 <__itoa+0x2c>
 80067e8:	232d      	movs	r3, #45	; 0x2d
 80067ea:	700b      	strb	r3, [r1, #0]
 80067ec:	4240      	negs	r0, r0
 80067ee:	2101      	movs	r1, #1
 80067f0:	4421      	add	r1, r4
 80067f2:	f000 f9f9 	bl	8006be8 <__utoa>
 80067f6:	e7f1      	b.n	80067dc <__itoa+0x10>
 80067f8:	2100      	movs	r1, #0
 80067fa:	e7f9      	b.n	80067f0 <__itoa+0x24>

080067fc <itoa>:
 80067fc:	f7ff bfe6 	b.w	80067cc <__itoa>

08006800 <malloc>:
 8006800:	4b02      	ldr	r3, [pc, #8]	; (800680c <malloc+0xc>)
 8006802:	4601      	mov	r1, r0
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	f000 b873 	b.w	80068f0 <_malloc_r>
 800680a:	bf00      	nop
 800680c:	20000058 	.word	0x20000058

08006810 <memcpy>:
 8006810:	b510      	push	{r4, lr}
 8006812:	1e43      	subs	r3, r0, #1
 8006814:	440a      	add	r2, r1
 8006816:	4291      	cmp	r1, r2
 8006818:	d100      	bne.n	800681c <memcpy+0xc>
 800681a:	bd10      	pop	{r4, pc}
 800681c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006824:	e7f7      	b.n	8006816 <memcpy+0x6>

08006826 <memset>:
 8006826:	4402      	add	r2, r0
 8006828:	4603      	mov	r3, r0
 800682a:	4293      	cmp	r3, r2
 800682c:	d100      	bne.n	8006830 <memset+0xa>
 800682e:	4770      	bx	lr
 8006830:	f803 1b01 	strb.w	r1, [r3], #1
 8006834:	e7f9      	b.n	800682a <memset+0x4>

08006836 <_calloc_r>:
 8006836:	b538      	push	{r3, r4, r5, lr}
 8006838:	fb02 f401 	mul.w	r4, r2, r1
 800683c:	4621      	mov	r1, r4
 800683e:	f000 f857 	bl	80068f0 <_malloc_r>
 8006842:	4605      	mov	r5, r0
 8006844:	b118      	cbz	r0, 800684e <_calloc_r+0x18>
 8006846:	4622      	mov	r2, r4
 8006848:	2100      	movs	r1, #0
 800684a:	f7ff ffec 	bl	8006826 <memset>
 800684e:	4628      	mov	r0, r5
 8006850:	bd38      	pop	{r3, r4, r5, pc}
	...

08006854 <_free_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4605      	mov	r5, r0
 8006858:	2900      	cmp	r1, #0
 800685a:	d045      	beq.n	80068e8 <_free_r+0x94>
 800685c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006860:	1f0c      	subs	r4, r1, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	bfb8      	it	lt
 8006866:	18e4      	addlt	r4, r4, r3
 8006868:	f000 fa13 	bl	8006c92 <__malloc_lock>
 800686c:	4a1f      	ldr	r2, [pc, #124]	; (80068ec <_free_r+0x98>)
 800686e:	6813      	ldr	r3, [r2, #0]
 8006870:	4610      	mov	r0, r2
 8006872:	b933      	cbnz	r3, 8006882 <_free_r+0x2e>
 8006874:	6063      	str	r3, [r4, #4]
 8006876:	6014      	str	r4, [r2, #0]
 8006878:	4628      	mov	r0, r5
 800687a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800687e:	f000 ba09 	b.w	8006c94 <__malloc_unlock>
 8006882:	42a3      	cmp	r3, r4
 8006884:	d90c      	bls.n	80068a0 <_free_r+0x4c>
 8006886:	6821      	ldr	r1, [r4, #0]
 8006888:	1862      	adds	r2, r4, r1
 800688a:	4293      	cmp	r3, r2
 800688c:	bf04      	itt	eq
 800688e:	681a      	ldreq	r2, [r3, #0]
 8006890:	685b      	ldreq	r3, [r3, #4]
 8006892:	6063      	str	r3, [r4, #4]
 8006894:	bf04      	itt	eq
 8006896:	1852      	addeq	r2, r2, r1
 8006898:	6022      	streq	r2, [r4, #0]
 800689a:	6004      	str	r4, [r0, #0]
 800689c:	e7ec      	b.n	8006878 <_free_r+0x24>
 800689e:	4613      	mov	r3, r2
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	b10a      	cbz	r2, 80068a8 <_free_r+0x54>
 80068a4:	42a2      	cmp	r2, r4
 80068a6:	d9fa      	bls.n	800689e <_free_r+0x4a>
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	1858      	adds	r0, r3, r1
 80068ac:	42a0      	cmp	r0, r4
 80068ae:	d10b      	bne.n	80068c8 <_free_r+0x74>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	4401      	add	r1, r0
 80068b4:	1858      	adds	r0, r3, r1
 80068b6:	4282      	cmp	r2, r0
 80068b8:	6019      	str	r1, [r3, #0]
 80068ba:	d1dd      	bne.n	8006878 <_free_r+0x24>
 80068bc:	6810      	ldr	r0, [r2, #0]
 80068be:	6852      	ldr	r2, [r2, #4]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	4401      	add	r1, r0
 80068c4:	6019      	str	r1, [r3, #0]
 80068c6:	e7d7      	b.n	8006878 <_free_r+0x24>
 80068c8:	d902      	bls.n	80068d0 <_free_r+0x7c>
 80068ca:	230c      	movs	r3, #12
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	e7d3      	b.n	8006878 <_free_r+0x24>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	1821      	adds	r1, r4, r0
 80068d4:	428a      	cmp	r2, r1
 80068d6:	bf04      	itt	eq
 80068d8:	6811      	ldreq	r1, [r2, #0]
 80068da:	6852      	ldreq	r2, [r2, #4]
 80068dc:	6062      	str	r2, [r4, #4]
 80068de:	bf04      	itt	eq
 80068e0:	1809      	addeq	r1, r1, r0
 80068e2:	6021      	streq	r1, [r4, #0]
 80068e4:	605c      	str	r4, [r3, #4]
 80068e6:	e7c7      	b.n	8006878 <_free_r+0x24>
 80068e8:	bd38      	pop	{r3, r4, r5, pc}
 80068ea:	bf00      	nop
 80068ec:	2000031c 	.word	0x2000031c

080068f0 <_malloc_r>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	1ccd      	adds	r5, r1, #3
 80068f4:	f025 0503 	bic.w	r5, r5, #3
 80068f8:	3508      	adds	r5, #8
 80068fa:	2d0c      	cmp	r5, #12
 80068fc:	bf38      	it	cc
 80068fe:	250c      	movcc	r5, #12
 8006900:	2d00      	cmp	r5, #0
 8006902:	4606      	mov	r6, r0
 8006904:	db01      	blt.n	800690a <_malloc_r+0x1a>
 8006906:	42a9      	cmp	r1, r5
 8006908:	d903      	bls.n	8006912 <_malloc_r+0x22>
 800690a:	230c      	movs	r3, #12
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	2000      	movs	r0, #0
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	f000 f9be 	bl	8006c92 <__malloc_lock>
 8006916:	4a23      	ldr	r2, [pc, #140]	; (80069a4 <_malloc_r+0xb4>)
 8006918:	6814      	ldr	r4, [r2, #0]
 800691a:	4621      	mov	r1, r4
 800691c:	b991      	cbnz	r1, 8006944 <_malloc_r+0x54>
 800691e:	4c22      	ldr	r4, [pc, #136]	; (80069a8 <_malloc_r+0xb8>)
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	b91b      	cbnz	r3, 800692c <_malloc_r+0x3c>
 8006924:	4630      	mov	r0, r6
 8006926:	f000 f841 	bl	80069ac <_sbrk_r>
 800692a:	6020      	str	r0, [r4, #0]
 800692c:	4629      	mov	r1, r5
 800692e:	4630      	mov	r0, r6
 8006930:	f000 f83c 	bl	80069ac <_sbrk_r>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d126      	bne.n	8006986 <_malloc_r+0x96>
 8006938:	230c      	movs	r3, #12
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	4630      	mov	r0, r6
 800693e:	f000 f9a9 	bl	8006c94 <__malloc_unlock>
 8006942:	e7e4      	b.n	800690e <_malloc_r+0x1e>
 8006944:	680b      	ldr	r3, [r1, #0]
 8006946:	1b5b      	subs	r3, r3, r5
 8006948:	d41a      	bmi.n	8006980 <_malloc_r+0x90>
 800694a:	2b0b      	cmp	r3, #11
 800694c:	d90f      	bls.n	800696e <_malloc_r+0x7e>
 800694e:	600b      	str	r3, [r1, #0]
 8006950:	50cd      	str	r5, [r1, r3]
 8006952:	18cc      	adds	r4, r1, r3
 8006954:	4630      	mov	r0, r6
 8006956:	f000 f99d 	bl	8006c94 <__malloc_unlock>
 800695a:	f104 000b 	add.w	r0, r4, #11
 800695e:	1d23      	adds	r3, r4, #4
 8006960:	f020 0007 	bic.w	r0, r0, #7
 8006964:	1ac3      	subs	r3, r0, r3
 8006966:	d01b      	beq.n	80069a0 <_malloc_r+0xb0>
 8006968:	425a      	negs	r2, r3
 800696a:	50e2      	str	r2, [r4, r3]
 800696c:	bd70      	pop	{r4, r5, r6, pc}
 800696e:	428c      	cmp	r4, r1
 8006970:	bf0d      	iteet	eq
 8006972:	6863      	ldreq	r3, [r4, #4]
 8006974:	684b      	ldrne	r3, [r1, #4]
 8006976:	6063      	strne	r3, [r4, #4]
 8006978:	6013      	streq	r3, [r2, #0]
 800697a:	bf18      	it	ne
 800697c:	460c      	movne	r4, r1
 800697e:	e7e9      	b.n	8006954 <_malloc_r+0x64>
 8006980:	460c      	mov	r4, r1
 8006982:	6849      	ldr	r1, [r1, #4]
 8006984:	e7ca      	b.n	800691c <_malloc_r+0x2c>
 8006986:	1cc4      	adds	r4, r0, #3
 8006988:	f024 0403 	bic.w	r4, r4, #3
 800698c:	42a0      	cmp	r0, r4
 800698e:	d005      	beq.n	800699c <_malloc_r+0xac>
 8006990:	1a21      	subs	r1, r4, r0
 8006992:	4630      	mov	r0, r6
 8006994:	f000 f80a 	bl	80069ac <_sbrk_r>
 8006998:	3001      	adds	r0, #1
 800699a:	d0cd      	beq.n	8006938 <_malloc_r+0x48>
 800699c:	6025      	str	r5, [r4, #0]
 800699e:	e7d9      	b.n	8006954 <_malloc_r+0x64>
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	bf00      	nop
 80069a4:	2000031c 	.word	0x2000031c
 80069a8:	20000320 	.word	0x20000320

080069ac <_sbrk_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4c06      	ldr	r4, [pc, #24]	; (80069c8 <_sbrk_r+0x1c>)
 80069b0:	2300      	movs	r3, #0
 80069b2:	4605      	mov	r5, r0
 80069b4:	4608      	mov	r0, r1
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	f000 fca8 	bl	800730c <_sbrk>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_sbrk_r+0x1a>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_sbrk_r+0x1a>
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	20000600 	.word	0x20000600

080069cc <siprintf>:
 80069cc:	b40e      	push	{r1, r2, r3}
 80069ce:	b500      	push	{lr}
 80069d0:	b09c      	sub	sp, #112	; 0x70
 80069d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80069d6:	ab1d      	add	r3, sp, #116	; 0x74
 80069d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80069dc:	9002      	str	r0, [sp, #8]
 80069de:	9006      	str	r0, [sp, #24]
 80069e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069e4:	480a      	ldr	r0, [pc, #40]	; (8006a10 <siprintf+0x44>)
 80069e6:	9104      	str	r1, [sp, #16]
 80069e8:	9107      	str	r1, [sp, #28]
 80069ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80069ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80069f6:	6800      	ldr	r0, [r0, #0]
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	a902      	add	r1, sp, #8
 80069fc:	f000 f9a6 	bl	8006d4c <_svfiprintf_r>
 8006a00:	9b02      	ldr	r3, [sp, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	b01c      	add	sp, #112	; 0x70
 8006a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a0c:	b003      	add	sp, #12
 8006a0e:	4770      	bx	lr
 8006a10:	20000058 	.word	0x20000058

08006a14 <strtok>:
 8006a14:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <strtok+0x50>)
 8006a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1a:	681d      	ldr	r5, [r3, #0]
 8006a1c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	b9b4      	cbnz	r4, 8006a52 <strtok+0x3e>
 8006a24:	2050      	movs	r0, #80	; 0x50
 8006a26:	f7ff feeb 	bl	8006800 <malloc>
 8006a2a:	65a8      	str	r0, [r5, #88]	; 0x58
 8006a2c:	6004      	str	r4, [r0, #0]
 8006a2e:	6044      	str	r4, [r0, #4]
 8006a30:	6084      	str	r4, [r0, #8]
 8006a32:	60c4      	str	r4, [r0, #12]
 8006a34:	6104      	str	r4, [r0, #16]
 8006a36:	6144      	str	r4, [r0, #20]
 8006a38:	6184      	str	r4, [r0, #24]
 8006a3a:	6284      	str	r4, [r0, #40]	; 0x28
 8006a3c:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006a3e:	6304      	str	r4, [r0, #48]	; 0x30
 8006a40:	6344      	str	r4, [r0, #52]	; 0x34
 8006a42:	6384      	str	r4, [r0, #56]	; 0x38
 8006a44:	63c4      	str	r4, [r0, #60]	; 0x3c
 8006a46:	6404      	str	r4, [r0, #64]	; 0x40
 8006a48:	6444      	str	r4, [r0, #68]	; 0x44
 8006a4a:	6484      	str	r4, [r0, #72]	; 0x48
 8006a4c:	64c4      	str	r4, [r0, #76]	; 0x4c
 8006a4e:	7704      	strb	r4, [r0, #28]
 8006a50:	6244      	str	r4, [r0, #36]	; 0x24
 8006a52:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006a54:	4639      	mov	r1, r7
 8006a56:	4630      	mov	r0, r6
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5e:	f000 b803 	b.w	8006a68 <__strtok_r>
 8006a62:	bf00      	nop
 8006a64:	20000058 	.word	0x20000058

08006a68 <__strtok_r>:
 8006a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6a:	b918      	cbnz	r0, 8006a74 <__strtok_r+0xc>
 8006a6c:	6810      	ldr	r0, [r2, #0]
 8006a6e:	b908      	cbnz	r0, 8006a74 <__strtok_r+0xc>
 8006a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a72:	4620      	mov	r0, r4
 8006a74:	4604      	mov	r4, r0
 8006a76:	460f      	mov	r7, r1
 8006a78:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006a7c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006a80:	b91e      	cbnz	r6, 8006a8a <__strtok_r+0x22>
 8006a82:	b965      	cbnz	r5, 8006a9e <__strtok_r+0x36>
 8006a84:	6015      	str	r5, [r2, #0]
 8006a86:	4628      	mov	r0, r5
 8006a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a8a:	42b5      	cmp	r5, r6
 8006a8c:	d1f6      	bne.n	8006a7c <__strtok_r+0x14>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1ef      	bne.n	8006a72 <__strtok_r+0xa>
 8006a92:	6014      	str	r4, [r2, #0]
 8006a94:	7003      	strb	r3, [r0, #0]
 8006a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a98:	461c      	mov	r4, r3
 8006a9a:	e00c      	b.n	8006ab6 <__strtok_r+0x4e>
 8006a9c:	b915      	cbnz	r5, 8006aa4 <__strtok_r+0x3c>
 8006a9e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006aa2:	460e      	mov	r6, r1
 8006aa4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	d1f7      	bne.n	8006a9c <__strtok_r+0x34>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f3      	beq.n	8006a98 <__strtok_r+0x30>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006ab6:	6014      	str	r4, [r2, #0]
 8006ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006aba <_strtol_l.isra.0>:
 8006aba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abe:	4680      	mov	r8, r0
 8006ac0:	4689      	mov	r9, r1
 8006ac2:	4692      	mov	sl, r2
 8006ac4:	461f      	mov	r7, r3
 8006ac6:	468b      	mov	fp, r1
 8006ac8:	465d      	mov	r5, fp
 8006aca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006acc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ad0:	f000 f8ca 	bl	8006c68 <__locale_ctype_ptr_l>
 8006ad4:	4420      	add	r0, r4
 8006ad6:	7846      	ldrb	r6, [r0, #1]
 8006ad8:	f016 0608 	ands.w	r6, r6, #8
 8006adc:	d10b      	bne.n	8006af6 <_strtol_l.isra.0+0x3c>
 8006ade:	2c2d      	cmp	r4, #45	; 0x2d
 8006ae0:	d10b      	bne.n	8006afa <_strtol_l.isra.0+0x40>
 8006ae2:	782c      	ldrb	r4, [r5, #0]
 8006ae4:	2601      	movs	r6, #1
 8006ae6:	f10b 0502 	add.w	r5, fp, #2
 8006aea:	b167      	cbz	r7, 8006b06 <_strtol_l.isra.0+0x4c>
 8006aec:	2f10      	cmp	r7, #16
 8006aee:	d114      	bne.n	8006b1a <_strtol_l.isra.0+0x60>
 8006af0:	2c30      	cmp	r4, #48	; 0x30
 8006af2:	d00a      	beq.n	8006b0a <_strtol_l.isra.0+0x50>
 8006af4:	e011      	b.n	8006b1a <_strtol_l.isra.0+0x60>
 8006af6:	46ab      	mov	fp, r5
 8006af8:	e7e6      	b.n	8006ac8 <_strtol_l.isra.0+0xe>
 8006afa:	2c2b      	cmp	r4, #43	; 0x2b
 8006afc:	bf04      	itt	eq
 8006afe:	782c      	ldrbeq	r4, [r5, #0]
 8006b00:	f10b 0502 	addeq.w	r5, fp, #2
 8006b04:	e7f1      	b.n	8006aea <_strtol_l.isra.0+0x30>
 8006b06:	2c30      	cmp	r4, #48	; 0x30
 8006b08:	d127      	bne.n	8006b5a <_strtol_l.isra.0+0xa0>
 8006b0a:	782b      	ldrb	r3, [r5, #0]
 8006b0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b10:	2b58      	cmp	r3, #88	; 0x58
 8006b12:	d14b      	bne.n	8006bac <_strtol_l.isra.0+0xf2>
 8006b14:	786c      	ldrb	r4, [r5, #1]
 8006b16:	2710      	movs	r7, #16
 8006b18:	3502      	adds	r5, #2
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	bf0c      	ite	eq
 8006b1e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006b22:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006b26:	2200      	movs	r2, #0
 8006b28:	fbb1 fef7 	udiv	lr, r1, r7
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006b32:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d811      	bhi.n	8006b5e <_strtol_l.isra.0+0xa4>
 8006b3a:	461c      	mov	r4, r3
 8006b3c:	42a7      	cmp	r7, r4
 8006b3e:	dd1d      	ble.n	8006b7c <_strtol_l.isra.0+0xc2>
 8006b40:	1c53      	adds	r3, r2, #1
 8006b42:	d007      	beq.n	8006b54 <_strtol_l.isra.0+0x9a>
 8006b44:	4586      	cmp	lr, r0
 8006b46:	d316      	bcc.n	8006b76 <_strtol_l.isra.0+0xbc>
 8006b48:	d101      	bne.n	8006b4e <_strtol_l.isra.0+0x94>
 8006b4a:	45a4      	cmp	ip, r4
 8006b4c:	db13      	blt.n	8006b76 <_strtol_l.isra.0+0xbc>
 8006b4e:	fb00 4007 	mla	r0, r0, r7, r4
 8006b52:	2201      	movs	r2, #1
 8006b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b58:	e7eb      	b.n	8006b32 <_strtol_l.isra.0+0x78>
 8006b5a:	270a      	movs	r7, #10
 8006b5c:	e7dd      	b.n	8006b1a <_strtol_l.isra.0+0x60>
 8006b5e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006b62:	2b19      	cmp	r3, #25
 8006b64:	d801      	bhi.n	8006b6a <_strtol_l.isra.0+0xb0>
 8006b66:	3c37      	subs	r4, #55	; 0x37
 8006b68:	e7e8      	b.n	8006b3c <_strtol_l.isra.0+0x82>
 8006b6a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006b6e:	2b19      	cmp	r3, #25
 8006b70:	d804      	bhi.n	8006b7c <_strtol_l.isra.0+0xc2>
 8006b72:	3c57      	subs	r4, #87	; 0x57
 8006b74:	e7e2      	b.n	8006b3c <_strtol_l.isra.0+0x82>
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	e7eb      	b.n	8006b54 <_strtol_l.isra.0+0x9a>
 8006b7c:	1c53      	adds	r3, r2, #1
 8006b7e:	d108      	bne.n	8006b92 <_strtol_l.isra.0+0xd8>
 8006b80:	2322      	movs	r3, #34	; 0x22
 8006b82:	f8c8 3000 	str.w	r3, [r8]
 8006b86:	4608      	mov	r0, r1
 8006b88:	f1ba 0f00 	cmp.w	sl, #0
 8006b8c:	d107      	bne.n	8006b9e <_strtol_l.isra.0+0xe4>
 8006b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	b106      	cbz	r6, 8006b96 <_strtol_l.isra.0+0xdc>
 8006b94:	4240      	negs	r0, r0
 8006b96:	f1ba 0f00 	cmp.w	sl, #0
 8006b9a:	d00c      	beq.n	8006bb6 <_strtol_l.isra.0+0xfc>
 8006b9c:	b122      	cbz	r2, 8006ba8 <_strtol_l.isra.0+0xee>
 8006b9e:	3d01      	subs	r5, #1
 8006ba0:	f8ca 5000 	str.w	r5, [sl]
 8006ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	464d      	mov	r5, r9
 8006baa:	e7f9      	b.n	8006ba0 <_strtol_l.isra.0+0xe6>
 8006bac:	2430      	movs	r4, #48	; 0x30
 8006bae:	2f00      	cmp	r7, #0
 8006bb0:	d1b3      	bne.n	8006b1a <_strtol_l.isra.0+0x60>
 8006bb2:	2708      	movs	r7, #8
 8006bb4:	e7b1      	b.n	8006b1a <_strtol_l.isra.0+0x60>
 8006bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006bbc <strtol>:
 8006bbc:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <strtol+0x24>)
 8006bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bc0:	681c      	ldr	r4, [r3, #0]
 8006bc2:	4d08      	ldr	r5, [pc, #32]	; (8006be4 <strtol+0x28>)
 8006bc4:	6a23      	ldr	r3, [r4, #32]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bf08      	it	eq
 8006bca:	462b      	moveq	r3, r5
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	460a      	mov	r2, r1
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7ff ff70 	bl	8006aba <_strtol_l.isra.0>
 8006bda:	b003      	add	sp, #12
 8006bdc:	bd30      	pop	{r4, r5, pc}
 8006bde:	bf00      	nop
 8006be0:	20000058 	.word	0x20000058
 8006be4:	200000bc 	.word	0x200000bc

08006be8 <__utoa>:
 8006be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bea:	4c1e      	ldr	r4, [pc, #120]	; (8006c64 <__utoa+0x7c>)
 8006bec:	b08b      	sub	sp, #44	; 0x2c
 8006bee:	4603      	mov	r3, r0
 8006bf0:	460f      	mov	r7, r1
 8006bf2:	466d      	mov	r5, sp
 8006bf4:	f104 0e20 	add.w	lr, r4, #32
 8006bf8:	6820      	ldr	r0, [r4, #0]
 8006bfa:	6861      	ldr	r1, [r4, #4]
 8006bfc:	462e      	mov	r6, r5
 8006bfe:	c603      	stmia	r6!, {r0, r1}
 8006c00:	3408      	adds	r4, #8
 8006c02:	4574      	cmp	r4, lr
 8006c04:	4635      	mov	r5, r6
 8006c06:	d1f7      	bne.n	8006bf8 <__utoa+0x10>
 8006c08:	7921      	ldrb	r1, [r4, #4]
 8006c0a:	7131      	strb	r1, [r6, #4]
 8006c0c:	1e91      	subs	r1, r2, #2
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	6030      	str	r0, [r6, #0]
 8006c12:	2922      	cmp	r1, #34	; 0x22
 8006c14:	f04f 0100 	mov.w	r1, #0
 8006c18:	d904      	bls.n	8006c24 <__utoa+0x3c>
 8006c1a:	7039      	strb	r1, [r7, #0]
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	4638      	mov	r0, r7
 8006c20:	b00b      	add	sp, #44	; 0x2c
 8006c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c24:	1e78      	subs	r0, r7, #1
 8006c26:	4606      	mov	r6, r0
 8006c28:	fbb3 f5f2 	udiv	r5, r3, r2
 8006c2c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006c30:	fb02 3315 	mls	r3, r2, r5, r3
 8006c34:	4473      	add	r3, lr
 8006c36:	1c4c      	adds	r4, r1, #1
 8006c38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006c3c:	f806 3f01 	strb.w	r3, [r6, #1]!
 8006c40:	462b      	mov	r3, r5
 8006c42:	b965      	cbnz	r5, 8006c5e <__utoa+0x76>
 8006c44:	553d      	strb	r5, [r7, r4]
 8006c46:	187a      	adds	r2, r7, r1
 8006c48:	1acc      	subs	r4, r1, r3
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	dae7      	bge.n	8006c1e <__utoa+0x36>
 8006c4e:	7844      	ldrb	r4, [r0, #1]
 8006c50:	7815      	ldrb	r5, [r2, #0]
 8006c52:	f800 5f01 	strb.w	r5, [r0, #1]!
 8006c56:	3301      	adds	r3, #1
 8006c58:	f802 4901 	strb.w	r4, [r2], #-1
 8006c5c:	e7f4      	b.n	8006c48 <__utoa+0x60>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	e7e2      	b.n	8006c28 <__utoa+0x40>
 8006c62:	bf00      	nop
 8006c64:	080073b4 	.word	0x080073b4

08006c68 <__locale_ctype_ptr_l>:
 8006c68:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006c6c:	4770      	bx	lr

08006c6e <__ascii_mbtowc>:
 8006c6e:	b082      	sub	sp, #8
 8006c70:	b901      	cbnz	r1, 8006c74 <__ascii_mbtowc+0x6>
 8006c72:	a901      	add	r1, sp, #4
 8006c74:	b142      	cbz	r2, 8006c88 <__ascii_mbtowc+0x1a>
 8006c76:	b14b      	cbz	r3, 8006c8c <__ascii_mbtowc+0x1e>
 8006c78:	7813      	ldrb	r3, [r2, #0]
 8006c7a:	600b      	str	r3, [r1, #0]
 8006c7c:	7812      	ldrb	r2, [r2, #0]
 8006c7e:	1c10      	adds	r0, r2, #0
 8006c80:	bf18      	it	ne
 8006c82:	2001      	movne	r0, #1
 8006c84:	b002      	add	sp, #8
 8006c86:	4770      	bx	lr
 8006c88:	4610      	mov	r0, r2
 8006c8a:	e7fb      	b.n	8006c84 <__ascii_mbtowc+0x16>
 8006c8c:	f06f 0001 	mvn.w	r0, #1
 8006c90:	e7f8      	b.n	8006c84 <__ascii_mbtowc+0x16>

08006c92 <__malloc_lock>:
 8006c92:	4770      	bx	lr

08006c94 <__malloc_unlock>:
 8006c94:	4770      	bx	lr

08006c96 <__ssputs_r>:
 8006c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9a:	688e      	ldr	r6, [r1, #8]
 8006c9c:	429e      	cmp	r6, r3
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	4691      	mov	r9, r2
 8006ca4:	4698      	mov	r8, r3
 8006ca6:	d835      	bhi.n	8006d14 <__ssputs_r+0x7e>
 8006ca8:	898a      	ldrh	r2, [r1, #12]
 8006caa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cae:	d031      	beq.n	8006d14 <__ssputs_r+0x7e>
 8006cb0:	6825      	ldr	r5, [r4, #0]
 8006cb2:	6909      	ldr	r1, [r1, #16]
 8006cb4:	1a6f      	subs	r7, r5, r1
 8006cb6:	6965      	ldr	r5, [r4, #20]
 8006cb8:	2302      	movs	r3, #2
 8006cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cbe:	fb95 f5f3 	sdiv	r5, r5, r3
 8006cc2:	f108 0301 	add.w	r3, r8, #1
 8006cc6:	443b      	add	r3, r7
 8006cc8:	429d      	cmp	r5, r3
 8006cca:	bf38      	it	cc
 8006ccc:	461d      	movcc	r5, r3
 8006cce:	0553      	lsls	r3, r2, #21
 8006cd0:	d531      	bpl.n	8006d36 <__ssputs_r+0xa0>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f7ff fe0c 	bl	80068f0 <_malloc_r>
 8006cd8:	4606      	mov	r6, r0
 8006cda:	b950      	cbnz	r0, 8006cf2 <__ssputs_r+0x5c>
 8006cdc:	230c      	movs	r3, #12
 8006cde:	f8ca 3000 	str.w	r3, [sl]
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ce8:	81a3      	strh	r3, [r4, #12]
 8006cea:	f04f 30ff 	mov.w	r0, #4294967295
 8006cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf2:	463a      	mov	r2, r7
 8006cf4:	6921      	ldr	r1, [r4, #16]
 8006cf6:	f7ff fd8b 	bl	8006810 <memcpy>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	6126      	str	r6, [r4, #16]
 8006d08:	6165      	str	r5, [r4, #20]
 8006d0a:	443e      	add	r6, r7
 8006d0c:	1bed      	subs	r5, r5, r7
 8006d0e:	6026      	str	r6, [r4, #0]
 8006d10:	60a5      	str	r5, [r4, #8]
 8006d12:	4646      	mov	r6, r8
 8006d14:	4546      	cmp	r6, r8
 8006d16:	bf28      	it	cs
 8006d18:	4646      	movcs	r6, r8
 8006d1a:	4632      	mov	r2, r6
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	6820      	ldr	r0, [r4, #0]
 8006d20:	f000 faab 	bl	800727a <memmove>
 8006d24:	68a3      	ldr	r3, [r4, #8]
 8006d26:	1b9b      	subs	r3, r3, r6
 8006d28:	60a3      	str	r3, [r4, #8]
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	441e      	add	r6, r3
 8006d2e:	6026      	str	r6, [r4, #0]
 8006d30:	2000      	movs	r0, #0
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	462a      	mov	r2, r5
 8006d38:	f000 fab9 	bl	80072ae <_realloc_r>
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d1e1      	bne.n	8006d06 <__ssputs_r+0x70>
 8006d42:	6921      	ldr	r1, [r4, #16]
 8006d44:	4650      	mov	r0, sl
 8006d46:	f7ff fd85 	bl	8006854 <_free_r>
 8006d4a:	e7c7      	b.n	8006cdc <__ssputs_r+0x46>

08006d4c <_svfiprintf_r>:
 8006d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d50:	b09d      	sub	sp, #116	; 0x74
 8006d52:	4680      	mov	r8, r0
 8006d54:	9303      	str	r3, [sp, #12]
 8006d56:	898b      	ldrh	r3, [r1, #12]
 8006d58:	061c      	lsls	r4, r3, #24
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	d50f      	bpl.n	8006d80 <_svfiprintf_r+0x34>
 8006d60:	690b      	ldr	r3, [r1, #16]
 8006d62:	b96b      	cbnz	r3, 8006d80 <_svfiprintf_r+0x34>
 8006d64:	2140      	movs	r1, #64	; 0x40
 8006d66:	f7ff fdc3 	bl	80068f0 <_malloc_r>
 8006d6a:	6028      	str	r0, [r5, #0]
 8006d6c:	6128      	str	r0, [r5, #16]
 8006d6e:	b928      	cbnz	r0, 8006d7c <_svfiprintf_r+0x30>
 8006d70:	230c      	movs	r3, #12
 8006d72:	f8c8 3000 	str.w	r3, [r8]
 8006d76:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7a:	e0c5      	b.n	8006f08 <_svfiprintf_r+0x1bc>
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	616b      	str	r3, [r5, #20]
 8006d80:	2300      	movs	r3, #0
 8006d82:	9309      	str	r3, [sp, #36]	; 0x24
 8006d84:	2320      	movs	r3, #32
 8006d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d8a:	2330      	movs	r3, #48	; 0x30
 8006d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d90:	f04f 0b01 	mov.w	fp, #1
 8006d94:	4637      	mov	r7, r6
 8006d96:	463c      	mov	r4, r7
 8006d98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d13c      	bne.n	8006e1a <_svfiprintf_r+0xce>
 8006da0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006da4:	d00b      	beq.n	8006dbe <_svfiprintf_r+0x72>
 8006da6:	4653      	mov	r3, sl
 8006da8:	4632      	mov	r2, r6
 8006daa:	4629      	mov	r1, r5
 8006dac:	4640      	mov	r0, r8
 8006dae:	f7ff ff72 	bl	8006c96 <__ssputs_r>
 8006db2:	3001      	adds	r0, #1
 8006db4:	f000 80a3 	beq.w	8006efe <_svfiprintf_r+0x1b2>
 8006db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dba:	4453      	add	r3, sl
 8006dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbe:	783b      	ldrb	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 809c 	beq.w	8006efe <_svfiprintf_r+0x1b2>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	9307      	str	r3, [sp, #28]
 8006dd0:	9205      	str	r2, [sp, #20]
 8006dd2:	9306      	str	r3, [sp, #24]
 8006dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8006dda:	2205      	movs	r2, #5
 8006ddc:	7821      	ldrb	r1, [r4, #0]
 8006dde:	4850      	ldr	r0, [pc, #320]	; (8006f20 <_svfiprintf_r+0x1d4>)
 8006de0:	f7f9 f9fe 	bl	80001e0 <memchr>
 8006de4:	1c67      	adds	r7, r4, #1
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	b9d8      	cbnz	r0, 8006e22 <_svfiprintf_r+0xd6>
 8006dea:	06d9      	lsls	r1, r3, #27
 8006dec:	bf44      	itt	mi
 8006dee:	2220      	movmi	r2, #32
 8006df0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006df4:	071a      	lsls	r2, r3, #28
 8006df6:	bf44      	itt	mi
 8006df8:	222b      	movmi	r2, #43	; 0x2b
 8006dfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dfe:	7822      	ldrb	r2, [r4, #0]
 8006e00:	2a2a      	cmp	r2, #42	; 0x2a
 8006e02:	d016      	beq.n	8006e32 <_svfiprintf_r+0xe6>
 8006e04:	9a07      	ldr	r2, [sp, #28]
 8006e06:	2100      	movs	r1, #0
 8006e08:	200a      	movs	r0, #10
 8006e0a:	4627      	mov	r7, r4
 8006e0c:	3401      	adds	r4, #1
 8006e0e:	783b      	ldrb	r3, [r7, #0]
 8006e10:	3b30      	subs	r3, #48	; 0x30
 8006e12:	2b09      	cmp	r3, #9
 8006e14:	d951      	bls.n	8006eba <_svfiprintf_r+0x16e>
 8006e16:	b1c9      	cbz	r1, 8006e4c <_svfiprintf_r+0x100>
 8006e18:	e011      	b.n	8006e3e <_svfiprintf_r+0xf2>
 8006e1a:	2b25      	cmp	r3, #37	; 0x25
 8006e1c:	d0c0      	beq.n	8006da0 <_svfiprintf_r+0x54>
 8006e1e:	4627      	mov	r7, r4
 8006e20:	e7b9      	b.n	8006d96 <_svfiprintf_r+0x4a>
 8006e22:	4a3f      	ldr	r2, [pc, #252]	; (8006f20 <_svfiprintf_r+0x1d4>)
 8006e24:	1a80      	subs	r0, r0, r2
 8006e26:	fa0b f000 	lsl.w	r0, fp, r0
 8006e2a:	4318      	orrs	r0, r3
 8006e2c:	9004      	str	r0, [sp, #16]
 8006e2e:	463c      	mov	r4, r7
 8006e30:	e7d3      	b.n	8006dda <_svfiprintf_r+0x8e>
 8006e32:	9a03      	ldr	r2, [sp, #12]
 8006e34:	1d11      	adds	r1, r2, #4
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	9103      	str	r1, [sp, #12]
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	db01      	blt.n	8006e42 <_svfiprintf_r+0xf6>
 8006e3e:	9207      	str	r2, [sp, #28]
 8006e40:	e004      	b.n	8006e4c <_svfiprintf_r+0x100>
 8006e42:	4252      	negs	r2, r2
 8006e44:	f043 0302 	orr.w	r3, r3, #2
 8006e48:	9207      	str	r2, [sp, #28]
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	783b      	ldrb	r3, [r7, #0]
 8006e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e50:	d10e      	bne.n	8006e70 <_svfiprintf_r+0x124>
 8006e52:	787b      	ldrb	r3, [r7, #1]
 8006e54:	2b2a      	cmp	r3, #42	; 0x2a
 8006e56:	f107 0101 	add.w	r1, r7, #1
 8006e5a:	d132      	bne.n	8006ec2 <_svfiprintf_r+0x176>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	9203      	str	r2, [sp, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfb8      	it	lt
 8006e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e6c:	3702      	adds	r7, #2
 8006e6e:	9305      	str	r3, [sp, #20]
 8006e70:	4c2c      	ldr	r4, [pc, #176]	; (8006f24 <_svfiprintf_r+0x1d8>)
 8006e72:	7839      	ldrb	r1, [r7, #0]
 8006e74:	2203      	movs	r2, #3
 8006e76:	4620      	mov	r0, r4
 8006e78:	f7f9 f9b2 	bl	80001e0 <memchr>
 8006e7c:	b138      	cbz	r0, 8006e8e <_svfiprintf_r+0x142>
 8006e7e:	2340      	movs	r3, #64	; 0x40
 8006e80:	1b00      	subs	r0, r0, r4
 8006e82:	fa03 f000 	lsl.w	r0, r3, r0
 8006e86:	9b04      	ldr	r3, [sp, #16]
 8006e88:	4303      	orrs	r3, r0
 8006e8a:	9304      	str	r3, [sp, #16]
 8006e8c:	3701      	adds	r7, #1
 8006e8e:	7839      	ldrb	r1, [r7, #0]
 8006e90:	4825      	ldr	r0, [pc, #148]	; (8006f28 <_svfiprintf_r+0x1dc>)
 8006e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e96:	2206      	movs	r2, #6
 8006e98:	1c7e      	adds	r6, r7, #1
 8006e9a:	f7f9 f9a1 	bl	80001e0 <memchr>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d035      	beq.n	8006f0e <_svfiprintf_r+0x1c2>
 8006ea2:	4b22      	ldr	r3, [pc, #136]	; (8006f2c <_svfiprintf_r+0x1e0>)
 8006ea4:	b9fb      	cbnz	r3, 8006ee6 <_svfiprintf_r+0x19a>
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	3307      	adds	r3, #7
 8006eaa:	f023 0307 	bic.w	r3, r3, #7
 8006eae:	3308      	adds	r3, #8
 8006eb0:	9303      	str	r3, [sp, #12]
 8006eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb4:	444b      	add	r3, r9
 8006eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb8:	e76c      	b.n	8006d94 <_svfiprintf_r+0x48>
 8006eba:	fb00 3202 	mla	r2, r0, r2, r3
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	e7a3      	b.n	8006e0a <_svfiprintf_r+0xbe>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9305      	str	r3, [sp, #20]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	240a      	movs	r4, #10
 8006eca:	460f      	mov	r7, r1
 8006ecc:	3101      	adds	r1, #1
 8006ece:	783a      	ldrb	r2, [r7, #0]
 8006ed0:	3a30      	subs	r2, #48	; 0x30
 8006ed2:	2a09      	cmp	r2, #9
 8006ed4:	d903      	bls.n	8006ede <_svfiprintf_r+0x192>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0ca      	beq.n	8006e70 <_svfiprintf_r+0x124>
 8006eda:	9005      	str	r0, [sp, #20]
 8006edc:	e7c8      	b.n	8006e70 <_svfiprintf_r+0x124>
 8006ede:	fb04 2000 	mla	r0, r4, r0, r2
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e7f1      	b.n	8006eca <_svfiprintf_r+0x17e>
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	462a      	mov	r2, r5
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <_svfiprintf_r+0x1e4>)
 8006eee:	a904      	add	r1, sp, #16
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	f3af 8000 	nop.w
 8006ef6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006efa:	4681      	mov	r9, r0
 8006efc:	d1d9      	bne.n	8006eb2 <_svfiprintf_r+0x166>
 8006efe:	89ab      	ldrh	r3, [r5, #12]
 8006f00:	065b      	lsls	r3, r3, #25
 8006f02:	f53f af38 	bmi.w	8006d76 <_svfiprintf_r+0x2a>
 8006f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f08:	b01d      	add	sp, #116	; 0x74
 8006f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	ab03      	add	r3, sp, #12
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	462a      	mov	r2, r5
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <_svfiprintf_r+0x1e4>)
 8006f16:	a904      	add	r1, sp, #16
 8006f18:	4640      	mov	r0, r8
 8006f1a:	f000 f881 	bl	8007020 <_printf_i>
 8006f1e:	e7ea      	b.n	8006ef6 <_svfiprintf_r+0x1aa>
 8006f20:	080073e3 	.word	0x080073e3
 8006f24:	080073e9 	.word	0x080073e9
 8006f28:	080073ed 	.word	0x080073ed
 8006f2c:	00000000 	.word	0x00000000
 8006f30:	08006c97 	.word	0x08006c97

08006f34 <_printf_common>:
 8006f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	4691      	mov	r9, r2
 8006f3a:	461f      	mov	r7, r3
 8006f3c:	688a      	ldr	r2, [r1, #8]
 8006f3e:	690b      	ldr	r3, [r1, #16]
 8006f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bfb8      	it	lt
 8006f48:	4613      	movlt	r3, r2
 8006f4a:	f8c9 3000 	str.w	r3, [r9]
 8006f4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f52:	4606      	mov	r6, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	b112      	cbz	r2, 8006f5e <_printf_common+0x2a>
 8006f58:	3301      	adds	r3, #1
 8006f5a:	f8c9 3000 	str.w	r3, [r9]
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	0699      	lsls	r1, r3, #26
 8006f62:	bf42      	ittt	mi
 8006f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f68:	3302      	addmi	r3, #2
 8006f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8006f6e:	6825      	ldr	r5, [r4, #0]
 8006f70:	f015 0506 	ands.w	r5, r5, #6
 8006f74:	d107      	bne.n	8006f86 <_printf_common+0x52>
 8006f76:	f104 0a19 	add.w	sl, r4, #25
 8006f7a:	68e3      	ldr	r3, [r4, #12]
 8006f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	429d      	cmp	r5, r3
 8006f84:	db29      	blt.n	8006fda <_printf_common+0xa6>
 8006f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	3300      	adds	r3, #0
 8006f8e:	bf18      	it	ne
 8006f90:	2301      	movne	r3, #1
 8006f92:	0692      	lsls	r2, r2, #26
 8006f94:	d42e      	bmi.n	8006ff4 <_printf_common+0xc0>
 8006f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	47c0      	blx	r8
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d021      	beq.n	8006fe8 <_printf_common+0xb4>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	68e5      	ldr	r5, [r4, #12]
 8006fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8006fac:	f003 0306 	and.w	r3, r3, #6
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	bf08      	it	eq
 8006fb4:	1aad      	subeq	r5, r5, r2
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	6922      	ldr	r2, [r4, #16]
 8006fba:	bf0c      	ite	eq
 8006fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fc0:	2500      	movne	r5, #0
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	bfc4      	itt	gt
 8006fc6:	1a9b      	subgt	r3, r3, r2
 8006fc8:	18ed      	addgt	r5, r5, r3
 8006fca:	f04f 0900 	mov.w	r9, #0
 8006fce:	341a      	adds	r4, #26
 8006fd0:	454d      	cmp	r5, r9
 8006fd2:	d11b      	bne.n	800700c <_printf_common+0xd8>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4652      	mov	r2, sl
 8006fde:	4639      	mov	r1, r7
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	47c0      	blx	r8
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d103      	bne.n	8006ff0 <_printf_common+0xbc>
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	e7c2      	b.n	8006f7a <_printf_common+0x46>
 8006ff4:	18e1      	adds	r1, r4, r3
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	2030      	movs	r0, #48	; 0x30
 8006ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ffe:	4422      	add	r2, r4
 8007000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007008:	3302      	adds	r3, #2
 800700a:	e7c4      	b.n	8006f96 <_printf_common+0x62>
 800700c:	2301      	movs	r3, #1
 800700e:	4622      	mov	r2, r4
 8007010:	4639      	mov	r1, r7
 8007012:	4630      	mov	r0, r6
 8007014:	47c0      	blx	r8
 8007016:	3001      	adds	r0, #1
 8007018:	d0e6      	beq.n	8006fe8 <_printf_common+0xb4>
 800701a:	f109 0901 	add.w	r9, r9, #1
 800701e:	e7d7      	b.n	8006fd0 <_printf_common+0x9c>

08007020 <_printf_i>:
 8007020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007024:	4617      	mov	r7, r2
 8007026:	7e0a      	ldrb	r2, [r1, #24]
 8007028:	b085      	sub	sp, #20
 800702a:	2a6e      	cmp	r2, #110	; 0x6e
 800702c:	4698      	mov	r8, r3
 800702e:	4606      	mov	r6, r0
 8007030:	460c      	mov	r4, r1
 8007032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007034:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007038:	f000 80bc 	beq.w	80071b4 <_printf_i+0x194>
 800703c:	d81a      	bhi.n	8007074 <_printf_i+0x54>
 800703e:	2a63      	cmp	r2, #99	; 0x63
 8007040:	d02e      	beq.n	80070a0 <_printf_i+0x80>
 8007042:	d80a      	bhi.n	800705a <_printf_i+0x3a>
 8007044:	2a00      	cmp	r2, #0
 8007046:	f000 80c8 	beq.w	80071da <_printf_i+0x1ba>
 800704a:	2a58      	cmp	r2, #88	; 0x58
 800704c:	f000 808a 	beq.w	8007164 <_printf_i+0x144>
 8007050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007054:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007058:	e02a      	b.n	80070b0 <_printf_i+0x90>
 800705a:	2a64      	cmp	r2, #100	; 0x64
 800705c:	d001      	beq.n	8007062 <_printf_i+0x42>
 800705e:	2a69      	cmp	r2, #105	; 0x69
 8007060:	d1f6      	bne.n	8007050 <_printf_i+0x30>
 8007062:	6821      	ldr	r1, [r4, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	f011 0f80 	tst.w	r1, #128	; 0x80
 800706a:	d023      	beq.n	80070b4 <_printf_i+0x94>
 800706c:	1d11      	adds	r1, r2, #4
 800706e:	6019      	str	r1, [r3, #0]
 8007070:	6813      	ldr	r3, [r2, #0]
 8007072:	e027      	b.n	80070c4 <_printf_i+0xa4>
 8007074:	2a73      	cmp	r2, #115	; 0x73
 8007076:	f000 80b4 	beq.w	80071e2 <_printf_i+0x1c2>
 800707a:	d808      	bhi.n	800708e <_printf_i+0x6e>
 800707c:	2a6f      	cmp	r2, #111	; 0x6f
 800707e:	d02a      	beq.n	80070d6 <_printf_i+0xb6>
 8007080:	2a70      	cmp	r2, #112	; 0x70
 8007082:	d1e5      	bne.n	8007050 <_printf_i+0x30>
 8007084:	680a      	ldr	r2, [r1, #0]
 8007086:	f042 0220 	orr.w	r2, r2, #32
 800708a:	600a      	str	r2, [r1, #0]
 800708c:	e003      	b.n	8007096 <_printf_i+0x76>
 800708e:	2a75      	cmp	r2, #117	; 0x75
 8007090:	d021      	beq.n	80070d6 <_printf_i+0xb6>
 8007092:	2a78      	cmp	r2, #120	; 0x78
 8007094:	d1dc      	bne.n	8007050 <_printf_i+0x30>
 8007096:	2278      	movs	r2, #120	; 0x78
 8007098:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800709c:	496e      	ldr	r1, [pc, #440]	; (8007258 <_printf_i+0x238>)
 800709e:	e064      	b.n	800716a <_printf_i+0x14a>
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80070a6:	1d11      	adds	r1, r2, #4
 80070a8:	6019      	str	r1, [r3, #0]
 80070aa:	6813      	ldr	r3, [r2, #0]
 80070ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0a3      	b.n	80071fc <_printf_i+0x1dc>
 80070b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80070b8:	f102 0104 	add.w	r1, r2, #4
 80070bc:	6019      	str	r1, [r3, #0]
 80070be:	d0d7      	beq.n	8007070 <_printf_i+0x50>
 80070c0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	da03      	bge.n	80070d0 <_printf_i+0xb0>
 80070c8:	222d      	movs	r2, #45	; 0x2d
 80070ca:	425b      	negs	r3, r3
 80070cc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80070d0:	4962      	ldr	r1, [pc, #392]	; (800725c <_printf_i+0x23c>)
 80070d2:	220a      	movs	r2, #10
 80070d4:	e017      	b.n	8007106 <_printf_i+0xe6>
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	f010 0f80 	tst.w	r0, #128	; 0x80
 80070de:	d003      	beq.n	80070e8 <_printf_i+0xc8>
 80070e0:	1d08      	adds	r0, r1, #4
 80070e2:	6018      	str	r0, [r3, #0]
 80070e4:	680b      	ldr	r3, [r1, #0]
 80070e6:	e006      	b.n	80070f6 <_printf_i+0xd6>
 80070e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070ec:	f101 0004 	add.w	r0, r1, #4
 80070f0:	6018      	str	r0, [r3, #0]
 80070f2:	d0f7      	beq.n	80070e4 <_printf_i+0xc4>
 80070f4:	880b      	ldrh	r3, [r1, #0]
 80070f6:	4959      	ldr	r1, [pc, #356]	; (800725c <_printf_i+0x23c>)
 80070f8:	2a6f      	cmp	r2, #111	; 0x6f
 80070fa:	bf14      	ite	ne
 80070fc:	220a      	movne	r2, #10
 80070fe:	2208      	moveq	r2, #8
 8007100:	2000      	movs	r0, #0
 8007102:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007106:	6865      	ldr	r5, [r4, #4]
 8007108:	60a5      	str	r5, [r4, #8]
 800710a:	2d00      	cmp	r5, #0
 800710c:	f2c0 809c 	blt.w	8007248 <_printf_i+0x228>
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	f020 0004 	bic.w	r0, r0, #4
 8007116:	6020      	str	r0, [r4, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d13f      	bne.n	800719c <_printf_i+0x17c>
 800711c:	2d00      	cmp	r5, #0
 800711e:	f040 8095 	bne.w	800724c <_printf_i+0x22c>
 8007122:	4675      	mov	r5, lr
 8007124:	2a08      	cmp	r2, #8
 8007126:	d10b      	bne.n	8007140 <_printf_i+0x120>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	07da      	lsls	r2, r3, #31
 800712c:	d508      	bpl.n	8007140 <_printf_i+0x120>
 800712e:	6923      	ldr	r3, [r4, #16]
 8007130:	6862      	ldr	r2, [r4, #4]
 8007132:	429a      	cmp	r2, r3
 8007134:	bfde      	ittt	le
 8007136:	2330      	movle	r3, #48	; 0x30
 8007138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800713c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007140:	ebae 0305 	sub.w	r3, lr, r5
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	f8cd 8000 	str.w	r8, [sp]
 800714a:	463b      	mov	r3, r7
 800714c:	aa03      	add	r2, sp, #12
 800714e:	4621      	mov	r1, r4
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff feef 	bl	8006f34 <_printf_common>
 8007156:	3001      	adds	r0, #1
 8007158:	d155      	bne.n	8007206 <_printf_i+0x1e6>
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	b005      	add	sp, #20
 8007160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007164:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007168:	493c      	ldr	r1, [pc, #240]	; (800725c <_printf_i+0x23c>)
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007172:	f100 0504 	add.w	r5, r0, #4
 8007176:	601d      	str	r5, [r3, #0]
 8007178:	d001      	beq.n	800717e <_printf_i+0x15e>
 800717a:	6803      	ldr	r3, [r0, #0]
 800717c:	e002      	b.n	8007184 <_printf_i+0x164>
 800717e:	0655      	lsls	r5, r2, #25
 8007180:	d5fb      	bpl.n	800717a <_printf_i+0x15a>
 8007182:	8803      	ldrh	r3, [r0, #0]
 8007184:	07d0      	lsls	r0, r2, #31
 8007186:	bf44      	itt	mi
 8007188:	f042 0220 	orrmi.w	r2, r2, #32
 800718c:	6022      	strmi	r2, [r4, #0]
 800718e:	b91b      	cbnz	r3, 8007198 <_printf_i+0x178>
 8007190:	6822      	ldr	r2, [r4, #0]
 8007192:	f022 0220 	bic.w	r2, r2, #32
 8007196:	6022      	str	r2, [r4, #0]
 8007198:	2210      	movs	r2, #16
 800719a:	e7b1      	b.n	8007100 <_printf_i+0xe0>
 800719c:	4675      	mov	r5, lr
 800719e:	fbb3 f0f2 	udiv	r0, r3, r2
 80071a2:	fb02 3310 	mls	r3, r2, r0, r3
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071ac:	4603      	mov	r3, r0
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d1f5      	bne.n	800719e <_printf_i+0x17e>
 80071b2:	e7b7      	b.n	8007124 <_printf_i+0x104>
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	6949      	ldr	r1, [r1, #20]
 80071ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 80071be:	d004      	beq.n	80071ca <_printf_i+0x1aa>
 80071c0:	1d10      	adds	r0, r2, #4
 80071c2:	6018      	str	r0, [r3, #0]
 80071c4:	6813      	ldr	r3, [r2, #0]
 80071c6:	6019      	str	r1, [r3, #0]
 80071c8:	e007      	b.n	80071da <_printf_i+0x1ba>
 80071ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071ce:	f102 0004 	add.w	r0, r2, #4
 80071d2:	6018      	str	r0, [r3, #0]
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	d0f6      	beq.n	80071c6 <_printf_i+0x1a6>
 80071d8:	8019      	strh	r1, [r3, #0]
 80071da:	2300      	movs	r3, #0
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	4675      	mov	r5, lr
 80071e0:	e7b1      	b.n	8007146 <_printf_i+0x126>
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	1d11      	adds	r1, r2, #4
 80071e6:	6019      	str	r1, [r3, #0]
 80071e8:	6815      	ldr	r5, [r2, #0]
 80071ea:	6862      	ldr	r2, [r4, #4]
 80071ec:	2100      	movs	r1, #0
 80071ee:	4628      	mov	r0, r5
 80071f0:	f7f8 fff6 	bl	80001e0 <memchr>
 80071f4:	b108      	cbz	r0, 80071fa <_printf_i+0x1da>
 80071f6:	1b40      	subs	r0, r0, r5
 80071f8:	6060      	str	r0, [r4, #4]
 80071fa:	6863      	ldr	r3, [r4, #4]
 80071fc:	6123      	str	r3, [r4, #16]
 80071fe:	2300      	movs	r3, #0
 8007200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007204:	e79f      	b.n	8007146 <_printf_i+0x126>
 8007206:	6923      	ldr	r3, [r4, #16]
 8007208:	462a      	mov	r2, r5
 800720a:	4639      	mov	r1, r7
 800720c:	4630      	mov	r0, r6
 800720e:	47c0      	blx	r8
 8007210:	3001      	adds	r0, #1
 8007212:	d0a2      	beq.n	800715a <_printf_i+0x13a>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	079b      	lsls	r3, r3, #30
 8007218:	d507      	bpl.n	800722a <_printf_i+0x20a>
 800721a:	2500      	movs	r5, #0
 800721c:	f104 0919 	add.w	r9, r4, #25
 8007220:	68e3      	ldr	r3, [r4, #12]
 8007222:	9a03      	ldr	r2, [sp, #12]
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	429d      	cmp	r5, r3
 8007228:	db05      	blt.n	8007236 <_printf_i+0x216>
 800722a:	68e0      	ldr	r0, [r4, #12]
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	4298      	cmp	r0, r3
 8007230:	bfb8      	it	lt
 8007232:	4618      	movlt	r0, r3
 8007234:	e793      	b.n	800715e <_printf_i+0x13e>
 8007236:	2301      	movs	r3, #1
 8007238:	464a      	mov	r2, r9
 800723a:	4639      	mov	r1, r7
 800723c:	4630      	mov	r0, r6
 800723e:	47c0      	blx	r8
 8007240:	3001      	adds	r0, #1
 8007242:	d08a      	beq.n	800715a <_printf_i+0x13a>
 8007244:	3501      	adds	r5, #1
 8007246:	e7eb      	b.n	8007220 <_printf_i+0x200>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1a7      	bne.n	800719c <_printf_i+0x17c>
 800724c:	780b      	ldrb	r3, [r1, #0]
 800724e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007256:	e765      	b.n	8007124 <_printf_i+0x104>
 8007258:	08007405 	.word	0x08007405
 800725c:	080073f4 	.word	0x080073f4

08007260 <__ascii_wctomb>:
 8007260:	b149      	cbz	r1, 8007276 <__ascii_wctomb+0x16>
 8007262:	2aff      	cmp	r2, #255	; 0xff
 8007264:	bf85      	ittet	hi
 8007266:	238a      	movhi	r3, #138	; 0x8a
 8007268:	6003      	strhi	r3, [r0, #0]
 800726a:	700a      	strbls	r2, [r1, #0]
 800726c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007270:	bf98      	it	ls
 8007272:	2001      	movls	r0, #1
 8007274:	4770      	bx	lr
 8007276:	4608      	mov	r0, r1
 8007278:	4770      	bx	lr

0800727a <memmove>:
 800727a:	4288      	cmp	r0, r1
 800727c:	b510      	push	{r4, lr}
 800727e:	eb01 0302 	add.w	r3, r1, r2
 8007282:	d803      	bhi.n	800728c <memmove+0x12>
 8007284:	1e42      	subs	r2, r0, #1
 8007286:	4299      	cmp	r1, r3
 8007288:	d10c      	bne.n	80072a4 <memmove+0x2a>
 800728a:	bd10      	pop	{r4, pc}
 800728c:	4298      	cmp	r0, r3
 800728e:	d2f9      	bcs.n	8007284 <memmove+0xa>
 8007290:	1881      	adds	r1, r0, r2
 8007292:	1ad2      	subs	r2, r2, r3
 8007294:	42d3      	cmn	r3, r2
 8007296:	d100      	bne.n	800729a <memmove+0x20>
 8007298:	bd10      	pop	{r4, pc}
 800729a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800729e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80072a2:	e7f7      	b.n	8007294 <memmove+0x1a>
 80072a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80072ac:	e7eb      	b.n	8007286 <memmove+0xc>

080072ae <_realloc_r>:
 80072ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b0:	4607      	mov	r7, r0
 80072b2:	4614      	mov	r4, r2
 80072b4:	460e      	mov	r6, r1
 80072b6:	b921      	cbnz	r1, 80072c2 <_realloc_r+0x14>
 80072b8:	4611      	mov	r1, r2
 80072ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072be:	f7ff bb17 	b.w	80068f0 <_malloc_r>
 80072c2:	b922      	cbnz	r2, 80072ce <_realloc_r+0x20>
 80072c4:	f7ff fac6 	bl	8006854 <_free_r>
 80072c8:	4625      	mov	r5, r4
 80072ca:	4628      	mov	r0, r5
 80072cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ce:	f000 f814 	bl	80072fa <_malloc_usable_size_r>
 80072d2:	4284      	cmp	r4, r0
 80072d4:	d90f      	bls.n	80072f6 <_realloc_r+0x48>
 80072d6:	4621      	mov	r1, r4
 80072d8:	4638      	mov	r0, r7
 80072da:	f7ff fb09 	bl	80068f0 <_malloc_r>
 80072de:	4605      	mov	r5, r0
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d0f2      	beq.n	80072ca <_realloc_r+0x1c>
 80072e4:	4631      	mov	r1, r6
 80072e6:	4622      	mov	r2, r4
 80072e8:	f7ff fa92 	bl	8006810 <memcpy>
 80072ec:	4631      	mov	r1, r6
 80072ee:	4638      	mov	r0, r7
 80072f0:	f7ff fab0 	bl	8006854 <_free_r>
 80072f4:	e7e9      	b.n	80072ca <_realloc_r+0x1c>
 80072f6:	4635      	mov	r5, r6
 80072f8:	e7e7      	b.n	80072ca <_realloc_r+0x1c>

080072fa <_malloc_usable_size_r>:
 80072fa:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80072fe:	2800      	cmp	r0, #0
 8007300:	f1a0 0004 	sub.w	r0, r0, #4
 8007304:	bfbc      	itt	lt
 8007306:	580b      	ldrlt	r3, [r1, r0]
 8007308:	18c0      	addlt	r0, r0, r3
 800730a:	4770      	bx	lr

0800730c <_sbrk>:
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <_sbrk+0x14>)
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	4602      	mov	r2, r0
 8007312:	b909      	cbnz	r1, 8007318 <_sbrk+0xc>
 8007314:	4903      	ldr	r1, [pc, #12]	; (8007324 <_sbrk+0x18>)
 8007316:	6019      	str	r1, [r3, #0]
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	4402      	add	r2, r0
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	4770      	bx	lr
 8007320:	20000324 	.word	0x20000324
 8007324:	20000604 	.word	0x20000604

08007328 <_init>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	bf00      	nop
 800732c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732e:	bc08      	pop	{r3}
 8007330:	469e      	mov	lr, r3
 8007332:	4770      	bx	lr

08007334 <_fini>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr
