
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007ae8  08007ae8  00017ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  20000000  08007d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
  8 .bss          000003dc  20000208  20000208  00020208  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200005e4  200005e4  00020208  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 11 .debug_info   00034bad  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004c7a  00000000  00000000  00054de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000103e0  00000000  00000000  00059a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  00069e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  0006b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022cdf  00000000  00000000  0006c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001485d  00000000  00000000  0008f2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b36fc  00000000  00000000  000a3b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00157200  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e0  00000000  00000000  0015727c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ad0 	.word	0x08007ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08007ad0 	.word	0x08007ad0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b99e 	b.w	8000ee4 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f82a 	bl	8000c08 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2ulz>:
 8000bc0:	b5d0      	push	{r4, r6, r7, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <__aeabi_d2ulz+0x40>)
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fd11 	bl	80005f0 <__aeabi_dmul>
 8000bce:	f7ff ffbf 	bl	8000b50 <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc96 	bl	8000504 <__aeabi_ui2d>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <__aeabi_d2ulz+0x44>)
 8000bdc:	f7ff fd08 	bl	80005f0 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff fb4e 	bl	8000288 <__aeabi_dsub>
 8000bec:	f7ff ffb0 	bl	8000b50 <__aeabi_d2uiz>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	ea42 0200 	orr.w	r2, r2, r0
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	9e08      	ldr	r6, [sp, #32]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d151      	bne.n	8000cbc <__udivmoddi4+0xb4>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d96d      	bls.n	8000cfa <__udivmoddi4+0xf2>
 8000c1e:	fab2 fe82 	clz	lr, r2
 8000c22:	f1be 0f00 	cmp.w	lr, #0
 8000c26:	d00b      	beq.n	8000c40 <__udivmoddi4+0x38>
 8000c28:	f1ce 0c20 	rsb	ip, lr, #32
 8000c2c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c34:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c38:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c3c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c40:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c44:	0c25      	lsrs	r5, r4, #16
 8000c46:	fbbc f8fa 	udiv	r8, ip, sl
 8000c4a:	fa1f f987 	uxth.w	r9, r7
 8000c4e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c52:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c56:	fb08 f309 	mul.w	r3, r8, r9
 8000c5a:	42ab      	cmp	r3, r5
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x6c>
 8000c5e:	19ed      	adds	r5, r5, r7
 8000c60:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c64:	f080 8123 	bcs.w	8000eae <__udivmoddi4+0x2a6>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f240 8120 	bls.w	8000eae <__udivmoddi4+0x2a6>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	443d      	add	r5, r7
 8000c74:	1aed      	subs	r5, r5, r3
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c7c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb00 f909 	mul.w	r9, r0, r9
 8000c88:	45a1      	cmp	r9, r4
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x98>
 8000c8c:	19e4      	adds	r4, r4, r7
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	f080 810a 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8107 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	443c      	add	r4, r7
 8000ca0:	eba4 0409 	sub.w	r4, r4, r9
 8000ca4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d061      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cae:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	6034      	str	r4, [r6, #0]
 8000cb6:	6073      	str	r3, [r6, #4]
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xc8>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d054      	beq.n	8000d6e <__udivmoddi4+0x166>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	f040 808e 	bne.w	8000df6 <__udivmoddi4+0x1ee>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xdc>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80fa 	bhi.w	8000ed8 <__udivmoddi4+0x2d0>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb65 0503 	sbc.w	r5, r5, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	46ac      	mov	ip, r5
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d03f      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cf2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	b912      	cbnz	r2, 8000d02 <__udivmoddi4+0xfa>
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d02:	fab7 fe87 	clz	lr, r7
 8000d06:	f1be 0f00 	cmp.w	lr, #0
 8000d0a:	d134      	bne.n	8000d76 <__udivmoddi4+0x16e>
 8000d0c:	1beb      	subs	r3, r5, r7
 8000d0e:	0c3a      	lsrs	r2, r7, #16
 8000d10:	fa1f fc87 	uxth.w	ip, r7
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d1a:	0c25      	lsrs	r5, r4, #16
 8000d1c:	fb02 3318 	mls	r3, r2, r8, r3
 8000d20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d24:	fb0c f308 	mul.w	r3, ip, r8
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x134>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x132>
 8000d34:	42ab      	cmp	r3, r5
 8000d36:	f200 80d1 	bhi.w	8000edc <__udivmoddi4+0x2d4>
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d44:	fb02 5510 	mls	r5, r2, r0, r5
 8000d48:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d4c:	fb0c fc00 	mul.w	ip, ip, r0
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x15c>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x15a>
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	f200 80b8 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 040c 	sub.w	r4, r4, ip
 8000d68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6c:	e79d      	b.n	8000caa <__udivmoddi4+0xa2>
 8000d6e:	4631      	mov	r1, r6
 8000d70:	4630      	mov	r0, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1ce 0420 	rsb	r4, lr, #32
 8000d7a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d82:	fa20 f804 	lsr.w	r8, r0, r4
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa25 f404 	lsr.w	r4, r5, r4
 8000d8c:	ea48 0803 	orr.w	r8, r8, r3
 8000d90:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d94:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d98:	fb02 4411 	mls	r4, r2, r1, r4
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000da4:	fb01 f30c 	mul.w	r3, r1, ip
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1bc>
 8000db0:	19ed      	adds	r5, r5, r7
 8000db2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db6:	f080 808a 	bcs.w	8000ece <__udivmoddi4+0x2c6>
 8000dba:	42ab      	cmp	r3, r5
 8000dbc:	f240 8087 	bls.w	8000ece <__udivmoddi4+0x2c6>
 8000dc0:	3902      	subs	r1, #2
 8000dc2:	443d      	add	r5, r7
 8000dc4:	1aeb      	subs	r3, r5, r3
 8000dc6:	fa1f f588 	uxth.w	r5, r8
 8000dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dce:	fb02 3310 	mls	r3, r2, r0, r3
 8000dd2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dd6:	fb00 f30c 	mul.w	r3, r0, ip
 8000dda:	42ab      	cmp	r3, r5
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1e6>
 8000dde:	19ed      	adds	r5, r5, r7
 8000de0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de4:	d26f      	bcs.n	8000ec6 <__udivmoddi4+0x2be>
 8000de6:	42ab      	cmp	r3, r5
 8000de8:	d96d      	bls.n	8000ec6 <__udivmoddi4+0x2be>
 8000dea:	3802      	subs	r0, #2
 8000dec:	443d      	add	r5, r7
 8000dee:	1aeb      	subs	r3, r5, r3
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	e78f      	b.n	8000d16 <__udivmoddi4+0x10e>
 8000df6:	f1c1 0720 	rsb	r7, r1, #32
 8000dfa:	fa22 f807 	lsr.w	r8, r2, r7
 8000dfe:	408b      	lsls	r3, r1
 8000e00:	fa05 f401 	lsl.w	r4, r5, r1
 8000e04:	ea48 0303 	orr.w	r3, r8, r3
 8000e08:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e16:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e1a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e1e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e22:	fa1f f883 	uxth.w	r8, r3
 8000e26:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e2a:	fb09 f408 	mul.w	r4, r9, r8
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	fa02 f201 	lsl.w	r2, r2, r1
 8000e34:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x244>
 8000e3a:	18ed      	adds	r5, r5, r3
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d243      	bcs.n	8000eca <__udivmoddi4+0x2c2>
 8000e42:	42ac      	cmp	r4, r5
 8000e44:	d941      	bls.n	8000eca <__udivmoddi4+0x2c2>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	441d      	add	r5, r3
 8000e4c:	1b2d      	subs	r5, r5, r4
 8000e4e:	fa1f fe8e 	uxth.w	lr, lr
 8000e52:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e56:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e5a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45a0      	cmp	r8, r4
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x26e>
 8000e66:	18e4      	adds	r4, r4, r3
 8000e68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e6c:	d229      	bcs.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e6e:	45a0      	cmp	r8, r4
 8000e70:	d927      	bls.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e72:	3802      	subs	r0, #2
 8000e74:	441c      	add	r4, r3
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba4 0408 	sub.w	r4, r4, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454c      	cmp	r4, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	464d      	mov	r5, r9
 8000e88:	d315      	bcc.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e8a:	d012      	beq.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e8c:	b156      	cbz	r6, 8000ea4 <__udivmoddi4+0x29c>
 8000e8e:	ebba 030e 	subs.w	r3, sl, lr
 8000e92:	eb64 0405 	sbc.w	r4, r4, r5
 8000e96:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9a:	40cb      	lsrs	r3, r1
 8000e9c:	431f      	orrs	r7, r3
 8000e9e:	40cc      	lsrs	r4, r1
 8000ea0:	6037      	str	r7, [r6, #0]
 8000ea2:	6074      	str	r4, [r6, #4]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e6f8      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000eae:	4690      	mov	r8, r2
 8000eb0:	e6e0      	b.n	8000c74 <__udivmoddi4+0x6c>
 8000eb2:	45c2      	cmp	sl, r8
 8000eb4:	d2ea      	bcs.n	8000e8c <__udivmoddi4+0x284>
 8000eb6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eba:	eb69 0503 	sbc.w	r5, r9, r3
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7e4      	b.n	8000e8c <__udivmoddi4+0x284>
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	e7d7      	b.n	8000e76 <__udivmoddi4+0x26e>
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	e791      	b.n	8000dee <__udivmoddi4+0x1e6>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e7be      	b.n	8000e4c <__udivmoddi4+0x244>
 8000ece:	4601      	mov	r1, r0
 8000ed0:	e778      	b.n	8000dc4 <__udivmoddi4+0x1bc>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	e745      	b.n	8000d64 <__udivmoddi4+0x15c>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xe6>
 8000edc:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee0:	443d      	add	r5, r7
 8000ee2:	e72b      	b.n	8000d3c <__udivmoddi4+0x134>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b510      	push	{r4, lr}
 8000eea:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_InitTick+0x24>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_InitTick+0x28>)
 8000ef2:	fba3 3000 	umull	r3, r0, r3, r0
 8000ef6:	0980      	lsrs	r0, r0, #6
 8000ef8:	f000 fbd8 	bl	80016ac <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	4621      	mov	r1, r4
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fb94 	bl	8001630 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	10624dd3 	.word	0x10624dd3

08000f14 <HAL_Init>:
{
 8000f14:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x20>)
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fb73 	bl	800160c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_InitTick>
  HAL_MspInit();
 8000f2c:	f004 f902 	bl	8005134 <HAL_MspInit>
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	bd08      	pop	{r3, pc}
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_IncTick+0xc>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200002f0 	.word	0x200002f0

08000f48 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200002f0 	.word	0x200002f0

08000f54 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000f54:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f56:	6802      	ldr	r2, [r0, #0]
 8000f58:	6893      	ldr	r3, [r2, #8]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d011      	beq.n	8000f86 <ADC_Disable+0x32>
 8000f62:	2300      	movs	r3, #0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d037      	beq.n	8000fd8 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f68:	6893      	ldr	r3, [r2, #8]
 8000f6a:	f003 030d 	and.w	r3, r3, #13
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d011      	beq.n	8000f96 <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000f82:	2001      	movs	r0, #1
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f86:	6813      	ldr	r3, [r2, #0]
 8000f88:	f013 0f01 	tst.w	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <ADC_Disable+0x3e>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e7e8      	b.n	8000f64 <ADC_Disable+0x10>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e7e6      	b.n	8000f64 <ADC_Disable+0x10>
 8000f96:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000f98:	6893      	ldr	r3, [r2, #8]
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	6093      	str	r3, [r2, #8]
 8000fa0:	6803      	ldr	r3, [r0, #0]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000fa6:	f7ff ffcf 	bl	8000f48 <HAL_GetTick>
 8000faa:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f013 0f01 	tst.w	r3, #1
 8000fb4:	d00e      	beq.n	8000fd4 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fb6:	f7ff ffc7 	bl	8000f48 <HAL_GetTick>
 8000fba:	1b40      	subs	r0, r0, r5
 8000fbc:	2802      	cmp	r0, #2
 8000fbe:	d9f5      	bls.n	8000fac <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	2000      	movs	r0, #0
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}

08000fdc <HAL_ADC_Init>:
{
 8000fdc:	b530      	push	{r4, r5, lr}
 8000fde:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	f000 80fb 	beq.w	80011e0 <HAL_ADC_Init+0x204>
 8000fea:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fee:	f013 0f10 	tst.w	r3, #16
 8000ff2:	d151      	bne.n	8001098 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000ff6:	b1ab      	cbz	r3, 8001024 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff8:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001002:	d003      	beq.n	800100c <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001004:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001006:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800100a:	d046      	beq.n	800109a <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 800100c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800100e:	f023 0312 	bic.w	r3, r3, #18
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001018:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001020:	2001      	movs	r0, #1
 8001022:	e03a      	b.n	800109a <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8001024:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8001026:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8001028:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800102a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800102e:	f004 f8bf 	bl	80051b0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800103a:	d001      	beq.n	8001040 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2000      	movs	r0, #0
 800103e:	e7dc      	b.n	8000ffa <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001040:	4620      	mov	r0, r4
 8001042:	f7ff ff87 	bl	8000f54 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001046:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001048:	f013 0f10 	tst.w	r3, #16
 800104c:	d1d5      	bne.n	8000ffa <HAL_ADC_Init+0x1e>
 800104e:	2800      	cmp	r0, #0
 8001050:	d1d3      	bne.n	8000ffa <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001052:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	6893      	ldr	r3, [r2, #8]
 8001066:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800106a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	6893      	ldr	r3, [r2, #8]
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001076:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <HAL_ADC_Init+0x208>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a5b      	ldr	r2, [pc, #364]	; (80011e8 <HAL_ADC_Init+0x20c>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	0c9b      	lsrs	r3, r3, #18
 8001082:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001086:	005a      	lsls	r2, r3, #1
 8001088:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800108a:	9b00      	ldr	r3, [sp, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0b4      	beq.n	8000ffa <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8001090:	9b00      	ldr	r3, [sp, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	e7f8      	b.n	800108a <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800109a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800109c:	f013 0f10 	tst.w	r3, #16
 80010a0:	f040 8095 	bne.w	80011ce <HAL_ADC_Init+0x1f2>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	f040 8092 	bne.w	80011ce <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010aa:	6822      	ldr	r2, [r4, #0]
 80010ac:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80010ae:	f013 0304 	ands.w	r3, r3, #4
 80010b2:	f040 808c 	bne.w	80011ce <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 80010b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80010b8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80010bc:	f041 0102 	orr.w	r1, r1, #2
 80010c0:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010c2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80010c6:	d055      	beq.n	8001174 <HAL_ADC_Init+0x198>
 80010c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80010cc:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010ce:	6891      	ldr	r1, [r2, #8]
 80010d0:	f001 0103 	and.w	r1, r1, #3
 80010d4:	2901      	cmp	r1, #1
 80010d6:	d050      	beq.n	800117a <HAL_ADC_Init+0x19e>
 80010d8:	2200      	movs	r2, #0
 80010da:	b972      	cbnz	r2, 80010fa <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010dc:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010de:	b12d      	cbz	r5, 80010ec <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80010e0:	68a9      	ldr	r1, [r5, #8]
 80010e2:	f001 0103 	and.w	r1, r1, #3
 80010e6:	2901      	cmp	r1, #1
 80010e8:	d04f      	beq.n	800118a <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010ea:	b932      	cbnz	r2, 80010fa <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010ec:	493f      	ldr	r1, [pc, #252]	; (80011ec <HAL_ADC_Init+0x210>)
 80010ee:	688a      	ldr	r2, [r1, #8]
 80010f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80010f4:	6865      	ldr	r5, [r4, #4]
 80010f6:	432a      	orrs	r2, r5
 80010f8:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80010fa:	69e2      	ldr	r2, [r4, #28]
 80010fc:	0351      	lsls	r1, r2, #13
 80010fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001100:	2d01      	cmp	r5, #1
 8001102:	d001      	beq.n	8001108 <HAL_ADC_Init+0x12c>
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	430b      	orrs	r3, r1
 800110a:	68e1      	ldr	r1, [r4, #12]
 800110c:	430b      	orrs	r3, r1
 800110e:	68a1      	ldr	r1, [r4, #8]
 8001110:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001112:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001114:	2901      	cmp	r1, #1
 8001116:	d03e      	beq.n	8001196 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001118:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800111a:	2a01      	cmp	r2, #1
 800111c:	d002      	beq.n	8001124 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800111e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001120:	430a      	orrs	r2, r1
 8001122:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001124:	6822      	ldr	r2, [r4, #0]
 8001126:	6891      	ldr	r1, [r2, #8]
 8001128:	f011 0f0c 	tst.w	r1, #12
 800112c:	d10b      	bne.n	8001146 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800112e:	68d1      	ldr	r1, [r2, #12]
 8001130:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001134:	f021 0102 	bic.w	r1, r1, #2
 8001138:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800113a:	69a1      	ldr	r1, [r4, #24]
 800113c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800113e:	0052      	lsls	r2, r2, #1
 8001140:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001144:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001146:	6821      	ldr	r1, [r4, #0]
 8001148:	68cd      	ldr	r5, [r1, #12]
 800114a:	4a29      	ldr	r2, [pc, #164]	; (80011f0 <HAL_ADC_Init+0x214>)
 800114c:	402a      	ands	r2, r5
 800114e:	4313      	orrs	r3, r2
 8001150:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001152:	6923      	ldr	r3, [r4, #16]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d031      	beq.n	80011bc <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800115c:	f023 030f 	bic.w	r3, r3, #15
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001162:	2300      	movs	r3, #0
 8001164:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8001166:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001168:	f023 0303 	bic.w	r3, r3, #3
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6463      	str	r3, [r4, #68]	; 0x44
 8001172:	e033      	b.n	80011dc <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001174:	491f      	ldr	r1, [pc, #124]	; (80011f4 <HAL_ADC_Init+0x218>)
 8001176:	9101      	str	r1, [sp, #4]
 8001178:	e7a9      	b.n	80010ce <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	f012 0f01 	tst.w	r2, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Init+0x1aa>
 8001182:	2200      	movs	r2, #0
 8001184:	e7a9      	b.n	80010da <HAL_ADC_Init+0xfe>
 8001186:	2201      	movs	r2, #1
 8001188:	e7a7      	b.n	80010da <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800118a:	6829      	ldr	r1, [r5, #0]
 800118c:	f011 0f01 	tst.w	r1, #1
 8001190:	d0ab      	beq.n	80010ea <HAL_ADC_Init+0x10e>
 8001192:	2201      	movs	r2, #1
 8001194:	e7a9      	b.n	80010ea <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001196:	b932      	cbnz	r2, 80011a6 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001198:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800119a:	3a01      	subs	r2, #1
 800119c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	e7b8      	b.n	8001118 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 80011a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80011a8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80011ac:	f042 0220 	orr.w	r2, r2, #32
 80011b0:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80011b4:	f042 0201 	orr.w	r2, r2, #1
 80011b8:	64a2      	str	r2, [r4, #72]	; 0x48
 80011ba:	e7ad      	b.n	8001118 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011bc:	6821      	ldr	r1, [r4, #0]
 80011be:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011c0:	f023 030f 	bic.w	r3, r3, #15
 80011c4:	6a22      	ldr	r2, [r4, #32]
 80011c6:	3a01      	subs	r2, #1
 80011c8:	4313      	orrs	r3, r2
 80011ca:	630b      	str	r3, [r1, #48]	; 0x30
 80011cc:	e7c9      	b.n	8001162 <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 80011ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011d0:	f023 0312 	bic.w	r3, r3, #18
 80011d4:	f043 0310 	orr.w	r3, r3, #16
 80011d8:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 80011da:	2001      	movs	r0, #1
}
 80011dc:	b017      	add	sp, #92	; 0x5c
 80011de:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80011e0:	2001      	movs	r0, #1
 80011e2:	e7fb      	b.n	80011dc <HAL_ADC_Init+0x200>
 80011e4:	20000000 	.word	0x20000000
 80011e8:	431bde83 	.word	0x431bde83
 80011ec:	50000300 	.word	0x50000300
 80011f0:	fff0c007 	.word	0xfff0c007
 80011f4:	50000100 	.word	0x50000100

080011f8 <HAL_ADCEx_Calibration_Start>:
{
 80011f8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80011fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <HAL_ADCEx_Calibration_Start+0x10>
 8001202:	2502      	movs	r5, #2
}
 8001204:	4628      	mov	r0, r5
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	460e      	mov	r6, r1
 800120a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800120c:	2301      	movs	r3, #1
 800120e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_Disable(hadc);
 8001212:	f7ff fe9f 	bl	8000f54 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8001216:	4605      	mov	r5, r0
 8001218:	2800      	cmp	r0, #0
 800121a:	d130      	bne.n	800127e <HAL_ADCEx_Calibration_Start+0x86>
    hadc->State = HAL_ADC_STATE_READY;
 800121c:	2301      	movs	r3, #1
 800121e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001220:	6822      	ldr	r2, [r4, #0]
 8001222:	6893      	ldr	r3, [r2, #8]
 8001224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001228:	6093      	str	r3, [r2, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800122a:	2e01      	cmp	r6, #1
 800122c:	d01b      	beq.n	8001266 <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800122e:	6822      	ldr	r2, [r4, #0]
 8001230:	6893      	ldr	r3, [r2, #8]
 8001232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001236:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001238:	f7ff fe86 	bl	8000f48 <HAL_GetTick>
 800123c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da15      	bge.n	8001272 <HAL_ADCEx_Calibration_Start+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001246:	f7ff fe7f 	bl	8000f48 <HAL_GetTick>
 800124a:	1b80      	subs	r0, r0, r6
 800124c:	280a      	cmp	r0, #10
 800124e:	d9f6      	bls.n	800123e <HAL_ADCEx_Calibration_Start+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8001250:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001252:	f023 0312 	bic.w	r3, r3, #18
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800125c:	2300      	movs	r3, #0
 800125e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001262:	2501      	movs	r5, #1
 8001264:	e7ce      	b.n	8001204 <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001266:	6822      	ldr	r2, [r4, #0]
 8001268:	6893      	ldr	r3, [r2, #8]
 800126a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800126e:	6093      	str	r3, [r2, #8]
 8001270:	e7dd      	b.n	800122e <HAL_ADCEx_Calibration_Start+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001274:	f023 0303 	bic.w	r3, r3, #3
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800127e:	2300      	movs	r3, #0
 8001280:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8001284:	e7be      	b.n	8001204 <HAL_ADCEx_Calibration_Start+0xc>
	...

08001288 <HAL_ADC_ConfigChannel>:
{
 8001288:	b470      	push	{r4, r5, r6}
 800128a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 800128c:	2200      	movs	r2, #0
 800128e:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 8001290:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001294:	2a01      	cmp	r2, #1
 8001296:	f000 81ad 	beq.w	80015f4 <HAL_ADC_ConfigChannel+0x36c>
 800129a:	4603      	mov	r3, r0
 800129c:	2201      	movs	r2, #1
 800129e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012a2:	6800      	ldr	r0, [r0, #0]
 80012a4:	6882      	ldr	r2, [r0, #8]
 80012a6:	f012 0f04 	tst.w	r2, #4
 80012aa:	f040 8196 	bne.w	80015da <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 80012ae:	684a      	ldr	r2, [r1, #4]
 80012b0:	2a04      	cmp	r2, #4
 80012b2:	d831      	bhi.n	8001318 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 80012b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80012ba:	0055      	lsls	r5, r2, #1
 80012bc:	221f      	movs	r2, #31
 80012be:	40aa      	lsls	r2, r5
 80012c0:	ea24 0202 	bic.w	r2, r4, r2
 80012c4:	680c      	ldr	r4, [r1, #0]
 80012c6:	40ac      	lsls	r4, r5
 80012c8:	4322      	orrs	r2, r4
 80012ca:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	6882      	ldr	r2, [r0, #8]
 80012d0:	f012 0f0c 	tst.w	r2, #12
 80012d4:	d168      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012d6:	680a      	ldr	r2, [r1, #0]
 80012d8:	2a09      	cmp	r2, #9
 80012da:	d94e      	bls.n	800137a <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012dc:	6984      	ldr	r4, [r0, #24]
 80012de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80012e2:	3a1e      	subs	r2, #30
 80012e4:	2507      	movs	r5, #7
 80012e6:	4095      	lsls	r5, r2
 80012e8:	ea24 0405 	bic.w	r4, r4, r5
 80012ec:	688d      	ldr	r5, [r1, #8]
 80012ee:	fa05 f202 	lsl.w	r2, r5, r2
 80012f2:	4322      	orrs	r2, r4
 80012f4:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012f6:	6948      	ldr	r0, [r1, #20]
 80012f8:	681c      	ldr	r4, [r3, #0]
 80012fa:	68e2      	ldr	r2, [r4, #12]
 80012fc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001300:	0052      	lsls	r2, r2, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8001306:	6908      	ldr	r0, [r1, #16]
 8001308:	3801      	subs	r0, #1
 800130a:	2803      	cmp	r0, #3
 800130c:	f200 808f 	bhi.w	800142e <HAL_ADC_ConfigChannel+0x1a6>
 8001310:	e8df f000 	tbb	[pc, r0]
 8001314:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8001318:	2a09      	cmp	r2, #9
 800131a:	d80e      	bhi.n	800133a <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800131c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800131e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001322:	0055      	lsls	r5, r2, #1
 8001324:	3d1e      	subs	r5, #30
 8001326:	221f      	movs	r2, #31
 8001328:	40aa      	lsls	r2, r5
 800132a:	ea24 0202 	bic.w	r2, r4, r2
 800132e:	680c      	ldr	r4, [r1, #0]
 8001330:	fa04 f505 	lsl.w	r5, r4, r5
 8001334:	432a      	orrs	r2, r5
 8001336:	6342      	str	r2, [r0, #52]	; 0x34
 8001338:	e7c8      	b.n	80012cc <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 800133a:	2a0e      	cmp	r2, #14
 800133c:	d80e      	bhi.n	800135c <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800133e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001340:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001344:	0055      	lsls	r5, r2, #1
 8001346:	3d3c      	subs	r5, #60	; 0x3c
 8001348:	221f      	movs	r2, #31
 800134a:	40aa      	lsls	r2, r5
 800134c:	ea24 0202 	bic.w	r2, r4, r2
 8001350:	680c      	ldr	r4, [r1, #0]
 8001352:	fa04 f505 	lsl.w	r5, r4, r5
 8001356:	432a      	orrs	r2, r5
 8001358:	6382      	str	r2, [r0, #56]	; 0x38
 800135a:	e7b7      	b.n	80012cc <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800135c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800135e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001362:	0055      	lsls	r5, r2, #1
 8001364:	3d5a      	subs	r5, #90	; 0x5a
 8001366:	221f      	movs	r2, #31
 8001368:	40aa      	lsls	r2, r5
 800136a:	ea24 0202 	bic.w	r2, r4, r2
 800136e:	680c      	ldr	r4, [r1, #0]
 8001370:	fa04 f505 	lsl.w	r5, r4, r5
 8001374:	432a      	orrs	r2, r5
 8001376:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001378:	e7a8      	b.n	80012cc <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800137a:	6944      	ldr	r4, [r0, #20]
 800137c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001380:	2507      	movs	r5, #7
 8001382:	4095      	lsls	r5, r2
 8001384:	ea24 0405 	bic.w	r4, r4, r5
 8001388:	688d      	ldr	r5, [r1, #8]
 800138a:	fa05 f202 	lsl.w	r2, r5, r2
 800138e:	4322      	orrs	r2, r4
 8001390:	6142      	str	r2, [r0, #20]
 8001392:	e7b0      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001394:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001396:	4d98      	ldr	r5, [pc, #608]	; (80015f8 <HAL_ADC_ConfigChannel+0x370>)
 8001398:	4005      	ands	r5, r0
 800139a:	6808      	ldr	r0, [r1, #0]
 800139c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80013a0:	4315      	orrs	r5, r2
 80013a2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80013a6:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	6882      	ldr	r2, [r0, #8]
 80013ac:	f002 0203 	and.w	r2, r2, #3
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d06f      	beq.n	8001494 <HAL_ADC_ConfigChannel+0x20c>
 80013b4:	2200      	movs	r2, #0
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	f040 811a 	bne.w	80015f0 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013bc:	68cc      	ldr	r4, [r1, #12]
 80013be:	2c01      	cmp	r4, #1
 80013c0:	d070      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013c2:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80013c6:	680e      	ldr	r6, [r1, #0]
 80013c8:	2501      	movs	r5, #1
 80013ca:	40b5      	lsls	r5, r6
 80013cc:	ea24 0405 	bic.w	r4, r4, r5
 80013d0:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013d4:	6809      	ldr	r1, [r1, #0]
 80013d6:	2910      	cmp	r1, #16
 80013d8:	f000 808d 	beq.w	80014f6 <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80013dc:	2911      	cmp	r1, #17
 80013de:	f000 80af 	beq.w	8001540 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80013e2:	2912      	cmp	r1, #18
 80013e4:	f000 80b2 	beq.w	800154c <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e8:	2000      	movs	r0, #0
 80013ea:	e0fb      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80013ee:	4d82      	ldr	r5, [pc, #520]	; (80015f8 <HAL_ADC_ConfigChannel+0x370>)
 80013f0:	4005      	ands	r5, r0
 80013f2:	6808      	ldr	r0, [r1, #0]
 80013f4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80013f8:	4315      	orrs	r5, r2
 80013fa:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80013fe:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001400:	e7d2      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001402:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001404:	4d7c      	ldr	r5, [pc, #496]	; (80015f8 <HAL_ADC_ConfigChannel+0x370>)
 8001406:	4005      	ands	r5, r0
 8001408:	6808      	ldr	r0, [r1, #0]
 800140a:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 800140e:	4315      	orrs	r5, r2
 8001410:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001414:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8001416:	e7c7      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001418:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800141a:	4877      	ldr	r0, [pc, #476]	; (80015f8 <HAL_ADC_ConfigChannel+0x370>)
 800141c:	4028      	ands	r0, r5
 800141e:	680d      	ldr	r5, [r1, #0]
 8001420:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001424:	4302      	orrs	r2, r0
 8001426:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800142a:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 800142c:	e7bc      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800142e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001430:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001434:	6808      	ldr	r0, [r1, #0]
 8001436:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 800143a:	d01c      	beq.n	8001476 <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001440:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001444:	680c      	ldr	r4, [r1, #0]
 8001446:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800144a:	d019      	beq.n	8001480 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001450:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001454:	680c      	ldr	r4, [r1, #0]
 8001456:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800145a:	d016      	beq.n	800148a <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001460:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001464:	680c      	ldr	r4, [r1, #0]
 8001466:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800146a:	d19d      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800146c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800146e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001472:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001474:	e798      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001476:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001478:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800147c:	6622      	str	r2, [r4, #96]	; 0x60
 800147e:	e7dd      	b.n	800143c <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001480:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001482:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001486:	6642      	str	r2, [r0, #100]	; 0x64
 8001488:	e7e0      	b.n	800144c <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800148a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800148c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001490:	6682      	str	r2, [r0, #104]	; 0x68
 8001492:	e7e3      	b.n	800145c <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001494:	6802      	ldr	r2, [r0, #0]
 8001496:	f012 0f01 	tst.w	r2, #1
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x218>
 800149c:	2200      	movs	r2, #0
 800149e:	e78a      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x12e>
 80014a0:	2201      	movs	r2, #1
 80014a2:	e788      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014a4:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80014a8:	680e      	ldr	r6, [r1, #0]
 80014aa:	2501      	movs	r5, #1
 80014ac:	40b5      	lsls	r5, r6
 80014ae:	432c      	orrs	r4, r5
 80014b0:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80014b4:	6808      	ldr	r0, [r1, #0]
 80014b6:	2809      	cmp	r0, #9
 80014b8:	d90e      	bls.n	80014d8 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 80014ba:	681e      	ldr	r6, [r3, #0]
 80014bc:	69b4      	ldr	r4, [r6, #24]
 80014be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80014c2:	381b      	subs	r0, #27
 80014c4:	2507      	movs	r5, #7
 80014c6:	4085      	lsls	r5, r0
 80014c8:	ea24 0405 	bic.w	r4, r4, r5
 80014cc:	688d      	ldr	r5, [r1, #8]
 80014ce:	fa05 f000 	lsl.w	r0, r5, r0
 80014d2:	4320      	orrs	r0, r4
 80014d4:	61b0      	str	r0, [r6, #24]
 80014d6:	e77d      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 80014d8:	681e      	ldr	r6, [r3, #0]
 80014da:	6974      	ldr	r4, [r6, #20]
 80014dc:	3001      	adds	r0, #1
 80014de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80014e2:	2507      	movs	r5, #7
 80014e4:	4085      	lsls	r5, r0
 80014e6:	ea24 0405 	bic.w	r4, r4, r5
 80014ea:	688d      	ldr	r5, [r1, #8]
 80014ec:	fa05 f000 	lsl.w	r0, r5, r0
 80014f0:	4320      	orrs	r0, r4
 80014f2:	6170      	str	r0, [r6, #20]
 80014f4:	e76e      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014f6:	4841      	ldr	r0, [pc, #260]	; (80015fc <HAL_ADC_ConfigChannel+0x374>)
 80014f8:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014fa:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80014fe:	f47f af6d 	bne.w	80013dc <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001502:	681c      	ldr	r4, [r3, #0]
 8001504:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001508:	d027      	beq.n	800155a <HAL_ADC_ConfigChannel+0x2d2>
 800150a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800150e:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001510:	68a0      	ldr	r0, [r4, #8]
 8001512:	f000 0003 	and.w	r0, r0, #3
 8001516:	2801      	cmp	r0, #1
 8001518:	d022      	beq.n	8001560 <HAL_ADC_ConfigChannel+0x2d8>
 800151a:	2a00      	cmp	r2, #0
 800151c:	d157      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800151e:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001520:	b135      	cbz	r5, 8001530 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001522:	68a8      	ldr	r0, [r5, #8]
 8001524:	f000 0003 	and.w	r0, r0, #3
 8001528:	2801      	cmp	r0, #1
 800152a:	d01f      	beq.n	800156c <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800152c:	2a00      	cmp	r2, #0
 800152e:	d14e      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001530:	2910      	cmp	r1, #16
 8001532:	d021      	beq.n	8001578 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001534:	2911      	cmp	r1, #17
 8001536:	d039      	beq.n	80015ac <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001538:	2912      	cmp	r1, #18
 800153a:	d041      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2000      	movs	r0, #0
 800153e:	e051      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001540:	482e      	ldr	r0, [pc, #184]	; (80015fc <HAL_ADC_ConfigChannel+0x374>)
 8001542:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001544:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001548:	d0db      	beq.n	8001502 <HAL_ADC_ConfigChannel+0x27a>
 800154a:	e74a      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800154c:	482b      	ldr	r0, [pc, #172]	; (80015fc <HAL_ADC_ConfigChannel+0x374>)
 800154e:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001550:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8001554:	d0d5      	beq.n	8001502 <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001556:	2000      	movs	r0, #0
 8001558:	e044      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800155a:	4829      	ldr	r0, [pc, #164]	; (8001600 <HAL_ADC_ConfigChannel+0x378>)
 800155c:	9001      	str	r0, [sp, #4]
 800155e:	e7d7      	b.n	8001510 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001560:	6820      	ldr	r0, [r4, #0]
 8001562:	f010 0f01 	tst.w	r0, #1
 8001566:	d0d8      	beq.n	800151a <HAL_ADC_ConfigChannel+0x292>
 8001568:	2201      	movs	r2, #1
 800156a:	e7d6      	b.n	800151a <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800156c:	6828      	ldr	r0, [r5, #0]
 800156e:	f010 0f01 	tst.w	r0, #1
 8001572:	d0db      	beq.n	800152c <HAL_ADC_ConfigChannel+0x2a4>
 8001574:	2201      	movs	r2, #1
 8001576:	e7d9      	b.n	800152c <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001578:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800157c:	d1da      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800157e:	491f      	ldr	r1, [pc, #124]	; (80015fc <HAL_ADC_ConfigChannel+0x374>)
 8001580:	688a      	ldr	r2, [r1, #8]
 8001582:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001586:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_ADC_ConfigChannel+0x37c>)
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	491e      	ldr	r1, [pc, #120]	; (8001608 <HAL_ADC_ConfigChannel+0x380>)
 800158e:	fbb2 f1f1 	udiv	r1, r2, r1
 8001592:	220a      	movs	r2, #10
 8001594:	fb02 f201 	mul.w	r2, r2, r1
 8001598:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800159a:	e002      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 800159c:	9a00      	ldr	r2, [sp, #0]
 800159e:	3a01      	subs	r2, #1
 80015a0:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80015a2:	9a00      	ldr	r2, [sp, #0]
 80015a4:	2a00      	cmp	r2, #0
 80015a6:	d1f9      	bne.n	800159c <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	2000      	movs	r0, #0
 80015aa:	e01b      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015ac:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80015b0:	d1c2      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015b2:	4912      	ldr	r1, [pc, #72]	; (80015fc <HAL_ADC_ConfigChannel+0x374>)
 80015b4:	688a      	ldr	r2, [r1, #8]
 80015b6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80015ba:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015be:	e011      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <HAL_ADC_ConfigChannel+0x374>)
 80015c2:	688a      	ldr	r2, [r1, #8]
 80015c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80015c8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ca:	2000      	movs	r0, #0
 80015cc:	e00a      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015d0:	f042 0220 	orr.w	r2, r2, #32
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
 80015d8:	e004      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80015ea:	b017      	add	sp, #92	; 0x5c
 80015ec:	bc70      	pop	{r4, r5, r6}
 80015ee:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f0:	2000      	movs	r0, #0
 80015f2:	e7f7      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 80015f4:	2002      	movs	r0, #2
 80015f6:	e7f8      	b.n	80015ea <HAL_ADC_ConfigChannel+0x362>
 80015f8:	83fff000 	.word	0x83fff000
 80015fc:	50000300 	.word	0x50000300
 8001600:	50000100 	.word	0x50000100
 8001604:	20000000 	.word	0x20000000
 8001608:	000f4240 	.word	0x000f4240

0800160c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800160e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001610:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001618:	0200      	lsls	r0, r0, #8
 800161a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001620:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001624:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001628:	60d0      	str	r0, [r2, #12]
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_NVIC_SetPriority+0x5c>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163a:	f1c3 0407 	rsb	r4, r3, #7
 800163e:	2c04      	cmp	r4, #4
 8001640:	bf28      	it	cs
 8001642:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001644:	1d1d      	adds	r5, r3, #4
 8001646:	2d06      	cmp	r5, #6
 8001648:	d917      	bls.n	800167a <HAL_NVIC_SetPriority+0x4a>
 800164a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	2501      	movs	r5, #1
 800164e:	fa05 f404 	lsl.w	r4, r5, r4
 8001652:	3c01      	subs	r4, #1
 8001654:	4021      	ands	r1, r4
 8001656:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	fa05 f303 	lsl.w	r3, r5, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001662:	2800      	cmp	r0, #0
 8001664:	db0b      	blt.n	800167e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	0109      	lsls	r1, r1, #4
 8001668:	b2c9      	uxtb	r1, r1
 800166a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800166e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001672:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001676:	bc30      	pop	{r4, r5}
 8001678:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	2300      	movs	r3, #0
 800167c:	e7e6      	b.n	800164c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	f000 000f 	and.w	r0, r0, #15
 8001682:	0109      	lsls	r1, r1, #4
 8001684:	b2c9      	uxtb	r1, r1
 8001686:	4b02      	ldr	r3, [pc, #8]	; (8001690 <HAL_NVIC_SetPriority+0x60>)
 8001688:	5419      	strb	r1, [r3, r0]
 800168a:	e7f4      	b.n	8001676 <HAL_NVIC_SetPriority+0x46>
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	e000ed14 	.word	0xe000ed14

08001694 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001694:	0942      	lsrs	r2, r0, #5
 8001696:	f000 001f 	and.w	r0, r0, #31
 800169a:	2301      	movs	r3, #1
 800169c:	fa03 f000 	lsl.w	r0, r3, r0
 80016a0:	4b01      	ldr	r3, [pc, #4]	; (80016a8 <HAL_NVIC_EnableIRQ+0x14>)
 80016a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100

080016ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	3801      	subs	r0, #1
 80016ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016b2:	d20a      	bcs.n	80016ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_SYSTICK_Config+0x24>)
 80016b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	21f0      	movs	r1, #240	; 0xf0
 80016ba:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_SYSTICK_Config+0x28>)
 80016bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	2000      	movs	r0, #0
 80016c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80016d8:	2804      	cmp	r0, #4
 80016da:	d005      	beq.n	80016e8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016e8:	4a02      	ldr	r2, [pc, #8]	; (80016f4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80016ea:	6813      	ldr	r3, [r2, #0]
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4770      	bx	lr
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016f8:	4770      	bx	lr

080016fa <HAL_SYSTICK_IRQHandler>:
{
 80016fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80016fc:	f7ff fffc 	bl	80016f8 <HAL_SYSTICK_Callback>
 8001700:	bd08      	pop	{r3, pc}
	...

08001704 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001704:	6802      	ldr	r2, [r0, #0]
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <DMA_CalcBaseAndBitshift+0x18>)
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <DMA_CalcBaseAndBitshift+0x1c>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <DMA_CalcBaseAndBitshift+0x20>)
 8001718:	63c3      	str	r3, [r0, #60]	; 0x3c
 800171a:	4770      	bx	lr
 800171c:	bffdfff8 	.word	0xbffdfff8
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_DMA_Init>:
  if(NULL == hdma)
 8001728:	b340      	cbz	r0, 800177c <HAL_DMA_Init+0x54>
{ 
 800172a:	b510      	push	{r4, lr}
 800172c:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800172e:	2302      	movs	r3, #2
 8001730:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001734:	6801      	ldr	r1, [r0, #0]
 8001736:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001738:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800173c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001740:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001742:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8001744:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001746:	68e0      	ldr	r0, [r4, #12]
 8001748:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174e:	6960      	ldr	r0, [r4, #20]
 8001750:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001752:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001754:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001756:	69e0      	ldr	r0, [r4, #28]
 8001758:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800175a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 800175c:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ffd0 	bl	8001704 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8001764:	2000      	movs	r0, #0
 8001766:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001768:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800176a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800176c:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001770:	2301      	movs	r3, #1
 8001772:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001776:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 800177a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	4770      	bx	lr

08001780 <HAL_DMA_Abort_IT>:
{  
 8001780:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001782:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001786:	2b02      	cmp	r3, #2
 8001788:	d003      	beq.n	8001792 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178a:	2304      	movs	r3, #4
 800178c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800178e:	2001      	movs	r0, #1
 8001790:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001792:	6802      	ldr	r2, [r0, #0]
 8001794:	6813      	ldr	r3, [r2, #0]
 8001796:	f023 030e 	bic.w	r3, r3, #14
 800179a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800179c:	6802      	ldr	r2, [r0, #0]
 800179e:	6813      	ldr	r3, [r2, #0]
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80017a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017aa:	2201      	movs	r2, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80017b2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80017b6:	2300      	movs	r3, #0
 80017b8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80017bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017be:	b113      	cbz	r3, 80017c6 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80017c0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80017c2:	2000      	movs	r0, #0
 80017c4:	bd08      	pop	{r3, pc}
 80017c6:	2000      	movs	r0, #0
}
 80017c8:	bd08      	pop	{r3, pc}

080017ca <HAL_DMA_IRQHandler>:
{
 80017ca:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80017ce:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80017d0:	6804      	ldr	r4, [r0, #0]
 80017d2:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017d6:	2304      	movs	r3, #4
 80017d8:	408b      	lsls	r3, r1
 80017da:	421a      	tst	r2, r3
 80017dc:	d014      	beq.n	8001808 <HAL_DMA_IRQHandler+0x3e>
 80017de:	f015 0f04 	tst.w	r5, #4
 80017e2:	d011      	beq.n	8001808 <HAL_DMA_IRQHandler+0x3e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	f013 0f20 	tst.w	r3, #32
 80017ea:	d103      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80017f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017f8:	2304      	movs	r3, #4
 80017fa:	408b      	lsls	r3, r1
 80017fc:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80017fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03a      	beq.n	800187a <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferHalfCpltCallback(hdma);
 8001804:	4798      	blx	r3
 8001806:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001808:	2302      	movs	r3, #2
 800180a:	408b      	lsls	r3, r1
 800180c:	421a      	tst	r2, r3
 800180e:	d019      	beq.n	8001844 <HAL_DMA_IRQHandler+0x7a>
 8001810:	f015 0f02 	tst.w	r5, #2
 8001814:	d016      	beq.n	8001844 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	f013 0f20 	tst.w	r3, #32
 800181c:	d106      	bne.n	800182c <HAL_DMA_IRQHandler+0x62>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	f023 030a 	bic.w	r3, r3, #10
 8001824:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001826:	2301      	movs	r3, #1
 8001828:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800182c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800182e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001830:	2302      	movs	r3, #2
 8001832:	408b      	lsls	r3, r1
 8001834:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001836:	2300      	movs	r3, #0
 8001838:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800183c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800183e:	b1e3      	cbz	r3, 800187a <HAL_DMA_IRQHandler+0xb0>
  		hdma->XferCpltCallback(hdma);
 8001840:	4798      	blx	r3
 8001842:	bd38      	pop	{r3, r4, r5, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001844:	2308      	movs	r3, #8
 8001846:	fa03 f101 	lsl.w	r1, r3, r1
 800184a:	420a      	tst	r2, r1
 800184c:	d015      	beq.n	800187a <HAL_DMA_IRQHandler+0xb0>
 800184e:	f015 0f08 	tst.w	r5, #8
 8001852:	d012      	beq.n	800187a <HAL_DMA_IRQHandler+0xb0>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	f023 030e 	bic.w	r3, r3, #14
 800185a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800185c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800185e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001860:	2301      	movs	r3, #1
 8001862:	fa03 f202 	lsl.w	r2, r3, r2
 8001866:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001868:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800186a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800186e:	2300      	movs	r3, #0
 8001870:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001874:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001876:	b103      	cbz	r3, 800187a <HAL_DMA_IRQHandler+0xb0>
    	hdma->XferErrorCallback(hdma);
 8001878:	4798      	blx	r3
 800187a:	bd38      	pop	{r3, r4, r5, pc}

0800187c <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800187c:	2200      	movs	r2, #0
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <FLASH_Program_HalfWord+0x14>)
 8001880:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <FLASH_Program_HalfWord+0x18>)
 8001884:	6913      	ldr	r3, [r2, #16]
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800188c:	8001      	strh	r1, [r0, #0]
 800188e:	4770      	bx	lr
 8001890:	200002f8 	.word	0x200002f8
 8001894:	40022000 	.word	0x40022000

08001898 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <FLASH_SetErrorCode+0x38>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f013 0f10 	tst.w	r3, #16
 80018a0:	d014      	beq.n	80018cc <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <FLASH_SetErrorCode+0x3c>)
 80018a4:	69d3      	ldr	r3, [r2, #28]
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80018ac:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <FLASH_SetErrorCode+0x38>)
 80018b0:	68d2      	ldr	r2, [r2, #12]
 80018b2:	f012 0f04 	tst.w	r2, #4
 80018b6:	d006      	beq.n	80018c6 <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80018b8:	4906      	ldr	r1, [pc, #24]	; (80018d4 <FLASH_SetErrorCode+0x3c>)
 80018ba:	69ca      	ldr	r2, [r1, #28]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 80018c2:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018c6:	4a02      	ldr	r2, [pc, #8]	; (80018d0 <FLASH_SetErrorCode+0x38>)
 80018c8:	60d3      	str	r3, [r2, #12]
 80018ca:	4770      	bx	lr
  uint32_t flags = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e7ee      	b.n	80018ae <FLASH_SetErrorCode+0x16>
 80018d0:	40022000 	.word	0x40022000
 80018d4:	200002f8 	.word	0x200002f8

080018d8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_FLASH_Unlock+0x20>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018e0:	d007      	beq.n	80018f2 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_FLASH_Unlock+0x20>)
 80018e4:	4a05      	ldr	r2, [pc, #20]	; (80018fc <HAL_FLASH_Unlock+0x24>)
 80018e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018e8:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80018ec:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80018ee:	2000      	movs	r0, #0
 80018f0:	4770      	bx	lr
    return HAL_ERROR;
 80018f2:	2001      	movs	r0, #1
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40022000 	.word	0x40022000
 80018fc:	45670123 	.word	0x45670123

08001900 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001900:	4a03      	ldr	r2, [pc, #12]	; (8001910 <HAL_FLASH_Lock+0x10>)
 8001902:	6913      	ldr	r3, [r2, #16]
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6113      	str	r3, [r2, #16]
}
 800190a:	2000      	movs	r0, #0
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40022000 	.word	0x40022000

08001914 <FLASH_WaitForLastOperation>:
{
 8001914:	b538      	push	{r3, r4, r5, lr}
 8001916:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff fb16 	bl	8000f48 <HAL_GetTick>
 800191c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <FLASH_WaitForLastOperation+0x60>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f013 0f01 	tst.w	r3, #1
 8001926:	d00a      	beq.n	800193e <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001928:	f1b4 3fff 	cmp.w	r4, #4294967295
 800192c:	d0f7      	beq.n	800191e <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800192e:	b1e4      	cbz	r4, 800196a <FLASH_WaitForLastOperation+0x56>
 8001930:	f7ff fb0a 	bl	8000f48 <HAL_GetTick>
 8001934:	1b40      	subs	r0, r0, r5
 8001936:	4284      	cmp	r4, r0
 8001938:	d2f1      	bcs.n	800191e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800193a:	2003      	movs	r0, #3
 800193c:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <FLASH_WaitForLastOperation+0x60>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f013 0f20 	tst.w	r3, #32
 8001946:	d002      	beq.n	800194e <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001948:	2220      	movs	r2, #32
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <FLASH_WaitForLastOperation+0x60>)
 800194c:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <FLASH_WaitForLastOperation+0x60>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f013 0f10 	tst.w	r3, #16
 8001956:	d104      	bne.n	8001962 <FLASH_WaitForLastOperation+0x4e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <FLASH_WaitForLastOperation+0x60>)
 800195a:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800195c:	f013 0f04 	tst.w	r3, #4
 8001960:	d005      	beq.n	800196e <FLASH_WaitForLastOperation+0x5a>
    FLASH_SetErrorCode();
 8001962:	f7ff ff99 	bl	8001898 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
 8001968:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 800196a:	2003      	movs	r0, #3
 800196c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800196e:	2000      	movs	r0, #0
}
 8001970:	bd38      	pop	{r3, r4, r5, pc}
 8001972:	bf00      	nop
 8001974:	40022000 	.word	0x40022000

08001978 <HAL_FLASH_Program>:
{
 8001978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800197c:	4c23      	ldr	r4, [pc, #140]	; (8001a0c <HAL_FLASH_Program+0x94>)
 800197e:	7e24      	ldrb	r4, [r4, #24]
 8001980:	2c01      	cmp	r4, #1
 8001982:	d103      	bne.n	800198c <HAL_FLASH_Program+0x14>
 8001984:	2302      	movs	r3, #2
}
 8001986:	4618      	mov	r0, r3
 8001988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800198c:	461e      	mov	r6, r3
 800198e:	4690      	mov	r8, r2
 8001990:	460f      	mov	r7, r1
 8001992:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001994:	2201      	movs	r2, #1
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_FLASH_Program+0x94>)
 8001998:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800199a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800199e:	f7ff ffb9 	bl	8001914 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80019a2:	4603      	mov	r3, r0
 80019a4:	bb70      	cbnz	r0, 8001a04 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019a6:	2c01      	cmp	r4, #1
 80019a8:	d029      	beq.n	80019fe <HAL_FLASH_Program+0x86>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80019aa:	2c02      	cmp	r4, #2
 80019ac:	d024      	beq.n	80019f8 <HAL_FLASH_Program+0x80>
      nbiterations = 4U;
 80019ae:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 80019b2:	2400      	movs	r4, #0
 80019b4:	454c      	cmp	r4, r9
 80019b6:	d225      	bcs.n	8001a04 <HAL_FLASH_Program+0x8c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80019b8:	0121      	lsls	r1, r4, #4
 80019ba:	f1c1 0220 	rsb	r2, r1, #32
 80019be:	f1a1 0320 	sub.w	r3, r1, #32
 80019c2:	fa28 f101 	lsr.w	r1, r8, r1
 80019c6:	fa06 f202 	lsl.w	r2, r6, r2
 80019ca:	4311      	orrs	r1, r2
 80019cc:	fa26 f303 	lsr.w	r3, r6, r3
 80019d0:	4319      	orrs	r1, r3
 80019d2:	b289      	uxth	r1, r1
 80019d4:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80019d8:	f7ff ff50 	bl	800187c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019e0:	f7ff ff98 	bl	8001914 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_FLASH_Program+0x98>)
 80019e6:	691d      	ldr	r5, [r3, #16]
 80019e8:	f025 0501 	bic.w	r5, r5, #1
 80019ec:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 80019ee:	4603      	mov	r3, r0
 80019f0:	b940      	cbnz	r0, 8001a04 <HAL_FLASH_Program+0x8c>
    for (index = 0U; index < nbiterations; index++)
 80019f2:	3401      	adds	r4, #1
 80019f4:	b2e4      	uxtb	r4, r4
 80019f6:	e7dd      	b.n	80019b4 <HAL_FLASH_Program+0x3c>
      nbiterations = 2U;
 80019f8:	f04f 0902 	mov.w	r9, #2
 80019fc:	e7d9      	b.n	80019b2 <HAL_FLASH_Program+0x3a>
      nbiterations = 1U;
 80019fe:	f04f 0901 	mov.w	r9, #1
 8001a02:	e7d6      	b.n	80019b2 <HAL_FLASH_Program+0x3a>
  __HAL_UNLOCK(&pFlash);
 8001a04:	2100      	movs	r1, #0
 8001a06:	4a01      	ldr	r2, [pc, #4]	; (8001a0c <HAL_FLASH_Program+0x94>)
 8001a08:	7611      	strb	r1, [r2, #24]
  return status;
 8001a0a:	e7bc      	b.n	8001986 <HAL_FLASH_Program+0xe>
 8001a0c:	200002f8 	.word	0x200002f8
 8001a10:	40022000 	.word	0x40022000

08001a14 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a14:	2200      	movs	r2, #0
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <FLASH_MassErase+0x1c>)
 8001a18:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <FLASH_MassErase+0x20>)
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	f042 0204 	orr.w	r2, r2, #4
 8001a22:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200002f8 	.word	0x200002f8
 8001a34:	40022000 	.word	0x40022000

08001a38 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <FLASH_PageErase+0x1c>)
 8001a3c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <FLASH_PageErase+0x20>)
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	f042 0202 	orr.w	r2, r2, #2
 8001a46:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001a48:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	4770      	bx	lr
 8001a54:	200002f8 	.word	0x200002f8
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_FLASHEx_Erase+0x9c>)
 8001a5e:	7e1b      	ldrb	r3, [r3, #24]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d045      	beq.n	8001af0 <HAL_FLASHEx_Erase+0x94>
{
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	460e      	mov	r6, r1
 8001a68:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_FLASHEx_Erase+0x9c>)
 8001a6e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a70:	6803      	ldr	r3, [r0, #0]
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d020      	beq.n	8001ab8 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a76:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a7a:	f7ff ff4b 	bl	8001914 <FLASH_WaitForLastOperation>
 8001a7e:	bb88      	cbnz	r0, 8001ae4 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001a86:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a88:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a8a:	68aa      	ldr	r2, [r5, #8]
 8001a8c:	686b      	ldr	r3, [r5, #4]
 8001a8e:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8001a92:	429c      	cmp	r4, r3
 8001a94:	d227      	bcs.n	8001ae6 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7ff ffce 	bl	8001a38 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aa0:	f7ff ff38 	bl	8001914 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001aa4:	4a15      	ldr	r2, [pc, #84]	; (8001afc <HAL_FLASHEx_Erase+0xa0>)
 8001aa6:	6913      	ldr	r3, [r2, #16]
 8001aa8:	f023 0302 	bic.w	r3, r3, #2
 8001aac:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001aae:	4601      	mov	r1, r0
 8001ab0:	b9b0      	cbnz	r0, 8001ae0 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8001ab2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8001ab6:	e7e8      	b.n	8001a8a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001ab8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001abc:	f7ff ff2a 	bl	8001914 <FLASH_WaitForLastOperation>
 8001ac0:	b108      	cbz	r0, 8001ac6 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	e00f      	b.n	8001ae6 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8001ac6:	f7ff ffa5 	bl	8001a14 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001aca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ace:	f7ff ff21 	bl	8001914 <FLASH_WaitForLastOperation>
 8001ad2:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001ad4:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_FLASHEx_Erase+0xa0>)
 8001ad6:	6913      	ldr	r3, [r2, #16]
 8001ad8:	f023 0304 	bic.w	r3, r3, #4
 8001adc:	6113      	str	r3, [r2, #16]
 8001ade:	e002      	b.n	8001ae6 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8001ae0:	6034      	str	r4, [r6, #0]
            break;
 8001ae2:	e000      	b.n	8001ae6 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ae4:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_FLASHEx_Erase+0x9c>)
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	4608      	mov	r0, r1
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001af0:	2102      	movs	r1, #2
}
 8001af2:	4608      	mov	r0, r1
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200002f8 	.word	0x200002f8
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b02:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001b04:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b06:	e088      	b.n	8001c1a <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b08:	08de      	lsrs	r6, r3, #3
 8001b0a:	3608      	adds	r6, #8
 8001b0c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b10:	f003 0e07 	and.w	lr, r3, #7
 8001b14:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001b18:	270f      	movs	r7, #15
 8001b1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8001b1e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b22:	690f      	ldr	r7, [r1, #16]
 8001b24:	fa07 f70e 	lsl.w	r7, r7, lr
 8001b28:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001b2a:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8001b2e:	e083      	b.n	8001c38 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b30:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b32:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b34:	68cf      	ldr	r7, [r1, #12]
 8001b36:	fa07 f70e 	lsl.w	r7, r7, lr
 8001b3a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001b3c:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b40:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b44:	684e      	ldr	r6, [r1, #4]
 8001b46:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001b4a:	409e      	lsls	r6, r3
 8001b4c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001b4e:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b50:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	688d      	ldr	r5, [r1, #8]
 8001b56:	fa05 f50e 	lsl.w	r5, r5, lr
 8001b5a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001b5c:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b5e:	684c      	ldr	r4, [r1, #4]
 8001b60:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001b64:	d058      	beq.n	8001c18 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4c47      	ldr	r4, [pc, #284]	; (8001c84 <HAL_GPIO_Init+0x184>)
 8001b68:	69a5      	ldr	r5, [r4, #24]
 8001b6a:	f045 0501 	orr.w	r5, r5, #1
 8001b6e:	61a5      	str	r5, [r4, #24]
 8001b70:	69a4      	ldr	r4, [r4, #24]
 8001b72:	f004 0401 	and.w	r4, r4, #1
 8001b76:	9401      	str	r4, [sp, #4]
 8001b78:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b7a:	089d      	lsrs	r5, r3, #2
 8001b7c:	1cae      	adds	r6, r5, #2
 8001b7e:	4c42      	ldr	r4, [pc, #264]	; (8001c88 <HAL_GPIO_Init+0x188>)
 8001b80:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b84:	f003 0603 	and.w	r6, r3, #3
 8001b88:	00b6      	lsls	r6, r6, #2
 8001b8a:	270f      	movs	r7, #15
 8001b8c:	40b7      	lsls	r7, r6
 8001b8e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b92:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001b96:	d06c      	beq.n	8001c72 <HAL_GPIO_Init+0x172>
 8001b98:	4f3c      	ldr	r7, [pc, #240]	; (8001c8c <HAL_GPIO_Init+0x18c>)
 8001b9a:	42b8      	cmp	r0, r7
 8001b9c:	d06b      	beq.n	8001c76 <HAL_GPIO_Init+0x176>
 8001b9e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001ba2:	42b8      	cmp	r0, r7
 8001ba4:	d069      	beq.n	8001c7a <HAL_GPIO_Init+0x17a>
 8001ba6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001baa:	42b8      	cmp	r0, r7
 8001bac:	d05f      	beq.n	8001c6e <HAL_GPIO_Init+0x16e>
 8001bae:	2705      	movs	r7, #5
 8001bb0:	fa07 f606 	lsl.w	r6, r7, r6
 8001bb4:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bb6:	3502      	adds	r5, #2
 8001bb8:	4e33      	ldr	r6, [pc, #204]	; (8001c88 <HAL_GPIO_Init+0x188>)
 8001bba:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbe:	4c34      	ldr	r4, [pc, #208]	; (8001c90 <HAL_GPIO_Init+0x190>)
 8001bc0:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	43d4      	mvns	r4, r2
 8001bc4:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc8:	684f      	ldr	r7, [r1, #4]
 8001bca:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001bce:	d001      	beq.n	8001bd4 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001bd0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001bd4:	4d2e      	ldr	r5, [pc, #184]	; (8001c90 <HAL_GPIO_Init+0x190>)
 8001bd6:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001bd8:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bde:	684f      	ldr	r7, [r1, #4]
 8001be0:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001be4:	d001      	beq.n	8001bea <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001be6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001bea:	4d29      	ldr	r5, [pc, #164]	; (8001c90 <HAL_GPIO_Init+0x190>)
 8001bec:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bee:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf4:	684f      	ldr	r7, [r1, #4]
 8001bf6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001bfa:	d001      	beq.n	8001c00 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8001bfc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001c00:	4d23      	ldr	r5, [pc, #140]	; (8001c90 <HAL_GPIO_Init+0x190>)
 8001c02:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001c04:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c08:	684e      	ldr	r6, [r1, #4]
 8001c0a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001c0e:	d001      	beq.n	8001c14 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8001c10:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001c14:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <HAL_GPIO_Init+0x190>)
 8001c16:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001c18:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c1a:	680a      	ldr	r2, [r1, #0]
 8001c1c:	fa32 f403 	lsrs.w	r4, r2, r3
 8001c20:	d02d      	beq.n	8001c7e <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c22:	2501      	movs	r5, #1
 8001c24:	409d      	lsls	r5, r3
    if(iocurrent)
 8001c26:	402a      	ands	r2, r5
 8001c28:	d0f6      	beq.n	8001c18 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2a:	684c      	ldr	r4, [r1, #4]
 8001c2c:	2c02      	cmp	r4, #2
 8001c2e:	f43f af6b 	beq.w	8001b08 <HAL_GPIO_Init+0x8>
 8001c32:	2c12      	cmp	r4, #18
 8001c34:	f43f af68 	beq.w	8001b08 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001c38:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001c3e:	2403      	movs	r4, #3
 8001c40:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c44:	43e4      	mvns	r4, r4
 8001c46:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c48:	684f      	ldr	r7, [r1, #4]
 8001c4a:	f007 0703 	and.w	r7, r7, #3
 8001c4e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001c52:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001c54:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c56:	684e      	ldr	r6, [r1, #4]
 8001c58:	1e77      	subs	r7, r6, #1
 8001c5a:	2f01      	cmp	r7, #1
 8001c5c:	f67f af68 	bls.w	8001b30 <HAL_GPIO_Init+0x30>
 8001c60:	2e11      	cmp	r6, #17
 8001c62:	f43f af65 	beq.w	8001b30 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c66:	2e12      	cmp	r6, #18
 8001c68:	f47f af72 	bne.w	8001b50 <HAL_GPIO_Init+0x50>
 8001c6c:	e760      	b.n	8001b30 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c6e:	2703      	movs	r7, #3
 8001c70:	e79e      	b.n	8001bb0 <HAL_GPIO_Init+0xb0>
 8001c72:	2700      	movs	r7, #0
 8001c74:	e79c      	b.n	8001bb0 <HAL_GPIO_Init+0xb0>
 8001c76:	2701      	movs	r7, #1
 8001c78:	e79a      	b.n	8001bb0 <HAL_GPIO_Init+0xb0>
 8001c7a:	2702      	movs	r7, #2
 8001c7c:	e798      	b.n	8001bb0 <HAL_GPIO_Init+0xb0>
  }
}
 8001c7e:	b003      	add	sp, #12
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	40010400 	.word	0x40010400

08001c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c94:	b90a      	cbnz	r2, 8001c9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	6281      	str	r1, [r0, #40]	; 0x28
 8001c98:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c9a:	6181      	str	r1, [r0, #24]
 8001c9c:	4770      	bx	lr

08001c9e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001ca0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4203      	tst	r3, r0
 8001ca8:	d100      	bne.n	8001cac <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001caa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001cae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cb0:	f7ff fff5 	bl	8001c9e <HAL_GPIO_EXTI_Callback>
}
 8001cb4:	e7f9      	b.n	8001caa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001cb6:	bf00      	nop
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d059      	beq.n	8001d74 <HAL_I2C_Init+0xb8>
{
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d043      	beq.n	8001d54 <HAL_I2C_Init+0x98>

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ccc:	2324      	movs	r3, #36	; 0x24
 8001cce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd2:	6822      	ldr	r2, [r4, #0]
 8001cd4:	6813      	ldr	r3, [r2, #0]
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cdc:	6822      	ldr	r2, [r4, #0]
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001ce4:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce6:	6822      	ldr	r2, [r4, #0]
 8001ce8:	6893      	ldr	r3, [r2, #8]
 8001cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001cee:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf0:	68e3      	ldr	r3, [r4, #12]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d033      	beq.n	8001d5e <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf6:	6822      	ldr	r2, [r4, #0]
 8001cf8:	68a3      	ldr	r3, [r4, #8]
 8001cfa:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001cfe:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d00:	68e3      	ldr	r3, [r4, #12]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d031      	beq.n	8001d6a <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	6853      	ldr	r3, [r2, #4]
 8001d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d12:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	68d3      	ldr	r3, [r2, #12]
 8001d18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d1c:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d1e:	6822      	ldr	r2, [r4, #0]
 8001d20:	6923      	ldr	r3, [r4, #16]
 8001d22:	6961      	ldr	r1, [r4, #20]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	69a1      	ldr	r1, [r4, #24]
 8001d28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d2c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	69e3      	ldr	r3, [r4, #28]
 8001d32:	6a21      	ldr	r1, [r4, #32]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d38:	6822      	ldr	r2, [r4, #0]
 8001d3a:	6813      	ldr	r3, [r2, #0]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d42:	2000      	movs	r0, #0
 8001d44:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	2320      	movs	r3, #32
 8001d48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001d52:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d58:	f003 fa7a 	bl	8005250 <HAL_I2C_MspInit>
 8001d5c:	e7b6      	b.n	8001ccc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	68a3      	ldr	r3, [r4, #8]
 8001d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d66:	6093      	str	r3, [r2, #8]
 8001d68:	e7ca      	b.n	8001d00 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	e7c8      	b.n	8001d06 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001d74:	2001      	movs	r0, #1
 8001d76:	4770      	bx	lr

08001d78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d78:	b508      	push	{r3, lr}
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d7a:	6803      	ldr	r3, [r0, #0]
 8001d7c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d7e:	681a      	ldr	r2, [r3, #0]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001d80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d82:	b103      	cbz	r3, 8001d86 <HAL_I2C_EV_IRQHandler+0xe>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001d84:	4798      	blx	r3
 8001d86:	bd08      	pop	{r3, pc}

08001d88 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d001      	beq.n	8001d96 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001d92:	2002      	movs	r0, #2
 8001d94:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001d96:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d020      	beq.n	8001de0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001da4:	2324      	movs	r3, #36	; 0x24
 8001da6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001daa:	6802      	ldr	r2, [r0, #0]
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dbc:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dbe:	6802      	ldr	r2, [r0, #0]
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	4319      	orrs	r1, r3
 8001dc4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001dc6:	6802      	ldr	r2, [r0, #0]
 8001dc8:	6813      	ldr	r3, [r2, #0]
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001de0:	2002      	movs	r0, #2
  }
}
 8001de2:	4770      	bx	lr

08001de4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d001      	beq.n	8001df2 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001dee:	2002      	movs	r0, #2
 8001df0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001df2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d01e      	beq.n	8001e38 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e00:	2324      	movs	r3, #36	; 0x24
 8001e02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001e06:	6802      	ldr	r2, [r0, #0]
 8001e08:	6813      	ldr	r3, [r2, #0]
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001e10:	6802      	ldr	r2, [r0, #0]
 8001e12:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001e14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001e18:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001e1c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001e1e:	6802      	ldr	r2, [r0, #0]
 8001e20:	6813      	ldr	r3, [r2, #0]
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001e34:	4618      	mov	r0, r3
 8001e36:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001e38:	2002      	movs	r0, #2
  }
}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001e3c:	4a02      	ldr	r2, [pc, #8]	; (8001e48 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001e3e:	6813      	ldr	r3, [r2, #0]
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4770      	bx	lr
 8001e48:	40007000 	.word	0x40007000

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	6803      	ldr	r3, [r0, #0]
 8001e54:	f013 0f01 	tst.w	r3, #1
 8001e58:	d063      	beq.n	8001f22 <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e5a:	4bb5      	ldr	r3, [pc, #724]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d046      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e66:	4bb2      	ldr	r3, [pc, #712]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d03b      	beq.n	8001eea <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e72:	6863      	ldr	r3, [r4, #4]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	f000 808e 	beq.w	8001f98 <HAL_RCC_OscConfig+0x14c>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 8091 	bne.w	8001fa4 <HAL_RCC_OscConfig+0x158>
 8001e82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e86:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e98:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9a:	4aa5      	ldr	r2, [pc, #660]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001e9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e9e:	f023 030f 	bic.w	r3, r3, #15
 8001ea2:	68a1      	ldr	r1, [r4, #8]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	6863      	ldr	r3, [r4, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8094 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f84a 	bl	8000f48 <HAL_GetTick>
 8001eb4:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eba:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b9c      	ldr	r3, [pc, #624]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	4219      	tst	r1, r3
 8001eda:	d122      	bne.n	8001f22 <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff f834 	bl	8000f48 <HAL_GetTick>
 8001ee0:	1b40      	subs	r0, r0, r5
 8001ee2:	2864      	cmp	r0, #100	; 0x64
 8001ee4:	d9e7      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	e2ab      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eea:	4b91      	ldr	r3, [pc, #580]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ef2:	d0be      	beq.n	8001e72 <HAL_RCC_OscConfig+0x26>
 8001ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef8:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	4b8c      	ldr	r3, [pc, #560]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	2201      	movs	r2, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	4219      	tst	r1, r3
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_OscConfig+0xd6>
 8001f1a:	6863      	ldr	r3, [r4, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8289 	beq.w	8002434 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	f013 0f02 	tst.w	r3, #2
 8001f28:	f000 809c 	beq.w	8002064 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f2c:	4b80      	ldr	r3, [pc, #512]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f013 0f0c 	tst.w	r3, #12
 8001f34:	d072      	beq.n	800201c <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f36:	4b7e      	ldr	r3, [pc, #504]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d067      	beq.n	8002012 <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f42:	6923      	ldr	r3, [r4, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80cb 	beq.w	80020e0 <HAL_RCC_OscConfig+0x294>
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe fff2 	bl	8000f48 <HAL_GetTick>
 8001f64:	4605      	mov	r5, r0
 8001f66:	2302      	movs	r3, #2
 8001f68:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	4b70      	ldr	r3, [pc, #448]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	2302      	movs	r3, #2
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2201      	movs	r2, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	4219      	tst	r1, r3
 8001f86:	f040 809c 	bne.w	80020c2 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7fe ffdd 	bl	8000f48 <HAL_GetTick>
 8001f8e:	1b40      	subs	r0, r0, r5
 8001f90:	2802      	cmp	r0, #2
 8001f92:	d9e8      	bls.n	8001f66 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001f94:	2003      	movs	r0, #3
 8001f96:	e254      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	4a65      	ldr	r2, [pc, #404]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001f9a:	6813      	ldr	r3, [r2, #0]
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e77a      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e>
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_OscConfig+0x172>
 8001faa:	4b61      	ldr	r3, [pc, #388]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e76d      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e>
 8001fbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fc2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e760      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001fd8:	f7fe ffb6 	bl	8000f48 <HAL_GetTick>
 8001fdc:	4605      	mov	r5, r0
 8001fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b52      	ldr	r3, [pc, #328]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	4219      	tst	r1, r3
 8002002:	d08e      	beq.n	8001f22 <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe ffa0 	bl	8000f48 <HAL_GetTick>
 8002008:	1b40      	subs	r0, r0, r5
 800200a:	2864      	cmp	r0, #100	; 0x64
 800200c:	d9e7      	bls.n	8001fde <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800200e:	2003      	movs	r0, #3
 8002010:	e217      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800201a:	d192      	bne.n	8001f42 <HAL_RCC_OscConfig+0xf6>
 800201c:	2302      	movs	r3, #2
 800201e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	2302      	movs	r3, #2
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	2201      	movs	r2, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	4219      	tst	r1, r3
 800203c:	d004      	beq.n	8002048 <HAL_RCC_OscConfig+0x1fc>
 800203e:	6923      	ldr	r3, [r4, #16]
 8002040:	4293      	cmp	r3, r2
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8002044:	2001      	movs	r0, #1
 8002046:	e1fc      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4839      	ldr	r0, [pc, #228]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 800204a:	6803      	ldr	r3, [r0, #0]
 800204c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002050:	6961      	ldr	r1, [r4, #20]
 8002052:	22f8      	movs	r2, #248	; 0xf8
 8002054:	fa92 f2a2 	rbit	r2, r2
 8002058:	fab2 f282 	clz	r2, r2
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	4313      	orrs	r3, r2
 8002062:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	f013 0f08 	tst.w	r3, #8
 800206a:	f000 808d 	beq.w	8002188 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206e:	69a3      	ldr	r3, [r4, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d061      	beq.n	8002138 <HAL_RCC_OscConfig+0x2ec>
 8002074:	2101      	movs	r1, #1
 8002076:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	fab2 f282 	clz	r2, r2
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x2e8>)
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7fe ff5f 	bl	8000f48 <HAL_GetTick>
 800208a:	4605      	mov	r5, r0
 800208c:	2302      	movs	r3, #2
 800208e:	fa93 f2a3 	rbit	r2, r3
 8002092:	fa93 f2a3 	rbit	r2, r3
 8002096:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	4a25      	ldr	r2, [pc, #148]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 800209c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2201      	movs	r2, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	4219      	tst	r1, r3
 80020b2:	d169      	bne.n	8002188 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b4:	f7fe ff48 	bl	8000f48 <HAL_GetTick>
 80020b8:	1b40      	subs	r0, r0, r5
 80020ba:	2802      	cmp	r0, #2
 80020bc:	d9e6      	bls.n	800208c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020be:	2003      	movs	r0, #3
 80020c0:	e1bf      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	481b      	ldr	r0, [pc, #108]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 80020c4:	6803      	ldr	r3, [r0, #0]
 80020c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020ca:	6961      	ldr	r1, [r4, #20]
 80020cc:	22f8      	movs	r2, #248	; 0xf8
 80020ce:	fa92 f2a2 	rbit	r2, r2
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	4313      	orrs	r3, r2
 80020dc:	6003      	str	r3, [r0, #0]
 80020de:	e7c1      	b.n	8002064 <HAL_RCC_OscConfig+0x218>
 80020e0:	2301      	movs	r3, #1
 80020e2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020f8:	f7fe ff26 	bl	8000f48 <HAL_GetTick>
 80020fc:	4605      	mov	r5, r0
 80020fe:	2302      	movs	r3, #2
 8002100:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_OscConfig+0x2e4>)
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	2302      	movs	r3, #2
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2201      	movs	r2, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	4219      	tst	r1, r3
 800211e:	d0a1      	beq.n	8002064 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002120:	f7fe ff12 	bl	8000f48 <HAL_GetTick>
 8002124:	1b40      	subs	r0, r0, r5
 8002126:	2802      	cmp	r0, #2
 8002128:	d9e9      	bls.n	80020fe <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 800212a:	2003      	movs	r0, #3
 800212c:	e189      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	10908120 	.word	0x10908120
 8002138:	2201      	movs	r2, #1
 800213a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	fab2 f282 	clz	r2, r2
 8002142:	4bc1      	ldr	r3, [pc, #772]	; (8002448 <HAL_RCC_OscConfig+0x5fc>)
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7fe fefc 	bl	8000f48 <HAL_GetTick>
 8002150:	4605      	mov	r5, r0
 8002152:	2302      	movs	r3, #2
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	4aba      	ldr	r2, [pc, #744]	; (800244c <HAL_RCC_OscConfig+0x600>)
 8002162:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2201      	movs	r2, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	4219      	tst	r1, r3
 8002178:	d006      	beq.n	8002188 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217a:	f7fe fee5 	bl	8000f48 <HAL_GetTick>
 800217e:	1b40      	subs	r0, r0, r5
 8002180:	2802      	cmp	r0, #2
 8002182:	d9e6      	bls.n	8002152 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8002184:	2003      	movs	r0, #3
 8002186:	e15c      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	f013 0f04 	tst.w	r3, #4
 800218e:	f000 80b3 	beq.w	80022f8 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002192:	4bae      	ldr	r3, [pc, #696]	; (800244c <HAL_RCC_OscConfig+0x600>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800219a:	d126      	bne.n	80021ea <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4bab      	ldr	r3, [pc, #684]	; (800244c <HAL_RCC_OscConfig+0x600>)
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021a4:	61da      	str	r2, [r3, #28]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021b0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4ba7      	ldr	r3, [pc, #668]	; (8002450 <HAL_RCC_OscConfig+0x604>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021ba:	d018      	beq.n	80021ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021bc:	68e3      	ldr	r3, [r4, #12]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d029      	beq.n	8002216 <HAL_RCC_OscConfig+0x3ca>
 80021c2:	bb73      	cbnz	r3, 8002222 <HAL_RCC_OscConfig+0x3d6>
 80021c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	621a      	str	r2, [r3, #32]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	f022 0204 	bic.w	r2, r2, #4
 80021da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021dc:	68e3      	ldr	r3, [r4, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d05d      	beq.n	800229e <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7fe feb1 	bl	8000f48 <HAL_GetTick>
 80021e6:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	e047      	b.n	800227a <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2500      	movs	r5, #0
 80021ec:	e7e1      	b.n	80021b2 <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ee:	4a98      	ldr	r2, [pc, #608]	; (8002450 <HAL_RCC_OscConfig+0x604>)
 80021f0:	6813      	ldr	r3, [r2, #0]
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80021f8:	f7fe fea6 	bl	8000f48 <HAL_GetTick>
 80021fc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b94      	ldr	r3, [pc, #592]	; (8002450 <HAL_RCC_OscConfig+0x604>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002206:	d1d9      	bne.n	80021bc <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fe9e 	bl	8000f48 <HAL_GetTick>
 800220c:	1b80      	subs	r0, r0, r6
 800220e:	2864      	cmp	r0, #100	; 0x64
 8002210:	d9f5      	bls.n	80021fe <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8002212:	2003      	movs	r0, #3
 8002214:	e115      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002216:	4a8d      	ldr	r2, [pc, #564]	; (800244c <HAL_RCC_OscConfig+0x600>)
 8002218:	6a13      	ldr	r3, [r2, #32]
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	e7dc      	b.n	80021dc <HAL_RCC_OscConfig+0x390>
 8002222:	2b05      	cmp	r3, #5
 8002224:	d009      	beq.n	800223a <HAL_RCC_OscConfig+0x3ee>
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_OscConfig+0x600>)
 8002228:	6a1a      	ldr	r2, [r3, #32]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	621a      	str	r2, [r3, #32]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	621a      	str	r2, [r3, #32]
 8002238:	e7d0      	b.n	80021dc <HAL_RCC_OscConfig+0x390>
 800223a:	4b84      	ldr	r3, [pc, #528]	; (800244c <HAL_RCC_OscConfig+0x600>)
 800223c:	6a1a      	ldr	r2, [r3, #32]
 800223e:	f042 0204 	orr.w	r2, r2, #4
 8002242:	621a      	str	r2, [r3, #32]
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	621a      	str	r2, [r3, #32]
 800224c:	e7c6      	b.n	80021dc <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224e:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x600>)
 8002250:	6a19      	ldr	r1, [r3, #32]
 8002252:	2302      	movs	r3, #2
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2201      	movs	r2, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	4219      	tst	r1, r3
 8002268:	d145      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fe6d 	bl	8000f48 <HAL_GetTick>
 800226e:	1b80      	subs	r0, r0, r6
 8002270:	f241 3388 	movw	r3, #5000	; 0x1388
 8002274:	4298      	cmp	r0, r3
 8002276:	f200 80df 	bhi.w	8002438 <HAL_RCC_OscConfig+0x5ec>
 800227a:	2302      	movs	r3, #2
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d0dd      	beq.n	800224e <HAL_RCC_OscConfig+0x402>
 8002292:	2302      	movs	r3, #2
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	4b6c      	ldr	r3, [pc, #432]	; (800244c <HAL_RCC_OscConfig+0x600>)
 800229a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800229c:	e7d9      	b.n	8002252 <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7fe fe53 	bl	8000f48 <HAL_GetTick>
 80022a2:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x486>
 80022a6:	4b69      	ldr	r3, [pc, #420]	; (800244c <HAL_RCC_OscConfig+0x600>)
 80022a8:	6a19      	ldr	r1, [r3, #32]
 80022aa:	2302      	movs	r3, #2
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2201      	movs	r2, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	4219      	tst	r1, r3
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe fe41 	bl	8000f48 <HAL_GetTick>
 80022c6:	1b80      	subs	r0, r0, r6
 80022c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80022cc:	4298      	cmp	r0, r3
 80022ce:	f200 80b5 	bhi.w	800243c <HAL_RCC_OscConfig+0x5f0>
 80022d2:	2302      	movs	r3, #2
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d0dd      	beq.n	80022a6 <HAL_RCC_OscConfig+0x45a>
 80022ea:	2302      	movs	r3, #2
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	4b56      	ldr	r3, [pc, #344]	; (800244c <HAL_RCC_OscConfig+0x600>)
 80022f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022f4:	e7d9      	b.n	80022aa <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022f6:	bbb5      	cbnz	r5, 8002366 <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f8:	69e3      	ldr	r3, [r4, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80a0 	beq.w	8002440 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_RCC_OscConfig+0x600>)
 8002302:	6852      	ldr	r2, [r2, #4]
 8002304:	f002 020c 	and.w	r2, r2, #12
 8002308:	2a08      	cmp	r2, #8
 800230a:	f000 80a3 	beq.w	8002454 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230e:	2b02      	cmp	r3, #2
 8002310:	d02f      	beq.n	8002372 <HAL_RCC_OscConfig+0x526>
 8002312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002316:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002322:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fe0c 	bl	8000f48 <HAL_GetTick>
 8002330:	4604      	mov	r4, r0
 8002332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002336:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233a:	4b44      	ldr	r3, [pc, #272]	; (800244c <HAL_RCC_OscConfig+0x600>)
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2201      	movs	r2, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	4219      	tst	r1, r3
 8002356:	d06b      	beq.n	8002430 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fdf6 	bl	8000f48 <HAL_GetTick>
 800235c:	1b00      	subs	r0, r0, r4
 800235e:	2802      	cmp	r0, #2
 8002360:	d9e7      	bls.n	8002332 <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8002362:	2003      	movs	r0, #3
 8002364:	e06d      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4a39      	ldr	r2, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x600>)
 8002368:	69d3      	ldr	r3, [r2, #28]
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	61d3      	str	r3, [r2, #28]
 8002370:	e7c2      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ac>
 8002372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002376:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002382:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800238c:	f7fe fddc 	bl	8000f48 <HAL_GetTick>
 8002390:	4605      	mov	r5, r0
 8002392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002396:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239a:	4b2c      	ldr	r3, [pc, #176]	; (800244c <HAL_RCC_OscConfig+0x600>)
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2201      	movs	r2, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	4219      	tst	r1, r3
 80023b6:	d006      	beq.n	80023c6 <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fdc6 	bl	8000f48 <HAL_GetTick>
 80023bc:	1b40      	subs	r0, r0, r5
 80023be:	2802      	cmp	r0, #2
 80023c0:	d9e7      	bls.n	8002392 <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 80023c2:	2003      	movs	r0, #3
 80023c4:	e03d      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c6:	4921      	ldr	r1, [pc, #132]	; (800244c <HAL_RCC_OscConfig+0x600>)
 80023c8:	684b      	ldr	r3, [r1, #4]
 80023ca:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80023ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023d0:	6a20      	ldr	r0, [r4, #32]
 80023d2:	4302      	orrs	r2, r0
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023dc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023f2:	f7fe fda9 	bl	8000f48 <HAL_GetTick>
 80023f6:	4604      	mov	r4, r0
 80023f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fc:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_OscConfig+0x600>)
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2201      	movs	r2, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	4219      	tst	r1, r3
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fd93 	bl	8000f48 <HAL_GetTick>
 8002422:	1b00      	subs	r0, r0, r4
 8002424:	2802      	cmp	r0, #2
 8002426:	d9e7      	bls.n	80023f8 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8002428:	2003      	movs	r0, #3
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800242c:	2000      	movs	r0, #0
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
 8002430:	2000      	movs	r0, #0
 8002432:	e006      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8002434:	2001      	movs	r0, #1
 8002436:	e004      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002438:	2003      	movs	r0, #3
 800243a:	e002      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 800243c:	2003      	movs	r0, #3
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8002440:	2000      	movs	r0, #0
}
 8002442:	b002      	add	sp, #8
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	bf00      	nop
 8002448:	10908120 	.word	0x10908120
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8002454:	2001      	movs	r0, #1
 8002456:	e7f4      	b.n	8002442 <HAL_RCC_OscConfig+0x5f6>

08002458 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800245a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800245c:	f003 020c 	and.w	r2, r3, #12
 8002460:	2a08      	cmp	r2, #8
 8002462:	d124      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002464:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002468:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800246c:	fa92 f2a2 	rbit	r2, r2
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	fa21 f202 	lsr.w	r2, r1, r2
 8002478:	490f      	ldr	r1, [pc, #60]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x60>)
 800247a:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800247e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002480:	f002 020f 	and.w	r2, r2, #15
 8002484:	210f      	movs	r1, #15
 8002486:	fa91 f1a1 	rbit	r1, r1
 800248a:	fab1 f181 	clz	r1, r1
 800248e:	40ca      	lsrs	r2, r1
 8002490:	490a      	ldr	r1, [pc, #40]	; (80024bc <HAL_RCC_GetSysClockFreq+0x64>)
 8002492:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002494:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002498:	d103      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x68>)
 800249c:	fb03 f000 	mul.w	r0, r3, r0
 80024a0:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80024a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a8:	fb03 f000 	mul.w	r0, r3, r0
 80024ac:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08007ae8 	.word	0x08007ae8
 80024bc:	08007af8 	.word	0x08007af8
 80024c0:	003d0900 	.word	0x003d0900
 80024c4:	007a1200 	.word	0x007a1200

080024c8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024c8:	4b70      	ldr	r3, [pc, #448]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	428b      	cmp	r3, r1
 80024d2:	d20c      	bcs.n	80024ee <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d4:	4a6d      	ldr	r2, [pc, #436]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	f023 0307 	bic.w	r3, r3, #7
 80024dc:	430b      	orrs	r3, r1
 80024de:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024e0:	6813      	ldr	r3, [r2, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	4299      	cmp	r1, r3
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80024ea:	2001      	movs	r0, #1
 80024ec:	4770      	bx	lr
{
 80024ee:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	6803      	ldr	r3, [r0, #0]
 80024f2:	f013 0f02 	tst.w	r3, #2
 80024f6:	d006      	beq.n	8002506 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4a65      	ldr	r2, [pc, #404]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	6853      	ldr	r3, [r2, #4]
 80024fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002500:	6884      	ldr	r4, [r0, #8]
 8002502:	4323      	orrs	r3, r4
 8002504:	6053      	str	r3, [r2, #4]
 8002506:	460d      	mov	r5, r1
 8002508:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	6803      	ldr	r3, [r0, #0]
 800250c:	f013 0f01 	tst.w	r3, #1
 8002510:	d07a      	beq.n	8002608 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002512:	6843      	ldr	r3, [r0, #4]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d02f      	beq.n	8002578 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002518:	2b02      	cmp	r3, #2
 800251a:	d042      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xda>
 800251c:	2202      	movs	r2, #2
 800251e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	6810      	ldr	r0, [r2, #0]
 8002526:	2202      	movs	r2, #2
 8002528:	fa92 f2a2 	rbit	r2, r2
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	f002 021f 	and.w	r2, r2, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	4210      	tst	r0, r2
 800253c:	f000 80a4 	beq.w	8002688 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002540:	4953      	ldr	r1, [pc, #332]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	684a      	ldr	r2, [r1, #4]
 8002544:	f022 0203 	bic.w	r2, r2, #3
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800254c:	f7fe fcfc 	bl	8000f48 <HAL_GetTick>
 8002550:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	6863      	ldr	r3, [r4, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d039      	beq.n	80025cc <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002558:	2b02      	cmp	r3, #2
 800255a:	d046      	beq.n	80025ea <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f013 0f0c 	tst.w	r3, #12
 8002564:	d050      	beq.n	8002608 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002566:	f7fe fcef 	bl	8000f48 <HAL_GetTick>
 800256a:	1b80      	subs	r0, r0, r6
 800256c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002570:	4298      	cmp	r0, r3
 8002572:	d9f3      	bls.n	800255c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8002574:	2003      	movs	r0, #3
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800257c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002580:	4a43      	ldr	r2, [pc, #268]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	6810      	ldr	r0, [r2, #0]
 8002584:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002588:	fa92 f2a2 	rbit	r2, r2
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	f002 021f 	and.w	r2, r2, #31
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f202 	lsl.w	r2, r1, r2
 800259a:	4210      	tst	r0, r2
 800259c:	d1d0      	bne.n	8002540 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 800259e:	2001      	movs	r0, #1
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
 80025a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4a39      	ldr	r2, [pc, #228]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	6810      	ldr	r0, [r2, #0]
 80025ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b2:	fa92 f2a2 	rbit	r2, r2
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	f002 021f 	and.w	r2, r2, #31
 80025be:	2101      	movs	r1, #1
 80025c0:	fa01 f202 	lsl.w	r2, r1, r2
 80025c4:	4210      	tst	r0, r2
 80025c6:	d1bb      	bne.n	8002540 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80025c8:	2001      	movs	r0, #1
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d017      	beq.n	8002608 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7fe fcb6 	bl	8000f48 <HAL_GetTick>
 80025dc:	1b80      	subs	r0, r0, r6
 80025de:	f241 3388 	movw	r3, #5000	; 0x1388
 80025e2:	4298      	cmp	r0, r3
 80025e4:	d9f2      	bls.n	80025cc <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80025e6:	2003      	movs	r0, #3
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d008      	beq.n	8002608 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f7fe fca7 	bl	8000f48 <HAL_GetTick>
 80025fa:	1b80      	subs	r0, r0, r6
 80025fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002600:	4298      	cmp	r0, r3
 8002602:	d9f2      	bls.n	80025ea <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8002604:	2003      	movs	r0, #3
 8002606:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	429d      	cmp	r5, r3
 8002612:	d20c      	bcs.n	800262e <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	f023 0307 	bic.w	r3, r3, #7
 800261c:	432b      	orrs	r3, r5
 800261e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	429d      	cmp	r5, r3
 8002628:	d001      	beq.n	800262e <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 800262a:	2001      	movs	r0, #1
}
 800262c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	f013 0f04 	tst.w	r3, #4
 8002634:	d006      	beq.n	8002644 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002636:	4a16      	ldr	r2, [pc, #88]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	6853      	ldr	r3, [r2, #4]
 800263a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800263e:	68e1      	ldr	r1, [r4, #12]
 8002640:	430b      	orrs	r3, r1
 8002642:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	f013 0f08 	tst.w	r3, #8
 800264a:	d007      	beq.n	800265c <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264c:	4a10      	ldr	r2, [pc, #64]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	6853      	ldr	r3, [r2, #4]
 8002650:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002654:	6921      	ldr	r1, [r4, #16]
 8002656:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800265a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800265c:	f7ff fefc 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002668:	22f0      	movs	r2, #240	; 0xf0
 800266a:	fa92 f2a2 	rbit	r2, r2
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	40d3      	lsrs	r3, r2
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_RCC_ClockConfig+0x1cc>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	40d8      	lsrs	r0, r3
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_RCC_ClockConfig+0x1d0>)
 800267c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe fc32 	bl	8000ee8 <HAL_InitTick>
  return HAL_OK;
 8002684:	2000      	movs	r0, #0
 8002686:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002688:	2001      	movs	r0, #1
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	40022000 	.word	0x40022000
 8002690:	40021000 	.word	0x40021000
 8002694:	08007b38 	.word	0x08007b38
 8002698:	20000000 	.word	0x20000000

0800269c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800269c:	4b01      	ldr	r3, [pc, #4]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000000 	.word	0x20000000

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026aa:	f7ff fff7 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	40d3      	lsrs	r3, r2
 80026c4:	4a02      	ldr	r2, [pc, #8]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
}    
 80026c8:	40d8      	lsrs	r0, r3
 80026ca:	bd08      	pop	{r3, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08007b48 	.word	0x08007b48

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026d6:	f7ff ffe1 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026e2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026e6:	fa92 f2a2 	rbit	r2, r2
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	40d3      	lsrs	r3, r2
 80026f0:	4a02      	ldr	r2, [pc, #8]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
} 
 80026f4:	40d8      	lsrs	r0, r3
 80026f6:	bd08      	pop	{r3, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08007b48 	.word	0x08007b48

08002700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002702:	b083      	sub	sp, #12
 8002704:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002706:	6803      	ldr	r3, [r0, #0]
 8002708:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800270c:	d044      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002716:	d179      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002720:	61da      	str	r2, [r3, #28]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800272c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002736:	d06b      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800273c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002740:	d021      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002742:	6862      	ldr	r2, [r4, #4]
 8002744:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002748:	4293      	cmp	r3, r2
 800274a:	d01c      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800274c:	4854      	ldr	r0, [pc, #336]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800274e:	6a01      	ldr	r1, [r0, #32]
 8002750:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002758:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	4f51      	ldr	r7, [pc, #324]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002762:	443a      	add	r2, r7
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	f04f 0e01 	mov.w	lr, #1
 800276a:	f8c2 e000 	str.w	lr, [r2]
 800276e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	443b      	add	r3, r7
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800277e:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002780:	f011 0f01 	tst.w	r1, #1
 8002784:	d158      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002786:	4a46      	ldr	r2, [pc, #280]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002788:	6a13      	ldr	r3, [r2, #32]
 800278a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278e:	6861      	ldr	r1, [r4, #4]
 8002790:	430b      	orrs	r3, r1
 8002792:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002794:	2d00      	cmp	r5, #0
 8002796:	d17a      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	f013 0f01 	tst.w	r3, #1
 800279e:	d006      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a0:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80027a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027a4:	f023 0303 	bic.w	r3, r3, #3
 80027a8:	68a1      	ldr	r1, [r4, #8]
 80027aa:	430b      	orrs	r3, r1
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	f013 0f20 	tst.w	r3, #32
 80027b4:	d006      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b6:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80027b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027ba:	f023 0310 	bic.w	r3, r3, #16
 80027be:	68e1      	ldr	r1, [r4, #12]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027ca:	d006      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027cc:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80027ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80027d0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80027d4:	6921      	ldr	r1, [r4, #16]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80027e0:	d006      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027e2:	4a2f      	ldr	r2, [pc, #188]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80027e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ea:	6961      	ldr	r1, [r4, #20]
 80027ec:	430b      	orrs	r3, r1
 80027ee:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80027f6:	d051      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80027f8:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80027fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002800:	69a1      	ldr	r1, [r4, #24]
 8002802:	430b      	orrs	r3, r1
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002806:	2000      	movs	r0, #0
}
 8002808:	b003      	add	sp, #12
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800280c:	2500      	movs	r5, #0
 800280e:	e78e      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002810:	4a24      	ldr	r2, [pc, #144]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800281a:	f7fe fb95 	bl	8000f48 <HAL_GetTick>
 800281e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002828:	d186      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe fb8d 	bl	8000f48 <HAL_GetTick>
 800282e:	1b80      	subs	r0, r0, r6
 8002830:	2864      	cmp	r0, #100	; 0x64
 8002832:	d9f5      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002834:	2003      	movs	r0, #3
 8002836:	e7e7      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002838:	f7fe fb86 	bl	8000f48 <HAL_GetTick>
 800283c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e014      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002842:	6a19      	ldr	r1, [r3, #32]
 8002844:	2302      	movs	r3, #2
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2201      	movs	r2, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	4219      	tst	r1, r3
 800285a:	d194      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fb74 	bl	8000f48 <HAL_GetTick>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	f241 3388 	movw	r3, #5000	; 0x1388
 8002866:	4298      	cmp	r0, r3
 8002868:	d816      	bhi.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800286a:	2302      	movs	r3, #2
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d0de      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002882:	2302      	movs	r3, #2
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800288a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800288c:	e7da      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	69d3      	ldr	r3, [r2, #28]
 8002890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002894:	61d3      	str	r3, [r2, #28]
 8002896:	e77f      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8002898:	2003      	movs	r0, #3
 800289a:	e7b5      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 800289c:	2000      	movs	r0, #0
 800289e:	e7b3      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
 80028a8:	10908100 	.word	0x10908100

080028ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80028ac:	b538      	push	{r3, r4, r5, lr}
 80028ae:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80028b0:	6802      	ldr	r2, [r0, #0]
 80028b2:	68d3      	ldr	r3, [r2, #12]
 80028b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028b8:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 80028ba:	f7fe fb45 	bl	8000f48 <HAL_GetTick>
 80028be:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f013 0f20 	tst.w	r3, #32
 80028c8:	d107      	bne.n	80028da <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80028ca:	f7fe fb3d 	bl	8000f48 <HAL_GetTick>
 80028ce:	1b40      	subs	r0, r0, r5
 80028d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80028d4:	d9f4      	bls.n	80028c0 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 80028d6:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 80028d8:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80028da:	2000      	movs	r0, #0
 80028dc:	bd38      	pop	{r3, r4, r5, pc}

080028de <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80028de:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80028e0:	6803      	ldr	r3, [r0, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028e8:	d001      	beq.n	80028ee <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80028ea:	2000      	movs	r0, #0
 80028ec:	bd38      	pop	{r3, r4, r5, pc}
 80028ee:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80028f6:	f7fe fb27 	bl	8000f48 <HAL_GetTick>
 80028fa:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002904:	d107      	bne.n	8002916 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002906:	f7fe fb1f 	bl	8000f48 <HAL_GetTick>
 800290a:	1b40      	subs	r0, r0, r5
 800290c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002910:	d9f4      	bls.n	80028fc <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002912:	2003      	movs	r0, #3
}
 8002914:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8002916:	2000      	movs	r0, #0
 8002918:	bd38      	pop	{r3, r4, r5, pc}

0800291a <HAL_RTC_Init>:
{
 800291a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800291c:	2800      	cmp	r0, #0
 800291e:	d05c      	beq.n	80029da <HAL_RTC_Init+0xc0>
 8002920:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002922:	7f43      	ldrb	r3, [r0, #29]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d041      	beq.n	80029ac <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002928:	2302      	movs	r3, #2
 800292a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	22ca      	movs	r2, #202	; 0xca
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	2253      	movs	r2, #83	; 0x53
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff ffd0 	bl	80028de <RTC_EnterInitMode>
 800293e:	4605      	mov	r5, r0
 8002940:	2800      	cmp	r0, #0
 8002942:	d137      	bne.n	80029b4 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002944:	6822      	ldr	r2, [r4, #0]
 8002946:	6893      	ldr	r3, [r2, #8]
 8002948:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800294c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002950:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002952:	6821      	ldr	r1, [r4, #0]
 8002954:	688a      	ldr	r2, [r1, #8]
 8002956:	6863      	ldr	r3, [r4, #4]
 8002958:	6920      	ldr	r0, [r4, #16]
 800295a:	4303      	orrs	r3, r0
 800295c:	6960      	ldr	r0, [r4, #20]
 800295e:	4303      	orrs	r3, r0
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	68e2      	ldr	r2, [r4, #12]
 8002968:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6913      	ldr	r3, [r2, #16]
 800296e:	68a1      	ldr	r1, [r4, #8]
 8002970:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002974:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002976:	6822      	ldr	r2, [r4, #0]
 8002978:	68d3      	ldr	r3, [r2, #12]
 800297a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f013 0f20 	tst.w	r3, #32
 8002988:	d01b      	beq.n	80029c2 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800298e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002992:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002998:	69a1      	ldr	r1, [r4, #24]
 800299a:	430b      	orrs	r3, r1
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80029a4:	2301      	movs	r3, #1
 80029a6:	7763      	strb	r3, [r4, #29]
}
 80029a8:	4628      	mov	r0, r5
 80029aa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80029ac:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80029ae:	f002 fc81 	bl	80052b4 <HAL_RTC_MspInit>
 80029b2:	e7b9      	b.n	8002928 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029ba:	2304      	movs	r3, #4
 80029bc:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80029be:	2501      	movs	r5, #1
 80029c0:	e7f2      	b.n	80029a8 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff ff72 	bl	80028ac <HAL_RTC_WaitForSynchro>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d0de      	beq.n	800298a <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	22ff      	movs	r2, #255	; 0xff
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029d2:	2304      	movs	r3, #4
 80029d4:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80029d6:	2501      	movs	r5, #1
 80029d8:	e7e6      	b.n	80029a8 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 80029da:	2501      	movs	r5, #1
 80029dc:	e7e4      	b.n	80029a8 <HAL_RTC_Init+0x8e>

080029de <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80029de:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 80029e0:	e002      	b.n	80029e8 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80029e2:	3301      	adds	r3, #1
    Value -= 10U;
 80029e4:	380a      	subs	r0, #10
 80029e6:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 80029e8:	2809      	cmp	r0, #9
 80029ea:	d8fa      	bhi.n	80029e2 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	b2db      	uxtb	r3, r3
}
 80029f0:	4318      	orrs	r0, r3
 80029f2:	4770      	bx	lr

080029f4 <HAL_RTC_SetTime>:
{
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80029f6:	7f03      	ldrb	r3, [r0, #28]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d077      	beq.n	8002aec <HAL_RTC_SetTime+0xf8>
 80029fc:	460e      	mov	r6, r1
 80029fe:	4604      	mov	r4, r0
 8002a00:	2301      	movs	r3, #1
 8002a02:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002a08:	2a00      	cmp	r2, #0
 8002a0a:	d146      	bne.n	8002a9a <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a0c:	6803      	ldr	r3, [r0, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a14:	d101      	bne.n	8002a1a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a1a:	7830      	ldrb	r0, [r6, #0]
 8002a1c:	f7ff ffdf 	bl	80029de <RTC_ByteToBcd2>
 8002a20:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002a22:	7870      	ldrb	r0, [r6, #1]
 8002a24:	f7ff ffdb 	bl	80029de <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a28:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002a2c:	78b0      	ldrb	r0, [r6, #2]
 8002a2e:	f7ff ffd6 	bl	80029de <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002a32:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002a34:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a36:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	22ca      	movs	r2, #202	; 0xca
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	2253      	movs	r2, #83	; 0x53
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff ff49 	bl	80028de <RTC_EnterInitMode>
 8002a4c:	4607      	mov	r7, r0
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d135      	bne.n	8002abe <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002a58:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002a5c:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	6893      	ldr	r3, [r2, #8]
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a68:	6821      	ldr	r1, [r4, #0]
 8002a6a:	688b      	ldr	r3, [r1, #8]
 8002a6c:	68f2      	ldr	r2, [r6, #12]
 8002a6e:	6930      	ldr	r0, [r6, #16]
 8002a70:	4302      	orrs	r2, r0
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a76:	6822      	ldr	r2, [r4, #0]
 8002a78:	68d3      	ldr	r3, [r2, #12]
 8002a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a7e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f013 0f20 	tst.w	r3, #32
 8002a88:	d022      	beq.n	8002ad0 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002a90:	2301      	movs	r3, #1
 8002a92:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8002a94:	2300      	movs	r3, #0
 8002a96:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002a98:	e029      	b.n	8002aee <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a9a:	6803      	ldr	r3, [r0, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002aa8:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002aaa:	7870      	ldrb	r0, [r6, #1]
 8002aac:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002aae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002ab2:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ab4:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002ab6:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ab8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002abc:	e7bd      	b.n	8002a3a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002acc:	2701      	movs	r7, #1
 8002ace:	e00e      	b.n	8002aee <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff feeb 	bl	80028ac <HAL_RTC_WaitForSynchro>
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d0d7      	beq.n	8002a8a <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002ae8:	2701      	movs	r7, #1
 8002aea:	e000      	b.n	8002aee <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002aec:	2702      	movs	r7, #2
}
 8002aee:	4638      	mov	r0, r7
 8002af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002af2 <HAL_RTC_SetDate>:
{
 8002af2:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002af4:	7f03      	ldrb	r3, [r0, #28]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d065      	beq.n	8002bc6 <HAL_RTC_SetDate+0xd4>
 8002afa:	2301      	movs	r3, #1
 8002afc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002afe:	2302      	movs	r3, #2
 8002b00:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b02:	b93a      	cbnz	r2, 8002b14 <HAL_RTC_SetDate+0x22>
 8002b04:	784b      	ldrb	r3, [r1, #1]
 8002b06:	f013 0f10 	tst.w	r3, #16
 8002b0a:	d003      	beq.n	8002b14 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b0c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002b10:	330a      	adds	r3, #10
 8002b12:	704b      	strb	r3, [r1, #1]
 8002b14:	460e      	mov	r6, r1
 8002b16:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d132      	bne.n	8002b82 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002b1c:	78c8      	ldrb	r0, [r1, #3]
 8002b1e:	f7ff ff5e 	bl	80029de <RTC_ByteToBcd2>
 8002b22:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002b24:	7870      	ldrb	r0, [r6, #1]
 8002b26:	f7ff ff5a 	bl	80029de <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002b2a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002b2e:	78b0      	ldrb	r0, [r6, #2]
 8002b30:	f7ff ff55 	bl	80029de <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002b34:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002b36:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002b38:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	22ca      	movs	r2, #202	; 0xca
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	2253      	movs	r2, #83	; 0x53
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff fec8 	bl	80028de <RTC_EnterInitMode>
 8002b4e:	4606      	mov	r6, r0
 8002b50:	bb10      	cbnz	r0, 8002b98 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002b58:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002b5c:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002b5e:	6822      	ldr	r2, [r4, #0]
 8002b60:	68d3      	ldr	r3, [r2, #12]
 8002b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b66:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f013 0f20 	tst.w	r3, #32
 8002b70:	d01b      	beq.n	8002baa <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8002b80:	e022      	b.n	8002bc8 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002b82:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002b84:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002b86:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002b88:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002b8a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002b8e:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002b90:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002b92:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002b96:	e7d1      	b.n	8002b3c <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	22ff      	movs	r2, #255	; 0xff
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002ba6:	2601      	movs	r6, #1
 8002ba8:	e00e      	b.n	8002bc8 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7ff fe7e 	bl	80028ac <HAL_RTC_WaitForSynchro>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d0de      	beq.n	8002b72 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	22ff      	movs	r2, #255	; 0xff
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002bc2:	2601      	movs	r6, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8002bc6:	2602      	movs	r6, #2
}
 8002bc8:	4630      	mov	r0, r6
 8002bca:	bd70      	pop	{r4, r5, r6, pc}

08002bcc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002bcc:	0903      	lsrs	r3, r0, #4
 8002bce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bd2:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002bd4:	f000 000f 	and.w	r0, r0, #15
 8002bd8:	4410      	add	r0, r2
}
 8002bda:	b2c0      	uxtb	r0, r0
 8002bdc:	4770      	bx	lr

08002bde <HAL_RTC_GetTime>:
{
 8002bde:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002be0:	6803      	ldr	r3, [r0, #0]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002be6:	6803      	ldr	r3, [r0, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002bee:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002bf0:	6803      	ldr	r3, [r0, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002bf8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002bfc:	0c1d      	lsrs	r5, r3, #16
 8002bfe:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002c02:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002c04:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002c08:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002c0a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002c0e:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002c10:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002c14:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002c16:	b95a      	cbnz	r2, 8002c30 <HAL_RTC_GetTime+0x52>
 8002c18:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c1a:	f7ff ffd7 	bl	8002bcc <RTC_Bcd2ToByte>
 8002c1e:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c20:	4630      	mov	r0, r6
 8002c22:	f7ff ffd3 	bl	8002bcc <RTC_Bcd2ToByte>
 8002c26:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff ffcf 	bl	8002bcc <RTC_Bcd2ToByte>
 8002c2e:	70a8      	strb	r0, [r5, #2]
}
 8002c30:	2000      	movs	r0, #0
 8002c32:	bd70      	pop	{r4, r5, r6, pc}

08002c34 <HAL_RTC_GetDate>:
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002c36:	6803      	ldr	r3, [r0, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002c42:	0c18      	lsrs	r0, r3, #16
 8002c44:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002c46:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8002c4a:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002c4c:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8002c50:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002c52:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002c56:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002c58:	b95a      	cbnz	r2, 8002c72 <HAL_RTC_GetDate+0x3e>
 8002c5a:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002c5c:	f7ff ffb6 	bl	8002bcc <RTC_Bcd2ToByte>
 8002c60:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002c62:	4630      	mov	r0, r6
 8002c64:	f7ff ffb2 	bl	8002bcc <RTC_Bcd2ToByte>
 8002c68:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f7ff ffae 	bl	8002bcc <RTC_Bcd2ToByte>
 8002c70:	70a0      	strb	r0, [r4, #2]
}
 8002c72:	2000      	movs	r0, #0
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c78 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c7a:	7f03      	ldrb	r3, [r0, #28]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d06d      	beq.n	8002d5c <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8002c80:	4615      	mov	r5, r2
 8002c82:	460e      	mov	r6, r1
 8002c84:	4604      	mov	r4, r0
 8002c86:	2301      	movs	r3, #1
 8002c88:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	22ca      	movs	r2, #202	; 0xca
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
 8002c94:	6803      	ldr	r3, [r0, #0]
 8002c96:	2253      	movs	r2, #83	; 0x53
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002c9a:	6803      	ldr	r3, [r0, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002ca2:	d015      	beq.n	8002cd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 8002ca4:	f7fe f950 	bl	8000f48 <HAL_GetTick>
 8002ca8:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f013 0f04 	tst.w	r3, #4
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002cb4:	f7fe f948 	bl	8000f48 <HAL_GetTick>
 8002cb8:	1bc0      	subs	r0, r0, r7
 8002cba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cbe:	d9f4      	bls.n	8002caa <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	22ff      	movs	r2, #255	; 0xff
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cc6:	2003      	movs	r0, #3
 8002cc8:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 8002cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002cd0:	6822      	ldr	r2, [r4, #0]
 8002cd2:	6893      	ldr	r3, [r2, #8]
 8002cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cd8:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002cda:	6822      	ldr	r2, [r4, #0]
 8002cdc:	68d3      	ldr	r3, [r2, #12]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002ce4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002ce6:	f7fe f92f 	bl	8000f48 <HAL_GetTick>
 8002cea:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	68d8      	ldr	r0, [r3, #12]
 8002cf0:	f010 0f04 	tst.w	r0, #4
 8002cf4:	d10d      	bne.n	8002d12 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002cf6:	f7fe f927 	bl	8000f48 <HAL_GetTick>
 8002cfa:	1bc0      	subs	r0, r0, r7
 8002cfc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d00:	d9f4      	bls.n	8002cec <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d08:	2003      	movs	r0, #3
 8002d0a:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 8002d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002d12:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	6893      	ldr	r3, [r2, #8]
 8002d18:	f023 0307 	bic.w	r3, r3, #7
 8002d1c:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	6893      	ldr	r3, [r2, #8]
 8002d22:	431d      	orrs	r5, r3
 8002d24:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d2e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d36:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002d38:	6822      	ldr	r2, [r4, #0]
 8002d3a:	6893      	ldr	r3, [r2, #8]
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d40:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d42:	6822      	ldr	r2, [r4, #0]
 8002d44:	6893      	ldr	r3, [r2, #8]
 8002d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d4a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	22ff      	movs	r2, #255	; 0xff
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d52:	2301      	movs	r3, #1
 8002d54:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d56:	2000      	movs	r0, #0
 8002d58:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 8002d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8002d5c:	2002      	movs	r0, #2
}
 8002d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002d64:	b510      	push	{r4, lr}
 8002d66:	4604      	mov	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002d68:	6803      	ldr	r3, [r0, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d70:	d106      	bne.n	8002d80 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002d78:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	7763      	strb	r3, [r4, #29]
 8002d7e:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002d80:	f001 f938 	bl	8003ff4 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d84:	6822      	ldr	r2, [r4, #0]
 8002d86:	68d3      	ldr	r3, [r2, #12]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002d8e:	60d3      	str	r3, [r2, #12]
 8002d90:	e7ef      	b.n	8002d72 <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 8002d92:	bf00      	nop
 8002d94:	40010400 	.word	0x40010400

08002d98 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002d98:	6803      	ldr	r3, [r0, #0]
 8002d9a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002d9c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002da0:	4770      	bx	lr

08002da2 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002da2:	6803      	ldr	r3, [r0, #0]
 8002da4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002da6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002daa:	4770      	bx	lr

08002dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db0:	6a04      	ldr	r4, [r0, #32]
 8002db2:	f024 0401 	bic.w	r4, r4, #1
 8002db6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002db8:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dba:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dbe:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dc2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002dc6:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dca:	6203      	str	r3, [r0, #32]
}
 8002dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd2:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd4:	6a03      	ldr	r3, [r0, #32]
 8002dd6:	f023 0310 	bic.w	r3, r3, #16
 8002dda:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ddc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002dde:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002de4:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dec:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002df2:	6203      	str	r3, [r0, #32]
}
 8002df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002dfa:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e00:	f041 0107 	orr.w	r1, r1, #7
 8002e04:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002e06:	6083      	str	r3, [r0, #8]
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e0a:	6802      	ldr	r2, [r0, #0]
 8002e0c:	68d3      	ldr	r3, [r2, #12]
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002e14:	6802      	ldr	r2, [r0, #0]
 8002e16:	6813      	ldr	r3, [r2, #0]
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]
}
 8002e1e:	2000      	movs	r0, #0
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8002e22:	4770      	bx	lr

08002e24 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIM_TriggerCallback>:
{
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_IRQHandler>:
{
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e2c:	6803      	ldr	r3, [r0, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	f012 0f02 	tst.w	r2, #2
 8002e34:	d011      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	f012 0f02 	tst.w	r2, #2
 8002e3c:	d00d      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e3e:	f06f 0202 	mvn.w	r2, #2
 8002e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f013 0f03 	tst.w	r3, #3
 8002e50:	d079      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002e52:	f001 f8c9 	bl	8003fe8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	2300      	movs	r3, #0
 8002e58:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	f012 0f04 	tst.w	r2, #4
 8002e62:	d012      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	f012 0f04 	tst.w	r2, #4
 8002e6a:	d00e      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e6c:	f06f 0204 	mvn.w	r2, #4
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e72:	2302      	movs	r3, #2
 8002e74:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002e7e:	d068      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e80:	4620      	mov	r0, r4
 8002e82:	f001 f8b1 	bl	8003fe8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	2300      	movs	r3, #0
 8002e88:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	f012 0f08 	tst.w	r2, #8
 8002e92:	d012      	beq.n	8002eba <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	f012 0f08 	tst.w	r2, #8
 8002e9a:	d00e      	beq.n	8002eba <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e9c:	f06f 0208 	mvn.w	r2, #8
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f013 0f03 	tst.w	r3, #3
 8002eae:	d057      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f001 f899 	bl	8003fe8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	f012 0f10 	tst.w	r2, #16
 8002ec2:	d012      	beq.n	8002eea <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	f012 0f10 	tst.w	r2, #16
 8002eca:	d00e      	beq.n	8002eea <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ecc:	f06f 0210 	mvn.w	r2, #16
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002ede:	d046      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f001 f881 	bl	8003fe8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	f012 0f01 	tst.w	r2, #1
 8002ef2:	d003      	beq.n	8002efc <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	f012 0f01 	tst.w	r2, #1
 8002efa:	d13f      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002f04:	d003      	beq.n	8002f0e <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002f0c:	d13d      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002f16:	d003      	beq.n	8002f20 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002f1e:	d13b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f30:	d139      	bne.n	8002fa6 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	f012 0f20 	tst.w	r2, #32
 8002f3a:	d003      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	f012 0f20 	tst.w	r2, #32
 8002f42:	d137      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x18c>
 8002f44:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	f7ff ff6c 	bl	8002e22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f7ff ff6a 	bl	8002e24 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f50:	e781      	b.n	8002e56 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	4620      	mov	r0, r4
 8002f54:	f7ff ff65 	bl	8002e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7ff ff63 	bl	8002e24 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f5e:	e792      	b.n	8002e86 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7ff ff5e 	bl	8002e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7ff ff5c 	bl	8002e24 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f6c:	e7a3      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff ff57 	bl	8002e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7ff ff55 	bl	8002e24 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f7a:	e7b4      	b.n	8002ee6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f7c:	f06f 0201 	mvn.w	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f82:	4620      	mov	r0, r4
 8002f84:	f001 fbdc 	bl	8004740 <HAL_TIM_PeriodElapsedCallback>
 8002f88:	e7b8      	b.n	8002efc <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f90:	4620      	mov	r0, r4
 8002f92:	f000 f93c 	bl	800320e <HAL_TIMEx_BreakCallback>
 8002f96:	e7ba      	b.n	8002f0e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 f936 	bl	8003210 <HAL_TIMEx_Break2Callback>
 8002fa4:	e7bc      	b.n	8002f20 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002faa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002fac:	4620      	mov	r0, r4
 8002fae:	f7ff ff3a 	bl	8002e26 <HAL_TIM_TriggerCallback>
 8002fb2:	e7be      	b.n	8002f32 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fb4:	f06f 0220 	mvn.w	r2, #32
 8002fb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f000 f926 	bl	800320c <HAL_TIMEx_CommutationCallback>
}
 8002fc0:	e7c0      	b.n	8002f44 <HAL_TIM_IRQHandler+0x11c>
	...

08002fc4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002fc4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc6:	4a23      	ldr	r2, [pc, #140]	; (8003054 <TIM_Base_SetConfig+0x90>)
 8002fc8:	4290      	cmp	r0, r2
 8002fca:	d03d      	beq.n	8003048 <TIM_Base_SetConfig+0x84>
 8002fcc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fd0:	d03a      	beq.n	8003048 <TIM_Base_SetConfig+0x84>
 8002fd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002fd6:	4290      	cmp	r0, r2
 8002fd8:	d036      	beq.n	8003048 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fda:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <TIM_Base_SetConfig+0x90>)
 8002fdc:	4290      	cmp	r0, r2
 8002fde:	d012      	beq.n	8003006 <TIM_Base_SetConfig+0x42>
 8002fe0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fe4:	d00f      	beq.n	8003006 <TIM_Base_SetConfig+0x42>
 8002fe6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002fea:	4290      	cmp	r0, r2
 8002fec:	d00b      	beq.n	8003006 <TIM_Base_SetConfig+0x42>
 8002fee:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8002ff2:	4290      	cmp	r0, r2
 8002ff4:	d007      	beq.n	8003006 <TIM_Base_SetConfig+0x42>
 8002ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ffa:	4290      	cmp	r0, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_Base_SetConfig+0x42>
 8002ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003002:	4290      	cmp	r0, r2
 8003004:	d103      	bne.n	800300e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300a:	68ca      	ldr	r2, [r1, #12]
 800300c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800300e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003012:	694a      	ldr	r2, [r1, #20]
 8003014:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003016:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003018:	688b      	ldr	r3, [r1, #8]
 800301a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <TIM_Base_SetConfig+0x90>)
 8003022:	4298      	cmp	r0, r3
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x7a>
 8003026:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800302a:	4298      	cmp	r0, r3
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x7a>
 800302e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003032:	4298      	cmp	r0, r3
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x7a>
 8003036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800303a:	4298      	cmp	r0, r3
 800303c:	d101      	bne.n	8003042 <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 800303e:	690b      	ldr	r3, [r1, #16]
 8003040:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003042:	2301      	movs	r3, #1
 8003044:	6143      	str	r3, [r0, #20]
 8003046:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800304c:	684a      	ldr	r2, [r1, #4]
 800304e:	4313      	orrs	r3, r2
 8003050:	e7c3      	b.n	8002fda <TIM_Base_SetConfig+0x16>
 8003052:	bf00      	nop
 8003054:	40012c00 	.word	0x40012c00

08003058 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8003058:	b1a8      	cbz	r0, 8003086 <HAL_TIM_Base_Init+0x2e>
{ 
 800305a:	b510      	push	{r4, lr}
 800305c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800305e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003062:	b15b      	cbz	r3, 800307c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8003064:	2302      	movs	r3, #2
 8003066:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800306a:	1d21      	adds	r1, r4, #4
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	f7ff ffa9 	bl	8002fc4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003072:	2301      	movs	r3, #1
 8003074:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003078:	2000      	movs	r0, #0
 800307a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800307c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003080:	f002 f936 	bl	80052f0 <HAL_TIM_Base_MspInit>
 8003084:	e7ee      	b.n	8003064 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003086:	2001      	movs	r0, #1
 8003088:	4770      	bx	lr

0800308a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800308a:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800308c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003092:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003096:	4319      	orrs	r1, r3
 8003098:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800309a:	6084      	str	r4, [r0, #8]
} 
 800309c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80030a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	f000 8082 	beq.w	80031b2 <HAL_TIM_ConfigClockSource+0x10e>
{
 80030ae:	b510      	push	{r4, lr}
 80030b0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80030b2:	2301      	movs	r3, #1
 80030b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80030be:	6802      	ldr	r2, [r0, #0]
 80030c0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c2:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <HAL_TIM_ConfigClockSource+0x114>)
 80030c4:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80030c6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80030c8:	680b      	ldr	r3, [r1, #0]
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d05d      	beq.n	800318a <HAL_TIM_ConfigClockSource+0xe6>
 80030ce:	d910      	bls.n	80030f2 <HAL_TIM_ConfigClockSource+0x4e>
 80030d0:	2b70      	cmp	r3, #112	; 0x70
 80030d2:	d040      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0xb2>
 80030d4:	d81f      	bhi.n	8003116 <HAL_TIM_ConfigClockSource+0x72>
 80030d6:	2b50      	cmp	r3, #80	; 0x50
 80030d8:	d04d      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xd2>
 80030da:	2b60      	cmp	r3, #96	; 0x60
 80030dc:	d134      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80030de:	68ca      	ldr	r2, [r1, #12]
 80030e0:	6849      	ldr	r1, [r1, #4]
 80030e2:	6820      	ldr	r0, [r4, #0]
 80030e4:	f7ff fe75 	bl	8002dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e8:	2160      	movs	r1, #96	; 0x60
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	f7ff fe85 	bl	8002dfa <TIM_ITRx_SetConfig>
    break;
 80030f0:	e02a      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d053      	beq.n	800319e <HAL_TIM_ConfigClockSource+0xfa>
 80030f6:	d908      	bls.n	800310a <HAL_TIM_ConfigClockSource+0x66>
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d055      	beq.n	80031a8 <HAL_TIM_ConfigClockSource+0x104>
 80030fc:	2b30      	cmp	r3, #48	; 0x30
 80030fe:	d123      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003100:	2130      	movs	r1, #48	; 0x30
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	f7ff fe79 	bl	8002dfa <TIM_ITRx_SetConfig>
    break;
 8003108:	e01e      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800310a:	b9eb      	cbnz	r3, 8003148 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800310c:	2100      	movs	r1, #0
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	f7ff fe73 	bl	8002dfa <TIM_ITRx_SetConfig>
    break;
 8003114:	e018      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	d00e      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x96>
 800311c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003120:	d112      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 8003122:	68cb      	ldr	r3, [r1, #12]
 8003124:	684a      	ldr	r2, [r1, #4]
 8003126:	6889      	ldr	r1, [r1, #8]
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	f7ff ffae 	bl	800308a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800312e:	6822      	ldr	r2, [r4, #0]
 8003130:	6893      	ldr	r3, [r2, #8]
 8003132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003136:	6093      	str	r3, [r2, #8]
    break;
 8003138:	e006      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	6893      	ldr	r3, [r2, #8]
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	f023 0307 	bic.w	r3, r3, #7
 8003146:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003148:	2301      	movs	r3, #1
 800314a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800314e:	2000      	movs	r0, #0
 8003150:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003154:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8003156:	68cb      	ldr	r3, [r1, #12]
 8003158:	684a      	ldr	r2, [r1, #4]
 800315a:	6889      	ldr	r1, [r1, #8]
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	f7ff ff94 	bl	800308a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800316e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003172:	6093      	str	r3, [r2, #8]
    break;
 8003174:	e7e8      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003176:	68ca      	ldr	r2, [r1, #12]
 8003178:	6849      	ldr	r1, [r1, #4]
 800317a:	6820      	ldr	r0, [r4, #0]
 800317c:	f7ff fe16 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003180:	2150      	movs	r1, #80	; 0x50
 8003182:	6820      	ldr	r0, [r4, #0]
 8003184:	f7ff fe39 	bl	8002dfa <TIM_ITRx_SetConfig>
    break;
 8003188:	e7de      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800318a:	68ca      	ldr	r2, [r1, #12]
 800318c:	6849      	ldr	r1, [r1, #4]
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	f7ff fe0c 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	6820      	ldr	r0, [r4, #0]
 8003198:	f7ff fe2f 	bl	8002dfa <TIM_ITRx_SetConfig>
    break;
 800319c:	e7d4      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800319e:	2110      	movs	r1, #16
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	f7ff fe2a 	bl	8002dfa <TIM_ITRx_SetConfig>
    break;
 80031a6:	e7cf      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80031a8:	2120      	movs	r1, #32
 80031aa:	6820      	ldr	r0, [r4, #0]
 80031ac:	f7ff fe25 	bl	8002dfa <TIM_ITRx_SetConfig>
    break;
 80031b0:	e7ca      	b.n	8003148 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 80031b2:	2002      	movs	r0, #2
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	fffe0088 	.word	0xfffe0088

080031bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80031bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d01f      	beq.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 80031c4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80031c6:	2301      	movs	r3, #1
 80031c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031cc:	6804      	ldr	r4, [r0, #0]
 80031ce:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031d2:	4d0d      	ldr	r5, [pc, #52]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 80031d4:	42ac      	cmp	r4, r5
 80031d6:	d010      	beq.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031dc:	680d      	ldr	r5, [r1, #0]
 80031de:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80031e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e4:	6889      	ldr	r1, [r1, #8]
 80031e6:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031e8:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031ea:	6803      	ldr	r3, [r0, #0]
 80031ec:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80031ee:	2300      	movs	r3, #0
 80031f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80031f4:	4618      	mov	r0, r3
} 
 80031f6:	bc30      	pop	{r4, r5}
 80031f8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031fe:	684d      	ldr	r5, [r1, #4]
 8003200:	432b      	orrs	r3, r5
 8003202:	e7e9      	b.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8003204:	2002      	movs	r0, #2
 8003206:	4770      	bx	lr
 8003208:	40012c00 	.word	0x40012c00

0800320c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800320c:	4770      	bx	lr

0800320e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800320e:	4770      	bx	lr

08003210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003210:	4770      	bx	lr

08003212 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003212:	6802      	ldr	r2, [r0, #0]
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800321a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321c:	6802      	ldr	r2, [r0, #0]
 800321e:	6893      	ldr	r3, [r2, #8]
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003226:	2320      	movs	r3, #32
 8003228:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800322c:	4770      	bx	lr

0800322e <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 800322e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d001      	beq.n	800323c <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8003238:	2002      	movs	r0, #2
 800323a:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 800323c:	b1b9      	cbz	r1, 800326e <HAL_UART_Transmit_IT+0x40>
 800323e:	b1c2      	cbz	r2, 8003272 <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 8003240:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003244:	2b01      	cmp	r3, #1
 8003246:	d016      	beq.n	8003276 <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 8003248:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 800324a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800324e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	2300      	movs	r3, #0
 8003254:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003256:	2221      	movs	r2, #33	; 0x21
 8003258:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800325c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003260:	6801      	ldr	r1, [r0, #0]
 8003262:	680a      	ldr	r2, [r1, #0]
 8003264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003268:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800326a:	4618      	mov	r0, r3
 800326c:	4770      	bx	lr
      return HAL_ERROR;
 800326e:	2001      	movs	r0, #1
 8003270:	4770      	bx	lr
 8003272:	2001      	movs	r0, #1
 8003274:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003276:	2002      	movs	r0, #2
}
 8003278:	4770      	bx	lr

0800327a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800327a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b20      	cmp	r3, #32
 8003282:	d001      	beq.n	8003288 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8003284:	2002      	movs	r0, #2
 8003286:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003288:	2900      	cmp	r1, #0
 800328a:	d047      	beq.n	800331c <HAL_UART_Receive_IT+0xa2>
 800328c:	2a00      	cmp	r2, #0
 800328e:	d047      	beq.n	8003320 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8003290:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003294:	2b01      	cmp	r3, #1
 8003296:	d045      	beq.n	8003324 <HAL_UART_Receive_IT+0xaa>
 8003298:	2301      	movs	r3, #1
 800329a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 800329e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80032a0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80032a4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80032a8:	6883      	ldr	r3, [r0, #8]
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ae:	d006      	beq.n	80032be <HAL_UART_Receive_IT+0x44>
 80032b0:	b9a3      	cbnz	r3, 80032dc <HAL_UART_Receive_IT+0x62>
 80032b2:	6903      	ldr	r3, [r0, #16]
 80032b4:	b973      	cbnz	r3, 80032d4 <HAL_UART_Receive_IT+0x5a>
 80032b6:	23ff      	movs	r3, #255	; 0xff
 80032b8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80032bc:	e011      	b.n	80032e2 <HAL_UART_Receive_IT+0x68>
 80032be:	6903      	ldr	r3, [r0, #16]
 80032c0:	b923      	cbnz	r3, 80032cc <HAL_UART_Receive_IT+0x52>
 80032c2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80032c6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80032ca:	e00a      	b.n	80032e2 <HAL_UART_Receive_IT+0x68>
 80032cc:	23ff      	movs	r3, #255	; 0xff
 80032ce:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80032d2:	e006      	b.n	80032e2 <HAL_UART_Receive_IT+0x68>
 80032d4:	237f      	movs	r3, #127	; 0x7f
 80032d6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80032da:	e002      	b.n	80032e2 <HAL_UART_Receive_IT+0x68>
 80032dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032e0:	d012      	beq.n	8003308 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032e6:	2222      	movs	r2, #34	; 0x22
 80032e8:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80032ec:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f0:	6801      	ldr	r1, [r0, #0]
 80032f2:	688a      	ldr	r2, [r1, #8]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032fa:	6801      	ldr	r1, [r0, #0]
 80032fc:	680a      	ldr	r2, [r1, #0]
 80032fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003302:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003304:	4618      	mov	r0, r3
 8003306:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8003308:	6903      	ldr	r3, [r0, #16]
 800330a:	b91b      	cbnz	r3, 8003314 <HAL_UART_Receive_IT+0x9a>
 800330c:	237f      	movs	r3, #127	; 0x7f
 800330e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003312:	e7e6      	b.n	80032e2 <HAL_UART_Receive_IT+0x68>
 8003314:	233f      	movs	r3, #63	; 0x3f
 8003316:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800331a:	e7e2      	b.n	80032e2 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 800331c:	2001      	movs	r0, #1
 800331e:	4770      	bx	lr
 8003320:	2001      	movs	r0, #1
 8003322:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003324:	2002      	movs	r0, #2
}
 8003326:	4770      	bx	lr

08003328 <HAL_UART_TxCpltCallback>:
{
 8003328:	4770      	bx	lr

0800332a <HAL_UART_ErrorCallback>:
{
 800332a:	4770      	bx	lr

0800332c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800332c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800332e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003336:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800333a:	f7ff fff6 	bl	800332a <HAL_UART_ErrorCallback>
 800333e:	bd08      	pop	{r3, pc}

08003340 <UART_SetConfig>:
{
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003344:	6883      	ldr	r3, [r0, #8]
 8003346:	6902      	ldr	r2, [r0, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	6942      	ldr	r2, [r0, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	69c2      	ldr	r2, [r0, #28]
 8003350:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003352:	6801      	ldr	r1, [r0, #0]
 8003354:	6808      	ldr	r0, [r1, #0]
 8003356:	4a64      	ldr	r2, [pc, #400]	; (80034e8 <UART_SetConfig+0x1a8>)
 8003358:	4002      	ands	r2, r0
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	6853      	ldr	r3, [r2, #4]
 8003362:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003366:	68e1      	ldr	r1, [r4, #12]
 8003368:	430b      	orrs	r3, r1
 800336a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800336c:	69a3      	ldr	r3, [r4, #24]
 800336e:	6a22      	ldr	r2, [r4, #32]
 8003370:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003372:	6821      	ldr	r1, [r4, #0]
 8003374:	688a      	ldr	r2, [r1, #8]
 8003376:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800337e:	6825      	ldr	r5, [r4, #0]
 8003380:	4b5a      	ldr	r3, [pc, #360]	; (80034ec <UART_SetConfig+0x1ac>)
 8003382:	429d      	cmp	r5, r3
 8003384:	d015      	beq.n	80033b2 <UART_SetConfig+0x72>
 8003386:	4b5a      	ldr	r3, [pc, #360]	; (80034f0 <UART_SetConfig+0x1b0>)
 8003388:	429d      	cmp	r5, r3
 800338a:	d029      	beq.n	80033e0 <UART_SetConfig+0xa0>
 800338c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003390:	429d      	cmp	r5, r3
 8003392:	d021      	beq.n	80033d8 <UART_SetConfig+0x98>
 8003394:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003396:	69e2      	ldr	r2, [r4, #28]
 8003398:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800339c:	d022      	beq.n	80033e4 <UART_SetConfig+0xa4>
    switch (clocksource)
 800339e:	2b08      	cmp	r3, #8
 80033a0:	f200 809f 	bhi.w	80034e2 <UART_SetConfig+0x1a2>
 80033a4:	e8df f003 	tbb	[pc, r3]
 80033a8:	9d7c7166 	.word	0x9d7c7166
 80033ac:	9d9d9d88 	.word	0x9d9d9d88
 80033b0:	93          	.byte	0x93
 80033b1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d809      	bhi.n	80033d4 <UART_SetConfig+0x94>
 80033c0:	e8df f003 	tbb	[pc, r3]
 80033c4:	0c060402 	.word	0x0c060402
 80033c8:	2300      	movs	r3, #0
 80033ca:	e7e4      	b.n	8003396 <UART_SetConfig+0x56>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e7e2      	b.n	8003396 <UART_SetConfig+0x56>
 80033d0:	2308      	movs	r3, #8
 80033d2:	e7e0      	b.n	8003396 <UART_SetConfig+0x56>
 80033d4:	2310      	movs	r3, #16
 80033d6:	e7de      	b.n	8003396 <UART_SetConfig+0x56>
 80033d8:	2300      	movs	r3, #0
 80033da:	e7dc      	b.n	8003396 <UART_SetConfig+0x56>
 80033dc:	2302      	movs	r3, #2
 80033de:	e7da      	b.n	8003396 <UART_SetConfig+0x56>
 80033e0:	2300      	movs	r3, #0
 80033e2:	e7d8      	b.n	8003396 <UART_SetConfig+0x56>
    switch (clocksource)
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d842      	bhi.n	800346e <UART_SetConfig+0x12e>
 80033e8:	e8df f003 	tbb	[pc, r3]
 80033ec:	41221705 	.word	0x41221705
 80033f0:	4141412d 	.word	0x4141412d
 80033f4:	38          	.byte	0x38
 80033f5:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80033f6:	f7ff f957 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80033fa:	6862      	ldr	r2, [r4, #4]
 80033fc:	0853      	lsrs	r3, r2, #1
 80033fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003402:	fbb3 f3f2 	udiv	r3, r3, r2
 8003406:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003408:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800340a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800340e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003412:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8003414:	6822      	ldr	r2, [r4, #0]
 8003416:	60d3      	str	r3, [r2, #12]
 8003418:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800341a:	f7ff f95b 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 800341e:	6862      	ldr	r2, [r4, #4]
 8003420:	0853      	lsrs	r3, r2, #1
 8003422:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003426:	fbb3 f3f2 	udiv	r3, r3, r2
 800342a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800342c:	2000      	movs	r0, #0
        break;
 800342e:	e7ec      	b.n	800340a <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003430:	6862      	ldr	r2, [r4, #4]
 8003432:	0853      	lsrs	r3, r2, #1
 8003434:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003438:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003442:	2000      	movs	r0, #0
        break;
 8003444:	e7e1      	b.n	800340a <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003446:	f7ff f807 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 800344a:	6862      	ldr	r2, [r4, #4]
 800344c:	0853      	lsrs	r3, r2, #1
 800344e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003452:	fbb3 f3f2 	udiv	r3, r3, r2
 8003456:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003458:	2000      	movs	r0, #0
        break;
 800345a:	e7d6      	b.n	800340a <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800345c:	6862      	ldr	r2, [r4, #4]
 800345e:	0853      	lsrs	r3, r2, #1
 8003460:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003464:	fbb3 f3f2 	udiv	r3, r3, r2
 8003468:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800346a:	2000      	movs	r0, #0
        break;
 800346c:	e7cd      	b.n	800340a <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 800346e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003470:	2300      	movs	r3, #0
 8003472:	e7ca      	b.n	800340a <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003474:	f7ff f918 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003478:	6863      	ldr	r3, [r4, #4]
 800347a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800347e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003482:	b280      	uxth	r0, r0
 8003484:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003486:	2000      	movs	r0, #0
        break;
 8003488:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800348a:	f7ff f923 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 800348e:	6863      	ldr	r3, [r4, #4]
 8003490:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003494:	fbb0 f0f3 	udiv	r0, r0, r3
 8003498:	b280      	uxth	r0, r0
 800349a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800349c:	2000      	movs	r0, #0
        break;
 800349e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80034a0:	6862      	ldr	r2, [r4, #4]
 80034a2:	0853      	lsrs	r3, r2, #1
 80034a4:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80034a8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80034ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b4:	2000      	movs	r0, #0
        break;
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034b8:	f7fe ffce 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 80034bc:	6863      	ldr	r3, [r4, #4]
 80034be:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80034c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80034c6:	b280      	uxth	r0, r0
 80034c8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ca:	2000      	movs	r0, #0
        break;
 80034cc:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	0853      	lsrs	r3, r2, #1
 80034d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80034d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034de:	2000      	movs	r0, #0
        break;
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 80034e2:	2001      	movs	r0, #1
}
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
 80034e6:	bf00      	nop
 80034e8:	efff69f3 	.word	0xefff69f3
 80034ec:	40013800 	.word	0x40013800
 80034f0:	40004400 	.word	0x40004400

080034f4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034f6:	f013 0f01 	tst.w	r3, #1
 80034fa:	d006      	beq.n	800350a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034fc:	6802      	ldr	r2, [r0, #0]
 80034fe:	6853      	ldr	r3, [r2, #4]
 8003500:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003504:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003506:	430b      	orrs	r3, r1
 8003508:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800350c:	f013 0f02 	tst.w	r3, #2
 8003510:	d006      	beq.n	8003520 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003512:	6802      	ldr	r2, [r0, #0]
 8003514:	6853      	ldr	r3, [r2, #4]
 8003516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800351c:	430b      	orrs	r3, r1
 800351e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003522:	f013 0f04 	tst.w	r3, #4
 8003526:	d006      	beq.n	8003536 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003528:	6802      	ldr	r2, [r0, #0]
 800352a:	6853      	ldr	r3, [r2, #4]
 800352c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003530:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003532:	430b      	orrs	r3, r1
 8003534:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003536:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003538:	f013 0f08 	tst.w	r3, #8
 800353c:	d006      	beq.n	800354c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800353e:	6802      	ldr	r2, [r0, #0]
 8003540:	6853      	ldr	r3, [r2, #4]
 8003542:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003546:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003548:	430b      	orrs	r3, r1
 800354a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800354c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800354e:	f013 0f10 	tst.w	r3, #16
 8003552:	d006      	beq.n	8003562 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003554:	6802      	ldr	r2, [r0, #0]
 8003556:	6893      	ldr	r3, [r2, #8]
 8003558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800355c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800355e:	430b      	orrs	r3, r1
 8003560:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003562:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003564:	f013 0f20 	tst.w	r3, #32
 8003568:	d006      	beq.n	8003578 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800356a:	6802      	ldr	r2, [r0, #0]
 800356c:	6893      	ldr	r3, [r2, #8]
 800356e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003572:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003574:	430b      	orrs	r3, r1
 8003576:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003578:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800357a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003580:	6802      	ldr	r2, [r0, #0]
 8003582:	6853      	ldr	r3, [r2, #4]
 8003584:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003588:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800358a:	430b      	orrs	r3, r1
 800358c:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800358e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003594:	d00b      	beq.n	80035ae <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003596:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003598:	f013 0f80 	tst.w	r3, #128	; 0x80
 800359c:	d006      	beq.n	80035ac <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800359e:	6802      	ldr	r2, [r0, #0]
 80035a0:	6853      	ldr	r3, [r2, #4]
 80035a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80035a6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6053      	str	r3, [r2, #4]
 80035ac:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ae:	6802      	ldr	r2, [r0, #0]
 80035b0:	6853      	ldr	r3, [r2, #4]
 80035b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035b6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6053      	str	r3, [r2, #4]
 80035bc:	e7eb      	b.n	8003596 <UART_AdvFeatureConfig+0xa2>

080035be <UART_WaitOnFlagUntilTimeout>:
{
 80035be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c2:	4605      	mov	r5, r0
 80035c4:	460f      	mov	r7, r1
 80035c6:	4616      	mov	r6, r2
 80035c8:	4698      	mov	r8, r3
 80035ca:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	ea37 0303 	bics.w	r3, r7, r3
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	42b3      	cmp	r3, r6
 80035dc:	d11e      	bne.n	800361c <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80035de:	f1b4 3fff 	cmp.w	r4, #4294967295
 80035e2:	d0f3      	beq.n	80035cc <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80035e4:	b12c      	cbz	r4, 80035f2 <UART_WaitOnFlagUntilTimeout+0x34>
 80035e6:	f7fd fcaf 	bl	8000f48 <HAL_GetTick>
 80035ea:	eba0 0008 	sub.w	r0, r0, r8
 80035ee:	4284      	cmp	r4, r0
 80035f0:	d2ec      	bcs.n	80035cc <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f2:	682a      	ldr	r2, [r5, #0]
 80035f4:	6813      	ldr	r3, [r2, #0]
 80035f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035fa:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	682a      	ldr	r2, [r5, #0]
 80035fe:	6893      	ldr	r3, [r2, #8]
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8003606:	2320      	movs	r3, #32
 8003608:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800360c:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003610:	2300      	movs	r3, #0
 8003612:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8003616:	2003      	movs	r0, #3
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800361c:	2000      	movs	r0, #0
}
 800361e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003622 <UART_CheckIdleState>:
{
 8003622:	b530      	push	{r4, r5, lr}
 8003624:	b083      	sub	sp, #12
 8003626:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003628:	2300      	movs	r3, #0
 800362a:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800362c:	f7fd fc8c 	bl	8000f48 <HAL_GetTick>
 8003630:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f013 0f08 	tst.w	r3, #8
 800363a:	d10e      	bne.n	800365a <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f013 0f04 	tst.w	r3, #4
 8003644:	d117      	bne.n	8003676 <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 8003646:	2320      	movs	r3, #32
 8003648:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800364c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8003650:	2000      	movs	r0, #0
 8003652:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8003656:	b003      	add	sp, #12
 8003658:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4603      	mov	r3, r0
 8003662:	2200      	movs	r2, #0
 8003664:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003668:	4620      	mov	r0, r4
 800366a:	f7ff ffa8 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 800366e:	2800      	cmp	r0, #0
 8003670:	d0e4      	beq.n	800363c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003672:	2003      	movs	r0, #3
 8003674:	e7ef      	b.n	8003656 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	462b      	mov	r3, r5
 800367e:	2200      	movs	r2, #0
 8003680:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003684:	4620      	mov	r0, r4
 8003686:	f7ff ff9a 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 800368a:	2800      	cmp	r0, #0
 800368c:	d0db      	beq.n	8003646 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800368e:	2003      	movs	r0, #3
 8003690:	e7e1      	b.n	8003656 <UART_CheckIdleState+0x34>

08003692 <HAL_UART_Init>:
  if(huart == NULL)
 8003692:	b378      	cbz	r0, 80036f4 <HAL_UART_Init+0x62>
{
 8003694:	b510      	push	{r4, lr}
 8003696:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003698:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800369c:	b30b      	cbz	r3, 80036e2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800369e:	2324      	movs	r3, #36	; 0x24
 80036a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80036a4:	6822      	ldr	r2, [r4, #0]
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ae:	4620      	mov	r0, r4
 80036b0:	f7ff fe46 	bl	8003340 <UART_SetConfig>
 80036b4:	2801      	cmp	r0, #1
 80036b6:	d01f      	beq.n	80036f8 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ba:	b9bb      	cbnz	r3, 80036ec <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	6853      	ldr	r3, [r2, #4]
 80036c0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80036c4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	6893      	ldr	r3, [r2, #8]
 80036ca:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80036ce:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80036d0:	6822      	ldr	r2, [r4, #0]
 80036d2:	6813      	ldr	r3, [r2, #0]
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80036da:	4620      	mov	r0, r4
 80036dc:	f7ff ffa1 	bl	8003622 <UART_CheckIdleState>
 80036e0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80036e2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80036e6:	f001 fe21 	bl	800532c <HAL_UART_MspInit>
 80036ea:	e7d8      	b.n	800369e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7ff ff01 	bl	80034f4 <UART_AdvFeatureConfig>
 80036f2:	e7e3      	b.n	80036bc <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80036f4:	2001      	movs	r0, #1
 80036f6:	4770      	bx	lr
}
 80036f8:	bd10      	pop	{r4, pc}

080036fa <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036fa:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b21      	cmp	r3, #33	; 0x21
 8003702:	d001      	beq.n	8003708 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8003704:	2002      	movs	r0, #2
  }
}
 8003706:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8003708:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800370c:	b29b      	uxth	r3, r3
 800370e:	b193      	cbz	r3, 8003736 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	6883      	ldr	r3, [r0, #8]
 8003712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003716:	d01a      	beq.n	800374e <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003718:	6802      	ldr	r2, [r0, #0]
 800371a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800371c:	1c59      	adds	r1, r3, #1
 800371e:	64c1      	str	r1, [r0, #76]	; 0x4c
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003724:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29b      	uxth	r3, r3
 800372e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8003732:	2000      	movs	r0, #0
 8003734:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003736:	6802      	ldr	r2, [r0, #0]
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373e:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003740:	6802      	ldr	r2, [r0, #0]
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003748:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800374a:	2000      	movs	r0, #0
 800374c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374e:	6903      	ldr	r3, [r0, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e1      	bne.n	8003718 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003754:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003756:	6802      	ldr	r2, [r0, #0]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003760:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003762:	3302      	adds	r3, #2
 8003764:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003766:	e7dd      	b.n	8003724 <UART_Transmit_IT+0x2a>

08003768 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003768:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800376a:	6801      	ldr	r1, [r0, #0]
 800376c:	680b      	ldr	r3, [r1, #0]
 800376e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003772:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003774:	2320      	movs	r3, #32
 8003776:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800377a:	f7ff fdd5 	bl	8003328 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800377e:	2000      	movs	r0, #0
 8003780:	bd08      	pop	{r3, pc}

08003782 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003782:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003786:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b22      	cmp	r3, #34	; 0x22
 800378e:	d006      	beq.n	800379e <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003790:	6802      	ldr	r2, [r0, #0]
 8003792:	6993      	ldr	r3, [r2, #24]
 8003794:	f043 0308 	orr.w	r3, r3, #8
 8003798:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800379a:	2002      	movs	r0, #2
 800379c:	4770      	bx	lr
{
 800379e:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037a0:	6803      	ldr	r3, [r0, #0]
 80037a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037a4:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a6:	6881      	ldr	r1, [r0, #8]
 80037a8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80037ac:	d00f      	beq.n	80037ce <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037ae:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80037b0:	1c4c      	adds	r4, r1, #1
 80037b2:	6544      	str	r4, [r0, #84]	; 0x54
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	401a      	ands	r2, r3
 80037b8:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 80037ba:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80037c8:	b15b      	cbz	r3, 80037e2 <UART_Receive_IT+0x60>
    return HAL_OK;
 80037ca:	2000      	movs	r0, #0
  }
}
 80037cc:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ce:	6901      	ldr	r1, [r0, #16]
 80037d0:	2900      	cmp	r1, #0
 80037d2:	d1ec      	bne.n	80037ae <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80037d4:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80037d6:	401a      	ands	r2, r3
 80037d8:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 80037da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80037dc:	3302      	adds	r3, #2
 80037de:	6543      	str	r3, [r0, #84]	; 0x54
 80037e0:	e7eb      	b.n	80037ba <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e2:	6802      	ldr	r2, [r0, #0]
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ea:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	6802      	ldr	r2, [r0, #0]
 80037ee:	6893      	ldr	r3, [r2, #8]
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80037f6:	2320      	movs	r3, #32
 80037f8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80037fc:	f000 fbe4 	bl	8003fc8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003800:	2000      	movs	r0, #0
 8003802:	bd10      	pop	{r4, pc}

08003804 <HAL_UART_IRQHandler>:
{
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003808:	6802      	ldr	r2, [r0, #0]
 800380a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800380c:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 800380e:	f013 050f 	ands.w	r5, r3, #15
 8003812:	d105      	bne.n	8003820 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003814:	f013 0f20 	tst.w	r3, #32
 8003818:	d002      	beq.n	8003820 <HAL_UART_IRQHandler+0x1c>
 800381a:	f011 0f20 	tst.w	r1, #32
 800381e:	d160      	bne.n	80038e2 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8003820:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8003822:	2d00      	cmp	r5, #0
 8003824:	d072      	beq.n	800390c <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003826:	f010 0501 	ands.w	r5, r0, #1
 800382a:	d102      	bne.n	8003832 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800382c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003830:	d06c      	beq.n	800390c <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003832:	f013 0f01 	tst.w	r3, #1
 8003836:	d007      	beq.n	8003848 <HAL_UART_IRQHandler+0x44>
 8003838:	f411 7f80 	tst.w	r1, #256	; 0x100
 800383c:	d004      	beq.n	8003848 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800383e:	2001      	movs	r0, #1
 8003840:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003842:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003844:	4302      	orrs	r2, r0
 8003846:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003848:	f013 0f02 	tst.w	r3, #2
 800384c:	d007      	beq.n	800385e <HAL_UART_IRQHandler+0x5a>
 800384e:	b135      	cbz	r5, 800385e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003850:	6822      	ldr	r2, [r4, #0]
 8003852:	2002      	movs	r0, #2
 8003854:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003856:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003858:	f042 0204 	orr.w	r2, r2, #4
 800385c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800385e:	f013 0f04 	tst.w	r3, #4
 8003862:	d007      	beq.n	8003874 <HAL_UART_IRQHandler+0x70>
 8003864:	b135      	cbz	r5, 8003874 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	2004      	movs	r0, #4
 800386a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800386c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800386e:	f042 0202 	orr.w	r2, r2, #2
 8003872:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003874:	f013 0f08 	tst.w	r3, #8
 8003878:	d009      	beq.n	800388e <HAL_UART_IRQHandler+0x8a>
 800387a:	f011 0f20 	tst.w	r1, #32
 800387e:	d100      	bne.n	8003882 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003880:	b12d      	cbz	r5, 800388e <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003882:	6822      	ldr	r2, [r4, #0]
 8003884:	2008      	movs	r0, #8
 8003886:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003888:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800388a:	4302      	orrs	r2, r0
 800388c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800388e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003890:	2a00      	cmp	r2, #0
 8003892:	d04d      	beq.n	8003930 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003894:	f013 0f20 	tst.w	r3, #32
 8003898:	d002      	beq.n	80038a0 <HAL_UART_IRQHandler+0x9c>
 800389a:	f011 0f20 	tst.w	r1, #32
 800389e:	d123      	bne.n	80038e8 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80038a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80038a2:	f013 0f08 	tst.w	r3, #8
 80038a6:	d104      	bne.n	80038b2 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80038ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038b0:	d026      	beq.n	8003900 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff fcad 	bl	8003212 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038c0:	d01a      	beq.n	80038f8 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80038ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038cc:	b183      	cbz	r3, 80038f0 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ce:	4a23      	ldr	r2, [pc, #140]	; (800395c <HAL_UART_IRQHandler+0x158>)
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038d2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80038d4:	f7fd ff54 	bl	8001780 <HAL_DMA_Abort_IT>
 80038d8:	b350      	cbz	r0, 8003930 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038da:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80038dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038de:	4798      	blx	r3
 80038e0:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 80038e2:	f7ff ff4e 	bl	8003782 <UART_Receive_IT>
      return;
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff ff4a 	bl	8003782 <UART_Receive_IT>
 80038ee:	e7d7      	b.n	80038a0 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff fd1a 	bl	800332a <HAL_UART_ErrorCallback>
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7ff fd16 	bl	800332a <HAL_UART_ErrorCallback>
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff fd12 	bl	800332a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	2300      	movs	r3, #0
 8003908:	66e3      	str	r3, [r4, #108]	; 0x6c
 800390a:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800390c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003910:	d002      	beq.n	8003918 <HAL_UART_IRQHandler+0x114>
 8003912:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003916:	d10c      	bne.n	8003932 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003918:	f013 0f80 	tst.w	r3, #128	; 0x80
 800391c:	d002      	beq.n	8003924 <HAL_UART_IRQHandler+0x120>
 800391e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003922:	d112      	bne.n	800394a <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003924:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003928:	d002      	beq.n	8003930 <HAL_UART_IRQHandler+0x12c>
 800392a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800392e:	d110      	bne.n	8003952 <HAL_UART_IRQHandler+0x14e>
 8003930:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003932:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003936:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003938:	2320      	movs	r3, #32
 800393a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800393e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003942:	4620      	mov	r0, r4
 8003944:	f000 f80c 	bl	8003960 <HAL_UARTEx_WakeupCallback>
    return;
 8003948:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 800394a:	4620      	mov	r0, r4
 800394c:	f7ff fed5 	bl	80036fa <UART_Transmit_IT>
    return;
 8003950:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff ff08 	bl	8003768 <UART_EndTransmit_IT>
    return;
 8003958:	e7ea      	b.n	8003930 <HAL_UART_IRQHandler+0x12c>
 800395a:	bf00      	nop
 800395c:	0800332d 	.word	0x0800332d

08003960 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003960:	4770      	bx	lr
 8003962:	0000      	movs	r0, r0
 8003964:	0000      	movs	r0, r0
	...

08003968 <adc_comms>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void adc_comms(){
 8003968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800396c:	ed2d 8b04 	vpush	{d8-d9}

	adc_raw_voltage =  ADC1_buffer[0];
 8003970:	4b77      	ldr	r3, [pc, #476]	; (8003b50 <adc_comms+0x1e8>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	4977      	ldr	r1, [pc, #476]	; (8003b54 <adc_comms+0x1ec>)
 8003978:	600b      	str	r3, [r1, #0]
	adc_raw_current =	ADC1_buffer[1];
 800397a:	4d77      	ldr	r5, [pc, #476]	; (8003b58 <adc_comms+0x1f0>)
 800397c:	6851      	ldr	r1, [r2, #4]
 800397e:	6029      	str	r1, [r5, #0]
	raw_ambient_temp = ADC1_buffer[2];
 8003980:	4c76      	ldr	r4, [pc, #472]	; (8003b5c <adc_comms+0x1f4>)
 8003982:	6891      	ldr	r1, [r2, #8]
 8003984:	6021      	str	r1, [r4, #0]
	raw_geyser_temp = ADC1_buffer[3];
 8003986:	68d1      	ldr	r1, [r2, #12]
 8003988:	4a75      	ldr	r2, [pc, #468]	; (8003b60 <adc_comms+0x1f8>)
 800398a:	6011      	str	r1, [r2, #0]


	//Converting Voltage
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003994:	ed9f 9a73 	vldr	s18, [pc, #460]	; 8003b64 <adc_comms+0x1fc>
 8003998:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800399c:	ed9f 8b6a 	vldr	d8, [pc, #424]	; 8003b48 <adc_comms+0x1e0>
 80039a0:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003b68 <adc_comms+0x200>
 80039a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039a8:	ee16 0a90 	vmov	r0, s13
 80039ac:	f7fc fdcc 	bl	8000548 <__aeabi_f2d>
 80039b0:	eeb0 1a48 	vmov.f32	s2, s16
 80039b4:	eef0 1a68 	vmov.f32	s3, s17
 80039b8:	ec41 0b10 	vmov	d0, r0, r1
 80039bc:	f002 ffb6 	bl	800692c <pow>
 80039c0:	ec59 8b10 	vmov	r8, r9, d0
 80039c4:	4e69      	ldr	r6, [pc, #420]	; (8003b6c <adc_comms+0x204>)
 80039c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80039ca:	f7fc fddb 	bl	8000584 <__aeabi_ul2d>
 80039ce:	4642      	mov	r2, r8
 80039d0:	464b      	mov	r3, r9
 80039d2:	f7fc fc5b 	bl	800028c <__adddf3>
 80039d6:	f7fd f8f3 	bl	8000bc0 <__aeabi_d2ulz>
 80039da:	e9c6 0100 	strd	r0, r1, [r6]

	//Converting Current
	adc_buffer_current = (pow((adc_raw_current-2072.202f)/0.14603f,2))+adc_buffer_current;
 80039de:	edd5 7a00 	vldr	s15, [r5]
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80039ea:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003b70 <adc_comms+0x208>
 80039ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039f2:	ee16 0a90 	vmov	r0, s13
 80039f6:	f7fc fda7 	bl	8000548 <__aeabi_f2d>
 80039fa:	eeb0 1a48 	vmov.f32	s2, s16
 80039fe:	eef0 1a68 	vmov.f32	s3, s17
 8003a02:	ec41 0b10 	vmov	d0, r0, r1
 8003a06:	f002 ff91 	bl	800692c <pow>
 8003a0a:	ec57 6b10 	vmov	r6, r7, d0
 8003a0e:	4d59      	ldr	r5, [pc, #356]	; (8003b74 <adc_comms+0x20c>)
 8003a10:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003a14:	f7fc fdb6 	bl	8000584 <__aeabi_ul2d>
 8003a18:	4632      	mov	r2, r6
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	f7fc fc36 	bl	800028c <__adddf3>
 8003a20:	f7fd f8ce 	bl	8000bc0 <__aeabi_d2ulz>
 8003a24:	e9c5 0100 	strd	r0, r1, [r5]

	//Converting Ambient temperature
	if( (raw_ambient_temp-615)/12.3f < 100){
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	f2a3 2367 	subw	r3, r3, #615	; 0x267
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a36:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003b78 <adc_comms+0x210>
 8003a3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a3e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8003b7c <adc_comms+0x214>
 8003a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4a:	d41d      	bmi.n	8003a88 <adc_comms+0x120>
		raw_ambient_temp = (raw_ambient_temp-615)/12.3f;
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-615)/12.3f < 100){
 8003a4c:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <adc_comms+0x1f8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f2a3 2367 	subw	r3, r3, #615	; 0x267
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003b78 <adc_comms+0x210>
 8003a60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a64:	eddf 7a45 	vldr	s15, [pc, #276]	; 8003b7c <adc_comms+0x214>
 8003a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a70:	d417      	bmi.n	8003aa2 <adc_comms+0x13a>
		raw_geyser_temp = (raw_geyser_temp-615)/12.3f;
		geyser_temp_int = raw_geyser_temp;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
	}

	adc_counter += 1;
 8003a72:	4a43      	ldr	r2, [pc, #268]	; (8003b80 <adc_comms+0x218>)
 8003a74:	8813      	ldrh	r3, [r2, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	8013      	strh	r3, [r2, #0]
	if(adc_counter == 10){
 8003a7c:	2b0a      	cmp	r3, #10
 8003a7e:	d01f      	beq.n	8003ac0 <adc_comms+0x158>

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}

}
 8003a80:	ecbd 8b04 	vpop	{d8-d9}
 8003a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		raw_ambient_temp = (raw_ambient_temp-615)/12.3f;
 8003a88:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003a8c:	ee17 2a90 	vmov	r2, s15
 8003a90:	4623      	mov	r3, r4
 8003a92:	edc3 7a00 	vstr	s15, [r3]
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003a96:	493b      	ldr	r1, [pc, #236]	; (8003b84 <adc_comms+0x21c>)
 8003a98:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <adc_comms+0x220>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	f002 faa6 	bl	8005fec <siprintf>
 8003aa0:	e7d4      	b.n	8003a4c <adc_comms+0xe4>
		raw_geyser_temp = (raw_geyser_temp-615)/12.3f;
 8003aa2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003aa6:	ee17 2a90 	vmov	r2, s15
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <adc_comms+0x1f8>)
 8003aac:	edc3 7a00 	vstr	s15, [r3]
		geyser_temp_int = raw_geyser_temp;
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <adc_comms+0x224>)
 8003ab2:	701a      	strb	r2, [r3, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003ab4:	4933      	ldr	r1, [pc, #204]	; (8003b84 <adc_comms+0x21c>)
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <adc_comms+0x228>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	f002 fa97 	bl	8005fec <siprintf>
 8003abe:	e7d8      	b.n	8003a72 <adc_comms+0x10a>
		*voltage_int_rms = sqrt(adc_buffer_voltage/10);
 8003ac0:	4e34      	ldr	r6, [pc, #208]	; (8003b94 <adc_comms+0x22c>)
 8003ac2:	6834      	ldr	r4, [r6, #0]
 8003ac4:	4d29      	ldr	r5, [pc, #164]	; (8003b6c <adc_comms+0x204>)
 8003ac6:	220a      	movs	r2, #10
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003ace:	f7fd f85f 	bl	8000b90 <__aeabi_uldivmod>
 8003ad2:	f7fc fd57 	bl	8000584 <__aeabi_ul2d>
 8003ad6:	ec41 0b10 	vmov	d0, r0, r1
 8003ada:	f003 f89f 	bl	8006c1c <sqrt>
 8003ade:	ec51 0b10 	vmov	r0, r1, d0
 8003ae2:	f7fd f835 	bl	8000b50 <__aeabi_d2uiz>
 8003ae6:	6020      	str	r0, [r4, #0]
		*current_int_rms = sqrt(adc_buffer_current/10);
 8003ae8:	4f2b      	ldr	r7, [pc, #172]	; (8003b98 <adc_comms+0x230>)
 8003aea:	f8d7 8000 	ldr.w	r8, [r7]
 8003aee:	4c21      	ldr	r4, [pc, #132]	; (8003b74 <adc_comms+0x20c>)
 8003af0:	220a      	movs	r2, #10
 8003af2:	2300      	movs	r3, #0
 8003af4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003af8:	f7fd f84a 	bl	8000b90 <__aeabi_uldivmod>
 8003afc:	f7fc fd42 	bl	8000584 <__aeabi_ul2d>
 8003b00:	ec41 0b10 	vmov	d0, r0, r1
 8003b04:	f003 f88a 	bl	8006c1c <sqrt>
 8003b08:	ec51 0b10 	vmov	r0, r1, d0
 8003b0c:	f7fd f820 	bl	8000b50 <__aeabi_d2uiz>
 8003b10:	f8c8 0000 	str.w	r0, [r8]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8003b14:	6833      	ldr	r3, [r6, #0]
 8003b16:	4e1b      	ldr	r6, [pc, #108]	; (8003b84 <adc_comms+0x21c>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <adc_comms+0x234>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	f002 fa64 	bl	8005fec <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4631      	mov	r1, r6
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <adc_comms+0x238>)
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	f002 fa5d 	bl	8005fec <siprintf>
		adc_counter = 0;
 8003b32:	2200      	movs	r2, #0
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <adc_comms+0x218>)
 8003b36:	801a      	strh	r2, [r3, #0]
		adc_buffer_voltage = 0;
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e9c5 2300 	strd	r2, r3, [r5]
		adc_buffer_current = 0;
 8003b40:	e9c4 2300 	strd	r2, r3, [r4]
}
 8003b44:	e79c      	b.n	8003a80 <adc_comms+0x118>
 8003b46:	bf00      	nop
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	40000000 	.word	0x40000000
 8003b50:	20000224 	.word	0x20000224
 8003b54:	20000248 	.word	0x20000248
 8003b58:	20000244 	.word	0x20000244
 8003b5c:	20000298 	.word	0x20000298
 8003b60:	2000029c 	.word	0x2000029c
 8003b64:	4501833b 	.word	0x4501833b
 8003b68:	3c0d60a6 	.word	0x3c0d60a6
 8003b6c:	20000238 	.word	0x20000238
 8003b70:	3e1588e3 	.word	0x3e1588e3
 8003b74:	20000230 	.word	0x20000230
 8003b78:	4144cccd 	.word	0x4144cccd
 8003b7c:	42c80000 	.word	0x42c80000
 8003b80:	20000240 	.word	0x20000240
 8003b84:	08007b08 	.word	0x08007b08
 8003b88:	2000024c 	.word	0x2000024c
 8003b8c:	20000274 	.word	0x20000274
 8003b90:	20000270 	.word	0x20000270
 8003b94:	200002d8 	.word	0x200002d8
 8003b98:	20000254 	.word	0x20000254
 8003b9c:	200002dc 	.word	0x200002dc
 8003ba0:	20000258 	.word	0x20000258

08003ba4 <write2Flash>:
extern RTC_HandleTypeDef hrtc;




void write2Flash(){
 8003ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(log_counter < 100){
 8003ba8:	4bbd      	ldr	r3, [pc, #756]	; (8003ea0 <write2Flash+0x2fc>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b63      	cmp	r3, #99	; 0x63
 8003bae:	d90b      	bls.n	8003bc8 <write2Flash+0x24>
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 8003bb0:	2232      	movs	r2, #50	; 0x32
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4bbb      	ldr	r3, [pc, #748]	; (8003ea4 <write2Flash+0x300>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	f002 f953 	bl	8005e62 <memset>


			log_counter += 1;
 8003bbc:	4ab8      	ldr	r2, [pc, #736]	; (8003ea0 <write2Flash+0x2fc>)
 8003bbe:	7813      	ldrb	r3, [r2, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	7013      	strb	r3, [r2, #0]
 8003bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8003bc8:	4fb7      	ldr	r7, [pc, #732]	; (8003ea8 <write2Flash+0x304>)
 8003bca:	4cb8      	ldr	r4, [pc, #736]	; (8003eac <write2Flash+0x308>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	6839      	ldr	r1, [r7, #0]
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f7ff f804 	bl	8002bde <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	4bb5      	ldr	r3, [pc, #724]	; (8003eb0 <write2Flash+0x30c>)
 8003bda:	6819      	ldr	r1, [r3, #0]
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff f829 	bl	8002c34 <HAL_RTC_GetDate>
		itoa((time->Hours),temp_time_var,10  );
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	4eb3      	ldr	r6, [pc, #716]	; (8003eb4 <write2Flash+0x310>)
 8003be6:	220a      	movs	r2, #10
 8003be8:	6831      	ldr	r1, [r6, #0]
 8003bea:	7818      	ldrb	r0, [r3, #0]
 8003bec:	f002 f924 	bl	8005e38 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003bf0:	4cac      	ldr	r4, [pc, #688]	; (8003ea4 <write2Flash+0x300>)
 8003bf2:	6825      	ldr	r5, [r4, #0]
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f7fc faeb 	bl	80001d0 <strlen>
 8003bfa:	4405      	add	r5, r0
 8003bfc:	f8d6 8000 	ldr.w	r8, [r6]
 8003c00:	4640      	mov	r0, r8
 8003c02:	f7fc fae5 	bl	80001d0 <strlen>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4641      	mov	r1, r8
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f002 f91e 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003c10:	f8d4 8000 	ldr.w	r8, [r4]
 8003c14:	4640      	mov	r0, r8
 8003c16:	f7fc fadb 	bl	80001d0 <strlen>
 8003c1a:	4da7      	ldr	r5, [pc, #668]	; (8003eb8 <write2Flash+0x314>)
 8003c1c:	782b      	ldrb	r3, [r5, #0]
 8003c1e:	f808 3000 	strb.w	r3, [r8, r0]
		itoa((time->Minutes),temp_time_var,10  );
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	220a      	movs	r2, #10
 8003c26:	6831      	ldr	r1, [r6, #0]
 8003c28:	7858      	ldrb	r0, [r3, #1]
 8003c2a:	f002 f905 	bl	8005e38 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003c2e:	f8d4 8000 	ldr.w	r8, [r4]
 8003c32:	4640      	mov	r0, r8
 8003c34:	f7fc facc 	bl	80001d0 <strlen>
 8003c38:	4480      	add	r8, r0
 8003c3a:	f8d6 9000 	ldr.w	r9, [r6]
 8003c3e:	4648      	mov	r0, r9
 8003c40:	f7fc fac6 	bl	80001d0 <strlen>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4649      	mov	r1, r9
 8003c48:	4640      	mov	r0, r8
 8003c4a:	f002 f8ff 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003c4e:	f8d4 8000 	ldr.w	r8, [r4]
 8003c52:	4640      	mov	r0, r8
 8003c54:	f7fc fabc 	bl	80001d0 <strlen>
 8003c58:	782b      	ldrb	r3, [r5, #0]
 8003c5a:	f808 3000 	strb.w	r3, [r8, r0]
		itoa((time->Seconds),temp_time_var,10  );
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	220a      	movs	r2, #10
 8003c62:	6831      	ldr	r1, [r6, #0]
 8003c64:	7898      	ldrb	r0, [r3, #2]
 8003c66:	f002 f8e7 	bl	8005e38 <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003c6a:	6827      	ldr	r7, [r4, #0]
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f7fc faaf 	bl	80001d0 <strlen>
 8003c72:	4407      	add	r7, r0
 8003c74:	6836      	ldr	r6, [r6, #0]
 8003c76:	4630      	mov	r0, r6
 8003c78:	f7fc faaa 	bl	80001d0 <strlen>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4638      	mov	r0, r7
 8003c82:	f002 f8e3 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003c86:	6826      	ldr	r6, [r4, #0]
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f7fc faa1 	bl	80001d0 <strlen>
 8003c8e:	782b      	ldrb	r3, [r5, #0]
 8003c90:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 8003c92:	6826      	ldr	r6, [r4, #0]
 8003c94:	4630      	mov	r0, r6
 8003c96:	f7fc fa9b 	bl	80001d0 <strlen>
 8003c9a:	4406      	add	r6, r0
 8003c9c:	4b87      	ldr	r3, [pc, #540]	; (8003ebc <write2Flash+0x318>)
 8003c9e:	681f      	ldr	r7, [r3, #0]
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	f7fc fa95 	bl	80001d0 <strlen>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4639      	mov	r1, r7
 8003caa:	4630      	mov	r0, r6
 8003cac:	f002 f8ce 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003cb0:	6826      	ldr	r6, [r4, #0]
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f7fc fa8c 	bl	80001d0 <strlen>
 8003cb8:	782b      	ldrb	r3, [r5, #0]
 8003cba:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 8003cbc:	6826      	ldr	r6, [r4, #0]
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f7fc fa86 	bl	80001d0 <strlen>
 8003cc4:	4406      	add	r6, r0
 8003cc6:	4b7e      	ldr	r3, [pc, #504]	; (8003ec0 <write2Flash+0x31c>)
 8003cc8:	681f      	ldr	r7, [r3, #0]
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f7fc fa80 	bl	80001d0 <strlen>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f002 f8b9 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003cda:	6826      	ldr	r6, [r4, #0]
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f7fc fa77 	bl	80001d0 <strlen>
 8003ce2:	782b      	ldrb	r3, [r5, #0]
 8003ce4:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 8003ce6:	6826      	ldr	r6, [r4, #0]
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f7fc fa71 	bl	80001d0 <strlen>
 8003cee:	4406      	add	r6, r0
 8003cf0:	4b74      	ldr	r3, [pc, #464]	; (8003ec4 <write2Flash+0x320>)
 8003cf2:	681f      	ldr	r7, [r3, #0]
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f7fc fa6b 	bl	80001d0 <strlen>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	4639      	mov	r1, r7
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f002 f8a4 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003d04:	6826      	ldr	r6, [r4, #0]
 8003d06:	4630      	mov	r0, r6
 8003d08:	f7fc fa62 	bl	80001d0 <strlen>
 8003d0c:	782b      	ldrb	r3, [r5, #0]
 8003d0e:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8003d10:	6826      	ldr	r6, [r4, #0]
 8003d12:	4630      	mov	r0, r6
 8003d14:	f7fc fa5c 	bl	80001d0 <strlen>
 8003d18:	4406      	add	r6, r0
 8003d1a:	4b6b      	ldr	r3, [pc, #428]	; (8003ec8 <write2Flash+0x324>)
 8003d1c:	681f      	ldr	r7, [r3, #0]
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f7fc fa56 	bl	80001d0 <strlen>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4639      	mov	r1, r7
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f002 f88f 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003d2e:	6826      	ldr	r6, [r4, #0]
 8003d30:	4630      	mov	r0, r6
 8003d32:	f7fc fa4d 	bl	80001d0 <strlen>
 8003d36:	782b      	ldrb	r3, [r5, #0]
 8003d38:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8003d3a:	6826      	ldr	r6, [r4, #0]
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7fc fa47 	bl	80001d0 <strlen>
 8003d42:	4406      	add	r6, r0
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <write2Flash+0x328>)
 8003d46:	681f      	ldr	r7, [r3, #0]
 8003d48:	4638      	mov	r0, r7
 8003d4a:	f7fc fa41 	bl	80001d0 <strlen>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4639      	mov	r1, r7
 8003d52:	4630      	mov	r0, r6
 8003d54:	f002 f87a 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003d58:	6826      	ldr	r6, [r4, #0]
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	f7fc fa38 	bl	80001d0 <strlen>
 8003d60:	782b      	ldrb	r3, [r5, #0]
 8003d62:	5433      	strb	r3, [r6, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 8003d64:	6826      	ldr	r6, [r4, #0]
 8003d66:	4630      	mov	r0, r6
 8003d68:	f7fc fa32 	bl	80001d0 <strlen>
 8003d6c:	4406      	add	r6, r0
 8003d6e:	4b58      	ldr	r3, [pc, #352]	; (8003ed0 <write2Flash+0x32c>)
 8003d70:	681f      	ldr	r7, [r3, #0]
 8003d72:	4638      	mov	r0, r7
 8003d74:	f7fc fa2c 	bl	80001d0 <strlen>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f002 f865 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003d82:	6824      	ldr	r4, [r4, #0]
 8003d84:	4620      	mov	r0, r4
 8003d86:	f7fc fa23 	bl	80001d0 <strlen>
 8003d8a:	782b      	ldrb	r3, [r5, #0]
 8003d8c:	5423      	strb	r3, [r4, r0]
		if(valve_state == valve_OPEN){
 8003d8e:	4b51      	ldr	r3, [pc, #324]	; (8003ed4 <write2Flash+0x330>)
 8003d90:	681d      	ldr	r5, [r3, #0]
 8003d92:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <write2Flash+0x334>)
 8003d94:	429d      	cmp	r5, r3
 8003d96:	d073      	beq.n	8003e80 <write2Flash+0x2dc>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 8003d98:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <write2Flash+0x300>)
 8003d9a:	681c      	ldr	r4, [r3, #0]
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7fc fa17 	bl	80001d0 <strlen>
 8003da2:	4404      	add	r4, r0
 8003da4:	4628      	mov	r0, r5
 8003da6:	f7fc fa13 	bl	80001d0 <strlen>
 8003daa:	4602      	mov	r2, r0
 8003dac:	4629      	mov	r1, r5
 8003dae:	4620      	mov	r0, r4
 8003db0:	f002 f84c 	bl	8005e4c <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <write2Flash+0x300>)
 8003db6:	681c      	ldr	r4, [r3, #0]
 8003db8:	4620      	mov	r0, r4
 8003dba:	f7fc fa09 	bl	80001d0 <strlen>
 8003dbe:	4b47      	ldr	r3, [pc, #284]	; (8003edc <write2Flash+0x338>)
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	5223      	strh	r3, [r4, r0]
		if(log_counter == 0){
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <write2Flash+0x2fc>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8097 	beq.w	8003efc <write2Flash+0x358>
			HAL_FLASH_Unlock();
 8003dce:	f7fd fd83 	bl	80018d8 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008000+64*log_counter, *((uint64_t*)(flash_stored)) );
 8003dd2:	4d33      	ldr	r5, [pc, #204]	; (8003ea0 <write2Flash+0x2fc>)
 8003dd4:	7829      	ldrb	r1, [r5, #0]
 8003dd6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8003dda:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8003dde:	4c31      	ldr	r4, [pc, #196]	; (8003ea4 <write2Flash+0x300>)
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	0189      	lsls	r1, r1, #6
 8003de8:	2003      	movs	r0, #3
 8003dea:	f7fd fdc5 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008008+64*log_counter, *((uint64_t*)(flash_stored)+1) );
 8003dee:	7828      	ldrb	r0, [r5, #0]
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003df6:	493a      	ldr	r1, [pc, #232]	; (8003ee0 <write2Flash+0x33c>)
 8003df8:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003dfc:	2003      	movs	r0, #3
 8003dfe:	f7fd fdbb 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008010+64*log_counter, *((uint64_t*)(flash_stored)+2) );
 8003e02:	7828      	ldrb	r0, [r5, #0]
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e0a:	4936      	ldr	r1, [pc, #216]	; (8003ee4 <write2Flash+0x340>)
 8003e0c:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003e10:	2003      	movs	r0, #3
 8003e12:	f7fd fdb1 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008018+64*log_counter, *((uint64_t*)(flash_stored)+3) );
 8003e16:	7828      	ldrb	r0, [r5, #0]
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003e1e:	4932      	ldr	r1, [pc, #200]	; (8003ee8 <write2Flash+0x344>)
 8003e20:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003e24:	2003      	movs	r0, #3
 8003e26:	f7fd fda7 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008020+64*log_counter, *((uint64_t*)(flash_stored)+4) );
 8003e2a:	7828      	ldrb	r0, [r5, #0]
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e32:	492e      	ldr	r1, [pc, #184]	; (8003eec <write2Flash+0x348>)
 8003e34:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003e38:	2003      	movs	r0, #3
 8003e3a:	f7fd fd9d 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008028+64*log_counter, *((uint64_t*)(flash_stored)+5) );
 8003e3e:	7828      	ldrb	r0, [r5, #0]
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003e46:	492a      	ldr	r1, [pc, #168]	; (8003ef0 <write2Flash+0x34c>)
 8003e48:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003e4c:	2003      	movs	r0, #3
 8003e4e:	f7fd fd93 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008030+64*log_counter, *((uint64_t*)(flash_stored+56)) );
 8003e52:	7828      	ldrb	r0, [r5, #0]
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003e5a:	4926      	ldr	r1, [pc, #152]	; (8003ef4 <write2Flash+0x350>)
 8003e5c:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003e60:	2003      	movs	r0, #3
 8003e62:	f7fd fd89 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008038+64*log_counter, *((uint64_t*)(flash_stored+64)) );
 8003e66:	7828      	ldrb	r0, [r5, #0]
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003e6e:	4922      	ldr	r1, [pc, #136]	; (8003ef8 <write2Flash+0x354>)
 8003e70:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8003e74:	2003      	movs	r0, #3
 8003e76:	f7fd fd7f 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8003e7a:	f7fd fd41 	bl	8001900 <HAL_FLASH_Lock>
 8003e7e:	e697      	b.n	8003bb0 <write2Flash+0xc>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <write2Flash+0x300>)
 8003e82:	681c      	ldr	r4, [r3, #0]
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7fc f9a3 	bl	80001d0 <strlen>
 8003e8a:	4404      	add	r4, r0
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	f7fc f99f 	bl	80001d0 <strlen>
 8003e92:	1e42      	subs	r2, r0, #1
 8003e94:	4629      	mov	r1, r5
 8003e96:	4620      	mov	r0, r4
 8003e98:	f001 ffd8 	bl	8005e4c <memcpy>
 8003e9c:	e78a      	b.n	8003db4 <write2Flash+0x210>
 8003e9e:	bf00      	nop
 8003ea0:	2000028c 	.word	0x2000028c
 8003ea4:	2000026c 	.word	0x2000026c
 8003ea8:	200002bc 	.word	0x200002bc
 8003eac:	20000470 	.word	0x20000470
 8003eb0:	2000025c 	.word	0x2000025c
 8003eb4:	200002b4 	.word	0x200002b4
 8003eb8:	20000004 	.word	0x20000004
 8003ebc:	20000258 	.word	0x20000258
 8003ec0:	200002dc 	.word	0x200002dc
 8003ec4:	2000024c 	.word	0x2000024c
 8003ec8:	20000270 	.word	0x20000270
 8003ecc:	200002c0 	.word	0x200002c0
 8003ed0:	20000284 	.word	0x20000284
 8003ed4:	200002d4 	.word	0x200002d4
 8003ed8:	2000002c 	.word	0x2000002c
 8003edc:	20000008 	.word	0x20000008
 8003ee0:	08008008 	.word	0x08008008
 8003ee4:	08008010 	.word	0x08008010
 8003ee8:	08008018 	.word	0x08008018
 8003eec:	08008020 	.word	0x08008020
 8003ef0:	08008028 	.word	0x08008028
 8003ef4:	08008030 	.word	0x08008030
 8003ef8:	08008038 	.word	0x08008038
			HAL_FLASH_Unlock();
 8003efc:	f7fd fcec 	bl	80018d8 <HAL_FLASH_Unlock>
			pEraseInit->NbPages = 1;
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <write2Flash+0x3f8>)
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	2101      	movs	r1, #1
 8003f06:	6099      	str	r1, [r3, #8]
			pEraseInit->PageAddress = (uint32_t)(0x08008000);
 8003f08:	4d25      	ldr	r5, [pc, #148]	; (8003fa0 <write2Flash+0x3fc>)
 8003f0a:	605d      	str	r5, [r3, #4]
			pEraseInit->TypeErase = (uint32_t)FLASH_TYPEERASE_PAGES;
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	6019      	str	r1, [r3, #0]
			HAL_FLASHEx_Erase(pEraseInit,flash_error);
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <write2Flash+0x400>)
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	6810      	ldr	r0, [r2, #0]
 8003f16:	f7fd fda1 	bl	8001a5c <HAL_FLASHEx_Erase>
			HAL_FLASH_Lock();
 8003f1a:	f7fd fcf1 	bl	8001900 <HAL_FLASH_Lock>
			HAL_FLASH_Unlock();
 8003f1e:	f7fd fcdb 	bl	80018d8 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008000, *((uint64_t*)(flash_stored)) );
 8003f22:	4c21      	ldr	r4, [pc, #132]	; (8003fa8 <write2Flash+0x404>)
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	2003      	movs	r0, #3
 8003f2e:	f7fd fd23 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008008, *((uint64_t*)(flash_stored)+1) );
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f38:	491c      	ldr	r1, [pc, #112]	; (8003fac <write2Flash+0x408>)
 8003f3a:	2003      	movs	r0, #3
 8003f3c:	f7fd fd1c 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008010, *((uint64_t*)(flash_stored)+2) );
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f46:	491a      	ldr	r1, [pc, #104]	; (8003fb0 <write2Flash+0x40c>)
 8003f48:	2003      	movs	r0, #3
 8003f4a:	f7fd fd15 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008018, *((uint64_t*)(flash_stored)+3) );
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f54:	4917      	ldr	r1, [pc, #92]	; (8003fb4 <write2Flash+0x410>)
 8003f56:	2003      	movs	r0, #3
 8003f58:	f7fd fd0e 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008020, *((uint64_t*)(flash_stored)+4) );
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f62:	4915      	ldr	r1, [pc, #84]	; (8003fb8 <write2Flash+0x414>)
 8003f64:	2003      	movs	r0, #3
 8003f66:	f7fd fd07 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008028, *((uint64_t*)(flash_stored)+5) );
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003f70:	4912      	ldr	r1, [pc, #72]	; (8003fbc <write2Flash+0x418>)
 8003f72:	2003      	movs	r0, #3
 8003f74:	f7fd fd00 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008030, *((uint64_t*)(flash_stored)+6) );
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003f7e:	4910      	ldr	r1, [pc, #64]	; (8003fc0 <write2Flash+0x41c>)
 8003f80:	2003      	movs	r0, #3
 8003f82:	f7fd fcf9 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008038, *((uint64_t*)(flash_stored)+7) );
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003f8c:	490d      	ldr	r1, [pc, #52]	; (8003fc4 <write2Flash+0x420>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f7fd fcf2 	bl	8001978 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8003f94:	f7fd fcb4 	bl	8001900 <HAL_FLASH_Lock>
 8003f98:	e60a      	b.n	8003bb0 <write2Flash+0xc>
 8003f9a:	bf00      	nop
 8003f9c:	20000294 	.word	0x20000294
 8003fa0:	08008000 	.word	0x08008000
 8003fa4:	20000268 	.word	0x20000268
 8003fa8:	2000026c 	.word	0x2000026c
 8003fac:	08008008 	.word	0x08008008
 8003fb0:	08008010 	.word	0x08008010
 8003fb4:	08008018 	.word	0x08008018
 8003fb8:	08008020 	.word	0x08008020
 8003fbc:	08008028 	.word	0x08008028
 8003fc0:	08008030 	.word	0x08008030
 8003fc4:	08008038 	.word	0x08008038

08003fc8 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003fc8:	b508      	push	{r3, lr}
	rx_flag = 1;
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4b03      	ldr	r3, [pc, #12]	; (8003fdc <HAL_UART_RxCpltCallback+0x14>)
 8003fce:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8003fd0:	4903      	ldr	r1, [pc, #12]	; (8003fe0 <HAL_UART_RxCpltCallback+0x18>)
 8003fd2:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <HAL_UART_RxCpltCallback+0x1c>)
 8003fd4:	f7ff f951 	bl	800327a <HAL_UART_Receive_IT>
 8003fd8:	bd08      	pop	{r3, pc}
 8003fda:	bf00      	nop
 8003fdc:	200002a5 	.word	0x200002a5
 8003fe0:	200005ac 	.word	0x200005ac
 8003fe4:	20000400 	.word	0x20000400

08003fe8 <HAL_TIM_IC_CaptureCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4b01      	ldr	r3, [pc, #4]	; (8003ff0 <HAL_TIM_IC_CaptureCallback+0x8>)
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	4770      	bx	lr
 8003ff0:	200002b9 	.word	0x200002b9

08003ff4 <HAL_RTCEx_WakeUpTimerEventCallback>:
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	4b01      	ldr	r3, [pc, #4]	; (8003ffc <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	4770      	bx	lr
 8003ffc:	200002a4 	.word	0x200002a4

08004000 <heating_control>:
		}
	}
}


void heating_control(){
 8004000:	b508      	push	{r3, lr}
	if(geyser_temp_int - *set_temp > 2.5f || *set_temp - geyser_temp_int > 2.5f){
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <heating_control+0x60>)
 8004004:	781a      	ldrb	r2, [r3, #0]
 8004006:	4b17      	ldr	r3, [pc, #92]	; (8004064 <heating_control+0x64>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	1ad1      	subs	r1, r2, r3
 800400e:	ee07 1a90 	vmov	s15, r1
 8004012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004016:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800401a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	dc09      	bgt.n	8004038 <heating_control+0x38>
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800402e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004036:	dd09      	ble.n	800404c <heating_control+0x4c>
		heater_state = heater_ON;
 8004038:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <heating_control+0x68>)
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <heating_control+0x6c>)
 800403c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800403e:	2200      	movs	r2, #0
 8004040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004044:	480a      	ldr	r0, [pc, #40]	; (8004070 <heating_control+0x70>)
 8004046:	f7fd fe25 	bl	8001c94 <HAL_GPIO_WritePin>
 800404a:	bd08      	pop	{r3, pc}
	}
	else{
		heater_state = heater_OFF;
 800404c:	4a09      	ldr	r2, [pc, #36]	; (8004074 <heating_control+0x74>)
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <heating_control+0x6c>)
 8004050:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004052:	2200      	movs	r2, #0
 8004054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004058:	4805      	ldr	r0, [pc, #20]	; (8004070 <heating_control+0x70>)
 800405a:	f7fd fe1b 	bl	8001c94 <HAL_GPIO_WritePin>
 800405e:	bd08      	pop	{r3, pc}
 8004060:	20000274 	.word	0x20000274
 8004064:	200002ac 	.word	0x200002ac
 8004068:	20000018 	.word	0x20000018
 800406c:	20000284 	.word	0x20000284
 8004070:	48000400 	.word	0x48000400
 8004074:	20000014 	.word	0x20000014

08004078 <heating_scheduling>:
void heating_scheduling(){
 8004078:	b538      	push	{r3, r4, r5, lr}
	if(auto_heating == 1){
 800407a:	4b82      	ldr	r3, [pc, #520]	; (8004284 <heating_scheduling+0x20c>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d000      	beq.n	8004084 <heating_scheduling+0xc>
 8004082:	bd38      	pop	{r3, r4, r5, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004084:	4c80      	ldr	r4, [pc, #512]	; (8004288 <heating_scheduling+0x210>)
 8004086:	4d81      	ldr	r5, [pc, #516]	; (800428c <heating_scheduling+0x214>)
 8004088:	2200      	movs	r2, #0
 800408a:	6821      	ldr	r1, [r4, #0]
 800408c:	4628      	mov	r0, r5
 800408e:	f7fe fda6 	bl	8002bde <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8004092:	2200      	movs	r2, #0
 8004094:	4b7e      	ldr	r3, [pc, #504]	; (8004290 <heating_scheduling+0x218>)
 8004096:	6819      	ldr	r1, [r3, #0]
 8004098:	4628      	mov	r0, r5
 800409a:	f7fe fdcb 	bl	8002c34 <HAL_RTC_GetDate>
		if( (time->Hours - heating_schedule[0].Hours) > 0 && (time->Hours - heating_schedule[1].Hours) < 0){
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	7813      	ldrb	r3, [r2, #0]
 80040a2:	497c      	ldr	r1, [pc, #496]	; (8004294 <heating_scheduling+0x21c>)
 80040a4:	7809      	ldrb	r1, [r1, #0]
 80040a6:	1a58      	subs	r0, r3, r1
 80040a8:	2800      	cmp	r0, #0
 80040aa:	dd04      	ble.n	80040b6 <heating_scheduling+0x3e>
 80040ac:	4879      	ldr	r0, [pc, #484]	; (8004294 <heating_scheduling+0x21c>)
 80040ae:	7d00      	ldrb	r0, [r0, #20]
 80040b0:	1a18      	subs	r0, r3, r0
 80040b2:	2800      	cmp	r0, #0
 80040b4:	db4d      	blt.n	8004152 <heating_scheduling+0xda>
		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 80040b6:	428b      	cmp	r3, r1
 80040b8:	d04e      	beq.n	8004158 <heating_scheduling+0xe0>
 80040ba:	4876      	ldr	r0, [pc, #472]	; (8004294 <heating_scheduling+0x21c>)
 80040bc:	7d00      	ldrb	r0, [r0, #20]
 80040be:	4283      	cmp	r3, r0
 80040c0:	d04a      	beq.n	8004158 <heating_scheduling+0xe0>
		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 80040c2:	428b      	cmp	r3, r1
 80040c4:	d05d      	beq.n	8004182 <heating_scheduling+0x10a>
 80040c6:	4973      	ldr	r1, [pc, #460]	; (8004294 <heating_scheduling+0x21c>)
 80040c8:	7d09      	ldrb	r1, [r1, #20]
 80040ca:	428b      	cmp	r3, r1
 80040cc:	d059      	beq.n	8004182 <heating_scheduling+0x10a>
		else if( (time->Hours - heating_schedule[2].Hours) > 0 && (time->Hours - heating_schedule[3].Hours) < 0){
 80040ce:	4971      	ldr	r1, [pc, #452]	; (8004294 <heating_scheduling+0x21c>)
 80040d0:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80040d4:	1a58      	subs	r0, r3, r1
 80040d6:	2800      	cmp	r0, #0
 80040d8:	dd05      	ble.n	80040e6 <heating_scheduling+0x6e>
 80040da:	486e      	ldr	r0, [pc, #440]	; (8004294 <heating_scheduling+0x21c>)
 80040dc:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80040e0:	1a18      	subs	r0, r3, r0
 80040e2:	2800      	cmp	r0, #0
 80040e4:	db64      	blt.n	80041b0 <heating_scheduling+0x138>
		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 80040e6:	428b      	cmp	r3, r1
 80040e8:	d065      	beq.n	80041b6 <heating_scheduling+0x13e>
 80040ea:	486a      	ldr	r0, [pc, #424]	; (8004294 <heating_scheduling+0x21c>)
 80040ec:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80040f0:	4283      	cmp	r3, r0
 80040f2:	d060      	beq.n	80041b6 <heating_scheduling+0x13e>
		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 80040f4:	428b      	cmp	r3, r1
 80040f6:	d075      	beq.n	80041e4 <heating_scheduling+0x16c>
 80040f8:	4966      	ldr	r1, [pc, #408]	; (8004294 <heating_scheduling+0x21c>)
 80040fa:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 80040fe:	428b      	cmp	r3, r1
 8004100:	d070      	beq.n	80041e4 <heating_scheduling+0x16c>
		else if( (time->Hours - heating_schedule[4].Hours) > 0 && (time->Hours - heating_schedule[5].Hours) < 0){
 8004102:	4964      	ldr	r1, [pc, #400]	; (8004294 <heating_scheduling+0x21c>)
 8004104:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 8004108:	1a58      	subs	r0, r3, r1
 800410a:	2800      	cmp	r0, #0
 800410c:	dd06      	ble.n	800411c <heating_scheduling+0xa4>
 800410e:	4861      	ldr	r0, [pc, #388]	; (8004294 <heating_scheduling+0x21c>)
 8004110:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 8004114:	1a18      	subs	r0, r3, r0
 8004116:	2800      	cmp	r0, #0
 8004118:	f2c0 8081 	blt.w	800421e <heating_scheduling+0x1a6>
		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 800411c:	428b      	cmp	r3, r1
 800411e:	f000 8081 	beq.w	8004224 <heating_scheduling+0x1ac>
 8004122:	485c      	ldr	r0, [pc, #368]	; (8004294 <heating_scheduling+0x21c>)
 8004124:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 8004128:	4283      	cmp	r3, r0
 800412a:	d07b      	beq.n	8004224 <heating_scheduling+0x1ac>
		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 800412c:	428b      	cmp	r3, r1
 800412e:	f000 808b 	beq.w	8004248 <heating_scheduling+0x1d0>
 8004132:	4958      	ldr	r1, [pc, #352]	; (8004294 <heating_scheduling+0x21c>)
 8004134:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
 8004138:	428b      	cmp	r3, r1
 800413a:	f000 8085 	beq.w	8004248 <heating_scheduling+0x1d0>
			heater_state = heater_OFF;
 800413e:	4a56      	ldr	r2, [pc, #344]	; (8004298 <heating_scheduling+0x220>)
 8004140:	4b56      	ldr	r3, [pc, #344]	; (800429c <heating_scheduling+0x224>)
 8004142:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004144:	2201      	movs	r2, #1
 8004146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800414a:	4855      	ldr	r0, [pc, #340]	; (80042a0 <heating_scheduling+0x228>)
 800414c:	f7fd fda2 	bl	8001c94 <HAL_GPIO_WritePin>
}
 8004150:	e797      	b.n	8004082 <heating_scheduling+0xa>
			heating_control();
 8004152:	f7ff ff55 	bl	8004000 <heating_control>
 8004156:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 8004158:	7850      	ldrb	r0, [r2, #1]
 800415a:	4c4e      	ldr	r4, [pc, #312]	; (8004294 <heating_scheduling+0x21c>)
 800415c:	7864      	ldrb	r4, [r4, #1]
 800415e:	1b04      	subs	r4, r0, r4
 8004160:	2c00      	cmp	r4, #0
 8004162:	ddae      	ble.n	80040c2 <heating_scheduling+0x4a>
 8004164:	4c4b      	ldr	r4, [pc, #300]	; (8004294 <heating_scheduling+0x21c>)
 8004166:	7d64      	ldrb	r4, [r4, #21]
 8004168:	1b00      	subs	r0, r0, r4
 800416a:	2800      	cmp	r0, #0
 800416c:	daa9      	bge.n	80040c2 <heating_scheduling+0x4a>
			heater_state = heater_ON;
 800416e:	4a4d      	ldr	r2, [pc, #308]	; (80042a4 <heating_scheduling+0x22c>)
 8004170:	4b4a      	ldr	r3, [pc, #296]	; (800429c <heating_scheduling+0x224>)
 8004172:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800417a:	4849      	ldr	r0, [pc, #292]	; (80042a0 <heating_scheduling+0x228>)
 800417c:	f7fd fd8a 	bl	8001c94 <HAL_GPIO_WritePin>
 8004180:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[0].Minutes == 0) || (time->Minutes - heating_schedule[1].Minutes == 0) )
 8004182:	7851      	ldrb	r1, [r2, #1]
 8004184:	4843      	ldr	r0, [pc, #268]	; (8004294 <heating_scheduling+0x21c>)
 8004186:	7840      	ldrb	r0, [r0, #1]
 8004188:	4281      	cmp	r1, r0
 800418a:	d003      	beq.n	8004194 <heating_scheduling+0x11c>
 800418c:	4841      	ldr	r0, [pc, #260]	; (8004294 <heating_scheduling+0x21c>)
 800418e:	7d40      	ldrb	r0, [r0, #21]
 8004190:	4281      	cmp	r1, r0
 8004192:	d19c      	bne.n	80040ce <heating_scheduling+0x56>
				&& ( (time->Seconds - heating_schedule[0].Seconds > 0) && (time->Seconds - heating_schedule[1].Seconds < 0) ) ){
 8004194:	7891      	ldrb	r1, [r2, #2]
 8004196:	483f      	ldr	r0, [pc, #252]	; (8004294 <heating_scheduling+0x21c>)
 8004198:	7880      	ldrb	r0, [r0, #2]
 800419a:	1a08      	subs	r0, r1, r0
 800419c:	2800      	cmp	r0, #0
 800419e:	dd96      	ble.n	80040ce <heating_scheduling+0x56>
 80041a0:	483c      	ldr	r0, [pc, #240]	; (8004294 <heating_scheduling+0x21c>)
 80041a2:	7d80      	ldrb	r0, [r0, #22]
 80041a4:	1a09      	subs	r1, r1, r0
 80041a6:	2900      	cmp	r1, #0
 80041a8:	da91      	bge.n	80040ce <heating_scheduling+0x56>
			heating_control();
 80041aa:	f7ff ff29 	bl	8004000 <heating_control>
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
			heating_control();
 80041b0:	f7ff ff26 	bl	8004000 <heating_control>
 80041b4:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 80041b6:	7850      	ldrb	r0, [r2, #1]
 80041b8:	4c36      	ldr	r4, [pc, #216]	; (8004294 <heating_scheduling+0x21c>)
 80041ba:	f894 4029 	ldrb.w	r4, [r4, #41]	; 0x29
 80041be:	1b04      	subs	r4, r0, r4
 80041c0:	2c00      	cmp	r4, #0
 80041c2:	dd97      	ble.n	80040f4 <heating_scheduling+0x7c>
 80041c4:	4c33      	ldr	r4, [pc, #204]	; (8004294 <heating_scheduling+0x21c>)
 80041c6:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
 80041ca:	1b00      	subs	r0, r0, r4
 80041cc:	2800      	cmp	r0, #0
 80041ce:	da91      	bge.n	80040f4 <heating_scheduling+0x7c>
			heater_state = heater_ON;
 80041d0:	4a34      	ldr	r2, [pc, #208]	; (80042a4 <heating_scheduling+0x22c>)
 80041d2:	4b32      	ldr	r3, [pc, #200]	; (800429c <heating_scheduling+0x224>)
 80041d4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80041d6:	2200      	movs	r2, #0
 80041d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041dc:	4830      	ldr	r0, [pc, #192]	; (80042a0 <heating_scheduling+0x228>)
 80041de:	f7fd fd59 	bl	8001c94 <HAL_GPIO_WritePin>
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[2].Minutes == 0) || (time->Minutes - heating_schedule[3].Minutes == 0) )
 80041e4:	7851      	ldrb	r1, [r2, #1]
 80041e6:	482b      	ldr	r0, [pc, #172]	; (8004294 <heating_scheduling+0x21c>)
 80041e8:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80041ec:	4281      	cmp	r1, r0
 80041ee:	d004      	beq.n	80041fa <heating_scheduling+0x182>
 80041f0:	4828      	ldr	r0, [pc, #160]	; (8004294 <heating_scheduling+0x21c>)
 80041f2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80041f6:	4281      	cmp	r1, r0
 80041f8:	d183      	bne.n	8004102 <heating_scheduling+0x8a>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
 80041fa:	7891      	ldrb	r1, [r2, #2]
 80041fc:	4825      	ldr	r0, [pc, #148]	; (8004294 <heating_scheduling+0x21c>)
 80041fe:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8004202:	1a08      	subs	r0, r1, r0
 8004204:	2800      	cmp	r0, #0
 8004206:	f77f af7c 	ble.w	8004102 <heating_scheduling+0x8a>
 800420a:	4822      	ldr	r0, [pc, #136]	; (8004294 <heating_scheduling+0x21c>)
 800420c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8004210:	1a09      	subs	r1, r1, r0
 8004212:	2900      	cmp	r1, #0
 8004214:	f6bf af75 	bge.w	8004102 <heating_scheduling+0x8a>
			heating_control();
 8004218:	f7ff fef2 	bl	8004000 <heating_control>
 800421c:	bd38      	pop	{r3, r4, r5, pc}
			heating_control();
 800421e:	f7ff feef 	bl	8004000 <heating_control>
 8004222:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 8004224:	7850      	ldrb	r0, [r2, #1]
 8004226:	4c1b      	ldr	r4, [pc, #108]	; (8004294 <heating_scheduling+0x21c>)
 8004228:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
 800422c:	1b04      	subs	r4, r0, r4
 800422e:	2c00      	cmp	r4, #0
 8004230:	f77f af7c 	ble.w	800412c <heating_scheduling+0xb4>
 8004234:	4c17      	ldr	r4, [pc, #92]	; (8004294 <heating_scheduling+0x21c>)
 8004236:	f894 4065 	ldrb.w	r4, [r4, #101]	; 0x65
 800423a:	1b00      	subs	r0, r0, r4
 800423c:	2800      	cmp	r0, #0
 800423e:	f6bf af75 	bge.w	800412c <heating_scheduling+0xb4>
			heating_control();
 8004242:	f7ff fedd 	bl	8004000 <heating_control>
 8004246:	bd38      	pop	{r3, r4, r5, pc}
				&& ( (time->Minutes - heating_schedule[4].Minutes == 0) || (time->Minutes - heating_schedule[5].Minutes == 0) )
 8004248:	7853      	ldrb	r3, [r2, #1]
 800424a:	4912      	ldr	r1, [pc, #72]	; (8004294 <heating_scheduling+0x21c>)
 800424c:	f891 1051 	ldrb.w	r1, [r1, #81]	; 0x51
 8004250:	428b      	cmp	r3, r1
 8004252:	d005      	beq.n	8004260 <heating_scheduling+0x1e8>
 8004254:	490f      	ldr	r1, [pc, #60]	; (8004294 <heating_scheduling+0x21c>)
 8004256:	f891 1065 	ldrb.w	r1, [r1, #101]	; 0x65
 800425a:	428b      	cmp	r3, r1
 800425c:	f47f af6f 	bne.w	800413e <heating_scheduling+0xc6>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
 8004260:	7893      	ldrb	r3, [r2, #2]
 8004262:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <heating_scheduling+0x21c>)
 8004264:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8004268:	1a9a      	subs	r2, r3, r2
 800426a:	2a00      	cmp	r2, #0
 800426c:	f77f af67 	ble.w	800413e <heating_scheduling+0xc6>
 8004270:	4a08      	ldr	r2, [pc, #32]	; (8004294 <heating_scheduling+0x21c>)
 8004272:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	f6bf af60 	bge.w	800413e <heating_scheduling+0xc6>
			heating_control();
 800427e:	f7ff febf 	bl	8004000 <heating_control>
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	20000250 	.word	0x20000250
 8004288:	200002bc 	.word	0x200002bc
 800428c:	20000470 	.word	0x20000470
 8004290:	2000025c 	.word	0x2000025c
 8004294:	20000530 	.word	0x20000530
 8004298:	20000014 	.word	0x20000014
 800429c:	20000284 	.word	0x20000284
 80042a0:	48000400 	.word	0x48000400
 80042a4:	20000018 	.word	0x20000018

080042a8 <init_peripherals>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 80042a8:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 80042aa:	2201      	movs	r2, #1
 80042ac:	2120      	movs	r1, #32
 80042ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042b2:	f7fd fcef 	bl	8001c94 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 80042b6:	2201      	movs	r2, #1
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042be:	f7fd fce9 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 80042c2:	2201      	movs	r2, #1
 80042c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042cc:	f7fd fce2 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80042d0:	2201      	movs	r2, #1
 80042d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042da:	f7fd fcdb 	bl	8001c94 <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 80042de:	4c88      	ldr	r4, [pc, #544]	; (8004500 <init_peripherals+0x258>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	2108      	movs	r1, #8
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7fd fcd5 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 80042ea:	2201      	movs	r2, #1
 80042ec:	2110      	movs	r1, #16
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7fd fcd0 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 80042f4:	2201      	movs	r2, #1
 80042f6:	2120      	movs	r1, #32
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fd fccb 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 80042fe:	2201      	movs	r2, #1
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	4620      	mov	r0, r4
 8004304:	f7fd fcc6 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004308:	2201      	movs	r2, #1
 800430a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800430e:	4620      	mov	r0, r4
 8004310:	f7fd fcc0 	bl	8001c94 <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 8004314:	2201      	movs	r2, #1
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	487a      	ldr	r0, [pc, #488]	; (8004504 <init_peripherals+0x25c>)
 800431a:	f7fd fcbb 	bl	8001c94 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 800431e:	2200      	movs	r2, #0
 8004320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004324:	4620      	mov	r0, r4
 8004326:	f7fd fcb5 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 800432a:	2201      	movs	r2, #1
 800432c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004330:	4620      	mov	r0, r4
 8004332:	f7fd fcaf 	bl	8001c94 <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 8004336:	200f      	movs	r0, #15
 8004338:	f001 fd80 	bl	8005e3c <malloc>
 800433c:	4b72      	ldr	r3, [pc, #456]	; (8004508 <init_peripherals+0x260>)
 800433e:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 8004340:	2400      	movs	r4, #0
 8004342:	6004      	str	r4, [r0, #0]
 8004344:	6044      	str	r4, [r0, #4]
 8004346:	6084      	str	r4, [r0, #8]
 8004348:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 800434c:	2032      	movs	r0, #50	; 0x32
 800434e:	f001 fd75 	bl	8005e3c <malloc>
 8004352:	4b6e      	ldr	r3, [pc, #440]	; (800450c <init_peripherals+0x264>)
 8004354:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 8004356:	2232      	movs	r2, #50	; 0x32
 8004358:	4621      	mov	r1, r4
 800435a:	f001 fd82 	bl	8005e62 <memset>

	uart_command = (uint8_t*)malloc(60);
 800435e:	203c      	movs	r0, #60	; 0x3c
 8004360:	f001 fd6c 	bl	8005e3c <malloc>
 8004364:	4e6a      	ldr	r6, [pc, #424]	; (8004510 <init_peripherals+0x268>)
 8004366:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 8004368:	253c      	movs	r5, #60	; 0x3c
 800436a:	462a      	mov	r2, r5
 800436c:	4621      	mov	r1, r4
 800436e:	f001 fd78 	bl	8005e62 <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 8004372:	4628      	mov	r0, r5
 8004374:	f001 fd62 	bl	8005e3c <malloc>
 8004378:	4b66      	ldr	r3, [pc, #408]	; (8004514 <init_peripherals+0x26c>)
 800437a:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 800437c:	462a      	mov	r2, r5
 800437e:	4621      	mov	r1, r4
 8004380:	6830      	ldr	r0, [r6, #0]
 8004382:	f001 fd6e 	bl	8005e62 <memset>


	set_temp = (uint8_t*)malloc(3);
 8004386:	2003      	movs	r0, #3
 8004388:	f001 fd58 	bl	8005e3c <malloc>
 800438c:	4b62      	ldr	r3, [pc, #392]	; (8004518 <init_peripherals+0x270>)
 800438e:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 8004390:	6004      	str	r4, [r0, #0]

	segment_val =set_temp;
 8004392:	4b62      	ldr	r3, [pc, #392]	; (800451c <init_peripherals+0x274>)
 8004394:	6018      	str	r0, [r3, #0]
	//	  memset(segment_val, 0x00, 4);

	ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 8004396:	201c      	movs	r0, #28
 8004398:	f001 fd50 	bl	8005e3c <malloc>
 800439c:	4b60      	ldr	r3, [pc, #384]	; (8004520 <init_peripherals+0x278>)
 800439e:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 7);
 80043a0:	6004      	str	r4, [r0, #0]
 80043a2:	f8c0 4003 	str.w	r4, [r0, #3]

	ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 80043a6:	201c      	movs	r0, #28
 80043a8:	f001 fd48 	bl	8005e3c <malloc>
 80043ac:	4b5d      	ldr	r3, [pc, #372]	; (8004524 <init_peripherals+0x27c>)
 80043ae:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 7);
 80043b0:	6004      	str	r4, [r0, #0]
 80043b2:	f8c0 4003 	str.w	r4, [r0, #3]

	voltage_rms =(char*)malloc(3*sizeof(char));
 80043b6:	2003      	movs	r0, #3
 80043b8:	f001 fd40 	bl	8005e3c <malloc>
 80043bc:	4b5a      	ldr	r3, [pc, #360]	; (8004528 <init_peripherals+0x280>)
 80043be:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 80043c0:	8004      	strh	r4, [r0, #0]
 80043c2:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 80043c4:	2004      	movs	r0, #4
 80043c6:	f001 fd39 	bl	8005e3c <malloc>
 80043ca:	4b58      	ldr	r3, [pc, #352]	; (800452c <init_peripherals+0x284>)
 80043cc:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 80043ce:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 80043d0:	2014      	movs	r0, #20
 80043d2:	f001 fd33 	bl	8005e3c <malloc>
 80043d6:	4a56      	ldr	r2, [pc, #344]	; (8004530 <init_peripherals+0x288>)
 80043d8:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 80043da:	6004      	str	r4, [r0, #0]
 80043dc:	6044      	str	r4, [r0, #4]
 80043de:	6084      	str	r4, [r0, #8]
 80043e0:	60c4      	str	r4, [r0, #12]
 80043e2:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 80043e4:	4b53      	ldr	r3, [pc, #332]	; (8004534 <init_peripherals+0x28c>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4953      	ldr	r1, [pc, #332]	; (8004538 <init_peripherals+0x290>)
 80043ea:	f001 fdff 	bl	8005fec <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80043ee:	2010      	movs	r0, #16
 80043f0:	f001 fd24 	bl	8005e3c <malloc>
 80043f4:	4b51      	ldr	r3, [pc, #324]	; (800453c <init_peripherals+0x294>)
 80043f6:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 80043f8:	2010      	movs	r0, #16
 80043fa:	f001 fd1f 	bl	8005e3c <malloc>
 80043fe:	4b50      	ldr	r3, [pc, #320]	; (8004540 <init_peripherals+0x298>)
 8004400:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 8004402:	2004      	movs	r0, #4
 8004404:	f001 fd1a 	bl	8005e3c <malloc>
 8004408:	4b4e      	ldr	r3, [pc, #312]	; (8004544 <init_peripherals+0x29c>)
 800440a:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 800440c:	2004      	movs	r0, #4
 800440e:	f001 fd15 	bl	8005e3c <malloc>
 8004412:	4b4d      	ldr	r3, [pc, #308]	; (8004548 <init_peripherals+0x2a0>)
 8004414:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 8004416:	4a4d      	ldr	r2, [pc, #308]	; (800454c <init_peripherals+0x2a4>)
 8004418:	4b4d      	ldr	r3, [pc, #308]	; (8004550 <init_peripherals+0x2a8>)
 800441a:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 800441c:	4a4d      	ldr	r2, [pc, #308]	; (8004554 <init_peripherals+0x2ac>)
 800441e:	4b4e      	ldr	r3, [pc, #312]	; (8004558 <init_peripherals+0x2b0>)
 8004420:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 8004422:	200f      	movs	r0, #15
 8004424:	f001 fd0a 	bl	8005e3c <malloc>
 8004428:	4e4c      	ldr	r6, [pc, #304]	; (800455c <init_peripherals+0x2b4>)
 800442a:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 800442c:	6004      	str	r4, [r0, #0]
 800442e:	6044      	str	r4, [r0, #4]
 8004430:	6084      	str	r4, [r0, #8]
 8004432:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 8004436:	200f      	movs	r0, #15
 8004438:	f001 fd00 	bl	8005e3c <malloc>
 800443c:	4d48      	ldr	r5, [pc, #288]	; (8004560 <init_peripherals+0x2b8>)
 800443e:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 8004440:	6004      	str	r4, [r0, #0]
 8004442:	6044      	str	r4, [r0, #4]
 8004444:	6084      	str	r4, [r0, #8]
 8004446:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 800444a:	200f      	movs	r0, #15
 800444c:	f001 fcf6 	bl	8005e3c <malloc>
 8004450:	4b44      	ldr	r3, [pc, #272]	; (8004564 <init_peripherals+0x2bc>)
 8004452:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 8004454:	6004      	str	r4, [r0, #0]
 8004456:	6044      	str	r4, [r0, #4]
 8004458:	6084      	str	r4, [r0, #8]
 800445a:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 800445e:	4b42      	ldr	r3, [pc, #264]	; (8004568 <init_peripherals+0x2c0>)
 8004460:	6832      	ldr	r2, [r6, #0]
 8004462:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 8004464:	682a      	ldr	r2, [r5, #0]
 8004466:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 8004468:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 800446a:	2014      	movs	r0, #20
 800446c:	f001 fce6 	bl	8005e3c <malloc>
 8004470:	4b3e      	ldr	r3, [pc, #248]	; (800456c <init_peripherals+0x2c4>)
 8004472:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 8004474:	6004      	str	r4, [r0, #0]
 8004476:	6044      	str	r4, [r0, #4]
 8004478:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <init_peripherals+0x2c8>)
 800447c:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 800447e:	2018      	movs	r0, #24
 8004480:	f001 fcdc 	bl	8005e3c <malloc>
 8004484:	4e3b      	ldr	r6, [pc, #236]	; (8004574 <init_peripherals+0x2cc>)
 8004486:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 8004488:	6004      	str	r4, [r0, #0]
 800448a:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 800448c:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 800448e:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 8004490:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004492:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8004494:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 8004496:	2004      	movs	r0, #4
 8004498:	f001 fcd0 	bl	8005e3c <malloc>
 800449c:	4b36      	ldr	r3, [pc, #216]	; (8004578 <init_peripherals+0x2d0>)
 800449e:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 80044a0:	2501      	movs	r5, #1
 80044a2:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 80044a4:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 80044a6:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 80044a8:	70c4      	strb	r4, [r0, #3]
//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);


	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 80044aa:	2046      	movs	r0, #70	; 0x46
 80044ac:	f001 fcc6 	bl	8005e3c <malloc>
 80044b0:	4b32      	ldr	r3, [pc, #200]	; (800457c <init_peripherals+0x2d4>)
 80044b2:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 80044b4:	2246      	movs	r2, #70	; 0x46
 80044b6:	4621      	mov	r1, r4
 80044b8:	f001 fcd3 	bl	8005e62 <memset>


	new_time = malloc(6*sizeof(uint32_t));
 80044bc:	2018      	movs	r0, #24
 80044be:	f001 fcbd 	bl	8005e3c <malloc>
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <init_peripherals+0x2d8>)
 80044c4:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 80044c6:	6004      	str	r4, [r0, #0]
 80044c8:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 80044ca:	2003      	movs	r0, #3
 80044cc:	f001 fcb6 	bl	8005e3c <malloc>
 80044d0:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <init_peripherals+0x2dc>)
 80044d2:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 80044d4:	8004      	strh	r4, [r0, #0]
 80044d6:	7084      	strb	r4, [r0, #2]

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 80044d8:	2004      	movs	r0, #4
 80044da:	f001 fcaf 	bl	8005e3c <malloc>
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <init_peripherals+0x2e0>)
 80044e0:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 80044e2:	2010      	movs	r0, #16
 80044e4:	f001 fcaa 	bl	8005e3c <malloc>
 80044e8:	4b28      	ldr	r3, [pc, #160]	; (800458c <init_peripherals+0x2e4>)
 80044ea:	6018      	str	r0, [r3, #0]

	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 80044ec:	462a      	mov	r2, r5
 80044ee:	6831      	ldr	r1, [r6, #0]
 80044f0:	4827      	ldr	r0, [pc, #156]	; (8004590 <init_peripherals+0x2e8>)
 80044f2:	f7fe fb74 	bl	8002bde <HAL_RTC_GetTime>

	HAL_TIM_Base_Start_IT(&htim2);
 80044f6:	4827      	ldr	r0, [pc, #156]	; (8004594 <init_peripherals+0x2ec>)
 80044f8:	f7fe fc87 	bl	8002e0a <HAL_TIM_Base_Start_IT>
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	bf00      	nop
 8004500:	48000400 	.word	0x48000400
 8004504:	48000800 	.word	0x48000800
 8004508:	200005a8 	.word	0x200005a8
 800450c:	200002a0 	.word	0x200002a0
 8004510:	200002c8 	.word	0x200002c8
 8004514:	200002cc 	.word	0x200002cc
 8004518:	200002ac 	.word	0x200002ac
 800451c:	200002a8 	.word	0x200002a8
 8004520:	20000224 	.word	0x20000224
 8004524:	20000228 	.word	0x20000228
 8004528:	200002dc 	.word	0x200002dc
 800452c:	20000258 	.word	0x20000258
 8004530:	200002c0 	.word	0x200002c0
 8004534:	200002e0 	.word	0x200002e0
 8004538:	08007b08 	.word	0x08007b08
 800453c:	200002d8 	.word	0x200002d8
 8004540:	20000254 	.word	0x20000254
 8004544:	2000024c 	.word	0x2000024c
 8004548:	20000270 	.word	0x20000270
 800454c:	20000014 	.word	0x20000014
 8004550:	20000284 	.word	0x20000284
 8004554:	20000024 	.word	0x20000024
 8004558:	200002d4 	.word	0x200002d4
 800455c:	20000278 	.word	0x20000278
 8004560:	2000027c 	.word	0x2000027c
 8004564:	20000280 	.word	0x20000280
 8004568:	200005d4 	.word	0x200005d4
 800456c:	20000288 	.word	0x20000288
 8004570:	200005b0 	.word	0x200005b0
 8004574:	200002bc 	.word	0x200002bc
 8004578:	2000025c 	.word	0x2000025c
 800457c:	2000026c 	.word	0x2000026c
 8004580:	20000290 	.word	0x20000290
 8004584:	200002b4 	.word	0x200002b4
 8004588:	20000268 	.word	0x20000268
 800458c:	20000294 	.word	0x20000294
 8004590:	20000470 	.word	0x20000470
 8004594:	200004a8 	.word	0x200004a8

08004598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800459e:	4b55      	ldr	r3, [pc, #340]	; (80046f4 <MX_GPIO_Init+0x15c>)
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80045a6:	615a      	str	r2, [r3, #20]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80045ae:	9201      	str	r2, [sp, #4]
 80045b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80045b8:	615a      	str	r2, [r3, #20]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80045c0:	9202      	str	r2, [sp, #8]
 80045c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045ca:	615a      	str	r2, [r3, #20]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80045d2:	9203      	str	r2, [sp, #12]
 80045d4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045dc:	615a      	str	r2, [r3, #20]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 80045e8:	2201      	movs	r2, #1
 80045ea:	2112      	movs	r1, #18
 80045ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045f0:	f7fd fb50 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 80045f4:	2200      	movs	r2, #0
 80045f6:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80045fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045fe:	f7fd fb49 	bl	8001c94 <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8004602:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8004708 <MX_GPIO_Init+0x170>
 8004606:	2200      	movs	r2, #0
 8004608:	f246 4178 	movw	r1, #25720	; 0x6478
 800460c:	4640      	mov	r0, r8
 800460e:	f7fd fb41 	bl	8001c94 <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8004612:	4e39      	ldr	r6, [pc, #228]	; (80046f8 <MX_GPIO_Init+0x160>)
 8004614:	2200      	movs	r2, #0
 8004616:	2180      	movs	r1, #128	; 0x80
 8004618:	4630      	mov	r0, r6
 800461a:	f7fd fb3b 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800461e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004622:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004624:	4b35      	ldr	r3, [pc, #212]	; (80046fc <MX_GPIO_Init+0x164>)
 8004626:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2400      	movs	r4, #0
 800462a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800462c:	a905      	add	r1, sp, #20
 800462e:	4630      	mov	r0, r6
 8004630:	f7fd fa66 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004634:	2303      	movs	r3, #3
 8004636:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004638:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800463c:	a905      	add	r1, sp, #20
 800463e:	4630      	mov	r0, r6
 8004640:	f7fd fa5e 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8004644:	2501      	movs	r5, #1
 8004646:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004648:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <MX_GPIO_Init+0x168>)
 800464a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800464c:	2702      	movs	r7, #2
 800464e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8004650:	a905      	add	r1, sp, #20
 8004652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004656:	f7fd fa53 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 800465a:	2312      	movs	r3, #18
 800465c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800465e:	2311      	movs	r3, #17
 8004660:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004662:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004664:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004666:	a905      	add	r1, sp, #20
 8004668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800466c:	f7fd fa48 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8004670:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004674:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004676:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467c:	a905      	add	r1, sp, #20
 800467e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004682:	f7fd fa3d 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004686:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004688:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800468c:	a905      	add	r1, sp, #20
 800468e:	4640      	mov	r0, r8
 8004690:	f7fd fa36 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 8004694:	f246 4378 	movw	r3, #25720	; 0x6478
 8004698:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800469a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a0:	a905      	add	r1, sp, #20
 80046a2:	4640      	mov	r0, r8
 80046a4:	f7fd fa2c 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 80046a8:	2340      	movs	r3, #64	; 0x40
 80046aa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80046ac:	4b15      	ldr	r3, [pc, #84]	; (8004704 <MX_GPIO_Init+0x16c>)
 80046ae:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046b0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 80046b2:	a905      	add	r1, sp, #20
 80046b4:	4630      	mov	r0, r6
 80046b6:	f7fd fa23 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046be:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 80046c4:	a905      	add	r1, sp, #20
 80046c6:	4630      	mov	r0, r6
 80046c8:	f7fd fa1a 	bl	8001b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80046cc:	4622      	mov	r2, r4
 80046ce:	4621      	mov	r1, r4
 80046d0:	2006      	movs	r0, #6
 80046d2:	f7fc ffad 	bl	8001630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80046d6:	2006      	movs	r0, #6
 80046d8:	f7fc ffdc 	bl	8001694 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 80046dc:	462a      	mov	r2, r5
 80046de:	4621      	mov	r1, r4
 80046e0:	2017      	movs	r0, #23
 80046e2:	f7fc ffa5 	bl	8001630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046e6:	2017      	movs	r0, #23
 80046e8:	f7fc ffd4 	bl	8001694 <HAL_NVIC_EnableIRQ>

}
 80046ec:	b00a      	add	sp, #40	; 0x28
 80046ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	48000800 	.word	0x48000800
 80046fc:	10110000 	.word	0x10110000
 8004700:	10210000 	.word	0x10210000
 8004704:	10310000 	.word	0x10310000
 8004708:	48000400 	.word	0x48000400

0800470c <MX_DMA_Init>:
{
 800470c:	b500      	push	{lr}
 800470e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <MX_DMA_Init+0x30>)
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	615a      	str	r2, [r3, #20]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8004724:	2201      	movs	r2, #1
 8004726:	2100      	movs	r1, #0
 8004728:	200c      	movs	r0, #12
 800472a:	f7fc ff81 	bl	8001630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800472e:	200c      	movs	r0, #12
 8004730:	f7fc ffb0 	bl	8001694 <HAL_NVIC_EnableIRQ>
}
 8004734:	b003      	add	sp, #12
 8004736:	f85d fb04 	ldr.w	pc, [sp], #4
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000

08004740 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8004740:	4770      	bx	lr

08004742 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004742:	e7fe      	b.n	8004742 <_Error_Handler>

08004744 <MX_TIM2_Init>:
{
 8004744:	b500      	push	{lr}
 8004746:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8004748:	4818      	ldr	r0, [pc, #96]	; (80047ac <MX_TIM2_Init+0x68>)
 800474a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800474e:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 8004750:	2301      	movs	r3, #1
 8004752:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004754:	2300      	movs	r3, #0
 8004756:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 326400;
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <MX_TIM2_Init+0x6c>)
 800475a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800475c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800475e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004760:	f7fe fc7a 	bl	8003058 <HAL_TIM_Base_Init>
 8004764:	b998      	cbnz	r0, 800478e <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004766:	a908      	add	r1, sp, #32
 8004768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800476c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004770:	480e      	ldr	r0, [pc, #56]	; (80047ac <MX_TIM2_Init+0x68>)
 8004772:	f7fe fc97 	bl	80030a4 <HAL_TIM_ConfigClockSource>
 8004776:	b978      	cbnz	r0, 8004798 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004778:	2300      	movs	r3, #0
 800477a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800477c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800477e:	a901      	add	r1, sp, #4
 8004780:	480a      	ldr	r0, [pc, #40]	; (80047ac <MX_TIM2_Init+0x68>)
 8004782:	f7fe fd1b 	bl	80031bc <HAL_TIMEx_MasterConfigSynchronization>
 8004786:	b960      	cbnz	r0, 80047a2 <MX_TIM2_Init+0x5e>
}
 8004788:	b009      	add	sp, #36	; 0x24
 800478a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800478e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8004792:	4808      	ldr	r0, [pc, #32]	; (80047b4 <MX_TIM2_Init+0x70>)
 8004794:	f7ff ffd5 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004798:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800479c:	4805      	ldr	r0, [pc, #20]	; (80047b4 <MX_TIM2_Init+0x70>)
 800479e:	f7ff ffd0 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80047a2:	f240 11d5 	movw	r1, #469	; 0x1d5
 80047a6:	4803      	ldr	r0, [pc, #12]	; (80047b4 <MX_TIM2_Init+0x70>)
 80047a8:	f7ff ffcb 	bl	8004742 <_Error_Handler>
 80047ac:	200004a8 	.word	0x200004a8
 80047b0:	0004fb00 	.word	0x0004fb00
 80047b4:	08007b0c 	.word	0x08007b0c

080047b8 <MX_USART1_UART_Init>:
{
 80047b8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80047ba:	480c      	ldr	r0, [pc, #48]	; (80047ec <MX_USART1_UART_Init+0x34>)
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <MX_USART1_UART_Init+0x38>)
 80047be:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80047c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80047c4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047c6:	2300      	movs	r3, #0
 80047c8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047cc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047ce:	220c      	movs	r2, #12
 80047d0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047d2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047d4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047d6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047d8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047da:	f7fe ff5a 	bl	8003692 <HAL_UART_Init>
 80047de:	b900      	cbnz	r0, 80047e2 <MX_USART1_UART_Init+0x2a>
 80047e0:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80047e2:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80047e6:	4803      	ldr	r0, [pc, #12]	; (80047f4 <MX_USART1_UART_Init+0x3c>)
 80047e8:	f7ff ffab 	bl	8004742 <_Error_Handler>
 80047ec:	20000400 	.word	0x20000400
 80047f0:	40013800 	.word	0x40013800
 80047f4:	08007b0c 	.word	0x08007b0c

080047f8 <MX_ADC2_Init>:
{
 80047f8:	b500      	push	{lr}
 80047fa:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 80047fc:	482d      	ldr	r0, [pc, #180]	; (80048b4 <MX_ADC2_Init+0xbc>)
 80047fe:	4b2e      	ldr	r3, [pc, #184]	; (80048b8 <MX_ADC2_Init+0xc0>)
 8004800:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004802:	2300      	movs	r3, #0
 8004804:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004806:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004808:	2201      	movs	r2, #1
 800480a:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800480c:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800480e:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004810:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004812:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004814:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8004816:	2104      	movs	r1, #4
 8004818:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800481a:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800481c:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800481e:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004820:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004822:	f7fc fbdb 	bl	8000fdc <HAL_ADC_Init>
 8004826:	bb60      	cbnz	r0, 8004882 <MX_ADC2_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_8;
 8004828:	2308      	movs	r3, #8
 800482a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800482c:	2301      	movs	r3, #1
 800482e:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004830:	2300      	movs	r3, #0
 8004832:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8004834:	2207      	movs	r2, #7
 8004836:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004838:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800483a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800483c:	4669      	mov	r1, sp
 800483e:	481d      	ldr	r0, [pc, #116]	; (80048b4 <MX_ADC2_Init+0xbc>)
 8004840:	f7fc fd22 	bl	8001288 <HAL_ADC_ConfigChannel>
 8004844:	bb10      	cbnz	r0, 800488c <MX_ADC2_Init+0x94>
  sConfig.Channel = ADC_CHANNEL_9;
 8004846:	2309      	movs	r3, #9
 8004848:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800484a:	2302      	movs	r3, #2
 800484c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800484e:	4669      	mov	r1, sp
 8004850:	4818      	ldr	r0, [pc, #96]	; (80048b4 <MX_ADC2_Init+0xbc>)
 8004852:	f7fc fd19 	bl	8001288 <HAL_ADC_ConfigChannel>
 8004856:	b9f0      	cbnz	r0, 8004896 <MX_ADC2_Init+0x9e>
  sConfig.Channel = ADC_CHANNEL_12;
 8004858:	230c      	movs	r3, #12
 800485a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800485c:	2303      	movs	r3, #3
 800485e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004860:	4669      	mov	r1, sp
 8004862:	4814      	ldr	r0, [pc, #80]	; (80048b4 <MX_ADC2_Init+0xbc>)
 8004864:	f7fc fd10 	bl	8001288 <HAL_ADC_ConfigChannel>
 8004868:	b9d0      	cbnz	r0, 80048a0 <MX_ADC2_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_15;
 800486a:	230f      	movs	r3, #15
 800486c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800486e:	2304      	movs	r3, #4
 8004870:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004872:	4669      	mov	r1, sp
 8004874:	480f      	ldr	r0, [pc, #60]	; (80048b4 <MX_ADC2_Init+0xbc>)
 8004876:	f7fc fd07 	bl	8001288 <HAL_ADC_ConfigChannel>
 800487a:	b9b0      	cbnz	r0, 80048aa <MX_ADC2_Init+0xb2>
}
 800487c:	b007      	add	sp, #28
 800487e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004882:	f44f 7199 	mov.w	r1, #306	; 0x132
 8004886:	480d      	ldr	r0, [pc, #52]	; (80048bc <MX_ADC2_Init+0xc4>)
 8004888:	f7ff ff5b 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800488c:	f240 113f 	movw	r1, #319	; 0x13f
 8004890:	480a      	ldr	r0, [pc, #40]	; (80048bc <MX_ADC2_Init+0xc4>)
 8004892:	f7ff ff56 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004896:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800489a:	4808      	ldr	r0, [pc, #32]	; (80048bc <MX_ADC2_Init+0xc4>)
 800489c:	f7ff ff51 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80048a0:	f240 1151 	movw	r1, #337	; 0x151
 80048a4:	4805      	ldr	r0, [pc, #20]	; (80048bc <MX_ADC2_Init+0xc4>)
 80048a6:	f7ff ff4c 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80048aa:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80048ae:	4803      	ldr	r0, [pc, #12]	; (80048bc <MX_ADC2_Init+0xc4>)
 80048b0:	f7ff ff47 	bl	8004742 <_Error_Handler>
 80048b4:	20000318 	.word	0x20000318
 80048b8:	50000100 	.word	0x50000100
 80048bc:	08007b0c 	.word	0x08007b0c

080048c0 <MX_RTC_Init>:
{
 80048c0:	b500      	push	{lr}
 80048c2:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 80048c4:	482c      	ldr	r0, [pc, #176]	; (8004978 <MX_RTC_Init+0xb8>)
 80048c6:	4b2d      	ldr	r3, [pc, #180]	; (800497c <MX_RTC_Init+0xbc>)
 80048c8:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80048ca:	2100      	movs	r1, #0
 80048cc:	f7fe fa69 	bl	8002da2 <HAL_RTCEx_BKUPRead>
 80048d0:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80048d4:	4298      	cmp	r0, r3
 80048d6:	d037      	beq.n	8004948 <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80048d8:	4827      	ldr	r0, [pc, #156]	; (8004978 <MX_RTC_Init+0xb8>)
 80048da:	2300      	movs	r3, #0
 80048dc:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80048de:	227f      	movs	r2, #127	; 0x7f
 80048e0:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80048e2:	22ff      	movs	r2, #255	; 0xff
 80048e4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80048e6:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80048e8:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80048ea:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80048ec:	f7fe f815 	bl	800291a <HAL_RTC_Init>
 80048f0:	bb68      	cbnz	r0, 800494e <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 80048f8:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 80048fc:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004900:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004902:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004904:	2201      	movs	r2, #1
 8004906:	a901      	add	r1, sp, #4
 8004908:	481b      	ldr	r0, [pc, #108]	; (8004978 <MX_RTC_Init+0xb8>)
 800490a:	f7fe f873 	bl	80029f4 <HAL_RTC_SetTime>
 800490e:	bb18      	cbnz	r0, 8004958 <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004910:	2201      	movs	r2, #1
 8004912:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8004916:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800491a:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800491e:	2300      	movs	r3, #0
 8004920:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004924:	4669      	mov	r1, sp
 8004926:	4814      	ldr	r0, [pc, #80]	; (8004978 <MX_RTC_Init+0xb8>)
 8004928:	f7fe f8e3 	bl	8002af2 <HAL_RTC_SetDate>
 800492c:	b9c8      	cbnz	r0, 8004962 <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800492e:	2200      	movs	r2, #0
 8004930:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004934:	4810      	ldr	r0, [pc, #64]	; (8004978 <MX_RTC_Init+0xb8>)
 8004936:	f7fe f99f 	bl	8002c78 <HAL_RTCEx_SetWakeUpTimer_IT>
 800493a:	b9b8      	cbnz	r0, 800496c <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 800493c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004940:	2100      	movs	r1, #0
 8004942:	480d      	ldr	r0, [pc, #52]	; (8004978 <MX_RTC_Init+0xb8>)
 8004944:	f7fe fa28 	bl	8002d98 <HAL_RTCEx_BKUPWrite>
}
 8004948:	b007      	add	sp, #28
 800494a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800494e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004952:	480b      	ldr	r0, [pc, #44]	; (8004980 <MX_RTC_Init+0xc0>)
 8004954:	f7ff fef5 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004958:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800495c:	4808      	ldr	r0, [pc, #32]	; (8004980 <MX_RTC_Init+0xc0>)
 800495e:	f7ff fef0 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004962:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004966:	4806      	ldr	r0, [pc, #24]	; (8004980 <MX_RTC_Init+0xc0>)
 8004968:	f7ff feeb 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800496c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8004970:	4803      	ldr	r0, [pc, #12]	; (8004980 <MX_RTC_Init+0xc0>)
 8004972:	f7ff fee6 	bl	8004742 <_Error_Handler>
 8004976:	bf00      	nop
 8004978:	20000470 	.word	0x20000470
 800497c:	40002800 	.word	0x40002800
 8004980:	08007b0c 	.word	0x08007b0c

08004984 <MX_I2C1_Init>:
{
 8004984:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8004986:	4815      	ldr	r0, [pc, #84]	; (80049dc <MX_I2C1_Init+0x58>)
 8004988:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <MX_I2C1_Init+0x5c>)
 800498a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800498c:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <MX_I2C1_Init+0x60>)
 800498e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004994:	2201      	movs	r2, #1
 8004996:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004998:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800499a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800499c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800499e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049a0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049a2:	f7fd f98b 	bl	8001cbc <HAL_I2C_Init>
 80049a6:	b950      	cbnz	r0, 80049be <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049a8:	2100      	movs	r1, #0
 80049aa:	480c      	ldr	r0, [pc, #48]	; (80049dc <MX_I2C1_Init+0x58>)
 80049ac:	f7fd f9ec 	bl	8001d88 <HAL_I2CEx_ConfigAnalogFilter>
 80049b0:	b950      	cbnz	r0, 80049c8 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80049b2:	2100      	movs	r1, #0
 80049b4:	4809      	ldr	r0, [pc, #36]	; (80049dc <MX_I2C1_Init+0x58>)
 80049b6:	f7fd fa15 	bl	8001de4 <HAL_I2CEx_ConfigDigitalFilter>
 80049ba:	b950      	cbnz	r0, 80049d2 <MX_I2C1_Init+0x4e>
 80049bc:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80049be:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80049c2:	4809      	ldr	r0, [pc, #36]	; (80049e8 <MX_I2C1_Init+0x64>)
 80049c4:	f7ff febd 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80049c8:	f240 1175 	movw	r1, #373	; 0x175
 80049cc:	4806      	ldr	r0, [pc, #24]	; (80049e8 <MX_I2C1_Init+0x64>)
 80049ce:	f7ff feb8 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80049d2:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80049d6:	4804      	ldr	r0, [pc, #16]	; (80049e8 <MX_I2C1_Init+0x64>)
 80049d8:	f7ff feb3 	bl	8004742 <_Error_Handler>
 80049dc:	2000036c 	.word	0x2000036c
 80049e0:	40005400 	.word	0x40005400
 80049e4:	2000090e 	.word	0x2000090e
 80049e8:	08007b0c 	.word	0x08007b0c

080049ec <SystemClock_Config>:
{
 80049ec:	b500      	push	{lr}
 80049ee:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 80049f0:	f7fd fa24 	bl	8001e3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80049f4:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <SystemClock_Config+0xb0>)
 80049f6:	6a13      	ldr	r3, [r2, #32]
 80049f8:	f023 0318 	bic.w	r3, r3, #24
 80049fc:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80049fe:	2306      	movs	r3, #6
 8004a00:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004a02:	2301      	movs	r3, #1
 8004a04:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a06:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004a08:	2310      	movs	r3, #16
 8004a0a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a10:	2300      	movs	r3, #0
 8004a12:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004a14:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004a18:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a1a:	a80c      	add	r0, sp, #48	; 0x30
 8004a1c:	f7fd fa16 	bl	8001e4c <HAL_RCC_OscConfig>
 8004a20:	bb70      	cbnz	r0, 8004a80 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a22:	230f      	movs	r3, #15
 8004a24:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a26:	2102      	movs	r1, #2
 8004a28:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a32:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a34:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a36:	a807      	add	r0, sp, #28
 8004a38:	f7fd fd46 	bl	80024c8 <HAL_RCC_ClockConfig>
 8004a3c:	bb20      	cbnz	r0, 8004a88 <SystemClock_Config+0x9c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <SystemClock_Config+0xb4>)
 8004a40:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004a42:	2200      	movs	r2, #0
 8004a44:	9202      	str	r2, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4a:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004a4c:	9203      	str	r2, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004a4e:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a50:	4668      	mov	r0, sp
 8004a52:	f7fd fe55 	bl	8002700 <HAL_RCCEx_PeriphCLKConfig>
 8004a56:	b9e0      	cbnz	r0, 8004a92 <SystemClock_Config+0xa6>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004a58:	f7fd fe20 	bl	800269c <HAL_RCC_GetHCLKFreq>
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <SystemClock_Config+0xb8>)
 8004a5e:	fba3 3000 	umull	r3, r0, r3, r0
 8004a62:	0980      	lsrs	r0, r0, #6
 8004a64:	f7fc fe22 	bl	80016ac <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004a68:	2004      	movs	r0, #4
 8004a6a:	f7fc fe35 	bl	80016d8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8004a6e:	2202      	movs	r2, #2
 8004a70:	2100      	movs	r1, #0
 8004a72:	f04f 30ff 	mov.w	r0, #4294967295
 8004a76:	f7fc fddb 	bl	8001630 <HAL_NVIC_SetPriority>
}
 8004a7a:	b017      	add	sp, #92	; 0x5c
 8004a7c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004a80:	21f2      	movs	r1, #242	; 0xf2
 8004a82:	4809      	ldr	r0, [pc, #36]	; (8004aa8 <SystemClock_Config+0xbc>)
 8004a84:	f7ff fe5d 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a8c:	4806      	ldr	r0, [pc, #24]	; (8004aa8 <SystemClock_Config+0xbc>)
 8004a8e:	f7ff fe58 	bl	8004742 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004a92:	f240 110b 	movw	r1, #267	; 0x10b
 8004a96:	4804      	ldr	r0, [pc, #16]	; (8004aa8 <SystemClock_Config+0xbc>)
 8004a98:	f7ff fe53 	bl	8004742 <_Error_Handler>
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	000100a1 	.word	0x000100a1
 8004aa4:	10624dd3 	.word	0x10624dd3
 8004aa8:	08007b0c 	.word	0x08007b0c

08004aac <main>:
{
 8004aac:	b508      	push	{r3, lr}
  HAL_Init();
 8004aae:	f7fc fa31 	bl	8000f14 <HAL_Init>
  SystemClock_Config();
 8004ab2:	f7ff ff9b 	bl	80049ec <SystemClock_Config>
  MX_GPIO_Init();
 8004ab6:	f7ff fd6f 	bl	8004598 <MX_GPIO_Init>
  MX_DMA_Init();
 8004aba:	f7ff fe27 	bl	800470c <MX_DMA_Init>
  MX_TIM2_Init();
 8004abe:	f7ff fe41 	bl	8004744 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004ac2:	f7ff fe79 	bl	80047b8 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8004ac6:	f7ff fe97 	bl	80047f8 <MX_ADC2_Init>
  MX_RTC_Init();
 8004aca:	f7ff fef9 	bl	80048c0 <MX_RTC_Init>
  MX_I2C1_Init();
 8004ace:	f7ff ff59 	bl	8004984 <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4835      	ldr	r0, [pc, #212]	; (8004bac <main+0x100>)
 8004ad6:	f7fc fb8f 	bl	80011f8 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8004ada:	f7ff fbe5 	bl	80042a8 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4933      	ldr	r1, [pc, #204]	; (8004bb0 <main+0x104>)
 8004ae2:	4834      	ldr	r0, [pc, #208]	; (8004bb4 <main+0x108>)
 8004ae4:	f7fe fbc9 	bl	800327a <HAL_UART_Receive_IT>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,2048,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004aee:	4832      	ldr	r0, [pc, #200]	; (8004bb8 <main+0x10c>)
 8004af0:	f7fe f8c2 	bl	8002c78 <HAL_RTCEx_SetWakeUpTimer_IT>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004af4:	2200      	movs	r2, #0
 8004af6:	4611      	mov	r1, r2
 8004af8:	2025      	movs	r0, #37	; 0x25
 8004afa:	f7fc fd99 	bl	8001630 <HAL_NVIC_SetPriority>
	HAL_FLASH_Unlock();
 8004afe:	f7fc feeb 	bl	80018d8 <HAL_FLASH_Unlock>
	pEraseInit->NbPages = 5;
 8004b02:	4a2e      	ldr	r2, [pc, #184]	; (8004bbc <main+0x110>)
 8004b04:	6813      	ldr	r3, [r2, #0]
 8004b06:	2105      	movs	r1, #5
 8004b08:	6099      	str	r1, [r3, #8]
	pEraseInit->PageAddress = (uint32_t)(0x08008000);
 8004b0a:	492d      	ldr	r1, [pc, #180]	; (8004bc0 <main+0x114>)
 8004b0c:	6059      	str	r1, [r3, #4]
	pEraseInit->TypeErase = (uint32_t)FLASH_TYPEERASE_PAGES;
 8004b0e:	2100      	movs	r1, #0
 8004b10:	6019      	str	r1, [r3, #0]
	HAL_FLASHEx_Erase(pEraseInit,flash_error);
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <main+0x118>)
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	6810      	ldr	r0, [r2, #0]
 8004b18:	f7fc ffa0 	bl	8001a5c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8004b1c:	f7fc fef0 	bl	8001900 <HAL_FLASH_Lock>
 flash_counter = 10000-2000;
 8004b20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004b24:	4b28      	ldr	r3, [pc, #160]	; (8004bc8 <main+0x11c>)
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e01c      	b.n	8004b64 <main+0xb8>
		  rx_flag = 0;
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4b27      	ldr	r3, [pc, #156]	; (8004bcc <main+0x120>)
 8004b2e:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8004b30:	f000 fcb8 	bl	80054a4 <uart_comms>
 8004b34:	e01a      	b.n	8004b6c <main+0xc0>
		  systick_flag = 0;
 8004b36:	2200      	movs	r2, #0
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <main+0x124>)
 8004b3a:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 8004b3c:	f000 f852 	bl	8004be4 <seven_segment>
 8004b40:	e018      	b.n	8004b74 <main+0xc8>
		  adc_flag = 0;
 8004b42:	2200      	movs	r2, #0
 8004b44:	4b23      	ldr	r3, [pc, #140]	; (8004bd4 <main+0x128>)
 8004b46:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8004b48:	f7fe ff0e 	bl	8003968 <adc_comms>
 8004b4c:	e016      	b.n	8004b7c <main+0xd0>
	  if(fake_RTC_timer == 1000){
 8004b4e:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <main+0x12c>)
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b56:	d019      	beq.n	8004b8c <main+0xe0>
	  if(flash_counter == 10000){
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <main+0x11c>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d019      	beq.n	8004b98 <main+0xec>
	  if(rx_flag == 1 ){ 	// UART Comms
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <main+0x120>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d0de      	beq.n	8004b2a <main+0x7e>
	  if(systick_flag == 1){	// Seven Segment
 8004b6c:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <main+0x124>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d0e0      	beq.n	8004b36 <main+0x8a>
	  if(adc_flag == 1){	// ADC conversion
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <main+0x128>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d0e2      	beq.n	8004b42 <main+0x96>
	  if(touch_flag == 1 ){
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <main+0x130>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d1e4      	bne.n	8004b4e <main+0xa2>
		  touch_flag = 0;
 8004b84:	2200      	movs	r2, #0
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <main+0x130>)
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e7e0      	b.n	8004b4e <main+0xa2>
		  fake_RTC_timer = 0;
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <main+0x12c>)
 8004b90:	801a      	strh	r2, [r3, #0]
		  heating_scheduling();
 8004b92:	f7ff fa71 	bl	8004078 <heating_scheduling>
 8004b96:	e7df      	b.n	8004b58 <main+0xac>
		  flash_counter = 0;
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <main+0x11c>)
 8004b9c:	601a      	str	r2, [r3, #0]
		  if(enableFlashLogging){
 8004b9e:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <main+0x134>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0de      	beq.n	8004b64 <main+0xb8>
		  write2Flash();
 8004ba6:	f7fe fffd 	bl	8003ba4 <write2Flash>
 8004baa:	e7db      	b.n	8004b64 <main+0xb8>
 8004bac:	20000318 	.word	0x20000318
 8004bb0:	200005ac 	.word	0x200005ac
 8004bb4:	20000400 	.word	0x20000400
 8004bb8:	20000470 	.word	0x20000470
 8004bbc:	20000294 	.word	0x20000294
 8004bc0:	08008000 	.word	0x08008000
 8004bc4:	20000268 	.word	0x20000268
 8004bc8:	20000264 	.word	0x20000264
 8004bcc:	200002a5 	.word	0x200002a5
 8004bd0:	200002b1 	.word	0x200002b1
 8004bd4:	20000242 	.word	0x20000242
 8004bd8:	20000262 	.word	0x20000262
 8004bdc:	200002c4 	.word	0x200002c4
 8004be0:	20000260 	.word	0x20000260

08004be4 <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8004be4:	b510      	push	{r4, lr}

	if(segment_counter == 0){	// Left Most Digit
 8004be6:	4b4a      	ldr	r3, [pc, #296]	; (8004d10 <seven_segment+0x12c>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	b133      	cbz	r3, 8004bfa <seven_segment+0x16>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d027      	beq.n	8004c40 <seven_segment+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d048      	beq.n	8004c86 <seven_segment+0xa2>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d069      	beq.n	8004ccc <seven_segment+0xe8>
 8004bf8:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8004bfa:	4c46      	ldr	r4, [pc, #280]	; (8004d14 <seven_segment+0x130>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c02:	4620      	mov	r0, r4
 8004c04:	f7fd f846 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2110      	movs	r1, #16
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f7fd f841 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004c12:	2201      	movs	r2, #1
 8004c14:	2120      	movs	r1, #32
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7fd f83c 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	2108      	movs	r1, #8
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7fd f837 	bl	8001c94 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 8004c26:	4c3a      	ldr	r4, [pc, #232]	; (8004d10 <seven_segment+0x12c>)
 8004c28:	7823      	ldrb	r3, [r4, #0]
 8004c2a:	4a3b      	ldr	r2, [pc, #236]	; (8004d18 <seven_segment+0x134>)
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	5cd0      	ldrb	r0, [r2, r3]
 8004c30:	3830      	subs	r0, #48	; 0x30
 8004c32:	b2c0      	uxtb	r0, r0
 8004c34:	f000 f872 	bl	8004d1c <seven_segment_display>
		segment_counter += 1;
 8004c38:	7823      	ldrb	r3, [r4, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	7023      	strb	r3, [r4, #0]
 8004c3e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004c40:	4c34      	ldr	r4, [pc, #208]	; (8004d14 <seven_segment+0x130>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7fd f823 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2110      	movs	r1, #16
 8004c52:	4620      	mov	r0, r4
 8004c54:	f7fd f81e 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f7fd f819 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004c62:	2201      	movs	r2, #1
 8004c64:	2108      	movs	r1, #8
 8004c66:	4620      	mov	r0, r4
 8004c68:	f7fd f814 	bl	8001c94 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004c6c:	4c28      	ldr	r4, [pc, #160]	; (8004d10 <seven_segment+0x12c>)
 8004c6e:	7823      	ldrb	r3, [r4, #0]
 8004c70:	4a29      	ldr	r2, [pc, #164]	; (8004d18 <seven_segment+0x134>)
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	5cd0      	ldrb	r0, [r2, r3]
 8004c76:	3830      	subs	r0, #48	; 0x30
 8004c78:	b2c0      	uxtb	r0, r0
 8004c7a:	f000 f84f 	bl	8004d1c <seven_segment_display>
		segment_counter += 1;
 8004c7e:	7823      	ldrb	r3, [r4, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	7023      	strb	r3, [r4, #0]
 8004c84:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004c86:	4c23      	ldr	r4, [pc, #140]	; (8004d14 <seven_segment+0x130>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7fd f800 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004c94:	2201      	movs	r2, #1
 8004c96:	2110      	movs	r1, #16
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7fc fffb 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7fc fff6 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004ca8:	2201      	movs	r2, #1
 8004caa:	2108      	movs	r1, #8
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7fc fff1 	bl	8001c94 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004cb2:	4c17      	ldr	r4, [pc, #92]	; (8004d10 <seven_segment+0x12c>)
 8004cb4:	7823      	ldrb	r3, [r4, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <seven_segment+0x134>)
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	5cd0      	ldrb	r0, [r2, r3]
 8004cbc:	3830      	subs	r0, #48	; 0x30
 8004cbe:	b2c0      	uxtb	r0, r0
 8004cc0:	f000 f82c 	bl	8004d1c <seven_segment_display>
		segment_counter += 1;
 8004cc4:	7823      	ldrb	r3, [r4, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	7023      	strb	r3, [r4, #0]
 8004cca:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004ccc:	4c11      	ldr	r4, [pc, #68]	; (8004d14 <seven_segment+0x130>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7fc ffdd 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2110      	movs	r1, #16
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f7fc ffd8 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7fc ffd3 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2108      	movs	r1, #8
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7fc ffce 	bl	8001c94 <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004cf8:	4c05      	ldr	r4, [pc, #20]	; (8004d10 <seven_segment+0x12c>)
 8004cfa:	7823      	ldrb	r3, [r4, #0]
 8004cfc:	4a06      	ldr	r2, [pc, #24]	; (8004d18 <seven_segment+0x134>)
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	5cd0      	ldrb	r0, [r2, r3]
 8004d02:	3830      	subs	r0, #48	; 0x30
 8004d04:	b2c0      	uxtb	r0, r0
 8004d06:	f000 f809 	bl	8004d1c <seven_segment_display>
		segment_counter = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	7023      	strb	r3, [r4, #0]
	}
}
 8004d0e:	e773      	b.n	8004bf8 <seven_segment+0x14>
 8004d10:	200002a6 	.word	0x200002a6
 8004d14:	48000400 	.word	0x48000400
 8004d18:	200002a8 	.word	0x200002a8

08004d1c <seven_segment_display>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8004d1c:	b510      	push	{r4, lr}
	switch(num){
 8004d1e:	2809      	cmp	r0, #9
 8004d20:	f200 81d2 	bhi.w	80050c8 <seven_segment_display+0x3ac>
 8004d24:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004d28:	000a019f 	.word	0x000a019f
 8004d2c:	00600035 	.word	0x00600035
 8004d30:	00bc008b 	.word	0x00bc008b
 8004d34:	011200e7 	.word	0x011200e7
 8004d38:	016e013d 	.word	0x016e013d
	case 1:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2140      	movs	r1, #64	; 0x40
 8004d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d44:	f7fc ffa6 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2180      	movs	r1, #128	; 0x80
 8004d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d50:	f7fc ffa0 	bl	8001c94 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8004d54:	2201      	movs	r2, #1
 8004d56:	2120      	movs	r1, #32
 8004d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d5c:	f7fc ff9a 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8004d60:	2201      	movs	r2, #1
 8004d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d6a:	f7fc ff93 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d78:	f7fc ff8c 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	2140      	movs	r1, #64	; 0x40
 8004d80:	48ea      	ldr	r0, [pc, #936]	; (800512c <seven_segment_display+0x410>)
 8004d82:	f7fc ff87 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 8004d86:	2201      	movs	r2, #1
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	48e9      	ldr	r0, [pc, #932]	; (8005130 <seven_segment_display+0x414>)
 8004d8c:	f7fc ff82 	bl	8001c94 <HAL_GPIO_WritePin>
		break;
 8004d90:	bd10      	pop	{r4, pc}
	case 2:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8004d92:	2200      	movs	r2, #0
 8004d94:	2120      	movs	r1, #32
 8004d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d9a:	f7fc ff7b 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2140      	movs	r1, #64	; 0x40
 8004da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004da6:	f7fc ff75 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004daa:	2200      	movs	r2, #0
 8004dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004db4:	f7fc ff6e 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004db8:	2200      	movs	r2, #0
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	48dc      	ldr	r0, [pc, #880]	; (8005130 <seven_segment_display+0x414>)
 8004dbe:	f7fc ff69 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2140      	movs	r1, #64	; 0x40
 8004dc6:	48d9      	ldr	r0, [pc, #868]	; (800512c <seven_segment_display+0x410>)
 8004dc8:	f7fc ff64 	bl	8001c94 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dd6:	f7fc ff5d 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8004dda:	2201      	movs	r2, #1
 8004ddc:	2180      	movs	r1, #128	; 0x80
 8004dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004de2:	f7fc ff57 	bl	8001c94 <HAL_GPIO_WritePin>
		break;
 8004de6:	bd10      	pop	{r4, pc}

	case 3:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004de8:	2200      	movs	r2, #0
 8004dea:	2120      	movs	r1, #32
 8004dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004df0:	f7fc ff50 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8004df4:	2200      	movs	r2, #0
 8004df6:	2140      	movs	r1, #64	; 0x40
 8004df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dfc:	f7fc ff4a 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004e00:	2200      	movs	r2, #0
 8004e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e0a:	f7fc ff43 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2180      	movs	r1, #128	; 0x80
 8004e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e16:	f7fc ff3d 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	48c3      	ldr	r0, [pc, #780]	; (800512c <seven_segment_display+0x410>)
 8004e20:	f7fc ff38 	bl	8001c94 <HAL_GPIO_WritePin>

		// OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004e24:	2201      	movs	r2, #1
 8004e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e2e:	f7fc ff31 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004e32:	2201      	movs	r2, #1
 8004e34:	2180      	movs	r1, #128	; 0x80
 8004e36:	48be      	ldr	r0, [pc, #760]	; (8005130 <seven_segment_display+0x414>)
 8004e38:	f7fc ff2c 	bl	8001c94 <HAL_GPIO_WritePin>

		break;
 8004e3c:	bd10      	pop	{r4, pc}
	case 4:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e46:	f7fc ff25 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e54:	f7fc ff1e 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e62:	f7fc ff17 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004e66:	2200      	movs	r2, #0
 8004e68:	2180      	movs	r1, #128	; 0x80
 8004e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e6e:	f7fc ff11 	bl	8001c94 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8004e72:	2201      	movs	r2, #1
 8004e74:	2120      	movs	r1, #32
 8004e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e7a:	f7fc ff0b 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004e7e:	2201      	movs	r2, #1
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	48ab      	ldr	r0, [pc, #684]	; (8005130 <seven_segment_display+0x414>)
 8004e84:	f7fc ff06 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2120      	movs	r1, #32
 8004e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e90:	f7fc ff00 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8004e94:	2201      	movs	r2, #1
 8004e96:	2140      	movs	r1, #64	; 0x40
 8004e98:	48a4      	ldr	r0, [pc, #656]	; (800512c <seven_segment_display+0x410>)
 8004e9a:	f7fc fefb 	bl	8001c94 <HAL_GPIO_WritePin>

		break;
 8004e9e:	bd10      	pop	{r4, pc}
	case 5:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2120      	movs	r1, #32
 8004ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ea8:	f7fc fef4 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004eac:	2200      	movs	r2, #0
 8004eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eb6:	f7fc feed 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ec4:	f7fc fee6 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ed0:	f7fc fee0 	bl	8001c94 <HAL_GPIO_WritePin>

		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	2140      	movs	r1, #64	; 0x40
 8004ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004edc:	f7fc feda 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	4892      	ldr	r0, [pc, #584]	; (8005130 <seven_segment_display+0x414>)
 8004ee6:	f7fc fed5 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8004eea:	2200      	movs	r2, #0
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	488f      	ldr	r0, [pc, #572]	; (800512c <seven_segment_display+0x410>)
 8004ef0:	f7fc fed0 	bl	8001c94 <HAL_GPIO_WritePin>
		break;
 8004ef4:	bd10      	pop	{r4, pc}

	case 6:
		// ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2120      	movs	r1, #32
 8004efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004efe:	f7fc fec9 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004f02:	2200      	movs	r2, #0
 8004f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f0c:	f7fc fec2 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f1a:	f7fc febb 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2180      	movs	r1, #128	; 0x80
 8004f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f26:	f7fc feb5 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2140      	movs	r1, #64	; 0x40
 8004f2e:	487f      	ldr	r0, [pc, #508]	; (800512c <seven_segment_display+0x410>)
 8004f30:	f7fc feb0 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004f34:	2200      	movs	r2, #0
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	487d      	ldr	r0, [pc, #500]	; (8005130 <seven_segment_display+0x414>)
 8004f3a:	f7fc feab 	bl	8001c94 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8004f3e:	2201      	movs	r2, #1
 8004f40:	2140      	movs	r1, #64	; 0x40
 8004f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f46:	f7fc fea5 	bl	8001c94 <HAL_GPIO_WritePin>
		break;
 8004f4a:	bd10      	pop	{r4, pc}
	case 7:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2120      	movs	r1, #32
 8004f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f54:	f7fc fe9e 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2140      	movs	r1, #64	; 0x40
 8004f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f60:	f7fc fe98 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004f64:	2200      	movs	r2, #0
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f6c:	f7fc fe92 	bl	8001c94 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004f70:	2201      	movs	r2, #1
 8004f72:	2180      	movs	r1, #128	; 0x80
 8004f74:	486e      	ldr	r0, [pc, #440]	; (8005130 <seven_segment_display+0x414>)
 8004f76:	f7fc fe8d 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f84:	f7fc fe86 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f92:	f7fc fe7f 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8004f96:	2201      	movs	r2, #1
 8004f98:	2140      	movs	r1, #64	; 0x40
 8004f9a:	4864      	ldr	r0, [pc, #400]	; (800512c <seven_segment_display+0x410>)
 8004f9c:	f7fc fe7a 	bl	8001c94 <HAL_GPIO_WritePin>

		break;
 8004fa0:	bd10      	pop	{r4, pc}
	case 8:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2140      	movs	r1, #64	; 0x40
 8004fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004faa:	f7fc fe73 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fb6:	f7fc fe6d 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004fba:	4c5c      	ldr	r4, [pc, #368]	; (800512c <seven_segment_display+0x410>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2140      	movs	r1, #64	; 0x40
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f7fc fe67 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2180      	movs	r1, #128	; 0x80
 8004fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fce:	f7fc fe61 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2140      	movs	r1, #64	; 0x40
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7fc fe5c 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	4853      	ldr	r0, [pc, #332]	; (8005130 <seven_segment_display+0x414>)
 8004fe2:	f7fc fe57 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff0:	f7fc fe50 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ffe:	f7fc fe49 	bl	8001c94 <HAL_GPIO_WritePin>
		break;
 8005002:	bd10      	pop	{r4, pc}
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005004:	2200      	movs	r2, #0
 8005006:	2120      	movs	r1, #32
 8005008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800500c:	f7fc fe42 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005010:	4c46      	ldr	r4, [pc, #280]	; (800512c <seven_segment_display+0x410>)
 8005012:	2200      	movs	r2, #0
 8005014:	2140      	movs	r1, #64	; 0x40
 8005016:	4620      	mov	r0, r4
 8005018:	f7fc fe3c 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800501c:	2200      	movs	r2, #0
 800501e:	2180      	movs	r1, #128	; 0x80
 8005020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005024:	f7fc fe36 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005028:	2200      	movs	r2, #0
 800502a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800502e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005032:	f7fc fe2f 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005036:	2200      	movs	r2, #0
 8005038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800503c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005040:	f7fc fe28 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005044:	2200      	movs	r2, #0
 8005046:	2140      	movs	r1, #64	; 0x40
 8005048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800504c:	f7fc fe22 	bl	8001c94 <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005050:	2201      	movs	r2, #1
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	4836      	ldr	r0, [pc, #216]	; (8005130 <seven_segment_display+0x414>)
 8005056:	f7fc fe1d 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 800505a:	2201      	movs	r2, #1
 800505c:	2140      	movs	r1, #64	; 0x40
 800505e:	4620      	mov	r0, r4
 8005060:	f7fc fe18 	bl	8001c94 <HAL_GPIO_WritePin>
		break;
 8005064:	bd10      	pop	{r4, pc}
	case 0:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005066:	2200      	movs	r2, #0
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800506e:	f7fc fe11 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8005072:	2200      	movs	r2, #0
 8005074:	2120      	movs	r1, #32
 8005076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800507a:	f7fc fe0b 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 800507e:	4c2b      	ldr	r4, [pc, #172]	; (800512c <seven_segment_display+0x410>)
 8005080:	2200      	movs	r2, #0
 8005082:	2140      	movs	r1, #64	; 0x40
 8005084:	4620      	mov	r0, r4
 8005086:	f7fc fe05 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005092:	f7fc fdff 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8005096:	2200      	movs	r2, #0
 8005098:	2140      	movs	r1, #64	; 0x40
 800509a:	4620      	mov	r0, r4
 800509c:	f7fc fdfa 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 80050a0:	2200      	movs	r2, #0
 80050a2:	2180      	movs	r1, #128	; 0x80
 80050a4:	4822      	ldr	r0, [pc, #136]	; (8005130 <seven_segment_display+0x414>)
 80050a6:	f7fc fdf5 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 80050aa:	2200      	movs	r2, #0
 80050ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b4:	f7fc fdee 	bl	8001c94 <HAL_GPIO_WritePin>
		//OFF

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 80050b8:	2201      	movs	r2, #1
 80050ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050c2:	f7fc fde7 	bl	8001c94 <HAL_GPIO_WritePin>
		break;
 80050c6:	bd10      	pop	{r4, pc}
	default:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 80050c8:	2201      	movs	r2, #1
 80050ca:	2120      	movs	r1, #32
 80050cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d0:	f7fc fde0 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 80050d4:	4c15      	ldr	r4, [pc, #84]	; (800512c <seven_segment_display+0x410>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	2140      	movs	r1, #64	; 0x40
 80050da:	4620      	mov	r0, r4
 80050dc:	f7fc fdda 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80050e0:	2201      	movs	r2, #1
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050e8:	f7fc fdd4 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80050ec:	2201      	movs	r2, #1
 80050ee:	2140      	movs	r1, #64	; 0x40
 80050f0:	4620      	mov	r0, r4
 80050f2:	f7fc fdcf 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80050f6:	2201      	movs	r2, #1
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	480d      	ldr	r0, [pc, #52]	; (8005130 <seven_segment_display+0x414>)
 80050fc:	f7fc fdca 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8005100:	2201      	movs	r2, #1
 8005102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800510a:	f7fc fdc3 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 800510e:	2201      	movs	r2, #1
 8005110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005118:	f7fc fdbc 	bl	8001c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800511c:	2201      	movs	r2, #1
 800511e:	2140      	movs	r1, #64	; 0x40
 8005120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005124:	f7fc fdb6 	bl	8001c94 <HAL_GPIO_WritePin>
 8005128:	bd10      	pop	{r4, pc}
 800512a:	bf00      	nop
 800512c:	48000400 	.word	0x48000400
 8005130:	48000800 	.word	0x48000800

08005134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005134:	b500      	push	{lr}
 8005136:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <HAL_MspInit+0x78>)
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	619a      	str	r2, [r3, #24]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800514c:	2007      	movs	r0, #7
 800514e:	f7fc fa5d 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 8005152:	2202      	movs	r2, #2
 8005154:	2100      	movs	r1, #0
 8005156:	f06f 000b 	mvn.w	r0, #11
 800515a:	f7fc fa69 	bl	8001630 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 800515e:	2202      	movs	r2, #2
 8005160:	2100      	movs	r1, #0
 8005162:	f06f 000a 	mvn.w	r0, #10
 8005166:	f7fc fa63 	bl	8001630 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 800516a:	2202      	movs	r2, #2
 800516c:	2100      	movs	r1, #0
 800516e:	f06f 0009 	mvn.w	r0, #9
 8005172:	f7fc fa5d 	bl	8001630 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 8005176:	2202      	movs	r2, #2
 8005178:	2100      	movs	r1, #0
 800517a:	f06f 0004 	mvn.w	r0, #4
 800517e:	f7fc fa57 	bl	8001630 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 8005182:	2202      	movs	r2, #2
 8005184:	2100      	movs	r1, #0
 8005186:	f06f 0003 	mvn.w	r0, #3
 800518a:	f7fc fa51 	bl	8001630 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 800518e:	2202      	movs	r2, #2
 8005190:	2100      	movs	r1, #0
 8005192:	f06f 0001 	mvn.w	r0, #1
 8005196:	f7fc fa4b 	bl	8001630 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 800519a:	2202      	movs	r2, #2
 800519c:	2100      	movs	r1, #0
 800519e:	f04f 30ff 	mov.w	r0, #4294967295
 80051a2:	f7fc fa45 	bl	8001630 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051a6:	b003      	add	sp, #12
 80051a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80051ac:	40021000 	.word	0x40021000

080051b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 80051b0:	6802      	ldr	r2, [r0, #0]
 80051b2:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_ADC_MspInit+0x84>)
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d000      	beq.n	80051ba <HAL_ADC_MspInit+0xa>
 80051b8:	4770      	bx	lr
{
 80051ba:	b570      	push	{r4, r5, r6, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_ADC_MspInit+0x88>)
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051c8:	615a      	str	r2, [r3, #20]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC2_IN8
    PC3     ------> ADC2_IN9
    PB2     ------> ADC2_IN12
    PB15     ------> ADC2_IN15 
    */
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 80051d4:	230c      	movs	r3, #12
 80051d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051d8:	2603      	movs	r6, #3
 80051da:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051dc:	2500      	movs	r5, #0
 80051de:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051e0:	a901      	add	r1, sp, #4
 80051e2:	4816      	ldr	r0, [pc, #88]	; (800523c <HAL_ADC_MspInit+0x8c>)
 80051e4:	f7fc fc8c 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 80051e8:	f248 0304 	movw	r3, #32772	; 0x8004
 80051ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051ee:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f0:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f2:	a901      	add	r1, sp, #4
 80051f4:	4812      	ldr	r0, [pc, #72]	; (8005240 <HAL_ADC_MspInit+0x90>)
 80051f6:	f7fc fc83 	bl	8001b00 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80051fa:	4812      	ldr	r0, [pc, #72]	; (8005244 <HAL_ADC_MspInit+0x94>)
 80051fc:	4b12      	ldr	r3, [pc, #72]	; (8005248 <HAL_ADC_MspInit+0x98>)
 80051fe:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005200:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005202:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005204:	2380      	movs	r3, #128	; 0x80
 8005206:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800520c:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800520e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005212:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005214:	2320      	movs	r3, #32
 8005216:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005218:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800521a:	f7fc fa85 	bl	8001728 <HAL_DMA_Init>
 800521e:	b920      	cbnz	r0, 800522a <HAL_ADC_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005220:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_ADC_MspInit+0x94>)
 8005222:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005224:	625c      	str	r4, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005226:	b006      	add	sp, #24
 8005228:	bd70      	pop	{r4, r5, r6, pc}
      _Error_Handler(__FILE__, __LINE__);
 800522a:	217a      	movs	r1, #122	; 0x7a
 800522c:	4807      	ldr	r0, [pc, #28]	; (800524c <HAL_ADC_MspInit+0x9c>)
 800522e:	f7ff fa88 	bl	8004742 <_Error_Handler>
 8005232:	e7f5      	b.n	8005220 <HAL_ADC_MspInit+0x70>
 8005234:	50000100 	.word	0x50000100
 8005238:	40021000 	.word	0x40021000
 800523c:	48000800 	.word	0x48000800
 8005240:	48000400 	.word	0x48000400
 8005244:	200004e8 	.word	0x200004e8
 8005248:	4002001c 	.word	0x4002001c
 800524c:	08007b1c 	.word	0x08007b1c

08005250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005250:	6802      	ldr	r2, [r0, #0]
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_I2C_MspInit+0x58>)
 8005254:	429a      	cmp	r2, r3
 8005256:	d000      	beq.n	800525a <HAL_I2C_MspInit+0xa>
 8005258:	4770      	bx	lr
{
 800525a:	b500      	push	{lr}
 800525c:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 800525e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005262:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005264:	2312      	movs	r3, #18
 8005266:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005268:	2301      	movs	r3, #1
 800526a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800526c:	2303      	movs	r3, #3
 800526e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005270:	2304      	movs	r3, #4
 8005272:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005274:	eb0d 0103 	add.w	r1, sp, r3
 8005278:	480c      	ldr	r0, [pc, #48]	; (80052ac <HAL_I2C_MspInit+0x5c>)
 800527a:	f7fc fc41 	bl	8001b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <HAL_I2C_MspInit+0x60>)
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005286:	61da      	str	r2, [r3, #28]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005292:	2200      	movs	r2, #0
 8005294:	4611      	mov	r1, r2
 8005296:	201f      	movs	r0, #31
 8005298:	f7fc f9ca 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800529c:	201f      	movs	r0, #31
 800529e:	f7fc f9f9 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80052a2:	b007      	add	sp, #28
 80052a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80052a8:	40005400 	.word	0x40005400
 80052ac:	48000400 	.word	0x48000400
 80052b0:	40021000 	.word	0x40021000

080052b4 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80052b4:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 80052b6:	6802      	ldr	r2, [r0, #0]
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RTC_MspInit+0x34>)
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d000      	beq.n	80052c0 <HAL_RTC_MspInit+0xc>
 80052be:	bd08      	pop	{r3, pc}
 80052c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80052c4:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80052c8:	fab2 f282 	clz	r2, r2
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <HAL_RTC_MspInit+0x38>)
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80052d6:	2200      	movs	r2, #0
 80052d8:	4611      	mov	r1, r2
 80052da:	2003      	movs	r0, #3
 80052dc:	f7fc f9a8 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80052e0:	2003      	movs	r0, #3
 80052e2:	f7fc f9d7 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80052e6:	e7ea      	b.n	80052be <HAL_RTC_MspInit+0xa>
 80052e8:	40002800 	.word	0x40002800
 80052ec:	10908100 	.word	0x10908100

080052f0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80052f0:	6803      	ldr	r3, [r0, #0]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d000      	beq.n	80052fa <HAL_TIM_Base_MspInit+0xa>
 80052f8:	4770      	bx	lr
{
 80052fa:	b500      	push	{lr}
 80052fc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	61da      	str	r2, [r3, #28]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8005314:	2202      	movs	r2, #2
 8005316:	2100      	movs	r1, #0
 8005318:	201c      	movs	r0, #28
 800531a:	f7fc f989 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800531e:	201c      	movs	r0, #28
 8005320:	f7fc f9b8 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005324:	b003      	add	sp, #12
 8005326:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800532c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800532c:	6802      	ldr	r2, [r0, #0]
 800532e:	4b14      	ldr	r3, [pc, #80]	; (8005380 <HAL_UART_MspInit+0x54>)
 8005330:	429a      	cmp	r2, r3
 8005332:	d000      	beq.n	8005336 <HAL_UART_MspInit+0xa>
 8005334:	4770      	bx	lr
{
 8005336:	b510      	push	{r4, lr}
 8005338:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800533a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005344:	619a      	str	r2, [r3, #24]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005350:	2330      	movs	r3, #48	; 0x30
 8005352:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005354:	2302      	movs	r3, #2
 8005356:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005358:	2400      	movs	r4, #0
 800535a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800535c:	2303      	movs	r3, #3
 800535e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005360:	2307      	movs	r3, #7
 8005362:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005364:	a901      	add	r1, sp, #4
 8005366:	4807      	ldr	r0, [pc, #28]	; (8005384 <HAL_UART_MspInit+0x58>)
 8005368:	f7fc fbca 	bl	8001b00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800536c:	4622      	mov	r2, r4
 800536e:	4621      	mov	r1, r4
 8005370:	2025      	movs	r0, #37	; 0x25
 8005372:	f7fc f95d 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005376:	2025      	movs	r0, #37	; 0x25
 8005378:	f7fc f98c 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800537c:	b006      	add	sp, #24
 800537e:	bd10      	pop	{r4, pc}
 8005380:	40013800 	.word	0x40013800
 8005384:	48000800 	.word	0x48000800

08005388 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8005388:	4770      	bx	lr

0800538a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800538a:	4770      	bx	lr

0800538c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800538c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800538e:	f7fb fdd3 	bl	8000f38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005392:	f7fc f9b2 	bl	80016fa <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
 8005396:	2201      	movs	r2, #1
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <SysTick_Handler+0x24>)
 800539a:	701a      	strb	r2, [r3, #0]
  fake_RTC_timer += 1;
 800539c:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <SysTick_Handler+0x28>)
 800539e:	8813      	ldrh	r3, [r2, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	8013      	strh	r3, [r2, #0]
  flash_counter += 1;
 80053a4:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <SysTick_Handler+0x2c>)
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	bd08      	pop	{r3, pc}
 80053ae:	bf00      	nop
 80053b0:	200002b1 	.word	0x200002b1
 80053b4:	20000262 	.word	0x20000262
 80053b8:	20000264 	.word	0x20000264

080053bc <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 80053bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80053be:	4802      	ldr	r0, [pc, #8]	; (80053c8 <RTC_WKUP_IRQHandler+0xc>)
 80053c0:	f7fd fcd0 	bl	8002d64 <HAL_RTCEx_WakeUpTimerIRQHandler>
 80053c4:	bd08      	pop	{r3, pc}
 80053c6:	bf00      	nop
 80053c8:	20000470 	.word	0x20000470

080053cc <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80053cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80053ce:	2001      	movs	r0, #1
 80053d0:	f7fc fc66 	bl	8001ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  touch_flag = 1;
 80053d4:	2201      	movs	r2, #1
 80053d6:	4b01      	ldr	r3, [pc, #4]	; (80053dc <EXTI0_IRQHandler+0x10>)
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	bd08      	pop	{r3, pc}
 80053dc:	200002c4 	.word	0x200002c4

080053e0 <DMA1_Channel2_IRQHandler>:

/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
 80053e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80053e2:	4802      	ldr	r0, [pc, #8]	; (80053ec <DMA1_Channel2_IRQHandler+0xc>)
 80053e4:	f7fc f9f1 	bl	80017ca <HAL_DMA_IRQHandler>
 80053e8:	bd08      	pop	{r3, pc}
 80053ea:	bf00      	nop
 80053ec:	200004e8 	.word	0x200004e8

080053f0 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80053f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80053f2:	2040      	movs	r0, #64	; 0x40
 80053f4:	f7fc fc54 	bl	8001ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 80053f8:	2201      	movs	r2, #1
 80053fa:	4b01      	ldr	r3, [pc, #4]	; (8005400 <EXTI9_5_IRQHandler+0x10>)
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	bd08      	pop	{r3, pc}
 8005400:	200002b9 	.word	0x200002b9

08005404 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8005404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005406:	4803      	ldr	r0, [pc, #12]	; (8005414 <TIM2_IRQHandler+0x10>)
 8005408:	f7fd fd0e 	bl	8002e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag = 0;
 800540c:	2200      	movs	r2, #0
 800540e:	4b02      	ldr	r3, [pc, #8]	; (8005418 <TIM2_IRQHandler+0x14>)
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	bd08      	pop	{r3, pc}
 8005414:	200004a8 	.word	0x200004a8
 8005418:	200002b8 	.word	0x200002b8

0800541c <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 800541c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800541e:	4802      	ldr	r0, [pc, #8]	; (8005428 <I2C1_EV_IRQHandler+0xc>)
 8005420:	f7fc fcaa 	bl	8001d78 <HAL_I2C_EV_IRQHandler>
 8005424:	bd08      	pop	{r3, pc}
 8005426:	bf00      	nop
 8005428:	2000036c 	.word	0x2000036c

0800542c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 800542c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800542e:	4802      	ldr	r0, [pc, #8]	; (8005438 <USART1_IRQHandler+0xc>)
 8005430:	f7fe f9e8 	bl	8003804 <HAL_UART_IRQHandler>
 8005434:	bd08      	pop	{r3, pc}
 8005436:	bf00      	nop
 8005438:	20000400 	.word	0x20000400

0800543c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800543c:	4915      	ldr	r1, [pc, #84]	; (8005494 <SystemInit+0x58>)
 800543e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800544a:	4b13      	ldr	r3, [pc, #76]	; (8005498 <SystemInit+0x5c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005454:	6858      	ldr	r0, [r3, #4]
 8005456:	4a11      	ldr	r2, [pc, #68]	; (800549c <SystemInit+0x60>)
 8005458:	4002      	ands	r2, r0
 800545a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005462:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005466:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800546e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005476:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	f022 020f 	bic.w	r2, r2, #15
 800547e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005480:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <SystemInit+0x64>)
 8005484:	4002      	ands	r2, r0
 8005486:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005488:	2200      	movs	r2, #0
 800548a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800548c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005490:	608b      	str	r3, [r1, #8]
 8005492:	4770      	bx	lr
 8005494:	e000ed00 	.word	0xe000ed00
 8005498:	40021000 	.word	0x40021000
 800549c:	f87fc00c 	.word	0xf87fc00c
 80054a0:	ff00fccc 	.word	0xff00fccc

080054a4 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 80054a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
	uart_command[uart_counter] = rx_buffer;
 80054a8:	4c8e      	ldr	r4, [pc, #568]	; (80056e4 <uart_comms+0x240>)
 80054aa:	4d8f      	ldr	r5, [pc, #572]	; (80056e8 <uart_comms+0x244>)
 80054ac:	498f      	ldr	r1, [pc, #572]	; (80056ec <uart_comms+0x248>)
 80054ae:	7823      	ldrb	r3, [r4, #0]
 80054b0:	682a      	ldr	r2, [r5, #0]
	rx_flag = 0;
 80054b2:	4e8f      	ldr	r6, [pc, #572]	; (80056f0 <uart_comms+0x24c>)
	uart_command[uart_counter] = rx_buffer;
 80054b4:	7808      	ldrb	r0, [r1, #0]
	rx_flag = 0;
 80054b6:	2100      	movs	r1, #0
 80054b8:	7031      	strb	r1, [r6, #0]
	uart_command[uart_counter] = rx_buffer;
 80054ba:	54d0      	strb	r0, [r2, r3]
	if(uart_command[0] == '$'){
 80054bc:	682a      	ldr	r2, [r5, #0]
 80054be:	7813      	ldrb	r3, [r2, #0]
 80054c0:	2b24      	cmp	r3, #36	; 0x24
void uart_comms(){
 80054c2:	b083      	sub	sp, #12

		uart_counter += 1;
 80054c4:	7823      	ldrb	r3, [r4, #0]
	if(uart_command[0] == '$'){
 80054c6:	d006      	beq.n	80054d6 <uart_comms+0x32>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 80054c8:	2b3b      	cmp	r3, #59	; 0x3b
		uart_counter = 0;
 80054ca:	bf84      	itt	hi
 80054cc:	2300      	movhi	r3, #0
 80054ce:	7023      	strbhi	r3, [r4, #0]
	}
}
 80054d0:	b003      	add	sp, #12
 80054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uart_counter += 1;
 80054d6:	3301      	adds	r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	7023      	strb	r3, [r4, #0]
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80054dc:	7810      	ldrb	r0, [r2, #0]
 80054de:	2824      	cmp	r0, #36	; 0x24
 80054e0:	d1f2      	bne.n	80054c8 <uart_comms+0x24>
 80054e2:	441a      	add	r2, r3
 80054e4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80054e8:	280a      	cmp	r0, #10
 80054ea:	d1ed      	bne.n	80054c8 <uart_comms+0x24>
 80054ec:	f812 2c02 	ldrb.w	r2, [r2, #-2]
 80054f0:	2a0d      	cmp	r2, #13
 80054f2:	d1e9      	bne.n	80054c8 <uart_comms+0x24>
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d9eb      	bls.n	80054d0 <uart_comms+0x2c>
		memset(return_value,0x00, 50);
 80054f8:	4e7e      	ldr	r6, [pc, #504]	; (80056f4 <uart_comms+0x250>)
		uart_command_copy = uart_command;
 80054fa:	4f7f      	ldr	r7, [pc, #508]	; (80056f8 <uart_comms+0x254>)
		memset(return_value,0x00, 50);
 80054fc:	6830      	ldr	r0, [r6, #0]
 80054fe:	2232      	movs	r2, #50	; 0x32
 8005500:	f000 fcaf 	bl	8005e62 <memset>
		uart_command_copy = uart_command;
 8005504:	682a      	ldr	r2, [r5, #0]
 8005506:	603a      	str	r2, [r7, #0]
		switch(uart_command[1]){
 8005508:	7853      	ldrb	r3, [r2, #1]
 800550a:	3b41      	subs	r3, #65	; 0x41
 800550c:	2b0b      	cmp	r3, #11
 800550e:	d825      	bhi.n	800555c <uart_comms+0xb8>
 8005510:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005514:	0327030a 	.word	0x0327030a
 8005518:	02c802ef 	.word	0x02c802ef
 800551c:	026802ac 	.word	0x026802ac
 8005520:	01ed0250 	.word	0x01ed0250
 8005524:	01120181 	.word	0x01120181
 8005528:	000c002c 	.word	0x000c002c
			log_receiced_num = uart_command[3] - 48;
 800552c:	78d3      	ldrb	r3, [r2, #3]
			if(log_receiced_num > log_counter && log_full == 0){
 800552e:	4a73      	ldr	r2, [pc, #460]	; (80056fc <uart_comms+0x258>)
			log_receiced_num = uart_command[3] - 48;
 8005530:	4973      	ldr	r1, [pc, #460]	; (8005700 <uart_comms+0x25c>)
			if(log_receiced_num > log_counter && log_full == 0){
 8005532:	7812      	ldrb	r2, [r2, #0]
			log_receiced_num = uart_command[3] - 48;
 8005534:	3b30      	subs	r3, #48	; 0x30
 8005536:	b2db      	uxtb	r3, r3
			if(log_receiced_num > log_counter && log_full == 0){
 8005538:	429a      	cmp	r2, r3
			log_receiced_num = uart_command[3] - 48;
 800553a:	700b      	strb	r3, [r1, #0]
			if(log_receiced_num > log_counter && log_full == 0){
 800553c:	d202      	bcs.n	8005544 <uart_comms+0xa0>
 800553e:	4a71      	ldr	r2, [pc, #452]	; (8005704 <uart_comms+0x260>)
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	b15a      	cbz	r2, 800555c <uart_comms+0xb8>
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)(flash_mem_start+64*log_receiced_num), strlen((char*)(flash_mem_start+64*log_receiced_num)));
 8005544:	4a70      	ldr	r2, [pc, #448]	; (8005708 <uart_comms+0x264>)
 8005546:	6816      	ldr	r6, [r2, #0]
 8005548:	eb06 1683 	add.w	r6, r6, r3, lsl #6
 800554c:	4630      	mov	r0, r6
 800554e:	f7fa fe3f 	bl	80001d0 <strlen>
 8005552:	4631      	mov	r1, r6
 8005554:	b282      	uxth	r2, r0
 8005556:	486d      	ldr	r0, [pc, #436]	; (800570c <uart_comms+0x268>)
 8005558:	f7fd fe69 	bl	800322e <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 800555c:	6828      	ldr	r0, [r5, #0]
 800555e:	223c      	movs	r2, #60	; 0x3c
 8005560:	2100      	movs	r1, #0
 8005562:	f000 fc7e 	bl	8005e62 <memset>
		uart_counter = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	7023      	strb	r3, [r4, #0]
 800556a:	e7b1      	b.n	80054d0 <uart_comms+0x2c>
			memcpy(return_value, uart_command, 2);
 800556c:	6833      	ldr	r3, [r6, #0]
 800556e:	8812      	ldrh	r2, [r2, #0]
			memcpy(return_value+2,comma,1 );
 8005570:	4f67      	ldr	r7, [pc, #412]	; (8005710 <uart_comms+0x26c>)
			memcpy(return_value, uart_command, 2);
 8005572:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 8005574:	6832      	ldr	r2, [r6, #0]
 8005576:	f897 9000 	ldrb.w	r9, [r7]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 800557a:	4b66      	ldr	r3, [pc, #408]	; (8005714 <uart_comms+0x270>)
			memcpy(return_value+2,comma,1 );
 800557c:	f882 9002 	strb.w	r9, [r2, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8005580:	f8d3 8000 	ldr.w	r8, [r3]
 8005584:	4640      	mov	r0, r8
 8005586:	f7fa fe23 	bl	80001d0 <strlen>
 800558a:	6833      	ldr	r3, [r6, #0]
 800558c:	4602      	mov	r2, r0
 800558e:	4641      	mov	r1, r8
 8005590:	1cd8      	adds	r0, r3, #3
 8005592:	f000 fc5b 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005596:	f8d6 8000 	ldr.w	r8, [r6]
 800559a:	4640      	mov	r0, r8
 800559c:	f7fa fe18 	bl	80001d0 <strlen>
 80055a0:	f808 9000 	strb.w	r9, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 80055a4:	f8d6 8000 	ldr.w	r8, [r6]
 80055a8:	4640      	mov	r0, r8
 80055aa:	f7fa fe11 	bl	80001d0 <strlen>
 80055ae:	4b5a      	ldr	r3, [pc, #360]	; (8005718 <uart_comms+0x274>)
 80055b0:	f8d3 9000 	ldr.w	r9, [r3]
 80055b4:	4682      	mov	sl, r0
 80055b6:	4648      	mov	r0, r9
 80055b8:	f7fa fe0a 	bl	80001d0 <strlen>
 80055bc:	4649      	mov	r1, r9
 80055be:	4602      	mov	r2, r0
 80055c0:	eb08 000a 	add.w	r0, r8, sl
 80055c4:	f000 fc42 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80055c8:	f8d6 8000 	ldr.w	r8, [r6]
 80055cc:	4640      	mov	r0, r8
 80055ce:	f7fa fdff 	bl	80001d0 <strlen>
 80055d2:	783b      	ldrb	r3, [r7, #0]
 80055d4:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 80055d8:	f8d6 8000 	ldr.w	r8, [r6]
 80055dc:	4640      	mov	r0, r8
 80055de:	f7fa fdf7 	bl	80001d0 <strlen>
 80055e2:	4b4e      	ldr	r3, [pc, #312]	; (800571c <uart_comms+0x278>)
 80055e4:	f8d3 9000 	ldr.w	r9, [r3]
 80055e8:	4682      	mov	sl, r0
 80055ea:	4648      	mov	r0, r9
 80055ec:	f7fa fdf0 	bl	80001d0 <strlen>
 80055f0:	4649      	mov	r1, r9
 80055f2:	4602      	mov	r2, r0
 80055f4:	eb08 000a 	add.w	r0, r8, sl
 80055f8:	f000 fc28 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80055fc:	f8d6 8000 	ldr.w	r8, [r6]
 8005600:	4640      	mov	r0, r8
 8005602:	f7fa fde5 	bl	80001d0 <strlen>
 8005606:	783b      	ldrb	r3, [r7, #0]
 8005608:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 800560c:	f8d6 8000 	ldr.w	r8, [r6]
 8005610:	4640      	mov	r0, r8
 8005612:	f7fa fddd 	bl	80001d0 <strlen>
 8005616:	4b42      	ldr	r3, [pc, #264]	; (8005720 <uart_comms+0x27c>)
 8005618:	f8d3 9000 	ldr.w	r9, [r3]
 800561c:	4682      	mov	sl, r0
 800561e:	4648      	mov	r0, r9
 8005620:	f7fa fdd6 	bl	80001d0 <strlen>
 8005624:	4649      	mov	r1, r9
 8005626:	4602      	mov	r2, r0
 8005628:	eb08 000a 	add.w	r0, r8, sl
 800562c:	f000 fc0e 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005630:	f8d6 8000 	ldr.w	r8, [r6]
 8005634:	4640      	mov	r0, r8
 8005636:	f7fa fdcb 	bl	80001d0 <strlen>
 800563a:	783b      	ldrb	r3, [r7, #0]
 800563c:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8005640:	f8d6 8000 	ldr.w	r8, [r6]
 8005644:	4640      	mov	r0, r8
 8005646:	f7fa fdc3 	bl	80001d0 <strlen>
 800564a:	4b36      	ldr	r3, [pc, #216]	; (8005724 <uart_comms+0x280>)
 800564c:	f8d3 9000 	ldr.w	r9, [r3]
 8005650:	4682      	mov	sl, r0
 8005652:	4648      	mov	r0, r9
 8005654:	f7fa fdbc 	bl	80001d0 <strlen>
 8005658:	4649      	mov	r1, r9
 800565a:	4602      	mov	r2, r0
 800565c:	eb08 000a 	add.w	r0, r8, sl
 8005660:	f000 fbf4 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005664:	f8d6 8000 	ldr.w	r8, [r6]
 8005668:	4640      	mov	r0, r8
 800566a:	f7fa fdb1 	bl	80001d0 <strlen>
 800566e:	783b      	ldrb	r3, [r7, #0]
 8005670:	f808 3000 	strb.w	r3, [r8, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8005674:	f8d6 8000 	ldr.w	r8, [r6]
 8005678:	4640      	mov	r0, r8
 800567a:	f7fa fda9 	bl	80001d0 <strlen>
 800567e:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <uart_comms+0x284>)
 8005680:	f8d3 9000 	ldr.w	r9, [r3]
 8005684:	4682      	mov	sl, r0
 8005686:	4648      	mov	r0, r9
 8005688:	f7fa fda2 	bl	80001d0 <strlen>
 800568c:	4649      	mov	r1, r9
 800568e:	4602      	mov	r2, r0
 8005690:	eb08 000a 	add.w	r0, r8, sl
 8005694:	f000 fbda 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005698:	f8d6 8000 	ldr.w	r8, [r6]
 800569c:	4640      	mov	r0, r8
 800569e:	f7fa fd97 	bl	80001d0 <strlen>
 80056a2:	783b      	ldrb	r3, [r7, #0]
 80056a4:	f808 3000 	strb.w	r3, [r8, r0]
			if(valve_state == valve_OPEN){
 80056a8:	4a20      	ldr	r2, [pc, #128]	; (800572c <uart_comms+0x288>)
 80056aa:	4b21      	ldr	r3, [pc, #132]	; (8005730 <uart_comms+0x28c>)
 80056ac:	6817      	ldr	r7, [r2, #0]
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 80056ae:	f8d6 8000 	ldr.w	r8, [r6]
			if(valve_state == valve_OPEN){
 80056b2:	429f      	cmp	r7, r3
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 80056b4:	4640      	mov	r0, r8
			if(valve_state == valve_OPEN){
 80056b6:	f000 8283 	beq.w	8005bc0 <uart_comms+0x71c>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 80056ba:	f7fa fd89 	bl	80001d0 <strlen>
 80056be:	4681      	mov	r9, r0
 80056c0:	4638      	mov	r0, r7
 80056c2:	f7fa fd85 	bl	80001d0 <strlen>
 80056c6:	4639      	mov	r1, r7
 80056c8:	4602      	mov	r2, r0
 80056ca:	eb08 0009 	add.w	r0, r8, r9
 80056ce:	f000 fbbd 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 80056d2:	6837      	ldr	r7, [r6, #0]
 80056d4:	4638      	mov	r0, r7
 80056d6:	f7fa fd7b 	bl	80001d0 <strlen>
 80056da:	4b16      	ldr	r3, [pc, #88]	; (8005734 <uart_comms+0x290>)
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	523b      	strh	r3, [r7, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80056e0:	6836      	ldr	r6, [r6, #0]
 80056e2:	e733      	b.n	800554c <uart_comms+0xa8>
 80056e4:	200002d0 	.word	0x200002d0
 80056e8:	200002c8 	.word	0x200002c8
 80056ec:	200005ac 	.word	0x200005ac
 80056f0:	200002a5 	.word	0x200002a5
 80056f4:	200002a0 	.word	0x200002a0
 80056f8:	200002cc 	.word	0x200002cc
 80056fc:	2000028c 	.word	0x2000028c
 8005700:	2000028e 	.word	0x2000028e
 8005704:	2000028d 	.word	0x2000028d
 8005708:	20000010 	.word	0x20000010
 800570c:	20000400 	.word	0x20000400
 8005710:	20000004 	.word	0x20000004
 8005714:	20000258 	.word	0x20000258
 8005718:	200002dc 	.word	0x200002dc
 800571c:	2000024c 	.word	0x2000024c
 8005720:	20000270 	.word	0x20000270
 8005724:	200002c0 	.word	0x200002c0
 8005728:	20000284 	.word	0x20000284
 800572c:	200002d4 	.word	0x200002d4
 8005730:	2000002c 	.word	0x2000002c
 8005734:	20000008 	.word	0x20000008
			if(auto_heating == 1){
 8005738:	4bbb      	ldr	r3, [pc, #748]	; (8005a28 <uart_comms+0x584>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	f47f af0d 	bne.w	800555c <uart_comms+0xb8>
				memcpy(return_value, uart_command, 2);
 8005742:	6833      	ldr	r3, [r6, #0]
 8005744:	8812      	ldrh	r2, [r2, #0]
 8005746:	801a      	strh	r2, [r3, #0]
				memcpy(return_value+2, endSimbol,2 );
 8005748:	4ab8      	ldr	r2, [pc, #736]	; (8005a2c <uart_comms+0x588>)
 800574a:	6833      	ldr	r3, [r6, #0]
 800574c:	8812      	ldrh	r2, [r2, #0]
 800574e:	805a      	strh	r2, [r3, #2]
				HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8005750:	6836      	ldr	r6, [r6, #0]
 8005752:	4630      	mov	r0, r6
 8005754:	f7fa fd3c 	bl	80001d0 <strlen>
 8005758:	4631      	mov	r1, r6
 800575a:	b282      	uxth	r2, r0
 800575c:	48b4      	ldr	r0, [pc, #720]	; (8005a30 <uart_comms+0x58c>)
 800575e:	f7fd fd66 	bl	800322e <HAL_UART_Transmit_IT>
				if(uart_command[3] == '1'){ // first heating schedule
 8005762:	682b      	ldr	r3, [r5, #0]
 8005764:	78db      	ldrb	r3, [r3, #3]
 8005766:	2b31      	cmp	r3, #49	; 0x31
 8005768:	f000 8293 	beq.w	8005c92 <uart_comms+0x7ee>
				else if(uart_command[3] == '2'){ // second heating schedule
 800576c:	2b32      	cmp	r3, #50	; 0x32
 800576e:	f000 8241 	beq.w	8005bf4 <uart_comms+0x750>
				else if(uart_command[3] == '3'){ // 3rd heating schedule
 8005772:	2b33      	cmp	r3, #51	; 0x33
 8005774:	f47f aef2 	bne.w	800555c <uart_comms+0xb8>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005778:	6838      	ldr	r0, [r7, #0]
 800577a:	49ae      	ldr	r1, [pc, #696]	; (8005a34 <uart_comms+0x590>)
 800577c:	4eae      	ldr	r6, [pc, #696]	; (8005a38 <uart_comms+0x594>)
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 800577e:	4faf      	ldr	r7, [pc, #700]	; (8005a3c <uart_comms+0x598>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005780:	f000 fc58 	bl	8006034 <strtok>
					heating_info = (strtok(NULL, ","));
 8005784:	49ab      	ldr	r1, [pc, #684]	; (8005a34 <uart_comms+0x590>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005786:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005788:	2000      	movs	r0, #0
 800578a:	f000 fc53 	bl	8006034 <strtok>
					heating_info = (strtok(NULL, ","));
 800578e:	49a9      	ldr	r1, [pc, #676]	; (8005a34 <uart_comms+0x590>)
					heating_info = (strtok(NULL, ","));
 8005790:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005792:	2000      	movs	r0, #0
 8005794:	f000 fc4e 	bl	8006034 <strtok>
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8005798:	220a      	movs	r2, #10
 800579a:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 800579c:	6030      	str	r0, [r6, #0]
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 800579e:	f000 fd1d 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 80057a2:	49a4      	ldr	r1, [pc, #656]	; (8005a34 <uart_comms+0x590>)
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 80057a4:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
					heating_info = (strtok(NULL, ","));
 80057a8:	2000      	movs	r0, #0
 80057aa:	f000 fc43 	bl	8006034 <strtok>
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 80057ae:	220a      	movs	r2, #10
 80057b0:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 80057b2:	6030      	str	r0, [r6, #0]
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 80057b4:	f000 fd12 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 80057b8:	499e      	ldr	r1, [pc, #632]	; (8005a34 <uart_comms+0x590>)
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 80057ba:	f887 0051 	strb.w	r0, [r7, #81]	; 0x51
					heating_info = (strtok(NULL, ","));
 80057be:	2000      	movs	r0, #0
 80057c0:	f000 fc38 	bl	8006034 <strtok>
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 80057c4:	220a      	movs	r2, #10
 80057c6:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 80057c8:	6030      	str	r0, [r6, #0]
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 80057ca:	f000 fd07 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 80057ce:	4999      	ldr	r1, [pc, #612]	; (8005a34 <uart_comms+0x590>)
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 80057d0:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
					heating_info = (strtok(NULL, ","));
 80057d4:	2000      	movs	r0, #0
 80057d6:	f000 fc2d 	bl	8006034 <strtok>
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 80057da:	220a      	movs	r2, #10
 80057dc:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 80057de:	6030      	str	r0, [r6, #0]
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 80057e0:	f000 fcfc 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 80057e4:	4993      	ldr	r1, [pc, #588]	; (8005a34 <uart_comms+0x590>)
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 80057e6:	f887 0064 	strb.w	r0, [r7, #100]	; 0x64
					heating_info = (strtok(NULL, ","));
 80057ea:	2000      	movs	r0, #0
 80057ec:	f000 fc22 	bl	8006034 <strtok>
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 80057f0:	220a      	movs	r2, #10
 80057f2:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 80057f4:	6030      	str	r0, [r6, #0]
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 80057f6:	f000 fcf1 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, "\r\n"));
 80057fa:	4991      	ldr	r1, [pc, #580]	; (8005a40 <uart_comms+0x59c>)
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 80057fc:	f887 0065 	strb.w	r0, [r7, #101]	; 0x65
					heating_info = (strtok(NULL, "\r\n"));
 8005800:	2000      	movs	r0, #0
 8005802:	f000 fc17 	bl	8006034 <strtok>
					heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 8005806:	220a      	movs	r2, #10
 8005808:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, "\r\n"));
 800580a:	6030      	str	r0, [r6, #0]
					heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 800580c:	f000 fce6 	bl	80061dc <strtol>
 8005810:	f887 0066 	strb.w	r0, [r7, #102]	; 0x66
 8005814:	e6a2      	b.n	800555c <uart_comms+0xb8>
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005816:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8005a68 <uart_comms+0x5c4>
 800581a:	488a      	ldr	r0, [pc, #552]	; (8005a44 <uart_comms+0x5a0>)
 800581c:	f8d8 1000 	ldr.w	r1, [r8]
			memcpy(return_value+2,comma,1);
 8005820:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8005a58 <uart_comms+0x5b4>
			itoa((time->Hours),temp_time_var,10  );
 8005824:	4f88      	ldr	r7, [pc, #544]	; (8005a48 <uart_comms+0x5a4>)
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005826:	2200      	movs	r2, #0
 8005828:	f7fd f9d9 	bl	8002bde <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 800582c:	4b87      	ldr	r3, [pc, #540]	; (8005a4c <uart_comms+0x5a8>)
 800582e:	4885      	ldr	r0, [pc, #532]	; (8005a44 <uart_comms+0x5a0>)
 8005830:	6819      	ldr	r1, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	f7fd f9fe 	bl	8002c34 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 8005838:	682a      	ldr	r2, [r5, #0]
 800583a:	6833      	ldr	r3, [r6, #0]
 800583c:	8812      	ldrh	r2, [r2, #0]
 800583e:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8005840:	6833      	ldr	r3, [r6, #0]
 8005842:	f899 2000 	ldrb.w	r2, [r9]
 8005846:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 8005848:	f8d8 3000 	ldr.w	r3, [r8]
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	7818      	ldrb	r0, [r3, #0]
 8005850:	220a      	movs	r2, #10
 8005852:	f000 faf1 	bl	8005e38 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005856:	f8d6 a000 	ldr.w	sl, [r6]
 800585a:	4650      	mov	r0, sl
 800585c:	f7fa fcb8 	bl	80001d0 <strlen>
 8005860:	f8d7 b000 	ldr.w	fp, [r7]
 8005864:	9001      	str	r0, [sp, #4]
 8005866:	4658      	mov	r0, fp
 8005868:	f7fa fcb2 	bl	80001d0 <strlen>
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	4602      	mov	r2, r0
 8005870:	4659      	mov	r1, fp
 8005872:	eb0a 0003 	add.w	r0, sl, r3
 8005876:	f000 fae9 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 800587a:	f8d6 a000 	ldr.w	sl, [r6]
 800587e:	4650      	mov	r0, sl
 8005880:	f7fa fca6 	bl	80001d0 <strlen>
 8005884:	f899 3000 	ldrb.w	r3, [r9]
 8005888:	f80a 3000 	strb.w	r3, [sl, r0]
			itoa((time->Minutes),temp_time_var,10  );
 800588c:	f8d8 3000 	ldr.w	r3, [r8]
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	7858      	ldrb	r0, [r3, #1]
 8005894:	220a      	movs	r2, #10
 8005896:	f000 facf 	bl	8005e38 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 800589a:	f8d6 a000 	ldr.w	sl, [r6]
 800589e:	4650      	mov	r0, sl
 80058a0:	f7fa fc96 	bl	80001d0 <strlen>
 80058a4:	f8d7 b000 	ldr.w	fp, [r7]
 80058a8:	9001      	str	r0, [sp, #4]
 80058aa:	4658      	mov	r0, fp
 80058ac:	f7fa fc90 	bl	80001d0 <strlen>
 80058b0:	9b01      	ldr	r3, [sp, #4]
 80058b2:	4602      	mov	r2, r0
 80058b4:	4659      	mov	r1, fp
 80058b6:	eb0a 0003 	add.w	r0, sl, r3
 80058ba:	f000 fac7 	bl	8005e4c <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80058be:	f8d6 a000 	ldr.w	sl, [r6]
 80058c2:	4650      	mov	r0, sl
 80058c4:	f7fa fc84 	bl	80001d0 <strlen>
 80058c8:	f899 3000 	ldrb.w	r3, [r9]
 80058cc:	f80a 3000 	strb.w	r3, [sl, r0]
			itoa((time->Seconds),temp_time_var,10  );
 80058d0:	f8d8 3000 	ldr.w	r3, [r8]
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	7898      	ldrb	r0, [r3, #2]
 80058d8:	220a      	movs	r2, #10
 80058da:	f000 faad 	bl	8005e38 <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 80058de:	f8d6 8000 	ldr.w	r8, [r6]
 80058e2:	4640      	mov	r0, r8
 80058e4:	f7fa fc74 	bl	80001d0 <strlen>
 80058e8:	683f      	ldr	r7, [r7, #0]
 80058ea:	4681      	mov	r9, r0
 80058ec:	e6e8      	b.n	80056c0 <uart_comms+0x21c>
			memcpy(return_value, uart_command, 2);
 80058ee:	6833      	ldr	r3, [r6, #0]
 80058f0:	8812      	ldrh	r2, [r2, #0]
 80058f2:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,endSimbol, 2);
 80058f4:	4a4d      	ldr	r2, [pc, #308]	; (8005a2c <uart_comms+0x588>)
 80058f6:	6833      	ldr	r3, [r6, #0]
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 80058fc:	f8d6 b000 	ldr.w	fp, [r6]
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8005900:	4e50      	ldr	r6, [pc, #320]	; (8005a44 <uart_comms+0x5a0>)
			time->Hours = strtol(heating_info, NULL,10);
 8005902:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8005a68 <uart_comms+0x5c4>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8005906:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005a38 <uart_comms+0x594>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 800590a:	f8df a140 	ldr.w	sl, [pc, #320]	; 8005a4c <uart_comms+0x5a8>
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 800590e:	4658      	mov	r0, fp
 8005910:	f7fa fc5e 	bl	80001d0 <strlen>
 8005914:	4659      	mov	r1, fp
 8005916:	b282      	uxth	r2, r0
 8005918:	4845      	ldr	r0, [pc, #276]	; (8005a30 <uart_comms+0x58c>)
 800591a:	f7fd fc88 	bl	800322e <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 800591e:	6833      	ldr	r3, [r6, #0]
 8005920:	2253      	movs	r2, #83	; 0x53
 8005922:	21ca      	movs	r1, #202	; 0xca
 8005924:	6259      	str	r1, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8005926:	4630      	mov	r0, r6
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8005928:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 800592a:	f7fc ffd8 	bl	80028de <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 800592e:	6838      	ldr	r0, [r7, #0]
 8005930:	4947      	ldr	r1, [pc, #284]	; (8005a50 <uart_comms+0x5ac>)
 8005932:	f000 fb7f 	bl	8006034 <strtok>
			time->Hours = strtol(heating_info, NULL,10);
 8005936:	220a      	movs	r2, #10
 8005938:	2100      	movs	r1, #0
 800593a:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = strtok((char*)uart_command_copy, "$H,");
 800593e:	f8c9 0000 	str.w	r0, [r9]
			time->Hours = strtol(heating_info, NULL,10);
 8005942:	f000 fc4b 	bl	80061dc <strtol>
			heating_info = (strtok(NULL, ","));
 8005946:	493b      	ldr	r1, [pc, #236]	; (8005a34 <uart_comms+0x590>)
			time->Hours = strtol(heating_info, NULL,10);
 8005948:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 800594a:	2000      	movs	r0, #0
 800594c:	f000 fb72 	bl	8006034 <strtok>
			time->Minutes = strtol(heating_info, NULL,10);
 8005950:	220a      	movs	r2, #10
 8005952:	2100      	movs	r1, #0
 8005954:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = (strtok(NULL, ","));
 8005958:	f8c9 0000 	str.w	r0, [r9]
			time->Minutes = strtol(heating_info, NULL,10);
 800595c:	f000 fc3e 	bl	80061dc <strtol>
			heating_info = (strtok(NULL, ",\r\n"));
 8005960:	493c      	ldr	r1, [pc, #240]	; (8005a54 <uart_comms+0x5b0>)
			time->Minutes = strtol(heating_info, NULL,10);
 8005962:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 8005964:	2000      	movs	r0, #0
 8005966:	f000 fb65 	bl	8006034 <strtok>
			time->Seconds = strtol(heating_info, NULL,10);
 800596a:	220a      	movs	r2, #10
 800596c:	2100      	movs	r1, #0
 800596e:	f8d8 7000 	ldr.w	r7, [r8]
			heating_info = (strtok(NULL, ",\r\n"));
 8005972:	f8c9 0000 	str.w	r0, [r9]
			time->Seconds = strtol(heating_info, NULL,10);
 8005976:	f000 fc31 	bl	80061dc <strtol>
 800597a:	70b8      	strb	r0, [r7, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 800597c:	f8d8 1000 	ldr.w	r1, [r8]
 8005980:	4630      	mov	r0, r6
 8005982:	2200      	movs	r2, #0
 8005984:	f7fd f836 	bl	80029f4 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8005988:	f8da 1000 	ldr.w	r1, [sl]
 800598c:	4630      	mov	r0, r6
 800598e:	2200      	movs	r2, #0
 8005990:	f7fd f8af 	bl	8002af2 <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8005994:	6833      	ldr	r3, [r6, #0]
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005996:	f8d8 1000 	ldr.w	r1, [r8]
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800599a:	22ff      	movs	r2, #255	; 0xff
 800599c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 800599e:	4630      	mov	r0, r6
 80059a0:	2200      	movs	r2, #0
 80059a2:	f7fd f91c 	bl	8002bde <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 80059a6:	f8da 1000 	ldr.w	r1, [sl]
 80059aa:	4630      	mov	r0, r6
 80059ac:	2200      	movs	r2, #0
 80059ae:	f7fd f941 	bl	8002c34 <HAL_RTC_GetDate>
			break;
 80059b2:	e5d3      	b.n	800555c <uart_comms+0xb8>
			memcpy(return_value, uart_command, 2);
 80059b4:	6833      	ldr	r3, [r6, #0]
 80059b6:	8812      	ldrh	r2, [r2, #0]
 80059b8:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 80059ba:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <uart_comms+0x5b4>)
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	7811      	ldrb	r1, [r2, #0]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 80059c0:	4a26      	ldr	r2, [pc, #152]	; (8005a5c <uart_comms+0x5b8>)
			memcpy(return_value+2, comma, 1);
 80059c2:	7099      	strb	r1, [r3, #2]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 80059c4:	6830      	ldr	r0, [r6, #0]
 80059c6:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <uart_comms+0x5bc>)
 80059c8:	7817      	ldrb	r7, [r2, #0]
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	463a      	mov	r2, r7
 80059ce:	3003      	adds	r0, #3
 80059d0:	f000 fa3c 	bl	8005e4c <memcpy>
			memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <uart_comms+0x588>)
 80059d8:	443b      	add	r3, r7
 80059da:	8812      	ldrh	r2, [r2, #0]
 80059dc:	f8a3 2003 	strh.w	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80059e0:	6836      	ldr	r6, [r6, #0]
 80059e2:	e5b3      	b.n	800554c <uart_comms+0xa8>
			memcpy(return_value, uart_command,2);
 80059e4:	6833      	ldr	r3, [r6, #0]
 80059e6:	8812      	ldrh	r2, [r2, #0]
 80059e8:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,endSimbol, 2);
 80059ea:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <uart_comms+0x588>)
 80059ec:	6833      	ldr	r3, [r6, #0]
 80059ee:	8812      	ldrh	r2, [r2, #0]
 80059f0:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80059f2:	6837      	ldr	r7, [r6, #0]
			memset(set_temp, 0x00, 4);
 80059f4:	4e1a      	ldr	r6, [pc, #104]	; (8005a60 <uart_comms+0x5bc>)
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80059f6:	4638      	mov	r0, r7
 80059f8:	f7fa fbea 	bl	80001d0 <strlen>
 80059fc:	4639      	mov	r1, r7
 80059fe:	b282      	uxth	r2, r0
 8005a00:	480b      	ldr	r0, [pc, #44]	; (8005a30 <uart_comms+0x58c>)
 8005a02:	f7fd fc14 	bl	800322e <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 8005a06:	7823      	ldrb	r3, [r4, #0]
			memset(set_temp, 0x00, 4);
 8005a08:	6831      	ldr	r1, [r6, #0]
			sizeOfTemp = uart_counter - 5;
 8005a0a:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <uart_comms+0x5b8>)
 8005a0c:	3b05      	subs	r3, #5
			memset(set_temp, 0x00, 4);
 8005a0e:	2000      	movs	r0, #0
			sizeOfTemp = uart_counter - 5;
 8005a10:	7013      	strb	r3, [r2, #0]
			memset(set_temp, 0x00, 4);
 8005a12:	6008      	str	r0, [r1, #0]
			memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 8005a14:	6829      	ldr	r1, [r5, #0]
 8005a16:	7812      	ldrb	r2, [r2, #0]
 8005a18:	6830      	ldr	r0, [r6, #0]
 8005a1a:	3103      	adds	r1, #3
 8005a1c:	f000 fa16 	bl	8005e4c <memcpy>
			segment_val =set_temp;
 8005a20:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <uart_comms+0x5c0>)
 8005a22:	6832      	ldr	r2, [r6, #0]
 8005a24:	601a      	str	r2, [r3, #0]
			break;
 8005a26:	e599      	b.n	800555c <uart_comms+0xb8>
 8005a28:	20000250 	.word	0x20000250
 8005a2c:	20000008 	.word	0x20000008
 8005a30:	20000400 	.word	0x20000400
 8005a34:	08007b54 	.word	0x08007b54
 8005a38:	20000288 	.word	0x20000288
 8005a3c:	20000530 	.word	0x20000530
 8005a40:	08007b5c 	.word	0x08007b5c
 8005a44:	20000470 	.word	0x20000470
 8005a48:	200002b4 	.word	0x200002b4
 8005a4c:	2000025c 	.word	0x2000025c
 8005a50:	08007b50 	.word	0x08007b50
 8005a54:	08007b58 	.word	0x08007b58
 8005a58:	20000004 	.word	0x20000004
 8005a5c:	200002b0 	.word	0x200002b0
 8005a60:	200002ac 	.word	0x200002ac
 8005a64:	200002a8 	.word	0x200002a8
 8005a68:	200002bc 	.word	0x200002bc
			memcpy(return_value, uart_command, 2);
 8005a6c:	6833      	ldr	r3, [r6, #0]
 8005a6e:	8812      	ldrh	r2, [r2, #0]
 8005a70:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005a72:	4aac      	ldr	r2, [pc, #688]	; (8005d24 <uart_comms+0x880>)
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	8812      	ldrh	r2, [r2, #0]
 8005a78:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8005a7a:	6836      	ldr	r6, [r6, #0]
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f7fa fba7 	bl	80001d0 <strlen>
 8005a82:	4631      	mov	r1, r6
 8005a84:	b282      	uxth	r2, r0
 8005a86:	48a8      	ldr	r0, [pc, #672]	; (8005d28 <uart_comms+0x884>)
 8005a88:	f7fd fbd1 	bl	800322e <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){ // logging disable
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	78db      	ldrb	r3, [r3, #3]
 8005a90:	2b30      	cmp	r3, #48	; 0x30
 8005a92:	f000 80a2 	beq.w	8005bda <uart_comms+0x736>
			else if(uart_command[3] == '1'){ // logging enable
 8005a96:	2b31      	cmp	r3, #49	; 0x31
 8005a98:	f47f ad60 	bne.w	800555c <uart_comms+0xb8>
				enableFlashLogging = 1;
 8005a9c:	4ba3      	ldr	r3, [pc, #652]	; (8005d2c <uart_comms+0x888>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e55b      	b.n	800555c <uart_comms+0xb8>
			memcpy(return_value, uart_command, 2);
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	8812      	ldrh	r2, [r2, #0]
 8005aa8:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005aaa:	4a9e      	ldr	r2, [pc, #632]	; (8005d24 <uart_comms+0x880>)
 8005aac:	6833      	ldr	r3, [r6, #0]
 8005aae:	8812      	ldrh	r2, [r2, #0]
 8005ab0:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005ab2:	6836      	ldr	r6, [r6, #0]
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7fa fb8b 	bl	80001d0 <strlen>
 8005aba:	4631      	mov	r1, r6
 8005abc:	b282      	uxth	r2, r0
 8005abe:	489a      	ldr	r0, [pc, #616]	; (8005d28 <uart_comms+0x884>)
 8005ac0:	f7fd fbb5 	bl	800322e <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 8005ac4:	4b9a      	ldr	r3, [pc, #616]	; (8005d30 <uart_comms+0x88c>)
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	f47f ad47 	bne.w	800555c <uart_comms+0xb8>
				if(uart_command[3]=='0'){
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	78db      	ldrb	r3, [r3, #3]
 8005ad2:	2b30      	cmp	r3, #48	; 0x30
 8005ad4:	f000 8085 	beq.w	8005be2 <uart_comms+0x73e>
				else if(uart_command[3] == '1'){
 8005ad8:	2b31      	cmp	r3, #49	; 0x31
 8005ada:	f47f ad3f 	bne.w	800555c <uart_comms+0xb8>
					heater_state = heater_ON;
 8005ade:	4b95      	ldr	r3, [pc, #596]	; (8005d34 <uart_comms+0x890>)
 8005ae0:	4a95      	ldr	r2, [pc, #596]	; (8005d38 <uart_comms+0x894>)
 8005ae2:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 8005ae4:	4895      	ldr	r0, [pc, #596]	; (8005d3c <uart_comms+0x898>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005aec:	f7fc f8d2 	bl	8001c94 <HAL_GPIO_WritePin>
 8005af0:	e534      	b.n	800555c <uart_comms+0xb8>
			memcpy(return_value, uart_command, 2);
 8005af2:	6833      	ldr	r3, [r6, #0]
 8005af4:	8812      	ldrh	r2, [r2, #0]
 8005af6:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005af8:	4a8a      	ldr	r2, [pc, #552]	; (8005d24 <uart_comms+0x880>)
 8005afa:	6833      	ldr	r3, [r6, #0]
 8005afc:	8812      	ldrh	r2, [r2, #0]
 8005afe:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 8005b00:	6836      	ldr	r6, [r6, #0]
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7fa fb64 	bl	80001d0 <strlen>
 8005b08:	4631      	mov	r1, r6
 8005b0a:	b282      	uxth	r2, r0
 8005b0c:	4886      	ldr	r0, [pc, #536]	; (8005d28 <uart_comms+0x884>)
 8005b0e:	f7fd fb8e 	bl	800322e <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 8005b12:	682b      	ldr	r3, [r5, #0]
 8005b14:	78db      	ldrb	r3, [r3, #3]
 8005b16:	2b30      	cmp	r3, #48	; 0x30
 8005b18:	d044      	beq.n	8005ba4 <uart_comms+0x700>
			else if(uart_command[3] == '1'){
 8005b1a:	2b31      	cmp	r3, #49	; 0x31
 8005b1c:	f47f ad1e 	bne.w	800555c <uart_comms+0xb8>
				auto_heating = 1;
 8005b20:	4b83      	ldr	r3, [pc, #524]	; (8005d30 <uart_comms+0x88c>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	e519      	b.n	800555c <uart_comms+0xb8>
			memcpy(studentnumber, uart_command, 2 );
 8005b28:	4b85      	ldr	r3, [pc, #532]	; (8005d40 <uart_comms+0x89c>)
 8005b2a:	8810      	ldrh	r0, [r2, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
			memcpy(studentnumber+2,comma,1);
 8005b2e:	4985      	ldr	r1, [pc, #532]	; (8005d44 <uart_comms+0x8a0>)
			memcpy(studentnumber, uart_command, 2 );
 8005b30:	8010      	strh	r0, [r2, #0]
			memcpy(studentnumber+2,comma,1);
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	7809      	ldrb	r1, [r1, #0]
 8005b36:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8005b38:	4a83      	ldr	r2, [pc, #524]	; (8005d48 <uart_comms+0x8a4>)
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	6811      	ldr	r1, [r2, #0]
 8005b3e:	6856      	ldr	r6, [r2, #4]
 8005b40:	f8c0 1003 	str.w	r1, [r0, #3]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8005b44:	4a77      	ldr	r2, [pc, #476]	; (8005d24 <uart_comms+0x880>)
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8005b46:	f8c0 6007 	str.w	r6, [r0, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8005b4a:	6819      	ldr	r1, [r3, #0]
 8005b4c:	6813      	ldr	r3, [r2, #0]
 8005b4e:	6852      	ldr	r2, [r2, #4]
 8005b50:	f8c1 200f 	str.w	r2, [r1, #15]
 8005b54:	f8c1 300b 	str.w	r3, [r1, #11]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 8005b58:	220d      	movs	r2, #13
 8005b5a:	4873      	ldr	r0, [pc, #460]	; (8005d28 <uart_comms+0x884>)
 8005b5c:	f7fd fb67 	bl	800322e <HAL_UART_Transmit_IT>
			break;
 8005b60:	e4fc      	b.n	800555c <uart_comms+0xb8>
			memcpy(return_value, uart_command, 2);
 8005b62:	6833      	ldr	r3, [r6, #0]
 8005b64:	8812      	ldrh	r2, [r2, #0]
 8005b66:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005b68:	4a6e      	ldr	r2, [pc, #440]	; (8005d24 <uart_comms+0x880>)
 8005b6a:	6833      	ldr	r3, [r6, #0]
 8005b6c:	8812      	ldrh	r2, [r2, #0]
 8005b6e:	805a      	strh	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005b70:	6836      	ldr	r6, [r6, #0]
 8005b72:	4630      	mov	r0, r6
 8005b74:	f7fa fb2c 	bl	80001d0 <strlen>
 8005b78:	4631      	mov	r1, r6
 8005b7a:	b282      	uxth	r2, r0
 8005b7c:	486a      	ldr	r0, [pc, #424]	; (8005d28 <uart_comms+0x884>)
 8005b7e:	f7fd fb56 	bl	800322e <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 8005b82:	682b      	ldr	r3, [r5, #0]
 8005b84:	78db      	ldrb	r3, [r3, #3]
 8005b86:	2b31      	cmp	r3, #49	; 0x31
 8005b88:	d010      	beq.n	8005bac <uart_comms+0x708>
			else if(uart_command[3] == '0'){
 8005b8a:	2b30      	cmp	r3, #48	; 0x30
 8005b8c:	f47f ace6 	bne.w	800555c <uart_comms+0xb8>
				valve_state=valve_CLOSE;
 8005b90:	4b6e      	ldr	r3, [pc, #440]	; (8005d4c <uart_comms+0x8a8>)
 8005b92:	4a6f      	ldr	r2, [pc, #444]	; (8005d50 <uart_comms+0x8ac>)
 8005b94:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 8005b96:	4869      	ldr	r0, [pc, #420]	; (8005d3c <uart_comms+0x898>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b9e:	f7fc f879 	bl	8001c94 <HAL_GPIO_WritePin>
 8005ba2:	e4db      	b.n	800555c <uart_comms+0xb8>
				auto_heating = 0;
 8005ba4:	4b62      	ldr	r3, [pc, #392]	; (8005d30 <uart_comms+0x88c>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	e4d7      	b.n	800555c <uart_comms+0xb8>
				valve_state = valve_OPEN;
 8005bac:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <uart_comms+0x8a8>)
 8005bae:	4a69      	ldr	r2, [pc, #420]	; (8005d54 <uart_comms+0x8b0>)
 8005bb0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8005bb2:	4862      	ldr	r0, [pc, #392]	; (8005d3c <uart_comms+0x898>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bba:	f7fc f86b 	bl	8001c94 <HAL_GPIO_WritePin>
 8005bbe:	e4cd      	b.n	800555c <uart_comms+0xb8>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8005bc0:	f7fa fb06 	bl	80001d0 <strlen>
 8005bc4:	4681      	mov	r9, r0
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f7fa fb02 	bl	80001d0 <strlen>
 8005bcc:	4639      	mov	r1, r7
 8005bce:	1e42      	subs	r2, r0, #1
 8005bd0:	eb08 0009 	add.w	r0, r8, r9
 8005bd4:	f000 f93a 	bl	8005e4c <memcpy>
 8005bd8:	e57b      	b.n	80056d2 <uart_comms+0x22e>
				enableFlashLogging = 0;
 8005bda:	4b54      	ldr	r3, [pc, #336]	; (8005d2c <uart_comms+0x888>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	e4bc      	b.n	800555c <uart_comms+0xb8>
					heater_state = heater_OFF;
 8005be2:	4b54      	ldr	r3, [pc, #336]	; (8005d34 <uart_comms+0x890>)
 8005be4:	495c      	ldr	r1, [pc, #368]	; (8005d58 <uart_comms+0x8b4>)
 8005be6:	6019      	str	r1, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 8005be8:	4854      	ldr	r0, [pc, #336]	; (8005d3c <uart_comms+0x898>)
 8005bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bee:	f7fc f851 	bl	8001c94 <HAL_GPIO_WritePin>
 8005bf2:	e4b3      	b.n	800555c <uart_comms+0xb8>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005bf4:	6838      	ldr	r0, [r7, #0]
 8005bf6:	4959      	ldr	r1, [pc, #356]	; (8005d5c <uart_comms+0x8b8>)
 8005bf8:	4e59      	ldr	r6, [pc, #356]	; (8005d60 <uart_comms+0x8bc>)
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005bfa:	4f5a      	ldr	r7, [pc, #360]	; (8005d64 <uart_comms+0x8c0>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005bfc:	f000 fa1a 	bl	8006034 <strtok>
					heating_info = (strtok(NULL, ","));
 8005c00:	4956      	ldr	r1, [pc, #344]	; (8005d5c <uart_comms+0x8b8>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005c02:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005c04:	2000      	movs	r0, #0
 8005c06:	f000 fa15 	bl	8006034 <strtok>
					heating_info = (strtok(NULL, ","));
 8005c0a:	4954      	ldr	r1, [pc, #336]	; (8005d5c <uart_comms+0x8b8>)
					heating_info = (strtok(NULL, ","));
 8005c0c:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f000 fa10 	bl	8006034 <strtok>
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005c14:	220a      	movs	r2, #10
 8005c16:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005c18:	6030      	str	r0, [r6, #0]
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005c1a:	f000 fadf 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 8005c1e:	494f      	ldr	r1, [pc, #316]	; (8005d5c <uart_comms+0x8b8>)
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005c20:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
					heating_info = (strtok(NULL, ","));
 8005c24:	2000      	movs	r0, #0
 8005c26:	f000 fa05 	bl	8006034 <strtok>
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8005c2a:	220a      	movs	r2, #10
 8005c2c:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005c2e:	6030      	str	r0, [r6, #0]
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8005c30:	f000 fad4 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 8005c34:	4949      	ldr	r1, [pc, #292]	; (8005d5c <uart_comms+0x8b8>)
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8005c36:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
					heating_info = (strtok(NULL, ","));
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f000 f9fa 	bl	8006034 <strtok>
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8005c40:	220a      	movs	r2, #10
 8005c42:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005c44:	6030      	str	r0, [r6, #0]
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8005c46:	f000 fac9 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 8005c4a:	4944      	ldr	r1, [pc, #272]	; (8005d5c <uart_comms+0x8b8>)
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8005c4c:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
					heating_info = (strtok(NULL, ","));
 8005c50:	2000      	movs	r0, #0
 8005c52:	f000 f9ef 	bl	8006034 <strtok>
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8005c56:	220a      	movs	r2, #10
 8005c58:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005c5a:	6030      	str	r0, [r6, #0]
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8005c5c:	f000 fabe 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 8005c60:	493e      	ldr	r1, [pc, #248]	; (8005d5c <uart_comms+0x8b8>)
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8005c62:	f887 003c 	strb.w	r0, [r7, #60]	; 0x3c
					heating_info = (strtok(NULL, ","));
 8005c66:	2000      	movs	r0, #0
 8005c68:	f000 f9e4 	bl	8006034 <strtok>
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8005c6c:	220a      	movs	r2, #10
 8005c6e:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005c70:	6030      	str	r0, [r6, #0]
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8005c72:	f000 fab3 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, "\r\n"));
 8005c76:	493c      	ldr	r1, [pc, #240]	; (8005d68 <uart_comms+0x8c4>)
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8005c78:	f887 003d 	strb.w	r0, [r7, #61]	; 0x3d
					heating_info = (strtok(NULL, "\r\n"));
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	f000 f9d9 	bl	8006034 <strtok>
					heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8005c82:	220a      	movs	r2, #10
 8005c84:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, "\r\n"));
 8005c86:	6030      	str	r0, [r6, #0]
					heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8005c88:	f000 faa8 	bl	80061dc <strtol>
 8005c8c:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
 8005c90:	e464      	b.n	800555c <uart_comms+0xb8>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005c92:	6838      	ldr	r0, [r7, #0]
 8005c94:	4931      	ldr	r1, [pc, #196]	; (8005d5c <uart_comms+0x8b8>)
 8005c96:	4e32      	ldr	r6, [pc, #200]	; (8005d60 <uart_comms+0x8bc>)
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005c98:	4f32      	ldr	r7, [pc, #200]	; (8005d64 <uart_comms+0x8c0>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005c9a:	f000 f9cb 	bl	8006034 <strtok>
					heating_info = (strtok(NULL, ","));
 8005c9e:	492f      	ldr	r1, [pc, #188]	; (8005d5c <uart_comms+0x8b8>)
					heating_info = strtok((char*)uart_command_copy, ",");
 8005ca0:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	f000 f9c6 	bl	8006034 <strtok>
					heating_info = (strtok(NULL, ","));
 8005ca8:	492c      	ldr	r1, [pc, #176]	; (8005d5c <uart_comms+0x8b8>)
					heating_info = (strtok(NULL, ","));
 8005caa:	6030      	str	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005cac:	2000      	movs	r0, #0
 8005cae:	f000 f9c1 	bl	8006034 <strtok>
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005cb2:	220a      	movs	r2, #10
 8005cb4:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005cb6:	6030      	str	r0, [r6, #0]
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005cb8:	f000 fa90 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 8005cbc:	4927      	ldr	r1, [pc, #156]	; (8005d5c <uart_comms+0x8b8>)
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005cbe:	7038      	strb	r0, [r7, #0]
					heating_info = (strtok(NULL, ","));
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f000 f9b7 	bl	8006034 <strtok>
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005cca:	6030      	str	r0, [r6, #0]
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005ccc:	f000 fa86 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 8005cd0:	4922      	ldr	r1, [pc, #136]	; (8005d5c <uart_comms+0x8b8>)
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005cd2:	7078      	strb	r0, [r7, #1]
					heating_info = (strtok(NULL, ","));
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f000 f9ad 	bl	8006034 <strtok>
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005cda:	220a      	movs	r2, #10
 8005cdc:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005cde:	6030      	str	r0, [r6, #0]
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005ce0:	f000 fa7c 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 8005ce4:	491d      	ldr	r1, [pc, #116]	; (8005d5c <uart_comms+0x8b8>)
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005ce6:	70b8      	strb	r0, [r7, #2]
					heating_info = (strtok(NULL, ","));
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f000 f9a3 	bl	8006034 <strtok>
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005cee:	220a      	movs	r2, #10
 8005cf0:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005cf2:	6030      	str	r0, [r6, #0]
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005cf4:	f000 fa72 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, ","));
 8005cf8:	4918      	ldr	r1, [pc, #96]	; (8005d5c <uart_comms+0x8b8>)
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005cfa:	7538      	strb	r0, [r7, #20]
					heating_info = (strtok(NULL, ","));
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	f000 f999 	bl	8006034 <strtok>
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005d02:	220a      	movs	r2, #10
 8005d04:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, ","));
 8005d06:	6030      	str	r0, [r6, #0]
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005d08:	f000 fa68 	bl	80061dc <strtol>
					heating_info = (strtok(NULL, "\r\n"));
 8005d0c:	4916      	ldr	r1, [pc, #88]	; (8005d68 <uart_comms+0x8c4>)
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005d0e:	7578      	strb	r0, [r7, #21]
					heating_info = (strtok(NULL, "\r\n"));
 8005d10:	2000      	movs	r0, #0
 8005d12:	f000 f98f 	bl	8006034 <strtok>
					heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8005d16:	220a      	movs	r2, #10
 8005d18:	2100      	movs	r1, #0
					heating_info = (strtok(NULL, "\r\n"));
 8005d1a:	6030      	str	r0, [r6, #0]
					heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8005d1c:	f000 fa5e 	bl	80061dc <strtol>
 8005d20:	75b8      	strb	r0, [r7, #22]
 8005d22:	e41b      	b.n	800555c <uart_comms+0xb8>
 8005d24:	20000008 	.word	0x20000008
 8005d28:	20000400 	.word	0x20000400
 8005d2c:	20000260 	.word	0x20000260
 8005d30:	20000250 	.word	0x20000250
 8005d34:	20000284 	.word	0x20000284
 8005d38:	20000018 	.word	0x20000018
 8005d3c:	48000400 	.word	0x48000400
 8005d40:	200005a8 	.word	0x200005a8
 8005d44:	20000004 	.word	0x20000004
 8005d48:	2000001c 	.word	0x2000001c
 8005d4c:	200002d4 	.word	0x200002d4
 8005d50:	20000024 	.word	0x20000024
 8005d54:	2000002c 	.word	0x2000002c
 8005d58:	20000014 	.word	0x20000014
 8005d5c:	08007b54 	.word	0x08007b54
 8005d60:	20000288 	.word	0x20000288
 8005d64:	20000530 	.word	0x20000530
 8005d68:	08007b5c 	.word	0x08007b5c

08005d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005da4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005d70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005d72:	e003      	b.n	8005d7c <LoopCopyDataInit>

08005d74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005d76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005d78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005d7a:	3104      	adds	r1, #4

08005d7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005d7c:	480b      	ldr	r0, [pc, #44]	; (8005dac <LoopForever+0xa>)
	ldr	r3, =_edata
 8005d7e:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005d80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005d82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005d84:	d3f6      	bcc.n	8005d74 <CopyDataInit>
	ldr	r2, =_sbss
 8005d86:	4a0b      	ldr	r2, [pc, #44]	; (8005db4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005d88:	e002      	b.n	8005d90 <LoopFillZerobss>

08005d8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005d8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005d8c:	f842 3b04 	str.w	r3, [r2], #4

08005d90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <LoopForever+0x16>)
	cmp	r2, r3
 8005d92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005d94:	d3f9      	bcc.n	8005d8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d96:	f7ff fb51 	bl	800543c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d9a:	f000 f811 	bl	8005dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d9e:	f7fe fe85 	bl	8004aac <main>

08005da2 <LoopForever>:

LoopForever:
    b LoopForever
 8005da2:	e7fe      	b.n	8005da2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005da4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8005da8:	08007d20 	.word	0x08007d20
	ldr	r0, =_sdata
 8005dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005db0:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8005db4:	20000208 	.word	0x20000208
	ldr	r3, = _ebss
 8005db8:	200005e4 	.word	0x200005e4

08005dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005dbc:	e7fe      	b.n	8005dbc <ADC1_2_IRQHandler>
	...

08005dc0 <__libc_init_array>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	4e0d      	ldr	r6, [pc, #52]	; (8005df8 <__libc_init_array+0x38>)
 8005dc4:	4c0d      	ldr	r4, [pc, #52]	; (8005dfc <__libc_init_array+0x3c>)
 8005dc6:	1ba4      	subs	r4, r4, r6
 8005dc8:	10a4      	asrs	r4, r4, #2
 8005dca:	2500      	movs	r5, #0
 8005dcc:	42a5      	cmp	r5, r4
 8005dce:	d109      	bne.n	8005de4 <__libc_init_array+0x24>
 8005dd0:	4e0b      	ldr	r6, [pc, #44]	; (8005e00 <__libc_init_array+0x40>)
 8005dd2:	4c0c      	ldr	r4, [pc, #48]	; (8005e04 <__libc_init_array+0x44>)
 8005dd4:	f001 fe7c 	bl	8007ad0 <_init>
 8005dd8:	1ba4      	subs	r4, r4, r6
 8005dda:	10a4      	asrs	r4, r4, #2
 8005ddc:	2500      	movs	r5, #0
 8005dde:	42a5      	cmp	r5, r4
 8005de0:	d105      	bne.n	8005dee <__libc_init_array+0x2e>
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005de8:	4798      	blx	r3
 8005dea:	3501      	adds	r5, #1
 8005dec:	e7ee      	b.n	8005dcc <__libc_init_array+0xc>
 8005dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005df2:	4798      	blx	r3
 8005df4:	3501      	adds	r5, #1
 8005df6:	e7f2      	b.n	8005dde <__libc_init_array+0x1e>
 8005df8:	08007d18 	.word	0x08007d18
 8005dfc:	08007d18 	.word	0x08007d18
 8005e00:	08007d18 	.word	0x08007d18
 8005e04:	08007d1c 	.word	0x08007d1c

08005e08 <__itoa>:
 8005e08:	1e93      	subs	r3, r2, #2
 8005e0a:	2b22      	cmp	r3, #34	; 0x22
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	460c      	mov	r4, r1
 8005e10:	d904      	bls.n	8005e1c <__itoa+0x14>
 8005e12:	2300      	movs	r3, #0
 8005e14:	700b      	strb	r3, [r1, #0]
 8005e16:	461c      	mov	r4, r3
 8005e18:	4620      	mov	r0, r4
 8005e1a:	bd10      	pop	{r4, pc}
 8005e1c:	2a0a      	cmp	r2, #10
 8005e1e:	d109      	bne.n	8005e34 <__itoa+0x2c>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	da07      	bge.n	8005e34 <__itoa+0x2c>
 8005e24:	232d      	movs	r3, #45	; 0x2d
 8005e26:	700b      	strb	r3, [r1, #0]
 8005e28:	4240      	negs	r0, r0
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	4421      	add	r1, r4
 8005e2e:	f000 f9eb 	bl	8006208 <__utoa>
 8005e32:	e7f1      	b.n	8005e18 <__itoa+0x10>
 8005e34:	2100      	movs	r1, #0
 8005e36:	e7f9      	b.n	8005e2c <__itoa+0x24>

08005e38 <itoa>:
 8005e38:	f7ff bfe6 	b.w	8005e08 <__itoa>

08005e3c <malloc>:
 8005e3c:	4b02      	ldr	r3, [pc, #8]	; (8005e48 <malloc+0xc>)
 8005e3e:	4601      	mov	r1, r0
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	f000 b865 	b.w	8005f10 <_malloc_r>
 8005e46:	bf00      	nop
 8005e48:	20000030 	.word	0x20000030

08005e4c <memcpy>:
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	1e43      	subs	r3, r0, #1
 8005e50:	440a      	add	r2, r1
 8005e52:	4291      	cmp	r1, r2
 8005e54:	d100      	bne.n	8005e58 <memcpy+0xc>
 8005e56:	bd10      	pop	{r4, pc}
 8005e58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e60:	e7f7      	b.n	8005e52 <memcpy+0x6>

08005e62 <memset>:
 8005e62:	4402      	add	r2, r0
 8005e64:	4603      	mov	r3, r0
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d100      	bne.n	8005e6c <memset+0xa>
 8005e6a:	4770      	bx	lr
 8005e6c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e70:	e7f9      	b.n	8005e66 <memset+0x4>
	...

08005e74 <_free_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4605      	mov	r5, r0
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d045      	beq.n	8005f08 <_free_r+0x94>
 8005e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e80:	1f0c      	subs	r4, r1, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfb8      	it	lt
 8005e86:	18e4      	addlt	r4, r4, r3
 8005e88:	f000 fa13 	bl	80062b2 <__malloc_lock>
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <_free_r+0x98>)
 8005e8e:	6813      	ldr	r3, [r2, #0]
 8005e90:	4610      	mov	r0, r2
 8005e92:	b933      	cbnz	r3, 8005ea2 <_free_r+0x2e>
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	6014      	str	r4, [r2, #0]
 8005e98:	4628      	mov	r0, r5
 8005e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e9e:	f000 ba09 	b.w	80062b4 <__malloc_unlock>
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	d90c      	bls.n	8005ec0 <_free_r+0x4c>
 8005ea6:	6821      	ldr	r1, [r4, #0]
 8005ea8:	1862      	adds	r2, r4, r1
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	bf04      	itt	eq
 8005eae:	681a      	ldreq	r2, [r3, #0]
 8005eb0:	685b      	ldreq	r3, [r3, #4]
 8005eb2:	6063      	str	r3, [r4, #4]
 8005eb4:	bf04      	itt	eq
 8005eb6:	1852      	addeq	r2, r2, r1
 8005eb8:	6022      	streq	r2, [r4, #0]
 8005eba:	6004      	str	r4, [r0, #0]
 8005ebc:	e7ec      	b.n	8005e98 <_free_r+0x24>
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	b10a      	cbz	r2, 8005ec8 <_free_r+0x54>
 8005ec4:	42a2      	cmp	r2, r4
 8005ec6:	d9fa      	bls.n	8005ebe <_free_r+0x4a>
 8005ec8:	6819      	ldr	r1, [r3, #0]
 8005eca:	1858      	adds	r0, r3, r1
 8005ecc:	42a0      	cmp	r0, r4
 8005ece:	d10b      	bne.n	8005ee8 <_free_r+0x74>
 8005ed0:	6820      	ldr	r0, [r4, #0]
 8005ed2:	4401      	add	r1, r0
 8005ed4:	1858      	adds	r0, r3, r1
 8005ed6:	4282      	cmp	r2, r0
 8005ed8:	6019      	str	r1, [r3, #0]
 8005eda:	d1dd      	bne.n	8005e98 <_free_r+0x24>
 8005edc:	6810      	ldr	r0, [r2, #0]
 8005ede:	6852      	ldr	r2, [r2, #4]
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	6019      	str	r1, [r3, #0]
 8005ee6:	e7d7      	b.n	8005e98 <_free_r+0x24>
 8005ee8:	d902      	bls.n	8005ef0 <_free_r+0x7c>
 8005eea:	230c      	movs	r3, #12
 8005eec:	602b      	str	r3, [r5, #0]
 8005eee:	e7d3      	b.n	8005e98 <_free_r+0x24>
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	1821      	adds	r1, r4, r0
 8005ef4:	428a      	cmp	r2, r1
 8005ef6:	bf04      	itt	eq
 8005ef8:	6811      	ldreq	r1, [r2, #0]
 8005efa:	6852      	ldreq	r2, [r2, #4]
 8005efc:	6062      	str	r2, [r4, #4]
 8005efe:	bf04      	itt	eq
 8005f00:	1809      	addeq	r1, r1, r0
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	605c      	str	r4, [r3, #4]
 8005f06:	e7c7      	b.n	8005e98 <_free_r+0x24>
 8005f08:	bd38      	pop	{r3, r4, r5, pc}
 8005f0a:	bf00      	nop
 8005f0c:	200002e4 	.word	0x200002e4

08005f10 <_malloc_r>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	1ccd      	adds	r5, r1, #3
 8005f14:	f025 0503 	bic.w	r5, r5, #3
 8005f18:	3508      	adds	r5, #8
 8005f1a:	2d0c      	cmp	r5, #12
 8005f1c:	bf38      	it	cc
 8005f1e:	250c      	movcc	r5, #12
 8005f20:	2d00      	cmp	r5, #0
 8005f22:	4606      	mov	r6, r0
 8005f24:	db01      	blt.n	8005f2a <_malloc_r+0x1a>
 8005f26:	42a9      	cmp	r1, r5
 8005f28:	d903      	bls.n	8005f32 <_malloc_r+0x22>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	6033      	str	r3, [r6, #0]
 8005f2e:	2000      	movs	r0, #0
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
 8005f32:	f000 f9be 	bl	80062b2 <__malloc_lock>
 8005f36:	4a23      	ldr	r2, [pc, #140]	; (8005fc4 <_malloc_r+0xb4>)
 8005f38:	6814      	ldr	r4, [r2, #0]
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	b991      	cbnz	r1, 8005f64 <_malloc_r+0x54>
 8005f3e:	4c22      	ldr	r4, [pc, #136]	; (8005fc8 <_malloc_r+0xb8>)
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	b91b      	cbnz	r3, 8005f4c <_malloc_r+0x3c>
 8005f44:	4630      	mov	r0, r6
 8005f46:	f000 f841 	bl	8005fcc <_sbrk_r>
 8005f4a:	6020      	str	r0, [r4, #0]
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f000 f83c 	bl	8005fcc <_sbrk_r>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d126      	bne.n	8005fa6 <_malloc_r+0x96>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	6033      	str	r3, [r6, #0]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f000 f9a9 	bl	80062b4 <__malloc_unlock>
 8005f62:	e7e4      	b.n	8005f2e <_malloc_r+0x1e>
 8005f64:	680b      	ldr	r3, [r1, #0]
 8005f66:	1b5b      	subs	r3, r3, r5
 8005f68:	d41a      	bmi.n	8005fa0 <_malloc_r+0x90>
 8005f6a:	2b0b      	cmp	r3, #11
 8005f6c:	d90f      	bls.n	8005f8e <_malloc_r+0x7e>
 8005f6e:	600b      	str	r3, [r1, #0]
 8005f70:	50cd      	str	r5, [r1, r3]
 8005f72:	18cc      	adds	r4, r1, r3
 8005f74:	4630      	mov	r0, r6
 8005f76:	f000 f99d 	bl	80062b4 <__malloc_unlock>
 8005f7a:	f104 000b 	add.w	r0, r4, #11
 8005f7e:	1d23      	adds	r3, r4, #4
 8005f80:	f020 0007 	bic.w	r0, r0, #7
 8005f84:	1ac3      	subs	r3, r0, r3
 8005f86:	d01b      	beq.n	8005fc0 <_malloc_r+0xb0>
 8005f88:	425a      	negs	r2, r3
 8005f8a:	50e2      	str	r2, [r4, r3]
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}
 8005f8e:	428c      	cmp	r4, r1
 8005f90:	bf0d      	iteet	eq
 8005f92:	6863      	ldreq	r3, [r4, #4]
 8005f94:	684b      	ldrne	r3, [r1, #4]
 8005f96:	6063      	strne	r3, [r4, #4]
 8005f98:	6013      	streq	r3, [r2, #0]
 8005f9a:	bf18      	it	ne
 8005f9c:	460c      	movne	r4, r1
 8005f9e:	e7e9      	b.n	8005f74 <_malloc_r+0x64>
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	6849      	ldr	r1, [r1, #4]
 8005fa4:	e7ca      	b.n	8005f3c <_malloc_r+0x2c>
 8005fa6:	1cc4      	adds	r4, r0, #3
 8005fa8:	f024 0403 	bic.w	r4, r4, #3
 8005fac:	42a0      	cmp	r0, r4
 8005fae:	d005      	beq.n	8005fbc <_malloc_r+0xac>
 8005fb0:	1a21      	subs	r1, r4, r0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 f80a 	bl	8005fcc <_sbrk_r>
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d0cd      	beq.n	8005f58 <_malloc_r+0x48>
 8005fbc:	6025      	str	r5, [r4, #0]
 8005fbe:	e7d9      	b.n	8005f74 <_malloc_r+0x64>
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200002e4 	.word	0x200002e4
 8005fc8:	200002e8 	.word	0x200002e8

08005fcc <_sbrk_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4c06      	ldr	r4, [pc, #24]	; (8005fe8 <_sbrk_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	f001 fd6c 	bl	8007ab4 <_sbrk>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_sbrk_r+0x1a>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_sbrk_r+0x1a>
 8005fe4:	602b      	str	r3, [r5, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	200005e0 	.word	0x200005e0

08005fec <siprintf>:
 8005fec:	b40e      	push	{r1, r2, r3}
 8005fee:	b500      	push	{lr}
 8005ff0:	b09c      	sub	sp, #112	; 0x70
 8005ff2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ff8:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005ffc:	9002      	str	r0, [sp, #8]
 8005ffe:	9006      	str	r0, [sp, #24]
 8006000:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006004:	480a      	ldr	r0, [pc, #40]	; (8006030 <siprintf+0x44>)
 8006006:	9104      	str	r1, [sp, #16]
 8006008:	9107      	str	r1, [sp, #28]
 800600a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800600e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006012:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006016:	6800      	ldr	r0, [r0, #0]
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	a902      	add	r1, sp, #8
 800601c:	f000 f9a6 	bl	800636c <_svfiprintf_r>
 8006020:	9b02      	ldr	r3, [sp, #8]
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	b01c      	add	sp, #112	; 0x70
 8006028:	f85d eb04 	ldr.w	lr, [sp], #4
 800602c:	b003      	add	sp, #12
 800602e:	4770      	bx	lr
 8006030:	20000030 	.word	0x20000030

08006034 <strtok>:
 8006034:	4b13      	ldr	r3, [pc, #76]	; (8006084 <strtok+0x50>)
 8006036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603a:	681d      	ldr	r5, [r3, #0]
 800603c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800603e:	4606      	mov	r6, r0
 8006040:	460f      	mov	r7, r1
 8006042:	b9b4      	cbnz	r4, 8006072 <strtok+0x3e>
 8006044:	2050      	movs	r0, #80	; 0x50
 8006046:	f7ff fef9 	bl	8005e3c <malloc>
 800604a:	65a8      	str	r0, [r5, #88]	; 0x58
 800604c:	6004      	str	r4, [r0, #0]
 800604e:	6044      	str	r4, [r0, #4]
 8006050:	6084      	str	r4, [r0, #8]
 8006052:	60c4      	str	r4, [r0, #12]
 8006054:	6104      	str	r4, [r0, #16]
 8006056:	6144      	str	r4, [r0, #20]
 8006058:	6184      	str	r4, [r0, #24]
 800605a:	6284      	str	r4, [r0, #40]	; 0x28
 800605c:	62c4      	str	r4, [r0, #44]	; 0x2c
 800605e:	6304      	str	r4, [r0, #48]	; 0x30
 8006060:	6344      	str	r4, [r0, #52]	; 0x34
 8006062:	6384      	str	r4, [r0, #56]	; 0x38
 8006064:	63c4      	str	r4, [r0, #60]	; 0x3c
 8006066:	6404      	str	r4, [r0, #64]	; 0x40
 8006068:	6444      	str	r4, [r0, #68]	; 0x44
 800606a:	6484      	str	r4, [r0, #72]	; 0x48
 800606c:	64c4      	str	r4, [r0, #76]	; 0x4c
 800606e:	7704      	strb	r4, [r0, #28]
 8006070:	6244      	str	r4, [r0, #36]	; 0x24
 8006072:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006074:	4639      	mov	r1, r7
 8006076:	4630      	mov	r0, r6
 8006078:	2301      	movs	r3, #1
 800607a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607e:	f000 b803 	b.w	8006088 <__strtok_r>
 8006082:	bf00      	nop
 8006084:	20000030 	.word	0x20000030

08006088 <__strtok_r>:
 8006088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608a:	b918      	cbnz	r0, 8006094 <__strtok_r+0xc>
 800608c:	6810      	ldr	r0, [r2, #0]
 800608e:	b908      	cbnz	r0, 8006094 <__strtok_r+0xc>
 8006090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006092:	4620      	mov	r0, r4
 8006094:	4604      	mov	r4, r0
 8006096:	460f      	mov	r7, r1
 8006098:	f814 5b01 	ldrb.w	r5, [r4], #1
 800609c:	f817 6b01 	ldrb.w	r6, [r7], #1
 80060a0:	b91e      	cbnz	r6, 80060aa <__strtok_r+0x22>
 80060a2:	b965      	cbnz	r5, 80060be <__strtok_r+0x36>
 80060a4:	6015      	str	r5, [r2, #0]
 80060a6:	4628      	mov	r0, r5
 80060a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060aa:	42b5      	cmp	r5, r6
 80060ac:	d1f6      	bne.n	800609c <__strtok_r+0x14>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1ef      	bne.n	8006092 <__strtok_r+0xa>
 80060b2:	6014      	str	r4, [r2, #0]
 80060b4:	7003      	strb	r3, [r0, #0]
 80060b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b8:	461c      	mov	r4, r3
 80060ba:	e00c      	b.n	80060d6 <__strtok_r+0x4e>
 80060bc:	b915      	cbnz	r5, 80060c4 <__strtok_r+0x3c>
 80060be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060c2:	460e      	mov	r6, r1
 80060c4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80060c8:	42ab      	cmp	r3, r5
 80060ca:	d1f7      	bne.n	80060bc <__strtok_r+0x34>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f3      	beq.n	80060b8 <__strtok_r+0x30>
 80060d0:	2300      	movs	r3, #0
 80060d2:	f804 3c01 	strb.w	r3, [r4, #-1]
 80060d6:	6014      	str	r4, [r2, #0]
 80060d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060da <_strtol_l.isra.0>:
 80060da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060de:	4680      	mov	r8, r0
 80060e0:	4689      	mov	r9, r1
 80060e2:	4692      	mov	sl, r2
 80060e4:	461f      	mov	r7, r3
 80060e6:	468b      	mov	fp, r1
 80060e8:	465d      	mov	r5, fp
 80060ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060f0:	f000 f8ca 	bl	8006288 <__locale_ctype_ptr_l>
 80060f4:	4420      	add	r0, r4
 80060f6:	7846      	ldrb	r6, [r0, #1]
 80060f8:	f016 0608 	ands.w	r6, r6, #8
 80060fc:	d10b      	bne.n	8006116 <_strtol_l.isra.0+0x3c>
 80060fe:	2c2d      	cmp	r4, #45	; 0x2d
 8006100:	d10b      	bne.n	800611a <_strtol_l.isra.0+0x40>
 8006102:	782c      	ldrb	r4, [r5, #0]
 8006104:	2601      	movs	r6, #1
 8006106:	f10b 0502 	add.w	r5, fp, #2
 800610a:	b167      	cbz	r7, 8006126 <_strtol_l.isra.0+0x4c>
 800610c:	2f10      	cmp	r7, #16
 800610e:	d114      	bne.n	800613a <_strtol_l.isra.0+0x60>
 8006110:	2c30      	cmp	r4, #48	; 0x30
 8006112:	d00a      	beq.n	800612a <_strtol_l.isra.0+0x50>
 8006114:	e011      	b.n	800613a <_strtol_l.isra.0+0x60>
 8006116:	46ab      	mov	fp, r5
 8006118:	e7e6      	b.n	80060e8 <_strtol_l.isra.0+0xe>
 800611a:	2c2b      	cmp	r4, #43	; 0x2b
 800611c:	bf04      	itt	eq
 800611e:	782c      	ldrbeq	r4, [r5, #0]
 8006120:	f10b 0502 	addeq.w	r5, fp, #2
 8006124:	e7f1      	b.n	800610a <_strtol_l.isra.0+0x30>
 8006126:	2c30      	cmp	r4, #48	; 0x30
 8006128:	d127      	bne.n	800617a <_strtol_l.isra.0+0xa0>
 800612a:	782b      	ldrb	r3, [r5, #0]
 800612c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006130:	2b58      	cmp	r3, #88	; 0x58
 8006132:	d14b      	bne.n	80061cc <_strtol_l.isra.0+0xf2>
 8006134:	786c      	ldrb	r4, [r5, #1]
 8006136:	2710      	movs	r7, #16
 8006138:	3502      	adds	r5, #2
 800613a:	2e00      	cmp	r6, #0
 800613c:	bf0c      	ite	eq
 800613e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006142:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006146:	2200      	movs	r2, #0
 8006148:	fbb1 fef7 	udiv	lr, r1, r7
 800614c:	4610      	mov	r0, r2
 800614e:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006152:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006156:	2b09      	cmp	r3, #9
 8006158:	d811      	bhi.n	800617e <_strtol_l.isra.0+0xa4>
 800615a:	461c      	mov	r4, r3
 800615c:	42a7      	cmp	r7, r4
 800615e:	dd1d      	ble.n	800619c <_strtol_l.isra.0+0xc2>
 8006160:	1c53      	adds	r3, r2, #1
 8006162:	d007      	beq.n	8006174 <_strtol_l.isra.0+0x9a>
 8006164:	4586      	cmp	lr, r0
 8006166:	d316      	bcc.n	8006196 <_strtol_l.isra.0+0xbc>
 8006168:	d101      	bne.n	800616e <_strtol_l.isra.0+0x94>
 800616a:	45a4      	cmp	ip, r4
 800616c:	db13      	blt.n	8006196 <_strtol_l.isra.0+0xbc>
 800616e:	fb00 4007 	mla	r0, r0, r7, r4
 8006172:	2201      	movs	r2, #1
 8006174:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006178:	e7eb      	b.n	8006152 <_strtol_l.isra.0+0x78>
 800617a:	270a      	movs	r7, #10
 800617c:	e7dd      	b.n	800613a <_strtol_l.isra.0+0x60>
 800617e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006182:	2b19      	cmp	r3, #25
 8006184:	d801      	bhi.n	800618a <_strtol_l.isra.0+0xb0>
 8006186:	3c37      	subs	r4, #55	; 0x37
 8006188:	e7e8      	b.n	800615c <_strtol_l.isra.0+0x82>
 800618a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800618e:	2b19      	cmp	r3, #25
 8006190:	d804      	bhi.n	800619c <_strtol_l.isra.0+0xc2>
 8006192:	3c57      	subs	r4, #87	; 0x57
 8006194:	e7e2      	b.n	800615c <_strtol_l.isra.0+0x82>
 8006196:	f04f 32ff 	mov.w	r2, #4294967295
 800619a:	e7eb      	b.n	8006174 <_strtol_l.isra.0+0x9a>
 800619c:	1c53      	adds	r3, r2, #1
 800619e:	d108      	bne.n	80061b2 <_strtol_l.isra.0+0xd8>
 80061a0:	2322      	movs	r3, #34	; 0x22
 80061a2:	f8c8 3000 	str.w	r3, [r8]
 80061a6:	4608      	mov	r0, r1
 80061a8:	f1ba 0f00 	cmp.w	sl, #0
 80061ac:	d107      	bne.n	80061be <_strtol_l.isra.0+0xe4>
 80061ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b2:	b106      	cbz	r6, 80061b6 <_strtol_l.isra.0+0xdc>
 80061b4:	4240      	negs	r0, r0
 80061b6:	f1ba 0f00 	cmp.w	sl, #0
 80061ba:	d00c      	beq.n	80061d6 <_strtol_l.isra.0+0xfc>
 80061bc:	b122      	cbz	r2, 80061c8 <_strtol_l.isra.0+0xee>
 80061be:	3d01      	subs	r5, #1
 80061c0:	f8ca 5000 	str.w	r5, [sl]
 80061c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	464d      	mov	r5, r9
 80061ca:	e7f9      	b.n	80061c0 <_strtol_l.isra.0+0xe6>
 80061cc:	2430      	movs	r4, #48	; 0x30
 80061ce:	2f00      	cmp	r7, #0
 80061d0:	d1b3      	bne.n	800613a <_strtol_l.isra.0+0x60>
 80061d2:	2708      	movs	r7, #8
 80061d4:	e7b1      	b.n	800613a <_strtol_l.isra.0+0x60>
 80061d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080061dc <strtol>:
 80061dc:	4b08      	ldr	r3, [pc, #32]	; (8006200 <strtol+0x24>)
 80061de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061e0:	681c      	ldr	r4, [r3, #0]
 80061e2:	4d08      	ldr	r5, [pc, #32]	; (8006204 <strtol+0x28>)
 80061e4:	6a23      	ldr	r3, [r4, #32]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf08      	it	eq
 80061ea:	462b      	moveq	r3, r5
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4613      	mov	r3, r2
 80061f0:	460a      	mov	r2, r1
 80061f2:	4601      	mov	r1, r0
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7ff ff70 	bl	80060da <_strtol_l.isra.0>
 80061fa:	b003      	add	sp, #12
 80061fc:	bd30      	pop	{r4, r5, pc}
 80061fe:	bf00      	nop
 8006200:	20000030 	.word	0x20000030
 8006204:	20000094 	.word	0x20000094

08006208 <__utoa>:
 8006208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620a:	4c1e      	ldr	r4, [pc, #120]	; (8006284 <__utoa+0x7c>)
 800620c:	b08b      	sub	sp, #44	; 0x2c
 800620e:	4603      	mov	r3, r0
 8006210:	460f      	mov	r7, r1
 8006212:	466d      	mov	r5, sp
 8006214:	f104 0e20 	add.w	lr, r4, #32
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	6861      	ldr	r1, [r4, #4]
 800621c:	462e      	mov	r6, r5
 800621e:	c603      	stmia	r6!, {r0, r1}
 8006220:	3408      	adds	r4, #8
 8006222:	4574      	cmp	r4, lr
 8006224:	4635      	mov	r5, r6
 8006226:	d1f7      	bne.n	8006218 <__utoa+0x10>
 8006228:	7921      	ldrb	r1, [r4, #4]
 800622a:	7131      	strb	r1, [r6, #4]
 800622c:	1e91      	subs	r1, r2, #2
 800622e:	6820      	ldr	r0, [r4, #0]
 8006230:	6030      	str	r0, [r6, #0]
 8006232:	2922      	cmp	r1, #34	; 0x22
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	d904      	bls.n	8006244 <__utoa+0x3c>
 800623a:	7039      	strb	r1, [r7, #0]
 800623c:	460f      	mov	r7, r1
 800623e:	4638      	mov	r0, r7
 8006240:	b00b      	add	sp, #44	; 0x2c
 8006242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006244:	1e78      	subs	r0, r7, #1
 8006246:	4606      	mov	r6, r0
 8006248:	fbb3 f5f2 	udiv	r5, r3, r2
 800624c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006250:	fb02 3315 	mls	r3, r2, r5, r3
 8006254:	4473      	add	r3, lr
 8006256:	1c4c      	adds	r4, r1, #1
 8006258:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800625c:	f806 3f01 	strb.w	r3, [r6, #1]!
 8006260:	462b      	mov	r3, r5
 8006262:	b965      	cbnz	r5, 800627e <__utoa+0x76>
 8006264:	553d      	strb	r5, [r7, r4]
 8006266:	187a      	adds	r2, r7, r1
 8006268:	1acc      	subs	r4, r1, r3
 800626a:	42a3      	cmp	r3, r4
 800626c:	dae7      	bge.n	800623e <__utoa+0x36>
 800626e:	7844      	ldrb	r4, [r0, #1]
 8006270:	7815      	ldrb	r5, [r2, #0]
 8006272:	f800 5f01 	strb.w	r5, [r0, #1]!
 8006276:	3301      	adds	r3, #1
 8006278:	f802 4901 	strb.w	r4, [r2], #-1
 800627c:	e7f4      	b.n	8006268 <__utoa+0x60>
 800627e:	4621      	mov	r1, r4
 8006280:	e7e2      	b.n	8006248 <__utoa+0x40>
 8006282:	bf00      	nop
 8006284:	08007b60 	.word	0x08007b60

08006288 <__locale_ctype_ptr_l>:
 8006288:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800628c:	4770      	bx	lr

0800628e <__ascii_mbtowc>:
 800628e:	b082      	sub	sp, #8
 8006290:	b901      	cbnz	r1, 8006294 <__ascii_mbtowc+0x6>
 8006292:	a901      	add	r1, sp, #4
 8006294:	b142      	cbz	r2, 80062a8 <__ascii_mbtowc+0x1a>
 8006296:	b14b      	cbz	r3, 80062ac <__ascii_mbtowc+0x1e>
 8006298:	7813      	ldrb	r3, [r2, #0]
 800629a:	600b      	str	r3, [r1, #0]
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	1c10      	adds	r0, r2, #0
 80062a0:	bf18      	it	ne
 80062a2:	2001      	movne	r0, #1
 80062a4:	b002      	add	sp, #8
 80062a6:	4770      	bx	lr
 80062a8:	4610      	mov	r0, r2
 80062aa:	e7fb      	b.n	80062a4 <__ascii_mbtowc+0x16>
 80062ac:	f06f 0001 	mvn.w	r0, #1
 80062b0:	e7f8      	b.n	80062a4 <__ascii_mbtowc+0x16>

080062b2 <__malloc_lock>:
 80062b2:	4770      	bx	lr

080062b4 <__malloc_unlock>:
 80062b4:	4770      	bx	lr

080062b6 <__ssputs_r>:
 80062b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ba:	688e      	ldr	r6, [r1, #8]
 80062bc:	429e      	cmp	r6, r3
 80062be:	4682      	mov	sl, r0
 80062c0:	460c      	mov	r4, r1
 80062c2:	4691      	mov	r9, r2
 80062c4:	4698      	mov	r8, r3
 80062c6:	d835      	bhi.n	8006334 <__ssputs_r+0x7e>
 80062c8:	898a      	ldrh	r2, [r1, #12]
 80062ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062ce:	d031      	beq.n	8006334 <__ssputs_r+0x7e>
 80062d0:	6825      	ldr	r5, [r4, #0]
 80062d2:	6909      	ldr	r1, [r1, #16]
 80062d4:	1a6f      	subs	r7, r5, r1
 80062d6:	6965      	ldr	r5, [r4, #20]
 80062d8:	2302      	movs	r3, #2
 80062da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062de:	fb95 f5f3 	sdiv	r5, r5, r3
 80062e2:	f108 0301 	add.w	r3, r8, #1
 80062e6:	443b      	add	r3, r7
 80062e8:	429d      	cmp	r5, r3
 80062ea:	bf38      	it	cc
 80062ec:	461d      	movcc	r5, r3
 80062ee:	0553      	lsls	r3, r2, #21
 80062f0:	d531      	bpl.n	8006356 <__ssputs_r+0xa0>
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7ff fe0c 	bl	8005f10 <_malloc_r>
 80062f8:	4606      	mov	r6, r0
 80062fa:	b950      	cbnz	r0, 8006312 <__ssputs_r+0x5c>
 80062fc:	230c      	movs	r3, #12
 80062fe:	f8ca 3000 	str.w	r3, [sl]
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006308:	81a3      	strh	r3, [r4, #12]
 800630a:	f04f 30ff 	mov.w	r0, #4294967295
 800630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006312:	463a      	mov	r2, r7
 8006314:	6921      	ldr	r1, [r4, #16]
 8006316:	f7ff fd99 	bl	8005e4c <memcpy>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	81a3      	strh	r3, [r4, #12]
 8006326:	6126      	str	r6, [r4, #16]
 8006328:	6165      	str	r5, [r4, #20]
 800632a:	443e      	add	r6, r7
 800632c:	1bed      	subs	r5, r5, r7
 800632e:	6026      	str	r6, [r4, #0]
 8006330:	60a5      	str	r5, [r4, #8]
 8006332:	4646      	mov	r6, r8
 8006334:	4546      	cmp	r6, r8
 8006336:	bf28      	it	cs
 8006338:	4646      	movcs	r6, r8
 800633a:	4632      	mov	r2, r6
 800633c:	4649      	mov	r1, r9
 800633e:	6820      	ldr	r0, [r4, #0]
 8006340:	f000 faab 	bl	800689a <memmove>
 8006344:	68a3      	ldr	r3, [r4, #8]
 8006346:	1b9b      	subs	r3, r3, r6
 8006348:	60a3      	str	r3, [r4, #8]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	441e      	add	r6, r3
 800634e:	6026      	str	r6, [r4, #0]
 8006350:	2000      	movs	r0, #0
 8006352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006356:	462a      	mov	r2, r5
 8006358:	f000 fab9 	bl	80068ce <_realloc_r>
 800635c:	4606      	mov	r6, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	d1e1      	bne.n	8006326 <__ssputs_r+0x70>
 8006362:	6921      	ldr	r1, [r4, #16]
 8006364:	4650      	mov	r0, sl
 8006366:	f7ff fd85 	bl	8005e74 <_free_r>
 800636a:	e7c7      	b.n	80062fc <__ssputs_r+0x46>

0800636c <_svfiprintf_r>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	b09d      	sub	sp, #116	; 0x74
 8006372:	4680      	mov	r8, r0
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	898b      	ldrh	r3, [r1, #12]
 8006378:	061c      	lsls	r4, r3, #24
 800637a:	460d      	mov	r5, r1
 800637c:	4616      	mov	r6, r2
 800637e:	d50f      	bpl.n	80063a0 <_svfiprintf_r+0x34>
 8006380:	690b      	ldr	r3, [r1, #16]
 8006382:	b96b      	cbnz	r3, 80063a0 <_svfiprintf_r+0x34>
 8006384:	2140      	movs	r1, #64	; 0x40
 8006386:	f7ff fdc3 	bl	8005f10 <_malloc_r>
 800638a:	6028      	str	r0, [r5, #0]
 800638c:	6128      	str	r0, [r5, #16]
 800638e:	b928      	cbnz	r0, 800639c <_svfiprintf_r+0x30>
 8006390:	230c      	movs	r3, #12
 8006392:	f8c8 3000 	str.w	r3, [r8]
 8006396:	f04f 30ff 	mov.w	r0, #4294967295
 800639a:	e0c5      	b.n	8006528 <_svfiprintf_r+0x1bc>
 800639c:	2340      	movs	r3, #64	; 0x40
 800639e:	616b      	str	r3, [r5, #20]
 80063a0:	2300      	movs	r3, #0
 80063a2:	9309      	str	r3, [sp, #36]	; 0x24
 80063a4:	2320      	movs	r3, #32
 80063a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063aa:	2330      	movs	r3, #48	; 0x30
 80063ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063b0:	f04f 0b01 	mov.w	fp, #1
 80063b4:	4637      	mov	r7, r6
 80063b6:	463c      	mov	r4, r7
 80063b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d13c      	bne.n	800643a <_svfiprintf_r+0xce>
 80063c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80063c4:	d00b      	beq.n	80063de <_svfiprintf_r+0x72>
 80063c6:	4653      	mov	r3, sl
 80063c8:	4632      	mov	r2, r6
 80063ca:	4629      	mov	r1, r5
 80063cc:	4640      	mov	r0, r8
 80063ce:	f7ff ff72 	bl	80062b6 <__ssputs_r>
 80063d2:	3001      	adds	r0, #1
 80063d4:	f000 80a3 	beq.w	800651e <_svfiprintf_r+0x1b2>
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	4453      	add	r3, sl
 80063dc:	9309      	str	r3, [sp, #36]	; 0x24
 80063de:	783b      	ldrb	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 809c 	beq.w	800651e <_svfiprintf_r+0x1b2>
 80063e6:	2300      	movs	r3, #0
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ec:	9304      	str	r3, [sp, #16]
 80063ee:	9307      	str	r3, [sp, #28]
 80063f0:	9205      	str	r2, [sp, #20]
 80063f2:	9306      	str	r3, [sp, #24]
 80063f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063f8:	931a      	str	r3, [sp, #104]	; 0x68
 80063fa:	2205      	movs	r2, #5
 80063fc:	7821      	ldrb	r1, [r4, #0]
 80063fe:	4850      	ldr	r0, [pc, #320]	; (8006540 <_svfiprintf_r+0x1d4>)
 8006400:	f7f9 feee 	bl	80001e0 <memchr>
 8006404:	1c67      	adds	r7, r4, #1
 8006406:	9b04      	ldr	r3, [sp, #16]
 8006408:	b9d8      	cbnz	r0, 8006442 <_svfiprintf_r+0xd6>
 800640a:	06d9      	lsls	r1, r3, #27
 800640c:	bf44      	itt	mi
 800640e:	2220      	movmi	r2, #32
 8006410:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006414:	071a      	lsls	r2, r3, #28
 8006416:	bf44      	itt	mi
 8006418:	222b      	movmi	r2, #43	; 0x2b
 800641a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800641e:	7822      	ldrb	r2, [r4, #0]
 8006420:	2a2a      	cmp	r2, #42	; 0x2a
 8006422:	d016      	beq.n	8006452 <_svfiprintf_r+0xe6>
 8006424:	9a07      	ldr	r2, [sp, #28]
 8006426:	2100      	movs	r1, #0
 8006428:	200a      	movs	r0, #10
 800642a:	4627      	mov	r7, r4
 800642c:	3401      	adds	r4, #1
 800642e:	783b      	ldrb	r3, [r7, #0]
 8006430:	3b30      	subs	r3, #48	; 0x30
 8006432:	2b09      	cmp	r3, #9
 8006434:	d951      	bls.n	80064da <_svfiprintf_r+0x16e>
 8006436:	b1c9      	cbz	r1, 800646c <_svfiprintf_r+0x100>
 8006438:	e011      	b.n	800645e <_svfiprintf_r+0xf2>
 800643a:	2b25      	cmp	r3, #37	; 0x25
 800643c:	d0c0      	beq.n	80063c0 <_svfiprintf_r+0x54>
 800643e:	4627      	mov	r7, r4
 8006440:	e7b9      	b.n	80063b6 <_svfiprintf_r+0x4a>
 8006442:	4a3f      	ldr	r2, [pc, #252]	; (8006540 <_svfiprintf_r+0x1d4>)
 8006444:	1a80      	subs	r0, r0, r2
 8006446:	fa0b f000 	lsl.w	r0, fp, r0
 800644a:	4318      	orrs	r0, r3
 800644c:	9004      	str	r0, [sp, #16]
 800644e:	463c      	mov	r4, r7
 8006450:	e7d3      	b.n	80063fa <_svfiprintf_r+0x8e>
 8006452:	9a03      	ldr	r2, [sp, #12]
 8006454:	1d11      	adds	r1, r2, #4
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	9103      	str	r1, [sp, #12]
 800645a:	2a00      	cmp	r2, #0
 800645c:	db01      	blt.n	8006462 <_svfiprintf_r+0xf6>
 800645e:	9207      	str	r2, [sp, #28]
 8006460:	e004      	b.n	800646c <_svfiprintf_r+0x100>
 8006462:	4252      	negs	r2, r2
 8006464:	f043 0302 	orr.w	r3, r3, #2
 8006468:	9207      	str	r2, [sp, #28]
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	783b      	ldrb	r3, [r7, #0]
 800646e:	2b2e      	cmp	r3, #46	; 0x2e
 8006470:	d10e      	bne.n	8006490 <_svfiprintf_r+0x124>
 8006472:	787b      	ldrb	r3, [r7, #1]
 8006474:	2b2a      	cmp	r3, #42	; 0x2a
 8006476:	f107 0101 	add.w	r1, r7, #1
 800647a:	d132      	bne.n	80064e2 <_svfiprintf_r+0x176>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	9203      	str	r2, [sp, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	bfb8      	it	lt
 8006488:	f04f 33ff 	movlt.w	r3, #4294967295
 800648c:	3702      	adds	r7, #2
 800648e:	9305      	str	r3, [sp, #20]
 8006490:	4c2c      	ldr	r4, [pc, #176]	; (8006544 <_svfiprintf_r+0x1d8>)
 8006492:	7839      	ldrb	r1, [r7, #0]
 8006494:	2203      	movs	r2, #3
 8006496:	4620      	mov	r0, r4
 8006498:	f7f9 fea2 	bl	80001e0 <memchr>
 800649c:	b138      	cbz	r0, 80064ae <_svfiprintf_r+0x142>
 800649e:	2340      	movs	r3, #64	; 0x40
 80064a0:	1b00      	subs	r0, r0, r4
 80064a2:	fa03 f000 	lsl.w	r0, r3, r0
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	4303      	orrs	r3, r0
 80064aa:	9304      	str	r3, [sp, #16]
 80064ac:	3701      	adds	r7, #1
 80064ae:	7839      	ldrb	r1, [r7, #0]
 80064b0:	4825      	ldr	r0, [pc, #148]	; (8006548 <_svfiprintf_r+0x1dc>)
 80064b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064b6:	2206      	movs	r2, #6
 80064b8:	1c7e      	adds	r6, r7, #1
 80064ba:	f7f9 fe91 	bl	80001e0 <memchr>
 80064be:	2800      	cmp	r0, #0
 80064c0:	d035      	beq.n	800652e <_svfiprintf_r+0x1c2>
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <_svfiprintf_r+0x1e0>)
 80064c4:	b9fb      	cbnz	r3, 8006506 <_svfiprintf_r+0x19a>
 80064c6:	9b03      	ldr	r3, [sp, #12]
 80064c8:	3307      	adds	r3, #7
 80064ca:	f023 0307 	bic.w	r3, r3, #7
 80064ce:	3308      	adds	r3, #8
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d4:	444b      	add	r3, r9
 80064d6:	9309      	str	r3, [sp, #36]	; 0x24
 80064d8:	e76c      	b.n	80063b4 <_svfiprintf_r+0x48>
 80064da:	fb00 3202 	mla	r2, r0, r2, r3
 80064de:	2101      	movs	r1, #1
 80064e0:	e7a3      	b.n	800642a <_svfiprintf_r+0xbe>
 80064e2:	2300      	movs	r3, #0
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	4618      	mov	r0, r3
 80064e8:	240a      	movs	r4, #10
 80064ea:	460f      	mov	r7, r1
 80064ec:	3101      	adds	r1, #1
 80064ee:	783a      	ldrb	r2, [r7, #0]
 80064f0:	3a30      	subs	r2, #48	; 0x30
 80064f2:	2a09      	cmp	r2, #9
 80064f4:	d903      	bls.n	80064fe <_svfiprintf_r+0x192>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0ca      	beq.n	8006490 <_svfiprintf_r+0x124>
 80064fa:	9005      	str	r0, [sp, #20]
 80064fc:	e7c8      	b.n	8006490 <_svfiprintf_r+0x124>
 80064fe:	fb04 2000 	mla	r0, r4, r0, r2
 8006502:	2301      	movs	r3, #1
 8006504:	e7f1      	b.n	80064ea <_svfiprintf_r+0x17e>
 8006506:	ab03      	add	r3, sp, #12
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	462a      	mov	r2, r5
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <_svfiprintf_r+0x1e4>)
 800650e:	a904      	add	r1, sp, #16
 8006510:	4640      	mov	r0, r8
 8006512:	f3af 8000 	nop.w
 8006516:	f1b0 3fff 	cmp.w	r0, #4294967295
 800651a:	4681      	mov	r9, r0
 800651c:	d1d9      	bne.n	80064d2 <_svfiprintf_r+0x166>
 800651e:	89ab      	ldrh	r3, [r5, #12]
 8006520:	065b      	lsls	r3, r3, #25
 8006522:	f53f af38 	bmi.w	8006396 <_svfiprintf_r+0x2a>
 8006526:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006528:	b01d      	add	sp, #116	; 0x74
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	ab03      	add	r3, sp, #12
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	462a      	mov	r2, r5
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <_svfiprintf_r+0x1e4>)
 8006536:	a904      	add	r1, sp, #16
 8006538:	4640      	mov	r0, r8
 800653a:	f000 f881 	bl	8006640 <_printf_i>
 800653e:	e7ea      	b.n	8006516 <_svfiprintf_r+0x1aa>
 8006540:	08007b8f 	.word	0x08007b8f
 8006544:	08007b95 	.word	0x08007b95
 8006548:	08007b99 	.word	0x08007b99
 800654c:	00000000 	.word	0x00000000
 8006550:	080062b7 	.word	0x080062b7

08006554 <_printf_common>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	4691      	mov	r9, r2
 800655a:	461f      	mov	r7, r3
 800655c:	688a      	ldr	r2, [r1, #8]
 800655e:	690b      	ldr	r3, [r1, #16]
 8006560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006564:	4293      	cmp	r3, r2
 8006566:	bfb8      	it	lt
 8006568:	4613      	movlt	r3, r2
 800656a:	f8c9 3000 	str.w	r3, [r9]
 800656e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006572:	4606      	mov	r6, r0
 8006574:	460c      	mov	r4, r1
 8006576:	b112      	cbz	r2, 800657e <_printf_common+0x2a>
 8006578:	3301      	adds	r3, #1
 800657a:	f8c9 3000 	str.w	r3, [r9]
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	0699      	lsls	r1, r3, #26
 8006582:	bf42      	ittt	mi
 8006584:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006588:	3302      	addmi	r3, #2
 800658a:	f8c9 3000 	strmi.w	r3, [r9]
 800658e:	6825      	ldr	r5, [r4, #0]
 8006590:	f015 0506 	ands.w	r5, r5, #6
 8006594:	d107      	bne.n	80065a6 <_printf_common+0x52>
 8006596:	f104 0a19 	add.w	sl, r4, #25
 800659a:	68e3      	ldr	r3, [r4, #12]
 800659c:	f8d9 2000 	ldr.w	r2, [r9]
 80065a0:	1a9b      	subs	r3, r3, r2
 80065a2:	429d      	cmp	r5, r3
 80065a4:	db29      	blt.n	80065fa <_printf_common+0xa6>
 80065a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065aa:	6822      	ldr	r2, [r4, #0]
 80065ac:	3300      	adds	r3, #0
 80065ae:	bf18      	it	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	0692      	lsls	r2, r2, #26
 80065b4:	d42e      	bmi.n	8006614 <_printf_common+0xc0>
 80065b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ba:	4639      	mov	r1, r7
 80065bc:	4630      	mov	r0, r6
 80065be:	47c0      	blx	r8
 80065c0:	3001      	adds	r0, #1
 80065c2:	d021      	beq.n	8006608 <_printf_common+0xb4>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	68e5      	ldr	r5, [r4, #12]
 80065c8:	f8d9 2000 	ldr.w	r2, [r9]
 80065cc:	f003 0306 	and.w	r3, r3, #6
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	bf08      	it	eq
 80065d4:	1aad      	subeq	r5, r5, r2
 80065d6:	68a3      	ldr	r3, [r4, #8]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	bf0c      	ite	eq
 80065dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065e0:	2500      	movne	r5, #0
 80065e2:	4293      	cmp	r3, r2
 80065e4:	bfc4      	itt	gt
 80065e6:	1a9b      	subgt	r3, r3, r2
 80065e8:	18ed      	addgt	r5, r5, r3
 80065ea:	f04f 0900 	mov.w	r9, #0
 80065ee:	341a      	adds	r4, #26
 80065f0:	454d      	cmp	r5, r9
 80065f2:	d11b      	bne.n	800662c <_printf_common+0xd8>
 80065f4:	2000      	movs	r0, #0
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	2301      	movs	r3, #1
 80065fc:	4652      	mov	r2, sl
 80065fe:	4639      	mov	r1, r7
 8006600:	4630      	mov	r0, r6
 8006602:	47c0      	blx	r8
 8006604:	3001      	adds	r0, #1
 8006606:	d103      	bne.n	8006610 <_printf_common+0xbc>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006610:	3501      	adds	r5, #1
 8006612:	e7c2      	b.n	800659a <_printf_common+0x46>
 8006614:	18e1      	adds	r1, r4, r3
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	2030      	movs	r0, #48	; 0x30
 800661a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800661e:	4422      	add	r2, r4
 8006620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006628:	3302      	adds	r3, #2
 800662a:	e7c4      	b.n	80065b6 <_printf_common+0x62>
 800662c:	2301      	movs	r3, #1
 800662e:	4622      	mov	r2, r4
 8006630:	4639      	mov	r1, r7
 8006632:	4630      	mov	r0, r6
 8006634:	47c0      	blx	r8
 8006636:	3001      	adds	r0, #1
 8006638:	d0e6      	beq.n	8006608 <_printf_common+0xb4>
 800663a:	f109 0901 	add.w	r9, r9, #1
 800663e:	e7d7      	b.n	80065f0 <_printf_common+0x9c>

08006640 <_printf_i>:
 8006640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006644:	4617      	mov	r7, r2
 8006646:	7e0a      	ldrb	r2, [r1, #24]
 8006648:	b085      	sub	sp, #20
 800664a:	2a6e      	cmp	r2, #110	; 0x6e
 800664c:	4698      	mov	r8, r3
 800664e:	4606      	mov	r6, r0
 8006650:	460c      	mov	r4, r1
 8006652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006654:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006658:	f000 80bc 	beq.w	80067d4 <_printf_i+0x194>
 800665c:	d81a      	bhi.n	8006694 <_printf_i+0x54>
 800665e:	2a63      	cmp	r2, #99	; 0x63
 8006660:	d02e      	beq.n	80066c0 <_printf_i+0x80>
 8006662:	d80a      	bhi.n	800667a <_printf_i+0x3a>
 8006664:	2a00      	cmp	r2, #0
 8006666:	f000 80c8 	beq.w	80067fa <_printf_i+0x1ba>
 800666a:	2a58      	cmp	r2, #88	; 0x58
 800666c:	f000 808a 	beq.w	8006784 <_printf_i+0x144>
 8006670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006674:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006678:	e02a      	b.n	80066d0 <_printf_i+0x90>
 800667a:	2a64      	cmp	r2, #100	; 0x64
 800667c:	d001      	beq.n	8006682 <_printf_i+0x42>
 800667e:	2a69      	cmp	r2, #105	; 0x69
 8006680:	d1f6      	bne.n	8006670 <_printf_i+0x30>
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	f011 0f80 	tst.w	r1, #128	; 0x80
 800668a:	d023      	beq.n	80066d4 <_printf_i+0x94>
 800668c:	1d11      	adds	r1, r2, #4
 800668e:	6019      	str	r1, [r3, #0]
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	e027      	b.n	80066e4 <_printf_i+0xa4>
 8006694:	2a73      	cmp	r2, #115	; 0x73
 8006696:	f000 80b4 	beq.w	8006802 <_printf_i+0x1c2>
 800669a:	d808      	bhi.n	80066ae <_printf_i+0x6e>
 800669c:	2a6f      	cmp	r2, #111	; 0x6f
 800669e:	d02a      	beq.n	80066f6 <_printf_i+0xb6>
 80066a0:	2a70      	cmp	r2, #112	; 0x70
 80066a2:	d1e5      	bne.n	8006670 <_printf_i+0x30>
 80066a4:	680a      	ldr	r2, [r1, #0]
 80066a6:	f042 0220 	orr.w	r2, r2, #32
 80066aa:	600a      	str	r2, [r1, #0]
 80066ac:	e003      	b.n	80066b6 <_printf_i+0x76>
 80066ae:	2a75      	cmp	r2, #117	; 0x75
 80066b0:	d021      	beq.n	80066f6 <_printf_i+0xb6>
 80066b2:	2a78      	cmp	r2, #120	; 0x78
 80066b4:	d1dc      	bne.n	8006670 <_printf_i+0x30>
 80066b6:	2278      	movs	r2, #120	; 0x78
 80066b8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80066bc:	496e      	ldr	r1, [pc, #440]	; (8006878 <_printf_i+0x238>)
 80066be:	e064      	b.n	800678a <_printf_i+0x14a>
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80066c6:	1d11      	adds	r1, r2, #4
 80066c8:	6019      	str	r1, [r3, #0]
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0a3      	b.n	800681c <_printf_i+0x1dc>
 80066d4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80066d8:	f102 0104 	add.w	r1, r2, #4
 80066dc:	6019      	str	r1, [r3, #0]
 80066de:	d0d7      	beq.n	8006690 <_printf_i+0x50>
 80066e0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	da03      	bge.n	80066f0 <_printf_i+0xb0>
 80066e8:	222d      	movs	r2, #45	; 0x2d
 80066ea:	425b      	negs	r3, r3
 80066ec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066f0:	4962      	ldr	r1, [pc, #392]	; (800687c <_printf_i+0x23c>)
 80066f2:	220a      	movs	r2, #10
 80066f4:	e017      	b.n	8006726 <_printf_i+0xe6>
 80066f6:	6820      	ldr	r0, [r4, #0]
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80066fe:	d003      	beq.n	8006708 <_printf_i+0xc8>
 8006700:	1d08      	adds	r0, r1, #4
 8006702:	6018      	str	r0, [r3, #0]
 8006704:	680b      	ldr	r3, [r1, #0]
 8006706:	e006      	b.n	8006716 <_printf_i+0xd6>
 8006708:	f010 0f40 	tst.w	r0, #64	; 0x40
 800670c:	f101 0004 	add.w	r0, r1, #4
 8006710:	6018      	str	r0, [r3, #0]
 8006712:	d0f7      	beq.n	8006704 <_printf_i+0xc4>
 8006714:	880b      	ldrh	r3, [r1, #0]
 8006716:	4959      	ldr	r1, [pc, #356]	; (800687c <_printf_i+0x23c>)
 8006718:	2a6f      	cmp	r2, #111	; 0x6f
 800671a:	bf14      	ite	ne
 800671c:	220a      	movne	r2, #10
 800671e:	2208      	moveq	r2, #8
 8006720:	2000      	movs	r0, #0
 8006722:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006726:	6865      	ldr	r5, [r4, #4]
 8006728:	60a5      	str	r5, [r4, #8]
 800672a:	2d00      	cmp	r5, #0
 800672c:	f2c0 809c 	blt.w	8006868 <_printf_i+0x228>
 8006730:	6820      	ldr	r0, [r4, #0]
 8006732:	f020 0004 	bic.w	r0, r0, #4
 8006736:	6020      	str	r0, [r4, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d13f      	bne.n	80067bc <_printf_i+0x17c>
 800673c:	2d00      	cmp	r5, #0
 800673e:	f040 8095 	bne.w	800686c <_printf_i+0x22c>
 8006742:	4675      	mov	r5, lr
 8006744:	2a08      	cmp	r2, #8
 8006746:	d10b      	bne.n	8006760 <_printf_i+0x120>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	07da      	lsls	r2, r3, #31
 800674c:	d508      	bpl.n	8006760 <_printf_i+0x120>
 800674e:	6923      	ldr	r3, [r4, #16]
 8006750:	6862      	ldr	r2, [r4, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	bfde      	ittt	le
 8006756:	2330      	movle	r3, #48	; 0x30
 8006758:	f805 3c01 	strble.w	r3, [r5, #-1]
 800675c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006760:	ebae 0305 	sub.w	r3, lr, r5
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	f8cd 8000 	str.w	r8, [sp]
 800676a:	463b      	mov	r3, r7
 800676c:	aa03      	add	r2, sp, #12
 800676e:	4621      	mov	r1, r4
 8006770:	4630      	mov	r0, r6
 8006772:	f7ff feef 	bl	8006554 <_printf_common>
 8006776:	3001      	adds	r0, #1
 8006778:	d155      	bne.n	8006826 <_printf_i+0x1e6>
 800677a:	f04f 30ff 	mov.w	r0, #4294967295
 800677e:	b005      	add	sp, #20
 8006780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006784:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006788:	493c      	ldr	r1, [pc, #240]	; (800687c <_printf_i+0x23c>)
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006792:	f100 0504 	add.w	r5, r0, #4
 8006796:	601d      	str	r5, [r3, #0]
 8006798:	d001      	beq.n	800679e <_printf_i+0x15e>
 800679a:	6803      	ldr	r3, [r0, #0]
 800679c:	e002      	b.n	80067a4 <_printf_i+0x164>
 800679e:	0655      	lsls	r5, r2, #25
 80067a0:	d5fb      	bpl.n	800679a <_printf_i+0x15a>
 80067a2:	8803      	ldrh	r3, [r0, #0]
 80067a4:	07d0      	lsls	r0, r2, #31
 80067a6:	bf44      	itt	mi
 80067a8:	f042 0220 	orrmi.w	r2, r2, #32
 80067ac:	6022      	strmi	r2, [r4, #0]
 80067ae:	b91b      	cbnz	r3, 80067b8 <_printf_i+0x178>
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	f022 0220 	bic.w	r2, r2, #32
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	2210      	movs	r2, #16
 80067ba:	e7b1      	b.n	8006720 <_printf_i+0xe0>
 80067bc:	4675      	mov	r5, lr
 80067be:	fbb3 f0f2 	udiv	r0, r3, r2
 80067c2:	fb02 3310 	mls	r3, r2, r0, r3
 80067c6:	5ccb      	ldrb	r3, [r1, r3]
 80067c8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80067cc:	4603      	mov	r3, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d1f5      	bne.n	80067be <_printf_i+0x17e>
 80067d2:	e7b7      	b.n	8006744 <_printf_i+0x104>
 80067d4:	6808      	ldr	r0, [r1, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	6949      	ldr	r1, [r1, #20]
 80067da:	f010 0f80 	tst.w	r0, #128	; 0x80
 80067de:	d004      	beq.n	80067ea <_printf_i+0x1aa>
 80067e0:	1d10      	adds	r0, r2, #4
 80067e2:	6018      	str	r0, [r3, #0]
 80067e4:	6813      	ldr	r3, [r2, #0]
 80067e6:	6019      	str	r1, [r3, #0]
 80067e8:	e007      	b.n	80067fa <_printf_i+0x1ba>
 80067ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067ee:	f102 0004 	add.w	r0, r2, #4
 80067f2:	6018      	str	r0, [r3, #0]
 80067f4:	6813      	ldr	r3, [r2, #0]
 80067f6:	d0f6      	beq.n	80067e6 <_printf_i+0x1a6>
 80067f8:	8019      	strh	r1, [r3, #0]
 80067fa:	2300      	movs	r3, #0
 80067fc:	6123      	str	r3, [r4, #16]
 80067fe:	4675      	mov	r5, lr
 8006800:	e7b1      	b.n	8006766 <_printf_i+0x126>
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	1d11      	adds	r1, r2, #4
 8006806:	6019      	str	r1, [r3, #0]
 8006808:	6815      	ldr	r5, [r2, #0]
 800680a:	6862      	ldr	r2, [r4, #4]
 800680c:	2100      	movs	r1, #0
 800680e:	4628      	mov	r0, r5
 8006810:	f7f9 fce6 	bl	80001e0 <memchr>
 8006814:	b108      	cbz	r0, 800681a <_printf_i+0x1da>
 8006816:	1b40      	subs	r0, r0, r5
 8006818:	6060      	str	r0, [r4, #4]
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	6123      	str	r3, [r4, #16]
 800681e:	2300      	movs	r3, #0
 8006820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006824:	e79f      	b.n	8006766 <_printf_i+0x126>
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	462a      	mov	r2, r5
 800682a:	4639      	mov	r1, r7
 800682c:	4630      	mov	r0, r6
 800682e:	47c0      	blx	r8
 8006830:	3001      	adds	r0, #1
 8006832:	d0a2      	beq.n	800677a <_printf_i+0x13a>
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	079b      	lsls	r3, r3, #30
 8006838:	d507      	bpl.n	800684a <_printf_i+0x20a>
 800683a:	2500      	movs	r5, #0
 800683c:	f104 0919 	add.w	r9, r4, #25
 8006840:	68e3      	ldr	r3, [r4, #12]
 8006842:	9a03      	ldr	r2, [sp, #12]
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	429d      	cmp	r5, r3
 8006848:	db05      	blt.n	8006856 <_printf_i+0x216>
 800684a:	68e0      	ldr	r0, [r4, #12]
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	4298      	cmp	r0, r3
 8006850:	bfb8      	it	lt
 8006852:	4618      	movlt	r0, r3
 8006854:	e793      	b.n	800677e <_printf_i+0x13e>
 8006856:	2301      	movs	r3, #1
 8006858:	464a      	mov	r2, r9
 800685a:	4639      	mov	r1, r7
 800685c:	4630      	mov	r0, r6
 800685e:	47c0      	blx	r8
 8006860:	3001      	adds	r0, #1
 8006862:	d08a      	beq.n	800677a <_printf_i+0x13a>
 8006864:	3501      	adds	r5, #1
 8006866:	e7eb      	b.n	8006840 <_printf_i+0x200>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1a7      	bne.n	80067bc <_printf_i+0x17c>
 800686c:	780b      	ldrb	r3, [r1, #0]
 800686e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006872:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006876:	e765      	b.n	8006744 <_printf_i+0x104>
 8006878:	08007bb1 	.word	0x08007bb1
 800687c:	08007ba0 	.word	0x08007ba0

08006880 <__ascii_wctomb>:
 8006880:	b149      	cbz	r1, 8006896 <__ascii_wctomb+0x16>
 8006882:	2aff      	cmp	r2, #255	; 0xff
 8006884:	bf85      	ittet	hi
 8006886:	238a      	movhi	r3, #138	; 0x8a
 8006888:	6003      	strhi	r3, [r0, #0]
 800688a:	700a      	strbls	r2, [r1, #0]
 800688c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006890:	bf98      	it	ls
 8006892:	2001      	movls	r0, #1
 8006894:	4770      	bx	lr
 8006896:	4608      	mov	r0, r1
 8006898:	4770      	bx	lr

0800689a <memmove>:
 800689a:	4288      	cmp	r0, r1
 800689c:	b510      	push	{r4, lr}
 800689e:	eb01 0302 	add.w	r3, r1, r2
 80068a2:	d803      	bhi.n	80068ac <memmove+0x12>
 80068a4:	1e42      	subs	r2, r0, #1
 80068a6:	4299      	cmp	r1, r3
 80068a8:	d10c      	bne.n	80068c4 <memmove+0x2a>
 80068aa:	bd10      	pop	{r4, pc}
 80068ac:	4298      	cmp	r0, r3
 80068ae:	d2f9      	bcs.n	80068a4 <memmove+0xa>
 80068b0:	1881      	adds	r1, r0, r2
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	42d3      	cmn	r3, r2
 80068b6:	d100      	bne.n	80068ba <memmove+0x20>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80068c2:	e7f7      	b.n	80068b4 <memmove+0x1a>
 80068c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80068cc:	e7eb      	b.n	80068a6 <memmove+0xc>

080068ce <_realloc_r>:
 80068ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d0:	4607      	mov	r7, r0
 80068d2:	4614      	mov	r4, r2
 80068d4:	460e      	mov	r6, r1
 80068d6:	b921      	cbnz	r1, 80068e2 <_realloc_r+0x14>
 80068d8:	4611      	mov	r1, r2
 80068da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068de:	f7ff bb17 	b.w	8005f10 <_malloc_r>
 80068e2:	b922      	cbnz	r2, 80068ee <_realloc_r+0x20>
 80068e4:	f7ff fac6 	bl	8005e74 <_free_r>
 80068e8:	4625      	mov	r5, r4
 80068ea:	4628      	mov	r0, r5
 80068ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ee:	f000 f814 	bl	800691a <_malloc_usable_size_r>
 80068f2:	4284      	cmp	r4, r0
 80068f4:	d90f      	bls.n	8006916 <_realloc_r+0x48>
 80068f6:	4621      	mov	r1, r4
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff fb09 	bl	8005f10 <_malloc_r>
 80068fe:	4605      	mov	r5, r0
 8006900:	2800      	cmp	r0, #0
 8006902:	d0f2      	beq.n	80068ea <_realloc_r+0x1c>
 8006904:	4631      	mov	r1, r6
 8006906:	4622      	mov	r2, r4
 8006908:	f7ff faa0 	bl	8005e4c <memcpy>
 800690c:	4631      	mov	r1, r6
 800690e:	4638      	mov	r0, r7
 8006910:	f7ff fab0 	bl	8005e74 <_free_r>
 8006914:	e7e9      	b.n	80068ea <_realloc_r+0x1c>
 8006916:	4635      	mov	r5, r6
 8006918:	e7e7      	b.n	80068ea <_realloc_r+0x1c>

0800691a <_malloc_usable_size_r>:
 800691a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800691e:	2800      	cmp	r0, #0
 8006920:	f1a0 0004 	sub.w	r0, r0, #4
 8006924:	bfbc      	itt	lt
 8006926:	580b      	ldrlt	r3, [r1, r0]
 8006928:	18c0      	addlt	r0, r0, r3
 800692a:	4770      	bx	lr

0800692c <pow>:
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	ed2d 8b04 	vpush	{d8-d9}
 8006934:	b08d      	sub	sp, #52	; 0x34
 8006936:	ec57 6b10 	vmov	r6, r7, d0
 800693a:	ec55 4b11 	vmov	r4, r5, d1
 800693e:	f000 f9c7 	bl	8006cd0 <__ieee754_pow>
 8006942:	4bae      	ldr	r3, [pc, #696]	; (8006bfc <pow+0x2d0>)
 8006944:	eeb0 8a40 	vmov.f32	s16, s0
 8006948:	eef0 8a60 	vmov.f32	s17, s1
 800694c:	f993 9000 	ldrsb.w	r9, [r3]
 8006950:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006954:	4698      	mov	r8, r3
 8006956:	d05f      	beq.n	8006a18 <pow+0xec>
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	4620      	mov	r0, r4
 800695e:	4629      	mov	r1, r5
 8006960:	f7fa f8e0 	bl	8000b24 <__aeabi_dcmpun>
 8006964:	4683      	mov	fp, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d156      	bne.n	8006a18 <pow+0xec>
 800696a:	4632      	mov	r2, r6
 800696c:	463b      	mov	r3, r7
 800696e:	4630      	mov	r0, r6
 8006970:	4639      	mov	r1, r7
 8006972:	f7fa f8d7 	bl	8000b24 <__aeabi_dcmpun>
 8006976:	9001      	str	r0, [sp, #4]
 8006978:	b1e8      	cbz	r0, 80069b6 <pow+0x8a>
 800697a:	2200      	movs	r2, #0
 800697c:	2300      	movs	r3, #0
 800697e:	4620      	mov	r0, r4
 8006980:	4629      	mov	r1, r5
 8006982:	f7fa f89d 	bl	8000ac0 <__aeabi_dcmpeq>
 8006986:	2800      	cmp	r0, #0
 8006988:	d046      	beq.n	8006a18 <pow+0xec>
 800698a:	2301      	movs	r3, #1
 800698c:	9302      	str	r3, [sp, #8]
 800698e:	4b9c      	ldr	r3, [pc, #624]	; (8006c00 <pow+0x2d4>)
 8006990:	9303      	str	r3, [sp, #12]
 8006992:	4b9c      	ldr	r3, [pc, #624]	; (8006c04 <pow+0x2d8>)
 8006994:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006998:	2200      	movs	r2, #0
 800699a:	f1b9 0f02 	cmp.w	r9, #2
 800699e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80069a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80069a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069aa:	d033      	beq.n	8006a14 <pow+0xe8>
 80069ac:	a802      	add	r0, sp, #8
 80069ae:	f000 ff60 	bl	8007872 <matherr>
 80069b2:	bb48      	cbnz	r0, 8006a08 <pow+0xdc>
 80069b4:	e05e      	b.n	8006a74 <pow+0x148>
 80069b6:	f04f 0a00 	mov.w	sl, #0
 80069ba:	f04f 0b00 	mov.w	fp, #0
 80069be:	4652      	mov	r2, sl
 80069c0:	465b      	mov	r3, fp
 80069c2:	4630      	mov	r0, r6
 80069c4:	4639      	mov	r1, r7
 80069c6:	f7fa f87b 	bl	8000ac0 <__aeabi_dcmpeq>
 80069ca:	ec4b ab19 	vmov	d9, sl, fp
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d055      	beq.n	8006a7e <pow+0x152>
 80069d2:	4652      	mov	r2, sl
 80069d4:	465b      	mov	r3, fp
 80069d6:	4620      	mov	r0, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	f7fa f871 	bl	8000ac0 <__aeabi_dcmpeq>
 80069de:	4680      	mov	r8, r0
 80069e0:	b318      	cbz	r0, 8006a2a <pow+0xfe>
 80069e2:	2301      	movs	r3, #1
 80069e4:	9302      	str	r3, [sp, #8]
 80069e6:	4b86      	ldr	r3, [pc, #536]	; (8006c00 <pow+0x2d4>)
 80069e8:	9303      	str	r3, [sp, #12]
 80069ea:	9b01      	ldr	r3, [sp, #4]
 80069ec:	930a      	str	r3, [sp, #40]	; 0x28
 80069ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80069f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80069f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	d0d5      	beq.n	80069ac <pow+0x80>
 8006a00:	4b80      	ldr	r3, [pc, #512]	; (8006c04 <pow+0x2d8>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0a:	b11b      	cbz	r3, 8006a14 <pow+0xe8>
 8006a0c:	f001 f84c 	bl	8007aa8 <__errno>
 8006a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a12:	6003      	str	r3, [r0, #0]
 8006a14:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006a18:	eeb0 0a48 	vmov.f32	s0, s16
 8006a1c:	eef0 0a68 	vmov.f32	s1, s17
 8006a20:	b00d      	add	sp, #52	; 0x34
 8006a22:	ecbd 8b04 	vpop	{d8-d9}
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	ec45 4b10 	vmov	d0, r4, r5
 8006a2e:	f000 ff18 	bl	8007862 <finite>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d0f0      	beq.n	8006a18 <pow+0xec>
 8006a36:	4652      	mov	r2, sl
 8006a38:	465b      	mov	r3, fp
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	f7fa f849 	bl	8000ad4 <__aeabi_dcmplt>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d0e8      	beq.n	8006a18 <pow+0xec>
 8006a46:	2301      	movs	r3, #1
 8006a48:	9302      	str	r3, [sp, #8]
 8006a4a:	4b6d      	ldr	r3, [pc, #436]	; (8006c00 <pow+0x2d4>)
 8006a4c:	9303      	str	r3, [sp, #12]
 8006a4e:	4b6b      	ldr	r3, [pc, #428]	; (8006bfc <pow+0x2d0>)
 8006a50:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006a54:	f993 3000 	ldrsb.w	r3, [r3]
 8006a58:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006a60:	b913      	cbnz	r3, 8006a68 <pow+0x13c>
 8006a62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006a66:	e7a1      	b.n	80069ac <pow+0x80>
 8006a68:	4967      	ldr	r1, [pc, #412]	; (8006c08 <pow+0x2dc>)
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d19b      	bne.n	80069ac <pow+0x80>
 8006a74:	f001 f818 	bl	8007aa8 <__errno>
 8006a78:	2321      	movs	r3, #33	; 0x21
 8006a7a:	6003      	str	r3, [r0, #0]
 8006a7c:	e7c4      	b.n	8006a08 <pow+0xdc>
 8006a7e:	eeb0 0a48 	vmov.f32	s0, s16
 8006a82:	eef0 0a68 	vmov.f32	s1, s17
 8006a86:	f000 feec 	bl	8007862 <finite>
 8006a8a:	9001      	str	r0, [sp, #4]
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	f040 808a 	bne.w	8006ba6 <pow+0x27a>
 8006a92:	ec47 6b10 	vmov	d0, r6, r7
 8006a96:	f000 fee4 	bl	8007862 <finite>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	f000 8083 	beq.w	8006ba6 <pow+0x27a>
 8006aa0:	ec45 4b10 	vmov	d0, r4, r5
 8006aa4:	f000 fedd 	bl	8007862 <finite>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d07c      	beq.n	8006ba6 <pow+0x27a>
 8006aac:	ec53 2b18 	vmov	r2, r3, d8
 8006ab0:	ee18 0a10 	vmov	r0, s16
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f7fa f835 	bl	8000b24 <__aeabi_dcmpun>
 8006aba:	f998 9000 	ldrsb.w	r9, [r8]
 8006abe:	4b50      	ldr	r3, [pc, #320]	; (8006c00 <pow+0x2d4>)
 8006ac0:	b1b0      	cbz	r0, 8006af0 <pow+0x1c4>
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	9303      	str	r3, [sp, #12]
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	9202      	str	r2, [sp, #8]
 8006aca:	930a      	str	r3, [sp, #40]	; 0x28
 8006acc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006ad0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ad4:	f1b9 0f00 	cmp.w	r9, #0
 8006ad8:	d0c3      	beq.n	8006a62 <pow+0x136>
 8006ada:	4652      	mov	r2, sl
 8006adc:	465b      	mov	r3, fp
 8006ade:	4650      	mov	r0, sl
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	f7f9 feaf 	bl	8000844 <__aeabi_ddiv>
 8006ae6:	f1b9 0f02 	cmp.w	r9, #2
 8006aea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006aee:	e7c0      	b.n	8006a72 <pow+0x146>
 8006af0:	2203      	movs	r2, #3
 8006af2:	9202      	str	r2, [sp, #8]
 8006af4:	9303      	str	r3, [sp, #12]
 8006af6:	900a      	str	r0, [sp, #40]	; 0x28
 8006af8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006afc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b00:	f1b9 0f00 	cmp.w	r9, #0
 8006b04:	d12c      	bne.n	8006b60 <pow+0x234>
 8006b06:	4b41      	ldr	r3, [pc, #260]	; (8006c0c <pow+0x2e0>)
 8006b08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006b0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b10:	4630      	mov	r0, r6
 8006b12:	4652      	mov	r2, sl
 8006b14:	465b      	mov	r3, fp
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 ffdc 	bl	8000ad4 <__aeabi_dcmplt>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d066      	beq.n	8006bee <pow+0x2c2>
 8006b20:	2200      	movs	r2, #0
 8006b22:	4b3b      	ldr	r3, [pc, #236]	; (8006c10 <pow+0x2e4>)
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fd62 	bl	80005f0 <__aeabi_dmul>
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
 8006b30:	ec45 4b10 	vmov	d0, r4, r5
 8006b34:	f000 fea8 	bl	8007888 <rint>
 8006b38:	4620      	mov	r0, r4
 8006b3a:	ec53 2b10 	vmov	r2, r3, d0
 8006b3e:	4629      	mov	r1, r5
 8006b40:	f7f9 ffbe 	bl	8000ac0 <__aeabi_dcmpeq>
 8006b44:	b920      	cbnz	r0, 8006b50 <pow+0x224>
 8006b46:	4b33      	ldr	r3, [pc, #204]	; (8006c14 <pow+0x2e8>)
 8006b48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006b4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b50:	f998 3000 	ldrsb.w	r3, [r8]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d14a      	bne.n	8006bee <pow+0x2c2>
 8006b58:	f000 ffa6 	bl	8007aa8 <__errno>
 8006b5c:	2322      	movs	r3, #34	; 0x22
 8006b5e:	e78c      	b.n	8006a7a <pow+0x14e>
 8006b60:	4b2d      	ldr	r3, [pc, #180]	; (8006c18 <pow+0x2ec>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b68:	4630      	mov	r0, r6
 8006b6a:	4652      	mov	r2, sl
 8006b6c:	465b      	mov	r3, fp
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 ffb0 	bl	8000ad4 <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d0eb      	beq.n	8006b50 <pow+0x224>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <pow+0x2e4>)
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f7f9 fd36 	bl	80005f0 <__aeabi_dmul>
 8006b84:	4604      	mov	r4, r0
 8006b86:	460d      	mov	r5, r1
 8006b88:	ec45 4b10 	vmov	d0, r4, r5
 8006b8c:	f000 fe7c 	bl	8007888 <rint>
 8006b90:	4620      	mov	r0, r4
 8006b92:	ec53 2b10 	vmov	r2, r3, d0
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 ff92 	bl	8000ac0 <__aeabi_dcmpeq>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d1d7      	bne.n	8006b50 <pow+0x224>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	4b19      	ldr	r3, [pc, #100]	; (8006c08 <pow+0x2dc>)
 8006ba4:	e7d2      	b.n	8006b4c <pow+0x220>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	ec51 0b18 	vmov	r0, r1, d8
 8006bae:	f7f9 ff87 	bl	8000ac0 <__aeabi_dcmpeq>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f43f af30 	beq.w	8006a18 <pow+0xec>
 8006bb8:	ec47 6b10 	vmov	d0, r6, r7
 8006bbc:	f000 fe51 	bl	8007862 <finite>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f43f af29 	beq.w	8006a18 <pow+0xec>
 8006bc6:	ec45 4b10 	vmov	d0, r4, r5
 8006bca:	f000 fe4a 	bl	8007862 <finite>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f43f af22 	beq.w	8006a18 <pow+0xec>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	9302      	str	r3, [sp, #8]
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <pow+0x2d4>)
 8006bda:	9303      	str	r3, [sp, #12]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	930a      	str	r3, [sp, #40]	; 0x28
 8006be0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006be4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006be8:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006bec:	e7b0      	b.n	8006b50 <pow+0x224>
 8006bee:	a802      	add	r0, sp, #8
 8006bf0:	f000 fe3f 	bl	8007872 <matherr>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f47f af07 	bne.w	8006a08 <pow+0xdc>
 8006bfa:	e7ad      	b.n	8006b58 <pow+0x22c>
 8006bfc:	20000200 	.word	0x20000200
 8006c00:	08007cc3 	.word	0x08007cc3
 8006c04:	3ff00000 	.word	0x3ff00000
 8006c08:	fff00000 	.word	0xfff00000
 8006c0c:	47efffff 	.word	0x47efffff
 8006c10:	3fe00000 	.word	0x3fe00000
 8006c14:	c7efffff 	.word	0xc7efffff
 8006c18:	7ff00000 	.word	0x7ff00000

08006c1c <sqrt>:
 8006c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c20:	ed2d 8b02 	vpush	{d8}
 8006c24:	b08b      	sub	sp, #44	; 0x2c
 8006c26:	ec55 4b10 	vmov	r4, r5, d0
 8006c2a:	f000 fd63 	bl	80076f4 <__ieee754_sqrt>
 8006c2e:	4b26      	ldr	r3, [pc, #152]	; (8006cc8 <sqrt+0xac>)
 8006c30:	eeb0 8a40 	vmov.f32	s16, s0
 8006c34:	eef0 8a60 	vmov.f32	s17, s1
 8006c38:	f993 6000 	ldrsb.w	r6, [r3]
 8006c3c:	1c73      	adds	r3, r6, #1
 8006c3e:	d02a      	beq.n	8006c96 <sqrt+0x7a>
 8006c40:	4622      	mov	r2, r4
 8006c42:	462b      	mov	r3, r5
 8006c44:	4620      	mov	r0, r4
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7f9 ff6c 	bl	8000b24 <__aeabi_dcmpun>
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	bb10      	cbnz	r0, 8006c96 <sqrt+0x7a>
 8006c50:	f04f 0800 	mov.w	r8, #0
 8006c54:	f04f 0900 	mov.w	r9, #0
 8006c58:	4642      	mov	r2, r8
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 ff38 	bl	8000ad4 <__aeabi_dcmplt>
 8006c64:	b1b8      	cbz	r0, 8006c96 <sqrt+0x7a>
 8006c66:	2301      	movs	r3, #1
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <sqrt+0xb0>)
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	9708      	str	r7, [sp, #32]
 8006c70:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006c74:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c78:	b9b6      	cbnz	r6, 8006ca8 <sqrt+0x8c>
 8006c7a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006c7e:	4668      	mov	r0, sp
 8006c80:	f000 fdf7 	bl	8007872 <matherr>
 8006c84:	b1d0      	cbz	r0, 8006cbc <sqrt+0xa0>
 8006c86:	9b08      	ldr	r3, [sp, #32]
 8006c88:	b11b      	cbz	r3, 8006c92 <sqrt+0x76>
 8006c8a:	f000 ff0d 	bl	8007aa8 <__errno>
 8006c8e:	9b08      	ldr	r3, [sp, #32]
 8006c90:	6003      	str	r3, [r0, #0]
 8006c92:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006c96:	eeb0 0a48 	vmov.f32	s0, s16
 8006c9a:	eef0 0a68 	vmov.f32	s1, s17
 8006c9e:	b00b      	add	sp, #44	; 0x2c
 8006ca0:	ecbd 8b02 	vpop	{d8}
 8006ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	4640      	mov	r0, r8
 8006cae:	4649      	mov	r1, r9
 8006cb0:	f7f9 fdc8 	bl	8000844 <__aeabi_ddiv>
 8006cb4:	2e02      	cmp	r6, #2
 8006cb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cba:	d1e0      	bne.n	8006c7e <sqrt+0x62>
 8006cbc:	f000 fef4 	bl	8007aa8 <__errno>
 8006cc0:	2321      	movs	r3, #33	; 0x21
 8006cc2:	6003      	str	r3, [r0, #0]
 8006cc4:	e7df      	b.n	8006c86 <sqrt+0x6a>
 8006cc6:	bf00      	nop
 8006cc8:	20000200 	.word	0x20000200
 8006ccc:	08007cc7 	.word	0x08007cc7

08006cd0 <__ieee754_pow>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	b091      	sub	sp, #68	; 0x44
 8006cd6:	ed8d 1b00 	vstr	d1, [sp]
 8006cda:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8006cde:	ec57 6b10 	vmov	r6, r7, d0
 8006ce2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006ce6:	ea58 0302 	orrs.w	r3, r8, r2
 8006cea:	ee10 aa10 	vmov	sl, s0
 8006cee:	463d      	mov	r5, r7
 8006cf0:	f000 84bd 	beq.w	800766e <__ieee754_pow+0x99e>
 8006cf4:	4b78      	ldr	r3, [pc, #480]	; (8006ed8 <__ieee754_pow+0x208>)
 8006cf6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006cfa:	429c      	cmp	r4, r3
 8006cfc:	dc09      	bgt.n	8006d12 <__ieee754_pow+0x42>
 8006cfe:	d103      	bne.n	8006d08 <__ieee754_pow+0x38>
 8006d00:	b93e      	cbnz	r6, 8006d12 <__ieee754_pow+0x42>
 8006d02:	45a0      	cmp	r8, r4
 8006d04:	dc0d      	bgt.n	8006d22 <__ieee754_pow+0x52>
 8006d06:	e001      	b.n	8006d0c <__ieee754_pow+0x3c>
 8006d08:	4598      	cmp	r8, r3
 8006d0a:	dc02      	bgt.n	8006d12 <__ieee754_pow+0x42>
 8006d0c:	4598      	cmp	r8, r3
 8006d0e:	d10e      	bne.n	8006d2e <__ieee754_pow+0x5e>
 8006d10:	b16a      	cbz	r2, 8006d2e <__ieee754_pow+0x5e>
 8006d12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d1a:	ea54 030a 	orrs.w	r3, r4, sl
 8006d1e:	f000 84a6 	beq.w	800766e <__ieee754_pow+0x99e>
 8006d22:	486e      	ldr	r0, [pc, #440]	; (8006edc <__ieee754_pow+0x20c>)
 8006d24:	b011      	add	sp, #68	; 0x44
 8006d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	f000 bda5 	b.w	8007878 <nan>
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	da53      	bge.n	8006dda <__ieee754_pow+0x10a>
 8006d32:	4b6b      	ldr	r3, [pc, #428]	; (8006ee0 <__ieee754_pow+0x210>)
 8006d34:	4598      	cmp	r8, r3
 8006d36:	dc4d      	bgt.n	8006dd4 <__ieee754_pow+0x104>
 8006d38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006d3c:	4598      	cmp	r8, r3
 8006d3e:	dd4c      	ble.n	8006dda <__ieee754_pow+0x10a>
 8006d40:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d48:	2b14      	cmp	r3, #20
 8006d4a:	dd26      	ble.n	8006d9a <__ieee754_pow+0xca>
 8006d4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d50:	fa22 f103 	lsr.w	r1, r2, r3
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d13e      	bne.n	8006dda <__ieee754_pow+0x10a>
 8006d5c:	f001 0101 	and.w	r1, r1, #1
 8006d60:	f1c1 0b02 	rsb	fp, r1, #2
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	d15b      	bne.n	8006e20 <__ieee754_pow+0x150>
 8006d68:	4b5b      	ldr	r3, [pc, #364]	; (8006ed8 <__ieee754_pow+0x208>)
 8006d6a:	4598      	cmp	r8, r3
 8006d6c:	d124      	bne.n	8006db8 <__ieee754_pow+0xe8>
 8006d6e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d72:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d76:	ea53 030a 	orrs.w	r3, r3, sl
 8006d7a:	f000 8478 	beq.w	800766e <__ieee754_pow+0x99e>
 8006d7e:	4b59      	ldr	r3, [pc, #356]	; (8006ee4 <__ieee754_pow+0x214>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	dd2d      	ble.n	8006de0 <__ieee754_pow+0x110>
 8006d84:	f1b9 0f00 	cmp.w	r9, #0
 8006d88:	f280 8475 	bge.w	8007676 <__ieee754_pow+0x9a6>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	2100      	movs	r1, #0
 8006d90:	ec41 0b10 	vmov	d0, r0, r1
 8006d94:	b011      	add	sp, #68	; 0x44
 8006d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	d13e      	bne.n	8006e1c <__ieee754_pow+0x14c>
 8006d9e:	f1c3 0314 	rsb	r3, r3, #20
 8006da2:	fa48 f103 	asr.w	r1, r8, r3
 8006da6:	fa01 f303 	lsl.w	r3, r1, r3
 8006daa:	4598      	cmp	r8, r3
 8006dac:	f040 846b 	bne.w	8007686 <__ieee754_pow+0x9b6>
 8006db0:	f001 0101 	and.w	r1, r1, #1
 8006db4:	f1c1 0b02 	rsb	fp, r1, #2
 8006db8:	4b4b      	ldr	r3, [pc, #300]	; (8006ee8 <__ieee754_pow+0x218>)
 8006dba:	4598      	cmp	r8, r3
 8006dbc:	d118      	bne.n	8006df0 <__ieee754_pow+0x120>
 8006dbe:	f1b9 0f00 	cmp.w	r9, #0
 8006dc2:	f280 845c 	bge.w	800767e <__ieee754_pow+0x9ae>
 8006dc6:	4948      	ldr	r1, [pc, #288]	; (8006ee8 <__ieee754_pow+0x218>)
 8006dc8:	4632      	mov	r2, r6
 8006dca:	463b      	mov	r3, r7
 8006dcc:	2000      	movs	r0, #0
 8006dce:	f7f9 fd39 	bl	8000844 <__aeabi_ddiv>
 8006dd2:	e7dd      	b.n	8006d90 <__ieee754_pow+0xc0>
 8006dd4:	f04f 0b02 	mov.w	fp, #2
 8006dd8:	e7c4      	b.n	8006d64 <__ieee754_pow+0x94>
 8006dda:	f04f 0b00 	mov.w	fp, #0
 8006dde:	e7c1      	b.n	8006d64 <__ieee754_pow+0x94>
 8006de0:	f1b9 0f00 	cmp.w	r9, #0
 8006de4:	dad2      	bge.n	8006d8c <__ieee754_pow+0xbc>
 8006de6:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8006dea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006dee:	e7cf      	b.n	8006d90 <__ieee754_pow+0xc0>
 8006df0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006df4:	d106      	bne.n	8006e04 <__ieee754_pow+0x134>
 8006df6:	4632      	mov	r2, r6
 8006df8:	463b      	mov	r3, r7
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f7f9 fbf7 	bl	80005f0 <__aeabi_dmul>
 8006e02:	e7c5      	b.n	8006d90 <__ieee754_pow+0xc0>
 8006e04:	4b39      	ldr	r3, [pc, #228]	; (8006eec <__ieee754_pow+0x21c>)
 8006e06:	4599      	cmp	r9, r3
 8006e08:	d10a      	bne.n	8006e20 <__ieee754_pow+0x150>
 8006e0a:	2d00      	cmp	r5, #0
 8006e0c:	db08      	blt.n	8006e20 <__ieee754_pow+0x150>
 8006e0e:	ec47 6b10 	vmov	d0, r6, r7
 8006e12:	b011      	add	sp, #68	; 0x44
 8006e14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e18:	f000 bc6c 	b.w	80076f4 <__ieee754_sqrt>
 8006e1c:	f04f 0b00 	mov.w	fp, #0
 8006e20:	ec47 6b10 	vmov	d0, r6, r7
 8006e24:	f000 fd16 	bl	8007854 <fabs>
 8006e28:	ec51 0b10 	vmov	r0, r1, d0
 8006e2c:	f1ba 0f00 	cmp.w	sl, #0
 8006e30:	d127      	bne.n	8006e82 <__ieee754_pow+0x1b2>
 8006e32:	b124      	cbz	r4, 8006e3e <__ieee754_pow+0x16e>
 8006e34:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <__ieee754_pow+0x218>)
 8006e36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d121      	bne.n	8006e82 <__ieee754_pow+0x1b2>
 8006e3e:	f1b9 0f00 	cmp.w	r9, #0
 8006e42:	da05      	bge.n	8006e50 <__ieee754_pow+0x180>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	2000      	movs	r0, #0
 8006e4a:	4927      	ldr	r1, [pc, #156]	; (8006ee8 <__ieee754_pow+0x218>)
 8006e4c:	f7f9 fcfa 	bl	8000844 <__aeabi_ddiv>
 8006e50:	2d00      	cmp	r5, #0
 8006e52:	da9d      	bge.n	8006d90 <__ieee754_pow+0xc0>
 8006e54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e5c:	ea54 030b 	orrs.w	r3, r4, fp
 8006e60:	d108      	bne.n	8006e74 <__ieee754_pow+0x1a4>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4610      	mov	r0, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f7f9 fa0d 	bl	8000288 <__aeabi_dsub>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	e7ac      	b.n	8006dce <__ieee754_pow+0xfe>
 8006e74:	f1bb 0f01 	cmp.w	fp, #1
 8006e78:	d18a      	bne.n	8006d90 <__ieee754_pow+0xc0>
 8006e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e7e:	4619      	mov	r1, r3
 8006e80:	e786      	b.n	8006d90 <__ieee754_pow+0xc0>
 8006e82:	0fed      	lsrs	r5, r5, #31
 8006e84:	1e6b      	subs	r3, r5, #1
 8006e86:	930d      	str	r3, [sp, #52]	; 0x34
 8006e88:	ea5b 0303 	orrs.w	r3, fp, r3
 8006e8c:	d102      	bne.n	8006e94 <__ieee754_pow+0x1c4>
 8006e8e:	4632      	mov	r2, r6
 8006e90:	463b      	mov	r3, r7
 8006e92:	e7e8      	b.n	8006e66 <__ieee754_pow+0x196>
 8006e94:	4b16      	ldr	r3, [pc, #88]	; (8006ef0 <__ieee754_pow+0x220>)
 8006e96:	4598      	cmp	r8, r3
 8006e98:	f340 80fe 	ble.w	8007098 <__ieee754_pow+0x3c8>
 8006e9c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006ea0:	4598      	cmp	r8, r3
 8006ea2:	dd0a      	ble.n	8006eba <__ieee754_pow+0x1ea>
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <__ieee754_pow+0x214>)
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	dc0d      	bgt.n	8006ec6 <__ieee754_pow+0x1f6>
 8006eaa:	f1b9 0f00 	cmp.w	r9, #0
 8006eae:	f6bf af6d 	bge.w	8006d8c <__ieee754_pow+0xbc>
 8006eb2:	a307      	add	r3, pc, #28	; (adr r3, 8006ed0 <__ieee754_pow+0x200>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	e79f      	b.n	8006dfa <__ieee754_pow+0x12a>
 8006eba:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <__ieee754_pow+0x224>)
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	ddf4      	ble.n	8006eaa <__ieee754_pow+0x1da>
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <__ieee754_pow+0x218>)
 8006ec2:	429c      	cmp	r4, r3
 8006ec4:	dd18      	ble.n	8006ef8 <__ieee754_pow+0x228>
 8006ec6:	f1b9 0f00 	cmp.w	r9, #0
 8006eca:	dcf2      	bgt.n	8006eb2 <__ieee754_pow+0x1e2>
 8006ecc:	e75e      	b.n	8006d8c <__ieee754_pow+0xbc>
 8006ece:	bf00      	nop
 8006ed0:	8800759c 	.word	0x8800759c
 8006ed4:	7e37e43c 	.word	0x7e37e43c
 8006ed8:	7ff00000 	.word	0x7ff00000
 8006edc:	08007b94 	.word	0x08007b94
 8006ee0:	433fffff 	.word	0x433fffff
 8006ee4:	3fefffff 	.word	0x3fefffff
 8006ee8:	3ff00000 	.word	0x3ff00000
 8006eec:	3fe00000 	.word	0x3fe00000
 8006ef0:	41e00000 	.word	0x41e00000
 8006ef4:	3feffffe 	.word	0x3feffffe
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4b63      	ldr	r3, [pc, #396]	; (8007088 <__ieee754_pow+0x3b8>)
 8006efc:	f7f9 f9c4 	bl	8000288 <__aeabi_dsub>
 8006f00:	a355      	add	r3, pc, #340	; (adr r3, 8007058 <__ieee754_pow+0x388>)
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	4604      	mov	r4, r0
 8006f08:	460d      	mov	r5, r1
 8006f0a:	f7f9 fb71 	bl	80005f0 <__aeabi_dmul>
 8006f0e:	a354      	add	r3, pc, #336	; (adr r3, 8007060 <__ieee754_pow+0x390>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	4606      	mov	r6, r0
 8006f16:	460f      	mov	r7, r1
 8006f18:	4620      	mov	r0, r4
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	f7f9 fb68 	bl	80005f0 <__aeabi_dmul>
 8006f20:	2200      	movs	r2, #0
 8006f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f26:	4b59      	ldr	r3, [pc, #356]	; (800708c <__ieee754_pow+0x3bc>)
 8006f28:	4620      	mov	r0, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7f9 fb60 	bl	80005f0 <__aeabi_dmul>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	a14c      	add	r1, pc, #304	; (adr r1, 8007068 <__ieee754_pow+0x398>)
 8006f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f3a:	f7f9 f9a5 	bl	8000288 <__aeabi_dsub>
 8006f3e:	4622      	mov	r2, r4
 8006f40:	462b      	mov	r3, r5
 8006f42:	f7f9 fb55 	bl	80005f0 <__aeabi_dmul>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	4950      	ldr	r1, [pc, #320]	; (8007090 <__ieee754_pow+0x3c0>)
 8006f4e:	f7f9 f99b 	bl	8000288 <__aeabi_dsub>
 8006f52:	4622      	mov	r2, r4
 8006f54:	462b      	mov	r3, r5
 8006f56:	4680      	mov	r8, r0
 8006f58:	4689      	mov	r9, r1
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 fb47 	bl	80005f0 <__aeabi_dmul>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	f7f9 fb41 	bl	80005f0 <__aeabi_dmul>
 8006f6e:	a340      	add	r3, pc, #256	; (adr r3, 8007070 <__ieee754_pow+0x3a0>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f7f9 fb3c 	bl	80005f0 <__aeabi_dmul>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f80:	f7f9 f982 	bl	8000288 <__aeabi_dsub>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4604      	mov	r4, r0
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	4639      	mov	r1, r7
 8006f90:	f7f9 f97c 	bl	800028c <__adddf3>
 8006f94:	2000      	movs	r0, #0
 8006f96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f9a:	4632      	mov	r2, r6
 8006f9c:	463b      	mov	r3, r7
 8006f9e:	f7f9 f973 	bl	8000288 <__aeabi_dsub>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 f96d 	bl	8000288 <__aeabi_dsub>
 8006fae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fb0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	f040 81eb 	bne.w	8007394 <__ieee754_pow+0x6c4>
 8006fbe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007078 <__ieee754_pow+0x3a8>
 8006fc2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006fc6:	2400      	movs	r4, #0
 8006fc8:	4622      	mov	r2, r4
 8006fca:	462b      	mov	r3, r5
 8006fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fd4:	f7f9 f958 	bl	8000288 <__aeabi_dsub>
 8006fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fdc:	f7f9 fb08 	bl	80005f0 <__aeabi_dmul>
 8006fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	4689      	mov	r9, r1
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fb00 	bl	80005f0 <__aeabi_dmul>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	f7f9 f948 	bl	800028c <__adddf3>
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	462b      	mov	r3, r5
 8007000:	4680      	mov	r8, r0
 8007002:	4689      	mov	r9, r1
 8007004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007008:	f7f9 faf2 	bl	80005f0 <__aeabi_dmul>
 800700c:	460b      	mov	r3, r1
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	4602      	mov	r2, r0
 8007014:	4649      	mov	r1, r9
 8007016:	4640      	mov	r0, r8
 8007018:	e9cd 4500 	strd	r4, r5, [sp]
 800701c:	f7f9 f936 	bl	800028c <__adddf3>
 8007020:	4b1c      	ldr	r3, [pc, #112]	; (8007094 <__ieee754_pow+0x3c4>)
 8007022:	4299      	cmp	r1, r3
 8007024:	4606      	mov	r6, r0
 8007026:	460f      	mov	r7, r1
 8007028:	468b      	mov	fp, r1
 800702a:	f340 82f7 	ble.w	800761c <__ieee754_pow+0x94c>
 800702e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007032:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007036:	4303      	orrs	r3, r0
 8007038:	f000 81ea 	beq.w	8007410 <__ieee754_pow+0x740>
 800703c:	a310      	add	r3, pc, #64	; (adr r3, 8007080 <__ieee754_pow+0x3b0>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007046:	f7f9 fad3 	bl	80005f0 <__aeabi_dmul>
 800704a:	a30d      	add	r3, pc, #52	; (adr r3, 8007080 <__ieee754_pow+0x3b0>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	e6d5      	b.n	8006dfe <__ieee754_pow+0x12e>
 8007052:	bf00      	nop
 8007054:	f3af 8000 	nop.w
 8007058:	60000000 	.word	0x60000000
 800705c:	3ff71547 	.word	0x3ff71547
 8007060:	f85ddf44 	.word	0xf85ddf44
 8007064:	3e54ae0b 	.word	0x3e54ae0b
 8007068:	55555555 	.word	0x55555555
 800706c:	3fd55555 	.word	0x3fd55555
 8007070:	652b82fe 	.word	0x652b82fe
 8007074:	3ff71547 	.word	0x3ff71547
 8007078:	00000000 	.word	0x00000000
 800707c:	bff00000 	.word	0xbff00000
 8007080:	8800759c 	.word	0x8800759c
 8007084:	7e37e43c 	.word	0x7e37e43c
 8007088:	3ff00000 	.word	0x3ff00000
 800708c:	3fd00000 	.word	0x3fd00000
 8007090:	3fe00000 	.word	0x3fe00000
 8007094:	408fffff 	.word	0x408fffff
 8007098:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	da05      	bge.n	80070ae <__ieee754_pow+0x3de>
 80070a2:	4bd3      	ldr	r3, [pc, #844]	; (80073f0 <__ieee754_pow+0x720>)
 80070a4:	f7f9 faa4 	bl	80005f0 <__aeabi_dmul>
 80070a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80070ac:	460c      	mov	r4, r1
 80070ae:	1523      	asrs	r3, r4, #20
 80070b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070b4:	4413      	add	r3, r2
 80070b6:	9307      	str	r3, [sp, #28]
 80070b8:	4bce      	ldr	r3, [pc, #824]	; (80073f4 <__ieee754_pow+0x724>)
 80070ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80070c2:	429c      	cmp	r4, r3
 80070c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070c8:	dd08      	ble.n	80070dc <__ieee754_pow+0x40c>
 80070ca:	4bcb      	ldr	r3, [pc, #812]	; (80073f8 <__ieee754_pow+0x728>)
 80070cc:	429c      	cmp	r4, r3
 80070ce:	f340 815e 	ble.w	800738e <__ieee754_pow+0x6be>
 80070d2:	9b07      	ldr	r3, [sp, #28]
 80070d4:	3301      	adds	r3, #1
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80070dc:	f04f 0a00 	mov.w	sl, #0
 80070e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80070e4:	930c      	str	r3, [sp, #48]	; 0x30
 80070e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070e8:	4bc4      	ldr	r3, [pc, #784]	; (80073fc <__ieee754_pow+0x72c>)
 80070ea:	4413      	add	r3, r2
 80070ec:	ed93 7b00 	vldr	d7, [r3]
 80070f0:	4629      	mov	r1, r5
 80070f2:	ec53 2b17 	vmov	r2, r3, d7
 80070f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80070fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070fe:	f7f9 f8c3 	bl	8000288 <__aeabi_dsub>
 8007102:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007106:	4606      	mov	r6, r0
 8007108:	460f      	mov	r7, r1
 800710a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800710e:	f7f9 f8bd 	bl	800028c <__adddf3>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	2000      	movs	r0, #0
 8007118:	49b9      	ldr	r1, [pc, #740]	; (8007400 <__ieee754_pow+0x730>)
 800711a:	f7f9 fb93 	bl	8000844 <__aeabi_ddiv>
 800711e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 fa61 	bl	80005f0 <__aeabi_dmul>
 800712e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007132:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007136:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800713a:	2300      	movs	r3, #0
 800713c:	9302      	str	r3, [sp, #8]
 800713e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007142:	106d      	asrs	r5, r5, #1
 8007144:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007148:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800714c:	2200      	movs	r2, #0
 800714e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	4614      	mov	r4, r2
 8007158:	461d      	mov	r5, r3
 800715a:	f7f9 fa49 	bl	80005f0 <__aeabi_dmul>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4630      	mov	r0, r6
 8007164:	4639      	mov	r1, r7
 8007166:	f7f9 f88f 	bl	8000288 <__aeabi_dsub>
 800716a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800716e:	4606      	mov	r6, r0
 8007170:	460f      	mov	r7, r1
 8007172:	4620      	mov	r0, r4
 8007174:	4629      	mov	r1, r5
 8007176:	f7f9 f887 	bl	8000288 <__aeabi_dsub>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007182:	f7f9 f881 	bl	8000288 <__aeabi_dsub>
 8007186:	4642      	mov	r2, r8
 8007188:	464b      	mov	r3, r9
 800718a:	f7f9 fa31 	bl	80005f0 <__aeabi_dmul>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4630      	mov	r0, r6
 8007194:	4639      	mov	r1, r7
 8007196:	f7f9 f877 	bl	8000288 <__aeabi_dsub>
 800719a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800719e:	f7f9 fa27 	bl	80005f0 <__aeabi_dmul>
 80071a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071aa:	4610      	mov	r0, r2
 80071ac:	4619      	mov	r1, r3
 80071ae:	f7f9 fa1f 	bl	80005f0 <__aeabi_dmul>
 80071b2:	a37b      	add	r3, pc, #492	; (adr r3, 80073a0 <__ieee754_pow+0x6d0>)
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	4604      	mov	r4, r0
 80071ba:	460d      	mov	r5, r1
 80071bc:	f7f9 fa18 	bl	80005f0 <__aeabi_dmul>
 80071c0:	a379      	add	r3, pc, #484	; (adr r3, 80073a8 <__ieee754_pow+0x6d8>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f7f9 f861 	bl	800028c <__adddf3>
 80071ca:	4622      	mov	r2, r4
 80071cc:	462b      	mov	r3, r5
 80071ce:	f7f9 fa0f 	bl	80005f0 <__aeabi_dmul>
 80071d2:	a377      	add	r3, pc, #476	; (adr r3, 80073b0 <__ieee754_pow+0x6e0>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 f858 	bl	800028c <__adddf3>
 80071dc:	4622      	mov	r2, r4
 80071de:	462b      	mov	r3, r5
 80071e0:	f7f9 fa06 	bl	80005f0 <__aeabi_dmul>
 80071e4:	a374      	add	r3, pc, #464	; (adr r3, 80073b8 <__ieee754_pow+0x6e8>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f7f9 f84f 	bl	800028c <__adddf3>
 80071ee:	4622      	mov	r2, r4
 80071f0:	462b      	mov	r3, r5
 80071f2:	f7f9 f9fd 	bl	80005f0 <__aeabi_dmul>
 80071f6:	a372      	add	r3, pc, #456	; (adr r3, 80073c0 <__ieee754_pow+0x6f0>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f7f9 f846 	bl	800028c <__adddf3>
 8007200:	4622      	mov	r2, r4
 8007202:	462b      	mov	r3, r5
 8007204:	f7f9 f9f4 	bl	80005f0 <__aeabi_dmul>
 8007208:	a36f      	add	r3, pc, #444	; (adr r3, 80073c8 <__ieee754_pow+0x6f8>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f7f9 f83d 	bl	800028c <__adddf3>
 8007212:	4622      	mov	r2, r4
 8007214:	4606      	mov	r6, r0
 8007216:	460f      	mov	r7, r1
 8007218:	462b      	mov	r3, r5
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 f9e7 	bl	80005f0 <__aeabi_dmul>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4630      	mov	r0, r6
 8007228:	4639      	mov	r1, r7
 800722a:	f7f9 f9e1 	bl	80005f0 <__aeabi_dmul>
 800722e:	4642      	mov	r2, r8
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	464b      	mov	r3, r9
 8007236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800723a:	f7f9 f827 	bl	800028c <__adddf3>
 800723e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007242:	f7f9 f9d5 	bl	80005f0 <__aeabi_dmul>
 8007246:	4622      	mov	r2, r4
 8007248:	462b      	mov	r3, r5
 800724a:	f7f9 f81f 	bl	800028c <__adddf3>
 800724e:	4642      	mov	r2, r8
 8007250:	4606      	mov	r6, r0
 8007252:	460f      	mov	r7, r1
 8007254:	464b      	mov	r3, r9
 8007256:	4640      	mov	r0, r8
 8007258:	4649      	mov	r1, r9
 800725a:	f7f9 f9c9 	bl	80005f0 <__aeabi_dmul>
 800725e:	2200      	movs	r2, #0
 8007260:	4b68      	ldr	r3, [pc, #416]	; (8007404 <__ieee754_pow+0x734>)
 8007262:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007266:	f7f9 f811 	bl	800028c <__adddf3>
 800726a:	4632      	mov	r2, r6
 800726c:	463b      	mov	r3, r7
 800726e:	f7f9 f80d 	bl	800028c <__adddf3>
 8007272:	9802      	ldr	r0, [sp, #8]
 8007274:	460d      	mov	r5, r1
 8007276:	4604      	mov	r4, r0
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4640      	mov	r0, r8
 800727e:	4649      	mov	r1, r9
 8007280:	f7f9 f9b6 	bl	80005f0 <__aeabi_dmul>
 8007284:	2200      	movs	r2, #0
 8007286:	4680      	mov	r8, r0
 8007288:	4689      	mov	r9, r1
 800728a:	4b5e      	ldr	r3, [pc, #376]	; (8007404 <__ieee754_pow+0x734>)
 800728c:	4620      	mov	r0, r4
 800728e:	4629      	mov	r1, r5
 8007290:	f7f8 fffa 	bl	8000288 <__aeabi_dsub>
 8007294:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007298:	f7f8 fff6 	bl	8000288 <__aeabi_dsub>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f7f8 fff0 	bl	8000288 <__aeabi_dsub>
 80072a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ac:	f7f9 f9a0 	bl	80005f0 <__aeabi_dmul>
 80072b0:	4622      	mov	r2, r4
 80072b2:	4606      	mov	r6, r0
 80072b4:	460f      	mov	r7, r1
 80072b6:	462b      	mov	r3, r5
 80072b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072bc:	f7f9 f998 	bl	80005f0 <__aeabi_dmul>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4630      	mov	r0, r6
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f8 ffe0 	bl	800028c <__adddf3>
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4640      	mov	r0, r8
 80072d6:	4649      	mov	r1, r9
 80072d8:	f7f8 ffd8 	bl	800028c <__adddf3>
 80072dc:	9802      	ldr	r0, [sp, #8]
 80072de:	a33c      	add	r3, pc, #240	; (adr r3, 80073d0 <__ieee754_pow+0x700>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	4604      	mov	r4, r0
 80072e6:	460d      	mov	r5, r1
 80072e8:	f7f9 f982 	bl	80005f0 <__aeabi_dmul>
 80072ec:	4642      	mov	r2, r8
 80072ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072f2:	464b      	mov	r3, r9
 80072f4:	4620      	mov	r0, r4
 80072f6:	4629      	mov	r1, r5
 80072f8:	f7f8 ffc6 	bl	8000288 <__aeabi_dsub>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f8 ffc0 	bl	8000288 <__aeabi_dsub>
 8007308:	a333      	add	r3, pc, #204	; (adr r3, 80073d8 <__ieee754_pow+0x708>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f7f9 f96f 	bl	80005f0 <__aeabi_dmul>
 8007312:	a333      	add	r3, pc, #204	; (adr r3, 80073e0 <__ieee754_pow+0x710>)
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	4606      	mov	r6, r0
 800731a:	460f      	mov	r7, r1
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f7f9 f966 	bl	80005f0 <__aeabi_dmul>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	f7f8 ffae 	bl	800028c <__adddf3>
 8007330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007332:	4b35      	ldr	r3, [pc, #212]	; (8007408 <__ieee754_pow+0x738>)
 8007334:	4413      	add	r3, r2
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f7f8 ffa7 	bl	800028c <__adddf3>
 800733e:	4604      	mov	r4, r0
 8007340:	9807      	ldr	r0, [sp, #28]
 8007342:	460d      	mov	r5, r1
 8007344:	f7f9 f8ee 	bl	8000524 <__aeabi_i2d>
 8007348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800734a:	4b30      	ldr	r3, [pc, #192]	; (800740c <__ieee754_pow+0x73c>)
 800734c:	4413      	add	r3, r2
 800734e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007352:	4606      	mov	r6, r0
 8007354:	460f      	mov	r7, r1
 8007356:	4622      	mov	r2, r4
 8007358:	462b      	mov	r3, r5
 800735a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800735e:	f7f8 ff95 	bl	800028c <__adddf3>
 8007362:	4642      	mov	r2, r8
 8007364:	464b      	mov	r3, r9
 8007366:	f7f8 ff91 	bl	800028c <__adddf3>
 800736a:	4632      	mov	r2, r6
 800736c:	463b      	mov	r3, r7
 800736e:	f7f8 ff8d 	bl	800028c <__adddf3>
 8007372:	9802      	ldr	r0, [sp, #8]
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800737c:	f7f8 ff84 	bl	8000288 <__aeabi_dsub>
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	f7f8 ff80 	bl	8000288 <__aeabi_dsub>
 8007388:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800738c:	e607      	b.n	8006f9e <__ieee754_pow+0x2ce>
 800738e:	f04f 0a01 	mov.w	sl, #1
 8007392:	e6a5      	b.n	80070e0 <__ieee754_pow+0x410>
 8007394:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80073e8 <__ieee754_pow+0x718>
 8007398:	e613      	b.n	8006fc2 <__ieee754_pow+0x2f2>
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w
 80073a0:	4a454eef 	.word	0x4a454eef
 80073a4:	3fca7e28 	.word	0x3fca7e28
 80073a8:	93c9db65 	.word	0x93c9db65
 80073ac:	3fcd864a 	.word	0x3fcd864a
 80073b0:	a91d4101 	.word	0xa91d4101
 80073b4:	3fd17460 	.word	0x3fd17460
 80073b8:	518f264d 	.word	0x518f264d
 80073bc:	3fd55555 	.word	0x3fd55555
 80073c0:	db6fabff 	.word	0xdb6fabff
 80073c4:	3fdb6db6 	.word	0x3fdb6db6
 80073c8:	33333303 	.word	0x33333303
 80073cc:	3fe33333 	.word	0x3fe33333
 80073d0:	e0000000 	.word	0xe0000000
 80073d4:	3feec709 	.word	0x3feec709
 80073d8:	dc3a03fd 	.word	0xdc3a03fd
 80073dc:	3feec709 	.word	0x3feec709
 80073e0:	145b01f5 	.word	0x145b01f5
 80073e4:	be3e2fe0 	.word	0xbe3e2fe0
 80073e8:	00000000 	.word	0x00000000
 80073ec:	3ff00000 	.word	0x3ff00000
 80073f0:	43400000 	.word	0x43400000
 80073f4:	0003988e 	.word	0x0003988e
 80073f8:	000bb679 	.word	0x000bb679
 80073fc:	08007cd0 	.word	0x08007cd0
 8007400:	3ff00000 	.word	0x3ff00000
 8007404:	40080000 	.word	0x40080000
 8007408:	08007cf0 	.word	0x08007cf0
 800740c:	08007ce0 	.word	0x08007ce0
 8007410:	a3b6      	add	r3, pc, #728	; (adr r3, 80076ec <__ieee754_pow+0xa1c>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	f7f8 ff37 	bl	800028c <__adddf3>
 800741e:	4622      	mov	r2, r4
 8007420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007424:	462b      	mov	r3, r5
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f8 ff2d 	bl	8000288 <__aeabi_dsub>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007436:	f7f9 fb6b 	bl	8000b10 <__aeabi_dcmpgt>
 800743a:	2800      	cmp	r0, #0
 800743c:	f47f adfe 	bne.w	800703c <__ieee754_pow+0x36c>
 8007440:	4aa5      	ldr	r2, [pc, #660]	; (80076d8 <__ieee754_pow+0xa08>)
 8007442:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007446:	4293      	cmp	r3, r2
 8007448:	f340 810c 	ble.w	8007664 <__ieee754_pow+0x994>
 800744c:	151b      	asrs	r3, r3, #20
 800744e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007452:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007456:	fa4a f303 	asr.w	r3, sl, r3
 800745a:	445b      	add	r3, fp
 800745c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007460:	4e9e      	ldr	r6, [pc, #632]	; (80076dc <__ieee754_pow+0xa0c>)
 8007462:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007466:	4116      	asrs	r6, r2
 8007468:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800746c:	2000      	movs	r0, #0
 800746e:	ea23 0106 	bic.w	r1, r3, r6
 8007472:	f1c2 0214 	rsb	r2, r2, #20
 8007476:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800747a:	fa4a fa02 	asr.w	sl, sl, r2
 800747e:	f1bb 0f00 	cmp.w	fp, #0
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4620      	mov	r0, r4
 8007488:	4629      	mov	r1, r5
 800748a:	bfb8      	it	lt
 800748c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007490:	f7f8 fefa 	bl	8000288 <__aeabi_dsub>
 8007494:	e9cd 0100 	strd	r0, r1, [sp]
 8007498:	4642      	mov	r2, r8
 800749a:	464b      	mov	r3, r9
 800749c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a0:	f7f8 fef4 	bl	800028c <__adddf3>
 80074a4:	2000      	movs	r0, #0
 80074a6:	a37a      	add	r3, pc, #488	; (adr r3, 8007690 <__ieee754_pow+0x9c0>)
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	4604      	mov	r4, r0
 80074ae:	460d      	mov	r5, r1
 80074b0:	f7f9 f89e 	bl	80005f0 <__aeabi_dmul>
 80074b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b8:	4606      	mov	r6, r0
 80074ba:	460f      	mov	r7, r1
 80074bc:	4620      	mov	r0, r4
 80074be:	4629      	mov	r1, r5
 80074c0:	f7f8 fee2 	bl	8000288 <__aeabi_dsub>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4640      	mov	r0, r8
 80074ca:	4649      	mov	r1, r9
 80074cc:	f7f8 fedc 	bl	8000288 <__aeabi_dsub>
 80074d0:	a371      	add	r3, pc, #452	; (adr r3, 8007698 <__ieee754_pow+0x9c8>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	f7f9 f88b 	bl	80005f0 <__aeabi_dmul>
 80074da:	a371      	add	r3, pc, #452	; (adr r3, 80076a0 <__ieee754_pow+0x9d0>)
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	4680      	mov	r8, r0
 80074e2:	4689      	mov	r9, r1
 80074e4:	4620      	mov	r0, r4
 80074e6:	4629      	mov	r1, r5
 80074e8:	f7f9 f882 	bl	80005f0 <__aeabi_dmul>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4640      	mov	r0, r8
 80074f2:	4649      	mov	r1, r9
 80074f4:	f7f8 feca 	bl	800028c <__adddf3>
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4630      	mov	r0, r6
 8007502:	4639      	mov	r1, r7
 8007504:	f7f8 fec2 	bl	800028c <__adddf3>
 8007508:	4632      	mov	r2, r6
 800750a:	463b      	mov	r3, r7
 800750c:	4680      	mov	r8, r0
 800750e:	4689      	mov	r9, r1
 8007510:	f7f8 feba 	bl	8000288 <__aeabi_dsub>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4620      	mov	r0, r4
 800751a:	4629      	mov	r1, r5
 800751c:	f7f8 feb4 	bl	8000288 <__aeabi_dsub>
 8007520:	4642      	mov	r2, r8
 8007522:	4606      	mov	r6, r0
 8007524:	460f      	mov	r7, r1
 8007526:	464b      	mov	r3, r9
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f9 f860 	bl	80005f0 <__aeabi_dmul>
 8007530:	a35d      	add	r3, pc, #372	; (adr r3, 80076a8 <__ieee754_pow+0x9d8>)
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	4604      	mov	r4, r0
 8007538:	460d      	mov	r5, r1
 800753a:	f7f9 f859 	bl	80005f0 <__aeabi_dmul>
 800753e:	a35c      	add	r3, pc, #368	; (adr r3, 80076b0 <__ieee754_pow+0x9e0>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f7f8 fea0 	bl	8000288 <__aeabi_dsub>
 8007548:	4622      	mov	r2, r4
 800754a:	462b      	mov	r3, r5
 800754c:	f7f9 f850 	bl	80005f0 <__aeabi_dmul>
 8007550:	a359      	add	r3, pc, #356	; (adr r3, 80076b8 <__ieee754_pow+0x9e8>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f7f8 fe99 	bl	800028c <__adddf3>
 800755a:	4622      	mov	r2, r4
 800755c:	462b      	mov	r3, r5
 800755e:	f7f9 f847 	bl	80005f0 <__aeabi_dmul>
 8007562:	a357      	add	r3, pc, #348	; (adr r3, 80076c0 <__ieee754_pow+0x9f0>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f7f8 fe8e 	bl	8000288 <__aeabi_dsub>
 800756c:	4622      	mov	r2, r4
 800756e:	462b      	mov	r3, r5
 8007570:	f7f9 f83e 	bl	80005f0 <__aeabi_dmul>
 8007574:	a354      	add	r3, pc, #336	; (adr r3, 80076c8 <__ieee754_pow+0x9f8>)
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	f7f8 fe87 	bl	800028c <__adddf3>
 800757e:	4622      	mov	r2, r4
 8007580:	462b      	mov	r3, r5
 8007582:	f7f9 f835 	bl	80005f0 <__aeabi_dmul>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4640      	mov	r0, r8
 800758c:	4649      	mov	r1, r9
 800758e:	f7f8 fe7b 	bl	8000288 <__aeabi_dsub>
 8007592:	4604      	mov	r4, r0
 8007594:	460d      	mov	r5, r1
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	f7f9 f827 	bl	80005f0 <__aeabi_dmul>
 80075a2:	2200      	movs	r2, #0
 80075a4:	e9cd 0100 	strd	r0, r1, [sp]
 80075a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f8 fe6a 	bl	8000288 <__aeabi_dsub>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075bc:	f7f9 f942 	bl	8000844 <__aeabi_ddiv>
 80075c0:	4632      	mov	r2, r6
 80075c2:	4604      	mov	r4, r0
 80075c4:	460d      	mov	r5, r1
 80075c6:	463b      	mov	r3, r7
 80075c8:	4640      	mov	r0, r8
 80075ca:	4649      	mov	r1, r9
 80075cc:	f7f9 f810 	bl	80005f0 <__aeabi_dmul>
 80075d0:	4632      	mov	r2, r6
 80075d2:	463b      	mov	r3, r7
 80075d4:	f7f8 fe5a 	bl	800028c <__adddf3>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f8 fe52 	bl	8000288 <__aeabi_dsub>
 80075e4:	4642      	mov	r2, r8
 80075e6:	464b      	mov	r3, r9
 80075e8:	f7f8 fe4e 	bl	8000288 <__aeabi_dsub>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	2000      	movs	r0, #0
 80075f2:	493b      	ldr	r1, [pc, #236]	; (80076e0 <__ieee754_pow+0xa10>)
 80075f4:	f7f8 fe48 	bl	8000288 <__aeabi_dsub>
 80075f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80075fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	da31      	bge.n	800766a <__ieee754_pow+0x99a>
 8007606:	4650      	mov	r0, sl
 8007608:	ec43 2b10 	vmov	d0, r2, r3
 800760c:	f000 f9c4 	bl	8007998 <scalbn>
 8007610:	ec51 0b10 	vmov	r0, r1, d0
 8007614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007618:	f7ff bbf1 	b.w	8006dfe <__ieee754_pow+0x12e>
 800761c:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <__ieee754_pow+0xa14>)
 800761e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007622:	429e      	cmp	r6, r3
 8007624:	f77f af0c 	ble.w	8007440 <__ieee754_pow+0x770>
 8007628:	4b2f      	ldr	r3, [pc, #188]	; (80076e8 <__ieee754_pow+0xa18>)
 800762a:	440b      	add	r3, r1
 800762c:	4303      	orrs	r3, r0
 800762e:	d00b      	beq.n	8007648 <__ieee754_pow+0x978>
 8007630:	a327      	add	r3, pc, #156	; (adr r3, 80076d0 <__ieee754_pow+0xa00>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800763a:	f7f8 ffd9 	bl	80005f0 <__aeabi_dmul>
 800763e:	a324      	add	r3, pc, #144	; (adr r3, 80076d0 <__ieee754_pow+0xa00>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7ff bbdb 	b.w	8006dfe <__ieee754_pow+0x12e>
 8007648:	4622      	mov	r2, r4
 800764a:	462b      	mov	r3, r5
 800764c:	f7f8 fe1c 	bl	8000288 <__aeabi_dsub>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4640      	mov	r0, r8
 8007656:	4649      	mov	r1, r9
 8007658:	f7f9 fa46 	bl	8000ae8 <__aeabi_dcmple>
 800765c:	2800      	cmp	r0, #0
 800765e:	f43f aeef 	beq.w	8007440 <__ieee754_pow+0x770>
 8007662:	e7e5      	b.n	8007630 <__ieee754_pow+0x960>
 8007664:	f04f 0a00 	mov.w	sl, #0
 8007668:	e716      	b.n	8007498 <__ieee754_pow+0x7c8>
 800766a:	4621      	mov	r1, r4
 800766c:	e7d2      	b.n	8007614 <__ieee754_pow+0x944>
 800766e:	2000      	movs	r0, #0
 8007670:	491b      	ldr	r1, [pc, #108]	; (80076e0 <__ieee754_pow+0xa10>)
 8007672:	f7ff bb8d 	b.w	8006d90 <__ieee754_pow+0xc0>
 8007676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800767a:	f7ff bb89 	b.w	8006d90 <__ieee754_pow+0xc0>
 800767e:	4630      	mov	r0, r6
 8007680:	4639      	mov	r1, r7
 8007682:	f7ff bb85 	b.w	8006d90 <__ieee754_pow+0xc0>
 8007686:	4693      	mov	fp, r2
 8007688:	f7ff bb96 	b.w	8006db8 <__ieee754_pow+0xe8>
 800768c:	f3af 8000 	nop.w
 8007690:	00000000 	.word	0x00000000
 8007694:	3fe62e43 	.word	0x3fe62e43
 8007698:	fefa39ef 	.word	0xfefa39ef
 800769c:	3fe62e42 	.word	0x3fe62e42
 80076a0:	0ca86c39 	.word	0x0ca86c39
 80076a4:	be205c61 	.word	0xbe205c61
 80076a8:	72bea4d0 	.word	0x72bea4d0
 80076ac:	3e663769 	.word	0x3e663769
 80076b0:	c5d26bf1 	.word	0xc5d26bf1
 80076b4:	3ebbbd41 	.word	0x3ebbbd41
 80076b8:	af25de2c 	.word	0xaf25de2c
 80076bc:	3f11566a 	.word	0x3f11566a
 80076c0:	16bebd93 	.word	0x16bebd93
 80076c4:	3f66c16c 	.word	0x3f66c16c
 80076c8:	5555553e 	.word	0x5555553e
 80076cc:	3fc55555 	.word	0x3fc55555
 80076d0:	c2f8f359 	.word	0xc2f8f359
 80076d4:	01a56e1f 	.word	0x01a56e1f
 80076d8:	3fe00000 	.word	0x3fe00000
 80076dc:	000fffff 	.word	0x000fffff
 80076e0:	3ff00000 	.word	0x3ff00000
 80076e4:	4090cbff 	.word	0x4090cbff
 80076e8:	3f6f3400 	.word	0x3f6f3400
 80076ec:	652b82fe 	.word	0x652b82fe
 80076f0:	3c971547 	.word	0x3c971547

080076f4 <__ieee754_sqrt>:
 80076f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f8:	ec55 4b10 	vmov	r4, r5, d0
 80076fc:	4e54      	ldr	r6, [pc, #336]	; (8007850 <__ieee754_sqrt+0x15c>)
 80076fe:	43ae      	bics	r6, r5
 8007700:	ee10 0a10 	vmov	r0, s0
 8007704:	462b      	mov	r3, r5
 8007706:	462a      	mov	r2, r5
 8007708:	4621      	mov	r1, r4
 800770a:	d113      	bne.n	8007734 <__ieee754_sqrt+0x40>
 800770c:	ee10 2a10 	vmov	r2, s0
 8007710:	462b      	mov	r3, r5
 8007712:	ee10 0a10 	vmov	r0, s0
 8007716:	4629      	mov	r1, r5
 8007718:	f7f8 ff6a 	bl	80005f0 <__aeabi_dmul>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4620      	mov	r0, r4
 8007722:	4629      	mov	r1, r5
 8007724:	f7f8 fdb2 	bl	800028c <__adddf3>
 8007728:	4604      	mov	r4, r0
 800772a:	460d      	mov	r5, r1
 800772c:	ec45 4b10 	vmov	d0, r4, r5
 8007730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007734:	2d00      	cmp	r5, #0
 8007736:	dc10      	bgt.n	800775a <__ieee754_sqrt+0x66>
 8007738:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800773c:	4330      	orrs	r0, r6
 800773e:	d0f5      	beq.n	800772c <__ieee754_sqrt+0x38>
 8007740:	b15d      	cbz	r5, 800775a <__ieee754_sqrt+0x66>
 8007742:	ee10 2a10 	vmov	r2, s0
 8007746:	462b      	mov	r3, r5
 8007748:	4620      	mov	r0, r4
 800774a:	4629      	mov	r1, r5
 800774c:	f7f8 fd9c 	bl	8000288 <__aeabi_dsub>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	f7f9 f876 	bl	8000844 <__aeabi_ddiv>
 8007758:	e7e6      	b.n	8007728 <__ieee754_sqrt+0x34>
 800775a:	151b      	asrs	r3, r3, #20
 800775c:	d10c      	bne.n	8007778 <__ieee754_sqrt+0x84>
 800775e:	2a00      	cmp	r2, #0
 8007760:	d06d      	beq.n	800783e <__ieee754_sqrt+0x14a>
 8007762:	2000      	movs	r0, #0
 8007764:	02d6      	lsls	r6, r2, #11
 8007766:	d56e      	bpl.n	8007846 <__ieee754_sqrt+0x152>
 8007768:	1e44      	subs	r4, r0, #1
 800776a:	1b1b      	subs	r3, r3, r4
 800776c:	f1c0 0420 	rsb	r4, r0, #32
 8007770:	fa21 f404 	lsr.w	r4, r1, r4
 8007774:	4322      	orrs	r2, r4
 8007776:	4081      	lsls	r1, r0
 8007778:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800777c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007780:	07dd      	lsls	r5, r3, #31
 8007782:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007786:	bf42      	ittt	mi
 8007788:	0052      	lslmi	r2, r2, #1
 800778a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800778e:	0049      	lslmi	r1, r1, #1
 8007790:	1058      	asrs	r0, r3, #1
 8007792:	2500      	movs	r5, #0
 8007794:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8007798:	441a      	add	r2, r3
 800779a:	0049      	lsls	r1, r1, #1
 800779c:	2316      	movs	r3, #22
 800779e:	462c      	mov	r4, r5
 80077a0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80077a4:	19a7      	adds	r7, r4, r6
 80077a6:	4297      	cmp	r7, r2
 80077a8:	bfde      	ittt	le
 80077aa:	1bd2      	suble	r2, r2, r7
 80077ac:	19bc      	addle	r4, r7, r6
 80077ae:	19ad      	addle	r5, r5, r6
 80077b0:	0052      	lsls	r2, r2, #1
 80077b2:	3b01      	subs	r3, #1
 80077b4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80077b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077c0:	d1f0      	bne.n	80077a4 <__ieee754_sqrt+0xb0>
 80077c2:	f04f 0e20 	mov.w	lr, #32
 80077c6:	469c      	mov	ip, r3
 80077c8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80077cc:	42a2      	cmp	r2, r4
 80077ce:	eb06 070c 	add.w	r7, r6, ip
 80077d2:	dc02      	bgt.n	80077da <__ieee754_sqrt+0xe6>
 80077d4:	d112      	bne.n	80077fc <__ieee754_sqrt+0x108>
 80077d6:	428f      	cmp	r7, r1
 80077d8:	d810      	bhi.n	80077fc <__ieee754_sqrt+0x108>
 80077da:	2f00      	cmp	r7, #0
 80077dc:	eb07 0c06 	add.w	ip, r7, r6
 80077e0:	da34      	bge.n	800784c <__ieee754_sqrt+0x158>
 80077e2:	f1bc 0f00 	cmp.w	ip, #0
 80077e6:	db31      	blt.n	800784c <__ieee754_sqrt+0x158>
 80077e8:	f104 0801 	add.w	r8, r4, #1
 80077ec:	1b12      	subs	r2, r2, r4
 80077ee:	428f      	cmp	r7, r1
 80077f0:	bf88      	it	hi
 80077f2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80077f6:	1bc9      	subs	r1, r1, r7
 80077f8:	4433      	add	r3, r6
 80077fa:	4644      	mov	r4, r8
 80077fc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007800:	f1be 0e01 	subs.w	lr, lr, #1
 8007804:	443a      	add	r2, r7
 8007806:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800780a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800780e:	d1dd      	bne.n	80077cc <__ieee754_sqrt+0xd8>
 8007810:	430a      	orrs	r2, r1
 8007812:	d006      	beq.n	8007822 <__ieee754_sqrt+0x12e>
 8007814:	1c5c      	adds	r4, r3, #1
 8007816:	bf13      	iteet	ne
 8007818:	3301      	addne	r3, #1
 800781a:	3501      	addeq	r5, #1
 800781c:	4673      	moveq	r3, lr
 800781e:	f023 0301 	bicne.w	r3, r3, #1
 8007822:	106a      	asrs	r2, r5, #1
 8007824:	085b      	lsrs	r3, r3, #1
 8007826:	07e9      	lsls	r1, r5, #31
 8007828:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800782c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007830:	bf48      	it	mi
 8007832:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007836:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800783a:	461c      	mov	r4, r3
 800783c:	e776      	b.n	800772c <__ieee754_sqrt+0x38>
 800783e:	0aca      	lsrs	r2, r1, #11
 8007840:	3b15      	subs	r3, #21
 8007842:	0549      	lsls	r1, r1, #21
 8007844:	e78b      	b.n	800775e <__ieee754_sqrt+0x6a>
 8007846:	0052      	lsls	r2, r2, #1
 8007848:	3001      	adds	r0, #1
 800784a:	e78b      	b.n	8007764 <__ieee754_sqrt+0x70>
 800784c:	46a0      	mov	r8, r4
 800784e:	e7cd      	b.n	80077ec <__ieee754_sqrt+0xf8>
 8007850:	7ff00000 	.word	0x7ff00000

08007854 <fabs>:
 8007854:	ec53 2b10 	vmov	r2, r3, d0
 8007858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800785c:	ec43 2b10 	vmov	d0, r2, r3
 8007860:	4770      	bx	lr

08007862 <finite>:
 8007862:	ee10 3a90 	vmov	r3, s1
 8007866:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800786a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800786e:	0fc0      	lsrs	r0, r0, #31
 8007870:	4770      	bx	lr

08007872 <matherr>:
 8007872:	2000      	movs	r0, #0
 8007874:	4770      	bx	lr
	...

08007878 <nan>:
 8007878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007880 <nan+0x8>
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	00000000 	.word	0x00000000
 8007884:	7ff80000 	.word	0x7ff80000

08007888 <rint>:
 8007888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800788a:	ec51 0b10 	vmov	r0, r1, d0
 800788e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8007892:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8007896:	2e13      	cmp	r6, #19
 8007898:	ee10 7a10 	vmov	r7, s0
 800789c:	460b      	mov	r3, r1
 800789e:	4602      	mov	r2, r0
 80078a0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80078a4:	dc58      	bgt.n	8007958 <rint+0xd0>
 80078a6:	2e00      	cmp	r6, #0
 80078a8:	da2b      	bge.n	8007902 <rint+0x7a>
 80078aa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80078ae:	4302      	orrs	r2, r0
 80078b0:	d023      	beq.n	80078fa <rint+0x72>
 80078b2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80078b6:	4302      	orrs	r2, r0
 80078b8:	4251      	negs	r1, r2
 80078ba:	4311      	orrs	r1, r2
 80078bc:	0b09      	lsrs	r1, r1, #12
 80078be:	0c5b      	lsrs	r3, r3, #17
 80078c0:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80078c4:	045b      	lsls	r3, r3, #17
 80078c6:	ea41 0703 	orr.w	r7, r1, r3
 80078ca:	4b31      	ldr	r3, [pc, #196]	; (8007990 <rint+0x108>)
 80078cc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80078d0:	4639      	mov	r1, r7
 80078d2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80078d6:	ee10 0a10 	vmov	r0, s0
 80078da:	4632      	mov	r2, r6
 80078dc:	463b      	mov	r3, r7
 80078de:	f7f8 fcd5 	bl	800028c <__adddf3>
 80078e2:	e9cd 0100 	strd	r0, r1, [sp]
 80078e6:	463b      	mov	r3, r7
 80078e8:	4632      	mov	r2, r6
 80078ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078ee:	f7f8 fccb 	bl	8000288 <__aeabi_dsub>
 80078f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078f6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80078fa:	ec41 0b10 	vmov	d0, r0, r1
 80078fe:	b003      	add	sp, #12
 8007900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007902:	4c24      	ldr	r4, [pc, #144]	; (8007994 <rint+0x10c>)
 8007904:	4134      	asrs	r4, r6
 8007906:	ea01 0704 	and.w	r7, r1, r4
 800790a:	4307      	orrs	r7, r0
 800790c:	d0f5      	beq.n	80078fa <rint+0x72>
 800790e:	0861      	lsrs	r1, r4, #1
 8007910:	ea03 0001 	and.w	r0, r3, r1
 8007914:	4302      	orrs	r2, r0
 8007916:	d00b      	beq.n	8007930 <rint+0xa8>
 8007918:	ea23 0101 	bic.w	r1, r3, r1
 800791c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007920:	2e13      	cmp	r6, #19
 8007922:	fa43 f306 	asr.w	r3, r3, r6
 8007926:	bf0c      	ite	eq
 8007928:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800792c:	2200      	movne	r2, #0
 800792e:	430b      	orrs	r3, r1
 8007930:	4619      	mov	r1, r3
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <rint+0x108>)
 8007934:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007938:	e9d5 4500 	ldrd	r4, r5, [r5]
 800793c:	4610      	mov	r0, r2
 800793e:	462b      	mov	r3, r5
 8007940:	4622      	mov	r2, r4
 8007942:	f7f8 fca3 	bl	800028c <__adddf3>
 8007946:	e9cd 0100 	strd	r0, r1, [sp]
 800794a:	4622      	mov	r2, r4
 800794c:	462b      	mov	r3, r5
 800794e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007952:	f7f8 fc99 	bl	8000288 <__aeabi_dsub>
 8007956:	e7d0      	b.n	80078fa <rint+0x72>
 8007958:	2e33      	cmp	r6, #51	; 0x33
 800795a:	dd08      	ble.n	800796e <rint+0xe6>
 800795c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007960:	d1cb      	bne.n	80078fa <rint+0x72>
 8007962:	ee10 2a10 	vmov	r2, s0
 8007966:	460b      	mov	r3, r1
 8007968:	f7f8 fc90 	bl	800028c <__adddf3>
 800796c:	e7c5      	b.n	80078fa <rint+0x72>
 800796e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8007972:	f04f 34ff 	mov.w	r4, #4294967295
 8007976:	40f4      	lsrs	r4, r6
 8007978:	4220      	tst	r0, r4
 800797a:	d0be      	beq.n	80078fa <rint+0x72>
 800797c:	0861      	lsrs	r1, r4, #1
 800797e:	420f      	tst	r7, r1
 8007980:	bf1f      	itttt	ne
 8007982:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8007986:	ea27 0101 	bicne.w	r1, r7, r1
 800798a:	4132      	asrne	r2, r6
 800798c:	430a      	orrne	r2, r1
 800798e:	e7cf      	b.n	8007930 <rint+0xa8>
 8007990:	08007d00 	.word	0x08007d00
 8007994:	000fffff 	.word	0x000fffff

08007998 <scalbn>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	ec55 4b10 	vmov	r4, r5, d0
 800799e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80079a2:	4606      	mov	r6, r0
 80079a4:	462b      	mov	r3, r5
 80079a6:	b9b2      	cbnz	r2, 80079d6 <scalbn+0x3e>
 80079a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80079ac:	4323      	orrs	r3, r4
 80079ae:	d03c      	beq.n	8007a2a <scalbn+0x92>
 80079b0:	2200      	movs	r2, #0
 80079b2:	4b33      	ldr	r3, [pc, #204]	; (8007a80 <scalbn+0xe8>)
 80079b4:	4629      	mov	r1, r5
 80079b6:	ee10 0a10 	vmov	r0, s0
 80079ba:	f7f8 fe19 	bl	80005f0 <__aeabi_dmul>
 80079be:	4a31      	ldr	r2, [pc, #196]	; (8007a84 <scalbn+0xec>)
 80079c0:	4296      	cmp	r6, r2
 80079c2:	4604      	mov	r4, r0
 80079c4:	460d      	mov	r5, r1
 80079c6:	460b      	mov	r3, r1
 80079c8:	da13      	bge.n	80079f2 <scalbn+0x5a>
 80079ca:	a329      	add	r3, pc, #164	; (adr r3, 8007a70 <scalbn+0xd8>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f7f8 fe0e 	bl	80005f0 <__aeabi_dmul>
 80079d4:	e00a      	b.n	80079ec <scalbn+0x54>
 80079d6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80079da:	428a      	cmp	r2, r1
 80079dc:	d10c      	bne.n	80079f8 <scalbn+0x60>
 80079de:	ee10 2a10 	vmov	r2, s0
 80079e2:	462b      	mov	r3, r5
 80079e4:	4620      	mov	r0, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	f7f8 fc50 	bl	800028c <__adddf3>
 80079ec:	4604      	mov	r4, r0
 80079ee:	460d      	mov	r5, r1
 80079f0:	e01b      	b.n	8007a2a <scalbn+0x92>
 80079f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079f6:	3a36      	subs	r2, #54	; 0x36
 80079f8:	4432      	add	r2, r6
 80079fa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079fe:	428a      	cmp	r2, r1
 8007a00:	dd0b      	ble.n	8007a1a <scalbn+0x82>
 8007a02:	ec45 4b11 	vmov	d1, r4, r5
 8007a06:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007a78 <scalbn+0xe0>
 8007a0a:	f000 f83f 	bl	8007a8c <copysign>
 8007a0e:	a31a      	add	r3, pc, #104	; (adr r3, 8007a78 <scalbn+0xe0>)
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	ec51 0b10 	vmov	r0, r1, d0
 8007a18:	e7da      	b.n	80079d0 <scalbn+0x38>
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	dd08      	ble.n	8007a30 <scalbn+0x98>
 8007a1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a26:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a2a:	ec45 4b10 	vmov	d0, r4, r5
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a34:	da0d      	bge.n	8007a52 <scalbn+0xba>
 8007a36:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a3a:	429e      	cmp	r6, r3
 8007a3c:	ec45 4b11 	vmov	d1, r4, r5
 8007a40:	dce1      	bgt.n	8007a06 <scalbn+0x6e>
 8007a42:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8007a70 <scalbn+0xd8>
 8007a46:	f000 f821 	bl	8007a8c <copysign>
 8007a4a:	a309      	add	r3, pc, #36	; (adr r3, 8007a70 <scalbn+0xd8>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	e7e0      	b.n	8007a14 <scalbn+0x7c>
 8007a52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a56:	3236      	adds	r2, #54	; 0x36
 8007a58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	2200      	movs	r2, #0
 8007a66:	4b08      	ldr	r3, [pc, #32]	; (8007a88 <scalbn+0xf0>)
 8007a68:	e7b2      	b.n	80079d0 <scalbn+0x38>
 8007a6a:	bf00      	nop
 8007a6c:	f3af 8000 	nop.w
 8007a70:	c2f8f359 	.word	0xc2f8f359
 8007a74:	01a56e1f 	.word	0x01a56e1f
 8007a78:	8800759c 	.word	0x8800759c
 8007a7c:	7e37e43c 	.word	0x7e37e43c
 8007a80:	43500000 	.word	0x43500000
 8007a84:	ffff3cb0 	.word	0xffff3cb0
 8007a88:	3c900000 	.word	0x3c900000

08007a8c <copysign>:
 8007a8c:	ec53 2b10 	vmov	r2, r3, d0
 8007a90:	ee11 0a90 	vmov	r0, s3
 8007a94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007a9c:	ea41 0300 	orr.w	r3, r1, r0
 8007aa0:	ec43 2b10 	vmov	d0, r2, r3
 8007aa4:	4770      	bx	lr
	...

08007aa8 <__errno>:
 8007aa8:	4b01      	ldr	r3, [pc, #4]	; (8007ab0 <__errno+0x8>)
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20000030 	.word	0x20000030

08007ab4 <_sbrk>:
 8007ab4:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <_sbrk+0x14>)
 8007ab6:	6819      	ldr	r1, [r3, #0]
 8007ab8:	4602      	mov	r2, r0
 8007aba:	b909      	cbnz	r1, 8007ac0 <_sbrk+0xc>
 8007abc:	4903      	ldr	r1, [pc, #12]	; (8007acc <_sbrk+0x18>)
 8007abe:	6019      	str	r1, [r3, #0]
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	4402      	add	r2, r0
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	4770      	bx	lr
 8007ac8:	200002ec 	.word	0x200002ec
 8007acc:	200005e4 	.word	0x200005e4

08007ad0 <_init>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr

08007adc <_fini>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	bf00      	nop
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr
