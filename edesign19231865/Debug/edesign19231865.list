
C:\Users\Henry\Desktop\4de Jaar\E-Design2018\edesign19231865\Debug\edesign19231865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  20000000  08006d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
  8 .bss          000003dc  20000208  20000208  00020208  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200005e4  200005e4  00020208  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 11 .debug_info   000374f7  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005689  00000000  00000000  0005772b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00013648  00000000  00000000  0005cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  00070400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024d0  00000000  00000000  000715d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002275f  00000000  00000000  00073aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000166c3  00000000  00000000  00096207  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3718  00000000  00000000  000ac8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0015ffe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000439c  00000000  00000000  00160060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b60 	.word	0x08006b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08006b60 	.word	0x08006b60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b99e 	b.w	8000ee4 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f82a 	bl	8000c08 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2ulz>:
 8000bc0:	b5d0      	push	{r4, r6, r7, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <__aeabi_d2ulz+0x40>)
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fd11 	bl	80005f0 <__aeabi_dmul>
 8000bce:	f7ff ffbf 	bl	8000b50 <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc96 	bl	8000504 <__aeabi_ui2d>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <__aeabi_d2ulz+0x44>)
 8000bdc:	f7ff fd08 	bl	80005f0 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff fb4e 	bl	8000288 <__aeabi_dsub>
 8000bec:	f7ff ffb0 	bl	8000b50 <__aeabi_d2uiz>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	ea42 0200 	orr.w	r2, r2, r0
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	bdd0      	pop	{r4, r6, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	9e08      	ldr	r6, [sp, #32]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d151      	bne.n	8000cbc <__udivmoddi4+0xb4>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d96d      	bls.n	8000cfa <__udivmoddi4+0xf2>
 8000c1e:	fab2 fe82 	clz	lr, r2
 8000c22:	f1be 0f00 	cmp.w	lr, #0
 8000c26:	d00b      	beq.n	8000c40 <__udivmoddi4+0x38>
 8000c28:	f1ce 0c20 	rsb	ip, lr, #32
 8000c2c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c34:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c38:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c3c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c40:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c44:	0c25      	lsrs	r5, r4, #16
 8000c46:	fbbc f8fa 	udiv	r8, ip, sl
 8000c4a:	fa1f f987 	uxth.w	r9, r7
 8000c4e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c52:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c56:	fb08 f309 	mul.w	r3, r8, r9
 8000c5a:	42ab      	cmp	r3, r5
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x6c>
 8000c5e:	19ed      	adds	r5, r5, r7
 8000c60:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c64:	f080 8123 	bcs.w	8000eae <__udivmoddi4+0x2a6>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f240 8120 	bls.w	8000eae <__udivmoddi4+0x2a6>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	443d      	add	r5, r7
 8000c74:	1aed      	subs	r5, r5, r3
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c7c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb00 f909 	mul.w	r9, r0, r9
 8000c88:	45a1      	cmp	r9, r4
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x98>
 8000c8c:	19e4      	adds	r4, r4, r7
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	f080 810a 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8107 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	443c      	add	r4, r7
 8000ca0:	eba4 0409 	sub.w	r4, r4, r9
 8000ca4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d061      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cae:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	6034      	str	r4, [r6, #0]
 8000cb6:	6073      	str	r3, [r6, #4]
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xc8>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d054      	beq.n	8000d6e <__udivmoddi4+0x166>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	f040 808e 	bne.w	8000df6 <__udivmoddi4+0x1ee>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xdc>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80fa 	bhi.w	8000ed8 <__udivmoddi4+0x2d0>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb65 0503 	sbc.w	r5, r5, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	46ac      	mov	ip, r5
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d03f      	beq.n	8000d72 <__udivmoddi4+0x16a>
 8000cf2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	b912      	cbnz	r2, 8000d02 <__udivmoddi4+0xfa>
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d02:	fab7 fe87 	clz	lr, r7
 8000d06:	f1be 0f00 	cmp.w	lr, #0
 8000d0a:	d134      	bne.n	8000d76 <__udivmoddi4+0x16e>
 8000d0c:	1beb      	subs	r3, r5, r7
 8000d0e:	0c3a      	lsrs	r2, r7, #16
 8000d10:	fa1f fc87 	uxth.w	ip, r7
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d1a:	0c25      	lsrs	r5, r4, #16
 8000d1c:	fb02 3318 	mls	r3, r2, r8, r3
 8000d20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d24:	fb0c f308 	mul.w	r3, ip, r8
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x134>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x132>
 8000d34:	42ab      	cmp	r3, r5
 8000d36:	f200 80d1 	bhi.w	8000edc <__udivmoddi4+0x2d4>
 8000d3a:	4680      	mov	r8, r0
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d44:	fb02 5510 	mls	r5, r2, r0, r5
 8000d48:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d4c:	fb0c fc00 	mul.w	ip, ip, r0
 8000d50:	45a4      	cmp	ip, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x15c>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x15a>
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	f200 80b8 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 040c 	sub.w	r4, r4, ip
 8000d68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6c:	e79d      	b.n	8000caa <__udivmoddi4+0xa2>
 8000d6e:	4631      	mov	r1, r6
 8000d70:	4630      	mov	r0, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1ce 0420 	rsb	r4, lr, #32
 8000d7a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d82:	fa20 f804 	lsr.w	r8, r0, r4
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa25 f404 	lsr.w	r4, r5, r4
 8000d8c:	ea48 0803 	orr.w	r8, r8, r3
 8000d90:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d94:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d98:	fb02 4411 	mls	r4, r2, r1, r4
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000da4:	fb01 f30c 	mul.w	r3, r1, ip
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1bc>
 8000db0:	19ed      	adds	r5, r5, r7
 8000db2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db6:	f080 808a 	bcs.w	8000ece <__udivmoddi4+0x2c6>
 8000dba:	42ab      	cmp	r3, r5
 8000dbc:	f240 8087 	bls.w	8000ece <__udivmoddi4+0x2c6>
 8000dc0:	3902      	subs	r1, #2
 8000dc2:	443d      	add	r5, r7
 8000dc4:	1aeb      	subs	r3, r5, r3
 8000dc6:	fa1f f588 	uxth.w	r5, r8
 8000dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dce:	fb02 3310 	mls	r3, r2, r0, r3
 8000dd2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dd6:	fb00 f30c 	mul.w	r3, r0, ip
 8000dda:	42ab      	cmp	r3, r5
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1e6>
 8000dde:	19ed      	adds	r5, r5, r7
 8000de0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de4:	d26f      	bcs.n	8000ec6 <__udivmoddi4+0x2be>
 8000de6:	42ab      	cmp	r3, r5
 8000de8:	d96d      	bls.n	8000ec6 <__udivmoddi4+0x2be>
 8000dea:	3802      	subs	r0, #2
 8000dec:	443d      	add	r5, r7
 8000dee:	1aeb      	subs	r3, r5, r3
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	e78f      	b.n	8000d16 <__udivmoddi4+0x10e>
 8000df6:	f1c1 0720 	rsb	r7, r1, #32
 8000dfa:	fa22 f807 	lsr.w	r8, r2, r7
 8000dfe:	408b      	lsls	r3, r1
 8000e00:	fa05 f401 	lsl.w	r4, r5, r1
 8000e04:	ea48 0303 	orr.w	r3, r8, r3
 8000e08:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e16:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e1a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e1e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e22:	fa1f f883 	uxth.w	r8, r3
 8000e26:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e2a:	fb09 f408 	mul.w	r4, r9, r8
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	fa02 f201 	lsl.w	r2, r2, r1
 8000e34:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x244>
 8000e3a:	18ed      	adds	r5, r5, r3
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d243      	bcs.n	8000eca <__udivmoddi4+0x2c2>
 8000e42:	42ac      	cmp	r4, r5
 8000e44:	d941      	bls.n	8000eca <__udivmoddi4+0x2c2>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	441d      	add	r5, r3
 8000e4c:	1b2d      	subs	r5, r5, r4
 8000e4e:	fa1f fe8e 	uxth.w	lr, lr
 8000e52:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e56:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e5a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45a0      	cmp	r8, r4
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x26e>
 8000e66:	18e4      	adds	r4, r4, r3
 8000e68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e6c:	d229      	bcs.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e6e:	45a0      	cmp	r8, r4
 8000e70:	d927      	bls.n	8000ec2 <__udivmoddi4+0x2ba>
 8000e72:	3802      	subs	r0, #2
 8000e74:	441c      	add	r4, r3
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba4 0408 	sub.w	r4, r4, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454c      	cmp	r4, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	464d      	mov	r5, r9
 8000e88:	d315      	bcc.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e8a:	d012      	beq.n	8000eb2 <__udivmoddi4+0x2aa>
 8000e8c:	b156      	cbz	r6, 8000ea4 <__udivmoddi4+0x29c>
 8000e8e:	ebba 030e 	subs.w	r3, sl, lr
 8000e92:	eb64 0405 	sbc.w	r4, r4, r5
 8000e96:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9a:	40cb      	lsrs	r3, r1
 8000e9c:	431f      	orrs	r7, r3
 8000e9e:	40cc      	lsrs	r4, r1
 8000ea0:	6037      	str	r7, [r6, #0]
 8000ea2:	6074      	str	r4, [r6, #4]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e6f8      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000eae:	4690      	mov	r8, r2
 8000eb0:	e6e0      	b.n	8000c74 <__udivmoddi4+0x6c>
 8000eb2:	45c2      	cmp	sl, r8
 8000eb4:	d2ea      	bcs.n	8000e8c <__udivmoddi4+0x284>
 8000eb6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eba:	eb69 0503 	sbc.w	r5, r9, r3
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7e4      	b.n	8000e8c <__udivmoddi4+0x284>
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	e7d7      	b.n	8000e76 <__udivmoddi4+0x26e>
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	e791      	b.n	8000dee <__udivmoddi4+0x1e6>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e7be      	b.n	8000e4c <__udivmoddi4+0x244>
 8000ece:	4601      	mov	r1, r0
 8000ed0:	e778      	b.n	8000dc4 <__udivmoddi4+0x1bc>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	e745      	b.n	8000d64 <__udivmoddi4+0x15c>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xe6>
 8000edc:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee0:	443d      	add	r5, r7
 8000ee2:	e72b      	b.n	8000d3c <__udivmoddi4+0x134>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_InitTick+0x24>)
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_InitTick+0x28>)
 8000eec:	681b      	ldr	r3, [r3, #0]
{
 8000eee:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
{
 8000ef4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000ef6:	0998      	lsrs	r0, r3, #6
 8000ef8:	f000 fc96 	bl	8001828 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000efc:	4621      	mov	r1, r4
 8000efe:	2200      	movs	r2, #0
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fc4e 	bl	80017a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	10624dd3 	.word	0x10624dd3

08000f14 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x20>)
{
 8000f16:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fc2d 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_InitTick>
  HAL_MspInit();
 8000f2c:	f004 f8de 	bl	80050ec <HAL_MspInit>
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	bd08      	pop	{r3, pc}
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_IncTick+0xc>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200002f0 	.word	0x200002f0

08000f48 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200002f0 	.word	0x200002f0

08000f54 <HAL_ADC_ConvHalfCpltCallback>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f5c:	6802      	ldr	r2, [r0, #0]
{
 8000f5e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f60:	6893      	ldr	r3, [r2, #8]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d002      	beq.n	8000f70 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f70:	6811      	ldr	r1, [r2, #0]
 8000f72:	07c9      	lsls	r1, r1, #31
 8000f74:	d5f9      	bpl.n	8000f6a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f76:	6891      	ldr	r1, [r2, #8]
 8000f78:	f001 010d 	and.w	r1, r1, #13
 8000f7c:	2901      	cmp	r1, #1
 8000f7e:	d009      	beq.n	8000f94 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000f82:	f042 0210 	orr.w	r2, r2, #16
 8000f86:	6442      	str	r2, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f88:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	6482      	str	r2, [r0, #72]	; 0x48
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8000f94:	6893      	ldr	r3, [r2, #8]
 8000f96:	2103      	movs	r1, #3
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6093      	str	r3, [r2, #8]
 8000f9e:	6011      	str	r1, [r2, #0]
 8000fa0:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000fa2:	f7ff ffd1 	bl	8000f48 <HAL_GetTick>
 8000fa6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	07db      	lsls	r3, r3, #31
 8000fae:	d5dc      	bpl.n	8000f6a <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fb0:	f7ff ffca 	bl	8000f48 <HAL_GetTick>
 8000fb4:	1b40      	subs	r0, r0, r5
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9f6      	bls.n	8000fa8 <ADC_Disable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e7ce      	b.n	8000f6c <ADC_Disable+0x10>
 8000fce:	bf00      	nop

08000fd0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd0:	6802      	ldr	r2, [r0, #0]
{
 8000fd2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd4:	6893      	ldr	r3, [r2, #8]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d00d      	beq.n	8000ffa <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fde:	6891      	ldr	r1, [r2, #8]
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <ADC_Enable+0x70>)
 8000fe2:	4219      	tst	r1, r3
 8000fe4:	d00e      	beq.n	8001004 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fee:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	07d9      	lsls	r1, r3, #31
 8000ffe:	d5ee      	bpl.n	8000fde <ADC_Enable+0xe>
  return HAL_OK;
 8001000:	2000      	movs	r0, #0
 8001002:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001004:	6893      	ldr	r3, [r2, #8]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6093      	str	r3, [r2, #8]
 800100c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();  
 800100e:	f7ff ff9b 	bl	8000f48 <HAL_GetTick>
 8001012:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001014:	e004      	b.n	8001020 <ADC_Enable+0x50>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001016:	f7ff ff97 	bl	8000f48 <HAL_GetTick>
 800101a:	1b40      	subs	r0, r0, r5
 800101c:	2802      	cmp	r0, #2
 800101e:	d804      	bhi.n	800102a <ADC_Enable+0x5a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	07db      	lsls	r3, r3, #31
 8001026:	d5f6      	bpl.n	8001016 <ADC_Enable+0x46>
 8001028:	e7ea      	b.n	8001000 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
 800103c:	bd38      	pop	{r3, r4, r5, pc}
 800103e:	bf00      	nop
 8001040:	8000003f 	.word	0x8000003f

08001044 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001044:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001046:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800104e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8001056:	f7ff bf7f 	b.w	8000f58 <HAL_ADC_ErrorCallback>
 800105a:	bf00      	nop

0800105c <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800105c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800105e:	f7ff bf79 	b.w	8000f54 <HAL_ADC_ConvHalfCpltCallback>
 8001062:	bf00      	nop

08001064 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001064:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001068:	f012 0f50 	tst.w	r2, #80	; 0x50
 800106c:	d118      	bne.n	80010a0 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800106e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001070:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001078:	68ca      	ldr	r2, [r1, #12]
 800107a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800107e:	d10c      	bne.n	800109a <ADC_DMAConvCplt+0x36>
 8001080:	69da      	ldr	r2, [r3, #28]
 8001082:	b952      	cbnz	r2, 800109a <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108a:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800108e:	04d2      	lsls	r2, r2, #19
 8001090:	d403      	bmi.n	800109a <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 800109a:	4618      	mov	r0, r3
 800109c:	f003 b828 	b.w	80040f0 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	4718      	bx	r3
 80010a6:	bf00      	nop

080010a8 <HAL_ADC_Init>:
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80010b0:	2800      	cmp	r0, #0
 80010b2:	f000 809d 	beq.w	80011f0 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010b8:	f013 0310 	ands.w	r3, r3, #16
 80010bc:	4604      	mov	r4, r0
 80010be:	d117      	bne.n	80010f0 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010c0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80010c2:	2d00      	cmp	r5, #0
 80010c4:	f000 8087 	beq.w	80011d6 <HAL_ADC_Init+0x12e>
 80010c8:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010ca:	6891      	ldr	r1, [r2, #8]
 80010cc:	00c9      	lsls	r1, r1, #3
 80010ce:	d576      	bpl.n	80011be <HAL_ADC_Init+0x116>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010d0:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010d2:	008f      	lsls	r7, r1, #2
 80010d4:	d473      	bmi.n	80011be <HAL_ADC_Init+0x116>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80010d8:	06ce      	lsls	r6, r1, #27
 80010da:	d400      	bmi.n	80010de <HAL_ADC_Init+0x36>
 80010dc:	b163      	cbz	r3, 80010f8 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 80010de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010e0:	f023 0312 	bic.w	r3, r3, #18
 80010e4:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 80010e8:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	6463      	str	r3, [r4, #68]	; 0x44
}
 80010ec:	b017      	add	sp, #92	; 0x5c
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010f2:	06db      	lsls	r3, r3, #27
 80010f4:	d4f3      	bmi.n	80010de <HAL_ADC_Init+0x36>
 80010f6:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010f8:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80010fa:	f010 0004 	ands.w	r0, r0, #4
 80010fe:	d1ee      	bne.n	80010de <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001102:	f421 7181 	bic.w	r1, r1, #258	; 0x102
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001106:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800110a:	f041 0102 	orr.w	r1, r1, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800110e:	bf08      	it	eq
 8001110:	4b65      	ldreq	r3, [pc, #404]	; (80012a8 <HAL_ADC_Init+0x200>)
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001114:	bf18      	it	ne
 8001116:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 800111a:	9301      	str	r3, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800111c:	6893      	ldr	r3, [r2, #8]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b01      	cmp	r3, #1
 8001124:	f000 809c 	beq.w	8001260 <HAL_ADC_Init+0x1b8>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001128:	9901      	ldr	r1, [sp, #4]
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800112a:	688b      	ldr	r3, [r1, #8]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d060      	beq.n	80011f6 <HAL_ADC_Init+0x14e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001134:	495d      	ldr	r1, [pc, #372]	; (80012ac <HAL_ADC_Init+0x204>)
 8001136:	6865      	ldr	r5, [r4, #4]
 8001138:	688b      	ldr	r3, [r1, #8]
 800113a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800113e:	432b      	orrs	r3, r5
 8001140:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001142:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8001144:	68e1      	ldr	r1, [r4, #12]
 8001146:	68a3      	ldr	r3, [r4, #8]
 8001148:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800114a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800114c:	2f01      	cmp	r7, #1
 800114e:	ea43 0301 	orr.w	r3, r3, r1
 8001152:	bf18      	it	ne
 8001154:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8001158:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800115c:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800115e:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001162:	f000 8086 	beq.w	8001272 <HAL_ADC_Init+0x1ca>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d002      	beq.n	8001172 <HAL_ADC_Init+0xca>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800116c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800116e:	430b      	orrs	r3, r1
 8001170:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001172:	6893      	ldr	r3, [r2, #8]
 8001174:	f013 0f0c 	tst.w	r3, #12
 8001178:	d10b      	bne.n	8001192 <HAL_ADC_Init+0xea>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800117a:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800117c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800117e:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001180:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001184:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001186:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800118a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800118e:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001190:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 8001192:	68d5      	ldr	r5, [r2, #12]
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <HAL_ADC_Init+0x208>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001196:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001198:	402b      	ands	r3, r5
 800119a:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800119c:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800119e:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011a0:	d06f      	beq.n	8001282 <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80011aa:	2000      	movs	r0, #0
 80011ac:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011b0:	f023 0303 	bic.w	r3, r3, #3
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6463      	str	r3, [r4, #68]	; 0x44
}
 80011ba:	b017      	add	sp, #92	; 0x5c
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80011be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c0:	f023 0312 	bic.w	r3, r3, #18
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011d4:	e783      	b.n	80010de <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 80011d6:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80011d8:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80011da:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80011dc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80011e0:	f003 ffc2 	bl	8005168 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	6893      	ldr	r3, [r2, #8]
 80011e8:	00de      	lsls	r6, r3, #3
 80011ea:	d508      	bpl.n	80011fe <HAL_ADC_Init+0x156>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	462b      	mov	r3, r5
 80011ee:	e76c      	b.n	80010ca <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
}
 80011f2:	b017      	add	sp, #92	; 0x5c
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011f6:	680b      	ldr	r3, [r1, #0]
 80011f8:	07d9      	lsls	r1, r3, #31
 80011fa:	d4a2      	bmi.n	8001142 <HAL_ADC_Init+0x9a>
 80011fc:	e79a      	b.n	8001134 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff feac 	bl	8000f5c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001204:	6c62      	ldr	r2, [r4, #68]	; 0x44
        tmp_hal_status = ADC_Disable(hadc);
 8001206:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001208:	06d0      	lsls	r0, r2, #27
 800120a:	f53f af5d 	bmi.w	80010c8 <HAL_ADC_Init+0x20>
 800120e:	2b00      	cmp	r3, #0
 8001210:	f47f af5a 	bne.w	80010c8 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8001214:	6c60      	ldr	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001216:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001218:	4926      	ldr	r1, [pc, #152]	; (80012b4 <HAL_ADC_Init+0x20c>)
 800121a:	4d27      	ldr	r5, [pc, #156]	; (80012b8 <HAL_ADC_Init+0x210>)
 800121c:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 800121e:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8001222:	f020 0002 	bic.w	r0, r0, #2
 8001226:	f040 0002 	orr.w	r0, r0, #2
 800122a:	6460      	str	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800122c:	6890      	ldr	r0, [r2, #8]
 800122e:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8001232:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001234:	fba5 0101 	umull	r0, r1, r5, r1
 8001238:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800123a:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800123c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001240:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001242:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001246:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001248:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 800124a:	9900      	ldr	r1, [sp, #0]
 800124c:	2900      	cmp	r1, #0
 800124e:	f43f af3c 	beq.w	80010ca <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8001252:	9900      	ldr	r1, [sp, #0]
 8001254:	3901      	subs	r1, #1
 8001256:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 8001258:	9900      	ldr	r1, [sp, #0]
 800125a:	2900      	cmp	r1, #0
 800125c:	d1f9      	bne.n	8001252 <HAL_ADC_Init+0x1aa>
 800125e:	e734      	b.n	80010ca <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	07dd      	lsls	r5, r3, #31
 8001264:	f53f af6d 	bmi.w	8001142 <HAL_ADC_Init+0x9a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001268:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800126a:	2900      	cmp	r1, #0
 800126c:	f43f af62 	beq.w	8001134 <HAL_ADC_Init+0x8c>
 8001270:	e75b      	b.n	800112a <HAL_ADC_Init+0x82>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001272:	b976      	cbnz	r6, 8001292 <HAL_ADC_Init+0x1ea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001276:	3b01      	subs	r3, #1
 8001278:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 800127c:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 8001280:	e771      	b.n	8001166 <HAL_ADC_Init+0xbe>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001282:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001284:	6a23      	ldr	r3, [r4, #32]
 8001286:	f021 010f 	bic.w	r1, r1, #15
 800128a:	3b01      	subs	r3, #1
 800128c:	430b      	orrs	r3, r1
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	e78b      	b.n	80011aa <HAL_ADC_Init+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 8001292:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001294:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80012a6:	e75e      	b.n	8001166 <HAL_ADC_Init+0xbe>
 80012a8:	50000100 	.word	0x50000100
 80012ac:	50000300 	.word	0x50000300
 80012b0:	fff0c007 	.word	0xfff0c007
 80012b4:	20000000 	.word	0x20000000
 80012b8:	431bde83 	.word	0x431bde83

080012bc <HAL_ADC_Start_DMA>:
{
 80012bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c0:	6803      	ldr	r3, [r0, #0]
 80012c2:	689c      	ldr	r4, [r3, #8]
 80012c4:	f014 0404 	ands.w	r4, r4, #4
 80012c8:	d003      	beq.n	80012d2 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 80012ca:	2402      	movs	r4, #2
}
 80012cc:	4620      	mov	r0, r4
 80012ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hadc);
 80012d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	4605      	mov	r5, r0
 80012da:	d0f6      	beq.n	80012ca <HAL_ADC_Start_DMA+0xe>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012dc:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80013c4 <HAL_ADC_Start_DMA+0x108>
 80012e0:	f8d9 6008 	ldr.w	r6, [r9, #8]
    __HAL_LOCK(hadc);
 80012e4:	2701      	movs	r7, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012e6:	f016 061f 	ands.w	r6, r6, #31
    __HAL_LOCK(hadc);
 80012ea:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012ee:	d005      	beq.n	80012fc <HAL_ADC_Start_DMA+0x40>
      __HAL_UNLOCK(hadc);
 80012f0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 80012f4:	463c      	mov	r4, r7
}
 80012f6:	4620      	mov	r0, r4
 80012f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012fc:	4690      	mov	r8, r2
 80012fe:	460f      	mov	r7, r1
      tmp_hal_status = ADC_Enable(hadc);
 8001300:	f7ff fe66 	bl	8000fd0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001304:	4604      	mov	r4, r0
 8001306:	2800      	cmp	r0, #0
 8001308:	d13d      	bne.n	8001386 <HAL_ADC_Start_DMA+0xca>
        ADC_STATE_CLR_SET(hadc->State,
 800130a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800130c:	6829      	ldr	r1, [r5, #0]
 800130e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001312:	f023 0301 	bic.w	r3, r3, #1
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	646b      	str	r3, [r5, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800131c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001320:	06d8      	lsls	r0, r3, #27
 8001322:	d033      	beq.n	800138c <HAL_ADC_Start_DMA+0xd0>
 8001324:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8001328:	d030      	beq.n	800138c <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800132a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <HAL_ADC_Start_DMA+0xf8>)
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800132e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001332:	4291      	cmp	r1, r2
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001334:	646b      	str	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001336:	d037      	beq.n	80013a8 <HAL_ADC_Start_DMA+0xec>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001338:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800133a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_ADC_Start_DMA+0xfc>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001342:	bf1c      	itt	ne
 8001344:	6cab      	ldrne	r3, [r5, #72]	; 0x48
 8001346:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800134a:	64ab      	str	r3, [r5, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 800134c:	2600      	movs	r6, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_ADC_Start_DMA+0x100>)
        __HAL_UNLOCK(hadc);
 8001350:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001354:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001356:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_ADC_Start_DMA+0x104>)
 800135a:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800135c:	231c      	movs	r3, #28
 800135e:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001360:	684b      	ldr	r3, [r1, #4]
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001368:	68ce      	ldr	r6, [r1, #12]
 800136a:	f046 0601 	orr.w	r6, r6, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800136e:	4643      	mov	r3, r8
 8001370:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001372:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001374:	3140      	adds	r1, #64	; 0x40
 8001376:	f000 fabb 	bl	80018f0 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800137a:	682a      	ldr	r2, [r5, #0]
 800137c:	6893      	ldr	r3, [r2, #8]
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6093      	str	r3, [r2, #8]
 8001384:	e7a2      	b.n	80012cc <HAL_ADC_Start_DMA+0x10>
        __HAL_UNLOCK(hadc);
 8001386:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
 800138a:	e79f      	b.n	80012cc <HAL_ADC_Start_DMA+0x10>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800138c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800138e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001392:	646b      	str	r3, [r5, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001394:	68cb      	ldr	r3, [r1, #12]
 8001396:	019a      	lsls	r2, r3, #6
 8001398:	d5ce      	bpl.n	8001338 <HAL_ADC_Start_DMA+0x7c>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800139a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800139c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a4:	646b      	str	r3, [r5, #68]	; 0x44
 80013a6:	e7c7      	b.n	8001338 <HAL_ADC_Start_DMA+0x7c>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	019b      	lsls	r3, r3, #6
 80013b0:	d5c2      	bpl.n	8001338 <HAL_ADC_Start_DMA+0x7c>
 80013b2:	e7f2      	b.n	800139a <HAL_ADC_Start_DMA+0xde>
 80013b4:	50000100 	.word	0x50000100
 80013b8:	08001065 	.word	0x08001065
 80013bc:	0800105d 	.word	0x0800105d
 80013c0:	08001045 	.word	0x08001045
 80013c4:	50000300 	.word	0x50000300

080013c8 <HAL_ADCEx_Calibration_Start>:
{
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80013ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d102      	bne.n	80013d8 <HAL_ADCEx_Calibration_Start+0x10>
 80013d2:	2502      	movs	r5, #2
}
 80013d4:	4628      	mov	r0, r5
 80013d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 80013d8:	2701      	movs	r7, #1
 80013da:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
 80013de:	4604      	mov	r4, r0
 80013e0:	460e      	mov	r6, r1
  tmp_hal_status = ADC_Disable(hadc);
 80013e2:	f7ff fdbb 	bl	8000f5c <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80013e6:	4605      	mov	r5, r0
 80013e8:	b9f0      	cbnz	r0, 8001428 <HAL_ADCEx_Calibration_Start+0x60>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80013ea:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80013ec:	6467      	str	r7, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80013ee:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013f0:	42be      	cmp	r6, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80013f2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80013f6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013f8:	d026      	beq.n	8001448 <HAL_ADCEx_Calibration_Start+0x80>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001400:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001402:	f7ff fda1 	bl	8000f48 <HAL_GetTick>
 8001406:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001408:	e004      	b.n	8001414 <HAL_ADCEx_Calibration_Start+0x4c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800140a:	f7ff fd9d 	bl	8000f48 <HAL_GetTick>
 800140e:	1b80      	subs	r0, r0, r6
 8001410:	280a      	cmp	r0, #10
 8001412:	d80e      	bhi.n	8001432 <HAL_ADCEx_Calibration_Start+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dbf6      	blt.n	800140a <HAL_ADCEx_Calibration_Start+0x42>
    ADC_STATE_CLR_SET(hadc->State,
 800141c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8001428:	2300      	movs	r3, #0
 800142a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800142e:	4628      	mov	r0, r5
 8001430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8001432:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001434:	f023 0312 	bic.w	r3, r3, #18
 8001438:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 800143c:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800143e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001440:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001444:	2501      	movs	r5, #1
 8001446:	e7c5      	b.n	80013d4 <HAL_ADCEx_Calibration_Start+0xc>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e7d3      	b.n	80013fa <HAL_ADCEx_Calibration_Start+0x32>
 8001452:	bf00      	nop

08001454 <HAL_ADC_ConfigChannel>:
{
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	4603      	mov	r3, r0
 8001458:	b097      	sub	sp, #92	; 0x5c
  __HAL_LOCK(hadc);
 800145a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 800145e:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001460:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8001462:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hadc);
 8001464:	d047      	beq.n	80014f6 <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001466:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001468:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800146a:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 800146c:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800146e:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8001470:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001474:	d508      	bpl.n	8001488 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001478:	f042 0220 	orr.w	r2, r2, #32
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001484:	b017      	add	sp, #92	; 0x5c
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 8001488:	6848      	ldr	r0, [r1, #4]
 800148a:	2804      	cmp	r0, #4
 800148c:	d936      	bls.n	80014fc <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 800148e:	2809      	cmp	r0, #9
 8001490:	d871      	bhi.n	8001576 <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->SQR2,
 8001492:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001496:	0040      	lsls	r0, r0, #1
 8001498:	381e      	subs	r0, #30
 800149a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800149c:	680d      	ldr	r5, [r1, #0]
 800149e:	271f      	movs	r7, #31
 80014a0:	4087      	lsls	r7, r0
 80014a2:	ea26 0607 	bic.w	r6, r6, r7
 80014a6:	fa05 f000 	lsl.w	r0, r5, r0
 80014aa:	4330      	orrs	r0, r6
 80014ac:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014ae:	6890      	ldr	r0, [r2, #8]
 80014b0:	f010 0f0c 	tst.w	r0, #12
 80014b4:	d133      	bne.n	800151e <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014b6:	2d09      	cmp	r5, #9
 80014b8:	d94f      	bls.n	800155a <HAL_ADC_ConfigChannel+0x106>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014ba:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80014be:	3f1e      	subs	r7, #30
 80014c0:	6990      	ldr	r0, [r2, #24]
 80014c2:	688e      	ldr	r6, [r1, #8]
 80014c4:	f04f 0e07 	mov.w	lr, #7
 80014c8:	fa0e fe07 	lsl.w	lr, lr, r7
 80014cc:	ea20 000e 	bic.w	r0, r0, lr
 80014d0:	40be      	lsls	r6, r7
 80014d2:	4330      	orrs	r0, r6
 80014d4:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014d6:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 80014d8:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014da:	694f      	ldr	r7, [r1, #20]
 80014dc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80014e0:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 80014e2:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014e4:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80014e8:	2e03      	cmp	r6, #3
 80014ea:	f200 80cf 	bhi.w	800168c <HAL_ADC_ConfigChannel+0x238>
 80014ee:	e8df f006 	tbb	[pc, r6]
 80014f2:	747e      	.short	0x747e
 80014f4:	606a      	.short	0x606a
  __HAL_LOCK(hadc);
 80014f6:	2002      	movs	r0, #2
}
 80014f8:	b017      	add	sp, #92	; 0x5c
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 80014fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001500:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001502:	680d      	ldr	r5, [r1, #0]
 8001504:	0040      	lsls	r0, r0, #1
 8001506:	271f      	movs	r7, #31
 8001508:	4087      	lsls	r7, r0
 800150a:	ea26 0607 	bic.w	r6, r6, r7
 800150e:	fa05 f000 	lsl.w	r0, r5, r0
 8001512:	4330      	orrs	r0, r6
 8001514:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001516:	6890      	ldr	r0, [r2, #8]
 8001518:	f010 0f0c 	tst.w	r0, #12
 800151c:	d0cb      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800151e:	6890      	ldr	r0, [r2, #8]
 8001520:	f000 0003 	and.w	r0, r0, #3
 8001524:	2801      	cmp	r0, #1
 8001526:	d014      	beq.n	8001552 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001528:	2c01      	cmp	r4, #1
 800152a:	f000 8093 	beq.w	8001654 <HAL_ADC_ConfigChannel+0x200>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800152e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001532:	2001      	movs	r0, #1
 8001534:	40a8      	lsls	r0, r5
 8001536:	ea21 0100 	bic.w	r1, r1, r0
 800153a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800153e:	2d10      	cmp	r5, #16
 8001540:	f000 8083 	beq.w	800164a <HAL_ADC_ConfigChannel+0x1f6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001544:	2d11      	cmp	r5, #17
 8001546:	f000 809c 	beq.w	8001682 <HAL_ADC_ConfigChannel+0x22e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800154a:	2d12      	cmp	r5, #18
 800154c:	d059      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001550:	e795      	b.n	800147e <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001552:	6810      	ldr	r0, [r2, #0]
 8001554:	07c0      	lsls	r0, r0, #31
 8001556:	d5e7      	bpl.n	8001528 <HAL_ADC_ConfigChannel+0xd4>
 8001558:	e7f9      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800155a:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800155e:	6950      	ldr	r0, [r2, #20]
 8001560:	688e      	ldr	r6, [r1, #8]
 8001562:	2707      	movs	r7, #7
 8001564:	fa07 f70e 	lsl.w	r7, r7, lr
 8001568:	ea20 0007 	bic.w	r0, r0, r7
 800156c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001570:	4330      	orrs	r0, r6
 8001572:	6150      	str	r0, [r2, #20]
 8001574:	e7af      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 8001576:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001578:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800157c:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8001580:	d80b      	bhi.n	800159a <HAL_ADC_ConfigChannel+0x146>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001582:	383c      	subs	r0, #60	; 0x3c
 8001584:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8001586:	680d      	ldr	r5, [r1, #0]
 8001588:	271f      	movs	r7, #31
 800158a:	4087      	lsls	r7, r0
 800158c:	ea26 0607 	bic.w	r6, r6, r7
 8001590:	fa05 f000 	lsl.w	r0, r5, r0
 8001594:	4330      	orrs	r0, r6
 8001596:	6390      	str	r0, [r2, #56]	; 0x38
 8001598:	e789      	b.n	80014ae <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800159a:	385a      	subs	r0, #90	; 0x5a
 800159c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800159e:	680d      	ldr	r5, [r1, #0]
 80015a0:	271f      	movs	r7, #31
 80015a2:	4087      	lsls	r7, r0
 80015a4:	ea26 0607 	bic.w	r6, r6, r7
 80015a8:	fa05 f000 	lsl.w	r0, r5, r0
 80015ac:	4330      	orrs	r0, r6
 80015ae:	63d0      	str	r0, [r2, #60]	; 0x3c
 80015b0:	e77d      	b.n	80014ae <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015b2:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 80015b4:	4e6d      	ldr	r6, [pc, #436]	; (800176c <HAL_ADC_ConfigChannel+0x318>)
 80015b6:	403e      	ands	r6, r7
 80015b8:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015bc:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80015c0:	4338      	orrs	r0, r7
 80015c2:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 80015c4:	e7ab      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015c6:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80015c8:	4e68      	ldr	r6, [pc, #416]	; (800176c <HAL_ADC_ConfigChannel+0x318>)
 80015ca:	403e      	ands	r6, r7
 80015cc:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015d0:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80015d4:	4338      	orrs	r0, r7
 80015d6:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80015d8:	e7a1      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015da:	6e57      	ldr	r7, [r2, #100]	; 0x64
 80015dc:	4e63      	ldr	r6, [pc, #396]	; (800176c <HAL_ADC_ConfigChannel+0x318>)
 80015de:	403e      	ands	r6, r7
 80015e0:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015e4:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80015e8:	4338      	orrs	r0, r7
 80015ea:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80015ec:	e797      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015ee:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80015f0:	4e5e      	ldr	r6, [pc, #376]	; (800176c <HAL_ADC_ConfigChannel+0x318>)
 80015f2:	403e      	ands	r6, r7
 80015f4:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015f8:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80015fc:	4338      	orrs	r0, r7
 80015fe:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 8001600:	e78d      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001602:	495b      	ldr	r1, [pc, #364]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 8001604:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001606:	024c      	lsls	r4, r1, #9
 8001608:	d4a1      	bmi.n	800154e <HAL_ADC_ConfigChannel+0xfa>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800160a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800160e:	bf0c      	ite	eq
 8001610:	4958      	ldreq	r1, [pc, #352]	; (8001774 <HAL_ADC_ConfigChannel+0x320>)
 8001612:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
 8001616:	9101      	str	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001618:	6891      	ldr	r1, [r2, #8]
 800161a:	f001 0103 	and.w	r1, r1, #3
 800161e:	2901      	cmp	r1, #1
 8001620:	d05d      	beq.n	80016de <HAL_ADC_ConfigChannel+0x28a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001622:	9801      	ldr	r0, [sp, #4]
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001624:	6881      	ldr	r1, [r0, #8]
 8001626:	f001 0103 	and.w	r1, r1, #3
 800162a:	2901      	cmp	r1, #1
 800162c:	d05e      	beq.n	80016ec <HAL_ADC_ConfigChannel+0x298>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800162e:	2d10      	cmp	r5, #16
 8001630:	d074      	beq.n	800171c <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001632:	2d11      	cmp	r5, #17
 8001634:	f000 808f 	beq.w	8001756 <HAL_ADC_ConfigChannel+0x302>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001638:	2d12      	cmp	r5, #18
 800163a:	d188      	bne.n	800154e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800163c:	494c      	ldr	r1, [pc, #304]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 800163e:	688a      	ldr	r2, [r1, #8]
 8001640:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001644:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001646:	2000      	movs	r0, #0
 8001648:	e719      	b.n	800147e <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800164a:	4949      	ldr	r1, [pc, #292]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 800164c:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800164e:	020f      	lsls	r7, r1, #8
 8001650:	d5db      	bpl.n	800160a <HAL_ADC_ConfigChannel+0x1b6>
 8001652:	e77c      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001654:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8001658:	40ac      	lsls	r4, r5
 800165a:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800165c:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800165e:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001662:	d92e      	bls.n	80016c2 <HAL_ADC_ConfigChannel+0x26e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001664:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8001668:	688e      	ldr	r6, [r1, #8]
 800166a:	6994      	ldr	r4, [r2, #24]
 800166c:	f1a0 011b 	sub.w	r1, r0, #27
 8001670:	2707      	movs	r7, #7
 8001672:	408f      	lsls	r7, r1
 8001674:	fa06 f001 	lsl.w	r0, r6, r1
 8001678:	ea24 0107 	bic.w	r1, r4, r7
 800167c:	4301      	orrs	r1, r0
 800167e:	6191      	str	r1, [r2, #24]
 8001680:	e75d      	b.n	800153e <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001682:	493b      	ldr	r1, [pc, #236]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 8001684:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001686:	01ce      	lsls	r6, r1, #7
 8001688:	d5bf      	bpl.n	800160a <HAL_ADC_ConfigChannel+0x1b6>
 800168a:	e760      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800168c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800168e:	06a8      	lsls	r0, r5, #26
 8001690:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001694:	4286      	cmp	r6, r0
 8001696:	d037      	beq.n	8001708 <HAL_ADC_ConfigChannel+0x2b4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001698:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800169a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800169e:	42b0      	cmp	r0, r6
 80016a0:	d02d      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x2aa>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016a2:	6e96      	ldr	r6, [r2, #104]	; 0x68
 80016a4:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80016a8:	42b0      	cmp	r0, r6
 80016aa:	d032      	beq.n	8001712 <HAL_ADC_ConfigChannel+0x2be>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ac:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 80016ae:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80016b2:	42b0      	cmp	r0, r6
 80016b4:	f47f af33 	bne.w	800151e <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016b8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80016ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80016be:	66d0      	str	r0, [r2, #108]	; 0x6c
 80016c0:	e72d      	b.n	800151e <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 80016c2:	1c68      	adds	r0, r5, #1
 80016c4:	688e      	ldr	r6, [r1, #8]
 80016c6:	6954      	ldr	r4, [r2, #20]
 80016c8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80016cc:	2707      	movs	r7, #7
 80016ce:	408f      	lsls	r7, r1
 80016d0:	fa06 f001 	lsl.w	r0, r6, r1
 80016d4:	ea24 0107 	bic.w	r1, r4, r7
 80016d8:	4301      	orrs	r1, r0
 80016da:	6151      	str	r1, [r2, #20]
 80016dc:	e732      	b.n	8001544 <HAL_ADC_ConfigChannel+0xf0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016de:	6811      	ldr	r1, [r2, #0]
 80016e0:	07c8      	lsls	r0, r1, #31
 80016e2:	d406      	bmi.n	80016f2 <HAL_ADC_ConfigChannel+0x29e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016e4:	9801      	ldr	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d0a1      	beq.n	800162e <HAL_ADC_ConfigChannel+0x1da>
 80016ea:	e79b      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1d0>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016ec:	6801      	ldr	r1, [r0, #0]
 80016ee:	07c9      	lsls	r1, r1, #31
 80016f0:	d59d      	bpl.n	800162e <HAL_ADC_ConfigChannel+0x1da>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
 80016fc:	e6bf      	b.n	800147e <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016fe:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001700:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001704:	6656      	str	r6, [r2, #100]	; 0x64
 8001706:	e7cc      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x24e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001708:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800170a:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800170e:	6616      	str	r6, [r2, #96]	; 0x60
 8001710:	e7c2      	b.n	8001698 <HAL_ADC_ConfigChannel+0x244>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001712:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8001714:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001718:	6696      	str	r6, [r2, #104]	; 0x68
 800171a:	e7c7      	b.n	80016ac <HAL_ADC_ConfigChannel+0x258>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800171c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001720:	f47f af15 	bne.w	800154e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001724:	4912      	ldr	r1, [pc, #72]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001726:	4c14      	ldr	r4, [pc, #80]	; (8001778 <HAL_ADC_ConfigChannel+0x324>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001728:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800172c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001730:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001732:	220a      	movs	r2, #10
 8001734:	6821      	ldr	r1, [r4, #0]
 8001736:	fbb1 f1f0 	udiv	r1, r1, r0
 800173a:	fb02 f201 	mul.w	r2, r2, r1
 800173e:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001740:	9a00      	ldr	r2, [sp, #0]
 8001742:	2a00      	cmp	r2, #0
 8001744:	f43f af03 	beq.w	800154e <HAL_ADC_ConfigChannel+0xfa>
            wait_loop_index--;
 8001748:	9a00      	ldr	r2, [sp, #0]
 800174a:	3a01      	subs	r2, #1
 800174c:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800174e:	9a00      	ldr	r2, [sp, #0]
 8001750:	2a00      	cmp	r2, #0
 8001752:	d1f9      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x2f4>
 8001754:	e6fb      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001756:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800175a:	f47f aef8 	bne.w	800154e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800175e:	4904      	ldr	r1, [pc, #16]	; (8001770 <HAL_ADC_ConfigChannel+0x31c>)
 8001760:	688a      	ldr	r2, [r1, #8]
 8001762:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001766:	608a      	str	r2, [r1, #8]
 8001768:	e6f1      	b.n	800154e <HAL_ADC_ConfigChannel+0xfa>
 800176a:	bf00      	nop
 800176c:	83fff000 	.word	0x83fff000
 8001770:	50000300 	.word	0x50000300
 8001774:	50000100 	.word	0x50000100
 8001778:	20000000 	.word	0x20000000
 800177c:	000f4240 	.word	0x000f4240

08001780 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001782:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001784:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001788:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800178a:	0200      	lsls	r0, r0, #8
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001798:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800179a:	60d3      	str	r3, [r2, #12]
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a6:	b470      	push	{r4, r5, r6}
 80017a8:	68dc      	ldr	r4, [r3, #12]
 80017aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ae:	f1c4 0607 	rsb	r6, r4, #7
 80017b2:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	bf28      	it	cs
 80017ba:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d917      	bls.n	80017f0 <HAL_NVIC_SetPriority+0x4c>
 80017c0:	3c03      	subs	r4, #3
 80017c2:	2501      	movs	r5, #1
 80017c4:	40a5      	lsls	r5, r4
 80017c6:	3d01      	subs	r5, #1
 80017c8:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ca:	2301      	movs	r3, #1
 80017cc:	40b3      	lsls	r3, r6
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4019      	ands	r1, r3
 80017d2:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80017d4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80017da:	db0c      	blt.n	80017f6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017e4:	0109      	lsls	r1, r1, #4
 80017e6:	b2c9      	uxtb	r1, r1
 80017e8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017ec:	bc70      	pop	{r4, r5, r6}
 80017ee:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f0:	2200      	movs	r2, #0
 80017f2:	4614      	mov	r4, r2
 80017f4:	e7e9      	b.n	80017ca <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_NVIC_SetPriority+0x68>)
 80017f8:	f000 000f 	and.w	r0, r0, #15
 80017fc:	0109      	lsls	r1, r1, #4
 80017fe:	4403      	add	r3, r0
 8001800:	b2c9      	uxtb	r1, r1
 8001802:	7619      	strb	r1, [r3, #24]
 8001804:	bc70      	pop	{r4, r5, r6}
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	e000ecfc 	.word	0xe000ecfc

08001810 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001810:	f000 011f 	and.w	r1, r0, #31
 8001814:	2301      	movs	r3, #1
 8001816:	0940      	lsrs	r0, r0, #5
 8001818:	4a02      	ldr	r2, [pc, #8]	; (8001824 <HAL_NVIC_EnableIRQ+0x14>)
 800181a:	408b      	lsls	r3, r1
 800181c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	3801      	subs	r0, #1
 800182a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800182e:	d20e      	bcs.n	800184e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	4c08      	ldr	r4, [pc, #32]	; (8001858 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	20f0      	movs	r0, #240	; 0xf0
 800183a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001840:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001842:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800184c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800185e:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001860:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001862:	bf0c      	ite	eq
 8001864:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001868:	f023 0304 	bicne.w	r3, r3, #4
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4770      	bx	lr
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <HAL_SYSTICK_IRQHandler>:
{
 8001878:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800187a:	f7ff fffb 	bl	8001874 <HAL_SYSTICK_Callback>
 800187e:	bd08      	pop	{r3, pc}

08001880 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001880:	2800      	cmp	r0, #0
 8001882:	d02d      	beq.n	80018e0 <HAL_DMA_Init+0x60>
{ 
 8001884:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001886:	6842      	ldr	r2, [r0, #4]
 8001888:	6887      	ldr	r7, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	68c6      	ldr	r6, [r0, #12]
 800188c:	6904      	ldr	r4, [r0, #16]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800188e:	4915      	ldr	r1, [pc, #84]	; (80018e4 <HAL_DMA_Init+0x64>)
 8001890:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001892:	433a      	orrs	r2, r7
  tmp = hdma->Instance->CCR;
 8001894:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	695d      	ldr	r5, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001898:	4f13      	ldr	r7, [pc, #76]	; (80018e8 <HAL_DMA_Init+0x68>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189a:	4332      	orrs	r2, r6
 800189c:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	699e      	ldr	r6, [r3, #24]
  tmp = hdma->Instance->CCR;
 80018a0:	6804      	ldr	r4, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a4:	69dd      	ldr	r5, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a6:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018a8:	4401      	add	r1, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018aa:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018ae:	fba7 6101 	umull	r6, r1, r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b2:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018b4:	f024 0430 	bic.w	r4, r4, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80018b8:	4322      	orrs	r2, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018ba:	0909      	lsrs	r1, r1, #4
  hdma->Instance->CCR = tmp;  
 80018bc:	6002      	str	r2, [r0, #0]
  hdma->DmaBaseAddress = DMA1;
 80018be:	4c0b      	ldr	r4, [pc, #44]	; (80018ec <HAL_DMA_Init+0x6c>)
 80018c0:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80018c2:	2000      	movs	r0, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018c4:	0089      	lsls	r1, r1, #2
  hdma->State = HAL_DMA_STATE_READY;
 80018c6:	2201      	movs	r2, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018c8:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->XferCpltCallback = NULL;
 80018ca:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80018cc:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80018ce:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80018d0:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d2:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80018d4:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80018d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}  
 80018dc:	bcf0      	pop	{r4, r5, r6, r7}
 80018de:	4770      	bx	lr
    return HAL_ERROR;
 80018e0:	2001      	movs	r0, #1
 80018e2:	4770      	bx	lr
 80018e4:	bffdfff8 	.word	0xbffdfff8
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	40020000 	.word	0x40020000

080018f0 <HAL_DMA_Start_IT>:
{
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80018f2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80018f6:	2c01      	cmp	r4, #1
 80018f8:	d00b      	beq.n	8001912 <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 80018fa:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80018fe:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001900:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001902:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001906:	d006      	beq.n	8001916 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8001908:	2300      	movs	r3, #0
 800190a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800190e:	2002      	movs	r0, #2
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8001912:	2002      	movs	r0, #2
} 
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001916:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001918:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800191a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191e:	2600      	movs	r6, #0
 8001920:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001922:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001924:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001926:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800192a:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 800192c:	f04f 0c02 	mov.w	ip, #2
 8001930:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001934:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001936:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 800193a:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 800193c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800193e:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8001940:	bf0b      	itete	eq
 8001942:	60aa      	streq	r2, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001944:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001946:	60e9      	streq	r1, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 8001948:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800194a:	b14b      	cbz	r3, 8001960 <HAL_DMA_Start_IT+0x70>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	f043 030e 	orr.w	r3, r3, #14
 8001952:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800195c:	2000      	movs	r0, #0
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	f043 030a 	orr.w	r3, r3, #10
 8001966:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	602b      	str	r3, [r5, #0]
 8001970:	e7f0      	b.n	8001954 <HAL_DMA_Start_IT+0x64>
 8001972:	bf00      	nop

08001974 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001974:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001978:	2a02      	cmp	r2, #2
{  
 800197a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197c:	d003      	beq.n	8001986 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197e:	2204      	movs	r2, #4
 8001980:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001982:	2001      	movs	r0, #1
 8001984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001986:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001988:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800198a:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800198c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 800198e:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001990:	f024 040e 	bic.w	r4, r4, #14
 8001994:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001996:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001998:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800199a:	f024 0401 	bic.w	r4, r4, #1
 800199e:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019a0:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 80019a4:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019a6:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80019a8:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80019ac:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019b0:	b116      	cbz	r6, 80019b8 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80019b2:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 80019b4:	4620      	mov	r0, r4
 80019b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b8:	4630      	mov	r0, r6
}
 80019ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019bc <HAL_DMA_IRQHandler>:
{
 80019bc:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019be:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019c2:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80019c4:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019c6:	2304      	movs	r3, #4
 80019c8:	4093      	lsls	r3, r2
 80019ca:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 80019cc:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019ce:	d00d      	beq.n	80019ec <HAL_DMA_IRQHandler+0x30>
 80019d0:	0777      	lsls	r7, r6, #29
 80019d2:	d50b      	bpl.n	80019ec <HAL_DMA_IRQHandler+0x30>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	0692      	lsls	r2, r2, #26
 80019d8:	d403      	bmi.n	80019e2 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	f022 0204 	bic.w	r2, r2, #4
 80019e0:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80019e2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019e4:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80019e6:	b1c2      	cbz	r2, 8001a1a <HAL_DMA_IRQHandler+0x5e>
}  
 80019e8:	bcf0      	pop	{r4, r5, r6, r7}
  		hdma->XferCpltCallback(hdma);
 80019ea:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019ec:	2302      	movs	r3, #2
 80019ee:	4093      	lsls	r3, r2
 80019f0:	4219      	tst	r1, r3
 80019f2:	d014      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x62>
 80019f4:	07b7      	lsls	r7, r6, #30
 80019f6:	d512      	bpl.n	8001a1e <HAL_DMA_IRQHandler+0x62>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	0692      	lsls	r2, r2, #26
 80019fc:	d406      	bmi.n	8001a0c <HAL_DMA_IRQHandler+0x50>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019fe:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001a00:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a02:	f022 020a 	bic.w	r2, r2, #10
 8001a06:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001a08:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001a0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a0e:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8001a10:	2300      	movs	r3, #0
 8001a12:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d1e6      	bne.n	80019e8 <HAL_DMA_IRQHandler+0x2c>
}  
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a1e:	2308      	movs	r3, #8
 8001a20:	4093      	lsls	r3, r2
 8001a22:	420b      	tst	r3, r1
 8001a24:	d0f9      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x5e>
 8001a26:	0733      	lsls	r3, r6, #28
 8001a28:	d5f7      	bpl.n	8001a1a <HAL_DMA_IRQHandler+0x5e>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a2a:	6821      	ldr	r1, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001a2c:	6b06      	ldr	r6, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a2e:	2301      	movs	r3, #1
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a30:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a34:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8001a38:	2700      	movs	r7, #0
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a3a:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a3c:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a3e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001a40:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001a44:	f880 7020 	strb.w	r7, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001a48:	2e00      	cmp	r6, #0
 8001a4a:	d0e6      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x5e>
    	hdma->XferErrorCallback(hdma);
 8001a4c:	4633      	mov	r3, r6
}  
 8001a4e:	bcf0      	pop	{r4, r5, r6, r7}
    	hdma->XferErrorCallback(hdma);
 8001a50:	4718      	bx	r3
 8001a52:	bf00      	nop

08001a54 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <FLASH_SetErrorCode+0x34>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f013 0310 	ands.w	r3, r3, #16
 8001a5c:	d005      	beq.n	8001a6a <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <FLASH_SetErrorCode+0x38>)
 8001a60:	69d3      	ldr	r3, [r2, #28]
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001a68:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <FLASH_SetErrorCode+0x34>)
 8001a6c:	68d2      	ldr	r2, [r2, #12]
 8001a6e:	0752      	lsls	r2, r2, #29
 8001a70:	d506      	bpl.n	8001a80 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a72:	4906      	ldr	r1, [pc, #24]	; (8001a8c <FLASH_SetErrorCode+0x38>)
 8001a74:	69ca      	ldr	r2, [r1, #28]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a7e:	61ca      	str	r2, [r1, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a80:	4a01      	ldr	r2, [pc, #4]	; (8001a88 <FLASH_SetErrorCode+0x34>)
 8001a82:	60d3      	str	r3, [r2, #12]
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	200002f8 	.word	0x200002f8

08001a90 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_FLASH_Unlock+0x18>)
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	0612      	lsls	r2, r2, #24
 8001a96:	d505      	bpl.n	8001aa4 <HAL_FLASH_Unlock+0x14>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <HAL_FLASH_Unlock+0x1c>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a9c:	6059      	str	r1, [r3, #4]
  return HAL_OK; 
 8001a9e:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001aa0:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8001aa2:	4770      	bx	lr
    return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
}
 8001aa6:	4770      	bx	lr
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	45670123 	.word	0x45670123
 8001ab0:	cdef89ab 	.word	0xcdef89ab

08001ab4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_FLASH_Lock+0x10>)
 8001ab6:	6913      	ldr	r3, [r2, #16]
 8001ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abc:	6113      	str	r3, [r2, #16]
}
 8001abe:	2000      	movs	r0, #0
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <FLASH_WaitForLastOperation>:
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff fa3c 	bl	8000f48 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ad0:	4c10      	ldr	r4, [pc, #64]	; (8001b14 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8001ad2:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ad4:	e001      	b.n	8001ada <FLASH_WaitForLastOperation+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8001ad6:	1c6b      	adds	r3, r5, #1
 8001ad8:	d113      	bne.n	8001b02 <FLASH_WaitForLastOperation+0x3a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ada:	68e3      	ldr	r3, [r4, #12]
 8001adc:	07d8      	lsls	r0, r3, #31
 8001ade:	d4fa      	bmi.n	8001ad6 <FLASH_WaitForLastOperation+0xe>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ae0:	68e3      	ldr	r3, [r4, #12]
 8001ae2:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ae4:	bf44      	itt	mi
 8001ae6:	2320      	movmi	r3, #32
 8001ae8:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <FLASH_WaitForLastOperation+0x4c>)
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	06d2      	lsls	r2, r2, #27
 8001af0:	d403      	bmi.n	8001afa <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001af2:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001af4:	f010 0004 	ands.w	r0, r0, #4
 8001af8:	d002      	beq.n	8001b00 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8001afa:	f7ff ffab 	bl	8001a54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001afe:	2001      	movs	r0, #1
}
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b02:	b125      	cbz	r5, 8001b0e <FLASH_WaitForLastOperation+0x46>
 8001b04:	f7ff fa20 	bl	8000f48 <HAL_GetTick>
 8001b08:	1b80      	subs	r0, r0, r6
 8001b0a:	4285      	cmp	r5, r0
 8001b0c:	d2e5      	bcs.n	8001ada <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8001b0e:	2003      	movs	r0, #3
 8001b10:	bd70      	pop	{r4, r5, r6, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000

08001b18 <HAL_FLASH_Program>:
{
 8001b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001b1c:	4f26      	ldr	r7, [pc, #152]	; (8001bb8 <HAL_FLASH_Program+0xa0>)
 8001b1e:	7e3c      	ldrb	r4, [r7, #24]
 8001b20:	2c01      	cmp	r4, #1
 8001b22:	d102      	bne.n	8001b2a <HAL_FLASH_Program+0x12>
 8001b24:	2002      	movs	r0, #2
}
 8001b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b2a:	461e      	mov	r6, r3
 8001b2c:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001b2e:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b34:	4690      	mov	r8, r2
 8001b36:	468b      	mov	fp, r1
  __HAL_LOCK(&pFlash);
 8001b38:	763b      	strb	r3, [r7, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b3a:	f7ff ffc5 	bl	8001ac8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001b3e:	bba8      	cbnz	r0, 8001bac <HAL_FLASH_Program+0x94>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b40:	2c01      	cmp	r4, #1
 8001b42:	d037      	beq.n	8001bb4 <HAL_FLASH_Program+0x9c>
      nbiterations = 4U;
 8001b44:	2c02      	cmp	r4, #2
 8001b46:	bf0c      	ite	eq
 8001b48:	2002      	moveq	r0, #2
 8001b4a:	2004      	movne	r0, #4
 8001b4c:	3801      	subs	r0, #1
 8001b4e:	b2c0      	uxtb	r0, r0
 8001b50:	f10b 0902 	add.w	r9, fp, #2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b54:	f8df a064 	ldr.w	sl, [pc, #100]	; 8001bbc <HAL_FLASH_Program+0xa4>
      nbiterations = 4U;
 8001b58:	2500      	movs	r5, #0
 8001b5a:	eb09 0940 	add.w	r9, r9, r0, lsl #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b5e:	f1c5 0220 	rsb	r2, r5, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b66:	fa06 f202 	lsl.w	r2, r6, r2
 8001b6a:	fa28 f005 	lsr.w	r0, r8, r5
 8001b6e:	f1a5 0120 	sub.w	r1, r5, #32
 8001b72:	4310      	orrs	r0, r2
 8001b74:	fa26 f101 	lsr.w	r1, r6, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b78:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b7c:	4308      	orrs	r0, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b82:	b284      	uxth	r4, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b84:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b88:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8001b8c:	f8ab 4000 	strh.w	r4, [fp]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b90:	f7ff ff9a 	bl	8001ac8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001b94:	f8da 2010 	ldr.w	r2, [sl, #16]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	f10b 0b02 	add.w	fp, fp, #2
 8001ba0:	3510      	adds	r5, #16
 8001ba2:	f8ca 2010 	str.w	r2, [sl, #16]
      if (status != HAL_OK)
 8001ba6:	b908      	cbnz	r0, 8001bac <HAL_FLASH_Program+0x94>
    for (index = 0U; index < nbiterations; index++)
 8001ba8:	45cb      	cmp	fp, r9
 8001baa:	d1d8      	bne.n	8001b5e <HAL_FLASH_Program+0x46>
  __HAL_UNLOCK(&pFlash);
 8001bac:	2300      	movs	r3, #0
 8001bae:	763b      	strb	r3, [r7, #24]
  return status;
 8001bb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nbiterations = 1U;
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	e7c9      	b.n	8001b4c <HAL_FLASH_Program+0x34>
 8001bb8:	200002f8 	.word	0x200002f8
 8001bbc:	40022000 	.word	0x40022000

08001bc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bc4:	4e2e      	ldr	r6, [pc, #184]	; (8001c80 <HAL_FLASHEx_Erase+0xc0>)
 8001bc6:	7e33      	ldrb	r3, [r6, #24]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d043      	beq.n	8001c54 <HAL_FLASHEx_Erase+0x94>

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bcc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8001bce:	2201      	movs	r2, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	4681      	mov	r9, r0
 8001bd4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8001bd6:	7632      	strb	r2, [r6, #24]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bdc:	d032      	beq.n	8001c44 <HAL_FLASHEx_Erase+0x84>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001bde:	f7ff ff73 	bl	8001ac8 <FLASH_WaitForLastOperation>
 8001be2:	bb90      	cbnz	r0, 8001c4a <HAL_FLASHEx_Erase+0x8a>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
 8001be8:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001bec:	f8d9 5004 	ldr.w	r5, [r9, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001bf0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001bf4:	eb05 23c3 	add.w	r3, r5, r3, lsl #11
        for(address = pEraseInit->PageAddress;
 8001bf8:	429d      	cmp	r5, r3
 8001bfa:	d226      	bcs.n	8001c4a <HAL_FLASHEx_Erase+0x8a>
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001bfc:	4c21      	ldr	r4, [pc, #132]	; (8001c84 <HAL_FLASHEx_Erase+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bfe:	4607      	mov	r7, r0
 8001c00:	e009      	b.n	8001c16 <HAL_FLASHEx_Erase+0x56>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001c02:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8001c06:	f8d9 3004 	ldr.w	r3, [r9, #4]
            address += FLASH_PAGE_SIZE)
 8001c0a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001c0e:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8001c12:	42ab      	cmp	r3, r5
 8001c14:	d91a      	bls.n	8001c4c <HAL_FLASHEx_Erase+0x8c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c16:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c18:	6923      	ldr	r3, [r4, #16]
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c20:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c22:	6923      	ldr	r3, [r4, #16]
 8001c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c28:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c2e:	f7ff ff4b 	bl	8001ac8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001c32:	6923      	ldr	r3, [r4, #16]
 8001c34:	f023 0302 	bic.w	r3, r3, #2
 8001c38:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d0e1      	beq.n	8001c02 <HAL_FLASHEx_Erase+0x42>
            *PageError = address;
 8001c3e:	f8c8 5000 	str.w	r5, [r8]
            break;
 8001c42:	e003      	b.n	8001c4c <HAL_FLASHEx_Erase+0x8c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c44:	f7ff ff40 	bl	8001ac8 <FLASH_WaitForLastOperation>
 8001c48:	b138      	cbz	r0, 8001c5a <HAL_FLASHEx_Erase+0x9a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c4a:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	7633      	strb	r3, [r6, #24]
  return status;
 8001c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8001c54:	2002      	movs	r0, #2
}
 8001c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c5a:	4c0a      	ldr	r4, [pc, #40]	; (8001c84 <HAL_FLASHEx_Erase+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c5c:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c5e:	6923      	ldr	r3, [r4, #16]
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c66:	6923      	ldr	r3, [r4, #16]
 8001c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6c:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c72:	f7ff ff29 	bl	8001ac8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001c76:	6923      	ldr	r3, [r4, #16]
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	6123      	str	r3, [r4, #16]
 8001c7e:	e7e5      	b.n	8001c4c <HAL_FLASHEx_Erase+0x8c>
 8001c80:	200002f8 	.word	0x200002f8
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c8a:	6809      	ldr	r1, [r1, #0]
 8001c8c:	2900      	cmp	r1, #0
 8001c8e:	f000 80d9 	beq.w	8001e44 <HAL_GPIO_Init+0x1bc>
{
 8001c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c96:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8001e58 <HAL_GPIO_Init+0x1d0>
{
 8001c9a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c9c:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c9e:	f04f 0801 	mov.w	r8, #1
 8001ca2:	e079      	b.n	8001d98 <HAL_GPIO_Init+0x110>
 8001ca4:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca8:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001caa:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	fa03 f309 	lsl.w	r3, r3, r9
 8001cb2:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb4:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb8:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc4:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc8:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001ccc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cce:	f240 8098 	bls.w	8001e02 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8001cd2:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd4:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd8:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cda:	fa02 f209 	lsl.w	r2, r2, r9
 8001cde:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce0:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8001ce2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce4:	d554      	bpl.n	8001d90 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <HAL_GPIO_Init+0x1c0>)
 8001ce8:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_GPIO_Init+0x1c0>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	6993      	ldr	r3, [r2, #24]
 8001cf4:	f025 0603 	bic.w	r6, r5, #3
 8001cf8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001d04:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001d06:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001d0c:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	f04f 090f 	mov.w	r9, #15
 8001d14:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d18:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001d1c:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d20:	f000 8086 	beq.w	8001e30 <HAL_GPIO_Init+0x1a8>
 8001d24:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <HAL_GPIO_Init+0x1c4>)
 8001d26:	4290      	cmp	r0, r2
 8001d28:	f000 8084 	beq.w	8001e34 <HAL_GPIO_Init+0x1ac>
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_GPIO_Init+0x1c8>)
 8001d2e:	4290      	cmp	r0, r2
 8001d30:	f000 8083 	beq.w	8001e3a <HAL_GPIO_Init+0x1b2>
 8001d34:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_GPIO_Init+0x1cc>)
 8001d36:	4290      	cmp	r0, r2
 8001d38:	bf0b      	itete	eq
 8001d3a:	f04f 0903 	moveq.w	r9, #3
 8001d3e:	2205      	movne	r2, #5
 8001d40:	fa09 f303 	lsleq.w	r3, r9, r3
 8001d44:	fa02 f303 	lslne.w	r3, r2, r3
 8001d48:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d4c:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8001d4e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d54:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8001d56:	bf54      	ite	pl
 8001d58:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001d5a:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8001d5c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001d60:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8001d66:	bf54      	ite	pl
 8001d68:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001d6a:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8001d6c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d70:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d74:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001d76:	bf54      	ite	pl
 8001d78:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001d7a:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8001d7c:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001d80:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001d86:	bf54      	ite	pl
 8001d88:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001d8a:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8001d8c:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001d90:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d92:	fa31 f305 	lsrs.w	r3, r1, r5
 8001d96:	d048      	beq.n	8001e2a <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d98:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8001d9c:	ea12 0701 	ands.w	r7, r2, r1
 8001da0:	d0f6      	beq.n	8001d90 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8001da6:	f024 0a10 	bic.w	sl, r4, #16
 8001daa:	f1ba 0f02 	cmp.w	sl, #2
 8001dae:	f47f af79 	bne.w	8001ca4 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8001db2:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001db6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dba:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8001dbe:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f04f 0a0f 	mov.w	sl, #15
 8001dc8:	fa0a fb03 	lsl.w	fp, sl, r3
 8001dcc:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd0:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8001dd4:	fa06 f303 	lsl.w	r3, r6, r3
 8001dd8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8001ddc:	f8c9 3020 	str.w	r3, [r9, #32]
 8001de0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de4:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001de6:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dea:	fa03 f309 	lsl.w	r3, r3, r9
 8001dee:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df0:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df4:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df8:	fa06 f609 	lsl.w	r6, r6, r9
 8001dfc:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8001e00:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8001e02:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e04:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e08:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001e0c:	fa06 f609 	lsl.w	r6, r6, r9
 8001e10:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001e14:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e16:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e1a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1e:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e22:	40ae      	lsls	r6, r5
 8001e24:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001e26:	6046      	str	r6, [r0, #4]
 8001e28:	e753      	b.n	8001cd2 <HAL_GPIO_Init+0x4a>
  }
}
 8001e2a:	b003      	add	sp, #12
 8001e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e30:	2300      	movs	r3, #0
 8001e32:	e789      	b.n	8001d48 <HAL_GPIO_Init+0xc0>
 8001e34:	fa08 f303 	lsl.w	r3, r8, r3
 8001e38:	e786      	b.n	8001d48 <HAL_GPIO_Init+0xc0>
 8001e3a:	f04f 0902 	mov.w	r9, #2
 8001e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8001e42:	e781      	b.n	8001d48 <HAL_GPIO_Init+0xc0>
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	48000800 	.word	0x48000800
 8001e54:	48000c00 	.word	0x48000c00
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e5c:	b90a      	cbnz	r2, 8001e62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5e:	6281      	str	r1, [r0, #40]	; 0x28
 8001e60:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e62:	6181      	str	r1, [r0, #24]
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001e6e:	6951      	ldr	r1, [r2, #20]
 8001e70:	4201      	tst	r1, r0
 8001e72:	d100      	bne.n	8001e76 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001e74:	4770      	bx	lr
{
 8001e76:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e78:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e7a:	f7ff fff5 	bl	8001e68 <HAL_GPIO_EXTI_Callback>
 8001e7e:	bd08      	pop	{r3, pc}
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e84:	2800      	cmp	r0, #0
 8001e86:	d051      	beq.n	8001f2c <HAL_I2C_Init+0xa8>
{
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e8e:	4604      	mov	r4, r0
 8001e90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d040      	beq.n	8001f1a <HAL_I2C_Init+0x96>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e98:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e9a:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9c:	2224      	movs	r2, #36	; 0x24
 8001e9e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001ea2:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ea4:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8001ea6:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8001eae:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eb0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eb2:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb4:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eba:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ebc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ebe:	d031      	beq.n	8001f24 <HAL_I2C_Init+0xa0>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ec4:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec6:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ec8:	bf04      	itt	eq
 8001eca:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001ece:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ed0:	6859      	ldr	r1, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ed2:	6922      	ldr	r2, [r4, #16]
 8001ed4:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8001ed8:	69a7      	ldr	r7, [r4, #24]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eda:	69e0      	ldr	r0, [r4, #28]
 8001edc:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ede:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001ee2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001ee6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ee8:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001eea:	ea42 020e 	orr.w	r2, r2, lr
 8001eee:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ef2:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ef4:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 8001ef8:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001efa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001efc:	6018      	str	r0, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001efe:	6819      	ldr	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f00:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8001f02:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8001f08:	6019      	str	r1, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8001f0a:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f12:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8001f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001f1a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001f1e:	f003 f975 	bl	800520c <HAL_I2C_MspInit>
 8001f22:	e7b9      	b.n	8001e98 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	e7d1      	b.n	8001ed0 <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	4770      	bx	lr

08001f30 <HAL_I2C_EV_IRQHandler>:
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f30:	6803      	ldr	r3, [r0, #0]
{
 8001f32:	b410      	push	{r4}
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001f34:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f36:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f38:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001f3a:	b11c      	cbz	r4, 8001f44 <HAL_I2C_EV_IRQHandler+0x14>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f3c:	4623      	mov	r3, r4
  }
}
 8001f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f42:	4718      	bx	r3
}
 8001f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d001      	beq.n	8001f5a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f56:	2002      	movs	r0, #2
 8001f58:	4770      	bx	lr
 8001f5a:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8001f5c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001f60:	2801      	cmp	r0, #1
 8001f62:	d0f8      	beq.n	8001f56 <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8001f64:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8001f66:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	2424      	movs	r4, #36	; 0x24
 8001f6a:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001f6e:	6804      	ldr	r4, [r0, #0]
 8001f70:	f024 0401 	bic.w	r4, r4, #1
 8001f74:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f76:	6804      	ldr	r4, [r0, #0]
 8001f78:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001f7c:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f7e:	6804      	ldr	r4, [r0, #0]
 8001f80:	4321      	orrs	r1, r4
 8001f82:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001f84:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8001f86:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8001f88:	f041 0101 	orr.w	r1, r1, #1
 8001f8c:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8001f8e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001f90:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8001f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop

08001fa0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d001      	beq.n	8001fae <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001faa:	2002      	movs	r0, #2
 8001fac:	4770      	bx	lr
 8001fae:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8001fb0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001fb4:	2801      	cmp	r0, #1
 8001fb6:	d0f8      	beq.n	8001faa <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 8001fb8:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8001fba:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	2424      	movs	r4, #36	; 0x24
 8001fbe:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001fc2:	6804      	ldr	r4, [r0, #0]
 8001fc4:	f024 0401 	bic.w	r4, r4, #1
 8001fc8:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 8001fca:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001fcc:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001fd0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001fd4:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001fd6:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8001fd8:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8001fda:	f041 0101 	orr.w	r1, r1, #1
 8001fde:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8001fe0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001fe2:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8001fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001ff0:	4a02      	ldr	r2, [pc, #8]	; (8001ffc <HAL_PWR_EnableBkUpAccess+0xc>)
 8001ff2:	6813      	ldr	r3, [r2, #0]
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4770      	bx	lr
 8001ffc:	40007000 	.word	0x40007000

08002000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	07d9      	lsls	r1, r3, #31
{
 8002008:	b083      	sub	sp, #12
 800200a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200c:	d543      	bpl.n	8002096 <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800200e:	49c0      	ldr	r1, [pc, #768]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 8002010:	684a      	ldr	r2, [r1, #4]
 8002012:	f002 020c 	and.w	r2, r2, #12
 8002016:	2a04      	cmp	r2, #4
 8002018:	f000 8184 	beq.w	8002324 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800201c:	684a      	ldr	r2, [r1, #4]
 800201e:	f002 020c 	and.w	r2, r2, #12
 8002022:	2a08      	cmp	r2, #8
 8002024:	f000 817a 	beq.w	800231c <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002028:	6863      	ldr	r3, [r4, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202e:	f000 823d 	beq.w	80024ac <HAL_RCC_OscConfig+0x4ac>
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 81a1 	beq.w	800237a <HAL_RCC_OscConfig+0x37a>
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203c:	f000 8297 	beq.w	800256e <HAL_RCC_OscConfig+0x56e>
 8002040:	4bb3      	ldr	r3, [pc, #716]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002050:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002052:	4daf      	ldr	r5, [pc, #700]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 8002054:	68a2      	ldr	r2, [r4, #8]
 8002056:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002058:	f023 030f 	bic.w	r3, r3, #15
 800205c:	4313      	orrs	r3, r2
 800205e:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe ff72 	bl	8000f48 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002068:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	2601      	movs	r6, #1
 800206c:	e005      	b.n	800207a <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206e:	f7fe ff6b 	bl	8000f48 <HAL_GetTick>
 8002072:	1bc0      	subs	r0, r0, r7
 8002074:	2864      	cmp	r0, #100	; 0x64
 8002076:	f200 81b9 	bhi.w	80023ec <HAL_RCC_OscConfig+0x3ec>
 800207a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	682a      	ldr	r2, [r5, #0]
 8002080:	fa98 f3a8 	rbit	r3, r8
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa06 f303 	lsl.w	r3, r6, r3
 8002090:	4213      	tst	r3, r2
 8002092:	d0ec      	beq.n	800206e <HAL_RCC_OscConfig+0x6e>
 8002094:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	079f      	lsls	r7, r3, #30
 8002098:	d542      	bpl.n	8002120 <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800209a:	4a9d      	ldr	r2, [pc, #628]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 800209c:	6851      	ldr	r1, [r2, #4]
 800209e:	f011 0f0c 	tst.w	r1, #12
 80020a2:	f000 80f7 	beq.w	8002294 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020a6:	6851      	ldr	r1, [r2, #4]
 80020a8:	f001 010c 	and.w	r1, r1, #12
 80020ac:	2908      	cmp	r1, #8
 80020ae:	f000 80ed 	beq.w	800228c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b2:	6922      	ldr	r2, [r4, #16]
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	f000 81d3 	beq.w	8002460 <HAL_RCC_OscConfig+0x460>
 80020ba:	2201      	movs	r2, #1
 80020bc:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020cc:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 80020d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020d2:	f7fe ff39 	bl	8000f48 <HAL_GetTick>
 80020d6:	f04f 0802 	mov.w	r8, #2
 80020da:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	4d8c      	ldr	r5, [pc, #560]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 80020de:	e005      	b.n	80020ec <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e0:	f7fe ff32 	bl	8000f48 <HAL_GetTick>
 80020e4:	1bc0      	subs	r0, r0, r7
 80020e6:	2802      	cmp	r0, #2
 80020e8:	f200 8180 	bhi.w	80023ec <HAL_RCC_OscConfig+0x3ec>
 80020ec:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	682a      	ldr	r2, [r5, #0]
 80020f2:	fa98 f3a8 	rbit	r3, r8
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	fa06 f303 	lsl.w	r3, r6, r3
 8002102:	4213      	tst	r3, r2
 8002104:	d0ec      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	6829      	ldr	r1, [r5, #0]
 8002108:	22f8      	movs	r2, #248	; 0xf8
 800210a:	fa92 f2a2 	rbit	r2, r2
 800210e:	6963      	ldr	r3, [r4, #20]
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8002118:	4093      	lsls	r3, r2
 800211a:	430b      	orrs	r3, r1
 800211c:	602b      	str	r3, [r5, #0]
 800211e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002120:	071d      	lsls	r5, r3, #28
 8002122:	d44f      	bmi.n	80021c4 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002124:	0758      	lsls	r0, r3, #29
 8002126:	d57b      	bpl.n	8002220 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002128:	4b79      	ldr	r3, [pc, #484]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	00d1      	lsls	r1, r2, #3
 800212e:	f100 8110 	bmi.w	8002352 <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002138:	61da      	str	r2, [r3, #28]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002144:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4d72      	ldr	r5, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x314>)
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	05da      	lsls	r2, r3, #23
 800214e:	f140 813d 	bpl.w	80023cc <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002152:	68e3      	ldr	r3, [r4, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	f000 81af 	beq.w	80024b8 <HAL_RCC_OscConfig+0x4b8>
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8154 	beq.w	8002408 <HAL_RCC_OscConfig+0x408>
 8002160:	2b05      	cmp	r3, #5
 8002162:	4b6b      	ldr	r3, [pc, #428]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	f000 820f 	beq.w	8002588 <HAL_RCC_OscConfig+0x588>
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	621a      	str	r2, [r3, #32]
 8002170:	6a1a      	ldr	r2, [r3, #32]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7fe fee6 	bl	8000f48 <HAL_GetTick>
 800217c:	f04f 0902 	mov.w	r9, #2
 8002180:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	4e63      	ldr	r6, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 8002184:	2501      	movs	r5, #1
 8002186:	e015      	b.n	80021b4 <HAL_RCC_OscConfig+0x1b4>
 8002188:	fa99 f3a9 	rbit	r3, r9
 800218c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800218e:	fa99 f3a9 	rbit	r3, r9
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	fa05 f303 	lsl.w	r3, r5, r3
 800219e:	4213      	tst	r3, r2
 80021a0:	f040 8128 	bne.w	80023f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe fed0 	bl	8000f48 <HAL_GetTick>
 80021a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ac:	1bc0      	subs	r0, r0, r7
 80021ae:	4298      	cmp	r0, r3
 80021b0:	f200 811c 	bhi.w	80023ec <HAL_RCC_OscConfig+0x3ec>
 80021b4:	fa99 f3a9 	rbit	r3, r9
 80021b8:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0e3      	beq.n	8002188 <HAL_RCC_OscConfig+0x188>
 80021c0:	6a32      	ldr	r2, [r6, #32]
 80021c2:	e7e4      	b.n	800218e <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c4:	69a2      	ldr	r2, [r4, #24]
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d07b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2c2>
 80021ca:	2201      	movs	r2, #1
 80021cc:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 80021d0:	4b51      	ldr	r3, [pc, #324]	; (8002318 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	4e4f      	ldr	r6, [pc, #316]	; (8002310 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 80021d4:	fab1 f181 	clz	r1, r1
 80021d8:	440b      	add	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021dc:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 80021de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80021e0:	f7fe feb2 	bl	8000f48 <HAL_GetTick>
 80021e4:	f04f 0802 	mov.w	r8, #2
 80021e8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e005      	b.n	80021f8 <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe feac 	bl	8000f48 <HAL_GetTick>
 80021f0:	1bc0      	subs	r0, r0, r7
 80021f2:	2802      	cmp	r0, #2
 80021f4:	f200 80fa 	bhi.w	80023ec <HAL_RCC_OscConfig+0x3ec>
 80021f8:	fa98 f3a8 	rbit	r3, r8
 80021fc:	fa98 f3a8 	rbit	r3, r8
 8002200:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002204:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002206:	fa98 f3a8 	rbit	r3, r8
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	fa05 f303 	lsl.w	r3, r5, r3
 8002216:	4213      	tst	r3, r2
 8002218:	d0e8      	beq.n	80021ec <HAL_RCC_OscConfig+0x1ec>
 800221a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	0758      	lsls	r0, r3, #29
 800221e:	d483      	bmi.n	8002128 <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002220:	69e3      	ldr	r3, [r4, #28]
 8002222:	b37b      	cbz	r3, 8002284 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002224:	4d3a      	ldr	r5, [pc, #232]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 8002226:	686a      	ldr	r2, [r5, #4]
 8002228:	f002 020c 	and.w	r2, r2, #12
 800222c:	2a08      	cmp	r2, #8
 800222e:	d044      	beq.n	80022ba <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002230:	2b02      	cmp	r3, #2
 8002232:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002236:	f000 8145 	beq.w	80024c4 <HAL_RCC_OscConfig+0x4c4>
 800223a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002246:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fe7a 	bl	8000f48 <HAL_GetTick>
 8002254:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002258:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225a:	2601      	movs	r6, #1
 800225c:	e005      	b.n	800226a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fe73 	bl	8000f48 <HAL_GetTick>
 8002262:	1bc0      	subs	r0, r0, r7
 8002264:	2802      	cmp	r0, #2
 8002266:	f200 80c1 	bhi.w	80023ec <HAL_RCC_OscConfig+0x3ec>
 800226a:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226e:	682a      	ldr	r2, [r5, #0]
 8002270:	fa94 f3a4 	rbit	r3, r4
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa06 f303 	lsl.w	r3, r6, r3
 8002280:	4213      	tst	r3, r2
 8002282:	d1ec      	bne.n	800225e <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002284:	2000      	movs	r0, #0
}
 8002286:	b003      	add	sp, #12
 8002288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800228c:	6852      	ldr	r2, [r2, #4]
 800228e:	03d6      	lsls	r6, r2, #15
 8002290:	f53f af0f 	bmi.w	80020b2 <HAL_RCC_OscConfig+0xb2>
 8002294:	2202      	movs	r2, #2
 8002296:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	491d      	ldr	r1, [pc, #116]	; (8002310 <HAL_RCC_OscConfig+0x310>)
 800229c:	6808      	ldr	r0, [r1, #0]
 800229e:	fa92 f2a2 	rbit	r2, r2
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	f002 021f 	and.w	r2, r2, #31
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	4202      	tst	r2, r0
 80022b2:	d051      	beq.n	8002358 <HAL_RCC_OscConfig+0x358>
 80022b4:	6922      	ldr	r2, [r4, #16]
 80022b6:	428a      	cmp	r2, r1
 80022b8:	d04e      	beq.n	8002358 <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 80022ba:	2001      	movs	r0, #1
}
 80022bc:	b003      	add	sp, #12
 80022be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022c2:	2501      	movs	r5, #1
 80022c4:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ca:	4e11      	ldr	r6, [pc, #68]	; (8002310 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 80022cc:	fab1 f181 	clz	r1, r1
 80022d0:	440b      	add	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	f04f 0802 	mov.w	r8, #2
 80022d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022da:	f7fe fe35 	bl	8000f48 <HAL_GetTick>
 80022de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	e004      	b.n	80022ec <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e2:	f7fe fe31 	bl	8000f48 <HAL_GetTick>
 80022e6:	1bc0      	subs	r0, r0, r7
 80022e8:	2802      	cmp	r0, #2
 80022ea:	d87f      	bhi.n	80023ec <HAL_RCC_OscConfig+0x3ec>
 80022ec:	fa98 f3a8 	rbit	r3, r8
 80022f0:	fa98 f3a8 	rbit	r3, r8
 80022f4:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80022fa:	fa98 f3a8 	rbit	r3, r8
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	fa05 f303 	lsl.w	r3, r5, r3
 800230a:	4213      	tst	r3, r2
 800230c:	d1e9      	bne.n	80022e2 <HAL_RCC_OscConfig+0x2e2>
 800230e:	e784      	b.n	800221a <HAL_RCC_OscConfig+0x21a>
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800231c:	684a      	ldr	r2, [r1, #4]
 800231e:	03d2      	lsls	r2, r2, #15
 8002320:	f57f ae82 	bpl.w	8002028 <HAL_RCC_OscConfig+0x28>
 8002324:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002328:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	499a      	ldr	r1, [pc, #616]	; (8002598 <HAL_RCC_OscConfig+0x598>)
 800232e:	6808      	ldr	r0, [r1, #0]
 8002330:	fa92 f2a2 	rbit	r2, r2
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4202      	tst	r2, r0
 8002344:	f43f aea7 	beq.w	8002096 <HAL_RCC_OscConfig+0x96>
 8002348:	6862      	ldr	r2, [r4, #4]
 800234a:	2a00      	cmp	r2, #0
 800234c:	f47f aea3 	bne.w	8002096 <HAL_RCC_OscConfig+0x96>
 8002350:	e7b3      	b.n	80022ba <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8002352:	f04f 0800 	mov.w	r8, #0
 8002356:	e6f7      	b.n	8002148 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4d8f      	ldr	r5, [pc, #572]	; (8002598 <HAL_RCC_OscConfig+0x598>)
 800235a:	21f8      	movs	r1, #248	; 0xf8
 800235c:	6828      	ldr	r0, [r5, #0]
 800235e:	fa91 f1a1 	rbit	r1, r1
 8002362:	6962      	ldr	r2, [r4, #20]
 8002364:	fab1 f181 	clz	r1, r1
 8002368:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800236c:	408a      	lsls	r2, r1
 800236e:	4302      	orrs	r2, r0
 8002370:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	071d      	lsls	r5, r3, #28
 8002374:	f57f aed6 	bpl.w	8002124 <HAL_RCC_OscConfig+0x124>
 8002378:	e724      	b.n	80021c4 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	4d87      	ldr	r5, [pc, #540]	; (8002598 <HAL_RCC_OscConfig+0x598>)
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	602b      	str	r3, [r5, #0]
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238a:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800238c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800238e:	68a2      	ldr	r2, [r4, #8]
 8002390:	f023 030f 	bic.w	r3, r3, #15
 8002394:	4313      	orrs	r3, r2
 8002396:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8002398:	f7fe fdd6 	bl	8000f48 <HAL_GetTick>
 800239c:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80023a0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	2601      	movs	r6, #1
 80023a4:	e004      	b.n	80023b0 <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a6:	f7fe fdcf 	bl	8000f48 <HAL_GetTick>
 80023aa:	1bc0      	subs	r0, r0, r7
 80023ac:	2864      	cmp	r0, #100	; 0x64
 80023ae:	d81d      	bhi.n	80023ec <HAL_RCC_OscConfig+0x3ec>
 80023b0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b4:	682a      	ldr	r2, [r5, #0]
 80023b6:	fa98 f3a8 	rbit	r3, r8
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	fa06 f303 	lsl.w	r3, r6, r3
 80023c6:	4213      	tst	r3, r2
 80023c8:	d1ed      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3a6>
 80023ca:	e663      	b.n	8002094 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80023d4:	f7fe fdb8 	bl	8000f48 <HAL_GetTick>
 80023d8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	682b      	ldr	r3, [r5, #0]
 80023dc:	05db      	lsls	r3, r3, #23
 80023de:	f53f aeb8 	bmi.w	8002152 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe fdb1 	bl	8000f48 <HAL_GetTick>
 80023e6:	1b80      	subs	r0, r0, r6
 80023e8:	2864      	cmp	r0, #100	; 0x64
 80023ea:	d9f6      	bls.n	80023da <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 80023ec:	2003      	movs	r0, #3
}
 80023ee:	b003      	add	sp, #12
 80023f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 80023f4:	f1b8 0f00 	cmp.w	r8, #0
 80023f8:	f43f af12 	beq.w	8002220 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	4a66      	ldr	r2, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x598>)
 80023fe:	69d3      	ldr	r3, [r2, #28]
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	e70b      	b.n	8002220 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	4d63      	ldr	r5, [pc, #396]	; (8002598 <HAL_RCC_OscConfig+0x598>)
 800240a:	6a2b      	ldr	r3, [r5, #32]
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	622b      	str	r3, [r5, #32]
 8002412:	6a2b      	ldr	r3, [r5, #32]
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800241a:	f7fe fd95 	bl	8000f48 <HAL_GetTick>
 800241e:	f04f 0902 	mov.w	r9, #2
 8002422:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	2601      	movs	r6, #1
 8002426:	e013      	b.n	8002450 <HAL_RCC_OscConfig+0x450>
 8002428:	fa99 f3a9 	rbit	r3, r9
 800242c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800242e:	fa99 f3a9 	rbit	r3, r9
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	fa06 f303 	lsl.w	r3, r6, r3
 800243e:	4213      	tst	r3, r2
 8002440:	d0d8      	beq.n	80023f4 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fd81 	bl	8000f48 <HAL_GetTick>
 8002446:	f241 3388 	movw	r3, #5000	; 0x1388
 800244a:	1bc0      	subs	r0, r0, r7
 800244c:	4298      	cmp	r0, r3
 800244e:	d8cd      	bhi.n	80023ec <HAL_RCC_OscConfig+0x3ec>
 8002450:	fa99 f3a9 	rbit	r3, r9
 8002454:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0e5      	beq.n	8002428 <HAL_RCC_OscConfig+0x428>
 800245c:	6a2a      	ldr	r2, [r5, #32]
 800245e:	e7e6      	b.n	800242e <HAL_RCC_OscConfig+0x42e>
 8002460:	2501      	movs	r5, #1
 8002462:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800246e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f04f 0802 	mov.w	r8, #2
 8002478:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800247a:	f7fe fd65 	bl	8000f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4e46      	ldr	r6, [pc, #280]	; (8002598 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8002480:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	e004      	b.n	800248e <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002484:	f7fe fd60 	bl	8000f48 <HAL_GetTick>
 8002488:	1bc0      	subs	r0, r0, r7
 800248a:	2802      	cmp	r0, #2
 800248c:	d8ae      	bhi.n	80023ec <HAL_RCC_OscConfig+0x3ec>
 800248e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	6832      	ldr	r2, [r6, #0]
 8002494:	fa98 f3a8 	rbit	r3, r8
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa05 f303 	lsl.w	r3, r5, r3
 80024a4:	4213      	tst	r3, r2
 80024a6:	d1ed      	bne.n	8002484 <HAL_RCC_OscConfig+0x484>
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	e639      	b.n	8002120 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_RCC_OscConfig+0x598>)
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e5cc      	b.n	8002052 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	4a37      	ldr	r2, [pc, #220]	; (8002598 <HAL_RCC_OscConfig+0x598>)
 80024ba:	6a13      	ldr	r3, [r2, #32]
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	e659      	b.n	8002178 <HAL_RCC_OscConfig+0x178>
 80024c4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024da:	f7fe fd35 	bl	8000f48 <HAL_GetTick>
 80024de:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80024e2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	2601      	movs	r6, #1
 80024e6:	e005      	b.n	80024f4 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fd2e 	bl	8000f48 <HAL_GetTick>
 80024ec:	1bc0      	subs	r0, r0, r7
 80024ee:	2802      	cmp	r0, #2
 80024f0:	f63f af7c 	bhi.w	80023ec <HAL_RCC_OscConfig+0x3ec>
 80024f4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	682a      	ldr	r2, [r5, #0]
 80024fa:	fa98 f3a8 	rbit	r3, r8
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	fa06 f303 	lsl.w	r3, r6, r3
 800250a:	4213      	tst	r3, r2
 800250c:	d1ec      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250e:	686a      	ldr	r2, [r5, #4]
 8002510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002512:	6a21      	ldr	r1, [r4, #32]
 8002514:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002518:	430b      	orrs	r3, r1
 800251a:	4313      	orrs	r3, r2
 800251c:	606b      	str	r3, [r5, #4]
 800251e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002522:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800252e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002538:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800253a:	f7fe fd05 	bl	8000f48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253e:	4e16      	ldr	r6, [pc, #88]	; (8002598 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8002540:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002542:	2501      	movs	r5, #1
 8002544:	e005      	b.n	8002552 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe fcff 	bl	8000f48 <HAL_GetTick>
 800254a:	1bc0      	subs	r0, r0, r7
 800254c:	2802      	cmp	r0, #2
 800254e:	f63f af4d 	bhi.w	80023ec <HAL_RCC_OscConfig+0x3ec>
 8002552:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002556:	6832      	ldr	r2, [r6, #0]
 8002558:	fa94 f3a4 	rbit	r3, r4
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa05 f303 	lsl.w	r3, r5, r3
 8002568:	4213      	tst	r3, r2
 800256a:	d0ec      	beq.n	8002546 <HAL_RCC_OscConfig+0x546>
 800256c:	e68a      	b.n	8002284 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002572:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e564      	b.n	8002052 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002588:	f042 0204 	orr.w	r2, r2, #4
 800258c:	621a      	str	r2, [r3, #32]
 800258e:	6a1a      	ldr	r2, [r3, #32]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	621a      	str	r2, [r3, #32]
 8002596:	e5ef      	b.n	8002178 <HAL_RCC_OscConfig+0x178>
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x54>)
 800259e:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a0:	f003 010c 	and.w	r1, r3, #12
 80025a4:	2908      	cmp	r1, #8
 80025a6:	d121      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x50>
 80025a8:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80025ac:	fa91 f1a1 	rbit	r1, r1
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025b0:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80025b4:	fab1 f181 	clz	r1, r1
 80025b8:	fa20 f101 	lsr.w	r1, r0, r1
 80025bc:	480d      	ldr	r0, [pc, #52]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025c0:	5c40      	ldrb	r0, [r0, r1]
 80025c2:	210f      	movs	r1, #15
 80025c4:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025c8:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025ca:	fab1 f181 	clz	r1, r1
 80025ce:	f002 020f 	and.w	r2, r2, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80025d2:	bf4c      	ite	mi
 80025d4:	4b08      	ldrmi	r3, [pc, #32]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80025d6:	4b09      	ldrpl	r3, [pc, #36]	; (80025fc <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025d8:	fa22 f201 	lsr.w	r2, r2, r1
 80025dc:	4908      	ldr	r1, [pc, #32]	; (8002600 <HAL_RCC_GetSysClockFreq+0x64>)
 80025de:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80025e0:	bf48      	it	mi
 80025e2:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80025e6:	fb03 f000 	mul.w	r0, r3, r0
 80025ea:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08006b78 	.word	0x08006b78
 80025f8:	007a1200 	.word	0x007a1200
 80025fc:	003d0900 	.word	0x003d0900
 8002600:	08006b88 	.word	0x08006b88

08002604 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002604:	4a5f      	ldr	r2, [pc, #380]	; (8002784 <HAL_RCC_ClockConfig+0x180>)
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	428b      	cmp	r3, r1
 800260e:	d20b      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	f023 0307 	bic.w	r3, r3, #7
 8002616:	430b      	orrs	r3, r1
 8002618:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4299      	cmp	r1, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
}
 8002626:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	6803      	ldr	r3, [r0, #0]
{
 800262a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262e:	079c      	lsls	r4, r3, #30
 8002630:	d506      	bpl.n	8002640 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002632:	4c55      	ldr	r4, [pc, #340]	; (8002788 <HAL_RCC_ClockConfig+0x184>)
 8002634:	6885      	ldr	r5, [r0, #8]
 8002636:	6862      	ldr	r2, [r4, #4]
 8002638:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800263c:	432a      	orrs	r2, r5
 800263e:	6062      	str	r2, [r4, #4]
 8002640:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	07d9      	lsls	r1, r3, #31
 8002644:	4606      	mov	r6, r0
 8002646:	d531      	bpl.n	80026ac <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002648:	6842      	ldr	r2, [r0, #4]
 800264a:	2a01      	cmp	r2, #1
 800264c:	f000 8087 	beq.w	800275e <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002650:	2a02      	cmp	r2, #2
 8002652:	bf0c      	ite	eq
 8002654:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002658:	2302      	movne	r3, #2
 800265a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265e:	494a      	ldr	r1, [pc, #296]	; (8002788 <HAL_RCC_ClockConfig+0x184>)
 8002660:	6808      	ldr	r0, [r1, #0]
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	4203      	tst	r3, r0
 8002676:	d029      	beq.n	80026cc <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002678:	4d43      	ldr	r5, [pc, #268]	; (8002788 <HAL_RCC_ClockConfig+0x184>)
 800267a:	686b      	ldr	r3, [r5, #4]
 800267c:	f023 0303 	bic.w	r3, r3, #3
 8002680:	4313      	orrs	r3, r2
 8002682:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002684:	f7fe fc60 	bl	8000f48 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002688:	6873      	ldr	r3, [r6, #4]
 800268a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800268c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	d023      	beq.n	80026dc <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002694:	2b02      	cmp	r3, #2
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa0>
 8002698:	e058      	b.n	800274c <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269a:	f7fe fc55 	bl	8000f48 <HAL_GetTick>
 800269e:	1bc0      	subs	r0, r0, r7
 80026a0:	4540      	cmp	r0, r8
 80026a2:	d859      	bhi.n	8002758 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a4:	686b      	ldr	r3, [r5, #4]
 80026a6:	f013 0f0c 	tst.w	r3, #12
 80026aa:	d1f6      	bne.n	800269a <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80026ac:	4a35      	ldr	r2, [pc, #212]	; (8002784 <HAL_RCC_ClockConfig+0x180>)
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	429c      	cmp	r4, r3
 80026b6:	d217      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	f023 0307 	bic.w	r3, r3, #7
 80026be:	4323      	orrs	r3, r4
 80026c0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026c2:	6813      	ldr	r3, [r2, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	429c      	cmp	r4, r3
 80026ca:	d00d      	beq.n	80026e8 <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 80026cc:	2001      	movs	r0, #1
 80026ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d2:	f7fe fc39 	bl	8000f48 <HAL_GetTick>
 80026d6:	1bc0      	subs	r0, r0, r7
 80026d8:	4540      	cmp	r0, r8
 80026da:	d83d      	bhi.n	8002758 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026dc:	686b      	ldr	r3, [r5, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d1f5      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
 80026e6:	e7e1      	b.n	80026ac <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	6833      	ldr	r3, [r6, #0]
 80026ea:	075a      	lsls	r2, r3, #29
 80026ec:	d506      	bpl.n	80026fc <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ee:	4926      	ldr	r1, [pc, #152]	; (8002788 <HAL_RCC_ClockConfig+0x184>)
 80026f0:	68f0      	ldr	r0, [r6, #12]
 80026f2:	684a      	ldr	r2, [r1, #4]
 80026f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026f8:	4302      	orrs	r2, r0
 80026fa:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	071b      	lsls	r3, r3, #28
 80026fe:	d507      	bpl.n	8002710 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002700:	4a21      	ldr	r2, [pc, #132]	; (8002788 <HAL_RCC_ClockConfig+0x184>)
 8002702:	6931      	ldr	r1, [r6, #16]
 8002704:	6853      	ldr	r3, [r2, #4]
 8002706:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800270a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800270e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002710:	f7ff ff44 	bl	800259c <HAL_RCC_GetSysClockFreq>
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_RCC_ClockConfig+0x184>)
 8002716:	4601      	mov	r1, r0
 8002718:	22f0      	movs	r2, #240	; 0xf0
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	fa92 f2a2 	rbit	r2, r2
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002728:	40d3      	lsrs	r3, r2
 800272a:	4818      	ldr	r0, [pc, #96]	; (800278c <HAL_RCC_ClockConfig+0x188>)
 800272c:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_RCC_ClockConfig+0x18c>)
 800272e:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002730:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002732:	fa21 f303 	lsr.w	r3, r1, r3
 8002736:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002738:	f7fe fbd6 	bl	8000ee8 <HAL_InitTick>
  return HAL_OK;
 800273c:	2000      	movs	r0, #0
}
 800273e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002742:	f7fe fc01 	bl	8000f48 <HAL_GetTick>
 8002746:	1bc0      	subs	r0, r0, r7
 8002748:	4540      	cmp	r0, r8
 800274a:	d805      	bhi.n	8002758 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274c:	686b      	ldr	r3, [r5, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d1f5      	bne.n	8002742 <HAL_RCC_ClockConfig+0x13e>
 8002756:	e7a9      	b.n	80026ac <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 8002758:	2003      	movs	r0, #3
 800275a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800275e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002762:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4908      	ldr	r1, [pc, #32]	; (8002788 <HAL_RCC_ClockConfig+0x184>)
 8002768:	6809      	ldr	r1, [r1, #0]
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	420b      	tst	r3, r1
 800277c:	f47f af7c 	bne.w	8002678 <HAL_RCC_ClockConfig+0x74>
 8002780:	e7a4      	b.n	80026cc <HAL_RCC_ClockConfig+0xc8>
 8002782:	bf00      	nop
 8002784:	40022000 	.word	0x40022000
 8002788:	40021000 	.word	0x40021000
 800278c:	08006bcc 	.word	0x08006bcc
 8002790:	20000000 	.word	0x20000000

08002794 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002794:	4b01      	ldr	r3, [pc, #4]	; (800279c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	fa92 f2a2 	rbit	r2, r2
 80027ac:	fab2 f282 	clz	r2, r2
 80027b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027b4:	40d3      	lsrs	r3, r2
 80027b6:	4904      	ldr	r1, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	6810      	ldr	r0, [r2, #0]
}    
 80027be:	40d8      	lsrs	r0, r3
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08006bdc 	.word	0x08006bdc
 80027cc:	20000000 	.word	0x20000000

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	fa92 f2a2 	rbit	r2, r2
 80027dc:	fab2 f282 	clz	r2, r2
 80027e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027e4:	40d3      	lsrs	r3, r2
 80027e6:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	6810      	ldr	r0, [r2, #0]
} 
 80027ee:	40d8      	lsrs	r0, r3
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08006bdc 	.word	0x08006bdc
 80027fc:	20000000 	.word	0x20000000

08002800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002804:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002806:	6800      	ldr	r0, [r0, #0]
 8002808:	03c5      	lsls	r5, r0, #15
{
 800280a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800280c:	d538      	bpl.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	00d1      	lsls	r1, r2, #3
 8002814:	d567      	bpl.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4d59      	ldr	r5, [pc, #356]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002818:	682b      	ldr	r3, [r5, #0]
 800281a:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 800281c:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	d570      	bpl.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002822:	4d55      	ldr	r5, [pc, #340]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002824:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002826:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800282a:	d01f      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800282c:	6861      	ldr	r1, [r4, #4]
 800282e:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8002832:	4293      	cmp	r3, r2
 8002834:	d01b      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002836:	6a29      	ldr	r1, [r5, #32]
 8002838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800283c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002840:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002844:	4f4e      	ldr	r7, [pc, #312]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002846:	fab2 f282 	clz	r2, r2
 800284a:	443a      	add	r2, r7
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	f04f 0e01 	mov.w	lr, #1
 8002852:	f8c2 e000 	str.w	lr, [r2]
 8002856:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	443b      	add	r3, r7
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002864:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002866:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8002868:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800286a:	d461      	bmi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800286c:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800286e:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002870:	6a13      	ldr	r3, [r2, #32]
 8002872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002876:	430b      	orrs	r3, r1
 8002878:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800287a:	2e00      	cmp	r6, #0
 800287c:	d153      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x126>
 800287e:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002880:	07c5      	lsls	r5, r0, #31
 8002882:	d506      	bpl.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002884:	4a3c      	ldr	r2, [pc, #240]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002886:	68a1      	ldr	r1, [r4, #8]
 8002888:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	430b      	orrs	r3, r1
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002892:	0681      	lsls	r1, r0, #26
 8002894:	d506      	bpl.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002896:	4a38      	ldr	r2, [pc, #224]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002898:	68e1      	ldr	r1, [r4, #12]
 800289a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800289c:	f023 0310 	bic.w	r3, r3, #16
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028a4:	0602      	lsls	r2, r0, #24
 80028a6:	d506      	bpl.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a8:	4a33      	ldr	r2, [pc, #204]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80028aa:	6921      	ldr	r1, [r4, #16]
 80028ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80028ae:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80028b2:	430b      	orrs	r3, r1
 80028b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028b6:	04c3      	lsls	r3, r0, #19
 80028b8:	d40d      	bmi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80028ba:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80028be:	d007      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80028c2:	69a1      	ldr	r1, [r4, #24]
 80028c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028ce:	2000      	movs	r0, #0
}
 80028d0:	b003      	add	sp, #12
 80028d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80028d8:	6961      	ldr	r1, [r4, #20]
 80028da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	e7e9      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4d24      	ldr	r5, [pc, #144]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028ee:	61da      	str	r2, [r3, #28]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 80028fe:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	d48e      	bmi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800290c:	f7fe fb1c 	bl	8000f48 <HAL_GetTick>
 8002910:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	05db      	lsls	r3, r3, #23
 8002916:	d484      	bmi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002918:	f7fe fb16 	bl	8000f48 <HAL_GetTick>
 800291c:	1bc0      	subs	r0, r0, r7
 800291e:	2864      	cmp	r0, #100	; 0x64
 8002920:	d9f7      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
 8002924:	e7d4      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	69d3      	ldr	r3, [r2, #28]
 8002928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292c:	61d3      	str	r3, [r2, #28]
 800292e:	e7a6      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8002932:	f7fe fb09 	bl	8000f48 <HAL_GetTick>
 8002936:	f04f 0902 	mov.w	r9, #2
 800293a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e014      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800293e:	fa99 f3a9 	rbit	r3, r9
 8002942:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002944:	fa99 f3a9 	rbit	r3, r9
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	fa07 f303 	lsl.w	r3, r7, r3
 8002954:	4213      	tst	r3, r2
 8002956:	d189      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe faf6 	bl	8000f48 <HAL_GetTick>
 800295c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002960:	eba0 0008 	sub.w	r0, r0, r8
 8002964:	4298      	cmp	r0, r3
 8002966:	d8dc      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002968:	fa99 f3a9 	rbit	r3, r9
 800296c:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0e4      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8002974:	6a2a      	ldr	r2, [r5, #32]
 8002976:	e7e5      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002978:	40021000 	.word	0x40021000
 800297c:	40007000 	.word	0x40007000
 8002980:	10908100 	.word	0x10908100

08002984 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002984:	6803      	ldr	r3, [r0, #0]
{
 8002986:	b5f0      	push	{r4, r5, r6, r7, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002988:	6a9d      	ldr	r5, [r3, #40]	; 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800298a:	691c      	ldr	r4, [r3, #16]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 800298c:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800298e:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002990:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002994:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002998:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800299a:	f3c3 2706 	ubfx	r7, r3, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800299e:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80029a2:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80029a4:	f000 0e40 	and.w	lr, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80029a8:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80029ac:	608c      	str	r4, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80029ae:	f881 e003 	strb.w	lr, [r1, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80029b2:	700e      	strb	r6, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80029b4:	704f      	strb	r7, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80029b6:	708b      	strb	r3, [r1, #2]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80029b8:	b9ba      	cbnz	r2, 80029ea <HAL_RTC_GetTime+0x66>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80029ba:	093d      	lsrs	r5, r7, #4
 80029bc:	091c      	lsrs	r4, r3, #4
 80029be:	0936      	lsrs	r6, r6, #4
 80029c0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80029c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80029c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 80029cc:	f000 000f 	and.w	r0, r0, #15
 80029d0:	f007 070f 	and.w	r7, r7, #15
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80029dc:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 80029e0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80029e4:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80029e6:	704d      	strb	r5, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80029e8:	708c      	strb	r4, [r1, #2]
}
 80029ea:	2000      	movs	r0, #0
 80029ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ee:	bf00      	nop

080029f0 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80029f0:	6803      	ldr	r3, [r0, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
{
 80029fc:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80029fe:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a02:	b2dd      	uxtb	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002a04:	f3c3 3742 	ubfx	r7, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002a08:	f004 061f 	and.w	r6, r4, #31
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002a0c:	0c1b      	lsrs	r3, r3, #16
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002a0e:	700f      	strb	r7, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002a10:	704e      	strb	r6, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002a12:	70cb      	strb	r3, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a14:	708d      	strb	r5, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8002a16:	b9ba      	cbnz	r2, 8002a48 <HAL_RTC_GetDate+0x58>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002a18:	0936      	lsrs	r6, r6, #4
 8002a1a:	0928      	lsrs	r0, r5, #4
 8002a1c:	091a      	lsrs	r2, r3, #4
 8002a1e:	00b7      	lsls	r7, r6, #2
 8002a20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8002a24:	f004 040f 	and.w	r4, r4, #15
 8002a28:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002a2c:	443e      	add	r6, r7
 8002a2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8002a3a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8002a3e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002a42:	7088      	strb	r0, [r1, #2]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a44:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a46:	70cb      	strb	r3, [r1, #3]
}
 8002a48:	2000      	movs	r0, #0
 8002a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a50:	6802      	ldr	r2, [r0, #0]
{
 8002a52:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a54:	68d3      	ldr	r3, [r2, #12]
 8002a56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a5a:	60d3      	str	r3, [r2, #12]
{
 8002a5c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002a5e:	f7fe fa73 	bl	8000f48 <HAL_GetTick>
 8002a62:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a64:	e005      	b.n	8002a72 <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002a66:	f7fe fa6f 	bl	8000f48 <HAL_GetTick>
 8002a6a:	1b40      	subs	r0, r0, r5
 8002a6c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a70:	d805      	bhi.n	8002a7e <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	069b      	lsls	r3, r3, #26
 8002a78:	d5f5      	bpl.n	8002a66 <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8002a7e:	2003      	movs	r0, #3
}
 8002a80:	bd38      	pop	{r3, r4, r5, pc}
 8002a82:	bf00      	nop

08002a84 <RTC_EnterInitMode>:
{
 8002a84:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a86:	6803      	ldr	r3, [r0, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	0652      	lsls	r2, r2, #25
 8002a8c:	d501      	bpl.n	8002a92 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8002a8e:	2000      	movs	r0, #0
 8002a90:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a92:	f04f 32ff 	mov.w	r2, #4294967295
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fa55 	bl	8000f48 <HAL_GetTick>
 8002a9e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	065b      	lsls	r3, r3, #25
 8002aa6:	d4f2      	bmi.n	8002a8e <RTC_EnterInitMode+0xa>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002aa8:	f7fe fa4e 	bl	8000f48 <HAL_GetTick>
 8002aac:	1b40      	subs	r0, r0, r5
 8002aae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ab2:	d9f5      	bls.n	8002aa0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002ab4:	2003      	movs	r0, #3
}
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}

08002ab8 <HAL_RTC_Init>:
{
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hrtc == NULL)
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d050      	beq.n	8002b60 <HAL_RTC_Init+0xa8>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002abe:	7f43      	ldrb	r3, [r0, #29]
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d03f      	beq.n	8002b4a <HAL_RTC_Init+0x92>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aca:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002acc:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ace:	21ca      	movs	r1, #202	; 0xca
 8002ad0:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002ad2:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ad4:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ad6:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ada:	f7ff ffd3 	bl	8002a84 <RTC_EnterInitMode>
 8002ade:	4605      	mov	r5, r0
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d12a      	bne.n	8002b3a <HAL_RTC_Init+0x82>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ae4:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ae6:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ae8:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002aea:	6927      	ldr	r7, [r4, #16]
 8002aec:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002aee:	68e0      	ldr	r0, [r4, #12]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002af0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8002af4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002af8:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002afa:	6899      	ldr	r1, [r3, #8]
 8002afc:	433a      	orrs	r2, r7
 8002afe:	4332      	orrs	r2, r6
 8002b00:	430a      	orrs	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b04:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68a1      	ldr	r1, [r4, #8]
 8002b0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b16:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	0692      	lsls	r2, r2, #26
 8002b1c:	d519      	bpl.n	8002b52 <HAL_RTC_Init+0x9a>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002b1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002b20:	69a6      	ldr	r6, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002b22:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002b26:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b2a:	20ff      	movs	r0, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002b2c:	4332      	orrs	r2, r6
    hrtc->State = HAL_RTC_STATE_READY;
 8002b2e:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b32:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002b34:	7761      	strb	r1, [r4, #29]
}
 8002b36:	4628      	mov	r0, r5
 8002b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b3a:	6822      	ldr	r2, [r4, #0]
 8002b3c:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3e:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002b40:	2501      	movs	r5, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b42:	6251      	str	r1, [r2, #36]	; 0x24
}
 8002b44:	4628      	mov	r0, r5
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b46:	7763      	strb	r3, [r4, #29]
}
 8002b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002b4a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002b4c:	f002 fb90 	bl	8005270 <HAL_RTC_MspInit>
 8002b50:	e7bb      	b.n	8002aca <HAL_RTC_Init+0x12>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff ff7c 	bl	8002a50 <HAL_RTC_WaitForSynchro>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_RTC_Init+0x82>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	e7de      	b.n	8002b1e <HAL_RTC_Init+0x66>
     return HAL_ERROR;
 8002b60:	2501      	movs	r5, #1
}
 8002b62:	4628      	mov	r0, r5
 8002b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b66:	bf00      	nop

08002b68 <HAL_RTC_SetTime>:
{
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002b6a:	7f03      	ldrb	r3, [r0, #28]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d07b      	beq.n	8002c68 <HAL_RTC_SetTime+0x100>
 8002b70:	460e      	mov	r6, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b72:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002b74:	2101      	movs	r1, #1
 8002b76:	7701      	strb	r1, [r0, #28]
 8002b78:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b7a:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b7c:	6801      	ldr	r1, [r0, #0]
  if(Format == RTC_FORMAT_BIN)
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d039      	beq.n	8002bf6 <HAL_RTC_SetTime+0x8e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b82:	688c      	ldr	r4, [r1, #8]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b84:	7870      	ldrb	r0, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b86:	7832      	ldrb	r2, [r6, #0]
              ((uint32_t)sTime->Seconds) | \
 8002b88:	78b3      	ldrb	r3, [r6, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b8a:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8002b8e:	bf14      	ite	ne
 8002b90:	78f4      	ldrbne	r4, [r6, #3]
      sTime->TimeFormat = 0x00U;
 8002b92:	70f4      	strbeq	r4, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b94:	ea4f 2000 	mov.w	r0, r0, lsl #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b98:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002b9c:	bf18      	it	ne
 8002b9e:	0424      	lslne	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ba0:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ba2:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ba4:	22ca      	movs	r2, #202	; 0xca
 8002ba6:	2353      	movs	r3, #83	; 0x53
 8002ba8:	624a      	str	r2, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002baa:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bac:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bae:	f7ff ff69 	bl	8002a84 <RTC_EnterInitMode>
 8002bb2:	4607      	mov	r7, r0
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d15a      	bne.n	8002c6e <HAL_RTC_SetTime+0x106>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bb8:	682b      	ldr	r3, [r5, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bba:	68f2      	ldr	r2, [r6, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bbc:	f004 307f 	and.w	r0, r4, #2139062143	; 0x7f7f7f7f
 8002bc0:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bc4:	6934      	ldr	r4, [r6, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bc6:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002bce:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	4322      	orrs	r2, r4
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bde:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	0692      	lsls	r2, r2, #26
 8002be4:	d54d      	bpl.n	8002c82 <HAL_RTC_SetTime+0x11a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002be6:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8002be8:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc); 
 8002bea:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bec:	6258      	str	r0, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002bee:	7769      	strb	r1, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 8002bf0:	772a      	strb	r2, [r5, #28]
}
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bf6:	688f      	ldr	r7, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002bf8:	7830      	ldrb	r0, [r6, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bfa:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002bfe:	bf16      	itet	ne
 8002c00:	78f7      	ldrbne	r7, [r6, #3]
      sTime->TimeFormat = 0x00U;
 8002c02:	70f7      	strbeq	r7, [r6, #3]
 8002c04:	043f      	lslne	r7, r7, #16
  while(Value >= 10U)
 8002c06:	2809      	cmp	r0, #9
 8002c08:	f04f 0400 	mov.w	r4, #0
 8002c0c:	d907      	bls.n	8002c1e <HAL_RTC_SetTime+0xb6>
    Value -= 10U;
 8002c0e:	380a      	subs	r0, #10
 8002c10:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002c12:	2809      	cmp	r0, #9
    bcdhigh++;
 8002c14:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 8002c18:	d8f9      	bhi.n	8002c0e <HAL_RTC_SetTime+0xa6>
 8002c1a:	0124      	lsls	r4, r4, #4
 8002c1c:	b2e4      	uxtb	r4, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c1e:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c20:	4320      	orrs	r0, r4
  while(Value >= 10U)
 8002c22:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c24:	ea4f 4400 	mov.w	r4, r0, lsl #16
  while(Value >= 10U)
 8002c28:	d939      	bls.n	8002c9e <HAL_RTC_SetTime+0x136>
 8002c2a:	2000      	movs	r0, #0
    Value -= 10U;
 8002c2c:	3b0a      	subs	r3, #10
 8002c2e:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002c30:	2b09      	cmp	r3, #9
    bcdhigh++;
 8002c32:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002c36:	d8f9      	bhi.n	8002c2c <HAL_RTC_SetTime+0xc4>
 8002c38:	0100      	lsls	r0, r0, #4
 8002c3a:	fa5f fe80 	uxtb.w	lr, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c3e:	78b0      	ldrb	r0, [r6, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c40:	ea43 030e 	orr.w	r3, r3, lr
  while(Value >= 10U)
 8002c44:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c46:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 8002c4a:	d92b      	bls.n	8002ca4 <HAL_RTC_SetTime+0x13c>
    Value -= 10U;
 8002c4c:	380a      	subs	r0, #10
 8002c4e:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002c50:	2809      	cmp	r0, #9
    bcdhigh++;
 8002c52:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8002c56:	d8f9      	bhi.n	8002c4c <HAL_RTC_SetTime+0xe4>
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c5c:	433c      	orrs	r4, r7
 8002c5e:	4323      	orrs	r3, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c60:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c62:	ea43 0400 	orr.w	r4, r3, r0
 8002c66:	e79d      	b.n	8002ba4 <HAL_RTC_SetTime+0x3c>
  __HAL_LOCK(hrtc);
 8002c68:	2702      	movs	r7, #2
}
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c6e:	6829      	ldr	r1, [r5, #0]
 8002c70:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c72:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8002c74:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002c76:	2701      	movs	r7, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c78:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c7a:	776a      	strb	r2, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002c7c:	772b      	strb	r3, [r5, #28]
}
 8002c7e:	4638      	mov	r0, r7
 8002c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c82:	4628      	mov	r0, r5
 8002c84:	f7ff fee4 	bl	8002a50 <HAL_RTC_WaitForSynchro>
 8002c88:	b908      	cbnz	r0, 8002c8e <HAL_RTC_SetTime+0x126>
 8002c8a:	682b      	ldr	r3, [r5, #0]
 8002c8c:	e7ab      	b.n	8002be6 <HAL_RTC_SetTime+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002c8e:	682a      	ldr	r2, [r5, #0]
 8002c90:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c92:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002c94:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002c96:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c98:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8002c9a:	2701      	movs	r7, #1
 8002c9c:	e7a9      	b.n	8002bf2 <HAL_RTC_SetTime+0x8a>
  while(Value >= 10U)
 8002c9e:	f04f 0e00 	mov.w	lr, #0
 8002ca2:	e7cc      	b.n	8002c3e <HAL_RTC_SetTime+0xd6>
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	e7d9      	b.n	8002c5c <HAL_RTC_SetTime+0xf4>

08002ca8 <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 8002ca8:	7f03      	ldrb	r3, [r0, #28]
 8002caa:	2b01      	cmp	r3, #1
{
 8002cac:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002cae:	d063      	beq.n	8002d78 <HAL_RTC_SetDate+0xd0>
 8002cb0:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002cb2:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002cb8:	7763      	strb	r3, [r4, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002cba:	b34a      	cbz	r2, 8002d10 <HAL_RTC_SetDate+0x68>
                  (((uint32_t)sDate->Month) << 8U) | \
 8002cbc:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cbe:	78ca      	ldrb	r2, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 8002cc0:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002cc2:	780d      	ldrb	r5, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002cc4:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cc6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002cca:	4318      	orrs	r0, r3
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ccc:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	21ca      	movs	r1, #202	; 0xca
 8002cd4:	2253      	movs	r2, #83	; 0x53
 8002cd6:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cd8:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cdc:	f7ff fed2 	bl	8002a84 <RTC_EnterInitMode>
 8002ce0:	4606      	mov	r6, r0
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d14b      	bne.n	8002d7e <HAL_RTC_SetDate+0xd6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002cec:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002cf0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	0692      	lsls	r2, r2, #26
 8002cfe:	d54e      	bpl.n	8002d9e <HAL_RTC_SetDate+0xf6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d00:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d02:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 8002d04:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d06:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d08:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002d0a:	7722      	strb	r2, [r4, #28]
}
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d10:	784e      	ldrb	r6, [r1, #1]
 8002d12:	06f0      	lsls	r0, r6, #27
 8002d14:	d43d      	bmi.n	8002d92 <HAL_RTC_SetDate+0xea>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d16:	78cb      	ldrb	r3, [r1, #3]
  while(Value >= 10U)
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	f04f 0000 	mov.w	r0, #0
 8002d1e:	d907      	bls.n	8002d30 <HAL_RTC_SetDate+0x88>
    Value -= 10U;
 8002d20:	3b0a      	subs	r3, #10
 8002d22:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002d24:	2b09      	cmp	r3, #9
    bcdhigh++;
 8002d26:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002d2a:	d8f9      	bhi.n	8002d20 <HAL_RTC_SetDate+0x78>
 8002d2c:	0100      	lsls	r0, r0, #4
 8002d2e:	b2c0      	uxtb	r0, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d30:	4303      	orrs	r3, r0
  while(Value >= 10U)
 8002d32:	2e09      	cmp	r6, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d34:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 8002d38:	d93f      	bls.n	8002dba <HAL_RTC_SetDate+0x112>
 8002d3a:	2000      	movs	r0, #0
    Value -= 10U;
 8002d3c:	f1a6 050a 	sub.w	r5, r6, #10
 8002d40:	b2ee      	uxtb	r6, r5
  while(Value >= 10U)
 8002d42:	2e09      	cmp	r6, #9
    bcdhigh++;
 8002d44:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002d48:	d8f8      	bhi.n	8002d3c <HAL_RTC_SetDate+0x94>
 8002d4a:	0105      	lsls	r5, r0, #4
 8002d4c:	b2ed      	uxtb	r5, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002d4e:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d50:	4335      	orrs	r5, r6
  while(Value >= 10U)
 8002d52:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d54:	ea4f 2505 	mov.w	r5, r5, lsl #8
  while(Value >= 10U)
 8002d58:	d931      	bls.n	8002dbe <HAL_RTC_SetDate+0x116>
    Value -= 10U;
 8002d5a:	380a      	subs	r0, #10
 8002d5c:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002d5e:	2809      	cmp	r0, #9
    bcdhigh++;
 8002d60:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8002d64:	d8f9      	bhi.n	8002d5a <HAL_RTC_SetDate+0xb2>
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002d6a:	7809      	ldrb	r1, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d6c:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8002d70:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002d72:	4310      	orrs	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d74:	4305      	orrs	r5, r0
 8002d76:	e7ab      	b.n	8002cd0 <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 8002d78:	2602      	movs	r6, #2
}
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d7e:	6821      	ldr	r1, [r4, #0]
 8002d80:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d82:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8002d84:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002d86:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d88:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d8a:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002d8c:	7723      	strb	r3, [r4, #28]
}
 8002d8e:	4630      	mov	r0, r6
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d92:	f026 0510 	bic.w	r5, r6, #16
 8002d96:	350a      	adds	r5, #10
 8002d98:	b2ee      	uxtb	r6, r5
 8002d9a:	704e      	strb	r6, [r1, #1]
 8002d9c:	e7bb      	b.n	8002d16 <HAL_RTC_SetDate+0x6e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff fe56 	bl	8002a50 <HAL_RTC_WaitForSynchro>
 8002da4:	b908      	cbnz	r0, 8002daa <HAL_RTC_SetDate+0x102>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	e7aa      	b.n	8002d00 <HAL_RTC_SetDate+0x58>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dae:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002db0:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002db2:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002db4:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002db6:	2601      	movs	r6, #1
 8002db8:	e7a8      	b.n	8002d0c <HAL_RTC_SetDate+0x64>
  while(Value >= 10U)
 8002dba:	2500      	movs	r5, #0
 8002dbc:	e7c7      	b.n	8002d4e <HAL_RTC_SetDate+0xa6>
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	e7d3      	b.n	8002d6a <HAL_RTC_SetDate+0xc2>
 8002dc2:	bf00      	nop

08002dc4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dc8:	7f03      	ldrb	r3, [r0, #28]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d058      	beq.n	8002e80 <HAL_RTCEx_SetWakeUpTimer_IT+0xbc>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dce:	6803      	ldr	r3, [r0, #0]
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	4617      	mov	r7, r2
 8002dd4:	4688      	mov	r8, r1
 8002dd6:	2253      	movs	r2, #83	; 0x53
 8002dd8:	21ca      	movs	r1, #202	; 0xca
  __HAL_LOCK(hrtc);
 8002dda:	2401      	movs	r4, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ddc:	2002      	movs	r0, #2
 8002dde:	7768      	strb	r0, [r5, #29]
  __HAL_LOCK(hrtc);
 8002de0:	772c      	strb	r4, [r5, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de2:	6259      	str	r1, [r3, #36]	; 0x24
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	0551      	lsls	r1, r2, #21
 8002dea:	d50d      	bpl.n	8002e08 <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
    tickstart = HAL_GetTick();
 8002dec:	f7fe f8ac 	bl	8000f48 <HAL_GetTick>
 8002df0:	4604      	mov	r4, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002df2:	e005      	b.n	8002e00 <HAL_RTCEx_SetWakeUpTimer_IT+0x3c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002df4:	f7fe f8a8 	bl	8000f48 <HAL_GetTick>
 8002df8:	1b00      	subs	r0, r0, r4
 8002dfa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dfe:	d84b      	bhi.n	8002e98 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	0752      	lsls	r2, r2, #29
 8002e06:	d4f5      	bmi.n	8002df4 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0e:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e18:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002e1a:	f7fe f895 	bl	8000f48 <HAL_GetTick>
 8002e1e:	4681      	mov	r9, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002e20:	e006      	b.n	8002e30 <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002e22:	f7fe f891 	bl	8000f48 <HAL_GetTick>
 8002e26:	eba0 0009 	sub.w	r0, r0, r9
 8002e2a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e2e:	d82a      	bhi.n	8002e86 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002e30:	682e      	ldr	r6, [r5, #0]
 8002e32:	68f4      	ldr	r4, [r6, #12]
 8002e34:	f014 0404 	ands.w	r4, r4, #4
 8002e38:	d0f3      	beq.n	8002e22 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002e3a:	f8c6 8014 	str.w	r8, [r6, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002e3e:	68b2      	ldr	r2, [r6, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002e42:	f022 0207 	bic.w	r2, r2, #7
 8002e46:	60b2      	str	r2, [r6, #8]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002e48:	68b2      	ldr	r2, [r6, #8]
 8002e4a:	4317      	orrs	r7, r2
 8002e4c:	60b7      	str	r7, [r6, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e54:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e5c:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002e5e:	68b3      	ldr	r3, [r6, #8]
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e64:	60b3      	str	r3, [r6, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e66:	68b3      	ldr	r3, [r6, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e68:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e6a:	24ff      	movs	r4, #255	; 0xff
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  hrtc->State = HAL_RTC_STATE_READY;
 8002e70:	2101      	movs	r1, #1
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e72:	60b3      	str	r3, [r6, #8]

  return HAL_OK;
 8002e74:	4610      	mov	r0, r2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e76:	6274      	str	r4, [r6, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002e78:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8002e7a:	772a      	strb	r2, [r5, #28]
  return HAL_OK;
 8002e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8002e80:	2002      	movs	r0, #2
}
 8002e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e86:	682a      	ldr	r2, [r5, #0]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e8a:	21ff      	movs	r1, #255	; 0xff
 8002e8c:	6251      	str	r1, [r2, #36]	; 0x24
      return HAL_TIMEOUT;
 8002e8e:	4618      	mov	r0, r3
      __HAL_UNLOCK(hrtc);
 8002e90:	772c      	strb	r4, [r5, #28]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e92:	776b      	strb	r3, [r5, #29]
      return HAL_TIMEOUT;
 8002e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e98:	6829      	ldr	r1, [r5, #0]
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9c:	20ff      	movs	r0, #255	; 0xff
       __HAL_UNLOCK(hrtc);
 8002e9e:	2200      	movs	r2, #0
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea0:	6248      	str	r0, [r1, #36]	; 0x24
       return HAL_TIMEOUT;
 8002ea2:	4618      	mov	r0, r3
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ea4:	776b      	strb	r3, [r5, #29]
       __HAL_UNLOCK(hrtc);
 8002ea6:	772a      	strb	r2, [r5, #28]
       return HAL_TIMEOUT;
 8002ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002eb0:	6803      	ldr	r3, [r0, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	055b      	lsls	r3, r3, #21
{
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002eba:	d507      	bpl.n	8002ecc <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002ebc:	f001 f924 	bl	8004108 <HAL_RTCEx_WakeUpTimerEventCallback>
    
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	68d3      	ldr	r3, [r2, #12]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002eca:	60d3      	str	r3, [r2, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ecc:	4a03      	ldr	r2, [pc, #12]	; (8002edc <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8002ece:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ed2:	2301      	movs	r3, #1
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ed4:	6151      	str	r1, [r2, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8002ed6:	7763      	strb	r3, [r4, #29]
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	bf00      	nop
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002ee0:	6803      	ldr	r3, [r0, #0]
 8002ee2:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002ee4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop

08002eec <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002eec:	6803      	ldr	r3, [r0, #0]
 8002eee:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ef0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef8:	6803      	ldr	r3, [r0, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop

08002f10 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002f10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d040      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x8a>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	2202      	movs	r2, #2
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f1a:	6803      	ldr	r3, [r0, #0]
{
 8002f1c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002f22:	689d      	ldr	r5, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002f24:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f26:	4a5d      	ldr	r2, [pc, #372]	; (800309c <HAL_TIM_ConfigClockSource+0x18c>)
  switch (sClockSourceConfig->ClockSource)
 8002f28:	2c40      	cmp	r4, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2a:	ea02 0205 	and.w	r2, r2, r5
  __HAL_LOCK(htim);
 8002f2e:	f04f 0501 	mov.w	r5, #1
 8002f32:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8002f36:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f38:	d079      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x11e>
 8002f3a:	d918      	bls.n	8002f6e <HAL_TIM_ConfigClockSource+0x5e>
 8002f3c:	2c70      	cmp	r4, #112	; 0x70
 8002f3e:	d062      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0xf6>
 8002f40:	d92d      	bls.n	8002f9e <HAL_TIM_ConfigClockSource+0x8e>
 8002f42:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002f46:	d057      	beq.n	8002ff8 <HAL_TIM_ConfigClockSource+0xe8>
 8002f48:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8002f4c:	d11c      	bne.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4e:	688a      	ldr	r2, [r1, #8]
 8002f50:	684d      	ldr	r5, [r1, #4]
 8002f52:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002f54:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f56:	432a      	orrs	r2, r5
 8002f58:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f5c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f60:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f62:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6a:	609a      	str	r2, [r3, #8]
    break;
 8002f6c:	e00c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8002f6e:	2c10      	cmp	r4, #16
 8002f70:	d032      	beq.n	8002fd8 <HAL_TIM_ConfigClockSource+0xc8>
 8002f72:	d938      	bls.n	8002fe6 <HAL_TIM_ConfigClockSource+0xd6>
 8002f74:	2c20      	cmp	r4, #32
 8002f76:	d072      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x14e>
 8002f78:	2c30      	cmp	r4, #48	; 0x30
 8002f7a:	d105      	bne.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002f7c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002f82:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8002f86:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8002f88:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002f94:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002f96:	4618      	mov	r0, r3
}
 8002f98:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002f9e:	2c50      	cmp	r4, #80	; 0x50
 8002fa0:	d064      	beq.n	800306c <HAL_TIM_ConfigClockSource+0x15c>
 8002fa2:	2c60      	cmp	r4, #96	; 0x60
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa6:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002fa8:	684d      	ldr	r5, [r1, #4]
 8002faa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fac:	f024 0410 	bic.w	r4, r4, #16
 8002fb0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fbe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc8:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002fca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fd0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	e7d7      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002fd8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fde:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	e7d0      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8002fe6:	2c00      	cmp	r4, #0
 8002fe8:	d1ce      	bne.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002fea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ff0:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	e7c7      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ffe:	f022 0207 	bic.w	r2, r2, #7
 8003002:	609a      	str	r2, [r3, #8]
    break;
 8003004:	e7c0      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003006:	688a      	ldr	r2, [r1, #8]
 8003008:	684d      	ldr	r5, [r1, #4]
 800300a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800300c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800300e:	432a      	orrs	r2, r5
 8003010:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003014:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003018:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800301a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800301c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800301e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003022:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003026:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800302a:	609a      	str	r2, [r3, #8]
    break;
 800302c:	e7ac      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 800302e:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003030:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003032:	684c      	ldr	r4, [r1, #4]
 8003034:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003036:	f026 0601 	bic.w	r6, r6, #1
 800303a:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800303c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800303e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003042:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003046:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800304a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800304c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003050:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003052:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003056:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	e794      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 800305e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003060:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003064:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	e78d      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 800306c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306e:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003070:	684c      	ldr	r4, [r1, #4]
 8003072:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003074:	f026 0601 	bic.w	r6, r6, #1
 8003078:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800307a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003080:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003084:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003088:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800308a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800308c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800308e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003090:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003094:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	e775      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x78>
 800309c:	fffe0088 	.word	0xfffe0088

080030a0 <HAL_TIM_OC_DelayElapsedCallback>:
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop

080030a8 <HAL_TIM_TriggerCallback>:
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop

080030ac <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ac:	6803      	ldr	r3, [r0, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	0791      	lsls	r1, r2, #30
{
 80030b2:	b510      	push	{r4, lr}
 80030b4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030b6:	d502      	bpl.n	80030be <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	0792      	lsls	r2, r2, #30
 80030bc:	d465      	bmi.n	800318a <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	0752      	lsls	r2, r2, #29
 80030c2:	d502      	bpl.n	80030ca <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	0750      	lsls	r0, r2, #29
 80030c8:	d44c      	bmi.n	8003164 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	0711      	lsls	r1, r2, #28
 80030ce:	d502      	bpl.n	80030d6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	0712      	lsls	r2, r2, #28
 80030d4:	d434      	bmi.n	8003140 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	06d0      	lsls	r0, r2, #27
 80030da:	d502      	bpl.n	80030e2 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	06d1      	lsls	r1, r2, #27
 80030e0:	d41e      	bmi.n	8003120 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	07d2      	lsls	r2, r2, #31
 80030e6:	d502      	bpl.n	80030ee <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	07d0      	lsls	r0, r2, #31
 80030ec:	d46b      	bmi.n	80031c6 <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	0611      	lsls	r1, r2, #24
 80030f2:	d502      	bpl.n	80030fa <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	0612      	lsls	r2, r2, #24
 80030f8:	d46d      	bmi.n	80031d6 <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	05d0      	lsls	r0, r2, #23
 80030fe:	d502      	bpl.n	8003106 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	0611      	lsls	r1, r2, #24
 8003104:	d46f      	bmi.n	80031e6 <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	0652      	lsls	r2, r2, #25
 800310a:	d502      	bpl.n	8003112 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	0650      	lsls	r0, r2, #25
 8003110:	d451      	bmi.n	80031b6 <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	0691      	lsls	r1, r2, #26
 8003116:	d502      	bpl.n	800311e <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	0692      	lsls	r2, r2, #26
 800311c:	d443      	bmi.n	80031a6 <HAL_TIM_IRQHandler+0xfa>
 800311e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003120:	f06f 0210 	mvn.w	r2, #16
 8003124:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003126:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003128:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800312a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800312e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003130:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003132:	d06c      	beq.n	800320e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8003134:	f000 ffe2 	bl	80040fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003138:	2200      	movs	r2, #0
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	7722      	strb	r2, [r4, #28]
 800313e:	e7d0      	b.n	80030e2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003140:	f06f 0208 	mvn.w	r2, #8
 8003144:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003146:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003148:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800314a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800314e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003150:	d15a      	bne.n	8003208 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	f7ff ffa5 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff ffa4 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315c:	2200      	movs	r2, #0
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	7722      	strb	r2, [r4, #28]
 8003162:	e7b8      	b.n	80030d6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003164:	f06f 0204 	mvn.w	r2, #4
 8003168:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003172:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003174:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003176:	d144      	bne.n	8003202 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003178:	f7ff ff92 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	4620      	mov	r0, r4
 800317e:	f7ff ff91 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	2200      	movs	r2, #0
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	7722      	strb	r2, [r4, #28]
 8003188:	e79f      	b.n	80030ca <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800318a:	f06f 0202 	mvn.w	r2, #2
 800318e:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003190:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003192:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003194:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003196:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003198:	d02d      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 800319a:	f000 ffaf 	bl	80040fc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	2200      	movs	r2, #0
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	7722      	strb	r2, [r4, #28]
 80031a4:	e78b      	b.n	80030be <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031a6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80031aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031ac:	611a      	str	r2, [r3, #16]
}
 80031ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80031b2:	f000 b8d5 	b.w	8003360 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80031bc:	4620      	mov	r0, r4
 80031be:	f7ff ff73 	bl	80030a8 <HAL_TIM_TriggerCallback>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	e7a5      	b.n	8003112 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031c6:	f06f 0201 	mvn.w	r2, #1
 80031ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f001 facd 	bl	800476c <HAL_TIM_PeriodElapsedCallback>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	e78b      	b.n	80030ee <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 f8c1 	bl	8003364 <HAL_TIMEx_BreakCallback>
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	e789      	b.n	80030fa <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80031ec:	4620      	mov	r0, r4
 80031ee:	f000 f8bb 	bl	8003368 <HAL_TIMEx_Break2Callback>
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	e787      	b.n	8003106 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	f7ff ff53 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f7ff ff52 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003200:	e7cd      	b.n	800319e <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	f000 ff7b 	bl	80040fc <HAL_TIM_IC_CaptureCallback>
 8003206:	e7bc      	b.n	8003182 <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003208:	f000 ff78 	bl	80040fc <HAL_TIM_IC_CaptureCallback>
 800320c:	e7a6      	b.n	800315c <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	f7ff ff47 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003212:	4620      	mov	r0, r4
 8003214:	f7ff ff46 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003218:	e78e      	b.n	8003138 <HAL_TIM_IRQHandler+0x8c>
 800321a:	bf00      	nop

0800321c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800321c:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <TIM_Base_SetConfig+0xb8>)
  tmpcr1 = TIMx->CR1;
 800321e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003220:	4290      	cmp	r0, r2
{
 8003222:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003224:	d04e      	beq.n	80032c4 <TIM_Base_SetConfig+0xa8>
 8003226:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800322a:	d02f      	beq.n	800328c <TIM_Base_SetConfig+0x70>
 800322c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003230:	4290      	cmp	r0, r2
 8003232:	d02b      	beq.n	800328c <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003234:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8003238:	4290      	cmp	r0, r2
 800323a:	d014      	beq.n	8003266 <TIM_Base_SetConfig+0x4a>
 800323c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003240:	4290      	cmp	r0, r2
 8003242:	d010      	beq.n	8003266 <TIM_Base_SetConfig+0x4a>
 8003244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003248:	4290      	cmp	r0, r2
 800324a:	d00c      	beq.n	8003266 <TIM_Base_SetConfig+0x4a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800324c:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003250:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003256:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003258:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800325a:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800325e:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003260:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8003262:	6143      	str	r3, [r0, #20]
}
 8003264:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003266:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003268:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800326a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003274:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003276:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003278:	688b      	ldr	r3, [r1, #8]
 800327a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800327c:	680b      	ldr	r3, [r1, #0]
 800327e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003280:	690b      	ldr	r3, [r1, #16]
 8003282:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003284:	2301      	movs	r3, #1
 8003286:	6143      	str	r3, [r0, #20]
}
 8003288:	bcf0      	pop	{r4, r5, r6, r7}
 800328a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800328c:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328e:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003290:	694a      	ldr	r2, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003292:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003294:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800329a:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80032a8:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <TIM_Base_SetConfig+0xbc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ac:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80032ae:	4298      	cmp	r0, r3
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80032b0:	6285      	str	r5, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80032b2:	d0e5      	beq.n	8003280 <TIM_Base_SetConfig+0x64>
 80032b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032b8:	4298      	cmp	r0, r3
 80032ba:	d0e1      	beq.n	8003280 <TIM_Base_SetConfig+0x64>
  TIMx->EGR = TIM_EGR_UG;
 80032bc:	2301      	movs	r3, #1
 80032be:	6143      	str	r3, [r0, #20]
}
 80032c0:	bcf0      	pop	{r4, r5, r6, r7}
 80032c2:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80032c4:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c6:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c8:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032ce:	432b      	orrs	r3, r5
 80032d0:	e7cb      	b.n	800326a <TIM_Base_SetConfig+0x4e>
 80032d2:	bf00      	nop
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40014400 	.word	0x40014400

080032dc <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80032dc:	b1b8      	cbz	r0, 800330e <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 80032de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 80032e2:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80032e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032e8:	4604      	mov	r4, r0
 80032ea:	b15b      	cbz	r3, 8003304 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	1d21      	adds	r1, r4, #4
 80032f6:	f7ff ff91 	bl	800321c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003300:	2000      	movs	r0, #0
 8003302:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003304:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003308:	f001 ffd2 	bl	80052b0 <HAL_TIM_Base_MspInit>
 800330c:	e7ee      	b.n	80032ec <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800330e:	2001      	movs	r0, #1
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop

08003314 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003314:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d016      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x36>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800331c:	6802      	ldr	r2, [r0, #0]
{
 800331e:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003320:	4d0e      	ldr	r5, [pc, #56]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8003322:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003324:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003326:	42aa      	cmp	r2, r5
 8003328:	d012      	beq.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332a:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332c:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003332:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003336:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8003338:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800333a:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 800333c:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 800333e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8003340:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  
  return HAL_OK;
} 
 8003344:	4620      	mov	r0, r4
 8003346:	bc70      	pop	{r4, r5, r6}
 8003348:	4770      	bx	lr
  __HAL_LOCK(htim);
 800334a:	2302      	movs	r3, #2
} 
 800334c:	4618      	mov	r0, r3
 800334e:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003350:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003356:	432b      	orrs	r3, r5
 8003358:	e7e7      	b.n	800332a <HAL_TIMEx_MasterConfigSynchronization+0x16>
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00

08003360 <HAL_TIMEx_CommutationCallback>:
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <HAL_TIMEx_BreakCallback>:
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop

0800336c <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800336c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003370:	2b20      	cmp	r3, #32
 8003372:	d001      	beq.n	8003378 <HAL_UART_Transmit_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003374:	2002      	movs	r0, #2
 8003376:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003378:	b1c9      	cbz	r1, 80033ae <HAL_UART_Transmit_IT+0x42>
 800337a:	b1c2      	cbz	r2, 80033ae <HAL_UART_Transmit_IT+0x42>
    __HAL_LOCK(huart);
 800337c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003380:	2b01      	cmp	r3, #1
 8003382:	d0f7      	beq.n	8003374 <HAL_UART_Transmit_IT+0x8>
{
 8003384:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003386:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003388:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 800338a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338e:	2421      	movs	r4, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003392:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003396:	682c      	ldr	r4, [r5, #0]
    huart->pTxBuffPtr = pData;
 8003398:	64c1      	str	r1, [r0, #76]	; 0x4c
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800339a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 800339e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    __HAL_UNLOCK(huart);
 80033a2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 80033a6:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80033a8:	602c      	str	r4, [r5, #0]
  }
}
 80033aa:	bc30      	pop	{r4, r5}
 80033ac:	4770      	bx	lr
      return HAL_ERROR;
 80033ae:	2001      	movs	r0, #1
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop

080033b4 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80033b4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2002      	movs	r0, #2
  }
}
 80033be:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80033c0:	b349      	cbz	r1, 8003416 <HAL_UART_Receive_IT+0x62>
 80033c2:	b342      	cbz	r2, 8003416 <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 80033c4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d0f7      	beq.n	80033bc <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 80033cc:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 80033ce:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 80033d4:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 80033d8:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80033dc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 80033e0:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 80033e4:	d027      	beq.n	8003436 <HAL_UART_Receive_IT+0x82>
 80033e6:	b9c3      	cbnz	r3, 800341a <HAL_UART_Receive_IT+0x66>
 80033e8:	6903      	ldr	r3, [r0, #16]
 80033ea:	b303      	cbz	r3, 800342e <HAL_UART_Receive_IT+0x7a>
 80033ec:	237f      	movs	r3, #127	; 0x7f
 80033ee:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f2:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033f6:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033fa:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8003400:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003404:	f041 0101 	orr.w	r1, r1, #1
 8003408:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800340a:	6811      	ldr	r1, [r2, #0]
 800340c:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 8003410:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003412:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8003414:	4770      	bx	lr
      return HAL_ERROR;
 8003416:	2001      	movs	r0, #1
 8003418:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800341a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800341e:	d1e8      	bne.n	80033f2 <HAL_UART_Receive_IT+0x3e>
 8003420:	6903      	ldr	r3, [r0, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0e2      	beq.n	80033ec <HAL_UART_Receive_IT+0x38>
 8003426:	233f      	movs	r3, #63	; 0x3f
 8003428:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800342c:	e7e1      	b.n	80033f2 <HAL_UART_Receive_IT+0x3e>
 800342e:	23ff      	movs	r3, #255	; 0xff
 8003430:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003434:	e7dd      	b.n	80033f2 <HAL_UART_Receive_IT+0x3e>
 8003436:	6903      	ldr	r3, [r0, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f8      	bne.n	800342e <HAL_UART_Receive_IT+0x7a>
 800343c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003440:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003444:	e7d5      	b.n	80033f2 <HAL_UART_Receive_IT+0x3e>
 8003446:	bf00      	nop

08003448 <HAL_UART_TxCpltCallback>:
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop

0800344c <HAL_UART_ErrorCallback>:
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop

08003450 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003450:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003452:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003454:	2200      	movs	r2, #0
 8003456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 800345a:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800345c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003460:	f7ff fff4 	bl	800344c <HAL_UART_ErrorCallback>
 8003464:	bd08      	pop	{r3, pc}
 8003466:	bf00      	nop

08003468 <UART_SetConfig>:
{
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800346a:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800346c:	6907      	ldr	r7, [r0, #16]
 800346e:	6883      	ldr	r3, [r0, #8]
 8003470:	6946      	ldr	r6, [r0, #20]
 8003472:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003474:	4a62      	ldr	r2, [pc, #392]	; (8003600 <UART_SetConfig+0x198>)
{
 8003476:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003478:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800347a:	6820      	ldr	r0, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800347c:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800347e:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003480:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003482:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003484:	4313      	orrs	r3, r2
 8003486:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003488:	6862      	ldr	r2, [r4, #4]
 800348a:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800348c:	69ab      	ldr	r3, [r5, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800348e:	485d      	ldr	r0, [pc, #372]	; (8003604 <UART_SetConfig+0x19c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003490:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003494:	4332      	orrs	r2, r6
 8003496:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003498:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800349a:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800349c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80034a0:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a2:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80034a4:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a6:	d01b      	beq.n	80034e0 <UART_SetConfig+0x78>
 80034a8:	4b57      	ldr	r3, [pc, #348]	; (8003608 <UART_SetConfig+0x1a0>)
 80034aa:	429c      	cmp	r4, r3
 80034ac:	d00a      	beq.n	80034c4 <UART_SetConfig+0x5c>
 80034ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b2:	429c      	cmp	r4, r3
 80034b4:	d006      	beq.n	80034c4 <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80034ba:	d158      	bne.n	800356e <UART_SetConfig+0x106>
 80034bc:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80034be:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80034c0:	60e3      	str	r3, [r4, #12]
 80034c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80034c8:	d053      	beq.n	8003572 <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034ca:	f7ff f969 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 80034ce:	686b      	ldr	r3, [r5, #4]
 80034d0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80034d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80034d8:	b280      	uxth	r0, r0
 80034da:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034dc:	2000      	movs	r0, #0
        break;
 80034de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e0:	4b4a      	ldr	r3, [pc, #296]	; (800360c <UART_SetConfig+0x1a4>)
 80034e2:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <UART_SetConfig+0x1a8>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ea:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	d051      	beq.n	8003596 <UART_SetConfig+0x12e>
    switch (clocksource)
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d83b      	bhi.n	800356e <UART_SetConfig+0x106>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x94>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	080034cb 	.word	0x080034cb
 8003500:	08003569 	.word	0x08003569
 8003504:	0800354f 	.word	0x0800354f
 8003508:	0800356f 	.word	0x0800356f
 800350c:	08003537 	.word	0x08003537
 8003510:	0800356f 	.word	0x0800356f
 8003514:	0800356f 	.word	0x0800356f
 8003518:	0800356f 	.word	0x0800356f
 800351c:	08003521 	.word	0x08003521
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003520:	686a      	ldr	r2, [r5, #4]
 8003522:	4938      	ldr	r1, [pc, #224]	; (8003604 <UART_SetConfig+0x19c>)
 8003524:	0853      	lsrs	r3, r2, #1
 8003526:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800352a:	fbb3 f3f2 	udiv	r3, r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003532:	2000      	movs	r0, #0
        break;
 8003534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003536:	f7ff f831 	bl	800259c <HAL_RCC_GetSysClockFreq>
 800353a:	686b      	ldr	r3, [r5, #4]
 800353c:	4a31      	ldr	r2, [pc, #196]	; (8003604 <UART_SetConfig+0x19c>)
 800353e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003542:	fbb0 f0f3 	udiv	r0, r0, r3
 8003546:	b280      	uxth	r0, r0
 8003548:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800354a:	2000      	movs	r0, #0
        break;
 800354c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800354e:	686a      	ldr	r2, [r5, #4]
 8003550:	492c      	ldr	r1, [pc, #176]	; (8003604 <UART_SetConfig+0x19c>)
 8003552:	0853      	lsrs	r3, r2, #1
 8003554:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003558:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800355c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003564:	2000      	movs	r0, #0
        break;
 8003566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003568:	f7ff f932 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 800356c:	e7e5      	b.n	800353a <UART_SetConfig+0xd2>
        ret = HAL_ERROR;
 800356e:	2001      	movs	r0, #1
  return ret;
 8003570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003572:	f7ff f915 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003576:	686a      	ldr	r2, [r5, #4]
 8003578:	682c      	ldr	r4, [r5, #0]
 800357a:	0853      	lsrs	r3, r2, #1
 800357c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003580:	fbb0 f0f2 	udiv	r0, r0, r2
 8003584:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8003588:	f020 000f 	bic.w	r0, r0, #15
 800358c:	4303      	orrs	r3, r0
 800358e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003590:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8003592:	60e3      	str	r3, [r4, #12]
 8003594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 8003596:	2b08      	cmp	r3, #8
 8003598:	d890      	bhi.n	80034bc <UART_SetConfig+0x54>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <UART_SetConfig+0x138>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	08003573 	.word	0x08003573
 80035a4:	080035c5 	.word	0x080035c5
 80035a8:	080035ed 	.word	0x080035ed
 80035ac:	080034bd 	.word	0x080034bd
 80035b0:	080035e7 	.word	0x080035e7
 80035b4:	080034bd 	.word	0x080034bd
 80035b8:	080034bd 	.word	0x080034bd
 80035bc:	080034bd 	.word	0x080034bd
 80035c0:	080035cb 	.word	0x080035cb
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80035c4:	f7ff f904 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 80035c8:	e7d5      	b.n	8003576 <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035ca:	686b      	ldr	r3, [r5, #4]
 80035cc:	085a      	lsrs	r2, r3, #1
 80035ce:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80035d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d6:	f3c2 0342 	ubfx	r3, r2, #1, #3
 80035da:	f022 020f 	bic.w	r2, r2, #15
 80035de:	4313      	orrs	r3, r2
 80035e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80035e2:	2000      	movs	r0, #0
        break;
 80035e4:	e76c      	b.n	80034c0 <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035e6:	f7fe ffd9 	bl	800259c <HAL_RCC_GetSysClockFreq>
 80035ea:	e7c4      	b.n	8003576 <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80035ec:	686a      	ldr	r2, [r5, #4]
 80035ee:	0853      	lsrs	r3, r2, #1
 80035f0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80035f4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80035fc:	e7eb      	b.n	80035d6 <UART_SetConfig+0x16e>
 80035fe:	bf00      	nop
 8003600:	efff69f3 	.word	0xefff69f3
 8003604:	40013800 	.word	0x40013800
 8003608:	40004400 	.word	0x40004400
 800360c:	40021000 	.word	0x40021000
 8003610:	08006b98 	.word	0x08006b98

08003614 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003614:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003616:	07da      	lsls	r2, r3, #31
{
 8003618:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800361a:	d506      	bpl.n	800362a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800361c:	6801      	ldr	r1, [r0, #0]
 800361e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003620:	684a      	ldr	r2, [r1, #4]
 8003622:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003626:	4322      	orrs	r2, r4
 8003628:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800362a:	079c      	lsls	r4, r3, #30
 800362c:	d506      	bpl.n	800363c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800362e:	6801      	ldr	r1, [r0, #0]
 8003630:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003632:	684a      	ldr	r2, [r1, #4]
 8003634:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003638:	4322      	orrs	r2, r4
 800363a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800363c:	0759      	lsls	r1, r3, #29
 800363e:	d506      	bpl.n	800364e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003640:	6801      	ldr	r1, [r0, #0]
 8003642:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003644:	684a      	ldr	r2, [r1, #4]
 8003646:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800364a:	4322      	orrs	r2, r4
 800364c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800364e:	071a      	lsls	r2, r3, #28
 8003650:	d506      	bpl.n	8003660 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003652:	6801      	ldr	r1, [r0, #0]
 8003654:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003656:	684a      	ldr	r2, [r1, #4]
 8003658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365c:	4322      	orrs	r2, r4
 800365e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003660:	06dc      	lsls	r4, r3, #27
 8003662:	d506      	bpl.n	8003672 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003664:	6801      	ldr	r1, [r0, #0]
 8003666:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003668:	688a      	ldr	r2, [r1, #8]
 800366a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800366e:	4322      	orrs	r2, r4
 8003670:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003672:	0699      	lsls	r1, r3, #26
 8003674:	d506      	bpl.n	8003684 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003676:	6801      	ldr	r1, [r0, #0]
 8003678:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800367a:	688a      	ldr	r2, [r1, #8]
 800367c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003680:	4322      	orrs	r2, r4
 8003682:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003684:	065a      	lsls	r2, r3, #25
 8003686:	d509      	bpl.n	800369c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003688:	6801      	ldr	r1, [r0, #0]
 800368a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800368c:	684a      	ldr	r2, [r1, #4]
 800368e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003692:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003694:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003698:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800369a:	d00b      	beq.n	80036b4 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	d506      	bpl.n	80036ae <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a0:	6802      	ldr	r2, [r0, #0]
 80036a2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80036a4:	6853      	ldr	r3, [r2, #4]
 80036a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80036aa:	430b      	orrs	r3, r1
 80036ac:	6053      	str	r3, [r2, #4]
}
 80036ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036b2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b4:	684a      	ldr	r2, [r1, #4]
 80036b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80036b8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80036bc:	4322      	orrs	r2, r4
 80036be:	604a      	str	r2, [r1, #4]
 80036c0:	e7ec      	b.n	800369c <UART_AdvFeatureConfig+0x88>
 80036c2:	bf00      	nop

080036c4 <UART_WaitOnFlagUntilTimeout>:
{
 80036c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036c8:	9d08      	ldr	r5, [sp, #32]
 80036ca:	4680      	mov	r8, r0
 80036cc:	460f      	mov	r7, r1
 80036ce:	4616      	mov	r6, r2
 80036d0:	4699      	mov	r9, r3
 80036d2:	f8d8 4000 	ldr.w	r4, [r8]
 80036d6:	e001      	b.n	80036dc <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 80036d8:	1c6b      	adds	r3, r5, #1
 80036da:	d10a      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036dc:	69e0      	ldr	r0, [r4, #28]
 80036de:	ea37 0300 	bics.w	r3, r7, r0
 80036e2:	bf0c      	ite	eq
 80036e4:	2001      	moveq	r0, #1
 80036e6:	2000      	movne	r0, #0
 80036e8:	42b0      	cmp	r0, r6
 80036ea:	d0f5      	beq.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 80036ec:	2000      	movs	r0, #0
}
 80036ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80036f2:	b13d      	cbz	r5, 8003704 <UART_WaitOnFlagUntilTimeout+0x40>
 80036f4:	f7fd fc28 	bl	8000f48 <HAL_GetTick>
 80036f8:	eba0 0009 	sub.w	r0, r0, r9
 80036fc:	4285      	cmp	r5, r0
 80036fe:	d2e8      	bcs.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xe>
 8003700:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800370a:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370c:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800370e:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8003714:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 8003718:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800371a:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800371e:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8003722:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 8003726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800372a:	bf00      	nop

0800372c <UART_CheckIdleState>:
{
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	2500      	movs	r5, #0
{
 8003732:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003734:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8003736:	f7fd fc07 	bl	8000f48 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8003740:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003742:	d40c      	bmi.n	800375e <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	075b      	lsls	r3, r3, #29
 8003748:	d417      	bmi.n	800377a <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 800374a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800374c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800374e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003752:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800375a:	b002      	add	sp, #8
 800375c:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	462a      	mov	r2, r5
 8003766:	4603      	mov	r3, r0
 8003768:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800376c:	4620      	mov	r0, r4
 800376e:	f7ff ffa9 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 8003772:	b180      	cbz	r0, 8003796 <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 8003774:	2003      	movs	r0, #3
}
 8003776:	b002      	add	sp, #8
 8003778:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800377e:	9200      	str	r2, [sp, #0]
 8003780:	4633      	mov	r3, r6
 8003782:	2200      	movs	r2, #0
 8003784:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003788:	4620      	mov	r0, r4
 800378a:	f7ff ff9b 	bl	80036c4 <UART_WaitOnFlagUntilTimeout>
 800378e:	2800      	cmp	r0, #0
 8003790:	d0db      	beq.n	800374a <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 8003792:	2003      	movs	r0, #3
 8003794:	e7ef      	b.n	8003776 <UART_CheckIdleState+0x4a>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	e7d4      	b.n	8003744 <UART_CheckIdleState+0x18>
 800379a:	bf00      	nop

0800379c <HAL_UART_Init>:
  if(huart == NULL)
 800379c:	b390      	cbz	r0, 8003804 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 800379e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 80037a2:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80037a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037a8:	4604      	mov	r4, r0
 80037aa:	b303      	cbz	r3, 80037ee <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80037ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80037ae:	2324      	movs	r3, #36	; 0x24
 80037b0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff fe53 	bl	8003468 <UART_SetConfig>
 80037c2:	2801      	cmp	r0, #1
 80037c4:	d018      	beq.n	80037f8 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c8:	b9c3      	cbnz	r3, 80037fc <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037da:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80037e2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80037ea:	f7ff bf9f 	b.w	800372c <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 80037ee:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80037f2:	f001 fd7b 	bl	80052ec <HAL_UART_MspInit>
 80037f6:	e7d9      	b.n	80037ac <HAL_UART_Init+0x10>
}
 80037f8:	2001      	movs	r0, #1
 80037fa:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80037fc:	4620      	mov	r0, r4
 80037fe:	f7ff ff09 	bl	8003614 <UART_AdvFeatureConfig>
 8003802:	e7e2      	b.n	80037ca <HAL_UART_Init+0x2e>
}
 8003804:	2001      	movs	r0, #1
 8003806:	4770      	bx	lr

08003808 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003808:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800380c:	2b21      	cmp	r3, #33	; 0x21
 800380e:	d001      	beq.n	8003814 <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8003810:	2002      	movs	r0, #2
  }
}
 8003812:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8003814:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003818:	b29b      	uxth	r3, r3
 800381a:	b18b      	cbz	r3, 8003840 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381c:	6883      	ldr	r3, [r0, #8]
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d018      	beq.n	8003856 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003824:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003826:	6802      	ldr	r2, [r0, #0]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	64c1      	str	r1, [r0, #76]	; 0x4c
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003830:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003834:	3b01      	subs	r3, #1
 8003836:	b29b      	uxth	r3, r3
 8003838:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800383c:	2000      	movs	r0, #0
 800383e:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003840:	6802      	ldr	r2, [r0, #0]
 8003842:	6811      	ldr	r1, [r2, #0]
 8003844:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003848:	6011      	str	r1, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800384a:	6811      	ldr	r1, [r2, #0]
 800384c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003850:	4618      	mov	r0, r3
 8003852:	6011      	str	r1, [r2, #0]
 8003854:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003856:	6903      	ldr	r3, [r0, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e3      	bne.n	8003824 <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800385c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800385e:	6801      	ldr	r1, [r0, #0]
 8003860:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003868:	850a      	strh	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800386a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800386c:	e7e0      	b.n	8003830 <UART_Transmit_IT+0x28>
 800386e:	bf00      	nop

08003870 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003870:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003872:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003876:	2b22      	cmp	r3, #34	; 0x22
 8003878:	d006      	beq.n	8003888 <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800387a:	6802      	ldr	r2, [r0, #0]
 800387c:	6993      	ldr	r3, [r2, #24]
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8003884:	2002      	movs	r0, #2
 8003886:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003888:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388a:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800388c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 800388e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003892:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003896:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	d01d      	beq.n	80038d6 <UART_Receive_IT+0x66>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800389a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800389c:	400b      	ands	r3, r1
 800389e:	1c51      	adds	r1, r2, #1
 80038a0:	6541      	str	r1, [r0, #84]	; 0x54
 80038a2:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 80038a4:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80038a8:	3c01      	subs	r4, #1
 80038aa:	b2a4      	uxth	r4, r4
 80038ac:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80038b0:	b10c      	cbz	r4, 80038b6 <UART_Receive_IT+0x46>
    return HAL_OK;
 80038b2:	2000      	movs	r0, #0
  }
}
 80038b4:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b6:	6803      	ldr	r3, [r0, #0]
 80038b8:	6819      	ldr	r1, [r3, #0]
 80038ba:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80038be:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c0:	6899      	ldr	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80038c2:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	f021 0101 	bic.w	r1, r1, #1
 80038c8:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80038ca:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80038ce:	f000 fbff 	bl	80040d0 <HAL_UART_RxCpltCallback>
 80038d2:	4620      	mov	r0, r4
 80038d4:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d6:	6902      	ldr	r2, [r0, #16]
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d1de      	bne.n	800389a <UART_Receive_IT+0x2a>
      *tmp = (uint16_t)(uhdata & uhMask);
 80038dc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80038de:	400b      	ands	r3, r1
 80038e0:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 80038e4:	6542      	str	r2, [r0, #84]	; 0x54
 80038e6:	e7dd      	b.n	80038a4 <UART_Receive_IT+0x34>

080038e8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038e8:	6803      	ldr	r3, [r0, #0]
 80038ea:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ec:	6819      	ldr	r1, [r3, #0]
{
 80038ee:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80038f0:	0715      	lsls	r5, r2, #28
{
 80038f2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80038f4:	d110      	bne.n	8003918 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038f6:	0696      	lsls	r6, r2, #26
 80038f8:	d45b      	bmi.n	80039b2 <HAL_UART_IRQHandler+0xca>
  cr3its = READ_REG(huart->Instance->CR3);
 80038fa:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80038fc:	02d5      	lsls	r5, r2, #11
 80038fe:	d501      	bpl.n	8003904 <HAL_UART_IRQHandler+0x1c>
 8003900:	0240      	lsls	r0, r0, #9
 8003902:	d47f      	bmi.n	8003a04 <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003904:	0616      	lsls	r6, r2, #24
 8003906:	d502      	bpl.n	800390e <HAL_UART_IRQHandler+0x26>
 8003908:	060d      	lsls	r5, r1, #24
 800390a:	f100 808c 	bmi.w	8003a26 <HAL_UART_IRQHandler+0x13e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800390e:	0650      	lsls	r0, r2, #25
 8003910:	d501      	bpl.n	8003916 <HAL_UART_IRQHandler+0x2e>
 8003912:	064a      	lsls	r2, r1, #25
 8003914:	d464      	bmi.n	80039e0 <HAL_UART_IRQHandler+0xf8>
 8003916:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8003918:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800391a:	f010 0501 	ands.w	r5, r0, #1
 800391e:	d04e      	beq.n	80039be <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003920:	07d6      	lsls	r6, r2, #31
 8003922:	d507      	bpl.n	8003934 <HAL_UART_IRQHandler+0x4c>
 8003924:	05c8      	lsls	r0, r1, #23
 8003926:	d505      	bpl.n	8003934 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003928:	2001      	movs	r0, #1
 800392a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800392c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800392e:	f040 0001 	orr.w	r0, r0, #1
 8003932:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003934:	0796      	lsls	r6, r2, #30
 8003936:	d548      	bpl.n	80039ca <HAL_UART_IRQHandler+0xe2>
 8003938:	b13d      	cbz	r5, 800394a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800393a:	2002      	movs	r0, #2
 800393c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003940:	f040 0004 	orr.w	r0, r0, #4
 8003944:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003946:	0750      	lsls	r0, r2, #29
 8003948:	d443      	bmi.n	80039d2 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800394a:	0710      	lsls	r0, r2, #28
 800394c:	d503      	bpl.n	8003956 <HAL_UART_IRQHandler+0x6e>
 800394e:	068e      	lsls	r6, r1, #26
 8003950:	d451      	bmi.n	80039f6 <HAL_UART_IRQHandler+0x10e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003952:	2d00      	cmp	r5, #0
 8003954:	d14f      	bne.n	80039f6 <HAL_UART_IRQHandler+0x10e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003956:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003958:	2800      	cmp	r0, #0
 800395a:	d0dc      	beq.n	8003916 <HAL_UART_IRQHandler+0x2e>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800395c:	0690      	lsls	r0, r2, #26
 800395e:	d501      	bpl.n	8003964 <HAL_UART_IRQHandler+0x7c>
 8003960:	0689      	lsls	r1, r1, #26
 8003962:	d465      	bmi.n	8003a30 <HAL_UART_IRQHandler+0x148>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003964:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003966:	0712      	lsls	r2, r2, #28
 8003968:	d403      	bmi.n	8003972 <HAL_UART_IRQHandler+0x8a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800396a:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800396c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003970:	d063      	beq.n	8003a3a <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003978:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397a:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	0656      	lsls	r6, r2, #25
 800398c:	d547      	bpl.n	8003a1e <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003990:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003996:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003998:	2800      	cmp	r0, #0
 800399a:	d040      	beq.n	8003a1e <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_UART_IRQHandler+0x15c>)
 800399e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a0:	f7fd ffe8 	bl	8001974 <HAL_DMA_Abort_IT>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d0b6      	beq.n	8003916 <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039a8:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80039aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039b0:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b2:	068d      	lsls	r5, r1, #26
 80039b4:	d5a1      	bpl.n	80038fa <HAL_UART_IRQHandler+0x12>
}
 80039b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80039ba:	f7ff bf59 	b.w	8003870 <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80039be:	f411 7f90 	tst.w	r1, #288	; 0x120
 80039c2:	d09b      	beq.n	80038fc <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039c4:	07d6      	lsls	r6, r2, #31
 80039c6:	d5b5      	bpl.n	8003934 <HAL_UART_IRQHandler+0x4c>
 80039c8:	e7ac      	b.n	8003924 <HAL_UART_IRQHandler+0x3c>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ca:	0756      	lsls	r6, r2, #29
 80039cc:	d5bd      	bpl.n	800394a <HAL_UART_IRQHandler+0x62>
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	d0bb      	beq.n	800394a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80039d2:	2004      	movs	r0, #4
 80039d4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039d8:	f040 0002 	orr.w	r0, r0, #2
 80039dc:	66e0      	str	r0, [r4, #108]	; 0x6c
 80039de:	e7b4      	b.n	800394a <HAL_UART_IRQHandler+0x62>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039e0:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80039e2:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e8:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80039ea:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80039ec:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80039f0:	f7ff fd2a 	bl	8003448 <HAL_UART_TxCpltCallback>
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80039f6:	2008      	movs	r0, #8
 80039f8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039fc:	f040 0008 	orr.w	r0, r0, #8
 8003a00:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003a02:	e7a8      	b.n	8003956 <HAL_UART_IRQHandler+0x6e>
    huart->gState  = HAL_UART_STATE_READY;
 8003a04:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003a06:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003a0a:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003a0c:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 8003a0e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003a12:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8003a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003a1a:	f000 b815 	b.w	8003a48 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7ff fd14 	bl	800344c <HAL_UART_ErrorCallback>
 8003a24:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8003a26:	4620      	mov	r0, r4
}
 8003a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8003a2c:	f7ff beec 	b.w	8003808 <UART_Transmit_IT>
        UART_Receive_IT(huart);
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7ff ff1d 	bl	8003870 <UART_Receive_IT>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	e794      	b.n	8003964 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7ff fd06 	bl	800344c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a40:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	08003451 	.word	0x08003451

08003a48 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop

08003a4c <adc_comms>:
extern ADC_HandleTypeDef hadc2;


void adc_comms(){

	adc_raw_voltage =  ADC1_buffer[0];
 8003a4c:	4b7d      	ldr	r3, [pc, #500]	; (8003c44 <adc_comms+0x1f8>)
	raw_ambient_temp = ADC1_buffer[2];
	raw_geyser_temp = ADC1_buffer[3];


	//Converting Voltage
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003a4e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003c48 <adc_comms+0x1fc>
	adc_raw_voltage =  ADC1_buffer[0];
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	487d      	ldr	r0, [pc, #500]	; (8003c4c <adc_comms+0x200>)
 8003a56:	6813      	ldr	r3, [r2, #0]
	adc_raw_current =	ADC1_buffer[1];
 8003a58:	497d      	ldr	r1, [pc, #500]	; (8003c50 <adc_comms+0x204>)
void adc_comms(){
 8003a5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003a5e:	ee07 3a90 	vmov	s15, r3
void adc_comms(){
 8003a62:	ed2d 8b02 	vpush	{d8}
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6a:	eddf 8a7a 	vldr	s17, [pc, #488]	; 8003c54 <adc_comms+0x208>
	raw_ambient_temp = ADC1_buffer[2];
 8003a6e:	f8df b220 	ldr.w	fp, [pc, #544]	; 8003c90 <adc_comms+0x244>
	raw_geyser_temp = ADC1_buffer[3];
 8003a72:	4f79      	ldr	r7, [pc, #484]	; (8003c58 <adc_comms+0x20c>)
	adc_raw_current =	ADC1_buffer[1];
 8003a74:	f8d2 a004 	ldr.w	sl, [r2, #4]
	raw_ambient_temp = ADC1_buffer[2];
 8003a78:	6895      	ldr	r5, [r2, #8]
	raw_geyser_temp = ADC1_buffer[3];
 8003a7a:	68d4      	ldr	r4, [r2, #12]
	adc_raw_voltage =  ADC1_buffer[0];
 8003a7c:	6003      	str	r3, [r0, #0]
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003a7e:	ee77 7ae8 	vsub.f32	s15, s15, s17
void adc_comms(){
 8003a82:	b083      	sub	sp, #12
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003a84:	eec7 6a87 	vdiv.f32	s13, s15, s14
	adc_raw_current =	ADC1_buffer[1];
 8003a88:	f8c1 a000 	str.w	sl, [r1]
	raw_ambient_temp = ADC1_buffer[2];
 8003a8c:	f8cb 5000 	str.w	r5, [fp]
	raw_geyser_temp = ADC1_buffer[3];
 8003a90:	603c      	str	r4, [r7, #0]
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003a92:	4e72      	ldr	r6, [pc, #456]	; (8003c5c <adc_comms+0x210>)

	//Converting Current
	adc_buffer_current = (pow((adc_raw_current-2072.202f)/0.14603f,2))+adc_buffer_current;

	//Converting Ambient temperature
	if( (raw_ambient_temp-615)/12.3f < 100){
 8003a94:	f2a5 2567 	subw	r5, r5, #615	; 0x267
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003a98:	ee16 0a90 	vmov	r0, s13
 8003a9c:	f7fc fd54 	bl	8000548 <__aeabi_f2d>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003aa8:	e9cd 2300 	strd	r2, r3, [sp]
 8003aac:	f7fc fd6a 	bl	8000584 <__aeabi_ul2d>
 8003ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ab4:	4680      	mov	r8, r0
 8003ab6:	4689      	mov	r9, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	f7fc fd98 	bl	80005f0 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	f7fc fbe0 	bl	800028c <__adddf3>
 8003acc:	f7fd f878 	bl	8000bc0 <__aeabi_d2ulz>
	adc_buffer_current = (pow((adc_raw_current-2072.202f)/0.14603f,2))+adc_buffer_current;
 8003ad0:	ee07 aa90 	vmov	s15, sl
 8003ad4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003ad8:	eddf 7a61 	vldr	s15, [pc, #388]	; 8003c60 <adc_comms+0x214>
 8003adc:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8003c94 <adc_comms+0x248>
 8003ae0:	ee38 8a68 	vsub.f32	s16, s16, s17
	adc_buffer_voltage = (pow((adc_raw_voltage-2072.202f)/0.008629f,2))+adc_buffer_voltage;
 8003ae4:	e9c6 0100 	strd	r0, r1, [r6]
	adc_buffer_current = (pow((adc_raw_current-2072.202f)/0.14603f,2))+adc_buffer_current;
 8003ae8:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003aec:	ee17 0a10 	vmov	r0, s14
 8003af0:	f7fc fd2a 	bl	8000548 <__aeabi_f2d>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	e9da 0100 	ldrd	r0, r1, [sl]
 8003afc:	e9cd 2300 	strd	r2, r3, [sp]
 8003b00:	f7fc fd40 	bl	8000584 <__aeabi_ul2d>
 8003b04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b08:	4680      	mov	r8, r0
 8003b0a:	4689      	mov	r9, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f7fc fd6e 	bl	80005f0 <__aeabi_dmul>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4640      	mov	r0, r8
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	f7fc fbb6 	bl	800028c <__adddf3>
 8003b20:	f7fd f84e 	bl	8000bc0 <__aeabi_d2ulz>
	if( (raw_ambient_temp-615)/12.3f < 100){
 8003b24:	ee07 5a90 	vmov	s15, r5
 8003b28:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003c64 <adc_comms+0x218>
 8003b2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003c68 <adc_comms+0x21c>
 8003b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
	adc_buffer_current = (pow((adc_raw_current-2072.202f)/0.14603f,2))+adc_buffer_current;
 8003b34:	e9ca 0100 	strd	r0, r1, [sl]
	if( (raw_ambient_temp-615)/12.3f < 100){
 8003b38:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003b3c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b44:	d41c      	bmi.n	8003b80 <adc_comms+0x134>
		raw_ambient_temp = (raw_ambient_temp-615)/12.3f;
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
	}
	//Converting Geyser Temperature
	if( (raw_geyser_temp-615)/12.3f < 100){
 8003b46:	f2a4 2467 	subw	r4, r4, #615	; 0x267
 8003b4a:	ee07 4a90 	vmov	s15, r4
 8003b4e:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8003c64 <adc_comms+0x218>
 8003b52:	eddf 6a45 	vldr	s13, [pc, #276]	; 8003c68 <adc_comms+0x21c>
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003b5e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	d418      	bmi.n	8003b9a <adc_comms+0x14e>
		raw_geyser_temp = (raw_geyser_temp-615)/12.3f;
		geyser_temp_int = raw_geyser_temp;
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
	}

	adc_counter += 1;
 8003b68:	4c40      	ldr	r4, [pc, #256]	; (8003c6c <adc_comms+0x220>)
 8003b6a:	8823      	ldrh	r3, [r4, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	b29b      	uxth	r3, r3
	if(adc_counter == 10){
 8003b70:	2b0a      	cmp	r3, #10
	adc_counter += 1;
 8003b72:	8023      	strh	r3, [r4, #0]
	if(adc_counter == 10){
 8003b74:	d021      	beq.n	8003bba <adc_comms+0x16e>

		adc_buffer_voltage = 0;
		adc_buffer_current = 0;
	}

}
 8003b76:	b003      	add	sp, #12
 8003b78:	ecbd 8b02 	vpop	{d8}
 8003b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		raw_ambient_temp = (raw_ambient_temp-615)/12.3f;
 8003b80:	eefc 7ac7 	vcvt.u32.f32	s15, s14
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003b84:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <adc_comms+0x224>)
 8003b86:	493b      	ldr	r1, [pc, #236]	; (8003c74 <adc_comms+0x228>)
 8003b88:	6818      	ldr	r0, [r3, #0]
		raw_ambient_temp = (raw_ambient_temp-615)/12.3f;
 8003b8a:	edcb 7a00 	vstr	s15, [fp]
 8003b8e:	ee17 2a90 	vmov	r2, s15
		sprintf(ambient_temp,"%lu", raw_ambient_temp);
 8003b92:	f002 fa25 	bl	8005fe0 <siprintf>
 8003b96:	683c      	ldr	r4, [r7, #0]
 8003b98:	e7d5      	b.n	8003b46 <adc_comms+0xfa>
		raw_geyser_temp = (raw_geyser_temp-615)/12.3f;
 8003b9a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003b9e:	4a36      	ldr	r2, [pc, #216]	; (8003c78 <adc_comms+0x22c>)
		geyser_temp_int = raw_geyser_temp;
 8003ba0:	4c36      	ldr	r4, [pc, #216]	; (8003c7c <adc_comms+0x230>)
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003ba2:	6810      	ldr	r0, [r2, #0]
 8003ba4:	4933      	ldr	r1, [pc, #204]	; (8003c74 <adc_comms+0x228>)
		raw_geyser_temp = (raw_geyser_temp-615)/12.3f;
 8003ba6:	edc7 7a00 	vstr	s15, [r7]
 8003baa:	ee17 3a90 	vmov	r3, s15
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003bae:	ee17 2a90 	vmov	r2, s15
		geyser_temp_int = raw_geyser_temp;
 8003bb2:	7023      	strb	r3, [r4, #0]
		sprintf(geyser_temp,"%lu", raw_geyser_temp);
 8003bb4:	f002 fa14 	bl	8005fe0 <siprintf>
 8003bb8:	e7d6      	b.n	8003b68 <adc_comms+0x11c>
		*voltage_int_rms = sqrt(adc_buffer_voltage/10);
 8003bba:	220a      	movs	r2, #10
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003bc2:	f7fc ffe5 	bl	8000b90 <__aeabi_uldivmod>
 8003bc6:	f7fc fcdd 	bl	8000584 <__aeabi_ul2d>
 8003bca:	4f2d      	ldr	r7, [pc, #180]	; (8003c80 <adc_comms+0x234>)
		*current_int_rms = sqrt(adc_buffer_current/10);
 8003bcc:	4d2d      	ldr	r5, [pc, #180]	; (8003c84 <adc_comms+0x238>)
		*voltage_int_rms = sqrt(adc_buffer_voltage/10);
 8003bce:	f8d7 8000 	ldr.w	r8, [r7]
 8003bd2:	ec41 0b10 	vmov	d0, r0, r1
 8003bd6:	f002 fea3 	bl	8006920 <sqrt>
 8003bda:	ec51 0b10 	vmov	r0, r1, d0
 8003bde:	f7fc ffb7 	bl	8000b50 <__aeabi_d2uiz>
		*current_int_rms = sqrt(adc_buffer_current/10);
 8003be2:	220a      	movs	r2, #10
 8003be4:	2300      	movs	r3, #0
		*voltage_int_rms = sqrt(adc_buffer_voltage/10);
 8003be6:	f8c8 0000 	str.w	r0, [r8]
		*current_int_rms = sqrt(adc_buffer_current/10);
 8003bea:	e9da 0100 	ldrd	r0, r1, [sl]
 8003bee:	f7fc ffcf 	bl	8000b90 <__aeabi_uldivmod>
 8003bf2:	f7fc fcc7 	bl	8000584 <__aeabi_ul2d>
 8003bf6:	ec41 0b10 	vmov	d0, r0, r1
 8003bfa:	f8d5 8000 	ldr.w	r8, [r5]
 8003bfe:	f002 fe8f 	bl	8006920 <sqrt>
 8003c02:	ec51 0b10 	vmov	r0, r1, d0
 8003c06:	f7fc ffa3 	bl	8000b50 <__aeabi_d2uiz>
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <adc_comms+0x23c>)
		*current_int_rms = sqrt(adc_buffer_current/10);
 8003c0e:	f8c8 0000 	str.w	r0, [r8]
		sprintf(voltage_rms,"%lu", *voltage_int_rms);
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	4917      	ldr	r1, [pc, #92]	; (8003c74 <adc_comms+0x228>)
 8003c18:	f002 f9e2 	bl	8005fe0 <siprintf>
		sprintf(current_rms,"%lu", *current_int_rms);
 8003c1c:	682a      	ldr	r2, [r5, #0]
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <adc_comms+0x240>)
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	4913      	ldr	r1, [pc, #76]	; (8003c74 <adc_comms+0x228>)
 8003c26:	f002 f9db 	bl	8005fe0 <siprintf>
		adc_buffer_voltage = 0;
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e9c6 2300 	strd	r2, r3, [r6]
		adc_buffer_current = 0;
 8003c32:	e9ca 2300 	strd	r2, r3, [sl]
		adc_counter = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	8023      	strh	r3, [r4, #0]
}
 8003c3a:	b003      	add	sp, #12
 8003c3c:	ecbd 8b02 	vpop	{d8}
 8003c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c44:	20000228 	.word	0x20000228
 8003c48:	3c0d60a6 	.word	0x3c0d60a6
 8003c4c:	20000248 	.word	0x20000248
 8003c50:	20000244 	.word	0x20000244
 8003c54:	4501833b 	.word	0x4501833b
 8003c58:	2000029c 	.word	0x2000029c
 8003c5c:	20000238 	.word	0x20000238
 8003c60:	3e1588e3 	.word	0x3e1588e3
 8003c64:	4144cccd 	.word	0x4144cccd
 8003c68:	42c80000 	.word	0x42c80000
 8003c6c:	20000240 	.word	0x20000240
 8003c70:	2000024c 	.word	0x2000024c
 8003c74:	08006b9c 	.word	0x08006b9c
 8003c78:	20000270 	.word	0x20000270
 8003c7c:	20000274 	.word	0x20000274
 8003c80:	200002d8 	.word	0x200002d8
 8003c84:	20000254 	.word	0x20000254
 8003c88:	200002dc 	.word	0x200002dc
 8003c8c:	20000258 	.word	0x20000258
 8003c90:	20000298 	.word	0x20000298
 8003c94:	20000230 	.word	0x20000230

08003c98 <write2Flash>:
extern RTC_HandleTypeDef hrtc;




void write2Flash(){
 8003c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(log_counter < 100){
 8003c9c:	4dbe      	ldr	r5, [pc, #760]	; (8003f98 <write2Flash+0x300>)
 8003c9e:	782b      	ldrb	r3, [r5, #0]
 8003ca0:	2b63      	cmp	r3, #99	; 0x63
 8003ca2:	d90a      	bls.n	8003cba <write2Flash+0x22>
 8003ca4:	4cbd      	ldr	r4, [pc, #756]	; (8003f9c <write2Flash+0x304>)
			HAL_FLASH_Lock();
		}

	}

			memset(flash_stored, 0x00, 50);
 8003ca6:	6820      	ldr	r0, [r4, #0]
 8003ca8:	2232      	movs	r2, #50	; 0x32
 8003caa:	2100      	movs	r1, #0
 8003cac:	f002 f8d3 	bl	8005e56 <memset>


			log_counter += 1;
 8003cb0:	782b      	ldrb	r3, [r5, #0]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	702b      	strb	r3, [r5, #0]
 8003cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8003cba:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8003ff0 <write2Flash+0x358>
 8003cbe:	48b8      	ldr	r0, [pc, #736]	; (8003fa0 <write2Flash+0x308>)
 8003cc0:	f8d8 1000 	ldr.w	r1, [r8]
		itoa((time->Hours),temp_time_var,10  );
 8003cc4:	4fb7      	ldr	r7, [pc, #732]	; (8003fa4 <write2Flash+0x30c>)
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003cc6:	4cb5      	ldr	r4, [pc, #724]	; (8003f9c <write2Flash+0x304>)
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003cc8:	4eb7      	ldr	r6, [pc, #732]	; (8003fa8 <write2Flash+0x310>)
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f7fe fe5a 	bl	8002984 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8003cd0:	4bb6      	ldr	r3, [pc, #728]	; (8003fac <write2Flash+0x314>)
 8003cd2:	48b3      	ldr	r0, [pc, #716]	; (8003fa0 <write2Flash+0x308>)
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f7fe fe8a 	bl	80029f0 <HAL_RTC_GetDate>
		itoa((time->Hours),temp_time_var,10  );
 8003cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	7818      	ldrb	r0, [r3, #0]
 8003ce4:	220a      	movs	r2, #10
 8003ce6:	f002 f8a1 	bl	8005e2c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003cea:	f8d4 9000 	ldr.w	r9, [r4]
 8003cee:	4648      	mov	r0, r9
 8003cf0:	f7fc fa6e 	bl	80001d0 <strlen>
 8003cf4:	f8d7 a000 	ldr.w	sl, [r7]
 8003cf8:	4683      	mov	fp, r0
 8003cfa:	4650      	mov	r0, sl
 8003cfc:	f7fc fa68 	bl	80001d0 <strlen>
 8003d00:	4651      	mov	r1, sl
 8003d02:	4602      	mov	r2, r0
 8003d04:	eb09 000b 	add.w	r0, r9, fp
 8003d08:	f002 f89a 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003d0c:	f8d4 9000 	ldr.w	r9, [r4]
 8003d10:	4648      	mov	r0, r9
 8003d12:	f7fc fa5d 	bl	80001d0 <strlen>
 8003d16:	7833      	ldrb	r3, [r6, #0]
 8003d18:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Minutes),temp_time_var,10  );
 8003d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d20:	6839      	ldr	r1, [r7, #0]
 8003d22:	7858      	ldrb	r0, [r3, #1]
 8003d24:	220a      	movs	r2, #10
 8003d26:	f002 f881 	bl	8005e2c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003d2a:	f8d4 9000 	ldr.w	r9, [r4]
 8003d2e:	4648      	mov	r0, r9
 8003d30:	f7fc fa4e 	bl	80001d0 <strlen>
 8003d34:	f8d7 a000 	ldr.w	sl, [r7]
 8003d38:	4683      	mov	fp, r0
 8003d3a:	4650      	mov	r0, sl
 8003d3c:	f7fc fa48 	bl	80001d0 <strlen>
 8003d40:	4651      	mov	r1, sl
 8003d42:	4602      	mov	r2, r0
 8003d44:	eb09 000b 	add.w	r0, r9, fp
 8003d48:	f002 f87a 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003d4c:	f8d4 9000 	ldr.w	r9, [r4]
 8003d50:	4648      	mov	r0, r9
 8003d52:	f7fc fa3d 	bl	80001d0 <strlen>
 8003d56:	7833      	ldrb	r3, [r6, #0]
 8003d58:	f809 3000 	strb.w	r3, [r9, r0]
		itoa((time->Seconds),temp_time_var,10  );
 8003d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	7898      	ldrb	r0, [r3, #2]
 8003d64:	220a      	movs	r2, #10
 8003d66:	f002 f861 	bl	8005e2c <itoa>
		memcpy(flash_stored+strlen((char*)flash_stored),temp_time_var,strlen(temp_time_var));
 8003d6a:	f8d4 8000 	ldr.w	r8, [r4]
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f7fc fa2e 	bl	80001d0 <strlen>
 8003d74:	683f      	ldr	r7, [r7, #0]
 8003d76:	4681      	mov	r9, r0
 8003d78:	4638      	mov	r0, r7
 8003d7a:	f7fc fa29 	bl	80001d0 <strlen>
 8003d7e:	4639      	mov	r1, r7
 8003d80:	4602      	mov	r2, r0
 8003d82:	eb08 0009 	add.w	r0, r8, r9
 8003d86:	f002 f85b 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003d8a:	6827      	ldr	r7, [r4, #0]
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f7fc fa1f 	bl	80001d0 <strlen>
 8003d92:	7833      	ldrb	r3, [r6, #0]
 8003d94:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),current_rms,strlen(current_rms));
 8003d96:	6827      	ldr	r7, [r4, #0]
 8003d98:	4638      	mov	r0, r7
 8003d9a:	f7fc fa19 	bl	80001d0 <strlen>
 8003d9e:	4b84      	ldr	r3, [pc, #528]	; (8003fb0 <write2Flash+0x318>)
 8003da0:	f8d3 8000 	ldr.w	r8, [r3]
 8003da4:	4681      	mov	r9, r0
 8003da6:	4640      	mov	r0, r8
 8003da8:	f7fc fa12 	bl	80001d0 <strlen>
 8003dac:	4641      	mov	r1, r8
 8003dae:	4602      	mov	r2, r0
 8003db0:	eb07 0009 	add.w	r0, r7, r9
 8003db4:	f002 f844 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003db8:	6827      	ldr	r7, [r4, #0]
 8003dba:	4638      	mov	r0, r7
 8003dbc:	f7fc fa08 	bl	80001d0 <strlen>
 8003dc0:	7833      	ldrb	r3, [r6, #0]
 8003dc2:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),voltage_rms,strlen(voltage_rms) );
 8003dc4:	6827      	ldr	r7, [r4, #0]
 8003dc6:	4638      	mov	r0, r7
 8003dc8:	f7fc fa02 	bl	80001d0 <strlen>
 8003dcc:	4b79      	ldr	r3, [pc, #484]	; (8003fb4 <write2Flash+0x31c>)
 8003dce:	f8d3 8000 	ldr.w	r8, [r3]
 8003dd2:	4681      	mov	r9, r0
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	f7fc f9fb 	bl	80001d0 <strlen>
 8003dda:	4641      	mov	r1, r8
 8003ddc:	4602      	mov	r2, r0
 8003dde:	eb07 0009 	add.w	r0, r7, r9
 8003de2:	f002 f82d 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003de6:	6827      	ldr	r7, [r4, #0]
 8003de8:	4638      	mov	r0, r7
 8003dea:	f7fc f9f1 	bl	80001d0 <strlen>
 8003dee:	7833      	ldrb	r3, [r6, #0]
 8003df0:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),ambient_temp,strlen(ambient_temp) );
 8003df2:	6827      	ldr	r7, [r4, #0]
 8003df4:	4638      	mov	r0, r7
 8003df6:	f7fc f9eb 	bl	80001d0 <strlen>
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <write2Flash+0x320>)
 8003dfc:	f8d3 8000 	ldr.w	r8, [r3]
 8003e00:	4681      	mov	r9, r0
 8003e02:	4640      	mov	r0, r8
 8003e04:	f7fc f9e4 	bl	80001d0 <strlen>
 8003e08:	4641      	mov	r1, r8
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	eb07 0009 	add.w	r0, r7, r9
 8003e10:	f002 f816 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e14:	6827      	ldr	r7, [r4, #0]
 8003e16:	4638      	mov	r0, r7
 8003e18:	f7fc f9da 	bl	80001d0 <strlen>
 8003e1c:	7833      	ldrb	r3, [r6, #0]
 8003e1e:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),geyser_temp,strlen(geyser_temp) );
 8003e20:	6827      	ldr	r7, [r4, #0]
 8003e22:	4638      	mov	r0, r7
 8003e24:	f7fc f9d4 	bl	80001d0 <strlen>
 8003e28:	4b64      	ldr	r3, [pc, #400]	; (8003fbc <write2Flash+0x324>)
 8003e2a:	f8d3 8000 	ldr.w	r8, [r3]
 8003e2e:	4681      	mov	r9, r0
 8003e30:	4640      	mov	r0, r8
 8003e32:	f7fc f9cd 	bl	80001d0 <strlen>
 8003e36:	4641      	mov	r1, r8
 8003e38:	4602      	mov	r2, r0
 8003e3a:	eb07 0009 	add.w	r0, r7, r9
 8003e3e:	f001 ffff 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e42:	6827      	ldr	r7, [r4, #0]
 8003e44:	4638      	mov	r0, r7
 8003e46:	f7fc f9c3 	bl	80001d0 <strlen>
 8003e4a:	7833      	ldrb	r3, [r6, #0]
 8003e4c:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),total_water,strlen(total_water) );
 8003e4e:	6827      	ldr	r7, [r4, #0]
 8003e50:	4638      	mov	r0, r7
 8003e52:	f7fc f9bd 	bl	80001d0 <strlen>
 8003e56:	4b5a      	ldr	r3, [pc, #360]	; (8003fc0 <write2Flash+0x328>)
 8003e58:	f8d3 8000 	ldr.w	r8, [r3]
 8003e5c:	4681      	mov	r9, r0
 8003e5e:	4640      	mov	r0, r8
 8003e60:	f7fc f9b6 	bl	80001d0 <strlen>
 8003e64:	4641      	mov	r1, r8
 8003e66:	4602      	mov	r2, r0
 8003e68:	eb07 0009 	add.w	r0, r7, r9
 8003e6c:	f001 ffe8 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e70:	6827      	ldr	r7, [r4, #0]
 8003e72:	4638      	mov	r0, r7
 8003e74:	f7fc f9ac 	bl	80001d0 <strlen>
 8003e78:	7833      	ldrb	r3, [r6, #0]
 8003e7a:	543b      	strb	r3, [r7, r0]
		memcpy(flash_stored+strlen((char*)flash_stored),heater_state,strlen(heater_state));
 8003e7c:	6827      	ldr	r7, [r4, #0]
 8003e7e:	4638      	mov	r0, r7
 8003e80:	f7fc f9a6 	bl	80001d0 <strlen>
 8003e84:	4b4f      	ldr	r3, [pc, #316]	; (8003fc4 <write2Flash+0x32c>)
 8003e86:	f8d3 8000 	ldr.w	r8, [r3]
 8003e8a:	4681      	mov	r9, r0
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	f7fc f99f 	bl	80001d0 <strlen>
 8003e92:	4641      	mov	r1, r8
 8003e94:	4602      	mov	r2, r0
 8003e96:	eb07 0009 	add.w	r0, r7, r9
 8003e9a:	f001 ffd1 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored),comma,1 );
 8003e9e:	6827      	ldr	r7, [r4, #0]
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7fc f995 	bl	80001d0 <strlen>
 8003ea6:	7833      	ldrb	r3, [r6, #0]
 8003ea8:	543b      	strb	r3, [r7, r0]
		if(valve_state == valve_OPEN){
 8003eaa:	4a47      	ldr	r2, [pc, #284]	; (8003fc8 <write2Flash+0x330>)
 8003eac:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <write2Flash+0x334>)
 8003eae:	6816      	ldr	r6, [r2, #0]
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 8003eb0:	6827      	ldr	r7, [r4, #0]
		if(valve_state == valve_OPEN){
 8003eb2:	429e      	cmp	r6, r3
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 8003eb4:	4638      	mov	r0, r7
		if(valve_state == valve_OPEN){
 8003eb6:	f000 80e9 	beq.w	800408c <write2Flash+0x3f4>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) );
 8003eba:	f7fc f989 	bl	80001d0 <strlen>
 8003ebe:	4680      	mov	r8, r0
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7fc f985 	bl	80001d0 <strlen>
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	4602      	mov	r2, r0
 8003eca:	eb07 0008 	add.w	r0, r7, r8
 8003ece:	f001 ffb7 	bl	8005e40 <memcpy>
		memcpy(flash_stored+strlen((char*)flash_stored), endSimbol,2 );
 8003ed2:	6826      	ldr	r6, [r4, #0]
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f7fc f97b 	bl	80001d0 <strlen>
 8003eda:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <write2Flash+0x338>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	5233      	strh	r3, [r6, r0]
		if(log_counter == 0){
 8003ee0:	782e      	ldrb	r6, [r5, #0]
 8003ee2:	2e00      	cmp	r6, #0
 8003ee4:	f000 8086 	beq.w	8003ff4 <write2Flash+0x35c>
			HAL_FLASH_Unlock();
 8003ee8:	f7fd fdd2 	bl	8001a90 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008000+64*log_counter, *((uint64_t*)(flash_stored)) );
 8003eec:	7829      	ldrb	r1, [r5, #0]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8003ef4:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	0189      	lsls	r1, r1, #6
 8003efe:	2003      	movs	r0, #3
 8003f00:	f7fd fe0a 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008008+64*log_counter, *((uint64_t*)(flash_stored)+1) );
 8003f04:	7828      	ldrb	r0, [r5, #0]
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	4932      	ldr	r1, [pc, #200]	; (8003fd4 <write2Flash+0x33c>)
 8003f0a:	2640      	movs	r6, #64	; 0x40
 8003f0c:	fb06 1100 	mla	r1, r6, r0, r1
 8003f10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f14:	2003      	movs	r0, #3
 8003f16:	f7fd fdff 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008010+64*log_counter, *((uint64_t*)(flash_stored)+2) );
 8003f1a:	7829      	ldrb	r1, [r5, #0]
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	4a2e      	ldr	r2, [pc, #184]	; (8003fd8 <write2Flash+0x340>)
 8003f20:	2003      	movs	r0, #3
 8003f22:	fb06 2101 	mla	r1, r6, r1, r2
 8003f26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f2a:	f7fd fdf5 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008018+64*log_counter, *((uint64_t*)(flash_stored)+3) );
 8003f2e:	7829      	ldrb	r1, [r5, #0]
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	4a2a      	ldr	r2, [pc, #168]	; (8003fdc <write2Flash+0x344>)
 8003f34:	2003      	movs	r0, #3
 8003f36:	fb06 2101 	mla	r1, r6, r1, r2
 8003f3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f3e:	f7fd fdeb 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008020+64*log_counter, *((uint64_t*)(flash_stored)+4) );
 8003f42:	7829      	ldrb	r1, [r5, #0]
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	4a26      	ldr	r2, [pc, #152]	; (8003fe0 <write2Flash+0x348>)
 8003f48:	2003      	movs	r0, #3
 8003f4a:	fb06 2101 	mla	r1, r6, r1, r2
 8003f4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f52:	f7fd fde1 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008028+64*log_counter, *((uint64_t*)(flash_stored)+5) );
 8003f56:	7829      	ldrb	r1, [r5, #0]
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <write2Flash+0x34c>)
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	fb06 2101 	mla	r1, r6, r1, r2
 8003f62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003f66:	f7fd fdd7 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008030+64*log_counter, *((uint64_t*)(flash_stored+56)) );
 8003f6a:	7829      	ldrb	r1, [r5, #0]
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <write2Flash+0x350>)
 8003f70:	2003      	movs	r0, #3
 8003f72:	fb06 2101 	mla	r1, r6, r1, r2
 8003f76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003f7a:	f7fd fdcd 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008038+64*log_counter, *((uint64_t*)(flash_stored+64)) );
 8003f7e:	7829      	ldrb	r1, [r5, #0]
 8003f80:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <write2Flash+0x354>)
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	fb06 2101 	mla	r1, r6, r1, r2
 8003f88:	2003      	movs	r0, #3
 8003f8a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003f8e:	f7fd fdc3 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8003f92:	f7fd fd8f 	bl	8001ab4 <HAL_FLASH_Lock>
 8003f96:	e686      	b.n	8003ca6 <write2Flash+0xe>
 8003f98:	2000028c 	.word	0x2000028c
 8003f9c:	2000026c 	.word	0x2000026c
 8003fa0:	20000470 	.word	0x20000470
 8003fa4:	200002b4 	.word	0x200002b4
 8003fa8:	20000004 	.word	0x20000004
 8003fac:	2000025c 	.word	0x2000025c
 8003fb0:	20000258 	.word	0x20000258
 8003fb4:	200002dc 	.word	0x200002dc
 8003fb8:	2000024c 	.word	0x2000024c
 8003fbc:	20000270 	.word	0x20000270
 8003fc0:	200002c0 	.word	0x200002c0
 8003fc4:	20000284 	.word	0x20000284
 8003fc8:	200002d4 	.word	0x200002d4
 8003fcc:	2000002c 	.word	0x2000002c
 8003fd0:	20000008 	.word	0x20000008
 8003fd4:	08008008 	.word	0x08008008
 8003fd8:	08008010 	.word	0x08008010
 8003fdc:	08008018 	.word	0x08008018
 8003fe0:	08008020 	.word	0x08008020
 8003fe4:	08008028 	.word	0x08008028
 8003fe8:	08008030 	.word	0x08008030
 8003fec:	08008038 	.word	0x08008038
 8003ff0:	200002bc 	.word	0x200002bc
			HAL_FLASH_Unlock();
 8003ff4:	f7fd fd4c 	bl	8001a90 <HAL_FLASH_Unlock>
			pEraseInit->NbPages = 1;
 8003ff8:	4a2b      	ldr	r2, [pc, #172]	; (80040a8 <write2Flash+0x410>)
			HAL_FLASHEx_Erase(pEraseInit,flash_error);
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <write2Flash+0x414>)
			pEraseInit->NbPages = 1;
 8003ffc:	6810      	ldr	r0, [r2, #0]
			pEraseInit->PageAddress = (uint32_t)(0x08008000);
 8003ffe:	4f2c      	ldr	r7, [pc, #176]	; (80040b0 <write2Flash+0x418>)
			HAL_FLASHEx_Erase(pEraseInit,flash_error);
 8004000:	6819      	ldr	r1, [r3, #0]
			pEraseInit->TypeErase = (uint32_t)FLASH_TYPEERASE_PAGES;
 8004002:	6006      	str	r6, [r0, #0]
			pEraseInit->NbPages = 1;
 8004004:	2201      	movs	r2, #1
 8004006:	6082      	str	r2, [r0, #8]
			pEraseInit->PageAddress = (uint32_t)(0x08008000);
 8004008:	6047      	str	r7, [r0, #4]
			HAL_FLASHEx_Erase(pEraseInit,flash_error);
 800400a:	f7fd fdd9 	bl	8001bc0 <HAL_FLASHEx_Erase>
			HAL_FLASH_Lock();
 800400e:	f7fd fd51 	bl	8001ab4 <HAL_FLASH_Lock>
			HAL_FLASH_Unlock();
 8004012:	f7fd fd3d 	bl	8001a90 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008000, *((uint64_t*)(flash_stored)) );
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	4639      	mov	r1, r7
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	2003      	movs	r0, #3
 8004020:	f7fd fd7a 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008008, *((uint64_t*)(flash_stored)+1) );
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	4923      	ldr	r1, [pc, #140]	; (80040b4 <write2Flash+0x41c>)
 8004028:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800402c:	2003      	movs	r0, #3
 800402e:	f7fd fd73 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008010, *((uint64_t*)(flash_stored)+2) );
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	4920      	ldr	r1, [pc, #128]	; (80040b8 <write2Flash+0x420>)
 8004036:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800403a:	2003      	movs	r0, #3
 800403c:	f7fd fd6c 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008018, *((uint64_t*)(flash_stored)+3) );
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	491e      	ldr	r1, [pc, #120]	; (80040bc <write2Flash+0x424>)
 8004044:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004048:	2003      	movs	r0, #3
 800404a:	f7fd fd65 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008020, *((uint64_t*)(flash_stored)+4) );
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	491b      	ldr	r1, [pc, #108]	; (80040c0 <write2Flash+0x428>)
 8004052:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004056:	2003      	movs	r0, #3
 8004058:	f7fd fd5e 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008028, *((uint64_t*)(flash_stored)+5) );
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	4919      	ldr	r1, [pc, #100]	; (80040c4 <write2Flash+0x42c>)
 8004060:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004064:	2003      	movs	r0, #3
 8004066:	f7fd fd57 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008030, *((uint64_t*)(flash_stored)+6) );
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	4916      	ldr	r1, [pc, #88]	; (80040c8 <write2Flash+0x430>)
 800406e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004072:	2003      	movs	r0, #3
 8004074:	f7fd fd50 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x08008038, *((uint64_t*)(flash_stored)+7) );
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	4914      	ldr	r1, [pc, #80]	; (80040cc <write2Flash+0x434>)
 800407c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004080:	2003      	movs	r0, #3
 8004082:	f7fd fd49 	bl	8001b18 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8004086:	f7fd fd15 	bl	8001ab4 <HAL_FLASH_Lock>
 800408a:	e60c      	b.n	8003ca6 <write2Flash+0xe>
			memcpy(flash_stored+strlen((char*)flash_stored), valve_state,strlen(valve_state) -1);
 800408c:	f7fc f8a0 	bl	80001d0 <strlen>
 8004090:	4680      	mov	r8, r0
 8004092:	4630      	mov	r0, r6
 8004094:	f7fc f89c 	bl	80001d0 <strlen>
 8004098:	4631      	mov	r1, r6
 800409a:	1e42      	subs	r2, r0, #1
 800409c:	eb07 0008 	add.w	r0, r7, r8
 80040a0:	f001 fece 	bl	8005e40 <memcpy>
 80040a4:	e715      	b.n	8003ed2 <write2Flash+0x23a>
 80040a6:	bf00      	nop
 80040a8:	20000294 	.word	0x20000294
 80040ac:	20000268 	.word	0x20000268
 80040b0:	08008000 	.word	0x08008000
 80040b4:	08008008 	.word	0x08008008
 80040b8:	08008010 	.word	0x08008010
 80040bc:	08008018 	.word	0x08008018
 80040c0:	08008020 	.word	0x08008020
 80040c4:	08008028 	.word	0x08008028
 80040c8:	08008030 	.word	0x08008030
 80040cc:	08008038 	.word	0x08008038

080040d0 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80040d0:	b508      	push	{r3, lr}
	rx_flag = 1;
 80040d2:	2201      	movs	r2, #1
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_UART_RxCpltCallback+0x14>)
 80040d6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80040d8:	4903      	ldr	r1, [pc, #12]	; (80040e8 <HAL_UART_RxCpltCallback+0x18>)
 80040da:	4804      	ldr	r0, [pc, #16]	; (80040ec <HAL_UART_RxCpltCallback+0x1c>)
 80040dc:	f7ff f96a 	bl	80033b4 <HAL_UART_Receive_IT>
 80040e0:	bd08      	pop	{r3, pc}
 80040e2:	bf00      	nop
 80040e4:	200002a5 	.word	0x200002a5
 80040e8:	200005ac 	.word	0x200005ac
 80040ec:	20000400 	.word	0x20000400

080040f0 <HAL_ADC_ConvCpltCallback>:

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc_flag = 1;
 80040f0:	2201      	movs	r2, #1
 80040f2:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <HAL_ADC_ConvCpltCallback+0x8>)
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	4770      	bx	lr
 80040f8:	20000242 	.word	0x20000242

080040fc <HAL_TIM_IC_CaptureCallback>:
	(&hadc2);
}

void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
	tim3_flag = 1;
 80040fc:	2201      	movs	r2, #1
 80040fe:	4b01      	ldr	r3, [pc, #4]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x8>)
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	4770      	bx	lr
 8004104:	200002b9 	.word	0x200002b9

08004108 <HAL_RTCEx_WakeUpTimerEventCallback>:
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
rtcSecFlag = 1; // Flag to indicate 1 second period
 8004108:	2201      	movs	r2, #1
 800410a:	4b01      	ldr	r3, [pc, #4]	; (8004110 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	4770      	bx	lr
 8004110:	200002a4 	.word	0x200002a4

08004114 <heating_scheduling>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;


void heating_scheduling(){
 8004114:	b538      	push	{r3, r4, r5, lr}


	if(auto_heating == 1){
 8004116:	4b66      	ldr	r3, [pc, #408]	; (80042b0 <heating_scheduling+0x19c>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d000      	beq.n	8004120 <heating_scheduling+0xc>
 800411e:	bd38      	pop	{r3, r4, r5, pc}
		HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8004120:	4c64      	ldr	r4, [pc, #400]	; (80042b4 <heating_scheduling+0x1a0>)
 8004122:	4865      	ldr	r0, [pc, #404]	; (80042b8 <heating_scheduling+0x1a4>)
 8004124:	6821      	ldr	r1, [r4, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	f7fe fc2c 	bl	8002984 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 800412c:	4b63      	ldr	r3, [pc, #396]	; (80042bc <heating_scheduling+0x1a8>)
 800412e:	4862      	ldr	r0, [pc, #392]	; (80042b8 <heating_scheduling+0x1a4>)
 8004130:	6819      	ldr	r1, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	f7fe fc5c 	bl	80029f0 <HAL_RTC_GetDate>


		// checking heating schedule 1
		if( (time->Hours - heating_schedule[0].Hours) > 0 && (time->Hours - heating_schedule[1].Hours) < 0){
 8004138:	6820      	ldr	r0, [r4, #0]
 800413a:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <heating_scheduling+0x1ac>)
 800413c:	7802      	ldrb	r2, [r0, #0]
 800413e:	7819      	ldrb	r1, [r3, #0]
 8004140:	1a54      	subs	r4, r2, r1
 8004142:	2c00      	cmp	r4, #0
 8004144:	dd03      	ble.n	800414e <heating_scheduling+0x3a>
 8004146:	7d1c      	ldrb	r4, [r3, #20]
 8004148:	1b14      	subs	r4, r2, r4
 800414a:	2c00      	cmp	r4, #0
 800414c:	db4f      	blt.n	80041ee <heating_scheduling+0xda>
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}

		else if( (time->Hours - heating_schedule[0].Hours == 0 || time->Hours - heating_schedule[1].Hours == 0 )
 800414e:	428a      	cmp	r2, r1
 8004150:	d058      	beq.n	8004204 <heating_scheduling+0xf0>
 8004152:	7d19      	ldrb	r1, [r3, #20]
 8004154:	4291      	cmp	r1, r2
 8004156:	f000 808a 	beq.w	800426e <heating_scheduling+0x15a>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}

		// checking schedule 2

		else if( (time->Hours - heating_schedule[2].Hours) > 0 && (time->Hours - heating_schedule[3].Hours) < 0){
 800415a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800415e:	1a54      	subs	r4, r2, r1
 8004160:	2c00      	cmp	r4, #0
 8004162:	dd04      	ble.n	800416e <heating_scheduling+0x5a>
 8004164:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8004168:	1b14      	subs	r4, r2, r4
 800416a:	2c00      	cmp	r4, #0
 800416c:	db3f      	blt.n	80041ee <heating_scheduling+0xda>
					heater_state = heater_ON;
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}

		else if( (time->Hours - heating_schedule[2].Hours == 0 || time->Hours - heating_schedule[3].Hours == 0 )
 800416e:	428a      	cmp	r2, r1
 8004170:	d01f      	beq.n	80041b2 <heating_scheduling+0x9e>
 8004172:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8004176:	4291      	cmp	r1, r2
 8004178:	f000 8084 	beq.w	8004284 <heating_scheduling+0x170>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}
		// checking schedule 3
		else if( (time->Hours - heating_schedule[4].Hours) > 0 && (time->Hours - heating_schedule[5].Hours) < 0){
 800417c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8004180:	1a54      	subs	r4, r2, r1
 8004182:	2c00      	cmp	r4, #0
 8004184:	dd04      	ble.n	8004190 <heating_scheduling+0x7c>
 8004186:	f893 4064 	ldrb.w	r4, [r3, #100]	; 0x64
 800418a:	1b14      	subs	r4, r2, r4
 800418c:	2c00      	cmp	r4, #0
 800418e:	db2e      	blt.n	80041ee <heating_scheduling+0xda>
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}

		else if( (time->Hours - heating_schedule[4].Hours == 0 || time->Hours - heating_schedule[5].Hours == 0 )
 8004190:	428a      	cmp	r2, r1
 8004192:	d04f      	beq.n	8004234 <heating_scheduling+0x120>
 8004194:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8004198:	4291      	cmp	r1, r2
 800419a:	d07a      	beq.n	8004292 <heating_scheduling+0x17e>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
			heater_state = heater_ON;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		}
		else{
			heater_state = heater_OFF;
 800419c:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <heating_scheduling+0x1b0>)
 800419e:	4a4a      	ldr	r2, [pc, #296]	; (80042c8 <heating_scheduling+0x1b4>)
 80041a0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80041a2:	484a      	ldr	r0, [pc, #296]	; (80042cc <heating_scheduling+0x1b8>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
		}
	}
}
 80041aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80041ae:	f7fd be55 	b.w	8001e5c <HAL_GPIO_WritePin>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 80041b2:	7841      	ldrb	r1, [r0, #1]
 80041b4:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 80041b8:	1b0c      	subs	r4, r1, r4
 80041ba:	2c00      	cmp	r4, #0
 80041bc:	dd04      	ble.n	80041c8 <heating_scheduling+0xb4>
 80041be:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 80041c2:	1b0c      	subs	r4, r1, r4
 80041c4:	2c00      	cmp	r4, #0
 80041c6:	db12      	blt.n	80041ee <heating_scheduling+0xda>
				&& ( (time->Minutes - heating_schedule[2].Minutes == 0) || (time->Minutes - heating_schedule[3].Minutes == 0) )
 80041c8:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 80041cc:	428c      	cmp	r4, r1
 80041ce:	d003      	beq.n	80041d8 <heating_scheduling+0xc4>
 80041d0:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 80041d4:	428c      	cmp	r4, r1
 80041d6:	d1d1      	bne.n	800417c <heating_scheduling+0x68>
				&& ( (time->Seconds - heating_schedule[2].Seconds > 0) && (time->Seconds - heating_schedule[3].Seconds < 0) ) ){
 80041d8:	7881      	ldrb	r1, [r0, #2]
 80041da:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 80041de:	1b0c      	subs	r4, r1, r4
 80041e0:	2c00      	cmp	r4, #0
 80041e2:	ddcb      	ble.n	800417c <heating_scheduling+0x68>
 80041e4:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
 80041e8:	1b09      	subs	r1, r1, r4
 80041ea:	2900      	cmp	r1, #0
 80041ec:	dac6      	bge.n	800417c <heating_scheduling+0x68>
			heater_state = heater_ON;
 80041ee:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <heating_scheduling+0x1b0>)
 80041f0:	4a37      	ldr	r2, [pc, #220]	; (80042d0 <heating_scheduling+0x1bc>)
 80041f2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80041f4:	4835      	ldr	r0, [pc, #212]	; (80042cc <heating_scheduling+0x1b8>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 80041fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004200:	f7fd be2c 	b.w	8001e5c <HAL_GPIO_WritePin>
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 8004204:	7841      	ldrb	r1, [r0, #1]
 8004206:	785c      	ldrb	r4, [r3, #1]
 8004208:	1b0d      	subs	r5, r1, r4
 800420a:	2d00      	cmp	r5, #0
 800420c:	dd03      	ble.n	8004216 <heating_scheduling+0x102>
 800420e:	7d5d      	ldrb	r5, [r3, #21]
 8004210:	1b4d      	subs	r5, r1, r5
 8004212:	2d00      	cmp	r5, #0
 8004214:	dbeb      	blt.n	80041ee <heating_scheduling+0xda>
				&& ( (time->Minutes - heating_schedule[0].Minutes == 0) || (time->Minutes - heating_schedule[1].Minutes == 0) )
 8004216:	42a1      	cmp	r1, r4
 8004218:	d002      	beq.n	8004220 <heating_scheduling+0x10c>
 800421a:	7d5c      	ldrb	r4, [r3, #21]
 800421c:	428c      	cmp	r4, r1
 800421e:	d19c      	bne.n	800415a <heating_scheduling+0x46>
				&& ( (time->Seconds - heating_schedule[0].Seconds > 0) && (time->Seconds - heating_schedule[1].Seconds < 0) ) ){
 8004220:	7881      	ldrb	r1, [r0, #2]
 8004222:	789c      	ldrb	r4, [r3, #2]
 8004224:	1b0c      	subs	r4, r1, r4
 8004226:	2c00      	cmp	r4, #0
 8004228:	dd97      	ble.n	800415a <heating_scheduling+0x46>
 800422a:	7d9c      	ldrb	r4, [r3, #22]
 800422c:	1b09      	subs	r1, r1, r4
 800422e:	2900      	cmp	r1, #0
 8004230:	da93      	bge.n	800415a <heating_scheduling+0x46>
 8004232:	e7dc      	b.n	80041ee <heating_scheduling+0xda>
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 8004234:	7841      	ldrb	r1, [r0, #1]
 8004236:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800423a:	1a8c      	subs	r4, r1, r2
 800423c:	2c00      	cmp	r4, #0
 800423e:	dd04      	ble.n	800424a <heating_scheduling+0x136>
 8004240:	f893 4065 	ldrb.w	r4, [r3, #101]	; 0x65
 8004244:	1b0c      	subs	r4, r1, r4
 8004246:	2c00      	cmp	r4, #0
 8004248:	dbd1      	blt.n	80041ee <heating_scheduling+0xda>
				&& ( (time->Minutes - heating_schedule[4].Minutes == 0) || (time->Minutes - heating_schedule[5].Minutes == 0) )
 800424a:	4291      	cmp	r1, r2
 800424c:	d003      	beq.n	8004256 <heating_scheduling+0x142>
 800424e:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8004252:	428a      	cmp	r2, r1
 8004254:	d1a2      	bne.n	800419c <heating_scheduling+0x88>
				&& ( (time->Seconds - heating_schedule[4].Seconds > 0) && (time->Seconds - heating_schedule[5].Seconds < 0) ) ){
 8004256:	7882      	ldrb	r2, [r0, #2]
 8004258:	f893 1052 	ldrb.w	r1, [r3, #82]	; 0x52
 800425c:	1a51      	subs	r1, r2, r1
 800425e:	2900      	cmp	r1, #0
 8004260:	dd9c      	ble.n	800419c <heating_scheduling+0x88>
 8004262:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	2a00      	cmp	r2, #0
 800426a:	da97      	bge.n	800419c <heating_scheduling+0x88>
 800426c:	e7bf      	b.n	80041ee <heating_scheduling+0xda>
				&& ( (time->Minutes - heating_schedule[0].Minutes > 0) && (time->Minutes - heating_schedule[1].Minutes < 0) ) ){
 800426e:	7841      	ldrb	r1, [r0, #1]
 8004270:	785c      	ldrb	r4, [r3, #1]
 8004272:	1b0c      	subs	r4, r1, r4
 8004274:	2c00      	cmp	r4, #0
 8004276:	dd03      	ble.n	8004280 <heating_scheduling+0x16c>
 8004278:	7d5c      	ldrb	r4, [r3, #21]
 800427a:	1b0c      	subs	r4, r1, r4
 800427c:	2c00      	cmp	r4, #0
 800427e:	dbb6      	blt.n	80041ee <heating_scheduling+0xda>
 8004280:	785c      	ldrb	r4, [r3, #1]
 8004282:	e7c8      	b.n	8004216 <heating_scheduling+0x102>
				&& ( (time->Minutes - heating_schedule[2].Minutes > 0) && (time->Minutes - heating_schedule[3].Minutes < 0) ) ){
 8004284:	7841      	ldrb	r1, [r0, #1]
 8004286:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 800428a:	1b0c      	subs	r4, r1, r4
 800428c:	2c00      	cmp	r4, #0
 800428e:	dd9b      	ble.n	80041c8 <heating_scheduling+0xb4>
 8004290:	e795      	b.n	80041be <heating_scheduling+0xaa>
				&& ( (time->Minutes - heating_schedule[4].Minutes > 0) && (time->Minutes - heating_schedule[5].Minutes < 0) ) ){
 8004292:	7841      	ldrb	r1, [r0, #1]
 8004294:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8004298:	1a8a      	subs	r2, r1, r2
 800429a:	2a00      	cmp	r2, #0
 800429c:	dd04      	ble.n	80042a8 <heating_scheduling+0x194>
 800429e:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 80042a2:	1a8a      	subs	r2, r1, r2
 80042a4:	2a00      	cmp	r2, #0
 80042a6:	dba2      	blt.n	80041ee <heating_scheduling+0xda>
 80042a8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80042ac:	e7cd      	b.n	800424a <heating_scheduling+0x136>
 80042ae:	bf00      	nop
 80042b0:	20000250 	.word	0x20000250
 80042b4:	200002bc 	.word	0x200002bc
 80042b8:	20000470 	.word	0x20000470
 80042bc:	2000025c 	.word	0x2000025c
 80042c0:	20000530 	.word	0x20000530
 80042c4:	20000284 	.word	0x20000284
 80042c8:	20000014 	.word	0x20000014
 80042cc:	48000400 	.word	0x48000400
 80042d0:	20000018 	.word	0x20000018

080042d4 <init_peripherals>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;

void init_peripherals(){
 80042d4:	b570      	push	{r4, r5, r6, lr}

	//A
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 		// 7_SEG_1
 80042d6:	2201      	movs	r2, #1
 80042d8:	2120      	movs	r1, #32
 80042da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042de:	f7fd fdbd 	bl	8001e5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_3
 80042e2:	2201      	movs	r2, #1
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ea:	f7fd fdb7 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);		// 7_SEG_7
 80042ee:	2201      	movs	r2, #1
 80042f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042f8:	f7fd fdb0 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);		// 7_SEG_6
 80042fc:	2201      	movs	r2, #1
 80042fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004306:	f7fd fda9 	bl	8001e5c <HAL_GPIO_WritePin>

	// B
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 800430a:	4c88      	ldr	r4, [pc, #544]	; (800452c <init_peripherals+0x258>)
 800430c:	2201      	movs	r2, #1
 800430e:	2108      	movs	r1, #8
 8004310:	4620      	mov	r0, r4
 8004312:	f7fd fda3 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004316:	2201      	movs	r2, #1
 8004318:	2110      	movs	r1, #16
 800431a:	4620      	mov	r0, r4
 800431c:	f7fd fd9e 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004320:	2201      	movs	r2, #1
 8004322:	2120      	movs	r1, #32
 8004324:	4620      	mov	r0, r4
 8004326:	f7fd fd99 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);		// 7_SEG_4
 800432a:	2201      	movs	r2, #1
 800432c:	2140      	movs	r1, #64	; 0x40
 800432e:	4620      	mov	r0, r4
 8004330:	f7fd fd94 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004334:	2201      	movs	r2, #1
 8004336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800433a:	4620      	mov	r0, r4
 800433c:	f7fd fd8e 	bl	8001e5c <HAL_GPIO_WritePin>
	// C
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);		// 7_SEG_5
 8004340:	2201      	movs	r2, #1
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	487a      	ldr	r0, [pc, #488]	; (8004530 <init_peripherals+0x25c>)
 8004346:	f7fd fd89 	bl	8001e5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);		// Heater
 800434a:	2200      	movs	r2, #0
 800434c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004350:	4620      	mov	r0, r4
 8004352:	f7fd fd83 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 8004356:	2201      	movs	r2, #1
 8004358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800435c:	4620      	mov	r0, r4
 800435e:	f7fd fd7d 	bl	8001e5c <HAL_GPIO_WritePin>

	studentnumber = (uint8_t*)malloc(15);
 8004362:	200f      	movs	r0, #15
 8004364:	f001 fd64 	bl	8005e30 <malloc>
 8004368:	4b72      	ldr	r3, [pc, #456]	; (8004534 <init_peripherals+0x260>)
 800436a:	6018      	str	r0, [r3, #0]
	memset(studentnumber, 0x00, 15);
 800436c:	2400      	movs	r4, #0
 800436e:	6004      	str	r4, [r0, #0]
 8004370:	6044      	str	r4, [r0, #4]
 8004372:	6084      	str	r4, [r0, #8]
 8004374:	f8c0 400b 	str.w	r4, [r0, #11]

	return_value = (uint8_t*)malloc(50);
 8004378:	2032      	movs	r0, #50	; 0x32
 800437a:	f001 fd59 	bl	8005e30 <malloc>
 800437e:	4b6e      	ldr	r3, [pc, #440]	; (8004538 <init_peripherals+0x264>)
 8004380:	6018      	str	r0, [r3, #0]
	memset(return_value, 0x00, 50);
 8004382:	2232      	movs	r2, #50	; 0x32
 8004384:	4621      	mov	r1, r4
 8004386:	f001 fd66 	bl	8005e56 <memset>

	uart_command = (uint8_t*)malloc(60);
 800438a:	203c      	movs	r0, #60	; 0x3c
 800438c:	f001 fd50 	bl	8005e30 <malloc>
 8004390:	4e6a      	ldr	r6, [pc, #424]	; (800453c <init_peripherals+0x268>)
 8004392:	6030      	str	r0, [r6, #0]
	memset(uart_command, 0x00, 60);
 8004394:	253c      	movs	r5, #60	; 0x3c
 8004396:	462a      	mov	r2, r5
 8004398:	4621      	mov	r1, r4
 800439a:	f001 fd5c 	bl	8005e56 <memset>

	uart_command_copy = (uint8_t*)malloc(60);
 800439e:	4628      	mov	r0, r5
 80043a0:	f001 fd46 	bl	8005e30 <malloc>
 80043a4:	4b66      	ldr	r3, [pc, #408]	; (8004540 <init_peripherals+0x26c>)
 80043a6:	6018      	str	r0, [r3, #0]
	memset(uart_command, 0x00, 60);
 80043a8:	462a      	mov	r2, r5
 80043aa:	4621      	mov	r1, r4
 80043ac:	6830      	ldr	r0, [r6, #0]
 80043ae:	f001 fd52 	bl	8005e56 <memset>


	set_temp = (uint8_t*)malloc(3);
 80043b2:	2003      	movs	r0, #3
 80043b4:	f001 fd3c 	bl	8005e30 <malloc>
 80043b8:	4b62      	ldr	r3, [pc, #392]	; (8004544 <init_peripherals+0x270>)
 80043ba:	6018      	str	r0, [r3, #0]
	memset(set_temp, 0x00, 4);
 80043bc:	6004      	str	r4, [r0, #0]

	segment_val =set_temp;
 80043be:	4b62      	ldr	r3, [pc, #392]	; (8004548 <init_peripherals+0x274>)
 80043c0:	6018      	str	r0, [r3, #0]
	//	  memset(segment_val, 0x00, 4);

	ADC1_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 80043c2:	201c      	movs	r0, #28
 80043c4:	f001 fd34 	bl	8005e30 <malloc>
 80043c8:	4b60      	ldr	r3, [pc, #384]	; (800454c <init_peripherals+0x278>)
 80043ca:	6018      	str	r0, [r3, #0]
	memset(ADC1_buffer, 0x00, 7);
 80043cc:	6004      	str	r4, [r0, #0]
 80043ce:	f8c0 4003 	str.w	r4, [r0, #3]

	ADC2_buffer = (uint32_t*)malloc(7*sizeof(uint32_t));
 80043d2:	201c      	movs	r0, #28
 80043d4:	f001 fd2c 	bl	8005e30 <malloc>
 80043d8:	4b5d      	ldr	r3, [pc, #372]	; (8004550 <init_peripherals+0x27c>)
 80043da:	6018      	str	r0, [r3, #0]
	memset(ADC2_buffer, 0x00, 7);
 80043dc:	6004      	str	r4, [r0, #0]
 80043de:	f8c0 4003 	str.w	r4, [r0, #3]

	voltage_rms =(char*)malloc(3*sizeof(char));
 80043e2:	2003      	movs	r0, #3
 80043e4:	f001 fd24 	bl	8005e30 <malloc>
 80043e8:	4b5a      	ldr	r3, [pc, #360]	; (8004554 <init_peripherals+0x280>)
 80043ea:	6018      	str	r0, [r3, #0]
	memset(voltage_rms, 0x00, 3);
 80043ec:	8004      	strh	r4, [r0, #0]
 80043ee:	7084      	strb	r4, [r0, #2]

	current_rms =(char*)malloc(4*sizeof(char));
 80043f0:	2004      	movs	r0, #4
 80043f2:	f001 fd1d 	bl	8005e30 <malloc>
 80043f6:	4b58      	ldr	r3, [pc, #352]	; (8004558 <init_peripherals+0x284>)
 80043f8:	6018      	str	r0, [r3, #0]
	memset(current_rms, 0x00, 4);
 80043fa:	6004      	str	r4, [r0, #0]

	total_water =(char*)malloc(20*sizeof(char));
 80043fc:	2014      	movs	r0, #20
 80043fe:	f001 fd17 	bl	8005e30 <malloc>
 8004402:	4a56      	ldr	r2, [pc, #344]	; (800455c <init_peripherals+0x288>)
 8004404:	6010      	str	r0, [r2, #0]
	memset(total_water, 0x00, 20);
 8004406:	6004      	str	r4, [r0, #0]
 8004408:	6044      	str	r4, [r0, #4]
 800440a:	6084      	str	r4, [r0, #8]
 800440c:	60c4      	str	r4, [r0, #12]
 800440e:	6104      	str	r4, [r0, #16]
	sprintf(total_water,"%lu", water_acc);
 8004410:	4b53      	ldr	r3, [pc, #332]	; (8004560 <init_peripherals+0x28c>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4953      	ldr	r1, [pc, #332]	; (8004564 <init_peripherals+0x290>)
 8004416:	f001 fde3 	bl	8005fe0 <siprintf>


	voltage_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 800441a:	2010      	movs	r0, #16
 800441c:	f001 fd08 	bl	8005e30 <malloc>
 8004420:	4b51      	ldr	r3, [pc, #324]	; (8004568 <init_peripherals+0x294>)
 8004422:	6018      	str	r0, [r3, #0]
	current_int_rms = (uint32_t*)malloc(4*sizeof(uint32_t));
 8004424:	2010      	movs	r0, #16
 8004426:	f001 fd03 	bl	8005e30 <malloc>
 800442a:	4b50      	ldr	r3, [pc, #320]	; (800456c <init_peripherals+0x298>)
 800442c:	6018      	str	r0, [r3, #0]

	ambient_temp = (char*)malloc(4*sizeof(char));
 800442e:	2004      	movs	r0, #4
 8004430:	f001 fcfe 	bl	8005e30 <malloc>
 8004434:	4b4e      	ldr	r3, [pc, #312]	; (8004570 <init_peripherals+0x29c>)
 8004436:	6018      	str	r0, [r3, #0]
	geyser_temp = (char*)malloc(4*sizeof(char));
 8004438:	2004      	movs	r0, #4
 800443a:	f001 fcf9 	bl	8005e30 <malloc>
 800443e:	4b4d      	ldr	r3, [pc, #308]	; (8004574 <init_peripherals+0x2a0>)
 8004440:	6018      	str	r0, [r3, #0]

	//HEATER
	heater_state = (char*)malloc(5*sizeof(char));
	heater_state = heater_OFF;
 8004442:	4a4d      	ldr	r2, [pc, #308]	; (8004578 <init_peripherals+0x2a4>)
 8004444:	4b4d      	ldr	r3, [pc, #308]	; (800457c <init_peripherals+0x2a8>)
 8004446:	601a      	str	r2, [r3, #0]

	//Valve
	valve_state = (char*)malloc(8*sizeof(char));
	valve_state = valve_CLOSE;
 8004448:	4a4d      	ldr	r2, [pc, #308]	; (8004580 <init_peripherals+0x2ac>)
 800444a:	4b4e      	ldr	r3, [pc, #312]	; (8004584 <init_peripherals+0x2b0>)
 800444c:	601a      	str	r2, [r3, #0]

	// Heating schedule
	heat_schedule1 = (char*)malloc(15*sizeof(char));
 800444e:	200f      	movs	r0, #15
 8004450:	f001 fcee 	bl	8005e30 <malloc>
 8004454:	4e4c      	ldr	r6, [pc, #304]	; (8004588 <init_peripherals+0x2b4>)
 8004456:	6030      	str	r0, [r6, #0]
	memset(heat_schedule1, 0x00, 15);
 8004458:	6004      	str	r4, [r0, #0]
 800445a:	6044      	str	r4, [r0, #4]
 800445c:	6084      	str	r4, [r0, #8]
 800445e:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule2 = (char*)malloc(15*sizeof(char));
 8004462:	200f      	movs	r0, #15
 8004464:	f001 fce4 	bl	8005e30 <malloc>
 8004468:	4d48      	ldr	r5, [pc, #288]	; (800458c <init_peripherals+0x2b8>)
 800446a:	6028      	str	r0, [r5, #0]
	memset(heat_schedule2, 0x00, 15);
 800446c:	6004      	str	r4, [r0, #0]
 800446e:	6044      	str	r4, [r0, #4]
 8004470:	6084      	str	r4, [r0, #8]
 8004472:	f8c0 400b 	str.w	r4, [r0, #11]
	heat_schedule3 = (char*)malloc(15*sizeof(char));
 8004476:	200f      	movs	r0, #15
 8004478:	f001 fcda 	bl	8005e30 <malloc>
 800447c:	4b44      	ldr	r3, [pc, #272]	; (8004590 <init_peripherals+0x2bc>)
 800447e:	6018      	str	r0, [r3, #0]
	memset(heat_schedule3, 0x00, 15);
 8004480:	6004      	str	r4, [r0, #0]
 8004482:	6044      	str	r4, [r0, #4]
 8004484:	6084      	str	r4, [r0, #8]
 8004486:	f8c0 400b 	str.w	r4, [r0, #11]

	heating_schedule_info[0] = heat_schedule1;
 800448a:	4b42      	ldr	r3, [pc, #264]	; (8004594 <init_peripherals+0x2c0>)
 800448c:	6832      	ldr	r2, [r6, #0]
 800448e:	601a      	str	r2, [r3, #0]
	heating_schedule_info[1] = heat_schedule2;
 8004490:	682a      	ldr	r2, [r5, #0]
 8004492:	605a      	str	r2, [r3, #4]
	heating_schedule_info[2] = heat_schedule3;
 8004494:	6098      	str	r0, [r3, #8]

	heating_info = (char*)malloc(20*sizeof(char));
 8004496:	2014      	movs	r0, #20
 8004498:	f001 fcca 	bl	8005e30 <malloc>
 800449c:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <init_peripherals+0x2c4>)
 800449e:	6018      	str	r0, [r3, #0]
	memset(heating_info, 0x00, 10);
 80044a0:	6004      	str	r4, [r0, #0]
 80044a2:	6044      	str	r4, [r0, #4]
 80044a4:	8104      	strh	r4, [r0, #8]

	heating_time_size = 0;
 80044a6:	4b3d      	ldr	r3, [pc, #244]	; (800459c <init_peripherals+0x2c8>)
 80044a8:	601c      	str	r4, [r3, #0]


	// Initiliazing the RTC
	time = malloc(6*sizeof(uint32_t));
 80044aa:	2018      	movs	r0, #24
 80044ac:	f001 fcc0 	bl	8005e30 <malloc>
 80044b0:	4e3b      	ldr	r6, [pc, #236]	; (80045a0 <init_peripherals+0x2cc>)
 80044b2:	6030      	str	r0, [r6, #0]
	memset(time, 0x00, 6);
 80044b4:	6004      	str	r4, [r0, #0]
 80044b6:	8084      	strh	r4, [r0, #4]
//
	time->Hours = 0x0;
 80044b8:	7004      	strb	r4, [r0, #0]
	time->Minutes = 0x0;
 80044ba:	7044      	strb	r4, [r0, #1]
	time->Seconds = 0x0;
 80044bc:	7084      	strb	r4, [r0, #2]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044be:	60c4      	str	r4, [r0, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 80044c0:	6104      	str	r4, [r0, #16]

	date = malloc(sizeof(uint32_t));
 80044c2:	2004      	movs	r0, #4
 80044c4:	f001 fcb4 	bl	8005e30 <malloc>
 80044c8:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <init_peripherals+0x2d0>)
 80044ca:	6018      	str	r0, [r3, #0]
	memset(date,0x00,1);

	date->WeekDay = RTC_WEEKDAY_MONDAY;
 80044cc:	2501      	movs	r5, #1
 80044ce:	7005      	strb	r5, [r0, #0]
	date->Month = RTC_MONTH_JANUARY;
 80044d0:	7045      	strb	r5, [r0, #1]
	date->Date = 0x1;
 80044d2:	7085      	strb	r5, [r0, #2]
	date->Year = 0x0;
 80044d4:	70c4      	strb	r4, [r0, #3]
//	*heating_schedule = malloc(3*6*sizeof(uint32_t));
//	memset(heating_schedule, 0x00, 18);


	// FLASH
	flash_stored = (uint8_t*)malloc(70*sizeof(uint8_t));
 80044d6:	2046      	movs	r0, #70	; 0x46
 80044d8:	f001 fcaa 	bl	8005e30 <malloc>
 80044dc:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <init_peripherals+0x2d4>)
 80044de:	6018      	str	r0, [r3, #0]
	memset(flash_stored, 0x00, 70);
 80044e0:	2246      	movs	r2, #70	; 0x46
 80044e2:	4621      	mov	r1, r4
 80044e4:	f001 fcb7 	bl	8005e56 <memset>


	new_time = malloc(6*sizeof(uint32_t));
 80044e8:	2018      	movs	r0, #24
 80044ea:	f001 fca1 	bl	8005e30 <malloc>
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <init_peripherals+0x2d8>)
 80044f0:	6018      	str	r0, [r3, #0]
	memset(new_time, 0x00, 6);
 80044f2:	6004      	str	r4, [r0, #0]
 80044f4:	8084      	strh	r4, [r0, #4]

	temp_time_var = (char*)malloc(3*sizeof(uint8_t));
 80044f6:	2003      	movs	r0, #3
 80044f8:	f001 fc9a 	bl	8005e30 <malloc>
 80044fc:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <init_peripherals+0x2dc>)
 80044fe:	6018      	str	r0, [r3, #0]
	memset(temp_time_var, 0x00, 3);
 8004500:	8004      	strh	r4, [r0, #0]
 8004502:	7084      	strb	r4, [r0, #2]

	flash_error = (uint32_t*)malloc(1*sizeof(uint32_t));
 8004504:	2004      	movs	r0, #4
 8004506:	f001 fc93 	bl	8005e30 <malloc>
 800450a:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <init_peripherals+0x2e0>)
 800450c:	6018      	str	r0, [r3, #0]
	pEraseInit = (FLASH_EraseInitTypeDef*)malloc(4*sizeof(uint32_t));
 800450e:	2010      	movs	r0, #16
 8004510:	f001 fc8e 	bl	8005e30 <malloc>
 8004514:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <init_peripherals+0x2e4>)
 8004516:	6018      	str	r0, [r3, #0]

	// get time
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BCD);
 8004518:	462a      	mov	r2, r5
 800451a:	6831      	ldr	r1, [r6, #0]
 800451c:	4827      	ldr	r0, [pc, #156]	; (80045bc <init_peripherals+0x2e8>)
 800451e:	f7fe fa31 	bl	8002984 <HAL_RTC_GetTime>

	HAL_TIM_Base_Start_IT(&htim2);
 8004522:	4827      	ldr	r0, [pc, #156]	; (80045c0 <init_peripherals+0x2ec>)
 8004524:	f7fe fce8 	bl	8002ef8 <HAL_TIM_Base_Start_IT>
 8004528:	bd70      	pop	{r4, r5, r6, pc}
 800452a:	bf00      	nop
 800452c:	48000400 	.word	0x48000400
 8004530:	48000800 	.word	0x48000800
 8004534:	200005a8 	.word	0x200005a8
 8004538:	200002a0 	.word	0x200002a0
 800453c:	200002c8 	.word	0x200002c8
 8004540:	200002cc 	.word	0x200002cc
 8004544:	200002ac 	.word	0x200002ac
 8004548:	200002a8 	.word	0x200002a8
 800454c:	20000228 	.word	0x20000228
 8004550:	2000022c 	.word	0x2000022c
 8004554:	200002dc 	.word	0x200002dc
 8004558:	20000258 	.word	0x20000258
 800455c:	200002c0 	.word	0x200002c0
 8004560:	200002e0 	.word	0x200002e0
 8004564:	08006b9c 	.word	0x08006b9c
 8004568:	200002d8 	.word	0x200002d8
 800456c:	20000254 	.word	0x20000254
 8004570:	2000024c 	.word	0x2000024c
 8004574:	20000270 	.word	0x20000270
 8004578:	20000014 	.word	0x20000014
 800457c:	20000284 	.word	0x20000284
 8004580:	20000024 	.word	0x20000024
 8004584:	200002d4 	.word	0x200002d4
 8004588:	20000278 	.word	0x20000278
 800458c:	2000027c 	.word	0x2000027c
 8004590:	20000280 	.word	0x20000280
 8004594:	200005d4 	.word	0x200005d4
 8004598:	20000288 	.word	0x20000288
 800459c:	200005b0 	.word	0x200005b0
 80045a0:	200002bc 	.word	0x200002bc
 80045a4:	2000025c 	.word	0x2000025c
 80045a8:	2000026c 	.word	0x2000026c
 80045ac:	20000290 	.word	0x20000290
 80045b0:	200002b4 	.word	0x200002b4
 80045b4:	20000268 	.word	0x20000268
 80045b8:	20000294 	.word	0x20000294
 80045bc:	20000470 	.word	0x20000470
 80045c0:	200004a8 	.word	0x200004a8

080045c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80045c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c8:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ca:	4b55      	ldr	r3, [pc, #340]	; (8004720 <MX_GPIO_Init+0x15c>)
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80045d2:	615a      	str	r2, [r3, #20]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80045da:	9201      	str	r2, [sp, #4]
 80045dc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80045e4:	615a      	str	r2, [r3, #20]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80045ec:	9202      	str	r2, [sp, #8]
 80045ee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045f6:	615a      	str	r2, [r3, #20]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80045fe:	9203      	str	r2, [sp, #12]
 8004600:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004608:	615a      	str	r2, [r3, #20]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, w_RDY_Pin|s_RDY_Pin, GPIO_PIN_SET);
 8004614:	2201      	movs	r2, #1
 8004616:	2112      	movs	r1, #18
 8004618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800461c:	f7fd fc1e 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8004626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800462a:	f7fd fc17 	bl	8001e5c <HAL_GPIO_WritePin>
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 800462e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8004734 <MX_GPIO_Init+0x170>
 8004632:	2200      	movs	r2, #0
 8004634:	f246 4178 	movw	r1, #25720	; 0x6478
 8004638:	4640      	mov	r0, r8
 800463a:	f7fd fc0f 	bl	8001e5c <HAL_GPIO_WritePin>
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800463e:	4e39      	ldr	r6, [pc, #228]	; (8004724 <MX_GPIO_Init+0x160>)
 8004640:	2200      	movs	r2, #0
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	4630      	mov	r0, r6
 8004646:	f7fd fc09 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800464a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800464e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004650:	4b35      	ldr	r3, [pc, #212]	; (8004728 <MX_GPIO_Init+0x164>)
 8004652:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004654:	2400      	movs	r4, #0
 8004656:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004658:	a905      	add	r1, sp, #20
 800465a:	4630      	mov	r0, r6
 800465c:	f7fd fb14 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004660:	2303      	movs	r3, #3
 8004662:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004664:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004668:	a905      	add	r1, sp, #20
 800466a:	4630      	mov	r0, r6
 800466c:	f7fd fb0c 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TOGGLE_Pin */
  GPIO_InitStruct.Pin = TOUCH_TOGGLE_Pin;
 8004670:	2501      	movs	r5, #1
 8004672:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <MX_GPIO_Init+0x168>)
 8004676:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004678:	2702      	movs	r7, #2
 800467a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(TOUCH_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 800467c:	a905      	add	r1, sp, #20
 800467e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004682:	f7fd fb01 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : w_RDY_Pin s_RDY_Pin */
  GPIO_InitStruct.Pin = w_RDY_Pin|s_RDY_Pin;
 8004686:	2312      	movs	r3, #18
 8004688:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800468a:	2311      	movs	r3, #17
 800468c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800468e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004690:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004692:	a905      	add	r1, sp, #20
 8004694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004698:	f7fd faf6 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_7_Pin 
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_7_Pin 
 800469c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80046a0:	9305      	str	r3, [sp, #20]
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a8:	a905      	add	r1, sp, #20
 80046aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046ae:	f7fd faeb 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046b2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b8:	a905      	add	r1, sp, #20
 80046ba:	4640      	mov	r0, r8
 80046bc:	f7fd fae4 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_8_Digit_1_Pin VALVE_CONTROL_Pin HEATER_CONTROL_Pin SEG_11_Digit_4_Pin 
                           SEG_9_Digit_2_Pin SEG_10_Digit_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = SEG_8_Digit_1_Pin|VALVE_CONTROL_Pin|HEATER_CONTROL_Pin|SEG_11_Digit_4_Pin 
 80046c0:	f246 4378 	movw	r3, #25720	; 0x6478
 80046c4:	9305      	str	r3, [sp, #20]
                          |SEG_9_Digit_2_Pin|SEG_10_Digit_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046c6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046cc:	a905      	add	r1, sp, #20
 80046ce:	4640      	mov	r0, r8
 80046d0:	f7fd fada 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_TRIG_Pin */
  GPIO_InitStruct.Pin = FLOW_TRIG_Pin;
 80046d4:	2340      	movs	r3, #64	; 0x40
 80046d6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <MX_GPIO_Init+0x16c>)
 80046da:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046dc:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(FLOW_TRIG_GPIO_Port, &GPIO_InitStruct);
 80046de:	a905      	add	r1, sp, #20
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7fd fad1 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_5_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin;
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ea:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ee:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SEG_5_GPIO_Port, &GPIO_InitStruct);
 80046f0:	a905      	add	r1, sp, #20
 80046f2:	4630      	mov	r0, r6
 80046f4:	f7fd fac8 	bl	8001c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80046f8:	4622      	mov	r2, r4
 80046fa:	4621      	mov	r1, r4
 80046fc:	2006      	movs	r0, #6
 80046fe:	f7fd f851 	bl	80017a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004702:	2006      	movs	r0, #6
 8004704:	f7fd f884 	bl	8001810 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8004708:	462a      	mov	r2, r5
 800470a:	4621      	mov	r1, r4
 800470c:	2017      	movs	r0, #23
 800470e:	f7fd f849 	bl	80017a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004712:	2017      	movs	r0, #23
 8004714:	f7fd f87c 	bl	8001810 <HAL_NVIC_EnableIRQ>

}
 8004718:	b00a      	add	sp, #40	; 0x28
 800471a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	48000800 	.word	0x48000800
 8004728:	10110000 	.word	0x10110000
 800472c:	10210000 	.word	0x10210000
 8004730:	10310000 	.word	0x10310000
 8004734:	48000400 	.word	0x48000400

08004738 <MX_DMA_Init>:
{
 8004738:	b500      	push	{lr}
 800473a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <MX_DMA_Init+0x30>)
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	615a      	str	r2, [r3, #20]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 1);
 8004750:	2201      	movs	r2, #1
 8004752:	2100      	movs	r1, #0
 8004754:	200c      	movs	r0, #12
 8004756:	f7fd f825 	bl	80017a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800475a:	200c      	movs	r0, #12
 800475c:	f7fd f858 	bl	8001810 <HAL_NVIC_EnableIRQ>
}
 8004760:	b003      	add	sp, #12
 8004762:	f85d fb04 	ldr.w	pc, [sp], #4
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 800476c:	4770      	bx	lr

0800476e <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800476e:	e7fe      	b.n	800476e <_Error_Handler>

08004770 <MX_TIM2_Init>:
{
 8004770:	b500      	push	{lr}
 8004772:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8004774:	4818      	ldr	r0, [pc, #96]	; (80047d8 <MX_TIM2_Init+0x68>)
 8004776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800477a:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 800477c:	2301      	movs	r3, #1
 800477e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004780:	2300      	movs	r3, #0
 8004782:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 326400;
 8004784:	4a15      	ldr	r2, [pc, #84]	; (80047dc <MX_TIM2_Init+0x6c>)
 8004786:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004788:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800478a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800478c:	f7fe fda6 	bl	80032dc <HAL_TIM_Base_Init>
 8004790:	b998      	cbnz	r0, 80047ba <MX_TIM2_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004792:	a908      	add	r1, sp, #32
 8004794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004798:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800479c:	480e      	ldr	r0, [pc, #56]	; (80047d8 <MX_TIM2_Init+0x68>)
 800479e:	f7fe fbb7 	bl	8002f10 <HAL_TIM_ConfigClockSource>
 80047a2:	b978      	cbnz	r0, 80047c4 <MX_TIM2_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047a4:	2300      	movs	r3, #0
 80047a6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047a8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80047aa:	a901      	add	r1, sp, #4
 80047ac:	480a      	ldr	r0, [pc, #40]	; (80047d8 <MX_TIM2_Init+0x68>)
 80047ae:	f7fe fdb1 	bl	8003314 <HAL_TIMEx_MasterConfigSynchronization>
 80047b2:	b960      	cbnz	r0, 80047ce <MX_TIM2_Init+0x5e>
}
 80047b4:	b009      	add	sp, #36	; 0x24
 80047b6:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80047ba:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80047be:	4808      	ldr	r0, [pc, #32]	; (80047e0 <MX_TIM2_Init+0x70>)
 80047c0:	f7ff ffd5 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80047c4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80047c8:	4805      	ldr	r0, [pc, #20]	; (80047e0 <MX_TIM2_Init+0x70>)
 80047ca:	f7ff ffd0 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80047ce:	f240 11d5 	movw	r1, #469	; 0x1d5
 80047d2:	4803      	ldr	r0, [pc, #12]	; (80047e0 <MX_TIM2_Init+0x70>)
 80047d4:	f7ff ffcb 	bl	800476e <_Error_Handler>
 80047d8:	200004a8 	.word	0x200004a8
 80047dc:	0004fb00 	.word	0x0004fb00
 80047e0:	08006ba0 	.word	0x08006ba0

080047e4 <MX_USART1_UART_Init>:
{
 80047e4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80047e6:	480c      	ldr	r0, [pc, #48]	; (8004818 <MX_USART1_UART_Init+0x34>)
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <MX_USART1_UART_Init+0x38>)
 80047ea:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80047ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80047f0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047f2:	2300      	movs	r3, #0
 80047f4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047f6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047f8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047fa:	220c      	movs	r2, #12
 80047fc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047fe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004800:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004802:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004804:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004806:	f7fe ffc9 	bl	800379c <HAL_UART_Init>
 800480a:	b900      	cbnz	r0, 800480e <MX_USART1_UART_Init+0x2a>
 800480c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800480e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8004812:	4803      	ldr	r0, [pc, #12]	; (8004820 <MX_USART1_UART_Init+0x3c>)
 8004814:	f7ff ffab 	bl	800476e <_Error_Handler>
 8004818:	20000400 	.word	0x20000400
 800481c:	40013800 	.word	0x40013800
 8004820:	08006ba0 	.word	0x08006ba0

08004824 <MX_ADC2_Init>:
{
 8004824:	b500      	push	{lr}
 8004826:	b087      	sub	sp, #28
  hadc2.Instance = ADC2;
 8004828:	482d      	ldr	r0, [pc, #180]	; (80048e0 <MX_ADC2_Init+0xbc>)
 800482a:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <MX_ADC2_Init+0xc0>)
 800482c:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800482e:	2300      	movs	r3, #0
 8004830:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004832:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004834:	2201      	movs	r2, #1
 8004836:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004838:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800483a:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800483c:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800483e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004840:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 4;
 8004842:	2104      	movs	r1, #4
 8004844:	6201      	str	r1, [r0, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004846:	6342      	str	r2, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004848:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800484a:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800484c:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800484e:	f7fc fc2b 	bl	80010a8 <HAL_ADC_Init>
 8004852:	bb60      	cbnz	r0, 80048ae <MX_ADC2_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_8;
 8004854:	2308      	movs	r3, #8
 8004856:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004858:	2301      	movs	r3, #1
 800485a:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800485c:	2300      	movs	r3, #0
 800485e:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8004860:	2207      	movs	r2, #7
 8004862:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004864:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8004866:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004868:	4669      	mov	r1, sp
 800486a:	481d      	ldr	r0, [pc, #116]	; (80048e0 <MX_ADC2_Init+0xbc>)
 800486c:	f7fc fdf2 	bl	8001454 <HAL_ADC_ConfigChannel>
 8004870:	bb10      	cbnz	r0, 80048b8 <MX_ADC2_Init+0x94>
  sConfig.Channel = ADC_CHANNEL_9;
 8004872:	2309      	movs	r3, #9
 8004874:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004876:	2302      	movs	r3, #2
 8004878:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800487a:	4669      	mov	r1, sp
 800487c:	4818      	ldr	r0, [pc, #96]	; (80048e0 <MX_ADC2_Init+0xbc>)
 800487e:	f7fc fde9 	bl	8001454 <HAL_ADC_ConfigChannel>
 8004882:	b9f0      	cbnz	r0, 80048c2 <MX_ADC2_Init+0x9e>
  sConfig.Channel = ADC_CHANNEL_12;
 8004884:	230c      	movs	r3, #12
 8004886:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004888:	2303      	movs	r3, #3
 800488a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800488c:	4669      	mov	r1, sp
 800488e:	4814      	ldr	r0, [pc, #80]	; (80048e0 <MX_ADC2_Init+0xbc>)
 8004890:	f7fc fde0 	bl	8001454 <HAL_ADC_ConfigChannel>
 8004894:	b9d0      	cbnz	r0, 80048cc <MX_ADC2_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_15;
 8004896:	230f      	movs	r3, #15
 8004898:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800489a:	2304      	movs	r3, #4
 800489c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800489e:	4669      	mov	r1, sp
 80048a0:	480f      	ldr	r0, [pc, #60]	; (80048e0 <MX_ADC2_Init+0xbc>)
 80048a2:	f7fc fdd7 	bl	8001454 <HAL_ADC_ConfigChannel>
 80048a6:	b9b0      	cbnz	r0, 80048d6 <MX_ADC2_Init+0xb2>
}
 80048a8:	b007      	add	sp, #28
 80048aa:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80048ae:	f44f 7199 	mov.w	r1, #306	; 0x132
 80048b2:	480d      	ldr	r0, [pc, #52]	; (80048e8 <MX_ADC2_Init+0xc4>)
 80048b4:	f7ff ff5b 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80048b8:	f240 113f 	movw	r1, #319	; 0x13f
 80048bc:	480a      	ldr	r0, [pc, #40]	; (80048e8 <MX_ADC2_Init+0xc4>)
 80048be:	f7ff ff56 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80048c2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80048c6:	4808      	ldr	r0, [pc, #32]	; (80048e8 <MX_ADC2_Init+0xc4>)
 80048c8:	f7ff ff51 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80048cc:	f240 1151 	movw	r1, #337	; 0x151
 80048d0:	4805      	ldr	r0, [pc, #20]	; (80048e8 <MX_ADC2_Init+0xc4>)
 80048d2:	f7ff ff4c 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80048d6:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80048da:	4803      	ldr	r0, [pc, #12]	; (80048e8 <MX_ADC2_Init+0xc4>)
 80048dc:	f7ff ff47 	bl	800476e <_Error_Handler>
 80048e0:	20000318 	.word	0x20000318
 80048e4:	50000100 	.word	0x50000100
 80048e8:	08006ba0 	.word	0x08006ba0

080048ec <MX_RTC_Init>:
{
 80048ec:	b500      	push	{lr}
 80048ee:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 80048f0:	482c      	ldr	r0, [pc, #176]	; (80049a4 <MX_RTC_Init+0xb8>)
 80048f2:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <MX_RTC_Init+0xbc>)
 80048f4:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80048f6:	2100      	movs	r1, #0
 80048f8:	f7fe faf8 	bl	8002eec <HAL_RTCEx_BKUPRead>
 80048fc:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8004900:	4298      	cmp	r0, r3
 8004902:	d037      	beq.n	8004974 <MX_RTC_Init+0x88>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004904:	4827      	ldr	r0, [pc, #156]	; (80049a4 <MX_RTC_Init+0xb8>)
 8004906:	2300      	movs	r3, #0
 8004908:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800490a:	227f      	movs	r2, #127	; 0x7f
 800490c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800490e:	22ff      	movs	r2, #255	; 0xff
 8004910:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004912:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004914:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004916:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004918:	f7fe f8ce 	bl	8002ab8 <HAL_RTC_Init>
 800491c:	bb68      	cbnz	r0, 800497a <MX_RTC_Init+0x8e>
  sTime.Hours = 0x0;
 800491e:	2300      	movs	r3, #0
 8004920:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8004924:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8004928:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800492c:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800492e:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004930:	2201      	movs	r2, #1
 8004932:	a901      	add	r1, sp, #4
 8004934:	481b      	ldr	r0, [pc, #108]	; (80049a4 <MX_RTC_Init+0xb8>)
 8004936:	f7fe f917 	bl	8002b68 <HAL_RTC_SetTime>
 800493a:	bb18      	cbnz	r0, 8004984 <MX_RTC_Init+0x98>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800493c:	2201      	movs	r2, #1
 800493e:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8004942:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8004946:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800494a:	2300      	movs	r3, #0
 800494c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004950:	4669      	mov	r1, sp
 8004952:	4814      	ldr	r0, [pc, #80]	; (80049a4 <MX_RTC_Init+0xb8>)
 8004954:	f7fe f9a8 	bl	8002ca8 <HAL_RTC_SetDate>
 8004958:	b9c8      	cbnz	r0, 800498e <MX_RTC_Init+0xa2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800495a:	2200      	movs	r2, #0
 800495c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004960:	4810      	ldr	r0, [pc, #64]	; (80049a4 <MX_RTC_Init+0xb8>)
 8004962:	f7fe fa2f 	bl	8002dc4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004966:	b9b8      	cbnz	r0, 8004998 <MX_RTC_Init+0xac>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8004968:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800496c:	2100      	movs	r1, #0
 800496e:	480d      	ldr	r0, [pc, #52]	; (80049a4 <MX_RTC_Init+0xb8>)
 8004970:	f7fe fab6 	bl	8002ee0 <HAL_RTCEx_BKUPWrite>
}
 8004974:	b007      	add	sp, #28
 8004976:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800497a:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800497e:	480b      	ldr	r0, [pc, #44]	; (80049ac <MX_RTC_Init+0xc0>)
 8004980:	f7ff fef5 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004984:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <MX_RTC_Init+0xc0>)
 800498a:	f7ff fef0 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800498e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004992:	4806      	ldr	r0, [pc, #24]	; (80049ac <MX_RTC_Init+0xc0>)
 8004994:	f7ff feeb 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004998:	f240 11b1 	movw	r1, #433	; 0x1b1
 800499c:	4803      	ldr	r0, [pc, #12]	; (80049ac <MX_RTC_Init+0xc0>)
 800499e:	f7ff fee6 	bl	800476e <_Error_Handler>
 80049a2:	bf00      	nop
 80049a4:	20000470 	.word	0x20000470
 80049a8:	40002800 	.word	0x40002800
 80049ac:	08006ba0 	.word	0x08006ba0

080049b0 <MX_I2C1_Init>:
{
 80049b0:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80049b2:	4815      	ldr	r0, [pc, #84]	; (8004a08 <MX_I2C1_Init+0x58>)
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <MX_I2C1_Init+0x5c>)
 80049b6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <MX_I2C1_Init+0x60>)
 80049ba:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049c0:	2201      	movs	r2, #1
 80049c2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049c4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80049c6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049c8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049ca:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049cc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049ce:	f7fd fa59 	bl	8001e84 <HAL_I2C_Init>
 80049d2:	b950      	cbnz	r0, 80049ea <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049d4:	2100      	movs	r1, #0
 80049d6:	480c      	ldr	r0, [pc, #48]	; (8004a08 <MX_I2C1_Init+0x58>)
 80049d8:	f7fd fab8 	bl	8001f4c <HAL_I2CEx_ConfigAnalogFilter>
 80049dc:	b950      	cbnz	r0, 80049f4 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80049de:	2100      	movs	r1, #0
 80049e0:	4809      	ldr	r0, [pc, #36]	; (8004a08 <MX_I2C1_Init+0x58>)
 80049e2:	f7fd fadd 	bl	8001fa0 <HAL_I2CEx_ConfigDigitalFilter>
 80049e6:	b950      	cbnz	r0, 80049fe <MX_I2C1_Init+0x4e>
 80049e8:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80049ea:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80049ee:	4809      	ldr	r0, [pc, #36]	; (8004a14 <MX_I2C1_Init+0x64>)
 80049f0:	f7ff febd 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80049f4:	f240 1175 	movw	r1, #373	; 0x175
 80049f8:	4806      	ldr	r0, [pc, #24]	; (8004a14 <MX_I2C1_Init+0x64>)
 80049fa:	f7ff feb8 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80049fe:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8004a02:	4804      	ldr	r0, [pc, #16]	; (8004a14 <MX_I2C1_Init+0x64>)
 8004a04:	f7ff feb3 	bl	800476e <_Error_Handler>
 8004a08:	2000036c 	.word	0x2000036c
 8004a0c:	40005400 	.word	0x40005400
 8004a10:	2000090e 	.word	0x2000090e
 8004a14:	08006ba0 	.word	0x08006ba0

08004a18 <SystemClock_Config>:
{
 8004a18:	b500      	push	{lr}
 8004a1a:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 8004a1c:	f7fd fae8 	bl	8001ff0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004a20:	4a29      	ldr	r2, [pc, #164]	; (8004ac8 <SystemClock_Config+0xb0>)
 8004a22:	6a13      	ldr	r3, [r2, #32]
 8004a24:	f023 0318 	bic.w	r3, r3, #24
 8004a28:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a32:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004a34:	2310      	movs	r3, #16
 8004a36:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004a40:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004a44:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a46:	a80c      	add	r0, sp, #48	; 0x30
 8004a48:	f7fd fada 	bl	8002000 <HAL_RCC_OscConfig>
 8004a4c:	bb70      	cbnz	r0, 8004aac <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a4e:	230f      	movs	r3, #15
 8004a50:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a52:	2102      	movs	r1, #2
 8004a54:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a56:	2300      	movs	r3, #0
 8004a58:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a60:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a62:	a807      	add	r0, sp, #28
 8004a64:	f7fd fdce 	bl	8002604 <HAL_RCC_ClockConfig>
 8004a68:	bb20      	cbnz	r0, 8004ab4 <SystemClock_Config+0x9c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <SystemClock_Config+0xb4>)
 8004a6c:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004a6e:	2200      	movs	r2, #0
 8004a70:	9202      	str	r2, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a76:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004a78:	9203      	str	r2, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004a7a:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a7c:	4668      	mov	r0, sp
 8004a7e:	f7fd febf 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 8004a82:	b9e0      	cbnz	r0, 8004abe <SystemClock_Config+0xa6>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004a84:	f7fd fe86 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <SystemClock_Config+0xb8>)
 8004a8a:	fba3 3000 	umull	r3, r0, r3, r0
 8004a8e:	0980      	lsrs	r0, r0, #6
 8004a90:	f7fc feca 	bl	8001828 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004a94:	2004      	movs	r0, #4
 8004a96:	f7fc fee1 	bl	800185c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	f7fc fe7f 	bl	80017a4 <HAL_NVIC_SetPriority>
}
 8004aa6:	b017      	add	sp, #92	; 0x5c
 8004aa8:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004aac:	21f2      	movs	r1, #242	; 0xf2
 8004aae:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <SystemClock_Config+0xbc>)
 8004ab0:	f7ff fe5d 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ab8:	4806      	ldr	r0, [pc, #24]	; (8004ad4 <SystemClock_Config+0xbc>)
 8004aba:	f7ff fe58 	bl	800476e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004abe:	f240 110b 	movw	r1, #267	; 0x10b
 8004ac2:	4804      	ldr	r0, [pc, #16]	; (8004ad4 <SystemClock_Config+0xbc>)
 8004ac4:	f7ff fe53 	bl	800476e <_Error_Handler>
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	000100a1 	.word	0x000100a1
 8004ad0:	10624dd3 	.word	0x10624dd3
 8004ad4:	08006ba0 	.word	0x08006ba0

08004ad8 <main>:
{
 8004ad8:	b508      	push	{r3, lr}
  HAL_Init();
 8004ada:	f7fc fa1b 	bl	8000f14 <HAL_Init>
  SystemClock_Config();
 8004ade:	f7ff ff9b 	bl	8004a18 <SystemClock_Config>
  MX_GPIO_Init();
 8004ae2:	f7ff fd6f 	bl	80045c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ae6:	f7ff fe27 	bl	8004738 <MX_DMA_Init>
  MX_TIM2_Init();
 8004aea:	f7ff fe41 	bl	8004770 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004aee:	f7ff fe79 	bl	80047e4 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8004af2:	f7ff fe97 	bl	8004824 <MX_ADC2_Init>
  MX_RTC_Init();
 8004af6:	f7ff fef9 	bl	80048ec <MX_RTC_Init>
  MX_I2C1_Init();
 8004afa:	f7ff ff59 	bl	80049b0 <MX_I2C1_Init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8004afe:	4c3f      	ldr	r4, [pc, #252]	; (8004bfc <main+0x124>)
 8004b00:	2100      	movs	r1, #0
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7fc fc60 	bl	80013c8 <HAL_ADCEx_Calibration_Start>
  init_peripherals();
 8004b08:	f7ff fbe4 	bl	80042d4 <init_peripherals>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	493c      	ldr	r1, [pc, #240]	; (8004c00 <main+0x128>)
 8004b10:	483c      	ldr	r0, [pc, #240]	; (8004c04 <main+0x12c>)
 8004b12:	f7fe fc4f 	bl	80033b4 <HAL_UART_Receive_IT>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,2048,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8004b16:	2200      	movs	r2, #0
 8004b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b1c:	483a      	ldr	r0, [pc, #232]	; (8004c08 <main+0x130>)
 8004b1e:	f7fe f951 	bl	8002dc4 <HAL_RTCEx_SetWakeUpTimer_IT>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b22:	2200      	movs	r2, #0
 8004b24:	4611      	mov	r1, r2
 8004b26:	2025      	movs	r0, #37	; 0x25
 8004b28:	f7fc fe3c 	bl	80017a4 <HAL_NVIC_SetPriority>
 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <main+0x134>)
 8004b30:	6819      	ldr	r1, [r3, #0]
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7fc fbc2 	bl	80012bc <HAL_ADC_Start_DMA>
 if(erase_flash==1){
 8004b38:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <main+0x138>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d110      	bne.n	8004b62 <main+0x8a>
	HAL_FLASH_Unlock();
 8004b40:	f7fc ffa6 	bl	8001a90 <HAL_FLASH_Unlock>
	pEraseInit->NbPages = 5;
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <main+0x13c>)
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	2105      	movs	r1, #5
 8004b4a:	6099      	str	r1, [r3, #8]
	pEraseInit->PageAddress = (uint32_t)(0x08008000);
 8004b4c:	4932      	ldr	r1, [pc, #200]	; (8004c18 <main+0x140>)
 8004b4e:	6059      	str	r1, [r3, #4]
	pEraseInit->TypeErase = (uint32_t)FLASH_TYPEERASE_PAGES;
 8004b50:	2100      	movs	r1, #0
 8004b52:	6019      	str	r1, [r3, #0]
	HAL_FLASHEx_Erase(pEraseInit,flash_error);
 8004b54:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <main+0x144>)
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	6810      	ldr	r0, [r2, #0]
 8004b5a:	f7fd f831 	bl	8001bc0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8004b5e:	f7fc ffa9 	bl	8001ab4 <HAL_FLASH_Lock>
 flash_counter = 10000-2000;
 8004b62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004b66:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <main+0x148>)
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e022      	b.n	8004bb2 <main+0xda>
		  rx_flag = 0;
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <main+0x14c>)
 8004b70:	701a      	strb	r2, [r3, #0]
		  uart_comms();
 8004b72:	f000 fc75 	bl	8005460 <uart_comms>
 8004b76:	e020      	b.n	8004bba <main+0xe2>
		  systick_flag = 0;
 8004b78:	2200      	movs	r2, #0
 8004b7a:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <main+0x150>)
 8004b7c:	701a      	strb	r2, [r3, #0]
		  seven_segment();
 8004b7e:	f000 f85d 	bl	8004c3c <seven_segment>
		 HAL_ADC_Start_DMA(&hadc2, ADC1_buffer, 7);
 8004b82:	2207      	movs	r2, #7
 8004b84:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <main+0x134>)
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	481c      	ldr	r0, [pc, #112]	; (8004bfc <main+0x124>)
 8004b8a:	f7fc fb97 	bl	80012bc <HAL_ADC_Start_DMA>
 8004b8e:	e018      	b.n	8004bc2 <main+0xea>
		  adc_flag = 0;
 8004b90:	2200      	movs	r2, #0
 8004b92:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <main+0x154>)
 8004b94:	701a      	strb	r2, [r3, #0]
		  adc_comms();
 8004b96:	f7fe ff59 	bl	8003a4c <adc_comms>
 8004b9a:	e016      	b.n	8004bca <main+0xf2>
	  if(fake_RTC_timer == 1000){
 8004b9c:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <main+0x158>)
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ba4:	d019      	beq.n	8004bda <main+0x102>
	  if(flash_counter == 10000){
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <main+0x148>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	f242 7310 	movw	r3, #10000	; 0x2710
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d019      	beq.n	8004be6 <main+0x10e>
	  if(rx_flag == 1 ){ 	// UART Comms
 8004bb2:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <main+0x14c>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d0d8      	beq.n	8004b6c <main+0x94>
	  if(systick_flag == 1){	// Seven Segment
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <main+0x150>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d0da      	beq.n	8004b78 <main+0xa0>
	  if(adc_flag == 1){	// ADC conversion
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <main+0x154>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d0e2      	beq.n	8004b90 <main+0xb8>
	  if(touch_flag == 1 ){
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <main+0x15c>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d1e4      	bne.n	8004b9c <main+0xc4>
		  touch_flag = 0;
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <main+0x15c>)
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e7e0      	b.n	8004b9c <main+0xc4>
		  fake_RTC_timer = 0;
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <main+0x158>)
 8004bde:	801a      	strh	r2, [r3, #0]
		  heating_scheduling();
 8004be0:	f7ff fa98 	bl	8004114 <heating_scheduling>
 8004be4:	e7df      	b.n	8004ba6 <main+0xce>
		  flash_counter = 0;
 8004be6:	2200      	movs	r2, #0
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <main+0x148>)
 8004bea:	601a      	str	r2, [r3, #0]
		  if(enableFlashLogging){
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <main+0x160>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0de      	beq.n	8004bb2 <main+0xda>
		  write2Flash();
 8004bf4:	f7ff f850 	bl	8003c98 <write2Flash>
 8004bf8:	e7db      	b.n	8004bb2 <main+0xda>
 8004bfa:	bf00      	nop
 8004bfc:	20000318 	.word	0x20000318
 8004c00:	200005ac 	.word	0x200005ac
 8004c04:	20000400 	.word	0x20000400
 8004c08:	20000470 	.word	0x20000470
 8004c0c:	20000228 	.word	0x20000228
 8004c10:	20000224 	.word	0x20000224
 8004c14:	20000294 	.word	0x20000294
 8004c18:	08008000 	.word	0x08008000
 8004c1c:	20000268 	.word	0x20000268
 8004c20:	20000264 	.word	0x20000264
 8004c24:	200002a5 	.word	0x200002a5
 8004c28:	200002b1 	.word	0x200002b1
 8004c2c:	20000242 	.word	0x20000242
 8004c30:	20000260 	.word	0x20000260
 8004c34:	200002c4 	.word	0x200002c4
 8004c38:	20000006 	.word	0x20000006

08004c3c <seven_segment>:
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;



void seven_segment(){
 8004c3c:	b538      	push	{r3, r4, r5, lr}

	if(segment_counter == 0){	// Left Most Digit
 8004c3e:	4d30      	ldr	r5, [pc, #192]	; (8004d00 <seven_segment+0xc4>)
 8004c40:	782c      	ldrb	r4, [r5, #0]
 8004c42:	b134      	cbz	r4, 8004c52 <seven_segment+0x16>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48 );
		segment_counter += 1;
	}
	else if( segment_counter == 1){		// Middle left Digit
 8004c44:	2c01      	cmp	r4, #1
 8004c46:	d045      	beq.n	8004cd4 <seven_segment+0x98>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 2){		// Middle Right Digit
 8004c48:	2c02      	cmp	r4, #2
 8004c4a:	d04b      	beq.n	8004ce4 <seven_segment+0xa8>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
		seven_segment_display(segment_val[segment_counter]-48);
		segment_counter += 1;
	}
	else if( segment_counter == 3){ // Right Most Digit
 8004c4c:	2c03      	cmp	r4, #3
 8004c4e:	d021      	beq.n	8004c94 <seven_segment+0x58>
 8004c50:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);	// D1
 8004c52:	4622      	mov	r2, r4
 8004c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c58:	482a      	ldr	r0, [pc, #168]	; (8004d04 <seven_segment+0xc8>)
 8004c5a:	f7fd f8ff 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004c5e:	2201      	movs	r2, #1
 8004c60:	2110      	movs	r1, #16
 8004c62:	4828      	ldr	r0, [pc, #160]	; (8004d04 <seven_segment+0xc8>)
 8004c64:	f7fd f8fa 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004c68:	2201      	movs	r2, #1
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	4825      	ldr	r0, [pc, #148]	; (8004d04 <seven_segment+0xc8>)
 8004c6e:	f7fd f8f5 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);		// D4
 8004c72:	2201      	movs	r2, #1
 8004c74:	2108      	movs	r1, #8
 8004c76:	4823      	ldr	r0, [pc, #140]	; (8004d04 <seven_segment+0xc8>)
 8004c78:	f7fd f8f0 	bl	8001e5c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48 );
 8004c7c:	4a22      	ldr	r2, [pc, #136]	; (8004d08 <seven_segment+0xcc>)
 8004c7e:	782b      	ldrb	r3, [r5, #0]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	5cd0      	ldrb	r0, [r2, r3]
 8004c84:	3830      	subs	r0, #48	; 0x30
 8004c86:	b2c0      	uxtb	r0, r0
 8004c88:	f000 f840 	bl	8004d0c <seven_segment_display>
		segment_counter += 1;
 8004c8c:	782b      	ldrb	r3, [r5, #0]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	702b      	strb	r3, [r5, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004c94:	2201      	movs	r2, #1
 8004c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c9a:	481a      	ldr	r0, [pc, #104]	; (8004d04 <seven_segment+0xc8>)
 8004c9c:	f7fd f8de 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2110      	movs	r1, #16
 8004ca4:	4817      	ldr	r0, [pc, #92]	; (8004d04 <seven_segment+0xc8>)
 8004ca6:	f7fd f8d9 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);		// D3
 8004caa:	2201      	movs	r2, #1
 8004cac:	2120      	movs	r1, #32
 8004cae:	4815      	ldr	r0, [pc, #84]	; (8004d04 <seven_segment+0xc8>)
 8004cb0:	f7fd f8d4 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);		// D4
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2108      	movs	r1, #8
 8004cb8:	4812      	ldr	r0, [pc, #72]	; (8004d04 <seven_segment+0xc8>)
 8004cba:	f7fd f8cf 	bl	8001e5c <HAL_GPIO_WritePin>
		seven_segment_display(segment_val[segment_counter]-48);
 8004cbe:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <seven_segment+0xcc>)
 8004cc0:	782b      	ldrb	r3, [r5, #0]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	5cd0      	ldrb	r0, [r2, r3]
 8004cc6:	3830      	subs	r0, #48	; 0x30
 8004cc8:	b2c0      	uxtb	r0, r0
 8004cca:	f000 f81f 	bl	8004d0c <seven_segment_display>
		segment_counter = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	702b      	strb	r3, [r5, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cda:	480a      	ldr	r0, [pc, #40]	; (8004d04 <seven_segment+0xc8>)
 8004cdc:	f7fd f8be 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);		// D2
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	e7bd      	b.n	8004c60 <seven_segment+0x24>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);		// D1
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cea:	4806      	ldr	r0, [pc, #24]	; (8004d04 <seven_segment+0xc8>)
 8004cec:	f7fd f8b6 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);		// D2
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	2110      	movs	r1, #16
 8004cf4:	4803      	ldr	r0, [pc, #12]	; (8004d04 <seven_segment+0xc8>)
 8004cf6:	f7fd f8b1 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);		// D3
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	e7b5      	b.n	8004c6a <seven_segment+0x2e>
 8004cfe:	bf00      	nop
 8004d00:	200002a6 	.word	0x200002a6
 8004d04:	48000400 	.word	0x48000400
 8004d08:	200002a8 	.word	0x200002a8

08004d0c <seven_segment_display>:
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;


void seven_segment_display(uint8_t num){
 8004d0c:	b508      	push	{r3, lr}
	switch(num){
 8004d0e:	2809      	cmp	r0, #9
 8004d10:	f200 81bf 	bhi.w	8005092 <seven_segment_display+0x386>
 8004d14:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004d18:	006c003b 	.word	0x006c003b
 8004d1c:	00c40098 	.word	0x00c40098
 8004d20:	011200e8 	.word	0x011200e8
 8004d24:	016a013e 	.word	0x016a013e
 8004d28:	000a018c 	.word	0x000a018c
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
		break;
	case 9:
		//ON
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2120      	movs	r1, #32
 8004d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d34:	f7fd f892 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2140      	movs	r1, #64	; 0x40
 8004d3c:	48e9      	ldr	r0, [pc, #932]	; (80050e4 <seven_segment_display+0x3d8>)
 8004d3e:	f7fd f88d 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004d42:	2200      	movs	r2, #0
 8004d44:	2180      	movs	r1, #128	; 0x80
 8004d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d4a:	f7fd f887 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d58:	f7fd f880 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d66:	f7fd f879 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2140      	movs	r1, #64	; 0x40
 8004d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d72:	f7fd f873 	bl	8001e5c <HAL_GPIO_WritePin>
		//OFF
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004d76:	48dc      	ldr	r0, [pc, #880]	; (80050e8 <seven_segment_display+0x3dc>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8004d7c:	f7fd f86e 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8004d80:	2201      	movs	r2, #1
 8004d82:	2140      	movs	r1, #64	; 0x40
 8004d84:	48d7      	ldr	r0, [pc, #860]	; (80050e4 <seven_segment_display+0x3d8>)

	}



}
 8004d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 8004d8a:	f7fd b867 	b.w	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2140      	movs	r1, #64	; 0x40
 8004d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d96:	f7fd f861 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2120      	movs	r1, #32
 8004d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004da2:	f7fd f85b 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004da6:	2200      	movs	r2, #0
 8004da8:	2140      	movs	r1, #64	; 0x40
 8004daa:	48ce      	ldr	r0, [pc, #824]	; (80050e4 <seven_segment_display+0x3d8>)
 8004dac:	f7fd f856 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004db8:	f7fd f850 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2140      	movs	r1, #64	; 0x40
 8004dc0:	48c8      	ldr	r0, [pc, #800]	; (80050e4 <seven_segment_display+0x3d8>)
 8004dc2:	f7fd f84b 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	48c7      	ldr	r0, [pc, #796]	; (80050e8 <seven_segment_display+0x3dc>)
 8004dcc:	f7fd f846 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dda:	f7fd f83f 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8004dde:	2201      	movs	r2, #1
 8004de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8004de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8004dec:	f7fd b836 	b.w	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004df0:	2200      	movs	r2, #0
 8004df2:	2140      	movs	r1, #64	; 0x40
 8004df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004df8:	f7fd f830 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e04:	f7fd f82a 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2120      	movs	r1, #32
 8004e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e10:	f7fd f824 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8004e14:	2201      	movs	r2, #1
 8004e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e1e:	f7fd f81d 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8004e22:	2201      	movs	r2, #1
 8004e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e2c:	f7fd f816 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8004e30:	48ac      	ldr	r0, [pc, #688]	; (80050e4 <seven_segment_display+0x3d8>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	2140      	movs	r1, #64	; 0x40
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004e36:	f7fd f811 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	48aa      	ldr	r0, [pc, #680]	; (80050e8 <seven_segment_display+0x3dc>)
}
 8004e40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004e44:	f7fd b80a 	b.w	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//A
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e50:	f7fd f804 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004e54:	2200      	movs	r2, #0
 8004e56:	2140      	movs	r1, #64	; 0x40
 8004e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e5c:	f7fc fffe 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004e60:	2200      	movs	r2, #0
 8004e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e6a:	f7fc fff7 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	489d      	ldr	r0, [pc, #628]	; (80050e8 <seven_segment_display+0x3dc>)
 8004e74:	f7fc fff2 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	4899      	ldr	r0, [pc, #612]	; (80050e4 <seven_segment_display+0x3d8>)
 8004e7e:	f7fc ffed 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004e82:	2201      	movs	r2, #1
 8004e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e8c:	f7fc ffe6 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8004e90:	2201      	movs	r2, #1
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8004e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 8004e9c:	f7fc bfde 	b.w	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2120      	movs	r1, #32
 8004ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ea8:	f7fc ffd8 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //B
 8004eac:	2200      	movs	r2, #0
 8004eae:	2140      	movs	r1, #64	; 0x40
 8004eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eb4:	f7fc ffd2 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ec2:	f7fc ffcb 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2180      	movs	r1, #128	; 0x80
 8004eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ece:	f7fc ffc5 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2140      	movs	r1, #64	; 0x40
 8004ed6:	4883      	ldr	r0, [pc, #524]	; (80050e4 <seven_segment_display+0x3d8>)
 8004ed8:	f7fc ffc0 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 8004edc:	2201      	movs	r2, #1
 8004ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ee6:	e7a6      	b.n	8004e36 <seven_segment_display+0x12a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2140      	movs	r1, #64	; 0x40
 8004eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ef0:	f7fc ffb4 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004efe:	f7fc ffad 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004f02:	2200      	movs	r2, #0
 8004f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f0c:	f7fc ffa6 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f18:	f7fc ffa0 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	2120      	movs	r1, #32
 8004f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f24:	f7fc ff9a 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004f28:	2201      	movs	r2, #1
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	486e      	ldr	r0, [pc, #440]	; (80050e8 <seven_segment_display+0x3dc>)
 8004f2e:	f7fc ff95 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8004f32:	2201      	movs	r2, #1
 8004f34:	2120      	movs	r1, #32
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8004f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f3a:	e71f      	b.n	8004d7c <seven_segment_display+0x70>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2120      	movs	r1, #32
 8004f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f44:	f7fc ff8a 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f52:	f7fc ff83 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004f56:	2200      	movs	r2, #0
 8004f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f60:	f7fc ff7c 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004f64:	2200      	movs	r2, #0
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f6c:	f7fc ff76 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //B
 8004f70:	2201      	movs	r2, #1
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f78:	f7fc ff70 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	4859      	ldr	r0, [pc, #356]	; (80050e8 <seven_segment_display+0x3dc>)
 8004f82:	f7fc ff6b 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8004f86:	2200      	movs	r2, #0
 8004f88:	2140      	movs	r1, #64	; 0x40
 8004f8a:	4856      	ldr	r0, [pc, #344]	; (80050e4 <seven_segment_display+0x3d8>)
}
 8004f8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//d
 8004f90:	f7fc bf64 	b.w	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004f94:	2200      	movs	r2, #0
 8004f96:	2120      	movs	r1, #32
 8004f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f9c:	f7fc ff5e 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004faa:	f7fc ff57 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fb8:	f7fc ff50 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fc4:	f7fc ff4a 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2140      	movs	r1, #64	; 0x40
 8004fcc:	4845      	ldr	r0, [pc, #276]	; (80050e4 <seven_segment_display+0x3d8>)
 8004fce:	f7fc ff45 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8004fd2:	4845      	ldr	r0, [pc, #276]	; (80050e8 <seven_segment_display+0x3dc>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 8004fd8:	f7fc ff40 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8004fdc:	2201      	movs	r2, #1
 8004fde:	2140      	movs	r1, #64	; 0x40
 8004fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8004fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8004fe8:	f7fc bf38 	b.w	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 8004fec:	2200      	movs	r2, #0
 8004fee:	2120      	movs	r1, #32
 8004ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff4:	f7fc ff32 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2140      	movs	r1, #64	; 0x40
 8004ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005000:	f7fc ff2c 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005004:	2200      	movs	r2, #0
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800500c:	f7fc ff26 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 8005010:	2201      	movs	r2, #1
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	4834      	ldr	r0, [pc, #208]	; (80050e8 <seven_segment_display+0x3dc>)
 8005016:	f7fc ff21 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 800501a:	2201      	movs	r2, #1
 800501c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005024:	f7fc ff1a 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//G
 8005028:	2201      	movs	r2, #1
 800502a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800502e:	e782      	b.n	8004f36 <seven_segment_display+0x22a>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8005030:	2200      	movs	r2, #0
 8005032:	2140      	movs	r1, #64	; 0x40
 8005034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005038:	f7fc ff10 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //A
 800503c:	2200      	movs	r2, #0
 800503e:	2120      	movs	r1, #32
 8005040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005044:	f7fc ff0a 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//B
 8005048:	2200      	movs	r2, #0
 800504a:	2140      	movs	r1, #64	; 0x40
 800504c:	4825      	ldr	r0, [pc, #148]	; (80050e4 <seven_segment_display+0x3d8>)
 800504e:	f7fc ff05 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);//C
 8005052:	2200      	movs	r2, #0
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800505a:	f7fc feff 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);//D
 800505e:	2200      	movs	r2, #0
 8005060:	2140      	movs	r1, #64	; 0x40
 8005062:	4820      	ldr	r0, [pc, #128]	; (80050e4 <seven_segment_display+0x3d8>)
 8005064:	f7fc fefa 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);//E
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	481e      	ldr	r0, [pc, #120]	; (80050e8 <seven_segment_display+0x3dc>)
 800506e:	f7fc fef5 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);//F
 8005072:	2200      	movs	r2, #0
 8005074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800507c:	f7fc feee 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 800508a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);//G
 800508e:	f7fc bee5 	b.w	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //A
 8005092:	2201      	movs	r2, #1
 8005094:	2120      	movs	r1, #32
 8005096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800509a:	f7fc fedf 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//B
 800509e:	2201      	movs	r2, #1
 80050a0:	2140      	movs	r1, #64	; 0x40
 80050a2:	4810      	ldr	r0, [pc, #64]	; (80050e4 <seven_segment_display+0x3d8>)
 80050a4:	f7fc feda 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);//C
 80050a8:	2201      	movs	r2, #1
 80050aa:	2180      	movs	r1, #128	; 0x80
 80050ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b0:	f7fc fed4 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);//D
 80050b4:	2201      	movs	r2, #1
 80050b6:	2140      	movs	r1, #64	; 0x40
 80050b8:	480a      	ldr	r0, [pc, #40]	; (80050e4 <seven_segment_display+0x3d8>)
 80050ba:	f7fc fecf 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);//E
 80050be:	2201      	movs	r2, #1
 80050c0:	2180      	movs	r1, #128	; 0x80
 80050c2:	4809      	ldr	r0, [pc, #36]	; (80050e8 <seven_segment_display+0x3dc>)
 80050c4:	f7fc feca 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//F
 80050c8:	2201      	movs	r2, #1
 80050ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d2:	f7fc fec3 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);//
 80050d6:	2201      	movs	r2, #1
 80050d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050e0:	e77a      	b.n	8004fd8 <seven_segment_display+0x2cc>
 80050e2:	bf00      	nop
 80050e4:	48000400 	.word	0x48000400
 80050e8:	48000800 	.word	0x48000800

080050ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ec:	4b1d      	ldr	r3, [pc, #116]	; (8005164 <HAL_MspInit+0x78>)
{
 80050ee:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	619a      	str	r2, [r3, #24]
 80050f8:	699b      	ldr	r3, [r3, #24]
{
 80050fa:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005102:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005104:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005106:	f7fc fb3b 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 2);
 800510a:	2202      	movs	r2, #2
 800510c:	2100      	movs	r1, #0
 800510e:	f06f 000b 	mvn.w	r0, #11
 8005112:	f7fc fb47 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 2);
 8005116:	2202      	movs	r2, #2
 8005118:	2100      	movs	r1, #0
 800511a:	f06f 000a 	mvn.w	r0, #10
 800511e:	f7fc fb41 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 2);
 8005122:	2202      	movs	r2, #2
 8005124:	2100      	movs	r1, #0
 8005126:	f06f 0009 	mvn.w	r0, #9
 800512a:	f7fc fb3b 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 2);
 800512e:	2202      	movs	r2, #2
 8005130:	2100      	movs	r1, #0
 8005132:	f06f 0004 	mvn.w	r0, #4
 8005136:	f7fc fb35 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 2);
 800513a:	2202      	movs	r2, #2
 800513c:	2100      	movs	r1, #0
 800513e:	f06f 0003 	mvn.w	r0, #3
 8005142:	f7fc fb2f 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 2);
 8005146:	2202      	movs	r2, #2
 8005148:	2100      	movs	r1, #0
 800514a:	f06f 0001 	mvn.w	r0, #1
 800514e:	f7fc fb29 	bl	80017a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 2);
 8005152:	2202      	movs	r2, #2
 8005154:	2100      	movs	r1, #0
 8005156:	f04f 30ff 	mov.w	r0, #4294967295
 800515a:	f7fc fb23 	bl	80017a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800515e:	b003      	add	sp, #12
 8005160:	f85d fb04 	ldr.w	pc, [sp], #4
 8005164:	40021000 	.word	0x40021000

08005168 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC2)
 8005168:	4b21      	ldr	r3, [pc, #132]	; (80051f0 <HAL_ADC_MspInit+0x88>)
 800516a:	6802      	ldr	r2, [r0, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d000      	beq.n	8005172 <HAL_ADC_MspInit+0xa>
 8005170:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005172:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_ADC_MspInit+0x8c>)
{
 8005174:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005176:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8005178:	4d1f      	ldr	r5, [pc, #124]	; (80051f8 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800517a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800517e:	615a      	str	r2, [r3, #20]
 8005180:	695b      	ldr	r3, [r3, #20]
{
 8005182:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	2600      	movs	r6, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 800518a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800518c:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 800518e:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005190:	a901      	add	r1, sp, #4
 8005192:	4604      	mov	r4, r0
 8005194:	4819      	ldr	r0, [pc, #100]	; (80051fc <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005196:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = VOLTAGE_RMS_Pin|CURRENT_RMS_Pin;
 8005198:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800519a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800519e:	f7fc fd73 	bl	8001c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 80051a2:	f248 0304 	movw	r3, #32772	; 0x8004
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a6:	a901      	add	r1, sp, #4
 80051a8:	4815      	ldr	r0, [pc, #84]	; (8005200 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051aa:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|GEYSER_TEMP_Pin;
 80051ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	9603      	str	r6, [sp, #12]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80051b0:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b2:	f7fc fd69 	bl	8001c88 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80051b6:	f8df e050 	ldr.w	lr, [pc, #80]	; 8005208 <HAL_ADC_MspInit+0xa0>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051ba:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051bc:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80051c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80051c4:	2320      	movs	r3, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80051c6:	4628      	mov	r0, r5
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80051c8:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80051ca:	61ee      	str	r6, [r5, #28]
    hdma_adc2.Instance = DMA1_Channel2;
 80051cc:	f8c5 e000 	str.w	lr, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80051d0:	60ef      	str	r7, [r5, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051d2:	6129      	str	r1, [r5, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80051d4:	616a      	str	r2, [r5, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80051d6:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80051d8:	f7fc fb52 	bl	8001880 <HAL_DMA_Init>
 80051dc:	b918      	cbnz	r0, 80051e6 <HAL_ADC_MspInit+0x7e>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80051de:	63e5      	str	r5, [r4, #60]	; 0x3c
 80051e0:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80051e2:	b007      	add	sp, #28
 80051e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 80051e6:	217a      	movs	r1, #122	; 0x7a
 80051e8:	4806      	ldr	r0, [pc, #24]	; (8005204 <HAL_ADC_MspInit+0x9c>)
 80051ea:	f7ff fac0 	bl	800476e <_Error_Handler>
 80051ee:	e7f6      	b.n	80051de <HAL_ADC_MspInit+0x76>
 80051f0:	50000100 	.word	0x50000100
 80051f4:	40021000 	.word	0x40021000
 80051f8:	200004e8 	.word	0x200004e8
 80051fc:	48000800 	.word	0x48000800
 8005200:	48000400 	.word	0x48000400
 8005204:	08006bb0 	.word	0x08006bb0
 8005208:	4002001c 	.word	0x4002001c

0800520c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800520c:	6802      	ldr	r2, [r0, #0]
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <HAL_I2C_MspInit+0x58>)
 8005210:	429a      	cmp	r2, r3
 8005212:	d000      	beq.n	8005216 <HAL_I2C_MspInit+0xa>
 8005214:	4770      	bx	lr
{
 8005216:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005218:	2304      	movs	r3, #4
{
 800521a:	b086      	sub	sp, #24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800521c:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005220:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8005222:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005226:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005228:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800522a:	480f      	ldr	r0, [pc, #60]	; (8005268 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800522c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800522e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = I2C_SCLB8_Pin|I2C_SDAB9_Pin;
 8005230:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005232:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005234:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005236:	f7fc fd27 	bl	8001c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <HAL_I2C_MspInit+0x60>)
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005242:	61da      	str	r2, [r3, #28]
 8005244:	69db      	ldr	r3, [r3, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005246:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800524e:	4611      	mov	r1, r2
 8005250:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005252:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005254:	f7fc faa6 	bl	80017a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005258:	201f      	movs	r0, #31
 800525a:	f7fc fad9 	bl	8001810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800525e:	b006      	add	sp, #24
 8005260:	bd70      	pop	{r4, r5, r6, pc}
 8005262:	bf00      	nop
 8005264:	40005400 	.word	0x40005400
 8005268:	48000400 	.word	0x48000400
 800526c:	40021000 	.word	0x40021000

08005270 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005270:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 8005272:	6802      	ldr	r2, [r0, #0]
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_RTC_MspInit+0x38>)
 8005276:	429a      	cmp	r2, r3
 8005278:	d000      	beq.n	800527c <HAL_RTC_MspInit+0xc>
 800527a:	bd08      	pop	{r3, pc}
 800527c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005280:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RTC_MspInit+0x3c>)
 8005286:	fab2 f282 	clz	r2, r2
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	2101      	movs	r1, #1
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8005290:	2200      	movs	r2, #0
    __HAL_RCC_RTC_ENABLE();
 8005292:	6019      	str	r1, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8005294:	2003      	movs	r0, #3
 8005296:	4611      	mov	r1, r2
 8005298:	f7fc fa84 	bl	80017a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800529c:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800529e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80052a2:	f7fc bab5 	b.w	8001810 <HAL_NVIC_EnableIRQ>
 80052a6:	bf00      	nop
 80052a8:	40002800 	.word	0x40002800
 80052ac:	10908100 	.word	0x10908100

080052b0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80052b0:	6803      	ldr	r3, [r0, #0]
 80052b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b6:	d000      	beq.n	80052ba <HAL_TIM_Base_MspInit+0xa>
 80052b8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 80052be:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	61da      	str	r2, [r3, #28]
 80052c8:	69db      	ldr	r3, [r3, #28]
{
 80052ca:	b083      	sub	sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 80052d2:	2202      	movs	r2, #2
 80052d4:	2100      	movs	r1, #0
 80052d6:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 80052da:	f7fc fa63 	bl	80017a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80052de:	201c      	movs	r0, #28
 80052e0:	f7fc fa96 	bl	8001810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80052e4:	b003      	add	sp, #12
 80052e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80052ea:	bf00      	nop

080052ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80052ec:	6802      	ldr	r2, [r0, #0]
 80052ee:	4b14      	ldr	r3, [pc, #80]	; (8005340 <HAL_UART_MspInit+0x54>)
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d000      	beq.n	80052f6 <HAL_UART_MspInit+0xa>
 80052f4:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052f6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 80052fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 80052fc:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052fe:	4811      	ldr	r0, [pc, #68]	; (8005344 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005304:	619a      	str	r2, [r3, #24]
 8005306:	699b      	ldr	r3, [r3, #24]
{
 8005308:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 800530a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005310:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005312:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005314:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005316:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005318:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800531c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800531e:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8005320:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005322:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005324:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005326:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005328:	f7fc fcae 	bl	8001c88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800532c:	4622      	mov	r2, r4
 800532e:	4621      	mov	r1, r4
 8005330:	2025      	movs	r0, #37	; 0x25
 8005332:	f7fc fa37 	bl	80017a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005336:	2025      	movs	r0, #37	; 0x25
 8005338:	f7fc fa6a 	bl	8001810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800533c:	b007      	add	sp, #28
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005340:	40013800 	.word	0x40013800
 8005344:	48000800 	.word	0x48000800

08005348 <SVC_Handler>:
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop

0800534c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop

08005350 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005350:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005352:	f7fb fdf1 	bl	8000f38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005356:	f7fc fa8f 	bl	8001878 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_flag = 1;
  fake_RTC_timer += 1;
 800535a:	4806      	ldr	r0, [pc, #24]	; (8005374 <SysTick_Handler+0x24>)
  flash_counter += 1;
 800535c:	4906      	ldr	r1, [pc, #24]	; (8005378 <SysTick_Handler+0x28>)
  fake_RTC_timer += 1;
 800535e:	8802      	ldrh	r2, [r0, #0]
  flash_counter += 1;
 8005360:	680b      	ldr	r3, [r1, #0]
  systick_flag = 1;
 8005362:	4c06      	ldr	r4, [pc, #24]	; (800537c <SysTick_Handler+0x2c>)
 8005364:	2501      	movs	r5, #1
  fake_RTC_timer += 1;
 8005366:	3201      	adds	r2, #1
  flash_counter += 1;
 8005368:	3301      	adds	r3, #1
  systick_flag = 1;
 800536a:	7025      	strb	r5, [r4, #0]
  fake_RTC_timer += 1;
 800536c:	8002      	strh	r2, [r0, #0]
  flash_counter += 1;
 800536e:	600b      	str	r3, [r1, #0]
  systick_flag = 1;
 8005370:	bd38      	pop	{r3, r4, r5, pc}
 8005372:	bf00      	nop
 8005374:	20000260 	.word	0x20000260
 8005378:	20000264 	.word	0x20000264
 800537c:	200002b1 	.word	0x200002b1

08005380 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005380:	4801      	ldr	r0, [pc, #4]	; (8005388 <RTC_WKUP_IRQHandler+0x8>)
 8005382:	f7fd bd95 	b.w	8002eb0 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8005386:	bf00      	nop
 8005388:	20000470 	.word	0x20000470

0800538c <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 800538c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800538e:	2001      	movs	r0, #1
 8005390:	f7fc fd6c 	bl	8001e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  touch_flag = 1;
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <EXTI0_IRQHandler+0x10>)
 8005396:	2201      	movs	r2, #1
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	bd08      	pop	{r3, pc}
 800539c:	200002c4 	.word	0x200002c4

080053a0 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <DMA1_Channel2_IRQHandler+0x8>)
 80053a2:	f7fc bb0b 	b.w	80019bc <HAL_DMA_IRQHandler>
 80053a6:	bf00      	nop
 80053a8:	200004e8 	.word	0x200004e8

080053ac <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80053ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80053ae:	2040      	movs	r0, #64	; 0x40
 80053b0:	f7fc fd5c 	bl	8001e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  tim3_flag = 1;
 80053b4:	4b01      	ldr	r3, [pc, #4]	; (80053bc <EXTI9_5_IRQHandler+0x10>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	bd08      	pop	{r3, pc}
 80053bc:	200002b9 	.word	0x200002b9

080053c0 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80053c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80053c2:	4803      	ldr	r0, [pc, #12]	; (80053d0 <TIM2_IRQHandler+0x10>)
 80053c4:	f7fd fe72 	bl	80030ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_flag = 0;
 80053c8:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <TIM2_IRQHandler+0x14>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	bd08      	pop	{r3, pc}
 80053d0:	200004a8 	.word	0x200004a8
 80053d4:	200002b8 	.word	0x200002b8

080053d8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <I2C1_EV_IRQHandler+0x8>)
 80053da:	f7fc bda9 	b.w	8001f30 <HAL_I2C_EV_IRQHandler>
 80053de:	bf00      	nop
 80053e0:	2000036c 	.word	0x2000036c

080053e4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <USART1_IRQHandler+0x8>)
 80053e6:	f7fe ba7f 	b.w	80038e8 <HAL_UART_IRQHandler>
 80053ea:	bf00      	nop
 80053ec:	20000400 	.word	0x20000400

080053f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053f0:	4917      	ldr	r1, [pc, #92]	; (8005450 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80053f2:	4b18      	ldr	r3, [pc, #96]	; (8005454 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80053f4:	4a18      	ldr	r2, [pc, #96]	; (8005458 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80053f6:	4819      	ldr	r0, [pc, #100]	; (800545c <SystemInit+0x6c>)
{
 80053f8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053fa:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 80053fe:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8005402:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8005406:	681c      	ldr	r4, [r3, #0]
 8005408:	f044 0401 	orr.w	r4, r4, #1
 800540c:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 800540e:	685c      	ldr	r4, [r3, #4]
 8005410:	4022      	ands	r2, r4
 8005412:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800541a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800541e:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005426:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800542e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005432:	f022 020f 	bic.w	r2, r2, #15
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005438:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800543a:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 800543c:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800543e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005442:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8005444:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005446:	608a      	str	r2, [r1, #8]
#endif
}
 8005448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	e000ed00 	.word	0xe000ed00
 8005454:	40021000 	.word	0x40021000
 8005458:	f87fc00c 	.word	0xf87fc00c
 800545c:	ff00fccc 	.word	0xff00fccc

08005460 <uart_comms>:
extern ADC_HandleTypeDef hadc2;
extern RTC_HandleTypeDef hrtc;



void uart_comms(){
 8005460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
	rx_flag = 0;
 8005464:	2200      	movs	r2, #0
 8005466:	4b98      	ldr	r3, [pc, #608]	; (80056c8 <uart_comms+0x268>)
 8005468:	701a      	strb	r2, [r3, #0]
	uart_command[uart_counter] = rx_buffer;
 800546a:	4b98      	ldr	r3, [pc, #608]	; (80056cc <uart_comms+0x26c>)
 800546c:	4a98      	ldr	r2, [pc, #608]	; (80056d0 <uart_comms+0x270>)
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	6819      	ldr	r1, [r3, #0]
 8005472:	4898      	ldr	r0, [pc, #608]	; (80056d4 <uart_comms+0x274>)
 8005474:	7800      	ldrb	r0, [r0, #0]
 8005476:	5488      	strb	r0, [r1, r2]
	if(uart_command[0] == '$'){
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	781a      	ldrb	r2, [r3, #0]
 800547c:	2a24      	cmp	r2, #36	; 0x24
 800547e:	d00b      	beq.n	8005498 <uart_comms+0x38>

		uart_counter += 1;
	}

	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8005480:	781a      	ldrb	r2, [r3, #0]
 8005482:	2a24      	cmp	r2, #36	; 0x24
 8005484:	d00d      	beq.n	80054a2 <uart_comms+0x42>
		}
		memset(uart_command,0x00, 60);

		uart_counter = 0;
	}
	else if(uart_counter > 59 ){
 8005486:	4b92      	ldr	r3, [pc, #584]	; (80056d0 <uart_comms+0x270>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b3b      	cmp	r3, #59	; 0x3b
 800548c:	d902      	bls.n	8005494 <uart_comms+0x34>
		uart_counter = 0;
 800548e:	2200      	movs	r2, #0
 8005490:	4b8f      	ldr	r3, [pc, #572]	; (80056d0 <uart_comms+0x270>)
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uart_counter += 1;
 8005498:	498d      	ldr	r1, [pc, #564]	; (80056d0 <uart_comms+0x270>)
 800549a:	780a      	ldrb	r2, [r1, #0]
 800549c:	3201      	adds	r2, #1
 800549e:	700a      	strb	r2, [r1, #0]
 80054a0:	e7ee      	b.n	8005480 <uart_comms+0x20>
	if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80054a2:	4a8b      	ldr	r2, [pc, #556]	; (80056d0 <uart_comms+0x270>)
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	1899      	adds	r1, r3, r2
 80054a8:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80054ac:	290a      	cmp	r1, #10
 80054ae:	d1ea      	bne.n	8005486 <uart_comms+0x26>
 80054b0:	4413      	add	r3, r2
 80054b2:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80054b6:	2b0d      	cmp	r3, #13
 80054b8:	d1e5      	bne.n	8005486 <uart_comms+0x26>
 80054ba:	2a02      	cmp	r2, #2
 80054bc:	d9e3      	bls.n	8005486 <uart_comms+0x26>
		memset(return_value,0x00, 50);
 80054be:	2232      	movs	r2, #50	; 0x32
 80054c0:	2100      	movs	r1, #0
 80054c2:	4b85      	ldr	r3, [pc, #532]	; (80056d8 <uart_comms+0x278>)
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f000 fcc6 	bl	8005e56 <memset>
		uart_command_copy = uart_command;
 80054ca:	4b80      	ldr	r3, [pc, #512]	; (80056cc <uart_comms+0x26c>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b83      	ldr	r3, [pc, #524]	; (80056dc <uart_comms+0x27c>)
 80054d0:	601a      	str	r2, [r3, #0]
		switch(uart_command[1]){
 80054d2:	7853      	ldrb	r3, [r2, #1]
 80054d4:	3b41      	subs	r3, #65	; 0x41
 80054d6:	2b0b      	cmp	r3, #11
 80054d8:	d829      	bhi.n	800552e <uart_comms+0xce>
 80054da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80054de:	000c      	.short	0x000c
 80054e0:	005f0033 	.word	0x005f0033
 80054e4:	00af007f 	.word	0x00af007f
 80054e8:	012300d0 	.word	0x012300d0
 80054ec:	019a0143 	.word	0x019a0143
 80054f0:	03450211 	.word	0x03450211
 80054f4:	03fc      	.short	0x03fc
			memcpy(studentnumber, uart_command, 2 );
 80054f6:	4b7a      	ldr	r3, [pc, #488]	; (80056e0 <uart_comms+0x280>)
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	8812      	ldrh	r2, [r2, #0]
 80054fc:	800a      	strh	r2, [r1, #0]
			memcpy(studentnumber+2,comma,1);
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4978      	ldr	r1, [pc, #480]	; (80056e4 <uart_comms+0x284>)
 8005502:	7809      	ldrb	r1, [r1, #0]
 8005504:	7091      	strb	r1, [r2, #2]
			memcpy(studentnumber+3 ,studentnumber1,8 );
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4977      	ldr	r1, [pc, #476]	; (80056e8 <uart_comms+0x288>)
 800550a:	6808      	ldr	r0, [r1, #0]
 800550c:	6849      	ldr	r1, [r1, #4]
 800550e:	f8c2 0003 	str.w	r0, [r2, #3]
 8005512:	f8c2 1007 	str.w	r1, [r2, #7]
			memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 8005516:	6819      	ldr	r1, [r3, #0]
 8005518:	4b74      	ldr	r3, [pc, #464]	; (80056ec <uart_comms+0x28c>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f8c1 200b 	str.w	r2, [r1, #11]
 8005522:	f8c1 300f 	str.w	r3, [r1, #15]
			HAL_UART_Transmit_IT(&huart1, ((uint8_t*)studentnumber), 13);
 8005526:	220d      	movs	r2, #13
 8005528:	4871      	ldr	r0, [pc, #452]	; (80056f0 <uart_comms+0x290>)
 800552a:	f7fd ff1f 	bl	800336c <HAL_UART_Transmit_IT>
		memset(uart_command,0x00, 60);
 800552e:	223c      	movs	r2, #60	; 0x3c
 8005530:	2100      	movs	r1, #0
 8005532:	4b66      	ldr	r3, [pc, #408]	; (80056cc <uart_comms+0x26c>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f000 fc8e 	bl	8005e56 <memset>
		uart_counter = 0;
 800553a:	2200      	movs	r2, #0
 800553c:	4b64      	ldr	r3, [pc, #400]	; (80056d0 <uart_comms+0x270>)
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memcpy(return_value, uart_command, 2);
 8005544:	4b64      	ldr	r3, [pc, #400]	; (80056d8 <uart_comms+0x278>)
 8005546:	6819      	ldr	r1, [r3, #0]
 8005548:	8812      	ldrh	r2, [r2, #0]
 800554a:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4967      	ldr	r1, [pc, #412]	; (80056ec <uart_comms+0x28c>)
 8005550:	8809      	ldrh	r1, [r1, #0]
 8005552:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 8005554:	681c      	ldr	r4, [r3, #0]
 8005556:	4620      	mov	r0, r4
 8005558:	f7fa fe3a 	bl	80001d0 <strlen>
 800555c:	b282      	uxth	r2, r0
 800555e:	4621      	mov	r1, r4
 8005560:	4863      	ldr	r0, [pc, #396]	; (80056f0 <uart_comms+0x290>)
 8005562:	f7fd ff03 	bl	800336c <HAL_UART_Transmit_IT>
			if(uart_command[3]=='1'){
 8005566:	4b59      	ldr	r3, [pc, #356]	; (80056cc <uart_comms+0x26c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	78db      	ldrb	r3, [r3, #3]
 800556c:	2b31      	cmp	r3, #49	; 0x31
 800556e:	d00b      	beq.n	8005588 <uart_comms+0x128>
			else if(uart_command[3] == '0'){
 8005570:	2b30      	cmp	r3, #48	; 0x30
 8005572:	d1dc      	bne.n	800552e <uart_comms+0xce>
				valve_state=valve_CLOSE;
 8005574:	4a5f      	ldr	r2, [pc, #380]	; (80056f4 <uart_comms+0x294>)
 8005576:	4b60      	ldr	r3, [pc, #384]	; (80056f8 <uart_comms+0x298>)
 8005578:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);		// Valve
 800557a:	2200      	movs	r2, #0
 800557c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005580:	485e      	ldr	r0, [pc, #376]	; (80056fc <uart_comms+0x29c>)
 8005582:	f7fc fc6b 	bl	8001e5c <HAL_GPIO_WritePin>
 8005586:	e7d2      	b.n	800552e <uart_comms+0xce>
				valve_state = valve_OPEN;
 8005588:	4a5d      	ldr	r2, [pc, #372]	; (8005700 <uart_comms+0x2a0>)
 800558a:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <uart_comms+0x298>)
 800558c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);		// Valve
 800558e:	2201      	movs	r2, #1
 8005590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005594:	4859      	ldr	r0, [pc, #356]	; (80056fc <uart_comms+0x29c>)
 8005596:	f7fc fc61 	bl	8001e5c <HAL_GPIO_WritePin>
 800559a:	e7c8      	b.n	800552e <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 800559c:	4b4e      	ldr	r3, [pc, #312]	; (80056d8 <uart_comms+0x278>)
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4951      	ldr	r1, [pc, #324]	; (80056ec <uart_comms+0x28c>)
 80055a8:	8809      	ldrh	r1, [r1, #0]
 80055aa:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 80055ac:	681c      	ldr	r4, [r3, #0]
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7fa fe0e 	bl	80001d0 <strlen>
 80055b4:	b282      	uxth	r2, r0
 80055b6:	4621      	mov	r1, r4
 80055b8:	484d      	ldr	r0, [pc, #308]	; (80056f0 <uart_comms+0x290>)
 80055ba:	f7fd fed7 	bl	800336c <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){
 80055be:	4b43      	ldr	r3, [pc, #268]	; (80056cc <uart_comms+0x26c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	78db      	ldrb	r3, [r3, #3]
 80055c4:	2b30      	cmp	r3, #48	; 0x30
 80055c6:	d005      	beq.n	80055d4 <uart_comms+0x174>
			else if(uart_command[3] == '1'){
 80055c8:	2b31      	cmp	r3, #49	; 0x31
 80055ca:	d1b0      	bne.n	800552e <uart_comms+0xce>
				auto_heating = 1;
 80055cc:	2201      	movs	r2, #1
 80055ce:	4b4d      	ldr	r3, [pc, #308]	; (8005704 <uart_comms+0x2a4>)
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e7ac      	b.n	800552e <uart_comms+0xce>
				auto_heating = 0;
 80055d4:	2200      	movs	r2, #0
 80055d6:	4b4b      	ldr	r3, [pc, #300]	; (8005704 <uart_comms+0x2a4>)
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e7a8      	b.n	800552e <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 80055dc:	4b3e      	ldr	r3, [pc, #248]	; (80056d8 <uart_comms+0x278>)
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4941      	ldr	r1, [pc, #260]	; (80056ec <uart_comms+0x28c>)
 80055e8:	8809      	ldrh	r1, [r1, #0]
 80055ea:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value,  strlen((char*)return_value));
 80055ec:	681c      	ldr	r4, [r3, #0]
 80055ee:	4620      	mov	r0, r4
 80055f0:	f7fa fdee 	bl	80001d0 <strlen>
 80055f4:	b282      	uxth	r2, r0
 80055f6:	4621      	mov	r1, r4
 80055f8:	483d      	ldr	r0, [pc, #244]	; (80056f0 <uart_comms+0x290>)
 80055fa:	f7fd feb7 	bl	800336c <HAL_UART_Transmit_IT>
			if(auto_heating == 0){	// if auto heating off
 80055fe:	4b41      	ldr	r3, [pc, #260]	; (8005704 <uart_comms+0x2a4>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d193      	bne.n	800552e <uart_comms+0xce>
				if(uart_command[3]=='0'){
 8005606:	4b31      	ldr	r3, [pc, #196]	; (80056cc <uart_comms+0x26c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	78db      	ldrb	r3, [r3, #3]
 800560c:	2b30      	cmp	r3, #48	; 0x30
 800560e:	d00b      	beq.n	8005628 <uart_comms+0x1c8>
				else if(uart_command[3] == '1'){
 8005610:	2b31      	cmp	r3, #49	; 0x31
 8005612:	d18c      	bne.n	800552e <uart_comms+0xce>
					heater_state = heater_ON;
 8005614:	4a3c      	ldr	r2, [pc, #240]	; (8005708 <uart_comms+0x2a8>)
 8005616:	4b3d      	ldr	r3, [pc, #244]	; (800570c <uart_comms+0x2ac>)
 8005618:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);	// Heater
 800561a:	2201      	movs	r2, #1
 800561c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005620:	4836      	ldr	r0, [pc, #216]	; (80056fc <uart_comms+0x29c>)
 8005622:	f7fc fc1b 	bl	8001e5c <HAL_GPIO_WritePin>
 8005626:	e782      	b.n	800552e <uart_comms+0xce>
					heater_state = heater_OFF;
 8005628:	4a39      	ldr	r2, [pc, #228]	; (8005710 <uart_comms+0x2b0>)
 800562a:	4b38      	ldr	r3, [pc, #224]	; (800570c <uart_comms+0x2ac>)
 800562c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);	// Heater
 800562e:	2200      	movs	r2, #0
 8005630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005634:	4831      	ldr	r0, [pc, #196]	; (80056fc <uart_comms+0x29c>)
 8005636:	f7fc fc11 	bl	8001e5c <HAL_GPIO_WritePin>
 800563a:	e778      	b.n	800552e <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 800563c:	4b26      	ldr	r3, [pc, #152]	; (80056d8 <uart_comms+0x278>)
 800563e:	6819      	ldr	r1, [r3, #0]
 8005640:	8812      	ldrh	r2, [r2, #0]
 8005642:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2, endSimbol,2 );
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4929      	ldr	r1, [pc, #164]	; (80056ec <uart_comms+0x28c>)
 8005648:	8809      	ldrh	r1, [r1, #0]
 800564a:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1, return_value, strlen((char*)return_value));
 800564c:	681c      	ldr	r4, [r3, #0]
 800564e:	4620      	mov	r0, r4
 8005650:	f7fa fdbe 	bl	80001d0 <strlen>
 8005654:	b282      	uxth	r2, r0
 8005656:	4621      	mov	r1, r4
 8005658:	4825      	ldr	r0, [pc, #148]	; (80056f0 <uart_comms+0x290>)
 800565a:	f7fd fe87 	bl	800336c <HAL_UART_Transmit_IT>
			if(uart_command[3]=='0'){ // logging disable
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <uart_comms+0x26c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	78db      	ldrb	r3, [r3, #3]
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d006      	beq.n	8005676 <uart_comms+0x216>
			else if(uart_command[3] == '1'){ // logging enable
 8005668:	2b31      	cmp	r3, #49	; 0x31
 800566a:	f47f af60 	bne.w	800552e <uart_comms+0xce>
				enableFlashLogging = 1;
 800566e:	2201      	movs	r2, #1
 8005670:	4b28      	ldr	r3, [pc, #160]	; (8005714 <uart_comms+0x2b4>)
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	e75b      	b.n	800552e <uart_comms+0xce>
				enableFlashLogging = 0;
 8005676:	2200      	movs	r2, #0
 8005678:	4b26      	ldr	r3, [pc, #152]	; (8005714 <uart_comms+0x2b4>)
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e757      	b.n	800552e <uart_comms+0xce>
			memcpy(return_value, uart_command,2);
 800567e:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <uart_comms+0x278>)
 8005680:	6819      	ldr	r1, [r3, #0]
 8005682:	8812      	ldrh	r2, [r2, #0]
 8005684:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4918      	ldr	r1, [pc, #96]	; (80056ec <uart_comms+0x28c>)
 800568a:	8809      	ldrh	r1, [r1, #0]
 800568c:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 800568e:	681c      	ldr	r4, [r3, #0]
 8005690:	4620      	mov	r0, r4
 8005692:	f7fa fd9d 	bl	80001d0 <strlen>
 8005696:	b282      	uxth	r2, r0
 8005698:	4621      	mov	r1, r4
 800569a:	4815      	ldr	r0, [pc, #84]	; (80056f0 <uart_comms+0x290>)
 800569c:	f7fd fe66 	bl	800336c <HAL_UART_Transmit_IT>
			sizeOfTemp = uart_counter - 5;
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <uart_comms+0x270>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	3b05      	subs	r3, #5
 80056a6:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <uart_comms+0x2b8>)
 80056a8:	7013      	strb	r3, [r2, #0]
			memset(set_temp, 0x00, 4);
 80056aa:	4c1c      	ldr	r4, [pc, #112]	; (800571c <uart_comms+0x2bc>)
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	2100      	movs	r1, #0
 80056b0:	6019      	str	r1, [r3, #0]
			memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <uart_comms+0x26c>)
 80056b4:	6819      	ldr	r1, [r3, #0]
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	3103      	adds	r1, #3
 80056ba:	6820      	ldr	r0, [r4, #0]
 80056bc:	f000 fbc0 	bl	8005e40 <memcpy>
			segment_val =set_temp;
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	4b17      	ldr	r3, [pc, #92]	; (8005720 <uart_comms+0x2c0>)
 80056c4:	601a      	str	r2, [r3, #0]
			break;
 80056c6:	e732      	b.n	800552e <uart_comms+0xce>
 80056c8:	200002a5 	.word	0x200002a5
 80056cc:	200002c8 	.word	0x200002c8
 80056d0:	200002d0 	.word	0x200002d0
 80056d4:	200005ac 	.word	0x200005ac
 80056d8:	200002a0 	.word	0x200002a0
 80056dc:	200002cc 	.word	0x200002cc
 80056e0:	200005a8 	.word	0x200005a8
 80056e4:	20000004 	.word	0x20000004
 80056e8:	2000001c 	.word	0x2000001c
 80056ec:	20000008 	.word	0x20000008
 80056f0:	20000400 	.word	0x20000400
 80056f4:	20000024 	.word	0x20000024
 80056f8:	200002d4 	.word	0x200002d4
 80056fc:	48000400 	.word	0x48000400
 8005700:	2000002c 	.word	0x2000002c
 8005704:	20000250 	.word	0x20000250
 8005708:	20000018 	.word	0x20000018
 800570c:	20000284 	.word	0x20000284
 8005710:	20000014 	.word	0x20000014
 8005714:	20000006 	.word	0x20000006
 8005718:	200002b0 	.word	0x200002b0
 800571c:	200002ac 	.word	0x200002ac
 8005720:	200002a8 	.word	0x200002a8
			memcpy(return_value, uart_command, 2);
 8005724:	4caf      	ldr	r4, [pc, #700]	; (80059e4 <uart_comms+0x584>)
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	8812      	ldrh	r2, [r2, #0]
 800572a:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2, comma, 1);
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	4aae      	ldr	r2, [pc, #696]	; (80059e8 <uart_comms+0x588>)
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	709a      	strb	r2, [r3, #2]
			memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	4bad      	ldr	r3, [pc, #692]	; (80059ec <uart_comms+0x58c>)
 8005738:	781d      	ldrb	r5, [r3, #0]
 800573a:	462a      	mov	r2, r5
 800573c:	4bac      	ldr	r3, [pc, #688]	; (80059f0 <uart_comms+0x590>)
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	3003      	adds	r0, #3
 8005742:	f000 fb7d 	bl	8005e40 <memcpy>
			memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	3503      	adds	r5, #3
 800574a:	4aaa      	ldr	r2, [pc, #680]	; (80059f4 <uart_comms+0x594>)
 800574c:	8812      	ldrh	r2, [r2, #0]
 800574e:	535a      	strh	r2, [r3, r5]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005750:	6824      	ldr	r4, [r4, #0]
 8005752:	4620      	mov	r0, r4
 8005754:	f7fa fd3c 	bl	80001d0 <strlen>
 8005758:	b282      	uxth	r2, r0
 800575a:	4621      	mov	r1, r4
 800575c:	48a6      	ldr	r0, [pc, #664]	; (80059f8 <uart_comms+0x598>)
 800575e:	f7fd fe05 	bl	800336c <HAL_UART_Transmit_IT>
			break;
 8005762:	e6e4      	b.n	800552e <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8005764:	4b9f      	ldr	r3, [pc, #636]	; (80059e4 <uart_comms+0x584>)
 8005766:	6819      	ldr	r1, [r3, #0]
 8005768:	8812      	ldrh	r2, [r2, #0]
 800576a:	800a      	strh	r2, [r1, #0]
			memcpy(return_value+2,endSimbol, 2);
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	49a1      	ldr	r1, [pc, #644]	; (80059f4 <uart_comms+0x594>)
 8005770:	8809      	ldrh	r1, [r1, #0]
 8005772:	8051      	strh	r1, [r2, #2]
			HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 8005774:	681c      	ldr	r4, [r3, #0]
 8005776:	4620      	mov	r0, r4
 8005778:	f7fa fd2a 	bl	80001d0 <strlen>
 800577c:	b282      	uxth	r2, r0
 800577e:	4621      	mov	r1, r4
 8005780:	489d      	ldr	r0, [pc, #628]	; (80059f8 <uart_comms+0x598>)
 8005782:	f7fd fdf3 	bl	800336c <HAL_UART_Transmit_IT>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8005786:	4c9d      	ldr	r4, [pc, #628]	; (80059fc <uart_comms+0x59c>)
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	22ca      	movs	r2, #202	; 0xca
 800578c:	625a      	str	r2, [r3, #36]	; 0x24
 800578e:	2253      	movs	r2, #83	; 0x53
 8005790:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc); // Enter init mode
 8005792:	4620      	mov	r0, r4
 8005794:	f7fd f976 	bl	8002a84 <RTC_EnterInitMode>
			heating_info = strtok((char*)uart_command_copy, "$H,");
 8005798:	4999      	ldr	r1, [pc, #612]	; (8005a00 <uart_comms+0x5a0>)
 800579a:	4b9a      	ldr	r3, [pc, #616]	; (8005a04 <uart_comms+0x5a4>)
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	f000 fc43 	bl	8006028 <strtok>
 80057a2:	4e99      	ldr	r6, [pc, #612]	; (8005a08 <uart_comms+0x5a8>)
 80057a4:	6030      	str	r0, [r6, #0]
			time->Hours = strtol(heating_info, NULL,10);
 80057a6:	4d99      	ldr	r5, [pc, #612]	; (8005a0c <uart_comms+0x5ac>)
 80057a8:	682f      	ldr	r7, [r5, #0]
 80057aa:	220a      	movs	r2, #10
 80057ac:	2100      	movs	r1, #0
 80057ae:	f000 fd0f 	bl	80061d0 <strtol>
 80057b2:	7038      	strb	r0, [r7, #0]
			heating_info = (strtok(NULL, ","));
 80057b4:	4996      	ldr	r1, [pc, #600]	; (8005a10 <uart_comms+0x5b0>)
 80057b6:	2000      	movs	r0, #0
 80057b8:	f000 fc36 	bl	8006028 <strtok>
 80057bc:	6030      	str	r0, [r6, #0]
			time->Minutes = strtol(heating_info, NULL,10);
 80057be:	682f      	ldr	r7, [r5, #0]
 80057c0:	220a      	movs	r2, #10
 80057c2:	2100      	movs	r1, #0
 80057c4:	f000 fd04 	bl	80061d0 <strtol>
 80057c8:	7078      	strb	r0, [r7, #1]
			heating_info = (strtok(NULL, ",\r\n"));
 80057ca:	4992      	ldr	r1, [pc, #584]	; (8005a14 <uart_comms+0x5b4>)
 80057cc:	2000      	movs	r0, #0
 80057ce:	f000 fc2b 	bl	8006028 <strtok>
 80057d2:	6030      	str	r0, [r6, #0]
			time->Seconds = strtol(heating_info, NULL,10);
 80057d4:	682e      	ldr	r6, [r5, #0]
 80057d6:	220a      	movs	r2, #10
 80057d8:	2100      	movs	r1, #0
 80057da:	f000 fcf9 	bl	80061d0 <strtol>
 80057de:	70b0      	strb	r0, [r6, #2]
			HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 80057e0:	2200      	movs	r2, #0
 80057e2:	6829      	ldr	r1, [r5, #0]
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7fd f9bf 	bl	8002b68 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 80057ea:	4e8b      	ldr	r6, [pc, #556]	; (8005a18 <uart_comms+0x5b8>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	6831      	ldr	r1, [r6, #0]
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7fd fa59 	bl	8002ca8 <HAL_RTC_SetDate>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	22ff      	movs	r2, #255	; 0xff
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 80057fc:	2200      	movs	r2, #0
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	4620      	mov	r0, r4
 8005802:	f7fd f8bf 	bl	8002984 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005806:	2200      	movs	r2, #0
 8005808:	6831      	ldr	r1, [r6, #0]
 800580a:	4620      	mov	r0, r4
 800580c:	f7fd f8f0 	bl	80029f0 <HAL_RTC_GetDate>
			break;
 8005810:	e68d      	b.n	800552e <uart_comms+0xce>
			HAL_RTC_GetTime(&hrtc,time,RTC_FORMAT_BIN);
 8005812:	4e7e      	ldr	r6, [pc, #504]	; (8005a0c <uart_comms+0x5ac>)
 8005814:	4c79      	ldr	r4, [pc, #484]	; (80059fc <uart_comms+0x59c>)
 8005816:	2200      	movs	r2, #0
 8005818:	6831      	ldr	r1, [r6, #0]
 800581a:	4620      	mov	r0, r4
 800581c:	f7fd f8b2 	bl	8002984 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc,date,RTC_FORMAT_BIN);
 8005820:	2200      	movs	r2, #0
 8005822:	4b7d      	ldr	r3, [pc, #500]	; (8005a18 <uart_comms+0x5b8>)
 8005824:	6819      	ldr	r1, [r3, #0]
 8005826:	4620      	mov	r0, r4
 8005828:	f7fd f8e2 	bl	80029f0 <HAL_RTC_GetDate>
			memcpy(return_value, uart_command, 2);
 800582c:	4c6d      	ldr	r4, [pc, #436]	; (80059e4 <uart_comms+0x584>)
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	4a7a      	ldr	r2, [pc, #488]	; (8005a1c <uart_comms+0x5bc>)
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	8812      	ldrh	r2, [r2, #0]
 8005836:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1);
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80059e8 <uart_comms+0x588>
 800583e:	f898 2000 	ldrb.w	r2, [r8]
 8005842:	709a      	strb	r2, [r3, #2]
			itoa((time->Hours),temp_time_var,10  );
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	4d76      	ldr	r5, [pc, #472]	; (8005a20 <uart_comms+0x5c0>)
 8005848:	220a      	movs	r2, #10
 800584a:	6829      	ldr	r1, [r5, #0]
 800584c:	7818      	ldrb	r0, [r3, #0]
 800584e:	f000 faed 	bl	8005e2c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 8005852:	6827      	ldr	r7, [r4, #0]
 8005854:	4638      	mov	r0, r7
 8005856:	f7fa fcbb 	bl	80001d0 <strlen>
 800585a:	4407      	add	r7, r0
 800585c:	f8d5 9000 	ldr.w	r9, [r5]
 8005860:	4648      	mov	r0, r9
 8005862:	f7fa fcb5 	bl	80001d0 <strlen>
 8005866:	4602      	mov	r2, r0
 8005868:	4649      	mov	r1, r9
 800586a:	4638      	mov	r0, r7
 800586c:	f000 fae8 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005870:	6827      	ldr	r7, [r4, #0]
 8005872:	4638      	mov	r0, r7
 8005874:	f7fa fcac 	bl	80001d0 <strlen>
 8005878:	f898 3000 	ldrb.w	r3, [r8]
 800587c:	543b      	strb	r3, [r7, r0]
			itoa((time->Minutes),temp_time_var,10  );
 800587e:	6833      	ldr	r3, [r6, #0]
 8005880:	220a      	movs	r2, #10
 8005882:	6829      	ldr	r1, [r5, #0]
 8005884:	7858      	ldrb	r0, [r3, #1]
 8005886:	f000 fad1 	bl	8005e2c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 800588a:	6827      	ldr	r7, [r4, #0]
 800588c:	4638      	mov	r0, r7
 800588e:	f7fa fc9f 	bl	80001d0 <strlen>
 8005892:	4407      	add	r7, r0
 8005894:	f8d5 9000 	ldr.w	r9, [r5]
 8005898:	4648      	mov	r0, r9
 800589a:	f7fa fc99 	bl	80001d0 <strlen>
 800589e:	4602      	mov	r2, r0
 80058a0:	4649      	mov	r1, r9
 80058a2:	4638      	mov	r0, r7
 80058a4:	f000 facc 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 80058a8:	6827      	ldr	r7, [r4, #0]
 80058aa:	4638      	mov	r0, r7
 80058ac:	f7fa fc90 	bl	80001d0 <strlen>
 80058b0:	f898 3000 	ldrb.w	r3, [r8]
 80058b4:	543b      	strb	r3, [r7, r0]
			itoa((time->Seconds),temp_time_var,10  );
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	220a      	movs	r2, #10
 80058ba:	6829      	ldr	r1, [r5, #0]
 80058bc:	7898      	ldrb	r0, [r3, #2]
 80058be:	f000 fab5 	bl	8005e2c <itoa>
			memcpy(return_value+strlen((char*)return_value),temp_time_var,strlen(temp_time_var));
 80058c2:	6826      	ldr	r6, [r4, #0]
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7fa fc83 	bl	80001d0 <strlen>
 80058ca:	4406      	add	r6, r0
 80058cc:	682d      	ldr	r5, [r5, #0]
 80058ce:	4628      	mov	r0, r5
 80058d0:	f7fa fc7e 	bl	80001d0 <strlen>
 80058d4:	4602      	mov	r2, r0
 80058d6:	4629      	mov	r1, r5
 80058d8:	4630      	mov	r0, r6
 80058da:	f000 fab1 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	4628      	mov	r0, r5
 80058e2:	f7fa fc75 	bl	80001d0 <strlen>
 80058e6:	4b43      	ldr	r3, [pc, #268]	; (80059f4 <uart_comms+0x594>)
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 80058ec:	6824      	ldr	r4, [r4, #0]
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7fa fc6e 	bl	80001d0 <strlen>
 80058f4:	b282      	uxth	r2, r0
 80058f6:	4621      	mov	r1, r4
 80058f8:	483f      	ldr	r0, [pc, #252]	; (80059f8 <uart_comms+0x598>)
 80058fa:	f7fd fd37 	bl	800336c <HAL_UART_Transmit_IT>
			break;
 80058fe:	e616      	b.n	800552e <uart_comms+0xce>
			if(auto_heating == 1){
 8005900:	4b48      	ldr	r3, [pc, #288]	; (8005a24 <uart_comms+0x5c4>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	f47f ae12 	bne.w	800552e <uart_comms+0xce>
				memcpy(return_value, uart_command, 2);
 800590a:	4b36      	ldr	r3, [pc, #216]	; (80059e4 <uart_comms+0x584>)
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	800a      	strh	r2, [r1, #0]
				memcpy(return_value+2, endSimbol,2 );
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4937      	ldr	r1, [pc, #220]	; (80059f4 <uart_comms+0x594>)
 8005916:	8809      	ldrh	r1, [r1, #0]
 8005918:	8051      	strh	r1, [r2, #2]
				HAL_UART_Transmit_IT(&huart1,return_value, strlen((char*)return_value));
 800591a:	681c      	ldr	r4, [r3, #0]
 800591c:	4620      	mov	r0, r4
 800591e:	f7fa fc57 	bl	80001d0 <strlen>
 8005922:	b282      	uxth	r2, r0
 8005924:	4621      	mov	r1, r4
 8005926:	4834      	ldr	r0, [pc, #208]	; (80059f8 <uart_comms+0x598>)
 8005928:	f7fd fd20 	bl	800336c <HAL_UART_Transmit_IT>
				if(uart_command[3] == '1'){ // first heating schedule
 800592c:	4b3b      	ldr	r3, [pc, #236]	; (8005a1c <uart_comms+0x5bc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	78db      	ldrb	r3, [r3, #3]
 8005932:	2b31      	cmp	r3, #49	; 0x31
 8005934:	d07c      	beq.n	8005a30 <uart_comms+0x5d0>
				else if(uart_command[3] == '2'){ // second heating schedule
 8005936:	2b32      	cmp	r3, #50	; 0x32
 8005938:	f000 80c5 	beq.w	8005ac6 <uart_comms+0x666>
				else if(uart_command[3] == '3'){ // 3rd heating schedule
 800593c:	2b33      	cmp	r3, #51	; 0x33
 800593e:	f47f adf6 	bne.w	800552e <uart_comms+0xce>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005942:	4d33      	ldr	r5, [pc, #204]	; (8005a10 <uart_comms+0x5b0>)
 8005944:	4629      	mov	r1, r5
 8005946:	4b2f      	ldr	r3, [pc, #188]	; (8005a04 <uart_comms+0x5a4>)
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	f000 fb6d 	bl	8006028 <strtok>
 800594e:	4c2e      	ldr	r4, [pc, #184]	; (8005a08 <uart_comms+0x5a8>)
 8005950:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005952:	4629      	mov	r1, r5
 8005954:	2000      	movs	r0, #0
 8005956:	f000 fb67 	bl	8006028 <strtok>
 800595a:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 800595c:	4629      	mov	r1, r5
 800595e:	2000      	movs	r0, #0
 8005960:	f000 fb62 	bl	8006028 <strtok>
 8005964:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Hours = strtol(heating_info, NULL,10);
 8005966:	220a      	movs	r2, #10
 8005968:	2100      	movs	r1, #0
 800596a:	f000 fc31 	bl	80061d0 <strtol>
 800596e:	4e2e      	ldr	r6, [pc, #184]	; (8005a28 <uart_comms+0x5c8>)
 8005970:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
					heating_info = (strtok(NULL, ","));
 8005974:	4629      	mov	r1, r5
 8005976:	2000      	movs	r0, #0
 8005978:	f000 fb56 	bl	8006028 <strtok>
 800597c:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Minutes = strtol(heating_info, NULL,10);
 800597e:	220a      	movs	r2, #10
 8005980:	2100      	movs	r1, #0
 8005982:	f000 fc25 	bl	80061d0 <strtol>
 8005986:	f886 0051 	strb.w	r0, [r6, #81]	; 0x51
					heating_info = (strtok(NULL, ","));
 800598a:	4629      	mov	r1, r5
 800598c:	2000      	movs	r0, #0
 800598e:	f000 fb4b 	bl	8006028 <strtok>
 8005992:	6020      	str	r0, [r4, #0]
					heating_schedule[4].Seconds = strtol(heating_info, NULL,10);
 8005994:	220a      	movs	r2, #10
 8005996:	2100      	movs	r1, #0
 8005998:	f000 fc1a 	bl	80061d0 <strtol>
 800599c:	f886 0052 	strb.w	r0, [r6, #82]	; 0x52
					heating_info = (strtok(NULL, ","));
 80059a0:	4629      	mov	r1, r5
 80059a2:	2000      	movs	r0, #0
 80059a4:	f000 fb40 	bl	8006028 <strtok>
 80059a8:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Hours = strtol(heating_info, NULL,10);
 80059aa:	220a      	movs	r2, #10
 80059ac:	2100      	movs	r1, #0
 80059ae:	f000 fc0f 	bl	80061d0 <strtol>
 80059b2:	f886 0064 	strb.w	r0, [r6, #100]	; 0x64
					heating_info = (strtok(NULL, ","));
 80059b6:	4629      	mov	r1, r5
 80059b8:	2000      	movs	r0, #0
 80059ba:	f000 fb35 	bl	8006028 <strtok>
 80059be:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Minutes = strtol(heating_info, NULL,10);
 80059c0:	220a      	movs	r2, #10
 80059c2:	2100      	movs	r1, #0
 80059c4:	f000 fc04 	bl	80061d0 <strtol>
 80059c8:	f886 0065 	strb.w	r0, [r6, #101]	; 0x65
					heating_info = (strtok(NULL, "\r\n"));
 80059cc:	4917      	ldr	r1, [pc, #92]	; (8005a2c <uart_comms+0x5cc>)
 80059ce:	2000      	movs	r0, #0
 80059d0:	f000 fb2a 	bl	8006028 <strtok>
 80059d4:	6020      	str	r0, [r4, #0]
					heating_schedule[5].Seconds = strtol(heating_info, NULL,10);
 80059d6:	220a      	movs	r2, #10
 80059d8:	2100      	movs	r1, #0
 80059da:	f000 fbf9 	bl	80061d0 <strtol>
 80059de:	f886 0066 	strb.w	r0, [r6, #102]	; 0x66
 80059e2:	e5a4      	b.n	800552e <uart_comms+0xce>
 80059e4:	200002a0 	.word	0x200002a0
 80059e8:	20000004 	.word	0x20000004
 80059ec:	200002b0 	.word	0x200002b0
 80059f0:	200002ac 	.word	0x200002ac
 80059f4:	20000008 	.word	0x20000008
 80059f8:	20000400 	.word	0x20000400
 80059fc:	20000470 	.word	0x20000470
 8005a00:	08006be4 	.word	0x08006be4
 8005a04:	200002cc 	.word	0x200002cc
 8005a08:	20000288 	.word	0x20000288
 8005a0c:	200002bc 	.word	0x200002bc
 8005a10:	08006be8 	.word	0x08006be8
 8005a14:	08006bec 	.word	0x08006bec
 8005a18:	2000025c 	.word	0x2000025c
 8005a1c:	200002c8 	.word	0x200002c8
 8005a20:	200002b4 	.word	0x200002b4
 8005a24:	20000250 	.word	0x20000250
 8005a28:	20000530 	.word	0x20000530
 8005a2c:	08006bf0 	.word	0x08006bf0
					heating_info = strtok((char*)uart_command_copy, ",");
 8005a30:	4db6      	ldr	r5, [pc, #728]	; (8005d0c <uart_comms+0x8ac>)
 8005a32:	4629      	mov	r1, r5
 8005a34:	4bb6      	ldr	r3, [pc, #728]	; (8005d10 <uart_comms+0x8b0>)
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	f000 faf6 	bl	8006028 <strtok>
 8005a3c:	4cb5      	ldr	r4, [pc, #724]	; (8005d14 <uart_comms+0x8b4>)
 8005a3e:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005a40:	4629      	mov	r1, r5
 8005a42:	2000      	movs	r0, #0
 8005a44:	f000 faf0 	bl	8006028 <strtok>
 8005a48:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f000 faeb 	bl	8006028 <strtok>
 8005a52:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Hours = strtol(heating_info, NULL,10);
 8005a54:	220a      	movs	r2, #10
 8005a56:	2100      	movs	r1, #0
 8005a58:	f000 fbba 	bl	80061d0 <strtol>
 8005a5c:	4eae      	ldr	r6, [pc, #696]	; (8005d18 <uart_comms+0x8b8>)
 8005a5e:	7030      	strb	r0, [r6, #0]
					heating_info = (strtok(NULL, ","));
 8005a60:	4629      	mov	r1, r5
 8005a62:	2000      	movs	r0, #0
 8005a64:	f000 fae0 	bl	8006028 <strtok>
 8005a68:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Minutes = strtol(heating_info, NULL,10);
 8005a6a:	220a      	movs	r2, #10
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f000 fbaf 	bl	80061d0 <strtol>
 8005a72:	7070      	strb	r0, [r6, #1]
					heating_info = (strtok(NULL, ","));
 8005a74:	4629      	mov	r1, r5
 8005a76:	2000      	movs	r0, #0
 8005a78:	f000 fad6 	bl	8006028 <strtok>
 8005a7c:	6020      	str	r0, [r4, #0]
					heating_schedule[0].Seconds = strtol(heating_info, NULL,10);
 8005a7e:	220a      	movs	r2, #10
 8005a80:	2100      	movs	r1, #0
 8005a82:	f000 fba5 	bl	80061d0 <strtol>
 8005a86:	70b0      	strb	r0, [r6, #2]
					heating_info = (strtok(NULL, ","));
 8005a88:	4629      	mov	r1, r5
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f000 facc 	bl	8006028 <strtok>
 8005a90:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Hours = strtol(heating_info, NULL,10);
 8005a92:	220a      	movs	r2, #10
 8005a94:	2100      	movs	r1, #0
 8005a96:	f000 fb9b 	bl	80061d0 <strtol>
 8005a9a:	7530      	strb	r0, [r6, #20]
					heating_info = (strtok(NULL, ","));
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f000 fac2 	bl	8006028 <strtok>
 8005aa4:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Minutes = strtol(heating_info, NULL,10);
 8005aa6:	220a      	movs	r2, #10
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	f000 fb91 	bl	80061d0 <strtol>
 8005aae:	7570      	strb	r0, [r6, #21]
					heating_info = (strtok(NULL, "\r\n"));
 8005ab0:	499a      	ldr	r1, [pc, #616]	; (8005d1c <uart_comms+0x8bc>)
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f000 fab8 	bl	8006028 <strtok>
 8005ab8:	6020      	str	r0, [r4, #0]
					heating_schedule[1].Seconds = strtol(heating_info, NULL,10);
 8005aba:	220a      	movs	r2, #10
 8005abc:	2100      	movs	r1, #0
 8005abe:	f000 fb87 	bl	80061d0 <strtol>
 8005ac2:	75b0      	strb	r0, [r6, #22]
 8005ac4:	e533      	b.n	800552e <uart_comms+0xce>
					heating_info = strtok((char*)uart_command_copy, ",");
 8005ac6:	4d91      	ldr	r5, [pc, #580]	; (8005d0c <uart_comms+0x8ac>)
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4b91      	ldr	r3, [pc, #580]	; (8005d10 <uart_comms+0x8b0>)
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	f000 faab 	bl	8006028 <strtok>
 8005ad2:	4c90      	ldr	r4, [pc, #576]	; (8005d14 <uart_comms+0x8b4>)
 8005ad4:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	2000      	movs	r0, #0
 8005ada:	f000 faa5 	bl	8006028 <strtok>
 8005ade:	6020      	str	r0, [r4, #0]
					heating_info = (strtok(NULL, ","));
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f000 faa0 	bl	8006028 <strtok>
 8005ae8:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Hours = strtol(heating_info, NULL,10);
 8005aea:	220a      	movs	r2, #10
 8005aec:	2100      	movs	r1, #0
 8005aee:	f000 fb6f 	bl	80061d0 <strtol>
 8005af2:	4e89      	ldr	r6, [pc, #548]	; (8005d18 <uart_comms+0x8b8>)
 8005af4:	f886 0028 	strb.w	r0, [r6, #40]	; 0x28
					heating_info = (strtok(NULL, ","));
 8005af8:	4629      	mov	r1, r5
 8005afa:	2000      	movs	r0, #0
 8005afc:	f000 fa94 	bl	8006028 <strtok>
 8005b00:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Minutes = strtol(heating_info, NULL,10);
 8005b02:	220a      	movs	r2, #10
 8005b04:	2100      	movs	r1, #0
 8005b06:	f000 fb63 	bl	80061d0 <strtol>
 8005b0a:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
					heating_info = (strtok(NULL, ","));
 8005b0e:	4629      	mov	r1, r5
 8005b10:	2000      	movs	r0, #0
 8005b12:	f000 fa89 	bl	8006028 <strtok>
 8005b16:	6020      	str	r0, [r4, #0]
					heating_schedule[2].Seconds = strtol(heating_info, NULL,10);
 8005b18:	220a      	movs	r2, #10
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	f000 fb58 	bl	80061d0 <strtol>
 8005b20:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
					heating_info = (strtok(NULL, ","));
 8005b24:	4629      	mov	r1, r5
 8005b26:	2000      	movs	r0, #0
 8005b28:	f000 fa7e 	bl	8006028 <strtok>
 8005b2c:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Hours = strtol(heating_info, NULL,10);
 8005b2e:	220a      	movs	r2, #10
 8005b30:	2100      	movs	r1, #0
 8005b32:	f000 fb4d 	bl	80061d0 <strtol>
 8005b36:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
					heating_info = (strtok(NULL, ","));
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f000 fa73 	bl	8006028 <strtok>
 8005b42:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Minutes = strtol(heating_info, NULL,10);
 8005b44:	220a      	movs	r2, #10
 8005b46:	2100      	movs	r1, #0
 8005b48:	f000 fb42 	bl	80061d0 <strtol>
 8005b4c:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
					heating_info = (strtok(NULL, "\r\n"));
 8005b50:	4972      	ldr	r1, [pc, #456]	; (8005d1c <uart_comms+0x8bc>)
 8005b52:	2000      	movs	r0, #0
 8005b54:	f000 fa68 	bl	8006028 <strtok>
 8005b58:	6020      	str	r0, [r4, #0]
					heating_schedule[3].Seconds = strtol(heating_info, NULL,10);
 8005b5a:	220a      	movs	r2, #10
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	f000 fb37 	bl	80061d0 <strtol>
 8005b62:	f886 003e 	strb.w	r0, [r6, #62]	; 0x3e
 8005b66:	e4e2      	b.n	800552e <uart_comms+0xce>
			memcpy(return_value, uart_command, 2);
 8005b68:	4c6d      	ldr	r4, [pc, #436]	; (8005d20 <uart_comms+0x8c0>)
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	8812      	ldrh	r2, [r2, #0]
 8005b6e:	801a      	strh	r2, [r3, #0]
			memcpy(return_value+2,comma,1 );
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	4d6c      	ldr	r5, [pc, #432]	; (8005d24 <uart_comms+0x8c4>)
 8005b74:	782f      	ldrb	r7, [r5, #0]
 8005b76:	709f      	strb	r7, [r3, #2]
			memcpy(return_value+3,current_rms,strlen(current_rms));
 8005b78:	6826      	ldr	r6, [r4, #0]
 8005b7a:	3603      	adds	r6, #3
 8005b7c:	4b6a      	ldr	r3, [pc, #424]	; (8005d28 <uart_comms+0x8c8>)
 8005b7e:	f8d3 8000 	ldr.w	r8, [r3]
 8005b82:	4640      	mov	r0, r8
 8005b84:	f7fa fb24 	bl	80001d0 <strlen>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4641      	mov	r1, r8
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f000 f957 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005b92:	6826      	ldr	r6, [r4, #0]
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7fa fb1b 	bl	80001d0 <strlen>
 8005b9a:	5437      	strb	r7, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),voltage_rms,strlen(voltage_rms) );
 8005b9c:	6826      	ldr	r6, [r4, #0]
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f7fa fb16 	bl	80001d0 <strlen>
 8005ba4:	4406      	add	r6, r0
 8005ba6:	4b61      	ldr	r3, [pc, #388]	; (8005d2c <uart_comms+0x8cc>)
 8005ba8:	681f      	ldr	r7, [r3, #0]
 8005baa:	4638      	mov	r0, r7
 8005bac:	f7fa fb10 	bl	80001d0 <strlen>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f943 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005bba:	6826      	ldr	r6, [r4, #0]
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	f7fa fb07 	bl	80001d0 <strlen>
 8005bc2:	782b      	ldrb	r3, [r5, #0]
 8005bc4:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),ambient_temp,strlen(ambient_temp) );
 8005bc6:	6826      	ldr	r6, [r4, #0]
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f7fa fb01 	bl	80001d0 <strlen>
 8005bce:	4406      	add	r6, r0
 8005bd0:	4b57      	ldr	r3, [pc, #348]	; (8005d30 <uart_comms+0x8d0>)
 8005bd2:	681f      	ldr	r7, [r3, #0]
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	f7fa fafb 	bl	80001d0 <strlen>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 f92e 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005be4:	6826      	ldr	r6, [r4, #0]
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7fa faf2 	bl	80001d0 <strlen>
 8005bec:	782b      	ldrb	r3, [r5, #0]
 8005bee:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),geyser_temp,strlen(geyser_temp) );
 8005bf0:	6826      	ldr	r6, [r4, #0]
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7fa faec 	bl	80001d0 <strlen>
 8005bf8:	4406      	add	r6, r0
 8005bfa:	4b4e      	ldr	r3, [pc, #312]	; (8005d34 <uart_comms+0x8d4>)
 8005bfc:	681f      	ldr	r7, [r3, #0]
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f7fa fae6 	bl	80001d0 <strlen>
 8005c04:	4602      	mov	r2, r0
 8005c06:	4639      	mov	r1, r7
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f000 f919 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005c0e:	6826      	ldr	r6, [r4, #0]
 8005c10:	4630      	mov	r0, r6
 8005c12:	f7fa fadd 	bl	80001d0 <strlen>
 8005c16:	782b      	ldrb	r3, [r5, #0]
 8005c18:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),total_water,strlen(total_water) );
 8005c1a:	6826      	ldr	r6, [r4, #0]
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7fa fad7 	bl	80001d0 <strlen>
 8005c22:	4406      	add	r6, r0
 8005c24:	4b44      	ldr	r3, [pc, #272]	; (8005d38 <uart_comms+0x8d8>)
 8005c26:	681f      	ldr	r7, [r3, #0]
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f7fa fad1 	bl	80001d0 <strlen>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	4639      	mov	r1, r7
 8005c32:	4630      	mov	r0, r6
 8005c34:	f000 f904 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005c38:	6826      	ldr	r6, [r4, #0]
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7fa fac8 	bl	80001d0 <strlen>
 8005c40:	782b      	ldrb	r3, [r5, #0]
 8005c42:	5433      	strb	r3, [r6, r0]
			memcpy(return_value+strlen((char*)return_value),heater_state,strlen(heater_state));
 8005c44:	6826      	ldr	r6, [r4, #0]
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7fa fac2 	bl	80001d0 <strlen>
 8005c4c:	4406      	add	r6, r0
 8005c4e:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <uart_comms+0x8dc>)
 8005c50:	681f      	ldr	r7, [r3, #0]
 8005c52:	4638      	mov	r0, r7
 8005c54:	f7fa fabc 	bl	80001d0 <strlen>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 f8ef 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value),comma,1 );
 8005c62:	6824      	ldr	r4, [r4, #0]
 8005c64:	4620      	mov	r0, r4
 8005c66:	f7fa fab3 	bl	80001d0 <strlen>
 8005c6a:	782b      	ldrb	r3, [r5, #0]
 8005c6c:	5423      	strb	r3, [r4, r0]
			if(valve_state == valve_OPEN){
 8005c6e:	4b34      	ldr	r3, [pc, #208]	; (8005d40 <uart_comms+0x8e0>)
 8005c70:	681c      	ldr	r4, [r3, #0]
 8005c72:	4b34      	ldr	r3, [pc, #208]	; (8005d44 <uart_comms+0x8e4>)
 8005c74:	429c      	cmp	r4, r3
 8005c76:	d01f      	beq.n	8005cb8 <uart_comms+0x858>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) );
 8005c78:	4b29      	ldr	r3, [pc, #164]	; (8005d20 <uart_comms+0x8c0>)
 8005c7a:	681d      	ldr	r5, [r3, #0]
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7fa faa7 	bl	80001d0 <strlen>
 8005c82:	4405      	add	r5, r0
 8005c84:	4620      	mov	r0, r4
 8005c86:	f7fa faa3 	bl	80001d0 <strlen>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 f8d6 	bl	8005e40 <memcpy>
			memcpy(return_value+strlen((char*)return_value), endSimbol,2 );
 8005c94:	4c22      	ldr	r4, [pc, #136]	; (8005d20 <uart_comms+0x8c0>)
 8005c96:	6825      	ldr	r5, [r4, #0]
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f7fa fa99 	bl	80001d0 <strlen>
 8005c9e:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <uart_comms+0x8e8>)
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	522b      	strh	r3, [r5, r0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)return_value, strlen((char*)return_value));
 8005ca4:	6824      	ldr	r4, [r4, #0]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f7fa fa92 	bl	80001d0 <strlen>
 8005cac:	b282      	uxth	r2, r0
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4826      	ldr	r0, [pc, #152]	; (8005d4c <uart_comms+0x8ec>)
 8005cb2:	f7fd fb5b 	bl	800336c <HAL_UART_Transmit_IT>
			break;
 8005cb6:	e43a      	b.n	800552e <uart_comms+0xce>
				memcpy(return_value+strlen((char*)return_value), valve_state,strlen(valve_state) -1);
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <uart_comms+0x8c0>)
 8005cba:	681d      	ldr	r5, [r3, #0]
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f7fa fa87 	bl	80001d0 <strlen>
 8005cc2:	4405      	add	r5, r0
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f7fa fa83 	bl	80001d0 <strlen>
 8005cca:	1e42      	subs	r2, r0, #1
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f8b6 	bl	8005e40 <memcpy>
 8005cd4:	e7de      	b.n	8005c94 <uart_comms+0x834>
			log_receiced_num = uart_command[3] - 48;
 8005cd6:	78d3      	ldrb	r3, [r2, #3]
 8005cd8:	3b30      	subs	r3, #48	; 0x30
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <uart_comms+0x8f0>)
 8005cde:	7013      	strb	r3, [r2, #0]
			if(log_receiced_num > log_counter && log_full == 0){
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <uart_comms+0x8f4>)
 8005ce2:	7812      	ldrb	r2, [r2, #0]
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d904      	bls.n	8005cf2 <uart_comms+0x892>
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	; (8005d58 <uart_comms+0x8f8>)
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	2a00      	cmp	r2, #0
 8005cee:	f43f ac1e 	beq.w	800552e <uart_comms+0xce>
				HAL_UART_Transmit_IT(&huart1,(uint8_t*)(flash_mem_start+64*log_receiced_num), strlen((char*)(flash_mem_start+64*log_receiced_num)));
 8005cf2:	4a1a      	ldr	r2, [pc, #104]	; (8005d5c <uart_comms+0x8fc>)
 8005cf4:	6814      	ldr	r4, [r2, #0]
 8005cf6:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f7fa fa68 	bl	80001d0 <strlen>
 8005d00:	b282      	uxth	r2, r0
 8005d02:	4621      	mov	r1, r4
 8005d04:	4811      	ldr	r0, [pc, #68]	; (8005d4c <uart_comms+0x8ec>)
 8005d06:	f7fd fb31 	bl	800336c <HAL_UART_Transmit_IT>
 8005d0a:	e410      	b.n	800552e <uart_comms+0xce>
 8005d0c:	08006be8 	.word	0x08006be8
 8005d10:	200002cc 	.word	0x200002cc
 8005d14:	20000288 	.word	0x20000288
 8005d18:	20000530 	.word	0x20000530
 8005d1c:	08006bf0 	.word	0x08006bf0
 8005d20:	200002a0 	.word	0x200002a0
 8005d24:	20000004 	.word	0x20000004
 8005d28:	20000258 	.word	0x20000258
 8005d2c:	200002dc 	.word	0x200002dc
 8005d30:	2000024c 	.word	0x2000024c
 8005d34:	20000270 	.word	0x20000270
 8005d38:	200002c0 	.word	0x200002c0
 8005d3c:	20000284 	.word	0x20000284
 8005d40:	200002d4 	.word	0x200002d4
 8005d44:	2000002c 	.word	0x2000002c
 8005d48:	20000008 	.word	0x20000008
 8005d4c:	20000400 	.word	0x20000400
 8005d50:	2000028e 	.word	0x2000028e
 8005d54:	2000028c 	.word	0x2000028c
 8005d58:	2000028d 	.word	0x2000028d
 8005d5c:	20000010 	.word	0x20000010

08005d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005d64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005d66:	e003      	b.n	8005d70 <LoopCopyDataInit>

08005d68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005d6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005d6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005d6e:	3104      	adds	r1, #4

08005d70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005d70:	480b      	ldr	r0, [pc, #44]	; (8005da0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005d72:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005d74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005d76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005d78:	d3f6      	bcc.n	8005d68 <CopyDataInit>
	ldr	r2, =_sbss
 8005d7a:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005d7c:	e002      	b.n	8005d84 <LoopFillZerobss>

08005d7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005d7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005d80:	f842 3b04 	str.w	r3, [r2], #4

08005d84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005d84:	4b09      	ldr	r3, [pc, #36]	; (8005dac <LoopForever+0x16>)
	cmp	r2, r3
 8005d86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005d88:	d3f9      	bcc.n	8005d7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d8a:	f7ff fb31 	bl	80053f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d8e:	f000 f811 	bl	8005db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d92:	f7fe fea1 	bl	8004ad8 <main>

08005d96 <LoopForever>:

LoopForever:
    b LoopForever
 8005d96:	e7fe      	b.n	8005d96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005d98:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8005d9c:	08006d6c 	.word	0x08006d6c
	ldr	r0, =_sdata
 8005da0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005da4:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8005da8:	20000208 	.word	0x20000208
	ldr	r3, = _ebss
 8005dac:	200005e4 	.word	0x200005e4

08005db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005db0:	e7fe      	b.n	8005db0 <ADC1_2_IRQHandler>
	...

08005db4 <__libc_init_array>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	4e0d      	ldr	r6, [pc, #52]	; (8005dec <__libc_init_array+0x38>)
 8005db8:	4c0d      	ldr	r4, [pc, #52]	; (8005df0 <__libc_init_array+0x3c>)
 8005dba:	1ba4      	subs	r4, r4, r6
 8005dbc:	10a4      	asrs	r4, r4, #2
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	42a5      	cmp	r5, r4
 8005dc2:	d109      	bne.n	8005dd8 <__libc_init_array+0x24>
 8005dc4:	4e0b      	ldr	r6, [pc, #44]	; (8005df4 <__libc_init_array+0x40>)
 8005dc6:	4c0c      	ldr	r4, [pc, #48]	; (8005df8 <__libc_init_array+0x44>)
 8005dc8:	f000 feca 	bl	8006b60 <_init>
 8005dcc:	1ba4      	subs	r4, r4, r6
 8005dce:	10a4      	asrs	r4, r4, #2
 8005dd0:	2500      	movs	r5, #0
 8005dd2:	42a5      	cmp	r5, r4
 8005dd4:	d105      	bne.n	8005de2 <__libc_init_array+0x2e>
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ddc:	4798      	blx	r3
 8005dde:	3501      	adds	r5, #1
 8005de0:	e7ee      	b.n	8005dc0 <__libc_init_array+0xc>
 8005de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005de6:	4798      	blx	r3
 8005de8:	3501      	adds	r5, #1
 8005dea:	e7f2      	b.n	8005dd2 <__libc_init_array+0x1e>
 8005dec:	08006d64 	.word	0x08006d64
 8005df0:	08006d64 	.word	0x08006d64
 8005df4:	08006d64 	.word	0x08006d64
 8005df8:	08006d68 	.word	0x08006d68

08005dfc <__itoa>:
 8005dfc:	1e93      	subs	r3, r2, #2
 8005dfe:	2b22      	cmp	r3, #34	; 0x22
 8005e00:	b510      	push	{r4, lr}
 8005e02:	460c      	mov	r4, r1
 8005e04:	d904      	bls.n	8005e10 <__itoa+0x14>
 8005e06:	2300      	movs	r3, #0
 8005e08:	700b      	strb	r3, [r1, #0]
 8005e0a:	461c      	mov	r4, r3
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	bd10      	pop	{r4, pc}
 8005e10:	2a0a      	cmp	r2, #10
 8005e12:	d109      	bne.n	8005e28 <__itoa+0x2c>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	da07      	bge.n	8005e28 <__itoa+0x2c>
 8005e18:	232d      	movs	r3, #45	; 0x2d
 8005e1a:	700b      	strb	r3, [r1, #0]
 8005e1c:	4240      	negs	r0, r0
 8005e1e:	2101      	movs	r1, #1
 8005e20:	4421      	add	r1, r4
 8005e22:	f000 f9eb 	bl	80061fc <__utoa>
 8005e26:	e7f1      	b.n	8005e0c <__itoa+0x10>
 8005e28:	2100      	movs	r1, #0
 8005e2a:	e7f9      	b.n	8005e20 <__itoa+0x24>

08005e2c <itoa>:
 8005e2c:	f7ff bfe6 	b.w	8005dfc <__itoa>

08005e30 <malloc>:
 8005e30:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <malloc+0xc>)
 8005e32:	4601      	mov	r1, r0
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	f000 b865 	b.w	8005f04 <_malloc_r>
 8005e3a:	bf00      	nop
 8005e3c:	20000030 	.word	0x20000030

08005e40 <memcpy>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	1e43      	subs	r3, r0, #1
 8005e44:	440a      	add	r2, r1
 8005e46:	4291      	cmp	r1, r2
 8005e48:	d100      	bne.n	8005e4c <memcpy+0xc>
 8005e4a:	bd10      	pop	{r4, pc}
 8005e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e54:	e7f7      	b.n	8005e46 <memcpy+0x6>

08005e56 <memset>:
 8005e56:	4402      	add	r2, r0
 8005e58:	4603      	mov	r3, r0
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d100      	bne.n	8005e60 <memset+0xa>
 8005e5e:	4770      	bx	lr
 8005e60:	f803 1b01 	strb.w	r1, [r3], #1
 8005e64:	e7f9      	b.n	8005e5a <memset+0x4>
	...

08005e68 <_free_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d045      	beq.n	8005efc <_free_r+0x94>
 8005e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e74:	1f0c      	subs	r4, r1, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bfb8      	it	lt
 8005e7a:	18e4      	addlt	r4, r4, r3
 8005e7c:	f000 fa13 	bl	80062a6 <__malloc_lock>
 8005e80:	4a1f      	ldr	r2, [pc, #124]	; (8005f00 <_free_r+0x98>)
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	4610      	mov	r0, r2
 8005e86:	b933      	cbnz	r3, 8005e96 <_free_r+0x2e>
 8005e88:	6063      	str	r3, [r4, #4]
 8005e8a:	6014      	str	r4, [r2, #0]
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e92:	f000 ba09 	b.w	80062a8 <__malloc_unlock>
 8005e96:	42a3      	cmp	r3, r4
 8005e98:	d90c      	bls.n	8005eb4 <_free_r+0x4c>
 8005e9a:	6821      	ldr	r1, [r4, #0]
 8005e9c:	1862      	adds	r2, r4, r1
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bf04      	itt	eq
 8005ea2:	681a      	ldreq	r2, [r3, #0]
 8005ea4:	685b      	ldreq	r3, [r3, #4]
 8005ea6:	6063      	str	r3, [r4, #4]
 8005ea8:	bf04      	itt	eq
 8005eaa:	1852      	addeq	r2, r2, r1
 8005eac:	6022      	streq	r2, [r4, #0]
 8005eae:	6004      	str	r4, [r0, #0]
 8005eb0:	e7ec      	b.n	8005e8c <_free_r+0x24>
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	b10a      	cbz	r2, 8005ebc <_free_r+0x54>
 8005eb8:	42a2      	cmp	r2, r4
 8005eba:	d9fa      	bls.n	8005eb2 <_free_r+0x4a>
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	1858      	adds	r0, r3, r1
 8005ec0:	42a0      	cmp	r0, r4
 8005ec2:	d10b      	bne.n	8005edc <_free_r+0x74>
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	4401      	add	r1, r0
 8005ec8:	1858      	adds	r0, r3, r1
 8005eca:	4282      	cmp	r2, r0
 8005ecc:	6019      	str	r1, [r3, #0]
 8005ece:	d1dd      	bne.n	8005e8c <_free_r+0x24>
 8005ed0:	6810      	ldr	r0, [r2, #0]
 8005ed2:	6852      	ldr	r2, [r2, #4]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	6019      	str	r1, [r3, #0]
 8005eda:	e7d7      	b.n	8005e8c <_free_r+0x24>
 8005edc:	d902      	bls.n	8005ee4 <_free_r+0x7c>
 8005ede:	230c      	movs	r3, #12
 8005ee0:	602b      	str	r3, [r5, #0]
 8005ee2:	e7d3      	b.n	8005e8c <_free_r+0x24>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	1821      	adds	r1, r4, r0
 8005ee8:	428a      	cmp	r2, r1
 8005eea:	bf04      	itt	eq
 8005eec:	6811      	ldreq	r1, [r2, #0]
 8005eee:	6852      	ldreq	r2, [r2, #4]
 8005ef0:	6062      	str	r2, [r4, #4]
 8005ef2:	bf04      	itt	eq
 8005ef4:	1809      	addeq	r1, r1, r0
 8005ef6:	6021      	streq	r1, [r4, #0]
 8005ef8:	605c      	str	r4, [r3, #4]
 8005efa:	e7c7      	b.n	8005e8c <_free_r+0x24>
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
 8005efe:	bf00      	nop
 8005f00:	200002e4 	.word	0x200002e4

08005f04 <_malloc_r>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	1ccd      	adds	r5, r1, #3
 8005f08:	f025 0503 	bic.w	r5, r5, #3
 8005f0c:	3508      	adds	r5, #8
 8005f0e:	2d0c      	cmp	r5, #12
 8005f10:	bf38      	it	cc
 8005f12:	250c      	movcc	r5, #12
 8005f14:	2d00      	cmp	r5, #0
 8005f16:	4606      	mov	r6, r0
 8005f18:	db01      	blt.n	8005f1e <_malloc_r+0x1a>
 8005f1a:	42a9      	cmp	r1, r5
 8005f1c:	d903      	bls.n	8005f26 <_malloc_r+0x22>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	6033      	str	r3, [r6, #0]
 8005f22:	2000      	movs	r0, #0
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
 8005f26:	f000 f9be 	bl	80062a6 <__malloc_lock>
 8005f2a:	4a23      	ldr	r2, [pc, #140]	; (8005fb8 <_malloc_r+0xb4>)
 8005f2c:	6814      	ldr	r4, [r2, #0]
 8005f2e:	4621      	mov	r1, r4
 8005f30:	b991      	cbnz	r1, 8005f58 <_malloc_r+0x54>
 8005f32:	4c22      	ldr	r4, [pc, #136]	; (8005fbc <_malloc_r+0xb8>)
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	b91b      	cbnz	r3, 8005f40 <_malloc_r+0x3c>
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f000 f841 	bl	8005fc0 <_sbrk_r>
 8005f3e:	6020      	str	r0, [r4, #0]
 8005f40:	4629      	mov	r1, r5
 8005f42:	4630      	mov	r0, r6
 8005f44:	f000 f83c 	bl	8005fc0 <_sbrk_r>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d126      	bne.n	8005f9a <_malloc_r+0x96>
 8005f4c:	230c      	movs	r3, #12
 8005f4e:	6033      	str	r3, [r6, #0]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 f9a9 	bl	80062a8 <__malloc_unlock>
 8005f56:	e7e4      	b.n	8005f22 <_malloc_r+0x1e>
 8005f58:	680b      	ldr	r3, [r1, #0]
 8005f5a:	1b5b      	subs	r3, r3, r5
 8005f5c:	d41a      	bmi.n	8005f94 <_malloc_r+0x90>
 8005f5e:	2b0b      	cmp	r3, #11
 8005f60:	d90f      	bls.n	8005f82 <_malloc_r+0x7e>
 8005f62:	600b      	str	r3, [r1, #0]
 8005f64:	50cd      	str	r5, [r1, r3]
 8005f66:	18cc      	adds	r4, r1, r3
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f99d 	bl	80062a8 <__malloc_unlock>
 8005f6e:	f104 000b 	add.w	r0, r4, #11
 8005f72:	1d23      	adds	r3, r4, #4
 8005f74:	f020 0007 	bic.w	r0, r0, #7
 8005f78:	1ac3      	subs	r3, r0, r3
 8005f7a:	d01b      	beq.n	8005fb4 <_malloc_r+0xb0>
 8005f7c:	425a      	negs	r2, r3
 8005f7e:	50e2      	str	r2, [r4, r3]
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
 8005f82:	428c      	cmp	r4, r1
 8005f84:	bf0d      	iteet	eq
 8005f86:	6863      	ldreq	r3, [r4, #4]
 8005f88:	684b      	ldrne	r3, [r1, #4]
 8005f8a:	6063      	strne	r3, [r4, #4]
 8005f8c:	6013      	streq	r3, [r2, #0]
 8005f8e:	bf18      	it	ne
 8005f90:	460c      	movne	r4, r1
 8005f92:	e7e9      	b.n	8005f68 <_malloc_r+0x64>
 8005f94:	460c      	mov	r4, r1
 8005f96:	6849      	ldr	r1, [r1, #4]
 8005f98:	e7ca      	b.n	8005f30 <_malloc_r+0x2c>
 8005f9a:	1cc4      	adds	r4, r0, #3
 8005f9c:	f024 0403 	bic.w	r4, r4, #3
 8005fa0:	42a0      	cmp	r0, r4
 8005fa2:	d005      	beq.n	8005fb0 <_malloc_r+0xac>
 8005fa4:	1a21      	subs	r1, r4, r0
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f000 f80a 	bl	8005fc0 <_sbrk_r>
 8005fac:	3001      	adds	r0, #1
 8005fae:	d0cd      	beq.n	8005f4c <_malloc_r+0x48>
 8005fb0:	6025      	str	r5, [r4, #0]
 8005fb2:	e7d9      	b.n	8005f68 <_malloc_r+0x64>
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200002e4 	.word	0x200002e4
 8005fbc:	200002e8 	.word	0x200002e8

08005fc0 <_sbrk_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4c06      	ldr	r4, [pc, #24]	; (8005fdc <_sbrk_r+0x1c>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	f000 fdba 	bl	8006b44 <_sbrk>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_sbrk_r+0x1a>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_sbrk_r+0x1a>
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200005e0 	.word	0x200005e0

08005fe0 <siprintf>:
 8005fe0:	b40e      	push	{r1, r2, r3}
 8005fe2:	b500      	push	{lr}
 8005fe4:	b09c      	sub	sp, #112	; 0x70
 8005fe6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005fea:	ab1d      	add	r3, sp, #116	; 0x74
 8005fec:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005ff0:	9002      	str	r0, [sp, #8]
 8005ff2:	9006      	str	r0, [sp, #24]
 8005ff4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ff8:	480a      	ldr	r0, [pc, #40]	; (8006024 <siprintf+0x44>)
 8005ffa:	9104      	str	r1, [sp, #16]
 8005ffc:	9107      	str	r1, [sp, #28]
 8005ffe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006002:	f853 2b04 	ldr.w	r2, [r3], #4
 8006006:	f8ad 1016 	strh.w	r1, [sp, #22]
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	a902      	add	r1, sp, #8
 8006010:	f000 f9a6 	bl	8006360 <_svfiprintf_r>
 8006014:	9b02      	ldr	r3, [sp, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	b01c      	add	sp, #112	; 0x70
 800601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006020:	b003      	add	sp, #12
 8006022:	4770      	bx	lr
 8006024:	20000030 	.word	0x20000030

08006028 <strtok>:
 8006028:	4b13      	ldr	r3, [pc, #76]	; (8006078 <strtok+0x50>)
 800602a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	681d      	ldr	r5, [r3, #0]
 8006030:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	b9b4      	cbnz	r4, 8006066 <strtok+0x3e>
 8006038:	2050      	movs	r0, #80	; 0x50
 800603a:	f7ff fef9 	bl	8005e30 <malloc>
 800603e:	65a8      	str	r0, [r5, #88]	; 0x58
 8006040:	6004      	str	r4, [r0, #0]
 8006042:	6044      	str	r4, [r0, #4]
 8006044:	6084      	str	r4, [r0, #8]
 8006046:	60c4      	str	r4, [r0, #12]
 8006048:	6104      	str	r4, [r0, #16]
 800604a:	6144      	str	r4, [r0, #20]
 800604c:	6184      	str	r4, [r0, #24]
 800604e:	6284      	str	r4, [r0, #40]	; 0x28
 8006050:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006052:	6304      	str	r4, [r0, #48]	; 0x30
 8006054:	6344      	str	r4, [r0, #52]	; 0x34
 8006056:	6384      	str	r4, [r0, #56]	; 0x38
 8006058:	63c4      	str	r4, [r0, #60]	; 0x3c
 800605a:	6404      	str	r4, [r0, #64]	; 0x40
 800605c:	6444      	str	r4, [r0, #68]	; 0x44
 800605e:	6484      	str	r4, [r0, #72]	; 0x48
 8006060:	64c4      	str	r4, [r0, #76]	; 0x4c
 8006062:	7704      	strb	r4, [r0, #28]
 8006064:	6244      	str	r4, [r0, #36]	; 0x24
 8006066:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006068:	4639      	mov	r1, r7
 800606a:	4630      	mov	r0, r6
 800606c:	2301      	movs	r3, #1
 800606e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006072:	f000 b803 	b.w	800607c <__strtok_r>
 8006076:	bf00      	nop
 8006078:	20000030 	.word	0x20000030

0800607c <__strtok_r>:
 800607c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607e:	b918      	cbnz	r0, 8006088 <__strtok_r+0xc>
 8006080:	6810      	ldr	r0, [r2, #0]
 8006082:	b908      	cbnz	r0, 8006088 <__strtok_r+0xc>
 8006084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006086:	4620      	mov	r0, r4
 8006088:	4604      	mov	r4, r0
 800608a:	460f      	mov	r7, r1
 800608c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006090:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006094:	b91e      	cbnz	r6, 800609e <__strtok_r+0x22>
 8006096:	b965      	cbnz	r5, 80060b2 <__strtok_r+0x36>
 8006098:	6015      	str	r5, [r2, #0]
 800609a:	4628      	mov	r0, r5
 800609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609e:	42b5      	cmp	r5, r6
 80060a0:	d1f6      	bne.n	8006090 <__strtok_r+0x14>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1ef      	bne.n	8006086 <__strtok_r+0xa>
 80060a6:	6014      	str	r4, [r2, #0]
 80060a8:	7003      	strb	r3, [r0, #0]
 80060aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ac:	461c      	mov	r4, r3
 80060ae:	e00c      	b.n	80060ca <__strtok_r+0x4e>
 80060b0:	b915      	cbnz	r5, 80060b8 <__strtok_r+0x3c>
 80060b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060b6:	460e      	mov	r6, r1
 80060b8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80060bc:	42ab      	cmp	r3, r5
 80060be:	d1f7      	bne.n	80060b0 <__strtok_r+0x34>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f3      	beq.n	80060ac <__strtok_r+0x30>
 80060c4:	2300      	movs	r3, #0
 80060c6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80060ca:	6014      	str	r4, [r2, #0]
 80060cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060ce <_strtol_l.isra.0>:
 80060ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d2:	4680      	mov	r8, r0
 80060d4:	4689      	mov	r9, r1
 80060d6:	4692      	mov	sl, r2
 80060d8:	461f      	mov	r7, r3
 80060da:	468b      	mov	fp, r1
 80060dc:	465d      	mov	r5, fp
 80060de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060e4:	f000 f8ca 	bl	800627c <__locale_ctype_ptr_l>
 80060e8:	4420      	add	r0, r4
 80060ea:	7846      	ldrb	r6, [r0, #1]
 80060ec:	f016 0608 	ands.w	r6, r6, #8
 80060f0:	d10b      	bne.n	800610a <_strtol_l.isra.0+0x3c>
 80060f2:	2c2d      	cmp	r4, #45	; 0x2d
 80060f4:	d10b      	bne.n	800610e <_strtol_l.isra.0+0x40>
 80060f6:	782c      	ldrb	r4, [r5, #0]
 80060f8:	2601      	movs	r6, #1
 80060fa:	f10b 0502 	add.w	r5, fp, #2
 80060fe:	b167      	cbz	r7, 800611a <_strtol_l.isra.0+0x4c>
 8006100:	2f10      	cmp	r7, #16
 8006102:	d114      	bne.n	800612e <_strtol_l.isra.0+0x60>
 8006104:	2c30      	cmp	r4, #48	; 0x30
 8006106:	d00a      	beq.n	800611e <_strtol_l.isra.0+0x50>
 8006108:	e011      	b.n	800612e <_strtol_l.isra.0+0x60>
 800610a:	46ab      	mov	fp, r5
 800610c:	e7e6      	b.n	80060dc <_strtol_l.isra.0+0xe>
 800610e:	2c2b      	cmp	r4, #43	; 0x2b
 8006110:	bf04      	itt	eq
 8006112:	782c      	ldrbeq	r4, [r5, #0]
 8006114:	f10b 0502 	addeq.w	r5, fp, #2
 8006118:	e7f1      	b.n	80060fe <_strtol_l.isra.0+0x30>
 800611a:	2c30      	cmp	r4, #48	; 0x30
 800611c:	d127      	bne.n	800616e <_strtol_l.isra.0+0xa0>
 800611e:	782b      	ldrb	r3, [r5, #0]
 8006120:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006124:	2b58      	cmp	r3, #88	; 0x58
 8006126:	d14b      	bne.n	80061c0 <_strtol_l.isra.0+0xf2>
 8006128:	786c      	ldrb	r4, [r5, #1]
 800612a:	2710      	movs	r7, #16
 800612c:	3502      	adds	r5, #2
 800612e:	2e00      	cmp	r6, #0
 8006130:	bf0c      	ite	eq
 8006132:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006136:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800613a:	2200      	movs	r2, #0
 800613c:	fbb1 fef7 	udiv	lr, r1, r7
 8006140:	4610      	mov	r0, r2
 8006142:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006146:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800614a:	2b09      	cmp	r3, #9
 800614c:	d811      	bhi.n	8006172 <_strtol_l.isra.0+0xa4>
 800614e:	461c      	mov	r4, r3
 8006150:	42a7      	cmp	r7, r4
 8006152:	dd1d      	ble.n	8006190 <_strtol_l.isra.0+0xc2>
 8006154:	1c53      	adds	r3, r2, #1
 8006156:	d007      	beq.n	8006168 <_strtol_l.isra.0+0x9a>
 8006158:	4586      	cmp	lr, r0
 800615a:	d316      	bcc.n	800618a <_strtol_l.isra.0+0xbc>
 800615c:	d101      	bne.n	8006162 <_strtol_l.isra.0+0x94>
 800615e:	45a4      	cmp	ip, r4
 8006160:	db13      	blt.n	800618a <_strtol_l.isra.0+0xbc>
 8006162:	fb00 4007 	mla	r0, r0, r7, r4
 8006166:	2201      	movs	r2, #1
 8006168:	f815 4b01 	ldrb.w	r4, [r5], #1
 800616c:	e7eb      	b.n	8006146 <_strtol_l.isra.0+0x78>
 800616e:	270a      	movs	r7, #10
 8006170:	e7dd      	b.n	800612e <_strtol_l.isra.0+0x60>
 8006172:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006176:	2b19      	cmp	r3, #25
 8006178:	d801      	bhi.n	800617e <_strtol_l.isra.0+0xb0>
 800617a:	3c37      	subs	r4, #55	; 0x37
 800617c:	e7e8      	b.n	8006150 <_strtol_l.isra.0+0x82>
 800617e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006182:	2b19      	cmp	r3, #25
 8006184:	d804      	bhi.n	8006190 <_strtol_l.isra.0+0xc2>
 8006186:	3c57      	subs	r4, #87	; 0x57
 8006188:	e7e2      	b.n	8006150 <_strtol_l.isra.0+0x82>
 800618a:	f04f 32ff 	mov.w	r2, #4294967295
 800618e:	e7eb      	b.n	8006168 <_strtol_l.isra.0+0x9a>
 8006190:	1c53      	adds	r3, r2, #1
 8006192:	d108      	bne.n	80061a6 <_strtol_l.isra.0+0xd8>
 8006194:	2322      	movs	r3, #34	; 0x22
 8006196:	f8c8 3000 	str.w	r3, [r8]
 800619a:	4608      	mov	r0, r1
 800619c:	f1ba 0f00 	cmp.w	sl, #0
 80061a0:	d107      	bne.n	80061b2 <_strtol_l.isra.0+0xe4>
 80061a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a6:	b106      	cbz	r6, 80061aa <_strtol_l.isra.0+0xdc>
 80061a8:	4240      	negs	r0, r0
 80061aa:	f1ba 0f00 	cmp.w	sl, #0
 80061ae:	d00c      	beq.n	80061ca <_strtol_l.isra.0+0xfc>
 80061b0:	b122      	cbz	r2, 80061bc <_strtol_l.isra.0+0xee>
 80061b2:	3d01      	subs	r5, #1
 80061b4:	f8ca 5000 	str.w	r5, [sl]
 80061b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061bc:	464d      	mov	r5, r9
 80061be:	e7f9      	b.n	80061b4 <_strtol_l.isra.0+0xe6>
 80061c0:	2430      	movs	r4, #48	; 0x30
 80061c2:	2f00      	cmp	r7, #0
 80061c4:	d1b3      	bne.n	800612e <_strtol_l.isra.0+0x60>
 80061c6:	2708      	movs	r7, #8
 80061c8:	e7b1      	b.n	800612e <_strtol_l.isra.0+0x60>
 80061ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080061d0 <strtol>:
 80061d0:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <strtol+0x24>)
 80061d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061d4:	681c      	ldr	r4, [r3, #0]
 80061d6:	4d08      	ldr	r5, [pc, #32]	; (80061f8 <strtol+0x28>)
 80061d8:	6a23      	ldr	r3, [r4, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf08      	it	eq
 80061de:	462b      	moveq	r3, r5
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	4613      	mov	r3, r2
 80061e4:	460a      	mov	r2, r1
 80061e6:	4601      	mov	r1, r0
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff ff70 	bl	80060ce <_strtol_l.isra.0>
 80061ee:	b003      	add	sp, #12
 80061f0:	bd30      	pop	{r4, r5, pc}
 80061f2:	bf00      	nop
 80061f4:	20000030 	.word	0x20000030
 80061f8:	20000094 	.word	0x20000094

080061fc <__utoa>:
 80061fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061fe:	4c1e      	ldr	r4, [pc, #120]	; (8006278 <__utoa+0x7c>)
 8006200:	b08b      	sub	sp, #44	; 0x2c
 8006202:	4603      	mov	r3, r0
 8006204:	460f      	mov	r7, r1
 8006206:	466d      	mov	r5, sp
 8006208:	f104 0e20 	add.w	lr, r4, #32
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	6861      	ldr	r1, [r4, #4]
 8006210:	462e      	mov	r6, r5
 8006212:	c603      	stmia	r6!, {r0, r1}
 8006214:	3408      	adds	r4, #8
 8006216:	4574      	cmp	r4, lr
 8006218:	4635      	mov	r5, r6
 800621a:	d1f7      	bne.n	800620c <__utoa+0x10>
 800621c:	7921      	ldrb	r1, [r4, #4]
 800621e:	7131      	strb	r1, [r6, #4]
 8006220:	1e91      	subs	r1, r2, #2
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	6030      	str	r0, [r6, #0]
 8006226:	2922      	cmp	r1, #34	; 0x22
 8006228:	f04f 0100 	mov.w	r1, #0
 800622c:	d904      	bls.n	8006238 <__utoa+0x3c>
 800622e:	7039      	strb	r1, [r7, #0]
 8006230:	460f      	mov	r7, r1
 8006232:	4638      	mov	r0, r7
 8006234:	b00b      	add	sp, #44	; 0x2c
 8006236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006238:	1e78      	subs	r0, r7, #1
 800623a:	4606      	mov	r6, r0
 800623c:	fbb3 f5f2 	udiv	r5, r3, r2
 8006240:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006244:	fb02 3315 	mls	r3, r2, r5, r3
 8006248:	4473      	add	r3, lr
 800624a:	1c4c      	adds	r4, r1, #1
 800624c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006250:	f806 3f01 	strb.w	r3, [r6, #1]!
 8006254:	462b      	mov	r3, r5
 8006256:	b965      	cbnz	r5, 8006272 <__utoa+0x76>
 8006258:	553d      	strb	r5, [r7, r4]
 800625a:	187a      	adds	r2, r7, r1
 800625c:	1acc      	subs	r4, r1, r3
 800625e:	42a3      	cmp	r3, r4
 8006260:	dae7      	bge.n	8006232 <__utoa+0x36>
 8006262:	7844      	ldrb	r4, [r0, #1]
 8006264:	7815      	ldrb	r5, [r2, #0]
 8006266:	f800 5f01 	strb.w	r5, [r0, #1]!
 800626a:	3301      	adds	r3, #1
 800626c:	f802 4901 	strb.w	r4, [r2], #-1
 8006270:	e7f4      	b.n	800625c <__utoa+0x60>
 8006272:	4621      	mov	r1, r4
 8006274:	e7e2      	b.n	800623c <__utoa+0x40>
 8006276:	bf00      	nop
 8006278:	08006bf4 	.word	0x08006bf4

0800627c <__locale_ctype_ptr_l>:
 800627c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006280:	4770      	bx	lr

08006282 <__ascii_mbtowc>:
 8006282:	b082      	sub	sp, #8
 8006284:	b901      	cbnz	r1, 8006288 <__ascii_mbtowc+0x6>
 8006286:	a901      	add	r1, sp, #4
 8006288:	b142      	cbz	r2, 800629c <__ascii_mbtowc+0x1a>
 800628a:	b14b      	cbz	r3, 80062a0 <__ascii_mbtowc+0x1e>
 800628c:	7813      	ldrb	r3, [r2, #0]
 800628e:	600b      	str	r3, [r1, #0]
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	1c10      	adds	r0, r2, #0
 8006294:	bf18      	it	ne
 8006296:	2001      	movne	r0, #1
 8006298:	b002      	add	sp, #8
 800629a:	4770      	bx	lr
 800629c:	4610      	mov	r0, r2
 800629e:	e7fb      	b.n	8006298 <__ascii_mbtowc+0x16>
 80062a0:	f06f 0001 	mvn.w	r0, #1
 80062a4:	e7f8      	b.n	8006298 <__ascii_mbtowc+0x16>

080062a6 <__malloc_lock>:
 80062a6:	4770      	bx	lr

080062a8 <__malloc_unlock>:
 80062a8:	4770      	bx	lr

080062aa <__ssputs_r>:
 80062aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ae:	688e      	ldr	r6, [r1, #8]
 80062b0:	429e      	cmp	r6, r3
 80062b2:	4682      	mov	sl, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	4691      	mov	r9, r2
 80062b8:	4698      	mov	r8, r3
 80062ba:	d835      	bhi.n	8006328 <__ssputs_r+0x7e>
 80062bc:	898a      	ldrh	r2, [r1, #12]
 80062be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062c2:	d031      	beq.n	8006328 <__ssputs_r+0x7e>
 80062c4:	6825      	ldr	r5, [r4, #0]
 80062c6:	6909      	ldr	r1, [r1, #16]
 80062c8:	1a6f      	subs	r7, r5, r1
 80062ca:	6965      	ldr	r5, [r4, #20]
 80062cc:	2302      	movs	r3, #2
 80062ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062d2:	fb95 f5f3 	sdiv	r5, r5, r3
 80062d6:	f108 0301 	add.w	r3, r8, #1
 80062da:	443b      	add	r3, r7
 80062dc:	429d      	cmp	r5, r3
 80062de:	bf38      	it	cc
 80062e0:	461d      	movcc	r5, r3
 80062e2:	0553      	lsls	r3, r2, #21
 80062e4:	d531      	bpl.n	800634a <__ssputs_r+0xa0>
 80062e6:	4629      	mov	r1, r5
 80062e8:	f7ff fe0c 	bl	8005f04 <_malloc_r>
 80062ec:	4606      	mov	r6, r0
 80062ee:	b950      	cbnz	r0, 8006306 <__ssputs_r+0x5c>
 80062f0:	230c      	movs	r3, #12
 80062f2:	f8ca 3000 	str.w	r3, [sl]
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062fc:	81a3      	strh	r3, [r4, #12]
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006306:	463a      	mov	r2, r7
 8006308:	6921      	ldr	r1, [r4, #16]
 800630a:	f7ff fd99 	bl	8005e40 <memcpy>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	6126      	str	r6, [r4, #16]
 800631c:	6165      	str	r5, [r4, #20]
 800631e:	443e      	add	r6, r7
 8006320:	1bed      	subs	r5, r5, r7
 8006322:	6026      	str	r6, [r4, #0]
 8006324:	60a5      	str	r5, [r4, #8]
 8006326:	4646      	mov	r6, r8
 8006328:	4546      	cmp	r6, r8
 800632a:	bf28      	it	cs
 800632c:	4646      	movcs	r6, r8
 800632e:	4632      	mov	r2, r6
 8006330:	4649      	mov	r1, r9
 8006332:	6820      	ldr	r0, [r4, #0]
 8006334:	f000 faab 	bl	800688e <memmove>
 8006338:	68a3      	ldr	r3, [r4, #8]
 800633a:	1b9b      	subs	r3, r3, r6
 800633c:	60a3      	str	r3, [r4, #8]
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	441e      	add	r6, r3
 8006342:	6026      	str	r6, [r4, #0]
 8006344:	2000      	movs	r0, #0
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634a:	462a      	mov	r2, r5
 800634c:	f000 fab9 	bl	80068c2 <_realloc_r>
 8006350:	4606      	mov	r6, r0
 8006352:	2800      	cmp	r0, #0
 8006354:	d1e1      	bne.n	800631a <__ssputs_r+0x70>
 8006356:	6921      	ldr	r1, [r4, #16]
 8006358:	4650      	mov	r0, sl
 800635a:	f7ff fd85 	bl	8005e68 <_free_r>
 800635e:	e7c7      	b.n	80062f0 <__ssputs_r+0x46>

08006360 <_svfiprintf_r>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	b09d      	sub	sp, #116	; 0x74
 8006366:	4680      	mov	r8, r0
 8006368:	9303      	str	r3, [sp, #12]
 800636a:	898b      	ldrh	r3, [r1, #12]
 800636c:	061c      	lsls	r4, r3, #24
 800636e:	460d      	mov	r5, r1
 8006370:	4616      	mov	r6, r2
 8006372:	d50f      	bpl.n	8006394 <_svfiprintf_r+0x34>
 8006374:	690b      	ldr	r3, [r1, #16]
 8006376:	b96b      	cbnz	r3, 8006394 <_svfiprintf_r+0x34>
 8006378:	2140      	movs	r1, #64	; 0x40
 800637a:	f7ff fdc3 	bl	8005f04 <_malloc_r>
 800637e:	6028      	str	r0, [r5, #0]
 8006380:	6128      	str	r0, [r5, #16]
 8006382:	b928      	cbnz	r0, 8006390 <_svfiprintf_r+0x30>
 8006384:	230c      	movs	r3, #12
 8006386:	f8c8 3000 	str.w	r3, [r8]
 800638a:	f04f 30ff 	mov.w	r0, #4294967295
 800638e:	e0c5      	b.n	800651c <_svfiprintf_r+0x1bc>
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	616b      	str	r3, [r5, #20]
 8006394:	2300      	movs	r3, #0
 8006396:	9309      	str	r3, [sp, #36]	; 0x24
 8006398:	2320      	movs	r3, #32
 800639a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800639e:	2330      	movs	r3, #48	; 0x30
 80063a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063a4:	f04f 0b01 	mov.w	fp, #1
 80063a8:	4637      	mov	r7, r6
 80063aa:	463c      	mov	r4, r7
 80063ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d13c      	bne.n	800642e <_svfiprintf_r+0xce>
 80063b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80063b8:	d00b      	beq.n	80063d2 <_svfiprintf_r+0x72>
 80063ba:	4653      	mov	r3, sl
 80063bc:	4632      	mov	r2, r6
 80063be:	4629      	mov	r1, r5
 80063c0:	4640      	mov	r0, r8
 80063c2:	f7ff ff72 	bl	80062aa <__ssputs_r>
 80063c6:	3001      	adds	r0, #1
 80063c8:	f000 80a3 	beq.w	8006512 <_svfiprintf_r+0x1b2>
 80063cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ce:	4453      	add	r3, sl
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	783b      	ldrb	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 809c 	beq.w	8006512 <_svfiprintf_r+0x1b2>
 80063da:	2300      	movs	r3, #0
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	9307      	str	r3, [sp, #28]
 80063e4:	9205      	str	r2, [sp, #20]
 80063e6:	9306      	str	r3, [sp, #24]
 80063e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ec:	931a      	str	r3, [sp, #104]	; 0x68
 80063ee:	2205      	movs	r2, #5
 80063f0:	7821      	ldrb	r1, [r4, #0]
 80063f2:	4850      	ldr	r0, [pc, #320]	; (8006534 <_svfiprintf_r+0x1d4>)
 80063f4:	f7f9 fef4 	bl	80001e0 <memchr>
 80063f8:	1c67      	adds	r7, r4, #1
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	b9d8      	cbnz	r0, 8006436 <_svfiprintf_r+0xd6>
 80063fe:	06d9      	lsls	r1, r3, #27
 8006400:	bf44      	itt	mi
 8006402:	2220      	movmi	r2, #32
 8006404:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006408:	071a      	lsls	r2, r3, #28
 800640a:	bf44      	itt	mi
 800640c:	222b      	movmi	r2, #43	; 0x2b
 800640e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006412:	7822      	ldrb	r2, [r4, #0]
 8006414:	2a2a      	cmp	r2, #42	; 0x2a
 8006416:	d016      	beq.n	8006446 <_svfiprintf_r+0xe6>
 8006418:	9a07      	ldr	r2, [sp, #28]
 800641a:	2100      	movs	r1, #0
 800641c:	200a      	movs	r0, #10
 800641e:	4627      	mov	r7, r4
 8006420:	3401      	adds	r4, #1
 8006422:	783b      	ldrb	r3, [r7, #0]
 8006424:	3b30      	subs	r3, #48	; 0x30
 8006426:	2b09      	cmp	r3, #9
 8006428:	d951      	bls.n	80064ce <_svfiprintf_r+0x16e>
 800642a:	b1c9      	cbz	r1, 8006460 <_svfiprintf_r+0x100>
 800642c:	e011      	b.n	8006452 <_svfiprintf_r+0xf2>
 800642e:	2b25      	cmp	r3, #37	; 0x25
 8006430:	d0c0      	beq.n	80063b4 <_svfiprintf_r+0x54>
 8006432:	4627      	mov	r7, r4
 8006434:	e7b9      	b.n	80063aa <_svfiprintf_r+0x4a>
 8006436:	4a3f      	ldr	r2, [pc, #252]	; (8006534 <_svfiprintf_r+0x1d4>)
 8006438:	1a80      	subs	r0, r0, r2
 800643a:	fa0b f000 	lsl.w	r0, fp, r0
 800643e:	4318      	orrs	r0, r3
 8006440:	9004      	str	r0, [sp, #16]
 8006442:	463c      	mov	r4, r7
 8006444:	e7d3      	b.n	80063ee <_svfiprintf_r+0x8e>
 8006446:	9a03      	ldr	r2, [sp, #12]
 8006448:	1d11      	adds	r1, r2, #4
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	9103      	str	r1, [sp, #12]
 800644e:	2a00      	cmp	r2, #0
 8006450:	db01      	blt.n	8006456 <_svfiprintf_r+0xf6>
 8006452:	9207      	str	r2, [sp, #28]
 8006454:	e004      	b.n	8006460 <_svfiprintf_r+0x100>
 8006456:	4252      	negs	r2, r2
 8006458:	f043 0302 	orr.w	r3, r3, #2
 800645c:	9207      	str	r2, [sp, #28]
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	783b      	ldrb	r3, [r7, #0]
 8006462:	2b2e      	cmp	r3, #46	; 0x2e
 8006464:	d10e      	bne.n	8006484 <_svfiprintf_r+0x124>
 8006466:	787b      	ldrb	r3, [r7, #1]
 8006468:	2b2a      	cmp	r3, #42	; 0x2a
 800646a:	f107 0101 	add.w	r1, r7, #1
 800646e:	d132      	bne.n	80064d6 <_svfiprintf_r+0x176>
 8006470:	9b03      	ldr	r3, [sp, #12]
 8006472:	1d1a      	adds	r2, r3, #4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	9203      	str	r2, [sp, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	bfb8      	it	lt
 800647c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006480:	3702      	adds	r7, #2
 8006482:	9305      	str	r3, [sp, #20]
 8006484:	4c2c      	ldr	r4, [pc, #176]	; (8006538 <_svfiprintf_r+0x1d8>)
 8006486:	7839      	ldrb	r1, [r7, #0]
 8006488:	2203      	movs	r2, #3
 800648a:	4620      	mov	r0, r4
 800648c:	f7f9 fea8 	bl	80001e0 <memchr>
 8006490:	b138      	cbz	r0, 80064a2 <_svfiprintf_r+0x142>
 8006492:	2340      	movs	r3, #64	; 0x40
 8006494:	1b00      	subs	r0, r0, r4
 8006496:	fa03 f000 	lsl.w	r0, r3, r0
 800649a:	9b04      	ldr	r3, [sp, #16]
 800649c:	4303      	orrs	r3, r0
 800649e:	9304      	str	r3, [sp, #16]
 80064a0:	3701      	adds	r7, #1
 80064a2:	7839      	ldrb	r1, [r7, #0]
 80064a4:	4825      	ldr	r0, [pc, #148]	; (800653c <_svfiprintf_r+0x1dc>)
 80064a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064aa:	2206      	movs	r2, #6
 80064ac:	1c7e      	adds	r6, r7, #1
 80064ae:	f7f9 fe97 	bl	80001e0 <memchr>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d035      	beq.n	8006522 <_svfiprintf_r+0x1c2>
 80064b6:	4b22      	ldr	r3, [pc, #136]	; (8006540 <_svfiprintf_r+0x1e0>)
 80064b8:	b9fb      	cbnz	r3, 80064fa <_svfiprintf_r+0x19a>
 80064ba:	9b03      	ldr	r3, [sp, #12]
 80064bc:	3307      	adds	r3, #7
 80064be:	f023 0307 	bic.w	r3, r3, #7
 80064c2:	3308      	adds	r3, #8
 80064c4:	9303      	str	r3, [sp, #12]
 80064c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c8:	444b      	add	r3, r9
 80064ca:	9309      	str	r3, [sp, #36]	; 0x24
 80064cc:	e76c      	b.n	80063a8 <_svfiprintf_r+0x48>
 80064ce:	fb00 3202 	mla	r2, r0, r2, r3
 80064d2:	2101      	movs	r1, #1
 80064d4:	e7a3      	b.n	800641e <_svfiprintf_r+0xbe>
 80064d6:	2300      	movs	r3, #0
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	4618      	mov	r0, r3
 80064dc:	240a      	movs	r4, #10
 80064de:	460f      	mov	r7, r1
 80064e0:	3101      	adds	r1, #1
 80064e2:	783a      	ldrb	r2, [r7, #0]
 80064e4:	3a30      	subs	r2, #48	; 0x30
 80064e6:	2a09      	cmp	r2, #9
 80064e8:	d903      	bls.n	80064f2 <_svfiprintf_r+0x192>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0ca      	beq.n	8006484 <_svfiprintf_r+0x124>
 80064ee:	9005      	str	r0, [sp, #20]
 80064f0:	e7c8      	b.n	8006484 <_svfiprintf_r+0x124>
 80064f2:	fb04 2000 	mla	r0, r4, r0, r2
 80064f6:	2301      	movs	r3, #1
 80064f8:	e7f1      	b.n	80064de <_svfiprintf_r+0x17e>
 80064fa:	ab03      	add	r3, sp, #12
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	462a      	mov	r2, r5
 8006500:	4b10      	ldr	r3, [pc, #64]	; (8006544 <_svfiprintf_r+0x1e4>)
 8006502:	a904      	add	r1, sp, #16
 8006504:	4640      	mov	r0, r8
 8006506:	f3af 8000 	nop.w
 800650a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800650e:	4681      	mov	r9, r0
 8006510:	d1d9      	bne.n	80064c6 <_svfiprintf_r+0x166>
 8006512:	89ab      	ldrh	r3, [r5, #12]
 8006514:	065b      	lsls	r3, r3, #25
 8006516:	f53f af38 	bmi.w	800638a <_svfiprintf_r+0x2a>
 800651a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800651c:	b01d      	add	sp, #116	; 0x74
 800651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006522:	ab03      	add	r3, sp, #12
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	462a      	mov	r2, r5
 8006528:	4b06      	ldr	r3, [pc, #24]	; (8006544 <_svfiprintf_r+0x1e4>)
 800652a:	a904      	add	r1, sp, #16
 800652c:	4640      	mov	r0, r8
 800652e:	f000 f881 	bl	8006634 <_printf_i>
 8006532:	e7ea      	b.n	800650a <_svfiprintf_r+0x1aa>
 8006534:	08006c23 	.word	0x08006c23
 8006538:	08006c29 	.word	0x08006c29
 800653c:	08006c2d 	.word	0x08006c2d
 8006540:	00000000 	.word	0x00000000
 8006544:	080062ab 	.word	0x080062ab

08006548 <_printf_common>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	4691      	mov	r9, r2
 800654e:	461f      	mov	r7, r3
 8006550:	688a      	ldr	r2, [r1, #8]
 8006552:	690b      	ldr	r3, [r1, #16]
 8006554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006558:	4293      	cmp	r3, r2
 800655a:	bfb8      	it	lt
 800655c:	4613      	movlt	r3, r2
 800655e:	f8c9 3000 	str.w	r3, [r9]
 8006562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006566:	4606      	mov	r6, r0
 8006568:	460c      	mov	r4, r1
 800656a:	b112      	cbz	r2, 8006572 <_printf_common+0x2a>
 800656c:	3301      	adds	r3, #1
 800656e:	f8c9 3000 	str.w	r3, [r9]
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	0699      	lsls	r1, r3, #26
 8006576:	bf42      	ittt	mi
 8006578:	f8d9 3000 	ldrmi.w	r3, [r9]
 800657c:	3302      	addmi	r3, #2
 800657e:	f8c9 3000 	strmi.w	r3, [r9]
 8006582:	6825      	ldr	r5, [r4, #0]
 8006584:	f015 0506 	ands.w	r5, r5, #6
 8006588:	d107      	bne.n	800659a <_printf_common+0x52>
 800658a:	f104 0a19 	add.w	sl, r4, #25
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	f8d9 2000 	ldr.w	r2, [r9]
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	429d      	cmp	r5, r3
 8006598:	db29      	blt.n	80065ee <_printf_common+0xa6>
 800659a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	3300      	adds	r3, #0
 80065a2:	bf18      	it	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	0692      	lsls	r2, r2, #26
 80065a8:	d42e      	bmi.n	8006608 <_printf_common+0xc0>
 80065aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ae:	4639      	mov	r1, r7
 80065b0:	4630      	mov	r0, r6
 80065b2:	47c0      	blx	r8
 80065b4:	3001      	adds	r0, #1
 80065b6:	d021      	beq.n	80065fc <_printf_common+0xb4>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	68e5      	ldr	r5, [r4, #12]
 80065bc:	f8d9 2000 	ldr.w	r2, [r9]
 80065c0:	f003 0306 	and.w	r3, r3, #6
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	bf08      	it	eq
 80065c8:	1aad      	subeq	r5, r5, r2
 80065ca:	68a3      	ldr	r3, [r4, #8]
 80065cc:	6922      	ldr	r2, [r4, #16]
 80065ce:	bf0c      	ite	eq
 80065d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d4:	2500      	movne	r5, #0
 80065d6:	4293      	cmp	r3, r2
 80065d8:	bfc4      	itt	gt
 80065da:	1a9b      	subgt	r3, r3, r2
 80065dc:	18ed      	addgt	r5, r5, r3
 80065de:	f04f 0900 	mov.w	r9, #0
 80065e2:	341a      	adds	r4, #26
 80065e4:	454d      	cmp	r5, r9
 80065e6:	d11b      	bne.n	8006620 <_printf_common+0xd8>
 80065e8:	2000      	movs	r0, #0
 80065ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ee:	2301      	movs	r3, #1
 80065f0:	4652      	mov	r2, sl
 80065f2:	4639      	mov	r1, r7
 80065f4:	4630      	mov	r0, r6
 80065f6:	47c0      	blx	r8
 80065f8:	3001      	adds	r0, #1
 80065fa:	d103      	bne.n	8006604 <_printf_common+0xbc>
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006604:	3501      	adds	r5, #1
 8006606:	e7c2      	b.n	800658e <_printf_common+0x46>
 8006608:	18e1      	adds	r1, r4, r3
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	2030      	movs	r0, #48	; 0x30
 800660e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006612:	4422      	add	r2, r4
 8006614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800661c:	3302      	adds	r3, #2
 800661e:	e7c4      	b.n	80065aa <_printf_common+0x62>
 8006620:	2301      	movs	r3, #1
 8006622:	4622      	mov	r2, r4
 8006624:	4639      	mov	r1, r7
 8006626:	4630      	mov	r0, r6
 8006628:	47c0      	blx	r8
 800662a:	3001      	adds	r0, #1
 800662c:	d0e6      	beq.n	80065fc <_printf_common+0xb4>
 800662e:	f109 0901 	add.w	r9, r9, #1
 8006632:	e7d7      	b.n	80065e4 <_printf_common+0x9c>

08006634 <_printf_i>:
 8006634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006638:	4617      	mov	r7, r2
 800663a:	7e0a      	ldrb	r2, [r1, #24]
 800663c:	b085      	sub	sp, #20
 800663e:	2a6e      	cmp	r2, #110	; 0x6e
 8006640:	4698      	mov	r8, r3
 8006642:	4606      	mov	r6, r0
 8006644:	460c      	mov	r4, r1
 8006646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006648:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800664c:	f000 80bc 	beq.w	80067c8 <_printf_i+0x194>
 8006650:	d81a      	bhi.n	8006688 <_printf_i+0x54>
 8006652:	2a63      	cmp	r2, #99	; 0x63
 8006654:	d02e      	beq.n	80066b4 <_printf_i+0x80>
 8006656:	d80a      	bhi.n	800666e <_printf_i+0x3a>
 8006658:	2a00      	cmp	r2, #0
 800665a:	f000 80c8 	beq.w	80067ee <_printf_i+0x1ba>
 800665e:	2a58      	cmp	r2, #88	; 0x58
 8006660:	f000 808a 	beq.w	8006778 <_printf_i+0x144>
 8006664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006668:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800666c:	e02a      	b.n	80066c4 <_printf_i+0x90>
 800666e:	2a64      	cmp	r2, #100	; 0x64
 8006670:	d001      	beq.n	8006676 <_printf_i+0x42>
 8006672:	2a69      	cmp	r2, #105	; 0x69
 8006674:	d1f6      	bne.n	8006664 <_printf_i+0x30>
 8006676:	6821      	ldr	r1, [r4, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800667e:	d023      	beq.n	80066c8 <_printf_i+0x94>
 8006680:	1d11      	adds	r1, r2, #4
 8006682:	6019      	str	r1, [r3, #0]
 8006684:	6813      	ldr	r3, [r2, #0]
 8006686:	e027      	b.n	80066d8 <_printf_i+0xa4>
 8006688:	2a73      	cmp	r2, #115	; 0x73
 800668a:	f000 80b4 	beq.w	80067f6 <_printf_i+0x1c2>
 800668e:	d808      	bhi.n	80066a2 <_printf_i+0x6e>
 8006690:	2a6f      	cmp	r2, #111	; 0x6f
 8006692:	d02a      	beq.n	80066ea <_printf_i+0xb6>
 8006694:	2a70      	cmp	r2, #112	; 0x70
 8006696:	d1e5      	bne.n	8006664 <_printf_i+0x30>
 8006698:	680a      	ldr	r2, [r1, #0]
 800669a:	f042 0220 	orr.w	r2, r2, #32
 800669e:	600a      	str	r2, [r1, #0]
 80066a0:	e003      	b.n	80066aa <_printf_i+0x76>
 80066a2:	2a75      	cmp	r2, #117	; 0x75
 80066a4:	d021      	beq.n	80066ea <_printf_i+0xb6>
 80066a6:	2a78      	cmp	r2, #120	; 0x78
 80066a8:	d1dc      	bne.n	8006664 <_printf_i+0x30>
 80066aa:	2278      	movs	r2, #120	; 0x78
 80066ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80066b0:	496e      	ldr	r1, [pc, #440]	; (800686c <_printf_i+0x238>)
 80066b2:	e064      	b.n	800677e <_printf_i+0x14a>
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80066ba:	1d11      	adds	r1, r2, #4
 80066bc:	6019      	str	r1, [r3, #0]
 80066be:	6813      	ldr	r3, [r2, #0]
 80066c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0a3      	b.n	8006810 <_printf_i+0x1dc>
 80066c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80066cc:	f102 0104 	add.w	r1, r2, #4
 80066d0:	6019      	str	r1, [r3, #0]
 80066d2:	d0d7      	beq.n	8006684 <_printf_i+0x50>
 80066d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da03      	bge.n	80066e4 <_printf_i+0xb0>
 80066dc:	222d      	movs	r2, #45	; 0x2d
 80066de:	425b      	negs	r3, r3
 80066e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066e4:	4962      	ldr	r1, [pc, #392]	; (8006870 <_printf_i+0x23c>)
 80066e6:	220a      	movs	r2, #10
 80066e8:	e017      	b.n	800671a <_printf_i+0xe6>
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80066f2:	d003      	beq.n	80066fc <_printf_i+0xc8>
 80066f4:	1d08      	adds	r0, r1, #4
 80066f6:	6018      	str	r0, [r3, #0]
 80066f8:	680b      	ldr	r3, [r1, #0]
 80066fa:	e006      	b.n	800670a <_printf_i+0xd6>
 80066fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006700:	f101 0004 	add.w	r0, r1, #4
 8006704:	6018      	str	r0, [r3, #0]
 8006706:	d0f7      	beq.n	80066f8 <_printf_i+0xc4>
 8006708:	880b      	ldrh	r3, [r1, #0]
 800670a:	4959      	ldr	r1, [pc, #356]	; (8006870 <_printf_i+0x23c>)
 800670c:	2a6f      	cmp	r2, #111	; 0x6f
 800670e:	bf14      	ite	ne
 8006710:	220a      	movne	r2, #10
 8006712:	2208      	moveq	r2, #8
 8006714:	2000      	movs	r0, #0
 8006716:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800671a:	6865      	ldr	r5, [r4, #4]
 800671c:	60a5      	str	r5, [r4, #8]
 800671e:	2d00      	cmp	r5, #0
 8006720:	f2c0 809c 	blt.w	800685c <_printf_i+0x228>
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	f020 0004 	bic.w	r0, r0, #4
 800672a:	6020      	str	r0, [r4, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d13f      	bne.n	80067b0 <_printf_i+0x17c>
 8006730:	2d00      	cmp	r5, #0
 8006732:	f040 8095 	bne.w	8006860 <_printf_i+0x22c>
 8006736:	4675      	mov	r5, lr
 8006738:	2a08      	cmp	r2, #8
 800673a:	d10b      	bne.n	8006754 <_printf_i+0x120>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	07da      	lsls	r2, r3, #31
 8006740:	d508      	bpl.n	8006754 <_printf_i+0x120>
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	6862      	ldr	r2, [r4, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	bfde      	ittt	le
 800674a:	2330      	movle	r3, #48	; 0x30
 800674c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006750:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006754:	ebae 0305 	sub.w	r3, lr, r5
 8006758:	6123      	str	r3, [r4, #16]
 800675a:	f8cd 8000 	str.w	r8, [sp]
 800675e:	463b      	mov	r3, r7
 8006760:	aa03      	add	r2, sp, #12
 8006762:	4621      	mov	r1, r4
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff feef 	bl	8006548 <_printf_common>
 800676a:	3001      	adds	r0, #1
 800676c:	d155      	bne.n	800681a <_printf_i+0x1e6>
 800676e:	f04f 30ff 	mov.w	r0, #4294967295
 8006772:	b005      	add	sp, #20
 8006774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006778:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800677c:	493c      	ldr	r1, [pc, #240]	; (8006870 <_printf_i+0x23c>)
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006786:	f100 0504 	add.w	r5, r0, #4
 800678a:	601d      	str	r5, [r3, #0]
 800678c:	d001      	beq.n	8006792 <_printf_i+0x15e>
 800678e:	6803      	ldr	r3, [r0, #0]
 8006790:	e002      	b.n	8006798 <_printf_i+0x164>
 8006792:	0655      	lsls	r5, r2, #25
 8006794:	d5fb      	bpl.n	800678e <_printf_i+0x15a>
 8006796:	8803      	ldrh	r3, [r0, #0]
 8006798:	07d0      	lsls	r0, r2, #31
 800679a:	bf44      	itt	mi
 800679c:	f042 0220 	orrmi.w	r2, r2, #32
 80067a0:	6022      	strmi	r2, [r4, #0]
 80067a2:	b91b      	cbnz	r3, 80067ac <_printf_i+0x178>
 80067a4:	6822      	ldr	r2, [r4, #0]
 80067a6:	f022 0220 	bic.w	r2, r2, #32
 80067aa:	6022      	str	r2, [r4, #0]
 80067ac:	2210      	movs	r2, #16
 80067ae:	e7b1      	b.n	8006714 <_printf_i+0xe0>
 80067b0:	4675      	mov	r5, lr
 80067b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80067b6:	fb02 3310 	mls	r3, r2, r0, r3
 80067ba:	5ccb      	ldrb	r3, [r1, r3]
 80067bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80067c0:	4603      	mov	r3, r0
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d1f5      	bne.n	80067b2 <_printf_i+0x17e>
 80067c6:	e7b7      	b.n	8006738 <_printf_i+0x104>
 80067c8:	6808      	ldr	r0, [r1, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	6949      	ldr	r1, [r1, #20]
 80067ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80067d2:	d004      	beq.n	80067de <_printf_i+0x1aa>
 80067d4:	1d10      	adds	r0, r2, #4
 80067d6:	6018      	str	r0, [r3, #0]
 80067d8:	6813      	ldr	r3, [r2, #0]
 80067da:	6019      	str	r1, [r3, #0]
 80067dc:	e007      	b.n	80067ee <_printf_i+0x1ba>
 80067de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067e2:	f102 0004 	add.w	r0, r2, #4
 80067e6:	6018      	str	r0, [r3, #0]
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	d0f6      	beq.n	80067da <_printf_i+0x1a6>
 80067ec:	8019      	strh	r1, [r3, #0]
 80067ee:	2300      	movs	r3, #0
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	4675      	mov	r5, lr
 80067f4:	e7b1      	b.n	800675a <_printf_i+0x126>
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	1d11      	adds	r1, r2, #4
 80067fa:	6019      	str	r1, [r3, #0]
 80067fc:	6815      	ldr	r5, [r2, #0]
 80067fe:	6862      	ldr	r2, [r4, #4]
 8006800:	2100      	movs	r1, #0
 8006802:	4628      	mov	r0, r5
 8006804:	f7f9 fcec 	bl	80001e0 <memchr>
 8006808:	b108      	cbz	r0, 800680e <_printf_i+0x1da>
 800680a:	1b40      	subs	r0, r0, r5
 800680c:	6060      	str	r0, [r4, #4]
 800680e:	6863      	ldr	r3, [r4, #4]
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	2300      	movs	r3, #0
 8006814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006818:	e79f      	b.n	800675a <_printf_i+0x126>
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	462a      	mov	r2, r5
 800681e:	4639      	mov	r1, r7
 8006820:	4630      	mov	r0, r6
 8006822:	47c0      	blx	r8
 8006824:	3001      	adds	r0, #1
 8006826:	d0a2      	beq.n	800676e <_printf_i+0x13a>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	079b      	lsls	r3, r3, #30
 800682c:	d507      	bpl.n	800683e <_printf_i+0x20a>
 800682e:	2500      	movs	r5, #0
 8006830:	f104 0919 	add.w	r9, r4, #25
 8006834:	68e3      	ldr	r3, [r4, #12]
 8006836:	9a03      	ldr	r2, [sp, #12]
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	429d      	cmp	r5, r3
 800683c:	db05      	blt.n	800684a <_printf_i+0x216>
 800683e:	68e0      	ldr	r0, [r4, #12]
 8006840:	9b03      	ldr	r3, [sp, #12]
 8006842:	4298      	cmp	r0, r3
 8006844:	bfb8      	it	lt
 8006846:	4618      	movlt	r0, r3
 8006848:	e793      	b.n	8006772 <_printf_i+0x13e>
 800684a:	2301      	movs	r3, #1
 800684c:	464a      	mov	r2, r9
 800684e:	4639      	mov	r1, r7
 8006850:	4630      	mov	r0, r6
 8006852:	47c0      	blx	r8
 8006854:	3001      	adds	r0, #1
 8006856:	d08a      	beq.n	800676e <_printf_i+0x13a>
 8006858:	3501      	adds	r5, #1
 800685a:	e7eb      	b.n	8006834 <_printf_i+0x200>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1a7      	bne.n	80067b0 <_printf_i+0x17c>
 8006860:	780b      	ldrb	r3, [r1, #0]
 8006862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006866:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800686a:	e765      	b.n	8006738 <_printf_i+0x104>
 800686c:	08006c45 	.word	0x08006c45
 8006870:	08006c34 	.word	0x08006c34

08006874 <__ascii_wctomb>:
 8006874:	b149      	cbz	r1, 800688a <__ascii_wctomb+0x16>
 8006876:	2aff      	cmp	r2, #255	; 0xff
 8006878:	bf85      	ittet	hi
 800687a:	238a      	movhi	r3, #138	; 0x8a
 800687c:	6003      	strhi	r3, [r0, #0]
 800687e:	700a      	strbls	r2, [r1, #0]
 8006880:	f04f 30ff 	movhi.w	r0, #4294967295
 8006884:	bf98      	it	ls
 8006886:	2001      	movls	r0, #1
 8006888:	4770      	bx	lr
 800688a:	4608      	mov	r0, r1
 800688c:	4770      	bx	lr

0800688e <memmove>:
 800688e:	4288      	cmp	r0, r1
 8006890:	b510      	push	{r4, lr}
 8006892:	eb01 0302 	add.w	r3, r1, r2
 8006896:	d803      	bhi.n	80068a0 <memmove+0x12>
 8006898:	1e42      	subs	r2, r0, #1
 800689a:	4299      	cmp	r1, r3
 800689c:	d10c      	bne.n	80068b8 <memmove+0x2a>
 800689e:	bd10      	pop	{r4, pc}
 80068a0:	4298      	cmp	r0, r3
 80068a2:	d2f9      	bcs.n	8006898 <memmove+0xa>
 80068a4:	1881      	adds	r1, r0, r2
 80068a6:	1ad2      	subs	r2, r2, r3
 80068a8:	42d3      	cmn	r3, r2
 80068aa:	d100      	bne.n	80068ae <memmove+0x20>
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80068b6:	e7f7      	b.n	80068a8 <memmove+0x1a>
 80068b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80068c0:	e7eb      	b.n	800689a <memmove+0xc>

080068c2 <_realloc_r>:
 80068c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c4:	4607      	mov	r7, r0
 80068c6:	4614      	mov	r4, r2
 80068c8:	460e      	mov	r6, r1
 80068ca:	b921      	cbnz	r1, 80068d6 <_realloc_r+0x14>
 80068cc:	4611      	mov	r1, r2
 80068ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068d2:	f7ff bb17 	b.w	8005f04 <_malloc_r>
 80068d6:	b922      	cbnz	r2, 80068e2 <_realloc_r+0x20>
 80068d8:	f7ff fac6 	bl	8005e68 <_free_r>
 80068dc:	4625      	mov	r5, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e2:	f000 f814 	bl	800690e <_malloc_usable_size_r>
 80068e6:	4284      	cmp	r4, r0
 80068e8:	d90f      	bls.n	800690a <_realloc_r+0x48>
 80068ea:	4621      	mov	r1, r4
 80068ec:	4638      	mov	r0, r7
 80068ee:	f7ff fb09 	bl	8005f04 <_malloc_r>
 80068f2:	4605      	mov	r5, r0
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d0f2      	beq.n	80068de <_realloc_r+0x1c>
 80068f8:	4631      	mov	r1, r6
 80068fa:	4622      	mov	r2, r4
 80068fc:	f7ff faa0 	bl	8005e40 <memcpy>
 8006900:	4631      	mov	r1, r6
 8006902:	4638      	mov	r0, r7
 8006904:	f7ff fab0 	bl	8005e68 <_free_r>
 8006908:	e7e9      	b.n	80068de <_realloc_r+0x1c>
 800690a:	4635      	mov	r5, r6
 800690c:	e7e7      	b.n	80068de <_realloc_r+0x1c>

0800690e <_malloc_usable_size_r>:
 800690e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006912:	2800      	cmp	r0, #0
 8006914:	f1a0 0004 	sub.w	r0, r0, #4
 8006918:	bfbc      	itt	lt
 800691a:	580b      	ldrlt	r3, [r1, r0]
 800691c:	18c0      	addlt	r0, r0, r3
 800691e:	4770      	bx	lr

08006920 <sqrt>:
 8006920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006924:	ed2d 8b02 	vpush	{d8}
 8006928:	b08b      	sub	sp, #44	; 0x2c
 800692a:	ec55 4b10 	vmov	r4, r5, d0
 800692e:	f000 f851 	bl	80069d4 <__ieee754_sqrt>
 8006932:	4b26      	ldr	r3, [pc, #152]	; (80069cc <sqrt+0xac>)
 8006934:	eeb0 8a40 	vmov.f32	s16, s0
 8006938:	eef0 8a60 	vmov.f32	s17, s1
 800693c:	f993 6000 	ldrsb.w	r6, [r3]
 8006940:	1c73      	adds	r3, r6, #1
 8006942:	d02a      	beq.n	800699a <sqrt+0x7a>
 8006944:	4622      	mov	r2, r4
 8006946:	462b      	mov	r3, r5
 8006948:	4620      	mov	r0, r4
 800694a:	4629      	mov	r1, r5
 800694c:	f7fa f8ea 	bl	8000b24 <__aeabi_dcmpun>
 8006950:	4607      	mov	r7, r0
 8006952:	bb10      	cbnz	r0, 800699a <sqrt+0x7a>
 8006954:	f04f 0800 	mov.w	r8, #0
 8006958:	f04f 0900 	mov.w	r9, #0
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	4620      	mov	r0, r4
 8006962:	4629      	mov	r1, r5
 8006964:	f7fa f8b6 	bl	8000ad4 <__aeabi_dcmplt>
 8006968:	b1b8      	cbz	r0, 800699a <sqrt+0x7a>
 800696a:	2301      	movs	r3, #1
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <sqrt+0xb0>)
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	9708      	str	r7, [sp, #32]
 8006974:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006978:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800697c:	b9b6      	cbnz	r6, 80069ac <sqrt+0x8c>
 800697e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006982:	4668      	mov	r0, sp
 8006984:	f000 f8d6 	bl	8006b34 <matherr>
 8006988:	b1d0      	cbz	r0, 80069c0 <sqrt+0xa0>
 800698a:	9b08      	ldr	r3, [sp, #32]
 800698c:	b11b      	cbz	r3, 8006996 <sqrt+0x76>
 800698e:	f000 f8d3 	bl	8006b38 <__errno>
 8006992:	9b08      	ldr	r3, [sp, #32]
 8006994:	6003      	str	r3, [r0, #0]
 8006996:	ed9d 8b06 	vldr	d8, [sp, #24]
 800699a:	eeb0 0a48 	vmov.f32	s0, s16
 800699e:	eef0 0a68 	vmov.f32	s1, s17
 80069a2:	b00b      	add	sp, #44	; 0x2c
 80069a4:	ecbd 8b02 	vpop	{d8}
 80069a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069ac:	4642      	mov	r2, r8
 80069ae:	464b      	mov	r3, r9
 80069b0:	4640      	mov	r0, r8
 80069b2:	4649      	mov	r1, r9
 80069b4:	f7f9 ff46 	bl	8000844 <__aeabi_ddiv>
 80069b8:	2e02      	cmp	r6, #2
 80069ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069be:	d1e0      	bne.n	8006982 <sqrt+0x62>
 80069c0:	f000 f8ba 	bl	8006b38 <__errno>
 80069c4:	2321      	movs	r3, #33	; 0x21
 80069c6:	6003      	str	r3, [r0, #0]
 80069c8:	e7df      	b.n	800698a <sqrt+0x6a>
 80069ca:	bf00      	nop
 80069cc:	20000200 	.word	0x20000200
 80069d0:	08006d57 	.word	0x08006d57

080069d4 <__ieee754_sqrt>:
 80069d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d8:	ec55 4b10 	vmov	r4, r5, d0
 80069dc:	4e54      	ldr	r6, [pc, #336]	; (8006b30 <__ieee754_sqrt+0x15c>)
 80069de:	43ae      	bics	r6, r5
 80069e0:	ee10 0a10 	vmov	r0, s0
 80069e4:	462b      	mov	r3, r5
 80069e6:	462a      	mov	r2, r5
 80069e8:	4621      	mov	r1, r4
 80069ea:	d113      	bne.n	8006a14 <__ieee754_sqrt+0x40>
 80069ec:	ee10 2a10 	vmov	r2, s0
 80069f0:	462b      	mov	r3, r5
 80069f2:	ee10 0a10 	vmov	r0, s0
 80069f6:	4629      	mov	r1, r5
 80069f8:	f7f9 fdfa 	bl	80005f0 <__aeabi_dmul>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4620      	mov	r0, r4
 8006a02:	4629      	mov	r1, r5
 8006a04:	f7f9 fc42 	bl	800028c <__adddf3>
 8006a08:	4604      	mov	r4, r0
 8006a0a:	460d      	mov	r5, r1
 8006a0c:	ec45 4b10 	vmov	d0, r4, r5
 8006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	dc10      	bgt.n	8006a3a <__ieee754_sqrt+0x66>
 8006a18:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006a1c:	4330      	orrs	r0, r6
 8006a1e:	d0f5      	beq.n	8006a0c <__ieee754_sqrt+0x38>
 8006a20:	b15d      	cbz	r5, 8006a3a <__ieee754_sqrt+0x66>
 8006a22:	ee10 2a10 	vmov	r2, s0
 8006a26:	462b      	mov	r3, r5
 8006a28:	4620      	mov	r0, r4
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	f7f9 fc2c 	bl	8000288 <__aeabi_dsub>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	f7f9 ff06 	bl	8000844 <__aeabi_ddiv>
 8006a38:	e7e6      	b.n	8006a08 <__ieee754_sqrt+0x34>
 8006a3a:	151b      	asrs	r3, r3, #20
 8006a3c:	d10c      	bne.n	8006a58 <__ieee754_sqrt+0x84>
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	d06d      	beq.n	8006b1e <__ieee754_sqrt+0x14a>
 8006a42:	2000      	movs	r0, #0
 8006a44:	02d6      	lsls	r6, r2, #11
 8006a46:	d56e      	bpl.n	8006b26 <__ieee754_sqrt+0x152>
 8006a48:	1e44      	subs	r4, r0, #1
 8006a4a:	1b1b      	subs	r3, r3, r4
 8006a4c:	f1c0 0420 	rsb	r4, r0, #32
 8006a50:	fa21 f404 	lsr.w	r4, r1, r4
 8006a54:	4322      	orrs	r2, r4
 8006a56:	4081      	lsls	r1, r0
 8006a58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a5c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006a60:	07dd      	lsls	r5, r3, #31
 8006a62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a66:	bf42      	ittt	mi
 8006a68:	0052      	lslmi	r2, r2, #1
 8006a6a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8006a6e:	0049      	lslmi	r1, r1, #1
 8006a70:	1058      	asrs	r0, r3, #1
 8006a72:	2500      	movs	r5, #0
 8006a74:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8006a78:	441a      	add	r2, r3
 8006a7a:	0049      	lsls	r1, r1, #1
 8006a7c:	2316      	movs	r3, #22
 8006a7e:	462c      	mov	r4, r5
 8006a80:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006a84:	19a7      	adds	r7, r4, r6
 8006a86:	4297      	cmp	r7, r2
 8006a88:	bfde      	ittt	le
 8006a8a:	1bd2      	suble	r2, r2, r7
 8006a8c:	19bc      	addle	r4, r7, r6
 8006a8e:	19ad      	addle	r5, r5, r6
 8006a90:	0052      	lsls	r2, r2, #1
 8006a92:	3b01      	subs	r3, #1
 8006a94:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006a98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006a9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006aa0:	d1f0      	bne.n	8006a84 <__ieee754_sqrt+0xb0>
 8006aa2:	f04f 0e20 	mov.w	lr, #32
 8006aa6:	469c      	mov	ip, r3
 8006aa8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006aac:	42a2      	cmp	r2, r4
 8006aae:	eb06 070c 	add.w	r7, r6, ip
 8006ab2:	dc02      	bgt.n	8006aba <__ieee754_sqrt+0xe6>
 8006ab4:	d112      	bne.n	8006adc <__ieee754_sqrt+0x108>
 8006ab6:	428f      	cmp	r7, r1
 8006ab8:	d810      	bhi.n	8006adc <__ieee754_sqrt+0x108>
 8006aba:	2f00      	cmp	r7, #0
 8006abc:	eb07 0c06 	add.w	ip, r7, r6
 8006ac0:	da34      	bge.n	8006b2c <__ieee754_sqrt+0x158>
 8006ac2:	f1bc 0f00 	cmp.w	ip, #0
 8006ac6:	db31      	blt.n	8006b2c <__ieee754_sqrt+0x158>
 8006ac8:	f104 0801 	add.w	r8, r4, #1
 8006acc:	1b12      	subs	r2, r2, r4
 8006ace:	428f      	cmp	r7, r1
 8006ad0:	bf88      	it	hi
 8006ad2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006ad6:	1bc9      	subs	r1, r1, r7
 8006ad8:	4433      	add	r3, r6
 8006ada:	4644      	mov	r4, r8
 8006adc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006ae0:	f1be 0e01 	subs.w	lr, lr, #1
 8006ae4:	443a      	add	r2, r7
 8006ae6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006aea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006aee:	d1dd      	bne.n	8006aac <__ieee754_sqrt+0xd8>
 8006af0:	430a      	orrs	r2, r1
 8006af2:	d006      	beq.n	8006b02 <__ieee754_sqrt+0x12e>
 8006af4:	1c5c      	adds	r4, r3, #1
 8006af6:	bf13      	iteet	ne
 8006af8:	3301      	addne	r3, #1
 8006afa:	3501      	addeq	r5, #1
 8006afc:	4673      	moveq	r3, lr
 8006afe:	f023 0301 	bicne.w	r3, r3, #1
 8006b02:	106a      	asrs	r2, r5, #1
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	07e9      	lsls	r1, r5, #31
 8006b08:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006b0c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006b10:	bf48      	it	mi
 8006b12:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006b16:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006b1a:	461c      	mov	r4, r3
 8006b1c:	e776      	b.n	8006a0c <__ieee754_sqrt+0x38>
 8006b1e:	0aca      	lsrs	r2, r1, #11
 8006b20:	3b15      	subs	r3, #21
 8006b22:	0549      	lsls	r1, r1, #21
 8006b24:	e78b      	b.n	8006a3e <__ieee754_sqrt+0x6a>
 8006b26:	0052      	lsls	r2, r2, #1
 8006b28:	3001      	adds	r0, #1
 8006b2a:	e78b      	b.n	8006a44 <__ieee754_sqrt+0x70>
 8006b2c:	46a0      	mov	r8, r4
 8006b2e:	e7cd      	b.n	8006acc <__ieee754_sqrt+0xf8>
 8006b30:	7ff00000 	.word	0x7ff00000

08006b34 <matherr>:
 8006b34:	2000      	movs	r0, #0
 8006b36:	4770      	bx	lr

08006b38 <__errno>:
 8006b38:	4b01      	ldr	r3, [pc, #4]	; (8006b40 <__errno+0x8>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000030 	.word	0x20000030

08006b44 <_sbrk>:
 8006b44:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <_sbrk+0x14>)
 8006b46:	6819      	ldr	r1, [r3, #0]
 8006b48:	4602      	mov	r2, r0
 8006b4a:	b909      	cbnz	r1, 8006b50 <_sbrk+0xc>
 8006b4c:	4903      	ldr	r1, [pc, #12]	; (8006b5c <_sbrk+0x18>)
 8006b4e:	6019      	str	r1, [r3, #0]
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	4402      	add	r2, r0
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	4770      	bx	lr
 8006b58:	200002ec 	.word	0x200002ec
 8006b5c:	200005e4 	.word	0x200005e4

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr
