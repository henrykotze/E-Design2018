
C:\Users\Henry\Documents\edesign_latest\Debug\edesign_latest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001854  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a34  08001a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a38  08001a38  00011a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08001a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          000000e8  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000110  20000110  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e89a  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fbe  00000000  00000000  0002e8f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000334a  00000000  00000000  000308b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005f8  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000858  00000000  00000000  000341f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000044a5  00000000  00000000  00034a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009b098  00000000  00000000  00038ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000d3f8d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000f24  00000000  00000000  000d400c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0001a3b1  00000000  00000000  000d4f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080019c4 	.word	0x080019c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080019c4 	.word	0x080019c4

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f87c 	bl	80002d4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f836 	bl	8000254 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000024 	.word	0x20000024

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f817 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f001 fac4 	bl	8001794 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000048 	.word	0x20000048

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000048 	.word	0x20000048

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	0c1b      	lsrs	r3, r3, #16
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	0200      	lsls	r0, r0, #8
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800024a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800024c:	60d3      	str	r3, [r2, #12]
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 0501 	mov.w	r5, #1
 8000270:	fa05 f303 	lsl.w	r3, r5, r3
 8000274:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	bf8c      	ite	hi
 800027a:	3c03      	subhi	r4, #3
 800027c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027e:	4019      	ands	r1, r3
 8000280:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000282:	fa05 f404 	lsl.w	r4, r5, r4
 8000286:	3c01      	subs	r4, #1
 8000288:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	ea42 0201 	orr.w	r2, r2, r1
 8000290:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	bfaf      	iteee	ge
 8000296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	f000 000f 	andlt.w	r0, r0, #15
 800029e:	4b06      	ldrlt	r3, [pc, #24]	; (80002b8 <HAL_NVIC_SetPriority+0x64>)
 80002a0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	bfa5      	ittet	ge
 80002a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002bc:	0942      	lsrs	r2, r0, #5
 80002be:	2301      	movs	r3, #1
 80002c0:	f000 001f 	and.w	r0, r0, #31
 80002c4:	fa03 f000 	lsl.w	r0, r3, r0
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d4:	3801      	subs	r0, #1
 80002d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002da:	d20a      	bcs.n	80002f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	21f0      	movs	r1, #240	; 0xf0
 80002e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e010 	.word	0xe000e010
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000302:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000304:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000306:	bf0c      	ite	eq
 8000308:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800030c:	f022 0204 	bicne.w	r2, r2, #4
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	4770      	bx	lr
 8000314:	e000e010 	.word	0xe000e010

08000318 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000318:	4770      	bx	lr

0800031a <HAL_SYSTICK_IRQHandler>:
{
 800031a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800031c:	f7ff fffc 	bl	8000318 <HAL_SYSTICK_Callback>
 8000320:	bd08      	pop	{r3, pc}

08000322 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000322:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000326:	2a02      	cmp	r2, #2
{  
 8000328:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800032a:	d003      	beq.n	8000334 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800032c:	2204      	movs	r2, #4
 800032e:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000330:	2001      	movs	r0, #1
 8000332:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000334:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000336:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000338:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800033a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800033c:	f021 010e 	bic.w	r1, r1, #14
 8000340:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000342:	6811      	ldr	r1, [r2, #0]
 8000344:	f021 0101 	bic.w	r1, r1, #1
 8000348:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800034a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800034c:	2101      	movs	r1, #1
 800034e:	fa01 f202 	lsl.w	r2, r1, r2
 8000352:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000354:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000356:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800035a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800035e:	b113      	cbz	r3, 8000366 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000360:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000362:	4620      	mov	r0, r4
 8000364:	bd10      	pop	{r4, pc}
 8000366:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000368:	bd10      	pop	{r4, pc}
	...

0800036c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000370:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000372:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000374:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80004dc <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000378:	4a56      	ldr	r2, [pc, #344]	; (80004d4 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037a:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800037c:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000380:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000382:	9c01      	ldr	r4, [sp, #4]
 8000384:	40dc      	lsrs	r4, r3
 8000386:	d102      	bne.n	800038e <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000388:	b005      	add	sp, #20
 800038a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800038e:	2401      	movs	r4, #1
 8000390:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000394:	9c01      	ldr	r4, [sp, #4]
 8000396:	ea14 050a 	ands.w	r5, r4, sl
 800039a:	f000 8093 	beq.w	80004c4 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800039e:	684c      	ldr	r4, [r1, #4]
 80003a0:	f024 0b10 	bic.w	fp, r4, #16
 80003a4:	f1bb 0f02 	cmp.w	fp, #2
 80003a8:	d111      	bne.n	80003ce <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80003aa:	08df      	lsrs	r7, r3, #3
 80003ac:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003b0:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80003b4:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003b6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80003ba:	fa09 fc0e 	lsl.w	ip, r9, lr
 80003be:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003c2:	690e      	ldr	r6, [r1, #16]
 80003c4:	fa06 f60e 	lsl.w	r6, r6, lr
 80003c8:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80003cc:	623e      	str	r6, [r7, #32]
 80003ce:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d2:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80003d4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80003da:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003dc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003e0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e2:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e6:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ea:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ee:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003f2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f4:	d811      	bhi.n	800041a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003f6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003f8:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003fc:	68ce      	ldr	r6, [r1, #12]
 80003fe:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000402:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000406:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000408:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800040a:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800040e:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000412:	409e      	lsls	r6, r3
 8000414:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000418:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800041a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800041c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800041e:	688e      	ldr	r6, [r1, #8]
 8000420:	fa06 f60c 	lsl.w	r6, r6, ip
 8000424:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000426:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000428:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042a:	d54b      	bpl.n	80004c4 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000430:	f046 0601 	orr.w	r6, r6, #1
 8000434:	f8c8 6018 	str.w	r6, [r8, #24]
 8000438:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800043c:	f023 0703 	bic.w	r7, r3, #3
 8000440:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000444:	f006 0601 	and.w	r6, r6, #1
 8000448:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800044c:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800044e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000454:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000456:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800045a:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800045e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000462:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000466:	d02f      	beq.n	80004c8 <HAL_GPIO_Init+0x15c>
 8000468:	4e1b      	ldr	r6, [pc, #108]	; (80004d8 <HAL_GPIO_Init+0x16c>)
 800046a:	42b0      	cmp	r0, r6
 800046c:	d02e      	beq.n	80004cc <HAL_GPIO_Init+0x160>
 800046e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000472:	42b0      	cmp	r0, r6
 8000474:	d02c      	beq.n	80004d0 <HAL_GPIO_Init+0x164>
 8000476:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800047a:	42b0      	cmp	r0, r6
 800047c:	bf14      	ite	ne
 800047e:	2605      	movne	r6, #5
 8000480:	2603      	moveq	r6, #3
 8000482:	fa06 f60e 	lsl.w	r6, r6, lr
 8000486:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800048a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800048c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800048e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000490:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000494:	bf0c      	ite	eq
 8000496:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000498:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800049a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800049c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004a2:	bf0c      	ite	eq
 80004a4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004a6:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80004a8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80004aa:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004ac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004b0:	bf0c      	ite	eq
 80004b2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004b4:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80004b6:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80004b8:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ba:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004bc:	bf54      	ite	pl
 80004be:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80004c0:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80004c2:	60d6      	str	r6, [r2, #12]
    position++;
 80004c4:	3301      	adds	r3, #1
 80004c6:	e75c      	b.n	8000382 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004c8:	2600      	movs	r6, #0
 80004ca:	e7da      	b.n	8000482 <HAL_GPIO_Init+0x116>
 80004cc:	2601      	movs	r6, #1
 80004ce:	e7d8      	b.n	8000482 <HAL_GPIO_Init+0x116>
 80004d0:	2602      	movs	r6, #2
 80004d2:	e7d6      	b.n	8000482 <HAL_GPIO_Init+0x116>
 80004d4:	40010400 	.word	0x40010400
 80004d8:	48000400 	.word	0x48000400
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e0:	6803      	ldr	r3, [r0, #0]
 80004e2:	07da      	lsls	r2, r3, #31
{
 80004e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80004e8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ea:	d411      	bmi.n	8000510 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ec:	682b      	ldr	r3, [r5, #0]
 80004ee:	079b      	lsls	r3, r3, #30
 80004f0:	f100 8088 	bmi.w	8000604 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004f4:	682b      	ldr	r3, [r5, #0]
 80004f6:	071c      	lsls	r4, r3, #28
 80004f8:	f100 80f8 	bmi.w	80006ec <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004fc:	682b      	ldr	r3, [r5, #0]
 80004fe:	0758      	lsls	r0, r3, #29
 8000500:	f100 8141 	bmi.w	8000786 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000504:	69ea      	ldr	r2, [r5, #28]
 8000506:	2a00      	cmp	r2, #0
 8000508:	f040 81d7 	bne.w	80008ba <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800050c:	2000      	movs	r0, #0
 800050e:	e021      	b.n	8000554 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000510:	4cba      	ldr	r4, [pc, #744]	; (80007fc <HAL_RCC_OscConfig+0x31c>)
 8000512:	6863      	ldr	r3, [r4, #4]
 8000514:	f003 030c 	and.w	r3, r3, #12
 8000518:	2b04      	cmp	r3, #4
 800051a:	d007      	beq.n	800052c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800051c:	6863      	ldr	r3, [r4, #4]
 800051e:	f003 030c 	and.w	r3, r3, #12
 8000522:	2b08      	cmp	r3, #8
 8000524:	d119      	bne.n	800055a <HAL_RCC_OscConfig+0x7a>
 8000526:	6863      	ldr	r3, [r4, #4]
 8000528:	03df      	lsls	r7, r3, #15
 800052a:	d516      	bpl.n	800055a <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800052c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000530:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000534:	6821      	ldr	r1, [r4, #0]
 8000536:	fa93 f3a3 	rbit	r3, r3
 800053a:	fab3 f383 	clz	r3, r3
 800053e:	f003 031f 	and.w	r3, r3, #31
 8000542:	2201      	movs	r2, #1
 8000544:	fa02 f303 	lsl.w	r3, r2, r3
 8000548:	420b      	tst	r3, r1
 800054a:	d0cf      	beq.n	80004ec <HAL_RCC_OscConfig+0xc>
 800054c:	686b      	ldr	r3, [r5, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1cc      	bne.n	80004ec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000552:	2001      	movs	r0, #1
}
 8000554:	b002      	add	sp, #8
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800055a:	686a      	ldr	r2, [r5, #4]
 800055c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000560:	d125      	bne.n	80005ae <HAL_RCC_OscConfig+0xce>
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000568:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800056a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800056c:	68a9      	ldr	r1, [r5, #8]
 800056e:	f023 030f 	bic.w	r3, r3, #15
 8000572:	430b      	orrs	r3, r1
 8000574:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000576:	b352      	cbz	r2, 80005ce <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000578:	f7ff fe54 	bl	8000224 <HAL_GetTick>
 800057c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000580:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000582:	2701      	movs	r7, #1
 8000584:	fa96 f3a6 	rbit	r3, r6
 8000588:	6822      	ldr	r2, [r4, #0]
 800058a:	fa96 f3a6 	rbit	r3, r6
 800058e:	fab3 f383 	clz	r3, r3
 8000592:	f003 031f 	and.w	r3, r3, #31
 8000596:	fa07 f303 	lsl.w	r3, r7, r3
 800059a:	4213      	tst	r3, r2
 800059c:	d1a6      	bne.n	80004ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800059e:	f7ff fe41 	bl	8000224 <HAL_GetTick>
 80005a2:	eba0 0008 	sub.w	r0, r0, r8
 80005a6:	2864      	cmp	r0, #100	; 0x64
 80005a8:	d9ec      	bls.n	8000584 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 80005aa:	2003      	movs	r0, #3
 80005ac:	e7d2      	b.n	8000554 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	b932      	cbnz	r2, 80005c0 <HAL_RCC_OscConfig+0xe0>
 80005b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b6:	6023      	str	r3, [r4, #0]
 80005b8:	6823      	ldr	r3, [r4, #0]
 80005ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005be:	e7d3      	b.n	8000568 <HAL_RCC_OscConfig+0x88>
 80005c0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005c4:	d1f5      	bne.n	80005b2 <HAL_RCC_OscConfig+0xd2>
 80005c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ca:	6023      	str	r3, [r4, #0]
 80005cc:	e7c9      	b.n	8000562 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80005ce:	f7ff fe29 	bl	8000224 <HAL_GetTick>
 80005d2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005d6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005d8:	2701      	movs	r7, #1
 80005da:	fa96 f3a6 	rbit	r3, r6
 80005de:	6822      	ldr	r2, [r4, #0]
 80005e0:	fa96 f3a6 	rbit	r3, r6
 80005e4:	fab3 f383 	clz	r3, r3
 80005e8:	f003 031f 	and.w	r3, r3, #31
 80005ec:	fa07 f303 	lsl.w	r3, r7, r3
 80005f0:	4213      	tst	r3, r2
 80005f2:	f43f af7b 	beq.w	80004ec <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f6:	f7ff fe15 	bl	8000224 <HAL_GetTick>
 80005fa:	eba0 0008 	sub.w	r0, r0, r8
 80005fe:	2864      	cmp	r0, #100	; 0x64
 8000600:	d9eb      	bls.n	80005da <HAL_RCC_OscConfig+0xfa>
 8000602:	e7d2      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000604:	4c7d      	ldr	r4, [pc, #500]	; (80007fc <HAL_RCC_OscConfig+0x31c>)
 8000606:	6863      	ldr	r3, [r4, #4]
 8000608:	f013 0f0c 	tst.w	r3, #12
 800060c:	d007      	beq.n	800061e <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800060e:	6863      	ldr	r3, [r4, #4]
 8000610:	f003 030c 	and.w	r3, r3, #12
 8000614:	2b08      	cmp	r3, #8
 8000616:	d121      	bne.n	800065c <HAL_RCC_OscConfig+0x17c>
 8000618:	6863      	ldr	r3, [r4, #4]
 800061a:	03de      	lsls	r6, r3, #15
 800061c:	d41e      	bmi.n	800065c <HAL_RCC_OscConfig+0x17c>
 800061e:	2302      	movs	r3, #2
 8000620:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000624:	6821      	ldr	r1, [r4, #0]
 8000626:	fa93 f3a3 	rbit	r3, r3
 800062a:	fab3 f383 	clz	r3, r3
 800062e:	f003 031f 	and.w	r3, r3, #31
 8000632:	2201      	movs	r2, #1
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	420b      	tst	r3, r1
 800063a:	d002      	beq.n	8000642 <HAL_RCC_OscConfig+0x162>
 800063c:	692b      	ldr	r3, [r5, #16]
 800063e:	4293      	cmp	r3, r2
 8000640:	d187      	bne.n	8000552 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000642:	6821      	ldr	r1, [r4, #0]
 8000644:	23f8      	movs	r3, #248	; 0xf8
 8000646:	fa93 f3a3 	rbit	r3, r3
 800064a:	fab3 f283 	clz	r2, r3
 800064e:	696b      	ldr	r3, [r5, #20]
 8000650:	4093      	lsls	r3, r2
 8000652:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000656:	4313      	orrs	r3, r2
 8000658:	6023      	str	r3, [r4, #0]
 800065a:	e74b      	b.n	80004f4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800065c:	692a      	ldr	r2, [r5, #16]
 800065e:	2601      	movs	r6, #1
 8000660:	b30a      	cbz	r2, 80006a6 <HAL_RCC_OscConfig+0x1c6>
 8000662:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000666:	fab3 f383 	clz	r3, r3
 800066a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800066e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	2702      	movs	r7, #2
 8000676:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000678:	f7ff fdd4 	bl	8000224 <HAL_GetTick>
 800067c:	4680      	mov	r8, r0
 800067e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000682:	6822      	ldr	r2, [r4, #0]
 8000684:	fa97 f3a7 	rbit	r3, r7
 8000688:	fab3 f383 	clz	r3, r3
 800068c:	f003 031f 	and.w	r3, r3, #31
 8000690:	fa06 f303 	lsl.w	r3, r6, r3
 8000694:	4213      	tst	r3, r2
 8000696:	d1d4      	bne.n	8000642 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000698:	f7ff fdc4 	bl	8000224 <HAL_GetTick>
 800069c:	eba0 0008 	sub.w	r0, r0, r8
 80006a0:	2802      	cmp	r0, #2
 80006a2:	d9ec      	bls.n	800067e <HAL_RCC_OscConfig+0x19e>
 80006a4:	e781      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
 80006a6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006aa:	fab3 f383 	clz	r3, r3
 80006ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	2702      	movs	r7, #2
 80006ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006bc:	f7ff fdb2 	bl	8000224 <HAL_GetTick>
 80006c0:	4680      	mov	r8, r0
 80006c2:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006c6:	6822      	ldr	r2, [r4, #0]
 80006c8:	fa97 f3a7 	rbit	r3, r7
 80006cc:	fab3 f383 	clz	r3, r3
 80006d0:	f003 031f 	and.w	r3, r3, #31
 80006d4:	fa06 f303 	lsl.w	r3, r6, r3
 80006d8:	4213      	tst	r3, r2
 80006da:	f43f af0b 	beq.w	80004f4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006de:	f7ff fda1 	bl	8000224 <HAL_GetTick>
 80006e2:	eba0 0008 	sub.w	r0, r0, r8
 80006e6:	2802      	cmp	r0, #2
 80006e8:	d9eb      	bls.n	80006c2 <HAL_RCC_OscConfig+0x1e2>
 80006ea:	e75e      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006ec:	69aa      	ldr	r2, [r5, #24]
 80006ee:	4e43      	ldr	r6, [pc, #268]	; (80007fc <HAL_RCC_OscConfig+0x31c>)
 80006f0:	4943      	ldr	r1, [pc, #268]	; (8000800 <HAL_RCC_OscConfig+0x320>)
 80006f2:	2401      	movs	r4, #1
 80006f4:	b31a      	cbz	r2, 800073e <HAL_RCC_OscConfig+0x25e>
 80006f6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006fa:	fab3 f383 	clz	r3, r3
 80006fe:	440b      	add	r3, r1
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	2702      	movs	r7, #2
 8000704:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000706:	f7ff fd8d 	bl	8000224 <HAL_GetTick>
 800070a:	4680      	mov	r8, r0
 800070c:	fa97 f3a7 	rbit	r3, r7
 8000710:	fa97 f3a7 	rbit	r3, r7
 8000714:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000718:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800071a:	fa97 f3a7 	rbit	r3, r7
 800071e:	fab3 f383 	clz	r3, r3
 8000722:	f003 031f 	and.w	r3, r3, #31
 8000726:	fa04 f303 	lsl.w	r3, r4, r3
 800072a:	4213      	tst	r3, r2
 800072c:	f47f aee6 	bne.w	80004fc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000730:	f7ff fd78 	bl	8000224 <HAL_GetTick>
 8000734:	eba0 0008 	sub.w	r0, r0, r8
 8000738:	2802      	cmp	r0, #2
 800073a:	d9e7      	bls.n	800070c <HAL_RCC_OscConfig+0x22c>
 800073c:	e735      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
 800073e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000742:	fab3 f383 	clz	r3, r3
 8000746:	440b      	add	r3, r1
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	2702      	movs	r7, #2
 800074c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800074e:	f7ff fd69 	bl	8000224 <HAL_GetTick>
 8000752:	4680      	mov	r8, r0
 8000754:	fa97 f3a7 	rbit	r3, r7
 8000758:	fa97 f3a7 	rbit	r3, r7
 800075c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000760:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000762:	fa97 f3a7 	rbit	r3, r7
 8000766:	fab3 f383 	clz	r3, r3
 800076a:	f003 031f 	and.w	r3, r3, #31
 800076e:	fa04 f303 	lsl.w	r3, r4, r3
 8000772:	4213      	tst	r3, r2
 8000774:	f43f aec2 	beq.w	80004fc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000778:	f7ff fd54 	bl	8000224 <HAL_GetTick>
 800077c:	eba0 0008 	sub.w	r0, r0, r8
 8000780:	2802      	cmp	r0, #2
 8000782:	d9e7      	bls.n	8000754 <HAL_RCC_OscConfig+0x274>
 8000784:	e711      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000786:	4c1d      	ldr	r4, [pc, #116]	; (80007fc <HAL_RCC_OscConfig+0x31c>)
 8000788:	69e3      	ldr	r3, [r4, #28]
 800078a:	00d9      	lsls	r1, r3, #3
 800078c:	d434      	bmi.n	80007f8 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	69e3      	ldr	r3, [r4, #28]
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	61e3      	str	r3, [r4, #28]
 8000796:	69e3      	ldr	r3, [r4, #28]
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007a0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007a2:	4f18      	ldr	r7, [pc, #96]	; (8000804 <HAL_RCC_OscConfig+0x324>)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	05da      	lsls	r2, r3, #23
 80007a8:	d52e      	bpl.n	8000808 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007aa:	68eb      	ldr	r3, [r5, #12]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d13c      	bne.n	800082a <HAL_RCC_OscConfig+0x34a>
 80007b0:	6a23      	ldr	r3, [r4, #32]
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007b8:	f7ff fd34 	bl	8000224 <HAL_GetTick>
 80007bc:	2702      	movs	r7, #2
 80007be:	4682      	mov	sl, r0
 80007c0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007c2:	f04f 0801 	mov.w	r8, #1
 80007c6:	fa97 f3a7 	rbit	r3, r7
 80007ca:	fa97 f3a7 	rbit	r3, r7
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d06b      	beq.n	80008aa <HAL_RCC_OscConfig+0x3ca>
 80007d2:	6a22      	ldr	r2, [r4, #32]
 80007d4:	fa99 f3a9 	rbit	r3, r9
 80007d8:	fab3 f383 	clz	r3, r3
 80007dc:	f003 031f 	and.w	r3, r3, #31
 80007e0:	fa08 f303 	lsl.w	r3, r8, r3
 80007e4:	4213      	tst	r3, r2
 80007e6:	d057      	beq.n	8000898 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	f43f ae8b 	beq.w	8000504 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007ee:	69e3      	ldr	r3, [r4, #28]
 80007f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007f4:	61e3      	str	r3, [r4, #28]
 80007f6:	e685      	b.n	8000504 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80007f8:	2600      	movs	r6, #0
 80007fa:	e7d2      	b.n	80007a2 <HAL_RCC_OscConfig+0x2c2>
 80007fc:	40021000 	.word	0x40021000
 8000800:	10908120 	.word	0x10908120
 8000804:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000810:	f7ff fd08 	bl	8000224 <HAL_GetTick>
 8000814:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	d4c6      	bmi.n	80007aa <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800081c:	f7ff fd02 	bl	8000224 <HAL_GetTick>
 8000820:	eba0 0008 	sub.w	r0, r0, r8
 8000824:	2864      	cmp	r0, #100	; 0x64
 8000826:	d9f6      	bls.n	8000816 <HAL_RCC_OscConfig+0x336>
 8000828:	e6bf      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800082a:	bb3b      	cbnz	r3, 800087c <HAL_RCC_OscConfig+0x39c>
 800082c:	6a23      	ldr	r3, [r4, #32]
 800082e:	f023 0301 	bic.w	r3, r3, #1
 8000832:	6223      	str	r3, [r4, #32]
 8000834:	6a23      	ldr	r3, [r4, #32]
 8000836:	f023 0304 	bic.w	r3, r3, #4
 800083a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800083c:	f7ff fcf2 	bl	8000224 <HAL_GetTick>
 8000840:	2702      	movs	r7, #2
 8000842:	4682      	mov	sl, r0
 8000844:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000846:	f04f 0801 	mov.w	r8, #1
 800084a:	fa97 f3a7 	rbit	r3, r7
 800084e:	fa97 f3a7 	rbit	r3, r7
 8000852:	b373      	cbz	r3, 80008b2 <HAL_RCC_OscConfig+0x3d2>
 8000854:	6a22      	ldr	r2, [r4, #32]
 8000856:	fa99 f3a9 	rbit	r3, r9
 800085a:	fab3 f383 	clz	r3, r3
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	fa08 f303 	lsl.w	r3, r8, r3
 8000866:	4213      	tst	r3, r2
 8000868:	d0be      	beq.n	80007e8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800086a:	f7ff fcdb 	bl	8000224 <HAL_GetTick>
 800086e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000872:	eba0 000a 	sub.w	r0, r0, sl
 8000876:	4298      	cmp	r0, r3
 8000878:	d9e7      	bls.n	800084a <HAL_RCC_OscConfig+0x36a>
 800087a:	e696      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800087c:	2b05      	cmp	r3, #5
 800087e:	6a23      	ldr	r3, [r4, #32]
 8000880:	d103      	bne.n	800088a <HAL_RCC_OscConfig+0x3aa>
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6223      	str	r3, [r4, #32]
 8000888:	e792      	b.n	80007b0 <HAL_RCC_OscConfig+0x2d0>
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6223      	str	r3, [r4, #32]
 8000890:	6a23      	ldr	r3, [r4, #32]
 8000892:	f023 0304 	bic.w	r3, r3, #4
 8000896:	e78e      	b.n	80007b6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000898:	f7ff fcc4 	bl	8000224 <HAL_GetTick>
 800089c:	f241 3388 	movw	r3, #5000	; 0x1388
 80008a0:	eba0 000a 	sub.w	r0, r0, sl
 80008a4:	4298      	cmp	r0, r3
 80008a6:	d98e      	bls.n	80007c6 <HAL_RCC_OscConfig+0x2e6>
 80008a8:	e67f      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
 80008aa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008b0:	e790      	b.n	80007d4 <HAL_RCC_OscConfig+0x2f4>
 80008b2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008b8:	e7cd      	b.n	8000856 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008ba:	4c41      	ldr	r4, [pc, #260]	; (80009c0 <HAL_RCC_OscConfig+0x4e0>)
 80008bc:	6863      	ldr	r3, [r4, #4]
 80008be:	f003 030c 	and.w	r3, r3, #12
 80008c2:	2b08      	cmp	r3, #8
 80008c4:	f43f ae45 	beq.w	8000552 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008c8:	2a02      	cmp	r2, #2
 80008ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ce:	d152      	bne.n	8000976 <HAL_RCC_OscConfig+0x496>
 80008d0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008d4:	fab3 f383 	clz	r3, r3
 80008d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008e6:	f7ff fc9d 	bl	8000224 <HAL_GetTick>
 80008ea:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008ee:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008f0:	2601      	movs	r6, #1
 80008f2:	fa97 f3a7 	rbit	r3, r7
 80008f6:	6822      	ldr	r2, [r4, #0]
 80008f8:	fa97 f3a7 	rbit	r3, r7
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	f003 031f 	and.w	r3, r3, #31
 8000904:	fa06 f303 	lsl.w	r3, r6, r3
 8000908:	4213      	tst	r3, r2
 800090a:	d12d      	bne.n	8000968 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800090c:	6862      	ldr	r2, [r4, #4]
 800090e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000910:	6a29      	ldr	r1, [r5, #32]
 8000912:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000916:	430b      	orrs	r3, r1
 8000918:	4313      	orrs	r3, r2
 800091a:	6063      	str	r3, [r4, #4]
 800091c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000920:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000924:	fab3 f383 	clz	r3, r3
 8000928:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800092c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000936:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000938:	f7ff fc74 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800093c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800093e:	4607      	mov	r7, r0
 8000940:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000944:	6822      	ldr	r2, [r4, #0]
 8000946:	fa95 f3a5 	rbit	r3, r5
 800094a:	fab3 f383 	clz	r3, r3
 800094e:	f003 031f 	and.w	r3, r3, #31
 8000952:	fa06 f303 	lsl.w	r3, r6, r3
 8000956:	4213      	tst	r3, r2
 8000958:	f47f add8 	bne.w	800050c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800095c:	f7ff fc62 	bl	8000224 <HAL_GetTick>
 8000960:	1bc0      	subs	r0, r0, r7
 8000962:	2802      	cmp	r0, #2
 8000964:	d9ec      	bls.n	8000940 <HAL_RCC_OscConfig+0x460>
 8000966:	e620      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000968:	f7ff fc5c 	bl	8000224 <HAL_GetTick>
 800096c:	eba0 0008 	sub.w	r0, r0, r8
 8000970:	2802      	cmp	r0, #2
 8000972:	d9be      	bls.n	80008f2 <HAL_RCC_OscConfig+0x412>
 8000974:	e619      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
 8000976:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800097a:	fab3 f383 	clz	r3, r3
 800097e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000982:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800098c:	f7ff fc4a 	bl	8000224 <HAL_GetTick>
 8000990:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000994:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000996:	2601      	movs	r6, #1
 8000998:	fa95 f3a5 	rbit	r3, r5
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	fa95 f3a5 	rbit	r3, r5
 80009a2:	fab3 f383 	clz	r3, r3
 80009a6:	f003 031f 	and.w	r3, r3, #31
 80009aa:	fa06 f303 	lsl.w	r3, r6, r3
 80009ae:	4213      	tst	r3, r2
 80009b0:	f43f adac 	beq.w	800050c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b4:	f7ff fc36 	bl	8000224 <HAL_GetTick>
 80009b8:	1bc0      	subs	r0, r0, r7
 80009ba:	2802      	cmp	r0, #2
 80009bc:	d9ec      	bls.n	8000998 <HAL_RCC_OscConfig+0x4b8>
 80009be:	e5f4      	b.n	80005aa <HAL_RCC_OscConfig+0xca>
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009c4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009c6:	4c13      	ldr	r4, [pc, #76]	; (8000a14 <HAL_RCC_GetSysClockFreq+0x50>)
 80009c8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009ca:	f001 030c 	and.w	r3, r1, #12
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d11e      	bne.n	8000a10 <HAL_RCC_GetSysClockFreq+0x4c>
 80009d2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009d6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009da:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009de:	fab3 f383 	clz	r3, r3
 80009e2:	fa22 f303 	lsr.w	r3, r2, r3
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <HAL_RCC_GetSysClockFreq+0x54>)
 80009e8:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009ec:	220f      	movs	r2, #15
 80009ee:	fa92 f2a2 	rbit	r2, r2
 80009f2:	fab2 f282 	clz	r2, r2
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	40d3      	lsrs	r3, r2
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x58>)
 80009fe:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a00:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a02:	bf4a      	itet	mi
 8000a04:	4b06      	ldrmi	r3, [pc, #24]	; (8000a20 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a06:	4b07      	ldrpl	r3, [pc, #28]	; (8000a24 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a08:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a0c:	4358      	muls	r0, r3
 8000a0e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a12:	bd10      	pop	{r4, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	080019dc 	.word	0x080019dc
 8000a1c:	080019ec 	.word	0x080019ec
 8000a20:	007a1200 	.word	0x007a1200
 8000a24:	003d0900 	.word	0x003d0900

08000a28 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a28:	4a5c      	ldr	r2, [pc, #368]	; (8000b9c <HAL_RCC_ClockConfig+0x174>)
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	428b      	cmp	r3, r1
{
 8000a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a36:	4606      	mov	r6, r0
 8000a38:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a3a:	d330      	bcc.n	8000a9e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a3c:	6832      	ldr	r2, [r6, #0]
 8000a3e:	0791      	lsls	r1, r2, #30
 8000a40:	d43a      	bmi.n	8000ab8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a42:	07d2      	lsls	r2, r2, #31
 8000a44:	d440      	bmi.n	8000ac8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a46:	4a55      	ldr	r2, [pc, #340]	; (8000b9c <HAL_RCC_ClockConfig+0x174>)
 8000a48:	6813      	ldr	r3, [r2, #0]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	429d      	cmp	r5, r3
 8000a50:	f0c0 8092 	bcc.w	8000b78 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a54:	6832      	ldr	r2, [r6, #0]
 8000a56:	4c52      	ldr	r4, [pc, #328]	; (8000ba0 <HAL_RCC_ClockConfig+0x178>)
 8000a58:	f012 0f04 	tst.w	r2, #4
 8000a5c:	f040 8097 	bne.w	8000b8e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a60:	0713      	lsls	r3, r2, #28
 8000a62:	d506      	bpl.n	8000a72 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a64:	6863      	ldr	r3, [r4, #4]
 8000a66:	6932      	ldr	r2, [r6, #16]
 8000a68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a70:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a72:	f7ff ffa7 	bl	80009c4 <HAL_RCC_GetSysClockFreq>
 8000a76:	6863      	ldr	r3, [r4, #4]
 8000a78:	22f0      	movs	r2, #240	; 0xf0
 8000a7a:	fa92 f2a2 	rbit	r2, r2
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a86:	40d3      	lsrs	r3, r2
 8000a88:	4a46      	ldr	r2, [pc, #280]	; (8000ba4 <HAL_RCC_ClockConfig+0x17c>)
 8000a8a:	5cd3      	ldrb	r3, [r2, r3]
 8000a8c:	40d8      	lsrs	r0, r3
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <HAL_RCC_ClockConfig+0x180>)
 8000a90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fb98 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000a98:	2000      	movs	r0, #0
}
 8000a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	f023 0307 	bic.w	r3, r3, #7
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d0c4      	beq.n	8000a3c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ab8:	4939      	ldr	r1, [pc, #228]	; (8000ba0 <HAL_RCC_ClockConfig+0x178>)
 8000aba:	68b0      	ldr	r0, [r6, #8]
 8000abc:	684b      	ldr	r3, [r1, #4]
 8000abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	604b      	str	r3, [r1, #4]
 8000ac6:	e7bc      	b.n	8000a42 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ac8:	6872      	ldr	r2, [r6, #4]
 8000aca:	4c35      	ldr	r4, [pc, #212]	; (8000ba0 <HAL_RCC_ClockConfig+0x178>)
 8000acc:	2a01      	cmp	r2, #1
 8000ace:	d128      	bne.n	8000b22 <HAL_RCC_ClockConfig+0xfa>
 8000ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad8:	6821      	ldr	r1, [r4, #0]
 8000ada:	fa93 f3a3 	rbit	r3, r3
 8000ade:	fab3 f383 	clz	r3, r3
 8000ae2:	f003 031f 	and.w	r3, r3, #31
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aec:	d0e1      	beq.n	8000ab2 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aee:	6863      	ldr	r3, [r4, #4]
 8000af0:	f023 0303 	bic.w	r3, r3, #3
 8000af4:	431a      	orrs	r2, r3
 8000af6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000af8:	f7ff fb94 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000afc:	6873      	ldr	r3, [r6, #4]
 8000afe:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000b00:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b02:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b06:	d11f      	bne.n	8000b48 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b08:	6863      	ldr	r3, [r4, #4]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d099      	beq.n	8000a46 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b12:	f7ff fb87 	bl	8000224 <HAL_GetTick>
 8000b16:	1bc0      	subs	r0, r0, r7
 8000b18:	4540      	cmp	r0, r8
 8000b1a:	d9f5      	bls.n	8000b08 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b22:	2a02      	cmp	r2, #2
 8000b24:	bf0c      	ite	eq
 8000b26:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b2a:	2302      	movne	r3, #2
 8000b2c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b30:	6820      	ldr	r0, [r4, #0]
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	fab3 f383 	clz	r3, r3
 8000b3a:	f003 031f 	and.w	r3, r3, #31
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	4203      	tst	r3, r0
 8000b46:	e7d1      	b.n	8000aec <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d110      	bne.n	8000b6e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b4c:	6863      	ldr	r3, [r4, #4]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	f43f af77 	beq.w	8000a46 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b58:	f7ff fb64 	bl	8000224 <HAL_GetTick>
 8000b5c:	1bc0      	subs	r0, r0, r7
 8000b5e:	4540      	cmp	r0, r8
 8000b60:	d9f4      	bls.n	8000b4c <HAL_RCC_ClockConfig+0x124>
 8000b62:	e7db      	b.n	8000b1c <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b64:	f7ff fb5e 	bl	8000224 <HAL_GetTick>
 8000b68:	1bc0      	subs	r0, r0, r7
 8000b6a:	4540      	cmp	r0, r8
 8000b6c:	d8d6      	bhi.n	8000b1c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b6e:	6863      	ldr	r3, [r4, #4]
 8000b70:	f013 0f0c 	tst.w	r3, #12
 8000b74:	d1f6      	bne.n	8000b64 <HAL_RCC_ClockConfig+0x13c>
 8000b76:	e766      	b.n	8000a46 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b78:	6813      	ldr	r3, [r2, #0]
 8000b7a:	f023 0307 	bic.w	r3, r3, #7
 8000b7e:	432b      	orrs	r3, r5
 8000b80:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b82:	6813      	ldr	r3, [r2, #0]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	429d      	cmp	r5, r3
 8000b8a:	d192      	bne.n	8000ab2 <HAL_RCC_ClockConfig+0x8a>
 8000b8c:	e762      	b.n	8000a54 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b8e:	6863      	ldr	r3, [r4, #4]
 8000b90:	68f1      	ldr	r1, [r6, #12]
 8000b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b96:	430b      	orrs	r3, r1
 8000b98:	6063      	str	r3, [r4, #4]
 8000b9a:	e761      	b.n	8000a60 <HAL_RCC_ClockConfig+0x38>
 8000b9c:	40022000 	.word	0x40022000
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	08001a1c 	.word	0x08001a1c
 8000ba8:	20000024 	.word	0x20000024

08000bac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000024 	.word	0x20000024

08000bb8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000bba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	fa92 f2a2 	rbit	r2, r2
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bcc:	40d3      	lsrs	r3, r2
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000bd4:	6810      	ldr	r0, [r2, #0]
}    
 8000bd6:	40d8      	lsrs	r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	08001a2c 	.word	0x08001a2c
 8000be4:	20000024 	.word	0x20000024

08000be8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000bea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	fa92 f2a2 	rbit	r2, r2
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bfc:	40d3      	lsrs	r3, r2
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c00:	5cd3      	ldrb	r3, [r2, r3]
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c04:	6810      	ldr	r0, [r2, #0]
} 
 8000c06:	40d8      	lsrs	r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	08001a2c 	.word	0x08001a2c
 8000c14:	20000024 	.word	0x20000024

08000c18 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c18:	6803      	ldr	r3, [r0, #0]
{
 8000c1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c1e:	03dc      	lsls	r4, r3, #15
{
 8000c20:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c22:	d520      	bpl.n	8000c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c24:	4c55      	ldr	r4, [pc, #340]	; (8000d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000c26:	69e3      	ldr	r3, [r4, #28]
 8000c28:	00d8      	lsls	r0, r3, #3
 8000c2a:	d44d      	bmi.n	8000cc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	69e3      	ldr	r3, [r4, #28]
 8000c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c32:	61e3      	str	r3, [r4, #28]
 8000c34:	69e3      	ldr	r3, [r4, #28]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c3e:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c40:	4f4f      	ldr	r7, [pc, #316]	; (8000d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	05d9      	lsls	r1, r3, #23
 8000c46:	d541      	bpl.n	8000ccc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c48:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c4a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c4e:	d151      	bne.n	8000cf4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c50:	6a23      	ldr	r3, [r4, #32]
 8000c52:	686a      	ldr	r2, [r5, #4]
 8000c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c5c:	b11e      	cbz	r6, 8000c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c5e:	69e3      	ldr	r3, [r4, #28]
 8000c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c64:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c66:	6828      	ldr	r0, [r5, #0]
 8000c68:	07c4      	lsls	r4, r0, #31
 8000c6a:	d506      	bpl.n	8000c7a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c6c:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000c6e:	68a9      	ldr	r1, [r5, #8]
 8000c70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c72:	f023 0303 	bic.w	r3, r3, #3
 8000c76:	430b      	orrs	r3, r1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c7a:	0681      	lsls	r1, r0, #26
 8000c7c:	d506      	bpl.n	8000c8c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	; (8000d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000c80:	68e9      	ldr	r1, [r5, #12]
 8000c82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c84:	f023 0310 	bic.w	r3, r3, #16
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000c8c:	0602      	lsls	r2, r0, #24
 8000c8e:	d506      	bpl.n	8000c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000c90:	4a3a      	ldr	r2, [pc, #232]	; (8000d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000c92:	6929      	ldr	r1, [r5, #16]
 8000c94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000c96:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000c9e:	04c3      	lsls	r3, r0, #19
 8000ca0:	d506      	bpl.n	8000cb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000ca2:	4a36      	ldr	r2, [pc, #216]	; (8000d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000ca4:	6969      	ldr	r1, [r5, #20]
 8000ca6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8000cb0:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8000cb4:	d01b      	beq.n	8000cee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8000cb6:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000cb8:	69a9      	ldr	r1, [r5, #24]
 8000cba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	e012      	b.n	8000cee <HAL_RCCEx_PeriphCLKConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8000cc8:	2600      	movs	r6, #0
 8000cca:	e7b9      	b.n	8000c40 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000cd4:	f7ff faa6 	bl	8000224 <HAL_GetTick>
 8000cd8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	05da      	lsls	r2, r3, #23
 8000cde:	d4b3      	bmi.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ce0:	f7ff faa0 	bl	8000224 <HAL_GetTick>
 8000ce4:	eba0 0008 	sub.w	r0, r0, r8
 8000ce8:	2864      	cmp	r0, #100	; 0x64
 8000cea:	d9f6      	bls.n	8000cda <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 8000cec:	2003      	movs	r0, #3
}
 8000cee:	b002      	add	sp, #8
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cf4:	686a      	ldr	r2, [r5, #4]
 8000cf6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d0a8      	beq.n	8000c50 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cfe:	6a21      	ldr	r1, [r4, #32]
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000d08:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d0c:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000d84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	4472      	add	r2, lr
 8000d16:	0092      	lsls	r2, r2, #2
 8000d18:	2701      	movs	r7, #1
 8000d1a:	6017      	str	r7, [r2, #0]
 8000d1c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d20:	fab3 f383 	clz	r3, r3
 8000d24:	4473      	add	r3, lr
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d2c:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8000d2e:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d30:	d58e      	bpl.n	8000c50 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000d32:	f7ff fa77 	bl	8000224 <HAL_GetTick>
 8000d36:	f04f 0802 	mov.w	r8, #2
 8000d3a:	4682      	mov	sl, r0
 8000d3c:	46c1      	mov	r9, r8
 8000d3e:	fa98 f3a8 	rbit	r3, r8
 8000d42:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d46:	b1a3      	cbz	r3, 8000d72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8000d48:	6a22      	ldr	r2, [r4, #32]
 8000d4a:	fa99 f3a9 	rbit	r3, r9
 8000d4e:	fab3 f383 	clz	r3, r3
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	fa07 f303 	lsl.w	r3, r7, r3
 8000d5a:	4213      	tst	r3, r2
 8000d5c:	f47f af78 	bne.w	8000c50 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d60:	f7ff fa60 	bl	8000224 <HAL_GetTick>
 8000d64:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d68:	eba0 000a 	sub.w	r0, r0, sl
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	d9e6      	bls.n	8000d3e <HAL_RCCEx_PeriphCLKConfig+0x126>
 8000d70:	e7bc      	b.n	8000cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8000d72:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d78:	e7e7      	b.n	8000d4a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40007000 	.word	0x40007000
 8000d84:	10908100 	.word	0x10908100

08000d88 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000d88:	6803      	ldr	r3, [r0, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000d90:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	f022 0201 	bic.w	r2, r2, #1
 8000d98:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8000da0:	4770      	bx	lr

08000da2 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8000da2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8000da6:	2b20      	cmp	r3, #32
 8000da8:	d13d      	bne.n	8000e26 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d039      	beq.n	8000e22 <HAL_UART_Receive_IT+0x80>
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d037      	beq.n	8000e22 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8000db2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d035      	beq.n	8000e26 <HAL_UART_Receive_IT+0x84>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8000dc0:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8000dc2:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8000dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8000dc8:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8000dcc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8000dd0:	d119      	bne.n	8000e06 <HAL_UART_Receive_IT+0x64>
 8000dd2:	6903      	ldr	r3, [r0, #16]
 8000dd4:	b9ab      	cbnz	r3, 8000e02 <HAL_UART_Receive_IT+0x60>
 8000dd6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000dda:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dde:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000de0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000de2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000de4:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000de8:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8000dea:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000dee:	6891      	ldr	r1, [r2, #8]
 8000df0:	f041 0101 	orr.w	r1, r1, #1
 8000df4:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8000df6:	6811      	ldr	r1, [r2, #0]
 8000df8:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8000dfc:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8000dfe:	4618      	mov	r0, r3
 8000e00:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8000e02:	23ff      	movs	r3, #255	; 0xff
 8000e04:	e7e9      	b.n	8000dda <HAL_UART_Receive_IT+0x38>
 8000e06:	b923      	cbnz	r3, 8000e12 <HAL_UART_Receive_IT+0x70>
 8000e08:	6903      	ldr	r3, [r0, #16]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f9      	beq.n	8000e02 <HAL_UART_Receive_IT+0x60>
 8000e0e:	237f      	movs	r3, #127	; 0x7f
 8000e10:	e7e3      	b.n	8000dda <HAL_UART_Receive_IT+0x38>
 8000e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e16:	d1e2      	bne.n	8000dde <HAL_UART_Receive_IT+0x3c>
 8000e18:	6903      	ldr	r3, [r0, #16]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f7      	beq.n	8000e0e <HAL_UART_Receive_IT+0x6c>
 8000e1e:	233f      	movs	r3, #63	; 0x3f
 8000e20:	e7db      	b.n	8000dda <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8000e22:	2001      	movs	r0, #1
 8000e24:	4770      	bx	lr
    return HAL_BUSY;
 8000e26:	2002      	movs	r0, #2
}
 8000e28:	4770      	bx	lr

08000e2a <HAL_UART_TxCpltCallback>:
 8000e2a:	4770      	bx	lr

08000e2c <HAL_UART_ErrorCallback>:
 8000e2c:	4770      	bx	lr

08000e2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8000e30:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8000e38:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8000e3c:	f7ff fff6 	bl	8000e2c <HAL_UART_ErrorCallback>
 8000e40:	bd08      	pop	{r3, pc}
	...

08000e44 <UART_SetConfig>:
{
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000e48:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e4a:	6921      	ldr	r1, [r4, #16]
 8000e4c:	68a3      	ldr	r3, [r4, #8]
 8000e4e:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000e50:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e52:	430b      	orrs	r3, r1
 8000e54:	6961      	ldr	r1, [r4, #20]
 8000e56:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000e58:	4949      	ldr	r1, [pc, #292]	; (8000f80 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e5a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000e5c:	4001      	ands	r1, r0
 8000e5e:	430b      	orrs	r3, r1
 8000e60:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e62:	686b      	ldr	r3, [r5, #4]
 8000e64:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000e66:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000e70:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000e72:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000e74:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000e78:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000e7e:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <UART_SetConfig+0x140>)
 8000e80:	429d      	cmp	r5, r3
 8000e82:	d112      	bne.n	8000eaa <UART_SetConfig+0x66>
 8000e84:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000e88:	493f      	ldr	r1, [pc, #252]	; (8000f88 <UART_SetConfig+0x144>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e94:	5ccb      	ldrb	r3, [r1, r3]
 8000e96:	d13b      	bne.n	8000f10 <UART_SetConfig+0xcc>
    switch (clocksource)
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d836      	bhi.n	8000f0a <UART_SetConfig+0xc6>
 8000e9c:	e8df f003 	tbb	[pc, r3]
 8000ea0:	3524210f 	.word	0x3524210f
 8000ea4:	3535352d 	.word	0x3535352d
 8000ea8:	30          	.byte	0x30
 8000ea9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <UART_SetConfig+0x148>)
 8000eac:	429d      	cmp	r5, r3
 8000eae:	d003      	beq.n	8000eb8 <UART_SetConfig+0x74>
 8000eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000eb4:	429d      	cmp	r5, r3
 8000eb6:	d15e      	bne.n	8000f76 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000eb8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000ebc:	d131      	bne.n	8000f22 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000ebe:	f7ff fe7b 	bl	8000bb8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000ec2:	6861      	ldr	r1, [r4, #4]
 8000ec4:	084a      	lsrs	r2, r1, #1
 8000ec6:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000ece:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8000ed0:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8000ed2:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8000ed6:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ed8:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60cb      	str	r3, [r1, #12]
 8000ee0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000ee2:	f7ff fe81 	bl	8000be8 <HAL_RCC_GetPCLK2Freq>
 8000ee6:	e7ec      	b.n	8000ec2 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000ee8:	6860      	ldr	r0, [r4, #4]
 8000eea:	0843      	lsrs	r3, r0, #1
 8000eec:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000ef0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000ef4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ef8:	e7e9      	b.n	8000ece <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000efa:	f7ff fd63 	bl	80009c4 <HAL_RCC_GetSysClockFreq>
 8000efe:	e7e0      	b.n	8000ec2 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f00:	6860      	ldr	r0, [r4, #4]
 8000f02:	0843      	lsrs	r3, r0, #1
 8000f04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f08:	e7f4      	b.n	8000ef4 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8000f0a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e7e0      	b.n	8000ed2 <UART_SetConfig+0x8e>
    switch (clocksource)
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d833      	bhi.n	8000f7c <UART_SetConfig+0x138>
 8000f14:	e8df f003 	tbb	[pc, r3]
 8000f18:	321b1005 	.word	0x321b1005
 8000f1c:	32323227 	.word	0x32323227
 8000f20:	2a          	.byte	0x2a
 8000f21:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000f22:	f7ff fe49 	bl	8000bb8 <HAL_RCC_GetPCLK1Freq>
 8000f26:	6863      	ldr	r3, [r4, #4]
 8000f28:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000f2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f30:	b280      	uxth	r0, r0
 8000f32:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f34:	2000      	movs	r0, #0
        break;
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000f38:	f7ff fe56 	bl	8000be8 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f3c:	6863      	ldr	r3, [r4, #4]
 8000f3e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000f42:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <UART_SetConfig+0x140>)
 8000f48:	b280      	uxth	r0, r0
 8000f4a:	60d8      	str	r0, [r3, #12]
 8000f4c:	e7f2      	b.n	8000f34 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000f4e:	6862      	ldr	r2, [r4, #4]
 8000f50:	0853      	lsrs	r3, r2, #1
 8000f52:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000f56:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <UART_SetConfig+0x140>)
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	60d3      	str	r3, [r2, #12]
 8000f64:	e7e6      	b.n	8000f34 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f66:	f7ff fd2d 	bl	80009c4 <HAL_RCC_GetSysClockFreq>
 8000f6a:	e7e7      	b.n	8000f3c <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000f6c:	6862      	ldr	r2, [r4, #4]
 8000f6e:	0853      	lsrs	r3, r2, #1
 8000f70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000f74:	e7f1      	b.n	8000f5a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f76:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f7a:	d0c6      	beq.n	8000f0a <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8000f7c:	2001      	movs	r0, #1
  return ret;
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
 8000f80:	efff69f3 	.word	0xefff69f3
 8000f84:	40013800 	.word	0x40013800
 8000f88:	080019fc 	.word	0x080019fc
 8000f8c:	40004400 	.word	0x40004400

08000f90 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f92:	07da      	lsls	r2, r3, #31
{
 8000f94:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000f96:	d506      	bpl.n	8000fa6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000f98:	6801      	ldr	r1, [r0, #0]
 8000f9a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000f9c:	684a      	ldr	r2, [r1, #4]
 8000f9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000fa2:	4322      	orrs	r2, r4
 8000fa4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000fa6:	079c      	lsls	r4, r3, #30
 8000fa8:	d506      	bpl.n	8000fb8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000faa:	6801      	ldr	r1, [r0, #0]
 8000fac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000fae:	684a      	ldr	r2, [r1, #4]
 8000fb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fb4:	4322      	orrs	r2, r4
 8000fb6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000fb8:	0759      	lsls	r1, r3, #29
 8000fba:	d506      	bpl.n	8000fca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000fbc:	6801      	ldr	r1, [r0, #0]
 8000fbe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000fc0:	684a      	ldr	r2, [r1, #4]
 8000fc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fc6:	4322      	orrs	r2, r4
 8000fc8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000fca:	071a      	lsls	r2, r3, #28
 8000fcc:	d506      	bpl.n	8000fdc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000fce:	6801      	ldr	r1, [r0, #0]
 8000fd0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000fd2:	684a      	ldr	r2, [r1, #4]
 8000fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fd8:	4322      	orrs	r2, r4
 8000fda:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000fdc:	06dc      	lsls	r4, r3, #27
 8000fde:	d506      	bpl.n	8000fee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000fe0:	6801      	ldr	r1, [r0, #0]
 8000fe2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000fe4:	688a      	ldr	r2, [r1, #8]
 8000fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fea:	4322      	orrs	r2, r4
 8000fec:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000fee:	0699      	lsls	r1, r3, #26
 8000ff0:	d506      	bpl.n	8001000 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000ff2:	6801      	ldr	r1, [r0, #0]
 8000ff4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000ff6:	688a      	ldr	r2, [r1, #8]
 8000ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ffc:	4322      	orrs	r2, r4
 8000ffe:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001000:	065a      	lsls	r2, r3, #25
 8001002:	d50f      	bpl.n	8001024 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001004:	6801      	ldr	r1, [r0, #0]
 8001006:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001008:	684a      	ldr	r2, [r1, #4]
 800100a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800100e:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001010:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001014:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001016:	d105      	bne.n	8001024 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001018:	684a      	ldr	r2, [r1, #4]
 800101a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800101c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001020:	4322      	orrs	r2, r4
 8001022:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001024:	061b      	lsls	r3, r3, #24
 8001026:	d506      	bpl.n	8001036 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001028:	6802      	ldr	r2, [r0, #0]
 800102a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800102c:	6853      	ldr	r3, [r2, #4]
 800102e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001032:	430b      	orrs	r3, r1
 8001034:	6053      	str	r3, [r2, #4]
 8001036:	bd10      	pop	{r4, pc}

08001038 <UART_WaitOnFlagUntilTimeout>:
{
 8001038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800103c:	9d06      	ldr	r5, [sp, #24]
 800103e:	4604      	mov	r4, r0
 8001040:	460f      	mov	r7, r1
 8001042:	4616      	mov	r6, r2
 8001044:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001046:	6821      	ldr	r1, [r4, #0]
 8001048:	69ca      	ldr	r2, [r1, #28]
 800104a:	ea37 0302 	bics.w	r3, r7, r2
 800104e:	bf0c      	ite	eq
 8001050:	2201      	moveq	r2, #1
 8001052:	2200      	movne	r2, #0
 8001054:	42b2      	cmp	r2, r6
 8001056:	d002      	beq.n	800105e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001058:	2000      	movs	r0, #0
}
 800105a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800105e:	1c6b      	adds	r3, r5, #1
 8001060:	d0f2      	beq.n	8001048 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001062:	b99d      	cbnz	r5, 800108c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800106c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001076:	2320      	movs	r3, #32
 8001078:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800107c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001080:	2300      	movs	r3, #0
 8001082:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001086:	2003      	movs	r0, #3
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800108c:	f7ff f8ca 	bl	8000224 <HAL_GetTick>
 8001090:	eba0 0008 	sub.w	r0, r0, r8
 8001094:	4285      	cmp	r5, r0
 8001096:	d2d6      	bcs.n	8001046 <UART_WaitOnFlagUntilTimeout+0xe>
 8001098:	e7e4      	b.n	8001064 <UART_WaitOnFlagUntilTimeout+0x2c>

0800109a <HAL_UART_Transmit>:
{
 800109a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800109e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80010a0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80010a4:	2b20      	cmp	r3, #32
{
 80010a6:	4604      	mov	r4, r0
 80010a8:	460d      	mov	r5, r1
 80010aa:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80010ac:	d14c      	bne.n	8001148 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80010ae:	2900      	cmp	r1, #0
 80010b0:	d048      	beq.n	8001144 <HAL_UART_Transmit+0xaa>
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d046      	beq.n	8001144 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80010b6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d044      	beq.n	8001148 <HAL_UART_Transmit+0xae>
 80010be:	2301      	movs	r3, #1
 80010c0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010c8:	2321      	movs	r3, #33	; 0x21
 80010ca:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80010ce:	f7ff f8a9 	bl	8000224 <HAL_GetTick>
    huart->TxXferSize = Size;
 80010d2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80010d6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80010d8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80010dc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80010e0:	b292      	uxth	r2, r2
 80010e2:	b962      	cbnz	r2, 80010fe <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010e4:	9700      	str	r7, [sp, #0]
 80010e6:	4633      	mov	r3, r6
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	4620      	mov	r0, r4
 80010ec:	f7ff ffa4 	bl	8001038 <UART_WaitOnFlagUntilTimeout>
 80010f0:	b998      	cbnz	r0, 800111a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80010f2:	2320      	movs	r3, #32
 80010f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80010f8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80010fc:	e00e      	b.n	800111c <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80010fe:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001102:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001104:	3b01      	subs	r3, #1
 8001106:	b29b      	uxth	r3, r3
 8001108:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800110c:	2200      	movs	r2, #0
 800110e:	4633      	mov	r3, r6
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff ff90 	bl	8001038 <UART_WaitOnFlagUntilTimeout>
 8001118:	b118      	cbz	r0, 8001122 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800111a:	2003      	movs	r0, #3
}
 800111c:	b002      	add	sp, #8
 800111e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001122:	68a3      	ldr	r3, [r4, #8]
 8001124:	6822      	ldr	r2, [r4, #0]
 8001126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800112a:	d107      	bne.n	800113c <HAL_UART_Transmit+0xa2>
 800112c:	6923      	ldr	r3, [r4, #16]
 800112e:	b92b      	cbnz	r3, 800113c <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001130:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001138:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800113a:	e7cf      	b.n	80010dc <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800113c:	782b      	ldrb	r3, [r5, #0]
 800113e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001140:	3501      	adds	r5, #1
 8001142:	e7cb      	b.n	80010dc <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001144:	2001      	movs	r0, #1
 8001146:	e7e9      	b.n	800111c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001148:	2002      	movs	r0, #2
 800114a:	e7e7      	b.n	800111c <HAL_UART_Transmit+0x82>

0800114c <UART_CheckIdleState>:
{
 800114c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800114e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001150:	2600      	movs	r6, #0
 8001152:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001154:	f7ff f866 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800115e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001160:	d417      	bmi.n	8001192 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	075b      	lsls	r3, r3, #29
 8001168:	d50a      	bpl.n	8001180 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800116a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	462b      	mov	r3, r5
 8001174:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001178:	4620      	mov	r0, r4
 800117a:	f7ff ff5d 	bl	8001038 <UART_WaitOnFlagUntilTimeout>
 800117e:	b9a0      	cbnz	r0, 80011aa <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001180:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001182:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001184:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001188:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800118c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001190:	e00c      	b.n	80011ac <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001192:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	4632      	mov	r2, r6
 800119a:	4603      	mov	r3, r0
 800119c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80011a0:	4620      	mov	r0, r4
 80011a2:	f7ff ff49 	bl	8001038 <UART_WaitOnFlagUntilTimeout>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d0db      	beq.n	8001162 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80011aa:	2003      	movs	r0, #3
}
 80011ac:	b002      	add	sp, #8
 80011ae:	bd70      	pop	{r4, r5, r6, pc}

080011b0 <HAL_UART_Init>:
{
 80011b0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80011b2:	4604      	mov	r4, r0
 80011b4:	b360      	cbz	r0, 8001210 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80011b6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80011ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011be:	b91b      	cbnz	r3, 80011c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80011c0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80011c4:	f000 fb24 	bl	8001810 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80011c8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011ca:	2324      	movs	r3, #36	; 0x24
 80011cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80011d0:	6813      	ldr	r3, [r2, #0]
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff fe33 	bl	8000e44 <UART_SetConfig>
 80011de:	2801      	cmp	r0, #1
 80011e0:	d016      	beq.n	8001210 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80011e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011e4:	b113      	cbz	r3, 80011ec <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff fed2 	bl	8000f90 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011fc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001204:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800120c:	f7ff bf9e 	b.w	800114c <UART_CheckIdleState>
}
 8001210:	2001      	movs	r0, #1
 8001212:	bd10      	pop	{r4, pc}

08001214 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001214:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001218:	2b21      	cmp	r3, #33	; 0x21
 800121a:	d127      	bne.n	800126c <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 800121c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001220:	6802      	ldr	r2, [r0, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	b94b      	cbnz	r3, 800123a <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001226:	6811      	ldr	r1, [r2, #0]
 8001228:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800122c:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800122e:	6811      	ldr	r1, [r2, #0]
 8001230:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001234:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8001236:	2000      	movs	r0, #0
 8001238:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800123a:	6883      	ldr	r3, [r0, #8]
 800123c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001240:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001242:	d10e      	bne.n	8001262 <UART_Transmit_IT+0x4e>
 8001244:	6901      	ldr	r1, [r0, #16]
 8001246:	b961      	cbnz	r1, 8001262 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001248:	f833 1b02 	ldrh.w	r1, [r3], #2
 800124c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001250:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001252:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001254:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001258:	3b01      	subs	r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8001260:	e7e9      	b.n	8001236 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001262:	1c59      	adds	r1, r3, #1
 8001264:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	8513      	strh	r3, [r2, #40]	; 0x28
 800126a:	e7f3      	b.n	8001254 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 800126c:	2002      	movs	r0, #2
  }
}
 800126e:	4770      	bx	lr

08001270 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001270:	6801      	ldr	r1, [r0, #0]
{
 8001272:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001274:	680b      	ldr	r3, [r1, #0]
 8001276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800127a:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800127c:	2320      	movs	r3, #32
 800127e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8001282:	f7ff fdd2 	bl	8000e2a <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001286:	2000      	movs	r0, #0
 8001288:	bd08      	pop	{r3, pc}

0800128a <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800128a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800128e:	2b22      	cmp	r3, #34	; 0x22
{
 8001290:	b510      	push	{r4, lr}
 8001292:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001294:	d129      	bne.n	80012ea <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001296:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001298:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800129a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800129e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a2:	ea02 0201 	and.w	r2, r2, r1
 80012a6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80012a8:	d11b      	bne.n	80012e2 <UART_Receive_IT+0x58>
 80012aa:	6901      	ldr	r1, [r0, #16]
 80012ac:	b9c9      	cbnz	r1, 80012e2 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80012ae:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80012b2:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80012b4:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80012b8:	3c01      	subs	r4, #1
 80012ba:	b2a4      	uxth	r4, r4
 80012bc:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80012c0:	b96c      	cbnz	r4, 80012de <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012c2:	6803      	ldr	r3, [r0, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80012ca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80012d4:	2320      	movs	r3, #32
 80012d6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80012da:	f000 f8b5 	bl	8001448 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80012de:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80012e0:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80012e2:	1c59      	adds	r1, r3, #1
 80012e4:	6541      	str	r1, [r0, #84]	; 0x54
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e7e4      	b.n	80012b4 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	f042 0208 	orr.w	r2, r2, #8
 80012f0:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80012f2:	2002      	movs	r0, #2
 80012f4:	bd10      	pop	{r4, pc}
	...

080012f8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80012f8:	6802      	ldr	r2, [r0, #0]
 80012fa:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012fc:	6811      	ldr	r1, [r2, #0]
{
 80012fe:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001300:	f013 050f 	ands.w	r5, r3, #15
{
 8001304:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001306:	d107      	bne.n	8001318 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001308:	069e      	lsls	r6, r3, #26
 800130a:	d505      	bpl.n	8001318 <HAL_UART_IRQHandler+0x20>
 800130c:	068e      	lsls	r6, r1, #26
 800130e:	d503      	bpl.n	8001318 <HAL_UART_IRQHandler+0x20>
}
 8001310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001314:	f7ff bfb9 	b.w	800128a <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8001318:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800131a:	2d00      	cmp	r5, #0
 800131c:	d05c      	beq.n	80013d8 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800131e:	f010 0501 	ands.w	r5, r0, #1
 8001322:	d102      	bne.n	800132a <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001324:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001328:	d056      	beq.n	80013d8 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800132a:	07d8      	lsls	r0, r3, #31
 800132c:	d507      	bpl.n	800133e <HAL_UART_IRQHandler+0x46>
 800132e:	05ce      	lsls	r6, r1, #23
 8001330:	d505      	bpl.n	800133e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001332:	2001      	movs	r0, #1
 8001334:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001336:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001338:	f040 0001 	orr.w	r0, r0, #1
 800133c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800133e:	0798      	lsls	r0, r3, #30
 8001340:	d506      	bpl.n	8001350 <HAL_UART_IRQHandler+0x58>
 8001342:	b12d      	cbz	r5, 8001350 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001344:	2002      	movs	r0, #2
 8001346:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001348:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800134a:	f040 0004 	orr.w	r0, r0, #4
 800134e:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001350:	075e      	lsls	r6, r3, #29
 8001352:	d506      	bpl.n	8001362 <HAL_UART_IRQHandler+0x6a>
 8001354:	b12d      	cbz	r5, 8001362 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001356:	2004      	movs	r0, #4
 8001358:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800135a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800135c:	f040 0002 	orr.w	r0, r0, #2
 8001360:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001362:	0718      	lsls	r0, r3, #28
 8001364:	d507      	bpl.n	8001376 <HAL_UART_IRQHandler+0x7e>
 8001366:	068e      	lsls	r6, r1, #26
 8001368:	d400      	bmi.n	800136c <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800136a:	b125      	cbz	r5, 8001376 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800136c:	2008      	movs	r0, #8
 800136e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001370:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001372:	4302      	orrs	r2, r0
 8001374:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001376:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001378:	2a00      	cmp	r2, #0
 800137a:	d050      	beq.n	800141e <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800137c:	0698      	lsls	r0, r3, #26
 800137e:	d504      	bpl.n	800138a <HAL_UART_IRQHandler+0x92>
 8001380:	068a      	lsls	r2, r1, #26
 8001382:	d502      	bpl.n	800138a <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff ff80 	bl	800128a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800138a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800138c:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 800138e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001390:	d404      	bmi.n	800139c <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001396:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800139a:	d019      	beq.n	80013d0 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 800139c:	f7ff fcf4 	bl	8000d88 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	0656      	lsls	r6, r2, #25
 80013a6:	d50f      	bpl.n	80013c8 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013a8:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80013aa:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013b0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80013b2:	b148      	cbz	r0, 80013c8 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_UART_IRQHandler+0x128>)
 80013b6:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013b8:	f7fe ffb3 	bl	8000322 <HAL_DMA_Abort_IT>
 80013bc:	b378      	cbz	r0, 800141e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013be:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80013c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80013c6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff fd2f 	bl	8000e2c <HAL_UART_ErrorCallback>
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80013d0:	f7ff fd2c 	bl	8000e2c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013d4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80013d8:	02dd      	lsls	r5, r3, #11
 80013da:	d50e      	bpl.n	80013fa <HAL_UART_IRQHandler+0x102>
 80013dc:	0246      	lsls	r6, r0, #9
 80013de:	d50c      	bpl.n	80013fa <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80013e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013e4:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80013e6:	2320      	movs	r3, #32
 80013e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80013ec:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80013ee:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80013f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80013f6:	f000 b815 	b.w	8001424 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013fa:	061d      	lsls	r5, r3, #24
 80013fc:	d506      	bpl.n	800140c <HAL_UART_IRQHandler+0x114>
 80013fe:	0608      	lsls	r0, r1, #24
 8001400:	d504      	bpl.n	800140c <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8001402:	4620      	mov	r0, r4
}
 8001404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8001408:	f7ff bf04 	b.w	8001214 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800140c:	065a      	lsls	r2, r3, #25
 800140e:	d506      	bpl.n	800141e <HAL_UART_IRQHandler+0x126>
 8001410:	064b      	lsls	r3, r1, #25
 8001412:	d504      	bpl.n	800141e <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8001414:	4620      	mov	r0, r4
}
 8001416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 800141a:	f7ff bf29 	b.w	8001270 <UART_EndTransmit_IT>
 800141e:	bd70      	pop	{r4, r5, r6, pc}
 8001420:	08000e2f 	.word	0x08000e2f

08001424 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001424:	4770      	bx	lr
	...

08001428 <MX_GPIO_Init>:
}

/** Pinout Configuration
*/
static void MX_GPIO_Init(void)
{
 8001428:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_GPIO_Init+0x1c>)
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001432:	615a      	str	r2, [r3, #20]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	9b01      	ldr	r3, [sp, #4]

}
 800143e:	b002      	add	sp, #8
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
		rx_flag = 1;
 8001448:	2201      	movs	r2, #1
 800144a:	4b01      	ldr	r3, [pc, #4]	; (8001450 <HAL_UART_RxCpltCallback+0x8>)
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	4770      	bx	lr
 8001450:	20000045 	.word	0x20000045

08001454 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001454:	e7fe      	b.n	8001454 <_Error_Handler>
	...

08001458 <MX_USART1_UART_Init>:
{
 8001458:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800145a:	480c      	ldr	r0, [pc, #48]	; (800148c <MX_USART1_UART_Init+0x34>)
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART1_UART_Init+0x38>)
 800145e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001460:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001464:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	2300      	movs	r3, #0
 8001468:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800146a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800146e:	220c      	movs	r2, #12
 8001470:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147a:	f7ff fe99 	bl	80011b0 <HAL_UART_Init>
 800147e:	b900      	cbnz	r0, 8001482 <MX_USART1_UART_Init+0x2a>
 8001480:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001482:	f240 1155 	movw	r1, #341	; 0x155
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <MX_USART1_UART_Init+0x3c>)
 8001488:	f7ff ffe4 	bl	8001454 <_Error_Handler>
 800148c:	20000074 	.word	0x20000074
 8001490:	40013800 	.word	0x40013800
 8001494:	08001a00 	.word	0x08001a00

08001498 <SystemClock_Config>:
{
 8001498:	b500      	push	{lr}
 800149a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014a4:	2310      	movs	r3, #16
 80014a6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	a80c      	add	r0, sp, #48	; 0x30
 80014ae:	f7ff f817 	bl	80004e0 <HAL_RCC_OscConfig>
 80014b2:	bb30      	cbnz	r0, 8001502 <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b8:	2100      	movs	r1, #0
 80014ba:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014be:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c0:	910b      	str	r1, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c2:	a807      	add	r0, sp, #28
 80014c4:	f7ff fab0 	bl	8000a28 <HAL_RCC_ClockConfig>
 80014c8:	bb00      	cbnz	r0, 800150c <SystemClock_Config+0x74>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	4668      	mov	r0, sp
 80014d4:	f7ff fba0 	bl	8000c18 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	b9e8      	cbnz	r0, 8001516 <SystemClock_Config+0x7e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80014da:	f7ff fb67 	bl	8000bac <HAL_RCC_GetHCLKFreq>
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <SystemClock_Config+0x88>)
 80014e0:	fba3 3000 	umull	r3, r0, r3, r0
 80014e4:	0980      	lsrs	r0, r0, #6
 80014e6:	f7fe fef5 	bl	80002d4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80014ea:	2004      	movs	r0, #4
 80014ec:	f7fe ff08 	bl	8000300 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	4611      	mov	r1, r2
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f7fe feac 	bl	8000254 <HAL_NVIC_SetPriority>
}
 80014fc:	b017      	add	sp, #92	; 0x5c
 80014fe:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001502:	f240 1121 	movw	r1, #289	; 0x121
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <SystemClock_Config+0x8c>)
 8001508:	f7ff ffa4 	bl	8001454 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800150c:	f240 112f 	movw	r1, #303	; 0x12f
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <SystemClock_Config+0x8c>)
 8001512:	f7ff ff9f 	bl	8001454 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001516:	f44f 719b 	mov.w	r1, #310	; 0x136
 800151a:	4802      	ldr	r0, [pc, #8]	; (8001524 <SystemClock_Config+0x8c>)
 800151c:	f7ff ff9a 	bl	8001454 <_Error_Handler>
 8001520:	10624dd3 	.word	0x10624dd3
 8001524:	08001a00 	.word	0x08001a00

08001528 <main>:
{
 8001528:	b508      	push	{r3, lr}
  HAL_Init();
 800152a:	f7fe fe61 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 800152e:	f7ff ffb3 	bl	8001498 <SystemClock_Config>
  MX_GPIO_Init();
 8001532:	f7ff ff79 	bl	8001428 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001536:	f7ff ff8f 	bl	8001458 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	4986      	ldr	r1, [pc, #536]	; (8001758 <main+0x230>)
 800153e:	4887      	ldr	r0, [pc, #540]	; (800175c <main+0x234>)
 8001540:	f7ff fc2f 	bl	8000da2 <HAL_UART_Receive_IT>
 8001544:	e044      	b.n	80015d0 <main+0xa8>
			  if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 8001546:	18d1      	adds	r1, r2, r3
 8001548:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800154c:	290a      	cmp	r1, #10
 800154e:	d15a      	bne.n	8001606 <main+0xde>
 8001550:	18d1      	adds	r1, r2, r3
 8001552:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 8001556:	290d      	cmp	r1, #13
 8001558:	d155      	bne.n	8001606 <main+0xde>
 800155a:	2b02      	cmp	r3, #2
 800155c:	d953      	bls.n	8001606 <main+0xde>
					 switch(uart_command[1]){
 800155e:	7853      	ldrb	r3, [r2, #1]
 8001560:	3b41      	subs	r3, #65	; 0x41
 8001562:	2b09      	cmp	r3, #9
 8001564:	d824      	bhi.n	80015b0 <main+0x88>
 8001566:	e8df f013 	tbh	[pc, r3, lsl #1]
 800156a:	000a      	.short	0x000a
 800156c:	00640054 	.word	0x00640054
 8001570:	00920082 	.word	0x00920082
 8001574:	00bf00a2 	.word	0x00bf00a2
 8001578:	00e600de 	.word	0x00e600de
 800157c:	00ef      	.short	0x00ef
						 memcpy(studentnumber, uart_command, 2 );
 800157e:	4b78      	ldr	r3, [pc, #480]	; (8001760 <main+0x238>)
 8001580:	6819      	ldr	r1, [r3, #0]
 8001582:	8812      	ldrh	r2, [r2, #0]
 8001584:	800a      	strh	r2, [r1, #0]
						 memcpy(studentnumber+2,comma,1);
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4976      	ldr	r1, [pc, #472]	; (8001764 <main+0x23c>)
 800158a:	7809      	ldrb	r1, [r1, #0]
 800158c:	7091      	strb	r1, [r2, #2]
						 memcpy(studentnumber+3 ,studentnumber1,sizeof(studentnumber1) );
 800158e:	681c      	ldr	r4, [r3, #0]
 8001590:	4a75      	ldr	r2, [pc, #468]	; (8001768 <main+0x240>)
 8001592:	ca03      	ldmia	r2!, {r0, r1}
 8001594:	f8c4 0003 	str.w	r0, [r4, #3]
 8001598:	f8c4 1007 	str.w	r1, [r4, #7]
						 memcpy(studentnumber+11,endSimbol,sizeof(endSimbol));
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	4b73      	ldr	r3, [pc, #460]	; (800176c <main+0x244>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	f8a1 300b 	strh.w	r3, [r1, #11]
						 HAL_UART_Transmit(&huart1, ((uint8_t*)studentnumber), 13, 10);
 80015a6:	230a      	movs	r3, #10
 80015a8:	220d      	movs	r2, #13
 80015aa:	486c      	ldr	r0, [pc, #432]	; (800175c <main+0x234>)
 80015ac:	f7ff fd75 	bl	800109a <HAL_UART_Transmit>
					memset(uart_command,0x00, 40);
 80015b0:	2228      	movs	r2, #40	; 0x28
 80015b2:	2100      	movs	r1, #0
 80015b4:	4b6e      	ldr	r3, [pc, #440]	; (8001770 <main+0x248>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f000 f9fb 	bl	80019b2 <memset>
					memset(return_value,0x00, 15);
 80015bc:	4b6d      	ldr	r3, [pc, #436]	; (8001774 <main+0x24c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	6053      	str	r3, [r2, #4]
 80015c6:	6093      	str	r3, [r2, #8]
 80015c8:	f8c2 300b 	str.w	r3, [r2, #11]
					uart_counter = 0;
 80015cc:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <main+0x250>)
 80015ce:	7013      	strb	r3, [r2, #0]
	  if(rx_flag == 1){
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <main+0x254>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d1fb      	bne.n	80015d0 <main+0xa8>
		  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_buffer, 1);
 80015d8:	4c5f      	ldr	r4, [pc, #380]	; (8001758 <main+0x230>)
 80015da:	2201      	movs	r2, #1
 80015dc:	4621      	mov	r1, r4
 80015de:	485f      	ldr	r0, [pc, #380]	; (800175c <main+0x234>)
 80015e0:	f7ff fbdf 	bl	8000da2 <HAL_UART_Receive_IT>
		  rx_flag = 0;
 80015e4:	2200      	movs	r2, #0
 80015e6:	4b65      	ldr	r3, [pc, #404]	; (800177c <main+0x254>)
 80015e8:	701a      	strb	r2, [r3, #0]
		  uart_command[uart_counter] = rx_buffer;
 80015ea:	4961      	ldr	r1, [pc, #388]	; (8001770 <main+0x248>)
 80015ec:	4a62      	ldr	r2, [pc, #392]	; (8001778 <main+0x250>)
 80015ee:	7813      	ldrb	r3, [r2, #0]
 80015f0:	6808      	ldr	r0, [r1, #0]
 80015f2:	7824      	ldrb	r4, [r4, #0]
 80015f4:	54c4      	strb	r4, [r0, r3]
		  uart_counter += 1;
 80015f6:	7813      	ldrb	r3, [r2, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	7013      	strb	r3, [r2, #0]
			  if(uart_command[0] == '$' && uart_command[uart_counter-1] == '\n' && uart_command[uart_counter - 2] == '\r' && uart_counter > 2){
 80015fe:	680a      	ldr	r2, [r1, #0]
 8001600:	7811      	ldrb	r1, [r2, #0]
 8001602:	2924      	cmp	r1, #36	; 0x24
 8001604:	d09f      	beq.n	8001546 <main+0x1e>
			  else if(uart_counter > 39 ){
 8001606:	2b27      	cmp	r3, #39	; 0x27
 8001608:	d9e2      	bls.n	80015d0 <main+0xa8>
				  uart_counter = 0;
 800160a:	2200      	movs	r2, #0
 800160c:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <main+0x250>)
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e7de      	b.n	80015d0 <main+0xa8>
						memcpy(return_value, uart_command, 2);
 8001612:	4b58      	ldr	r3, [pc, #352]	; (8001774 <main+0x24c>)
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	8812      	ldrh	r2, [r2, #0]
 8001618:	800a      	strh	r2, [r1, #0]
						memcpy(return_value+2, endSimbol,2 );
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a53      	ldr	r2, [pc, #332]	; (800176c <main+0x244>)
 800161e:	8812      	ldrh	r2, [r2, #0]
 8001620:	805a      	strh	r2, [r3, #2]
						HAL_UART_Transmit(&huart1, return_val, sizeof(return_value), 1000);
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	2204      	movs	r2, #4
 8001628:	4955      	ldr	r1, [pc, #340]	; (8001780 <main+0x258>)
 800162a:	484c      	ldr	r0, [pc, #304]	; (800175c <main+0x234>)
 800162c:	f7ff fd35 	bl	800109a <HAL_UART_Transmit>
 8001630:	e7be      	b.n	80015b0 <main+0x88>
						 memcpy(return_value, uart_command, 2);
 8001632:	4b50      	ldr	r3, [pc, #320]	; (8001774 <main+0x24c>)
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	800a      	strh	r2, [r1, #0]
						 memcpy(return_value+2, endSimbol,2 );
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a4b      	ldr	r2, [pc, #300]	; (800176c <main+0x244>)
 800163e:	8812      	ldrh	r2, [r2, #0]
 8001640:	805a      	strh	r2, [r3, #2]
						 HAL_UART_Transmit(&huart1, return_val, sizeof(return_value), 1000);
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	2204      	movs	r2, #4
 8001648:	494d      	ldr	r1, [pc, #308]	; (8001780 <main+0x258>)
 800164a:	4844      	ldr	r0, [pc, #272]	; (800175c <main+0x234>)
 800164c:	f7ff fd25 	bl	800109a <HAL_UART_Transmit>
						 if(uart_command[2]=='0'){
 8001650:	4b47      	ldr	r3, [pc, #284]	; (8001770 <main+0x248>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	2b30      	cmp	r3, #48	; 0x30
 8001658:	d005      	beq.n	8001666 <main+0x13e>
						 else if(uart_command[2] == '1'){
 800165a:	2b31      	cmp	r3, #49	; 0x31
 800165c:	d1a8      	bne.n	80015b0 <main+0x88>
							auto_heating = 1;	// auto heating on
 800165e:	2201      	movs	r2, #1
 8001660:	4b48      	ldr	r3, [pc, #288]	; (8001784 <main+0x25c>)
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e7a4      	b.n	80015b0 <main+0x88>
							auto_heating = 0;	// auto heating off
 8001666:	2200      	movs	r2, #0
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <main+0x25c>)
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e7a0      	b.n	80015b0 <main+0x88>
						 memcpy(return_value, uart_command, 2);
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <main+0x24c>)
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	8812      	ldrh	r2, [r2, #0]
 8001674:	800a      	strh	r2, [r1, #0]
						 memcpy(return_value+2, endSimbol,2 );
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a3c      	ldr	r2, [pc, #240]	; (800176c <main+0x244>)
 800167a:	8812      	ldrh	r2, [r2, #0]
 800167c:	805a      	strh	r2, [r3, #2]
						 HAL_UART_Transmit(&huart1, return_val, sizeof(return_value), 1000);
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	2204      	movs	r2, #4
 8001684:	493e      	ldr	r1, [pc, #248]	; (8001780 <main+0x258>)
 8001686:	4835      	ldr	r0, [pc, #212]	; (800175c <main+0x234>)
 8001688:	f7ff fd07 	bl	800109a <HAL_UART_Transmit>
 800168c:	e790      	b.n	80015b0 <main+0x88>
						 memcpy(return_value, uart_command, 2);
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <main+0x24c>)
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	8812      	ldrh	r2, [r2, #0]
 8001694:	800a      	strh	r2, [r1, #0]
						 memcpy(return_value+2, endSimbol,2 );
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a34      	ldr	r2, [pc, #208]	; (800176c <main+0x244>)
 800169a:	8812      	ldrh	r2, [r2, #0]
 800169c:	805a      	strh	r2, [r3, #2]
						 HAL_UART_Transmit(&huart1, return_val, sizeof(return_value), 1000);
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	2204      	movs	r2, #4
 80016a4:	4936      	ldr	r1, [pc, #216]	; (8001780 <main+0x258>)
 80016a6:	482d      	ldr	r0, [pc, #180]	; (800175c <main+0x234>)
 80016a8:	f7ff fcf7 	bl	800109a <HAL_UART_Transmit>
 80016ac:	e780      	b.n	80015b0 <main+0x88>
						 memcpy(return_value, uart_command,2);
 80016ae:	4931      	ldr	r1, [pc, #196]	; (8001774 <main+0x24c>)
 80016b0:	680b      	ldr	r3, [r1, #0]
 80016b2:	8812      	ldrh	r2, [r2, #0]
 80016b4:	801a      	strh	r2, [r3, #0]
						 memcpy(return_value+2,endSimbol, 2);
 80016b6:	680b      	ldr	r3, [r1, #0]
 80016b8:	4a2c      	ldr	r2, [pc, #176]	; (800176c <main+0x244>)
 80016ba:	8812      	ldrh	r2, [r2, #0]
 80016bc:	805a      	strh	r2, [r3, #2]
						HAL_UART_Transmit(&huart1,(uint8_t*)return_value, sizeof(return_value), 1000);
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	2204      	movs	r2, #4
 80016c4:	6809      	ldr	r1, [r1, #0]
 80016c6:	4825      	ldr	r0, [pc, #148]	; (800175c <main+0x234>)
 80016c8:	f7ff fce7 	bl	800109a <HAL_UART_Transmit>
						 sizeOfTemp = uart_counter - 5;
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <main+0x250>)
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	3a05      	subs	r2, #5
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <main+0x260>)
 80016d6:	701a      	strb	r2, [r3, #0]
						 memcpy(set_temp, uart_command+3, sizeOfTemp * sizeof(uint8_t) );
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <main+0x248>)
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	3103      	adds	r1, #3
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <main+0x264>)
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	f000 f95b 	bl	800199c <memcpy>
						break;
 80016e6:	e763      	b.n	80015b0 <main+0x88>
						 memcpy(return_value, uart_command, 2);
 80016e8:	4c22      	ldr	r4, [pc, #136]	; (8001774 <main+0x24c>)
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	8812      	ldrh	r2, [r2, #0]
 80016ee:	801a      	strh	r2, [r3, #0]
						 memcpy(return_value+2, comma, 1);
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <main+0x23c>)
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	709a      	strb	r2, [r3, #2]
						 memcpy(return_value+3, set_temp, sizeOfTemp * sizeof(uint8_t));
 80016f8:	6820      	ldr	r0, [r4, #0]
 80016fa:	4e23      	ldr	r6, [pc, #140]	; (8001788 <main+0x260>)
 80016fc:	7835      	ldrb	r5, [r6, #0]
 80016fe:	462a      	mov	r2, r5
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <main+0x264>)
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	3003      	adds	r0, #3
 8001706:	f000 f949 	bl	800199c <memcpy>
						 memcpy(return_value+3+sizeOfTemp * sizeof(uint8_t),endSimbol, 2);
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	3503      	adds	r5, #3
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <main+0x244>)
 8001710:	8812      	ldrh	r2, [r2, #0]
 8001712:	535a      	strh	r2, [r3, r5]
						HAL_UART_Transmit(&huart1,(uint8_t*)return_value, (2+3+sizeOfTemp)*sizeof(uint8_t), 1000);
 8001714:	7832      	ldrb	r2, [r6, #0]
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	3205      	adds	r2, #5
 800171c:	6821      	ldr	r1, [r4, #0]
 800171e:	480f      	ldr	r0, [pc, #60]	; (800175c <main+0x234>)
 8001720:	f7ff fcbb 	bl	800109a <HAL_UART_Transmit>
						 break;
 8001724:	e744      	b.n	80015b0 <main+0x88>
						HAL_UART_Transmit(&huart1,(uint8_t*)return_val, sizeof(return_value)+1, 1000);
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	2205      	movs	r2, #5
 800172c:	4914      	ldr	r1, [pc, #80]	; (8001780 <main+0x258>)
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <main+0x234>)
 8001730:	f7ff fcb3 	bl	800109a <HAL_UART_Transmit>
						 break;
 8001734:	e73c      	b.n	80015b0 <main+0x88>
						HAL_UART_Transmit(&huart1,(uint8_t*)time, sizeof(time), 1000);
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	2204      	movs	r2, #4
 800173c:	4914      	ldr	r1, [pc, #80]	; (8001790 <main+0x268>)
 800173e:	6809      	ldr	r1, [r1, #0]
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <main+0x234>)
 8001742:	f7ff fcaa 	bl	800109a <HAL_UART_Transmit>
						 break;
 8001746:	e733      	b.n	80015b0 <main+0x88>
						HAL_UART_Transmit(&huart1,(uint8_t*)return_val, sizeof(return_val), 1000);
 8001748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174c:	220f      	movs	r2, #15
 800174e:	490c      	ldr	r1, [pc, #48]	; (8001780 <main+0x258>)
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <main+0x234>)
 8001752:	f7ff fca2 	bl	800109a <HAL_UART_Transmit>
						 break;
 8001756:	e72b      	b.n	80015b0 <main+0x88>
 8001758:	20000070 	.word	0x20000070
 800175c:	20000074 	.word	0x20000074
 8001760:	20000010 	.word	0x20000010
 8001764:	20000000 	.word	0x20000000
 8001768:	20000014 	.word	0x20000014
 800176c:	20000004 	.word	0x20000004
 8001770:	20000020 	.word	0x20000020
 8001774:	20000008 	.word	0x20000008
 8001778:	20000047 	.word	0x20000047
 800177c:	20000045 	.word	0x20000045
 8001780:	2000004c 	.word	0x2000004c
 8001784:	20000044 	.word	0x20000044
 8001788:	20000046 	.word	0x20000046
 800178c:	2000000c 	.word	0x2000000c
 8001790:	2000001c 	.word	0x2000001c

08001794 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_MspInit+0x78>)
{
 8001796:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	f7fe fd40 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	4611      	mov	r1, r2
 80017b4:	f06f 000b 	mvn.w	r0, #11
 80017b8:	f7fe fd4c 	bl	8000254 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	4611      	mov	r1, r2
 80017c0:	f06f 000a 	mvn.w	r0, #10
 80017c4:	f7fe fd46 	bl	8000254 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	4611      	mov	r1, r2
 80017cc:	f06f 0009 	mvn.w	r0, #9
 80017d0:	f7fe fd40 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	4611      	mov	r1, r2
 80017d8:	f06f 0004 	mvn.w	r0, #4
 80017dc:	f7fe fd3a 	bl	8000254 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	4611      	mov	r1, r2
 80017e4:	f06f 0003 	mvn.w	r0, #3
 80017e8:	f7fe fd34 	bl	8000254 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	4611      	mov	r1, r2
 80017f0:	f06f 0001 	mvn.w	r0, #1
 80017f4:	f7fe fd2e 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	4611      	mov	r1, r2
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7fe fd28 	bl	8000254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001804:	b003      	add	sp, #12
 8001806:	f85d fb04 	ldr.w	pc, [sp], #4
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001810:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001812:	6802      	ldr	r2, [r0, #0]
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_UART_MspInit+0x54>)
 8001816:	429a      	cmp	r2, r3
{
 8001818:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 800181a:	d120      	bne.n	800185e <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001822:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 8001830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001838:	2330      	movs	r3, #48	; 0x30
 800183a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001846:	2307      	movs	r3, #7
 8001848:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184a:	f7fe fd8f 	bl	800036c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800184e:	2025      	movs	r0, #37	; 0x25
 8001850:	4622      	mov	r2, r4
 8001852:	4621      	mov	r1, r4
 8001854:	f7fe fcfe 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001858:	2025      	movs	r0, #37	; 0x25
 800185a:	f7fe fd2f 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800185e:	b006      	add	sp, #24
 8001860:	bd10      	pop	{r4, pc}
 8001862:	bf00      	nop
 8001864:	40013800 	.word	0x40013800
 8001868:	48000800 	.word	0x48000800

0800186c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800186c:	4770      	bx	lr

0800186e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800186e:	e7fe      	b.n	800186e <HardFault_Handler>

08001870 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler>

08001872 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001872:	e7fe      	b.n	8001872 <BusFault_Handler>

08001874 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler>

08001876 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800187c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187e:	f7fe fcc9 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001882:	f7fe fd4a 	bl	800031a <HAL_SYSTICK_IRQHandler>
 8001886:	bd08      	pop	{r3, pc}

08001888 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8001888:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800188a:	4802      	ldr	r0, [pc, #8]	; (8001894 <USART1_IRQHandler+0xc>)
 800188c:	f7ff fd34 	bl	80012f8 <HAL_UART_IRQHandler>
 8001890:	bd08      	pop	{r3, pc}
 8001892:	bf00      	nop
 8001894:	20000074 	.word	0x20000074

08001898 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4915      	ldr	r1, [pc, #84]	; (80018f0 <SystemInit+0x58>)
 800189a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800189e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <SystemInit+0x5c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80018b0:	6858      	ldr	r0, [r3, #4]
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <SystemInit+0x60>)
 80018b4:	4002      	ands	r2, r0
 80018b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80018be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018c2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80018d2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80018d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d6:	f022 020f 	bic.w	r2, r2, #15
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80018dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018de:	4a07      	ldr	r2, [pc, #28]	; (80018fc <SystemInit+0x64>)
 80018e0:	4002      	ands	r2, r0
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018ec:	608b      	str	r3, [r1, #8]
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	f87fc00c 	.word	0xf87fc00c
 80018fc:	ff00fccc 	.word	0xff00fccc

08001900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001904:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001906:	e003      	b.n	8001910 <LoopCopyDataInit>

08001908 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800190a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800190c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800190e:	3104      	adds	r1, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001914:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001916:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001918:	d3f6      	bcc.n	8001908 <CopyDataInit>
	ldr	r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopForever+0x12>)
	b	LoopFillZerobss
 800191c:	e002      	b.n	8001924 <LoopFillZerobss>

0800191e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800191e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001920:	f842 3b04 	str.w	r3, [r2], #4

08001924 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <LoopForever+0x16>)
	cmp	r2, r3
 8001926:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001928:	d3f9      	bcc.n	800191e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800192a:	f7ff ffb5 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f000 f811 	bl	8001954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001932:	f7ff fdf9 	bl	8001528 <main>

08001936 <LoopForever>:

LoopForever:
    b LoopForever
 8001936:	e7fe      	b.n	8001936 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001938:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800193c:	08001a3c 	.word	0x08001a3c
	ldr	r0, =_sdata
 8001940:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001944:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 8001948:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 800194c:	20000110 	.word	0x20000110

08001950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_2_IRQHandler>
	...

08001954 <__libc_init_array>:
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	4e0d      	ldr	r6, [pc, #52]	; (800198c <__libc_init_array+0x38>)
 8001958:	4c0d      	ldr	r4, [pc, #52]	; (8001990 <__libc_init_array+0x3c>)
 800195a:	1ba4      	subs	r4, r4, r6
 800195c:	10a4      	asrs	r4, r4, #2
 800195e:	2500      	movs	r5, #0
 8001960:	42a5      	cmp	r5, r4
 8001962:	d109      	bne.n	8001978 <__libc_init_array+0x24>
 8001964:	4e0b      	ldr	r6, [pc, #44]	; (8001994 <__libc_init_array+0x40>)
 8001966:	4c0c      	ldr	r4, [pc, #48]	; (8001998 <__libc_init_array+0x44>)
 8001968:	f000 f82c 	bl	80019c4 <_init>
 800196c:	1ba4      	subs	r4, r4, r6
 800196e:	10a4      	asrs	r4, r4, #2
 8001970:	2500      	movs	r5, #0
 8001972:	42a5      	cmp	r5, r4
 8001974:	d105      	bne.n	8001982 <__libc_init_array+0x2e>
 8001976:	bd70      	pop	{r4, r5, r6, pc}
 8001978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800197c:	4798      	blx	r3
 800197e:	3501      	adds	r5, #1
 8001980:	e7ee      	b.n	8001960 <__libc_init_array+0xc>
 8001982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001986:	4798      	blx	r3
 8001988:	3501      	adds	r5, #1
 800198a:	e7f2      	b.n	8001972 <__libc_init_array+0x1e>
 800198c:	08001a34 	.word	0x08001a34
 8001990:	08001a34 	.word	0x08001a34
 8001994:	08001a34 	.word	0x08001a34
 8001998:	08001a38 	.word	0x08001a38

0800199c <memcpy>:
 800199c:	b510      	push	{r4, lr}
 800199e:	1e43      	subs	r3, r0, #1
 80019a0:	440a      	add	r2, r1
 80019a2:	4291      	cmp	r1, r2
 80019a4:	d100      	bne.n	80019a8 <memcpy+0xc>
 80019a6:	bd10      	pop	{r4, pc}
 80019a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80019b0:	e7f7      	b.n	80019a2 <memcpy+0x6>

080019b2 <memset>:
 80019b2:	4402      	add	r2, r0
 80019b4:	4603      	mov	r3, r0
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d100      	bne.n	80019bc <memset+0xa>
 80019ba:	4770      	bx	lr
 80019bc:	f803 1b01 	strb.w	r1, [r3], #1
 80019c0:	e7f9      	b.n	80019b6 <memset+0x4>
	...

080019c4 <_init>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr

080019d0 <_fini>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	bf00      	nop
 80019d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d6:	bc08      	pop	{r3}
 80019d8:	469e      	mov	lr, r3
 80019da:	4770      	bx	lr
